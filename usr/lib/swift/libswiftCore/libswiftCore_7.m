uint64_t anonymous namespace'::ExtendedExistentialTypeCacheEntry::Key::Key(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  __int16 v11;
  char *v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int16 v29;
  unsigned __int16 v30;
  char *v31;
  int *v32;
  unsigned __int16 v33;
  unsigned __int16 v34;
  uint64_t v35;

  swift::TargetExtendedExistentialTypeShape<swift::InProcess>::getGeneralizationSignature(a2, (uint64_t)&v29);
  v6 = v33;
  v7 = v34;
  v8 = v35;
  v9 = v29;
  if (v29)
  {
    v10 = 0;
    v11 = 0;
    v12 = v31;
    do
    {
      v13 = *v12++;
      v14 = v13 < 0;
      if (v13 < 0) {
        v10 = v11 + 1;
      }
      if (v14) {
        ++v11;
      }
      --v9;
    }
    while (v9);
    v15 = v30;
    if (v30) {
      goto LABEL_9;
    }
LABEL_15:
    v16 = 0;
    goto LABEL_16;
  }
  v10 = 0;
  v15 = v30;
  if (!v30) {
    goto LABEL_15;
  }
LABEL_9:
  v16 = 0;
  v17 = 0;
  v18 = v32;
  v19 = 12 * v15;
  do
  {
    v20 = *v18;
    v18 += 3;
    v21 = v20 & 0x9F;
    if (v21 == 128) {
      v16 = ++v17;
    }
    v19 -= 12;
  }
  while (v19);
LABEL_16:
  *(void *)a1 = a3;
  *(_WORD *)(a1 + 8) = v10;
  *(_WORD *)(a1 + 10) = v16;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(void *)(a1 + 16) = v8;
  v22 = 1455063249 * v10;
  if (v10)
  {
    v23 = 0;
    v24 = v10 + v7;
    do
    {
      if (v23 >= v6 || *(_WORD *)(v8 + 8 * v23) || (v25 = v8 + 8 * v23, v7 != *(unsigned __int16 *)(v25 + 2)))
      {
        v22 = __ROR8__(v22, 10) ^ (*(void *)(a3 + 8 * v7) >> 19) ^ *(void *)(a3 + 8 * v7);
      }
      else
      {
        v26 = *(void *)(a3 + 8 * *(unsigned __int16 *)(v25 + 4));
        ++v23;
        if (v26)
        {
          v27 = 0;
          do
          {
            v22 = __ROR8__(v22, 10) ^ (*(void *)((*(void *)(a3 + 8 * v7) & 0xFFFFFFFFFFFFFFFELL) + 8 * v27) >> 19) ^ *(void *)((*(void *)(a3 + 8 * v7) & 0xFFFFFFFFFFFFFFFELL) + 8 * v27);
            ++v27;
          }
          while (v26 > v27);
        }
      }
      ++v7;
    }
    while (v7 != v24);
  }
  *(_DWORD *)(a1 + 24) = (unint64_t)(668265261 * v22) >> 10;
  *(void *)(a1 + 32) = a2;
  return a1;
}

void *swift_getExtendedExistentialTypeMetadata(const char *a1, uint64_t a2)
{
  ExtendedExistentialTypeShape = (unsigned int *)swift_getExtendedExistentialTypeShape(a1);

  return swift_getExtendedExistentialTypeMetadata_unique(ExtendedExistentialTypeShape, a2);
}

uint64_t swift_getForeignTypeMetadata(__int16 a1, uint64_t *a2)
{
  if (*a2 == 516 || *a2 == 515)
  {
    uint64_t v4 = a2[1];
    if (v4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = a2[1];
    if (v4)
    {
LABEL_6:
      uint64_t v5 = v4;
      goto LABEL_8;
    }
  }
  uint64_t v5 = 0;
LABEL_8:
  if (qword_1EB1F8910 != -1) {
  v79 = &unk_1EB1F8908;
  }
  unint64_t v80 = 0;
  __int16 v81 = 0;
  v82 = (unsigned char *)v5;
  explicit = (atomic_ullong *)atomic_load_explicit(&qword_1EB1F8900, memory_order_acquire);
    goto LABEL_132;
  atomic_fetch_add_explicit(&ForeignMetadata, 1u, memory_order_acquire);
  do
  {
    unint64_t v7 = atomic_load_explicit(&qword_1EB1F88E0, memory_order_acquire);
    unint64_t v8 = atomic_load_explicit(&qword_1EB1F88E8, memory_order_acquire);
    unint64_t v9 = atomic_load_explicit(&dword_1EB1F88DC, memory_order_acquire);
  }
  while (v7 != atomic_load_explicit(&qword_1EB1F88E0, memory_order_acquire));
  if (v7) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v9 != 0)
  {
    if (v12)
    {
      qword_1EB1F8900 = *v12;
      explicit = (atomic_ullong *)*v12;
      atomic_fetch_add_explicit(&ForeignMetadata, 0xFFFFFFFF, memory_order_release);
LABEL_132:
      goto LABEL_133;
    }
  }
  atomic_fetch_add_explicit(&ForeignMetadata, 0xFFFFFFFF, memory_order_release);
  v77 = v82;
  v83 = v82;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F88F0);
  unint64_t v13 = qword_1EB1F88E8;
  uint64_t v14 = qword_1EB1F88E8 & 3;
  BOOL v15 = v14 == 0;
  if ((qword_1EB1F88E8 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v15 = 1;
  }
  BOOL v75 = v15;
  unint64_t v76 = qword_1EB1F88E8 & 0xFFFFFFFFFFFFFFFCLL;
  if (v15) {
    int v16 = 4;
  }
  else {
    int v16 = *(unsigned __int8 *)(qword_1EB1F88E8 & 0xFFFFFFFFFFFFFFFCLL);
  }
  unint64_t v17 = dword_1EB1F88DC;
  atomic_ullong v18 = qword_1EB1F88E0;
  if (qword_1EB1F88E0) {
    uint64_t v19 = qword_1EB1F88E0 + 8;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v20)
  {
    explicit = *v20;
    __dmb(0xBu);
    if (ForeignMetadata)
    {
LABEL_33:
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F88F0);
      qword_1EB1F8900 = (uint64_t)explicit;
      goto LABEL_132;
    }
    v28 = (void **)qword_1EB1F88F8;
    if (!qword_1EB1F88F8)
    {
      qword_1EB1F88F8 = 0;
      goto LABEL_33;
    }
    v73 = v20;
    do
    {
      v29 = (void **)*v28;
      free(v28[1]);
      free(v28);
      v28 = v29;
    }
    while (v29);
    goto LABEL_131;
  }
  v72 = (_DWORD *)v18;
  v73 = 0;
  __src = (void *)(v18 + 8);
  uint64_t v71 = (v17 + 1);
  v74 = a2;
  if ((1 << v16) / (unint64_t)((1 << v16) - v71) < 4)
  {
    unint64_t v30 = v13;
  }
  else
  {
    unint64_t v68 = v17;
    __int16 v69 = a1;
    char v22 = v16;
    unsigned int v23 = (v16 + 1);
    if (v23 >= 0x11) {
      unsigned int v24 = 4;
    }
    else {
      unsigned int v24 = 2;
    }
    if (v23 < 9) {
      size_t v25 = 1;
    }
    else {
      size_t v25 = v24;
    }
    unint64_t v26 = (unint64_t)malloc_type_calloc(2 << v16, v25, 0x4269077AuLL);
    if (!v26) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    uint64_t v27 = v19;
    if (v25 != 1)
    {
      if (v25 == 4) {
        size_t v25 = 3;
      }
      else {
        size_t v25 = 2;
      }
    }
    unint64_t v30 = v25 | v26;
    *(unsigned char *)unint64_t v26 = v16 + 1;
    if (v16)
    {
      uint64_t v31 = ~(-2 << v16);
      unint64_t v32 = v76;
      if (!v14) {
        unint64_t v32 = 0;
      }
      unint64_t v78 = v32;
      int v33 = v30 & 3;
      if ((v30 & 3) != 0) {
        unint64_t v34 = v26 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else {
        unint64_t v34 = 0;
      }
      uint64_t v35 = 1;
      while (2)
      {
        switch(v13 & 3)
        {
          case 0uLL:
            uint64_t v36 = (v13 >> (4 * v35)) & 0xF;
            if (!v36) {
              goto LABEL_60;
            }
            goto LABEL_69;
          case 1uLL:
            LODWORD(v36) = *(unsigned __int8 *)(v78 + v35);
            if (!*(unsigned char *)(v78 + v35)) {
              goto LABEL_60;
            }
            goto LABEL_69;
          case 2uLL:
            LODWORD(v36) = *(unsigned __int16 *)(v78 + 2 * v35);
            if (!*(_WORD *)(v78 + 2 * v35)) {
              goto LABEL_60;
            }
            goto LABEL_69;
          case 3uLL:
            LODWORD(v36) = *(_DWORD *)(v78 + 4 * v35);
            if (!v36) {
              goto LABEL_60;
            }
LABEL_69:
            v37 = *(void **)(*(void *)(v27 + 8 * (v36 - 1)) + 8);
            if (*v37 == 516 || *v37 == 515)
            {
              uint64_t v38 = v37[1];
              if (v38) {
                goto LABEL_74;
              }
            }
            else
            {
              uint64_t v38 = v37[1];
              if (v38)
              {
LABEL_74:
                uint64_t v39 = v38;
                goto LABEL_76;
              }
            }
            uint64_t v39 = 0;
LABEL_76:
            swift::ParsedTypeIdentity::parse(v39, (uint64_t)v84);
            unint64_t v40 = __swift::__runtime::llvm::hash_value(v85, v86);
            uint64_t v27 = v19;
            while (1)
            {
              unint64_t v42 = v40 & v31;
              if ((v40 & v31) != 0)
              {
                switch(v30 & 3)
                {
                  case 1uLL:
                    LODWORD(v41) = *(unsigned __int8 *)(v34 + v42);
                    break;
                  case 2uLL:
                    LODWORD(v41) = *(unsigned __int16 *)(v34 + 2 * v42);
                    break;
                  case 3uLL:
                    LODWORD(v41) = *(_DWORD *)(v34 + 4 * v42);
                    break;
                  default:
                    uint64_t v41 = (v30 >> (4 * v42)) & 0xF;
                    break;
                }
                if (!v41) {
                  break;
                }
              }
              unint64_t v40 = v42 + 1;
            }
            if (v33 == 3)
            {
              *(_DWORD *)(v34 + 4 * v42) = v36;
            }
            else if (v33 == 2)
            {
              *(_WORD *)(v34 + 2 * v42) = v36;
            }
            else
            {
              *(unsigned char *)(v34 + v42) = v36;
            }
LABEL_60:
            if (!((unint64_t)++v35 >> v22)) {
              continue;
            }
            goto LABEL_89;
          default:
            JUMPOUT(0);
        }
      }
    }
LABEL_89:
    atomic_store(v30, (unint64_t *)&qword_1EB1F88E8);
    if (!v75)
    {
      v43 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
      uint64_t v27 = v19;
      void *v43 = qword_1EB1F88F8;
      v43[1] = v76;
      qword_1EB1F88F8 = (uint64_t)v43;
    }
    unint64_t v17 = v68;
    a1 = v69;
  }
  unsigned int v44 = v21;
  if (!v72 || (unint64_t v45 = (unint64_t)v72, v17 >= *v72))
  {
    unint64_t v46 = v17 + (v17 >> 2);
    if (v46 <= v17 + 1) {
      unint64_t v46 = v17 + 1;
    }
    size_t v47 = malloc_good_size(8 * v46 + 8);
    v48 = malloc_type_malloc(v47, 0x1000D770uLL);
    if (!v48) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v45 = (unint64_t)v48;
    _DWORD *v48 = (v47 + 0x7FFFFFFF8) >> 3;
    if (v72)
    {
      memcpy(v48 + 2, __src, 8 * v17);
      v49 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
      void *v49 = qword_1EB1F88F8;
      v49[1] = v72;
      qword_1EB1F88F8 = (uint64_t)v49;
    }
    atomic_store(v45, (unint64_t *)&qword_1EB1F88E0);
  }
  unint64_t v50 = v17;
  unint64_t v51 = v45 + 8;
  v84[0] = 15;
  explicit = (atomic_ullong *)swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)v84, 0x10uLL, 8);
  ForeignMetadataInitialization = (int *)swift::TargetTypeContextDescriptor<swift::InProcess>::getForeignMetadataInitialization(v77);
  uint64_t v53 = *ForeignMetadataInitialization;
  if (v53 && (int *)((char *)ForeignMetadataInitialization + v53))
  {
    v54 = (ValueWitnessTable *)*(v74 - 1);
    unsigned int v55 = v44;
    if (!v54)
    {
      if (&value witness table for Builtin.UnknownObject) {
        v54 = &value witness table for Builtin.UnknownObject;
      }
      else {
        v54 = 0;
      }
      *(v74 - 1) = (uint64_t)v54;
    }
    if ((v54->flags & 0x400000) != 0) {
      char v57 = 1;
    }
    else {
      char v57 = 2;
    }
    goto LABEL_113;
  }
  if ((areAllTransitiveMetadataComplete_cheap(v74) & 1) == 0)
  {
    char v57 = 3;
    unsigned int v55 = v44;
LABEL_113:
    HIBYTE(v81) = v57;
    unint64_t v45 = v80;
    if (!v80)
    {
      unint64_t v45 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
      *(_OWORD *)unint64_t v45 = 0u;
      *(_OWORD *)(v45 + 16) = 0u;
      *(_OWORD *)(v45 + 32) = 0u;
      *(void *)unint64_t v45 = 1;
      *(void *)(v45 + 16) = 0;
      *(void *)(v45 + 24) = 0;
      os_unfair_lock_lock((os_unfair_lock_t)(v45 + 8));
      unsigned int v55 = v44;
      unint64_t v80 = v45;
    }
    uint64_t v56 = v45 | v57 | 8u;
    goto LABEL_116;
  }
  uint64_t v56 = 4;
  HIBYTE(v81) = 4;
  unsigned int v55 = v44;
LABEL_116:
  atomic_ullong *explicit = v56;
  explicit[1] = (atomic_ullong)v74;
  *(void *)(v51 + 8 * v50) = explicit;
  atomic_store(v71, (unsigned int *)&dword_1EB1F88DC);
  switch((int)v45)
  {
    case 1:
      unint64_t v58 = v30 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v30 & 3) == 0) {
        unint64_t v58 = 0;
      }
      atomic_store(v71, (unsigned __int8 *)(v58 + v55));
      break;
    case 2:
      unint64_t v59 = v30 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v30 & 3) == 0) {
        unint64_t v59 = 0;
      }
      atomic_store(v71, (unsigned __int16 *)(v59 + 2 * v55));
      break;
    case 3:
      unint64_t v60 = v30 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v30 & 3) == 0) {
        unint64_t v60 = 0;
      }
      atomic_store(v71, (unsigned int *)(v60 + 4 * v55));
      break;
    default:
      atomic_store((v71 << (4 * v55)) | v30, (unint64_t *)&qword_1EB1F88E8);
      break;
  }
  __dmb(0xBu);
  if (ForeignMetadata)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F88F0);
    qword_1EB1F8900 = (uint64_t)explicit;
    goto LABEL_138;
  }
  v61 = (void **)qword_1EB1F88F8;
  if (qword_1EB1F88F8)
  {
    do
    {
      v62 = (void **)*v61;
      free(v61[1]);
      free(v61);
      v61 = v62;
    }
    while (v62);
  }
LABEL_131:
  qword_1EB1F88F8 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F88F0);
  qword_1EB1F8900 = (uint64_t)explicit;
  if (v73) {
    goto LABEL_132;
  }
LABEL_138:
  if (v80) {
    LOBYTE(v81) = 1;
  }
  if (HIBYTE(v81) != 4)
  {
    if (!HIBYTE(v81)) {
      abort();
    }
LABEL_133:
    uint64_t v64 = v63;
    unint64_t v65 = v80;
    if (!v80) {
      return v64;
    }
    goto LABEL_134;
  }
  uint64_t v64 = explicit[1];
  unint64_t v65 = v80;
  if (!v80) {
    return v64;
  }
LABEL_134:
  os_unfair_lock_unlock((os_unfair_lock_t)(v65 + 8));
  uint64_t v66 = *(void *)(v65 + 16);
  *(void *)(v65 + 16) = 0;
  if (v66) {
    MEMORY[0x1852FF000](v66, 0x80C4018A671A6);
  }
  swift_slowDealloc((void *)v65);
  return v64;
}

void *swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(unint64_t a1, void *a2)
{
  v2 = a2;
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0)
  {
    *a2 = swift_allocBox(a1);
    return (void *)v3;
  }
  return v2;
}

void swift::TargetMetadata<swift::InProcess>::deallocateBoxForExistentialIn(uint64_t a1, uint64_t *a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    swift_deallocBox(*a2);
  }
}

void *swift::TargetMetadata<swift::InProcess>::allocateBufferIn(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return v4;
  }
  return a2;
}

uint64_t swift::TargetMetadata<swift::InProcess>::projectBufferFrom(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void swift::TargetMetadata<swift::InProcess>::deallocateBufferIn(uint64_t a1, void **a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0) {
    swift_slowDealloc(*a2);
  }
}

const char *swift::getStringForMetadataKind(swift *this, MetadataKind a2)
{
  if ((int)this <= 767)
  {
    switch((int)this)
    {
      case 512:
        result = "Struct";
        break;
      case 513:
        result = "Enum";
        break;
      case 514:
        result = "Optional";
        break;
      case 515:
        result = "ForeignClass";
        break;
      case 516:
        result = "ForeignReferenceType";
        break;
      default:
        if (this) {
LABEL_26:
        }
          result = "<unknown>";
        else {
          result = "Class";
        }
        break;
    }
  }
  else
  {
    switch((int)this)
    {
      case 768:
        result = "Opaque";
        break;
      case 769:
        result = "Tuple";
        break;
      case 770:
        result = "Function";
        break;
      case 771:
        result = "Existential";
        break;
      case 772:
        result = "Metatype";
        break;
      case 773:
        result = "ObjCClassWrapper";
        break;
      case 774:
        result = "ExistentialMetatype";
        break;
      case 775:
        result = "ExtendedExistential";
        break;
      default:
        switch((int)this)
        {
          case 1280:
            result = "HeapGenericLocalVariable";
            break;
          case 1281:
            result = "ErrorObject";
            break;
          case 1282:
            result = "Task";
            break;
          case 1283:
            result = "Job";
            break;
          default:
            if (this != 1024) {
              goto LABEL_26;
            }
            result = "HeapLocalVariable";
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t swift_getWitnessTable(int *a1, unint64_t *a2, uint64_t a3)
{
  return swift::_getWitnessTable(a1, a2, a3);
}

uint64_t swift::_getWitnessTable(int *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1[3];
  if ((v4 & 0x20000) == 0) {
    goto LABEL_2;
  }
  BOOL v10 = a1 + 4;
  v11 = (_DWORD *)(((unint64_t)&a1[3 * BYTE1(v4) + 4 + ((v4 >> 6) & 1)] + ((v4 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((v4 & 0x10000) != 0)
  {
    uint64_t v12 = *v11;
    if (!v11) {
      goto LABEL_2;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (!v11) {
      goto LABEL_2;
    }
  }
  unint64_t v17 = &v11[(v4 >> 16) & 1];
  atomic_ullong v18 = (unint64_t *)&v17[2 * v12];
  unsigned int v19 = *((unsigned __int16 *)v18 + 1);
  if ((v19 & 1) == 0 && ((v4 & 0x10000) == 0 || !*v11))
  {
    uint64_t v20 = *a1;
    if (!v20) {
      goto LABEL_36;
    }
    unsigned int v21 = (char **)((char *)a1 + (v20 & 0xFFFFFFFFFFFFFFFELL));
    if (v20)
    {
      char v22 = *v21;
      goto LABEL_38;
    }
    if (v21) {
      char v22 = (char *)a1 + (v20 & 0xFFFFFFFFFFFFFFFELL);
    }
    else {
LABEL_36:
    }
      char v22 = 0;
LABEL_38:
    if (*((_DWORD *)v22 + 4) + 1 == *(unsigned __int16 *)v18 && v19 <= 1 && *((_DWORD *)v18 + 1) == 0)
    {
LABEL_2:
      uint64_t v5 = a1[2];
      unint64_t v6 = (unint64_t)a1 + v5 + 8;
      if (v5) {
        _ZF = v6 == 0;
      }
      else {
        _ZF = 1;
      }
      if (_ZF) {
        return 0;
      }
      if ((v4 & 0x80) != 0)
      {
        unint64_t v13 = a1 + 1;
        unsigned int v14 = (v4 >> 3) & 7;
        if (v14 == 1)
        {
          uint64_t v23 = *v13;
          unsigned int v24 = (char **)((char *)v13 + v23);
          if (v23) {
            size_t v25 = v24;
          }
          else {
            size_t v25 = 0;
          }
          int v16 = *v25;
          if (!*v25) {
            goto LABEL_32;
          }
        }
        else
        {
          if (v14) {
            goto LABEL_32;
          }
          uint64_t v15 = *v13;
          if (!v15 || !(int *)((char *)v13 + v15)) {
            goto LABEL_32;
          }
          int v16 = (char *)v13 + v15;
        }
        if (v16)
        {
          uint64_t v26 = (uint64_t)v16;
          uint64_t v27 = *a1;
          if (!v27) {
            goto LABEL_340;
          }
LABEL_33:
          v28 = (uint64_t *)((char *)a1 + (v27 & 0xFFFFFFFFFFFFFFFELL));
          if ((v27 & 1) == 0)
          {
            if (!v28) {
              goto LABEL_340;
            }
            goto LABEL_337;
          }
LABEL_338:
          if (*v28)
          {
            uint64_t v185 = *v28;
            goto LABEL_341;
          }
LABEL_340:
          uint64_t v185 = 0;
          goto LABEL_341;
        }
LABEL_32:
        uint64_t v26 = 0;
        uint64_t v27 = *a1;
        if (!v27) {
          goto LABEL_340;
        }
        goto LABEL_33;
      }
      return v6;
    }
  }
  unint64_t v30 = a1 + 1;
  unsigned int v31 = (v4 >> 3) & 7;
  if (v31 == 1)
  {
    uint64_t v34 = *v30;
    if (v34) {
      uint64_t v35 = (unsigned char **)((char *)v30 + v34);
    }
    else {
      uint64_t v35 = 0;
    }
    int v33 = *v35;
    if (!*v35) {
      goto LABEL_58;
    }
  }
  else
  {
    if (v31) {
      goto LABEL_58;
    }
    uint64_t v32 = *v30;
    if (!v32 || !(int *)((char *)v30 + v32)) {
      goto LABEL_58;
    }
    int v33 = (char *)v30 + v32;
  }
  if ((*v33 & 0x80) == 0)
  {
    uint64_t v36 = *((int *)v18 + 2);
    if (v36 && v36 != -8 - (void)v18)
    {
      if ((v4 & 0x10000) != 0) {
        uint64_t v68 = *v11;
      }
      else {
        uint64_t v68 = 0;
      }
      uint64_t v71 = &v17[2 * v68];
      uint64_t v72 = (int)v71[2];
      v73 = (atomic_ullong *)((char *)v71 + v72 + 8);
      if (v72) {
        v74 = v73;
      }
      else {
        v74 = 0;
      }
      unint64_t v6 = *v74;
      if (*v74) {
        return v6;
      }
      uint64_t v75 = *a1;
      if (v75)
      {
        unint64_t v76 = (char **)((char *)a1 + (v75 & 0xFFFFFFFFFFFFFFFELL));
        if (v75)
        {
          v77 = *v76;
LABEL_346:
          if ((v4 & 0x10000) != 0) {
            uint64_t v186 = *v11;
          }
          else {
            uint64_t v186 = 0;
          }
          size_t v187 = 8 * ((*((_DWORD *)v77 + 4) + 1) + ((unint64_t)HIWORD(v17[2 * v186]) >> 1));
          LOWORD(v229) = 19;
          _X22 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v229, v187, 8);
          bzero(_X22, v187);
          unint64_t v6 = (unint64_t)instantiateWitnessTable(a2, v3, 0, (uint64_t)_X22);
          unint64_t v189 = 0;
          atomic_compare_exchange_strong_explicit(v74, &v189, v6, memory_order_release, memory_order_relaxed);
          if (v189)
          {
            _X24 = 0;
            _X25 = 0;
            __asm { CASP            X24, X25, X24, X25, [X19] }
            unint64_t v6 = v189;
            if (_X22 + 4 == _X24)
            {
              if (swift::runtime::environment::initializeToken != -1) {
                dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
              }
              if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE_variable) {
                *(void *)_X22 = 0xAAAAAAAAAAAAAAAALL;
              }
              __asm { CASP            X24, X25, X22, X23, [X19] }
              return v189;
            }
          }
          return v6;
        }
        if (v76)
        {
          v77 = (char *)a1 + (v75 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_346;
        }
      }
      v77 = 0;
      goto LABEL_346;
    }
  }
LABEL_58:
  uint64_t v38 = *((int *)v18 + 2);
  uint64_t v39 = (unint64_t *)((char *)v18 + v38 + 8);
  if (v38) {
    BOOL v40 = v39 == 0;
  }
  else {
    BOOL v40 = 1;
  }
  if (v40)
  {
    v228 = v18;
    explicit = (void *)atomic_load_explicit(&qword_1E8ECF9E8, memory_order_acquire);
    if (explicit && (unint64_t *)*explicit == v228) {
      goto LABEL_179;
    }
    do
    {
      unint64_t v42 = atomic_load_explicit(&qword_1E8ECF9C8, memory_order_acquire);
      unint64_t v43 = atomic_load_explicit(&qword_1E8ECF9D0, memory_order_acquire);
      unint64_t v44 = atomic_load_explicit(&dword_1E8ECF9C4, memory_order_acquire);
    }
    while (v42 != atomic_load_explicit(&qword_1E8ECF9C8, memory_order_acquire));
    if (v42) {
      BOOL v45 = v43 == 0;
    }
    else {
      BOOL v45 = 1;
    }
    if (!v45 && v44 != 0)
    {
      if (v47)
      {
        qword_1E8ECF9E8 = *v47;
        explicit = (void *)*v47;
LABEL_179:
        uint64_t v39 = explicit + 1;
        goto LABEL_180;
      }
    }
    v226 = v3 + 1;
    v221 = v3 + 4;
    v229 = v228;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1E8ECF9D8);
    uint64_t v48 = qword_1E8ECF9D0;
    uint64_t v218 = qword_1E8ECF9D0 & 3;
    BOOL v49 = v218 == 0;
    if ((qword_1E8ECF9D0 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v49 = 1;
    }
    BOOL lock = v49;
    unint64_t v225 = qword_1E8ECF9D0 & 0xFFFFFFFFFFFFFFFCLL;
    if (v49) {
      int v50 = 4;
    }
    else {
      int v50 = *(unsigned __int8 *)(qword_1E8ECF9D0 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v51 = dword_1E8ECF9C4;
    v52 = (_DWORD *)qword_1E8ECF9C8;
    if (qword_1E8ECF9C8) {
      uint64_t v53 = qword_1E8ECF9C8 + 8;
    }
    else {
      uint64_t v53 = 0;
    }
    if (v54)
    {
      explicit = *v54;
      __dmb(0xBu);
      {
        unint64_t v30 = v3 + 1;
LABEL_178:
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E8ECF9D8);
        qword_1E8ECF9E8 = (uint64_t)explicit;
        BOOL v10 = v221;
        goto LABEL_179;
      }
      uint64_t v66 = (void **)qword_1E8ECF9E0;
      unint64_t v30 = v3 + 1;
      if (qword_1E8ECF9E0)
      {
        do
        {
          v67 = (void **)*v66;
          free(v66[1]);
          free(v66);
          uint64_t v66 = v67;
        }
        while (v67);
      }
    }
    else
    {
      uint64_t v210 = v53;
      unint64_t v212 = v51;
      uint64_t v214 = v48;
      v216 = v52;
      __src = v52 + 2;
      uint64_t v56 = (v51 + 1);
      v199 = v3;
      if ((1 << v50) / (unint64_t)((1 << v50) - v56) < 4)
      {
        unint64_t v69 = v51;
        unint64_t v70 = v48;
        unint64_t v30 = v226;
      }
      else
      {
        int v57 = v50;
        char v58 = v50;
        unsigned __int8 v59 = v50 + 1;
        char v204 = v58;
        if (v59 >= 0x11u) {
          unsigned int v60 = 4;
        }
        else {
          unsigned int v60 = 2;
        }
        if (v59 < 9u) {
          size_t v61 = 1;
        }
        else {
          size_t v61 = v60;
        }
        unint64_t v62 = (unint64_t)malloc_type_calloc(2 << v58, v61, 0x4269077AuLL);
        if (!v62) {
          swift::hashable_support::findHashableBaseTypeOfHashableType();
        }
        unint64_t v63 = v48;
        uint64_t v64 = v53;
        char v65 = v204;
        v202 = a2;
        if (v61 != 1)
        {
          if (v61 == 4) {
            size_t v61 = 3;
          }
          else {
            size_t v61 = 2;
          }
        }
        unint64_t v70 = v61 | v62;
        *(unsigned char *)unint64_t v62 = v59;
        if (v57)
        {
          if (v218) {
            unint64_t v78 = v225;
          }
          else {
            unint64_t v78 = 0;
          }
          int v79 = v70 & 3;
          if ((v70 & 3) != 0) {
            unint64_t v80 = v62 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t v80 = 0;
          }
          uint64_t v81 = 1;
          v82 = (void *)&unk_1EB1F3000;
          while (2)
          {
            switch(v214 & 3)
            {
              case 0:
                uint64_t v83 = (v63 >> (4 * v81)) & 0xF;
                if (!v83) {
                  goto LABEL_125;
                }
                goto LABEL_134;
              case 1:
                LODWORD(v83) = *(unsigned __int8 *)(v78 + v81);
                if (!*(unsigned char *)(v78 + v81)) {
                  goto LABEL_125;
                }
                goto LABEL_134;
              case 2:
                LODWORD(v83) = *(unsigned __int16 *)(v78 + 2 * v81);
                if (!*(_WORD *)(v78 + 2 * v81)) {
                  goto LABEL_125;
                }
                goto LABEL_134;
              case 3:
                LODWORD(v83) = *(_DWORD *)(v78 + 4 * v81);
                if (v83)
                {
LABEL_134:
                  unint64_t v84 = **(void **)(v64 + 8 * (v83 - 1));
                  {
                    unint64_t v219 = v78;
                    v82 = &unk_1EB1F3000;
                    unint64_t v78 = v219;
                    char v65 = v204;
                    uint64_t v64 = v210;
                    unint64_t v63 = v214;
                    if (v90)
                    {
                      unint64_t v91 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
                      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
                        unint64_t v91 = 0xFF51AFD7ED558CCDLL;
                      }
                      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v91;
                      v82 = (void *)&unk_1EB1F3000;
                      unint64_t v78 = v219;
                      char v65 = v204;
                      uint64_t v64 = v210;
                      unint64_t v63 = v214;
                    }
                  }
                  unint64_t v85 = 0x9DDFEA08EB382D69 * ((v82[38] + 8 * v84) ^ HIDWORD(v84));
                  unint64_t v86 = 0x9DDFEA08EB382D69 * (HIDWORD(v84) ^ (v85 >> 47) ^ v85);
                  for (unint64_t i = 0x9DDFEA08EB382D69 * (v86 ^ (v86 >> 47)); ; unint64_t i = v89 + 1)
                  {
                    uint64_t v89 = i & ~(-2 << v204);
                    if (v89)
                    {
                      switch(v70 & 3)
                      {
                        case 1uLL:
                          LODWORD(v88) = *(unsigned __int8 *)(v80 + v89);
                          break;
                        case 2uLL:
                          LODWORD(v88) = *(unsigned __int16 *)(v80 + 2 * v89);
                          break;
                        case 3uLL:
                          LODWORD(v88) = *(_DWORD *)(v80 + 4 * v89);
                          break;
                        default:
                          uint64_t v88 = (v70 >> (4 * v89)) & 0xF;
                          break;
                      }
                      if (!v88) {
                        break;
                      }
                    }
                  }
                  if (v79 == 3)
                  {
                    *(_DWORD *)(v80 + 4 * v89) = v83;
                  }
                  else if (v79 == 2)
                  {
                    *(_WORD *)(v80 + 2 * v89) = v83;
                  }
                  else
                  {
                    *(unsigned char *)(v80 + v89) = v83;
                  }
                }
LABEL_125:
                if (!((unint64_t)++v81 >> v65)) {
                  continue;
                }
                goto LABEL_152;
              default:
LABEL_361:
                JUMPOUT(0);
            }
          }
        }
LABEL_152:
        atomic_store(v70, (unint64_t *)&qword_1E8ECF9D0);
        unint64_t v30 = v226;
        if (!lock)
        {
          v92 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
          uint64_t v64 = v210;
          void *v92 = qword_1E8ECF9E0;
          v92[1] = v225;
          qword_1E8ECF9E0 = (uint64_t)v92;
        }
        unint64_t v69 = v212;
        a2 = v202;
      }
      unsigned int v93 = v55;
      unint64_t v94 = (unint64_t)v216;
      if (!v216 || v69 >= *v216)
      {
        v95 = v30;
        unint64_t v96 = v69 + (v69 >> 2);
        if (v96 <= v69 + 1) {
          unint64_t v96 = v69 + 1;
        }
        size_t v97 = malloc_good_size(8 * v96 + 8);
        v98 = malloc_type_malloc(v97, 0x1000D770uLL);
        if (!v98) {
          swift::hashable_support::findHashableBaseTypeOfHashableType();
        }
        unint64_t v94 = (unint64_t)v98;
        _DWORD *v98 = (v97 + 0x7FFFFFFF8) >> 3;
        if (v216)
        {
          memcpy(v98 + 2, __src, 8 * v69);
          v99 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
          void *v99 = qword_1E8ECF9E0;
          v99[1] = v216;
          qword_1E8ECF9E0 = (uint64_t)v99;
        }
        atomic_store(v94, (unint64_t *)&qword_1E8ECF9C8);
        unint64_t v30 = v95;
      }
      v230[0] = 21;
      v100 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)v230, 0x40uLL, 8);
      *(void *)v100 = v228;
      *(_OWORD *)(v100 + 4) = 0u;
      *(_OWORD *)(v100 + 12) = 0u;
      *(_OWORD *)(v100 + 20) = 0u;
      *((void *)v100 + 7) = 0;
      *(void *)(v94 + 8 * v69 + 8) = v100;
      atomic_store(v56, (unsigned int *)&dword_1E8ECF9C4);
      explicit = v100;
      switch((int)a2)
      {
        case 1:
          unint64_t v101 = v70 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v70 & 3) == 0) {
            unint64_t v101 = 0;
          }
          atomic_store(v56, (unsigned __int8 *)(v101 + v93));
          break;
        case 2:
          unint64_t v102 = v70 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v70 & 3) == 0) {
            unint64_t v102 = 0;
          }
          atomic_store(v56, (unsigned __int16 *)(v102 + 2 * v93));
          break;
        case 3:
          unint64_t v103 = v70 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v70 & 3) == 0) {
            unint64_t v103 = 0;
          }
          atomic_store(v56, (unsigned int *)(v103 + 4 * v93));
          break;
        default:
          atomic_store((v56 << (4 * v93)) | v70, (unint64_t *)&qword_1E8ECF9D0);
          break;
      }
      __dmb(0xBu);
      uint64_t v3 = v199;
        goto LABEL_178;
      v104 = (void **)qword_1E8ECF9E0;
      if (qword_1E8ECF9E0)
      {
        do
        {
          v105 = (void **)*v104;
          free(v104[1]);
          free(v104);
          v104 = v105;
        }
        while (v105);
      }
    }
    qword_1E8ECF9E0 = 0;
    goto LABEL_178;
  }
  if (v39[7] != -1) {
LABEL_180:
  }
  v106 = (os_unfair_lock_s *)(v39 + 6);
  v228 = a2;
  v107 = (_WORD *)atomic_load_explicit(v39 + 5, memory_order_acquire);
  if (v107 && *((unint64_t **)v107 + 1) == v228) {
    goto LABEL_193;
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)v39, 1u, memory_order_acquire);
  do
  {
    unint64_t v108 = atomic_load_explicit(v39 + 1, memory_order_acquire);
    unint64_t v109 = atomic_load_explicit(v39 + 2, memory_order_acquire);
    unint64_t v110 = atomic_load_explicit((atomic_uint *volatile)v39 + 1, memory_order_acquire);
  }
  while (v108 != atomic_load_explicit(v39 + 1, memory_order_acquire));
  if (v108) {
    BOOL v111 = v109 == 0;
  }
  else {
    BOOL v111 = 1;
  }
  if (!v111 && v110 != 0)
  {
    if (v113)
    {
      v39[5] = *v113;
      v107 = (_WORD *)*v113;
      atomic_fetch_add_explicit((atomic_uint *volatile)v39, 0xFFFFFFFF, memory_order_release);
LABEL_193:
      v114 = 0;
LABEL_294:
      unint64_t v6 = atomic_load_explicit((atomic_ullong *volatile)v107, memory_order_acquire);
      if (v6 >= 2 && (v6 & 1) != 0)
      {
        os_unfair_lock_lock(v106);
        unint64_t v6 = *(void *)v107;
        if (*(void *)v107)
        {
          unint64_t v170 = v6 & 0xFFFFFFFFFFFFFFFELL;
          if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            ++*(void *)v170;
            os_unfair_lock_unlock(v106);
            os_unfair_lock_lock((os_unfair_lock_t)(v170 + 8));
            os_unfair_lock_unlock((os_unfair_lock_t)(v170 + 8));
            os_unfair_lock_lock(v106);
            if (*(void *)v170 == 1) {
              swift_slowDealloc((void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
            }
            else {
              --*(void *)v170;
            }
            os_unfair_lock_unlock(v106);
            unint64_t v6 = *(void *)v107;
            if (!v114) {
              goto LABEL_319;
            }
LABEL_302:
            os_unfair_lock_unlock(v114 + 2);
            swift_slowDealloc(v114);
            goto LABEL_319;
          }
        }
        os_unfair_lock_unlock(v106);
      }
      if (!v114) {
        goto LABEL_319;
      }
      goto LABEL_302;
    }
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)v39, 0xFFFFFFFF, memory_order_release);
  v229 = v228;
  os_unfair_lock_lock((os_unfair_lock_t)v39 + 6);
  unint64_t v115 = v39[2];
  BOOL v116 = (v115 & 3) == 0;
  if ((v115 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v116 = 1;
  }
  v227 = v30;
  locka = (os_unfair_lock_s *)(v39 + 3);
  unint64_t v220 = v115 & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v217 = v116;
  uint64_t v117 = a3;
  if (v116) {
    int v118 = 4;
  }
  else {
    int v118 = *(unsigned __int8 *)(v115 & 0xFFFFFFFFFFFFFFFCLL);
  }
  unint64_t v119 = *((unsigned int *)v39 + 1);
  v120 = (_DWORD *)v39[1];
  if (v120) {
    uint64_t v121 = (uint64_t)(v120 + 2);
  }
  else {
    uint64_t v121 = 0;
  }
  if (v122)
  {
    v107 = *v122;
    __dmb(0xBu);
    if (*(_DWORD *)v39)
    {
      os_unfair_lock_unlock(locka);
      v114 = 0;
      v39[5] = v107;
      v106 = (os_unfair_lock_s *)(v39 + 6);
      goto LABEL_294;
    }
    v211 = v122;
    v131 = (void **)v39[4];
    v132 = (os_unfair_lock_s *)(v39 + 3);
    if (v131)
    {
      do
      {
        v133 = (void **)*v131;
        free(v131[1]);
        free(v131);
        v131 = v133;
      }
      while (v133);
    }
    v114 = 0;
    goto LABEL_292;
  }
  unint64_t v203 = v115;
  unsigned int v205 = v123;
  v197 = v120 + 2;
  uint64_t v198 = v121;
  v211 = 0;
  v213 = v120;
  uint64_t v201 = (v119 + 1);
  unint64_t __srca = v119;
  uint64_t v209 = v117;
  if ((1 << v118) / (unint64_t)((1 << v118) - v201) < 4)
  {
    unint64_t v134 = v115;
    v135 = v120;
    if (v120) {
      goto LABEL_261;
    }
  }
  else
  {
    v222 = v10;
    unsigned int v124 = (v118 + 1);
    char v206 = v118;
    if (v124 >= 0x11) {
      unsigned int v125 = 4;
    }
    else {
      unsigned int v125 = 2;
    }
    if (v124 < 9) {
      size_t v126 = 1;
    }
    else {
      size_t v126 = v125;
    }
    unint64_t v127 = (unint64_t)malloc_type_calloc(2 << v118, v126, 0x4269077AuLL);
    if (!v127) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v128 = v115;
    char v129 = v118;
    uint64_t v130 = v121;
    v200 = v3;
    if (v126 != 1)
    {
      if (v126 == 4) {
        size_t v126 = 3;
      }
      else {
        size_t v126 = 2;
      }
    }
    unint64_t v134 = v126 | v127;
    *(unsigned char *)unint64_t v127 = v118 + 1;
    if (v118)
    {
      if ((v115 & 3) != 0) {
        unint64_t v136 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else {
        unint64_t v136 = 0;
      }
      int v137 = v134 & 3;
      if ((v134 & 3) != 0) {
        unint64_t v138 = v127 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else {
        unint64_t v138 = 0;
      }
      uint64_t v139 = 1;
      v140 = (void *)&unk_1EB1F3000;
      while (2)
      {
        switch(v203 & 3)
        {
          case 0uLL:
            uint64_t v141 = (v128 >> (4 * v139)) & 0xF;
            if (!v141) {
              goto LABEL_231;
            }
            goto LABEL_240;
          case 1uLL:
            LODWORD(v141) = *(unsigned __int8 *)(v136 + v139);
            if (!*(unsigned char *)(v136 + v139)) {
              goto LABEL_231;
            }
            goto LABEL_240;
          case 2uLL:
            LODWORD(v141) = *(unsigned __int16 *)(v136 + 2 * v139);
            if (!*(_WORD *)(v136 + 2 * v139)) {
              goto LABEL_231;
            }
            goto LABEL_240;
          case 3uLL:
            LODWORD(v141) = *(_DWORD *)(v136 + 4 * v139);
            if (v141)
            {
LABEL_240:
              unint64_t v142 = *(void *)(*(void *)(v130 + 8 * (v141 - 1)) + 8);
              {
                unint64_t v215 = v136;
                v140 = &unk_1EB1F3000;
                unint64_t v136 = v215;
                unint64_t v128 = v203;
                char v129 = v206;
                uint64_t v130 = v198;
                if (v148)
                {
                  unint64_t v149 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
                  if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
                    unint64_t v149 = 0xFF51AFD7ED558CCDLL;
                  }
                  __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v149;
                  v140 = (void *)&unk_1EB1F3000;
                  unint64_t v136 = v215;
                  unint64_t v128 = v203;
                  char v129 = v206;
                  uint64_t v130 = v198;
                }
              }
              unint64_t v143 = 0x9DDFEA08EB382D69 * ((v140[38] + 8 * v142) ^ HIDWORD(v142));
              unint64_t v144 = 0x9DDFEA08EB382D69 * (HIDWORD(v142) ^ (v143 >> 47) ^ v143);
              for (unint64_t j = 0x9DDFEA08EB382D69 * (v144 ^ (v144 >> 47)); ; unint64_t j = v147 + 1)
              {
                uint64_t v147 = j & ~(-2 << v206);
                if (v147)
                {
                  switch(v134 & 3)
                  {
                    case 1uLL:
                      LODWORD(v146) = *(unsigned __int8 *)(v138 + v147);
                      break;
                    case 2uLL:
                      LODWORD(v146) = *(unsigned __int16 *)(v138 + 2 * v147);
                      break;
                    case 3uLL:
                      LODWORD(v146) = *(_DWORD *)(v138 + 4 * v147);
                      break;
                    default:
                      uint64_t v146 = (v134 >> (4 * v147)) & 0xF;
                      break;
                  }
                  if (!v146) {
                    break;
                  }
                }
              }
              if (v137 == 3)
              {
                *(_DWORD *)(v138 + 4 * v147) = v141;
              }
              else if (v137 == 2)
              {
                *(_WORD *)(v138 + 2 * v147) = v141;
              }
              else
              {
                *(unsigned char *)(v138 + v147) = v141;
              }
            }
LABEL_231:
            if (!((unint64_t)++v139 >> v129)) {
              continue;
            }
            goto LABEL_258;
          default:
            goto LABEL_361;
        }
      }
    }
LABEL_258:
    atomic_store(v134, v39 + 2);
    BOOL v10 = v222;
    if (!v217)
    {
      v150 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
      uint64_t v130 = v198;
      void *v150 = v39[4];
      v150[1] = v220;
      v39[4] = v150;
    }
    unsigned int v205 = v151;
    uint64_t v3 = v200;
    v135 = v213;
    if (v213)
    {
LABEL_261:
      if (v119 < *v135) {
        goto LABEL_268;
      }
    }
  }
  unint64_t v152 = v119 + (v119 >> 2);
  if (v152 <= v119 + 1) {
    unint64_t v152 = v119 + 1;
  }
  size_t v153 = malloc_good_size(8 * v152 + 8);
  v154 = malloc_type_malloc(v153, 0x1000D770uLL);
  if (!v154) {
    swift::hashable_support::findHashableBaseTypeOfHashableType();
  }
  v135 = v154;
  _DWORD *v154 = (v153 + 0x7FFFFFFF8) >> 3;
  if (v213)
  {
    memcpy(v154 + 2, v197, 8 * v119);
    v155 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
    void *v155 = v39[4];
    v155[1] = v213;
    v39[4] = v155;
  }
  atomic_store((unint64_t)v135, v39 + 1);
LABEL_268:
  uint64_t v156 = *v3;
  if (!v156)
  {
LABEL_272:
    v158 = 0;
    goto LABEL_274;
  }
  v157 = (char **)((char *)v3 + (v156 & 0xFFFFFFFFFFFFFFFELL));
  if ((v156 & 1) == 0)
  {
    if (v157)
    {
      v158 = (char *)v3 + (v156 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_274;
    }
    goto LABEL_272;
  }
  v158 = *v157;
LABEL_274:
  v159 = v135 + 2;
  unint64_t v160 = v3[3];
  v161 = (unsigned int *)(((unint64_t)&v10[3 * BYTE1(v160) + ((v160 >> 6) & 1)] + ((v160 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((v160 & 0x10000) != 0) {
    uint64_t v162 = *v161;
  }
  else {
    uint64_t v162 = 0;
  }
  size_t v163 = 8
       * ((*((_DWORD *)v158 + 4) + 1)
        + ((unint64_t)HIWORD(v161[2 * v162 + ((v160 >> 16) & 1)]) >> 1))
       + 24;
  v230[0] = 16;
  v107 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)v230, v163, 8);
  unint64_t v164 = (unint64_t)v228;
  v114 = (os_unfair_lock_s *)swift_slowAlloc(0x10uLL, 7uLL);
  *(_OWORD *)&v114->_os_unfair_lock_opaque = xmmword_18162AD50;
  os_unfair_lock_lock(v114 + 2);
  *(void *)v107 = (unint64_t)v114 | 1;
  *((void *)v107 + 1) = v164;
  *((void *)v107 + 2) = v3;
  *(void *)&v159[2 * __srca] = v107;
  atomic_store(v201, (unsigned int *)v39 + 1);
  v132 = (os_unfair_lock_s *)(v39 + 3);
  v106 = (os_unfair_lock_s *)(v39 + 6);
  switch((int)v3)
  {
    case 1:
      unint64_t v165 = v134 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v134 & 3) == 0) {
        unint64_t v165 = 0;
      }
      atomic_store(v201, (unsigned __int8 *)(v165 + v205));
      break;
    case 2:
      unint64_t v166 = v134 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v134 & 3) == 0) {
        unint64_t v166 = 0;
      }
      atomic_store(v201, (unsigned __int16 *)(v166 + 2 * v205));
      break;
    case 3:
      unint64_t v167 = v134 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v134 & 3) == 0) {
        unint64_t v167 = 0;
      }
      atomic_store(v201, (unsigned int *)(v167 + 4 * v205));
      break;
    default:
      atomic_store((v201 << (4 * v205)) | v134, v39 + 2);
      break;
  }
  __dmb(0xBu);
  uint64_t v117 = v209;
  if (!*(_DWORD *)v39)
  {
    v168 = (void **)v39[4];
    if (!v168) {
      goto LABEL_293;
    }
    do
    {
      v169 = (void **)*v168;
      free(v168[1]);
      free(v168);
      v168 = v169;
    }
    while (v169);
LABEL_292:
    v106 = (os_unfair_lock_s *)(v39 + 6);
LABEL_293:
    v39[4] = 0;
    os_unfair_lock_unlock(v132);
    v39[5] = v107;
    unint64_t v30 = v227;
    if (v211) {
      goto LABEL_294;
    }
    goto LABEL_303;
  }
  os_unfair_lock_unlock(locka);
  v39[5] = v107;
  unint64_t v30 = v227;
LABEL_303:
  uint64_t v171 = *v3;
  if (!v171) {
    goto LABEL_310;
  }
  v172 = (char **)((char *)v3 + (v171 & 0xFFFFFFFFFFFFFFFELL));
  if (v171)
  {
    v173 = *v172;
    goto LABEL_312;
  }
  if (v172) {
    v173 = (char *)v3 + (v171 & 0xFFFFFFFFFFFFFFFELL);
  }
  else {
LABEL_310:
  }
    v173 = 0;
LABEL_312:
  unint64_t v174 = v3[3];
  v175 = (unsigned int *)(((unint64_t)&v10[3 * BYTE1(v174) + ((v174 >> 6) & 1)] + ((v174 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((v174 & 0x10000) != 0) {
    uint64_t v176 = *v175;
  }
  else {
    uint64_t v176 = 0;
  }
  bzero(v107 + 12, 8* ((*((_DWORD *)v173 + 4) + 1) + ((unint64_t)HIWORD(v175[2 * v176 + ((v174 >> 16) & 1)]) >> 1)));
  unint64_t v6 = (unint64_t)instantiateWitnessTable(*((unint64_t **)v107 + 1), *((int **)v107 + 2), v117, (uint64_t)(v107 + 12));
  os_unfair_lock_lock(v106);
  atomic_store(v6, (unint64_t *)v107);
  os_unfair_lock_unlock(v114 + 2);
  if (*(void *)&v114->_os_unfair_lock_opaque == 1) {
    swift_slowDealloc(v114);
  }
  else {
    --*(void *)&v114->_os_unfair_lock_opaque;
  }
  os_unfair_lock_unlock(v106);
LABEL_319:
  if (!v6) {
    return v6;
  }
  unsigned int v177 = v3[3];
  if ((v177 & 0x80) == 0) {
    return v6;
  }
  int v179 = (v177 >> 3) & 7;
  if (v179 == 1)
  {
    uint64_t v182 = *v30;
    if (v182) {
      v183 = (char **)((char *)v30 + v182);
    }
    else {
      v183 = 0;
    }
    v181 = *v183;
    if (!*v183) {
      goto LABEL_333;
    }
  }
  else
  {
    if (v179) {
      goto LABEL_333;
    }
    uint64_t v180 = *v30;
    if (!v180 || !(int *)((char *)v30 + v180)) {
      goto LABEL_333;
    }
    v181 = (char *)v30 + v180;
  }
  if (v181)
  {
    uint64_t v26 = (uint64_t)v181;
    goto LABEL_334;
  }
LABEL_333:
  uint64_t v26 = 0;
LABEL_334:
  uint64_t v184 = *v3;
  if (!v184) {
    goto LABEL_340;
  }
  v28 = (uint64_t *)((char *)v3 + (v184 & 0xFFFFFFFFFFFFFFFELL));
  if (v184) {
    goto LABEL_338;
  }
  if (!v28) {
    goto LABEL_340;
  }
LABEL_337:
  uint64_t v185 = (uint64_t)v28;
LABEL_341:

  return _getForeignWitnessTable(v6, v26, v185);
}

uint64_t swift_getWitnessTableRelative(int *a1, unint64_t a2, uint64_t a3)
{
  return swift::_getWitnessTableRelative(a1, a2, a3);
}

uint64_t swift::_getWitnessTableRelative(int *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1[3];
  if ((v4 & 0x20000) == 0) {
    goto LABEL_2;
  }
  uint64_t v8 = a3;
  BOOL v10 = (_DWORD *)(((unint64_t)&a1[3 * BYTE1(v4) + 4 + ((v4 >> 6) & 1)] + ((v4 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((v4 & 0x10000) != 0)
  {
    uint64_t v11 = *v10;
    if (!v10) {
      goto LABEL_2;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (!v10) {
      goto LABEL_2;
    }
  }
  int v16 = (unsigned __int16 *)&v10[2 * v11 + (WORD1(v4) & 1)];
  unsigned int v17 = v16[1];
  if ((v17 & 1) != 0 || (v4 & 0x10000) != 0 && *v10)
  {
LABEL_49:
    uint64_t v29 = *((int *)v16 + 2);
    unint64_t v30 = (void *)((char *)v16 + v29 + 8);
    if (v29) {
      BOOL v31 = v30 == 0;
    }
    else {
      BOOL v31 = 1;
    }
    if (!v31)
    {
      if (v30[7] != -1) {
LABEL_160:
      }
      unint64_t v86 = (os_unfair_lock_s *)(v30 + 6);
      v240 = (unsigned __int16 *)a2;
      explicit = (atomic_ullong *)atomic_load_explicit(v30 + 5, memory_order_acquire);
      if (explicit && (unsigned __int16 *)explicit[1] == v240) {
        goto LABEL_173;
      }
      atomic_fetch_add_explicit((atomic_uint *volatile)v30, 1u, memory_order_acquire);
      do
      {
        unint64_t v88 = atomic_load_explicit(v30 + 1, memory_order_acquire);
        unint64_t v89 = atomic_load_explicit(v30 + 2, memory_order_acquire);
        unint64_t v90 = atomic_load_explicit((atomic_uint *volatile)v30 + 1, memory_order_acquire);
      }
      while (v88 != atomic_load_explicit(v30 + 1, memory_order_acquire));
      if (v88) {
        BOOL v91 = v89 == 0;
      }
      else {
        BOOL v91 = 1;
      }
      if (!v91 && v90 != 0)
      {
        if (v93)
        {
          v30[5] = *v93;
          explicit = *v93;
          atomic_fetch_add_explicit((atomic_uint *volatile)v30, 0xFFFFFFFF, memory_order_release);
LABEL_173:
          unint64_t v94 = 0;
LABEL_264:
          unint64_t ForeignWitnessTable = atomic_load_explicit(explicit, memory_order_acquire);
          if (ForeignWitnessTable >= 2 && (ForeignWitnessTable & 1) != 0)
          {
            os_unfair_lock_lock(v86);
            unint64_t ForeignWitnessTable = *explicit;
            if (*explicit)
            {
              unint64_t v145 = ForeignWitnessTable & 0xFFFFFFFFFFFFFFFELL;
              if ((ForeignWitnessTable & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                ++*(void *)v145;
                os_unfair_lock_unlock(v86);
                os_unfair_lock_lock((os_unfair_lock_t)(v145 + 8));
                os_unfair_lock_unlock((os_unfair_lock_t)(v145 + 8));
                os_unfair_lock_lock(v86);
                if (*(void *)v145 == 1) {
                  swift_slowDealloc((void *)(ForeignWitnessTable & 0xFFFFFFFFFFFFFFFELL));
                }
                else {
                  --*(void *)v145;
                }
                os_unfair_lock_unlock(v86);
                unint64_t ForeignWitnessTable = *explicit;
                if (!v94)
                {
LABEL_273:
                  if (!ForeignWitnessTable) {
                    return ForeignWitnessTable | 1;
                  }
                  unsigned int v146 = v3[3];
                  if ((v146 & 0x80) == 0) {
                    return ForeignWitnessTable | 1;
                  }
LABEL_335:
                  char v206 = v3 + 1;
                  int v207 = (v146 >> 3) & 7;
                  if (v207 == 1)
                  {
                    uint64_t v210 = *v206;
                    v211 = (char **)((char *)v206 + v210);
                    if (!v210) {
                      v211 = 0;
                    }
                    uint64_t v209 = *v211;
                    if (!*v211) {
                      goto LABEL_345;
                    }
                  }
                  else
                  {
                    if (v207) {
                      goto LABEL_345;
                    }
                    uint64_t v208 = *v206;
                    if (!v208 || !(int *)((char *)v206 + v208)) {
                      goto LABEL_345;
                    }
                    uint64_t v209 = (char *)v206 + v208;
                  }
                  if (v209)
                  {
                    uint64_t v212 = (uint64_t)v209;
                    goto LABEL_346;
                  }
LABEL_345:
                  uint64_t v212 = 0;
LABEL_346:
                  uint64_t v213 = *v3;
                  if (v213)
                  {
                    uint64_t v214 = (uint64_t *)((char *)v3 + (v213 & 0xFFFFFFFFFFFFFFFELL));
                    if (v213)
                    {
                      if (*v214)
                      {
                        uint64_t v215 = *v214;
                        goto LABEL_353;
                      }
                    }
                    else if (v214)
                    {
                      uint64_t v215 = (uint64_t)v3 + (v213 & 0xFFFFFFFFFFFFFFFELL);
LABEL_353:
                      unint64_t ForeignWitnessTable = _getForeignWitnessTable(ForeignWitnessTable, v212, v215);
                      return ForeignWitnessTable | 1;
                    }
                  }
                  uint64_t v215 = 0;
                  goto LABEL_353;
                }
LABEL_272:
                os_unfair_lock_unlock(v94 + 2);
                swift_slowDealloc(v94);
                goto LABEL_273;
              }
            }
            os_unfair_lock_unlock(v86);
          }
          if (!v94) {
            goto LABEL_273;
          }
          goto LABEL_272;
        }
      }
      atomic_fetch_add_explicit((atomic_uint *volatile)v30, 0xFFFFFFFF, memory_order_release);
      v241 = v240;
      os_unfair_lock_lock((os_unfair_lock_t)v30 + 6);
      unint64_t v95 = v30[2];
      BOOL v96 = (v95 & 3) == 0;
      if ((v95 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
        BOOL v96 = 1;
      }
      unint64_t v233 = v95 & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v231 = v96;
      if (v96) {
        int v97 = 4;
      }
      else {
        int v97 = *(unsigned __int8 *)(v95 & 0xFFFFFFFFFFFFFFFCLL);
      }
      unint64_t v98 = *((unsigned int *)v30 + 1);
      v99 = (_DWORD *)v30[1];
      if (v99) {
        uint64_t v100 = (uint64_t)(v99 + 2);
      }
      else {
        uint64_t v100 = 0;
      }
      if (v101)
      {
        explicit = *v101;
        __dmb(0xBu);
        if (*(_DWORD *)v30)
        {
          os_unfair_lock_unlock((os_unfair_lock_t)v30 + 6);
          unint64_t v94 = 0;
          v30[5] = explicit;
          unint64_t v86 = (os_unfair_lock_s *)(v30 + 6);
          goto LABEL_264;
        }
        v227 = v101;
        lockb = (os_unfair_lock_s *)(v30 + 3);
        unint64_t v110 = (void **)v30[4];
        unint64_t v86 = (os_unfair_lock_s *)(v30 + 6);
        if (v110)
        {
          do
          {
            BOOL v111 = (void **)*v110;
            free(v110[1]);
            free(v110);
            unint64_t v110 = v111;
          }
          while (v111);
        }
        unint64_t v94 = 0;
        goto LABEL_263;
      }
      unint64_t v219 = v99 + 2;
      unint64_t v224 = v95;
      unint64_t v225 = v3;
      lockb = (os_unfair_lock_s *)(v30 + 3);
      v227 = 0;
      unint64_t __srca = (v98 + 1);
      if ((1 << v97) / ((1 << v97) - __srca) < 4)
      {
        unint64_t v112 = v95;
        unsigned int v113 = v102;
        if (!v99) {
          goto LABEL_242;
        }
      }
      else
      {
        v216 = v99;
        unsigned int v103 = (v97 + 1);
        char v217 = v97;
        if (v103 >= 0x11) {
          unsigned int v104 = 4;
        }
        else {
          unsigned int v104 = 2;
        }
        if (v103 < 9) {
          size_t v105 = 1;
        }
        else {
          size_t v105 = v104;
        }
        unint64_t v106 = (unint64_t)malloc_type_calloc(2 << v97, v105, 0x4269077AuLL);
        if (!v106) {
          swift::hashable_support::findHashableBaseTypeOfHashableType();
        }
        unint64_t v107 = v95;
        uint64_t v108 = v100;
        char v109 = v97;
        uint64_t v238 = v8;
        if (v105 != 1)
        {
          if (v105 == 4) {
            size_t v105 = 3;
          }
          else {
            size_t v105 = 2;
          }
        }
        unint64_t v112 = v105 | v106;
        *(unsigned char *)unint64_t v106 = v97 + 1;
        if (v97)
        {
          if ((v95 & 3) != 0) {
            unint64_t v114 = v95 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t v114 = 0;
          }
          int v115 = v112 & 3;
          if ((v112 & 3) != 0) {
            unint64_t v116 = v106 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t v116 = 0;
          }
          uint64_t v117 = 1;
          int v118 = (void *)&unk_1EB1F3000;
          while (2)
          {
            switch(v224 & 3)
            {
              case 0uLL:
                uint64_t v119 = (v107 >> (4 * v117)) & 0xF;
                if (!v119) {
                  goto LABEL_211;
                }
                goto LABEL_220;
              case 1uLL:
                LODWORD(v119) = *(unsigned __int8 *)(v114 + v117);
                if (!*(unsigned char *)(v114 + v117)) {
                  goto LABEL_211;
                }
                goto LABEL_220;
              case 2uLL:
                LODWORD(v119) = *(unsigned __int16 *)(v114 + 2 * v117);
                if (!*(_WORD *)(v114 + 2 * v117)) {
                  goto LABEL_211;
                }
                goto LABEL_220;
              case 3uLL:
                LODWORD(v119) = *(_DWORD *)(v114 + 4 * v117);
                if (v119)
                {
LABEL_220:
                  unint64_t v120 = *(void *)(*(void *)(v108 + 8 * (v119 - 1)) + 8);
                  {
                    unint64_t v229 = v114;
                    int v118 = &unk_1EB1F3000;
                    unint64_t v114 = v229;
                    char v109 = v217;
                    uint64_t v108 = v100;
                    unint64_t v107 = v224;
                    if (v126)
                    {
                      unint64_t v127 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
                      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
                        unint64_t v127 = 0xFF51AFD7ED558CCDLL;
                      }
                      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v127;
                      int v118 = (void *)&unk_1EB1F3000;
                      unint64_t v114 = v229;
                      char v109 = v217;
                      uint64_t v108 = v100;
                      unint64_t v107 = v224;
                    }
                  }
                  unint64_t v121 = 0x9DDFEA08EB382D69 * ((v118[38] + 8 * v120) ^ HIDWORD(v120));
                  unint64_t v122 = 0x9DDFEA08EB382D69 * (HIDWORD(v120) ^ (v121 >> 47) ^ v121);
                  for (unint64_t i = 0x9DDFEA08EB382D69 * (v122 ^ (v122 >> 47)); ; unint64_t i = v125 + 1)
                  {
                    uint64_t v125 = i & ~(-2 << v217);
                    if (v125)
                    {
                      switch(v112 & 3)
                      {
                        case 1uLL:
                          LODWORD(v124) = *(unsigned __int8 *)(v116 + v125);
                          break;
                        case 2uLL:
                          LODWORD(v124) = *(unsigned __int16 *)(v116 + 2 * v125);
                          break;
                        case 3uLL:
                          LODWORD(v124) = *(_DWORD *)(v116 + 4 * v125);
                          break;
                        default:
                          uint64_t v124 = (v112 >> (4 * v125)) & 0xF;
                          break;
                      }
                      if (!v124) {
                        break;
                      }
                    }
                  }
                  if (v115 == 3)
                  {
                    *(_DWORD *)(v116 + 4 * v125) = v119;
                  }
                  else if (v115 == 2)
                  {
                    *(_WORD *)(v116 + 2 * v125) = v119;
                  }
                  else
                  {
                    *(unsigned char *)(v116 + v125) = v119;
                  }
                }
LABEL_211:
                if (!((unint64_t)++v117 >> v109)) {
                  continue;
                }
                goto LABEL_238;
              default:
                goto LABEL_361;
            }
          }
        }
LABEL_238:
        atomic_store(v112, v30 + 2);
        v99 = v216;
        if (!v231)
        {
          unint64_t v128 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
          uint64_t v108 = v100;
          *unint64_t v128 = v30[4];
          v128[1] = v233;
          v30[4] = v128;
        }
        uint64_t v8 = v238;
        unsigned int v113 = v129;
        if (!v216) {
          goto LABEL_242;
        }
      }
      unint64_t v130 = (unint64_t)v99;
      if (v98 < *v99)
      {
LABEL_248:
        unint64_t v135 = v130 + 8 * v98;
        __int16 v242 = 16;
        explicit = (atomic_ullong *)swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v242, WitnessTableSize + 24, 8);
        unint64_t v137 = (unint64_t)v240;
        unint64_t v94 = (os_unfair_lock_s *)swift_slowAlloc(0x10uLL, 7uLL);
        *(_OWORD *)&v94->_os_unfair_lock_opaque = xmmword_18162AD50;
        os_unfair_lock_lock(v94 + 2);
        atomic_ullong *explicit = (unint64_t)v94 | 1;
        explicit[1] = v137;
        explicit[2] = (atomic_ullong)v225;
        *(void *)(v135 + 8) = explicit;
        uint64_t v138 = v113;
        atomic_store(__srca, (unsigned int *)v30 + 1);
        unint64_t v86 = (os_unfair_lock_s *)(v30 + 6);
        switch((int)v8)
        {
          case 1:
            unint64_t v139 = v112 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v112 & 3) == 0) {
              unint64_t v139 = 0;
            }
            atomic_store(__srca, (unsigned __int8 *)(v139 + v138));
            break;
          case 2:
            unint64_t v140 = v112 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v112 & 3) == 0) {
              unint64_t v140 = 0;
            }
            atomic_store(__srca, (unsigned __int16 *)(v140 + 2 * v138));
            break;
          case 3:
            unint64_t v141 = v112 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v112 & 3) == 0) {
              unint64_t v141 = 0;
            }
            atomic_store(__srca, (unsigned int *)(v141 + 4 * v138));
            break;
          default:
            atomic_store((__srca << (4 * v138)) | v112, v30 + 2);
            break;
        }
        __dmb(0xBu);
        uint64_t v3 = v225;
        if (*(_DWORD *)v30)
        {
          os_unfair_lock_unlock(lockb);
          v30[5] = explicit;
          goto LABEL_276;
        }
        unint64_t v142 = (void **)v30[4];
        if (v142)
        {
          do
          {
            unint64_t v143 = (void **)*v142;
            free(v142[1]);
            free(v142);
            unint64_t v142 = v143;
          }
          while (v143);
        }
LABEL_263:
        v30[4] = 0;
        os_unfair_lock_unlock(lockb);
        v30[5] = explicit;
        if (v227) {
          goto LABEL_264;
        }
LABEL_276:
        uint64_t v147 = explicit + 3;
        bzero(explicit + 3, v148);
        unint64_t v149 = (int *)explicit[2];
        unint64_t v150 = v149[3];
        if ((v150 & 0x20000) != 0)
        {
          unint64_t v152 = (unsigned int *)(((unint64_t)&v149[3 * BYTE1(v150) + 4 + ((v150 >> 6) & 1)]
                                 + ((v150 >> 21) & 0x7F8)
                                 + 3) & 0xFFFFFFFFFFFFFFFCLL);
          if ((v150 & 0x10000) != 0) {
            uint64_t v153 = *v152;
          }
          else {
            uint64_t v153 = 0;
          }
          uint64_t v151 = (uint64_t)&v152[2 * v153 + (WORD1(v150) & 1)];
        }
        else
        {
          uint64_t v151 = 0;
        }
        atomic_ullong v154 = explicit[1];
        uint64_t v155 = v149[2];
        uint64_t v156 = (char *)v149 + v155 + 8;
        if (!v155) {
          uint64_t v156 = 0;
        }
        uint64_t v157 = *v149;
        if (v157)
        {
          v158 = (char **)((char *)v149 + (v157 & 0xFFFFFFFFFFFFFFFELL));
          if (v157)
          {
            if (*v158)
            {
              v159 = *v158;
              goto LABEL_294;
            }
          }
          else if (v158)
          {
            v159 = (char *)v149 + (v157 & 0xFFFFFFFFFFFFFFFELL);
            goto LABEL_294;
          }
        }
        v159 = 0;
LABEL_294:
        unint64_t v160 = v159;
        if (v159) {
          unint64_t v160 = v159;
        }
        if (v160 == (char *)-24) {
          v161 = 0;
        }
        else {
          v161 = v160 + 24;
        }
        uint64_t v162 = *((unsigned int *)v159 + 4);
        if (v162)
        {
          unsigned int v163 = *((_DWORD *)v160 + 3);
          unint64_t v164 = &v161[12 * v163];
          unint64_t v165 = (v162 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v165 >= 8)
          {
            unint64_t v168 = v165 + 1;
            uint64_t v169 = v168 & 7;
            if ((v168 & 7) == 0) {
              uint64_t v169 = 8;
            }
            unint64_t v170 = v168 - v169;
            unint64_t v167 = (int *)&v164[8 * v170];
            uint64_t v171 = (const float *)&v161[12 * v163 + 32];
            int64x2_t v172 = 0uLL;
            v173.i64[0] = 0xF0000000FLL;
            v173.i64[1] = 0xF0000000FLL;
            int8x16_t v174 = (int8x16_t)vdupq_n_s64(1uLL);
            int64x2_t v175 = 0uLL;
            int64x2_t v176 = 0uLL;
            int64x2_t v177 = 0uLL;
            do
            {
              v178 = v171 - 8;
              unsigned long long v179 = (unsigned __int128)vld2q_f32(v178);
              unsigned long long v180 = (unsigned __int128)vld2q_f32(v171);
              int32x4_t v181 = (int32x4_t)vandq_s8((int8x16_t)v180, v173);
              int32x4_t v182 = vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v179, v173));
              v183.i64[0] = v182.u32[0];
              v183.i64[1] = v182.u32[1];
              int64x2_t v184 = (int64x2_t)vandq_s8(v183, v174);
              v183.i64[0] = v182.u32[2];
              v183.i64[1] = v182.u32[3];
              int64x2_t v185 = (int64x2_t)vandq_s8(v183, v174);
              int32x4_t v186 = vceqzq_s32(v181);
              v183.i64[0] = v186.u32[0];
              v183.i64[1] = v186.u32[1];
              int64x2_t v187 = (int64x2_t)vandq_s8(v183, v174);
              v183.i64[0] = v186.u32[2];
              v183.i64[1] = v186.u32[3];
              int64x2_t v175 = vaddq_s64(v175, v185);
              int64x2_t v172 = vaddq_s64(v172, v184);
              int64x2_t v177 = vaddq_s64(v177, (int64x2_t)vandq_s8(v183, v174));
              int64x2_t v176 = vaddq_s64(v176, v187);
              v171 += 16;
              v170 -= 8;
            }
            while (v170);
            uint64_t v166 = vaddvq_s64(vaddq_s64(vaddq_s64(v176, v172), vaddq_s64(v177, v175)));
          }
          else
          {
            uint64_t v166 = 0;
            unint64_t v167 = (int *)v164;
          }
          v188 = (int *)&v164[8 * v162];
          do
          {
            uint64_t v189 = v166;
            int v190 = *v167;
            v167 += 2;
            int v191 = v190 & 0xF;
            if ((v190 & 0xF) == 0) {
              ++v166;
            }
          }
          while (v167 != v188);
          unint64_t v192 = (unint64_t)*(unsigned __int16 *)(v151 + 2) >> 1;
          unint64_t ForeignWitnessTable = (unint64_t)&v147[v192];
          *(void *)unint64_t ForeignWitnessTable = v156;
          if (v166)
          {
            if (v191) {
              uint64_t v193 = v189;
            }
            else {
              uint64_t v193 = v189 + 1;
            }
            v194 = &explicit[v192 + 4];
            v195 = (int *)(v156 + 4);
            v196 = v195;
            do
            {
              uint64_t v197 = *v195++;
              uint64_t v198 = (char *)v196 + v197;
              if (v197) {
                BOOL v199 = v198 == 0;
              }
              else {
                BOOL v199 = 1;
              }
              if (v199) {
                uint64_t v198 = 0;
              }
              *v194++ = (atomic_ullong)v198;
              ++v196;
              --v193;
            }
            while (v193);
          }
        }
        else
        {
          unint64_t ForeignWitnessTable = (unint64_t)v147 + ((4 * *(unsigned __int16 *)(v151 + 2)) & 0x3FFF8);
          *(void *)unint64_t ForeignWitnessTable = v156;
        }
        if (BYTE1(v150))
        {
          unsigned int v200 = 0;
          uint64_t v201 = &v149[((v150 >> 6) & 1) + 4];
          uint64_t v202 = 12 * BYTE1(v150);
          do
          {
            if ((*(unsigned char *)v201 & 0x80) != 0)
            {
              *(void *)(ForeignWitnessTable + 8 * (int)~v200) = *(void *)(v8 + 8 * v200);
              ++v200;
            }
            v201 += 3;
            v202 -= 12;
          }
          while (v202);
        }
        uint64_t v205 = *(int *)(v151 + 4);
        uint64_t v204 = v151 + 4;
        uint64_t v203 = v205;
        if (v205) {
          ((void (*)(unint64_t, atomic_ullong, uint64_t))(v203 + v204))(ForeignWitnessTable, v154, v8);
        }
        os_unfair_lock_lock(v86);
        atomic_store(ForeignWitnessTable, (unint64_t *)explicit);
        os_unfair_lock_unlock(v94 + 2);
        if (*(void *)&v94->_os_unfair_lock_opaque == 1) {
          swift_slowDealloc(v94);
        }
        else {
          --*(void *)&v94->_os_unfair_lock_opaque;
        }
        os_unfair_lock_unlock(v86);
        unsigned int v146 = v3[3];
        if ((v146 & 0x80) == 0) {
          return ForeignWitnessTable | 1;
        }
        goto LABEL_335;
      }
LABEL_242:
      unint64_t v131 = v98 + (v98 >> 2);
      if (v131 <= v98 + 1) {
        unint64_t v131 = v98 + 1;
      }
      size_t v132 = malloc_good_size(8 * v131 + 8);
      v133 = malloc_type_malloc(v132, 0x1000D770uLL);
      if (!v133) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      unint64_t v130 = (unint64_t)v133;
      _DWORD *v133 = (v132 + 0x7FFFFFFF8) >> 3;
      if (v99)
      {
        memcpy(v133 + 2, v219, 8 * v98);
        unint64_t v134 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
        *unint64_t v134 = v30[4];
        v134[1] = v99;
        v30[4] = v134;
      }
      atomic_store(v130, v30 + 1);
      goto LABEL_248;
    }
    v240 = v16;
    uint64_t v32 = (void *)atomic_load_explicit(&qword_1E8ECFA18, memory_order_acquire);
    if (v32 && (unsigned __int16 *)*v32 == v240)
    {
LABEL_159:
      unint64_t v30 = v32 + 1;
      goto LABEL_160;
    }
    do
    {
      unint64_t v33 = atomic_load_explicit(&qword_1E8ECF9F8, memory_order_acquire);
      unint64_t v34 = atomic_load_explicit(&qword_1E8ECFA00, memory_order_acquire);
      unint64_t v35 = atomic_load_explicit(&dword_1E8ECF9F4, memory_order_acquire);
    }
    while (v33 != atomic_load_explicit(&qword_1E8ECF9F8, memory_order_acquire));
    if (v33) {
      BOOL v36 = v34 == 0;
    }
    else {
      BOOL v36 = 1;
    }
    if (!v36 && v35 != 0)
    {
      if (v38)
      {
        qword_1E8ECFA18 = *v38;
        uint64_t v32 = (void *)*v38;
        uint64_t v8 = a3;
        goto LABEL_159;
      }
    }
    v241 = v240;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1E8ECFA08);
    uint64_t v39 = qword_1E8ECFA00;
    os_unfair_lock_t lock = (os_unfair_lock_t)(qword_1E8ECFA00 & 3);
    BOOL v40 = lock == 0;
    if ((qword_1E8ECFA00 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v40 = 1;
    }
    BOOL v239 = v40;
    if (v40) {
      int v41 = 4;
    }
    else {
      int v41 = *(unsigned __int8 *)(qword_1E8ECFA00 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v42 = dword_1E8ECF9F4;
    unint64_t v43 = (_DWORD *)qword_1E8ECF9F8;
    if (qword_1E8ECF9F8) {
      uint64_t v44 = qword_1E8ECF9F8 + 8;
    }
    else {
      uint64_t v44 = 0;
    }
    if (v45)
    {
      uint64_t v32 = *v45;
      __dmb(0xBu);
      {
        uint64_t v8 = a3;
LABEL_158:
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E8ECFA08);
        qword_1E8ECFA18 = (uint64_t)v32;
        goto LABEL_159;
      }
      unsigned int v55 = (void **)qword_1E8ECFA10;
      uint64_t v8 = a3;
      if (qword_1E8ECFA10)
      {
        do
        {
          uint64_t v56 = (void **)*v55;
          free(v55[1]);
          free(v55);
          unsigned int v55 = v56;
        }
        while (v56);
      }
    }
    else
    {
      uint64_t v226 = v44;
      v228 = v43;
      unint64_t v230 = v42;
      unint64_t v232 = v39;
      __src = v43 + 2;
      unint64_t v223 = v39 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v47 = (v42 + 1);
      if ((1 << v41) / ((1 << v41) - v47) < 4)
      {
        unint64_t v57 = v42;
        unint64_t v58 = v232;
      }
      else
      {
        unsigned int v48 = (v41 + 1);
        char v220 = v41;
        if (v48 >= 0x11) {
          unsigned int v49 = 4;
        }
        else {
          unsigned int v49 = 2;
        }
        if (v48 < 9) {
          size_t v50 = 1;
        }
        else {
          size_t v50 = v49;
        }
        unint64_t v51 = (unint64_t)malloc_type_calloc(2 << v41, v50, 0x4269077AuLL);
        if (!v51) {
          swift::hashable_support::findHashableBaseTypeOfHashableType();
        }
        unint64_t v52 = v39;
        uint64_t v53 = v226;
        char v54 = v41;
        unint64_t v218 = (v42 + 1);
        if (v50 != 1)
        {
          if (v50 == 4) {
            size_t v50 = 3;
          }
          else {
            size_t v50 = 2;
          }
        }
        unint64_t v58 = v50 | v51;
        *(unsigned char *)unint64_t v51 = v41 + 1;
        if (v41)
        {
          if (lock) {
            unint64_t v59 = v39 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t v59 = 0;
          }
          int v60 = v58 & 3;
          if ((v58 & 3) != 0) {
            unint64_t v61 = v51 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t v61 = 0;
          }
          uint64_t v62 = 1;
          unint64_t v63 = (void *)&unk_1EB1F3000;
          while (2)
          {
            switch(v232 & 3)
            {
              case 0uLL:
                uint64_t v64 = (v52 >> (4 * v62)) & 0xF;
                if (!v64) {
                  goto LABEL_105;
                }
                goto LABEL_114;
              case 1uLL:
                LODWORD(v64) = *(unsigned __int8 *)(v59 + v62);
                if (!*(unsigned char *)(v59 + v62)) {
                  goto LABEL_105;
                }
                goto LABEL_114;
              case 2uLL:
                LODWORD(v64) = *(unsigned __int16 *)(v59 + 2 * v62);
                if (!*(_WORD *)(v59 + 2 * v62)) {
                  goto LABEL_105;
                }
                goto LABEL_114;
              case 3uLL:
                LODWORD(v64) = *(_DWORD *)(v59 + 4 * v62);
                if (v64)
                {
LABEL_114:
                  unint64_t v65 = **(void **)(v53 + 8 * (v64 - 1));
                  {
                    os_unfair_lock_t locka = (os_unfair_lock_t)v59;
                    unint64_t v63 = &unk_1EB1F3000;
                    unint64_t v52 = v232;
                    unint64_t v59 = (unint64_t)locka;
                    char v54 = v220;
                    uint64_t v53 = v226;
                    if (v71)
                    {
                      unint64_t v72 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
                      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
                        unint64_t v72 = 0xFF51AFD7ED558CCDLL;
                      }
                      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v72;
                      unint64_t v63 = (void *)&unk_1EB1F3000;
                      unint64_t v52 = v232;
                      unint64_t v59 = (unint64_t)locka;
                      char v54 = v220;
                      uint64_t v53 = v226;
                    }
                  }
                  unint64_t v66 = 0x9DDFEA08EB382D69 * ((v63[38] + 8 * v65) ^ HIDWORD(v65));
                  unint64_t v67 = 0x9DDFEA08EB382D69 * (HIDWORD(v65) ^ (v66 >> 47) ^ v66);
                  for (unint64_t j = 0x9DDFEA08EB382D69 * (v67 ^ (v67 >> 47)); ; unint64_t j = v70 + 1)
                  {
                    uint64_t v70 = j & ~(-2 << v220);
                    if (v70)
                    {
                      switch(v58 & 3)
                      {
                        case 1uLL:
                          LODWORD(v69) = *(unsigned __int8 *)(v61 + v70);
                          break;
                        case 2uLL:
                          LODWORD(v69) = *(unsigned __int16 *)(v61 + 2 * v70);
                          break;
                        case 3uLL:
                          LODWORD(v69) = *(_DWORD *)(v61 + 4 * v70);
                          break;
                        default:
                          uint64_t v69 = (v58 >> (4 * v70)) & 0xF;
                          break;
                      }
                      if (!v69) {
                        break;
                      }
                    }
                  }
                  if (v60 == 3)
                  {
                    *(_DWORD *)(v61 + 4 * v70) = v64;
                  }
                  else if (v60 == 2)
                  {
                    *(_WORD *)(v61 + 2 * v70) = v64;
                  }
                  else
                  {
                    *(unsigned char *)(v61 + v70) = v64;
                  }
                }
LABEL_105:
                if (!((unint64_t)++v62 >> v54)) {
                  continue;
                }
                goto LABEL_132;
              default:
LABEL_361:
                JUMPOUT(0);
            }
          }
        }
LABEL_132:
        atomic_store(v58, (unint64_t *)&qword_1E8ECFA00);
        if (!v239)
        {
          v73 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
          uint64_t v53 = v226;
          void *v73 = qword_1E8ECFA10;
          v73[1] = v223;
          qword_1E8ECFA10 = (uint64_t)v73;
        }
        unint64_t v57 = v230;
        unint64_t v47 = v218;
      }
      unsigned int v74 = v46;
      if (!v228 || (unint64_t v75 = (unint64_t)v228, v57 >= *v228))
      {
        unint64_t v76 = v57 + (v57 >> 2);
        if (v76 <= v57 + 1) {
          unint64_t v76 = v57 + 1;
        }
        size_t v77 = malloc_good_size(8 * v76 + 8);
        unint64_t v78 = malloc_type_malloc(v77, 0x1000D770uLL);
        if (!v78) {
          swift::hashable_support::findHashableBaseTypeOfHashableType();
        }
        unint64_t v75 = (unint64_t)v78;
        *unint64_t v78 = (v77 + 0x7FFFFFFF8) >> 3;
        if (v228)
        {
          memcpy(v78 + 2, __src, 8 * v57);
          int v79 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
          void *v79 = qword_1E8ECFA10;
          v79[1] = v228;
          qword_1E8ECFA10 = (uint64_t)v79;
        }
        atomic_store(v75, (unint64_t *)&qword_1E8ECF9F8);
      }
      __int16 v242 = 21;
      unint64_t v80 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v242, 0x40uLL, 8);
      *(void *)unint64_t v80 = v240;
      *(_OWORD *)(v80 + 4) = 0u;
      *(_OWORD *)(v80 + 12) = 0u;
      *(_OWORD *)(v80 + 20) = 0u;
      *((void *)v80 + 7) = 0;
      *(void *)(v75 + 8 * v57 + 8) = v80;
      atomic_store(v47, (unsigned int *)&dword_1E8ECF9F4);
      uint64_t v32 = v80;
      uint64_t v8 = a3;
      switch((int)v47)
      {
        case 1:
          unint64_t v81 = v58 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v58 & 3) == 0) {
            unint64_t v81 = 0;
          }
          atomic_store(v47, (unsigned __int8 *)(v81 + v74));
          break;
        case 2:
          unint64_t v82 = v58 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v58 & 3) == 0) {
            unint64_t v82 = 0;
          }
          atomic_store(v47, (unsigned __int16 *)(v82 + 2 * v74));
          break;
        case 3:
          unint64_t v83 = v58 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v58 & 3) == 0) {
            unint64_t v83 = 0;
          }
          atomic_store(v47, (unsigned int *)(v83 + 4 * v74));
          break;
        default:
          atomic_store((v47 << (4 * v74)) | v58, (unint64_t *)&qword_1E8ECFA00);
          break;
      }
      __dmb(0xBu);
        goto LABEL_158;
      unint64_t v84 = (void **)qword_1E8ECFA10;
      if (qword_1E8ECFA10)
      {
        do
        {
          unint64_t v85 = (void **)*v84;
          free(v84[1]);
          free(v84);
          unint64_t v84 = v85;
        }
        while (v85);
      }
    }
    qword_1E8ECFA10 = 0;
    goto LABEL_158;
  }
  uint64_t v18 = *a1;
  if (!v18) {
    goto LABEL_42;
  }
  unsigned int v19 = (char **)((char *)a1 + (v18 & 0xFFFFFFFFFFFFFFFELL));
  if (v18)
  {
    uint64_t v20 = *v19;
    goto LABEL_44;
  }
  if (v19) {
    uint64_t v20 = (char *)a1 + (v18 & 0xFFFFFFFFFFFFFFFELL);
  }
  else {
LABEL_42:
  }
    uint64_t v20 = 0;
LABEL_44:
  if (*((_DWORD *)v20 + 4) + 1 != *v16) {
    goto LABEL_49;
  }
  if (v17 > 1 || *((_DWORD *)v16 + 1) != 0) {
    goto LABEL_49;
  }
LABEL_2:
  uint64_t v5 = a1[2];
  uint64_t result = (uint64_t)a1 + v5 + 8;
  if (v5) {
    BOOL v7 = result == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    uint64_t v12 = v3 + 1;
    unsigned int v13 = (v4 >> 3) & 7;
    if (v13 == 1)
    {
      uint64_t v21 = *v12;
      char v22 = (char **)((char *)v12 + v21);
      if (v21) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v15 = *v23;
      if (!*v23) {
        goto LABEL_32;
      }
    }
    else
    {
      if (v13) {
        goto LABEL_32;
      }
      uint64_t v14 = *v12;
      if (!v14 || !(int *)((char *)v12 + v14)) {
        goto LABEL_32;
      }
      uint64_t v15 = (char *)v12 + v14;
    }
    if (v15)
    {
      uint64_t v24 = (uint64_t)v15;
      uint64_t v25 = *v3;
      if (!v25) {
        goto LABEL_38;
      }
LABEL_33:
      uint64_t v26 = (uint64_t *)((char *)v3 + (v25 & 0xFFFFFFFFFFFFFFFELL));
      if (v25)
      {
        if (*v26)
        {
          uint64_t v27 = *v26;
          goto LABEL_39;
        }
      }
      else if (v26)
      {
        uint64_t v27 = (uint64_t)v3 + (v25 & 0xFFFFFFFFFFFFFFFELL);
LABEL_39:
        return _getForeignWitnessTable(result, v24, v27);
      }
LABEL_38:
      uint64_t v27 = 0;
      goto LABEL_39;
    }
LABEL_32:
    uint64_t v24 = 0;
    uint64_t v25 = *v3;
    if (!v25) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  return result;
}

const char *swift_getAssociatedTypeWitness(uint64_t a1, int **a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result = (const char *)atomic_load_explicit((atomic_ullong *volatile)((char *)a2 + (((unint64_t)a5 - a4) & 0x7FFFFFFF8)), memory_order_acquire);
  if (result) {
    return swift_getAssociatedTypeWitnessSlow(a1, a2, a3, a4, a5);
  }
  return result;
}

const char *swift_getAssociatedTypeWitnessSlow(uint64_t a1, int **a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  swift_once(&swift_getAssociatedTypeWitnessSlow::Predicate, (dispatch_function_t)swift_getAssociatedTypeWitnessSlow::$_0::__invoke, 0);
  BOOL v10 = swift_getAssociatedTypeWitnessSlow::Override;
  if (swift_getAssociatedTypeWitnessSlow::Override)
  {
    return (const char *)((uint64_t (*)(uint64_t, int **, uint64_t, uint64_t, _DWORD *, const char *(*)(uint64_t, int **, uint64_t, uint64_t, _DWORD *)))v10)(a1, a2, a3, a4, a5, swift_getAssociatedTypeWitnessSlowImpl);
  }
  else
  {
    return swift_getAssociatedTypeWitnessSlowImpl(a1, a2, a3, a4, a5);
  }
}

uint64_t swift_getAssociatedTypeWitnessRelative(uint64_t a1, const char *a2, Class *a3, uint64_t a4, _DWORD *a5)
{
  if (a2) {
    a2 = *(const char **)((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2) {
    uint64_t v8 = (int *)a2;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = &v8[(((unint64_t)a5 - a4) >> 3)];
  BOOL v10 = (unsigned char *)(((unint64_t)v9 + *v9) & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v11 = *v8;
  uint64_t v12 = (int *)((char *)v8 + (v11 & 0xFFFFFFFFFFFFFFFELL));
  if (v11) {
    uint64_t v12 = *(int **)v12;
  }
  uint64_t v13 = *v12;
  if (v13)
  {
    uint64_t v14 = (uint64_t *)((char *)v12 + (v13 & 0xFFFFFFFFFFFFFFFELL));
    if (v13)
    {
      if (*v14)
      {
        uint64_t v15 = *v14;
        goto LABEL_15;
      }
    }
    else if (v14)
    {
      uint64_t v15 = (uint64_t)v12 + (v13 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_15;
    }
  }
  uint64_t v15 = 0;
LABEL_15:
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v10, a2);
  unint64_t v18 = (unint64_t)v17;
  v53[0] = SymbolicMangledNameStringRef;
  v53[1] = v17;
  ConformingSuperclass = (unint64_t *)swift::findConformingSuperclass((uint64_t)a3, (uint64_t)v12);
  int v47 = 0;
  uint64_t TypeContextDescriptor = swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(ConformingSuperclass);
  if (TypeContextDescriptor)
  {
    uint64_t v48 = TypeContextDescriptor;
    if (ConformingSuperclass)
    {
LABEL_17:
      GenericArgs = swift::TargetMetadata<swift::InProcess>::getGenericArgs(ConformingSuperclass);
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v48 = 0;
    if (ConformingSuperclass) {
      goto LABEL_17;
    }
  }
  GenericArgs = 0;
LABEL_20:
  unsigned int v49 = GenericArgs;
  size_t v50 = v52;
  uint64_t v51 = 0x800000000;
  v52[32] = 0;
  v43[0] = &unk_1ECA06348;
  v43[1] = &v47;
  uint64_t v44 = v43;
  v41[0] = &unk_1ECA06390;
  v41[1] = &v47;
  unint64_t v42 = v41;
  swift_getTypeByMangledName(a1, SymbolicMangledNameStringRef, v18, (uint64_t)GenericArgs, v43, v41, (uint64_t)v45);
  if (v42 == v41)
  {
    (*(void (**)(void *))(v41[0] + 32))(v41);
  }
  else if (v42)
  {
    (*(void (**)(void))(*v42 + 40))();
  }
  if (v44 == v43)
  {
    (*(void (**)(void *))(v43[0] + 32))(v43);
  }
  else if (v44)
  {
    (*(void (**)(void))(*v44 + 40))();
  }
  if (v46) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v45[0];
  }
  if (v46 == 1 || !v22)
  {
    if (v46 == 1) {
      uint64_t v24 = (const char *)((uint64_t (*)(void))v45[1])();
    }
    else {
      uint64_t v24 = "NULL metadata but no error was provided";
    }
    v40[0] = swift_getTypeName(a3, 1);
    v40[1] = v25;
    v39[0] = findAssociatedTypeName(v15, a5);
    v39[1] = v26;
    uint64_t v27 = v37;
    __swift::__runtime::llvm::StringRef::str(v39, (uint64_t)v37);
    if (v38 < 0) {
      uint64_t v27 = (void *)v37[0];
    }
    v28 = v35;
    __swift::__runtime::llvm::StringRef::str(v40, (uint64_t)v35);
    if (v36 < 0) {
      v28 = (void *)v35[0];
    }
    uint64_t v29 = v15 + 8 + *(int *)(v15 + 8);
    __swift::__runtime::llvm::StringRef::str(v53, (uint64_t)v33);
    if (v34 >= 0) {
      uint64_t v32 = v33;
    }
    else {
      uint64_t v32 = (void *)v33[0];
    }
    swift::fatalError(0, "failed to demangle witness for associated type '%s' in conformance '%s: %s' from mangled name '%s' - %s\n", v30, v31, v27, v28, v29, v32, v24);
  }
  if (v50 != v52) {
    free(v50);
  }
  return v22;
}

uint64_t swift_getAssociatedConformanceWitness(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + (((unint64_t)a5 - a4) & 0x7FFFFFFF8)), memory_order_acquire);
  if (explicit) {
    return swift_getAssociatedConformanceWitnessSlow(a1, a2, a3, a4, a5);
  }
  else {
    return explicit;
  }
}

uint64_t swift_getAssociatedConformanceWitnessSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  swift_once(&swift_getAssociatedConformanceWitnessSlow::Predicate, (dispatch_function_t)swift_getAssociatedConformanceWitnessSlow::$_0::__invoke, 0);
  uint64_t v11 = swift_getAssociatedConformanceWitnessSlow::Override;
  if (swift_getAssociatedConformanceWitnessSlow::Override)
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t, _DWORD *)))v11)(a1, a2, a3, a4, a5, swift_getAssociatedConformanceWitnessSlowImpl);
  }
  else
  {
    uint64_t v13 = (atomic_ullong *)(a1 + (((unint64_t)a5 - a4) & 0x7FFFFFFF8));
    uint64_t result = atomic_load_explicit(v13, memory_order_acquire);
    if (result)
    {
      SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)(result & 0xFFFFFFFFFFFFFFFELL | (*(unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL) == 255)), v10);
      if (v15 != 5 || *SymbolicMangledNameStringRef - 7 > 1) {
        abort();
      }
      uint64_t v16 = *(int *)(SymbolicMangledNameStringRef + 1);
      if (v16) {
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))&SymbolicMangledNameStringRef[v16 + 1])(a3, a2, a1);
      }
      else {
        uint64_t result = MEMORY[0](a3, a2, a1);
      }
      unint64_t v17 = result;
      if ((*a5 & 0xF) != 0) {
        unint64_t v17 = result;
      }
      atomic_store(v17, (unint64_t *)v13);
    }
  }
  return result;
}

uint64_t swift_getAssociatedConformanceWitnessRelative(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1;
  if (a1) {
    uint64_t v8 = *(void *)(a1 & 0xFFFFFFFFFFFFFFFELL);
  }
  unint64_t v9 = (int *)(v8 + 4 * ((unint64_t)(a5 - a4) >> 3));
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)(((unint64_t)v9 + *v9) & 0xFFFFFFFFFFFFFFFELL | (*(unsigned __int8 *)(((unint64_t)v9 + *v9) & 0xFFFFFFFFFFFFFFFELL) == 255)), a2);
  if (v11 != 5 || *SymbolicMangledNameStringRef - 7 >= 2) {
    abort();
  }
  uint64_t v12 = *(int *)(SymbolicMangledNameStringRef + 1);
  if (v12) {
    uint64_t v13 = (uint64_t (*)(uint64_t, const char *, uint64_t))&SymbolicMangledNameStringRef[v12 + 1];
  }
  else {
    uint64_t v13 = 0;
  }

  return v13(a3, a2, a1);
}

uint64_t swift_compareWitnessTables(int **a1, int **a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!*a1)
  {
    v2 = 0;
    uint64_t v3 = *a2;
    if (*a2) {
      goto LABEL_4;
    }
LABEL_7:
    unint64_t v4 = 0;
    return swift::MetadataCacheKey::areConformanceDescriptorsEqual(v2, v4);
  }
  v2 = *a1;
  uint64_t v3 = *a2;
  if (!*a2) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v4 = v3;
  return swift::MetadataCacheKey::areConformanceDescriptorsEqual(v2, v4);
}

uint64_t swift_compareProtocolConformanceDescriptors(int *a1, int *a2)
{
  return swift::MetadataCacheKey::areConformanceDescriptorsEqual(a1, a2);
}

uint64_t swift::MetadataCacheKey::areConformanceDescriptorsEqual(int *a1, int *a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a1[3] & 0x80) == 0 || (a2[3] & 0x80) == 0) {
    return 0;
  }
  CanonicalTypeMetadata = swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)a1);
  unint64_t v6 = swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)a2);
  uint64_t result = 0;
  if (CanonicalTypeMetadata && v6 && CanonicalTypeMetadata == v6)
  {
    uint64_t v7 = *a1;
    if (v7)
    {
      uint64_t v8 = (void *)((char *)a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      if ((v7 & 1) == 0)
      {
LABEL_15:
        uint64_t v9 = *a2;
        if (!v9) {
          goto LABEL_19;
        }
        BOOL v10 = (void *)((char *)a2 + (v9 & 0xFFFFFFFFFFFFFFFELL));
        if (v9)
        {
          uint64_t v11 = (void *)*v10;
          return v8 == v11;
        }
        if (v10) {
          uint64_t v11 = (void *)((char *)a2 + (v9 & 0xFFFFFFFFFFFFFFFELL));
        }
        else {
LABEL_19:
        }
          uint64_t v11 = 0;
        return v8 == v11;
      }
      if (*v8)
      {
        uint64_t v8 = (void *)*v8;
        goto LABEL_15;
      }
    }
    uint64_t v8 = 0;
    goto LABEL_15;
  }
  return result;
}

uint64_t *swift_checkMetadataState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  return performOnMetadataCache<swift::MetadataResponse,swift_checkMetadataState::CheckStateCallbacks>(a2, &v3);
}

uint64_t *performOnMetadataCache<swift::MetadataResponse,swift_checkMetadataState::CheckStateCallbacks>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)a1;
  if (!swift::TargetMetadata<swift::InProcess>::isCanonicalStaticallySpecializedGenericMetadata(a1))
  {
    uint64_t v4 = *v3;
    if ((unint64_t)*v3 > 0x7FF || *v3 == 0)
    {
      unint64_t v6 = (_DWORD *)v3[8];
      if (v6)
      {
LABEL_18:
        uint64_t v8 = v6;
        goto LABEL_20;
      }
    }
    else
    {
      if ((v4 - 515) < 0xFFFFFFFD)
      {
        if (v4 != 515)
        {
          if (v4 != 769 || !v3[1]) {
            return v3;
          }
          if (qword_1EB1F88D0 != -1) {
        }
          }
        if (v3[1]) {
          uint64_t v37 = v3[1];
        }
        else {
          uint64_t v37 = 0;
        }
        if (qword_1EB1F8910 != -1) {
        v55[0] = v37;
        }
        atomic_fetch_add_explicit(&ForeignMetadata, 1u, memory_order_acquire);
        do
        {
          unint64_t explicit = atomic_load_explicit(&qword_1EB1F88E0, memory_order_acquire);
          unint64_t v34 = atomic_load_explicit(&qword_1EB1F88E8, memory_order_acquire);
          unint64_t v35 = atomic_load_explicit(&dword_1EB1F88DC, memory_order_acquire);
        }
        while (explicit != atomic_load_explicit(&qword_1EB1F88E0, memory_order_acquire));
LABEL_64:
        if (explicit) {
          BOOL v38 = v34 == 0;
        }
        else {
          BOOL v38 = 1;
        }
        if (v38 || v35 == 0)
        {
          BOOL v40 = 0;
        }
        else
        {
          if (v40) {
            BOOL v40 = (atomic_ullong *)*v40;
          }
        }
        atomic_fetch_add_explicit(&ForeignMetadata, 0xFFFFFFFF, memory_order_release);
      }
      unint64_t v6 = (_DWORD *)v3[1];
      if (v6) {
        goto LABEL_18;
      }
    }
    uint64_t v8 = 0;
LABEL_20:
    if ((*v8 & 0x80) == 0)
    {
      int v9 = HIWORD(*v8) & 3;
      switch(v9)
      {
        case 2:
          if (qword_1EB1F8910 != -1) {
          v55[0] = (uint64_t)v8;
          }
          atomic_fetch_add_explicit(&ForeignMetadata, 1u, memory_order_acquire);
          do
          {
            unint64_t explicit = atomic_load_explicit(&qword_1EB1F88E0, memory_order_acquire);
            unint64_t v34 = atomic_load_explicit(&qword_1EB1F88E8, memory_order_acquire);
            unint64_t v35 = atomic_load_explicit(&dword_1EB1F88DC, memory_order_acquire);
          }
          while (explicit != atomic_load_explicit(&qword_1EB1F88E0, memory_order_acquire));
          goto LABEL_64;
        case 1:
          if (qword_1EB1F8890 != -1) {
        case 0:
          }
          return v3;
      }
LABEL_90:
      abort();
    }
    int v10 = *v8 & 0x1F;
    if ((v10 - 17) >= 2)
    {
      if (v10 != 16) {
        goto LABEL_90;
      }
      if (v8) {
        uint64_t v32 = v8;
      }
      else {
        uint64_t v32 = 0;
      }
      if ((*v32 & 0x20000000) != 0)
      {
        uint64_t v44 = (int)v32[6];
        if (v44) {
          BOOL v45 = (unint64_t *)((char *)v32 + v44 + 24);
        }
        else {
          BOOL v45 = 0;
        }
        unint64_t v46 = *v45;
        if (!*v45)
        {
          computeMetadataBoundsFromSuperclass(v32, (uint64_t)v45);
          unint64_t v46 = v47;
        }
        unint64_t v11 = v46 >> 3;
      }
      else
      {
        if ((*v32 & 0x10000000) != 0)
        {
          int v42 = 0;
          uint64_t v43 = 6;
        }
        else
        {
          int v42 = v32[7];
          uint64_t v43 = 8;
        }
        LODWORD(v11) = v42 - v32[v43];
      }
    }
    else
    {
      LODWORD(v11) = 2;
    }
    uint64_t v12 = &v3[(int)v11];
    Cache = getCache(v8);
    uint64_t v14 = (uint64_t)Cache;
    uint64_t v15 = (unsigned __int16)Cache[28];
    __int16 v16 = Cache[29];
    unint64_t v17 = (unsigned __int16)Cache[30];
    uint64_t v18 = (unsigned __int16)Cache[31];
    uint64_t v19 = *((void *)Cache + 8);
    unint64_t v20 = (1455063249 * v15);
    if (Cache[28])
    {
      unint64_t v21 = 0;
      uint64_t v22 = (unsigned __int16)Cache[31];
      do
      {
        if (v21 >= v17 || *(_WORD *)(v19 + 8 * v21) || (uint64_t v23 = v19 + 8 * v21, v22 != *(unsigned __int16 *)(v23 + 2)))
        {
          unint64_t v20 = __ROR8__(v20, 10) ^ ((unint64_t)v12[v22] >> 19) ^ v12[v22];
        }
        else
        {
          unint64_t v24 = v12[*(unsigned __int16 *)(v23 + 4)];
          ++v21;
          if (v24)
          {
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = *(void *)((v12[v22] & 0xFFFFFFFFFFFFFFFELL) + 8 * v25);
              unint64_t v20 = __ROR8__(v20, 10) ^ (v26 >> 19) ^ v26;
              ++v25;
            }
            while (v24 > v25);
          }
        }
        ++v22;
      }
      while (v22 != v18 + v15);
    }
    uint64_t v48 = v12;
    __int16 v49 = v15;
    __int16 v50 = v16;
    __int16 v51 = v17;
    __int16 v52 = v18;
    uint64_t v53 = v19;
    int v54 = (668265261 * v20) >> 10;
    atomic_fetch_add_explicit((atomic_uint *volatile)v14, 1u, memory_order_acquire);
    do
    {
      unint64_t v27 = atomic_load_explicit((atomic_ullong *volatile)(v14 + 8), memory_order_acquire);
      unint64_t v28 = atomic_load_explicit((atomic_ullong *volatile)(v14 + 16), memory_order_acquire);
      uint64_t v29 = atomic_load_explicit((atomic_uint *volatile)(v14 + 4), memory_order_acquire);
    }
    while (v27 != atomic_load_explicit((atomic_ullong *volatile)(v14 + 8), memory_order_acquire));
    if (v27) {
      uint64_t v30 = v27 + 8;
    }
    else {
      uint64_t v30 = 0;
    }
    v55[0] = v14;
    v55[1] = v28;
    v55[2] = v30;
    v55[3] = v29;
    if (v31) {
      BOOL v31 = (atomic_ullong *)*v31;
    }
    atomic_fetch_add_explicit((atomic_uint *volatile)v14, 0xFFFFFFFF, memory_order_release);
  }
  return v3;
}

void swift::blockOnMetadataDependency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  p_p = &__p;
  uint64_t v8 = (char *)operator new(0x10uLL);
  *(void *)uint64_t v8 = a1;
  *((void *)v8 + 1) = a2;
  unint64_t v75 = v8 + 16;
  unint64_t v76 = v8 + 16;
  __p = v8;
  swift::blockOnMetadataDependency(swift::MetadataDependency,swift::MetadataDependency)::$_0::operator()((uint64_t **)&p_p, a3, a4);
  int v10 = (uint64_t *)*((void *)v75 - 2);
  uint64_t v9 = *((void *)v75 - 1);
  uint64_t v77 = v9;
  if (swift::TargetMetadata<swift::InProcess>::isCanonicalStaticallySpecializedGenericMetadata((uint64_t)v10)) {
    goto LABEL_2;
  }
  while (1)
  {
    uint64_t v14 = *v10;
    if ((unint64_t)*v10 > 0x7FF || *v10 == 0)
    {
      __int16 v16 = (_DWORD *)v10[8];
      if (v16) {
        goto LABEL_30;
      }
    }
    else
    {
      if ((v14 - 515) < 0xFFFFFFFD)
      {
        if (v14 == 515)
        {
          if (v10[1]) {
            uint64_t v58 = v10[1];
          }
          else {
            uint64_t v58 = 0;
          }
          checkMetadataDependency(swift::MetadataDependency)::CheckDependencyResult::forForeignMetadata(&v77, v58, (uint64_t)v70);
          goto LABEL_145;
        }
        if (v14 != 769 || !v10[1]) {
          goto LABEL_2;
        }
        if (qword_1EB1F88D0 != -1) {
        unint64_t v11 = atomic_load_explicit(v10 - 14, memory_order_acquire) & 7;
        }
        if (v9 > 62)
        {
          if (v9 != 255)
          {
            if (v9 != 63) {
              goto LABEL_160;
            }
            if (v11 > 1) {
              goto LABEL_3;
            }
            os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F88C8);
            uint64_t v18 = *(v10 - 14);
            unsigned __int8 v19 = v18 & 7;
            if ((v18 & 7u) > 1) {
              goto LABEL_138;
            }
            goto LABEL_133;
          }
          if (v11) {
            goto LABEL_3;
          }
          os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F88C8);
          uint64_t v18 = *(v10 - 14);
          unsigned __int8 v19 = v18 & 7;
          if ((*(_DWORD *)(v10 - 14) & 7) == 0) {
            goto LABEL_133;
          }
        }
        else
        {
          if (v9)
          {
            if (v9 != 1) {
              goto LABEL_160;
            }
            if (v11 > 2) {
              goto LABEL_3;
            }
            os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F88C8);
            uint64_t v18 = *(v10 - 14);
            unsigned __int8 v19 = v18 & 7;
            if ((v18 & 7u) > 2) {
              goto LABEL_138;
            }
LABEL_133:
            v70[0] = v19;
            uint64_t v68 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF0);
            if ((v18 & 8) != 0 && v68)
            {
              uint64_t v69 = *(void *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18);
              uint64_t v17 = *(void *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x20);
            }
            else
            {
              uint64_t v69 = 0;
              if (v68 && (v18 & 8) == 0)
              {
                uint64_t v69 = *v68;
                uint64_t v17 = *(void *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8);
              }
            }
            uint64_t v71 = v69;
            uint64_t v72 = v17;
            goto LABEL_143;
          }
          if (v11 > 3) {
            goto LABEL_3;
          }
          os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F88C8);
          uint64_t v18 = *(v10 - 14);
          unsigned __int8 v19 = v18 & 7;
          if ((v18 & 7u) <= 3) {
            goto LABEL_133;
          }
        }
LABEL_138:
        v70[0] = v19;
        uint64_t v71 = 0;
LABEL_143:
        unint64_t v67 = (os_unfair_lock_s *)&unk_1EB1F88C8;
        goto LABEL_144;
      }
      __int16 v16 = (_DWORD *)v10[1];
      if (v16)
      {
LABEL_30:
        unint64_t v20 = v16;
        goto LABEL_32;
      }
    }
    unint64_t v20 = 0;
LABEL_32:
    if ((*v20 & 0x80) == 0) {
      break;
    }
    int v22 = *v20 & 0x1F;
    if ((v22 - 17) >= 2)
    {
      if (v22 != 16) {
        goto LABEL_160;
      }
      if (v20) {
        unint64_t v57 = v20;
      }
      else {
        unint64_t v57 = 0;
      }
      if ((*v57 & 0x20000000) != 0)
      {
        uint64_t v61 = (int)v57[6];
        if (v61) {
          uint64_t v62 = (unint64_t *)((char *)v57 + v61 + 24);
        }
        else {
          uint64_t v62 = 0;
        }
        unint64_t v63 = *v62;
        if (!*v62)
        {
          computeMetadataBoundsFromSuperclass(v57, (uint64_t)v62);
          unint64_t v63 = v64;
        }
        unint64_t v23 = v63 >> 3;
      }
      else
      {
        if ((*v57 & 0x10000000) != 0)
        {
          int v59 = 0;
          uint64_t v60 = 6;
        }
        else
        {
          int v59 = v57[7];
          uint64_t v60 = 8;
        }
        LODWORD(v23) = v59 - v57[v60];
      }
    }
    else
    {
      LODWORD(v23) = 2;
    }
    unint64_t v24 = &v10[(int)v23];
    Cache = getCache(v20);
    unint64_t v26 = Cache;
    uint64_t v27 = (unsigned __int16)Cache[28];
    __int16 v28 = Cache[29];
    unint64_t v29 = (unsigned __int16)Cache[30];
    uint64_t v30 = (unsigned __int16)Cache[31];
    uint64_t v31 = *((void *)Cache + 8);
    unint64_t v32 = (1455063249 * v27);
    if (Cache[28])
    {
      unint64_t v33 = 0;
      uint64_t v34 = (unsigned __int16)Cache[31];
      do
      {
        if (v33 >= v29 || *(_WORD *)(v31 + 8 * v33) || (uint64_t v35 = v31 + 8 * v33, v34 != *(unsigned __int16 *)(v35 + 2)))
        {
          unint64_t v32 = __ROR8__(v32, 10) ^ ((unint64_t)v24[v34] >> 19) ^ v24[v34];
        }
        else
        {
          unint64_t v36 = v24[*(unsigned __int16 *)(v35 + 4)];
          ++v33;
          if (v36)
          {
            uint64_t v37 = 0;
            do
            {
              unint64_t v38 = *(void *)((v24[v34] & 0xFFFFFFFFFFFFFFFELL) + 8 * v37);
              unint64_t v32 = __ROR8__(v32, 10) ^ (v38 >> 19) ^ v38;
              ++v37;
            }
            while (v36 > v37);
          }
        }
        ++v34;
      }
      while (v34 != v30 + v27);
    }
    unint64_t v78 = v24;
    __int16 v79 = v27;
    __int16 v80 = v28;
    __int16 v81 = v29;
    __int16 v82 = v30;
    uint64_t v83 = v31;
    int v84 = (668265261 * v32) >> 10;
    atomic_fetch_add_explicit((atomic_uint *volatile)v26, 1u, memory_order_acquire);
    do
    {
      unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)v26 + 1, memory_order_acquire);
      unint64_t v40 = atomic_load_explicit((atomic_ullong *volatile)v26 + 2, memory_order_acquire);
      uint64_t v41 = atomic_load_explicit((atomic_uint *volatile)v26 + 1, memory_order_acquire);
    }
    while (explicit != atomic_load_explicit((atomic_ullong *volatile)v26 + 1, memory_order_acquire));
    if (explicit) {
      unint64_t v42 = explicit + 8;
    }
    else {
      unint64_t v42 = 0;
    }
    v85[0] = v26;
    v85[1] = v40;
    v85[2] = v42;
    v85[3] = v41;
    if (v43) {
      uint64_t v44 = *v43;
    }
    else {
      uint64_t v44 = 0;
    }
    atomic_fetch_add_explicit((atomic_uint *volatile)v26, 0xFFFFFFFF, memory_order_release);
    __int16 v49 = (os_unfair_lock_s *)(v26 + 24);
    uint64_t v50 = v77;
    unint64_t v51 = atomic_load_explicit(v44, memory_order_acquire) & 7;
    if (v50 > 62)
    {
      if (v50 == 255)
      {
        if (!v51)
        {
          os_unfair_lock_lock(v49);
          atomic_ullong v53 = *v44;
          uint64_t v54 = *v44 & 7;
          if ((*(_DWORD *)v44 & 7) != 0) {
            goto LABEL_85;
          }
          goto LABEL_70;
        }
      }
      else
      {
        if (v50 != 63) {
          goto LABEL_160;
        }
        if (v51 <= 1)
        {
          os_unfair_lock_lock(v49);
          atomic_ullong v53 = *v44;
          uint64_t v54 = *v44 & 7;
          if (v54 > 1)
          {
LABEL_85:
            v70[0] = v54;
            uint64_t v71 = 0;
            goto LABEL_126;
          }
LABEL_70:
          v70[0] = v54;
          unsigned int v55 = (uint64_t *)(v53 & 0xFFFFFFFFFFFFFFF0);
          if ((v53 & 8) != 0 && v55)
          {
            uint64_t v56 = *(void *)((v53 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            uint64_t v52 = *(void *)((v53 & 0xFFFFFFFFFFFFFFF0) + 0x20);
          }
          else
          {
            uint64_t v56 = 0;
            if (v55 && (v53 & 8) == 0)
            {
              uint64_t v56 = *v55;
              uint64_t v52 = *(void *)((v53 & 0xFFFFFFFFFFFFFFF0) + 8);
            }
          }
          uint64_t v71 = v56;
          uint64_t v72 = v52;
LABEL_126:
          unint64_t v67 = v49;
LABEL_144:
          os_unfair_lock_unlock(v67);
          goto LABEL_145;
        }
      }
    }
    else if (v50)
    {
      if (v50 != 1) {
        goto LABEL_160;
      }
      if (v51 <= 2)
      {
        os_unfair_lock_lock(v49);
        atomic_ullong v53 = *v44;
        uint64_t v54 = *v44 & 7;
        if (v54 > 2) {
          goto LABEL_85;
        }
        goto LABEL_70;
      }
    }
    else if (v51 <= 3)
    {
      os_unfair_lock_lock(v49);
      atomic_ullong v53 = *v44;
      uint64_t v54 = *v44 & 7;
      if (v54 > 3) {
        goto LABEL_85;
      }
      goto LABEL_70;
    }
    v70[0] = v51;
    uint64_t v71 = 0;
LABEL_145:
    if (!v71) {
      goto LABEL_4;
    }
    swift::blockOnMetadataDependency(swift::MetadataDependency,swift::MetadataDependency)::$_0::operator()((uint64_t **)&p_p, v71, v72);
    int v10 = (uint64_t *)*((void *)v75 - 2);
    uint64_t v9 = *((void *)v75 - 1);
    uint64_t v77 = v9;
    if (swift::TargetMetadata<swift::InProcess>::isCanonicalStaticallySpecializedGenericMetadata((uint64_t)v10)) {
      goto LABEL_2;
    }
  }
  int v21 = HIWORD(*v20) & 3;
  if (v21 == 1)
  {
    if (qword_1EB1F8890 != -1) {
    unint64_t v11 = atomic_load_explicit(v45, memory_order_acquire) & 7;
    }
    if (v9 > 62)
    {
      if (v9 != 255)
      {
        if (v9 != 63) {
          goto LABEL_160;
        }
        if (v11 > 1) {
          goto LABEL_3;
        }
        os_unfair_lock_lock((os_unfair_lock_t)&SingletonMetadata);
        atomic_ullong v47 = *v45;
        uint64_t v48 = *v45 & 7;
        if (v48 > 1) {
          goto LABEL_117;
        }
        goto LABEL_112;
      }
      if (v11) {
        goto LABEL_3;
      }
      os_unfair_lock_lock((os_unfair_lock_t)&SingletonMetadata);
      atomic_ullong v47 = *v45;
      uint64_t v48 = *v45 & 7;
      if ((*(_DWORD *)v45 & 7) == 0) {
        goto LABEL_112;
      }
    }
    else
    {
      if (v9)
      {
        if (v9 != 1) {
          goto LABEL_160;
        }
        if (v11 > 2) {
          goto LABEL_3;
        }
        os_unfair_lock_lock((os_unfair_lock_t)&SingletonMetadata);
        atomic_ullong v47 = *v45;
        uint64_t v48 = *v45 & 7;
        if (v48 > 2) {
          goto LABEL_117;
        }
LABEL_112:
        v70[0] = v48;
        unint64_t v65 = (uint64_t *)(v47 & 0xFFFFFFFFFFFFFFF0);
        if ((v47 & 8) != 0 && v65)
        {
          uint64_t v66 = *(void *)((v47 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          uint64_t v46 = *(void *)((v47 & 0xFFFFFFFFFFFFFFF0) + 0x20);
        }
        else
        {
          uint64_t v66 = 0;
          if (v65 && (v47 & 8) == 0)
          {
            uint64_t v66 = *v65;
            uint64_t v46 = *(void *)((v47 & 0xFFFFFFFFFFFFFFF0) + 8);
          }
        }
        uint64_t v71 = v66;
        uint64_t v72 = v46;
        unint64_t v67 = (os_unfair_lock_s *)&SingletonMetadata;
        goto LABEL_144;
      }
      if (v11 > 3) {
        goto LABEL_3;
      }
      os_unfair_lock_lock((os_unfair_lock_t)&SingletonMetadata);
      atomic_ullong v47 = *v45;
      uint64_t v48 = *v45 & 7;
      if (v48 <= 3) {
        goto LABEL_112;
      }
    }
LABEL_117:
    v70[0] = v48;
    uint64_t v71 = 0;
    unint64_t v67 = (os_unfair_lock_s *)&SingletonMetadata;
    goto LABEL_144;
  }
  if (v21 == 2)
  {
    checkMetadataDependency(swift::MetadataDependency)::CheckDependencyResult::forForeignMetadata(&v77, (uint64_t)v20, (uint64_t)v70);
    goto LABEL_145;
  }
  if (v21) {
LABEL_160:
  }
    abort();
LABEL_2:
  LOBYTE(v11) = 4;
LABEL_3:
  v70[0] = v11;
LABEL_4:
  uint64_t v12 = (char *)__p;
  if (v75 - (unsigned char *)__p != 32) {
    goto LABEL_153;
  }
  uint64_t v13 = *((void *)v75 - 1);
  if (v13 <= 62)
  {
    if (v13)
    {
      if (v13 != 1) {
        goto LABEL_160;
      }
      if (v70[0] > 2u) {
        goto LABEL_154;
      }
    }
    else if (v70[0] > 3u)
    {
      goto LABEL_154;
    }
LABEL_153:
    v85[0] = a4 & 0xFFFFFFFFFFFFFEFFLL;
    performOnMetadataCache<swift::MetadataResponse,swift_checkMetadataState::CheckStateCallbacks>(a3, v85);
    uint64_t v12 = (char *)__p;
    goto LABEL_154;
  }
  if (v13 == 255)
  {
    if (v70[0]) {
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v13 != 63) {
    goto LABEL_160;
  }
  if (v70[0] <= 1u) {
    goto LABEL_153;
  }
LABEL_154:
  if (v12)
  {
    unint64_t v75 = v12;
    operator delete(v12);
  }
}

uint64_t swift::blockOnMetadataDependency(swift::MetadataDependency,swift::MetadataDependency)::$_0::operator()(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  uint64_t v8 = (void *)(*a1)[1];
  unint64_t v7 = (*a1)[2];
  if ((unint64_t)v8 >= v7)
  {
    int v10 = (void *)*v6;
    uint64_t v11 = ((uint64_t)v8 - *v6) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      abort();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = (char *)operator new(16 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    __int16 v16 = &v15[16 * v11];
    *(void *)__int16 v16 = a2;
    *((void *)v16 + 1) = a3;
    uint64_t v9 = v16 + 16;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 16;
        v8 -= 2;
      }
      while (v8 != v10);
      uint64_t v8 = (void *)*v6;
    }
    *unint64_t v6 = (uint64_t)v16;
    v6[1] = (uint64_t)v9;
    v6[2] = (uint64_t)&v15[16 * v14];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v8 = a2;
    v8[1] = a3;
    uint64_t v9 = v8 + 2;
  }
  v6[1] = (uint64_t)v9;
  uint64_t result = **a1;
  uint64_t v18 = (*a1)[1];
  if (result != v18 - 16)
  {
    unsigned __int8 v19 = (void *)**a1;
    do
    {
      if (*v19 == a2) {
        diagnoseMetadataDependencyCycle(result, (v18 - result) >> 4);
      }
      v19 += 2;
      result += 16;
    }
    while (v19 != (void *)(v18 - 16));
  }
  return result;
}

void *swift::MetadataAllocator::InitialPoolLocation(swift::MetadataAllocator *this)
{
  return &InitialAllocationPool;
}

void checkAllocatorDebugEnvironmentVariables(void *a1, uint64_t a2, const char *a3, char *a4)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE_variable) {
    memset(&InitialAllocationPool, 170, 0x10000uLL);
  }
  _swift_debug_metadataAllocationIterationEnabled = swift::runtime::environment::SWIFT_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION_variable;
  if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION_variable)
  {
    _X0 = 0;
    _X1 = 0;
    __asm { CASP            X0, X1, X0, X1, [X8] }
    qword_1EB208908 = 0;
    unk_1EB208910 = 65520;
    uint64_t v11 = AllocationPool;
    do
    {
      _X5 = unk_1EB1F3148;
      __asm { CASP            X4, X5, X0, X1, [X8] }
      _ZF = _X4 == v11;
      uint64_t v11 = _X4;
    }
    while (!_ZF);
  }
  else if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING_variable)
  {
    swift::warning(0, "Warning: SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING without SWIFT_DEBUG_ENABLE_METADATA_ALLOCATION_ITERATION has no effect.\n", a3, a4);
  }
}

uint64_t swift::runtime::environment::SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING(swift::runtime::environment *this)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  return swift::runtime::environment::SWIFT_DEBUG_ENABLE_METADATA_BACKTRACE_LOGGING_variable;
}

void *recordBacktrace(void *a1)
{
  uint64_t v4 = a1;
  v2[0] = &unk_1ECA063D8;
  v2[1] = &v4;
  uint64_t v3 = v2;
  swift::withCurrentBacktrace(v2);
  uint64_t result = v3;
  if (v3 == v2) {
    return (void *)(*(uint64_t (**)(void *))(v2[0] + 32))(v2);
  }
  if (v3) {
    return (void *)(*(uint64_t (**)(void))(*v3 + 40))();
  }
  return result;
}

void checkScribble(char *a1, unint64_t a2)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_MALLOC_SCRIBBLE_variable) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = (unsigned __int8 *)a1;
    do
    {
      if (*a1 != 170)
      {
        if (a2 >= 0x10) {
          uint64_t v6 = 16;
        }
        else {
          uint64_t v6 = a2;
        }
        if (a2 <= 0x10) {
          unint64_t v7 = "";
        }
        else {
          unint64_t v7 = "...";
        }
        __swift::__runtime::llvm::toHex(v5, v6, 0, &v11);
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v10 = &v11;
        }
        else {
          int v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
        }
        swift::fatalError(0, "corrupt metadata allocation arena detected at %p: %s%s", v8, v9, a1, v10, v7);
      }
      ++v5;
      ++a1;
      --a2;
    }
    while (a2);
  }
}

_WORD *swift::allocateMetadata(size_t size, uint64_t a2)
{
  __int16 v3 = 12;
  return swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v3, size, a2);
}

BOOL swift::TargetMetadata<swift::InProcess>::satisfiesClassConstraint(uint64_t a1)
{
  unint64_t v1 = *(void *)a1;
  if (*(void *)a1 == 771) {
    return (*(_DWORD *)(a1 + 8) & 0x80FFFFFF) == 0;
  }
  if (v1 > 0x7FF) {
    LODWORD(v1) = 0;
  }
  BOOL result = 1;
  if (v1) {
    return v1 == 515 || v1 == 773;
  }
  return result;
}

uint64_t swift_getKeyPath(uint64_t a1, uint64_t a2)
{
  swift_once(&swift_getKeyPath::Predicate, (dispatch_function_t)swift_getKeyPath::$_0::__invoke, 0);
  BOOL v4 = swift_getKeyPath::Override;
  if (swift_getKeyPath::Override)
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void, void)))v4)(a1, a2, swift_getKeyPathImpl);
  }
  else
  {
    return swift_getKeyPathImpl(a1, a2);
  }
}

const char *swift_getAssociatedTypeWitnessSlowImpl(uint64_t a1, int **a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v49 = a3;
  uint64_t v50 = a2;
  uint64_t v48 = a4;
  uint64_t v6 = (atomic_ullong *)((char *)a2 + (((unint64_t)a5 - a4) & 0x7FFFFFFF8));
  unint64_t explicit = atomic_load_explicit(v6, memory_order_acquire);
  BOOL result = (const char *)explicit;
  if (explicit)
  {
    int v10 = *(unsigned __int8 *)(explicit & 0xFFFFFFFFFFFFFFFELL);
    std::string v11 = (unsigned char *)(explicit & 0xFFFFFFFFFFFFFFFELL | (v10 == 255));
    if (*v50) {
      unint64_t v12 = *v50;
    }
    else {
      unint64_t v12 = 0;
    }
    Protocol = swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getProtocol(v12);
    SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v11, v13);
    __int16 v16 = v15;
    v46[0] = SymbolicMangledNameStringRef;
    v46[1] = v15;
    __int16 v45 = 1;
    uint64_t v43 = "freshly constructed error";
    uint64_t v44 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    if (v10 == 255)
    {
      v42[0] = &unk_1ECA06420;
      v42[1] = v49;
      v42[3] = v42;
      uint64_t v18 = operator new(0x28uLL);
      *uint64_t v18 = &unk_1ECA06468;
      v18[1] = &Protocol;
      v18[2] = &v50;
      v18[3] = &v49;
      v18[4] = &v48;
      void v41[3] = v18;
      swift_getTypeByMangledName(v37, a1, SymbolicMangledNameStringRef, v16, 0, v42, v41);
      swift::TypeLookupErrorOr<swift::TypeInfo>::operator=((uint64_t *)&v43, v37);
      if ((unsigned __int16)v39 == 1) {
        ((void (*)(uint64_t, uint64_t, void))v37[1])(v37[0], 3, 0);
      }
      std::function<swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~function(v41);
      std::function<void const* ()(unsigned int,unsigned int)>::~function(v42);
    }
    else
    {
      ConformingSuperclass = (unint64_t *)swift::findConformingSuperclass(v49, (uint64_t)v12);
      swift::SubstGenericParametersFromMetadata::SubstGenericParametersFromMetadata((uint64_t)v37, ConformingSuperclass);
      v33[0] = &unk_1ECA064B0;
      v33[1] = v37;
      v33[3] = v33;
      v32[0] = &unk_1ECA064F8;
      v32[1] = v37;
      v32[3] = v32;
      swift_getTypeByMangledName(v34, a1, SymbolicMangledNameStringRef, v16, v38, v33, v32);
      swift::TypeLookupErrorOr<swift::TypeInfo>::operator=((uint64_t *)&v43, v34);
      if (v36 == 1) {
        ((void (*)(uint64_t, uint64_t, void))v34[1])(v34[0], 3, 0);
      }
      std::function<swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~function(v32);
      std::function<void const* ()(unsigned int,unsigned int)>::~function(v33);
      if (v39 != &v40) {
        free(v39);
      }
    }
    if (v45)
    {
      if (v45 == 1)
      {
        unsigned __int8 v19 = (const char *)((uint64_t (*)(const char *, void, void))v44)(v43, 0, 0);
        goto LABEL_21;
      }
    }
    else
    {
      BOOL result = v43;
      if (v43)
      {
        if (!v44) {
          atomic_store((unint64_t)v43, (unint64_t *)v6);
        }
        return result;
      }
    }
    unsigned __int8 v19 = "NULL metadata but no error was provided";
LABEL_21:
    v31[0] = (const void *)swift_getTypeName(v49, 1);
    v31[1] = v20;
    v30[0] = findAssociatedTypeName((uint64_t)Protocol, a5);
    v30[1] = v21;
    int v22 = v37;
    __swift::__runtime::llvm::StringRef::str(v30, (uint64_t)v37);
    if (v38 < 0) {
      int v22 = (uint64_t *)v37[0];
    }
    unint64_t v23 = v34;
    __swift::__runtime::llvm::StringRef::str(v31, (uint64_t)v34);
    if (v35 < 0) {
      unint64_t v23 = (uint64_t *)v34[0];
    }
    uint64_t v24 = (uint64_t)&Protocol[*((int *)Protocol + 2) + 8];
    __swift::__runtime::llvm::StringRef::str(v46, (uint64_t)v28);
    if (v29 >= 0) {
      uint64_t v27 = v28;
    }
    else {
      uint64_t v27 = (void *)v28[0];
    }
    swift::fatalError(0, "failed to demangle witness for associated type '%s' in conformance '%s: %s' from mangled name '%s' - %s\n", v25, v26, v22, v23, v24, v27, v19);
  }
  return result;
}

uint64_t swift_getAssociatedConformanceWitnessSlowImpl(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9 = (atomic_ullong *)(a1 + (((unint64_t)a5 - a4) & 0x7FFFFFFF8));
  uint64_t result = atomic_load_explicit(v9, memory_order_acquire);
  if (result)
  {
    SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)(result & 0xFFFFFFFFFFFFFFFELL | (*(unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL) == 255)), a2);
    if (v12 != 5 || *SymbolicMangledNameStringRef - 7 > 1) {
      abort();
    }
    uint64_t v13 = *(int *)(SymbolicMangledNameStringRef + 1);
    if (v13) {
      uint64_t result = ((uint64_t (*)(uint64_t, const char *, uint64_t))&SymbolicMangledNameStringRef[v13 + 1])(a3, a2, a1);
    }
    else {
      uint64_t result = MEMORY[0](a3, a2, a1);
    }
    unint64_t v14 = result;
    if ((*a5 & 0xF) != 0) {
      unint64_t v14 = result;
    }
    atomic_store(v14, (unint64_t *)v9);
  }
  return result;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  __int16 v3 = a1;
  unsigned int NumConditionalInvertibleProtocolsRequirementCounts = swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(a1);
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  if ((*v5 & 0x80) == 0) {
    goto LABEL_13;
  }
  if (!v5) {
    uint64_t v5 = 0;
  }
  if ((*((_WORD *)v5 + 29) & 2) != 0
    && (!v3 ? (uint64_t v6 = 0) : (uint64_t v6 = v3),
        uint64_t v7 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v6),
        (unsigned int v8 = swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(v3)) != 0))
  {
    unsigned int v9 = *(unsigned __int16 *)(v7 + 2 * v8 - 2);
  }
  else
  {
LABEL_13:
    unsigned int v9 = 0;
  }
  return ((TrailingObjectsImpl + 2 * NumConditionalInvertibleProtocolsRequirementCounts + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 12 * v9;
}

uint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  if (*a1 & 0x80) != 0 && (!a1 ? (__int16 v3 = 0) : (__int16 v3 = a1), (*((_WORD *)v3 + 29)))
  {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(a1);
    if (a1) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t GenericPackShapeHeader = 0;
    if (a1)
    {
LABEL_7:
      uint64_t v5 = a1;
      goto LABEL_10;
    }
  }
  uint64_t v5 = 0;
LABEL_10:
  if ((*v5 & 0x80) != 0)
  {
    if (!v5) {
      uint64_t v5 = 0;
    }
    unint64_t v6 = ((unint64_t)*((unsigned __int16 *)v5 + 29) >> 1) & 1;
  }
  else
  {
    unint64_t v6 = 0;
  }
  return TrailingObjectsImpl + 8 * GenericPackShapeHeader + 2 * v6;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  if (a1 == (unsigned char *)-44)
  {
    unint64_t v1 = 0;
    goto LABEL_3;
  }
  unint64_t v1 = a1 + 44;
  if (a1)
  {
LABEL_3:
    v2 = (unsigned int *)a1;
    goto LABEL_6;
  }
  v2 = 0;
LABEL_6:
  unint64_t v3 = *v2;
  if ((v3 & 0x80) != 0)
  {
    if (a1) {
      unint64_t v6 = a1;
    }
    else {
      unint64_t v6 = 0;
    }
    uint64_t v4 = *((unsigned __int16 *)v6 + 26);
    if (a1) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (a1)
    {
LABEL_8:
      uint64_t v5 = a1;
      goto LABEL_14;
    }
  }
  uint64_t v5 = 0;
LABEL_14:
  if ((*v5 & 0x80) != 0)
  {
    if (a1) {
      unsigned int v9 = a1;
    }
    else {
      unsigned int v9 = 0;
    }
    unsigned int v7 = *((unsigned __int16 *)v9 + 27);
    if (a1) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v7 = 0;
    if (a1)
    {
LABEL_16:
      unsigned int v8 = a1;
      goto LABEL_22;
    }
  }
  unsigned int v8 = 0;
LABEL_22:
  if ((*v8 & 0x80) != 0)
  {
    if (a1) {
      std::string v11 = a1;
    }
    else {
      std::string v11 = 0;
    }
    uint64_t v10 = *((_WORD *)v11 + 29) & 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  return ((unint64_t)&v1[16 * ((v3 >> 7) & 1) + 3 + v4] & 0xFFFFFFFFFFFFFFFCLL) + 12 * v7 + 4 * v10;
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(unsigned char *a1)
{
  if (a1) {
    unint64_t v1 = a1;
  }
  else {
    unint64_t v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  v2 = a1 ? a1 : 0;
  if ((*((_WORD *)v2 + 29) & 1) == 0) {
    return 0;
  }
  if (a1) {
    uint64_t v4 = (unsigned int *)a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4;
  if (v4 == (unsigned int *)-44)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = v4 + 11;
    if (!v4) {
      uint64_t v4 = 0;
    }
  }
  unint64_t v7 = *v4;
  if ((v7 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v8 = *((unsigned __int16 *)v10 + 26);
    if (v5) {
      goto LABEL_20;
    }
LABEL_25:
    unsigned int v9 = 0;
    goto LABEL_26;
  }
  uint64_t v8 = 0;
  if (!v5) {
    goto LABEL_25;
  }
LABEL_20:
  unsigned int v9 = v5;
LABEL_26:
  if ((*(unsigned char *)v9 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = 0;
    }
    unsigned int v11 = *((unsigned __int16 *)v12 + 27);
  }
  else
  {
    unsigned int v11 = 0;
  }
  unint64_t v13 = ((unint64_t)&v6[4 * ((v7 >> 7) & 1)] + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  return (*(unsigned __int16 *)(v13 + 12 * v11 + 2) << 16) | *(unsigned __int16 *)(v13 + 12 * v11);
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(unsigned char *a1)
{
  if (a1) {
    unint64_t v1 = a1;
  }
  else {
    unint64_t v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  if (!v1) {
    unint64_t v1 = 0;
  }
  if ((*((_WORD *)v1 + 29) & 2) == 0) {
    return 0;
  }
  if (a1) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v3);
  if (*v3 & 0x80) != 0 && (!v3 ? (uint64_t v5 = 0) : (uint64_t v5 = v3), (*((_WORD *)v5 + 29))) {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(v3);
  }
  else {
    uint64_t GenericPackShapeHeader = 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned __int16 *)(TrailingObjectsImpl + 8 * GenericPackShapeHeader));
  v7.i16[0] = vaddlv_u8(v7);
  return v7.u32[0];
}

uint64_t swift_objc_classCopyFixupHandler(uint64_t result, objc_class *a2)
{
  if ((*(unsigned char *)(result + 32) & 2) != 0)
  {
    uint64_t v2 = result;
    if (*(void *)(result - 8)) {
      uint64_t v3 = *(void *)(result - 8);
    }
    else {
      uint64_t v3 = 0;
    }
    *((void *)a2 - 1) = v3;
    if (*(void *)(result - 16))
    {
      uint64_t v4 = (void *)((char *)a2 - 16);
      uint64_t v5 = *(void *)(result - 16);
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v4 = (void *)((char *)a2 - 16);
    }
    *uint64_t v4 = v5;
    for (uint64_t i = result; (*(unsigned char *)(i + 32) & 2) != 0; uint64_t i = *(void *)(i + 8))
    {
      uint8x8_t v7 = *(_DWORD **)(i + 64);
      if (v7)
      {
        uint64_t v8 = *(unsigned char **)(i + 64);
        if ((*v7 & 0x80000000) != 0)
        {
          unsigned int v9 = *(unsigned int **)(i + 64);
          uint64_t result = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v9);
          uint64_t v10 = result;
          unint64_t v11 = *v9;
          int v12 = *v9;
          if ((*v9 & 0x80000000) != 0)
          {
            uint64_t result = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v9);
            unint64_t v13 = result
                + 4 * (((unint64_t)*v9 >> 29) & 1)
                + 4 * ((*v9 & 0x30000) == 0x20000)
                + 12 * ((*v9 & 0x30000) == 0x10000)
                + (((unint64_t)*v9 >> 28) & 8);
            int v12 = *v9;
            if ((*v9 & 0x80000000) != 0)
            {
              uint64_t result = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v9);
              int v12 = *v9;
            }
          }
          else
          {
            unint64_t v13 = 0;
          }
          unint64_t v14 = (unsigned int *)(v10
                               + 4 * ((v11 >> 29) & 1)
                               + 4 * ((v11 & 0x30000) == 0x20000)
                               + 12 * ((v11 & 0x30000) == 0x10000));
          if ((v12 & 0x20000000) != 0)
          {
            uint64_t v17 = (int)v9[6];
            if (v17) {
              uint64_t v18 = (atomic_ullong *)((char *)v9 + v17 + 24);
            }
            else {
              uint64_t v18 = 0;
            }
            unint64_t explicit = atomic_load_explicit(v18, memory_order_acquire);
            if (!explicit)
            {
              uint64_t result = computeMetadataBoundsFromSuperclass(v8, (uint64_t)v18);
              unint64_t explicit = v20;
            }
            unsigned int v15 = *v14;
            unsigned int v16 = *v14 + (explicit >> 3);
            if ((*v9 & 0x20000000) != 0)
            {
              uint64_t v21 = (int)v9[6];
              if (v21) {
                int v22 = (atomic_ullong *)((char *)v9 + v21 + 24);
              }
              else {
                int v22 = 0;
              }
              unint64_t v23 = atomic_load_explicit(v22, memory_order_acquire);
              if (!v23)
              {
                uint64_t result = computeMetadataBoundsFromSuperclass(v8, (uint64_t)v22);
                unint64_t v23 = v24;
              }
              unsigned int v15 = *v14 + (v23 >> 3);
            }
          }
          else
          {
            unsigned int v15 = *v14;
            unsigned int v16 = *v14;
          }
          uint64_t v25 = v14[1];
          if (v25)
          {
            unint64_t v26 = (void *)(v2 + 8 * v16);
            uint64_t v27 = v15;
            __int16 v28 = (void *)((char *)a2 + 8 * v15);
            char v29 = v26;
            uint64_t v30 = (char *)a2 + 8 * v27;
            do
            {
              v13 += 8;
              *v28++ = *v26;
              ++v29;
              ++v26;
              v30 += 8;
              --v25;
            }
            while (v25);
          }
        }
      }
      if (!*(void *)(i + 8)) {
        break;
      }
    }
  }
  return result;
}

void cacheCanonicalSpecializedMetadata(swift::TargetTypeContextDescriptor<swift::InProcess> const*,long *)::$_0::__invoke(unsigned int *a1)
{
  if (a1) {
    unint64_t v1 = a1;
  }
  else {
    unint64_t v1 = 0;
  }
  Cache = getCache(v1);
  if ((*v1 & 0x1F) != 0x10 || !v1)
  {
    uint64_t CanonicalMetadataPrespecializations = swift::TargetTypeContextDescriptor<swift::InProcess>::getCanonicalMetadataPrespecializations(v1);
    if (!v24) {
      return;
    }
    uint64_t v25 = (int *)CanonicalMetadataPrespecializations;
    unint64_t v26 = (os_unfair_lock_s *)(Cache + 24);
    uint64_t v27 = (os_unfair_lock_s *)(Cache + 12);
    int v115 = (int *)(CanonicalMetadataPrespecializations + 4 * v24);
    os_unfair_lock_t lock = (os_unfair_lock_s *)(Cache + 12);
    while (1)
    {
      __int16 v28 = (unint64_t *)((char *)v25 + *v25);
      GenericArgs = swift::TargetMetadata<swift::InProcess>::getGenericArgs(v28);
      uint64_t v30 = (unsigned __int16)Cache[28];
      unint64_t v31 = (unsigned __int16)Cache[30];
      uint64_t v32 = (unsigned __int16)Cache[31];
      uint64_t v33 = *((void *)Cache + 8);
      unint64_t v34 = (1455063249 * v30);
      if (Cache[28])
      {
        unint64_t v35 = 0;
        uint64_t v36 = (unsigned __int16)Cache[31];
        do
        {
          if (v35 >= v31 || *(_WORD *)(v33 + 8 * v35) || (uint64_t v37 = v33 + 8 * v35, v36 != *(unsigned __int16 *)(v37 + 2)))
          {
            unint64_t v34 = __ROR8__(v34, 10) ^ (GenericArgs[v36] >> 19) ^ GenericArgs[v36];
          }
          else
          {
            unint64_t v38 = GenericArgs[*(unsigned __int16 *)(v37 + 4)];
            ++v35;
            if (v38)
            {
              uint64_t v39 = 0;
              do
              {
                unint64_t v40 = *(void *)((GenericArgs[v36] & 0xFFFFFFFFFFFFFFFELL) + 8 * v39);
                unint64_t v34 = __ROR8__(v34, 10) ^ (v40 >> 19) ^ v40;
                ++v39;
              }
              while (v38 > v39);
            }
          }
          ++v36;
        }
        while (v36 != v32 + v30);
      }
      __int16 v41 = Cache[29];
      uint64_t v117 = v26;
      int v118 = 0;
      __int16 v119 = 0;
      v120[0] = GenericArgs;
      LOWORD(v120[1]) = v30;
      WORD1(v120[1]) = v41;
      WORD2(v120[1]) = v31;
      HIWORD(v120[1]) = v32;
      *(void *)&long long v121 = v33;
      DWORD2(v121) = (668265261 * v34) >> 10;
      unint64_t explicit = (_WORD *)atomic_load_explicit((atomic_ullong *volatile)Cache + 5, memory_order_acquire);
      if (explicit)
      {
        int v43 = *((_DWORD *)explicit + 6);
        uint64_t v124 = (unint64_t *)(explicit + 20);
        long long v125 = *(_OWORD *)(explicit + 4);
        LODWORD(v126) = v43;
        if (swift::MetadataCacheKey::operator==((uint64_t)v120, (uint64_t)&v124)) {
          goto LABEL_55;
        }
      }
      atomic_fetch_add_explicit((atomic_uint *volatile)Cache, 1u, memory_order_acquire);
      do
      {
        unint64_t v44 = atomic_load_explicit((atomic_ullong *volatile)Cache + 1, memory_order_acquire);
        unint64_t v45 = atomic_load_explicit((atomic_ullong *volatile)Cache + 2, memory_order_acquire);
        uint64_t v46 = atomic_load_explicit((atomic_uint *volatile)Cache + 1, memory_order_acquire);
      }
      while (v44 != atomic_load_explicit((atomic_ullong *volatile)Cache + 1, memory_order_acquire));
      if (v44) {
        unint64_t v47 = v44 + 8;
      }
      else {
        unint64_t v47 = 0;
      }
      uint64_t v124 = (unint64_t *)Cache;
      *(void *)&long long v125 = v45;
      *((void *)&v125 + 1) = v47;
      uint64_t v126 = v46;
      if (v48)
      {
        *((void *)Cache + 5) = *v48;
        unint64_t explicit = (_WORD *)*v48;
        atomic_fetch_add_explicit((atomic_uint *volatile)Cache, 0xFFFFFFFF, memory_order_release);
        goto LABEL_55;
      }
      atomic_fetch_add_explicit((atomic_uint *volatile)Cache, 0xFFFFFFFF, memory_order_release);
      long long v122 = *(_OWORD *)v120;
      long long v123 = v121;
      os_unfair_lock_lock(v27);
      unint64_t v51 = *((void *)Cache + 2);
      uint64_t v52 = (unsigned __int8 *)(v51 & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v116 = v51;
      unint64_t v53 = v51 & 3;
      unint64_t v114 = v28;
      if (v53 && v52)
      {
        int v54 = *v52;
        unsigned int v55 = *((_DWORD *)Cache + 1);
        uint64_t v56 = (_DWORD *)*((void *)Cache + 1);
        BOOL v57 = v56 == 0;
        BOOL v110 = v56 == 0;
        BOOL v111 = v56;
        uint64_t v58 = v56 + 2;
        __src = v58;
        if (v57) {
          uint64_t v59 = 0;
        }
        else {
          uint64_t v59 = (uint64_t)v58;
        }
      }
      else
      {
        unsigned int v55 = *((_DWORD *)Cache + 1);
        uint64_t v60 = (_DWORD *)*((void *)Cache + 1);
        BOOL v57 = v60 == 0;
        BOOL v110 = v60 == 0;
        BOOL v111 = v60;
        uint64_t v61 = v60 + 2;
        __src = v61;
        if (v57) {
          uint64_t v59 = 0;
        }
        else {
          uint64_t v59 = (uint64_t)v61;
        }
        int v54 = 4;
      }
      int v112 = v54;
      unint64_t v62 = v55;
      uint64_t v63 = DWORD2(v123);
      uint64_t v64 = ~(-1 << v54);
      if (v53) {
        unint64_t v65 = v52;
      }
      else {
        unint64_t v65 = 0;
      }
      while (2)
      {
        if ((v63 & (unint64_t)v64) <= 1) {
          uint64_t v66 = 1;
        }
        else {
          uint64_t v66 = v63 & v64;
        }
        switch(v116 & 3)
        {
          case 1uLL:
            LOBYTE(v28) = atomic_load_explicit((atomic_uchar *volatile)&v65[v66], memory_order_acquire);
            if (!v28) {
              goto LABEL_87;
            }
            goto LABEL_83;
          case 2uLL:
            LOWORD(v28) = atomic_load_explicit((atomic_ushort *volatile)&v65[2 * v66], memory_order_acquire);
            if (!v28) {
              goto LABEL_87;
            }
            goto LABEL_83;
          case 3uLL:
            LODWORD(v28) = atomic_load_explicit((atomic_uint *volatile)&v65[4 * v66], memory_order_acquire);
            if (v28) {
              goto LABEL_83;
            }
            goto LABEL_87;
          default:
            __int16 v28 = (unint64_t *)((v116 >> (4 * v66)) & 0xF);
            if (v28)
            {
LABEL_83:
              uint64_t v67 = (v28 - 1);
              if (v67 < v62)
              {
                uint64_t v68 = *(void *)(v59 + 8 * v67);
                int v69 = *(_DWORD *)(v68 + 24);
                uint64_t v124 = (unint64_t *)(v68 + 40);
                long long v125 = *(_OWORD *)(v68 + 8);
                LODWORD(v126) = v69;
                if (swift::MetadataCacheKey::operator==((uint64_t)&v122, (uint64_t)&v124))
                {
                  unint64_t explicit = *(_WORD **)(v59 + 8 * v67);
                  __dmb(0xBu);
                  if (*(_DWORD *)Cache)
                  {
                    uint64_t v27 = (os_unfair_lock_s *)(Cache + 12);
                    os_unfair_lock_unlock(lock);
                    *((void *)Cache + 5) = explicit;
                    unint64_t v26 = (os_unfair_lock_s *)(Cache + 24);
                    goto LABEL_55;
                  }
                  size_t v105 = (void **)*((void *)Cache + 4);
                  uint64_t v27 = (os_unfair_lock_s *)(Cache + 12);
                  unint64_t v26 = (os_unfair_lock_s *)(Cache + 24);
                  if (v105)
                  {
                    do
                    {
                      unint64_t v106 = (void **)*v105;
                      free(v105[1]);
                      free(v105);
                      size_t v105 = v106;
                    }
                    while (v106);
                    goto LABEL_146;
                  }
                  *((void *)Cache + 4) = 0;
                  os_unfair_lock_unlock(lock);
                  *((void *)Cache + 5) = explicit;
LABEL_55:
                  goto LABEL_56;
                }
              }
              uint64_t v63 = v66 + 1;
              continue;
            }
LABEL_87:
            uint64_t v109 = (v62 + 1);
            if ((1 << v112) / (unint64_t)((1 << v112) - v109) <= 3)
            {
              uint64_t v77 = v66;
              goto LABEL_111;
            }
            uint64_t v71 = (char *)(v70 & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v116 = v70;
            char v72 = 4;
            if ((v70 & 3) != 0 && v71) {
              char v72 = *v71;
            }
            uint64_t v73 = DWORD2(v123);
            uint64_t v74 = ~(-1 << v72);
            unint64_t v75 = v70 & 3;
            if ((v70 & 3) != 0) {
              unint64_t v76 = v70 & 0xFFFFFFFFFFFFFFFCLL;
            }
            else {
              unint64_t v76 = 0;
            }
            while (2)
            {
              if ((v73 & (unint64_t)v74) <= 1) {
                uint64_t v77 = 1;
              }
              else {
                uint64_t v77 = v73 & v74;
              }
              switch(v75)
              {
                case 1uLL:
                  LODWORD(v78) = v76 + v77;
                  LOBYTE(v78) = atomic_load_explicit((atomic_uchar *volatile)(v76 + v77), memory_order_acquire);
                  if (v78) {
                    goto LABEL_106;
                  }
                  goto LABEL_110;
                case 2uLL:
                  LODWORD(v78) = v76 + 2 * v77;
                  LOWORD(v78) = atomic_load_explicit((atomic_ushort *volatile)(v76 + 2 * v77), memory_order_acquire);
                  if (!v78) {
                    goto LABEL_110;
                  }
                  goto LABEL_106;
                case 3uLL:
                  LODWORD(v78) = atomic_load_explicit((atomic_uint *volatile)(v76 + 4 * v77), memory_order_acquire);
                  if (v78) {
                    goto LABEL_106;
                  }
                  goto LABEL_110;
                default:
                  uint64_t v78 = (v116 >> (4 * v77)) & 0xF;
                  if (!v78)
                  {
LABEL_110:
                    uint64_t v77 = v77;
                    goto LABEL_111;
                  }
LABEL_106:
                  unsigned int v79 = v78 - 1;
                  if (v79 >= v62
                    || (uint64_t v80 = *(void *)(v59 + 8 * v79),
                        int v81 = *(_DWORD *)(v80 + 24),
                        uint64_t v124 = (unint64_t *)(v80 + 40),
                        long long v125 = *(_OWORD *)(v80 + 8),
                        LODWORD(v126) = v81,
                        (swift::MetadataCacheKey::operator==((uint64_t)&v122, (uint64_t)&v124) & 1) == 0))
                  {
                    uint64_t v73 = v77 + 1;
                    continue;
                  }
                  uint64_t v77 = 0;
LABEL_111:
                  uint64_t v113 = v77;
                  if (v110 || v62 >= *v111)
                  {
                    unint64_t v83 = v62 + (v62 >> 2);
                    if (v83 <= v62 + 1) {
                      unint64_t v83 = v62 + 1;
                    }
                    size_t v84 = malloc_good_size(8 * v83 + 8);
                    unint64_t v85 = malloc_type_malloc(v84, 0x1000D770uLL);
                    if (!v85) {
                      swift::hashable_support::findHashableBaseTypeOfHashableType();
                    }
                    unint64_t v82 = (unint64_t)v85;
                    _DWORD *v85 = (v84 + 0x7FFFFFFF8) >> 3;
                    if (!v110)
                    {
                      memcpy(v85 + 2, __src, 8 * v62);
                      unint64_t v86 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
                      *unint64_t v86 = *((void *)Cache + 4);
                      v86[1] = v111;
                      *((void *)Cache + 4) = v86;
                    }
                    atomic_store(v82, (unint64_t *)Cache + 1);
                  }
                  else
                  {
                    unint64_t v82 = (unint64_t)v111;
                  }
                  LOWORD(v124) = 14;
                  unint64_t explicit = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v124, 8 * (LOWORD(v120[1]) + (unint64_t)HIWORD(v120[1]) + WORD1(v120[1])) + 40, 8);
                  v87 = v120[0];
                  __int16 v88 = (__int16)v120[1];
                  __int16 v89 = WORD1(v120[1]);
                  uint64_t v90 = WORD2(v120[1]);
                  __int16 v91 = HIWORD(v120[1]);
                  uint64_t v92 = v121;
                  int v93 = DWORD2(v121);
                  HIBYTE(v119) = 4;
                  *(void *)unint64_t explicit = 4;
                  explicit[4] = v88;
                  explicit[5] = v89;
                  explicit[6] = v90;
                  explicit[7] = v91;
                  *((void *)explicit + 2) = v92;
                  *((_DWORD *)explicit + 6) = v93;
                  *((void *)explicit + 4) = v114;
                  unint64_t v94 = explicit + 20;
                  memcpy(explicit + 20, v87, 8 * (unsigned __int16)(v89 + v88 + v91));
                  if (v90)
                  {
                    unint64_t v95 = (unsigned __int16 *)(v92 + 4);
                    do
                    {
                      uint64_t v98 = *(v95 - 1);
                      unint64_t v99 = *(void *)&v94[4 * *v95];
                      if (*(v95 - 2) == 1)
                      {
                        uint64_t v96 = 4 * v98;
                        uint64_t WitnessTablePack = swift_allocateWitnessTablePack(*(void *)&v94[4 * v98], v99);
                      }
                      else
                      {
                        if (*(v95 - 2)) {
                          goto LABEL_124;
                        }
                        uint64_t v96 = 4 * v98;
                        uint64_t WitnessTablePack = swift_allocateMetadataPack(*(void *)&v94[4 * v98], v99);
                      }
                      *(void *)&v94[v96] = WitnessTablePack;
LABEL_124:
                      v95 += 4;
                      --v90;
                    }
                    while (v90);
                  }
                  *(void *)(v82 + 8 + 8 * v62) = explicit;
                  atomic_store(v109, (unsigned int *)Cache + 1);
                  uint64_t v27 = (os_unfair_lock_s *)(Cache + 12);
                  unint64_t v26 = (os_unfair_lock_s *)(Cache + 24);
                  switch(v116 & 3)
                  {
                    case 1uLL:
                      unint64_t v100 = v116 & 0xFFFFFFFFFFFFFFFCLL;
                      if ((v116 & 3) == 0) {
                        unint64_t v100 = 0;
                      }
                      atomic_store(v62 + 1, (unsigned __int8 *)(v100 + v113));
                      break;
                    case 2uLL:
                      unint64_t v101 = v116 & 0xFFFFFFFFFFFFFFFCLL;
                      if ((v116 & 3) == 0) {
                        unint64_t v101 = 0;
                      }
                      atomic_store(v62 + 1, (unsigned __int16 *)(v101 + 2 * v113));
                      break;
                    case 3uLL:
                      unint64_t v102 = v116 & 0xFFFFFFFFFFFFFFFCLL;
                      if ((v116 & 3) == 0) {
                        unint64_t v102 = 0;
                      }
                      atomic_store(v109, (unsigned int *)(v102 + 4 * v113));
                      break;
                    default:
                      atomic_store((v109 << (4 * v113)) | v116, (unint64_t *)Cache + 2);
                      break;
                  }
                  __dmb(0xBu);
                  if (*(_DWORD *)Cache)
                  {
                    os_unfair_lock_unlock(lock);
                    *((void *)Cache + 5) = explicit;
                  }
                  else
                  {
                    unsigned int v103 = (void **)*((void *)Cache + 4);
                    if (v103)
                    {
                      do
                      {
                        unsigned int v104 = (void **)*v103;
                        free(v103[1]);
                        free(v103);
                        unsigned int v103 = v104;
                      }
                      while (v104);
                    }
LABEL_146:
                    *((void *)Cache + 4) = 0;
                    os_unfair_lock_unlock(v27);
                    *((void *)Cache + 5) = explicit;
                    if (v28) {
                      goto LABEL_55;
                    }
                  }
                  if (v118) {
                    LOBYTE(v119) = 1;
                  }
                  if (HIBYTE(v119) != 4)
                  {
                    if (!HIBYTE(v119)) {
LABEL_154:
                    }
                      abort();
                  }
LABEL_56:
                  uint64_t v49 = v118;
                  if (v118)
                  {
                    os_unfair_lock_unlock(v118 + 2);
                    uint64_t v50 = *(void *)&v49[4]._os_unfair_lock_opaque;
                    *(void *)&v49[4]._os_unfair_lock_opaque = 0;
                    if (v50) {
                      MEMORY[0x1852FF000](v50, 0x80C4018A671A6);
                    }
                    swift_slowDealloc(v49);
                  }
                  if (++v25 == v115) {
                    return;
                  }
                  break;
              }
              break;
            }
            break;
        }
        break;
      }
    }
  }
  uint64_t CanonicalMetadataPrespecializationAccessors = swift::TargetClassDescriptor<swift::InProcess>::getCanonicalMetadataPrespecializationAccessors(v1);
  if (v4)
  {
    uint64_t v5 = (int *)CanonicalMetadataPrespecializationAccessors;
    unint64_t v6 = (int *)(CanonicalMetadataPrespecializationAccessors + 4 * v4);
    do
    {
      v120[0] = (void *)((uint64_t (*)(uint64_t))((char *)v5 + *v5))(256);
      uint8x8_t v7 = swift::TargetMetadata<swift::InProcess>::getGenericArgs((unint64_t *)v120[0]);
      uint64_t v8 = (unsigned __int16)Cache[28];
      unint64_t v9 = (unsigned __int16)Cache[30];
      uint64_t v10 = (unsigned __int16)Cache[31];
      uint64_t v11 = *((void *)Cache + 8);
      unint64_t v12 = (1455063249 * v8);
      if (Cache[28])
      {
        unint64_t v13 = 0;
        uint64_t v14 = (unsigned __int16)Cache[31];
        do
        {
          if (v13 >= v9 || *(_WORD *)(v11 + 8 * v13) || (uint64_t v15 = v11 + 8 * v13, v14 != *(unsigned __int16 *)(v15 + 2)))
          {
            unint64_t v12 = __ROR8__(v12, 10) ^ (v7[v14] >> 19) ^ v7[v14];
          }
          else
          {
            unint64_t v16 = v7[*(unsigned __int16 *)(v15 + 4)];
            ++v13;
            if (v16)
            {
              uint64_t v17 = 0;
              do
              {
                unint64_t v12 = __ROR8__(v12, 10) ^ (*(void *)((v7[v14] & 0xFFFFFFFFFFFFFFFELL) + 8 * v17) >> 19) ^ *(void *)((v7[v14] & 0xFFFFFFFFFFFFFFFELL) + 8 * v17);
                ++v17;
              }
              while (v16 > v17);
            }
          }
          ++v14;
        }
        while (v14 != v10 + v8);
      }
      __int16 v18 = Cache[29];
      long long v122 = (unint64_t)(Cache + 24);
      LOWORD(v123) = 0;
      uint64_t v124 = v7;
      LOWORD(v125) = v8;
      WORD1(v125) = v18;
      WORD2(v125) = v9;
      WORD3(v125) = v10;
      *((void *)&v125 + 1) = v11;
      LODWORD(v126) = (668265261 * v12) >> 10;
      if (v20)
      {
        if (*((void *)&v122 + 1)) {
          LOBYTE(v123) = 1;
        }
        if (BYTE1(v123) != 4)
        {
          if (!BYTE1(v123)) {
            goto LABEL_154;
          }
        }
      }
      else
      {
      }
      uint64_t v21 = (void *)*((void *)&v122 + 1);
      if (*((void *)&v122 + 1))
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(*((void *)&v122 + 1) + 8));
        uint64_t v22 = v21[2];
        v21[2] = 0;
        if (v22) {
          MEMORY[0x1852FF000](v22, 0x80C4018A671A6);
        }
        swift_slowDealloc(v21);
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

uint64_t swift::TargetClassDescriptor<swift::InProcess>::getCanonicalMetadataPrespecializationAccessors(unsigned int *a1)
{
  if ((*((unsigned char *)a1 + 2) & 8) == 0) {
    return 0;
  }
  uint64_t v3 = a1;
  if (a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = 0;
  }
  swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v4);
  if ((*((unsigned char *)v4 + 3) & 0x20) != 0)
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v3) {
LABEL_10:
  }
    uint64_t v3 = a1;
LABEL_11:
  uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v3);
  unint64_t v6 = *v3;
  if ((v6 & 0x20000000) != 0)
  {
    uint64_t v7 = v3[7] & 1;
    if ((v6 & 0x80000) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if ((v6 & 0x80000) != 0)
    {
LABEL_13:
      if (!v3) {
        uint64_t v3 = 0;
      }
      uint64_t v9 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v3);
      if ((*((unsigned char *)v3 + 3) & 0x20) != 0) {
        uint64_t v10 = v3[7] & 1;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v8 = *(unsigned int *)(v9 + 4 * v10);
      return TrailingObjectsImpl + 4 * v7 + 4 * ((v6 >> 19) & 1) + 4 * v8;
    }
  }
  uint64_t v8 = 0;
  return TrailingObjectsImpl + 4 * v7 + 4 * ((v6 >> 19) & 1) + 4 * v8;
}

uint64_t swift::TargetTypeContextDescriptor<swift::InProcess>::getCanonicalMetadataPrespecializations(_DWORD *a1)
{
  int v1 = *a1 & 0x1F;
  if (v1 == 16)
  {
    if (a1) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = 0;
    }
    if ((*((unsigned char *)v3 + 2) & 8) == 0) {
      return 0;
    }
    if (v3) {
      unint64_t v6 = v3;
    }
    else {
      unint64_t v6 = 0;
    }
    swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v6);
    if ((v6[3] & 0x20) != 0)
    {
      if (v3) {
        goto LABEL_32;
      }
    }
    else if (v3)
    {
      goto LABEL_32;
    }
    uint64_t v3 = 0;
LABEL_32:
    uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v3);
    unsigned int v10 = *v3;
    if ((*v3 & 0x20000000) != 0) {
      uint64_t v11 = v3[7] & 1;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = TrailingObjectsImpl + 4 * v11;
    return v12 + 4 * ((v10 >> 19) & 1);
  }
  if (v1 == 17)
  {
    if (a1) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = 0;
    }
    if ((v4[2] & 8) != 0)
    {
      if (v4) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = 0;
      }
      swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v8);
      if (!v4) {
        uint64_t v4 = 0;
      }
      unint64_t v13 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v4);
      uint64_t v14 = (unsigned int *)v4;
      goto LABEL_43;
    }
    return 0;
  }
  if (v1 != 18) {
    abort();
  }
  if (a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  if ((v2[2] & 8) == 0) {
    return 0;
  }
  if (v2) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = 0;
  }
  swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v5);
  if (!v2) {
    uint64_t v2 = 0;
  }
  unint64_t v13 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v2);
  uint64_t v14 = (unsigned int *)v2;
LABEL_43:
  unsigned int v10 = *v14;
  uint64_t v12 = v13 + 4 * ((*v14 & 0x30000) == 0x20000) + 12 * ((*v14 & 0x30000) == 0x10000);
  return v12 + 4 * ((v10 >> 19) & 1);
}

uint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  unint64_t v3 = *(unsigned int *)a1;
  if ((v3 & 0x80000000) != 0)
  {
    if (a1) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v4 = *(unsigned int *)(swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v7)
                         + 4 * (((unint64_t)*(unsigned int *)v7 >> 29) & 1)
                         + 4 * ((*(_DWORD *)v7 & 0x30000) == 0x20000)
                         + 12 * ((*(_DWORD *)v7 & 0x30000) == 0x10000)
                         + 4);
    unsigned int v5 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 0x40000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = 0;
    unsigned int v5 = *(_DWORD *)a1;
    if ((v3 & 0x40000000) == 0)
    {
LABEL_3:
      unsigned int v6 = 0;
      return TrailingObjectsImpl
           + 4 * ((v3 >> 29) & 1)
           + 4 * ((v3 & 0x30000) == 0x20000)
           + 12 * ((v3 & 0x30000) == 0x10000)
           + ((v3 >> 28) & 8)
           + 8 * v4
           + 4 * ((v5 >> 30) & 1)
           + 12 * v6;
    }
  }
  if (a1) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v8);
  unint64_t v10 = *(unsigned int *)v8;
  if ((v10 & 0x80000000) != 0)
  {
    if (!v8) {
      uint64_t v8 = 0;
    }
    uint64_t v11 = *(unsigned int *)(swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v8)
                          + 4 * (((unint64_t)*(unsigned int *)v8 >> 29) & 1)
                          + 4 * ((*(_DWORD *)v8 & 0x30000) == 0x20000)
                          + 12 * ((*(_DWORD *)v8 & 0x30000) == 0x10000)
                          + 4);
  }
  else
  {
    uint64_t v11 = 0;
  }
  unsigned int v6 = *(_DWORD *)(v9
                 + 4 * ((v10 >> 29) & 1)
                 + 4 * ((v10 & 0x30000) == 0x20000)
                 + 12 * ((v10 & 0x30000) == 0x10000)
                 + 8 * ((v10 >> 31) & 1)
                 + 8 * v11);
  return TrailingObjectsImpl
       + 4 * ((v3 >> 29) & 1)
       + 4 * ((v3 & 0x30000) == 0x20000)
       + 12 * ((v3 & 0x30000) == 0x10000)
       + ((v3 >> 28) & 8)
       + 8 * v4
       + 4 * ((v5 >> 30) & 1)
       + 12 * v6;
}

_WORD *swift::LockingConcurrentMapStorage<anonymous namespace'::GenericCacheEntry,(unsigned short)14>::getOrInsert<swift::MetadataCacheKey,swift::MetadataWaitQueue::Worker &,swift::MetadataRequest &,swift::TargetMetadata<swift::InProcess> const*&>(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  long long v7 = a2[1];
  *(_OWORD *)unint64_t v83 = *a2;
  long long v84 = v7;
  unint64_t explicit = (_WORD *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 40), memory_order_acquire);
  if (explicit)
  {
    int v9 = *((_DWORD *)explicit + 6);
    v87 = explicit + 20;
    long long v88 = *(_OWORD *)(explicit + 4);
    LODWORD(v89) = v9;
    if (swift::MetadataCacheKey::operator==((uint64_t)v83, (uint64_t)&v87)) {
      return explicit;
    }
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)a1, 1u, memory_order_acquire);
  do
  {
    unint64_t v10 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
    unint64_t v11 = atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire);
    uint64_t v12 = atomic_load_explicit((atomic_uint *volatile)(a1 + 4), memory_order_acquire);
  }
  while (v10 != atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire));
  if (v10) {
    unint64_t v13 = v10 + 8;
  }
  else {
    unint64_t v13 = 0;
  }
  v87 = (_WORD *)a1;
  *(void *)&long long v88 = v11;
  *((void *)&v88 + 1) = v13;
  uint64_t v89 = v12;
  if (v14)
  {
    *(void *)(a1 + 40) = *v14;
    unint64_t explicit = (_WORD *)*v14;
    atomic_fetch_add_explicit((atomic_uint *volatile)a1, 0xFFFFFFFF, memory_order_release);
    return explicit;
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)a1, 0xFFFFFFFF, memory_order_release);
  long long v85 = *(_OWORD *)v83;
  long long v86 = v84;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  unint64_t v15 = *(void *)(a1 + 16);
  unint64_t v16 = (unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v78 = a4;
  uint64_t v79 = a3;
  if ((v15 & 3) != 0 && v16)
  {
    int v17 = *v16;
    unsigned int v18 = *(_DWORD *)(a1 + 4);
    unsigned __int8 v19 = *(_DWORD **)(a1 + 8);
    BOOL v20 = v19 == 0;
    BOOL v81 = v19 == 0;
    unint64_t v82 = v19;
    uint64_t v21 = v19 + 2;
    __src = v21;
    if (v20) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = (uint64_t)v21;
    }
  }
  else
  {
    unsigned int v18 = *(_DWORD *)(a1 + 4);
    unint64_t v23 = *(_DWORD **)(a1 + 8);
    BOOL v20 = v23 == 0;
    BOOL v81 = v23 == 0;
    unint64_t v82 = v23;
    uint64_t v24 = v23 + 2;
    __src = v24;
    if (v20) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = (uint64_t)v24;
    }
    int v17 = 4;
  }
  int v80 = v17;
  unint64_t v25 = v18;
  uint64_t v26 = DWORD2(v86);
  uint64_t v27 = ~(-1 << v17);
  if ((v15 & 3) != 0) {
    unint64_t v28 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else {
    unint64_t v28 = 0;
  }
  while (2)
  {
    if ((v26 & (unint64_t)v27) <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v26 & v27;
    }
    switch(v15 & 3)
    {
      case 1uLL:
        LODWORD(v30) = v28 + v29;
        LOBYTE(v30) = atomic_load_explicit((atomic_uchar *volatile)(v28 + v29), memory_order_acquire);
        if (v30) {
          goto LABEL_34;
        }
        goto LABEL_38;
      case 2uLL:
        LODWORD(v30) = v28 + 2 * v29;
        LOWORD(v30) = atomic_load_explicit((atomic_ushort *volatile)(v28 + 2 * v29), memory_order_acquire);
        if (!v30) {
          goto LABEL_38;
        }
        goto LABEL_34;
      case 3uLL:
        LODWORD(v30) = atomic_load_explicit((atomic_uint *volatile)(v28 + 4 * v29), memory_order_acquire);
        if (v30) {
          goto LABEL_34;
        }
        goto LABEL_38;
      default:
        uint64_t v30 = (v15 >> (4 * v29)) & 0xF;
        if (!v30)
        {
LABEL_38:
          uint64_t v77 = (v25 + 1);
          if ((1 << v80) / (unint64_t)((1 << v80) - v77) > 3)
          {
            unint64_t v15 = v35;
            uint64_t v36 = DWORD2(v86);
            uint64_t v37 = (char *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
            char v38 = 4;
            if ((v35 & 3) != 0 && v37) {
              char v38 = *v37;
            }
            uint64_t v39 = ~(-1 << v38);
            if ((v35 & 3) != 0) {
              unint64_t v40 = v35 & 0xFFFFFFFFFFFFFFFCLL;
            }
            else {
              unint64_t v40 = 0;
            }
            while (1)
            {
              unint64_t v41 = v36 & v39;
              uint64_t v29 = v41 <= 1 ? 1 : v41;
              switch(v15 & 3)
              {
                case 1uLL:
                  LODWORD(v42) = v40 + v29;
                  LOBYTE(v42) = atomic_load_explicit((atomic_uchar *volatile)(v40 + v29), memory_order_acquire);
                  break;
                case 2uLL:
                  LODWORD(v42) = v40 + 2 * v29;
                  LOWORD(v42) = atomic_load_explicit((atomic_ushort *volatile)(v40 + 2 * v29), memory_order_acquire);
                  break;
                case 3uLL:
                  LODWORD(v42) = atomic_load_explicit((atomic_uint *volatile)(v40 + 4 * v29), memory_order_acquire);
                  break;
                default:
                  uint64_t v42 = (v15 >> (4 * v29)) & 0xF;
                  break;
              }
              if (!v42) {
                break;
              }
              unsigned int v43 = v42 - 1;
              if (v43 < v25)
              {
                uint64_t v44 = *(void *)(v22 + 8 * v43);
                int v45 = *(_DWORD *)(v44 + 24);
                v87 = (_WORD *)(v44 + 40);
                long long v88 = *(_OWORD *)(v44 + 8);
                LODWORD(v89) = v45;
                if (swift::MetadataCacheKey::operator==((uint64_t)&v85, (uint64_t)&v87))
                {
                  uint64_t v46 = 0;
                  goto LABEL_59;
                }
              }
              uint64_t v36 = v29 + 1;
            }
          }
          uint64_t v46 = v29;
LABEL_59:
          if (v81 || v25 >= *v82)
          {
            unint64_t v48 = v25 + (v25 >> 2);
            if (v48 <= v25 + 1) {
              unint64_t v48 = v25 + 1;
            }
            size_t v49 = malloc_good_size(8 * v48 + 8);
            uint64_t v50 = malloc_type_malloc(v49, 0x1000D770uLL);
            if (!v50) {
              swift::hashable_support::findHashableBaseTypeOfHashableType();
            }
            unint64_t v47 = (unint64_t)v50;
            *uint64_t v50 = (v49 + 0x7FFFFFFF8) >> 3;
            if (!v81)
            {
              memcpy(v50 + 2, __src, 8 * v25);
              unint64_t v51 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
              *unint64_t v51 = *(void *)(a1 + 32);
              v51[1] = v82;
              *(void *)(a1 + 32) = v51;
            }
            atomic_store(v47, (unint64_t *)(a1 + 8));
          }
          else
          {
            unint64_t v47 = (unint64_t)v82;
          }
          unint64_t v52 = v47 + 8;
          LOWORD(v87) = 14;
          unint64_t explicit = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v87, 8 * (LOWORD(v83[1]) + (unint64_t)HIWORD(v83[1]) + WORD1(v83[1])) + 40, 8);
          unint64_t v53 = v83[0];
          __int16 v54 = (__int16)v83[1];
          __int16 v55 = WORD1(v83[1]);
          uint64_t v56 = WORD2(v83[1]);
          __int16 v57 = HIWORD(v83[1]);
          uint64_t v58 = v84;
          int v59 = DWORD2(v84);
          uint64_t v60 = *v78;
          *(unsigned char *)(v79 + 17) = 4;
          *(void *)unint64_t explicit = 4;
          explicit[4] = v54;
          explicit[5] = v55;
          explicit[6] = v56;
          explicit[7] = v57;
          *((void *)explicit + 2) = v58;
          *((_DWORD *)explicit + 6) = v59;
          uint64_t v61 = explicit + 20;
          *((void *)explicit + 4) = v60;
          memcpy(explicit + 20, v53, 8 * (unsigned __int16)(v55 + v54 + v57));
          if (!v56)
          {
LABEL_76:
            *(void *)(v52 + 8 * v25) = explicit;
            atomic_store(v77, (unsigned int *)(a1 + 4));
            switch(v15 & 3)
            {
              case 1uLL:
                unint64_t v67 = v15 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v15 & 3) == 0) {
                  unint64_t v67 = 0;
                }
                atomic_store(v77, (unsigned __int8 *)(v67 + v46));
                break;
              case 2uLL:
                unint64_t v68 = v15 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v15 & 3) == 0) {
                  unint64_t v68 = 0;
                }
                atomic_store(v77, (unsigned __int16 *)(v68 + 2 * v46));
                break;
              case 3uLL:
                unint64_t v69 = v15 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v15 & 3) == 0) {
                  unint64_t v69 = 0;
                }
                atomic_store(v77, (unsigned int *)(v69 + 4 * v46));
                break;
              default:
                atomic_store((v77 << (4 * v46)) | v15, (unint64_t *)(a1 + 16));
                break;
            }
            __dmb(0xBu);
            unint64_t v34 = (os_unfair_lock_s *)(a1 + 24);
            if (!*(_DWORD *)a1)
            {
              unint64_t v70 = (void *)(a1 + 32);
              uint64_t v71 = *(void ***)(a1 + 32);
              if (v71)
              {
                do
                {
                  char v72 = (void **)*v71;
                  free(v71[1]);
                  free(v71);
                  uint64_t v71 = v72;
                }
                while (v72);
              }
              goto LABEL_93;
            }
            goto LABEL_94;
          }
          unint64_t v62 = (unsigned __int16 *)(v58 + 4);
          while (1)
          {
            uint64_t v65 = *(v62 - 1);
            unint64_t v66 = *(void *)&v61[4 * *v62];
            if (*(v62 - 2) == 1)
            {
              uint64_t v63 = 4 * v65;
              uint64_t WitnessTablePack = swift_allocateWitnessTablePack(*(void *)&v61[4 * v65], v66);
            }
            else
            {
              if (*(v62 - 2)) {
                goto LABEL_72;
              }
              uint64_t v63 = 4 * v65;
              uint64_t WitnessTablePack = swift_allocateMetadataPack(*(void *)&v61[4 * v65], v66);
            }
            *(void *)&v61[v63] = WitnessTablePack;
LABEL_72:
            v62 += 4;
            if (!--v56) {
              goto LABEL_76;
            }
          }
        }
LABEL_34:
        uint64_t v31 = (v30 - 1);
        if (v31 >= v25
          || (uint64_t v32 = *(void *)(v22 + 8 * v31),
              int v33 = *(_DWORD *)(v32 + 24),
              v87 = (_WORD *)(v32 + 40),
              long long v88 = *(_OWORD *)(v32 + 8),
              LODWORD(v89) = v33,
              (swift::MetadataCacheKey::operator==((uint64_t)&v85, (uint64_t)&v87) & 1) == 0))
        {
          uint64_t v26 = v29 + 1;
          continue;
        }
        unint64_t explicit = *(_WORD **)(v22 + 8 * v31);
        __dmb(0xBu);
        if (*(_DWORD *)a1)
        {
          unint64_t v34 = (os_unfair_lock_s *)(a1 + 24);
          goto LABEL_94;
        }
        unint64_t v70 = (void *)(a1 + 32);
        uint64_t v73 = *(void ***)(a1 + 32);
        unint64_t v34 = (os_unfair_lock_s *)(a1 + 24);
        if (v73)
        {
          do
          {
            uint64_t v74 = (void **)*v73;
            free(v73[1]);
            free(v73);
            uint64_t v73 = v74;
          }
          while (v74);
        }
LABEL_93:
        *unint64_t v70 = 0;
LABEL_94:
        os_unfair_lock_unlock(v34);
        *(void *)(a1 + 40) = explicit;
        return explicit;
    }
  }
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::GenericCacheEntry>,swift::Mutex>::Snapshot::find<swift::MetadataCacheKey>(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  unint64_t v3 = a1[3];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = a1[2];
  if (!v4) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  long long v7 = (char *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v2 & 3) == 0 || v7 == 0) {
    char v9 = 4;
  }
  else {
    char v9 = *v7;
  }
  uint64_t v10 = ~(-1 << v9);
  if ((v2 & 3) != 0) {
    unint64_t v11 = v2 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else {
    unint64_t v11 = 0;
  }
  while (1)
  {
    unint64_t v12 = v6 & v10;
    uint64_t v13 = v12 <= 1 ? 1 : v12;
    switch(v2 & 3)
    {
      case 1uLL:
        LODWORD(v14) = v11 + v13;
        LOBYTE(v14) = atomic_load_explicit((atomic_uchar *volatile)(v11 + v13), memory_order_acquire);
        if (!v14) {
          return 0;
        }
        break;
      case 2uLL:
        LODWORD(v14) = v11 + 2 * v13;
        LOWORD(v14) = atomic_load_explicit((atomic_ushort *volatile)(v11 + 2 * v13), memory_order_acquire);
        if (!v14) {
          return 0;
        }
        break;
      case 3uLL:
        LODWORD(v14) = atomic_load_explicit((atomic_uint *volatile)(v11 + 4 * v13), memory_order_acquire);
        if (!v14) {
          return 0;
        }
        break;
      default:
        uint64_t v14 = (v2 >> (4 * v13)) & 0xF;
        if (!v14) {
          return 0;
        }
        break;
    }
    unint64_t v15 = (v14 - 1);
    if (v3 > v15)
    {
      uint64_t v16 = *(void *)(v4 + 8 * v15);
      int v17 = *(_DWORD *)(v16 + 24);
      uint64_t v19 = v16 + 40;
      long long v20 = *(_OWORD *)(v16 + 8);
      int v21 = v17;
      if (swift::MetadataCacheKey::operator==(a2, (uint64_t)&v19)) {
        break;
      }
    }
    uint64_t v6 = v13 + 1;
  }
  return v4 + 8 * v15;
}

uint64_t swift::MetadataCacheKey::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int16 *)(a1 + 14);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v6 = *(unsigned __int16 *)(a1 + 10);
  size_t v7 = 8 * (v5 + v4 + v6);
  uint64_t v8 = *(unsigned __int16 *)(a2 + 14);
  uint64_t v9 = *(unsigned __int16 *)(a2 + 8);
  uint64_t v10 = *(unsigned __int16 *)(a2 + 10);
  if (v7 != 8 * (v9 + v8 + v10)) {
    return 0;
  }
  unint64_t v11 = *(void **)a1;
  unint64_t v12 = *(void **)a2;
  if (!memcmp(*(const void **)a1, *(const void **)a2, v7)) {
    return 1;
  }
  uint64_t result = 0;
  if (v5 != v9 || v6 != v10 || v4 != v8) {
    return result;
  }
  unint64_t v14 = *(unsigned __int16 *)(a1 + 12);
  if (v14 != *(unsigned __int16 *)(a2 + 12)) {
    return 0;
  }
  if (*(_WORD *)(a1 + 12))
  {
    unint64_t v15 = *(unsigned __int16 **)(a1 + 16);
    uint64_t v16 = *(unsigned __int16 **)(a2 + 16);
    if (*v15 != *v16 || v15[1] != v16[1] || v15[2] != v16[2]) {
      return 0;
    }
    int v17 = v15 + 6;
    unsigned int v18 = v16 + 6;
    uint64_t v19 = 1;
    do
    {
      unint64_t v20 = v19;
      if (v14 == v19) {
        break;
      }
      if (*(v17 - 2) != *(v18 - 2)) {
        break;
      }
      if (*(v17 - 1) != *(v18 - 1)) {
        break;
      }
      int v22 = *v17;
      v17 += 4;
      int v21 = v22;
      int v23 = *v18;
      v18 += 4;
      ++v19;
    }
    while (v21 == v23);
    if (v20 < v14) {
      return 0;
    }
  }
  if (v4)
  {
    int v24 = v4;
    unint64_t v25 = v11;
    uint64_t v26 = v12;
    do
    {
      if (*v25 != *v26) {
        return 0;
      }
      ++v26;
      ++v25;
      --v24;
    }
    while (v24);
  }
  uint64_t v27 = *(void *)(a1 + 16);
  if (v5)
  {
    int v28 = 0;
    unsigned int v29 = 0;
    uint64_t v30 = v4;
    do
    {
      if (v29 >= v14
        || *(_WORD *)(v27 + 8 * v29)
        || (uint64_t v31 = v27 + 8 * v29, v30 != *(unsigned __int16 *)(v31 + 2)))
      {
        if (v11[v30] != v12[v30]) {
          return 0;
        }
      }
      else
      {
        unint64_t v32 = v11[*(unsigned __int16 *)(v31 + 4)];
        if (v32)
        {
          int v33 = (void *)(v11[v30] & 0xFFFFFFFFFFFFFFFELL);
          unint64_t v34 = (void *)(v12[v30] & 0xFFFFFFFFFFFFFFFELL);
          if (*v33 != *v34) {
            return 0;
          }
          uint64_t v35 = 1;
          do
          {
            unint64_t v36 = v35;
            if (v32 == v35) {
              break;
            }
            uint64_t v37 = v33[v35];
            uint64_t v38 = v34[v35++];
          }
          while (v37 == v38);
          if (v36 < v32) {
            return 0;
          }
        }
        ++v29;
      }
      ++v30;
      ++v28;
    }
    while (v28 != v5);
    LODWORD(v4) = v5 + v4;
  }
  else
  {
    unsigned int v29 = 0;
  }
  if (!v6) {
    return 1;
  }
  int v39 = 0;
  unsigned int v40 = v29;
  uint64_t v57 = *(void *)(a1 + 16);
  while (1)
  {
    if (v40 >= *(unsigned __int16 *)(a1 + 12)
      || *(_WORD *)(v27 + 8 * v40) != 1
      || (uint64_t v43 = v27 + 8 * v40, v4 != *(unsigned __int16 *)(v43 + 2)))
    {
      uint64_t v50 = v4;
      unint64_t v51 = (int **)v11[v50];
      unint64_t v52 = (int **)v12[v50];
      if (v51 == v52) {
        goto LABEL_45;
      }
      if (*v51)
      {
        unint64_t v41 = *v51;
        uint64_t v42 = *v52;
        if (!*v52)
        {
LABEL_54:
          uint64_t result = swift::MetadataCacheKey::areConformanceDescriptorsEqual(v41, 0);
          if (result) {
            goto LABEL_45;
          }
          return result;
        }
      }
      else
      {
        unint64_t v41 = 0;
        uint64_t v42 = *v52;
        if (!*v52) {
          goto LABEL_54;
        }
      }
      uint64_t result = swift::MetadataCacheKey::areConformanceDescriptorsEqual(v41, v42);
      if (result) {
        goto LABEL_45;
      }
      return result;
    }
    unint64_t v44 = v11[*(unsigned __int16 *)(v43 + 4)];
    if (v44) {
      break;
    }
    ++v40;
LABEL_45:
    LODWORD(v4) = v4 + 1;
    ++v39;
    uint64_t result = 1;
    if (v39 == *(unsigned __int16 *)(a1 + 10)) {
      return result;
    }
  }
  unsigned int v58 = v40;
  BOOL v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = v4;
  unint64_t v48 = v11[v47] & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v49 = v12[v47] & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    __int16 v55 = *(int ***)(v48 + 8 * v46);
    uint64_t v56 = *(int ***)(v49 + 8 * v46);
    if (v55 != v56)
    {
      if (*v55)
      {
        unint64_t v53 = *v55;
        __int16 v54 = *v56;
        if (*v56)
        {
LABEL_57:
          if (!swift::MetadataCacheKey::areConformanceDescriptorsEqual(v53, v54)) {
            break;
          }
          goto LABEL_58;
        }
      }
      else
      {
        unint64_t v53 = 0;
        __int16 v54 = *v56;
        if (*v56) {
          goto LABEL_57;
        }
      }
      if (!swift::MetadataCacheKey::areConformanceDescriptorsEqual(v53, 0)) {
        break;
      }
    }
LABEL_58:
    BOOL v45 = ++v46 >= v44;
  }
  while (v44 != v46);
  if (v45)
  {
    uint64_t v27 = v57;
    unsigned int v40 = v58 + 1;
    goto LABEL_45;
  }
  return 0;
}

unint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::GenericCacheEntry>,swift::Mutex>::resize(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  char v8 = a3 + 1;
  unsigned int v9 = (a3 + 1);
  if (v9 >= 0x11) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = 2;
  }
  if (v9 < 9) {
    size_t v11 = 1;
  }
  else {
    size_t v11 = v10;
  }
  unint64_t v12 = (unint64_t)malloc_type_calloc(2 << a3, v11, 0x4269077AuLL);
  if (!v12) {
    swift::hashable_support::findHashableBaseTypeOfHashableType();
  }
  if (v11 != 1)
  {
    if (v11 == 4) {
      size_t v11 = 3;
    }
    else {
      size_t v11 = 2;
    }
  }
  unint64_t v13 = v11 | v12;
  *(unsigned char *)unint64_t v12 = v8;
  if (a3)
  {
    uint64_t v14 = ~(-2 << a3);
    uint64_t v15 = a2 & 3;
    unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    if ((a2 & 3) != 0) {
      unint64_t v17 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    }
    else {
      unint64_t v17 = 0;
    }
    int v18 = v13 & 3;
    unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v13 & 3) == 0) {
      unint64_t v19 = 0;
    }
    uint64_t v20 = 1;
    while (2)
    {
      switch(a2 & 3)
      {
        case 0uLL:
          uint64_t v21 = (a2 >> (4 * v20)) & 0xF;
          if (!v21) {
            goto LABEL_20;
          }
          goto LABEL_29;
        case 1uLL:
          LODWORD(v21) = *(unsigned __int8 *)(v17 + v20);
          if (*(unsigned char *)(v17 + v20)) {
            goto LABEL_29;
          }
          goto LABEL_20;
        case 2uLL:
          LODWORD(v21) = *(unsigned __int16 *)(v17 + 2 * v20);
          if (!*(_WORD *)(v17 + 2 * v20)) {
            goto LABEL_20;
          }
          goto LABEL_29;
        case 3uLL:
          LODWORD(v21) = *(_DWORD *)(v17 + 4 * v20);
          if (!v21) {
            goto LABEL_20;
          }
LABEL_29:
          for (uint64_t i = *(unsigned int *)(*(void *)(a4 + 8 * (v21 - 1)) + 24); ; uint64_t i = v24 + 1)
          {
            uint64_t v24 = i & v14;
            if ((i & v14) != 0)
            {
              switch(v13 & 3)
              {
                case 1uLL:
                  LODWORD(v23) = *(unsigned __int8 *)(v19 + v24);
                  break;
                case 2uLL:
                  LODWORD(v23) = *(unsigned __int16 *)(v19 + 2 * v24);
                  break;
                case 3uLL:
                  LODWORD(v23) = *(_DWORD *)(v19 + 4 * v24);
                  break;
                default:
                  uint64_t v23 = (v13 >> (4 * v24)) & 0xF;
                  break;
              }
              if (!v23) {
                break;
              }
            }
          }
          if (v18 == 3)
          {
            *(_DWORD *)(v19 + 4 * v24) = v21;
          }
          else if (v18 == 2)
          {
            *(_WORD *)(v19 + 2 * v24) = v21;
          }
          else
          {
            *(unsigned char *)(v19 + v24) = v21;
          }
LABEL_20:
          if (!((unint64_t)++v20 >> a3)) {
            continue;
          }
          goto LABEL_43;
        default:
          JUMPOUT(0);
      }
    }
  }
  uint64_t v15 = a2 & 3;
  unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_43:
  atomic_store(v13, (unint64_t *)(a1 + 16));
  if (v15 && v16)
  {
    unint64_t v25 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
    *unint64_t v25 = *(void *)(a1 + 32);
    v25[1] = v16;
    *(void *)(a1 + 32) = v25;
  }
  return v13;
}

uint64_t swift::MetadataCacheEntryBase<anonymous namespace'::GenericCacheEntry,void const*>::awaitSatisfyingState(atomic_ullong *a1, os_unfair_lock_t lock, __int16 a3)
{
  char explicit = atomic_load_explicit(a1, memory_order_acquire);
  unsigned int v7 = explicit & 7;
  if (v7 - 1 >= 3)
  {
    if (v7 == 4) {
      return a1[4];
    }
    if ((explicit & 7) != 0) {
      goto LABEL_60;
    }
    uint64_t v9 = a3 & 0x100;
  }
  else
  {
    if (a3 > 0x3Eu)
    {
      if (a3 == 255) {
        goto LABEL_15;
      }
      if (a3 != 63) {
        goto LABEL_60;
      }
      if (v7 > 1) {
        goto LABEL_15;
      }
    }
    else if ((_BYTE)a3)
    {
      if (a3 != 1) {
        goto LABEL_60;
      }
      if (v7 >= 3) {
        return a1[4];
      }
    }
    uint64_t v9 = a3 & 0x100;
    if ((explicit & 8) != 0 && (a3 & 0x100) != 0)
    {
LABEL_15:
      uint64_t v8 = a1[4];
      if (v7 == 1 || v7 == 3 || v7 == 2) {
        return v8;
      }
LABEL_60:
      abort();
    }
  }
  unsigned int v10 = 0;
  os_unfair_lock_t v23 = lock;
  uint64_t v24 = 0;
  int v11 = a3;
  __int16 v25 = 0;
  while (1)
  {
    os_unfair_lock_lock(lock);
    if (v10)
    {
      if (*v10 == 1)
      {
        uint64_t v12 = v10[2];
        v10[2] = 0;
        if (v12) {
          MEMORY[0x1852FF000](v12, 0x80C4018A671A6);
        }
        swift_slowDealloc(v10);
      }
      else
      {
        --*v10;
      }
    }
    atomic_ullong v13 = *a1;
    uint64_t v14 = *a1 & 7;
    if ((v14 - 1) < 3) {
      break;
    }
    if (v14)
    {
      if (v14 == 4)
      {
LABEL_50:
        os_unfair_lock_unlock(lock);
        uint64_t v8 = a1[4];
        goto LABEL_55;
      }
      goto LABEL_60;
    }
LABEL_21:
    unsigned int v10 = (void *)(v13 & 0xFFFFFFFFFFFFFFF0);
    ++*(void *)(v13 & 0xFFFFFFFFFFFFFFF0);
    os_unfair_lock_unlock(lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v13 & 0xFFFFFFFFFFFFFFF0 | 8));
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 & 0xFFFFFFFFFFFFFFF0 | 8));
  }
  if (v11 > 62)
  {
    if (v11 != 63)
    {
      if (v11 == 255)
      {
LABEL_52:
        os_unfair_lock_unlock(lock);
        uint64_t v8 = a1[4];
        if (v14 == 1 || v14 == 3 || v14 == 2) {
          goto LABEL_55;
        }
      }
      goto LABEL_60;
    }
    if (v14 > 1) {
      goto LABEL_52;
    }
  }
  else if (v11)
  {
    if (v11 != 1) {
      goto LABEL_60;
    }
    if (v14 >= 3) {
      goto LABEL_50;
    }
  }
  if ((v13 & 8) != 0)
  {
    if (v9) {
      goto LABEL_52;
    }
    goto LABEL_21;
  }
  unint64_t v15 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
  *(_OWORD *)unint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(void *)unint64_t v15 = 1;
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 8));
  uint64_t v24 = (os_unfair_lock_s *)v15;
  unint64_t v16 = (_OWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  if ((v13 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    *(_OWORD *)(v15 + 24) = *v16;
    uint64_t v17 = *(void *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x10);
    *(void *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0;
    uint64_t v18 = *(void *)(v15 + 16);
    *(void *)(v15 + 16) = v17;
    if (v18) {
      MEMORY[0x1852FF000](v18, 0x80C4018A671A6);
    }
  }
  atomic_store(v13 & 7 | v15 | 8, (unint64_t *)a1);
  LOBYTE(v25) = 1;
  os_unfair_lock_unlock(lock);
  HIBYTE(v25) = v14;
  if (v16)
  {
    uint64_t v19 = *(void *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x10);
    *(void *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0;
    if (v19) {
      MEMORY[0x1852FF000](v19, 0x80C4018A671A6);
    }
    MEMORY[0x1852FF000](v13 & 0xFFFFFFFFFFFFFFF0, 0x1060C4048D9C6C4);
  }
LABEL_55:
  uint64_t v20 = v24;
  if (v24)
  {
    os_unfair_lock_unlock(v24 + 2);
    uint64_t v21 = *(void *)&v20[4]._os_unfair_lock_opaque;
    *(void *)&v20[4]._os_unfair_lock_opaque = 0;
    if (v21) {
      MEMORY[0x1852FF000](v21, 0x80C4018A671A6);
    }
    swift_slowDealloc(v20);
  }
  return v8;
}

uint64_t swift::MetadataCacheEntryBase<anonymous namespace'::GenericCacheEntry,void const*>::doInitialization(uint64_t a1, uint64_t a2, __int16 a3)
{
  unsigned int v7 = *(uint64_t **)(a1 + 32);
  uint64_t v24 = *(void *)(a2 + 8);
  os_unfair_lock_t v23 = *(long long **)(v24 + 16);
  if (!v23)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    os_unfair_lock_t v23 = &v25;
  }
  int v8 = a3;
  while (1)
  {
    unsigned int v9 = *(unsigned __int8 *)(a2 + 17);
    if (v9 <= 2
      && ((uint64_t TypeContextDescriptor = (_DWORD *)swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor((unint64_t *)v7),
           FullGenericContextHeader = swift::TargetTypeContextDescriptor<swift::InProcess>::getFullGenericContextHeader(TypeContextDescriptor),
           uint64_t v12 = (int)FullGenericContextHeader[1],
           v12)
        ? (atomic_ullong v13 = (char *)FullGenericContextHeader + v12 + 4)
        : (atomic_ullong v13 = 0),
          (uint64_t v14 = *((int *)v13 + 1), v14)
        ? (uint64_t v15 = ((uint64_t (*)(uint64_t *, long long *))&v13[v14 + 4])(v7, v23))
        : (uint64_t v15 = MEMORY[0](v7, v23)),
          v15))
    {
      uint64_t v17 = v15;
      unsigned __int8 v18 = (*(unsigned char *)(*(v7 - 1) + 82) & 0x40) != 0 ? 1 : 2;
    }
    else
    {
      uint64_t v19 = checkTransitiveCompleteness(v7);
      if (!v19)
      {
        *(unsigned char *)(a2 + 17) = 4;
        uint64_t v20 = *(void *)(v24 + 16);
        *(void *)(v24 + 16) = 0;
        return *(void *)(a1 + 32);
      }
      uint64_t v17 = v19;
      unsigned __int8 v18 = 3;
    }
    uint64_t v3 = v16;
    *(unsigned char *)(a2 + 17) = v18;
    if (v8 > 62) {
      break;
    }
    if (v8)
    {
      if (v8 != 1) {
        goto LABEL_40;
      }
      if (v18 == 3) {
        goto LABEL_30;
      }
    }
LABEL_25:
    if ((a3 & 0x100) != 0) {
      goto LABEL_30;
    }
    if (v9 < v18)
    {
      uint64_t v24 = *(void *)(a2 + 8);
    }
    swift::blockOnMetadataDependency(*(void *)(a1 + 32), a3, v17, v3);
  }
  if (v8 == 63)
  {
    if (v18 > 1u) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  if (v8 != 255) {
LABEL_40:
  }
    abort();
LABEL_30:
  uint64_t v22 = *(void *)(v24 + 16);
  if (!v22)
  {
    if ((unint64_t)v25 | *((void *)&v25 + 1) | (unint64_t)v26 | *((void *)&v26 + 1)) {
      operator new();
    }
    uint64_t v22 = 0;
  }
  *(void *)(v24 + 16) = 0;
  uint64_t result = *(void *)(a1 + 32);
  if (v18 != 1 && v18 != 3 && v18 != 2) {
    goto LABEL_40;
  }
  return result;
}

void swift::MetadataCacheEntryBase<anonymous namespace'::GenericCacheEntry,void const*>::finishAndPublishProgress(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = *(unsigned __int8 *)(a2 + 17);
  if (a3 || a5) {
    operator new();
  }
  int v8 = *(os_unfair_lock_s **)a2;
  os_unfair_lock_lock(*(os_unfair_lock_t *)a2);
  atomic_store(v7, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a2 + 8) + 8));
  unsigned int v9 = *(void **)(a2 + 8);
  if (*v9 == 1)
  {
    uint64_t v10 = v9[2];
    v9[2] = 0;
    if (v10) {
      MEMORY[0x1852FF000](v10, 0x80C4018A671A6);
    }
    swift_slowDealloc(v9);
  }
  else
  {
    --*v9;
  }
  os_unfair_lock_unlock(v8);
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
}

void swift::MetadataCacheEntryBase<anonymous namespace'::GenericCacheEntry,void const*>::notifyWaitingThreadsOfProgress(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(os_unfair_lock_s **)a2;
  os_unfair_lock_lock(*(os_unfair_lock_t *)a2);
  unsigned int v9 = *(void **)(a2 + 8);
  if (*v9 == 1)
  {
    unint64_t v10 = *(void *)(a2 + 8);
  }
  else
  {
    unint64_t v10 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
    *(_OWORD *)unint64_t v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(void *)unint64_t v10 = 1;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 8));
    uint64_t v11 = v9[2];
    v9[2] = 0;
    uint64_t v12 = *(void *)(v10 + 16);
    *(void *)(v10 + 16) = v11;
    if (v12) {
      MEMORY[0x1852FF000](v12, 0x80C4018A671A6);
    }
  }
  *(void *)(v10 + 24) = a3;
  *(void *)(v10 + 32) = a4;
  atomic_store(*(unsigned __int8 *)(a2 + 17) | v10 | 8, a1);
  if ((void *)v10 != v9)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a2 + 8) + 8));
    atomic_ullong v13 = *(void **)(a2 + 8);
    if (*v13 == 1)
    {
      uint64_t v14 = v13[2];
      v13[2] = 0;
      if (v14) {
        MEMORY[0x1852FF000](v14, 0x80C4018A671A6);
      }
      swift_slowDealloc(v13);
    }
    else
    {
      --*v13;
    }
    *(void *)(a2 + 8) = v10;
  }

  os_unfair_lock_unlock(v8);
}

uint64_t checkTransitiveCompleteness(uint64_t *a1)
{
  unsigned __int8 v18 = v20;
  uint64_t v19 = 0x800000000;
  uint64_t v17 = 0;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  *(_OWORD *)unsigned int v9 = 0u;
  *(_OWORD *)__p = 0u;
  int v11 = 1065353216;
  v7[4] = &v18;
  uint64_t v8 = 0;
  v7[0] = &v13;
  v7[1] = &v12;
  v7[2] = v9;
  v7[3] = &v8;
  atomic_ullong v13 = a1;
  int v12 = 1;
  if (findAnyTransitiveMetadata<checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0 &>(a1, v7))
  {
LABEL_4:
    uint64_t v2 = v8;
    uint64_t v3 = __p[0];
    if (!__p[0]) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  while (v19)
  {
    int v1 = (uint64_t *)v18[v19 - 1];
    LODWORD(v19) = v19 - 1;
    if (findAnyTransitiveMetadata<checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0 &>(v1, v7))goto LABEL_4; {
  }
    }
  uint64_t v2 = 0;
  uint64_t v3 = __p[0];
  if (__p[0])
  {
    do
    {
LABEL_5:
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
LABEL_6:
  uint64_t v5 = v9[0];
  v9[0] = 0;
  if (v5) {
    operator delete(v5);
  }
  if (v18 != (void *)v20) {
    free(v18);
  }
  return v2;
}

uint64_t findAnyTransitiveMetadata<checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0 &>(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  BOOL v5 = (unint64_t)*a1 > 0x7FF || *a1 == 0;
  if (v5)
  {
    if (a1[8]) {
      uint64_t v6 = (_DWORD *)a1[8];
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v12 = a1[1];
    if (v12
      && (*(unsigned char *)(v12 + 32) & 2) != 0
      && (checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(a2, v12) & 1) != 0)
    {
      return 1;
    }
  }
  else
  {
    if ((v4 - 515) < 0xFFFFFFFD)
    {
      if (v4 == 515)
      {
        uint64_t v32 = a1[2];
        if (v32
          && (checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(a2, v32) & 1) != 0)
        {
          return 1;
        }
      }
      else if (v4 == 769)
      {
        uint64_t v7 = a1[1];
        if (v7)
        {
          uint64_t v8 = 0;
          unsigned int v9 = a1 + 3;
          uint64_t v10 = v7 - 1;
          do
          {
            uint64_t result = checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(a2, v9[2 * v8]);
            if (result) {
              break;
            }
            BOOL v5 = v10 == v8++;
          }
          while (!v5);
          return result;
        }
      }
      return 0;
    }
    if (a1[1]) {
      uint64_t v6 = (_DWORD *)a1[1];
    }
    else {
      uint64_t v6 = 0;
    }
  }
  if ((*(unsigned char *)v6 & 0x80) == 0) {
    return 0;
  }
  GenericContext = (unsigned __int16 *)swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v6);
  int v14 = *v6 & 0x1F;
  if ((v14 - 17) >= 2)
  {
    if (v14 != 16) {
      abort();
    }
    if (v6) {
      uint64_t v31 = v6;
    }
    else {
      uint64_t v31 = 0;
    }
    if ((*v31 & 0x20000000) != 0)
    {
      uint64_t v35 = (int)v31[6];
      if (v35) {
        unint64_t v36 = (unint64_t *)((char *)v31 + v35 + 24);
      }
      else {
        unint64_t v36 = 0;
      }
      unint64_t v37 = *v36;
      if (!*v36)
      {
        computeMetadataBoundsFromSuperclass(v31, (uint64_t)v36);
        unint64_t v37 = v38;
      }
      unint64_t v15 = v37 >> 3;
    }
    else
    {
      if ((*v31 & 0x10000000) != 0)
      {
        int v33 = 0;
        uint64_t v34 = 6;
      }
      else
      {
        int v33 = v31[7];
        uint64_t v34 = 8;
      }
      LODWORD(v15) = v33 - v31[v34];
    }
  }
  else
  {
    LODWORD(v15) = 2;
  }
  unsigned __int16 v16 = GenericContext[5];
  uint64_t v17 = v16 & 1;
  if (v16)
  {
    uint64_t v18 = GenericContext[2];
    uint64_t v19 = (_DWORD *)((((unint64_t)GenericContext + v18 + 15) & 0xFFFFFFFFFFFFFFFCLL) + 12 * GenericContext[3]);
    int v20 = HIWORD(*v19);
    uint64_t v21 = &v19[v17];
    if ((unsigned __int16)*v19) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    if (!GenericContext[2]) {
      return 0;
    }
  }
  else
  {
    int v20 = 0;
    uint64_t v22 = 0;
    uint64_t v18 = GenericContext[2];
    if (!GenericContext[2]) {
      return 0;
    }
  }
  int v23 = 0;
  uint64_t v24 = &a1[(int)v15];
  long long v25 = (char *)(GenericContext + 6);
  long long v26 = &v25[v18];
  while (1)
  {
    int v27 = *v25;
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    if ((v27 & 0x3F) == 0)
    {
      if (checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(a2, v24[v20])) {
        return 1;
      }
      goto LABEL_38;
    }
    unint64_t v28 = v24[LOWORD(v22[2 * v23 + 1])];
    if (v28) {
      break;
    }
LABEL_37:
    ++v23;
LABEL_38:
    ++v20;
LABEL_39:
    if (++v25 == v26) {
      return 0;
    }
  }
  unsigned int v29 = (uint64_t *)(v24[v20] & 0xFFFFFFFFFFFFFFFELL);
  if (v28 <= 1) {
    uint64_t v30 = 1;
  }
  else {
    uint64_t v30 = v24[LOWORD(v22[2 * v23 + 1])];
  }
  while ((checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(a2, *v29) & 1) == 0)
  {
    ++v29;
    if (!--v30) {
      goto LABEL_37;
    }
  }
  return 1;
}

uint64_t checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v17 = a2;
  uint64_t v4 = (int *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = (void *)(*a1 + 8 * v5);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v7 = 8 * v5;
  uint64_t v8 = (void *)*a1;
  while (*v8 != a2)
  {
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      uint64_t v8 = (void *)(*a1 + 8 * v5);
      break;
    }
  }
  if (v5 != ((uint64_t)v8 - *a1) >> 3) {
    return 0;
  }
  if ((int)v5 > 7)
  {
    std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__emplace_unique_key_args<swift::TargetMetadata<swift::InProcess> const*,swift::TargetMetadata<swift::InProcess> const* const&>(a1[2], &v17, &v17);
    if ((v15 & 1) == 0) {
      return 0;
    }
    uint64_t v2 = v17;
  }
  else
  {
LABEL_8:
    *uint64_t v4 = v5 + 1;
    *uint64_t v6 = a2;
  }
  uint64_t v18 = 256;
  performOnMetadataCache<swift::MetadataResponse,swift_checkMetadataState::CheckStateCallbacks>(v2, &v18);
  if (!v9) {
    return 0;
  }
  if (v9 == 1)
  {
    uint64_t v10 = a1[4];
    uint64_t v11 = v17;
    uint64_t v12 = *(unsigned int *)(v10 + 8);
    if (v12 >= *(_DWORD *)(v10 + 12))
    {
      uint64_t v16 = v17;
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v12 + 1, 8);
      uint64_t v11 = v16;
      LODWORD(v12) = *(_DWORD *)(v10 + 8);
    }
    uint64_t result = 0;
    *(void *)(*(void *)v10 + 8 * v12) = v11;
    ++*(_DWORD *)(v10 + 8);
  }
  else
  {
    int v14 = (void *)a1[3];
    uint64_t result = 1;
    *int v14 = v17;
    v14[1] = 1;
  }
  return result;
}

void *std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__emplace_unique_key_args<swift::TargetMetadata<swift::InProcess> const*,swift::TargetMetadata<swift::InProcess> const* const&>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = HIDWORD(*a2);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_41;
    }
    if (prime < v9)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v9) {
LABEL_41:
      }
        std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_55:
    *uint64_t v24 = i;
    goto LABEL_56;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return i;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v4 = operator new(8 * a2);
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    unint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            *unint64_t v7 = *v11;
            uint64_t v12 = 8 * v13;
            void *v11 = **(void **)(*(void *)a1 + v12);
            **(void **)(*(void *)a1 + v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v13 = v8;
LABEL_19:
          unint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  unint64_t v3 = a1;
  unsigned int NumConditionalInvertibleProtocolsRequirementCounts = swift::TrailingGenericContextObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(a1);
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  if ((*v5 & 0x80) == 0) {
    goto LABEL_13;
  }
  if (!v5) {
    uint64_t v5 = 0;
  }
  if ((*((_WORD *)v5 + 21) & 2) != 0
    && (!v3 ? (uint64_t v6 = 0) : (uint64_t v6 = v3),
        uint64_t v7 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v6),
        (unsigned int v8 = swift::TrailingGenericContextObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(v3)) != 0))
  {
    unsigned int v9 = *(unsigned __int16 *)(v7 + 2 * v8 - 2);
  }
  else
  {
LABEL_13:
    unsigned int v9 = 0;
  }
  return ((TrailingObjectsImpl + 2 * NumConditionalInvertibleProtocolsRequirementCounts + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 12 * v9;
}

uint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  if (*a1 & 0x80) != 0 && (!a1 ? (unint64_t v3 = 0) : (unint64_t v3 = a1), (*((_WORD *)v3 + 21)))
  {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(a1);
    if (a1) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t GenericPackShapeHeader = 0;
    if (a1)
    {
LABEL_7:
      uint64_t v5 = a1;
      goto LABEL_10;
    }
  }
  uint64_t v5 = 0;
LABEL_10:
  if ((*v5 & 0x80) != 0)
  {
    if (!v5) {
      uint64_t v5 = 0;
    }
    unint64_t v6 = ((unint64_t)*((unsigned __int16 *)v5 + 21) >> 1) & 1;
  }
  else
  {
    unint64_t v6 = 0;
  }
  return TrailingObjectsImpl + 8 * GenericPackShapeHeader + 2 * v6;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  if (a1 == (unsigned char *)-28)
  {
    int v1 = 0;
    goto LABEL_3;
  }
  int v1 = a1 + 28;
  if (a1)
  {
LABEL_3:
    uint64_t v2 = (unsigned int *)a1;
    goto LABEL_6;
  }
  uint64_t v2 = 0;
LABEL_6:
  unint64_t v3 = *v2;
  if ((v3 & 0x80) != 0)
  {
    if (a1) {
      unint64_t v6 = a1;
    }
    else {
      unint64_t v6 = 0;
    }
    uint64_t v4 = *((unsigned __int16 *)v6 + 18);
    if (a1) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (a1)
    {
LABEL_8:
      uint64_t v5 = a1;
      goto LABEL_14;
    }
  }
  uint64_t v5 = 0;
LABEL_14:
  if ((*v5 & 0x80) != 0)
  {
    if (a1) {
      unsigned int v9 = a1;
    }
    else {
      unsigned int v9 = 0;
    }
    unsigned int v7 = *((unsigned __int16 *)v9 + 19);
    if (a1) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v7 = 0;
    if (a1)
    {
LABEL_16:
      unsigned int v8 = a1;
      goto LABEL_22;
    }
  }
  unsigned int v8 = 0;
LABEL_22:
  if ((*v8 & 0x80) != 0)
  {
    if (a1) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v10 = *((_WORD *)v11 + 21) & 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  return ((unint64_t)&v1[16 * ((v3 >> 7) & 1) + 3 + v4] & 0xFFFFFFFFFFFFFFFCLL) + 12 * v7 + 4 * v10;
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(unsigned char *a1)
{
  if (a1) {
    int v1 = a1;
  }
  else {
    int v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  uint64_t v2 = a1 ? a1 : 0;
  if ((*((_WORD *)v2 + 21) & 1) == 0) {
    return 0;
  }
  if (a1) {
    uint64_t v4 = (unsigned int *)a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4;
  if (v4 == (unsigned int *)-28)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = v4 + 7;
    if (!v4) {
      uint64_t v4 = 0;
    }
  }
  unint64_t v7 = *v4;
  if ((v7 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v8 = *((unsigned __int16 *)v10 + 18);
    if (v5) {
      goto LABEL_20;
    }
LABEL_25:
    unsigned int v9 = 0;
    goto LABEL_26;
  }
  uint64_t v8 = 0;
  if (!v5) {
    goto LABEL_25;
  }
LABEL_20:
  unsigned int v9 = v5;
LABEL_26:
  if ((*(unsigned char *)v9 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = 0;
    }
    unsigned int v11 = *((unsigned __int16 *)v12 + 19);
  }
  else
  {
    unsigned int v11 = 0;
  }
  unint64_t v13 = ((unint64_t)&v6[4 * ((v7 >> 7) & 1)] + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  return (*(unsigned __int16 *)(v13 + 12 * v11 + 2) << 16) | *(unsigned __int16 *)(v13 + 12 * v11);
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(unsigned char *a1)
{
  if (a1) {
    int v1 = a1;
  }
  else {
    int v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  if (!v1) {
    int v1 = 0;
  }
  if ((*((_WORD *)v1 + 21) & 2) == 0) {
    return 0;
  }
  if (a1) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v3);
  if (*v3 & 0x80) != 0 && (!v3 ? (uint64_t v5 = 0) : (uint64_t v5 = v3), (*((_WORD *)v5 + 21))) {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(v3);
  }
  else {
    uint64_t GenericPackShapeHeader = 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned __int16 *)(TrailingObjectsImpl + 8 * GenericPackShapeHeader));
  v7.i16[0] = vaddlv_u8(v7);
  return v7.u32[0];
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  unint64_t v3 = a1;
  unsigned int NumConditionalInvertibleProtocolsRequirementCounts = swift::TrailingGenericContextObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(a1);
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  if ((*v5 & 0x80) == 0) {
    goto LABEL_13;
  }
  if (!v5) {
    uint64_t v5 = 0;
  }
  if ((*((_WORD *)v5 + 21) & 2) != 0
    && (!v3 ? (unint64_t v6 = 0) : (unint64_t v6 = v3),
        uint64_t v7 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v6),
        (unsigned int v8 = swift::TrailingGenericContextObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(v3)) != 0))
  {
    unsigned int v9 = *(unsigned __int16 *)(v7 + 2 * v8 - 2);
  }
  else
  {
LABEL_13:
    unsigned int v9 = 0;
  }
  return ((TrailingObjectsImpl + 2 * NumConditionalInvertibleProtocolsRequirementCounts + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 12 * v9;
}

uint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  if (*a1 & 0x80) != 0 && (!a1 ? (unint64_t v3 = 0) : (unint64_t v3 = a1), (*((_WORD *)v3 + 21)))
  {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(a1);
    if (a1) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t GenericPackShapeHeader = 0;
    if (a1)
    {
LABEL_7:
      uint64_t v5 = a1;
      goto LABEL_10;
    }
  }
  uint64_t v5 = 0;
LABEL_10:
  if ((*v5 & 0x80) != 0)
  {
    if (!v5) {
      uint64_t v5 = 0;
    }
    unint64_t v6 = ((unint64_t)*((unsigned __int16 *)v5 + 21) >> 1) & 1;
  }
  else
  {
    unint64_t v6 = 0;
  }
  return TrailingObjectsImpl + 8 * GenericPackShapeHeader + 2 * v6;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  if (a1 == (unsigned char *)-28)
  {
    int v1 = 0;
    goto LABEL_3;
  }
  int v1 = a1 + 28;
  if (a1)
  {
LABEL_3:
    uint64_t v2 = (unsigned int *)a1;
    goto LABEL_6;
  }
  uint64_t v2 = 0;
LABEL_6:
  unint64_t v3 = *v2;
  if ((v3 & 0x80) != 0)
  {
    if (a1) {
      unint64_t v6 = a1;
    }
    else {
      unint64_t v6 = 0;
    }
    uint64_t v4 = *((unsigned __int16 *)v6 + 18);
    if (a1) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (a1)
    {
LABEL_8:
      uint64_t v5 = a1;
      goto LABEL_14;
    }
  }
  uint64_t v5 = 0;
LABEL_14:
  if ((*v5 & 0x80) != 0)
  {
    if (a1) {
      unsigned int v9 = a1;
    }
    else {
      unsigned int v9 = 0;
    }
    unsigned int v7 = *((unsigned __int16 *)v9 + 19);
    if (a1) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v7 = 0;
    if (a1)
    {
LABEL_16:
      unsigned int v8 = a1;
      goto LABEL_22;
    }
  }
  unsigned int v8 = 0;
LABEL_22:
  if ((*v8 & 0x80) != 0)
  {
    if (a1) {
      unsigned int v11 = a1;
    }
    else {
      unsigned int v11 = 0;
    }
    uint64_t v10 = *((_WORD *)v11 + 21) & 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  return ((unint64_t)&v1[16 * ((v3 >> 7) & 1) + 3 + v4] & 0xFFFFFFFFFFFFFFFCLL) + 12 * v7 + 4 * v10;
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(unsigned char *a1)
{
  if (a1) {
    int v1 = a1;
  }
  else {
    int v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  uint64_t v2 = a1 ? a1 : 0;
  if ((*((_WORD *)v2 + 21) & 1) == 0) {
    return 0;
  }
  if (a1) {
    uint64_t v4 = (unsigned int *)a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4;
  if (v4 == (unsigned int *)-28)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = v4 + 7;
    if (!v4) {
      uint64_t v4 = 0;
    }
  }
  unint64_t v7 = *v4;
  if ((v7 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v8 = *((unsigned __int16 *)v10 + 18);
    if (v5) {
      goto LABEL_20;
    }
LABEL_25:
    unsigned int v9 = 0;
    goto LABEL_26;
  }
  uint64_t v8 = 0;
  if (!v5) {
    goto LABEL_25;
  }
LABEL_20:
  unsigned int v9 = v5;
LABEL_26:
  if ((*(unsigned char *)v9 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = 0;
    }
    unsigned int v11 = *((unsigned __int16 *)v12 + 19);
  }
  else
  {
    unsigned int v11 = 0;
  }
  unint64_t v13 = ((unint64_t)&v6[4 * ((v7 >> 7) & 1)] + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  return (*(unsigned __int16 *)(v13 + 12 * v11 + 2) << 16) | *(unsigned __int16 *)(v13 + 12 * v11);
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(unsigned char *a1)
{
  if (a1) {
    int v1 = a1;
  }
  else {
    int v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  if (!v1) {
    int v1 = 0;
  }
  if ((*((_WORD *)v1 + 21) & 2) == 0) {
    return 0;
  }
  if (a1) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v3);
  if (*v3 & 0x80) != 0 && (!v3 ? (uint64_t v5 = 0) : (uint64_t v5 = v3), (*((_WORD *)v5 + 21))) {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(v3);
  }
  else {
    uint64_t GenericPackShapeHeader = 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned __int16 *)(TrailingObjectsImpl + 8 * GenericPackShapeHeader));
  v7.i16[0] = vaddlv_u8(v7);
  return v7.u32[0];
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::GlobalMetadataCacheEntry>,swift::LazyMutex>::find<swift::TargetTypeContextDescriptor<swift::InProcess> const*>(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  uint64_t v5 = &unk_1EB1F3000;
  {
    uint64_t v22 = a1;
    uint64_t v20 = a4;
    unint64_t v18 = a3;
    unint64_t v21 = a2;
    unint64_t v19 = v4;
    uint64_t v5 = &unk_1EB1F3000;
    a3 = v18;
    unint64_t v4 = v19;
    a4 = v20;
    int v16 = v15;
    a2 = v21;
    a1 = v22;
    if (v16)
    {
      unint64_t v17 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      uint64_t v5 = (void *)&unk_1EB1F3000;
      a3 = v18;
      unint64_t v4 = v19;
      a2 = v21;
      a1 = v22;
      a4 = v20;
    }
  }
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((v5[38] + 8 * v4) ^ HIDWORD(v4));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v6 >> 47) ^ v6);
  uint64_t v8 = 0x1DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unsigned int v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  if ((a2 & 3) == 0) {
    unsigned int v9 = 0;
  }
  while (2)
  {
    unint64_t v11 = v8 & ~(-1 << v10);
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v12) = v9 + v11;
        LOBYTE(v12) = atomic_load_explicit(&v9[v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v12) = v9 + 2 * v11;
        LOWORD(v12) = atomic_load_explicit((atomic_ushort *volatile)&v9[2 * v11], memory_order_acquire);
        if (!v12) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v12) = atomic_load_explicit((atomic_uint *volatile)&v9[4 * v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v12 = (a2 >> (4 * v11)) & 0xF;
        if (v12)
        {
LABEL_19:
          unint64_t v13 = (v12 - 1);
          if (v13 < a3 && **(void **)(a4 + 8 * v13) == *a1) {
            return a4 + 8 * v13;
          }
          uint64_t v8 = v11 + 1;
          continue;
        }
        return 0;
    }
  }
}

uint64_t *swift::Lazy<anonymous namespace'::GenericMetadataCache>::getWithInit<swift::TargetGenericContext<swift::InProcess> const&>(swift::TargetGenericContext<swift::InProcess> const&)::Data::init(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = (unsigned __int16 *)result[1];
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 48) = 0;
  unint64_t v3 = (char *)(v2 + 6);
  unint64_t v4 = (_DWORD *)(((unint64_t)v2 + v2[2] + 15) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned __int16 v5 = v2[5];
  uint64_t v6 = v5 & 1;
  if (v5)
  {
    unint64_t v7 = &v4[3 * v2[3]];
    int v8 = *v7;
    if ((unsigned __int16)*v7)
    {
      unsigned int v9 = &v7[v6];
      goto LABEL_6;
    }
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = 0;
LABEL_6:
  uint64_t v10 = *(void *)(v2 + 2);
  *(_DWORD *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 60) = v8;
  *(void *)(v1 + 64) = v9;
  uint64_t v11 = (unsigned __int16)v10;
  if ((_WORD)v10)
  {
    int v12 = 0;
    do
    {
      if (*v3 < 0) {
        *(_WORD *)(v1 + 56) = ++v12;
      }
      ++v3;
      --v11;
    }
    while (v11);
  }
  if ((v10 & 0xFFFF0000) != 0)
  {
    int v13 = 0;
    uint64_t v14 = 12 * WORD1(v10);
    do
    {
      if ((*v4 & 0x9F) == 0x80) {
        *(_WORD *)(v1 + 58) = ++v13;
      }
      v4 += 3;
      v14 -= 12;
    }
    while (v14);
  }
  return result;
}

uint64_t areAllTransitiveMetadataComplete_cheap(uint64_t *a1)
{
  uint64_t v2 = *a1;
  BOOL v3 = (unint64_t)*a1 > 0x7FF || *a1 == 0;
  if (v3)
  {
    if (a1[8]) {
      unint64_t v4 = (_DWORD *)a1[8];
    }
    else {
      unint64_t v4 = 0;
    }
    uint64_t v11 = a1[1];
    if (v11
      && (*(unsigned char *)(v11 + 32) & 2) != 0
      && areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()((uint64_t *)v11))
    {
      return 0;
    }
  }
  else
  {
    if ((v2 - 515) < 0xFFFFFFFD)
    {
      if (v2 == 515)
      {
        uint64_t v31 = (uint64_t *)a1[2];
        if (v31
          && areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(v31))
        {
          return 0;
        }
      }
      else if (v2 == 769)
      {
        uint64_t v5 = a1[1];
        if (v5)
        {
          uint64_t v6 = 0;
          unint64_t v7 = a1 + 3;
          uint64_t v8 = v5 - 1;
          do
          {
            BOOL v9 = areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()((uint64_t *)v7[2 * v6]);
            if (v9) {
              break;
            }
            BOOL v3 = v8 == v6++;
          }
          while (!v3);
          return !v9;
        }
      }
      return 1;
    }
    if (a1[1]) {
      unint64_t v4 = (_DWORD *)a1[1];
    }
    else {
      unint64_t v4 = 0;
    }
  }
  if ((*(unsigned char *)v4 & 0x80) == 0) {
    return 1;
  }
  GenericContext = (unsigned __int16 *)swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v4);
  int v13 = *v4 & 0x1F;
  if ((v13 - 17) >= 2)
  {
    if (v13 != 16) {
      abort();
    }
    if (v4) {
      uint64_t v30 = v4;
    }
    else {
      uint64_t v30 = 0;
    }
    if ((*v30 & 0x20000000) != 0)
    {
      uint64_t v34 = (int)v30[6];
      if (v34) {
        uint64_t v35 = (unint64_t *)((char *)v30 + v34 + 24);
      }
      else {
        uint64_t v35 = 0;
      }
      unint64_t v36 = *v35;
      if (!*v35)
      {
        computeMetadataBoundsFromSuperclass(v30, (uint64_t)v35);
        unint64_t v36 = v37;
      }
      unint64_t v14 = v36 >> 3;
    }
    else
    {
      if ((*v30 & 0x10000000) != 0)
      {
        int v32 = 0;
        uint64_t v33 = 6;
      }
      else
      {
        int v32 = v30[7];
        uint64_t v33 = 8;
      }
      LODWORD(v14) = v32 - v30[v33];
    }
  }
  else
  {
    LODWORD(v14) = 2;
  }
  unsigned __int16 v15 = GenericContext[5];
  uint64_t v16 = v15 & 1;
  if (v15)
  {
    uint64_t v17 = GenericContext[2];
    unint64_t v18 = (_DWORD *)((((unint64_t)GenericContext + v17 + 15) & 0xFFFFFFFFFFFFFFFCLL) + 12 * GenericContext[3]);
    int v19 = HIWORD(*v18);
    uint64_t v20 = &v18[v16];
    if ((unsigned __int16)*v18) {
      unint64_t v21 = v20;
    }
    else {
      unint64_t v21 = 0;
    }
    if (!GenericContext[2]) {
      return 1;
    }
  }
  else
  {
    int v19 = 0;
    unint64_t v21 = 0;
    uint64_t v17 = GenericContext[2];
    if (!GenericContext[2]) {
      return 1;
    }
  }
  int v22 = 0;
  uint64_t v23 = &a1[(int)v14];
  uint64_t v24 = (char *)(GenericContext + 6);
  unint64_t v25 = &v24[v17];
  while (1)
  {
    int v26 = *v24;
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    if ((v26 & 0x3F) == 0)
    {
      if (areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()((uint64_t *)v23[v19])) {
        return 0;
      }
      goto LABEL_38;
    }
    unint64_t v27 = v23[LOWORD(v21[2 * v22 + 1])];
    if (v27) {
      break;
    }
LABEL_37:
    ++v22;
LABEL_38:
    ++v19;
LABEL_39:
    if (++v24 == v25) {
      return 1;
    }
  }
  unint64_t v28 = (uint64_t **)(v23[v19] & 0xFFFFFFFFFFFFFFFELL);
  if (v27 <= 1) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v23[LOWORD(v21[2 * v22 + 1])];
  }
  while (!areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(*v28))
  {
    ++v28;
    if (!--v29) {
      goto LABEL_37;
    }
  }
  return 0;
}

BOOL areAllTransitiveMetadataComplete_cheap(swift::TargetMetadata<swift::InProcess> const*)::$_0::operator()(uint64_t *a1)
{
  if (swift::TargetMetadata<swift::InProcess>::isCanonicalStaticallySpecializedGenericMetadata((uint64_t)a1)) {
    return 0;
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 > 0x7FF || *a1 == 0)
  {
    uint64_t v5 = (_DWORD *)a1[8];
    if (v5)
    {
LABEL_15:
      uint64_t v6 = v5;
      goto LABEL_17;
    }
  }
  else
  {
    if ((v3 - 515) < 0xFFFFFFFD)
    {
      if (v3 != 515)
      {
        if (v3 == 769) {
          return a1[1] != 0;
        }
        return 0;
      }
      if (a1[1]) {
        uint64_t v8 = (unsigned char *)a1[1];
      }
      else {
        uint64_t v8 = 0;
      }
LABEL_31:
      swift::TargetTypeContextDescriptor<swift::InProcess>::getForeignMetadataInitialization(v8);
      return 0;
    }
    uint64_t v5 = (_DWORD *)a1[1];
    if (v5) {
      goto LABEL_15;
    }
  }
  uint64_t v6 = 0;
LABEL_17:
  if ((*v6 & 0x80) != 0)
  {
    int v9 = *v6 & 0x1F;
    if ((v9 - 17) >= 2)
    {
      if (v9 != 16) {
        goto LABEL_39;
      }
      if (v6) {
        uint64_t v10 = v6;
      }
      else {
        uint64_t v10 = 0;
      }
      if ((*((unsigned char *)v10 + 3) & 0x20) != 0)
      {
        uint64_t v11 = (int)v10[6];
        if (v11) {
          int v12 = (void *)((char *)v10 + v11 + 24);
        }
        else {
          int v12 = 0;
        }
        if (!*v12) {
          computeMetadataBoundsFromSuperclass(v10, (uint64_t)v12);
        }
      }
    }
    getCache(v6);
  }
  else
  {
    int v7 = HIWORD(*v6) & 3;
    if (!v7) {
      return 0;
    }
    if (v7 != 1)
    {
      if (v7 == 2)
      {
        uint64_t v8 = v6;
        goto LABEL_31;
      }
LABEL_39:
      abort();
    }
  }
  return 1;
}

unint64_t swift::TargetTypeContextDescriptor<swift::InProcess>::getForeignMetadataInitialization(unsigned char *a1)
{
  int v1 = *(_DWORD *)a1 & 0x1F;
  switch(v1)
  {
    case 18:
      if (!a1) {
        a1 = 0;
      }
      return swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
    case 17:
      if (!a1) {
        a1 = 0;
      }
      return swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
    case 16:
      if (a1) {
        uint64_t v2 = a1;
      }
      else {
        uint64_t v2 = 0;
      }
      return swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v2)
           + 4 * (((unint64_t)*(unsigned int *)v2 >> 29) & 1);
    default:
      abort();
  }
}

void supportsLazyObjcClassNames(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(unsigned char *a1)
{
  *a1 = 1;
}

void *installLazyClassNameHook(void)::$_0::__invoke(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return copyGenericClassObjCName(a1);
  }
  else {
    return (void *)installLazyClassNameHook(void)::oldHook();
  }
}

void *copyGenericClassObjCName(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  long long v17 = xmmword_181636930;
  uint64_t v18 = 0;
  char v19 = 0;
  __int16 v54 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  char v23 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  int v52 = 0;
  v16[0] = &unk_1ECA06298;
  v16[1] = &v55;
  v16[2] = &v56;
  uint64_t v2 = _swift_buildDemanglingForMetadata(v1, (swift::Demangle::__runtime::NodeFactory *)v16);
  if (!v2)
  {
    int v13 = 0;
    asprintf(&v13, "$SwiftEmergencyPlaceholderClassName%016lx", v1);
    int v7 = v13;
    goto LABEL_15;
  }
  uint64_t v3 = v2;
  Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v16, 236);
  swift::Demangle::__runtime::Node::addChild(Node, v3, (swift::Demangle::__runtime::NodeFactory *)v16);
  uint64_t v5 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v16, 99);
  swift::Demangle::__runtime::Node::addChild(v5, Node, (swift::Demangle::__runtime::NodeFactory *)v16);
  swift::Demangle::__runtime::mangleNodeOld(v5, (swift::Demangle::__runtime::Node *)v16, v6);
  if (v13)
  {
    uint64_t v56 = 0;
    asprintf(&v56, "$SwiftEmergencyPlaceholderClassName%016lx", v1);
    int v7 = v56;
    goto LABEL_15;
  }
  if (v15 <= 5)
  {
    size_t v8 = v15 + 1;
LABEL_14:
    int v7 = swift_slowAlloc(v8, 0);
    memcpy(v7, v14, v15);
    *((unsigned char *)v7 + v15) = 0;
    goto LABEL_15;
  }
  unsigned int v9 = 1599370311;
  unsigned int v10 = bswap32(*(_DWORD *)v14);
  if (v10 == 1599370311 && (v10 = bswap32(v14[2]) >> 16, unsigned int v9 = 17267, v10 == 17267))
  {
    int v11 = 0;
  }
  else if (v10 < v9)
  {
    int v11 = -1;
  }
  else
  {
    int v11 = 1;
  }
  size_t v8 = v15 + 1;
  if (v11) {
    goto LABEL_14;
  }
  int v7 = swift_slowAlloc(v15 + 2, 0);
  memcpy(v7, v14, v15);
  *((unsigned char *)v7 + v15) = 36;
  *((unsigned char *)v7 + v8) = 0;
LABEL_15:
  v16[0] = &unk_1ECA07790;
  if (v54 == v53)
  {
    (*(void (**)(void *))(v53[0] + 32))(v53);
  }
  else if (v54)
  {
    (*(void (**)(void))(*v54 + 40))();
  }
  v16[0] = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v17);
  if (v18) {
    *(unsigned char *)(v18 + 48) = 0;
  }
  return v7;
}

swift *initClassFieldOffsetVector(swift *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = result;
  size_t v8 = (void *)((char *)result + 8);
  uint64_t v9 = *((void *)result + 4) & 0x7FFFFFFFF8;
  if (!*((void *)result + 1)
    || (unsigned int v10 = (swift *)*((void *)result + 1), result = (swift *)swift::getRootSuperclass(result), result == v10))
  {
    unsigned int v12 = 16;
    unint64_t v13 = 7;
  }
  else
  {
    uint64_t v11 = *v8;
    if ((*(unsigned char *)(*v8 + 32) & 2) != 0)
    {
      unsigned int v12 = *(_DWORD *)(v11 + 48);
      unint64_t v13 = *(unsigned __int16 *)(v11 + 52);
    }
    else
    {
      unsigned int v12 = *(_DWORD *)(v9 + 4);
      unint64_t v13 = 15;
    }
  }
  unsigned int v14 = *(_DWORD *)(v9 + 4);
  if (v12 > v14)
  {
    *(_DWORD *)(v9 + 4) = v12;
    unsigned int v14 = v12;
  }
  unint64_t v15 = v14;
  if (a2)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v19 = *(void *)(a3 + 8 * v16);
      if (*(void *)(a4 + 8 * v16) || *(void *)v19)
      {
        unint64_t v17 = *(unsigned __int8 *)(v19 + 16);
        unint64_t v18 = (v15 + v17) & ~v17;
        *(void *)(a4 + 8 * v16) = v18;
        unint64_t v15 = v18 + *(void *)v19;
        if (v13 <= v17) {
          unint64_t v13 = v17;
        }
      }
      ++v16;
    }
    while (a2 != v16);
  }
  *((_DWORD *)v7 + 12) = v15;
  *((_WORD *)v7 + 26) = v13;
  if (v15 != *(_DWORD *)(v9 + 8)) {
    *(_DWORD *)(v9 + 8) = v15;
  }
  return result;
}

uint64_t swift::TargetClassDescriptor<swift::InProcess>::getMethodOverrideDescriptors(unsigned int *a1)
{
  if ((*((unsigned char *)a1 + 3) & 0x40) == 0) {
    return 0;
  }
  if (a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v5);
  unint64_t v7 = *v5;
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v10 = v5;
    if (!v5) {
      uint64_t v5 = 0;
    }
    uint64_t v8 = *(unsigned int *)(swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v5)
                         + 4 * (((unint64_t)*v5 >> 29) & 1)
                         + 4 * ((*v5 & 0x30000) == 0x20000)
                         + 12 * ((*v5 & 0x30000) == 0x10000)
                         + 4);
    unsigned int v9 = *v10;
  }
  else
  {
    uint64_t v8 = 0;
    unsigned int v9 = *v5;
  }
  uint64_t v1 = TrailingObjectsImpl
     + 4 * ((v7 >> 29) & 1)
     + 4 * ((v7 & 0x30000) == 0x20000)
     + 12 * ((v7 & 0x30000) == 0x10000)
     + ((v7 >> 28) & 8)
     + 8 * v8
     + 4 * ((v9 >> 30) & 1);
  if ((*((unsigned char *)a1 + 3) & 0x40) != 0)
  {
    uint64_t v11 = a1 ? a1 : 0;
    swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v11);
    if ((*v11 & 0x80000000) != 0)
    {
      if (!v11) {
        uint64_t v11 = 0;
      }
      swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v11);
    }
  }
  return v1;
}

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>,true,32ul,8ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer(atomic_ullong **a1, atomic_ullong **a2, uint64_t a3)
{
  if (*(void *)(a3 - 8)) {
    uint64_t v3 = *(void *)(a3 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  return (char *)v4 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>::destroy(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8);
  if (v1)
  {
    if ((*(unsigned char *)(v1 + 82) & 2) == 0) {
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  else if ((MEMORY[0x52] & 2) == 0)
  {
    return MEMORY[8]();
  }
  return swift_release(*a1);
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>::initializeWithCopy(void *a1, uint64_t a2)
{
  a1[3] = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
    if ((*(unsigned char *)(v3 + 82) & 2) != 0) {
      goto LABEL_7;
    }
  }
  else
  {
    if ((MEMORY[0x52] & 2) != 0)
    {
LABEL_7:
      uint64_t v5 = *(atomic_ullong **)a2;
      *a1 = *(void *)a2;
      swift_retain(v5);
      return a1;
    }
    uint64_t v4 = 0;
  }
  (*(void (**)(void *))(v4 + 16))(a1);
  return a1;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>::initializeWithTake(__n128 *a1, __n128 *a2)
{
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>,true,32ul,8ul,true>::getEnumTagSinglePayload(uint64_t a1, int a2)
{
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (HIDWORD(v2)) {
    return 0;
  }
  else {
    return (v2 + 1);
  }
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<0u>>,true,32ul,8ul,true>::storeEnumTagSinglePayload(uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)__n128 result = a2 ^ 0x80000000;
      *(void *)(result + 4) = 0;
      *(void *)(result + 20) = 0;
      *(void *)(result + 12) = 0;
      *(_DWORD *)(result + 28) = 0;
      return result;
    }
    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)(result + 24) = (a2 - 1);
    return result;
  }
  if (a2 < 0)
  {
    *(_DWORD *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 4) = 0;
    *(void *)(result + 20) = 0;
    *(void *)(result + 12) = 0;
    *(_DWORD *)(result + 28) = 0;
    *(unsigned char *)(result + 32) = 1;
    return result;
  }
  *(unsigned char *)(result + 32) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

uint64_t *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithTake<swift::metadataimpl::OpaqueExistentialBox<0u>::Container>(uint64_t *a1, uint64_t *a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = a2[3];
    uint64_t v5 = a1[3];
    if (v4 != v5)
    {
      unint64_t v7 = (uint64_t *)(v5 - 8);
      uint64_t v6 = *(void *)(v5 - 8);
      if (v6) {
        uint64_t v8 = *(void *)(v5 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      unsigned int v12 = (uint64_t *)(v4 - 8);
      uint64_t v11 = *(void *)(v4 - 8);
      if (v11)
      {
        uint64_t v13 = *(void *)(v4 - 8);
        if ((*(unsigned char *)(v8 + 82) & 2) == 0) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v13 = 0;
        if ((*(unsigned char *)(v8 + 82) & 2) == 0)
        {
LABEL_11:
          (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v21, a1, v5);
          a1[3] = a2[3];
          if ((*(unsigned char *)(v13 + 82) & 2) != 0)
          {
            *a1 = *a2;
            uint64_t v17 = *v7;
            if (!*v7)
            {
LABEL_27:
              uint64_t v18 = 0;
              goto LABEL_28;
            }
          }
          else
          {
            if (*v12) {
              uint64_t v14 = *v12;
            }
            else {
              uint64_t v14 = 0;
            }
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 32))(a1, a2, v4);
            uint64_t v17 = *v7;
            if (!*v7) {
              goto LABEL_27;
            }
          }
          uint64_t v18 = v17;
LABEL_28:
          (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v21, v5);
          return a1;
        }
      }
      uint64_t v15 = *a1;
      a1[3] = v4;
      if ((*(unsigned char *)(v13 + 82) & 2) != 0)
      {
        *a1 = *a2;
      }
      else
      {
        if (v11) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = 0;
        }
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 32))(a1, a2, v4);
      }
      uint64_t v19 = v15;
LABEL_32:
      swift_release(v19);
      return a1;
    }
    uint64_t v9 = *(void *)(v4 - 8);
    if (v9)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v9 + 82) & 2) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      if ((MEMORY[0x52] & 2) != 0)
      {
LABEL_24:
        uint64_t v19 = *a1;
        *a1 = *a2;
        goto LABEL_32;
      }
      uint64_t v10 = 0;
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 40))(a1, a2, v4);
  }
  return a1;
}

unsigned int *swift::TargetExtendedExistentialTypeShape<swift::InProcess>::getGeneralizationSignature@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *result;
  if ((v2 & 0x100) == 0)
  {
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 24) = 0;
    return result;
  }
  uint64_t v3 = result + 4;
  if ((v2 & 0x1000) != 0)
  {
    uint64_t v4 = (char *)&swift::ImplicitGenericParamDescriptors;
    if ((v2 & 0x800) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = (char *)((((unint64_t)&v3[(v2 >> 8) & 1] + 3) & 0xFFFFFFFFFFFFFFFCLL)
                + 4 * ((v2 >> 9) & 1)
                + 4 * ((v2 >> 10) & 1));
    if ((v2 & 0x800) == 0)
    {
      v4 += *((unsigned __int16 *)result + 4);
LABEL_7:
      uint64_t v5 = *((unsigned __int16 *)result + 4);
      int v6 = 1;
      goto LABEL_9;
    }
  }
  int v6 = 0;
  uint64_t v5 = 0;
LABEL_9:
  int v7 = *result & 0x1100;
  if (v7 == 256) {
    uint64_t v8 = *(unsigned __int16 *)v3;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (((unint64_t)&v3[(v2 >> 8) & 1] + 3) & 0xFFFFFFFFFFFFFFFCLL)
     + 4 * ((v2 >> 9) & 1)
     + 4 * ((v2 >> 10) & 1);
  unint64_t v10 = ((v9 + v8 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * *((unsigned __int16 *)result + 5);
  if ((v2 & 0x2000) != 0)
  {
    if (v6)
    {
      uint64_t v13 = *((unsigned __int16 *)result + 4);
      if (v7 != 256)
      {
LABEL_16:
        uint64_t v14 = 0;
LABEL_19:
        unint64_t v15 = (v9 + v14 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        unsigned int v16 = *((unsigned __int16 *)result + 9) + *((unsigned __int16 *)result + 5);
        if (v6) {
          uint64_t v17 = *((unsigned __int16 *)result + 4);
        }
        else {
          uint64_t v17 = 0;
        }
        int v11 = *(_DWORD *)(v15 + 12 * v16);
        if (v7 == 256) {
          uint64_t v18 = *(unsigned __int16 *)v3;
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v12 = ((v9 + v18 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v16 + 4 * ((v2 >> 13) & 1);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v13 = 0;
      if (v7 != 256) {
        goto LABEL_16;
      }
    }
    uint64_t v14 = *(unsigned __int16 *)v3;
    goto LABEL_19;
  }
  int v11 = 0;
  unint64_t v12 = 0;
LABEL_26:
  *(void *)a2 = *v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v12;
  return result;
}

char *swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getProtocol(int *a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    unint64_t v2 = (char *)a1 + (v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v1)
    {
      if (*(void *)v2) {
        return *(char **)v2;
      }
    }
    else if (v2)
    {
      return (char *)a1 + (v1 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  return 0;
}

uint64_t _getForeignWitnessTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  v60[0] = a2;
  v60[1] = a3;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1E8ECF9B0);
  unint64_t v6 = qword_1E8ECF9A8;
  uint64_t v56 = qword_1E8ECF9A8 & 3;
  BOOL v7 = v56 == 0;
  if ((qword_1E8ECF9A8 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v7 = 1;
  }
  BOOL v57 = v7;
  unint64_t v58 = qword_1E8ECF9A8 & 0xFFFFFFFFFFFFFFFCLL;
  if (v7) {
    int v8 = 4;
  }
  else {
    int v8 = *(unsigned __int8 *)(qword_1E8ECF9A8 & 0xFFFFFFFFFFFFFFFCLL);
  }
  unint64_t v9 = dword_1E8ECF99C;
  unint64_t v10 = (_DWORD *)qword_1E8ECF9A0;
  uint64_t v11 = qword_1E8ECF9A0 + 8;
  if (qword_1E8ECF9A0) {
    uint64_t v12 = qword_1E8ECF9A0 + 8;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v13)
  {
    uint64_t v15 = v13[2];
    __dmb(0xBu);
    if (!ForeignWitnessTables)
    {
      unsigned int v16 = (void **)qword_1E8ECF9B8;
      if (qword_1E8ECF9B8)
      {
        do
        {
          uint64_t v17 = (void **)*v16;
          free(v16[1]);
          free(v16);
          unsigned int v16 = v17;
        }
        while (v17);
      }
LABEL_83:
      qword_1E8ECF9B8 = 0;
      goto LABEL_84;
    }
    goto LABEL_84;
  }
  uint64_t v59 = v12;
  __int16 v54 = v10;
  unint64_t v55 = v9;
  __src = (void *)v11;
  uint64_t v53 = (v9 + 1);
  if ((1 << v8) / (unint64_t)((1 << v8) - v53) < 4)
  {
    unint64_t v24 = v6;
    long long v26 = v10;
    unint64_t v25 = v55;
    uint64_t v15 = a1;
    if (v10) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v51 = v4;
    char v18 = v8;
    unsigned int v19 = (v8 + 1);
    if (v19 >= 0x11) {
      unsigned int v20 = 4;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v19 < 9) {
      size_t v21 = 1;
    }
    else {
      size_t v21 = v20;
    }
    unint64_t v22 = (unint64_t)malloc_type_calloc(2 << v8, v21, 0x4269077AuLL);
    if (!v22) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    uint64_t v23 = v12;
    uint64_t v50 = v3;
    if (v21 != 1)
    {
      if (v21 == 4) {
        size_t v21 = 3;
      }
      else {
        size_t v21 = 2;
      }
    }
    unint64_t v24 = v21 | v22;
    *(unsigned char *)unint64_t v22 = v8 + 1;
    if (v8)
    {
      uint64_t v27 = ~(-2 << v8);
      if (v56) {
        unint64_t v28 = v58;
      }
      else {
        unint64_t v28 = 0;
      }
      int v29 = v24 & 3;
      if ((v24 & 3) != 0) {
        unint64_t v30 = v22 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else {
        unint64_t v30 = 0;
      }
      uint64_t v31 = 1;
      while (2)
      {
        switch(v6 & 3)
        {
          case 0uLL:
            uint64_t v32 = (v6 >> (4 * v31)) & 0xF;
            if (!v32) {
              goto LABEL_37;
            }
            goto LABEL_46;
          case 1uLL:
            LODWORD(v32) = *(unsigned __int8 *)(v28 + v31);
            if (*(unsigned char *)(v28 + v31)) {
              goto LABEL_46;
            }
            goto LABEL_37;
          case 2uLL:
            LODWORD(v32) = *(unsigned __int16 *)(v28 + 2 * v31);
            if (!*(_WORD *)(v28 + 2 * v31)) {
              goto LABEL_37;
            }
            goto LABEL_46;
          case 3uLL:
            LODWORD(v32) = *(_DWORD *)(v28 + 4 * v31);
            if (!v32) {
              goto LABEL_37;
            }
LABEL_46:
            long long v61 = *(_OWORD *)(v23 + 24 * (v32 - 1));
            {
              unint64_t v35 = i & v27;
              if ((i & v27) != 0)
              {
                switch(v24 & 3)
                {
                  case 1uLL:
                    LODWORD(v34) = *(unsigned __int8 *)(v30 + v35);
                    break;
                  case 2uLL:
                    LODWORD(v34) = *(unsigned __int16 *)(v30 + 2 * v35);
                    break;
                  case 3uLL:
                    LODWORD(v34) = *(_DWORD *)(v30 + 4 * v35);
                    break;
                  default:
                    uint64_t v34 = (v24 >> (4 * v35)) & 0xF;
                    break;
                }
                if (!v34) {
                  break;
                }
              }
            }
            if (v29 == 3)
            {
              *(_DWORD *)(v30 + 4 * v35) = v32;
              uint64_t v23 = v59;
            }
            else
            {
              uint64_t v23 = v59;
              if (v29 == 2) {
                *(_WORD *)(v30 + 2 * v35) = v32;
              }
              else {
                *(unsigned char *)(v30 + v35) = v32;
              }
            }
LABEL_37:
            if (!((unint64_t)++v31 >> v18)) {
              continue;
            }
            goto LABEL_59;
          default:
            JUMPOUT(0);
        }
      }
    }
LABEL_59:
    atomic_store(v24, (unint64_t *)&qword_1E8ECF9A8);
    if (!v57)
    {
      long long v36 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
      uint64_t v23 = v59;
      *long long v36 = qword_1E8ECF9B8;
      v36[1] = v58;
      qword_1E8ECF9B8 = (uint64_t)v36;
    }
    unint64_t v25 = v55;
    uint64_t v3 = v50;
    uint64_t v15 = a1;
    uint64_t v4 = v51;
    long long v26 = v54;
    if (v54)
    {
LABEL_62:
      unint64_t v37 = (unint64_t)v26;
      if (v25 < *v26) {
        goto LABEL_69;
      }
    }
  }
  unsigned int v38 = v14;
  unint64_t v39 = v25 + (v25 >> 2);
  if (v39 <= v25 + 1) {
    unint64_t v39 = v25 + 1;
  }
  size_t v40 = malloc_good_size(24 * v39 + 8);
  long long v41 = malloc_type_malloc(v40, 0x1000D770uLL);
  if (!v41) {
    swift::hashable_support::findHashableBaseTypeOfHashableType();
  }
  unint64_t v37 = (unint64_t)v41;
  *long long v41 = (v40 - 8) / 0x18;
  if (v26)
  {
    memcpy(v41 + 2, __src, 24 * v25);
    long long v42 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
    *long long v42 = qword_1E8ECF9B8;
    v42[1] = v26;
    qword_1E8ECF9B8 = (uint64_t)v42;
  }
  atomic_store(v37, &qword_1E8ECF9A0);
  unsigned int v14 = v38;
LABEL_69:
  long long v43 = (void *)(v37 + 24 * v25);
  v43[1] = v4;
  v43[2] = v3;
  void v43[3] = v15;
  atomic_store(v53, (unsigned int *)&dword_1E8ECF99C);
  switch((int)v3)
  {
    case 1:
      unint64_t v44 = v24 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v24 & 3) == 0) {
        unint64_t v44 = 0;
      }
      atomic_store(v53, (unsigned __int8 *)(v44 + v14));
      break;
    case 2:
      unint64_t v45 = v24 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v24 & 3) == 0) {
        unint64_t v45 = 0;
      }
      atomic_store(v53, (unsigned __int16 *)(v45 + 2 * v14));
      break;
    case 3:
      unint64_t v46 = v24 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v24 & 3) == 0) {
        unint64_t v46 = 0;
      }
      atomic_store(v53, (unsigned int *)(v46 + 4 * v14));
      break;
    default:
      atomic_store((v53 << (4 * v14)) | v24, (unint64_t *)&qword_1E8ECF9A8);
      break;
  }
  __dmb(0xBu);
  if (!ForeignWitnessTables)
  {
    long long v47 = (void **)qword_1E8ECF9B8;
    if (qword_1E8ECF9B8)
    {
      do
      {
        long long v48 = (void **)*v47;
        free(v47[1]);
        free(v47);
        long long v47 = v48;
      }
      while (v48);
    }
    goto LABEL_83;
  }
LABEL_84:
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E8ECF9B0);
  return v15;
}

uint64_t *swift::ConcurrentReadableHashMap<anonymous namespace'::ForeignWitnessTableCacheEntry,swift::LazyMutex>::find<anonymous namespace'::ForeignWitnessTableCacheEntry::Key>(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  unint64_t v21 = a2;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  uint64_t v11 = ~(-1 << v10);
  uint64_t v12 = a2 & 3;
  if ((a2 & 3) != 0) {
    unint64_t v13 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else {
    unint64_t v13 = 0;
  }
  while (2)
  {
    if ((v8 & v11) <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v8 & v11;
    }
    switch(v12)
    {
      case 1:
        LODWORD(v15) = v13 + v14;
        LOBYTE(v15) = atomic_load_explicit((atomic_uchar *volatile)(v13 + v14), memory_order_acquire);
        if (v15) {
          goto LABEL_19;
        }
        return 0;
      case 2:
        LODWORD(v15) = v13 + 2 * v14;
        LOWORD(v15) = atomic_load_explicit((atomic_ushort *volatile)(v13 + 2 * v14), memory_order_acquire);
        if (!v15) {
          return 0;
        }
        goto LABEL_19;
      case 3:
        LODWORD(v15) = atomic_load_explicit((atomic_uint *volatile)(v13 + 4 * v14), memory_order_acquire);
        if (v15) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v15 = (v21 >> (4 * v14)) & 0xF;
        if (v15)
        {
LABEL_19:
          unint64_t v16 = (v15 - 1);
          if (v16 < a3)
          {
            uint64_t v17 = (uint64_t *)(a4 + 24 * v16);
            if (v17[1] == a1[1])
            {
              swift::ParsedTypeIdentity::parse(*a1, (uint64_t)v22);
              unsigned int v19 = __s2;
              size_t v18 = v24;
              swift::ParsedTypeIdentity::parse(*v17, (uint64_t)v22);
              if (v18 == v24 && (!v18 || !memcmp(v19, __s2, v18))) {
                return v17;
              }
            }
          }
          unint64_t v8 = v14 + 1;
          continue;
        }
        return 0;
    }
  }
}

unint64_t anonymous namespace'::hash_value(uint64_t *a1)
{
  swift::ParsedTypeIdentity::parse(*a1, (uint64_t)&v10);
  uint64_t v3 = *((void *)&v11[0] + 1);
  unint64_t v2 = *(void **)&v11[0];
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  long long v10 = 0u;
  {
    uint64_t v8 = v3;
    unint64_t v9 = v2;
    uint64_t v3 = v8;
    unint64_t v2 = v9;
    if (v6)
    {
      unint64_t v7 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v7;
      uint64_t v3 = v8;
      unint64_t v2 = v9;
    }
  }
  uint64_t v4 = a1[1];
  uint64_t v14 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&long long v10 = v4;
  *((void *)&v10 + 1) = __swift::__runtime::llvm::hash_value(v2, v3);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine((__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)&v10, 0, (char *)v11, (char *)v12);
}

unint64_t *__swift::__runtime::llvm::hashing::detail::hash_state::mix(unint64_t *this, const char *a2)
{
  unint64_t v2 = this[1];
  unint64_t v4 = this[2];
  unint64_t v3 = this[3];
  unint64_t v5 = 0xB492B66FBE98F273 * __ROR8__(v2 + *this + v3 + *((void *)a2 + 1), 37);
  *this = v5;
  unint64_t v6 = this[4];
  unint64_t v7 = this[5];
  uint64_t v8 = __ROR8__(v6 + v2 + *((void *)a2 + 6), 42);
  unint64_t v9 = this[6];
  unint64_t v10 = v9 ^ v5;
  *this = v10;
  this[1] = 0xB492B66FBE98F273 * v8;
  unint64_t v11 = 0xB492B66FBE98F273 * v8 + v3 + *((void *)a2 + 5);
  unint64_t v12 = 0xB492B66FBE98F273 * __ROR8__(v7 + v4, 33);
  this[1] = v11;
  this[2] = v12;
  this[3] = 0xB492B66FBE98F273 * v6;
  this[4] = v7 + v10;
  uint64_t v13 = *(void *)a2 - 0x4B6D499041670D8DLL * v6;
  this[3] = v13;
  uint64_t v14 = *((void *)a2 + 3);
  unint64_t v15 = __ROR8__(v13 + v14 + v7 + v10, 21);
  this[4] = v15;
  uint64_t v16 = __ROR8__(*((void *)a2 + 1) + *((void *)a2 + 2) + v13, 44);
  this[3] = *((void *)a2 + 1) + *((void *)a2 + 2) + v13 + v14;
  this[4] = v15 + v13 + v16;
  this[5] = v12 + v9;
  unint64_t v17 = *((void *)a2 + 2) + v11;
  this[6] = v17;
  unint64_t v18 = *((void *)a2 + 4) + v12 + v9;
  this[5] = v18;
  uint64_t v19 = *((void *)a2 + 7);
  unint64_t v20 = __ROR8__(v18 + v19 + v17, 21);
  this[6] = v20;
  unint64_t v21 = v20 + v18 + __ROR8__(*((void *)a2 + 5) + *((void *)a2 + 6) + v18, 44);
  this[5] = *((void *)a2 + 5) + *((void *)a2 + 6) + v18 + v19;
  this[6] = v21;
  this[2] = v10;
  *this = v12;
  return this;
}

void *__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(uint64_t a1, uint64_t *a2, void *__dst, unint64_t a4, uint64_t a5)
{
  uint64_t __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)(a1 + 64), (const char *)a1);
      uint64_t v9 = *a2 + 64;
    }
    else
    {
      unint64_t v10 = *(void *)(a1 + 120);
      uint64_t v11 = __ROR8__(v10 ^ 0xB492B66FBE98F273, 49);
      unint64_t v12 = v10 ^ (v10 >> 47);
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = v13 + v10 + v11;
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = v17 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v15 + v10 - 0x4B6D499041670D8DLL * v10, 42);
      unint64_t v19 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v10 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v10 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      unint64_t v20 = 0x9DDFEA08EB382D69
          * (v10 ^ (((0x9DDFEA08EB382D69 * (v12 ^ (0xB492B66FBE98F273 * v10))) ^ v10) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v12 ^ (0xB492B66FBE98F273 * v10))));
      unint64_t v21 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
      unint64_t v22 = 0xB492B66FBE98F273 * __ROR8__(v12 - 0x622015F714C7D297 * (v19 ^ (v19 >> 47)), 33);
      uint64_t v23 = *(void *)a1 - 0x6D8ED9027DD26057 * v10;
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      uint64_t v26 = v23 + v13 + v25;
      unint64_t v27 = v21 ^ (0xB492B66FBE98F273 * __ROR8__(v14, 37));
      unint64_t v28 = v22 + *(void *)(a1 + 32) + v21;
      *(void *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = v18;
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + 88) = v26 + v24;
      *(void *)(a1 + 96) = __ROR8__(v26, 44) + v23 + __ROR8__(v23 + v12 + v24 + v27, 21);
      *(void *)(a1 + 104) = v17 + v15 + v28 + v16;
      *(void *)(a1 + 112) = __ROR8__(v18 + v25 + v16 + v28, 21) + v28 + __ROR8__(v17 + v15 + v28, 44);
      uint64_t v9 = 64;
    }
    *a2 = v9;
    if (a1 + 8 - v8 <= a4)
    {
      memcpy((void *)a1, (char *)&__src + v8, 8 - v8);
      a1 += 8 - v8;
    }
  }
  return (void *)a1;
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine(__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *this, uint64_t a2, char *__src, char *a4)
{
  if (a2)
  {
    if (this == (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)__src || __src == a4) {
      goto LABEL_47;
    }
    if ((char *)this + 1 == __src)
    {
      char v20 = *(unsigned char *)this;
      uint64_t v21 = a4 - __src;
      memmove(this, __src, a4 - __src);
      *((unsigned char *)this + v21) = v20;
LABEL_47:
      __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)this + 8, (const char *)this);
      unint64_t v49 = 0x9DDFEA08EB382D69
          * (*((void *)this + 13) ^ ((0x9DDFEA08EB382D69 * (*((void *)this + 13) ^ *((void *)this + 11))) >> 47) ^ (0x9DDFEA08EB382D69 * (*((void *)this + 13) ^ *((void *)this + 11))));
      uint64_t v50 = *((void *)this + 14);
      unint64_t v51 = *((void *)this + 8)
          - 0x4B6D499041670D8DLL * ((__src - (char *)this + a2) ^ ((unint64_t)(__src - (char *)this + a2) >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ *((void *)this + 12))) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                      * (v50 ^ *((void *)this + 12))))) ^ ((0x9DDFEA08EB382D69 * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ *((void *)this + 12))) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ *((void *)this + 12))))) >> 47));
      unint64_t v52 = 0x9DDFEA08EB382D69
          * (v51 ^ (*((void *)this + 10)
                  - 0x4B6D499041670D8DLL * (*((void *)this + 9) ^ (*((void *)this + 9) >> 47))
                  - 0x622015F714C7D297 * (v49 ^ (v49 >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v51 ^ (v52 >> 47) ^ v52)) ^ ((0x9DDFEA08EB382D69 * (v51 ^ (v52 >> 47) ^ v52)) >> 47));
    }
    if (__src + 1 == a4)
    {
      char v22 = *(a4 - 1);
      if (a4 - 1 != (char *)this) {
        memmove((char *)this + 1, this, a4 - 1 - (char *)this);
      }
      *(unsigned char *)this = v22;
      goto LABEL_47;
    }
    uint64_t v7 = __src - (char *)this;
    uint64_t v8 = a4 - __src;
    if (__src - (char *)this != a4 - __src)
    {
      uint64_t v23 = __src - (char *)this;
      do
      {
        uint64_t v24 = v23;
        uint64_t v23 = v8;
        uint64_t v8 = v24 % v8;
      }
      while (v8);
      if (v23)
      {
        uint64_t v25 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v23);
        do
        {
          char v27 = *((unsigned char *)v25 - 1);
          uint64_t v25 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v25 - 1);
          char v26 = v27;
          unint64_t v28 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v25 + v7);
          int v29 = v25;
          do
          {
            unint64_t v30 = v29;
            int v29 = v28;
            *(unsigned char *)unint64_t v30 = *(unsigned char *)v28;
            uint64_t v31 = (char *)(a4 - (char *)v28);
            BOOL v32 = __OFSUB__(v7, v31);
            uint64_t v34 = v7 - (void)v31;
            char v33 = (v34 < 0) ^ v32;
            unint64_t v28 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v34);
            if (v33) {
              unint64_t v28 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)v29 + v7);
            }
          }
          while (v28 != v25);
          *(unsigned char *)int v29 = v26;
        }
        while (v25 != this);
      }
      goto LABEL_47;
    }
    uint64_t v9 = &a4[~(unint64_t)__src];
    unint64_t v10 = &__src[~(unint64_t)this];
    if (v9 >= v10) {
      uint64_t v11 = &__src[~(unint64_t)this];
    }
    else {
      uint64_t v11 = &a4[~(unint64_t)__src];
    }
    unint64_t v12 = (unint64_t)(v11 + 1);
    uint64_t v13 = __src;
    uint64_t v14 = this;
    if (v12 >= 8)
    {
      if (v9 >= v10) {
        uint64_t v9 = &__src[~(unint64_t)this];
      }
      uint64_t v15 = v9 + 1;
      if (&v15[(void)__src] <= (char *)this || (uint64_t v13 = __src, v14 = this, &v15[(void)this] <= __src))
      {
        if (v12 >= 0x20)
        {
          unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v35 = (long long *)((char *)this + 16);
          long long v36 = __src + 16;
          unint64_t v37 = v12 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v38 = *(v35 - 1);
            long long v39 = *v35;
            long long v40 = *(_OWORD *)v36;
            *(v35 - 1) = *((_OWORD *)v36 - 1);
            *unint64_t v35 = v40;
            *((_OWORD *)v36 - 1) = v38;
            *(_OWORD *)long long v36 = v39;
            v35 += 2;
            v36 += 32;
            v37 -= 32;
          }
          while (v37);
          if (v12 == v16) {
            goto LABEL_47;
          }
          if ((v12 & 0x18) == 0)
          {
            uint64_t v14 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + v16);
            uint64_t v13 = &__src[v16];
            goto LABEL_43;
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        uint64_t v13 = &__src[v12 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v14 = (__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this
                                                                                         + (v12 & 0xFFFFFFFFFFFFFFF8));
        long long v41 = (uint64_t *)((char *)this + v16);
        long long v42 = &__src[v16];
        unint64_t v43 = v16 - (v12 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v44 = *v41;
          *v41++ = *(void *)v42;
          *(void *)long long v42 = v44;
          v42 += 8;
          v43 += 8;
        }
        while (v43);
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_47;
        }
      }
    }
LABEL_43:
    unint64_t v45 = v13 + 1;
    unint64_t v46 = (char *)v14 + 1;
    do
    {
      char v47 = *(v46 - 1);
      *(v46 - 1) = *(v45 - 1);
      *(v45 - 1) = v47;
      if (v46 == __src) {
        break;
      }
      ++v46;
    }
    while (v45++ != a4);
    goto LABEL_47;
  }
  unint64_t v17 = __src - (char *)this;
  unint64_t v18 = *((void *)this + 15);

  return __swift::__runtime::llvm::hashing::detail::hash_short(this, v17, v18);
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_short(__swift::__runtime::llvm::hashing::detail *this, unint64_t a2, unint64_t a3)
{
  if (a2 - 4 <= 4)
  {
    unint64_t v3 = *(unsigned int *)((char *)this + a2 - 4) ^ a3;
    unint64_t v4 = 0x9DDFEA08EB382D69 * (v3 ^ (a2 + 8 * *(unsigned int *)this));
    unint64_t v5 = v3 ^ (v4 >> 47) ^ v4;
    return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v5) ^ ((0x9DDFEA08EB382D69 * v5) >> 47));
  }
  if (a2 - 9 <= 7)
  {
    uint64_t v7 = *(void *)((char *)this + a2 - 8);
    uint64_t v8 = __ROR8__(v7 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v8 ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                  * (*(void *)this ^ a3 ^ v8)))) ^ ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v8)))) >> 47))) ^ v7;
  }
  if (a2 - 17 <= 0xF)
  {
    uint64_t v9 = *((void *)this + 1);
    unint64_t v10 = 0x9AE16A3B2F90404FLL * *(void *)((char *)this + a2 - 8);
    uint64_t v11 = __ROR8__(0xB492B66FBE98F273 * *(void *)this - v9, 43)
        - 0x3C5A37A36834CED9 * *(void *)((char *)this + a2 - 16)
        + __ROR8__(v10 ^ a3, 30);
    unint64_t v12 = a3 + a2 + __ROR8__(v9 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * *(void *)this - v10;
    unint64_t v5 = v12 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v12));
    return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v5) ^ ((0x9DDFEA08EB382D69 * v5) >> 47));
  }
  if (a2 >= 0x21)
  {
    uint64_t v13 = (char *)this + a2;
    uint64_t v14 = *(void *)((char *)this + a2 - 16);
    uint64_t v15 = *(void *)((char *)this + a2 - 8);
    uint64_t v16 = *(void *)this - 0x3C5A37A36834CED9 * (v14 + a2);
    uint64_t v18 = *((void *)this + 2);
    uint64_t v17 = *((void *)this + 3);
    uint64_t v19 = __ROR8__(v16 + v17, 52);
    uint64_t v20 = v16 + *((void *)this + 1);
    uint64_t v21 = __ROR8__(v20, 7);
    uint64_t v22 = v20 + v18;
    uint64_t v23 = v21 + __ROR8__(*(void *)this - 0x3C5A37A36834CED9 * (v14 + a2), 37) + v19;
    uint64_t v24 = *(void *)((char *)this + a2 - 32) + v18;
    uint64_t v25 = __ROR8__(v24 + v15, 52);
    uint64_t v26 = v23 + __ROR8__(v22, 31);
    uint64_t v27 = __ROR8__(v24, 37);
    uint64_t v28 = *((void *)v13 - 3) + v24;
    uint64_t v29 = __ROR8__(v28, 7);
    uint64_t v30 = v28 + v14;
    uint64_t v31 = __ROR8__(v30, 31);
    unint64_t v32 = ((0xC3A5C85C97CB3127
          * ((0xC3A5C85C97CB3127 * (v30 + v15 + v26) - 0x651E95C4D06FBFB1 * (v22 + v17 + v27 + v25 + v29 + v31)) ^ ((0xC3A5C85C97CB3127 * (v30 + v15 + v26) - 0x651E95C4D06FBFB1 * (v22 + v17 + v27 + v25 + v29 + v31)) >> 47))) ^ a3)
        + v26;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }
  if (a2)
  {
    unint64_t v32 = (0x9AE16A3B2F90404FLL
         * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ a3;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }
  return a3 ^ 0x9AE16A3B2F90404FLL;
}

void *instantiateWitnessTable(unint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = (char **)((char *)a2 + (v7 & 0xFFFFFFFFFFFFFFFELL));
  if ((v7 & 1) == 0)
  {
    if (v8)
    {
      uint64_t v9 = (char *)a2 + (v7 & 0xFFFFFFFFFFFFFFFELL);
      unint64_t v10 = a2[3];
      if ((v10 & 0x20000) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      uint64_t v13 = 0;
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  if (!*v8)
  {
LABEL_10:
    uint64_t v9 = 0;
    unint64_t v10 = a2[3];
    if ((v10 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = a2[3];
  if ((v10 & 0x20000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v11 = (unsigned int *)(((unint64_t)&a2[3 * BYTE1(v10) + 4 + ((v10 >> 6) & 1)] + ((v10 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((v10 & 0x10000) != 0) {
    uint64_t v12 = *v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = &v11[2 * v12 + (WORD1(v10) & 1)];
LABEL_14:
  GenericArgs = swift::TargetMetadata<swift::InProcess>::getGenericArgs(a1);
  uint64_t v17 = *(unsigned __int16 *)v13;
  unint64_t v18 = (unint64_t)*((unsigned __int16 *)v13 + 1) >> 1;
  uint64_t v19 = (void *)(a4 + 8 * v18);
  *uint64_t v19 = a2;
  uint64_t v20 = a2[2];
  if (v20)
  {
    uint64_t v21 = (char *)a2 + v20 + 8;
    if (v21)
    {
      uint64_t v22 = v9;
      if (v9) {
        uint64_t v22 = v9;
      }
      uint64_t v23 = v22;
      if (v22 == (char *)-24)
      {
        uint64_t v24 = 0;
        if (v17 < 2) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v24 = v22 + 24;
        if (v17 < 2) {
          goto LABEL_30;
        }
      }
      uint64_t v25 = (int *)&v24[12 * *((unsigned int *)v23 + 3)];
      uint64_t v26 = v17 - 1;
      uint64_t v27 = (uint64_t *)(v21 + 8);
      uint64_t v28 = (void *)(a4 + 8 * v18 + 8);
      uint64_t v29 = v28;
      uint64_t v30 = v27;
      do
      {
        int v31 = *v25;
        v25 += 2;
        int v32 = v31 & 0xF;
        if ((v32 - 1) >= 6)
        {
          if ((v32 - 7) >= 2)
          {
            if (v32) {
LABEL_98:
            }
              abort();
            uint64_t v33 = *v30;
          }
          else
          {
            uint64_t v33 = *v30;
          }
        }
        else
        {
          uint64_t v33 = *v30;
        }
        *v28++ = v33;
        ++v30;
        ++v27;
        ++v29;
        --v26;
      }
      while (v26);
    }
  }
LABEL_30:
  unint64_t v79 = v18;
  uint64_t v80 = a4;
  BOOL v81 = v13;
  uint64_t v34 = a2 + 4;
  unint64_t v35 = a2[3];
  if (BYTE1(v35))
  {
    int v36 = 0;
    unsigned int v37 = 0;
    long long v38 = &v34[(v35 >> 6) & 1];
    long long v39 = &v38[3 * BYTE1(v35)];
    uint64_t v40 = 12 * BYTE1(v35);
    do
    {
      if ((*v38 & 0x80) != 0)
      {
        uint64_t WitnessTablePack = *(void *)(a3 + 8 * v37);
        if ((*v38 & 0x20) != 0) {
          uint64_t WitnessTablePack = swift_allocateWitnessTablePack(WitnessTablePack, GenericArgs[LOWORD(v39[2 * v36++ + 1])]);
        }
        v19[~v37++] = WitnessTablePack;
      }
      v38 += 3;
      v40 -= 12;
    }
    while (v40);
  }
  uint64_t v42 = *a2;
  if (v42)
  {
    unint64_t v43 = (char **)((char *)a2 + (v42 & 0xFFFFFFFFFFFFFFFELL));
    if (v42)
    {
      if (*v43)
      {
        uint64_t v44 = *v43;
        goto LABEL_44;
      }
    }
    else if (v43)
    {
      uint64_t v44 = (char *)a2 + (v42 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_44;
    }
  }
  uint64_t v44 = 0;
LABEL_44:
  unint64_t v45 = v44;
  if (v44) {
    unint64_t v45 = v44;
  }
  if (v45 == (char *)-24) {
    unint64_t v46 = 0;
  }
  else {
    unint64_t v46 = v45 + 24;
  }
  unsigned int v47 = *((_DWORD *)v45 + 3);
  unint64_t v48 = (unint64_t)&v46[12 * v47];
  uint64_t v49 = *((unsigned int *)v44 + 4);
  unsigned int v50 = a2[3];
  if ((v50 & 0x10000) != 0)
  {
    unint64_t v51 = (unsigned int *)(((unint64_t)&v34[3 * BYTE1(a2[3])
                                                 + 2 * HIBYTE(a2[3])
                                                 + (((unint64_t)a2[3] >> 6) & 1)]
                          + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v52 = *v51;
    if (v52)
    {
      uint64_t v53 = 8 * v52;
      __int16 v54 = &v51[HIWORD(v50) & 1];
      unint64_t v55 = (int *)(v54 + 1);
      do
      {
        uint64_t v56 = *(v55 - 1);
        if (v56)
        {
          BOOL v57 = (void *)((char *)v54 + (v56 & 0xFFFFFFFFFFFFFFFELL));
          if (v56)
          {
            if (!*v57) {
              goto LABEL_53;
            }
            BOOL v57 = (void *)*v57;
          }
          if (v57)
          {
            if ((unint64_t)v57 < v48 || (unint64_t)v57 >= v48 + 8 * v49) {
              swift::fatalError(0, "generic witness table at %p contains out-of-bounds requirement descriptor %p\n", v14, v15, v81, v57);
            }
            int v59 = (((unint64_t)v57 - v48) >> 3) + 1;
            int v60 = *(_DWORD *)v57;
            uint64_t v61 = *v55;
            uint64_t v62 = (uint64_t)v54 + v61 + 4;
            if (!v61) {
              uint64_t v62 = 0;
            }
            uint64_t v63 = &v19[v59];
            int v64 = v60 & 0xF;
            if ((v64 - 1) >= 6 && (v60 & 0xF) != 0 && v64 != 7 && v64 != 8) {
              goto LABEL_98;
            }
            *uint64_t v63 = v62;
          }
        }
LABEL_53:
        v54 += 2;
        v55 += 2;
        v53 -= 8;
      }
      while (v53);
    }
  }
  if (v49)
  {
    uint64_t v65 = 0;
    uint64_t v66 = (uint64_t)&v46[12 * v47 + 4];
    uint64_t v67 = v80 + 8 * v79 + 8;
    uint64_t v68 = 8 * v49;
    do
    {
      unint64_t v70 = (_DWORD *)(v48 + v65);
      uint64_t v71 = *(void *)(v67 + v65);
      if (v71)
      {
        int v72 = *(_DWORD *)(v48 + v65) & 0xF;
      }
      else
      {
        uint64_t v73 = (int)v70[1];
        if (v73) {
          uint64_t v71 = v66 + v65 + v73;
        }
        else {
          uint64_t v71 = 0;
        }
        int v72 = *(_DWORD *)(v48 + v65) & 0xF;
        if ((v72 - 1) >= 6 && (*(_DWORD *)(v48 + v65) & 0xF) != 0 && v72 != 7 && v72 != 8) {
          goto LABEL_98;
        }
        *(void *)(v67 + v65) = v71;
      }
      if (v72) {
        BOOL v74 = 1;
      }
      else {
        BOOL v74 = v71 == 0;
      }
      if (!v74)
      {
        if (v44) {
          unint64_t v75 = v44;
        }
        else {
          unint64_t v75 = 0;
        }
        unint64_t v76 = v75;
        if (v75 == (char *)-24) {
          unint64_t v69 = 0;
        }
        else {
          unint64_t v69 = v75 + 24;
        }
        swift_getAssociatedConformanceWitnessSlow((uint64_t)v19, (uint64_t)a1, (uint64_t)a1, (uint64_t)&v69[12 * *((unsigned int *)v76 + 3) - 8], v70);
      }
      v65 += 8;
    }
    while (v68 != v65);
  }
  uint64_t v77 = (int)v81[1];
  if (v77) {
    ((void (*)(void *, unint64_t *, uint64_t))((char *)v81 + v77 + 4))(v19, a1, a3);
  }
  return v19;
}

double swift::Lazy<swift::MetadataCache<anonymous namespace'::WitnessTableCacheEntry,(unsigned short)16>>::defaultInitCallback(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::GlobalWitnessTableCacheEntry>,swift::LazyMutex>::find<swift::TargetGenericWitnessTable<swift::InProcess> const*>(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = &unk_1EB1F3000;
  {
    uint64_t v22 = a1;
    uint64_t v20 = a4;
    unint64_t v18 = a3;
    unint64_t v21 = a2;
    unint64_t v19 = v4;
    unint64_t v5 = &unk_1EB1F3000;
    a3 = v18;
    unint64_t v4 = v19;
    a4 = v20;
    int v16 = v15;
    a2 = v21;
    a1 = v22;
    if (v16)
    {
      unint64_t v17 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unint64_t v5 = (void *)&unk_1EB1F3000;
      a3 = v18;
      unint64_t v4 = v19;
      a2 = v21;
      a1 = v22;
      a4 = v20;
    }
  }
  uint64_t v6 = (v5[38] + 8 * v4) ^ HIDWORD(v4);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
  uint64_t v8 = 0x1DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  uint64_t v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  if ((a2 & 3) == 0) {
    uint64_t v9 = 0;
  }
  while (2)
  {
    unint64_t v11 = v8 & ~(-1 << v10);
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v12) = v9 + v11;
        LOBYTE(v12) = atomic_load_explicit(&v9[v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v12) = v9 + 2 * v11;
        LOWORD(v12) = atomic_load_explicit((atomic_ushort *volatile)&v9[2 * v11], memory_order_acquire);
        if (!v12) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v12) = atomic_load_explicit((atomic_uint *volatile)&v9[4 * v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v12 = (a2 >> (4 * v11)) & 0xF;
        if (v12)
        {
LABEL_19:
          unint64_t v13 = (v12 - 1);
          if (v13 < a3 && **(void **)(a4 + 8 * v13) == *a1) {
            return a4 + 8 * v13;
          }
          uint64_t v8 = v11 + 1;
          continue;
        }
        return 0;
    }
  }
}

double swift::Lazy<swift::MetadataCache<anonymous namespace'::RelativeWitnessTableCacheEntry,(unsigned short)16>>::defaultInitCallback(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::GlobalRelativeWitnessTableCacheEntry>,swift::LazyMutex>::find<swift::TargetGenericWitnessTable<swift::InProcess> const*>(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = &unk_1EB1F3000;
  {
    uint64_t v22 = a1;
    uint64_t v20 = a4;
    unint64_t v18 = a3;
    unint64_t v21 = a2;
    unint64_t v19 = v4;
    unint64_t v5 = &unk_1EB1F3000;
    a3 = v18;
    unint64_t v4 = v19;
    a4 = v20;
    int v16 = v15;
    a2 = v21;
    a1 = v22;
    if (v16)
    {
      unint64_t v17 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unint64_t v5 = (void *)&unk_1EB1F3000;
      a3 = v18;
      unint64_t v4 = v19;
      a2 = v21;
      a1 = v22;
      a4 = v20;
    }
  }
  uint64_t v6 = (v5[38] + 8 * v4) ^ HIDWORD(v4);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
  uint64_t v8 = 0x1DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  uint64_t v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  if ((a2 & 3) == 0) {
    uint64_t v9 = 0;
  }
  while (2)
  {
    unint64_t v11 = v8 & ~(-1 << v10);
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v12) = v9 + v11;
        LOBYTE(v12) = atomic_load_explicit(&v9[v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v12) = v9 + 2 * v11;
        LOWORD(v12) = atomic_load_explicit((atomic_ushort *volatile)&v9[2 * v11], memory_order_acquire);
        if (!v12) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v12) = atomic_load_explicit((atomic_uint *volatile)&v9[4 * v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v12 = (a2 >> (4 * v11)) & 0xF;
        if (v12)
        {
LABEL_19:
          unint64_t v13 = (v12 - 1);
          if (v13 < a3 && **(void **)(a4 + 8 * v13) == *a1) {
            return a4 + 8 * v13;
          }
          uint64_t v8 = v11 + 1;
          continue;
        }
        return 0;
    }
  }
}

char *findAssociatedTypeName(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(int *)(a1 + 20);
  unint64_t v3 = (char *)(a1 + 20 + v2);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  size_t v8 = strlen((const char *)(a1 + 20 + v2));
  uint64_t v9 = a1;
  if (a1) {
    uint64_t v9 = a1;
  }
  uint64_t v10 = v9;
  if (v9 != -24)
  {
    uint64_t v11 = v9 + 24;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (!v12) {
      return 0;
    }
LABEL_11:
    unint64_t v13 = (_DWORD *)(v11 + 12 * *(unsigned int *)(v10 + 12));
    uint64_t v14 = 8 * v12;
    while (1)
    {
      if ((*v13 & 0xF) == 7)
      {
        if (v8)
        {
          int v15 = memchr(v3, 32, v8);
          unint64_t v16 = v15 - v3;
          if (!v15) {
            unint64_t v16 = -1;
          }
        }
        else
        {
          unint64_t v16 = -1;
        }
        if (v8 >= v16) {
          unint64_t v17 = v16;
        }
        else {
          unint64_t v17 = v8;
        }
        if (v13 == a2) {
          return v3;
        }
        BOOL v18 = v8 > v16;
        BOOL v19 = v8 > v16;
        if (v18) {
          v3 += v17 + 1;
        }
        else {
          v3 += v17;
        }
        size_t v8 = v8 - v17 - v19;
      }
      v13 += 2;
      v14 -= 8;
      if (!v14) {
        return 0;
      }
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(unsigned int *)(a1 + 16);
  if (v12) {
    goto LABEL_11;
  }
  return 0;
}

void std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06348;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06348;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata(*(swift::SubstGenericParametersFromMetadata **)(a1 + 8), *a2, *a3);
}

void std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06390;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06390;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessRelativeSlowImpl(swift::MetadataRequest,swift::TargetRelativeWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

void diagnoseMetadataDependencyCycle(uint64_t a1, uint64_t a2)
{
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
  *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = xmmword_1816369A0;
  strcpy(v26.__r_.__value_.__l.__data_, "runtime error: unresolvable type metadata dependency cycle detected\n  Request for ");
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 > 62)
  {
    if (v4 == 63)
    {
      unint64_t v5 = "layout of ";
      goto LABEL_11;
    }
    if (v4 == 255)
    {
      unint64_t v5 = "abstract metadata for ";
      goto LABEL_11;
    }
  }
  else
  {
    if (!v4)
    {
      unint64_t v5 = "transitive completion of ";
      goto LABEL_11;
    }
    if (v4 == 1)
    {
      unint64_t v5 = "completion of ";
LABEL_11:
      std::string::append(&v26, v5);
      swift::nameForMetadata((uint64_t *)&__p, *(Class *)a1);
      if (SHIBYTE(v20) >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (SHIBYTE(v20) >= 0) {
        std::string::size_type v7 = HIBYTE(v20);
      }
      else {
        std::string::size_type v7 = (std::string::size_type)v19;
      }
      std::string::append(&v26, p_p, v7);
      if (SHIBYTE(v20) < 0) {
        operator delete(__p);
      }
      if (a2 == 1)
      {
LABEL_43:
        std::string::append(&v26, "\nAborting!\n");
        if (_swift_shouldReportFatalErrorsToDebugger())
        {
          __p = (void *)2;
          BOOL v19 = "type-metadata-cycle";
          uint64_t v20 = "fetching metadata";
          uint64_t v21 = 1;
          Class v22 = *(Class *)a1;
          long long v25 = 0u;
          long long v24 = 0u;
          long long v23 = 0u;
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v16 = &v26;
          }
          else {
            unint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
          }
          _swift_reportToDebugger(1, v16, &__p);
        }
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v17 = &v26;
        }
        else {
          unint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        }
        swift::fatalError(0, "%s", v14, v15, v17);
      }
      uint64_t v8 = 16 * a2 - 16;
      uint64_t v9 = (uint64_t *)(a1 + 24);
      while (1)
      {
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0 && v26.__r_.__value_.__l.__size_ >> 17)
        {
          std::string::append(&v26, "\n  (cycle too long, limiting diagnostic text)");
          goto LABEL_43;
        }
        std::string::append(&v26, "\n  depends on ");
        uint64_t v13 = *v9;
        if (*v9 > 62)
        {
          if (v13 == 63)
          {
            uint64_t v10 = "layout of ";
            goto LABEL_22;
          }
          if (v13 == 255)
          {
            uint64_t v10 = "abstract metadata for ";
            goto LABEL_22;
          }
        }
        else
        {
          if (!v13)
          {
            uint64_t v10 = "transitive completion of ";
            goto LABEL_22;
          }
          if (v13 == 1)
          {
            uint64_t v10 = "completion of ";
            goto LABEL_22;
          }
        }
        uint64_t v10 = "<corrupted requirement> for ";
LABEL_22:
        std::string::append(&v26, v10);
        swift::nameForMetadata((uint64_t *)&__p, (Class)*(v9 - 1));
        if (SHIBYTE(v20) >= 0) {
          uint64_t v11 = (const std::string::value_type *)&__p;
        }
        else {
          uint64_t v11 = (const std::string::value_type *)__p;
        }
        if (SHIBYTE(v20) >= 0) {
          std::string::size_type v12 = HIBYTE(v20);
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v19;
        }
        std::string::append(&v26, v11, v12);
        if (SHIBYTE(v20) < 0) {
          operator delete(__p);
        }
        v9 += 2;
        v8 -= 16;
        if (!v8) {
          goto LABEL_43;
        }
      }
    }
  }
  unint64_t v5 = "<corrupted requirement> for ";
  goto LABEL_11;
}

void checkMetadataDependency(swift::MetadataDependency)::CheckDependencyResult::forForeignMetadata(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_1EB1F8910 != -1) {
  uint64_t v20 = a2;
  }
  atomic_fetch_add_explicit(&ForeignMetadata, 1u, memory_order_acquire);
  do
  {
    unint64_t explicit = atomic_load_explicit(&qword_1EB1F88E0, memory_order_acquire);
    unint64_t v7 = atomic_load_explicit(&qword_1EB1F88E8, memory_order_acquire);
    unint64_t v8 = atomic_load_explicit(&dword_1EB1F88DC, memory_order_acquire);
  }
  while (explicit != atomic_load_explicit(&qword_1EB1F88E0, memory_order_acquire));
  if (explicit) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || v8 == 0;
  if (v10
  {
    std::string::size_type v12 = 0;
  }
  else
  {
    std::string::size_type v12 = *v11;
  }
  atomic_fetch_add_explicit(&ForeignMetadata, 0xFFFFFFFF, memory_order_release);
  uint64_t v13 = *a1;
  unint64_t v14 = atomic_load_explicit(v12, memory_order_acquire) & 7;
  if (v13 > 62)
  {
    if (v13 == 255)
    {
      if (v14) {
        goto LABEL_32;
      }
      os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F8908);
      atomic_ullong v16 = *v12;
      uint64_t v17 = *v12 & 7;
      if ((*(_DWORD *)v12 & 7) != 0) {
        goto LABEL_30;
      }
    }
    else
    {
      if (v13 != 63) {
LABEL_42:
      }
        abort();
      if (v14 > 1) {
        goto LABEL_32;
      }
      os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F8908);
      atomic_ullong v16 = *v12;
      uint64_t v17 = *v12 & 7;
      if (v17 > 1) {
        goto LABEL_30;
      }
    }
LABEL_20:
    *(unsigned char *)a3 = v17;
    BOOL v18 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF0);
    if ((v16 & 8) != 0 && v18)
    {
      uint64_t v19 = *(void *)((v16 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      uint64_t v15 = *(void *)((v16 & 0xFFFFFFFFFFFFFFF0) + 0x20);
    }
    else
    {
      uint64_t v19 = 0;
      if (v18 && (v16 & 8) == 0)
      {
        uint64_t v19 = *v18;
        uint64_t v15 = *(void *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8);
      }
    }
    *(void *)(a3 + 8) = v19;
    *(void *)(a3 + 16) = v15;
    goto LABEL_37;
  }
  if (!v13)
  {
    if (v14 > 3) {
      goto LABEL_32;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F8908);
    atomic_ullong v16 = *v12;
    uint64_t v17 = *v12 & 7;
    if (v17 > 3) {
      goto LABEL_30;
    }
    goto LABEL_20;
  }
  if (v13 != 1) {
    goto LABEL_42;
  }
  if (v14 > 2)
  {
LABEL_32:
    *(unsigned char *)a3 = v14;
    *(void *)(a3 + 8) = 0;
    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F8908);
  atomic_ullong v16 = *v12;
  uint64_t v17 = *v12 & 7;
  if (v17 <= 2) {
    goto LABEL_20;
  }
LABEL_30:
  *(unsigned char *)a3 = v17;
  *(void *)(a3 + 8) = 0;
LABEL_37:

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F8908);
}

double swift::Lazy<swift::MetadataCache<anonymous namespace'::ForeignMetadataCacheEntry,(unsigned short)15>>::defaultInitCallback(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ForeignMetadataCacheEntry>,swift::Mutex>::find<anonymous namespace'::ForeignMetadataCacheEntry::Key>(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  swift::ParsedTypeIdentity::parse(*a1, (uint64_t)v17);
  unint64_t v8 = __swift::__runtime::llvm::hash_value(v18, v19);
  BOOL v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  uint64_t v11 = ~(-1 << v10);
  if ((a2 & 3) != 0) {
    unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else {
    unint64_t v12 = 0;
  }
  while (2)
  {
    if ((v8 & v11) <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v8 & v11;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v14) = v12 + v13;
        LOBYTE(v14) = atomic_load_explicit((atomic_uchar *volatile)(v12 + v13), memory_order_acquire);
        if (v14) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v14) = v12 + 2 * v13;
        LOWORD(v14) = atomic_load_explicit((atomic_ushort *volatile)(v12 + 2 * v13), memory_order_acquire);
        if (!v14) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v14) = atomic_load_explicit((atomic_uint *volatile)(v12 + 4 * v13), memory_order_acquire);
        if (v14) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v14 = (a2 >> (4 * v13)) & 0xF;
        if (v14)
        {
LABEL_19:
          unint64_t v15 = (v14 - 1);
            return a4 + 8 * v15;
          unint64_t v8 = v13 + 1;
          continue;
        }
        return 0;
    }
  }
}

BOOL anonymous namespace'::ForeignMetadataCacheEntry::matchesKey(uint64_t a1, uint64_t a2)
{
  swift::ParsedTypeIdentity::parse(a2, (uint64_t)v9);
  uint64_t v4 = __s2;
  size_t v3 = v11;
  unint64_t v5 = *(void **)(a1 + 8);
  if (*v5 == 516 || *v5 == 515)
  {
    uint64_t v6 = v5[1];
    if (v6) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = v5[1];
    if (v6)
    {
LABEL_6:
      uint64_t v7 = v6;
      goto LABEL_8;
    }
  }
  uint64_t v7 = 0;
LABEL_8:
  swift::ParsedTypeIdentity::parse(v7, (uint64_t)v9);
  if (v3 != v11) {
    return 0;
  }
  if (v3) {
    return memcmp(v4, __s2, v3) == 0;
  }
  return 1;
}

unint64_t anonymous namespace'::SingletonMetadataCacheStorage::resolveExistingEntry(_DWORD *a1)
{
  int v1 = *a1 & 0x1F;
  if (v1 == 16)
  {
    if (a1) {
      size_t v3 = a1;
    }
    else {
      size_t v3 = 0;
    }
    unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v3);
    unint64_t v8 = *(unsigned int *)v3;
    unint64_t v5 = TrailingObjectsImpl + 4 * ((v8 >> 29) & 1);
  }
  else
  {
    if (v1 == 17)
    {
      if (a1) {
        uint64_t v4 = a1;
      }
      else {
        uint64_t v4 = 0;
      }
      unint64_t v5 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v4);
      uint64_t v6 = v4;
    }
    else
    {
      if (v1 != 18) {
        abort();
      }
      if (a1) {
        uint64_t v2 = a1;
      }
      else {
        uint64_t v2 = 0;
      }
      unint64_t v5 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v2);
      uint64_t v6 = v2;
    }
    LODWORD(v8) = *v6;
  }
  BOOL v9 = (int *)(v5 + 4 * ((v8 & 0x30000) == 0x20000));
  uint64_t v10 = *v9;
  size_t v11 = (atomic_ullong *)((char *)v9 + v10);
  if (!v10) {
    size_t v11 = 0;
  }
  return atomic_load_explicit(v11 + 1, memory_order_acquire);
}

void std::__function::__func<recordBacktrace(void *)::$_0,std::allocator<recordBacktrace(void *)::$_0>,void ()(void **,int)>::~__func()
{
}

void *std::__function::__func<recordBacktrace(void *)::$_0,std::allocator<recordBacktrace(void *)::$_0>,void ()(void **,int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA063D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<recordBacktrace(void *)::$_0,std::allocator<recordBacktrace(void *)::$_0>,void ()(void **,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA063D8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<recordBacktrace(void *)::$_0,std::allocator<recordBacktrace(void *)::$_0>,void ()(void **,int)>::operator()(uint64_t a1, const void **a2, int *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = malloc_type_malloc(8 * v5 + 24, 0x94E39137uLL);
  v6[1] = **(void **)(a1 + 8);
  *((_DWORD *)v6 + 4) = v5;
  double result = memcpy(v6 + 3, v4, 8 * v5);
  uint64_t v8 = _swift_debug_metadataAllocationBacktraceList;
  *uint64_t v6 = _swift_debug_metadataAllocationBacktraceList;
  uint64_t v9 = v8;
  atomic_compare_exchange_strong_explicit(&_swift_debug_metadataAllocationBacktraceList, (unint64_t *)&v9, (unint64_t)v6, memory_order_release, memory_order_relaxed);
  if (v9 != v8)
  {
    uint64_t v10 = v9;
    do
    {
      *uint64_t v6 = v9;
      atomic_compare_exchange_strong_explicit(&_swift_debug_metadataAllocationBacktraceList, (unint64_t *)&v10, (unint64_t)v6, memory_order_release, memory_order_relaxed);
      BOOL v11 = v10 == v9;
      uint64_t v9 = v10;
    }
    while (!v11);
  }
  return result;
}

void __swift::__runtime::llvm::toHex(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v5 = a2;
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a4, 2 * a2);
  if (v5)
  {
    if (a3) {
      char v8 = 32;
    }
    else {
      char v8 = 0;
    }
    do
    {
      unsigned int v9 = *a1++;
      std::string::push_back(a4, a0123456789abcd[(unint64_t)v9 >> 4] | v8);
      std::string::push_back(a4, a0123456789abcd[v9 & 0xF] | v8);
      --v5;
    }
    while (v5);
  }
}

void *swift_getKeyPath::$_0::__invoke(swift_getKeyPath::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_getKeyPath(this);
  swift_getKeyPath::Override = result;
  return result;
}

void *swift_getAssociatedTypeWitnessSlow::$_0::__invoke(swift_getAssociatedTypeWitnessSlow::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_getAssociatedTypeWitnessSlow(this);
  swift_getAssociatedTypeWitnessSlow::Override = result;
  return result;
}

uint64_t *swift::TypeLookupErrorOr<swift::TypeInfo>::operator=(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((unsigned __int16 *)a1 + 12);
  int v5 = *((unsigned __int16 *)a2 + 12);
  if (v4 == v5)
  {
    if (*((_WORD *)a1 + 12))
    {
      if (a1 != a2 && v4 == 1)
      {
        ((void (*)(uint64_t, uint64_t, void))a1[1])(*a1, 3, 0);
        uint64_t v6 = *a2;
        uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void))a2[1];
        a1[1] = (uint64_t)v7;
        *a1 = v7(v6, 2, 0);
      }
    }
    else
    {
      long long v9 = *(_OWORD *)a2;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = v9;
    }
  }
  else
  {
    if (v4 == 1) {
      ((void (*)(uint64_t, uint64_t, void))a1[1])(*a1, 3, 0);
    }
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *a2 = 0;
      a2[1] = (uint64_t)swift::TypeLookupError::nop;
    }
    else if (!v5)
    {
      long long v8 = *(_OWORD *)a2;
      a1[2] = a2[2];
      *(_OWORD *)a1 = v8;
    }
  }
  *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
  return a1;
}

uint64_t swift::TypeLookupError::nop()
{
  return 0;
}

void std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06420;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06420;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a3 | *a2) {
    return 0;
  }
  else {
    return *(void *)(a1 + 8);
  }
}

void std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1ECA06468;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECA06468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(void **a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *a1[1];
  if (v6) {
    uint64_t v6 = *a1[1];
  }
  if (v6 == -24) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6 + 24;
  }
  if (*(_DWORD *)(*a1[1] + 16) <= v5) {
    return 0;
  }
  long long v8 = (_DWORD *)(v7 + 12 * *(unsigned int *)(v6 + 12) + 8 * v5);
  uint64_t v9 = *a1[2];
  uint64_t v10 = *a1[3];
  uint64_t v11 = *a1[4];
  uint64_t result = atomic_load_explicit((atomic_ullong *volatile)(v9 + (((unint64_t)v8 - v11) & 0x7FFFFFFF8)), memory_order_acquire);
  if (result) {
    return swift_getAssociatedConformanceWitnessSlow(v9, v10, v4, v11, v8);
  }
  return result;
}

void std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA064B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA064B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_2>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata(*(swift::SubstGenericParametersFromMetadata **)(a1 + 8), *a2, *a3);
}

void std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA064F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA064F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3,std::allocator<swift_getAssociatedTypeWitnessSlowImpl(swift::MetadataRequest,swift::TargetWitnessTable<swift::InProcess> *,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*,swift::TargetProtocolRequirement<swift::InProcess> const*)::$_3>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

void *swift_getAssociatedConformanceWitnessSlow::$_0::__invoke(swift_getAssociatedConformanceWitnessSlow::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_getAssociatedConformanceWitnessSlow(this);
  swift_getAssociatedConformanceWitnessSlow::Override = result;
  return result;
}

uint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned int *a1)
{
  int v1 = a1;
  uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  unint64_t v3 = *v1;
  if ((v3 & 0x20000000) == 0)
  {
    uint64_t v4 = 0;
    if ((v3 & 0x80000) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    return TrailingObjectsImpl + 4 * v4 + 4 * ((v3 >> 19) & 1) + 4 * v6 + 4 * v7;
  }
  uint64_t v4 = v1[7] & 1;
  if ((v3 & 0x80000) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v1) {
    uint64_t v5 = v1;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v8 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v5);
  if ((*((unsigned char *)v5 + 3) & 0x20) != 0) {
    uint64_t v9 = v5[7] & 1;
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int v6 = *(_DWORD *)(v8 + 4 * v9);
  if ((*((unsigned char *)v1 + 2) & 8) != 0)
  {
    if (!v1) {
      int v1 = 0;
    }
    uint64_t v10 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v1);
    if ((*((unsigned char *)v1 + 3) & 0x20) != 0) {
      uint64_t v11 = v1[7] & 1;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v7 = *(unsigned int *)(v10 + 4 * v11);
  }
  else
  {
    uint64_t v7 = 0;
  }
  return TrailingObjectsImpl + 4 * v4 + 4 * ((v3 >> 19) & 1) + 4 * v6 + 4 * v7;
}

uint64_t swift::MetadataCacheEntryBase<anonymous namespace'::SingletonMetadataCacheEntry,int>::awaitSatisfyingState(atomic_ullong *a1, __int16 a2)
{
  char explicit = atomic_load_explicit(a1, memory_order_acquire);
  unsigned int v5 = explicit & 7;
  if (v5 - 1 >= 3)
  {
    if (v5 == 4) {
      return a1[1];
    }
    if ((explicit & 7) != 0) {
      goto LABEL_60;
    }
    uint64_t v7 = a2 & 0x100;
  }
  else
  {
    if (a2 > 0x3Eu)
    {
      if (a2 == 255) {
        goto LABEL_15;
      }
      if (a2 != 63) {
        goto LABEL_60;
      }
      if (v5 > 1) {
        goto LABEL_15;
      }
    }
    else if ((_BYTE)a2)
    {
      if (a2 != 1) {
        goto LABEL_60;
      }
      if (v5 >= 3) {
        return a1[1];
      }
    }
    uint64_t v7 = a2 & 0x100;
    if ((explicit & 8) != 0 && (a2 & 0x100) != 0)
    {
LABEL_15:
      uint64_t v6 = a1[1];
      if (v5 == 1 || v5 == 3 || v5 == 2) {
        return v6;
      }
LABEL_60:
      abort();
    }
  }
  uint64_t v8 = 0;
  uint64_t v21 = &SingletonMetadata;
  Class v22 = 0;
  __int16 v23 = 0;
  int v9 = a2;
  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&SingletonMetadata);
    if (v8)
    {
      if (*v8 == 1)
      {
        uint64_t v10 = v8[2];
        v8[2] = 0;
        if (v10) {
          MEMORY[0x1852FF000](v10, 0x80C4018A671A6);
        }
        swift_slowDealloc(v8);
      }
      else
      {
        --*v8;
      }
    }
    atomic_ullong v11 = *a1;
    uint64_t v12 = *a1 & 7;
    if ((v12 - 1) < 3) {
      break;
    }
    if (v12)
    {
      if (v12 == 4)
      {
LABEL_50:
        os_unfair_lock_unlock((os_unfair_lock_t)&SingletonMetadata);
        uint64_t v6 = a1[1];
        goto LABEL_55;
      }
      goto LABEL_60;
    }
LABEL_21:
    uint64_t v8 = (void *)(v11 & 0xFFFFFFFFFFFFFFF0);
    ++*(void *)(v11 & 0xFFFFFFFFFFFFFFF0);
    os_unfair_lock_unlock((os_unfair_lock_t)&SingletonMetadata);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 & 0xFFFFFFFFFFFFFFF0 | 8));
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 & 0xFFFFFFFFFFFFFFF0 | 8));
  }
  if (v9 > 62)
  {
    if (v9 != 63)
    {
      if (v9 == 255)
      {
LABEL_52:
        os_unfair_lock_unlock((os_unfair_lock_t)&SingletonMetadata);
        uint64_t v6 = a1[1];
        if (v12 == 1 || v12 == 3 || v12 == 2) {
          goto LABEL_55;
        }
      }
      goto LABEL_60;
    }
    if (v12 > 1) {
      goto LABEL_52;
    }
  }
  else if (v9)
  {
    if (v9 != 1) {
      goto LABEL_60;
    }
    if (v12 >= 3) {
      goto LABEL_50;
    }
  }
  if ((v11 & 8) != 0)
  {
    if (v7) {
      goto LABEL_52;
    }
    goto LABEL_21;
  }
  unint64_t v13 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
  *(_OWORD *)unint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(void *)unint64_t v13 = 1;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 8));
  Class v22 = (os_unfair_lock_s *)v13;
  uint64_t v14 = (_OWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    *(_OWORD *)(v13 + 24) = *v14;
    uint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10);
    *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0;
    uint64_t v16 = *(void *)(v13 + 16);
    *(void *)(v13 + 16) = v15;
    if (v16) {
      MEMORY[0x1852FF000](v16, 0x80C4018A671A6);
    }
  }
  atomic_store(v11 & 7 | v13 | 8, (unint64_t *)a1);
  LOBYTE(v23) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&SingletonMetadata);
  HIBYTE(v23) = v12;
  if (v14)
  {
    uint64_t v17 = *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10);
    *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0;
    if (v17) {
      MEMORY[0x1852FF000](v17, 0x80C4018A671A6);
    }
    MEMORY[0x1852FF000](v11 & 0xFFFFFFFFFFFFFFF0, 0x1060C4048D9C6C4);
  }
LABEL_55:
  BOOL v18 = v22;
  if (v22)
  {
    os_unfair_lock_unlock(v22 + 2);
    uint64_t v19 = *(void *)&v18[4]._os_unfair_lock_opaque;
    *(void *)&v18[4]._os_unfair_lock_opaque = 0;
    if (v19) {
      MEMORY[0x1852FF000](v19, 0x80C4018A671A6);
    }
    swift_slowDealloc(v18);
  }
  return v6;
}

uint64_t swift::MetadataCacheEntryBase<anonymous namespace'::SingletonMetadataCacheEntry,int>::doInitialization(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v7 = *(unint64_t **)(a1 + 8);
  uint64_t v43 = *(void *)(a2 + 8);
  uint64_t v42 = *(long long **)(v43 + 16);
  if (!v42)
  {
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v42 = &v44;
  }
  int v8 = a3;
  while (1)
  {
    unsigned int v9 = *(unsigned __int8 *)(a2 + 17);
    if (v9 > 2) {
      break;
    }
    uint64_t TypeContextDescriptor = (_DWORD *)swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(v7);
    int v11 = *TypeContextDescriptor & 0x1F;
    if (v11 == 16)
    {
      unint64_t v13 = TypeContextDescriptor ? TypeContextDescriptor : 0;
      unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v13);
      unint64_t v18 = *(unsigned int *)v13;
      unint64_t v15 = TrailingObjectsImpl + 4 * ((v18 >> 29) & 1);
    }
    else
    {
      if (v11 == 17)
      {
        uint64_t v14 = TypeContextDescriptor ? TypeContextDescriptor : 0;
        unint64_t v15 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v14);
        uint64_t v16 = v14;
      }
      else
      {
        if (v11 != 18) {
          goto LABEL_71;
        }
        uint64_t v12 = TypeContextDescriptor ? TypeContextDescriptor : 0;
        unint64_t v15 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v12);
        uint64_t v16 = v12;
      }
      LODWORD(v18) = *v16;
    }
    unint64_t v19 = v15 + 4 * ((v18 & 0x30000) == 0x20000);
    uint64_t v20 = *(int *)(v19 + 8);
    uint64_t v21 = (uint64_t (*)(unint64_t *, long long *, void))(v19 + 8 + v20);
    uint64_t v22 = v20 ? v21(v7, v42, 0) : MEMORY[0](v7, v42, 0);
    if (!v22) {
      break;
    }
    uint64_t v24 = v22;
    if ((*(unsigned char *)(*(v7 - 1) + 82) & 0x40) != 0) {
      unsigned __int8 v25 = 1;
    }
    else {
      unsigned __int8 v25 = 2;
    }
LABEL_31:
    uint64_t v3 = v23;
    *(unsigned char *)(a2 + 17) = v25;
    if (v8 > 62)
    {
      if (v8 != 63)
      {
        if (v8 == 255)
        {
LABEL_47:
          uint64_t v30 = *(void *)(v43 + 16);
          if (!v30)
          {
            if ((unint64_t)v44 | *((void *)&v44 + 1) | (unint64_t)v45 | *((void *)&v45 + 1)) {
              operator new();
            }
            uint64_t v30 = 0;
          }
          *(void *)(v43 + 16) = 0;
          uint64_t result = *(void *)(a1 + 8);
          if (v25 == 1 || v25 == 3 || v25 == 2) {
            return result;
          }
        }
LABEL_71:
        abort();
      }
      if (v25 > 1u) {
        goto LABEL_47;
      }
    }
    else if (v8)
    {
      if (v8 != 1) {
        goto LABEL_71;
      }
      if (v25 == 3) {
        goto LABEL_47;
      }
    }
    if ((a3 & 0x100) != 0) {
      goto LABEL_47;
    }
    if (v9 < v25)
    {
      uint64_t v43 = *(void *)(a2 + 8);
    }
    swift::blockOnMetadataDependency(*(void *)(a1 + 8), a3, v24, v3);
  }
  uint64_t v26 = checkTransitiveCompleteness((uint64_t *)v7);
  if (v26)
  {
    uint64_t v24 = v26;
    unsigned __int8 v25 = 3;
    goto LABEL_31;
  }
  uint64_t v27 = (_DWORD *)swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(v7);
  int v28 = *v27 & 0x1F;
  if (v28 == 16)
  {
    if (v27) {
      int v32 = v27;
    }
    else {
      int v32 = 0;
    }
    unint64_t v36 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v32);
    unint64_t v37 = *(unsigned int *)v32;
    unint64_t v34 = v36 + 4 * ((v37 >> 29) & 1);
  }
  else
  {
    if (v28 == 17)
    {
      if (v27) {
        uint64_t v33 = v27;
      }
      else {
        uint64_t v33 = 0;
      }
      unint64_t v34 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v33);
      unint64_t v35 = v33;
    }
    else
    {
      if (v28 != 18) {
        goto LABEL_71;
      }
      if (v27) {
        uint64_t v29 = v27;
      }
      else {
        uint64_t v29 = 0;
      }
      unint64_t v34 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v29);
      unint64_t v35 = v29;
    }
    LODWORD(v37) = *v35;
  }
  long long v38 = (int *)(v34 + 4 * ((v37 & 0x30000) == 0x20000));
  uint64_t v39 = *v38;
  uint64_t v40 = (unint64_t *)((char *)v38 + v39);
  if (!v39) {
    uint64_t v40 = 0;
  }
  atomic_store((unint64_t)v7, v40);
  *(unsigned char *)(a2 + 17) = 4;
  uint64_t v41 = *(void *)(v43 + 16);
  *(void *)(v43 + 16) = 0;
  return *(void *)(a1 + 8);
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ObjCClassCacheEntry>,swift::LazyMutex>::find<swift::TargetClassMetadata<swift::InProcess,swift::TargetAnyClassMetadataObjCInterop<swift::InProcess>> const*>(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  unsigned int v5 = &unk_1EB1F3000;
  {
    uint64_t v22 = a1;
    uint64_t v20 = a4;
    unint64_t v18 = a3;
    unint64_t v21 = a2;
    unint64_t v19 = v4;
    unsigned int v5 = &unk_1EB1F3000;
    a3 = v18;
    unint64_t v4 = v19;
    a4 = v20;
    int v16 = v15;
    a2 = v21;
    a1 = v22;
    if (v16)
    {
      unint64_t v17 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unsigned int v5 = (void *)&unk_1EB1F3000;
      a3 = v18;
      unint64_t v4 = v19;
      a2 = v21;
      a1 = v22;
      a4 = v20;
    }
  }
  uint64_t v6 = (v5[38] + 8 * v4) ^ HIDWORD(v4);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
  uint64_t v8 = 0x1DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unsigned int v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  if ((a2 & 3) == 0) {
    unsigned int v9 = 0;
  }
  while (2)
  {
    unint64_t v11 = v8 & ~(-1 << v10);
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v12) = v9 + v11;
        LOBYTE(v12) = atomic_load_explicit(&v9[v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v12) = v9 + 2 * v11;
        LOWORD(v12) = atomic_load_explicit((atomic_ushort *volatile)&v9[2 * v11], memory_order_acquire);
        if (!v12) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v12) = atomic_load_explicit((atomic_uint *volatile)&v9[4 * v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v12 = (a2 >> (4 * v11)) & 0xF;
        if (v12)
        {
LABEL_19:
          unint64_t v13 = (v12 - 1);
          if (v13 < a3 && *(void *)(*(void *)(a4 + 8 * v13) + 24) == *a1) {
            return a4 + 8 * v13;
          }
          uint64_t v8 = v11 + 1;
          continue;
        }
        return 0;
    }
  }
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::PackCacheEntry<swift::TargetMetadata<swift::InProcess>>>,swift::LazyMutex>::find<anonymous namespace'::PackCacheEntry<swift::TargetMetadata<swift::InProcess>>::Key>(void *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v23 = 0;
  if (a1[1])
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v22 = *(void *)(*a1 + 8 * v8);
      unint64_t v9 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>(&v23, &v22);
      unint64_t v23 = v9;
      ++v8;
    }
    while (v8 != a1[1]);
  }
  else
  {
    unint64_t v9 = 0;
  }
  char v10 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v11 = 4;
  if ((a2 & 3) != 0 && v10) {
    char v11 = *v10;
  }
  uint64_t v12 = ~(-1 << v11);
  if ((a2 & 3) == 0) {
    char v10 = 0;
  }
  while (2)
  {
    uint64_t v13 = v9 & v12;
    if ((v9 & v12) <= 1) {
      uint64_t v13 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v14) = v10 + v13;
        LOBYTE(v14) = atomic_load_explicit(&v10[v13], memory_order_acquire);
        if (v14) {
          goto LABEL_23;
        }
        return 0;
      case 2uLL:
        LODWORD(v14) = v10 + 2 * v13;
        LOWORD(v14) = atomic_load_explicit((atomic_ushort *volatile)&v10[2 * v13], memory_order_acquire);
        if (!v14) {
          return 0;
        }
        goto LABEL_23;
      case 3uLL:
        LODWORD(v14) = atomic_load_explicit((atomic_uint *volatile)&v10[4 * v13], memory_order_acquire);
        if (v14) {
          goto LABEL_23;
        }
        return 0;
      default:
        uint64_t v14 = (a2 >> (4 * v13)) & 0xF;
        if (v14)
        {
LABEL_23:
          unint64_t v15 = (v14 - 1);
          if (v15 < a3)
          {
            int v16 = *(void **)(a4 + 8 * v15);
            uint64_t v17 = a1[1];
            if (v17 == *v16)
            {
              if (!v17) {
                return a4 + 8 * v15;
              }
              uint64_t v18 = 0;
              unint64_t v19 = v16 + 1;
              unsigned int v20 = 1;
              while (*(void *)(*a1 + 8 * v18) == v19[v18])
              {
                uint64_t v18 = v20++;
                if (v17 == v18) {
                  return a4 + 8 * v15;
                }
              }
            }
          }
          unint64_t v9 = v13 + 1;
          continue;
        }
        return 0;
    }
  }
}

unint64_t __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>(void *a1, uint64_t *a2)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  {
    unint64_t v7 = a2;
    uint64_t v8 = a1;
    a2 = v7;
    a1 = v8;
    if (v5)
    {
      unint64_t v6 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v6 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v6;
      a2 = v7;
      a1 = v8;
    }
  }
  uint64_t v2 = *a1;
  uint64_t v12 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v9[0] = v2;
  uint64_t v13 = 0;
  uint64_t v3 = (char *)__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)v9, &v13, (void *)v9 + 1, (unint64_t)v10, *a2);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine((__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v9, v13, v3, (char *)v10);
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::PackCacheEntry<swift::TargetWitnessTable<swift::InProcess>>>,swift::LazyMutex>::find<anonymous namespace'::PackCacheEntry<swift::TargetWitnessTable<swift::InProcess>>::Key>(void *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v23 = 0;
  if (a1[1])
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v22 = *(void *)(*a1 + 8 * v8);
      unint64_t v9 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>(&v23, &v22);
      unint64_t v23 = v9;
      ++v8;
    }
    while (v8 != a1[1]);
  }
  else
  {
    unint64_t v9 = 0;
  }
  char v10 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v11 = 4;
  if ((a2 & 3) != 0 && v10) {
    char v11 = *v10;
  }
  uint64_t v12 = ~(-1 << v11);
  if ((a2 & 3) == 0) {
    char v10 = 0;
  }
  while (2)
  {
    uint64_t v13 = v9 & v12;
    if ((v9 & v12) <= 1) {
      uint64_t v13 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v14) = v10 + v13;
        LOBYTE(v14) = atomic_load_explicit(&v10[v13], memory_order_acquire);
        if (v14) {
          goto LABEL_23;
        }
        return 0;
      case 2uLL:
        LODWORD(v14) = v10 + 2 * v13;
        LOWORD(v14) = atomic_load_explicit((atomic_ushort *volatile)&v10[2 * v13], memory_order_acquire);
        if (!v14) {
          return 0;
        }
        goto LABEL_23;
      case 3uLL:
        LODWORD(v14) = atomic_load_explicit((atomic_uint *volatile)&v10[4 * v13], memory_order_acquire);
        if (v14) {
          goto LABEL_23;
        }
        return 0;
      default:
        uint64_t v14 = (a2 >> (4 * v13)) & 0xF;
        if (v14)
        {
LABEL_23:
          unint64_t v15 = (v14 - 1);
          if (v15 < a3)
          {
            int v16 = *(void **)(a4 + 8 * v15);
            uint64_t v17 = a1[1];
            if (v17 == *v16)
            {
              if (!v17) {
                return a4 + 8 * v15;
              }
              uint64_t v18 = 0;
              unint64_t v19 = v16 + 1;
              unsigned int v20 = 1;
              while (*(void *)(*a1 + 8 * v18) == v19[v18])
              {
                uint64_t v18 = v20++;
                if (v17 == v18) {
                  return a4 + 8 * v15;
                }
              }
            }
          }
          unint64_t v9 = v13 + 1;
          continue;
        }
        return 0;
    }
  }
}

uint64_t anonymous namespace'::FunctionCacheEntry::matchesKey(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2 != *(void *)(a1 + 24)) {
    return 0;
  }
  unint64_t v5 = a2[1];
  if ((v2 & 0x8000000) != 0)
  {
    if (v5 != *(void *)((a1
                          + 8 * (unsigned __int16)*a2
                          + 4 * ((unsigned __int16)*a2 & (unint64_t)((uint64_t)(*a2 << 38) >> 63))
                          + 47) & 0xFFFFFFFFFFFFFFF8))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if (a2[4] != *(void *)(a1 + 32)) {
    return 0;
  }
  unint64_t v6 = a2[5];
  if ((v2 & 0x10000000) != 0)
  {
    if (v6 == *(void *)(((a1
                           + 8 * (unsigned __int16)*a2
                           + 4 * ((unsigned __int16)*a2 & (unint64_t)((uint64_t)(*a2 << 38) >> 63))
                           + 47) & 0xFFFFFFFFFFFFFFF8)
                         + 8 * ((*a2 >> 27) & 1)))
      goto LABEL_11;
    return 0;
  }
  if (v6) {
    return 0;
  }
LABEL_11:
  if ((v2 & 0x80000000) != 0) {
    int v7 = *(_DWORD *)(((a1
  }
                     + 8 * (unsigned __int16)*a2
                     + 4 * ((unsigned __int16)*a2 & (unint64_t)((uint64_t)(*a2 << 38) >> 63))
                     + 47) & 0xFFFFFFFFFFFFFFF8)
                   + 8 * ((v2 >> 27) & 1)
                   + 8 * ((v2 >> 28) & 1));
  else {
    int v7 = 0;
  }
  if (*((_DWORD *)a2 + 12) != v7) {
    return 0;
  }
  unint64_t v8 = a2[7];
  if (v8 != swift::TargetFunctionTypeMetadata<swift::InProcess>::getThrownError(a1 + 16)) {
    return 0;
  }
  if ((unsigned __int16)*a2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a1 + 40;
    uint64_t result = 1;
    while (1)
    {
      if (*(void *)(a2[2] + 8 * v10) != *(void *)(v11 + 8 * v10)) {
        return 0;
      }
      if ((*a2 & 0x2000000) != 0)
      {
        int v12 = *(_DWORD *)(a2[3] + 4 * v10);
        uint64_t v13 = *(void *)(a1 + 24);
        if ((v13 & 0x2000000) == 0)
        {
LABEL_24:
          int v14 = 0;
          goto LABEL_25;
        }
      }
      else
      {
        int v12 = 0;
        uint64_t v13 = *(void *)(a1 + 24);
        if ((v13 & 0x2000000) == 0) {
          goto LABEL_24;
        }
      }
      int v14 = *(_DWORD *)(v11 + 8 * (unsigned __int16)v13 + 4 * v10);
LABEL_25:
      if (v12 != v14) {
        return 0;
      }
      if ((unsigned __int16)*a2 == ++v10) {
        return result;
      }
    }
  }
  return 1;
}

unint64_t anonymous namespace'::hash_value(unsigned __int16 *a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v16 = *((void *)a1 + 1);
  unint64_t v17 = 0;
  uint64_t v3 = (uint64_t *)(a1 + 16);
  unint64_t v4 = (uint64_t *)(a1 + 20);
  int v15 = *((_DWORD *)a1 + 12);
  unint64_t v5 = (uint64_t *)(a1 + 28);
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  {
    int v12 = (uint64_t *)(a1 + 20);
    uint64_t v13 = (uint64_t *)(a1 + 16);
    uint64_t v14 = v2;
    uint64_t v3 = v13;
    uint64_t v2 = v14;
    unint64_t v4 = v12;
    if (v10)
    {
      unint64_t v11 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v11 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v11;
      uint64_t v3 = v13;
      uint64_t v2 = v14;
      unint64_t v4 = v12;
    }
  }
  uint64_t v21 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v18[0] = v2;
  unint64_t result = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned long,swift::TargetMetadata<swift::InProcess> const*,swift::TargetMetadata<swift::InProcess> const*,unsigned int,swift::TargetMetadata<swift::InProcess> const*>((__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v18, 0, (void *)v18 + 1, (char *)v19, &v16, v3, v4, &v15, v5);
  unint64_t v17 = result;
  uint64_t v7 = *a1;
  if (*a1)
  {
    uint64_t v8 = 0;
    do
    {
      *(void *)&v18[0] = *(void *)(*((void *)a1 + 2) + 8 * v8);
      unint64_t v17 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>(&v17, (uint64_t *)v18);
      if ((*((unsigned char *)a1 + 3) & 2) != 0) {
        int v9 = *(_DWORD *)(*((void *)a1 + 3) + 4 * v8);
      }
      else {
        int v9 = 0;
      }
      LODWORD(v18[0]) = v9;
      unint64_t result = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,unsigned int>(&v17, (int *)v18);
      unint64_t v17 = result;
      ++v8;
    }
    while (v7 != v8);
  }
  return result;
}

unint64_t __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,unsigned int>(void *a1, int *a2)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  {
    uint64_t v7 = a2;
    uint64_t v8 = a1;
    a2 = v7;
    a1 = v8;
    if (v5)
    {
      unint64_t v6 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v6 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v6;
      a2 = v7;
      a1 = v8;
    }
  }
  uint64_t v2 = *a1;
  uint64_t v12 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v9[0] = v2;
  uint64_t v13 = 0;
  uint64_t v3 = (char *)__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)v9, &v13, (_DWORD *)v9 + 2, (unint64_t)v10, *a2);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine((__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v9, v13, v3, (char *)v10);
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned long,swift::TargetMetadata<swift::InProcess> const*,swift::TargetMetadata<swift::InProcess> const*,unsigned int,swift::TargetMetadata<swift::InProcess> const*>(__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9)
{
  unint64_t v20 = a2;
  uint64_t v14 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v20, a3, (unint64_t)a4, *a5);
  unint64_t v21 = v20;
  int v15 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v21, v14, (unint64_t)a4, *a6);
  unint64_t v22 = v21;
  uint64_t v16 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v22, v15, (unint64_t)a4, *a7);
  unint64_t v23 = v22;
  unint64_t v17 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v23, v16, (unint64_t)a4, *a8);
  unint64_t v24 = v23;
  uint64_t v18 = (char *)__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v24, v17, (unint64_t)a4, *a9);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v24, v18, a4);
}

_DWORD *__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(uint64_t a1, uint64_t *a2, _DWORD *__dst, unint64_t a4, int a5)
{
  int __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)(a1 + 64), (const char *)a1);
      uint64_t v9 = *a2 + 64;
    }
    else
    {
      unint64_t v10 = *(void *)(a1 + 120);
      uint64_t v11 = __ROR8__(v10 ^ 0xB492B66FBE98F273, 49);
      unint64_t v12 = v10 ^ (v10 >> 47);
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = v13 + v10 + v11;
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = v17 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v15 + v10 - 0x4B6D499041670D8DLL * v10, 42);
      unint64_t v19 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v10 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v10 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      unint64_t v20 = 0x9DDFEA08EB382D69
          * (v10 ^ (((0x9DDFEA08EB382D69 * (v12 ^ (0xB492B66FBE98F273 * v10))) ^ v10) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v12 ^ (0xB492B66FBE98F273 * v10))));
      unint64_t v21 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
      unint64_t v22 = 0xB492B66FBE98F273 * __ROR8__(v12 - 0x622015F714C7D297 * (v19 ^ (v19 >> 47)), 33);
      uint64_t v23 = *(void *)a1 - 0x6D8ED9027DD26057 * v10;
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      uint64_t v26 = v23 + v13 + v25;
      unint64_t v27 = v21 ^ (0xB492B66FBE98F273 * __ROR8__(v14, 37));
      unint64_t v28 = v22 + *(void *)(a1 + 32) + v21;
      *(void *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = v18;
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + 88) = v26 + v24;
      *(void *)(a1 + 96) = __ROR8__(v26, 44) + v23 + __ROR8__(v23 + v12 + v24 + v27, 21);
      *(void *)(a1 + 104) = v17 + v15 + v28 + v16;
      *(void *)(a1 + 112) = __ROR8__(v18 + v25 + v16 + v28, 21) + v28 + __ROR8__(v17 + v15 + v28, 44);
      uint64_t v9 = 64;
    }
    *a2 = v9;
    if (a1 + 4 - v8 <= a4)
    {
      memcpy((void *)a1, (char *)&__src + v8, 4 - v8);
      a1 += 4 - v8;
    }
  }
  return (_DWORD *)a1;
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::TupleCacheEntry>,swift::Mutex>::find<anonymous namespace'::TupleCacheEntry::Key>(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = (const char *)a1[2];
  unint64_t v25 = __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<swift::TargetMetadata<swift::InProcess> const* const>((void *)a1[1], a1[1] + 8 * *a1);
  v24[0] = v8;
  if (v8) {
    size_t v9 = strlen(v8);
  }
  else {
    size_t v9 = 0;
  }
  v24[1] = v9;
  unint64_t v10 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,__swift::__runtime::llvm::StringRef>(&v25, (uint64_t)v24);
  uint64_t v11 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v12 = 4;
  if ((a2 & 3) != 0 && v11) {
    char v12 = *v11;
  }
  uint64_t v13 = ~(-1 << v12);
  if ((a2 & 3) != 0) {
    unint64_t v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else {
    unint64_t v14 = 0;
  }
  while (2)
  {
    if ((v10 & v13) <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v10 & v13;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v16) = v14 + v15;
        LOBYTE(v16) = atomic_load_explicit((atomic_uchar *volatile)(v14 + v15), memory_order_acquire);
        if (v16) {
          goto LABEL_22;
        }
        return 0;
      case 2uLL:
        LODWORD(v16) = v14 + 2 * v15;
        LOWORD(v16) = atomic_load_explicit((atomic_ushort *volatile)(v14 + 2 * v15), memory_order_acquire);
        if (!v16) {
          return 0;
        }
        goto LABEL_22;
      case 3uLL:
        LODWORD(v16) = atomic_load_explicit((atomic_uint *volatile)(v14 + 4 * v15), memory_order_acquire);
        if (v16) {
          goto LABEL_22;
        }
        return 0;
      default:
        uint64_t v16 = (a2 >> (4 * v15)) & 0xF;
        if (v16)
        {
LABEL_22:
          unint64_t v17 = (v16 - 1);
          if (v17 < a3)
          {
            uint64_t v18 = *(void *)(a4 + 8 * v17);
            uint64_t v19 = *a1;
            if (*a1 == *(void *)(v18 + 120))
            {
              if (v19)
              {
                uint64_t v20 = 0;
                while (*(void *)(a1[1] + 8 * v20) == *(void *)(v18 + 136 + 16 * v20))
                {
                  if (v19 == ++v20) {
                    goto LABEL_28;
                  }
                }
              }
              else
              {
LABEL_28:
                unint64_t v21 = (const char *)a1[2];
                unint64_t v22 = *(const char **)(v18 + 128);
                if (v21 == v22 || v21 && v22 && !strcmp(v21, v22)) {
                  return a4 + 8 * v17;
                }
              }
            }
          }
          unint64_t v10 = v15 + 1;
          continue;
        }
        return 0;
    }
  }
}

unint64_t __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,__swift::__runtime::llvm::StringRef>(void *a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  {
    unint64_t v10 = a1;
    uint64_t v6 = a2;
    a2 = v6;
    int v8 = v7;
    a1 = v10;
    if (v8)
    {
      unint64_t v9 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a1 = v10;
      a2 = v6;
    }
  }
  uint64_t v2 = *a1;
  uint64_t v14 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v11[0] = v2;
  uint64_t v15 = 0;
  unint64_t v3 = __swift::__runtime::llvm::hash_value(*(void **)a2, *(void *)(a2 + 8));
  unint64_t v4 = (char *)__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)v11, &v15, (void *)v11 + 1, (unint64_t)v12, v3);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine((__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v11, v15, v4, (char *)v12);
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<swift::TargetMetadata<swift::InProcess> const* const>(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = &unk_1EB1F3000;
  {
    unint64_t v69 = a1;
    unint64_t v3 = &unk_1EB1F3000;
    int v66 = v65;
    uint64_t v2 = a2;
    a1 = v69;
    if (v66)
    {
      unint64_t v67 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v67 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v67;
      unint64_t v3 = (void *)&unk_1EB1F3000;
      uint64_t v2 = a2;
      a1 = v69;
    }
  }
  unint64_t v4 = v3[38];
  unint64_t v5 = v2 - (void)a1;
  if ((unint64_t)(v2 - (void)a1) > 0x40)
  {
    unint64_t v7 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v8 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    unint64_t v9 = v4 ^ (v4 >> 47);
    unint64_t v10 = v4 ^ (((0x9DDFEA08EB382D69 * (v9 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                           * (v9 ^ (0xB492B66FBE98F273
                                                                                                  * v4)));
    uint64_t v11 = a1[1];
    uint64_t v12 = a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = v8 + v4 + v11;
    uint64_t v15 = a1[5];
    unint64_t v16 = v15 + v8 - 0x4B6D499041670D8DLL * __ROR8__(v12 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    unint64_t v17 = v9 - 0x622015F714C7D297 * (v7 ^ (v7 >> 47));
    uint64_t v18 = *a1 - 0x6D8ED9027DD26057 * v4;
    uint64_t v19 = a1[2];
    uint64_t v20 = a1[3];
    uint64_t v21 = v18 + v11 + v19;
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v10) ^ ((0x9DDFEA08EB382D69 * v10) >> 47));
    uint64_t v23 = __ROR8__(v17, 33);
    unint64_t v24 = (0xB492B66FBE98F273 * __ROR8__(v14, 37)) ^ v22;
    uint64_t v25 = __ROR8__(v21, 44) + v18 + __ROR8__(v24 + v9 + v18 + v20, 21);
    unint64_t v26 = 0xB492B66FBE98F273 * v23;
    uint64_t v27 = v21 + v20;
    uint64_t v28 = v22 + a1[4] - 0x4B6D499041670D8DLL * v23;
    uint64_t v29 = __ROR8__(v16 + v19 + v13 + v28, 21) + v28 + __ROR8__(v15 + v12 + v28, 44);
    uint64_t v30 = v15 + v12 + v28 + v13;
    unint64_t v31 = (v5 & 0xFFFFFFFFFFFFFFC0) - 64;
    if ((v5 & 0xFFFFFFFFFFFFFFC0) == 0x40)
    {
      unint64_t v32 = v24;
    }
    else
    {
      uint64_t v33 = a1 + 15;
      do
      {
        uint64_t v34 = *(v33 - 6);
        uint64_t v35 = __ROR8__(v16 + v27 + v26 + v34, 37);
        uint64_t v37 = *(v33 - 2);
        uint64_t v36 = *(v33 - 1);
        unint64_t v16 = v37 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v25 + v36, 42);
        uint64_t v38 = v24 + v30;
        uint64_t v39 = *(v33 - 7) - 0x4B6D499041670D8DLL * v25;
        uint64_t v40 = *(v33 - 4);
        uint64_t v41 = *(v33 - 5);
        uint64_t v42 = v39 + v34 + v41;
        unint64_t v32 = (0xB492B66FBE98F273 * v35) ^ v29;
        unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v38, 33);
        uint64_t v25 = __ROR8__(v42, 44) + v39 + __ROR8__(v32 + v30 + v39 + v40, 21);
        uint64_t v27 = v42 + v40;
        unint64_t v43 = v26 + v29 + *(v33 - 3);
        uint64_t v44 = *v33;
        v33 += 8;
        uint64_t v45 = __ROR8__(v16 + v41 + v43 + v44, 21);
        unint64_t v46 = v37 + v36 + v43;
        uint64_t v29 = v45 + v43 + __ROR8__(v46, 44);
        uint64_t v30 = v46 + v44;
        unint64_t v24 = v32;
        v31 -= 64;
      }
      while (v31);
    }
    if ((v5 & 0x3F) != 0)
    {
      uint64_t v47 = *(void *)(v2 - 56);
      uint64_t v48 = *(void *)(v2 - 16);
      uint64_t v49 = *(void *)(v2 - 8);
      uint64_t v50 = v32 + v30;
      unint64_t v51 = (0xB492B66FBE98F273 * __ROR8__(v16 + v27 + v26 + v47, 37)) ^ v29;
      uint64_t v53 = *(void *)(v2 - 32);
      uint64_t v52 = *(void *)(v2 - 24);
      unint64_t v16 = v52 + v27 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v25 + v48, 42);
      uint64_t v54 = v51 + v30;
      uint64_t v55 = *(void *)(v2 - 64) - 0x4B6D499041670D8DLL * v25;
      uint64_t v58 = v2 - 48;
      uint64_t v56 = *(void *)(v2 - 48);
      uint64_t v57 = *(void *)(v58 + 8);
      uint64_t v59 = v55 + v47 + v56;
      unint64_t v26 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
      uint64_t v25 = __ROR8__(v59, 44) + v55 + __ROR8__(v54 + v55 + v57, 21);
      uint64_t v27 = v59 + v57;
      unint64_t v60 = v26 + v29 + v53;
      unint64_t v61 = v52 + v48 + v60;
      uint64_t v29 = __ROR8__(v16 + v56 + v60 + v49, 21) + v60 + __ROR8__(v61, 44);
      uint64_t v30 = v61 + v49;
      unint64_t v32 = v51;
    }
    unint64_t v62 = 0x9DDFEA08EB382D69
        * (v29 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v29)));
    uint64_t v63 = v26 - 0x4B6D499041670D8DLL * (v5 ^ (v5 >> 47)) - 0x622015F714C7D297 * (v62 ^ (v62 >> 47));
    unint64_t v64 = 0x9DDFEA08EB382D69
        * ((v32
          - 0x4B6D499041670D8DLL * (v16 ^ (v16 >> 47))
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)))) >> 47))) ^ v63);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v63 ^ (v64 >> 47) ^ v64)) ^ ((0x9DDFEA08EB382D69 * (v63 ^ (v64 >> 47) ^ v64)) >> 47));
  }
  else
  {
    return __swift::__runtime::llvm::hashing::detail::hash_short((__swift::__runtime::llvm::hashing::detail *)a1, v5, v4);
  }
}

uint64_t *swift::MetadataCacheEntryBase<anonymous namespace'::TupleCacheEntry,swift::TargetTupleTypeMetadata<swift::InProcess>::Element>::awaitSatisfyingState(atomic_ullong *a1, uint64_t a2)
{
  char explicit = atomic_load_explicit(a1, memory_order_acquire);
  unsigned int v5 = explicit & 7;
  if (v5 - 1 >= 3)
  {
    if (v5 == 4) {
      return a1 + 14;
    }
    if ((explicit & 7) != 0) {
      goto LABEL_55;
    }
    uint64_t v7 = a2 & 0x100;
  }
  else
  {
    if (a2 > 0x3Eu)
    {
      if (a2 == 255) {
        goto LABEL_15;
      }
      if (a2 != 63) {
        goto LABEL_55;
      }
      if (v5 > 1) {
        goto LABEL_15;
      }
    }
    else if ((_BYTE)a2)
    {
      if (a2 != 1) {
        goto LABEL_55;
      }
      if (v5 > 2) {
        return a1 + 14;
      }
    }
    uint64_t v7 = a2 & 0x100;
    if ((explicit & 8) != 0 && (a2 & 0x100) != 0)
    {
LABEL_15:
      if (v5 - 1 < 3) {
        return a1 + 14;
      }
      goto LABEL_55;
    }
  }
  uint64_t v8 = 0;
  uint64_t v21 = &unk_1EB1F88C8;
  unint64_t v22 = 0;
  __int16 v23 = 0;
  int v9 = a2;
  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F88C8);
    if (v8)
    {
      if (*v8 == 1)
      {
        uint64_t v10 = v8[2];
        v8[2] = 0;
        if (v10) {
          MEMORY[0x1852FF000](v10, 0x80C4018A671A6);
        }
        swift_slowDealloc(v8);
      }
      else
      {
        --*v8;
      }
    }
    atomic_ullong v11 = *a1;
    uint64_t v12 = *a1 & 7;
    if ((v12 - 1) >= 3)
    {
      if (!v12) {
        goto LABEL_19;
      }
      if (v12 != 4) {
        goto LABEL_55;
      }
LABEL_46:
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F88C8);
      goto LABEL_49;
    }
    if (v9 > 62)
    {
      if (v9 == 63)
      {
        if (v12 > 1) {
          goto LABEL_48;
        }
        goto LABEL_34;
      }
      if (v9 != 255) {
        goto LABEL_55;
      }
LABEL_48:
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F88C8);
      if ((v12 - 1) >= 3) {
LABEL_55:
      }
        abort();
LABEL_49:
      uint64_t v6 = a1 + 14;
      goto LABEL_50;
    }
    if (v9)
    {
      if (v9 != 1) {
        goto LABEL_55;
      }
      if (v12 >= 3) {
        goto LABEL_46;
      }
    }
LABEL_34:
    if ((v11 & 8) == 0) {
      break;
    }
    if (v7) {
      goto LABEL_48;
    }
LABEL_19:
    uint64_t v8 = (void *)(v11 & 0xFFFFFFFFFFFFFFF0);
    ++*(void *)(v11 & 0xFFFFFFFFFFFFFFF0);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F88C8);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 & 0xFFFFFFFFFFFFFFF0 | 8));
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 & 0xFFFFFFFFFFFFFFF0 | 8));
  }
  unint64_t v13 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
  *(_OWORD *)unint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(void *)unint64_t v13 = 1;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 8));
  unint64_t v22 = (os_unfair_lock_s *)v13;
  uint64_t v14 = (_OWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    *(_OWORD *)(v13 + 24) = *v14;
    uint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10);
    *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0;
    uint64_t v16 = *(void *)(v13 + 16);
    *(void *)(v13 + 16) = v15;
    if (v16) {
      MEMORY[0x1852FF000](v16, 0x80C4018A671A6);
    }
  }
  atomic_store(v11 & 7 | v13 | 8, (unint64_t *)a1);
  LOBYTE(v23) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F88C8);
  HIBYTE(v23) = v12;
  if (v14)
  {
    uint64_t v17 = *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10);
    *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0;
    if (v17) {
      MEMORY[0x1852FF000](v17, 0x80C4018A671A6);
    }
    MEMORY[0x1852FF000](v11 & 0xFFFFFFFFFFFFFFF0, 0x1060C4048D9C6C4);
  }
LABEL_50:
  uint64_t v18 = v22;
  if (v22)
  {
    os_unfair_lock_unlock(v22 + 2);
    uint64_t v19 = *(void *)&v18[4]._os_unfair_lock_opaque;
    *(void *)&v18[4]._os_unfair_lock_opaque = 0;
    if (v19) {
      MEMORY[0x1852FF000](v19, 0x80C4018A671A6);
    }
    swift_slowDealloc(v18);
  }
  return v6;
}

uint64_t *swift::MetadataCacheEntryBase<anonymous namespace'::TupleCacheEntry,swift::TargetTupleTypeMetadata<swift::InProcess>::Element>::doInitialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int v5 = (unint64_t *)a1;
  uint64_t v6 = (uint64_t *)(a1 + 112);
  uint64_t v7 = (uint64_t *)(a1 + 136);
  unint64_t v83 = (uint64_t (**)())(a1 + 16);
  long long v84 = (uint64_t (***)())(a1 + 104);
  BOOL v81 = (void *)(a1 + 32);
  unint64_t v82 = (void *)(a1 + 24);
  unint64_t v79 = (void *)(a1 + 48);
  uint64_t v80 = (void *)(a1 + 40);
  uint64_t v77 = (void *)(a1 + 64);
  uint64_t v78 = (void *)(a1 + 56);
  uint64_t v87 = a3;
  int v8 = a3;
  unint64_t v76 = (void *)(a1 + 72);
  uint64_t v75 = *(void *)(a2 + 8);
  uint64_t v85 = v75;
  int v88 = a3;
  while (1)
  {
    unsigned int v89 = *(unsigned __int8 *)(a2 + 17);
    if (v89 == 3) {
      goto LABEL_7;
    }
    uint64_t v14 = v3;
    uint64_t v15 = v6;
    unint64_t v16 = v5[15];
    if (!v16) {
      break;
    }
    uint64_t v17 = 0;
    uint64_t v11 = 0;
    char v18 = 1;
    while (1)
    {
      uint64_t v19 = v7[2 * v17];
      uint64_t v90 = 319;
      performOnMetadataCache<swift::MetadataResponse,swift_checkMetadataState::CheckStateCallbacks>(v19, &v90);
      if (v20) {
        break;
      }
LABEL_14:
      if (v16 == ++v17) {
        goto LABEL_22;
      }
    }
    if (v20 <= 0x3F)
    {
      char v18 = 0;
      if (!v11)
      {
        if (v20 >= 2) {
          uint64_t v11 = v19;
        }
        else {
          uint64_t v11 = 0;
        }
      }
      goto LABEL_14;
    }
    unsigned __int8 v13 = 1;
    uint64_t v11 = v19;
    uint64_t v6 = v15;
    uint64_t v3 = v14;
    uint64_t v9 = 63;
    unsigned int v5 = (unint64_t *)a1;
    int v8 = v88;
    *(unsigned char *)(a2 + 17) = 1;
    if (!v19) {
      goto LABEL_131;
    }
LABEL_109:
    if (v13 - 1 >= 3)
    {
      if (v13 == 4) {
        goto LABEL_144;
      }
      goto LABEL_153;
    }
    if (v8 > 62)
    {
      if (v8 != 63)
      {
        uint64_t v85 = v75;
        if (v8 == 255) {
          goto LABEL_144;
        }
LABEL_153:
        abort();
      }
      if (v13 <= 1u && (v3 & 0x100) == 0) {
        goto LABEL_121;
      }
      uint64_t v70 = v85;
      if ((v13 & 0xFE) == 0) {
        uint64_t v70 = v75;
      }
      uint64_t v85 = v70;
LABEL_144:
      *(void *)(v85 + 16) = 0;
LABEL_145:
      operator new();
    }
    if (!v8)
    {
      if ((v3 & 0x100) != 0)
      {
        uint64_t v85 = v75;
        goto LABEL_144;
      }
      goto LABEL_121;
    }
    if (v8 != 1) {
      goto LABEL_153;
    }
    if (v13 > 2u || (v3 & 0x100) != 0)
    {
      uint64_t v69 = v85;
      if (v13 <= 2u) {
        uint64_t v69 = v75;
      }
      uint64_t v85 = v69;
      goto LABEL_144;
    }
LABEL_121:
    if (v89 < v13)
    {
      uint64_t v59 = *(os_unfair_lock_s **)a2;
      os_unfair_lock_lock(*(os_unfair_lock_t *)a2);
      unint64_t v60 = *(void **)(a2 + 8);
      if (*v60 == 1)
      {
        unint64_t v61 = *(void *)(a2 + 8);
      }
      else
      {
        unint64_t v61 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
        *(_OWORD *)unint64_t v61 = 0u;
        *(_OWORD *)(v61 + 16) = 0u;
        *(_OWORD *)(v61 + 32) = 0u;
        *(void *)unint64_t v61 = 1;
        *(void *)(v61 + 16) = 0;
        *(void *)(v61 + 24) = 0;
        os_unfair_lock_lock((os_unfair_lock_t)(v61 + 8));
        uint64_t v62 = v60[2];
        uint64_t v60[2] = 0;
        uint64_t v63 = *(void *)(v61 + 16);
        *(void *)(v61 + 16) = v62;
        if (v63) {
          MEMORY[0x1852FF000](v63, 0x80C4018A671A6);
        }
      }
      *(void *)(v61 + 24) = v11;
      *(void *)(v61 + 32) = v9;
      atomic_store(*(unsigned __int8 *)(a2 + 17) | v61 | 8, v5);
      BOOL v64 = v61 == (void)v60;
      int v8 = v88;
      if (!v64)
      {
        uint64_t v65 = v9;
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a2 + 8) + 8));
        int v66 = *(void **)(a2 + 8);
        if (*v66 == 1)
        {
          uint64_t v67 = v66[2];
          v66[2] = 0;
          if (v67) {
            MEMORY[0x1852FF000](v67, 0x80C4018A671A6);
          }
          swift_slowDealloc(v66);
        }
        else
        {
          --*v66;
        }
        *(void *)(a2 + 8) = v61;
        uint64_t v9 = v65;
        unsigned int v5 = (unint64_t *)a1;
      }
      os_unfair_lock_unlock(v59);
      uint64_t v85 = *(void *)(a2 + 8);
    }
    swift::blockOnMetadataDependency((uint64_t)v6, v87, v11, v9);
  }
  uint64_t v11 = 0;
  char v18 = 1;
LABEL_22:
  if (*v84)
  {
    uint64_t v6 = v15;
    unint64_t v22 = v82;
    uint64_t v21 = v83;
    unint64_t v24 = v80;
    __int16 v23 = v81;
    unint64_t v26 = v78;
    uint64_t v25 = v79;
    uint64_t v27 = *v84;
    uint64_t v3 = v14;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v6 = v15;
    uint64_t v3 = v14;
    unint64_t v22 = v82;
    uint64_t v21 = v83;
    unint64_t v24 = v80;
    __int16 v23 = v81;
    unint64_t v26 = v78;
    uint64_t v25 = v79;
  }
  uint64_t v90 = (uint64_t)v27;
  unsigned int v5 = (unint64_t *)a1;
  *(void *)(a1 + 104) = v21;
  uint64_t v28 = *(void *)(a1 + 120);
  if (v28)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    unint64_t v31 = 0;
    unsigned int v32 = 1;
    LOBYTE(v33) = 1;
    LOBYTE(v34) = 1;
    do
    {
      uint64_t v35 = &v7[2 * v29];
      uint64_t v36 = *(void *)(*v35 - 8);
      int v37 = *(_DWORD *)(v36 + 80);
      unint64_t v38 = (v30 + v37) & ~(unint64_t)v37;
      v35[1] = v38;
      unint64_t v30 = v38 + *(void *)(v36 + 64);
      if (v31 <= v37) {
        unint64_t v31 = v37;
      }
      int v33 = ((v37 & 0x10000) == 0) & v33;
      int v34 = ((v37 & 0x100000) == 0) & v34;
      uint64_t v29 = v32++;
    }
    while (v28 != v29);
    if (v31 >= 8 || v30 >= 0x19) {
      int v40 = 0;
    }
    else {
      int v40 = v34;
    }
    int v41 = v31;
    if (v33) {
      int v42 = 0;
    }
    else {
      int v42 = 0x10000;
    }
    if (!v34)
    {
      int v40 = 0;
      int v43 = 0x100000;
      goto LABEL_45;
    }
  }
  else
  {
    int v42 = 0;
    unint64_t v31 = 0;
    unint64_t v30 = 0;
    int v41 = 0;
    int v40 = 1;
  }
  int v43 = 0;
LABEL_45:
  if (v40) {
    int v44 = 0;
  }
  else {
    int v44 = 0x20000;
  }
  unint64_t v45 = (v30 + v31) & ~v31;
  *(_DWORD *)(a1 + 96) = v44 | v43 | v42 | v41;
  if (v45 <= 1) {
    unint64_t v45 = 1;
  }
  *(void *)(a1 + 80) = v30;
  *(void *)(a1 + 88) = v45;
  if (!v28)
  {
    *(_DWORD *)(a1 + 100) = 0;
    goto LABEL_59;
  }
  uint64_t v46 = 0;
  unsigned int v47 = 0;
  int v48 = -1;
  uint64_t v49 = v7;
  do
  {
    uint64_t v50 = *v49;
    v49 += 2;
    unsigned int v51 = *(_DWORD *)(*(void *)(v50 - 8) + 84);
    if (v51 > v47)
    {
      int v48 = v46;
      unsigned int v47 = v51;
    }
    ++v46;
  }
  while (v28 != v46);
  *(_DWORD *)(a1 + 100) = v47;
  if (!v47)
  {
LABEL_59:
    int v52 = 1;
    if (!v27) {
      goto LABEL_61;
    }
    goto LABEL_102;
  }
  int v52 = 0;
  *(_DWORD *)(a1 + 8) = v48;
  if (v27) {
    goto LABEL_102;
  }
LABEL_61:
  if (!v40)
  {
    if ((v42 & 0x10000) != 0)
    {
      if (!tuple_witnesses_nonpod_noninline) {
        goto LABEL_100;
      }
      uint64_t v54 = tuple_witnesses_nonpod_noninline;
    }
    else
    {
      if (!tuple_witnesses_pod_noninline) {
        goto LABEL_100;
      }
      uint64_t v54 = tuple_witnesses_pod_noninline;
    }
    goto LABEL_99;
  }
  if ((v42 & 0x10000) != 0)
  {
    if (!tuple_witnesses_nonpod_inline) {
      goto LABEL_100;
    }
    uint64_t v54 = tuple_witnesses_nonpod_inline;
    goto LABEL_99;
  }
  if (v30 == 8) {
    int v53 = v52;
  }
  else {
    int v53 = 0;
  }
  if (v53 != 1)
  {
    if (v30 == 4) {
      int v55 = v52;
    }
    else {
      int v55 = 0;
    }
    if (v55 == 1)
    {
      if (v41 != 3) {
        goto LABEL_97;
      }
      if (!&value witness table for Builtin.Int32) {
        goto LABEL_100;
      }
      uint64_t v54 = (uint64_t (**)())&value witness table for Builtin.Int32;
    }
    else
    {
      if (v30 == 2) {
        int v56 = v52;
      }
      else {
        int v56 = 0;
      }
      if (v56 == 1)
      {
        if (v41 != 1) {
          goto LABEL_97;
        }
        if (!&value witness table for Builtin.Int16) {
          goto LABEL_100;
        }
        uint64_t v54 = (uint64_t (**)())&value witness table for Builtin.Int16;
      }
      else
      {
        if (v30 == 1) {
          int v57 = v52;
        }
        else {
          int v57 = 0;
        }
        if (v57 != 1) {
          goto LABEL_97;
        }
        if (!&value witness table for Builtin.Int8) {
          goto LABEL_100;
        }
        uint64_t v54 = (uint64_t (**)())&value witness table for Builtin.Int8;
      }
    }
LABEL_99:
    uint64_t v27 = v54;
    goto LABEL_101;
  }
  if (v41 != 7)
  {
LABEL_97:
    if (!tuple_witnesses_pod_inline) {
      goto LABEL_100;
    }
    uint64_t v54 = tuple_witnesses_pod_inline;
    goto LABEL_99;
  }
  if (&value witness table for Builtin.Int64)
  {
    uint64_t v54 = (uint64_t (**)())&value witness table for Builtin.Int64;
    goto LABEL_99;
  }
LABEL_100:
  uint64_t v27 = 0;
LABEL_101:
  uint64_t v90 = (uint64_t)v27;
LABEL_102:
  if (*v27) {
    uint64_t v58 = *v27;
  }
  else {
    uint64_t v58 = 0;
  }
  *uint64_t v21 = v58;
  *unint64_t v22 = v27[1];
  *__int16 v23 = v27[2];
  *unint64_t v24 = v27[3];
  *uint64_t v25 = v27[4];
  *unint64_t v26 = v27[5];
  int v8 = v88;
  void *v77 = v27[6];
  *unint64_t v76 = v27[7];
  if (v18)
  {
    unsigned __int8 v13 = 4;
    *(unsigned char *)(a2 + 17) = 4;
    goto LABEL_131;
  }
  if (v11)
  {
    unsigned __int8 v13 = 3;
    uint64_t v9 = 1;
    *(unsigned char *)(a2 + 17) = 3;
    goto LABEL_109;
  }
LABEL_7:
  uint64_t v10 = checkTransitiveCompleteness(v6);
  uint64_t v11 = v10;
  uint64_t v9 = v12;
  if (v10) {
    unsigned __int8 v13 = 3;
  }
  else {
    unsigned __int8 v13 = 4;
  }
  *(unsigned char *)(a2 + 17) = v13;
  if (v10) {
    goto LABEL_109;
  }
LABEL_131:
  uint64_t v68 = *(void *)(v85 + 16);
  *(void *)(v85 + 16) = 0;
  if (v68) {
    goto LABEL_145;
  }
  uint64_t v71 = *(os_unfair_lock_s **)a2;
  os_unfair_lock_lock(*(os_unfair_lock_t *)a2);
  atomic_store(v13, v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a2 + 8) + 8));
  int v72 = *(void **)(a2 + 8);
  if (*v72 == 1)
  {
    uint64_t v73 = v72[2];
    v72[2] = 0;
    if (v73) {
      MEMORY[0x1852FF000](v73, 0x80C4018A671A6);
    }
    swift_slowDealloc(v72);
  }
  else
  {
    --*v72;
  }
  os_unfair_lock_unlock(v71);
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  if ((v13 - 1) >= 4u) {
    goto LABEL_153;
  }
  return v6;
}

void *tuple_initializeBufferWithCopyOfBuffer<true,true>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
}

void *tuple_initializeWithCopy<true,true>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
}

void *tuple_assignWithCopy<true,true>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
}

void *tuple_initializeWithTake<true,true>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
}

void *tuple_assignWithTake<true,true>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
}

uint64_t tuple_getEnumTagSinglePayload<true,true>(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)(a3 - 8) + 64);
  unsigned int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 84);
  BOOL v6 = a2 >= v5;
  unsigned int v7 = a2 - v5;
  if (v7 == 0 || !v6) {
    goto LABEL_12;
  }
  if (v4 > 3) {
    goto LABEL_6;
  }
  unsigned int v8 = ((v7 + ~(-1 << (8 * v4))) >> (8 * v4)) + 1;
  if (v8 < 2) {
    goto LABEL_12;
  }
  if (v8 >= 0x100) {
    int v9 = v8 >= 0x10000 ? *(_DWORD *)&a1[v4] : *(unsigned __int16 *)&a1[v4];
  }
  else {
LABEL_6:
  }
    int v9 = a1[v4];
  if (!v9)
  {
LABEL_12:
    if (!v5) {
      return 0;
    }
    uint64_t v12 = a3 + 16 * *(unsigned int *)(a3 - 104);
    if (*(void *)(*(void *)(v12 + 24) - 8)) {
      uint64_t v13 = *(void *)(*(void *)(v12 + 24) - 8);
    }
    else {
      uint64_t v13 = 0;
    }
    return (*(uint64_t (**)(unsigned __int8 *))(v13 + 48))(&a1[*(void *)(v12 + 32)]);
  }
  int v10 = (v9 - 1) << (8 * v4);
  if (v4 > 3) {
    int v10 = 0;
  }
  int v11 = 0;
  switch(v4)
  {
    case 0uLL:
      return v5 + (v11 | v10) + 1;
    case 1uLL:
      int v11 = *a1;
      break;
    case 2uLL:
      int v11 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v11 = *(_DWORD *)a1;
      break;
  }
  return v5 + (v11 | v10) + 1;
}

void tuple_storeEnumTagSinglePayload<true,true>(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

uint64_t tuple_storeExtraInhabitantTag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 16 * *(unsigned int *)(a4 - 104);
  if (*(void *)(*(void *)(v4 + 24) - 8)) {
    uint64_t v5 = *(void *)(*(void *)(v4 + 24) - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(*(void *)(v4 + 32) + a1);
}

uint64_t tuple_initializeBufferWithCopyOfBuffer<false,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 24;
    do
    {
      int v9 = (void *)(v7 + 16 * v6);
      uint64_t v10 = v9[1];
      if (*(void *)(*v9 - 8)) {
        uint64_t v8 = *(void *)(*v9 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 16))(a1 + v10, a2 + v10);
      ++v6;
    }
    while (v4 != v6);
  }
  return a1;
}

uint64_t tuple_destroy<false,true>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)(a2 + 32);
    do
    {
      if (*(void *)(*(v4 - 1) - 8)) {
        uint64_t v5 = *(void *)(*(v4 - 1) - 8);
      }
      else {
        uint64_t v5 = 0;
      }
      unint64_t result = (*(uint64_t (**)(uint64_t))(v5 + 8))(v3 + *v4);
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t tuple_initializeWithCopy<false,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 24;
    do
    {
      int v9 = (void *)(v7 + 16 * v6);
      uint64_t v10 = v9[1];
      if (*(void *)(*v9 - 8)) {
        uint64_t v8 = *(void *)(*v9 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 16))(a1 + v10, a2 + v10);
      ++v6;
    }
    while (v4 != v6);
  }
  return a1;
}

uint64_t tuple_assignWithCopy<false,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 24;
    do
    {
      int v9 = (void *)(v7 + 16 * v6);
      uint64_t v10 = v9[1];
      if (*(void *)(*v9 - 8)) {
        uint64_t v8 = *(void *)(*v9 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 24))(a1 + v10, a2 + v10);
      ++v6;
    }
    while (v4 != v6);
  }
  return a1;
}

uint64_t tuple_initializeWithTake<false,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 24;
    do
    {
      int v9 = (void *)(v7 + 16 * v6);
      uint64_t v10 = v9[1];
      if (*(void *)(*v9 - 8)) {
        uint64_t v8 = *(void *)(*v9 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 32))(a1 + v10, a2 + v10);
      ++v6;
    }
    while (v4 != v6);
  }
  return a1;
}

uint64_t tuple_assignWithTake<false,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 24;
    do
    {
      int v9 = (void *)(v7 + 16 * v6);
      uint64_t v10 = v9[1];
      if (*(void *)(*v9 - 8)) {
        uint64_t v8 = *(void *)(*v9 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 40))(a1 + v10, a2 + v10);
      ++v6;
    }
    while (v4 != v6);
  }
  return a1;
}

uint64_t tuple_getEnumTagSinglePayload<false,true>(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)(a3 - 8) + 64);
  unsigned int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 84);
  BOOL v6 = a2 >= v5;
  unsigned int v7 = a2 - v5;
  if (v7 == 0 || !v6) {
    goto LABEL_12;
  }
  if (v4 > 3) {
    goto LABEL_6;
  }
  unsigned int v8 = ((v7 + ~(-1 << (8 * v4))) >> (8 * v4)) + 1;
  if (v8 < 2) {
    goto LABEL_12;
  }
  if (v8 >= 0x100) {
    int v9 = v8 >= 0x10000 ? *(_DWORD *)&a1[v4] : *(unsigned __int16 *)&a1[v4];
  }
  else {
LABEL_6:
  }
    int v9 = a1[v4];
  if (!v9)
  {
LABEL_12:
    if (!v5) {
      return 0;
    }
    uint64_t v12 = a3 + 16 * *(unsigned int *)(a3 - 104);
    if (*(void *)(*(void *)(v12 + 24) - 8)) {
      uint64_t v13 = *(void *)(*(void *)(v12 + 24) - 8);
    }
    else {
      uint64_t v13 = 0;
    }
    return (*(uint64_t (**)(unsigned __int8 *))(v13 + 48))(&a1[*(void *)(v12 + 32)]);
  }
  int v10 = (v9 - 1) << (8 * v4);
  if (v4 > 3) {
    int v10 = 0;
  }
  int v11 = 0;
  switch(v4)
  {
    case 0uLL:
      return v5 + (v11 | v10) + 1;
    case 1uLL:
      int v11 = *a1;
      break;
    case 2uLL:
      int v11 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v11 = *(_DWORD *)a1;
      break;
  }
  return v5 + (v11 | v10) + 1;
}

void tuple_storeEnumTagSinglePayload<false,true>(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

unint64_t tuple_initializeBufferWithCopyOfBuffer<true,false>(atomic_ullong **a1, atomic_ullong **a2, uint64_t a3)
{
  unsigned int v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  return (unint64_t)*a1
       + ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80));
}

void *tuple_initializeWithCopy<true,false>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
}

void *tuple_assignWithCopy<true,false>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
}

void *tuple_initializeWithTake<true,false>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
}

void *tuple_assignWithTake<true,false>(void *a1, const void *a2, uint64_t a3)
{
  return memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
}

uint64_t tuple_getEnumTagSinglePayload<true,false>(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)(a3 - 8) + 64);
  unsigned int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 84);
  BOOL v6 = a2 >= v5;
  unsigned int v7 = a2 - v5;
  if (v7 == 0 || !v6) {
    goto LABEL_12;
  }
  if (v4 > 3) {
    goto LABEL_6;
  }
  unsigned int v8 = ((v7 + ~(-1 << (8 * v4))) >> (8 * v4)) + 1;
  if (v8 < 2) {
    goto LABEL_12;
  }
  if (v8 >= 0x100) {
    int v9 = v8 >= 0x10000 ? *(_DWORD *)&a1[v4] : *(unsigned __int16 *)&a1[v4];
  }
  else {
LABEL_6:
  }
    int v9 = a1[v4];
  if (!v9)
  {
LABEL_12:
    if (!v5) {
      return 0;
    }
    uint64_t v12 = a3 + 16 * *(unsigned int *)(a3 - 104);
    if (*(void *)(*(void *)(v12 + 24) - 8)) {
      uint64_t v13 = *(void *)(*(void *)(v12 + 24) - 8);
    }
    else {
      uint64_t v13 = 0;
    }
    return (*(uint64_t (**)(unsigned __int8 *))(v13 + 48))(&a1[*(void *)(v12 + 32)]);
  }
  int v10 = (v9 - 1) << (8 * v4);
  if (v4 > 3) {
    int v10 = 0;
  }
  int v11 = 0;
  switch(v4)
  {
    case 0uLL:
      return v5 + (v11 | v10) + 1;
    case 1uLL:
      int v11 = *a1;
      break;
    case 2uLL:
      int v11 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v11 = *(_DWORD *)a1;
      break;
  }
  return v5 + (v11 | v10) + 1;
}

void tuple_storeEnumTagSinglePayload<true,false>(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

unint64_t tuple_initializeBufferWithCopyOfBuffer<false,false>(atomic_ullong **a1, atomic_ullong **a2, uint64_t a3)
{
  unsigned int v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  return (unint64_t)*a1
       + ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80));
}

uint64_t tuple_destroy<false,false>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)(a2 + 32);
    do
    {
      if (*(void *)(*(v4 - 1) - 8)) {
        uint64_t v5 = *(void *)(*(v4 - 1) - 8);
      }
      else {
        uint64_t v5 = 0;
      }
      unint64_t result = (*(uint64_t (**)(uint64_t))(v5 + 8))(v3 + *v4);
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t tuple_initializeWithCopy<false,false>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 24;
    do
    {
      int v9 = (void *)(v7 + 16 * v6);
      uint64_t v10 = v9[1];
      if (*(void *)(*v9 - 8)) {
        uint64_t v8 = *(void *)(*v9 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 16))(a1 + v10, a2 + v10);
      ++v6;
    }
    while (v4 != v6);
  }
  return a1;
}

uint64_t tuple_assignWithCopy<false,false>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 24;
    do
    {
      int v9 = (void *)(v7 + 16 * v6);
      uint64_t v10 = v9[1];
      if (*(void *)(*v9 - 8)) {
        uint64_t v8 = *(void *)(*v9 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 24))(a1 + v10, a2 + v10);
      ++v6;
    }
    while (v4 != v6);
  }
  return a1;
}

uint64_t tuple_initializeWithTake<false,false>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 24;
    do
    {
      int v9 = (void *)(v7 + 16 * v6);
      uint64_t v10 = v9[1];
      if (*(void *)(*v9 - 8)) {
        uint64_t v8 = *(void *)(*v9 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 32))(a1 + v10, a2 + v10);
      ++v6;
    }
    while (v4 != v6);
  }
  return a1;
}

uint64_t tuple_assignWithTake<false,false>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 24;
    do
    {
      int v9 = (void *)(v7 + 16 * v6);
      uint64_t v10 = v9[1];
      if (*(void *)(*v9 - 8)) {
        uint64_t v8 = *(void *)(*v9 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 40))(a1 + v10, a2 + v10);
      ++v6;
    }
    while (v4 != v6);
  }
  return a1;
}

uint64_t tuple_getEnumTagSinglePayload<false,false>(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)(a3 - 8) + 64);
  unsigned int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 84);
  BOOL v6 = a2 >= v5;
  unsigned int v7 = a2 - v5;
  if (v7 == 0 || !v6) {
    goto LABEL_12;
  }
  if (v4 > 3) {
    goto LABEL_6;
  }
  unsigned int v8 = ((v7 + ~(-1 << (8 * v4))) >> (8 * v4)) + 1;
  if (v8 < 2) {
    goto LABEL_12;
  }
  if (v8 >= 0x100) {
    int v9 = v8 >= 0x10000 ? *(_DWORD *)&a1[v4] : *(unsigned __int16 *)&a1[v4];
  }
  else {
LABEL_6:
  }
    int v9 = a1[v4];
  if (!v9)
  {
LABEL_12:
    if (!v5) {
      return 0;
    }
    uint64_t v12 = a3 + 16 * *(unsigned int *)(a3 - 104);
    if (*(void *)(*(void *)(v12 + 24) - 8)) {
      uint64_t v13 = *(void *)(*(void *)(v12 + 24) - 8);
    }
    else {
      uint64_t v13 = 0;
    }
    return (*(uint64_t (**)(unsigned __int8 *))(v13 + 48))(&a1[*(void *)(v12 + 32)]);
  }
  int v10 = (v9 - 1) << (8 * v4);
  if (v4 > 3) {
    int v10 = 0;
  }
  int v11 = 0;
  switch(v4)
  {
    case 0uLL:
      return v5 + (v11 | v10) + 1;
    case 1uLL:
      int v11 = *a1;
      break;
    case 2uLL:
      int v11 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v11 = *(_DWORD *)a1;
      break;
  }
  return v5 + (v11 | v10) + 1;
}

void tuple_storeEnumTagSinglePayload<false,false>(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void std::__function::__func<getSuperclassMetadata::$_0,std::allocator<getSuperclassMetadata::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<getSuperclassMetadata::$_0,std::allocator<getSuperclassMetadata::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA066A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<getSuperclassMetadata::$_0,std::allocator<getSuperclassMetadata::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA066A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<getSuperclassMetadata::$_0,std::allocator<getSuperclassMetadata::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata(*(swift::SubstGenericParametersFromMetadata **)(a1 + 8), *a2, *a3);
}

void std::__function::__func<getSuperclassMetadata::$_1,std::allocator<getSuperclassMetadata::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<getSuperclassMetadata::$_1,std::allocator<getSuperclassMetadata::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA066E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<getSuperclassMetadata::$_1,std::allocator<getSuperclassMetadata::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA066E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<getSuperclassMetadata::$_1,std::allocator<getSuperclassMetadata::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::MetatypeCacheEntry>,swift::LazyMutex>::find<swift::TargetMetadata<swift::InProcess> const*>(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  unsigned int v5 = &unk_1EB1F3000;
  {
    unint64_t v22 = a1;
    uint64_t v20 = a4;
    unint64_t v18 = a3;
    unint64_t v21 = a2;
    unint64_t v19 = v4;
    unsigned int v5 = &unk_1EB1F3000;
    a3 = v18;
    unint64_t v4 = v19;
    a4 = v20;
    int v16 = v15;
    a2 = v21;
    a1 = v22;
    if (v16)
    {
      unint64_t v17 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unsigned int v5 = (void *)&unk_1EB1F3000;
      a3 = v18;
      unint64_t v4 = v19;
      a2 = v21;
      a1 = v22;
      a4 = v20;
    }
  }
  uint64_t v6 = (v5[38] + 8 * v4) ^ HIDWORD(v4);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
  uint64_t v8 = 0x1DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  int v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  if ((a2 & 3) == 0) {
    int v9 = 0;
  }
  while (2)
  {
    unint64_t v11 = v8 & ~(-1 << v10);
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v12) = v9 + v11;
        LOBYTE(v12) = atomic_load_explicit(&v9[v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v12) = v9 + 2 * v11;
        LOWORD(v12) = atomic_load_explicit((atomic_ushort *volatile)&v9[2 * v11], memory_order_acquire);
        if (!v12) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v12) = atomic_load_explicit((atomic_uint *volatile)&v9[4 * v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v12 = (a2 >> (4 * v11)) & 0xF;
        if (v12)
        {
LABEL_19:
          unint64_t v13 = (v12 - 1);
          if (v13 < a3 && *(void *)(*(void *)(a4 + 8 * v13) + 24) == *a1) {
            return a4 + 8 * v13;
          }
          uint64_t v8 = v11 + 1;
          continue;
        }
        return 0;
    }
  }
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ExistentialMetatypeCacheEntry>,swift::LazyMutex>::find<swift::TargetMetadata<swift::InProcess> const*>(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  unsigned int v5 = &unk_1EB1F3000;
  {
    unint64_t v22 = a1;
    uint64_t v20 = a4;
    unint64_t v18 = a3;
    unint64_t v21 = a2;
    unint64_t v19 = v4;
    unsigned int v5 = &unk_1EB1F3000;
    a3 = v18;
    unint64_t v4 = v19;
    a4 = v20;
    int v16 = v15;
    a2 = v21;
    a1 = v22;
    if (v16)
    {
      unint64_t v17 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unsigned int v5 = (void *)&unk_1EB1F3000;
      a3 = v18;
      unint64_t v4 = v19;
      a2 = v21;
      a1 = v22;
      a4 = v20;
    }
  }
  uint64_t v6 = (v5[38] + 8 * v4) ^ HIDWORD(v4);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
  uint64_t v8 = 0x1DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  int v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  if ((a2 & 3) == 0) {
    int v9 = 0;
  }
  while (2)
  {
    unint64_t v11 = v8 & ~(-1 << v10);
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v12) = v9 + v11;
        LOBYTE(v12) = atomic_load_explicit(&v9[v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v12) = v9 + 2 * v11;
        LOWORD(v12) = atomic_load_explicit((atomic_ushort *volatile)&v9[2 * v11], memory_order_acquire);
        if (!v12) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v12) = atomic_load_explicit((atomic_uint *volatile)&v9[4 * v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v12 = (a2 >> (4 * v11)) & 0xF;
        if (v12)
        {
LABEL_19:
          unint64_t v13 = (v12 - 1);
          if (v13 < a3 && *(void *)(*(void *)(a4 + 8 * v13) + 24) == *a1) {
            return a4 + 8 * v13;
          }
          uint64_t v8 = v11 + 1;
          continue;
        }
        return 0;
    }
  }
}

uint64_t (**getExistentialMetatypeValueWitnesses(unsigned int a1))()
{
  if (a1 < 3) {
    return off_1E4FC78D0[a1];
  }
  unsigned int v66 = a1;
  unint64_t explicit = atomic_load_explicit(&qword_1E8ECFA48, memory_order_acquire);
  if (!explicit || v66 != ((unint64_t)(*(void *)(explicit + 64) + 0x7FFFFFFF8) >> 3))
  {
    atomic_fetch_add_explicit(&ExistentialMetatypeValueWitnessTables, 1u, memory_order_acquire);
    do
    {
      unint64_t v2 = atomic_load_explicit(&qword_1E8ECFA28, memory_order_acquire);
      unint64_t v3 = atomic_load_explicit(&qword_1E8ECFA30, memory_order_acquire);
      unint64_t v4 = atomic_load_explicit(&dword_1E8ECFA24, memory_order_acquire);
    }
    while (v2 != atomic_load_explicit(&qword_1E8ECFA28, memory_order_acquire));
    if (v2) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5 && v4 != 0)
    {
      if (v7)
      {
        qword_1E8ECFA48 = *v7;
        unint64_t explicit = *v7;
        atomic_fetch_add_explicit(&ExistentialMetatypeValueWitnessTables, 0xFFFFFFFF, memory_order_release);
        return (uint64_t (**)())explicit;
      }
    }
    atomic_fetch_add_explicit(&ExistentialMetatypeValueWitnessTables, 0xFFFFFFFF, memory_order_release);
    unsigned int v67 = v66;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1E8ECFA38);
    unint64_t v8 = qword_1E8ECFA30;
    uint64_t v9 = qword_1E8ECFA30 & 3;
    BOOL v10 = v9 == 0;
    if ((qword_1E8ECFA30 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v10 = 1;
    }
    BOOL v65 = v10;
    if (v10) {
      int v11 = 4;
    }
    else {
      int v11 = *(unsigned __int8 *)(qword_1E8ECFA30 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v12 = dword_1E8ECFA24;
    unint64_t v13 = (_DWORD *)qword_1E8ECFA28;
    if (qword_1E8ECFA28) {
      uint64_t v14 = qword_1E8ECFA28 + 8;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v15)
    {
      unint64_t explicit = *v15;
      __dmb(0xBu);
      if (ExistentialMetatypeValueWitnessTables)
      {
LABEL_104:
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E8ECFA38);
        qword_1E8ECFA48 = explicit;
        return (uint64_t (**)())explicit;
      }
      unint64_t v17 = (void **)qword_1E8ECFA40;
      if (qword_1E8ECFA40)
      {
        do
        {
          unint64_t v18 = (void **)*v17;
          free(v17[1]);
          free(v17);
          unint64_t v17 = v18;
        }
        while (v18);
      }
LABEL_103:
      qword_1E8ECFA40 = 0;
      goto LABEL_104;
    }
    uint64_t v64 = v14;
    int __src = v13 + 2;
    uint64_t v19 = (v12 + 1);
    if ((1 << v11) / (unint64_t)((1 << v11) - v19) < 4)
    {
      unsigned int v26 = v16;
      unint64_t v27 = v8;
      if (!v13) {
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v62 = v13;
      unsigned int v20 = (v11 + 1);
      if (v20 >= 0x11) {
        unsigned int v21 = 4;
      }
      else {
        unsigned int v21 = 2;
      }
      if (v20 < 9) {
        size_t v22 = 1;
      }
      else {
        size_t v22 = v21;
      }
      unint64_t v23 = (unint64_t)malloc_type_calloc(2 << v11, v22, 0x4269077AuLL);
      if (!v23) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      uint64_t v24 = v14;
      char v25 = v11;
      unint64_t v60 = v12;
      uint64_t v61 = (v12 + 1);
      if (v22 != 1)
      {
        if (v22 == 4) {
          size_t v22 = 3;
        }
        else {
          size_t v22 = 2;
        }
      }
      unint64_t v27 = v22 | v23;
      *(unsigned char *)unint64_t v23 = v11 + 1;
      if (v11)
      {
        if (v9) {
          unint64_t v28 = v8 & 0xFFFFFFFFFFFFFFFCLL;
        }
        else {
          unint64_t v28 = 0;
        }
        unint64_t v29 = v27 & 3;
        if ((v27 & 3) != 0) {
          unint64_t v30 = v23 & 0xFFFFFFFFFFFFFFFCLL;
        }
        else {
          unint64_t v30 = 0;
        }
        uint64_t v31 = 1;
        unsigned int v32 = (void *)&unk_1EB1F3000;
        while (2)
        {
          switch(v8 & 3)
          {
            case 0uLL:
              uint64_t v33 = (v8 >> (4 * v31)) & 0xF;
              if (!v33) {
                goto LABEL_52;
              }
              goto LABEL_61;
            case 1uLL:
              LODWORD(v33) = *(unsigned __int8 *)(v28 + v31);
              if (*(unsigned char *)(v28 + v31)) {
                goto LABEL_61;
              }
              goto LABEL_52;
            case 2uLL:
              LODWORD(v33) = *(unsigned __int16 *)(v28 + 2 * v31);
              if (!*(_WORD *)(v28 + 2 * v31)) {
                goto LABEL_52;
              }
              goto LABEL_61;
            case 3uLL:
              LODWORD(v33) = *(_DWORD *)(v28 + 4 * v31);
              if (!v33) {
                goto LABEL_52;
              }
LABEL_61:
              uint64_t v34 = *(void *)(*(void *)(v24 + 8 * (v33 - 1)) + 64);
              {
                unint64_t v58 = v28;
                unint64_t v59 = v29;
                unsigned int v32 = &unk_1EB1F3000;
                unint64_t v28 = v58;
                unint64_t v29 = v59;
                char v25 = v11;
                uint64_t v24 = v64;
                if (v39)
                {
                  unint64_t v40 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
                  if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
                    unint64_t v40 = 0xFF51AFD7ED558CCDLL;
                  }
                  __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v40;
                  unsigned int v32 = (void *)&unk_1EB1F3000;
                  unint64_t v28 = v58;
                  unint64_t v29 = v59;
                  char v25 = v11;
                  uint64_t v24 = v64;
                }
              }
              unint64_t v35 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (v32[38] + ((v34 + 0x7FFFFFFF8) & 0x7FFFFFFF8))) ^ ((0x9DDFEA08EB382D69 * (v32[38] + ((v34 + 0x7FFFFFFF8) & 0x7FFFFFFF8))) >> 47));
              for (unint64_t i = 0x9DDFEA08EB382D69 * (v35 ^ (v35 >> 47)); ; unint64_t i = v38 + 1)
              {
                uint64_t v38 = i & ~(-2 << v11);
                if (v38)
                {
                  switch((int)v29)
                  {
                    case 1:
                      LODWORD(v37) = *(unsigned __int8 *)(v30 + v38);
                      break;
                    case 2:
                      LODWORD(v37) = *(unsigned __int16 *)(v30 + 2 * v38);
                      break;
                    case 3:
                      LODWORD(v37) = *(_DWORD *)(v30 + 4 * v38);
                      break;
                    default:
                      uint64_t v37 = (v27 >> (4 * v38)) & 0xF;
                      break;
                  }
                  if (!v37) {
                    break;
                  }
                }
              }
              if (v29 == 3)
              {
                *(_DWORD *)(v30 + 4 * v38) = v33;
              }
              else if (v29 == 2)
              {
                *(_WORD *)(v30 + 2 * v38) = v33;
              }
              else
              {
                *(unsigned char *)(v30 + v38) = v33;
              }
LABEL_52:
              if (!((unint64_t)++v31 >> v25)) {
                continue;
              }
              goto LABEL_79;
            default:
              JUMPOUT(0);
          }
        }
      }
LABEL_79:
      atomic_store(v27, (unint64_t *)&qword_1E8ECFA30);
      if (!v65)
      {
        int v41 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
        uint64_t v24 = v64;
        *int v41 = qword_1E8ECFA40;
        v41[1] = v8 & 0xFFFFFFFFFFFFFFFCLL;
        qword_1E8ECFA40 = (uint64_t)v41;
      }
      unint64_t v12 = v60;
      unsigned int v26 = v42;
      uint64_t v19 = v61;
      unint64_t v13 = v62;
      if (!v62) {
        goto LABEL_83;
      }
    }
    unint64_t v43 = (unint64_t)v13;
    if (v12 < *v13)
    {
LABEL_89:
      __int16 v68 = 5;
      uint64_t v49 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v68, 0x58uLL, 8);
      uint64_t v50 = v66;
      void *v49 = swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>,true>::initializeBufferWithCopyOfBuffer;
      v49[1] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::destroy;
      v49[2] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::initializeWithCopy;
      v49[3] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::assignWithCopy;
      v49[4] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::initializeWithTake;
      v49[5] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::assignWithTake;
      v49[6] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::getEnumTagSinglePayload;
      uint64_t v51 = 8 * v50 + 8;
      v49[7] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::storeEnumTagSinglePayload;
      v49[8] = v51;
      v49[9] = v51;
      v49[10] = 0x7FFFFFFF00020007;
      *(void *)(v43 + 8 * v12 + 8) = v49;
      atomic_store(v19, (unsigned int *)&dword_1E8ECFA24);
      unint64_t explicit = (unint64_t)v49;
      switch(v26)
      {
        case 1u:
          unint64_t v52 = v27 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v27 & 3) == 0) {
            unint64_t v52 = 0;
          }
          atomic_store(v19, (unsigned __int8 *)(v52 + v26));
          break;
        case 2u:
          unint64_t v53 = v27 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v27 & 3) == 0) {
            unint64_t v53 = 0;
          }
          atomic_store(v19, (unsigned __int16 *)(v53 + 2 * v26));
          break;
        case 3u:
          unint64_t v54 = v27 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v27 & 3) == 0) {
            unint64_t v54 = 0;
          }
          atomic_store(v19, (unsigned int *)(v54 + 4 * v26));
          break;
        default:
          atomic_store((v19 << (4 * v26)) | v27, (unint64_t *)&qword_1E8ECFA30);
          break;
      }
      __dmb(0xBu);
      if (ExistentialMetatypeValueWitnessTables) {
        goto LABEL_104;
      }
      int v55 = (void **)qword_1E8ECFA40;
      if (qword_1E8ECFA40)
      {
        do
        {
          int v56 = (void **)*v55;
          free(v55[1]);
          free(v55);
          int v55 = v56;
        }
        while (v56);
      }
      goto LABEL_103;
    }
LABEL_83:
    int v44 = v13;
    unint64_t v45 = v12 + (v12 >> 2);
    if (v45 <= v12 + 1) {
      unint64_t v45 = v12 + 1;
    }
    size_t v46 = malloc_good_size(8 * v45 + 8);
    unsigned int v47 = malloc_type_malloc(v46, 0x1000D770uLL);
    if (!v47) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    unint64_t v43 = (unint64_t)v47;
    *unsigned int v47 = (v46 + 0x7FFFFFFF8) >> 3;
    if (v44)
    {
      memcpy(v47 + 2, __src, 8 * v12);
      int v48 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
      void *v48 = qword_1E8ECFA40;
      v48[1] = v44;
      qword_1E8ECFA40 = (uint64_t)v48;
    }
    atomic_store(v43, (unint64_t *)&qword_1E8ECFA28);
    goto LABEL_89;
  }
  return (uint64_t (**)())explicit;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>,true,16ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer(void *result, void *a2)
{
  result[1] = a2[1];
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>::initializeWithCopy(void *result, void *a2)
{
  result[1] = a2[1];
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>::assignWithCopy(void *result, void *a2)
{
  result[1] = a2[1];
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>::initializeWithTake(void *result, void *a2)
{
  result[1] = a2[1];
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>::assignWithTake(void *result, void *a2)
{
  result[1] = a2[1];
  void *result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>,true,16ul,8ul,true>::getEnumTagSinglePayload(uint64_t a1, int a2)
{
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<1u>>,true,16ul,8ul,true>::storeEnumTagSinglePayload(uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
      *(void *)(result + 4) = 0;
      *(_DWORD *)(result + 12) = 0;
      return result;
    }
    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }
  if (a2 < 0)
  {
    *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 4) = 0;
    *(_DWORD *)(result + 12) = 0;
    *(unsigned char *)(result + 16) = 1;
    return result;
  }
  *(unsigned char *)(result + 16) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>,true,24ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer(void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>::initializeWithCopy(void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>::assignWithCopy(void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>::initializeWithTake(void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>::assignWithTake(void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  void *result = *a2;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>,true,24ul,8ul,true>::getEnumTagSinglePayload(uint64_t a1, int a2)
{
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ExistentialMetatypeBox<2u>>,true,24ul,8ul,true>::storeEnumTagSinglePayload(uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
      *(void *)(result + 12) = 0;
      *(void *)(result + 4) = 0;
      *(_DWORD *)(result + 20) = 0;
      return result;
    }
    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }
  if (a2 < 0)
  {
    *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 12) = 0;
    *(void *)(result + 4) = 0;
    *(_DWORD *)(result + 20) = 0;
    *(unsigned char *)(result + 24) = 1;
    return result;
  }
  *(unsigned char *)(result + 24) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ExistentialMetatypeValueWitnessTableCacheEntry>,swift::LazyMutex>::find<unsigned int>(_DWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  BOOL v5 = &unk_1EB1F3000;
  {
    unsigned int v21 = a1;
    uint64_t v19 = a4;
    unint64_t v17 = a3;
    unint64_t v20 = a2;
    uint64_t v18 = v4;
    BOOL v5 = &unk_1EB1F3000;
    a3 = v17;
    uint64_t v4 = v18;
    a4 = v19;
    int v15 = v14;
    a2 = v20;
    a1 = v21;
    if (v15)
    {
      unint64_t v16 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v16 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      BOOL v5 = (void *)&unk_1EB1F3000;
      a3 = v17;
      uint64_t v4 = v18;
      a2 = v20;
      a1 = v21;
      a4 = v19;
    }
  }
  unint64_t v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5[38] + 8 * v4)) ^ ((0x9DDFEA08EB382D69 * (v5[38] + 8 * v4)) >> 47));
  uint64_t v7 = 0x1DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  unint64_t v8 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v9 = 4;
  if ((a2 & 3) != 0 && v8) {
    char v9 = *v8;
  }
  if ((a2 & 3) == 0) {
    unint64_t v8 = 0;
  }
  while (2)
  {
    unint64_t v10 = v7 & ~(-1 << v9);
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v11) = v8 + v10;
        LOBYTE(v11) = atomic_load_explicit(&v8[v10], memory_order_acquire);
        if (v11) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v11) = v8 + 2 * v10;
        LOWORD(v11) = atomic_load_explicit((atomic_ushort *volatile)&v8[2 * v10], memory_order_acquire);
        if (!v11) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v11) = atomic_load_explicit((atomic_uint *volatile)&v8[4 * v10], memory_order_acquire);
        if (v11) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v11 = (a2 >> (4 * v10)) & 0xF;
        if (v11)
        {
LABEL_19:
          unint64_t v12 = (v11 - 1);
          if (v12 < a3
            && *a1 == ((unint64_t)(*(void *)(*(void *)(a4 + 8 * v12) + 64) + 0x7FFFFFFF8) >> 3))
          {
            return a4 + 8 * v12;
          }
          uint64_t v7 = v10 + 1;
          continue;
        }
        return 0;
    }
  }
}

char *swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>,true>::initializeBufferWithCopyOfBuffer(atomic_ullong **a1, atomic_ullong **a2, uint64_t a3)
{
  if (*(void *)(a3 - 8)) {
    uint64_t v3 = *(void *)(a3 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  return (char *)v4 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::initializeWithCopy(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD *)(a3 + 16) & 0xFFFFFF;
  if (v3)
  {
    uint64_t v4 = 0;
    if (v3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)((char *)result - (char *)a2) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v4 = *(_DWORD *)(a3 + 16) & 0xFFFFFCLL;
    BOOL v5 = (long long *)(a2 + 3);
    unint64_t v6 = result + 3;
    uint64_t v7 = v4;
    do
    {
      long long v8 = *v5;
      *(v6 - 1) = *(v5 - 1);
      *unint64_t v6 = v8;
      v5 += 2;
      v6 += 2;
      v7 -= 4;
    }
    while (v7);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v9 = v3 - v4;
      uint64_t v10 = 8 * v4 + 8;
      uint64_t v11 = (void *)((char *)result + v10);
      unint64_t v12 = (void *)((char *)a2 + v10);
      do
      {
        uint64_t v13 = *v12++;
        *v11++ = v13;
        --v9;
      }
      while (v9);
    }
  }
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::assignWithCopy(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD *)(a3 + 16) & 0xFFFFFF;
  if (v3)
  {
    uint64_t v4 = 0;
    if (v3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)((char *)result - (char *)a2) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v4 = *(_DWORD *)(a3 + 16) & 0xFFFFFCLL;
    BOOL v5 = (long long *)(a2 + 3);
    unint64_t v6 = result + 3;
    uint64_t v7 = v4;
    do
    {
      long long v8 = *v5;
      *(v6 - 1) = *(v5 - 1);
      *unint64_t v6 = v8;
      v5 += 2;
      v6 += 2;
      v7 -= 4;
    }
    while (v7);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v9 = v3 - v4;
      uint64_t v10 = 8 * v4 + 8;
      uint64_t v11 = (void *)((char *)result + v10);
      unint64_t v12 = (void *)((char *)a2 + v10);
      do
      {
        uint64_t v13 = *v12++;
        *v11++ = v13;
        --v9;
      }
      while (v9);
    }
  }
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::initializeWithTake(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD *)(a3 + 16) & 0xFFFFFF;
  if (v3)
  {
    uint64_t v4 = 0;
    if (v3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)((char *)result - (char *)a2) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v4 = *(_DWORD *)(a3 + 16) & 0xFFFFFCLL;
    BOOL v5 = (long long *)(a2 + 3);
    unint64_t v6 = result + 3;
    uint64_t v7 = v4;
    do
    {
      long long v8 = *v5;
      *(v6 - 1) = *(v5 - 1);
      *unint64_t v6 = v8;
      v5 += 2;
      v6 += 2;
      v7 -= 4;
    }
    while (v7);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v9 = v3 - v4;
      uint64_t v10 = 8 * v4 + 8;
      uint64_t v11 = (void *)((char *)result + v10);
      unint64_t v12 = (void *)((char *)a2 + v10);
      do
      {
        uint64_t v13 = *v12++;
        *v11++ = v13;
        --v9;
      }
      while (v9);
    }
  }
  void *result = *a2;
  return result;
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::assignWithTake(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD *)(a3 + 16) & 0xFFFFFF;
  if (v3)
  {
    uint64_t v4 = 0;
    if (v3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)((char *)result - (char *)a2) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v4 = *(_DWORD *)(a3 + 16) & 0xFFFFFCLL;
    BOOL v5 = (long long *)(a2 + 3);
    unint64_t v6 = result + 3;
    uint64_t v7 = v4;
    do
    {
      long long v8 = *v5;
      *(v6 - 1) = *(v5 - 1);
      *unint64_t v6 = v8;
      v5 += 2;
      v6 += 2;
      v7 -= 4;
    }
    while (v7);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v9 = v3 - v4;
      uint64_t v10 = 8 * v4 + 8;
      uint64_t v11 = (void *)((char *)result + v10);
      unint64_t v12 = (void *)((char *)a2 + v10);
      do
      {
        uint64_t v13 = *v12++;
        *v11++ = v13;
        --v9;
      }
      while (v9);
    }
  }
  void *result = *a2;
  return result;
}

uint64_t swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::getEnumTagSinglePayload(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unsigned int v5 = *(_DWORD *)(v3 + 84);
  if (a2 <= v5) {
    goto LABEL_11;
  }
  if (v4 > 3) {
    goto LABEL_5;
  }
  unsigned int v6 = ((a2 - v5 + ~(-1 << (8 * v4))) >> (8 * v4)) + 1;
  if (v6 < 2) {
    goto LABEL_11;
  }
  if (v6 >= 0x100)
  {
    if (v6 >= 0x10000) {
      int v7 = *(_DWORD *)&a1[v4];
    }
    else {
      int v7 = *(unsigned __int16 *)&a1[v4];
    }
  }
  else
  {
LABEL_5:
    int v7 = a1[v4];
  }
  if (!v7)
  {
LABEL_11:
    if (!v5) {
      return 0;
    }
    if (HIDWORD(*(void *)a1)) {
      return 0;
    }
    return *(void *)a1 + 1;
  }
  int v8 = (v7 - 1) << (8 * v4);
  if (v4 > 3) {
    int v8 = 0;
  }
  int v9 = 0;
  switch(v4)
  {
    case 0uLL:
      return v5 + (v9 | v8) + 1;
    case 1uLL:
      int v9 = *a1;
      break;
    case 2uLL:
      int v9 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v9 = *(_DWORD *)a1;
      break;
  }
  return v5 + (v9 | v8) + 1;
}

void swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::storeEnumTagSinglePayload(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedExistentialMetatypeBox,true>::storeExtraInhabitantTag(void *result, int a2)
{
  void *result = a2 - 1;
  return result;
}

uint64_t *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithCopy<swift::metadataimpl::OpaqueExistentialBox<0u>::Container>(uint64_t *a1, uint64_t a2)
{
  if ((uint64_t *)a2 != a1)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    uint64_t v5 = a1[3];
    if (v4 != v5)
    {
      int v7 = (uint64_t *)(v5 - 8);
      uint64_t v6 = *(void *)(v5 - 8);
      if (v6) {
        uint64_t v8 = *(void *)(v5 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      unint64_t v12 = (uint64_t *)(v4 - 8);
      uint64_t v11 = *(void *)(v4 - 8);
      if (v11)
      {
        uint64_t v13 = *(void *)(v4 - 8);
        if ((*(unsigned char *)(v8 + 82) & 2) == 0) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v13 = 0;
        if ((*(unsigned char *)(v8 + 82) & 2) == 0)
        {
LABEL_11:
          (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v25, a1, v5);
          a1[3] = *(void *)(a2 + 24);
          if ((*(unsigned char *)(v13 + 82) & 2) != 0)
          {
            unint64_t v17 = *(atomic_ullong **)a2;
            *a1 = *(void *)a2;
            swift_retain(v17);
            uint64_t v18 = *v7;
            if (!*v7)
            {
LABEL_27:
              uint64_t v19 = 0;
              goto LABEL_28;
            }
          }
          else
          {
            if (*v12) {
              uint64_t v14 = *v12;
            }
            else {
              uint64_t v14 = 0;
            }
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(a1, a2, v4);
            uint64_t v18 = *v7;
            if (!*v7) {
              goto LABEL_27;
            }
          }
          uint64_t v19 = v18;
LABEL_28:
          (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v25, v5);
          return a1;
        }
      }
      uint64_t v15 = *a1;
      a1[3] = v4;
      if ((*(unsigned char *)(v13 + 82) & 2) != 0)
      {
        unint64_t v20 = *(atomic_ullong **)a2;
        *a1 = *(void *)a2;
        swift_retain(v20);
      }
      else
      {
        if (v11) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = 0;
        }
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(a1, a2, v4);
      }
      uint64_t v23 = v15;
LABEL_32:
      swift_release(v23);
      return a1;
    }
    uint64_t v9 = *(void *)(v4 - 8);
    if (v9)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v9 + 82) & 2) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      if ((MEMORY[0x52] & 2) != 0)
      {
LABEL_24:
        unsigned int v21 = *(atomic_ullong **)a2;
        uint64_t v22 = *a1;
        *a1 = *(void *)a2;
        swift_retain(v21);
        uint64_t v23 = v22;
        goto LABEL_32;
      }
      uint64_t v10 = 0;
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 24))(a1, a2, v4);
  }
  return a1;
}

uint64_t *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithCopy<swift::metadataimpl::OpaqueExistentialBox<1u>::Container>(uint64_t *a1, uint64_t a2)
{
  if ((uint64_t *)a2 != a1)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    uint64_t v5 = a1[3];
    if (v4 != v5)
    {
      int v7 = (uint64_t *)(v5 - 8);
      uint64_t v6 = *(void *)(v5 - 8);
      if (v6) {
        uint64_t v8 = *(void *)(v5 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v11 = (uint64_t *)(v4 - 8);
      if (*(void *)(v4 - 8))
      {
        uint64_t v12 = *(void *)(v4 - 8);
        if ((*(unsigned char *)(v8 + 82) & 2) == 0) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v12 = 0;
        if ((*(unsigned char *)(v8 + 82) & 2) == 0)
        {
LABEL_11:
          (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v24, a1, v5);
          a1[3] = *(void *)(a2 + 24);
          a1[4] = *(void *)(a2 + 32);
          if ((*(unsigned char *)(v12 + 82) & 2) != 0)
          {
            uint64_t v16 = *(atomic_ullong **)a2;
            *a1 = *(void *)a2;
            swift_retain(v16);
            uint64_t v17 = *v7;
            if (!*v7)
            {
LABEL_27:
              uint64_t v18 = 0;
              goto LABEL_28;
            }
          }
          else
          {
            if (*v11) {
              uint64_t v13 = *v11;
            }
            else {
              uint64_t v13 = 0;
            }
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(a1, a2, v4);
            uint64_t v17 = *v7;
            if (!*v7) {
              goto LABEL_27;
            }
          }
          uint64_t v18 = v17;
LABEL_28:
          (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v24, v5);
          return a1;
        }
      }
      uint64_t v14 = *a1;
      a1[3] = v4;
      a1[4] = *(void *)(a2 + 32);
      if ((*(unsigned char *)(v12 + 82) & 2) != 0)
      {
        uint64_t v19 = *(atomic_ullong **)a2;
        *a1 = *(void *)a2;
        swift_retain(v19);
      }
      else
      {
        if (*v11) {
          uint64_t v15 = *v11;
        }
        else {
          uint64_t v15 = 0;
        }
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(a1, a2, v4);
      }
      uint64_t v22 = v14;
LABEL_32:
      swift_release(v22);
      return a1;
    }
    uint64_t v9 = *(void *)(v4 - 8);
    if (v9)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v9 + 82) & 2) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      if ((MEMORY[0x52] & 2) != 0)
      {
LABEL_24:
        unint64_t v20 = *(atomic_ullong **)a2;
        uint64_t v21 = *a1;
        *a1 = *(void *)a2;
        swift_retain(v20);
        uint64_t v22 = v21;
        goto LABEL_32;
      }
      uint64_t v10 = 0;
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 24))(a1, a2, v4);
  }
  return a1;
}

void *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithCopy<swift::metadataimpl::NonFixedOpaqueExistentialBox::Container,swift::TargetMetadata<swift::InProcess> const*>(void *a1, uint64_t a2, uint64_t a3)
{
  if ((void *)a2 != a1)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v6 = a1[3];
    if (v5 != v6)
    {
      uint64_t v9 = (uint64_t *)(v6 - 8);
      uint64_t v8 = *(void *)(v6 - 8);
      if (v8) {
        uint64_t v10 = *(void *)(v6 - 8);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v13 = (uint64_t *)(v5 - 8);
      if (*(void *)(v5 - 8))
      {
        uint64_t v14 = *(void *)(v5 - 8);
        if ((*(unsigned char *)(v10 + 82) & 2) == 0)
        {
LABEL_11:
          (*(void (**)(unsigned char *, void *, uint64_t))(v8 + 32))(v50, a1, v6);
          int v15 = *(_DWORD *)(a3 + 8);
          a1[3] = *(void *)(a2 + 24);
          uint64_t v16 = *(void *)&v15 & 0xFFFFFFLL;
          if (v16)
          {
            uint64_t v17 = 0;
            if (v16 < 8) {
              goto LABEL_17;
            }
            if ((unint64_t)a1 - a2 < 0x20) {
              goto LABEL_17;
            }
            uint64_t v17 = v16 & 0xFFFFFC;
            uint64_t v18 = (long long *)(a2 + 48);
            uint64_t v19 = a1 + 6;
            uint64_t v20 = v16 & 0xFFFFFC;
            do
            {
              long long v21 = *v18;
              *(v19 - 1) = *(v18 - 1);
              *uint64_t v19 = v21;
              v18 += 2;
              v19 += 2;
              v20 -= 4;
            }
            while (v20);
            if (v17 != v16)
            {
LABEL_17:
              uint64_t v22 = v16 - v17;
              uint64_t v23 = 8 * v17 + 32;
              uint64_t v24 = (void *)((char *)a1 + v23);
              char v25 = (uint64_t *)(a2 + v23);
              do
              {
                uint64_t v26 = *v25++;
                *v24++ = v26;
                --v22;
              }
              while (v22);
            }
          }
          if ((*(unsigned char *)(v14 + 82) & 2) != 0)
          {
            unsigned int v42 = *(atomic_ullong **)a2;
            *a1 = *(void *)a2;
            swift_retain(v42);
            uint64_t v43 = *v9;
            if (!*v9)
            {
LABEL_43:
              uint64_t v44 = 0;
              goto LABEL_44;
            }
          }
          else
          {
            if (*v13) {
              uint64_t v27 = *v13;
            }
            else {
              uint64_t v27 = 0;
            }
            (*(void (**)(void *, uint64_t, uint64_t))(v27 + 16))(a1, a2, v5);
            uint64_t v43 = *v9;
            if (!*v9) {
              goto LABEL_43;
            }
          }
          uint64_t v44 = v43;
LABEL_44:
          (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v50, v6);
          return a1;
        }
      }
      else
      {
        uint64_t v14 = 0;
        if ((*(unsigned char *)(v10 + 82) & 2) == 0) {
          goto LABEL_11;
        }
      }
      uint64_t v28 = *a1;
      int v29 = *(_DWORD *)(a3 + 8);
      a1[3] = v5;
      uint64_t v30 = *(void *)&v29 & 0xFFFFFFLL;
      if (v30)
      {
        uint64_t v31 = 0;
        if (v30 < 8) {
          goto LABEL_29;
        }
        if ((unint64_t)a1 - a2 < 0x20) {
          goto LABEL_29;
        }
        uint64_t v31 = v30 & 0xFFFFFC;
        unsigned int v32 = (long long *)(a2 + 48);
        uint64_t v33 = a1 + 6;
        uint64_t v34 = v30 & 0xFFFFFC;
        do
        {
          long long v35 = *v32;
          *(v33 - 1) = *(v32 - 1);
          *uint64_t v33 = v35;
          v32 += 2;
          v33 += 2;
          v34 -= 4;
        }
        while (v34);
        if (v31 != v30)
        {
LABEL_29:
          uint64_t v36 = v30 - v31;
          uint64_t v37 = 8 * v31 + 32;
          uint64_t v38 = (void *)((char *)a1 + v37);
          int v39 = (uint64_t *)(a2 + v37);
          do
          {
            uint64_t v40 = *v39++;
            *v38++ = v40;
            --v36;
          }
          while (v36);
        }
      }
      if ((*(unsigned char *)(v14 + 82) & 2) != 0)
      {
        unint64_t v45 = *(atomic_ullong **)a2;
        *a1 = *(void *)a2;
        swift_retain(v45);
      }
      else
      {
        if (*v13) {
          uint64_t v41 = *v13;
        }
        else {
          uint64_t v41 = 0;
        }
        (*(void (**)(void *, uint64_t, uint64_t))(v41 + 16))(a1, a2, v5);
      }
      uint64_t v48 = v28;
LABEL_48:
      swift_release(v48);
      return a1;
    }
    uint64_t v11 = *(void *)(v5 - 8);
    if (v11)
    {
      uint64_t v12 = *(void *)(v5 - 8);
      if ((*(unsigned char *)(v11 + 82) & 2) != 0) {
        goto LABEL_40;
      }
    }
    else
    {
      if ((MEMORY[0x52] & 2) != 0)
      {
LABEL_40:
        size_t v46 = *(atomic_ullong **)a2;
        uint64_t v47 = *a1;
        *a1 = *(void *)a2;
        swift_retain(v46);
        uint64_t v48 = v47;
        goto LABEL_48;
      }
      uint64_t v12 = 0;
    }
    (*(void (**)(void *, uint64_t, uint64_t))(v12 + 24))(a1, a2, v5);
  }
  return a1;
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ExistentialCacheEntry>,swift::LazyMutex>::find<anonymous namespace'::ExistentialCacheEntry::Key>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  char v29 = v8 & 1;
  LODWORD(v28) = v8 >> 1;
  unint64_t v9 = __swift::__runtime::llvm::hash_combine<swift::TargetMetadata<swift::InProcess> const*,swift::ProtocolClassConstraint,unsigned int>((void *)a1, &v29, (int *)&v28);
  unint64_t v30 = v9;
  if (*(_DWORD *)(a1 + 8) >= 2u)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v28 = *(void *)(*(void *)(a1 + 16) + 8 * v10);
      unint64_t v9 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>(&v30, &v28);
      unint64_t v30 = v9;
      ++v10;
    }
    while (v10 != (unint64_t)*(unsigned int *)(a1 + 8) >> 1);
  }
  uint64_t v11 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v12 = 4;
  if ((a2 & 3) != 0 && v11) {
    char v12 = *v11;
  }
  uint64_t v13 = ~(-1 << v12);
  if ((a2 & 3) == 0) {
    uint64_t v11 = 0;
  }
  while (2)
  {
    uint64_t v14 = v9 & v13;
    if ((v9 & v13) <= 1) {
      uint64_t v14 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v15) = v11 + v14;
        LOBYTE(v15) = atomic_load_explicit(&v11[v14], memory_order_acquire);
        if (v15) {
          goto LABEL_21;
        }
        return 0;
      case 2uLL:
        LODWORD(v15) = v11 + 2 * v14;
        LOWORD(v15) = atomic_load_explicit((atomic_ushort *volatile)&v11[2 * v14], memory_order_acquire);
        if (!v15) {
          return 0;
        }
        goto LABEL_21;
      case 3uLL:
        LODWORD(v15) = atomic_load_explicit((atomic_uint *volatile)&v11[4 * v14], memory_order_acquire);
        if (v15) {
          goto LABEL_21;
        }
        return 0;
      default:
        uint64_t v15 = (a2 >> (4 * v14)) & 0xF;
        if (v15)
        {
LABEL_21:
          unint64_t v16 = (v15 - 1);
          if (v16 < a3)
          {
            uint64_t v17 = *(void *)(a4 + 8 * v16);
            unint64_t v18 = *(unsigned int *)(a1 + 8);
            unint64_t v19 = *(unsigned int *)(v17 + 16);
            if (((v18 ^ ((v19 & 0x80000000) != 0)) & 1) == 0)
            {
              uint64_t v20 = (v19 & 0x40000000) != 0 ? *(void *)(v17 + 24) : 0;
              if (*(void *)a1 == v20)
              {
                unint64_t v21 = v18 >> 1;
                if (*(_DWORD *)(a1 + 8) >> 1 == *(_DWORD *)(v17 + 20))
                {
                  if (v18 < 2) {
                    return a4 + 8 * v16;
                  }
                  uint64_t v22 = *(uint64_t **)(a1 + 16);
                  uint64_t v23 = (uint64_t *)(v17 + 8 * ((v19 >> 30) & 1) + 24);
                  while (1)
                  {
                    uint64_t v25 = *v22++;
                    uint64_t v24 = v25;
                    uint64_t v26 = *v23++;
                    if (v24 != v26) {
                      break;
                    }
                    if (!--v21) {
                      return a4 + 8 * v16;
                    }
                  }
                }
              }
            }
          }
          unint64_t v9 = v14 + 1;
          continue;
        }
        return 0;
    }
  }
}

unint64_t __swift::__runtime::llvm::hash_combine<swift::TargetMetadata<swift::InProcess> const*,swift::ProtocolClassConstraint,unsigned int>(void *a1, char *a2, int *a3)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  {
    uint64_t v10 = a2;
    uint64_t v11 = a1;
    a2 = v10;
    a1 = v11;
    if (v8)
    {
      unint64_t v9 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a2 = v10;
      a1 = v11;
    }
  }
  uint64_t v4 = *a1;
  uint64_t v15 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v12[0] = v4;
  uint64_t v16 = 0;
  uint64_t v5 = __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<swift::ProtocolClassConstraint>((uint64_t)v12, &v16, (unsigned char *)v12 + 8, (unint64_t)v13, *a2);
  uint64_t v17 = v16;
  uint64_t v6 = (char *)__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)v12, &v17, v5, (unint64_t)v13, *a3);
  return __swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine((__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper *)v12, v17, v6, (char *)v13);
}

unsigned char *__swift::__runtime::llvm::hashing::detail::hash_combine_recursive_helper::combine_data<swift::ProtocolClassConstraint>(uint64_t a1, uint64_t *a2, unsigned char *__dst, unint64_t a4, char a5)
{
  char __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      __swift::__runtime::llvm::hashing::detail::hash_state::mix((unint64_t *)(a1 + 64), (const char *)a1);
      uint64_t v9 = *a2 + 64;
    }
    else
    {
      unint64_t v10 = *(void *)(a1 + 120);
      uint64_t v11 = __ROR8__(v10 ^ 0xB492B66FBE98F273, 49);
      unint64_t v12 = v10 ^ (v10 >> 47);
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = v13 + v10 + v11;
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = v17 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v15 + v10 - 0x4B6D499041670D8DLL * v10, 42);
      unint64_t v19 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v10 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v10 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      unint64_t v20 = 0x9DDFEA08EB382D69
          * (v10 ^ (((0x9DDFEA08EB382D69 * (v12 ^ (0xB492B66FBE98F273 * v10))) ^ v10) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v12 ^ (0xB492B66FBE98F273 * v10))));
      unint64_t v21 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
      unint64_t v22 = 0xB492B66FBE98F273 * __ROR8__(v12 - 0x622015F714C7D297 * (v19 ^ (v19 >> 47)), 33);
      uint64_t v23 = *(void *)a1 - 0x6D8ED9027DD26057 * v10;
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      uint64_t v26 = v23 + v13 + v25;
      unint64_t v27 = v21 ^ (0xB492B66FBE98F273 * __ROR8__(v14, 37));
      unint64_t v28 = v22 + *(void *)(a1 + 32) + v21;
      *(void *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = v18;
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + 88) = v26 + v24;
      *(void *)(a1 + 96) = __ROR8__(v26, 44) + v23 + __ROR8__(v23 + v12 + v24 + v27, 21);
      *(void *)(a1 + 104) = v17 + v15 + v28 + v16;
      *(void *)(a1 + 112) = __ROR8__(v18 + v25 + v16 + v28, 21) + v28 + __ROR8__(v17 + v15 + v28, 44);
      uint64_t v9 = 64;
    }
    *a2 = v9;
    if (a1 + 1 - v8 <= a4)
    {
      memcpy((void *)a1, &__src + v8, 1 - v8);
      a1 += 1 - v8;
    }
  }
  return (unsigned char *)a1;
}

uint64_t (**getExistentialValueWitnesses(char a1, unsigned int a2, int a3))()
{
  if (a3 == 1) {
    return (uint64_t (**)())&value witness table for Builtin.UnknownObject;
  }
  if ((a1 & 1) == 0)
  {
    if (a2 < 3) {
      return (uint64_t (**)())*(&off_1E4FC78E8 + (int)a2);
    }
    unsigned int v132 = a2;
    unint64_t explicit = atomic_load_explicit(&qword_1E8ECFA78, memory_order_acquire);
    if (explicit && v132 == ((unint64_t)(*(void *)(explicit + 64) + 0x7FFFFFFF8) >> 3)) {
      return (uint64_t (**)())explicit;
    }
    uint64_t v4 = &ClassExistentialValueWitnessTables;
    atomic_fetch_add_explicit(&ClassExistentialValueWitnessTables, 1u, memory_order_acquire);
    do
    {
      unint64_t v5 = atomic_load_explicit(&qword_1E8ECFA58, memory_order_acquire);
      unint64_t v6 = atomic_load_explicit(&qword_1E8ECFA60, memory_order_acquire);
      unint64_t v7 = atomic_load_explicit(&dword_1E8ECFA54, memory_order_acquire);
    }
    while (v5 != atomic_load_explicit(&qword_1E8ECFA58, memory_order_acquire));
    if (v5) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8 && v7 != 0)
    {
      if (v10) {
        goto LABEL_38;
      }
    }
    atomic_fetch_add_explicit(&ClassExistentialValueWitnessTables, 0xFFFFFFFF, memory_order_release);
    unsigned int v133 = v132;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1E8ECFA68);
    unint64_t v11 = qword_1E8ECFA60;
    uint64_t v12 = qword_1E8ECFA60 & 3;
    BOOL v13 = v12 == 0;
    if ((qword_1E8ECFA60 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v13 = 1;
    }
    BOOL v130 = v13;
    if (v13) {
      int v14 = 4;
    }
    else {
      int v14 = *(unsigned __int8 *)(qword_1E8ECFA60 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v24 = dword_1E8ECFA54;
    uint64_t v25 = (_DWORD *)qword_1E8ECFA58;
    if (qword_1E8ECFA58) {
      uint64_t v26 = qword_1E8ECFA58 + 8;
    }
    else {
      uint64_t v26 = 0;
    }
    if (v27)
    {
      unint64_t explicit = *v27;
      __dmb(0xBu);
      if (ClassExistentialValueWitnessTables)
      {
LABEL_148:
        uint64_t v85 = (os_unfair_lock_s *)&unk_1E8ECFA68;
LABEL_211:
        os_unfair_lock_unlock(v85);
        *(void *)&v85[4]._os_unfair_lock_opaque = explicit;
        return (uint64_t (**)())explicit;
      }
      char v29 = (void **)qword_1E8ECFA70;
      if (qword_1E8ECFA70)
      {
        do
        {
          unint64_t v30 = (void **)*v29;
          free(v29[1]);
          free(v29);
          char v29 = v30;
        }
        while (v30);
      }
    }
    else
    {
      uint64_t v128 = v26;
      char __src = v25 + 2;
      uint64_t v31 = (v24 + 1);
      if ((1 << v14) / (unint64_t)((1 << v14) - v31) < 4)
      {
        unsigned int v52 = v28;
        unint64_t v53 = v11;
      }
      else
      {
        uint64_t v124 = v25;
        unsigned int v32 = (v14 + 1);
        if (v32 >= 0x11) {
          unsigned int v33 = 4;
        }
        else {
          unsigned int v33 = 2;
        }
        if (v32 < 9) {
          size_t v34 = 1;
        }
        else {
          size_t v34 = v33;
        }
        unint64_t v35 = (unint64_t)malloc_type_calloc(2 << v14, v34, 0x4269077AuLL);
        if (!v35) {
          swift::hashable_support::findHashableBaseTypeOfHashableType();
        }
        uint64_t v36 = v26;
        char v37 = v14;
        unint64_t v120 = v24;
        uint64_t v122 = (v24 + 1);
        if (v34 != 1)
        {
          if (v34 == 4) {
            size_t v34 = 3;
          }
          else {
            size_t v34 = 2;
          }
        }
        unint64_t v53 = v34 | v35;
        *(unsigned char *)unint64_t v35 = v14 + 1;
        if (v14)
        {
          if (v12) {
            unint64_t v56 = v11 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t v56 = 0;
          }
          unint64_t v57 = v53 & 3;
          if ((v53 & 3) != 0) {
            unint64_t v58 = v35 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t v58 = 0;
          }
          uint64_t v59 = 1;
          unint64_t v60 = (void *)&unk_1EB1F3000;
          while (2)
          {
            switch(v11 & 3)
            {
              case 0uLL:
                uint64_t v61 = (v11 >> (4 * v59)) & 0xF;
                if (!v61) {
                  goto LABEL_95;
                }
                goto LABEL_104;
              case 1uLL:
                LODWORD(v61) = *(unsigned __int8 *)(v56 + v59);
                if (!*(unsigned char *)(v56 + v59)) {
                  goto LABEL_95;
                }
                goto LABEL_104;
              case 2uLL:
                LODWORD(v61) = *(unsigned __int16 *)(v56 + 2 * v59);
                if (!*(_WORD *)(v56 + 2 * v59)) {
                  goto LABEL_95;
                }
                goto LABEL_104;
              case 3uLL:
                LODWORD(v61) = *(_DWORD *)(v56 + 4 * v59);
                if (v61)
                {
LABEL_104:
                  uint64_t v62 = *(void *)(*(void *)(v36 + 8 * (v61 - 1)) + 64);
                  {
                    unint64_t v116 = v56;
                    unint64_t v118 = v57;
                    unint64_t v60 = &unk_1EB1F3000;
                    unint64_t v56 = v116;
                    unint64_t v57 = v118;
                    char v37 = v14;
                    uint64_t v36 = v128;
                    if (v67)
                    {
                      unint64_t v68 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
                      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
                        unint64_t v68 = 0xFF51AFD7ED558CCDLL;
                      }
                      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v68;
                      unint64_t v60 = (void *)&unk_1EB1F3000;
                      unint64_t v56 = v116;
                      unint64_t v57 = v118;
                      char v37 = v14;
                      uint64_t v36 = v128;
                    }
                  }
                  unint64_t v63 = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * (v60[38] + ((v62 + 0x7FFFFFFF8) & 0x7FFFFFFF8))) ^ ((0x9DDFEA08EB382D69 * (v60[38] + ((v62 + 0x7FFFFFFF8) & 0x7FFFFFFF8))) >> 47));
                  for (unint64_t i = 0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47)); ; unint64_t i = v66 + 1)
                  {
                    uint64_t v66 = i & ~(-2 << v14);
                    if (v66)
                    {
                      switch((int)v57)
                      {
                        case 1:
                          LODWORD(v65) = *(unsigned __int8 *)(v58 + v66);
                          break;
                        case 2:
                          LODWORD(v65) = *(unsigned __int16 *)(v58 + 2 * v66);
                          break;
                        case 3:
                          LODWORD(v65) = *(_DWORD *)(v58 + 4 * v66);
                          break;
                        default:
                          uint64_t v65 = (v53 >> (4 * v66)) & 0xF;
                          break;
                      }
                      if (!v65) {
                        break;
                      }
                    }
                  }
                  if (v57 == 3)
                  {
                    *(_DWORD *)(v58 + 4 * v66) = v61;
                  }
                  else if (v57 == 2)
                  {
                    *(_WORD *)(v58 + 2 * v66) = v61;
                  }
                  else
                  {
                    *(unsigned char *)(v58 + v66) = v61;
                  }
                }
LABEL_95:
                if (!((unint64_t)++v59 >> v37)) {
                  continue;
                }
                goto LABEL_122;
              default:
LABEL_217:
                JUMPOUT(0);
            }
          }
        }
LABEL_122:
        atomic_store(v53, (unint64_t *)&qword_1E8ECFA60);
        if (!v130)
        {
          uint64_t v69 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
          uint64_t v36 = v128;
          *uint64_t v69 = qword_1E8ECFA70;
          v69[1] = v11 & 0xFFFFFFFFFFFFFFFCLL;
          qword_1E8ECFA70 = (uint64_t)v69;
        }
        unint64_t v24 = v120;
        unsigned int v52 = v70;
        uint64_t v31 = v122;
        uint64_t v25 = v124;
      }
      if (!v25 || (unint64_t v71 = (unint64_t)v25, v24 >= *v25))
      {
        int v72 = v25;
        unint64_t v73 = v24 + (v24 >> 2);
        if (v73 <= v24 + 1) {
          unint64_t v73 = v24 + 1;
        }
        size_t v74 = malloc_good_size(8 * v73 + 8);
        uint64_t v75 = malloc_type_malloc(v74, 0x1000D770uLL);
        if (!v75) {
          swift::hashable_support::findHashableBaseTypeOfHashableType();
        }
        unint64_t v71 = (unint64_t)v75;
        *uint64_t v75 = (v74 + 0x7FFFFFFF8) >> 3;
        if (v72)
        {
          memcpy(v75 + 2, __src, 8 * v24);
          unint64_t v76 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
          *unint64_t v76 = qword_1E8ECFA70;
          v76[1] = v72;
          qword_1E8ECFA70 = (uint64_t)v76;
        }
        atomic_store(v71, (unint64_t *)&qword_1E8ECFA58);
      }
      __int16 v134 = 9;
      uint64_t v77 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v134, 0x58uLL, 8);
      uint64_t v78 = v132;
      void *v77 = swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>,true>::initializeBufferWithCopyOfBuffer;
      v77[1] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::destroy;
      v77[2] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::initializeWithCopy;
      v77[3] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::assignWithCopy;
      v77[4] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::initializeWithTake;
      v77[5] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::assignWithTake;
      v77[6] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::getEnumTagSinglePayload;
      uint64_t v79 = 8 * v78 + 8;
      v77[7] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::storeEnumTagSinglePayload;
      v77[8] = v79;
      v77[10] = 0x7FFFFFFF00030007;
      v77[9] = v79;
      *(void *)(v71 + 8 * v24 + 8) = v77;
      atomic_store(v31, (unsigned int *)&dword_1E8ECFA54);
      unint64_t explicit = (unint64_t)v77;
      switch(v52)
      {
        case 1u:
          unint64_t v80 = v53 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v53 & 3) == 0) {
            unint64_t v80 = 0;
          }
          atomic_store(v31, (unsigned __int8 *)(v80 + v52));
          break;
        case 2u:
          unint64_t v81 = v53 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v53 & 3) == 0) {
            unint64_t v81 = 0;
          }
          atomic_store(v31, (unsigned __int16 *)(v81 + 2 * v52));
          break;
        case 3u:
          unint64_t v82 = v53 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v53 & 3) == 0) {
            unint64_t v82 = 0;
          }
          atomic_store(v31, (unsigned int *)(v82 + 4 * v52));
          break;
        default:
          atomic_store((v31 << (4 * v52)) | v53, (unint64_t *)&qword_1E8ECFA60);
          break;
      }
      __dmb(0xBu);
      if (ClassExistentialValueWitnessTables) {
        goto LABEL_148;
      }
      unint64_t v83 = (void **)qword_1E8ECFA70;
      if (qword_1E8ECFA70)
      {
        do
        {
          long long v84 = (void **)*v83;
          free(v83[1]);
          free(v83);
          unint64_t v83 = v84;
        }
        while (v84);
      }
    }
    qword_1E8ECFA70 = 0;
    goto LABEL_148;
  }
  if (!a2) {
    return OpaqueExistentialValueWitnesses_0;
  }
  if (a2 == 1) {
    return OpaqueExistentialValueWitnesses_1;
  }
  unsigned int v132 = a2;
  unint64_t explicit = atomic_load_explicit(&qword_1EB208B48, memory_order_acquire);
  if (!explicit || v132 != ((unint64_t)(*(void *)(explicit + 64) + 0x7FFFFFFE0) >> 3))
  {
    uint64_t v4 = &OpaqueExistentialValueWitnessTables;
    atomic_fetch_add_explicit(&OpaqueExistentialValueWitnessTables, 1u, memory_order_acquire);
    do
    {
      unint64_t v15 = atomic_load_explicit(&qword_1EB208B28, memory_order_acquire);
      unint64_t v16 = atomic_load_explicit(&qword_1EB208B30, memory_order_acquire);
      unint64_t v17 = atomic_load_explicit(&dword_1EB208B24, memory_order_acquire);
    }
    while (v15 != atomic_load_explicit(&qword_1EB208B28, memory_order_acquire));
    if (v15) {
      BOOL v18 = v16 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18 && v17 != 0)
    {
      if (v10)
      {
LABEL_38:
        *((void *)v4 + 5) = *v10;
        unint64_t explicit = *v10;
        atomic_fetch_add_explicit(v4, 0xFFFFFFFF, memory_order_release);
        return (uint64_t (**)())explicit;
      }
    }
    atomic_fetch_add_explicit(&OpaqueExistentialValueWitnessTables, 0xFFFFFFFF, memory_order_release);
    unsigned int v133 = v132;
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB208B38);
    unint64_t v20 = qword_1EB208B30;
    uint64_t v21 = qword_1EB208B30 & 3;
    BOOL v22 = v21 == 0;
    if ((qword_1EB208B30 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
      BOOL v22 = 1;
    }
    BOOL v131 = v22;
    if (v22) {
      int v23 = 4;
    }
    else {
      int v23 = *(unsigned __int8 *)(qword_1EB208B30 & 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v38 = dword_1EB208B24;
    int v39 = (_DWORD *)qword_1EB208B28;
    if (qword_1EB208B28) {
      uint64_t v40 = qword_1EB208B28 + 8;
    }
    else {
      uint64_t v40 = 0;
    }
    if (v41)
    {
      unint64_t explicit = *v41;
      __dmb(0xBu);
      if (OpaqueExistentialValueWitnessTables)
      {
LABEL_210:
        uint64_t v85 = (os_unfair_lock_s *)&unk_1EB208B38;
        goto LABEL_211;
      }
      uint64_t v43 = (void **)qword_1EB208B40;
      if (qword_1EB208B40)
      {
        do
        {
          uint64_t v44 = (void **)*v43;
          free(v43[1]);
          free(v43);
          uint64_t v43 = v44;
        }
        while (v44);
      }
    }
    else
    {
      uint64_t v129 = v40;
      unint64_t __srca = v39 + 2;
      uint64_t v45 = (v38 + 1);
      if ((1 << v23) / (unint64_t)((1 << v23) - v45) < 4)
      {
        unsigned int v54 = v42;
        unint64_t v55 = v20;
      }
      else
      {
        long long v125 = v39;
        unsigned int v46 = (v23 + 1);
        if (v46 >= 0x11) {
          unsigned int v47 = 4;
        }
        else {
          unsigned int v47 = 2;
        }
        if (v46 < 9) {
          size_t v48 = 1;
        }
        else {
          size_t v48 = v47;
        }
        unint64_t v49 = (unint64_t)malloc_type_calloc(2 << v23, v48, 0x4269077AuLL);
        if (!v49) {
          swift::hashable_support::findHashableBaseTypeOfHashableType();
        }
        uint64_t v50 = v40;
        char v51 = v23;
        unint64_t v121 = v38;
        uint64_t v123 = (v38 + 1);
        if (v48 != 1)
        {
          if (v48 == 4) {
            size_t v48 = 3;
          }
          else {
            size_t v48 = 2;
          }
        }
        unint64_t v55 = v48 | v49;
        *(unsigned char *)unint64_t v49 = v23 + 1;
        if (v23)
        {
          if (v21) {
            unint64_t v86 = v20 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t v86 = 0;
          }
          unint64_t v87 = v55 & 3;
          if ((v55 & 3) != 0) {
            unint64_t v88 = v49 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else {
            unint64_t v88 = 0;
          }
          uint64_t v89 = 1;
          uint64_t v90 = (void *)&unk_1EB1F3000;
          while (2)
          {
            switch(v20 & 3)
            {
              case 0uLL:
                uint64_t v91 = (v20 >> (4 * v89)) & 0xF;
                goto LABEL_165;
              case 1uLL:
                LODWORD(v91) = *(unsigned __int8 *)(v86 + v89);
                goto LABEL_165;
              case 2uLL:
                LODWORD(v91) = *(unsigned __int16 *)(v86 + 2 * v89);
                goto LABEL_165;
              case 3uLL:
                LODWORD(v91) = *(_DWORD *)(v86 + 4 * v89);
LABEL_165:
                if (v91)
                {
                  uint64_t v92 = *(void *)(*(void *)(v50 + 8 * (v91 - 1)) + 64);
                  {
                    unint64_t v117 = v86;
                    unint64_t v119 = v87;
                    uint64_t v90 = &unk_1EB1F3000;
                    unint64_t v86 = v117;
                    unint64_t v87 = v119;
                    char v51 = v23;
                    uint64_t v50 = v129;
                    if (v97)
                    {
                      unint64_t v98 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
                      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
                        unint64_t v98 = 0xFF51AFD7ED558CCDLL;
                      }
                      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v98;
                      uint64_t v90 = (void *)&unk_1EB1F3000;
                      unint64_t v86 = v117;
                      unint64_t v87 = v119;
                      char v51 = v23;
                      uint64_t v50 = v129;
                    }
                  }
                  unint64_t v93 = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * (v90[38] + ((v92 + 0x7FFFFFFE0) & 0x7FFFFFFF8))) ^ ((0x9DDFEA08EB382D69 * (v90[38] + ((v92 + 0x7FFFFFFE0) & 0x7FFFFFFF8))) >> 47));
                  for (unint64_t j = 0x9DDFEA08EB382D69 * (v93 ^ (v93 >> 47)); ; unint64_t j = v96 + 1)
                  {
                    uint64_t v96 = j & ~(-2 << v23);
                    if (v96)
                    {
                      switch((int)v87)
                      {
                        case 1:
                          LODWORD(v95) = *(unsigned __int8 *)(v88 + v96);
                          break;
                        case 2:
                          LODWORD(v95) = *(unsigned __int16 *)(v88 + 2 * v96);
                          break;
                        case 3:
                          LODWORD(v95) = *(_DWORD *)(v88 + 4 * v96);
                          break;
                        default:
                          uint64_t v95 = (v55 >> (4 * v96)) & 0xF;
                          break;
                      }
                      if (!v95) {
                        break;
                      }
                    }
                  }
                  if (v87 == 3)
                  {
                    *(_DWORD *)(v88 + 4 * v96) = v91;
                  }
                  else if (v87 == 2)
                  {
                    *(_WORD *)(v88 + 2 * v96) = v91;
                  }
                  else
                  {
                    *(unsigned char *)(v88 + v96) = v91;
                  }
                }
                if (!((unint64_t)++v89 >> v51)) {
                  continue;
                }
                goto LABEL_184;
              default:
                goto LABEL_217;
            }
          }
        }
LABEL_184:
        atomic_store(v55, (unint64_t *)&qword_1EB208B30);
        if (!v131)
        {
          unint64_t v99 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
          uint64_t v50 = v129;
          void *v99 = qword_1EB208B40;
          v99[1] = v20 & 0xFFFFFFFFFFFFFFFCLL;
          qword_1EB208B40 = (uint64_t)v99;
        }
        unint64_t v38 = v121;
        unsigned int v54 = v100;
        uint64_t v45 = v123;
        int v39 = v125;
      }
      if (!v39 || (unint64_t v101 = (unint64_t)v39, v38 >= *v39))
      {
        unint64_t v102 = v39;
        unint64_t v103 = v38 + (v38 >> 2);
        if (v103 <= v38 + 1) {
          unint64_t v103 = v38 + 1;
        }
        size_t v104 = malloc_good_size(8 * v103 + 8);
        size_t v105 = malloc_type_malloc(v104, 0x1000D770uLL);
        if (!v105) {
          swift::hashable_support::findHashableBaseTypeOfHashableType();
        }
        unint64_t v101 = (unint64_t)v105;
        *size_t v105 = (v104 + 0x7FFFFFFF8) >> 3;
        if (v102)
        {
          memcpy(v105 + 2, __srca, 8 * v38);
          unint64_t v106 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
          void *v106 = qword_1EB208B40;
          v106[1] = v102;
          qword_1EB208B40 = (uint64_t)v106;
        }
        atomic_store(v101, (unint64_t *)&qword_1EB208B28);
      }
      __int16 v134 = 8;
      unint64_t v107 = swift::MetadataAllocator::Allocate((swift::MetadataAllocator *)&v134, 0x58uLL, 8);
      uint64_t v108 = v132;
      void *v107 = swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>,true>::initializeBufferWithCopyOfBuffer;
      v107[1] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::destroy;
      v107[2] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::initializeWithCopy;
      v107[3] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::assignWithCopy;
      v107[4] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::initializeWithTake;
      v107[5] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::assignWithTake;
      v107[6] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::getEnumTagSinglePayload;
      uint64_t v109 = 8 * v108 + 32;
      v107[7] = swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::storeEnumTagSinglePayload;
      v107[8] = v109;
      v107[10] = 0x7FFFFFFF00030007;
      v107[9] = v109;
      *(void *)(v101 + 8 * v38 + 8) = v107;
      atomic_store(v45, (unsigned int *)&dword_1EB208B24);
      unint64_t explicit = (unint64_t)v107;
      switch(v54)
      {
        case 1u:
          unint64_t v110 = v55 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v55 & 3) == 0) {
            unint64_t v110 = 0;
          }
          atomic_store(v45, (unsigned __int8 *)(v110 + v54));
          break;
        case 2u:
          unint64_t v111 = v55 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v55 & 3) == 0) {
            unint64_t v111 = 0;
          }
          atomic_store(v45, (unsigned __int16 *)(v111 + 2 * v54));
          break;
        case 3u:
          unint64_t v112 = v55 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v55 & 3) == 0) {
            unint64_t v112 = 0;
          }
          atomic_store(v45, (unsigned int *)(v112 + 4 * v54));
          break;
        default:
          atomic_store((v45 << (4 * v54)) | v55, (unint64_t *)&qword_1EB208B30);
          break;
      }
      __dmb(0xBu);
      if (OpaqueExistentialValueWitnessTables) {
        goto LABEL_210;
      }
      uint64_t v113 = (void **)qword_1EB208B40;
      if (qword_1EB208B40)
      {
        do
        {
          unint64_t v114 = (void **)*v113;
          free(v113[1]);
          free(v113);
          uint64_t v113 = v114;
        }
        while (v114);
      }
    }
    qword_1EB208B40 = 0;
    goto LABEL_210;
  }
  return (uint64_t (**)())explicit;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>,true,16ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer(void *a1, uint64_t a2)
{
  a1[1] = *(void *)(a2 + 8);
  uint64_t v3 = *(void **)a2;
  *a1 = *(void *)a2;
  swift_unknownObjectRetain(v3);
  return a1;
}

void swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>::destroy(id *a1)
{
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>::initializeWithCopy(void *a1, uint64_t a2)
{
  a1[1] = *(void *)(a2 + 8);
  uint64_t v3 = *(void **)a2;
  *a1 = *(void *)a2;
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>::assignWithCopy(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRelease(v4);
  return a1;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>::initializeWithTake(void *result, void *a2)
{
  result[1] = a2[1];
  void *result = *a2;
  return result;
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>::assignWithTake(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = a2[1];
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = *a2;
  swift_unknownObjectRelease(v3);
  return a1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>,true,16ul,8ul,true>::getEnumTagSinglePayload(uint64_t a1, int a2)
{
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<1u>>,true,16ul,8ul,true>::storeEnumTagSinglePayload(uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
      *(void *)(result + 4) = 0;
      *(_DWORD *)(result + 12) = 0;
      return result;
    }
    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }
  if (a2 < 0)
  {
    *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 4) = 0;
    *(_DWORD *)(result + 12) = 0;
    *(unsigned char *)(result + 16) = 1;
    return result;
  }
  *(unsigned char *)(result + 16) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

void *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>,true,24ul,8ul,(swift::metadataimpl::FixedPacking)1>::initializeBufferWithCopyOfBuffer(void *a1, uint64_t a2)
{
  a1[1] = *(void *)(a2 + 8);
  a1[2] = *(void *)(a2 + 16);
  uint64_t v3 = *(void **)a2;
  *a1 = *(void *)a2;
  swift_unknownObjectRetain(v3);
  return a1;
}

void swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>::destroy(id *a1)
{
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>::initializeWithCopy(void *a1, uint64_t a2)
{
  a1[1] = *(void *)(a2 + 8);
  a1[2] = *(void *)(a2 + 16);
  uint64_t v3 = *(void **)a2;
  *a1 = *(void *)a2;
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>::assignWithCopy(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRelease(v4);
  return a1;
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>::initializeWithTake(void *result, void *a2)
{
  result[1] = a2[1];
  result[2] = a2[2];
  void *result = *a2;
  return result;
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>::assignWithTake(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = a2[2];
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = *a2;
  swift_unknownObjectRelease(v3);
  return a1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>,true,24ul,8ul,true>::getEnumTagSinglePayload(uint64_t a1, int a2)
{
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  if (HIDWORD(*(void *)a1)) {
    return 0;
  }
  return *(void *)a1 + 1;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::ClassExistentialBox<2u>>,true,24ul,8ul,true>::storeEnumTagSinglePayload(uint64_t result, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
      *(void *)(result + 12) = 0;
      *(void *)(result + 4) = 0;
      *(_DWORD *)(result + 20) = 0;
      return result;
    }
    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }
  if (a2 < 0)
  {
    *(_DWORD *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 12) = 0;
    *(void *)(result + 4) = 0;
    *(_DWORD *)(result + 20) = 0;
    *(unsigned char *)(result + 24) = 1;
    return result;
  }
  *(unsigned char *)(result + 24) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ClassExistentialValueWitnessTableCacheEntry>,swift::LazyMutex>::find<unsigned int>(_DWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  unint64_t v5 = &unk_1EB1F3000;
  {
    uint64_t v21 = a1;
    uint64_t v19 = a4;
    unint64_t v17 = a3;
    unint64_t v20 = a2;
    uint64_t v18 = v4;
    unint64_t v5 = &unk_1EB1F3000;
    a3 = v17;
    uint64_t v4 = v18;
    a4 = v19;
    int v15 = v14;
    a2 = v20;
    a1 = v21;
    if (v15)
    {
      unint64_t v16 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v16 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      unint64_t v5 = (void *)&unk_1EB1F3000;
      a3 = v17;
      uint64_t v4 = v18;
      a2 = v20;
      a1 = v21;
      a4 = v19;
    }
  }
  unint64_t v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5[38] + 8 * v4)) ^ ((0x9DDFEA08EB382D69 * (v5[38] + 8 * v4)) >> 47));
  uint64_t v7 = 0x1DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  BOOL v8 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v9 = 4;
  if ((a2 & 3) != 0 && v8) {
    char v9 = *v8;
  }
  if ((a2 & 3) == 0) {
    BOOL v8 = 0;
  }
  while (2)
  {
    unint64_t v10 = v7 & ~(-1 << v9);
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v11) = v8 + v10;
        LOBYTE(v11) = atomic_load_explicit(&v8[v10], memory_order_acquire);
        if (v11) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v11) = v8 + 2 * v10;
        LOWORD(v11) = atomic_load_explicit((atomic_ushort *volatile)&v8[2 * v10], memory_order_acquire);
        if (!v11) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v11) = atomic_load_explicit((atomic_uint *volatile)&v8[4 * v10], memory_order_acquire);
        if (v11) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v11 = (a2 >> (4 * v10)) & 0xF;
        if (v11)
        {
LABEL_19:
          unint64_t v12 = (v11 - 1);
          if (v12 < a3
            && *a1 == ((unint64_t)(*(void *)(*(void *)(a4 + 8 * v12) + 64) + 0x7FFFFFFF8) >> 3))
          {
            return a4 + 8 * v12;
          }
          uint64_t v7 = v10 + 1;
          continue;
        }
        return 0;
    }
  }
}

char *swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>,true>::initializeBufferWithCopyOfBuffer(atomic_ullong **a1, atomic_ullong **a2, uint64_t a3)
{
  if (*(void *)(a3 - 8)) {
    uint64_t v3 = *(void *)(a3 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  return (char *)v4 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
}

void swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::destroy(id *a1)
{
}

void **swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::initializeWithCopy(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *(_DWORD *)(a3 + 8) & 0xFFFFFF;
  if (v4)
  {
    uint64_t v5 = 0;
    if (v4 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)((char *)a1 - (char *)a2) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v5 = *(_DWORD *)(a3 + 8) & 0xFFFFFCLL;
    unint64_t v6 = (long long *)(a2 + 3);
    uint64_t v7 = a1 + 3;
    uint64_t v8 = v5;
    do
    {
      long long v9 = *v6;
      *(v7 - 1) = *(v6 - 1);
      *uint64_t v7 = v9;
      v6 += 2;
      v7 += 2;
      v8 -= 4;
    }
    while (v8);
    if (v5 != v4)
    {
LABEL_7:
      uint64_t v10 = v4 - v5;
      uint64_t v11 = 8 * v5 + 8;
      unint64_t v12 = (void **)((char *)a1 + v11);
      BOOL v13 = (uint64_t *)((char *)a2 + v11);
      do
      {
        uint64_t v14 = *v13++;
        *v12++ = v14;
        --v10;
      }
      while (v10);
    }
  }
  int v15 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v15);
  return a1;
}

void **swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::assignWithCopy(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *(_DWORD *)(a3 + 8) & 0xFFFFFF;
  if (v4)
  {
    uint64_t v5 = 0;
    if (v4 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)((char *)a1 - (char *)a2) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v5 = *(_DWORD *)(a3 + 8) & 0xFFFFFCLL;
    unint64_t v6 = (long long *)(a2 + 3);
    uint64_t v7 = a1 + 3;
    uint64_t v8 = v5;
    do
    {
      long long v9 = *v6;
      *(v7 - 1) = *(v6 - 1);
      *uint64_t v7 = v9;
      v6 += 2;
      v7 += 2;
      v8 -= 4;
    }
    while (v8);
    if (v5 != v4)
    {
LABEL_7:
      uint64_t v10 = v4 - v5;
      uint64_t v11 = 8 * v5 + 8;
      unint64_t v12 = (void **)((char *)a1 + v11);
      BOOL v13 = (uint64_t *)((char *)a2 + v11);
      do
      {
        uint64_t v14 = *v13++;
        *v12++ = v14;
        --v10;
      }
      while (v10);
    }
  }
  int v15 = *a2;
  unint64_t v16 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v15);
  swift_unknownObjectRelease(v16);
  return a1;
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::initializeWithTake(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD *)(a3 + 8) & 0xFFFFFF;
  if (v3)
  {
    uint64_t v4 = 0;
    if (v3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)((char *)result - (char *)a2) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v4 = *(_DWORD *)(a3 + 8) & 0xFFFFFCLL;
    uint64_t v5 = (long long *)(a2 + 3);
    unint64_t v6 = result + 3;
    uint64_t v7 = v4;
    do
    {
      long long v8 = *v5;
      *(v6 - 1) = *(v5 - 1);
      *unint64_t v6 = v8;
      v5 += 2;
      v6 += 2;
      v7 -= 4;
    }
    while (v7);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v9 = v3 - v4;
      uint64_t v10 = 8 * v4 + 8;
      uint64_t v11 = (void *)((char *)result + v10);
      unint64_t v12 = (void *)((char *)a2 + v10);
      do
      {
        uint64_t v13 = *v12++;
        *v11++ = v13;
        --v9;
      }
      while (v9);
    }
  }
  void *result = *a2;
  return result;
}

void **swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::assignWithTake(void **a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(_DWORD *)(a3 + 8) & 0xFFFFFF;
  if (v4)
  {
    uint64_t v5 = 0;
    if (v4 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)((char *)a1 - (char *)a2) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v5 = *(_DWORD *)(a3 + 8) & 0xFFFFFCLL;
    unint64_t v6 = (long long *)(a2 + 3);
    uint64_t v7 = a1 + 3;
    uint64_t v8 = v5;
    do
    {
      long long v9 = *v6;
      *(v7 - 1) = *(v6 - 1);
      *uint64_t v7 = v9;
      v6 += 2;
      v7 += 2;
      v8 -= 4;
    }
    while (v8);
    if (v5 != v4)
    {
LABEL_7:
      uint64_t v10 = v4 - v5;
      uint64_t v11 = 8 * v5 + 8;
      unint64_t v12 = (void **)((char *)a1 + v11);
      uint64_t v13 = (void *)((char *)a2 + v11);
      do
      {
        uint64_t v14 = *v13++;
        *v12++ = v14;
        --v10;
      }
      while (v10);
    }
  }
  int v15 = *a1;
  *a1 = (void *)*a2;
  swift_unknownObjectRelease(v15);
  return a1;
}

uint64_t swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::getEnumTagSinglePayload(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unsigned int v5 = *(_DWORD *)(v3 + 84);
  if (a2 <= v5) {
    goto LABEL_11;
  }
  if (v4 > 3) {
    goto LABEL_5;
  }
  unsigned int v6 = ((a2 - v5 + ~(-1 << (8 * v4))) >> (8 * v4)) + 1;
  if (v6 < 2) {
    goto LABEL_11;
  }
  if (v6 >= 0x100)
  {
    if (v6 >= 0x10000) {
      int v7 = *(_DWORD *)&a1[v4];
    }
    else {
      int v7 = *(unsigned __int16 *)&a1[v4];
    }
  }
  else
  {
LABEL_5:
    int v7 = a1[v4];
  }
  if (!v7)
  {
LABEL_11:
    if (!v5) {
      return 0;
    }
    if (HIDWORD(*(void *)a1)) {
      return 0;
    }
    return *(void *)a1 + 1;
  }
  int v8 = (v7 - 1) << (8 * v4);
  if (v4 > 3) {
    int v8 = 0;
  }
  int v9 = 0;
  switch(v4)
  {
    case 0uLL:
      return v5 + (v9 | v8) + 1;
    case 1uLL:
      int v9 = *a1;
      break;
    case 2uLL:
      int v9 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v9 = *(_DWORD *)a1;
      break;
  }
  return v5 + (v9 | v8) + 1;
}

void swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::storeEnumTagSinglePayload(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedClassExistentialBox,true>::storeExtraInhabitantTag(void *result, int a2)
{
  void *result = a2 - 1;
  return result;
}

char *swift::metadataimpl::BufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>,true,40ul,8ul,(swift::metadataimpl::FixedPacking)0>::initializeBufferWithCopyOfBuffer(atomic_ullong **a1, atomic_ullong **a2, uint64_t a3)
{
  if (*(void *)(a3 - 8)) {
    uint64_t v3 = *(void *)(a3 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  return (char *)v4 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
}

uint64_t swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>::destroy(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8);
  if (v1)
  {
    if ((*(unsigned char *)(v1 + 82) & 2) == 0) {
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  else if ((MEMORY[0x52] & 2) == 0)
  {
    return MEMORY[8]();
  }
  return swift_release(*a1);
}

void *swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>::initializeWithCopy(void *a1, uint64_t a2)
{
  a1[3] = *(void *)(a2 + 24);
  a1[4] = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
    if ((*(unsigned char *)(v3 + 82) & 2) != 0) {
      goto LABEL_7;
    }
  }
  else
  {
    if ((MEMORY[0x52] & 2) != 0)
    {
LABEL_7:
      unsigned int v5 = *(atomic_ullong **)a2;
      *a1 = *(void *)a2;
      swift_retain(v5);
      return a1;
    }
    uint64_t v4 = 0;
  }
  (*(void (**)(void *))(v4 + 16))(a1);
  return a1;
}

__n128 swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>::initializeWithTake(__n128 *a1, __n128 *a2)
{
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>,true,40ul,8ul,true>::getEnumTagSinglePayload(uint64_t a1, int a2)
{
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 ^ 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (HIDWORD(v2)) {
    return 0;
  }
  else {
    return (v2 + 1);
  }
}

double swift::metadataimpl::FixedSizeBufferValueWitnesses<swift::metadataimpl::ValueWitnesses<swift::metadataimpl::OpaqueExistentialBox<1u>>,true,40ul,8ul,true>::storeEnumTagSinglePayload(uint64_t a1, int a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (a2 < 0)
    {
      *(_DWORD *)a1 = a2 ^ 0x80000000;
      double result = 0.0;
      *(_OWORD *)(a1 + 4) = 0u;
      *(_OWORD *)(a1 + 20) = 0u;
      *(_DWORD *)(a1 + 36) = 0;
      return result;
    }
    if (!a2) {
      return result;
    }
LABEL_7:
    *(void *)(a1 + 24) = (a2 - 1);
    return result;
  }
  if (a2 < 0)
  {
    *(_DWORD *)a1 = a2 ^ 0x80000000;
    double result = 0.0;
    *(_OWORD *)(a1 + 4) = 0u;
    *(_OWORD *)(a1 + 20) = 0u;
    *(_DWORD *)(a1 + 36) = 0;
    *(unsigned char *)(a1 + 40) = 1;
    return result;
  }
  *(unsigned char *)(a1 + 40) = 0;
  if (a2) {
    goto LABEL_7;
  }
  return result;
}

uint64_t *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithTake<swift::metadataimpl::OpaqueExistentialBox<1u>::Container>(uint64_t *a1, uint64_t *a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = a2[3];
    uint64_t v5 = a1[3];
    if (v4 != v5)
    {
      int v7 = (uint64_t *)(v5 - 8);
      uint64_t v6 = *(void *)(v5 - 8);
      if (v6) {
        uint64_t v8 = *(void *)(v5 - 8);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v11 = (uint64_t *)(v4 - 8);
      if (*(void *)(v4 - 8))
      {
        uint64_t v12 = *(void *)(v4 - 8);
        if ((*(unsigned char *)(v8 + 82) & 2) == 0) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v12 = 0;
        if ((*(unsigned char *)(v8 + 82) & 2) == 0)
        {
LABEL_11:
          (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v20, a1, v5);
          a1[3] = a2[3];
          a1[4] = a2[4];
          if ((*(unsigned char *)(v12 + 82) & 2) != 0)
          {
            *a1 = *a2;
            uint64_t v16 = *v7;
            if (!*v7)
            {
LABEL_27:
              uint64_t v17 = 0;
              goto LABEL_28;
            }
          }
          else
          {
            if (*v11) {
              uint64_t v13 = *v11;
            }
            else {
              uint64_t v13 = 0;
            }
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 32))(a1, a2, v4);
            uint64_t v16 = *v7;
            if (!*v7) {
              goto LABEL_27;
            }
          }
          uint64_t v17 = v16;
LABEL_28:
          (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v20, v5);
          return a1;
        }
      }
      uint64_t v14 = *a1;
      a1[3] = v4;
      a1[4] = a2[4];
      if ((*(unsigned char *)(v12 + 82) & 2) != 0)
      {
        *a1 = *a2;
      }
      else
      {
        if (*v11) {
          uint64_t v15 = *v11;
        }
        else {
          uint64_t v15 = 0;
        }
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 32))(a1, a2, v4);
      }
      uint64_t v18 = v14;
LABEL_32:
      swift_release(v18);
      return a1;
    }
    uint64_t v9 = *(void *)(v4 - 8);
    if (v9)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v9 + 82) & 2) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      if ((MEMORY[0x52] & 2) != 0)
      {
LABEL_24:
        uint64_t v18 = *a1;
        *a1 = *a2;
        goto LABEL_32;
      }
      uint64_t v10 = 0;
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 40))(a1, a2, v4);
  }
  return a1;
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::OpaqueExistentialValueWitnessTableCacheEntry>,swift::LazyMutex>::find<unsigned int>(_DWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = &unk_1EB1F3000;
  {
    uint64_t v21 = a1;
    uint64_t v19 = a4;
    unint64_t v17 = a3;
    unint64_t v20 = a2;
    uint64_t v18 = v4;
    uint64_t v5 = &unk_1EB1F3000;
    a3 = v17;
    uint64_t v4 = v18;
    a4 = v19;
    int v15 = v14;
    a2 = v20;
    a1 = v21;
    if (v15)
    {
      unint64_t v16 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v16 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      uint64_t v5 = (void *)&unk_1EB1F3000;
      a3 = v17;
      uint64_t v4 = v18;
      a2 = v20;
      a1 = v21;
      a4 = v19;
    }
  }
  unint64_t v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5[38] + 8 * v4)) ^ ((0x9DDFEA08EB382D69 * (v5[38] + 8 * v4)) >> 47));
  uint64_t v7 = 0x1DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  uint64_t v8 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v9 = 4;
  if ((a2 & 3) != 0 && v8) {
    char v9 = *v8;
  }
  if ((a2 & 3) == 0) {
    uint64_t v8 = 0;
  }
  while (2)
  {
    unint64_t v10 = v7 & ~(-1 << v9);
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v11) = v8 + v10;
        LOBYTE(v11) = atomic_load_explicit(&v8[v10], memory_order_acquire);
        if (v11) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v11) = v8 + 2 * v10;
        LOWORD(v11) = atomic_load_explicit((atomic_ushort *volatile)&v8[2 * v10], memory_order_acquire);
        if (!v11) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v11) = atomic_load_explicit((atomic_uint *volatile)&v8[4 * v10], memory_order_acquire);
        if (v11) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v11 = (a2 >> (4 * v10)) & 0xF;
        if (v11)
        {
LABEL_19:
          unint64_t v12 = (v11 - 1);
          if (v12 < a3
            && *a1 == ((unint64_t)(*(void *)(*(void *)(a4 + 8 * v12) + 64) + 0x7FFFFFFE0) >> 3))
          {
            return a4 + 8 * v12;
          }
          uint64_t v7 = v10 + 1;
          continue;
        }
        return 0;
    }
  }
}

char *swift::metadataimpl::NonFixedBufferValueWitnesses<swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>,true>::initializeBufferWithCopyOfBuffer(atomic_ullong **a1, atomic_ullong **a2, uint64_t a3)
{
  if (*(void *)(a3 - 8)) {
    uint64_t v3 = *(void *)(a3 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  return (char *)v4 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
}

uint64_t swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::destroy(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8);
  if (v1)
  {
    if ((*(unsigned char *)(v1 + 82) & 2) == 0) {
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  else if ((MEMORY[0x52] & 2) == 0)
  {
    return MEMORY[8]();
  }
  return swift_release(*a1);
}

void *swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::initializeWithCopy(void *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a3 + 8);
  a1[3] = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)&v4 & 0xFFFFFFLL;
  if (v5)
  {
    uint64_t v6 = 0;
    if (v5 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)a1 - a2 < 0x20) {
      goto LABEL_7;
    }
    uint64_t v6 = v5 & 0xFFFFFC;
    uint64_t v7 = (long long *)(a2 + 48);
    uint64_t v8 = a1 + 6;
    uint64_t v9 = v5 & 0xFFFFFC;
    do
    {
      long long v10 = *v7;
      *(v8 - 1) = *(v7 - 1);
      *uint64_t v8 = v10;
      v7 += 2;
      v8 += 2;
      v9 -= 4;
    }
    while (v9);
    if (v6 != v5)
    {
LABEL_7:
      uint64_t v11 = v5 - v6;
      uint64_t v12 = 8 * v6 + 32;
      uint64_t v13 = (void *)((char *)a1 + v12);
      int v14 = (uint64_t *)(a2 + v12);
      do
      {
        uint64_t v15 = *v14++;
        *v13++ = v15;
        --v11;
      }
      while (v11);
    }
  }
  uint64_t v16 = *(void *)(*(void *)(a2 + 24) - 8);
  if (v16)
  {
    uint64_t v17 = *(void *)(*(void *)(a2 + 24) - 8);
    if ((*(unsigned char *)(v16 + 82) & 2) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    if ((MEMORY[0x52] & 2) != 0)
    {
LABEL_15:
      uint64_t v18 = *(atomic_ullong **)a2;
      *a1 = *(void *)a2;
      swift_retain(v18);
      return a1;
    }
    uint64_t v17 = 0;
  }
  (*(void (**)(void *))(v17 + 16))(a1);
  return a1;
}

__n128 swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::initializeWithTake(__n128 *a1, __n128 *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  uint64_t v4 = *(void *)&v3 & 0xFFFFFFLL;
  if (v4)
  {
    uint64_t v5 = 0;
    if (v4 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)((char *)a1 - (char *)a2) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v5 = v4 & 0xFFFFFC;
    uint64_t v6 = a2 + 3;
    uint64_t v7 = a1 + 3;
    uint64_t v8 = v4 & 0xFFFFFC;
    do
    {
      __n128 v9 = *v6;
      v7[-1] = v6[-1];
      *uint64_t v7 = v9;
      v6 += 2;
      v7 += 2;
      v8 -= 4;
    }
    while (v8);
    if (v5 != v4)
    {
LABEL_7:
      uint64_t v10 = v4 - v5;
      uint64_t v11 = 8 * v5 + 32;
      uint64_t v12 = (unint64_t *)((char *)a1->n128_u64 + v11);
      uint64_t v13 = (uint64_t *)((char *)a2 + v11);
      do
      {
        uint64_t v14 = *v13++;
        *v12++ = v14;
        --v10;
      }
      while (v10);
    }
  }
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::getEnumTagSinglePayload(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unsigned int v5 = *(_DWORD *)(v3 + 84);
  if (a2 <= v5) {
    goto LABEL_11;
  }
  if (v4 > 3) {
    goto LABEL_5;
  }
  unsigned int v6 = ((a2 - v5 + ~(-1 << (8 * v4))) >> (8 * v4)) + 1;
  if (v6 < 2) {
    goto LABEL_11;
  }
  if (v6 >= 0x100)
  {
    if (v6 >= 0x10000) {
      int v7 = *(_DWORD *)&a1[v4];
    }
    else {
      int v7 = *(unsigned __int16 *)&a1[v4];
    }
  }
  else
  {
LABEL_5:
    int v7 = a1[v4];
  }
  if (!v7)
  {
LABEL_11:
    if (!v5) {
      return 0;
    }
    unint64_t v10 = *((void *)a1 + 3);
    if (HIDWORD(v10)) {
      return 0;
    }
    else {
      return (v10 + 1);
    }
  }
  int v8 = (v7 - 1) << (8 * v4);
  if (v4 > 3) {
    int v8 = 0;
  }
  int v9 = 0;
  switch(v4)
  {
    case 0uLL:
      return v5 + (v9 | v8) + 1;
    case 1uLL:
      int v9 = *a1;
      break;
    case 2uLL:
      int v9 = *(unsigned __int16 *)a1;
      break;
    case 3uLL:
      int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      break;
    default:
      int v9 = *(_DWORD *)a1;
      break;
  }
  return v5 + (v9 | v8) + 1;
}

void swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::storeEnumTagSinglePayload(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void *swift::metadataimpl::OpaqueExistentialBoxBase::assignWithTake<swift::metadataimpl::NonFixedOpaqueExistentialBox::Container,swift::TargetMetadata<swift::InProcess> const*>(void *a1, void *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v5 = a2[3];
    uint64_t v6 = a1[3];
    if (v5 != v6)
    {
      int v9 = (uint64_t *)(v6 - 8);
      uint64_t v8 = *(void *)(v6 - 8);
      if (v8) {
        uint64_t v10 = *(void *)(v6 - 8);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v13 = (uint64_t *)(v5 - 8);
      if (*(void *)(v5 - 8))
      {
        uint64_t v14 = *(void *)(v5 - 8);
        if ((*(unsigned char *)(v10 + 82) & 2) == 0)
        {
LABEL_11:
          (*(void (**)(unsigned char *, void *, uint64_t))(v8 + 32))(v46, a1, v6);
          int v15 = *(_DWORD *)(a3 + 8);
          a1[3] = a2[3];
          uint64_t v16 = *(void *)&v15 & 0xFFFFFFLL;
          if (v16)
          {
            uint64_t v17 = 0;
            if (v16 < 8) {
              goto LABEL_17;
            }
            if ((unint64_t)((char *)a1 - (char *)a2) < 0x20) {
              goto LABEL_17;
            }
            uint64_t v17 = v16 & 0xFFFFFC;
            uint64_t v18 = (long long *)(a2 + 6);
            uint64_t v19 = a1 + 6;
            uint64_t v20 = v16 & 0xFFFFFC;
            do
            {
              long long v21 = *v18;
              *(v19 - 1) = *(v18 - 1);
              *uint64_t v19 = v21;
              v18 += 2;
              v19 += 2;
              v20 -= 4;
            }
            while (v20);
            if (v17 != v16)
            {
LABEL_17:
              uint64_t v22 = v16 - v17;
              uint64_t v23 = 8 * v17 + 32;
              unint64_t v24 = (void *)((char *)a1 + v23);
              uint64_t v25 = (void *)((char *)a2 + v23);
              do
              {
                uint64_t v26 = *v25++;
                *v24++ = v26;
                --v22;
              }
              while (v22);
            }
          }
          if ((*(unsigned char *)(v14 + 82) & 2) != 0)
          {
            *a1 = *a2;
            uint64_t v42 = *v9;
            if (!*v9)
            {
LABEL_43:
              uint64_t v43 = 0;
              goto LABEL_44;
            }
          }
          else
          {
            if (*v13) {
              uint64_t v27 = *v13;
            }
            else {
              uint64_t v27 = 0;
            }
            (*(void (**)(void *, void *, uint64_t))(v27 + 32))(a1, a2, v5);
            uint64_t v42 = *v9;
            if (!*v9) {
              goto LABEL_43;
            }
          }
          uint64_t v43 = v42;
LABEL_44:
          (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v46, v6);
          return a1;
        }
      }
      else
      {
        uint64_t v14 = 0;
        if ((*(unsigned char *)(v10 + 82) & 2) == 0) {
          goto LABEL_11;
        }
      }
      uint64_t v28 = *a1;
      int v29 = *(_DWORD *)(a3 + 8);
      a1[3] = v5;
      uint64_t v30 = *(void *)&v29 & 0xFFFFFFLL;
      if (v30)
      {
        uint64_t v31 = 0;
        if (v30 < 8) {
          goto LABEL_29;
        }
        if ((unint64_t)((char *)a1 - (char *)a2) < 0x20) {
          goto LABEL_29;
        }
        uint64_t v31 = v30 & 0xFFFFFC;
        unsigned int v32 = (long long *)(a2 + 6);
        unsigned int v33 = a1 + 6;
        uint64_t v34 = v30 & 0xFFFFFC;
        do
        {
          long long v35 = *v32;
          *(v33 - 1) = *(v32 - 1);
          *unsigned int v33 = v35;
          v32 += 2;
          v33 += 2;
          v34 -= 4;
        }
        while (v34);
        if (v31 != v30)
        {
LABEL_29:
          uint64_t v36 = v30 - v31;
          uint64_t v37 = 8 * v31 + 32;
          unint64_t v38 = (void *)((char *)a1 + v37);
          int v39 = (void *)((char *)a2 + v37);
          do
          {
            uint64_t v40 = *v39++;
            *v38++ = v40;
            --v36;
          }
          while (v36);
        }
      }
      if ((*(unsigned char *)(v14 + 82) & 2) != 0)
      {
        *a1 = *a2;
      }
      else
      {
        if (*v13) {
          uint64_t v41 = *v13;
        }
        else {
          uint64_t v41 = 0;
        }
        (*(void (**)(void *, void *, uint64_t))(v41 + 32))(a1, a2, v5);
      }
      uint64_t v44 = v28;
LABEL_48:
      swift_release(v44);
      return a1;
    }
    uint64_t v11 = *(void *)(v5 - 8);
    if (v11)
    {
      uint64_t v12 = *(void *)(v5 - 8);
      if ((*(unsigned char *)(v11 + 82) & 2) != 0) {
        goto LABEL_40;
      }
    }
    else
    {
      if ((MEMORY[0x52] & 2) != 0)
      {
LABEL_40:
        uint64_t v44 = *a1;
        *a1 = *a2;
        goto LABEL_48;
      }
      uint64_t v12 = 0;
    }
    (*(void (**)(void *, void *, uint64_t))(v12 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t swift::metadataimpl::NonFixedValueWitnesses<swift::metadataimpl::NonFixedOpaqueExistentialBox,true>::storeExtraInhabitantTag(uint64_t result, int a2)
{
  *(void *)(result + 24) = a2 - 1;
  return result;
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ExtendedExistentialTypeShapeCacheEntry>,swift::LazyMutex>::find<anonymous namespace'::ExtendedExistentialTypeShapeCacheEntry::Key>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v7 = __swift::__runtime::llvm::hash_value(*(void **)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v8 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v9 = 4;
  unint64_t v20 = a2;
  if ((a2 & 3) != 0 && v8) {
    char v9 = *v8;
  }
  uint64_t v10 = ~(-1 << v9);
  uint64_t v11 = a2 & 3;
  if ((a2 & 3) != 0) {
    unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else {
    unint64_t v12 = 0;
  }
  while (2)
  {
    if ((v7 & v10) <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v7 & v10;
    }
    switch(v11)
    {
      case 1:
        LODWORD(v14) = v12 + v13;
        LOBYTE(v14) = atomic_load_explicit((atomic_uchar *volatile)(v12 + v13), memory_order_acquire);
        if (v14) {
          goto LABEL_20;
        }
        return 0;
      case 2:
        LODWORD(v14) = v12 + 2 * v13;
        LOWORD(v14) = atomic_load_explicit((atomic_ushort *volatile)(v12 + 2 * v13), memory_order_acquire);
        if (!v14) {
          return 0;
        }
        goto LABEL_20;
      case 3:
        LODWORD(v14) = atomic_load_explicit((atomic_uint *volatile)(v12 + 4 * v13), memory_order_acquire);
        if (v14) {
          goto LABEL_20;
        }
        return 0;
      default:
        uint64_t v14 = (v20 >> (4 * v13)) & 0xF;
        if (v14)
        {
LABEL_20:
          unint64_t v15 = (v14 - 1);
          if (v15 < a3)
          {
            size_t v16 = *(void *)(a1 + 16);
            uint64_t v17 = **(void **)(a4 + 8 * v15);
            if (v17 == *(void *)a1) {
              return a4 + 8 * v15;
            }
            uint64_t v18 = (const char *)(*(int *)(v17 + 8) + v17 + 8);
            if (v18)
            {
              if (strlen(v18) == v16 && (!v16 || !memcmp(v18, *(const void **)(a1 + 8), v16))) {
                return a4 + 8 * v15;
              }
            }
            else if (!v16)
            {
              return a4 + 8 * v15;
            }
          }
          unint64_t v7 = v13 + 1;
          continue;
        }
        return 0;
    }
  }
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::ExtendedExistentialTypeCacheEntry>,swift::LazyMutex>::find<anonymous namespace'::ExtendedExistentialTypeCacheEntry::Key>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  v22[0] = *(_DWORD *)(a1 + 24);
  unint64_t v8 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,unsigned int>((void *)(a1 + 32), v22);
  char v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  uint64_t v11 = ~(-1 << v10);
  if ((a2 & 3) != 0) {
    unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else {
    unint64_t v12 = 0;
  }
  while (2)
  {
    if ((v8 & v11) <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v8 & v11;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v14) = v12 + v13;
        LOBYTE(v14) = atomic_load_explicit((atomic_uchar *volatile)(v12 + v13), memory_order_acquire);
        if (v14) {
          goto LABEL_20;
        }
        return 0;
      case 2uLL:
        LODWORD(v14) = v12 + 2 * v13;
        LOWORD(v14) = atomic_load_explicit((atomic_ushort *volatile)(v12 + 2 * v13), memory_order_acquire);
        if (!v14) {
          return 0;
        }
        goto LABEL_20;
      case 3uLL:
        LODWORD(v14) = atomic_load_explicit((atomic_uint *volatile)(v12 + 4 * v13), memory_order_acquire);
        if (v14) {
          goto LABEL_20;
        }
        return 0;
      default:
        uint64_t v14 = (a2 >> (4 * v13)) & 0xF;
        if (v14)
        {
LABEL_20:
          unint64_t v15 = (v14 - 1);
          if (v15 >= a3) {
            goto LABEL_8;
          }
          uint64_t v16 = *(void *)(a4 + 8 * v15);
          long long v21 = *(unsigned int **)(a1 + 32);
          long long v17 = *(_OWORD *)(a1 + 16);
          v20[0] = *(_OWORD *)a1;
          v20[1] = v17;
          uint64_t v18 = *(unsigned int **)(v16 + 24);
          if (v18)
          {
            if (v21 != v18) {
              goto LABEL_8;
            }
          }
          else
          {
            if (v21) {
              goto LABEL_8;
            }
            uint64_t v18 = 0;
          }
          if (v23 == v21 && (swift::MetadataCacheKey::operator==((uint64_t)v22, (uint64_t)v20) & 1) != 0) {
            return a4 + 8 * v15;
          }
LABEL_8:
          unint64_t v8 = v13 + 1;
          continue;
        }
        return 0;
    }
  }
}

uint64_t swift::MetadataCacheEntryBase<anonymous namespace'::ForeignMetadataCacheEntry,int>::awaitSatisfyingState(atomic_ullong *a1, __int16 a2)
{
  char explicit = atomic_load_explicit(a1, memory_order_acquire);
  unsigned int v5 = explicit & 7;
  if (v5 - 1 >= 3)
  {
    if (v5 == 4) {
      return a1[1];
    }
    if ((explicit & 7) != 0) {
      goto LABEL_60;
    }
    uint64_t v7 = a2 & 0x100;
  }
  else
  {
    if (a2 > 0x3Eu)
    {
      if (a2 == 255) {
        goto LABEL_15;
      }
      if (a2 != 63) {
        goto LABEL_60;
      }
      if (v5 > 1) {
        goto LABEL_15;
      }
    }
    else if ((_BYTE)a2)
    {
      if (a2 != 1) {
        goto LABEL_60;
      }
      if (v5 >= 3) {
        return a1[1];
      }
    }
    uint64_t v7 = a2 & 0x100;
    if ((explicit & 8) != 0 && (a2 & 0x100) != 0)
    {
LABEL_15:
      uint64_t v6 = a1[1];
      if (v5 == 1 || v5 == 3 || v5 == 2) {
        return v6;
      }
LABEL_60:
      abort();
    }
  }
  unint64_t v8 = 0;
  long long v21 = &unk_1EB1F8908;
  uint64_t v22 = 0;
  __int16 v23 = 0;
  int v9 = a2;
  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1F8908);
    if (v8)
    {
      if (*v8 == 1)
      {
        uint64_t v10 = v8[2];
        v8[2] = 0;
        if (v10) {
          MEMORY[0x1852FF000](v10, 0x80C4018A671A6);
        }
        swift_slowDealloc(v8);
      }
      else
      {
        --*v8;
      }
    }
    atomic_ullong v11 = *a1;
    uint64_t v12 = *a1 & 7;
    if ((v12 - 1) < 3) {
      break;
    }
    if (v12)
    {
      if (v12 == 4)
      {
LABEL_50:
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F8908);
        uint64_t v6 = a1[1];
        goto LABEL_55;
      }
      goto LABEL_60;
    }
LABEL_21:
    unint64_t v8 = (void *)(v11 & 0xFFFFFFFFFFFFFFF0);
    ++*(void *)(v11 & 0xFFFFFFFFFFFFFFF0);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F8908);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 & 0xFFFFFFFFFFFFFFF0 | 8));
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 & 0xFFFFFFFFFFFFFFF0 | 8));
  }
  if (v9 > 62)
  {
    if (v9 != 63)
    {
      if (v9 == 255)
      {
LABEL_52:
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F8908);
        uint64_t v6 = a1[1];
        if (v12 == 1 || v12 == 3 || v12 == 2) {
          goto LABEL_55;
        }
      }
      goto LABEL_60;
    }
    if (v12 > 1) {
      goto LABEL_52;
    }
  }
  else if (v9)
  {
    if (v9 != 1) {
      goto LABEL_60;
    }
    if (v12 >= 3) {
      goto LABEL_50;
    }
  }
  if ((v11 & 8) != 0)
  {
    if (v7) {
      goto LABEL_52;
    }
    goto LABEL_21;
  }
  unint64_t v13 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
  *(_OWORD *)unint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(void *)unint64_t v13 = 1;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 8));
  uint64_t v22 = (os_unfair_lock_s *)v13;
  uint64_t v14 = (_OWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    *(_OWORD *)(v13 + 24) = *v14;
    uint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10);
    *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0;
    uint64_t v16 = *(void *)(v13 + 16);
    *(void *)(v13 + 16) = v15;
    if (v16) {
      MEMORY[0x1852FF000](v16, 0x80C4018A671A6);
    }
  }
  atomic_store(v11 & 7 | v13 | 8, (unint64_t *)a1);
  LOBYTE(v23) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1F8908);
  HIBYTE(v23) = v12;
  if (v14)
  {
    uint64_t v17 = *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10);
    *(void *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0;
    if (v17) {
      MEMORY[0x1852FF000](v17, 0x80C4018A671A6);
    }
    MEMORY[0x1852FF000](v11 & 0xFFFFFFFFFFFFFFF0, 0x1060C4048D9C6C4);
  }
LABEL_55:
  uint64_t v18 = v22;
  if (v22)
  {
    os_unfair_lock_unlock(v22 + 2);
    uint64_t v19 = *(void *)&v18[4]._os_unfair_lock_opaque;
    *(void *)&v18[4]._os_unfair_lock_opaque = 0;
    if (v19) {
      MEMORY[0x1852FF000](v19, 0x80C4018A671A6);
    }
    swift_slowDealloc(v18);
  }
  return v6;
}

uint64_t swift::MetadataCacheEntryBase<anonymous namespace'::ForeignMetadataCacheEntry,int>::doInitialization(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  long long v35 = *(long long **)(v7 + 16);
  if (!v35)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = &v37;
  }
  uint64_t v36 = a3;
  int v8 = a3;
  for (unint64_t i = v6; ; unint64_t i = *(uint64_t **)(a1 + 8))
  {
    unsigned int v10 = *(unsigned __int8 *)(a2 + 17);
    if (*i == 516 || *i == 515)
    {
      atomic_ullong v11 = (unsigned char *)i[1];
      if (v11) {
        goto LABEL_13;
      }
    }
    else
    {
      atomic_ullong v11 = (unsigned char *)i[1];
      if (v11)
      {
LABEL_13:
        uint64_t v12 = v11;
        goto LABEL_15;
      }
    }
    uint64_t v12 = 0;
LABEL_15:
    ForeignMetadataInitialization = (int *)swift::TargetTypeContextDescriptor<swift::InProcess>::getForeignMetadataInitialization(v12);
    uint64_t v14 = *ForeignMetadataInitialization;
    uint64_t v15 = (int *)((char *)ForeignMetadataInitialization + v14);
    BOOL v16 = !v14 || v15 == 0;
    if (!v16 && v15 && (uint64_t v17 = ((uint64_t (*)(uint64_t *, long long *, void))v15)(v6, v35, 0)) != 0)
    {
      uint64_t v19 = v17;
      unsigned __int8 v20 = (*(unsigned char *)(*(v6 - 1) + 82) & 0x40) != 0 ? 1 : 2;
    }
    else
    {
      uint64_t v19 = checkTransitiveCompleteness(v6);
      if (!v19)
      {
        unint64_t v29 = 4;
        *(unsigned char *)(a2 + 17) = 4;
        unsigned __int8 v20 = 4;
        goto LABEL_48;
      }
      unsigned __int8 v20 = 3;
    }
    uint64_t v21 = v18;
    *(unsigned char *)(a2 + 17) = v20;
    if (v8 > 62) {
      break;
    }
    if (v8)
    {
      if (v8 != 1) {
        goto LABEL_59;
      }
      if (v20 == 3) {
        goto LABEL_46;
      }
    }
LABEL_33:
    if ((a3 & 0x100) != 0) {
      goto LABEL_46;
    }
    if (v10 < v20)
    {
      uint64_t v22 = *(os_unfair_lock_s **)a2;
      os_unfair_lock_lock(*(os_unfair_lock_t *)a2);
      __int16 v23 = *(void **)(a2 + 8);
      if (*v23 == 1)
      {
        unint64_t v24 = *(void *)(a2 + 8);
      }
      else
      {
        unint64_t v24 = (unint64_t)swift_slowAlloc(0x30uLL, 0xFuLL);
        *(_OWORD *)unint64_t v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_OWORD *)(v24 + 32) = 0u;
        *(void *)unint64_t v24 = 1;
        *(void *)(v24 + 16) = 0;
        *(void *)(v24 + 24) = 0;
        os_unfair_lock_lock((os_unfair_lock_t)(v24 + 8));
        uint64_t v25 = v23[2];
        v23[2] = 0;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)(v24 + 16) = v25;
        if (v26) {
          MEMORY[0x1852FF000](v26, 0x80C4018A671A6);
        }
      }
      *(void *)(v24 + 24) = v19;
      *(void *)(v24 + 32) = v21;
      atomic_store(*(unsigned __int8 *)(a2 + 17) | v24 | 8, (unint64_t *)a1);
      if ((void *)v24 != v23)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a2 + 8) + 8));
        uint64_t v27 = *(void **)(a2 + 8);
        if (*v27 == 1)
        {
          uint64_t v28 = v27[2];
          v27[2] = 0;
          if (v28) {
            MEMORY[0x1852FF000](v28, 0x80C4018A671A6);
          }
          swift_slowDealloc(v27);
        }
        else
        {
          --*v27;
        }
        *(void *)(a2 + 8) = v24;
      }
      os_unfair_lock_unlock(v22);
      uint64_t v7 = *(void *)(a2 + 8);
    }
    swift::blockOnMetadataDependency(*(void *)(a1 + 8), v36, v19, v21);
  }
  if (v8 == 63)
  {
    if (v20 > 1u) {
      goto LABEL_46;
    }
    goto LABEL_33;
  }
  if (v8 != 255) {
LABEL_59:
  }
    abort();
LABEL_46:
  if (!*(void *)(v7 + 16)
    && (unint64_t)v37 | *((void *)&v37 + 1) | (unint64_t)v38 | *((void *)&v38 + 1))
  {
    operator new();
  }
  unint64_t v29 = *(unsigned __int8 *)(a2 + 17);
LABEL_48:
  uint64_t v30 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = 0;
  if (v19 | v30) {
    operator new();
  }
  uint64_t v31 = *(os_unfair_lock_s **)a2;
  os_unfair_lock_lock(*(os_unfair_lock_t *)a2);
  atomic_store(v29, (unint64_t *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a2 + 8) + 8));
  unsigned int v32 = *(void **)(a2 + 8);
  if (*v32 == 1)
  {
    uint64_t v33 = v32[2];
    v32[2] = 0;
    if (v33) {
      MEMORY[0x1852FF000](v33, 0x80C4018A671A6);
    }
    swift_slowDealloc(v32);
  }
  else
  {
    --*v32;
  }
  os_unfair_lock_unlock(v31);
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  if ((v20 - 1) >= 4u) {
    goto LABEL_59;
  }
  return *(void *)(a1 + 8);
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::WitnessTableCacheEntry>,swift::Mutex>::find<swift::TargetMetadata<swift::InProcess> const*>(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  unsigned int v5 = &unk_1EB1F3000;
  {
    uint64_t v22 = a1;
    uint64_t v20 = a4;
    unint64_t v18 = a3;
    unint64_t v21 = a2;
    unint64_t v19 = v4;
    unsigned int v5 = &unk_1EB1F3000;
    a3 = v18;
    unint64_t v4 = v19;
    a4 = v20;
    int v16 = v15;
    a2 = v21;
    a1 = v22;
    if (v16)
    {
      unint64_t v17 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unsigned int v5 = (void *)&unk_1EB1F3000;
      a3 = v18;
      unint64_t v4 = v19;
      a2 = v21;
      a1 = v22;
      a4 = v20;
    }
  }
  uint64_t v6 = (v5[38] + 8 * v4) ^ HIDWORD(v4);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
  uint64_t v8 = 0x1DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  int v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  if ((a2 & 3) == 0) {
    int v9 = 0;
  }
  while (2)
  {
    unint64_t v11 = v8 & ~(-1 << v10);
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v12) = v9 + v11;
        LOBYTE(v12) = atomic_load_explicit(&v9[v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v12) = v9 + 2 * v11;
        LOWORD(v12) = atomic_load_explicit((atomic_ushort *volatile)&v9[2 * v11], memory_order_acquire);
        if (!v12) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v12) = atomic_load_explicit((atomic_uint *volatile)&v9[4 * v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v12 = (a2 >> (4 * v11)) & 0xF;
        if (v12)
        {
LABEL_19:
          unint64_t v13 = (v12 - 1);
          if (v13 < a3 && *(void *)(*(void *)(a4 + 8 * v13) + 8) == *a1) {
            return a4 + 8 * v13;
          }
          uint64_t v8 = v11 + 1;
          continue;
        }
        return 0;
    }
  }
}

uint64_t swift::ConcurrentReadableHashMap<swift::HashMapElementWrapper<anonymous namespace'::RelativeWitnessTableCacheEntry>,swift::Mutex>::find<swift::TargetMetadata<swift::InProcess> const*>(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  unsigned int v5 = &unk_1EB1F3000;
  {
    uint64_t v22 = a1;
    uint64_t v20 = a4;
    unint64_t v18 = a3;
    unint64_t v21 = a2;
    unint64_t v19 = v4;
    unsigned int v5 = &unk_1EB1F3000;
    a3 = v18;
    unint64_t v4 = v19;
    a4 = v20;
    int v16 = v15;
    a2 = v21;
    a1 = v22;
    if (v16)
    {
      unint64_t v17 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
      if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unsigned int v5 = (void *)&unk_1EB1F3000;
      a3 = v18;
      unint64_t v4 = v19;
      a2 = v21;
      a1 = v22;
      a4 = v20;
    }
  }
  uint64_t v6 = (v5[38] + 8 * v4) ^ HIDWORD(v4);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
  uint64_t v8 = 0x1DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  int v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  if ((a2 & 3) == 0) {
    int v9 = 0;
  }
  while (2)
  {
    unint64_t v11 = v8 & ~(-1 << v10);
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v12) = v9 + v11;
        LOBYTE(v12) = atomic_load_explicit(&v9[v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v12) = v9 + 2 * v11;
        LOWORD(v12) = atomic_load_explicit((atomic_ushort *volatile)&v9[2 * v11], memory_order_acquire);
        if (!v12) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v12) = atomic_load_explicit((atomic_uint *volatile)&v9[4 * v11], memory_order_acquire);
        if (v12) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v12 = (a2 >> (4 * v11)) & 0xF;
        if (v12)
        {
LABEL_19:
          unint64_t v13 = (v12 - 1);
          if (v13 < a3 && *(void *)(*(void *)(a4 + 8 * v13) + 8) == *a1) {
            return a4 + 8 * v13;
          }
          uint64_t v8 = v11 + 1;
          continue;
        }
        return 0;
    }
  }
}

uint64_t anonymous namespace'::RelativeWitnessTableCacheEntry::getWitnessTableSize(int *a1)
{
  unint64_t v1 = a1[3];
  unint64_t v2 = (unsigned int *)(((unint64_t)&a1[3 * BYTE1(v1) + 4 + ((v1 >> 6) & 1)] + ((v1 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((v1 & 0x10000) != 0) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v4 = HIWORD(v2[2 * v3 + ((v1 >> 16) & 1)]);
  uint64_t v5 = *a1;
  if (v5)
  {
    uint64_t v6 = (char **)((char *)a1 + (v5 & 0xFFFFFFFFFFFFFFFELL));
    if (v5)
    {
      if (*v6)
      {
        unint64_t v7 = *v6;
        goto LABEL_11;
      }
    }
    else if (v6)
    {
      unint64_t v7 = (char *)a1 + (v5 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_11;
    }
  }
  unint64_t v7 = 0;
LABEL_11:
  uint64_t v8 = v7;
  if (v7) {
    uint64_t v8 = v7;
  }
  if (v8 == (char *)-24) {
    int v9 = 0;
  }
  else {
    int v9 = v8 + 24;
  }
  uint64_t v10 = *((unsigned int *)v7 + 4);
  if (v10)
  {
    unsigned int v11 = *((_DWORD *)v8 + 3);
    uint64_t v12 = &v9[12 * v11];
    unint64_t v13 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v13 >= 8)
    {
      unint64_t v16 = v13 + 1;
      uint64_t v17 = v16 & 7;
      if ((v16 & 7) == 0) {
        uint64_t v17 = 8;
      }
      unint64_t v18 = v16 - v17;
      int v15 = &v12[8 * v18];
      unint64_t v19 = (const float *)&v9[12 * v11 + 32];
      int64x2_t v20 = 0uLL;
      v21.i64[0] = 0xF0000000FLL;
      v21.i64[1] = 0xF0000000FLL;
      int8x16_t v22 = (int8x16_t)vdupq_n_s64(1uLL);
      int64x2_t v23 = 0uLL;
      int64x2_t v24 = 0uLL;
      int64x2_t v25 = 0uLL;
      do
      {
        uint64_t v26 = v19 - 8;
        unsigned long long v27 = (unsigned __int128)vld2q_f32(v26);
        unsigned long long v28 = (unsigned __int128)vld2q_f32(v19);
        int32x4_t v29 = (int32x4_t)vandq_s8((int8x16_t)v28, v21);
        int32x4_t v30 = vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v27, v21));
        v31.i64[0] = v30.u32[0];
        v31.i64[1] = v30.u32[1];
        int64x2_t v32 = (int64x2_t)vandq_s8(v31, v22);
        v31.i64[0] = v30.u32[2];
        v31.i64[1] = v30.u32[3];
        int64x2_t v33 = (int64x2_t)vandq_s8(v31, v22);
        int32x4_t v34 = vceqzq_s32(v29);
        v31.i64[0] = v34.u32[0];
        v31.i64[1] = v34.u32[1];
        int64x2_t v35 = (int64x2_t)vandq_s8(v31, v22);
        v31.i64[0] = v34.u32[2];
        v31.i64[1] = v34.u32[3];
        int64x2_t v23 = vaddq_s64(v23, v33);
        int64x2_t v20 = vaddq_s64(v20, v32);
        int64x2_t v25 = vaddq_s64(v25, (int64x2_t)vandq_s8(v31, v22));
        int64x2_t v24 = vaddq_s64(v24, v35);
        v19 += 16;
        v18 -= 8;
      }
      while (v18);
      uint64_t v14 = vaddvq_s64(vaddq_s64(vaddq_s64(v24, v20), vaddq_s64(v25, v23)));
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = v12;
    }
    uint64_t v36 = &v12[8 * v10];
    do
    {
      char v37 = *v15;
      v15 += 8;
      if ((v37 & 0xF) == 0) {
        ++v14;
      }
    }
    while (v15 != v36);
  }
  else
  {
    uint64_t v14 = 0;
  }
  return 8 * (v14 + (v4 >> 1)) + 8;
}

uint64_t _GLOBAL__sub_I_Metadata_cpp()
{
  return MEMORY[0x1F41814B0](swift_objc_classCopyFixupHandler);
}

swift::Demangle::__runtime::Node *swift::ResolveToDemanglingForContext::operator()(swift::Demangle::__runtime::NodeFactory **a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5 = (void *)(a5 + a4);
  if (a4) {
    uint64_t v6 = (void *)(a5 + a4);
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 == 1) {
    uint64_t v5 = v6;
  }
  if (a3 == 1)
  {
    if (a2) {
      abort();
    }
    if (*v5) {
      uint64_t v5 = (void *)*v5;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  unint64_t v7 = *a1;

  return _buildDemanglingForSymbolicReference(a2, (uint64_t)v5, v7);
}

swift::Demangle::__runtime::Node *_buildDemanglingForSymbolicReference(int a1, uint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = 0;
      }
      return swift::_buildDemanglingForContext(v6, 0, 0, a3);
    case 1:
      unint64_t v7 = a3;
      __int16 v8 = 299;
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v7, v8, a2);
    case 2:
      unint64_t v7 = a3;
      __int16 v8 = 336;
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v7, v8, a2);
    case 3:
      unint64_t v7 = a3;
      __int16 v8 = 337;
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v7, v8, a2);
    case 4:
      unint64_t v7 = a3;
      __int16 v8 = 347;
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v7, v8, a2);
    default:
      abort();
  }
}

swift::Demangle::__runtime::Node *swift::ExpandResolvedSymbolicReferences::operator()(swift::Demangle::__runtime::NodeFactory **a1, int a2, uint64_t a3)
{
  return _buildDemanglingForSymbolicReference(a2, a3, *a1);
}

void swift::addImageTypeMetadataRecordBlockCallbackUnsafe(swift *this, unint64_t a2, char *a3)
{
  swift::libPrespecializedImageLoaded(this);
  if (qword_1EB208CA0 != -1) {
    dispatch_once_f(&qword_1EB208CA0, &SharedCacheInfo, (dispatch_function_t)swift::Lazy<SharedCacheInfoState>::defaultInitCallback);
  }
  BOOL v5 = SharedCacheInfo <= a2 && qword_1EB208C98 > a2;
  *(void *)&long long v7 = a2;
  *((void *)&v7 + 1) = &a3[a2];
  if (v5) {
    uint64_t v6 = &unk_1EB208BA0;
  }
  else {
    uint64_t v6 = &unk_1EB208B78;
  }
}

uint64_t swift::Lazy<TypeMetadataPrivateState>::defaultInitCallback(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return swift::initializeTypeMetadataRecordLookup((swift *)a1);
}

void swift_registerTypeMetadataRecords(unint64_t a1, uint64_t a2)
{
  if (qword_1EB208BC8 != -1) {
    dispatch_once_f(&qword_1EB208BC8, &TypeMetadataRecords, (dispatch_function_t)swift::Lazy<TypeMetadataPrivateState>::defaultInitCallback);
  }
  if (qword_1EB208CA0 != -1) {
    dispatch_once_f(&qword_1EB208CA0, &SharedCacheInfo, (dispatch_function_t)swift::Lazy<SharedCacheInfoState>::defaultInitCallback);
  }
  BOOL v4 = SharedCacheInfo <= a1 && qword_1EB208C98 > a1;
  *(void *)&long long v6 = a1;
  *((void *)&v6 + 1) = a2;
  if (v4) {
    BOOL v5 = &unk_1EB208BA0;
  }
  else {
    BOOL v5 = &unk_1EB208B78;
  }
}

BOOL swift::_isCImportedTagType(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x1Fu) - 17 > 1) {
    return 0;
  }
  if (!*(unsigned char *)(a2 + 80)) {
    goto LABEL_10;
  }
  if (*(void *)(a2 + 56) != 1)
  {
    if (!*(void *)(a2 + 72)) {
      goto LABEL_10;
    }
    return 0;
  }
  if (**(unsigned char **)(a2 + 48) == 116 || *(void *)(a2 + 72) != 0) {
    return 0;
  }
LABEL_10:
  BOOL v4 = a1 + 1;
  uint64_t v3 = (int)a1[1];
  if (!v3)
  {
    BOOL v5 = 0;
    goto LABEL_20;
  }
  BOOL v5 = (char *)v4 + (v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) == 0)
  {
    if (!v5) {
      goto LABEL_20;
    }
    long long v6 = (char *)v4 + (v3 & 0xFFFFFFFFFFFFFFFELL);
LABEL_19:
    BOOL v5 = v6;
    goto LABEL_20;
  }
  if (*(void *)v5) {
    BOOL v5 = *(char **)v5;
  }
  else {
    BOOL v5 = 0;
  }
LABEL_20:
  while (1)
  {
    __int16 v8 = v5;
    if (v5)
    {
      if ((*(_DWORD *)v5 & 0x1F) == 0) {
        break;
      }
    }
    BOOL v5 = 0;
    uint64_t v11 = *((int *)v8 + 1);
    int v9 = v8 + 4;
    uint64_t v10 = v11;
    if (v11)
    {
      uint64_t v12 = &v9[v10 & 0xFFFFFFFFFFFFFFFELL];
      BOOL v5 = 0;
      if (v10)
      {
        if (*(void *)v12) {
          BOOL v5 = *(char **)v12;
        }
      }
      else if (v12)
      {
        long long v6 = v12;
        goto LABEL_19;
      }
    }
  }
  uint64_t v13 = (uint64_t)&v5[*((int *)v5 + 2) + 8];
  if (!v13 || strlen((const char *)v13) != 3) {
    return 0;
  }
  return *(_WORD *)v13 == 24415 && *(unsigned char *)(v13 + 2) == 67;
}

size_t swift::ParsedTypeIdentity::parse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 80) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  uint64_t v4 = *(int *)(a1 + 8);
  BOOL v5 = (const char *)(a1 + 8 + v4);
  if (v5) {
    size_t result = strlen((const char *)(a1 + 8 + v4));
  }
  else {
    size_t result = 0;
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = result;
  if ((*(unsigned char *)(a1 + 2) & 4) == 0)
  {
    *(_OWORD *)(a2 + 16) = *(_OWORD *)a2;
    return result;
  }
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(unsigned char *)(a2 + 80) = 1;
  long long v7 = &v5[result];
  __int16 v8 = &v5[result + 1];
  size_t result = strlen(v8);
  if (result)
  {
    int v9 = v7;
    do
    {
      int v11 = *((unsigned __int8 *)v9 + 1);
      switch(v11)
      {
        case 'S':
          *(void *)(a2 + 48) = v9 + 2;
          uint64_t v10 = (void *)(a2 + 56);
          break;
        case 'R':
          *(void *)(a2 + 64) = v9 + 2;
          uint64_t v10 = (void *)(a2 + 72);
          break;
        case 'N':
          BOOL v5 = v9 + 2;
          *(void *)(a2 + 32) = v9 + 2;
          uint64_t v10 = (void *)(a2 + 40);
          break;
        default:
          goto LABEL_10;
      }
      long long v7 = &v8[result];
      *uint64_t v10 = result - 1;
LABEL_10:
      int v9 = &v8[result];
      v8 += result + 1;
      size_t result = strlen(v8);
    }
    while (result);
  }
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7 - v5;
  return result;
}

uint64_t swift::_contextDescriptorMatchesMangling(char *a1, const char *a2)
{
  if (!a1) {
    return a2 == 0;
  }
  __int16 v8 = a1;
  while (1)
  {
    int v9 = *((unsigned __int16 *)a2 + 8);
    if (v9 == 232)
    {
      int v10 = *((unsigned __int8 *)a2 + 18);
      if ((v10 - 1) >= 2)
      {
        if (v10 != 5 || !*((_DWORD *)a2 + 2))
        {
          a2 = 0;
          goto LABEL_19;
        }
        a2 = *(const char **)a2;
      }
      a2 = *(const char **)a2;
      if (!a2) {
        goto LABEL_19;
      }
      int v9 = *((unsigned __int16 *)a2 + 8);
    }
    if (v9 == 233 || v9 == 181)
    {
      int v11 = *(void *)a2 ? *(const char **)a2 : 0;
      if (swift::equalContexts(v8, v11)) {
        return 1;
      }
    }
LABEL_19:
    uint64_t v12 = v8;
    uint64_t v13 = v8;
    int v14 = *(_DWORD *)v8;
    int v15 = *(_DWORD *)v8 & 0x1F;
    if (v15 == 3)
    {
      if (*((_WORD *)a2 + 8) != 180) {
        return 0;
      }
      int v19 = *((unsigned __int8 *)a2 + 18);
      int64x2_t v20 = a2;
      if (v19 != 2)
      {
        if (v19 != 5 || *((_DWORD *)a2 + 2) < 2u)
        {
          uint64_t v21 = 0;
          goto LABEL_48;
        }
        int64x2_t v20 = *(const char **)a2;
      }
      uint64_t v21 = *((void *)v20 + 1);
LABEL_48:
      if (*(_WORD *)(v21 + 16) != 101) {
        return 0;
      }
      size_t v34 = *(void *)(v21 + 8);
      int64x2_t v35 = &v12[*((int *)v12 + 2) + 8];
      if (strncmp(*(const char **)v21, v35, v34) || strlen(v35) != v34) {
        return 0;
      }
      if ((v19 - 1) >= 2)
      {
        if (v19 != 5) {
          goto LABEL_25;
        }
LABEL_217:
        if (!*((_DWORD *)a2 + 2)) {
          goto LABEL_25;
        }
        a2 = *(const char **)a2;
      }
LABEL_219:
      a2 = *(const char **)a2;
      goto LABEL_240;
    }
    if (v15 != 1)
    {
      if (!v15)
      {
        if (*((_WORD *)a2 + 8) != 153) {
          return 0;
        }
        unint64_t v16 = *(const char **)a2;
        size_t v17 = *((void *)a2 + 1);
        unint64_t v18 = &v8[*((int *)v8 + 2) + 8];
        if (strncmp(v16, &v12[*((int *)v12 + 2) + 8], v17) || strlen(v18) != v17) {
          return 0;
        }
LABEL_25:
        a2 = 0;
        goto LABEL_240;
      }
      if ((v14 & 0x10) == 0) {
        return 0;
      }
      LOBYTE(v154) = 0;
      LOBYTE(v165) = 0;
      unsigned int v25 = *((unsigned __int16 *)a2 + 8);
      if (v25 <= 0xA6)
      {
        if (v25 == 24)
        {
          if ((v14 & 0x1F) != 0x10) {
            return 0;
          }
        }
        else if (v25 != 61 || (v14 & 0x1F) != 0x12)
        {
          return 0;
        }
        goto LABEL_97;
      }
      if (v25 == 167)
      {
LABEL_97:
        int v62 = 0;
        int v63 = 1;
        goto LABEL_124;
      }
      if (v25 != 234)
      {
        if (v25 != 219) {
          return 0;
        }
        if ((v14 & 0x1F) != 0x11)
        {
          uint64_t v26 = (uint64_t)(v8 + 8);
          uint64_t v27 = *((int *)v8 + 2);
          unsigned long long v28 = &v8[v27 + 8];
          if (v28)
          {
            size_t v29 = strlen(&v8[v27 + 8]);
            if ((v14 & 0x40000) == 0)
            {
LABEL_46:
              uint64_t v30 = 0;
              char v31 = 0;
              int64x2_t v32 = v28;
              int64x2_t v33 = (const char *)v29;
LABEL_122:
              atomic_ullong v154 = v28;
              size_t v155 = v29;
              uint64_t v156 = v32;
              uint64_t v157 = (char *)v33;
              uint64_t v158 = v30;
              uint64_t v159 = v27;
              unint64_t v160 = v4;
              uint64_t v161 = v26;
              __s1 = v5;
              uint64_t v163 = v2;
              unsigned __int8 v164 = v31;
              int v62 = 1;
              LOBYTE(v165) = 1;
              if (!swift::_isCImportedTagType(v8, (uint64_t)&v154)) {
                return 0;
              }
              int v63 = 0;
              goto LABEL_124;
            }
          }
          else
          {
            size_t v29 = 0;
            if ((v14 & 0x40000) == 0) {
              goto LABEL_46;
            }
          }
          uint64_t v197 = 0;
          v198[0] = 0;
          uint64_t v196 = 0;
          size_t v140 = v29;
          uint64_t v65 = &v28[v29];
          uint64_t v66 = &v28[v29 + 1];
          size_t v67 = strlen(v66);
          if (!v67)
          {
            uint64_t v2 = 0;
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            uint64_t v30 = 0;
            uint64_t v4 = 0;
            BOOL v5 = 0;
            int64x2_t v32 = v28;
LABEL_121:
            int64x2_t v33 = (const char *)(v65 - v32);
            char v31 = 1;
            size_t v29 = v140;
            goto LABEL_122;
          }
          uint64_t v30 = 0;
          unint64_t v145 = 0;
          unint64_t v150 = 0;
          unint64_t v135 = v28;
          int64x2_t v32 = v28;
          unint64_t v68 = v65;
          while (1)
          {
            int v70 = *((unsigned __int8 *)v65 + 1);
            switch(v70)
            {
              case 'S':
                unint64_t v150 = v65 + 2;
                uint64_t v69 = &v197;
                break;
              case 'R':
                unint64_t v145 = (void *)(v65 + 2);
                uint64_t v69 = &v196;
                break;
              case 'N':
                uint64_t v30 = (uint64_t)(v65 + 2);
                uint64_t v69 = v198;
                int64x2_t v32 = v65 + 2;
                break;
              default:
                goto LABEL_107;
            }
            unint64_t v68 = &v66[v67];
            *uint64_t v69 = v67 - 1;
LABEL_107:
            uint64_t v65 = &v66[v67];
            v66 += v67 + 1;
            size_t v67 = strlen(v66);
            if (!v67)
            {
              uint64_t v26 = v197;
              uint64_t v27 = v198[0];
              uint64_t v65 = v68;
              uint64_t v2 = v196;
              unsigned long long v28 = v135;
              BOOL v5 = v145;
              uint64_t v4 = v150;
              goto LABEL_121;
            }
          }
        }
        goto LABEL_97;
      }
      uint64_t v49 = (uint64_t)(v8 + 8);
      uint64_t v50 = *((int *)v8 + 2);
      char v51 = &v8[v50 + 8];
      if (v51)
      {
        size_t v52 = strlen(&v8[v50 + 8]);
        if ((v14 & 0x40000) != 0)
        {
LABEL_86:
          uint64_t v197 = 0;
          v198[0] = 0;
          uint64_t v196 = 0;
          size_t v144 = v52;
          unint64_t v53 = &v51[v52];
          unsigned int v54 = v51;
          unint64_t v55 = &v51[v52 + 1];
          size_t v56 = strlen(v55);
          if (v56)
          {
            uint64_t v57 = 0;
            unint64_t v149 = 0;
            unint64_t v139 = (char *)v54;
            unint64_t v58 = v54;
            ContextDescriptor = 0;
            uint64_t v59 = v53;
            while (1)
            {
              int v61 = *((unsigned __int8 *)v53 + 1);
              switch(v61)
              {
                case 'S':
                  ContextDescriptor = v53 + 2;
                  unint64_t v60 = &v197;
                  break;
                case 'R':
                  unint64_t v149 = v53 + 2;
                  unint64_t v60 = &v196;
                  break;
                case 'N':
                  uint64_t v57 = (uint64_t)(v53 + 2);
                  unint64_t v60 = v198;
                  unint64_t v58 = v53 + 2;
                  break;
                default:
                  goto LABEL_90;
              }
              uint64_t v59 = &v55[v56];
              *unint64_t v60 = v56 - 1;
LABEL_90:
              unint64_t v53 = &v55[v56];
              v55 += v56 + 1;
              size_t v56 = strlen(v55);
              if (!v56)
              {
                uint64_t v49 = v197;
                uint64_t v50 = v198[0];
                unint64_t v53 = v59;
                uint64_t v2 = v196;
                char v51 = v139;
                goto LABEL_114;
              }
            }
          }
          uint64_t v2 = 0;
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          uint64_t v57 = 0;
          unint64_t v149 = 0;
          unint64_t v58 = v54;
          char v51 = (char *)v54;
          ContextDescriptor = 0;
LABEL_114:
          uint64_t v64 = (const char *)(v53 - v58);
          uint64_t v3 = 1;
          size_t v52 = v144;
          uint64_t v4 = v149;
LABEL_115:
          atomic_ullong v154 = v51;
          size_t v155 = v52;
          uint64_t v156 = v58;
          uint64_t v157 = (char *)v64;
          uint64_t v158 = v57;
          uint64_t v159 = v50;
          unint64_t v160 = ContextDescriptor;
          uint64_t v161 = v49;
          __s1 = v4;
          uint64_t v163 = v2;
          unsigned __int8 v164 = v3;
          LOBYTE(v165) = 1;
          if ((v14 & 0x40000) == 0 || v49 != 1 || *(unsigned char *)ContextDescriptor != 116) {
            return 0;
          }
          int v63 = 0;
          int v62 = 1;
LABEL_124:
          uint64_t v2 = *((unsigned __int8 *)a2 + 18);
          unint64_t v71 = a2;
          if (v2 != 2)
          {
            if (v2 != 5 || *((_DWORD *)a2 + 2) < 2u)
            {
              ContextDescriptor = 0;
              goto LABEL_130;
            }
            unint64_t v71 = *(const char **)a2;
          }
          ContextDescriptor = (_WORD *)*((void *)v71 + 1);
LABEL_130:
          if (ContextDescriptor[8] == 205)
          {
            if (!v63) {
              goto LABEL_168;
            }
            uint64_t v72 = (uint64_t)(v13 + 8);
            uint64_t v73 = *((int *)v13 + 2);
            size_t v74 = &v13[v73 + 8];
            if (v74)
            {
              size_t v75 = strlen(&v13[v73 + 8]);
              if ((v14 & 0x40000) == 0)
              {
LABEL_134:
                uint64_t v76 = 0;
                uint64_t v3 = 0;
                uint64_t v77 = v74;
                uint64_t v78 = (const char *)v75;
LABEL_167:
                atomic_ullong v154 = v74;
                size_t v155 = v75;
                uint64_t v156 = v77;
                uint64_t v157 = (char *)v78;
                uint64_t v158 = v76;
                uint64_t v159 = v73;
                unint64_t v160 = v4;
                uint64_t v161 = v72;
                __s1 = v5;
                uint64_t v163 = v2;
                unsigned __int8 v164 = v3;
                int v62 = 1;
                LOBYTE(v165) = 1;
LABEL_168:
                int v98 = *((unsigned __int8 *)ContextDescriptor + 18);
                unint64_t v99 = (uint64_t *)ContextDescriptor;
                if ((v98 - 1) >= 2) {
                  unint64_t v99 = *(uint64_t **)ContextDescriptor;
                }
                if (!v164) {
                  return 0;
                }
                uint64_t v100 = *v99;
                size_t v101 = *(void *)(v100 + 8);
                if (v163 != v101 || v101 && memcmp(__s1, *(const void **)v100, v101)) {
                  return 0;
                }
                if (v98 != 2)
                {
                  if (v98 != 5 || *((_DWORD *)ContextDescriptor + 2) < 2u)
                  {
                    ContextDescriptor = 0;
                    int v83 = 1;
                    goto LABEL_184;
                  }
                  ContextDescriptor = *(_WORD **)ContextDescriptor;
                }
                ContextDescriptor = (_WORD *)*((void *)ContextDescriptor + 1);
                int v83 = 1;
LABEL_184:
                if (ContextDescriptor[8] != 101) {
                  return 0;
                }
                unint64_t v103 = *(const void **)ContextDescriptor;
                size_t v102 = *((void *)ContextDescriptor + 1);
                if (v62)
                {
                  uint64_t v104 = v159;
                  goto LABEL_205;
                }
                uint64_t v104 = *((int *)v13 + 2);
                size_t v105 = (char *)&v13[v104 + 8];
                if (v105)
                {
                  size_t v106 = strlen(&v13[v104 + 8]);
                  if ((v14 & 0x40000) == 0)
                  {
LABEL_189:
                    uint64_t v107 = 0;
                    int v83 = 0;
                    uint64_t v4 = v105;
                    uint64_t v108 = (char *)v106;
LABEL_204:
                    atomic_ullong v154 = (const char *)v4;
                    size_t v155 = v106;
                    uint64_t v156 = v105;
                    uint64_t v157 = v108;
                    uint64_t v158 = v107;
                    uint64_t v159 = v104;
                    unint64_t v160 = v5;
                    uint64_t v161 = v2;
                    __s1 = ContextDescriptor;
                    uint64_t v163 = v3;
                    unsigned __int8 v164 = v83;
                    uint64_t v2 = 1;
                    LOBYTE(v165) = 1;
LABEL_205:
                    if (v83) {
                      BOOL v115 = v104 == 0;
                    }
                    else {
                      BOOL v115 = 1;
                    }
                    unint64_t v116 = (uint64_t *)&v155;
                    if (!v115) {
                      unint64_t v116 = &v159;
                    }
                    uint64_t v117 = *v116;
                    unint64_t v118 = (const void **)&v158;
                    if (v115) {
                      unint64_t v118 = (const void **)&v154;
                    }
                    if (v102 != v117 || v102 && memcmp(v103, *v118, v102)) {
                      return 0;
                    }
                    int v119 = *((unsigned __int8 *)a2 + 18);
                    if ((v119 - 1) >= 2)
                    {
                      if (v119 != 5) {
                        goto LABEL_25;
                      }
                      goto LABEL_217;
                    }
                    goto LABEL_219;
                  }
                }
                else
                {
                  size_t v106 = 0;
                  if ((v14 & 0x40000) == 0) {
                    goto LABEL_189;
                  }
                }
                size_t v148 = *(const void **)ContextDescriptor;
                uint64_t v197 = 0;
                v198[0] = 0;
                uint64_t v196 = 0;
                size_t v138 = v106;
                uint64_t v109 = &v105[v106];
                unint64_t v110 = &v105[v106 + 1];
                size_t v111 = strlen(v110);
                unint64_t v143 = v105;
                if (!v111)
                {
                  uint64_t v3 = 0;
                  uint64_t v2 = 0;
                  uint64_t v104 = 0;
                  uint64_t v107 = 0;
                  BOOL v5 = 0;
                  ContextDescriptor = 0;
LABEL_203:
                  uint64_t v108 = (char *)(v109 - v105);
                  int v83 = 1;
                  uint64_t v4 = v143;
                  unint64_t v103 = v148;
                  size_t v106 = v138;
                  goto LABEL_204;
                }
                uint64_t v107 = 0;
                uint64_t v153 = 0;
                ContextDescriptor = 0;
                unint64_t v112 = v109;
                while (1)
                {
                  int v114 = *((unsigned __int8 *)v109 + 1);
                  switch(v114)
                  {
                    case 'S':
                      uint64_t v153 = (void *)(v109 + 2);
                      uint64_t v113 = &v197;
                      break;
                    case 'R':
                      ContextDescriptor = v109 + 2;
                      uint64_t v113 = &v196;
                      break;
                    case 'N':
                      uint64_t v107 = (uint64_t)(v109 + 2);
                      uint64_t v113 = v198;
                      size_t v105 = (char *)(v109 + 2);
                      break;
                    default:
                      goto LABEL_195;
                  }
                  unint64_t v112 = &v110[v111];
                  uint64_t *v113 = v111 - 1;
LABEL_195:
                  uint64_t v109 = &v110[v111];
                  v110 += v111 + 1;
                  size_t v111 = strlen(v110);
                  if (!v111)
                  {
                    uint64_t v2 = v197;
                    uint64_t v104 = v198[0];
                    uint64_t v109 = v112;
                    uint64_t v3 = v196;
                    BOOL v5 = v153;
                    goto LABEL_203;
                  }
                }
              }
            }
            else
            {
              size_t v75 = 0;
              if ((v14 & 0x40000) == 0) {
                goto LABEL_134;
              }
            }
            uint64_t v197 = 0;
            v198[0] = 0;
            uint64_t v196 = 0;
            size_t v141 = v75;
            unint64_t v86 = &v74[v75];
            unint64_t v87 = &v74[v75 + 1];
            size_t v88 = strlen(v87);
            if (!v88)
            {
              uint64_t v2 = 0;
              uint64_t v72 = 0;
              uint64_t v73 = 0;
              uint64_t v76 = 0;
              uint64_t v4 = 0;
              BOOL v5 = 0;
              uint64_t v77 = v74;
LABEL_166:
              uint64_t v78 = (const char *)(v86 - v77);
              uint64_t v3 = 1;
              size_t v75 = v141;
              goto LABEL_167;
            }
            uint64_t v76 = 0;
            unsigned int v146 = 0;
            uint64_t v151 = 0;
            unint64_t v136 = v74;
            uint64_t v77 = v74;
            uint64_t v89 = v86;
            while (1)
            {
              int v91 = *((unsigned __int8 *)v86 + 1);
              switch(v91)
              {
                case 'S':
                  uint64_t v151 = v86 + 2;
                  uint64_t v90 = &v197;
                  break;
                case 'R':
                  unsigned int v146 = (void *)(v86 + 2);
                  uint64_t v90 = &v196;
                  break;
                case 'N':
                  uint64_t v76 = (uint64_t)(v86 + 2);
                  uint64_t v90 = v198;
                  uint64_t v77 = v86 + 2;
                  break;
                default:
                  goto LABEL_146;
              }
              uint64_t v89 = &v87[v88];
              *uint64_t v90 = v88 - 1;
LABEL_146:
              unint64_t v86 = &v87[v88];
              v87 += v88 + 1;
              size_t v88 = strlen(v87);
              if (!v88)
              {
                uint64_t v72 = v197;
                uint64_t v73 = v198[0];
                unint64_t v86 = v89;
                uint64_t v2 = v196;
                size_t v74 = v136;
                BOOL v5 = v146;
                uint64_t v4 = v151;
                goto LABEL_166;
              }
            }
          }
          if ((v63 & 1) == 0)
          {
            int v83 = v164;
            uint64_t v79 = v163;
            if (!v164) {
              goto LABEL_184;
            }
            goto LABEL_183;
          }
          uint64_t v79 = *((int *)v13 + 2);
          unint64_t v80 = &v13[v79 + 8];
          if (v80)
          {
            size_t v81 = strlen(&v13[v79 + 8]);
            if ((v14 & 0x40000) == 0)
            {
LABEL_138:
              uint64_t v82 = 0;
              int v83 = 0;
              long long v84 = v80;
              uint64_t v85 = (const char *)v81;
              goto LABEL_182;
            }
          }
          else
          {
            size_t v81 = 0;
            if ((v14 & 0x40000) == 0) {
              goto LABEL_138;
            }
          }
          uint64_t v197 = 0;
          v198[0] = 0;
          uint64_t v196 = 0;
          size_t v142 = v81;
          uint64_t v92 = &v80[v81];
          unint64_t v93 = &v80[v81 + 1];
          size_t v94 = strlen(v93);
          if (!v94)
          {
            uint64_t v79 = 0;
            uint64_t v2 = 0;
            uint64_t v3 = 0;
            uint64_t v82 = 0;
            uint64_t v4 = 0;
            BOOL v5 = 0;
            long long v84 = v80;
LABEL_181:
            uint64_t v85 = (const char *)(v92 - v84);
            int v83 = 1;
            size_t v81 = v142;
LABEL_182:
            atomic_ullong v154 = v80;
            size_t v155 = v81;
            uint64_t v156 = v84;
            uint64_t v157 = (char *)v85;
            uint64_t v158 = v82;
            uint64_t v159 = v3;
            unint64_t v160 = v4;
            uint64_t v161 = v2;
            __s1 = v5;
            uint64_t v163 = v79;
            unsigned __int8 v164 = v83;
            int v62 = 1;
            LOBYTE(v165) = 1;
            if (!v83) {
              goto LABEL_184;
            }
LABEL_183:
            if (v79) {
              return 0;
            }
            goto LABEL_184;
          }
          uint64_t v82 = 0;
          uint64_t v147 = 0;
          unint64_t v152 = 0;
          unint64_t v137 = v80;
          long long v84 = v80;
          uint64_t v95 = v92;
          while (1)
          {
            int v97 = *((unsigned __int8 *)v92 + 1);
            switch(v97)
            {
              case 'S':
                unint64_t v152 = v92 + 2;
                uint64_t v96 = &v197;
                break;
              case 'R':
                uint64_t v147 = (void *)(v92 + 2);
                uint64_t v96 = &v196;
                break;
              case 'N':
                uint64_t v82 = (uint64_t)(v92 + 2);
                uint64_t v96 = v198;
                long long v84 = v92 + 2;
                break;
              default:
                goto LABEL_157;
            }
            uint64_t v95 = &v93[v94];
            *uint64_t v96 = v94 - 1;
LABEL_157:
            uint64_t v92 = &v93[v94];
            v93 += v94 + 1;
            size_t v94 = strlen(v93);
            if (!v94)
            {
              uint64_t v2 = v197;
              uint64_t v3 = v198[0];
              uint64_t v92 = v95;
              uint64_t v79 = v196;
              unint64_t v80 = v137;
              BOOL v5 = v147;
              uint64_t v4 = v152;
              goto LABEL_181;
            }
          }
        }
      }
      else
      {
        size_t v52 = 0;
        if ((v14 & 0x40000) != 0) {
          goto LABEL_86;
        }
      }
      uint64_t v57 = 0;
      uint64_t v3 = 0;
      unint64_t v58 = v51;
      uint64_t v64 = (const char *)v52;
      goto LABEL_115;
    }
    if (*((_WORD *)a2 + 8) != 71) {
      return 0;
    }
    int v22 = *((unsigned __int8 *)a2 + 18);
    int64x2_t v23 = a2;
    if (v22 != 2)
    {
      if (v22 != 5 || *((_DWORD *)a2 + 2) < 2u) {
        return 0;
      }
      int64x2_t v23 = *(const char **)a2;
    }
    int64x2_t v24 = (swift::Demangle::__runtime::Node *)*((void *)v23 + 1);
    size_t v155 = 0;
    uint64_t v156 = 0;
    uint64_t v157 = 0;
    uint64_t v158 = 2400;
    uint64_t v159 = 0;
    LOBYTE(v160) = 0;
    v195 = 0;
    __s1 = 0;
    uint64_t v163 = 0;
    uint64_t v161 = 0;
    unsigned __int8 v164 = 0;
    long long v165 = 0u;
    long long v166 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v184 = 0u;
    long long v185 = 0u;
    long long v186 = 0u;
    long long v187 = 0u;
    long long v188 = 0u;
    long long v189 = 0u;
    long long v190 = 0u;
    long long v191 = 0u;
    long long v192 = 0u;
    int v193 = 0;
    atomic_ullong v154 = (const char *)&unk_1ECA068E8;
    ContextDescriptor = (_WORD *)_findContextDescriptor(v24, (swift::Demangle::__runtime::Demangler *)&v154);
    v198[0] = 0;
    Extendeduint64_t TypeContextDescriptor = (const char *)_findExtendedTypeContextDescriptor(v8, &v154, v198);
    if (ContextDescriptor && ExtendedTypeContextDescriptor)
    {
      if (!swift::equalContexts((const char *)ContextDescriptor, ExtendedTypeContextDescriptor)) {
        goto LABEL_232;
      }
      goto LABEL_61;
    }
    uint64_t v39 = v198[0];
    int v40 = *((unsigned __int16 *)v24 + 8);
    if (v40 != *(unsigned __int16 *)(v198[0] + 16) || v40 != 180 && v40 != 24) {
      goto LABEL_232;
    }
    int v41 = *((unsigned __int8 *)v24 + 18);
    uint64_t v42 = (unsigned __int16 ***)v24;
    if (v41 != 2)
    {
      if (v41 != 5 || *((_DWORD *)v24 + 2) != 2) {
        goto LABEL_232;
      }
      uint64_t v42 = *(unsigned __int16 ****)v24;
    }
    if ((uint64_t v43 = *v42, *((_WORD *)v43 + 8) != 153)
      || v43[1] != (unsigned __int16 *)3
      || ((uint64_t v44 = *v43, v45 = *v44, v46 = *((unsigned __int8 *)v44 + 2), v45 == 24415) ? (v47 = v46 == 67) : (v47 = 0),
          !v47))
    {
LABEL_232:
      char v38 = 1;
      goto LABEL_233;
    }
    if (v41 == 2) {
      goto LABEL_83;
    }
    if (*((_DWORD *)v24 + 2) >= 2u)
    {
      int64x2_t v24 = *(swift::Demangle::__runtime::Node **)v24;
LABEL_83:
      uint64_t v48 = *((void *)v24 + 1);
      goto LABEL_221;
    }
    uint64_t v48 = 0;
LABEL_221:
    if (*(_WORD *)(v48 + 16) != 101) {
      goto LABEL_232;
    }
    unint64_t v120 = *(const void **)v48;
    size_t v121 = *(void *)(v48 + 8);
    int v122 = *(unsigned __int8 *)(v198[0] + 18);
    uint64_t v123 = (unsigned __int16 ***)v198[0];
    if (v122 != 2)
    {
      if (v122 != 5 || *(_DWORD *)(v198[0] + 8) != 2) {
        goto LABEL_232;
      }
      uint64_t v123 = *(unsigned __int16 ****)v198[0];
    }
    uint64_t v124 = *v123;
    if (*((_WORD *)v124 + 8) != 153 || v124[1] != (unsigned __int16 *)3) {
      goto LABEL_232;
    }
    long long v125 = *v124;
    int v126 = *v125;
    int v127 = *((unsigned __int8 *)v125 + 2);
    if (v126 != 24415 || v127 != 67) {
      goto LABEL_232;
    }
    if (v122 == 2) {
      goto LABEL_249;
    }
    if (*(_DWORD *)(v198[0] + 8) >= 2u)
    {
      uint64_t v39 = *(void *)v198[0];
LABEL_249:
      uint64_t v133 = *(void *)(v39 + 8);
      goto LABEL_251;
    }
    uint64_t v133 = 0;
LABEL_251:
    if (*(_WORD *)(v133 + 16) != 101 || v121 != *(void *)(v133 + 8))
    {
      char v38 = 1;
      goto LABEL_233;
    }
    if (v121 && memcmp(v120, *(const void **)v133, v121)) {
      goto LABEL_232;
    }
LABEL_61:
    int v37 = *((unsigned __int8 *)a2 + 18);
    if ((v37 - 1) < 2) {
      goto LABEL_65;
    }
    if (v37 == 5 && *((_DWORD *)a2 + 2))
    {
      a2 = *(const char **)a2;
LABEL_65:
      char v38 = 0;
      a2 = *(const char **)a2;
      goto LABEL_233;
    }
    char v38 = 0;
    a2 = 0;
LABEL_233:
    atomic_ullong v154 = (const char *)&unk_1ECA07790;
    if (v195 == v194)
    {
      (*(void (**)(void *))(v194[0] + 32))(v194);
    }
    else if (v195)
    {
      (*(void (**)(void))(*v195 + 40))();
    }
    atomic_ullong v154 = (const char *)&unk_1ECA07768;
    swift::Demangle::__runtime::NodeFactory::freeSlabs(v157);
    if (v159) {
      *(unsigned char *)(v159 + 48) = 0;
    }
    if (v38) {
      return 0;
    }
LABEL_240:
    uint64_t v131 = *((int *)v13 + 1);
    BOOL v130 = (int *)(v13 + 4);
    uint64_t v129 = v131;
    if (!v131) {
      return a2 == 0;
    }
    unsigned int v132 = (char **)((char *)v130 + (v129 & 0xFFFFFFFFFFFFFFFELL));
    if (v129)
    {
      if (!*v132) {
        return a2 == 0;
      }
      __int16 v8 = *v132;
    }
    else
    {
      if (!v132) {
        return a2 == 0;
      }
      __int16 v8 = (char *)v130 + (v129 & 0xFFFFFFFFFFFFFFFELL);
    }
    if (!v8) {
      return a2 == 0;
    }
  }
}

char *_findContextDescriptor(swift::Demangle::__runtime::Node *a1, swift::Demangle::__runtime::Demangler *a2)
{
  uint64_t v4 = a1;
  if (*((_WORD *)a1 + 8) == 232)
  {
    int v5 = *((unsigned __int8 *)a1 + 18);
    long long v6 = (swift::Demangle::__runtime::Node **)a1;
    if ((v5 - 1) < 2)
    {
LABEL_6:
      uint64_t v4 = *v6;
      goto LABEL_8;
    }
    if (v5 == 5 && *((_DWORD *)a1 + 2))
    {
      long long v6 = *(swift::Demangle::__runtime::Node ***)a1;
      goto LABEL_6;
    }
    uint64_t v4 = 0;
  }
LABEL_8:
  if (*((_WORD *)v4 + 8) != 233)
  {
    long long v7 = (char *)descriptorFromStandardMangling((int **)v4);
    if (v7) {
      return v7;
    }
    if (qword_1EB208BC8 != -1) {
      dispatch_once_f(&qword_1EB208BC8, &TypeMetadataRecords, (dispatch_function_t)swift::Lazy<TypeMetadataPrivateState>::defaultInitCallback);
    }
    if (*((_WORD *)v4 + 8) == 38) {
      return 0;
    }
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    swift::Demangle::__runtime::mangleNode((uint64_t)a1);
    if (v112) {
      return 0;
    }
    long long v111 = v113;
    atomic_fetch_add_explicit(&TypeMetadataRecords, 1u, memory_order_acquire);
    do
    {
      unint64_t explicit = atomic_load_explicit(&qword_1EB208B58, memory_order_acquire);
      int v10 = (swift::Demangle::__runtime::Node *)atomic_load_explicit(&qword_1EB208B60, memory_order_acquire);
      unint64_t v11 = atomic_load_explicit(&dword_1EB208B54, memory_order_acquire);
    }
    while (explicit != atomic_load_explicit(&qword_1EB208B58, memory_order_acquire));
    if (explicit) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12 && v11 != 0)
    {
      if (v14)
      {
        long long v7 = *(char **)(v14 + 16);
        atomic_fetch_add_explicit(&TypeMetadataRecords, 0xFFFFFFFF, memory_order_release);
        return v7;
      }
    }
    atomic_fetch_add_explicit(&TypeMetadataRecords, 0xFFFFFFFF, memory_order_release);
    if (a1 && *((_WORD *)a1 + 8) == 24)
    {
      int v15 = *((unsigned __int8 *)a1 + 18);
      unint64_t v16 = a1;
      if ((v15 - 1) >= 2)
      {
        if (v15 != 5 || !*((_DWORD *)a1 + 2)) {
          goto LABEL_43;
        }
        unint64_t v16 = *(swift::Demangle::__runtime::Node **)a1;
      }
      size_t v17 = *(unsigned __int16 ***)v16;
      if (v17 && *((_WORD *)v17 + 8) == 153 && *((unsigned char *)v17 + 18) == 3 && v17[1] == (unsigned __int16 *)3)
      {
        unint64_t v18 = *v17;
        int v19 = *v18;
        int v20 = *((unsigned __int8 *)v18 + 2);
        if (v19 == 24415 && v20 == 67) {
          goto LABEL_97;
        }
      }
    }
LABEL_43:
    int LibPrespecializedTypeDescriptor = swift::getLibPrespecializedTypeDescriptor(a1, v10);
    long long v7 = (char *)v10;
    if (swift::runtime::environment::initializeToken != -1) {
      dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
    }
    if (swift::runtime::environment::SWIFT_DEBUG_VALIDATE_LIB_PRESPECIALIZED_DESCRIPTOR_LOOKUP_variable) {
      BOOL v23 = (LibPrespecializedTypeDescriptor & 0xFFFFFFFE) == 0;
    }
    else {
      BOOL v23 = 0;
    }
    if (!v23) {
      goto LABEL_49;
    }
    size_t v94 = v93;
    if (qword_1EB208CA0 == -1)
    {
      if (v93)
      {
LABEL_181:
        unint64_t v95 = (unint64_t)v94;
        goto LABEL_186;
      }
    }
    else
    {
      dispatch_once_f(&qword_1EB208CA0, &SharedCacheInfo, (dispatch_function_t)swift::Lazy<SharedCacheInfoState>::defaultInitCallback);
      if (v94) {
        goto LABEL_181;
      }
    }
    unint64_t v95 = 0;
LABEL_186:
    if (SharedCacheInfo <= v95 && qword_1EB208C98 > v95)
    {
      uint64_t v96 = v7 ? v7 : 0;
      if ((swift::equalContexts(v96, v94) & 1) == 0)
      {
        double NodeTreeAsString = swift::Demangle::__runtime::getNodeTreeAsString(a1, &v114);
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v100 = &v114;
        }
        else {
          uint64_t v100 = (std::string *)v114.__r_.__value_.__r.__words[0];
        }
        swift::fatalError(0, "Searching for type descriptor, prespecialized descriptor map returned %p, but scan returned %p. Node tree:\n%s", v97, v98, NodeTreeAsString, v7, v94, v100);
      }
    }
LABEL_49:
    if (LibPrespecializedTypeDescriptor != 2)
    {
      if (!LibPrespecializedTypeDescriptor)
      {
        if (v7) {
          goto LABEL_96;
        }
LABEL_97:
        long long v7 = swift::_searchConformancesByMangledTypeName(a1, v10);
        if (!v7) {
          return v7;
        }
LABEL_98:
        long long v50 = v111;
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v111;
        os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB208B68);
        uint64_t v51 = qword_1EB208B60;
        BOOL v52 = (qword_1EB208B60 & 3) == 0;
        if ((qword_1EB208B60 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
          BOOL v52 = 1;
        }
        unint64_t v106 = qword_1EB208B60 & 0xFFFFFFFFFFFFFFFCLL;
        BOOL v105 = v52;
        uint64_t v108 = qword_1EB208B60 & 3;
        if (v52) {
          int v53 = 4;
        }
        else {
          int v53 = *(unsigned __int8 *)(qword_1EB208B60 & 0xFFFFFFFFFFFFFFFCLL);
        }
        size_t v54 = dword_1EB208B54;
        unint64_t v55 = (_DWORD *)qword_1EB208B58;
        if (qword_1EB208B58) {
          uint64_t v56 = qword_1EB208B58 + 8;
        }
        else {
          uint64_t v56 = 0;
        }
        {
          __dmb(0xBu);
          if (TypeMetadataRecords)
          {
LABEL_178:
            os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB208B68);
            return v7;
          }
          unint64_t v58 = (void **)qword_1EB208B70;
          if (qword_1EB208B70)
          {
            do
            {
              uint64_t v59 = (void **)*v58;
              free(v58[1]);
              free(v58);
              unint64_t v58 = v59;
            }
            while (v59);
          }
        }
        else
        {
          uint64_t v110 = v56;
          unint64_t v107 = v51;
          uint64_t v104 = v55;
          char __src = v55 + 2;
          uint64_t v103 = (v54 + 1);
          if ((1 << v53) / (unint64_t)((1 << v53) - v103) < 4)
          {
            unsigned int v66 = v57;
            unint64_t v67 = v107;
            unint64_t v68 = v55;
          }
          else
          {
            char v60 = v53;
            unsigned int v61 = (v53 + 1);
            if (v61 >= 0x11) {
              unsigned int v62 = 4;
            }
            else {
              unsigned int v62 = 2;
            }
            if (v61 < 9) {
              size_t v63 = 1;
            }
            else {
              size_t v63 = v62;
            }
            unint64_t v64 = (unint64_t)malloc_type_calloc(2 << v53, v63, 0x4269077AuLL);
            if (!v64) {
              swift::hashable_support::findHashableBaseTypeOfHashableType();
            }
            uint64_t v65 = v56;
            unint64_t v101 = v54;
            if (v63 != 1)
            {
              if (v63 == 4) {
                size_t v63 = 3;
              }
              else {
                size_t v63 = 2;
              }
            }
            unint64_t v67 = v63 | v64;
            *(unsigned char *)unint64_t v64 = v53 + 1;
            if (v53)
            {
              uint64_t v69 = ~(-2 << v53);
              uint64_t v70 = v51 & 3;
              unint64_t v71 = v106;
              if (!v108) {
                unint64_t v71 = 0;
              }
              unint64_t v109 = v71;
              int v72 = v67 & 3;
              if ((v67 & 3) != 0) {
                unint64_t v73 = v64 & 0xFFFFFFFFFFFFFFFCLL;
              }
              else {
                unint64_t v73 = 0;
              }
              unint64_t v74 = 1;
              do
              {
                switch(v70)
                {
                  case 0:
                    uint64_t v75 = (v107 >> (4 * v74)) & 0xF;
                    break;
                  case 1:
                    LODWORD(v75) = *(unsigned __int8 *)(v109 + v74);
                    break;
                  case 2:
                    LODWORD(v75) = *(unsigned __int16 *)(v109 + 2 * v74);
                    break;
                  case 3:
                    LODWORD(v75) = *(_DWORD *)(v109 + 4 * v74);
                    break;
                  default:
                    JUMPOUT(0);
                }
                if (v75)
                {
                  for (unint64_t i = __swift::__runtime::llvm::hash_value(*(void **)(v65 + 24 * (v75 - 1)), *(void *)(v65 + 24 * (v75 - 1) + 8)); ; unint64_t i = v78 + 1)
                  {
                    unint64_t v78 = i & v69;
                    if ((i & v69) != 0)
                    {
                      switch(v67 & 3)
                      {
                        case 1uLL:
                          LODWORD(v77) = *(unsigned __int8 *)(v73 + v78);
                          break;
                        case 2uLL:
                          LODWORD(v77) = *(unsigned __int16 *)(v73 + 2 * v78);
                          break;
                        case 3uLL:
                          LODWORD(v77) = *(_DWORD *)(v73 + 4 * v78);
                          break;
                        default:
                          uint64_t v77 = (v67 >> (4 * v78)) & 0xF;
                          break;
                      }
                      if (!v77) {
                        break;
                      }
                    }
                  }
                  if (v72 == 3)
                  {
                    *(_DWORD *)(v73 + 4 * v78) = v75;
                    uint64_t v65 = v110;
                  }
                  else
                  {
                    uint64_t v65 = v110;
                    if (v72 == 2) {
                      *(_WORD *)(v73 + 2 * v78) = v75;
                    }
                    else {
                      *(unsigned char *)(v73 + v78) = v75;
                    }
                  }
                }
                ++v74;
              }
              while (!(v74 >> v60));
            }
            atomic_store(v67, (unint64_t *)&qword_1EB208B60);
            if (!v105)
            {
              uint64_t v79 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
              uint64_t v65 = v110;
              void *v79 = qword_1EB208B70;
              v79[1] = v106;
              qword_1EB208B70 = (uint64_t)v79;
            }
            size_t v54 = v101;
            unsigned int v66 = v80;
            unint64_t v68 = v104;
          }
          if (!v68 || (unint64_t v81 = (unint64_t)v68, v54 >= *v68))
          {
            unint64_t v82 = v54 + (v54 >> 2);
            size_t v83 = v54;
            if (v82 <= v54 + 1) {
              unint64_t v82 = v54 + 1;
            }
            size_t v54 = malloc_good_size(24 * v82 + 8);
            long long v84 = malloc_type_malloc(v54, 0x1000D770uLL);
            if (!v84) {
              swift::hashable_support::findHashableBaseTypeOfHashableType();
            }
            unint64_t v81 = (unint64_t)v84;
            *long long v84 = (v54 - 8) / 0x18;
            LODWORD(v54) = v83;
            if (v68)
            {
              memcpy(v84 + 2, __src, 24 * v83);
              uint64_t v85 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
              void *v85 = qword_1EB208B70;
              v85[1] = v68;
              qword_1EB208B70 = (uint64_t)v85;
            }
            atomic_store(v81, (unint64_t *)&qword_1EB208B58);
          }
          unint64_t v86 = (void *)(v81 + 24 * v54);
          v86[3] = v7;
          unint64_t v87 = malloc_type_malloc(*((size_t *)&v50 + 1), 0x649C05B9uLL);
          memcpy(v87, (const void *)v50, *((size_t *)&v50 + 1));
          v86[1] = v87;
          v86[2] = *((void *)&v50 + 1);
          atomic_store(v103, (unsigned int *)&dword_1EB208B54);
          switch(&qword_1EB208B60)
          {
            case 1u:
              unint64_t v90 = v67 & 0xFFFFFFFFFFFFFFFCLL;
              if ((v67 & 3) == 0) {
                unint64_t v90 = 0;
              }
              atomic_store(v103, (unsigned __int8 *)(v90 + v66));
              break;
            case 2u:
              unint64_t v88 = v67 & 0xFFFFFFFFFFFFFFFCLL;
              if ((v67 & 3) == 0) {
                unint64_t v88 = 0;
              }
              atomic_store(v103, (unsigned __int16 *)(v88 + 2 * v66));
              break;
            case 3u:
              unint64_t v89 = v67 & 0xFFFFFFFFFFFFFFFCLL;
              if ((v67 & 3) == 0) {
                unint64_t v89 = 0;
              }
              atomic_store(v103, (unsigned int *)(v89 + 4 * v66));
              break;
            default:
              atomic_store((v103 << (4 * v66)) | v67, (unint64_t *)&qword_1EB208B60);
              break;
          }
          __dmb(0xBu);
          if (TypeMetadataRecords) {
            goto LABEL_178;
          }
          int v91 = (void **)qword_1EB208B70;
          if (qword_1EB208B70)
          {
            do
            {
              uint64_t v92 = (void **)*v91;
              free(v91[1]);
              free(v91);
              int v91 = v92;
            }
            while (v92);
          }
        }
        qword_1EB208B70 = 0;
        goto LABEL_178;
      }
      goto LABEL_75;
    }
    swift::runtime::trace::metadata_scan_begin(a1, (uint64_t)&v114);
    atomic_fetch_add_explicit(&qword_1EB208BA8, 1uLL, memory_order_acquire);
    uint64_t v24 = qword_1EB208BB0;
    if (!qword_1EB208BB0
      || (unint64_t v25 = atomic_load_explicit((atomic_ullong *volatile)qword_1EB208BB0, memory_order_acquire)) == 0)
    {
LABEL_70:
      long long v7 = 0;
LABEL_71:
      atomic_fetch_add_explicit(&qword_1EB208BA8, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
      os_signpost_id_t v35 = v114.__r_.__value_.__r.__words[0];
      if (v114.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v36 = swift::runtime::trace::ScanLog;
        if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
        {
          *(_DWORD *)buf = 134217984;
          unint64_t v116 = v7;
          _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v36, OS_SIGNPOST_INTERVAL_END, v35, "section_scan", "result=%p", buf, 0xCu);
        }
      }
      if (v7) {
        goto LABEL_98;
      }
LABEL_75:
      swift::runtime::trace::metadata_scan_begin(a1, (uint64_t)&v114);
      atomic_fetch_add_explicit(&qword_1EB208B80, 1uLL, memory_order_acquire);
      uint64_t v37 = qword_1EB208B88;
      if (!qword_1EB208B88
        || (unint64_t v38 = atomic_load_explicit((atomic_ullong *volatile)qword_1EB208B88, memory_order_acquire)) == 0)
      {
LABEL_92:
        long long v7 = 0;
LABEL_93:
        atomic_fetch_add_explicit(&qword_1EB208B80, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
        os_signpost_id_t v48 = v114.__r_.__value_.__r.__words[0];
        if (v114.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v49 = swift::runtime::trace::ScanLog;
          if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
          {
            *(_DWORD *)buf = 134217984;
            unint64_t v116 = v7;
            _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v49, OS_SIGNPOST_INTERVAL_END, v48, "section_scan", "result=%p", buf, 0xCu);
          }
        }
LABEL_96:
        if (v7) {
          goto LABEL_98;
        }
        goto LABEL_97;
      }
      uint64_t v39 = (int **)(v37 + 8);
      uint64_t v40 = v37 + 8 + 16 * v38;
      while (1)
      {
        int v41 = *v39;
        uint64_t v42 = v39[1];
        if (*v39 != v42) {
          break;
        }
LABEL_78:
        v39 += 2;
        if (v39 == (int **)v40) {
          goto LABEL_92;
        }
      }
      uint64_t v43 = *v39;
      while (1)
      {
        uint64_t v44 = *v43;
        if ((*v43 & 3) == 1)
        {
          if (*(void *)((char *)v41 + (v44 & 0xFFFFFFFFFFFFFFFCLL)))
          {
            long long v7 = *(char **)((char *)v41 + (v44 & 0xFFFFFFFFFFFFFFFCLL));
LABEL_81:
            if (swift::_contextDescriptorMatchesMangling(v7, (const char *)a1)) {
              goto LABEL_93;
            }
          }
        }
        else
        {
          unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v46 = (uint64_t)v41 + v45;
          if ((*v43 & 3) == 0 && v46 != 0)
          {
            long long v7 = (char *)v41 + v45;
            if (v46) {
              goto LABEL_81;
            }
          }
        }
        ++v43;
        ++v41;
        if (v43 == v42) {
          goto LABEL_78;
        }
      }
    }
    uint64_t v26 = (int **)(v24 + 8);
    uint64_t v27 = v24 + 8 + 16 * v25;
    while (1)
    {
      unsigned long long v28 = *v26;
      size_t v29 = v26[1];
      if (*v26 != v29) {
        break;
      }
LABEL_56:
      v26 += 2;
      if (v26 == (int **)v27) {
        goto LABEL_70;
      }
    }
    uint64_t v30 = *v26;
    while (1)
    {
      uint64_t v31 = *v30;
      if ((*v30 & 3) == 1)
      {
        if (*(void *)((char *)v28 + (v31 & 0xFFFFFFFFFFFFFFFCLL)))
        {
          long long v7 = *(char **)((char *)v28 + (v31 & 0xFFFFFFFFFFFFFFFCLL));
LABEL_59:
          if (swift::_contextDescriptorMatchesMangling(v7, (const char *)a1)) {
            goto LABEL_71;
          }
        }
      }
      else
      {
        unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v33 = (uint64_t)v28 + v32;
        if ((*v30 & 3) == 0 && v33 != 0)
        {
          long long v7 = (char *)v28 + v32;
          if (v33) {
            goto LABEL_59;
          }
        }
      }
      ++v30;
      ++v28;
      if (v30 == v29) {
        goto LABEL_56;
      }
    }
  }
  if (!*(void *)v4) {
    return 0;
  }
  return *(char **)v4;
}

char *_findExtendedTypeContextDescriptor(_DWORD *a1, char *a2, unint64_t *a3)
{
  size_t result = 0;
  if (a1)
  {
    uint64_t v39 = v3;
    uint64_t v40 = v4;
    __int16 v8 = a1;
    if ((*a1 & 0x1F) == 1)
    {
      uint64_t v11 = (int)a1[2];
      if (v11) {
        BOOL v12 = (char *)a1 + v11 + 8;
      }
      else {
        BOOL v12 = 0;
      }
      SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v12, a2);
      uint64_t v15 = (uint64_t)v13;
      if ((*v8 & 0x80) != 0)
      {
        unint64_t v16 = v8 ? (unsigned int *)v8 : 0;
        size_t v17 = v16;
        unint64_t v18 = v16 + 3;
        if (v16 == (unsigned int *)-12)
        {
          int v19 = 0;
        }
        else
        {
          int v19 = v16 + 3;
          if (!v16) {
            unint64_t v16 = 0;
          }
        }
        unint64_t v20 = *v16;
        if ((v20 & 0x80) != 0)
        {
          int v22 = v17 ? v17 : 0;
          uint64_t v21 = *((unsigned __int16 *)v22 + 6);
        }
        else
        {
          uint64_t v21 = 0;
        }
        if (*((_WORD *)v18 + 1))
        {
          unint64_t v23 = ((unint64_t)&v19[2 * ((v20 >> 7) & 1)] + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v24 = 12 * *((unsigned __int16 *)v18 + 1);
          unint64_t v25 = (int *)(v23 + 8);
          unint64_t v26 = v23 + 4;
          do
          {
            if ((*(v25 - 2) & 0x1F) == 1)
            {
              uint64_t v27 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)(v26 + *(v25 - 1)), v13);
              if (v13 == (const char *)1
                && *v27 == 120
                && swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)(v26 + *v25 + 4), (const char *)1) == SymbolicMangledNameStringRef)
              {
                return 0;
              }
            }
            v25 += 3;
            v26 += 12;
            v24 -= 12;
          }
          while (v24);
        }
      }
      v37[0] = &unk_1ECA06910;
      v37[1] = a2;
      unint64_t v38 = v37;
      unint64_t v28 = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)a2, (uint64_t)SymbolicMangledNameStringRef, v15, v37);
      unint64_t v30 = v28;
      if (a3)
      {
        *a3 = v28;
        unint64_t v30 = 0;
      }
      if (v38 == v37)
      {
        (*(void (**)(void *))(v37[0] + 32))(v37);
        unint64_t v31 = v30;
        if (a3) {
LABEL_35:
        }
          unint64_t v31 = *a3;
      }
      else
      {
        if (v38) {
          (*(void (**)(void))(*v38 + 40))();
        }
        unint64_t v31 = v30;
        if (a3) {
          goto LABEL_35;
        }
      }
      if (!v31) {
        return 0;
      }
      if (*(_WORD *)(v31 + 16) != 232)
      {
        if (!a3) {
          goto LABEL_59;
        }
        unint64_t v30 = *a3;
LABEL_57:
        if ((swift::Demangle::__runtime::isSpecialized((swift::Demangle::__runtime *)v30, v29) & 1) == 0)
        {
LABEL_64:
          unint64_t v30 = *a3;
          return _findContextDescriptor((swift::Demangle::__runtime::Node *)v30, (swift::Demangle::__runtime::Demangler *)a2);
        }
        unint64_t v30 = *a3;
LABEL_60:
        swift::Demangle::__runtime::getUnspecialized(v30, (swift::Demangle::__runtime::Node *)a2, (uint64_t)v35);
        if (v35[0]) {
          return 0;
        }
        unint64_t v30 = v36;
        if (!a3) {
          return _findContextDescriptor((swift::Demangle::__runtime::Node *)v30, (swift::Demangle::__runtime::Demangler *)a2);
        }
        *a3 = v36;
        goto LABEL_64;
      }
      unint64_t v32 = v30;
      if (a3) {
        unint64_t v32 = *a3;
      }
      int v33 = *(unsigned __int8 *)(v32 + 18);
      if ((v33 - 1) >= 2 && (v33 != 5 || !*(_DWORD *)(v32 + 8))) {
        return 0;
      }
      if (a3) {
        unint64_t v30 = *a3;
      }
      int v34 = *(unsigned __int8 *)(v30 + 18);
      if ((v34 - 1) >= 2)
      {
        if (v34 != 5 || !*(_DWORD *)(v30 + 8))
        {
          unint64_t v30 = 0;
          if (!a3) {
            goto LABEL_59;
          }
LABEL_56:
          *a3 = v30;
          goto LABEL_57;
        }
        unint64_t v30 = *(void *)v30;
      }
      unint64_t v30 = *(void *)v30;
      if (!a3)
      {
LABEL_59:
        if ((swift::Demangle::__runtime::isSpecialized((swift::Demangle::__runtime *)v30, v29) & 1) == 0) {
          return _findContextDescriptor((swift::Demangle::__runtime::Node *)v30, (swift::Demangle::__runtime::Demangler *)a2);
        }
        goto LABEL_60;
      }
      goto LABEL_56;
    }
  }
  return result;
}

uint64_t DemanglerForRuntimeTypeResolution<swift::Demangle::__runtime::Demangler>::~DemanglerForRuntimeTypeResolution(uint64_t a1)
{
  *(void *)a1 = &unk_1ECA07790;
  uint64_t v2 = a1 + 544;
  uint64_t v3 = *(void *)(a1 + 568);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  *(void *)a1 = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*(void **)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }
  return a1;
}

uint64_t _swift_registerConcurrencyStandardTypeDescriptors(uint64_t result)
{
  concurrencyDescriptors = result;
  return result;
}

void swift::addImageProtocolsBlockCallbackUnsafe(swift *this, unint64_t a2, char *a3)
{
  if (qword_1EB208CA0 != -1) {
    dispatch_once_f(&qword_1EB208CA0, &SharedCacheInfo, (dispatch_function_t)swift::Lazy<SharedCacheInfoState>::defaultInitCallback);
  }
  BOOL v5 = SharedCacheInfo <= a2 && qword_1EB208C98 > a2;
  *(void *)&long long v7 = a2;
  *((void *)&v7 + 1) = &a3[a2];
  if (v5) {
    long long v6 = &unk_1EB208C28;
  }
  else {
    long long v6 = &unk_1EB208C00;
  }
}

uint64_t swift::Lazy<anonymous namespace'::ProtocolMetadataPrivateState>::defaultInitCallback(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return swift::initializeProtocolLookup((swift *)a1);
}

void swift_registerProtocols(unint64_t a1, uint64_t a2)
{
  if (qword_1EB208C50 != -1) {
  if (qword_1EB208CA0 != -1)
  }
    dispatch_once_f(&qword_1EB208CA0, &SharedCacheInfo, (dispatch_function_t)swift::Lazy<SharedCacheInfoState>::defaultInitCallback);
  BOOL v4 = SharedCacheInfo <= a1 && qword_1EB208C98 > a1;
  *(void *)&long long v6 = a1;
  *((void *)&v6 + 1) = a2;
  if (v4) {
    BOOL v5 = &unk_1EB208C28;
  }
  else {
    BOOL v5 = &unk_1EB208C00;
  }
}

uint64_t swift::_gatherGenericParameterCounts(char *a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = a1;
  long long v19 = xmmword_181636930;
  char v21 = 0;
  uint64_t v56 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  char v25 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  int v54 = 0;
  size_t v17 = &unk_1ECA068E8;
  *(unsigned char *)(a3 + 48) = 1;
  uint64_t v20 = a3;
  long long v18 = *(_OWORD *)(a3 + 8);
  Extendeduint64_t TypeContextDescriptor = _findExtendedTypeContextDescriptor(a1, (char *)&v17, 0);
  uint64_t v6 = 0;
  if (ExtendedTypeContextDescriptor) {
    BOOL v4 = ExtendedTypeContextDescriptor;
  }
  if (*v4 < 0)
  {
    __int16 v8 = v4 + 4;
    uint64_t v7 = *((int *)v4 + 1);
    if (v7)
    {
      int v9 = (_DWORD **)((char *)v8 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      if (v7)
      {
        if (*v9)
        {
          int v10 = *v9;
          goto LABEL_11;
        }
      }
      else if (v9)
      {
        int v10 = (_DWORD *)((char *)v8 + (v7 & 0xFFFFFFFFFFFFFFFELL));
        goto LABEL_11;
      }
    }
    int v10 = 0;
LABEL_11:
    swift::_gatherGenericParameterCounts(v10, a2, &v17);
    uint64_t GenericContext = swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v10);
    if (GenericContext) {
      unsigned int v12 = *(unsigned __int16 *)(GenericContext + 4);
    }
    else {
      unsigned int v12 = 0;
    }
    uint64_t v13 = swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v4);
    if (v13 && (unsigned int v14 = *(unsigned __int16 *)(v13 + 4), v12 < v14))
    {
      uint64_t v15 = *(unsigned int *)(a2 + 8);
      if (v15 >= *(_DWORD *)(a2 + 12))
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v15 + 1, 4);
        LODWORD(v15) = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v15) = v14;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  size_t v17 = &unk_1ECA07790;
  if (v56 == v55)
  {
    (*(void (**)(void *))(v55[0] + 32))(v55);
  }
  else if (v56)
  {
    (*(void (**)(void *))(*v56 + 40))(v56);
  }
  size_t v17 = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v19);
  if (v20) {
    *(unsigned char *)(v20 + 48) = 0;
  }
  return v6;
}

_DWORD *__swift::__runtime::llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(_DWORD *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 >= result[3])
  {
    size_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + 1, 4);
    LODWORD(v4) = v3[2];
  }
  *(_DWORD *)(*(void *)v3 + 4 * v4) = a2;
  ++v3[2];
  return result;
}

uint64_t swift_getTypeByMangledNameInEnvironment(unsigned __int8 *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v21 = 1;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = v26;
  uint64_t v25 = 0x800000000;
  v26[32] = 0;
  v16[0] = &unk_1ECA06E00;
  v16[1] = &v21;
  size_t v17 = v16;
  v14[0] = &unk_1ECA06E48;
  v14[1] = &v21;
  uint64_t v15 = v14;
  swift_getTypeByMangledName(0, a1, a2, a4, v16, v14, (uint64_t)&v18);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*v17 + 40))();
  }
  int v6 = v20;
  if (v20 != 1) {
    goto LABEL_21;
  }
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  int v6 = v20;
  if (swift::runtime::environment::SWIFT_DEBUG_FAILED_TYPE_LOOKUP_variable)
  {
    if (v20 == 1) {
      uint64_t v7 = &v18;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v20 == 1) {
      uint64_t v8 = (uint64_t)&v19;
    }
    else {
      uint64_t v8 = 8;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, void))v8)(*v7, 0, 0);
    swift::warning(0, "failed type lookup for %.*s: %s\n", v10, v11, a2, a1, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))v8)(*v7, 1, v9);
    uint64_t v12 = 0;
    if (v20 != 1) {
      goto LABEL_26;
    }
  }
  else
  {
LABEL_21:
    if (v6) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v18;
    }
    if (v6 != 1) {
      goto LABEL_26;
    }
  }
  v19(v18, 3, 0);
LABEL_26:
  if (v24 != v26) {
    free(v24);
  }
  return v12;
}

uint64_t swift_getTypeByMangledName@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  swift_once(&swift_getTypeByMangledName::Predicate, (dispatch_function_t)swift_getTypeByMangledName::$_0::__invoke, 0);
  unsigned int v14 = swift_getTypeByMangledName::Override;
  uint64_t v15 = (void *)a5[3];
  if (swift_getTypeByMangledName::Override)
  {
    if (v15)
    {
      if (v15 == a5)
      {
        long long v26 = v25;
        (*(void (**)(void *, void *))(*a5 + 24))(a5, v25);
        unint64_t v16 = (void *)a6[3];
        if (!v16) {
          goto LABEL_5;
        }
      }
      else
      {
        long long v26 = (void *)(*(uint64_t (**)(void *))(*v15 + 16))(v15);
        unint64_t v16 = (void *)a6[3];
        if (!v16)
        {
LABEL_5:
          uint64_t v24 = 0;
          goto LABEL_17;
        }
      }
    }
    else
    {
      long long v26 = 0;
      unint64_t v16 = (void *)a6[3];
      if (!v16) {
        goto LABEL_5;
      }
    }
    if (v16 == a6)
    {
      uint64_t v24 = v23;
      (*(void (**)(void *, void *))(*a6 + 24))(a6, v23);
    }
    else
    {
      uint64_t v24 = (void *)(*(uint64_t (**)(void *))(*v16 + 16))(v16);
    }
LABEL_17:
    ((void (*)(uint64_t, unsigned __int8 *, unint64_t, uint64_t, void *, void *, void *(*)@<X0>(uint64_t@<X0>, unsigned __int8 *@<X1>, unint64_t@<X2>, uint64_t@<X3>, void *@<X4>, void *@<X5>, uint64_t@<X8>)))v14)(a1, a2, a3, a4, v25, v23, swift_getTypeByMangledNameImpl);
    if (v24 == v23)
    {
      (*(void (**)(void *))(v23[0] + 32))(v23);
    }
    else if (v24)
    {
      (*(void (**)(void))(*v24 + 40))();
    }
    uint64_t result = (uint64_t)v26;
    if (v26 == v25) {
      return (*(uint64_t (**)(void *))(v25[0] + 32))(v25);
    }
    goto LABEL_33;
  }
  if (v15)
  {
    if (v15 != a5)
    {
      uint64_t v22 = (void *)(*(uint64_t (**)(void *))(*v15 + 16))(v15);
      size_t v17 = (void *)a6[3];
      if (v17) {
        goto LABEL_9;
      }
LABEL_24:
      unsigned __int16 v20 = 0;
      goto LABEL_28;
    }
    uint64_t v22 = v21;
    (*(void (**)(void *, void *))(*a5 + 24))(a5, v21);
    size_t v17 = (void *)a6[3];
    if (!v17) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v22 = 0;
    size_t v17 = (void *)a6[3];
    if (!v17) {
      goto LABEL_24;
    }
  }
LABEL_9:
  if (v17 == a6)
  {
    unsigned __int16 v20 = v19;
    (*(void (**)(void *, void *))(*a6 + 24))(a6, v19);
  }
  else
  {
    unsigned __int16 v20 = (void *)(*(uint64_t (**)(void *))(*v17 + 16))(v17);
  }
LABEL_28:
  swift_getTypeByMangledNameImpl(a1, a2, a3, a4, v21, v19, a7);
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void))(*v20 + 40))();
  }
  uint64_t result = (uint64_t)v22;
  if (v22 == v21) {
    return (*(uint64_t (**)(void *))(v21[0] + 32))(v21);
  }
LABEL_33:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

uint64_t swift_getTypeByMangledNameInEnvironmentInMetadataState(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v22 = 1;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = v27;
  uint64_t v26 = 0x800000000;
  v27[32] = 0;
  v17[0] = &unk_1ECA06E90;
  v17[1] = &v22;
  uint64_t v18 = v17;
  v15[0] = &unk_1ECA06ED8;
  v15[1] = &v22;
  unint64_t v16 = v15;
  swift_getTypeByMangledName(a1 & 0xFFFFFFFFFFFFFEFFLL, a2, a3, a5, v17, v15, (uint64_t)&v19);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*(void (**)(void))(*v18 + 40))();
  }
  int v7 = v21;
  if (v21 != 1) {
    goto LABEL_21;
  }
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  int v7 = v21;
  if (swift::runtime::environment::SWIFT_DEBUG_FAILED_TYPE_LOOKUP_variable)
  {
    if (v21 == 1) {
      uint64_t v8 = &v19;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v21 == 1) {
      uint64_t v9 = (uint64_t)&v20;
    }
    else {
      uint64_t v9 = 8;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void, void))v9)(*v8, 0, 0);
    swift::warning(0, "failed type lookup for %.*s: %s\n", v11, v12, a3, a2, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))v9)(*v8, 1, v10);
    uint64_t v13 = 0;
    if (v21 != 1) {
      goto LABEL_26;
    }
  }
  else
  {
LABEL_21:
    if (v7) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v19;
    }
    if (v7 != 1) {
      goto LABEL_26;
    }
  }
  v20(v19, 3, 0);
LABEL_26:
  if (v25 != v27) {
    free(v25);
  }
  return v13;
}

uint64_t swift_getTypeByMangledNameInContext2(unsigned __int8 *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_getTypeByMangledNameInContextImpl(a1, a2, a3, a4);
}

uint64_t swift_getTypeByMangledNameInContextImpl(unsigned __int8 *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v21 = 0;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = v26;
  uint64_t v25 = 0x800000000;
  v26[32] = 0;
  v16[0] = &unk_1ECA06958;
  v16[1] = &v21;
  size_t v17 = v16;
  v14[0] = &unk_1ECA069A0;
  v14[1] = &v21;
  uint64_t v15 = v14;
  swift_getTypeByMangledName(0, a1, a2, a4, v16, v14, (uint64_t)&v18);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*v17 + 40))();
  }
  int v6 = v20;
  if (v20 != 1) {
    goto LABEL_21;
  }
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  int v6 = v20;
  if (swift::runtime::environment::SWIFT_DEBUG_FAILED_TYPE_LOOKUP_variable)
  {
    if (v20 == 1) {
      int v7 = &v18;
    }
    else {
      int v7 = 0;
    }
    if (v20 == 1) {
      uint64_t v8 = (uint64_t)&v19;
    }
    else {
      uint64_t v8 = 8;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, void))v8)(*v7, 0, 0);
    swift::warning(0, "failed type lookup for %.*s: %s\n", v10, v11, a2, a1, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))v8)(*v7, 1, v9);
    uint64_t v12 = 0;
    if (v20 != 1) {
      goto LABEL_26;
    }
  }
  else
  {
LABEL_21:
    if (v6) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v18;
    }
    if (v6 != 1) {
      goto LABEL_26;
    }
  }
  v19(v18, 3, 0);
LABEL_26:
  if (v24 != v26) {
    free(v24);
  }
  return v12;
}

uint64_t swift_getTypeByMangledNameInContext(unsigned __int8 *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_getTypeByMangledNameInContextImpl(a1, a2, a3, a4);
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getTypeByMangledNameInContextInMetadataStateImpl(a1, a2, a3, a4, a5);
}

uint64_t swift_getTypeByMangledNameInContextInMetadataStateImpl(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v22 = 0;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = v27;
  uint64_t v26 = 0x800000000;
  v27[32] = 0;
  v17[0] = &unk_1ECA069E8;
  v17[1] = &v22;
  uint64_t v18 = v17;
  v15[0] = &unk_1ECA06A30;
  v15[1] = &v22;
  unint64_t v16 = v15;
  swift_getTypeByMangledName(a1 & 0xFFFFFFFFFFFFFEFFLL, a2, a3, a5, v17, v15, (uint64_t)&v19);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*(void (**)(void))(*v18 + 40))();
  }
  int v7 = v21;
  if (v21 != 1) {
    goto LABEL_21;
  }
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  int v7 = v21;
  if (swift::runtime::environment::SWIFT_DEBUG_FAILED_TYPE_LOOKUP_variable)
  {
    if (v21 == 1) {
      uint64_t v8 = &v19;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v21 == 1) {
      uint64_t v9 = (uint64_t)&v20;
    }
    else {
      uint64_t v9 = 8;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void, void))v9)(*v8, 0, 0);
    swift::warning(0, "failed type lookup for %.*s: %s\n", v11, v12, a3, a2, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))v9)(*v8, 1, v10);
    uint64_t v13 = 0;
    if (v21 != 1) {
      goto LABEL_26;
    }
  }
  else
  {
LABEL_21:
    if (v7) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v19;
    }
    if (v7 != 1) {
      goto LABEL_26;
    }
  }
  v20(v19, 3, 0);
LABEL_26:
  if (v25 != v27) {
    free(v25);
  }
  return v13;
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getTypeByMangledNameInContextInMetadataStateImpl(a1, a2, a3, a4, a5);
}

uint64_t swift_stdlib_getTypeByMangledNameUntrusted(unsigned __int8 *a1, unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1;
    while (*v3 - 32 < 0xFFFFFFE1)
    {
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    return 0;
  }
  else
  {
LABEL_5:
    uint64_t v9 = 0;
    int v7 = 0;
    swift_getTypeByMangledName(0, a1, a2, 0, v8, v6, (uint64_t)v10);
    if (v11 == 1)
    {
      ((void (*)(void, uint64_t, void))v10[1])(v10[0], 3, 0);
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = 0;
      if (!v11) {
        uint64_t v4 = v10[0];
      }
    }
    if (v7 == v6)
    {
      (*(void (**)(void *))(v6[0] + 32))(v6);
    }
    else if (v7)
    {
      (*(void (**)(void))(*v7 + 40))();
    }
    if (v9 == v8)
    {
      (*(void (**)(void *))(v8[0] + 32))(v8);
    }
    else if (v9)
    {
      (*(void (**)(void))(*v9 + 40))();
    }
  }
  return v4;
}

void *swift::getTypePackByMangledName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  long long v35 = xmmword_181636930;
  uint64_t v36 = 0;
  char v37 = 0;
  int v72 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  char v41 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  int v70 = 0;
  v34[1] = &v73;
  uint64_t v34[2] = &v74;
  v34[0] = &unk_1ECA06A78;
  uint64_t v24 = &unk_1ECA06910;
  v25[0] = v34;
  uint64_t v26 = &v24;
  uint64_t v8 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v34, a1, a2, &v24);
  if (v26 == &v24)
  {
    ((void (*)(void **))v24[4])(&v24);
    if (v8) {
      goto LABEL_5;
    }
LABEL_10:
    *(_WORD *)(a5 + 16) = 1;
    *(void *)a5 = "Demangling failed";
    *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    goto LABEL_55;
  }
  if (v26) {
    (*(void (**)(void))(*v26 + 40))();
  }
  if (!v8) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v9 = (void *)a3[3];
  if (v9)
  {
    if (v9 != a3)
    {
      uint64_t v23 = (void *)(*(uint64_t (**)(void *))(*v9 + 16))(v9);
      uint64_t v10 = (void *)a4[3];
      if (!v10) {
        goto LABEL_15;
      }
LABEL_12:
      if (v10 == a4)
      {
        unsigned __int16 v21 = v20;
        (*(void (**)(void *, void *))(*a4 + 24))(a4, v20);
      }
      else
      {
        unsigned __int16 v21 = (void *)(*(uint64_t (**)(void *))(*v10 + 16))(v10);
      }
      goto LABEL_17;
    }
    uint64_t v23 = v22;
    (*(void (**)(void *, void *))(*a3 + 24))(a3, v22);
    uint64_t v10 = (void *)a4[3];
    if (v10) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v10 = (void *)a4[3];
    if (v10) {
      goto LABEL_12;
    }
  }
LABEL_15:
  unsigned __int16 v21 = 0;
LABEL_17:
  uint64_t v24 = v34;
  if (v23)
  {
    if (v23 == v22)
    {
      long long v27 = v25;
      (*(void (**)(void *, void *))(v22[0] + 24))(v22, v25);
    }
    else
    {
      long long v27 = (void *)(*(uint64_t (**)(void))(*v23 + 16))();
    }
  }
  else
  {
    long long v27 = 0;
  }
  if (v21)
  {
    if (v21 == v20)
    {
      long long v29 = v28;
      (*(void (**)(void *, void *))(v20[0] + 24))(v20, v28);
    }
    else
    {
      long long v29 = (void *)(*(uint64_t (**)(void))(*v21 + 16))();
    }
    char v30 = 0;
    long long v32 = 0;
    uint64_t v33 = 0;
    __p = 0;
    if (v21 == v20)
    {
      (*(void (**)(void *))(v20[0] + 32))(v20);
    }
    else if (v21)
    {
      (*(void (**)(void))(*v21 + 40))();
    }
  }
  else
  {
    long long v29 = 0;
    char v30 = 0;
    long long v32 = 0;
    uint64_t v33 = 0;
    __p = 0;
  }
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  unint64_t v74 = (swift::Demangle::__runtime::Node **)&v24;
  if (v19 == 1)
  {
    *(_WORD *)(a5 + 16) = 1;
    uint64_t v14 = v17;
    uint64_t v15 = v18;
    *(void *)(a5 + 8) = v18;
    *(void *)a5 = v15(v14, 2, 0);
    if (v19 == 1) {
      v18(v17, 3, 0);
    }
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_47;
    }
  }
  else
  {
    if (v19 || (uint64_t v11 = v17) == 0)
    {
      *(_WORD *)(a5 + 16) = 1;
      uint64_t v12 = "NULL type but no error provided";
LABEL_41:
      *(void *)a5 = v12;
      *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      uint64_t v13 = __p;
      if (!__p) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
    if ((v17 & 1) == 0)
    {
      *(_WORD *)(a5 + 16) = 1;
      uint64_t v12 = "This entry point is only for packs";
      goto LABEL_41;
    }
    *(_WORD *)(a5 + 16) = 0;
    *(void *)a5 = v11;
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_47;
    }
  }
LABEL_46:
  long long v32 = v13;
  operator delete(v13);
LABEL_47:
  if (v29 == v28)
  {
    (*(void (**)(void *))(v28[0] + 32))(v28);
  }
  else if (v29)
  {
    (*(void (**)(void))(*v29 + 40))();
  }
  if (v27 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
  }
  else if (v27)
  {
    (*(void (**)(void))(*v27 + 40))();
  }
LABEL_55:
  v34[0] = &unk_1ECA07790;
  if (v72 == v71)
  {
    (*(void (**)(void *))(v71[0] + 32))(v71);
  }
  else if (v72)
  {
    (*(void (**)(void))(*v72 + 40))();
  }
  v34[0] = &unk_1ECA07768;
  uint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v35);
  if (v36) {
    *(unsigned char *)(v36 + 48) = 0;
  }
  return result;
}

uint64_t DemanglerForRuntimeTypeResolution<swift::Demangle::__runtime::StackAllocatedDemangler<2048ul>>::~DemanglerForRuntimeTypeResolution(uint64_t a1)
{
  *(void *)a1 = &unk_1ECA07790;
  uint64_t v2 = a1 + 544;
  uint64_t v3 = *(void *)(a1 + 568);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  *(void *)a1 = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*(void **)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }
  return a1;
}

uint64_t swift_func_getParameterCount(char *a1, unint64_t a2)
{
  long long v11 = xmmword_181636930;
  uint64_t v12 = 0;
  char v13 = 0;
  long long v48 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  char v17 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  int v46 = 0;
  v10[0] = &unk_1ECA04218;
  v10[1] = &v49;
  v10[2] = &v50;
  uint64_t FunctionTypeFromMethod = extractFunctionTypeFromMethod((swift::Demangle::__runtime::Demangler *)v10, a1, a2);
  if (!FunctionTypeFromMethod)
  {
    uint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }
  uint64_t v3 = swift::Demangle::__runtime::Node::findByKind(FunctionTypeFromMethod, 3, 1);
  int v4 = *(unsigned __int8 *)(v3 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*(_DWORD *)(v3 + 8))
    {
      uint64_t v7 = 0;
      goto LABEL_10;
    }
    BOOL v5 = *(uint64_t **)v3;
  }
  else
  {
    BOOL v5 = (uint64_t *)v3;
  }
  uint64_t v7 = *v5;
LABEL_10:
  if (*(unsigned __int8 *)(v7 + 18) - 1 >= 2) {
    uint64_t v7 = *(void *)v7;
  }
  uint64_t v8 = *(void *)v7;
  if (*(_WORD *)(v8 + 16) != 223) {
    uint64_t v8 = v3;
  }
  uint64_t v6 = *(unsigned __int8 *)(v8 + 18);
  if (v6 != 1)
  {
    if (v6 == 5)
    {
      uint64_t v6 = *(unsigned int *)(v8 + 8);
    }
    else if (v6 != 2)
    {
      uint64_t v6 = 0;
    }
  }
LABEL_19:
  v10[0] = &unk_1ECA07790;
  if (v48 == v47)
  {
    (*(void (**)(void *))(v47[0] + 32))(v47);
  }
  else if (v48)
  {
    (*(void (**)(void *))(*v48 + 40))(v48);
  }
  v10[0] = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v11);
  if (v12) {
    *(unsigned char *)(v12 + 48) = 0;
  }
  return v6;
}

uint64_t extractFunctionTypeFromMethod(swift::Demangle::__runtime::Demangler *a1, char *a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = a3;
    int v4 = a2;
    while (*(unsigned __int8 *)v4 - 32 < 0xFFFFFFE1)
    {
      ++v4;
      if (!--v3) {
        goto LABEL_5;
      }
    }
    return 0;
  }
LABEL_5:
  uint64_t v12 = 0;
  unint64_t v5 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)a1, a2, a3, v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
    if (!v5) {
      return 0;
    }
  }
  else
  {
    if (v12) {
      (*(void (**)(void))(*v12 + 40))();
    }
    if (!v5) {
      return 0;
    }
  }
  uint64_t result = swift::Demangle::__runtime::Node::findByKind(v5, 76, 2);
  if (result)
  {
    uint64_t result = swift::Demangle::__runtime::Node::findByKind(result, 232, 2);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = swift::Demangle::__runtime::Node::findByKind(result, 44, 1);
      if (v8)
      {
        uint64_t v9 = swift::Demangle::__runtime::Node::findByKind(v8, 232, 1);
        return swift::Demangle::__runtime::Node::findByKind(v9, 82, 1);
      }
      int v10 = *(unsigned __int8 *)(v7 + 18);
      if ((v10 - 1) < 2) {
        return *(void *)v7;
      }
      if (v10 == 5 && *(_DWORD *)(v7 + 8))
      {
        uint64_t v7 = *(void *)v7;
        return *(void *)v7;
      }
      return 0;
    }
  }
  return result;
}

uint64_t swift_func_getReturnTypeInfo(char *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v35 = xmmword_181636930;
  uint64_t v36 = 0;
  char v37 = 0;
  int v72 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  char v41 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  int v70 = 0;
  v34[0] = &unk_1ECA04218;
  v34[1] = &v73;
  uint64_t v34[2] = &v74;
  uint64_t FunctionTypeFromMethod = extractFunctionTypeFromMethod((swift::Demangle::__runtime::Demangler *)v34, a1, a2);
  if (!FunctionTypeFromMethod) {
    goto LABEL_24;
  }
  int v7 = *(unsigned __int8 *)(FunctionTypeFromMethod + 18);
  if (v7 == 1)
  {
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)FunctionTypeFromMethod;
    if (*(void *)FunctionTypeFromMethod) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  if (v7 == 5)
  {
    uint64_t v10 = *(unsigned int *)(FunctionTypeFromMethod + 8);
    if (v10)
    {
      uint64_t v9 = *(swift::Demangle::__runtime::Node **)(*(void *)FunctionTypeFromMethod + 8 * (v10 - 1));
      if (v9) {
        goto LABEL_11;
      }
    }
LABEL_24:
    uint64_t v8 = 0;
    goto LABEL_40;
  }
  uint64_t v8 = 0;
  if (v7 != 2) {
    goto LABEL_40;
  }
  uint64_t v9 = *(swift::Demangle::__runtime::Node **)(FunctionTypeFromMethod + 8);
  if (!v9) {
    goto LABEL_24;
  }
LABEL_11:
  int v28 = 1;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  long long v31 = v33;
  uint64_t v32 = 0x800000000;
  v33[32] = 0;
  v18[0] = &unk_1ECA06F20;
  v18[1] = &v28;
  v18[3] = v18;
  v17[0] = &unk_1ECA06F68;
  v17[1] = &v28;
  void v17[3] = v17;
  long long v19 = v34;
  v20[0] = &unk_1ECA06F20;
  v20[1] = &v28;
  long long v23 = v22;
  long long v21 = v20;
  v22[0] = &unk_1ECA06F68;
  v22[1] = &v28;
  char v24 = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  __p = 0;
  uint64_t v16 = (swift::Demangle::__runtime::Node **)&v19;
  int v11 = *((unsigned __int8 *)v9 + 18);
  if ((v11 - 1) < 2)
  {
LABEL_15:
    uint64_t v12 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_16;
  }
  uint64_t v12 = 0;
  if (v11 != 5) {
    goto LABEL_16;
  }
  if (*((_DWORD *)v9 + 2))
  {
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_15;
  }
  uint64_t v12 = 0;
LABEL_16:
  if (v76 != 1)
  {
    if (!v76)
    {
      if ((v74 & 1) != 0 || v74 == 0) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = v74;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v14 = v75(v74, 0, 0);
  v75(v74, 1, v14);
  uint64_t v8 = 0;
  if (v76 == 1)
  {
    v75(v74, 3, 0);
LABEL_27:
    uint64_t v8 = 0;
  }
LABEL_28:
  if (__p)
  {
    long long v26 = __p;
    operator delete(__p);
  }
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  if (v31 != v33) {
    free(v31);
  }
LABEL_40:
  v34[0] = &unk_1ECA07790;
  if (v72 == v71)
  {
    (*(void (**)(void *))(v71[0] + 32))(v71);
  }
  else if (v72)
  {
    (*(void (**)(void))(*v72 + 40))();
  }
  v34[0] = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v35);
  if (v36) {
    *(unsigned char *)(v36 + 48) = 0;
  }
  return v8;
}

uint64_t swift_func_getParameterTypeInfo(char *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v45 = xmmword_181636930;
  uint64_t v46 = 0;
  char v47 = 0;
  unint64_t v82 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  char v51 = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  int v80 = 0;
  v44[0] = &unk_1ECA04218;
  v44[1] = &v83;
  v44[2] = &v84;
  uint64_t FunctionTypeFromMethod = extractFunctionTypeFromMethod((swift::Demangle::__runtime::Demangler *)v44, a1, a2);
  if (!FunctionTypeFromMethod)
  {
    a6 = 0xFFFFFFFFLL;
    goto LABEL_66;
  }
  uint64_t v11 = swift::Demangle::__runtime::Node::findByKind(FunctionTypeFromMethod, 3, 1);
  int v12 = *(unsigned __int8 *)(v11 + 18);
  if ((v12 - 1) < 2)
  {
    char v13 = (uint64_t **)v11;
LABEL_8:
    uint64_t v14 = *v13;
    goto LABEL_10;
  }
  if (v12 == 5 && *(_DWORD *)(v11 + 8))
  {
    char v13 = *(uint64_t ***)v11;
    goto LABEL_8;
  }
  uint64_t v14 = 0;
LABEL_10:
  if (*((unsigned __int8 *)v14 + 18) - 1 >= 2) {
    uint64_t v14 = (uint64_t *)*v14;
  }
  uint64_t v15 = *v14;
  if (*(_WORD *)(v15 + 16) == 223) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = v11;
  }
  if (!v16) {
    goto LABEL_48;
  }
  uint64_t v17 = *(unsigned __int8 *)(v16 + 18);
  switch(v17)
  {
    case 1:
LABEL_22:
      if (v17 != a6) {
        goto LABEL_48;
      }
      goto LABEL_23;
    case 5:
      uint64_t v17 = *(unsigned int *)(v16 + 8);
      goto LABEL_22;
    case 2:
      uint64_t v17 = 2;
      if (a6 != 2) {
        goto LABEL_48;
      }
      goto LABEL_23;
  }
  uint64_t v17 = 0;
  if (a6)
  {
LABEL_48:
    a6 = 4294967294;
    goto LABEL_66;
  }
LABEL_23:
  int v38 = 1;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  char v41 = v43;
  uint64_t v42 = 0x800000000;
  v43[32] = 0;
  v28[0] = &unk_1ECA06FB0;
  v28[1] = &v38;
  void v28[3] = v28;
  v27[0] = &unk_1ECA06FF8;
  v27[1] = &v38;
  v27[3] = v27;
  uint64_t v29 = v44;
  v30[0] = &unk_1ECA06FB0;
  v30[1] = &v38;
  long long v33 = v32;
  long long v31 = v30;
  v32[0] = &unk_1ECA06FF8;
  v32[1] = &v38;
  char v34 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  __p = 0;
  long long v26 = (swift::Demangle::__runtime::Node **)&v29;
  if (!a6) {
    goto LABEL_56;
  }
  unint64_t v18 = 0;
  while (1)
  {
    unint64_t v19 = *(unsigned __int8 *)(v16 + 18);
    unsigned int v20 = v19 - 1;
    if (v19 == 1) {
      goto LABEL_29;
    }
    if (v19 != 5)
    {
      if (v19 != 2) {
        goto LABEL_34;
      }
      unint64_t v19 = 2;
LABEL_29:
      if (v19 <= v18) {
        goto LABEL_34;
      }
      goto LABEL_30;
    }
    if (*(unsigned int *)(v16 + 8) <= v18)
    {
LABEL_34:
      long long v22 = 0;
      goto LABEL_35;
    }
LABEL_30:
    uint64_t v21 = v16;
    if (v20 >= 2) {
      uint64_t v21 = *(void *)v16;
    }
    long long v22 = *(uint64_t **)(v21 + 8 * v18);
LABEL_35:
    if (*((_WORD *)v22 + 8) != 224) {
      goto LABEL_42;
    }
    int v23 = *((unsigned __int8 *)v22 + 18);
    if ((v23 - 1) < 2) {
      goto LABEL_40;
    }
    if (v23 == 5 && *((_DWORD *)v22 + 2))
    {
      long long v22 = (uint64_t *)*v22;
LABEL_40:
      long long v22 = (uint64_t *)*v22;
      goto LABEL_42;
    }
    long long v22 = 0;
LABEL_42:
    if (v86) {
      break;
    }
    if (!v84 || (v84 & 1) != 0) {
      goto LABEL_53;
    }
    *(void *)(a5 + 8 * v18++) = v84;
    if (v17 == v18) {
      goto LABEL_54;
    }
  }
  if (v86 == 1)
  {
    uint64_t v24 = v85(v84, 0, 0);
    v85(v84, 1, v24);
    if (v86 == 1) {
      v85(v84, 3, 0);
    }
  }
LABEL_53:
  a6 = 4294967293;
LABEL_54:
  if (__p)
  {
    uint64_t v36 = __p;
    operator delete(__p);
  }
LABEL_56:
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
  }
  else if (v33)
  {
    (*(void (**)(void))(*v33 + 40))();
  }
  if (v31 == v30)
  {
    (*(void (**)(void *))(v30[0] + 32))(v30);
  }
  else if (v31)
  {
    (*(void (**)(void))(*v31 + 40))();
  }
  if (v41 != v43) {
    free(v41);
  }
LABEL_66:
  v44[0] = &unk_1ECA07790;
  if (v82 == v81)
  {
    (*(void (**)(void *))(v81[0] + 32))(v81);
  }
  else if (v82)
  {
    (*(void (**)(void))(*v82 + 40))();
  }
  v44[0] = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v45);
  if (v46) {
    *(unsigned char *)(v46 + 48) = 0;
  }
  return a6;
}

char *swift_distributed_getWitnessTables(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = v23;
  uint64_t v22 = 0x400000000;
  int v15 = 1;
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  unint64_t v18 = v20;
  uint64_t v19 = 0x800000000;
  v20[32] = 0;
  v11[0] = &unk_1ECA07040;
  v11[1] = &v15;
  int v12 = v11;
  v9[0] = &unk_1ECA07088;
  v9[1] = &v15;
  uint64_t v10 = v9;
  v7[0] = &unk_1ECA070D0;
  v7[1] = &v15;
  uint64_t v8 = v7;
  ((void (*)(void *__return_ptr))swift::_checkGenericRequirements)(v13);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
    if (v14)
    {
LABEL_13:
      uint64_t v2 = 0;
LABEL_14:
      ((void (*)(void, uint64_t, void))v13[1])(v13[0], 3, 0);
      goto LABEL_15;
    }
  }
  else
  {
    if (v12) {
      (*(void (**)(void))(*v12 + 40))();
    }
    if (v14) {
      goto LABEL_13;
    }
  }
  if (v22)
  {
    int v4 = (char *)malloc_type_malloc(8 * v22, 0x80040B8603338uLL);
    uint64_t v2 = v4;
    if (v22)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 8 * v22;
      do
      {
        *(void *)&v4[v5] = *(void *)&v21[v5];
        v5 += 8;
      }
      while (v6 != v5);
    }
    if (v14) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
LABEL_15:
  if (v18 != v20) {
    free(v18);
  }
  if (v21 != v23) {
    free(v21);
  }
  return v2;
}

uint64_t swift_getOpaqueTypeMetadata2(unsigned __int8 a1, uint64_t a2, unsigned char *a3, unsigned int a4)
{
  return swift_getOpaqueTypeMetadataImpl(a1, a2, a3, a4);
}

uint64_t swift_getOpaqueTypeMetadataImpl(unsigned __int8 a1, uint64_t a2, unsigned char *a3, unsigned int a4)
{
  if (a3) {
    int v7 = a3;
  }
  else {
    int v7 = 0;
  }
  uint64_t v9 = (int *)(swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v7)
             + 4 * a4);
  uint64_t v10 = *v9;
  uint64_t v11 = (char *)v9 + v10;
  if (v10) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v12, v8);
  if (a3) {
    int v15 = a3;
  }
  else {
    int v15 = 0;
  }
  int v24 = 0;
  long long v25 = v15;
  uint64_t v26 = a2;
  uint64_t v27 = v29;
  uint64_t v28 = 0x800000000;
  v29[32] = 0;
  v20[0] = &unk_1ECA06C08;
  v20[1] = &v24;
  uint64_t v21 = v20;
  v18[0] = &unk_1ECA06C50;
  v18[1] = &v24;
  uint64_t v19 = v18;
  swift_getTypeByMangledName(a1, SymbolicMangledNameStringRef, v13, a2, v20, v18, (uint64_t)v22);
  if (v23 == 1)
  {
    ((void (*)(void, uint64_t, void))v22[1])(v22[0], 3, 0);
  }
  else if (!v23)
  {
    uint64_t v16 = v22[0];
    goto LABEL_15;
  }
  uint64_t v16 = 0;
LABEL_15:
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  if (v27 != v29) {
    free(v27);
  }
  return v16;
}

uint64_t swift_getOpaqueTypeMetadata(unsigned __int8 a1, uint64_t a2, unsigned char *a3, unsigned int a4)
{
  return swift_getOpaqueTypeMetadataImpl(a1, a2, a3, a4);
}

uint64_t swift_getOpaqueTypeConformance2(uint64_t a1, unsigned char *a2, unsigned int a3)
{
  if (a2) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  return swift_getOpaqueTypeMetadataImpl(0, a1, v4, a3);
}

uint64_t swift_getOpaqueTypeConformance(uint64_t a1, unsigned char *a2, unsigned int a3)
{
  if (a2) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  return swift_getOpaqueTypeMetadataImpl(0, a1, v4, a3);
}

uint64_t _swift_instantiateCheckedGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  if ((*(unsigned char *)v3 & 0x80) == 0) {
    return 0;
  }
  long long v22 = xmmword_181636930;
  uint64_t v23 = 0;
  char v24 = 0;
  long long v59 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  char v28 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  int v57 = 0;
  v21[1] = &v60;
  v21[2] = &v61;
  v21[0] = &unk_1ECA06A78;
  unint64_t v18 = v20;
  uint64_t v19 = 0x800000000;
  uint64_t v4 = 0;
  if (swift::_gatherWrittenGenericParameters((char *)v3, a2, a3, (uint64_t)&v18, (uint64_t)v21))
  {
    v16[0] = v17;
    v16[1] = (void *)0x800000000;
    unint64_t v13 = v15;
    uint64_t v14 = 0x800000000;
    if (v3) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 0;
    }
    _gatherGenericParameters(v5, (char *)v18, v19, 0, (uint64_t)v16, (uint64_t)&v13, (uint64_t)v21, (uint64_t)v11);
    if (v12)
    {
      ((void (*)(void, uint64_t, void))v11[1])(v11[0], 3, 0);
      uint64_t v4 = 0;
    }
    else
    {
      int v7 = 0;
      uint64_t v9 = v3 + 12;
      uint64_t v8 = *(int *)(v3 + 12);
      if (v8 && v9 + v8) {
        int v7 = (uint64_t (*)(void, void, void))(v9 + v8);
      }
      uint64_t v10 = v13;
      switch((int)v14)
      {
        case 1:
          uint64_t v10 = *(void **)v13;
          goto LABEL_29;
        case 2:
          uint64_t v4 = v7(0, *(void *)v13, *((void *)v13 + 1));
          break;
        case 3:
          uint64_t v4 = ((uint64_t (*)(void, void, void, void))v7)(0, *(void *)v13, *((void *)v13 + 1), *((void *)v13 + 2));
          break;
        default:
LABEL_29:
          uint64_t v4 = ((uint64_t (*)(void, void *))v7)(0, v10);
          break;
      }
    }
    if (v13 != v15) {
      free(v13);
    }
    if (v16[0] != v17) {
      free(v16[0]);
    }
  }
  if (v18 != v20) {
    free(v18);
  }
  v21[0] = &unk_1ECA07790;
  if (v59 == v58)
  {
    (*(void (**)(void *))(v58[0] + 32))(v58);
  }
  else if (v59)
  {
    (*(void (**)(void))(*v59 + 40))();
  }
  v21[0] = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v22);
  if (v23) {
    *(unsigned char *)(v23 + 48) = 0;
  }
  return v4;
}

uint64_t swift::_gatherWrittenGenericParameters(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 0;
  }
  uint64_t GenericContext = swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(a1);
  if (!GenericContext) {
    return 1;
  }
  uint64_t v10 = GenericContext;
  if (!*(_WORD *)(GenericContext + 4)) {
    return 1;
  }
  unsigned int v11 = 0;
  int v12 = 0;
  uint64_t v13 = GenericContext + 12 + *(unsigned __int16 *)(GenericContext + 4);
  uint64_t v14 = a4 + 16;
  int v15 = (char *)(GenericContext + 12);
  do
  {
    if ((*v15 & 0x80000000) == 0)
    {
      uint64_t v16 = v15 + 1;
      do
      {
        unint64_t v17 = *(unsigned int *)(a4 + 8);
        if (v17 >= *(unsigned int *)(a4 + 12))
        {
          uint64_t v19 = v14;
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v14, v17 + 1, 8);
          uint64_t v14 = v19;
          unint64_t v17 = *(unsigned int *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v17) = 0;
        ++*(_DWORD *)(a4 + 8);
        if (v16 == (char *)v13) {
          goto LABEL_18;
        }
        int v18 = *v16++;
      }
      while ((v18 & 0x80000000) == 0);
      int v15 = v16 - 1;
      int v12 = 1;
    }
    uint64_t v20 = a2;
    uint64_t v21 = *(void *)(a2 + 8 * v11);
    unint64_t v22 = *(unsigned int *)(a4 + 8);
    if (v22 >= *(unsigned int *)(a4 + 12))
    {
      uint64_t v45 = v14;
      int v44 = v12;
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v14, v22 + 1, 8);
      int v12 = v44;
      uint64_t v14 = v45;
      unint64_t v22 = *(unsigned int *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v22) = v21;
    ++*(_DWORD *)(a4 + 8);
    ++v11;
    ++v15;
    a2 = v20;
  }
  while (v15 != (char *)v13);
  if ((v12 & 1) == 0) {
    return 1;
  }
LABEL_18:
  long long v53 = v55;
  uint64_t v54 = 0x800000000;
  swift::_gatherGenericParameterCounts(a1, (uint64_t)&v53, a5);
  v52[0] = a4;
  v52[1] = &v53;
  if (*(_WORD *)(v10 + 6))
  {
    uint64_t v25 = 12 * *(unsigned __int16 *)(v10 + 6);
    uint64_t v26 = (int *)(((v10 + 12 + *(unsigned __int16 *)(v10 + 4) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 8);
    uint64_t v27 = v26;
    while (1)
    {
      if ((*(v26 - 2) & 0x1F) != 1) {
        goto LABEL_25;
      }
      SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v27 + *(v26 - 1) - 4, v24);
      uint64_t v31 = demangleToGenericParamRef((uint64_t)SymbolicMangledNameStringRef, v30);
      if (!(_BYTE)v24) {
        goto LABEL_25;
      }
      if (v31 >= (unint64_t)v54) {
        goto LABEL_61;
      }
      int v32 = v31 ? *((_DWORD *)v53 + (v31 - 1)) : 0;
      uint64_t v33 = (v32 + HIDWORD(v31));
      if (v33 >= *((_DWORD *)v53 + v31) || *(_DWORD *)(a4 + 8) <= v33) {
        goto LABEL_61;
      }
      if (!*(void *)(*(void *)a4 + 8 * v33)) {
        break;
      }
      long long v34 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v27 + *v26, v24);
      uint64_t v36 = demangleToGenericParamRef((uint64_t)v34, v35);
      if (!(_BYTE)v24) {
        goto LABEL_25;
      }
      if (v36 >= (unint64_t)v54) {
        goto LABEL_61;
      }
      int v37 = v36 ? *((_DWORD *)v53 + (v36 - 1)) : 0;
      unsigned int v41 = v37 + HIDWORD(v36);
      if (v41 >= *((_DWORD *)v53 + v36) || *(_DWORD *)(a4 + 8) <= v41) {
        goto LABEL_61;
      }
      char v28 = (void *)(*(void *)a4 + 8 * v41);
      if (*v28) {
        goto LABEL_61;
      }
      uint64_t v40 = *(void *)(*(void *)a4 + 8 * v33);
      if (!v40) {
        goto LABEL_61;
      }
LABEL_24:
      void *v28 = v40;
LABEL_25:
      v27 += 3;
      v26 += 3;
      v25 -= 12;
      if (!v25) {
        goto LABEL_60;
      }
    }
    long long v38 = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v27 + *v26, v24);
    v48[0] = &unk_1ECA07118;
    v48[1] = v52;
    long long v49 = v48;
    v46[0] = &unk_1ECA07160;
    v46[1] = v52;
    long long v47 = v46;
    swift_getTypeByMangledName(255, v38, v39, a2, v48, v46, (uint64_t)v50);
    if (v51 == 1)
    {
      ((void (*)(void, uint64_t, void))v50[1])(v50[0], 3, 0);
    }
    else if (!v51)
    {
      uint64_t v40 = v50[0];
LABEL_53:
      if (v47 == v46)
      {
        (*(void (**)(void *))(v46[0] + 32))(v46);
      }
      else if (v47)
      {
        (*(void (**)(void))(*v47 + 40))();
      }
      if (v49 == v48)
      {
        (*(void (**)(void *))(v48[0] + 32))(v48);
      }
      else if (v49)
      {
        (*(void (**)(void))(*v49 + 40))();
      }
      if (!v40)
      {
LABEL_61:
        uint64_t v23 = 0;
        goto LABEL_62;
      }
      char v28 = (void *)(*(void *)a4 + 8 * v33);
      goto LABEL_24;
    }
    uint64_t v40 = 0;
    goto LABEL_53;
  }
LABEL_60:
  uint64_t v23 = 1;
LABEL_62:
  if (v53 != v55) {
    free(v53);
  }
  return v23;
}

void _gatherGenericParameters(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift::_gatherGenericParameterCounts((char *)a1, a5, a7);
  uint64_t v16 = *(unsigned int *)(a5 + 8);
  if (v16)
  {
    int v17 = *(_DWORD *)(*(void *)a5 + 4 * v16 - 4);
  }
  else
  {
    uint64_t GenericContext = swift::TargetContextDescriptor<swift::InProcess>::getGenericContext((_DWORD *)a1);
    if (GenericContext) {
      int v17 = *(unsigned __int16 *)(GenericContext + 4);
    }
    else {
      int v17 = 0;
    }
  }
  if ((*(unsigned char *)a1 & 0x80) == 0)
  {
    if (!a3) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  uint64_t v20 = a1 + 4;
  uint64_t v19 = *(int *)(a1 + 4);
  if (!v19) {
    goto LABEL_17;
  }
  uint64_t v21 = (void *)((v19 & 0xFFFFFFFFFFFFFFFELL) + v20);
  if (v19)
  {
    if (!*v21) {
      goto LABEL_17;
    }
    unint64_t v22 = (_DWORD *)*v21;
  }
  else
  {
    if (!v21) {
      goto LABEL_17;
    }
    unint64_t v22 = (_DWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + v20);
  }
  uint64_t v23 = swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v22);
  if (v23)
  {
    uint64_t v24 = *(unsigned __int16 *)(v23 + 4);
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v24 = 0;
LABEL_18:
  if (a3 == *(unsigned __int16 *)(swift::TargetContextDescriptor<swift::InProcess>::getGenericContext((_DWORD *)a1) + 4)
           - v24)
    goto LABEL_21;
LABEL_19:
  if (a4 || a3 != v17)
  {
    if ((a3 & 0x8000000000000000) == 0) {
      operator new();
    }
    goto LABEL_118;
  }
LABEL_21:
  if (!*(_DWORD *)(a5 + 8))
  {
LABEL_111:
    *(unsigned char *)a8 = 0;
    *(unsigned char *)(a8 + 16) = 0;
    return;
  }
  unint64_t v99 = v101;
  uint64_t v100 = 0x800000000;
  uint64_t v25 = (unsigned __int16 *)swift::TargetContextDescriptor<swift::InProcess>::getGenericContext((_DWORD *)a1);
  unint64_t v88 = a2;
  if (a4)
  {
    if (swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(a4))
    {
      uint64_t TypeContextDescriptor = (_DWORD *)swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(a4);
      if (swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(TypeContextDescriptor))
      {
        __int16 v86 = (_DWORD *)swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(a4);
        uint64_t v27 = (unsigned __int16 *)swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v86);
        char v28 = v27;
        if (v27[5]) {
          unsigned int v29 = *(_DWORD *)((((unint64_t)v27 + v27[2] + 15) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v27[3]);
        }
        else {
          unsigned int v29 = 0;
        }
        uint64_t v30 = &swift::TargetMetadata<swift::InProcess>::getGenericArgs(a4)[HIWORD(v29)];
        uint64_t v31 = v28[2];
        if (v28[2])
        {
          int v32 = v28 + 6;
          uint64_t v33 = v86;
          if (v31 < 8)
          {
            unsigned int v34 = 0;
            uint64_t v35 = (unsigned __int8 *)(v28 + 6);
LABEL_33:
            a2 = v88;
LABEL_45:
            long long v59 = (unsigned __int8 *)v32 + v31;
            do
            {
              unsigned int v60 = *v35++;
              v34 += v60 >> 7;
            }
            while (v35 != v59);
            goto LABEL_47;
          }
          if (v31 < 0x20)
          {
            unsigned int v34 = 0;
            uint64_t v36 = 0;
            goto LABEL_42;
          }
          int32x4_t v37 = 0uLL;
          uint64_t v36 = (unsigned __int16)v31 & 0xFFE0;
          int32x4_t v38 = 0uLL;
          unint64_t v39 = (uint8x16_t *)(v28 + 14);
          uint64_t v40 = v36;
          int32x4_t v41 = 0uLL;
          int32x4_t v42 = 0uLL;
          int32x4_t v43 = 0uLL;
          int32x4_t v44 = 0uLL;
          int32x4_t v45 = 0uLL;
          int32x4_t v46 = 0uLL;
          do
          {
            uint8x16_t v47 = vshrq_n_u8(v39[-1], 7uLL);
            uint8x16_t v48 = vshrq_n_u8(*v39, 7uLL);
            uint16x8_t v49 = vmovl_u8(*(uint8x8_t *)v47.i8);
            uint16x8_t v50 = vmovl_high_u8(v47);
            uint16x8_t v51 = vmovl_u8(*(uint8x8_t *)v48.i8);
            uint16x8_t v52 = vmovl_high_u8(v48);
            int32x4_t v42 = (int32x4_t)vaddw_high_u16((uint32x4_t)v42, v50);
            int32x4_t v41 = (int32x4_t)vaddw_u16((uint32x4_t)v41, *(uint16x4_t *)v50.i8);
            int32x4_t v38 = (int32x4_t)vaddw_high_u16((uint32x4_t)v38, v49);
            int32x4_t v37 = (int32x4_t)vaddw_u16((uint32x4_t)v37, *(uint16x4_t *)v49.i8);
            int32x4_t v46 = (int32x4_t)vaddw_high_u16((uint32x4_t)v46, v52);
            int32x4_t v45 = (int32x4_t)vaddw_u16((uint32x4_t)v45, *(uint16x4_t *)v52.i8);
            int32x4_t v44 = (int32x4_t)vaddw_high_u16((uint32x4_t)v44, v51);
            int32x4_t v43 = (int32x4_t)vaddw_u16((uint32x4_t)v43, *(uint16x4_t *)v51.i8);
            v39 += 2;
            v40 -= 32;
          }
          while (v40);
          unsigned int v34 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v43, v37), vaddq_s32(v45, v41)), vaddq_s32(vaddq_s32(v44, v38), vaddq_s32(v46, v42))));
          if (v36 != v31)
          {
            if ((v31 & 0x18) == 0)
            {
              uint64_t v35 = (unsigned __int8 *)v32 + v36;
              goto LABEL_33;
            }
LABEL_42:
            uint64_t v35 = (unsigned __int8 *)v32 + ((unsigned __int16)v31 & 0xFFF8);
            int32x4_t v53 = 0uLL;
            int32x4_t v54 = (int32x4_t)v34;
            long long v55 = (uint8x8_t *)((char *)v28 + v36 + 12);
            uint64_t v56 = v36 - ((unsigned __int16)v31 & 0xFFF8);
            do
            {
              uint8x8_t v57 = *v55++;
              uint16x8_t v58 = vmovl_u8(vshr_n_u8(v57, 7uLL));
              int32x4_t v53 = (int32x4_t)vaddw_high_u16((uint32x4_t)v53, v58);
              int32x4_t v54 = (int32x4_t)vaddw_u16((uint32x4_t)v54, *(uint16x4_t *)v58.i8);
              v56 += 8;
            }
            while (v56);
            unsigned int v34 = vaddvq_s32(vaddq_s32(v54, v53));
            a2 = v88;
            if ((v31 & 0xFFF8) == v31) {
              goto LABEL_47;
            }
            goto LABEL_45;
          }
          a2 = v88;
        }
        else
        {
          unsigned int v34 = 0;
          a2 = v88;
          uint64_t v33 = v86;
        }
LABEL_47:
        if (swift::_gatherWrittenGenericParameters(v33, v30, v34, &v99, a7)) {
          goto LABEL_48;
        }
        if ((a3 & 0x8000000000000000) == 0) {
          operator new();
        }
LABEL_118:
        abort();
      }
    }
  }
LABEL_48:
  __swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack>::insert<swift::MetadataOrPack const*,void>((uint64_t)&v99, (uint64_t)&v99[v100], a2, &a2[8 * a3]);
  if (v25[5])
  {
    unint64_t v61 = *(unsigned int *)((((unint64_t)v25 + v25[2] + 15) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v25[3]);
    if (v61 >= 0x10000)
    {
      unint64_t v62 = v61 >> 16;
      unsigned int v63 = *(_DWORD *)(a6 + 8);
      if (v63 <= v62)
      {
        if (v63 >= v62) {
          goto LABEL_57;
        }
        if (*(_DWORD *)(a6 + 12) < v62)
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v62, 8);
          unsigned int v63 = *(_DWORD *)(a6 + 8);
        }
        if (v63 != v62) {
          bzero((void *)(*(void *)a6 + 8 * v63), 8 * (v62 - v63));
        }
      }
      *(_DWORD *)(a6 + 8) = v62;
    }
  }
LABEL_57:
  uint64_t v64 = v25[2];
  if (v100 != v64)
  {
    if ((a3 & 0x8000000000000000) == 0) {
      operator new();
    }
    goto LABEL_118;
  }
  long long v65 = v25 + 6;
  if ((v25[5] & 1) != 0
    && (long long v66 = (_WORD *)((((unint64_t)v65 + v64 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v25[3]), *v66))
  {
    long long v67 = &v66[2 * (v25[5] & 1)];
    if (!v25[2])
    {
LABEL_61:
      uint64_t v68 = 0;
      goto LABEL_86;
    }
  }
  else
  {
    long long v67 = 0;
    if (!v25[2]) {
      goto LABEL_61;
    }
  }
  uint64_t v85 = v25;
  uint64_t v87 = a8;
  uint64_t v69 = 0;
  int v70 = 0;
  uint64_t v71 = a6 + 16;
  do
  {
    uint64_t v72 = v99[v69];
    int v73 = *((char *)v65 + v69);
    if ((*((unsigned char *)v65 + v69) & 0x3F) == 1)
    {
      if ((v72 & 1) == 0)
      {
        if ((a3 & 0x8000000000000000) == 0) {
          operator new();
        }
        goto LABEL_118;
      }
      if (v73 < 0)
      {
        *(void *)(*(void *)a6 + 8 * (unsigned __int16)v67[4 * v70 + 2]) = *(void *)((v72 & 0xFFFFFFFFFFFFFFFELL)
                                                                                          - 8);
        unint64_t v76 = *(unsigned int *)(a6 + 8);
        if (v76 >= *(unsigned int *)(a6 + 12))
        {
          uint64_t v77 = v71;
          uint64_t v83 = v67;
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v71, v76 + 1, 8);
          uint64_t v71 = v77;
          long long v67 = v83;
          unint64_t v76 = *(unsigned int *)(a6 + 8);
        }
        *(void *)(*(void *)a6 + 8 * v76) = v72;
        ++*(_DWORD *)(a6 + 8);
        ++v70;
      }
    }
    else
    {
      if ((*((unsigned char *)v65 + v69) & 0x3F) != 0)
      {
        if ((a3 & 0x8000000000000000) == 0) {
          operator new();
        }
        goto LABEL_118;
      }
      if (v72) {
        BOOL v74 = (v99[v69] & 1) == 0;
      }
      else {
        BOOL v74 = 0;
      }
      if (!v74)
      {
        if ((a3 & 0x8000000000000000) == 0) {
          operator new();
        }
        goto LABEL_118;
      }
      if (v73 < 0)
      {
        unint64_t v75 = *(unsigned int *)(a6 + 8);
        if (v75 >= *(unsigned int *)(a6 + 12))
        {
          uint64_t v78 = v71;
          uint64_t v84 = v67;
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v71, v75 + 1, 8);
          uint64_t v71 = v78;
          long long v67 = v84;
          unint64_t v75 = *(unsigned int *)(a6 + 8);
        }
        *(void *)(*(void *)a6 + 8 * v75) = v72;
        ++*(_DWORD *)(a6 + 8);
      }
    }
    ++v69;
  }
  while (v64 != v69);
  uint64_t v25 = v85;
  a8 = v87;
  uint64_t v68 = v85[2];
LABEL_86:
  v98[0] = &v99;
  v98[1] = a5;
  uint64_t v79 = v25[3];
  v93[0] = &unk_1ECA06C98;
  v93[1] = v98;
  size_t v94 = v93;
  v91[0] = &unk_1ECA06CE0;
  v91[1] = v98;
  uint64_t v92 = v91;
  v89[0] = &unk_1ECA06D28;
  v89[1] = v98;
  unint64_t v90 = v89;
  ((void (*)(uint64_t *__return_ptr, unsigned __int16 *, uint64_t, unint64_t, uint64_t, uint64_t, void *, void *, void *))swift::_checkGenericRequirements)(&v95, v65, v68, ((unint64_t)v65 + v68 + 3) & 0xFFFFFFFFFFFFFFFCLL, v79, a6, v93, v91, v89);
  if (v90 == v89)
  {
    (*(void (**)(void *))(v89[0] + 32))(v89);
  }
  else if (v90)
  {
    (*(void (**)(void))(*v90 + 40))();
  }
  if (v92 == v91)
  {
    (*(void (**)(void *))(v91[0] + 32))(v91);
  }
  else if (v92)
  {
    (*(void (**)(void))(*v92 + 40))();
  }
  if (v94 == v93)
  {
    (*(void (**)(void *))(v93[0] + 32))(v93);
    if (v97)
    {
LABEL_98:
      uint64_t v80 = v95;
      unint64_t v81 = v96;
      *(void *)(a8 + 8) = v96;
      *(void *)a8 = v81(v80, 2, 0);
      int v82 = 1;
      *(unsigned char *)(a8 + 16) = 1;
      goto LABEL_115;
    }
  }
  else
  {
    if (v94) {
      (*(void (**)(void))(*v94 + 40))();
    }
    if (v97) {
      goto LABEL_98;
    }
  }
  if (*(_DWORD *)(a6 + 8) != v25[4])
  {
    if ((a3 & 0x8000000000000000) == 0) {
      operator new();
    }
    goto LABEL_118;
  }
  int v82 = 0;
LABEL_115:
  if (v97) {
    v96(v95, 3, 0);
  }
  if (v99 != (void *)v101) {
    free(v99);
  }
  if (!v82) {
    goto LABEL_111;
  }
}

void installGetClassHook(void)
{
}

uint64_t getObjCClassByMangledName(char *__s, objc_class **a2)
{
  if (__s)
  {
    size_t v4 = strlen(__s);
    if (v4 < 3 || (*(_WORD *)__s == 21599 ? (BOOL v5 = __s[2] == 116) : (BOOL v5 = 0), !v5))
    {
      size_t v6 = strlen(__s);
      goto LABEL_9;
    }
    v24[1] = 0;
    void v24[2] = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 2400;
    uint64_t v27 = 0;
    char v28 = 0;
    unsigned int v63 = 0;
    v24[0] = &unk_1ECA07790;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    char v32 = 0;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    int v61 = 0;
    size_t v10 = strlen(__s);
    uint64_t v23 = 0;
    unint64_t TypeByMangledNameUntrusted = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v24, __s, v10, v22);
    if (v23 == v22)
    {
      (*(void (**)(void *))(v22[0] + 32))(v22);
      if (TypeByMangledNameUntrusted) {
        goto LABEL_23;
      }
    }
    else
    {
      if (v23) {
        (*(void (**)(void))(*v23 + 40))();
      }
      if (TypeByMangledNameUntrusted)
      {
LABEL_23:
        int v11 = *(unsigned __int8 *)(TypeByMangledNameUntrusted + 18);
        switch(v11)
        {
          case 1:
            uint64_t v13 = 0;
            break;
          case 2:
            uint64_t v13 = 1;
            break;
          case 5:
            uint64_t v12 = *(unsigned int *)(TypeByMangledNameUntrusted + 8);
            if (!v12) {
              goto LABEL_35;
            }
            uint64_t v13 = v12 - 1;
            unint64_t v14 = *(void *)TypeByMangledNameUntrusted;
LABEL_33:
            if (*(_WORD *)(*(void *)(v14 + 8 * v13) + 16) == 221)
            {
              unint64_t TypeByMangledNameUntrusted = 0;
              char v15 = 0;
              goto LABEL_48;
            }
LABEL_35:
            v18[0] = &unk_1ECA06D70;
            uint64_t v19 = v18;
            v16[0] = &unk_1ECA06DB8;
            int v17 = v16;
            swift_getTypeByMangledNode(0, (uint64_t)v24, (swift::Demangle::__runtime::Node *)TypeByMangledNameUntrusted, 0, v18, v16, (uint64_t)v20);
            if (v21 == 1)
            {
              ((void (*)(void, uint64_t, void))v20[1])(v20[0], 3, 0);
              unint64_t TypeByMangledNameUntrusted = 0;
            }
            else
            {
              unint64_t TypeByMangledNameUntrusted = 0;
              if (!v21) {
                unint64_t TypeByMangledNameUntrusted = v20[0];
              }
            }
            if (v17 == v16)
            {
              (*(void (**)(void *))(v16[0] + 32))(v16);
            }
            else if (v17)
            {
              (*(void (**)(void))(*v17 + 40))();
            }
            if (v19 == v18)
            {
              (*(void (**)(void *))(v18[0] + 32))(v18);
            }
            else if (v19)
            {
              (*(void (**)(void))(*v19 + 40))();
            }
            char v15 = 1;
LABEL_48:
            v24[0] = &unk_1ECA07790;
            if (v63 == v62)
            {
              (*(void (**)(void *))(v62[0] + 32))(v62);
            }
            else if (v63)
            {
              (*(void (**)(void))(*v63 + 40))();
            }
            v24[0] = &unk_1ECA07768;
            swift::Demangle::__runtime::NodeFactory::freeSlabs(v25);
            if (v27) {
              *(unsigned char *)(v27 + 48) = 0;
            }
            if ((v15 & 1) == 0) {
              return 0;
            }
            goto LABEL_14;
          default:
            goto LABEL_35;
        }
        unint64_t v14 = TypeByMangledNameUntrusted;
        goto LABEL_33;
      }
    }
    char v15 = 0;
    goto LABEL_48;
  }
  size_t v4 = 0;
  size_t v6 = 0;
LABEL_9:
  if (swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)__s, v6)
    || (*__s & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *__s + 60) & 0x400) != 0
    || strchr(__s, 46))
  {
    unint64_t TypeByMangledNameUntrusted = swift_stdlib_getTypeByMangledNameUntrusted((unsigned __int8 *)__s, v4);
LABEL_14:
    if (TypeByMangledNameUntrusted)
    {
      ObjCClassFromMetadataConditional = (objc_class *)swift::swift_getObjCClassFromMetadataConditional((void *)TypeByMangledNameUntrusted);
      if (ObjCClassFromMetadataConditional)
      {
        *a2 = ObjCClassFromMetadataConditional;
        return 1;
      }
    }
  }
  return OldGetClassHook(__s, a2);
}

uint64_t swift::SubstGenericParametersFromMetadata::buildDescriptorPath(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t)a2;
  if (!a2) {
    return v3;
  }
  long long v73 = xmmword_181636930;
  char v75 = 0;
  uint64_t v110 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v76 = 0;
  char v79 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  int v108 = 0;
  uint64_t v71 = &unk_1ECA068E8;
  *(unsigned char *)(a3 + 48) = 1;
  uint64_t v74 = a3;
  long long v72 = *(_OWORD *)(a3 + 8);
  Extendeduint64_t TypeContextDescriptor = _findExtendedTypeContextDescriptor(a2, (char *)&v71, 0);
  if (ExtendedTypeContextDescriptor) {
    size_t v6 = ExtendedTypeContextDescriptor;
  }
  else {
    size_t v6 = (_DWORD *)v3;
  }
  uint64_t v7 = (int)v6[1];
  if (v7)
  {
    uint64_t v8 = (_DWORD **)((char *)v6 + (v7 & 0xFFFFFFFFFFFFFFFELL) + 4);
    if (v7)
    {
      if (*v8)
      {
        uint64_t v9 = *v8;
        goto LABEL_12;
      }
    }
    else if (v8)
    {
      uint64_t v9 = (_DWORD *)((char *)v6 + (v7 & 0xFFFFFFFFFFFFFFFELL) + 4);
      goto LABEL_12;
    }
  }
  uint64_t v9 = 0;
LABEL_12:
  uint64_t v3 = swift::SubstGenericParametersFromMetadata::buildDescriptorPath(a1, v9, &v71);
  if ((*(unsigned char *)v6 & 0x80) != 0)
  {
    uint64_t GenericContext = swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(*(_DWORD **)(a1 + 8));
    uint64_t v15 = swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v9);
    if (v15) {
      unsigned int v16 = *(unsigned __int16 *)(v15 + 4);
    }
    else {
      unsigned int v16 = 0;
    }
    uint64_t v17 = swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v6);
    if (v17) {
      unsigned int v18 = *(unsigned __int16 *)(v17 + 4);
    }
    else {
      unsigned int v18 = 0;
    }
    uint64_t v19 = GenericContext + 12 + v16;
    uint64_t v20 = v18 - v16;
    if (v18 == v16)
    {
      unsigned int v21 = 0;
      LOBYTE(v22) = 0;
LABEL_35:
      if (v18 > v16)
      {
        v66[0] = GenericContext + 12 + v16;
        v66[1] = v18 - v16;
        uint64_t v54 = swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v6);
        if (v54) {
          int v55 = *(unsigned __int16 *)(v54 + 4);
        }
        else {
          int v55 = 0;
        }
        int v67 = v55;
        int v68 = v3;
        unsigned int v69 = v21;
        char v70 = v22 & 1;
        uint64_t v56 = *(unsigned int *)(a1 + 32);
        unint64_t v57 = *(void *)(a1 + 24);
        long long v58 = (char *)v66;
        if (v56 >= *(_DWORD *)(a1 + 36))
        {
          uint64_t v62 = a1 + 24;
          unint64_t v63 = v56 + 1;
          BOOL v64 = v57 + 32 * v56 > (unint64_t)v66;
          if (v57 <= (unint64_t)v66 && v64)
          {
            long long v65 = (char *)v66 - v57;
            __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v62, a1 + 40, v63, 32);
            unint64_t v57 = *(void *)(a1 + 24);
            long long v58 = &v65[v57];
          }
          else
          {
            __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v62, a1 + 40, v63, 32);
            unint64_t v57 = *(void *)(a1 + 24);
            long long v58 = (char *)v66;
          }
        }
        long long v59 = (_OWORD *)(v57 + 32 * *(unsigned int *)(a1 + 32));
        long long v60 = *((_OWORD *)v58 + 1);
        *long long v59 = *(_OWORD *)v58;
        v59[1] = v60;
        ++*(_DWORD *)(a1 + 32);
      }
      uint64_t v3 = v21 + v3;
      goto LABEL_42;
    }
    if (v20 < 8)
    {
      LOBYTE(v22) = 0;
      unsigned int v21 = 0;
      uint64_t v23 = (char *)(GenericContext + 12 + v16);
      goto LABEL_34;
    }
    if (v20 >= 0x20)
    {
      int8x16_t v25 = 0uLL;
      uint64_t v24 = v20 & 0xFFFFFFE0;
      v26.i64[0] = -1;
      v26.i64[1] = -1;
      int8x16_t v27 = 0uLL;
      char v28 = (uint8x16_t *)(v16 + GenericContext + 28);
      int32x4_t v29 = 0uLL;
      uint64_t v30 = v24;
      int32x4_t v31 = 0uLL;
      int32x4_t v32 = 0uLL;
      int32x4_t v33 = 0uLL;
      int32x4_t v34 = 0uLL;
      int32x4_t v35 = 0uLL;
      int32x4_t v36 = 0uLL;
      int32x4_t v37 = 0uLL;
      do
      {
        int8x16_t v38 = (int8x16_t)v28[-1];
        int8x16_t v39 = vcgtq_s8(v38, v26);
        uint8x16_t v40 = vshrq_n_u8((uint8x16_t)v38, 7uLL);
        uint8x16_t v41 = vshrq_n_u8(*v28, 7uLL);
        uint16x8_t v42 = vmovl_u8(*(uint8x8_t *)v40.i8);
        uint16x8_t v43 = vmovl_high_u8(v40);
        uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)v41.i8);
        uint16x8_t v45 = vmovl_high_u8(v41);
        int32x4_t v33 = (int32x4_t)vaddw_high_u16((uint32x4_t)v33, v43);
        int32x4_t v32 = (int32x4_t)vaddw_u16((uint32x4_t)v32, *(uint16x4_t *)v43.i8);
        int32x4_t v31 = (int32x4_t)vaddw_high_u16((uint32x4_t)v31, v42);
        int32x4_t v29 = (int32x4_t)vaddw_u16((uint32x4_t)v29, *(uint16x4_t *)v42.i8);
        int32x4_t v37 = (int32x4_t)vaddw_high_u16((uint32x4_t)v37, v45);
        int32x4_t v36 = (int32x4_t)vaddw_u16((uint32x4_t)v36, *(uint16x4_t *)v45.i8);
        int32x4_t v35 = (int32x4_t)vaddw_high_u16((uint32x4_t)v35, v44);
        int32x4_t v34 = (int32x4_t)vaddw_u16((uint32x4_t)v34, *(uint16x4_t *)v44.i8);
        int8x16_t v25 = vorrq_s8(v39, v25);
        int8x16_t v27 = vorrq_s8(vcgtq_s8(*(int8x16_t *)v28, v26), v27);
        v28 += 2;
        v30 -= 32;
      }
      while (v30);
      unsigned int v21 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v34, v29), vaddq_s32(v36, v32)), vaddq_s32(vaddq_s32(v35, v31), vaddq_s32(v37, v33))));
      unsigned int v22 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v25, v27), 7uLL))) & 1;
      if (v24 == v20) {
        goto LABEL_35;
      }
      if ((((_BYTE)v18 - (_BYTE)v16) & 0x18) == 0)
      {
        uint64_t v23 = (char *)(v19 + v24);
        do
        {
LABEL_34:
          int v53 = *v23++;
          v21 += (v53 & 0x80) >> 7;
          LOBYTE(v22) = (v53 >= 0) | v22;
        }
        while (v23 != (char *)(v19 + v20));
        goto LABEL_35;
      }
    }
    else
    {
      unsigned int v22 = 0;
      unsigned int v21 = 0;
      uint64_t v24 = 0;
    }
    uint64_t v23 = (char *)(v19 + (v20 & 0xFFFFFFF8));
    int8x8_t v46 = vdup_n_s8(v22);
    int32x4_t v47 = (int32x4_t)v21;
    int32x4_t v48 = 0uLL;
    long long v49 = (int8x8_t *)(v24 + v16 + GenericContext + 12);
    uint64_t v50 = v24 - (v20 & 0xFFFFFFF8);
    do
    {
      int8x8_t v51 = *v49++;
      uint16x8_t v52 = vmovl_u8(vshr_n_u8((uint8x8_t)v51, 7uLL));
      int32x4_t v48 = (int32x4_t)vaddw_high_u16((uint32x4_t)v48, v52);
      int32x4_t v47 = (int32x4_t)vaddw_u16((uint32x4_t)v47, *(uint16x4_t *)v52.i8);
      int8x8_t v46 = vorr_s8(vcgt_s8(v51, (int8x8_t)-1), v46);
      v50 += 8;
    }
    while (v50);
    unsigned int v21 = vaddvq_s32(vaddq_s32(v47, v48));
    LOBYTE(v22) = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v46, 7uLL))) & 1;
    if ((v20 & 0xFFFFFFF8) == v20) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_42:
  uint64_t v71 = &unk_1ECA07790;
  if (v110 == v109)
  {
    (*(void (**)(void *))(v109[0] + 32))(v109);
  }
  else if (v110)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v110 + 40))(v110, v10, v11, v12, v13);
  }
  uint64_t v71 = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v73);
  if (v74) {
    *(unsigned char *)(v74 + 48) = 0;
  }
  return v3;
}

uint64_t swift::SubstGenericParametersFromMetadata::buildEnvironmentPath(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = (unsigned __int16 *)(a2 + 1);
  if ((*a2 & 0xFFF) != 0)
  {
    int v4 = 0;
    LODWORD(v5) = 0;
    size_t v6 = &v2[*a2 & 0xFFF];
    uint64_t v7 = (unint64_t *)(a1 + 24);
    uint64_t v8 = a1 + 40;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    uint64_t v10 = (uint8x16_t *)v6;
    while (1)
    {
      int v11 = v4;
      int v4 = *v2;
      uint64_t v12 = (v4 - v11);
      uint64_t v13 = &v10->i8[v12];
      if (v12) {
        break;
      }
      unsigned int v14 = 0;
      LOBYTE(v15) = 0;
LABEL_19:
      v55[0] = v10;
      v55[1] = v12;
      int v56 = v4;
      int v57 = v5;
      unsigned int v58 = v14;
      char v59 = v15 & 1;
      uint64_t v46 = *(unsigned int *)(a1 + 32);
      unint64_t v47 = *(void *)(a1 + 24);
      if (v46 >= *(_DWORD *)(a1 + 36))
      {
        unint64_t v51 = v46 + 1;
        BOOL v52 = v47 + 32 * v46 > (unint64_t)v55;
        if (v47 <= (unint64_t)v55 && v52)
        {
          uint64_t v54 = (char *)v55 - v47;
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v8, v51, 32);
          unint64_t v47 = *v7;
          int32x4_t v48 = &v54[*v7];
        }
        else
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v8, v51, 32);
          unint64_t v47 = *v7;
          int32x4_t v48 = (char *)v55;
        }
        v9.i64[0] = -1;
        v9.i64[1] = -1;
      }
      else
      {
        int32x4_t v48 = (char *)v55;
      }
      uint64_t v5 = v14 + v5;
      long long v49 = (_OWORD *)(v47 + 32 * *(unsigned int *)(a1 + 32));
      long long v50 = *((_OWORD *)v48 + 1);
      _OWORD *v49 = *(_OWORD *)v48;
      v49[1] = v50;
      ++*(_DWORD *)(a1 + 32);
      ++v2;
      uint64_t v10 = (uint8x16_t *)v13;
      if (v2 == v6) {
        return v5;
      }
    }
    if (v12 < 8)
    {
      LOBYTE(v15) = 0;
      unsigned int v14 = 0;
      unsigned int v16 = (char *)v10;
      goto LABEL_18;
    }
    if (v12 >= 0x20)
    {
      int8x16_t v18 = 0uLL;
      uint64_t v17 = v12 & 0xFFFFFFE0;
      int8x16_t v19 = 0uLL;
      uint64_t v20 = v10 + 1;
      int32x4_t v21 = 0uLL;
      uint64_t v22 = v17;
      int32x4_t v23 = 0uLL;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      int32x4_t v28 = 0uLL;
      int32x4_t v29 = 0uLL;
      do
      {
        int8x16_t v30 = (int8x16_t)v20[-1];
        int8x16_t v31 = vcgtq_s8(v30, v9);
        uint8x16_t v32 = vshrq_n_u8((uint8x16_t)v30, 7uLL);
        uint8x16_t v33 = vshrq_n_u8(*v20, 7uLL);
        uint16x8_t v34 = vmovl_u8(*(uint8x8_t *)v32.i8);
        uint16x8_t v35 = vmovl_high_u8(v32);
        uint16x8_t v36 = vmovl_u8(*(uint8x8_t *)v33.i8);
        uint16x8_t v37 = vmovl_high_u8(v33);
        int32x4_t v25 = (int32x4_t)vaddw_high_u16((uint32x4_t)v25, v35);
        int32x4_t v24 = (int32x4_t)vaddw_u16((uint32x4_t)v24, *(uint16x4_t *)v35.i8);
        int32x4_t v23 = (int32x4_t)vaddw_high_u16((uint32x4_t)v23, v34);
        int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v34.i8);
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v37);
        int32x4_t v28 = (int32x4_t)vaddw_u16((uint32x4_t)v28, *(uint16x4_t *)v37.i8);
        int32x4_t v27 = (int32x4_t)vaddw_high_u16((uint32x4_t)v27, v36);
        int32x4_t v26 = (int32x4_t)vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)v36.i8);
        int8x16_t v18 = vorrq_s8(v31, v18);
        int8x16_t v19 = vorrq_s8(vcgtq_s8(*(int8x16_t *)v20, v9), v19);
        v20 += 2;
        v22 -= 32;
      }
      while (v22);
      unsigned int v14 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v26, v21), vaddq_s32(v28, v24)), vaddq_s32(vaddq_s32(v27, v23), vaddq_s32(v29, v25))));
      unsigned int v15 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v18, v19), 7uLL))) & 1;
      if (v17 == v12) {
        goto LABEL_19;
      }
      if ((v12 & 0x18) == 0)
      {
        unsigned int v16 = &v10->i8[v17];
        do
        {
LABEL_18:
          int v45 = *v16++;
          v14 += (v45 & 0x80) >> 7;
          LOBYTE(v15) = (v45 >= 0) | v15;
        }
        while (v16 != v13);
        goto LABEL_19;
      }
    }
    else
    {
      unsigned int v15 = 0;
      unsigned int v14 = 0;
      uint64_t v17 = 0;
    }
    unsigned int v16 = &v10->i8[v12 & 0xFFFFFFF8];
    int8x8_t v38 = vdup_n_s8(v15);
    int32x4_t v39 = 0uLL;
    int32x4_t v40 = (int32x4_t)v14;
    uint8x16_t v41 = (int8x8_t *)&v10->i8[v17];
    uint64_t v42 = v17 - (v12 & 0xFFFFFFF8);
    do
    {
      int8x8_t v43 = *v41++;
      uint16x8_t v44 = vmovl_u8(vshr_n_u8((uint8x8_t)v43, 7uLL));
      int32x4_t v39 = (int32x4_t)vaddw_high_u16((uint32x4_t)v39, v44);
      int32x4_t v40 = (int32x4_t)vaddw_u16((uint32x4_t)v40, *(uint16x4_t *)v44.i8);
      int8x8_t v38 = vorr_s8(vcgt_s8(v43, (int8x8_t)-1), v38);
      v42 += 8;
    }
    while (v42);
    unsigned int v14 = vaddvq_s32(vaddq_s32(v40, v39));
    LOBYTE(v15) = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v38, 7uLL))) & 1;
    if ((v12 & 0xFFFFFFF8) == v12) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  return 0;
}

uint64_t swift::SubstGenericParametersFromMetadata::buildShapePath(uint64_t a1, unsigned int *a2)
{
  swift::TargetExtendedExistentialTypeShape<swift::InProcess>::getGeneralizationSignature(a2, (uint64_t)&v35);
  int v4 = v35;
  if (v35)
  {
    uint64_t v5 = a1 + 24;
    unint64_t v6 = *(void *)(a1 + 24);
    int32x4_t v29 = v36;
    unint64_t v30 = v35;
    int v31 = v35;
    unsigned int v32 = 0;
    int v33 = v35;
    char v34 = 0;
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    uint64_t v8 = (char *)&v29;
    if (v7 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v25 = v7 + 1;
      BOOL v26 = v6 + 32 * v7 > (unint64_t)&v29;
      if (v6 <= (unint64_t)&v29 && v26)
      {
        int32x4_t v28 = (char *)&v29 - v6;
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v5, a1 + 40, v25, 32);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v8 = &v28[v6];
      }
      else
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v5, a1 + 40, v25, 32);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v8 = (char *)&v29;
      }
    }
    int8x16_t v9 = (_OWORD *)(v6 + 32 * *(unsigned int *)(a1 + 32));
    long long v10 = *((_OWORD *)v8 + 1);
    *int8x16_t v9 = *(_OWORD *)v8;
    v9[1] = v10;
    ++*(_DWORD *)(a1 + 32);
    unsigned int v11 = v35;
  }
  else
  {
    unsigned int v11 = 0;
  }
  unint64_t v12 = *a2;
  if ((v12 & 0x800) != 0) {
    uint64_t v13 = (char *)&swift::ImplicitGenericParamDescriptors;
  }
  else {
    uint64_t v13 = (char *)((((unint64_t)&a2[2 * ((v12 >> 8) & 1) + 4] + 3) & 0xFFFFFFFFFFFFFFFCLL)
  }
                 + 4 * ((v12 >> 9) & 1)
                 + 4 * ((v12 >> 10) & 1));
  unint64_t v14 = *((unsigned __int16 *)a2 + 4) - (unint64_t)v11;
  uint64_t v15 = (v14 + v4);
  uint64_t v16 = a1 + 24;
  unint64_t v17 = *(void *)(a1 + 24);
  int32x4_t v29 = &v13[v11];
  unint64_t v30 = v14;
  int v31 = v14 + v4;
  unsigned int v32 = v11;
  int v33 = v14;
  char v34 = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 32);
  int8x16_t v19 = (char *)&v29;
  if (v18 >= *(_DWORD *)(a1 + 36))
  {
    unint64_t v23 = v18 + 1;
    BOOL v24 = v17 + 32 * v18 > (unint64_t)&v29;
    if (v17 <= (unint64_t)&v29 && v24)
    {
      int32x4_t v27 = (char *)&v29 - v17;
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v16, a1 + 40, v23, 32);
      unint64_t v17 = *(void *)(a1 + 24);
      int8x16_t v19 = &v27[v17];
    }
    else
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v16, a1 + 40, v23, 32);
      unint64_t v17 = *(void *)(a1 + 24);
      int8x16_t v19 = (char *)&v29;
    }
  }
  uint64_t v20 = (_OWORD *)(v17 + 32 * *(unsigned int *)(a1 + 32));
  long long v21 = *((_OWORD *)v19 + 1);
  *uint64_t v20 = *(_OWORD *)v19;
  v20[1] = v21;
  ++*(_DWORD *)(a1 + 32);
  return v15;
}

unsigned int **swift::SubstGenericParametersFromMetadata::setup(unsigned int **this)
{
  if (*((_DWORD *)this + 8)) {
    return this;
  }
  uint64_t v1 = (uint64_t)this;
  int v2 = *(_DWORD *)this;
  if (*(_DWORD *)this == 2)
  {
    this = (unsigned int **)swift::SubstGenericParametersFromMetadata::buildShapePath((uint64_t)this, this[1]);
LABEL_10:
    *(_DWORD *)(v1 + 296) = this;
    return this;
  }
  if (v2 == 1)
  {
    this = (unsigned int **)swift::SubstGenericParametersFromMetadata::buildEnvironmentPath((uint64_t)this, this[1]);
    goto LABEL_10;
  }
  if (!v2)
  {
    long long v6 = xmmword_181636930;
    uint64_t v7 = 0;
    char v8 = 0;
    int8x8_t v43 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    char v12 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    int v41 = 0;
    v5[1] = &v44;
    v5[2] = &v45;
    v5[0] = &unk_1ECA06A78;
    *((_DWORD *)this + 74) = swift::SubstGenericParametersFromMetadata::buildDescriptorPath((uint64_t)this, this[1], (uint64_t)v5);
    uint64_t GenericContext = (unsigned __int16 *)swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(*(_DWORD **)(v1 + 8));
    if (GenericContext)
    {
      if (GenericContext[5]) {
        int v4 = *(unsigned __int16 *)((((unint64_t)GenericContext + GenericContext[2] + 15) & 0xFFFFFFFFFFFFFFFCLL)
      }
                                 + 12 * GenericContext[3]
                                 + 2);
      else {
        int v4 = 0;
      }
      *(_DWORD *)(v1 + 300) = v4;
    }
    v5[0] = &unk_1ECA07790;
    if (v43 == v42)
    {
      (*(void (**)(void *))(v42[0] + 32))(v42);
    }
    else if (v43)
    {
      (*(void (**)(void *))(*v43 + 40))(v43);
    }
    v5[0] = &unk_1ECA07768;
    this = (unsigned int **)swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v6);
    if (v7) {
      *(unsigned char *)(v7 + 48) = 0;
    }
  }
  return this;
}

uint64_t swift::SubstGenericParametersFromMetadata::getMetadata(swift::SubstGenericParametersFromMetadata *this, unsigned int a2, unsigned int a3)
{
  if (!*((void *)this + 2)) {
    return 0;
  }
  swift::SubstGenericParametersFromMetadata::setup((unsigned int **)this);
  if (*((_DWORD *)this + 8) <= a2) {
    return 0;
  }
  uint64_t v6 = *((void *)this + 3) + 32 * a2;
  if (*(_DWORD *)(v6 + 16) <= a3) {
    return 0;
  }
  unsigned int v7 = *((_DWORD *)this + 75) + *(_DWORD *)(v6 + 20);
  if (*(unsigned char *)(v6 + 28))
  {
    char v8 = *(uint8x16_t **)v6;
    uint64_t v9 = (uint8x16_t *)(*(void *)v6 + a3);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0;
    }
    if (a3)
    {
      if (a3 < 8)
      {
        uint64_t v11 = v8;
        goto LABEL_22;
      }
      if (a3 >= 0x20)
      {
        uint64_t v12 = a3 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        long long v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == a3) {
          return *(void *)(*((void *)this + 2) + 8 * v7);
        }
        if ((a3 & 0x18) == 0)
        {
          uint64_t v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            uint64_t v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }
          while (v11 != v9);
          return *(void *)(*((void *)this + 2) + 8 * v7);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      uint64_t v11 = (uint8x16_t *)((char *)v8 + (a3 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      long long v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (a3 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8;
      }
      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((a3 & 0xFFFFFFF8) == (unint64_t)a3) {
        return *(void *)(*((void *)this + 2) + 8 * v7);
      }
      goto LABEL_22;
    }
  }
  else
  {
    v7 += a3;
  }
  return *(void *)(*((void *)this + 2) + 8 * v7);
}

uint64_t swift::SubstGenericParametersFromMetadata::getMetadataKeyArgOrdinal(swift::SubstGenericParametersFromMetadata *this, int a2)
{
  if (!*((void *)this + 2)) {
    return 0;
  }
  swift::SubstGenericParametersFromMetadata::setup((unsigned int **)this);
  return *(void *)(*((void *)this + 2) + 8 * (*((_DWORD *)this + 75) + a2));
}

uint64_t swift::SubstGenericParametersFromMetadata::getWitnessTable(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  swift::SubstGenericParametersFromMetadata::setup((unsigned int **)a1);
  return *(void *)(*(void *)(a1 + 16) + 8 * (*(_DWORD *)(a1 + 296) + a3 + *(_DWORD *)(a1 + 300)));
}

uint64_t demangleToGenericParamRef(uint64_t a1, uint64_t a2)
{
  long long v12 = xmmword_181636930;
  uint64_t v13 = 0;
  char v14 = 0;
  long long v49 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  char v18 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int v47 = 0;
  v11[0] = &unk_1ECA04218;
  v11[1] = &v50;
  void v11[2] = &v51;
  uint64_t v10 = 0;
  int v2 = (void *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v11, a1, a2, v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
    if (v2) {
      goto LABEL_5;
    }
LABEL_12:
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    goto LABEL_23;
  }
  if (v10) {
    (*(void (**)(void))(*v10 + 40))();
  }
  if (!v2) {
    goto LABEL_12;
  }
LABEL_5:
  if (*((_WORD *)v2 + 8) != 232) {
    goto LABEL_14;
  }
  int v3 = *((unsigned __int8 *)v2 + 18);
  if ((v3 - 1) < 2) {
    goto LABEL_10;
  }
  if (v3 == 5 && *((_DWORD *)v2 + 2))
  {
    int v2 = (void *)*v2;
LABEL_10:
    int v2 = (void *)*v2;
    goto LABEL_14;
  }
  int v2 = 0;
LABEL_14:
  if (*((_WORD *)v2 + 8) == 38)
  {
    int v6 = *((unsigned __int8 *)v2 + 18);
    if ((v6 - 1) >= 2)
    {
      if (v6 == 5) {
        unsigned int v7 = (void *)*v2;
      }
      else {
        unsigned int v7 = v2;
      }
      int v2 = (void *)*v2;
    }
    else
    {
      unsigned int v7 = v2;
    }
    uint64_t v5 = *(void *)*v2 & 0xFFFFFF00 | (*(void *)v7[1] << 32);
    uint64_t v4 = *(void *)*v2;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_23:
  v11[0] = &unk_1ECA07790;
  if (v49 == v48)
  {
    (*(void (**)(void *))(v48[0] + 32))(v48);
  }
  else if (v49)
  {
    (*(void (**)(void))(*v49 + 40))();
  }
  v11[0] = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v12);
  if (v13) {
    *(unsigned char *)(v13 + 48) = 0;
  }
  return v5 | v4;
}

int *swift::DynamicReplacementDescriptor::enableReplacement(int *this)
{
  uint64_t v1 = *this;
  int v2 = (int **)((char *)this + (v1 & 0xFFFFFFFFFFFFFFFELL));
  if (v1)
  {
    int v3 = *v2;
    if (!*v2) {
      return this;
    }
  }
  else
  {
    int v3 = (int *)((char *)this + (v1 & 0xFFFFFFFFFFFFFFFELL));
    if (!v2) {
      return this;
    }
  }
  uint64_t v4 = (void *)((char *)v3 + *v3);
  if ((this[3] & 1) == 0)
  {
    uint64_t v5 = (void *)v4[1];
    if (v5)
    {
      v4[1] = v5[1];
      *uint64_t v4 = *v5;
    }
  }
  int v6 = (void *)((char *)this + this[2] + 8);
  *int v6 = *v4;
  v6[1] = v4[1];
  v4[1] = v6;
  uint64_t v7 = this[1];
  *uint64_t v4 = (char *)++this + v7;
  return this;
}

void swift::addImageDynamicReplacementBlockCallback(swift *this, unsigned int *a2, uint64_t a3, unint64_t a4, char *a5)
{
  unint64_t v6 = a4;
  char v8 = a2;
  if (a5) {
    uint64_t v9 = 8 * *(unsigned int *)(a4 + 4) + 8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = a2[1];
  if (qword_1EB208C68 != -1) {
    dispatch_once_f(&qword_1EB208C68, &DynamicReplacementLock, (dispatch_function_t)swift::Lazy<swift::Mutex>::defaultInitCallback);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&DynamicReplacementLock);
  if (a3 >= 1)
  {
    uint64_t v11 = (unsigned int *)((char *)v8 + a3);
    uint64_t v12 = v8[1];
    if (!v8[1]) {
      goto LABEL_14;
    }
LABEL_8:
    uint64_t v13 = (int *)(v8 + 2);
    uint64_t v14 = (uint64_t)&v8[2 * v12 + 2];
    do
    {
      uint64_t v15 = (char *)v13 + *v13;
      uint64_t v16 = *((unsigned int *)v15 + 1);
      if (v16)
      {
        uint64_t v17 = (int *)(v15 + 8);
        uint64_t v18 = 16 * v16;
        do
        {
          swift::DynamicReplacementDescriptor::enableReplacement(v17);
          v17 += 4;
          v18 -= 16;
        }
        while (v18);
      }
      v13 += 2;
    }
    while (v13 != (int *)v14);
LABEL_14:
    while (1)
    {
      v8 += 2 * v10 + 2;
      if (v8 >= v11) {
        break;
      }
      uint64_t v10 = v8[1];
      uint64_t v12 = v10;
      if (v8[1]) {
        goto LABEL_8;
      }
    }
  }
  if ((uint64_t)a5 <= 0) {
    goto LABEL_53;
  }
  long long v19 = &a5[v6];
  uint64_t v20 = *(unsigned int *)(v6 + 4);
  if (!*(_DWORD *)(v6 + 4)) {
    goto LABEL_50;
  }
LABEL_19:
  long long v21 = (int *)(v6 + 8);
  uint64_t v22 = v6 + 8 + 8 * v20;
  uint64_t v23 = qword_1EB208CC0;
  do
  {
    if (v23 != -1) {
    uint64_t v28 = *v21;
    }
    long long v29 = (void *)((char *)v21 + (v28 & 0xFFFFFFFFFFFFFFFELL));
    if (v28)
    {
      if (*v29) {
        long long v29 = (void *)*v29;
      }
      else {
        long long v29 = 0;
      }
    }
    uint64_t v30 = v21[1];
    if ((int *)((char *)v21 + v30 + 4)) {
      long long v31 = (char *)v21 + v30 + 4;
    }
    else {
      long long v31 = 0;
    }
    long long v37 = v29;
    if (dword_1EB208CB8)
    {
      if (v29) {
        unsigned int v24 = (v29 >> 9) ^ (v29 >> 4);
      }
      else {
        unsigned int v24 = 0;
      }
      unsigned int v25 = v24 & (dword_1EB208CB8 - 1);
      long long v26 = (uint64_t *)(opaqueTypeMappings + 16 * v25);
      uint64_t v27 = *v26;
      if ((void *)*v26 == v29)
      {
        uint64_t v23 = -1;
        goto LABEL_23;
      }
      long long v33 = 0;
      int v34 = 1;
      while (v27 != -4096)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v27 == -8192;
        }
        if (v35) {
          long long v33 = v26;
        }
        unsigned int v36 = v25 + v34++;
        unsigned int v25 = v36 & (dword_1EB208CB8 - 1);
        long long v26 = (uint64_t *)(opaqueTypeMappings + 16 * v25);
        uint64_t v27 = *v26;
        uint64_t v23 = -1;
        if ((void *)*v26 == v29) {
          goto LABEL_23;
        }
      }
      if (v33) {
        long long v32 = v33;
      }
      else {
        long long v32 = v26;
      }
    }
    else
    {
      long long v32 = 0;
    }
    long long v26 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>>,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>>::InsertIntoBucket<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const* const&>((uint64_t)&opaqueTypeMappings, v32, (uint64_t *)&v37);
    uint64_t v23 = qword_1EB208CC0;
LABEL_23:
    v26[1] = (uint64_t)v31;
    v21 += 2;
  }
  while (v21 != (int *)v22);
LABEL_50:
  while (1)
  {
    v6 += v9;
    if (v6 >= (unint64_t)v19) {
      break;
    }
    uint64_t v20 = *(unsigned int *)(v6 + 4);
    uint64_t v9 = 8 * v20 + 8;
    if (*(_DWORD *)(v6 + 4)) {
      goto LABEL_19;
    }
  }
LABEL_53:
  os_unfair_lock_unlock((os_unfair_lock_t)&DynamicReplacementLock);
}

_DWORD *swift::Lazy<swift::Mutex>::defaultInitCallback(_DWORD *result)
{
  void *result = 0;
  return result;
}

void swift_enableDynamicReplacementScope(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = 0;
  }
  if (qword_1EB208C68 != -1) {
    dispatch_once_f(&qword_1EB208C68, &DynamicReplacementLock, (dispatch_function_t)swift::Lazy<swift::Mutex>::defaultInitCallback);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&DynamicReplacementLock);
  uint64_t v2 = *(unsigned int *)(v1 + 4);
  if (v2)
  {
    int v3 = (int *)(v1 + 8);
    uint64_t v4 = 16 * v2;
    do
    {
      swift::DynamicReplacementDescriptor::enableReplacement(v3);
      v3 += 4;
      v4 -= 16;
    }
    while (v4);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&DynamicReplacementLock);
}

void swift_disableDynamicReplacementScope(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = 0;
  }
  if (qword_1EB208C68 != -1) {
    dispatch_once_f(&qword_1EB208C68, &DynamicReplacementLock, (dispatch_function_t)swift::Lazy<swift::Mutex>::defaultInitCallback);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&DynamicReplacementLock);
  uint64_t v6 = *(unsigned int *)(v1 + 4);
  if (v6)
  {
    uint64_t v7 = (int *)(v1 + 8);
    uint64_t v8 = v1 + 8 + 16 * v6;
    do
    {
      uint64_t v9 = *v7;
      uint64_t v10 = (int *)((char *)v7 + (v9 & 0xFFFFFFFFFFFFFFFELL));
      if (v9) {
        uint64_t v10 = *(int **)((char *)v7 + (v9 & 0xFFFFFFFFFFFFFFFELL));
      }
      uint64_t v11 = (void *)((char *)v10 + *v10);
      uint64_t v12 = (void *)((char *)v7 + v7[2] + 8);
      do
      {
        if (!v11) {
          swift::swift_abortDynamicReplacementDisabling(v2, v3, v4, v5);
        }
        uint64_t v13 = v11;
        uint64_t v11 = (void *)v11[1];
      }
      while (v11 != v12);
      v13[1] = v12[1];
      *uint64_t v13 = *v12;
      v7 += 4;
    }
    while (v7 != (int *)v8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&DynamicReplacementLock);
}

uint64_t swift_getTypeByMangledNode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, swift::Demangle::__runtime::Node *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  swift_once(&swift_getTypeByMangledNode::Predicate, (dispatch_function_t)swift_getTypeByMangledNode::$_0::__invoke, 0);
  uint64_t v14 = swift_getTypeByMangledNode::Override;
  uint64_t v15 = (void *)a5[3];
  if (swift_getTypeByMangledNode::Override)
  {
    if (v15)
    {
      if (v15 == a5)
      {
        long long v26 = v25;
        (*(void (**)(void *, void *))(*a5 + 24))(a5, v25);
        uint64_t v16 = (void *)a6[3];
        if (!v16) {
          goto LABEL_5;
        }
      }
      else
      {
        long long v26 = (void *)(*(uint64_t (**)(void *))(*v15 + 16))(v15);
        uint64_t v16 = (void *)a6[3];
        if (!v16)
        {
LABEL_5:
          unsigned int v24 = 0;
          goto LABEL_17;
        }
      }
    }
    else
    {
      long long v26 = 0;
      uint64_t v16 = (void *)a6[3];
      if (!v16) {
        goto LABEL_5;
      }
    }
    if (v16 == a6)
    {
      unsigned int v24 = v23;
      (*(void (**)(void *, void *))(*a6 + 24))(a6, v23);
    }
    else
    {
      unsigned int v24 = (void *)(*(uint64_t (**)(void *))(*v16 + 16))(v16);
    }
LABEL_17:
    ((void (*)(uint64_t, uint64_t, swift::Demangle::__runtime::Node *, uint64_t, void *, void *, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, swift::Demangle::__runtime::Node *@<X2>, uint64_t@<X3>, void *@<X4>, void *@<X5>, uint64_t@<X8>)))v14)(a1, a2, a3, a4, v25, v23, swift_getTypeByMangledNodeImpl);
    if (v24 == v23)
    {
      (*(void (**)(void *))(v23[0] + 32))(v23);
    }
    else if (v24)
    {
      (*(void (**)(void))(*v24 + 40))();
    }
    uint64_t result = (uint64_t)v26;
    if (v26 == v25) {
      return (*(uint64_t (**)(void *))(v25[0] + 32))(v25);
    }
    goto LABEL_33;
  }
  if (v15)
  {
    if (v15 != a5)
    {
      uint64_t v22 = (void *)(*(uint64_t (**)(void *))(*v15 + 16))(v15);
      uint64_t v17 = (void *)a6[3];
      if (v17) {
        goto LABEL_9;
      }
LABEL_24:
      uint64_t v20 = 0;
      goto LABEL_28;
    }
    uint64_t v22 = v21;
    (*(void (**)(void *, void *))(*a5 + 24))(a5, v21);
    uint64_t v17 = (void *)a6[3];
    if (!v17) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v17 = (void *)a6[3];
    if (!v17) {
      goto LABEL_24;
    }
  }
LABEL_9:
  if (v17 == a6)
  {
    uint64_t v20 = v19;
    (*(void (**)(void *, void *))(*a6 + 24))(a6, v19);
  }
  else
  {
    uint64_t v20 = (void *)(*(uint64_t (**)(void *))(*v17 + 16))(v17);
  }
LABEL_28:
  swift_getTypeByMangledNodeImpl(a1, a2, a3, a4, v21, v19, a7);
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void))(*v20 + 40))();
  }
  uint64_t result = (uint64_t)v22;
  if (v22 == v21) {
    return (*(uint64_t (**)(void *))(v21[0] + 32))(v21);
  }
LABEL_33:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

uint64_t swift_getTypeByMangledNodeImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, swift::Demangle::__runtime::Node *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  if (*((_WORD *)a3 + 8) == 299)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))a3)(a4);
    *(_WORD *)(a7 + 24) = 0;
    *(void *)a7 = result;
    *(void *)(a7 + 8) = 0;
    *(unsigned char *)(a7 + 16) = 0;
    if (!result)
    {
      *(void *)a7 = "unknown error";
      *(void *)(a7 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a7 + 24) = 1;
    }
    return result;
  }
  uint64_t v13 = (void *)a5[3];
  if (v13)
  {
    if (v13 != a5)
    {
      uint64_t v27 = (void *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
      uint64_t v14 = (void *)a6[3];
      if (!v14) {
        goto LABEL_12;
      }
LABEL_9:
      if (v14 == a6)
      {
        unsigned int v25 = v24;
        (*(void (**)(void *, void *))(*a6 + 24))(a6, v24);
      }
      else
      {
        unsigned int v25 = (void *)(*(uint64_t (**)(void *))(*v14 + 16))(v14);
      }
      goto LABEL_14;
    }
    uint64_t v27 = v26;
    (*(void (**)(void *, void *))(*a5 + 24))(a5, v26);
    uint64_t v14 = (void *)a6[3];
    if (v14) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v14 = (void *)a6[3];
    if (v14) {
      goto LABEL_9;
    }
  }
LABEL_12:
  unsigned int v25 = 0;
LABEL_14:
  uint64_t v28 = a2;
  if (v27)
  {
    if (v27 == v26)
    {
      uint64_t v30 = v29;
      (*(void (**)(void *, void *))(v26[0] + 24))(v26, v29);
    }
    else
    {
      uint64_t v30 = (void *)(*(uint64_t (**)(void))(*v27 + 16))();
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  if (v25)
  {
    if (v25 == v24)
    {
      long long v32 = v31;
      (*(void (**)(void *, void *))(v24[0] + 24))(v24, v31);
    }
    else
    {
      long long v32 = (void *)(*(uint64_t (**)(void))(*v25 + 16))();
    }
    char v33 = 0;
    BOOL v35 = 0;
    uint64_t v36 = 0;
    __p = 0;
    if (v25 == v24)
    {
      (*(void (**)(void *))(v24[0] + 32))(v24);
    }
    else if (v25)
    {
      (*(void (**)(void))(*v25 + 40))();
    }
  }
  else
  {
    long long v32 = 0;
    char v33 = 0;
    BOOL v35 = 0;
    uint64_t v36 = 0;
    __p = 0;
  }
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
  }
  else if (v27)
  {
    (*(void (**)(void))(*v27 + 40))();
  }
  long long v37 = (swift::Demangle::__runtime::Node **)&v28;
  if (!v23)
  {
    if (v21)
    {
      if ((v21 & 1) == 0)
      {
        uint64_t v17 = swift_checkMetadataState(a1, v21);
        char v18 = v33;
        *(_WORD *)(a7 + 24) = 0;
        *(void *)a7 = v17;
        *(void *)(a7 + 8) = v19;
        *(unsigned char *)(a7 + 16) = v18;
        if (!v17)
        {
          *(void *)a7 = "unknown error";
          *(void *)(a7 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *(_WORD *)(a7 + 24) = 1;
        }
        goto LABEL_41;
      }
      *(_WORD *)(a7 + 24) = 1;
      uint64_t v20 = "Cannot demangle a free-standing pack";
      goto LABEL_40;
    }
LABEL_39:
    *(_WORD *)(a7 + 24) = 1;
    uint64_t v20 = "NULL type but no error provided";
LABEL_40:
    *(void *)a7 = v20;
    *(void *)(a7 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    goto LABEL_41;
  }
  if (v23 != 1) {
    goto LABEL_39;
  }
  *(_WORD *)(a7 + 24) = 1;
  uint64_t v15 = v21;
  uint64_t v16 = v22;
  *(void *)(a7 + 8) = v22;
  *(void *)a7 = v16(v15, 2, 0);
LABEL_41:
  if (v23 == 1) {
    v22(v21, 3, 0);
  }
  if (__p)
  {
    BOOL v35 = __p;
    operator delete(__p);
  }
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
  }
  else if (v32)
  {
    (*(void (**)(void))(*v32 + 40))();
  }
  uint64_t result = (uint64_t)v30;
  if (v30 == v29) {
    return (*(uint64_t (**)(void *))(v29[0] + 32))(v29);
  }
  if (v30) {
    return (*(uint64_t (**)(void))(*v30 + 40))();
  }
  return result;
}

void *swift_getTypeByMangledNameImpl@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9 = a4;
  uint64_t v12 = a1;
  long long v48 = xmmword_181636930;
  uint64_t v49 = 0;
  char v50 = 0;
  long long v85 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = 0;
  char v54 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  int v83 = 0;
  __dst = &v86;
  int v47 = v87;
  long long v45 = &unk_1ECA06A78;
  if (!a3) {
    goto LABEL_19;
  }
  unint64_t v14 = 0;
  unint64_t v15 = -1;
  unsigned int v16 = 1;
  do
  {
    unsigned int v17 = a2[v14];
    if (v17 == 46)
    {
      BOOL v18 = v15 == -1;
      unint64_t v15 = v14;
      if (!v18) {
        goto LABEL_19;
      }
    }
    else if (v17 < 0x20)
    {
      goto LABEL_19;
    }
    unint64_t v14 = v16++;
  }
  while (v14 < a3);
  if (v15 == -1)
  {
LABEL_19:
    v87[0] = &unk_1ECA06910;
    v87[1] = &v45;
    long long v88 = v87;
    uint64_t v19 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)&v45, (uint64_t)a2, a3, v87);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
      if (v19) {
        goto LABEL_23;
      }
    }
    else
    {
      if (v88) {
        (*(void (**)(void *))(*v88 + 40))(v88);
      }
      if (v19)
      {
LABEL_23:
        long long v26 = (void *)a5[3];
        if (!v26) {
          goto LABEL_44;
        }
LABEL_24:
        if (v26 == a5)
        {
          long long v44 = v43;
          (*(void (**)(void *, void *))(*a5 + 24))(a5, v43);
          uint64_t v27 = (void *)a6[3];
          if (v27) {
            goto LABEL_45;
          }
        }
        else
        {
          long long v44 = (void *)(*(uint64_t (**)(void *))(*v26 + 16))(v26);
          uint64_t v27 = (void *)a6[3];
          if (v27) {
            goto LABEL_45;
          }
        }
        goto LABEL_30;
      }
    }
    *(unsigned char *)(a7 + 16) = 0;
    *(void *)a7 = "unknown error";
    *(void *)(a7 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a7 + 24) = 1;
    goto LABEL_56;
  }
  uint64_t v19 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(&v45, 24);
  if (a3 >= v15) {
    size_t v20 = v15;
  }
  else {
    size_t v20 = a3;
  }
  if (v20)
  {
    uint64_t v21 = __dst;
    if (!__dst || (uint64_t v22 = (char *)__dst + v20, (char *)__dst + v20 > (char *)v47))
    {
      uint64_t v23 = 2 * *((void *)&v48 + 1);
      if (2 * *((void *)&v48 + 1) <= v20 + 1) {
        uint64_t v23 = v20 + 1;
      }
      *((void *)&v48 + 1) = v23;
      uint64_t v24 = v23 + 8;
      unsigned int v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      *unsigned int v25 = v48;
      uint64_t v21 = v25 + 1;
      int v47 = (void *)((char *)v25 + v24);
      *(void *)&long long v48 = v25;
      uint64_t v22 = (char *)v25 + v20 + 8;
    }
    __dst = v22;
    memmove(v21, a2, v20);
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(&v45, 153, (uint64_t)v21, v20);
  if (a3 >= v15 + 1) {
    unint64_t v29 = v15 + 1;
  }
  else {
    unint64_t v29 = a3;
  }
  size_t v30 = a3 - v29;
  if (v15 + 1 >= a3)
  {
    long long v32 = 0;
  }
  else
  {
    long long v31 = &a2[v29];
    long long v32 = __dst;
    if (!__dst || (char v33 = (char *)__dst + v30, (char *)__dst + v30 > (char *)v47))
    {
      uint64_t v34 = 2 * *((void *)&v48 + 1);
      if (2 * *((void *)&v48 + 1) <= v30 + 1) {
        uint64_t v34 = v30 + 1;
      }
      *((void *)&v48 + 1) = v34;
      uint64_t v35 = v34 + 8;
      uint64_t v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
      *uint64_t v36 = v48;
      long long v32 = v36 + 1;
      int v47 = (void *)((char *)v36 + v35);
      *(void *)&long long v48 = v36;
      char v33 = (char *)v36 + v30 + 8;
    }
    __dst = v33;
    memmove(v32, v31, v30);
  }
  long long v37 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(&v45, 101, (uint64_t)v32, v30);
  swift::Demangle::__runtime::Node::addChild(v19, v28, (swift::Demangle::__runtime::NodeFactory *)&v45);
  swift::Demangle::__runtime::Node::addChild(v19, v37, (swift::Demangle::__runtime::NodeFactory *)&v45);
  uint64_t v12 = a1;
  uint64_t v9 = a4;
  long long v26 = (void *)a5[3];
  if (v26) {
    goto LABEL_24;
  }
LABEL_44:
  long long v44 = 0;
  uint64_t v27 = (void *)a6[3];
  if (v27)
  {
LABEL_45:
    if (v27 == a6)
    {
      long long v42 = v41;
      (*(void (**)(void *, void *))(*a6 + 24))(a6, v41);
    }
    else
    {
      long long v42 = (void *)(*(uint64_t (**)(void *))(*v27 + 16))(v27);
    }
    goto LABEL_48;
  }
LABEL_30:
  long long v42 = 0;
LABEL_48:
  swift_getTypeByMangledNode(v12, (uint64_t)&v45, v19, v9, v43, v41, a7);
  if (v42 == v41)
  {
    (*(void (**)(void *))(v41[0] + 32))(v41);
  }
  else if (v42)
  {
    (*(void (**)(void))(*v42 + 40))();
  }
  if (v44 == v43)
  {
    (*(void (**)(void *))(v43[0] + 32))(v43);
  }
  else if (v44)
  {
    (*(void (**)(void))(*v44 + 40))();
  }
LABEL_56:
  long long v45 = &unk_1ECA07790;
  if (v85 == v84)
  {
    (*(void (**)(void *))(v84[0] + 32))(v84);
  }
  else if (v85)
  {
    (*(void (**)(void))(*v85 + 40))();
  }
  long long v45 = &unk_1ECA07768;
  uint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs((void *)v48);
  if (v49) {
    *(unsigned char *)(v49 + 48) = 0;
  }
  return result;
}

uint64_t swift::Lazy<SharedCacheInfoState>::defaultInitCallback(uint64_t *a1)
{
  uint64_t result = _dyld_get_shared_cache_range();
  uint64_t v3 = result;
  if (!result) {
    uint64_t v3 = 0;
  }
  *a1 = result;
  a1[1] = v3;
  return result;
}

void swift::ConcurrentReadableArray<anonymous namespace'::TypeMetadataSection>::push_back(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  uint64_t v5 = *(unint64_t **)(a1 + 16);
  if (v5) {
    unint64_t v6 = *v5;
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v7 = *(unint64_t **)(a1 + 16);
  if (v6 >= *(void *)a1)
  {
    if (2 * v6 <= 0x10) {
      unint64_t v8 = 16;
    }
    else {
      unint64_t v8 = 2 * v6;
    }
    uint64_t v9 = (unint64_t *)malloc_type_malloc((32 * (v8 >> 1)) | 8, 0x603479EuLL);
    if (!v9) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    uint64_t v7 = v9;
    *uint64_t v9 = 0;
    if (v5)
    {
      if (v6)
      {
        uint64_t v10 = v9 + 1;
        uint64_t v11 = (long long *)(v5 + 1);
        unint64_t v12 = v6;
        do
        {
          long long v13 = *v11++;
          *v10++ = v13;
          --v12;
        }
        while (v12);
      }
      atomic_store(v6, v9);
      unint64_t v14 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
      *unint64_t v14 = *(void *)(a1 + 32);
      v14[1] = v5;
      *(void *)(a1 + 32) = v14;
    }
    *(void *)a1 = v8;
    atomic_store((unint64_t)v7, (unint64_t *)(a1 + 16));
  }
  *(_OWORD *)&v7[2 * v6 + 1] = *a2;
  atomic_store(v6 + 1, v7);
  __dmb(0xBu);
  if (!*(void *)(a1 + 8))
  {
    unint64_t v15 = *(void **)(a1 + 32);
    if (v15)
    {
      do
      {
        unsigned int v17 = (void *)*v15;
        unsigned int v16 = (unint64_t *)v15[1];
        unint64_t v18 = -1;
        do
        {
          unint64_t v19 = atomic_load(v16);
          ++v18;
        }
        while (v18 < v19);
        free(v16);
        free(v15);
        unint64_t v15 = v17;
      }
      while (v17);
    }
    *(void *)(a1 + 32) = 0;
  }

  os_unfair_lock_unlock(v4);
}

void DemanglerForRuntimeTypeResolution<swift::Demangle::__runtime::Demangler>::~DemanglerForRuntimeTypeResolution(uint64_t a1)
{
  *(void *)a1 = &unk_1ECA07790;
  uint64_t v2 = a1 + 544;
  uint64_t v3 = *(void *)(a1 + 568);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  *(void *)a1 = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*(void **)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }

  JUMPOUT(0x1852FF000);
}

void std::__function::__func<swift::ResolveAsSymbolicReference,std::allocator<swift::ResolveAsSymbolicReference>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::~__func()
{
}

void *std::__function::__func<swift::ResolveAsSymbolicReference,std::allocator<swift::ResolveAsSymbolicReference>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06910;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::ResolveAsSymbolicReference,std::allocator<swift::ResolveAsSymbolicReference>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06910;
  a2[1] = v2;
  return result;
}

void std::__function::__func<swift::ResolveAsSymbolicReference,std::allocator<swift::ResolveAsSymbolicReference>,swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,swift::Demangle::__runtime::Directness,int,void const*)>::operator()()
{
}

unsigned __int16 ***swift::Demangle::__runtime::getObjCClassOrProtocolName@<X0>(unsigned __int16 ***result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((unsigned __int16 *)result + 8);
  if (v2 != 24 && v2 != 180) {
    goto LABEL_21;
  }
  int v3 = *((unsigned __int8 *)result + 18);
  uint64_t v4 = result;
  if (v3 != 2)
  {
    if (v3 != 5 || *((_DWORD *)result + 2) != 2) {
      goto LABEL_21;
    }
    uint64_t v4 = (unsigned __int16 ***)*result;
  }
  uint64_t v5 = *v4;
  if (*((_WORD *)v5 + 8) != 153 || v5[1] != (unsigned __int16 *)3) {
    goto LABEL_21;
  }
  unint64_t v6 = *v5;
  int v7 = *v6;
  int v8 = *((unsigned __int8 *)v6 + 2);
  if (v7 != 24415 || v8 != 67) {
    goto LABEL_21;
  }
  if (v3 == 2) {
    goto LABEL_17;
  }
  if (*((_DWORD *)result + 2) >= 2u)
  {
    uint64_t result = (unsigned __int16 ***)*result;
LABEL_17:
    uint64_t v10 = result[1];
    goto LABEL_19;
  }
  uint64_t v10 = 0;
LABEL_19:
  if (*((_WORD *)v10 + 8) == 101)
  {
    *(_OWORD *)a2 = *(_OWORD *)v10;
    *(unsigned char *)(a2 + 16) = 1;
    return result;
  }
LABEL_21:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

StructDescriptor *descriptorFromStandardMangling(int **a1)
{
  int v1 = *((unsigned __int8 *)a1 + 18);
  if (v1 == 2)
  {
    if (*((_WORD *)*a1 + 8) != 153) {
      return 0;
    }
    int v3 = 0;
    int v2 = (int ***)a1;
  }
  else
  {
    if (v1 != 5) {
      return 0;
    }
    if (*((_DWORD *)a1 + 2) < 2u) {
      return 0;
    }
    int v2 = (int ***)*a1;
    if (*(_WORD *)(*(void *)*a1 + 16) != 153) {
      return 0;
    }
    int v3 = 1;
  }
  uint64_t v4 = *v2;
  if (v4[1] == (int *)5)
  {
    uint64_t v5 = *v4;
    int v6 = *v5;
    int v7 = *((unsigned __int8 *)v5 + 4);
    if (v6 == 1718187859 && v7 == 116)
    {
      if (v3) {
        a1 = (int **)*a1;
      }
      if (*((_WORD *)a1[1] + 8) == 101)
      {
        uint64_t v9 = (int **)a1[1];
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        switch((unint64_t)v11)
        {
          case 3uLL:
            if (*(_WORD *)v10 == 25939 && *((unsigned char *)v10 + 2) == 116) {
              return &nominal type descriptor for Set;
            }
            if (*(_WORD *)v10 == 28233 && *((unsigned char *)v10 + 2) == 116) {
              return &nominal type descriptor for Int;
            }
            goto LABEL_289;
          case 4uLL:
            if (*v10 == 1819242306) {
              return &nominal type descriptor for Bool;
            }
            if (*v10 != 1953384789) {
              goto LABEL_289;
            }
            return &nominal type descriptor for UInt;
          case 5uLL:
            if (*v10 == 1634890305 && *((unsigned char *)v10 + 4) == 121) {
              return &nominal type descriptor for Array;
            }
            if (*v10 == 1634692166 && *((unsigned char *)v10 + 4) == 116) {
              return &nominal type descriptor for Float;
            }
            if (*v10 == 1735287122 && *((unsigned char *)v10 + 4) == 101) {
              return &nominal type descriptor for Range;
            }
            goto LABEL_289;
          case 6uLL:
            if (*v10 == 1651863364 && *((_WORD *)v10 + 2) == 25964) {
              return &nominal type descriptor for Double;
            }
            if (*v10 == 1769108563 && *((_WORD *)v10 + 2) == 26478) {
              return &nominal type descriptor for String;
            }
            goto LABEL_289;
          case 7uLL:
            if (*v10 != 1701672270 || *(int *)((char *)v10 + 3) != 1667854949) {
              goto LABEL_289;
            }
            return (StructDescriptor *)&protocol descriptor for Numeric;
          case 8uLL:
            if (*(void *)v10 == 0x6C616E6F6974704FLL) {
              return (StructDescriptor *)&nominal type descriptor for Optional;
            }
            if (*(void *)v10 == 0x656C626168736148) {
              return (StructDescriptor *)&protocol descriptor for Hashable;
            }
            if (*(void *)v10 != 0x65636E6575716553) {
              goto LABEL_289;
            }
            return (StructDescriptor *)&protocol descriptor for Sequence;
          case 9uLL:
            if (*(void *)v10 == 0x6574636172616843 && *((unsigned char *)v10 + 8) == 114) {
              return &nominal type descriptor for Character;
            }
            if (*(void *)v10 == 0x6E69727473627553 && *((unsigned char *)v10 + 8) == 103) {
              return &nominal type descriptor for Substring;
            }
            if (*(void *)v10 == 0x6C6261646F636E45 && *((unsigned char *)v10 + 8) == 101) {
              return (StructDescriptor *)&protocol descriptor for Encodable;
            }
            if (*(void *)v10 == 0x6C6261646F636544 && *((unsigned char *)v10 + 8) == 101) {
              return (StructDescriptor *)&protocol descriptor for Decodable;
            }
            if (*(void *)v10 == 0x6C62617461757145 && *((unsigned char *)v10 + 8) == 101) {
              return (StructDescriptor *)&protocol descriptor for Equatable;
            }
            goto LABEL_289;
          case 0xAuLL:
            if (*(void *)v10 == 0x616E6F6974636944 && *((_WORD *)v10 + 4) == 31090) {
              return &nominal type descriptor for Dictionary;
            }
            if (*(void *)v10 == 0x62617261706D6F43 && *((_WORD *)v10 + 4) == 25964) {
              return (StructDescriptor *)&protocol descriptor for Comparable;
            }
            if (*(void *)v10 == 0x697463656C6C6F43 && *((_WORD *)v10 + 4) == 28271) {
              return (StructDescriptor *)&protocol descriptor for Collection;
            }
            if (*(void *)v10 == 0x6261656469727453 && *((_WORD *)v10 + 4) == 25964) {
              return (StructDescriptor *)&protocol descriptor for Strideable;
            }
            goto LABEL_289;
          case 0xBuLL:
            if (*(void *)v10 != 0x61526465736F6C43 || *(void *)((char *)v10 + 3) != 0x65676E6152646573) {
              goto LABEL_289;
            }
            return &nominal type descriptor for ClosedRange;
          case 0xDuLL:
            if (*(void *)v10 == 0x6F50656661736E55 && *(void *)((char *)v10 + 5) == 0x7265746E696F5065) {
              return &nominal type descriptor for UnsafePointer;
            }
            if (*(void *)v10 == 0x676E6974616F6C46 && *(void *)((char *)v10 + 5) == 0x746E696F50676E69) {
              return (StructDescriptor *)&protocol descriptor for FloatingPoint;
            }
            if (*(void *)v10 == 0x6E4964656E676953 && *(void *)((char *)v10 + 5) == 0x72656765746E4964) {
              return (StructDescriptor *)&protocol descriptor for SignedInteger;
            }
            if (*(void *)v10 == 0x6E497972616E6942 && *(void *)((char *)v10 + 5) == 0x72656765746E4979) {
              return (StructDescriptor *)&protocol descriptor for BinaryInteger;
            }
            goto LABEL_289;
          case 0xEuLL:
            if (*(void *)v10 == 0x49746C7561666544 && *(void *)((char *)v10 + 6) == 0x73656369646E4974) {
              return &nominal type descriptor for DefaultIndices;
            }
            if (*(void *)v10 == 0x7250676E69727453 && *(void *)((char *)v10 + 6) == 0x6C6F636F746F7250) {
              return (StructDescriptor *)&protocol descriptor for StringProtocol;
            }
            goto LABEL_289;
          case 0xFuLL:
            if (*(void *)v10 == 0x64656E6769736E55 && *(void *)((char *)v10 + 7) == 0x72656765746E4964) {
              return (StructDescriptor *)&protocol descriptor for UnsignedInteger;
            }
            if (*(void *)v10 == 0x70784565676E6152 && *(void *)((char *)v10 + 7) == 0x6E6F697373657270) {
              return (StructDescriptor *)&protocol descriptor for RangeExpression;
            }
            goto LABEL_289;
          case 0x10uLL:
            if (*(void *)v10 == 0x64497463656A624FLL && *((void *)v10 + 1) == 0x7265696669746E65) {
              return &nominal type descriptor for ObjectIdentifier;
            }
            if (*(void *)v10 == 0x6152656661736E55 && *((void *)v10 + 1) == 0x7265746E696F5077) {
              return &nominal type descriptor for UnsafeRawPointer;
            }
            if (*(void *)v10 == 0x726F746172657449 && *((void *)v10 + 1) == 0x6C6F636F746F7250) {
              return (StructDescriptor *)&protocol descriptor for IteratorProtocol;
            }
            if (*(void *)v10 == 0x6572706552776152 && *((void *)v10 + 1) == 0x656C6261746E6573) {
              return (StructDescriptor *)&protocol descriptor for RawRepresentable;
            }
            goto LABEL_289;
          case 0x11uLL:
            if (*(void *)v10 != 0x43656C626174754DLL
              || *((void *)v10 + 1) != 0x6F697463656C6C6FLL
              || *((unsigned char *)v10 + 16) != 110)
            {
              goto LABEL_289;
            }
            return (StructDescriptor *)&protocol descriptor for MutableCollection;
          case 0x13uLL:
            if (*(void *)v10 == 0x7542656661736E55
              && *((void *)v10 + 1) == 0x6E696F5072656666
              && *(void *)((char *)v10 + 11) == 0x7265746E696F5072)
            {
              return &nominal type descriptor for UnsafeBufferPointer;
            }
            if (*(void *)v10 == 0x6C467972616E6942
              && *((void *)v10 + 1) == 0x6F50676E6974616FLL
              && *(void *)((char *)v10 + 11) == 0x746E696F50676E69)
            {
              return (StructDescriptor *)&protocol descriptor for BinaryFloatingPoint;
            }
            goto LABEL_289;
          case 0x14uLL:
            if (*(void *)v10 != 0x754D656661736E55
              || *((void *)v10 + 1) != 0x696F50656C626174
              || v10[4] != 1919251566)
            {
              goto LABEL_289;
            }
            return &nominal type descriptor for UnsafeMutablePointer;
          case 0x15uLL:
            if (*(void *)v10 != 0x754E6D6F646E6152
              || *((void *)v10 + 1) != 0x656E65477265626DLL
              || *(void *)((char *)v10 + 13) != 0x726F746172656E65)
            {
              goto LABEL_289;
            }
            return (StructDescriptor *)&protocol descriptor for RandomNumberGenerator;
          case 0x16uLL:
            if (*(void *)v10 == 0x6152656661736E55
              && *((void *)v10 + 1) == 0x5072656666754277
              && *(void *)((char *)v10 + 14) == 0x7265746E696F5072)
            {
              return &nominal type descriptor for UnsafeRawBufferPointer;
            }
            if (*(void *)v10 == 0x63416D6F646E6152
              && *((void *)v10 + 1) == 0x6C6C6F4373736563
              && *(void *)((char *)v10 + 14) == 0x6E6F697463656C6CLL)
            {
              return (StructDescriptor *)&protocol descriptor for RandomAccessCollection;
            }
            goto LABEL_289;
          case 0x17uLL:
            if (*(void *)v10 == 0x754D656661736E55
              && *((void *)v10 + 1) == 0x776152656C626174
              && *(void *)((char *)v10 + 15) == 0x7265746E696F5077)
            {
              return &nominal type descriptor for UnsafeMutableRawPointer;
            }
            if (*(void *)v10 == 0x7463657269646942
              && *((void *)v10 + 1) == 0x6C6F436C616E6F69
              && *(void *)((char *)v10 + 15) == 0x6E6F697463656C6CLL)
            {
              return (StructDescriptor *)&protocol descriptor for BidirectionalCollection;
            }
            goto LABEL_289;
          case 0x1AuLL:
            if (*(void *)v10 == 0x754D656661736E55
              && *((void *)v10 + 1) == 0x667542656C626174
              && *((void *)v10 + 2) == 0x746E696F50726566
              && *((_WORD *)v10 + 12) == 29285)
            {
              return &nominal type descriptor for UnsafeMutableBufferPointer;
            }
            if (*(void *)v10 != 0x70655265676E6152
              || *((void *)v10 + 1) != 0x656C62616563616CLL
              || *((void *)v10 + 2) != 0x697463656C6C6F43
              || *((_WORD *)v10 + 12) != 28271)
            {
LABEL_289:
              if (concurrencyDescriptors)
              {
                uint64_t result = 0;
                switch((unint64_t)v11)
                {
                  case 4uLL:
                    if (*v10 != 1802723668) {
                      return 0;
                    }
                    uint64_t v14 = *(void *)(concurrencyDescriptors + 136);
                    if (!v14) {
                      return 0;
                    }
                    return (StructDescriptor *)v14;
                  case 5uLL:
                    int v75 = *v10;
                    int v76 = *((unsigned __int8 *)v10 + 4);
                    if (v75 != 1869898561 || v76 != 114) {
                      return 0;
                    }
                    uint64_t v14 = *(void *)concurrencyDescriptors;
                    if (!*(void *)concurrencyDescriptors) {
                      return 0;
                    }
                    return (StructDescriptor *)v14;
                  case 8uLL:
                    if (*(void *)v10 != 0x726F747563657845) {
                      return 0;
                    }
                    uint64_t v14 = *(void *)(concurrencyDescriptors + 40);
                    if (!v14) {
                      return 0;
                    }
                    return (StructDescriptor *)v14;
                  case 9uLL:
                    if (*(void *)v10 == 0x756F72476B736154 && *((unsigned char *)v10 + 8) == 112)
                    {
                      uint64_t v14 = *(void *)(concurrencyDescriptors + 56);
                      if (v14) {
                        return (StructDescriptor *)v14;
                      }
                    }
                    else
                    {
                      uint64_t v79 = *(void *)v10;
                      int v80 = *((unsigned __int8 *)v10 + 8);
                      if (v79 == 0x6F7463416E69614DLL && v80 == 114)
                      {
                        uint64_t v14 = *(void *)(concurrencyDescriptors + 104);
                        if (v14) {
                          return (StructDescriptor *)v14;
                        }
                      }
                    }
                    return 0;
                  case 0xAuLL:
                    uint64_t v82 = *(void *)v10;
                    int v83 = *((unsigned __int16 *)v10 + 4);
                    if (v82 != 0x4A64656E776F6E55 || v83 != 25199) {
                      return 0;
                    }
                    uint64_t v14 = *(void *)(concurrencyDescriptors + 96);
                    if (!v14) {
                      return 0;
                    }
                    return (StructDescriptor *)v14;
                  case 0xBuLL:
                    uint64_t v85 = *(void *)v10;
                    uint64_t v86 = *(void *)((char *)v10 + 3);
                    if (v85 != 0x727453636E797341 || v86 != 0x6D6165727453636ELL) {
                      return 0;
                    }
                    uint64_t v14 = *(void *)(concurrencyDescriptors + 120);
                    if (!v14) {
                      return 0;
                    }
                    return (StructDescriptor *)v14;
                  case 0xCuLL:
                    if (*(void *)v10 == 0x636578456B736154 && v10[2] == 1919906933)
                    {
                      uint64_t v14 = *(void *)(concurrencyDescriptors + 72);
                      if (v14) {
                        return (StructDescriptor *)v14;
                      }
                    }
                    else
                    {
                      uint64_t v89 = *(void *)v10;
                      int v90 = v10[2];
                      if (v89 == 0x6F6972506B736154 && v90 == 2037672306)
                      {
                        uint64_t v14 = *(void *)(concurrencyDescriptors + 112);
                        if (v14) {
                          return (StructDescriptor *)v14;
                        }
                      }
                    }
                    return 0;
                  case 0xDuLL:
                    uint64_t v92 = *(void *)v10;
                    uint64_t v93 = *(void *)((char *)v10 + 5);
                    if (v92 != 0x716553636E797341 || v93 != 0x65636E6575716553) {
                      return 0;
                    }
                    uint64_t v14 = *(void *)(concurrencyDescriptors + 88);
                    if (!v14) {
                      return 0;
                    }
                    return (StructDescriptor *)v14;
                  case 0xEuLL:
                    uint64_t v95 = *(void *)v10;
                    uint64_t v96 = *(void *)((char *)v10 + 6);
                    if (v95 != 0x78456C6169726553 || v96 != 0x726F747563657845) {
                      return 0;
                    }
                    uint64_t v14 = *(void *)(concurrencyDescriptors + 48);
                    if (!v14) {
                      return 0;
                    }
                    return (StructDescriptor *)v14;
                  case 0x11uLL:
                    if (*(void *)v10 == 0x616C6C65636E6143
                      && *((void *)v10 + 1) == 0x6F7272456E6F6974
                      && *((unsigned char *)v10 + 16) == 114)
                    {
                      uint64_t v14 = *(void *)(concurrencyDescriptors + 24);
                      if (v14) {
                        return (StructDescriptor *)v14;
                      }
                    }
                    else if (*(void *)v10 == 0x676E69776F726854 {
                           && *((void *)v10 + 1) == 0x756F72476B736154
                    }
                           && *((unsigned char *)v10 + 16) == 112)
                    {
                      uint64_t v14 = *(void *)(concurrencyDescriptors + 64);
                      if (v14) {
                        return (StructDescriptor *)v14;
                      }
                    }
                    else
                    {
                      uint64_t v102 = *(void *)v10;
                      uint64_t v103 = *((void *)v10 + 1);
                      int v104 = *((unsigned __int8 *)v10 + 16);
                      if (v102 == 0x7543656661736E55 && v103 == 0x736154746E657272 && v104 == 107)
                      {
                        uint64_t v14 = *(void *)(concurrencyDescriptors + 144);
                        if (v14) {
                          return (StructDescriptor *)v14;
                        }
                      }
                    }
                    return 0;
                  case 0x12uLL:
                    uint64_t v107 = *(void *)v10;
                    uint64_t v108 = *((void *)v10 + 1);
                    int v109 = *((unsigned __int16 *)v10 + 8);
                    if (v107 != 0x6F43656661736E55 || v108 != 0x697461756E69746ELL || v109 != 28271) {
                      return 0;
                    }
                    uint64_t v14 = *(void *)(concurrencyDescriptors + 16);
                    if (!v14) {
                      return 0;
                    }
                    return (StructDescriptor *)v14;
                  case 0x13uLL:
                    if (*(void *)v10 == 0x4364656B63656843
                      && *((void *)v10 + 1) == 0x7461756E69746E6FLL
                      && *(void *)((char *)v10 + 11) == 0x6E6F697461756E69)
                    {
                      uint64_t v14 = *(void *)(concurrencyDescriptors + 8);
                      if (!v14) {
                        return 0;
                      }
                      return (StructDescriptor *)v14;
                    }
                    uint64_t v114 = *(void *)v10;
                    uint64_t v115 = *((void *)v10 + 1);
                    uint64_t v116 = *(void *)((char *)v10 + 11);
                    if (v114 == 0x726854636E797341 && v115 == 0x727453676E69776FLL && v116 == 0x6D6165727453676ELL)
                    {
                      uint64_t v14 = *(void *)(concurrencyDescriptors + 128);
                      if (v14) {
                        return (StructDescriptor *)v14;
                      }
                    }
                    return 0;
                  case 0x15uLL:
                    if (*(void *)v10 == 0x5364656E776F6E55
                      && *((void *)v10 + 1) == 0x6578456C61697265
                      && *(void *)((char *)v10 + 13) == 0x726F747563657845)
                    {
                      uint64_t v14 = *(void *)(concurrencyDescriptors + 32);
                      if (v14) {
                        return (StructDescriptor *)v14;
                      }
                    }
                    else
                    {
                      uint64_t v121 = *(void *)v10;
                      uint64_t v122 = *((void *)v10 + 1);
                      uint64_t v123 = *(void *)((char *)v10 + 13);
                      if (v121 == 0x657449636E797341 && v122 == 0x6F7250726F746172 && v123 == 0x6C6F636F746F7250)
                      {
                        uint64_t v14 = *(void *)(concurrencyDescriptors + 80);
                        if (v14) {
                          return (StructDescriptor *)v14;
                        }
                      }
                    }
                    break;
                  default:
                    return result;
                }
              }
              return 0;
            }
            return (StructDescriptor *)&protocol descriptor for RangeReplaceableCollection;
          case 0x1DuLL:
            if (*(void *)v10 != 0x754D656661736E55
              || *((void *)v10 + 1) != 0x776152656C626174
              || *((void *)v10 + 2) != 0x6F50726566667542
              || *(void *)((char *)v10 + 21) != 0x7265746E696F5072)
            {
              goto LABEL_289;
            }
            return &nominal type descriptor for UnsafeMutableRawBufferPointer;
          case 0x21uLL:
            if (*(void *)v10 != 0x656C65726F747541
              || *((void *)v10 + 1) != 0x736E55676E697361
              || *((void *)v10 + 2) != 0x626174754D656661
              || *((void *)v10 + 3) != 0x65746E696F50656CLL
              || *((unsigned char *)v10 + 32) != 114)
            {
              goto LABEL_289;
            }
            return &nominal type descriptor for AutoreleasingUnsafeMutablePointer;
          default:
            goto LABEL_289;
        }
      }
    }
  }
  return 0;
}

uint64_t swift::ConcurrentReadableHashMap<anonymous namespace'::NominalTypeDescriptorCacheEntry,swift::LazyMutex>::find<__swift::__runtime::llvm::StringRef>(const void **a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = __swift::__runtime::llvm::hash_value(*a1, (uint64_t)a1[1]);
  uint64_t v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  uint64_t v11 = ~(-1 << v10);
  if ((a2 & 3) != 0) {
    unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else {
    unint64_t v12 = 0;
  }
  while (2)
  {
    if ((v8 & v11) <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v8 & v11;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v14) = v12 + v13;
        LOBYTE(v14) = atomic_load_explicit((atomic_uchar *volatile)(v12 + v13), memory_order_acquire);
        if (v14) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v14) = v12 + 2 * v13;
        LOWORD(v14) = atomic_load_explicit((atomic_ushort *volatile)(v12 + 2 * v13), memory_order_acquire);
        if (!v14) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v14) = atomic_load_explicit((atomic_uint *volatile)(v12 + 4 * v13), memory_order_acquire);
        if (v14) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v14 = (a2 >> (4 * v13)) & 0xF;
        if (v14)
        {
LABEL_19:
          unint64_t v15 = (v14 - 1);
          if (v15 < a3)
          {
            uint64_t v16 = a4 + 24 * v15;
            size_t v17 = (size_t)a1[1];
            if (v17 == *(void *)(v16 + 8) && (!v17 || !memcmp(*a1, *(const void **)v16, v17))) {
              return v16;
            }
          }
          unint64_t v8 = v13 + 1;
          continue;
        }
        return 0;
    }
  }
}

void swift::runtime::trace::metadata_scan_begin(swift::runtime::trace *this@<X0>, uint64_t a2@<X8>)
{
  if (!_os_trace_lazy_init_completed_4swift()) {
    goto LABEL_16;
  }
  if (swift::runtime::trace::LogsToken != -1) {
    dispatch_once_f(&swift::runtime::trace::LogsToken, 0, (dispatch_function_t)swift::runtime::trace::setupLogs);
  }
  if (swift::runtime::trace::TracingEnabled)
  {
    os_signpost_id_t v5 = os_signpost_id_generate((os_log_t)swift::runtime::trace::ScanLog);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v6 = swift::runtime::trace::ScanLog;
      if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
      {
        if (this)
        {
          char v9 = 0;
          uint64_t v10 = 0x101010101010101;
          char v11 = 1;
          uint64_t v12 = 0x101010100000000;
          char v13 = 1;
          __int16 v14 = 256;
          char v15 = 1;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          v18[0] = &unk_1ECA041D0;
          v18[1] = swift::Demangle::__runtime::genericParameterName;
          unint64_t v19 = v18;
          swift::Demangle::__runtime::nodeToString((uint64_t *)__p, (uint64_t *)this, (swift::Demangle::__runtime::Node *)&v9, v7);
          if (v21 >= 0) {
            unint64_t v8 = __p;
          }
          else {
            unint64_t v8 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315138;
          uint64_t v23 = (const char *)v8;
          _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "section_scan", "metadata scan for %s", buf, 0xCu);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
          if (v19 == v18)
          {
            (*(void (**)(void *))(v18[0] + 32))(v18);
          }
          else if (v19)
          {
            (*(void (**)(void))(*v19 + 40))();
          }
        }
        else
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v23 = "<null>";
          _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "section_scan", "metadata scan for %s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
LABEL_16:
    os_signpost_id_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = 0;
}

char *_searchTypeMetadataRecordsInSections<swift::ConcurrentReadableArray<anonymous namespace'::TypeMetadataSection>>(uint64_t a1, const char *a2)
{
  int v2 = (atomic_ullong *)(a1 + 8);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 1uLL, memory_order_acquire);
  int v3 = *(atomic_ullong **)(a1 + 16);
  if (v3)
  {
    unint64_t explicit = atomic_load_explicit(v3, memory_order_acquire);
    if (explicit)
    {
      int v6 = (int **)(v3 + 1);
      uint64_t v7 = (uint64_t)&v3[2 * explicit + 1];
      while (1)
      {
        unint64_t v8 = *v6;
        char v9 = v6[1];
        if (*v6 != v9) {
          break;
        }
LABEL_4:
        v6 += 2;
        if (v6 == (int **)v7) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = *v6;
      while (1)
      {
        uint64_t v11 = *v10;
        if ((*v10 & 3) == 1)
        {
          if (!*(void *)((char *)v8 + (v11 & 0xFFFFFFFFFFFFFFFCLL))) {
            goto LABEL_7;
          }
          char v15 = *(char **)((char *)v8 + (v11 & 0xFFFFFFFFFFFFFFFCLL));
        }
        else
        {
          unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v13 = (uint64_t)v8 + v12;
          if ((*v10 & 3) != 0 || v13 == 0) {
            goto LABEL_7;
          }
          char v15 = (char *)v8 + v12;
          if (!v13) {
            goto LABEL_7;
          }
        }
        if (swift::_contextDescriptorMatchesMangling(v15, a2)) {
          goto LABEL_20;
        }
LABEL_7:
        ++v10;
        ++v8;
        if (v10 == v9) {
          goto LABEL_4;
        }
      }
    }
  }
LABEL_19:
  char v15 = 0;
LABEL_20:
  atomic_fetch_add_explicit(v2, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
  return v15;
}

void std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06958;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06958;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  if (*(_DWORD *)(v3 + 32) <= v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  if (*(_DWORD *)(v6 + 16) <= v5) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(unsigned char *)(v6 + 28))
  {
    unint64_t v8 = *(uint8x16_t **)v6;
    char v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0;
    }
    if (v5)
    {
      if (v5 < 8)
      {
        uint64_t v11 = v8;
        goto LABEL_22;
      }
      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        char v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          uint64_t v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            uint64_t v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }
          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      uint64_t v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      long long v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8;
      }
      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8 * v7);
      }
      goto LABEL_22;
    }
  }
  else
  {
    v7 += v5;
  }
  return *(void *)(*(void *)(v3 + 16) + 8 * v7);
}

void std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA069A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA069A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextImpl(char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8 * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA069E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA069E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  if (*(_DWORD *)(v3 + 32) <= v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  if (*(_DWORD *)(v6 + 16) <= v5) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(unsigned char *)(v6 + 28))
  {
    unint64_t v8 = *(uint8x16_t **)v6;
    char v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0;
    }
    if (v5)
    {
      if (v5 < 8)
      {
        uint64_t v11 = v8;
        goto LABEL_22;
      }
      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        char v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          uint64_t v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            uint64_t v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }
          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      uint64_t v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      long long v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8;
      }
      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8 * v7);
      }
      goto LABEL_22;
    }
  }
  else
  {
    v7 += v5;
  }
  return *(void *)(*(void *)(v3 + 16) + 8 * v7);
}

void std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06A30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06A30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1,std::allocator<swift_getTypeByMangledNameInContextInMetadataStateImpl(unsigned long,char const*,unsigned long,swift::TargetContextDescriptor<swift::InProcess> const*,void const* const*)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8 * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void DemanglerForRuntimeTypeResolution<swift::Demangle::__runtime::StackAllocatedDemangler<2048ul>>::~DemanglerForRuntimeTypeResolution(uint64_t a1)
{
  *(void *)a1 = &unk_1ECA07790;
  uint64_t v2 = a1 + 544;
  uint64_t v3 = *(void *)(a1 + 568);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  *(void *)a1 = &unk_1ECA07768;
  swift::Demangle::__runtime::NodeFactory::freeSlabs(*(void **)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }

  JUMPOUT(0x1852FF000);
}

void swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledType(swift::Demangle::__runtime::Node ***a1@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a3 > 0x400)
  {
LABEL_2:
    *((_WORD *)a4 + 8) = 1;
    uint64_t v6 = "Mangled type is too complex";
LABEL_3:
    *a4 = v6;
    a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    return;
  }
  uint64_t v7 = a3;
  unint64_t v8 = (uint64_t ***)a2;
  char v9 = a1;
  while (2)
  {
    if (!v8)
    {
      *((_WORD *)a4 + 8) = 1;
      uint64_t v6 = "Node is NULL";
      goto LABEL_3;
    }
    int v10 = *((unsigned __int16 *)v8 + 8);
    switch(*((_WORD *)v8 + 8))
    {
      case 3:
        int v11 = *((unsigned __int8 *)v8 + 18);
        if ((v11 - 1) < 2) {
          goto LABEL_50;
        }
        if (v11 != 5 || !*((_DWORD *)v8 + 2)) {
          operator new();
        }
        goto LABEL_49;
      case 0xB:
      case 0x16:
      case 0x40:
      case 0x41:
      case 0x52:
      case 0xA5:
      case 0xA6:
      case 0xDE:
        int v19 = *((unsigned __int8 *)v8 + 18);
        switch(*((unsigned char *)v8 + 18))
        {
          case 2:
            goto LABEL_79;
          case 5:
            if (*((_DWORD *)v8 + 2) <= 1u) {
              goto LABEL_78;
            }
LABEL_79:
            if ((v10 - 165) < 2)
            {
              uint64_t v31 = 0x10000;
            }
            else if (v10 == 22)
            {
              uint64_t v31 = 196608;
            }
            else if (v10 == 222)
            {
              uint64_t v31 = 0x20000;
            }
            else
            {
              uint64_t v31 = 0;
            }
            if (v19 == 5)
            {
              long long v91 = (uint64_t ***)*v8;
              if (*((_DWORD *)v8 + 2)) {
                uint64_t v92 = (uint64_t)(*v91 + 2);
              }
              else {
                uint64_t v92 = 16;
              }
              BOOL v93 = *(unsigned __int16 *)v92 == 23;
              if (*((_WORD *)v91[v93] + 8) == 67)
              {
LABEL_289:
                long long v94 = v8;
                if (v19 == 2 || v19 == 5 && (long long v94 = v91, *((_DWORD *)v8 + 2) > v93)) {
                  uint64_t v95 = v94[v93];
                }
                else {
                  uint64_t v95 = 0;
                }
                int v101 = *((unsigned __int8 *)v95 + 18);
                if ((v101 - 1) >= 2)
                {
                  if (v101 != 5 || !*((_DWORD *)v95 + 2)) {
                    operator new();
                  }
                  uint64_t v95 = (uint64_t **)*v95;
                }
                v339 = a1;
                int v102 = *((unsigned __int16 *)a4 + 8);
                if (a4 && v102 == 1) {
                  return;
                }
                if (*((_WORD *)a4 + 8))
                {
                  if (v93) {
                    unsigned int v98 = 2;
                  }
                  else {
                    unsigned int v98 = 1;
                  }
                  if (v102 == 1) {
                    ((void (*)(void, uint64_t, void))a4[1])(*a4, 3, 0);
                  }
                  uint64_t v96 = 0;
                  unsigned int v97 = 0;
                }
                else
                {
                  unsigned int v97 = 0;
                  uint64_t v96 = *a4;
                  if (v93) {
                    unsigned int v98 = 2;
                  }
                  else {
                    unsigned int v98 = 1;
                  }
                }
LABEL_296:
                unint64_t v99 = *((unsigned __int8 *)v8 + 18);
                if (v99 == 1)
                {
                  unint64_t v100 = *((unsigned __int16 *)v8[v98] + 8) == 130;
                }
                else
                {
                  if (v99 != 2)
                  {
                    char v103 = 0;
                    int v104 = *v8;
                    if (*((_WORD *)(*v8)[v98] + 8) == 130)
                    {
                      v97 |= 0x10u;
                      unint64_t v100 = v98 + 1;
                    }
                    else
                    {
                      unint64_t v100 = v98;
                    }
LABEL_320:
                    if (*(_WORD *)(v104[v100] + 16) == 68)
                    {
                      long long v105 = (unsigned __int8 **)v8;
                      if ((v103 & 1) == 0) {
                        long long v105 = (unsigned __int8 **)*v8;
                      }
                      HIDWORD(v107) = *v105[v100];
                      LODWORD(v107) = (HIDWORD(v107) << 24) - 1677721600;
                      unsigned __int8 v106 = v107 >> 25;
                      if (v106 > 7u) {
                        uint64_t v108 = 0;
                      }
                      else {
                        uint64_t v108 = qword_181636B48[(char)v106];
                      }
                      unint64_t v100 = (v100 + 1);
                    }
                    else
                    {
                      uint64_t v108 = 0;
                    }
                    long long v111 = v8;
                    if ((v103 & 1) == 0) {
                      long long v111 = *v8;
                    }
                    if (*(_WORD *)(v111[v100] + 16) == 272)
                    {
                      uint64_t v112 = 0;
                      LODWORD(v100) = v100 + 1;
                      uint64_t v113 = 0x1000000;
                      goto LABEL_746;
                    }
                    uint64_t v114 = v8;
                    if ((v103 & 1) == 0) {
                      uint64_t v114 = *v8;
                    }
                    if (*(_WORD *)(v114[v100] + 16) != 273)
                    {
                      uint64_t v112 = 0;
                      uint64_t v113 = 0;
                      goto LABEL_746;
                    }
                    if (v99 != 1)
                    {
                      if (v99 == 5)
                      {
                        unint64_t v99 = *((unsigned int *)v8 + 2);
                      }
                      else
                      {
                        if (v99 != 2) {
                          goto LABEL_613;
                        }
                        unint64_t v99 = 2;
                      }
                    }
                    if (v99 > v100)
                    {
                      long long v188 = v8;
                      if ((v103 & 1) == 0) {
                        long long v188 = *v8;
                      }
                      long long v189 = (uint64_t *)v188[v100];
                      goto LABEL_614;
                    }
LABEL_613:
                    long long v189 = 0;
LABEL_614:
                    int v190 = *((unsigned __int8 *)v189 + 18);
                    if ((v190 - 1) >= 2)
                    {
                      if (v190 != 5 || !*((_DWORD *)v189 + 2)) {
                        operator new();
                      }
                      uint64_t v191 = v108;
                      uint64_t v192 = v96;
                      long long v189 = (uint64_t *)*v189;
                    }
                    else
                    {
                      uint64_t v191 = v108;
                      uint64_t v192 = v96;
                    }
                    int v193 = *((unsigned __int16 *)a4 + 8);
                    if (a4 && v193 == 1) {
                      return;
                    }
                    if (*((_WORD *)a4 + 8))
                    {
                      LODWORD(v100) = v100 + 1;
                      v97 |= 1u;
                      if (v193 == 1) {
                        ((void (*)(void, uint64_t, void))a4[1])(*a4, 3, 0);
                      }
                      uint64_t v112 = 0;
                    }
                    else
                    {
                      uint64_t v112 = *a4;
                      LODWORD(v100) = v100 + 1;
                      v97 |= 1u;
                    }
                    uint64_t v113 = 0x1000000;
                    uint64_t v96 = v192;
                    uint64_t v108 = v191;
LABEL_746:
                    uint64_t v242 = v100;
                    unint64_t v243 = *((unsigned __int8 *)v8 + 18);
                    if (v243 == 1) {
                      goto LABEL_779;
                    }
                    uint64_t v353 = v31;
                    if (v243 == 2)
                    {
                      int v244 = *((unsigned __int16 *)v8[v242] + 8);
                      BOOL v245 = v244 == 66;
                      int v246 = v244 == 66 ? v242 + 1 : v242;
                      BOOL v247 = v245;
                      unsigned int v248 = *((_WORD *)v8[v246] + 8) == 271 ? v246 + 1 : v246;
                      unint64_t v249 = (unint64_t)v247 << 30;
                      unint64_t v250 = (unint64_t)(*((_WORD *)v8[v246] + 8) == 271) << 29;
                      unint64_t v251 = (unint64_t)(v108 != 0) << 27;
                      char v252 = 1;
                      unint64_t v253 = 2;
                    }
                    else
                    {
                      char v252 = 0;
                      unint64_t v253 = *((unsigned int *)v8 + 2);
                      BOOL v254 = *((unsigned __int16 *)(*v8)[v242] + 8) == 66;
                      if (*((_WORD *)(*v8)[v242] + 8) == 66) {
                        LODWORD(v242) = v242 + 1;
                      }
                      unsigned int v248 = *((_WORD *)(*v8)[v242] + 8) == 271 ? v242 + 1 : v242;
                      unint64_t v249 = (unint64_t)v254 << 30;
                      unint64_t v250 = (unint64_t)(*((_WORD *)(*v8)[v242] + 8) == 271) << 29;
                      unint64_t v251 = (unint64_t)(v108 != 0) << 27;
                    }
                    if (v253 < v248 + 2) {
LABEL_779:
                    }
                      operator new();
                    LOBYTE(v363) = 0;
                    *(void *)&long long v370 = &v371;
                    *((void *)&v370 + 1) = 0x800000000;
                    uint64_t v255 = (uint64_t)a4;
                    uint64_t v335 = v96;
                    uint64_t v338 = v112;
                    uint64_t v332 = v108;
                    unint64_t v343 = v251;
                    if (v243 != 2)
                    {
                      if (v243 != 5) {
                        goto LABEL_773;
                      }
                      unint64_t v243 = *((unsigned int *)v8 + 2);
                    }
                    if (v243 > v248)
                    {
                      v256 = v8;
                      if ((v252 & 1) == 0) {
                        v256 = *v8;
                      }
                      unint64_t v257 = v250;
                      unint64_t v258 = v249;
                      uint64_t v259 = v113;
                      v260 = (uint64_t *)v256[v248];
LABEL_774:
                      uint64_t v261 = (v7 + 1);
                      if (LOBYTE(v376[0]))
                      {
                        *(_WORD *)(v255 + 16) = 1;
                        v263 = v374;
                        v262 = (uint64_t (*)(swift::Demangle::__runtime::Node ***, uint64_t, void))v375;
                        *(void *)(v255 + 8) = v375;
                        *(void *)uint64_t v255 = v262(v263, 2, 0);
                        v262(v263, 3, 0);
                        goto LABEL_892;
                      }
                      int v264 = *((unsigned __int16 *)v8 + 8);
                      if (v264 == 82 || v264 == 64)
                      {
                        unint64_t v265 = (v259 | v353 | v258) & 0xFFFFFFFFFBFFFFFFLL | DWORD2(v370) & 0xF9FFFFFF | (v343 | v257) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)v363 << 25) & 0xFFFFFFFFFBFFFFFFLL;
                      }
                      else
                      {
                        unint64_t v265 = (v259 | v353 | v258) & 0xFFFFFFFFFBFFFFFFLL | DWORD2(v370) & 0xF9FFFFFF | (v343 | v257) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)v363 << 25) & 0xFFFFFFFFFBFFFFFFLL;
                        if (v264 != 166)
                        {
                          uint64_t v266 = 0;
LABEL_782:
                          int v267 = *((unsigned __int8 *)v8 + 18);
                          if (v267 == 2)
                          {
                            unint64_t v268 = *((unsigned __int8 *)v8 + 18);
                          }
                          else
                          {
                            if (v267 != 5) {
                              goto LABEL_790;
                            }
                            unint64_t v268 = *((unsigned int *)v8 + 2);
                          }
                          unint64_t v269 = v248 + 1;
                          if (v268 > v269)
                          {
                            if ((v267 - 1) >= 2) {
                              unint64_t v8 = (uint64_t ***)*v8;
                            }
                            v270 = v8[v269];
                            goto LABEL_791;
                          }
LABEL_790:
                          v270 = 0;
LABEL_791:
                          if (v368[0] == 1)
                          {
                            *(_WORD *)(v255 + 16) = 1;
                            *(_OWORD *)uint64_t v255 = v367;
                            *(void *)&long long v367 = 0;
                            *((void *)&v367 + 1) = swift::TypeLookupError::nop;
                            ((void (*)(void, uint64_t, void))swift::TypeLookupError::nop)(0, 3, 0);
                          }
                          else
                          {
                            if (v97) {
                              unint64_t v271 = v266 | v265 | 0x80000000;
                            }
                            else {
                              unint64_t v271 = v266 | v265;
                            }
                            if (v368[0]) {
                              uint64_t v272 = 0;
                            }
                            else {
                              uint64_t v272 = v367;
                            }
                            if (v368[0] == 1) {
                              (*((void (**)(void, uint64_t, void))&v367 + 1))(v367, 3, 0);
                            }
                          }
                          goto LABEL_892;
                        }
                      }
                      uint64_t v266 = 0x4000000;
                      goto LABEL_782;
                    }
LABEL_773:
                    unint64_t v257 = v250;
                    unint64_t v258 = v249;
                    uint64_t v259 = v113;
                    v260 = 0;
                    goto LABEL_774;
                  }
                  if (*((_WORD *)v8[v98] + 8) == 130)
                  {
                    v97 |= 0x10u;
                    unint64_t v100 = v98 + 1;
                  }
                  else
                  {
                    unint64_t v100 = v98;
                  }
                }
                char v103 = 1;
                int v104 = v8;
                goto LABEL_320;
              }
            }
            else
            {
              long long v91 = (uint64_t ***)*v8;
              BOOL v93 = *((unsigned __int16 *)*v8 + 8) == 23;
              if (*((_WORD *)v8[v93] + 8) == 67) {
                goto LABEL_289;
              }
              long long v91 = v8;
            }
            v339 = a1;
            uint64_t v96 = 0;
            unsigned int v97 = 2 * (*((_WORD *)v91[v93] + 8) == 129);
            if (*((_WORD *)v91[v93] + 8) == 129) {
              unsigned int v98 = v93 + 1;
            }
            else {
              unsigned int v98 = v93;
            }
            goto LABEL_296;
          default:
LABEL_78:
            operator new();
        }
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x11:
      case 0x12:
        switch(*((unsigned char *)v8 + 18))
        {
          case 2:
            *(void *)&long long v370 = &v371;
            *((void *)&v370 + 1) = 0x800000000;
            uint64_t v53 = v8;
            goto LABEL_158;
          case 5:
            if (*((_DWORD *)v8 + 2) <= 1u) {
              goto LABEL_164;
            }
            *(void *)&long long v370 = &v371;
            *((void *)&v370 + 1) = 0x800000000;
            if (*((_DWORD *)v8 + 2) < 2u)
            {
              char v54 = 0;
            }
            else
            {
              uint64_t v53 = *v8;
LABEL_158:
              char v54 = (uint64_t *)*((void *)v53 + 1);
            }
            if (LOBYTE(v376[0])) {
              goto LABEL_160;
            }
            int v65 = *((unsigned __int8 *)v8 + 18);
            if ((v65 - 1) < 2) {
              goto LABEL_200;
            }
            if (v65 == 5 && *((_DWORD *)v8 + 2))
            {
              unint64_t v8 = (uint64_t ***)*v8;
LABEL_200:
              long long v66 = (unsigned __int16 **)*v8;
            }
            else
            {
              long long v66 = 0;
            }
            if (*((_WORD *)v66 + 8) != 232) {
              goto LABEL_466;
            }
            int v142 = *((unsigned __int8 *)v66 + 18);
            if ((v142 - 1) < 2) {
              goto LABEL_465;
            }
            if (v142 == 5 && *((_DWORD *)v66 + 2))
            {
              long long v66 = (unsigned __int16 **)*v66;
LABEL_465:
              long long v66 = (unsigned __int16 **)*v66;
            }
LABEL_466:
            swift::Demangle::__runtime::getObjCClassOrProtocolName((unsigned __int16 ***)v66, (uint64_t)&v374);
            if (LOBYTE(v376[0]))
            {
              __swift::__runtime::llvm::StringRef::str((const void **)&v374, (uint64_t)&v367);
              if (v369 < 0) {
                operator delete((void *)v367);
              }
            }
            else
            {
              *(void *)&long long v367 = 0;
              v363 = 0;
              if (LOBYTE(v376[0]))
              {
LABEL_160:
                *((_WORD *)a4 + 8) = 1;
                long long v56 = v374;
                long long v55 = (uint64_t (*)(swift::Demangle::__runtime::Node ***, uint64_t, void))v375;
                a4[1] = v375;
                *a4 = v55(v56, 2, 0);
                v55(v56, 3, 0);
              }
              else
              {
              }
            }
            long long v57 = (swift::Demangle::__runtime::Node ***)v370;
            if ((uint64_t *)v370 == &v371) {
              return;
            }
            goto LABEL_893;
          default:
LABEL_164:
            operator new();
        }
      case 0x10:
        switch(*((unsigned char *)v8 + 18))
        {
          case 2:
            goto LABEL_38;
          case 5:
            if (*((_DWORD *)v8 + 2) <= 1u) {
              goto LABEL_286;
            }
            unint64_t v8 = (uint64_t ***)*v8;
LABEL_38:
            unint64_t v8 = (uint64_t ***)v8[1];
            int v17 = *((unsigned __int8 *)v8 + 18);
            if (v17 == 1) {
              goto LABEL_50;
            }
            if (v17 != 5 || *((_DWORD *)v8 + 2) != 1) {
              operator new();
            }
            return;
          default:
LABEL_286:
            operator new();
        }
        goto LABEL_49;
      case 0x14:
        swift::Demangle::__runtime::mangleNode((swift::Demangle::__runtime *)v8, a2);
        if (v370) {
          operator new();
        }
        long long v367 = *(_OWORD *)v8;
        __swift::__runtime::llvm::StringRef::str((const void **)&v367, (uint64_t)&v374);
        int v116 = SHIBYTE(v376[0]);
        uint64_t v117 = v374;
        if ((v373 & 0x80u) == 0) {
          unint64_t v118 = __p;
        }
        else {
          unint64_t v118 = (void **)__p[0];
        }
        if ((v373 & 0x80u) == 0) {
          uint64_t v119 = v373;
        }
        else {
          uint64_t v119 = (uint64_t)__p[1];
        }
        if (v116 < 0) {
          operator delete(v117);
        }
        if ((char)v373 < 0) {
          operator delete(__p[0]);
        }
        return;
      case 0x18:
        swift::Demangle::__runtime::getObjCClassOrProtocolName((unsigned __int16 ***)v8, (uint64_t)&v370);
        if (!(_BYTE)v371) {
          goto LABEL_105;
        }
        __swift::__runtime::llvm::StringRef::str((const void **)&v370, (uint64_t)&v374);
        if (SHIBYTE(v376[0]) < 0) {
          operator delete(v374);
        }
        return;
      case 0x23:
        switch(*((unsigned char *)v8 + 18))
        {
          case 2:
            goto LABEL_45;
          case 5:
            if (*((_DWORD *)v8 + 2) > 1u) {
              goto LABEL_44;
            }
            goto LABEL_285;
          default:
LABEL_285:
            operator new();
        }
      case 0x26:
        int v32 = *((unsigned __int8 *)v8 + 18);
        if ((v32 - 1) >= 2)
        {
          if (v32 == 5) {
            uint8x8_t v33 = (_DWORD **)*v8;
          }
          else {
            uint8x8_t v33 = (_DWORD **)v8;
          }
          unint64_t v8 = (uint64_t ***)*v8;
        }
        else
        {
          uint8x8_t v33 = (_DWORD **)v8;
        }
        int v59 = *(_DWORD *)*v8;
        int v60 = *v33[1];
        long long v58 = (_anonymous_namespace_::DecodedMetadataBuilder *)*a1;
        goto LABEL_271;
      case 0x2C:
        switch(*((unsigned char *)v8 + 18))
        {
          case 2:
            goto LABEL_45;
          case 5:
            if (*((_DWORD *)v8 + 2) <= 1u) {
              goto LABEL_284;
            }
            goto LABEL_44;
          default:
LABEL_284:
            operator new();
        }
      case 0x2D:
        switch(*((unsigned char *)v8 + 18))
        {
          case 2:
            __int16 v134 = v8;
            goto LABEL_581;
          case 5:
            if (*((_DWORD *)v8 + 2) <= 1u) {
              goto LABEL_414;
            }
            __int16 v134 = *v8;
LABEL_581:
            long long v178 = (swift::Demangle::__runtime::NodeFactory *)(v7 + 1);
            if ((unsigned __int16)v371 == 1) {
              goto LABEL_597;
            }
            int v179 = *((unsigned __int8 *)v8 + 18);
            if (v179 == 2) {
              goto LABEL_586;
            }
            if (v179 == 5 && *((_DWORD *)v8 + 2) >= 2u)
            {
              unint64_t v8 = (uint64_t ***)*v8;
LABEL_586:
              long long v180 = v8[1];
            }
            else
            {
              long long v180 = 0;
            }
            int v196 = *((unsigned __int8 *)v180 + 18);
            uint64_t v197 = (long long **)v180;
            if ((v196 - 1) >= 2) {
              uint64_t v197 = (long long **)*v180;
            }
            long long v367 = **v197;
            if (v196 != 2)
            {
              if (v196 != 5 || *((_DWORD *)v180 + 2) <= 1u)
              {
                __swift::__runtime::llvm::StringRef::str((const void **)&v367, (uint64_t)&v374);
              }
              long long v180 = (uint64_t **)*v180;
            }
            if (v284)
            {
              uint64_t v285 = v284;
              __swift::__runtime::llvm::StringRef::str((const void **)&v367, (uint64_t)&v374);
              if (v376[0] >= 0) {
                v286 = &v374;
              }
              else {
                v286 = (swift::Demangle::__runtime::Node ****)v374;
              }
              if (v376[0] >= 0) {
                size_t v287 = HIBYTE(v376[0]);
              }
              else {
                size_t v287 = v375;
              }
              if ((_WORD)v371) {
                uint64_t v288 = 0;
              }
              else {
                uint64_t v288 = v370;
              }
              if (SHIBYTE(v376[0]) < 0) {
                operator delete(v374);
              }
            }
            else
            {
              *a4 = "unknown error";
              a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)a4 + 8) = 1;
            }
            break;
          default:
LABEL_414:
            operator new();
        }
        goto LABEL_885;
      case 0x39:
        switch(*((unsigned char *)v8 + 18))
        {
          case 1:
            goto LABEL_441;
          case 5:
            if (*((_DWORD *)v8 + 2) != 1) {
              goto LABEL_395;
            }
            goto LABEL_440;
          default:
LABEL_395:
            operator new();
        }
      case 0x3D:
      case 0xDB:
      case 0xE9:
      case 0xEA:
LABEL_105:
        v374 = 0;
        *(void *)&long long v367 = 0;
        if ((_BYTE)v371)
        {
          *((_WORD *)a4 + 8) = 1;
          long long v39 = (uint64_t (*)(uint64_t, uint64_t, void))*((void *)&v370 + 1);
          uint64_t v40 = v370;
          a4[1] = *((void *)&v370 + 1);
          *a4 = v39(v40, 2, 0);
          v39(v40, 3, 0);
        }
        else
        {
        }
        return;
      case 0x45:
      case 0x91:
        int v27 = *((unsigned __int8 *)v8 + 18);
        uint16x8_t v28 = (uint64_t *)v8;
        switch(*((unsigned char *)v8 + 18))
        {
          case 1:
            uint64_t v29 = 0;
            goto LABEL_76;
          case 2:
            goto LABEL_329;
          case 5:
            unsigned int v109 = *((_DWORD *)v8 + 2);
            if (v109 < 2)
            {
              if (!v109) {
LABEL_326:
              }
                operator new();
              uint64_t v29 = 0;
            }
            else
            {
              uint16x8_t v28 = (uint64_t *)*v8;
LABEL_329:
              uint64_t v110 = *v28;
              if (*(_WORD *)(v110 + 16) != 146 || *(unsigned char *)(v110 + 18) != 3) {
                operator new();
              }
              if (v27 == 2)
              {
                uint64_t v29 = 1;
LABEL_76:
                int32x4_t v30 = v8;
                goto LABEL_450;
              }
              if (v27 != 5 || *((_DWORD *)v8 + 2) < 2u)
              {
                uint64_t v139 = 0;
LABEL_451:
                if ((unsigned __int16)v371 == 1)
                {
                  *((_WORD *)a4 + 8) = 1;
                  *(_OWORD *)a4 = v370;
                  *((void *)&v370 + 1) = swift::TypeLookupError::nop;
                  *(void *)&long long v370 = 0;
                }
                else
                {
                  int v140 = *((unsigned __int16 *)v8 + 8);
                  if (v140 == 69)
                  {
                    if ((_WORD)v371) {
                      unint64_t v177 = 0;
                    }
                    else {
                      unint64_t v177 = v370;
                    }
                  }
                  else
                  {
                    if (v140 != 145) {
                      operator new();
                    }
                    if ((_WORD)v371) {
                      unint64_t v141 = 0;
                    }
                    else {
                      unint64_t v141 = v370;
                    }
                  }
                }
LABEL_885:
                if ((unsigned __int16)v371 == 1) {
                  (*((void (**)(void, uint64_t, void))&v370 + 1))(v370, 3, 0);
                }
                return;
              }
              uint64_t v29 = 1;
            }
            int32x4_t v30 = *v8;
LABEL_450:
            uint64_t v139 = v30[v29];
            goto LABEL_451;
          default:
            goto LABEL_326;
        }
      case 0x53:
        switch(*((unsigned char *)v8 + 18))
        {
          case 2:
            unint64_t v135 = v8;
            goto LABEL_588;
          case 5:
            if (*((_DWORD *)v8 + 2) <= 1u) {
              goto LABEL_417;
            }
            unint64_t v135 = *v8;
LABEL_588:
            if (v368[0] == 1)
            {
              *((_WORD *)a4 + 8) = 1;
              *(_OWORD *)a4 = v367;
              *(void *)&long long v367 = 0;
              *((void *)&v367 + 1) = swift::TypeLookupError::nop;
              ((void (*)(void, uint64_t, void))swift::TypeLookupError::nop)(0, 3, 0);
              return;
            }
            *(void *)&long long v370 = &v371;
            *((void *)&v370 + 1) = 0x800000000;
            v374 = (swift::Demangle::__runtime::Node ***)v376;
            uint64_t v375 = 0x800000000;
            int v181 = *((unsigned __int8 *)v8 + 18);
            if (v181 == 2) {
              goto LABEL_594;
            }
            if (v181 == 5 && *((_DWORD *)v8 + 2) >= 2u)
            {
              unint64_t v8 = (uint64_t ***)*v8;
LABEL_594:
              long long v182 = v8[1];
            }
            else
            {
              long long v182 = 0;
            }
            if (*((_WORD *)v182 + 8) != 84) {
              operator new();
            }
            *a4 = "unknown error";
            a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            *((_WORD *)a4 + 8) = 1;
            if (v374 != v376) {
              free(v374);
            }
            if ((uint64_t *)v370 != &v371) {
              free((void *)v370);
            }
            if (v368[0] == 1) {
              (*((void (**)(void, uint64_t, void))&v367 + 1))(v367, 3, 0);
            }
            break;
          default:
LABEL_417:
            operator new();
        }
        return;
      case 0x55:
        long long v58 = (_anonymous_namespace_::DecodedMetadataBuilder *)*a1;
        int v59 = 0;
        int v60 = 0;
LABEL_271:
        *((_WORD *)a4 + 8) = 0;
        *a4 = GenericTypeParameterType;
        if (!GenericTypeParameterType) {
          goto LABEL_272;
        }
        return;
      case 0x63:
        int v12 = *((unsigned __int8 *)v8 + 18);
        if ((v12 - 1) < 2) {
          goto LABEL_50;
        }
        if (v12 != 5 || !*((_DWORD *)v8 + 2)) {
          operator new();
        }
        goto LABEL_49;
      case 0x73:
        unint64_t v41 = 0;
        *(void *)&long long v370 = &v371;
        *((void *)&v370 + 1) = 0x800000000;
        v374 = (swift::Demangle::__runtime::Node ***)v376;
        uint64_t v375 = 0x800000000;
        *(void *)&long long v367 = v368;
        *((void *)&v367 + 1) = 0x800000000;
        unsigned int v42 = v7 + 1;
        while (2)
        {
          unint64_t v43 = *((unsigned __int8 *)v8 + 18);
          switch(v43)
          {
            case 1:
              unint64_t v44 = *((unsigned __int8 *)v8 + 18);
              break;
            case 5:
              unint64_t v44 = *((unsigned int *)v8 + 2);
              break;
            case 2:
              unint64_t v44 = 2;
              break;
            default:
              goto LABEL_194;
          }
          if (v44 > v41)
          {
            unsigned int v45 = v43 - 1;
            if (v43 != 1)
            {
              if (v43 == 5)
              {
                if (*((unsigned int *)v8 + 2) > v41) {
                  goto LABEL_124;
                }
                goto LABEL_128;
              }
              unint64_t v43 = 2;
            }
            if (v43 > v41)
            {
LABEL_124:
              long long v46 = v8;
              if (v45 >= 2) {
                long long v46 = *v8;
              }
              uint64_t v47 = v46[v41];
              goto LABEL_129;
            }
LABEL_128:
            uint64_t v47 = 0;
LABEL_129:
            switch(*(_WORD *)(v47 + 16))
            {
              case 'i':
              case 'k':
              case 'l':
                goto LABEL_112;
              case 'j':
                if (*(unsigned char *)(v47 + 18) != 3) {
                  operator new();
                }
                goto LABEL_112;
              case 'p':
                if (*(unsigned char *)(v47 + 18) != 3) {
                  operator new();
                }
                goto LABEL_112;
              case 'q':
                int v48 = *(unsigned __int8 *)(v47 + 18);
                uint64_t v49 = v47;
                if ((v48 - 1) >= 2)
                {
                  if (v48 != 5 || !*(_DWORD *)(v47 + 8)) {
                    operator new();
                  }
                  uint64_t v49 = *(void *)v47;
                }
                if (*(_WORD *)(*(void *)v49 + 16) != 114) {
                  goto LABEL_666;
                }
                if ((v48 - 1) > 1)
                {
                  if (*(unsigned char *)(**(void **)v47 + 18) != 3) {
LABEL_666:
                  }
                    operator new();
                }
                else if (*(unsigned char *)(*(void *)v47 + 18) != 3)
                {
                  goto LABEL_666;
                }
LABEL_112:
                ++v41;
                continue;
              case 'v':
                goto LABEL_112;
              case 'x':
                goto LABEL_112;
              case 'z':
                goto LABEL_112;
              default:
                operator new();
            }
          }
          break;
        }
LABEL_194:
        if (DWORD2(v367) >= 2) {
          operator new();
        }
        *a4 = "unknown error";
        a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
        *((_WORD *)a4 + 8) = 1;
        if ((_WORD *)v367 != v368) {
          free((void *)v367);
        }
        if (v374 != v376) {
          free(v374);
        }
LABEL_892:
        long long v57 = (swift::Demangle::__runtime::Node ***)v370;
        if ((uint64_t *)v370 == &v371) {
          return;
        }
        goto LABEL_893;
      case 0xB4:
      case 0xB5:
      case 0x15B:
        if (!(void)v370) {
          operator new();
        }
        return;
      case 0xBE:
      case 0xBF:
      case 0xC0:
        switch(*((unsigned char *)v8 + 18))
        {
          case 1:
          case 2:
            *(void *)&long long v370 = &v371;
            *((void *)&v370 + 1) = 0x800000000;
            int32x4_t v20 = (int ***)v8;
            goto LABEL_62;
          case 5:
            if (!*((_DWORD *)v8 + 2)) {
              goto LABEL_392;
            }
            *(void *)&long long v370 = &v371;
            *((void *)&v370 + 1) = 0x800000000;
            if (*((_DWORD *)v8 + 2))
            {
              int32x4_t v20 = (int ***)*v8;
LABEL_62:
              int32x4_t v21 = *v20;
            }
            else
            {
              int32x4_t v21 = 0;
            }
            if (*((_WORD *)v21 + 8) == 190)
            {
              int v22 = *((unsigned __int8 *)v21 + 18);
              uint8x16_t v23 = a4;
              if ((v22 - 1) < 2)
              {
LABEL_68:
                int32x4_t v21 = (int **)*v21;
                goto LABEL_170;
              }
              if (v22 == 5 && *((_DWORD *)v21 + 2))
              {
                int32x4_t v21 = (int **)*v21;
                goto LABEL_68;
              }
            }
            else
            {
              uint8x16_t v23 = a4;
            }
LABEL_170:
            int v61 = *((unsigned __int8 *)v21 + 18);
            long long v62 = (int ***)v21;
            if ((v61 - 1) < 2) {
              goto LABEL_350;
            }
            if (v61 == 5)
            {
              long long v63 = (int **)*v21;
              long long v62 = (int ***)*v21;
            }
            else
            {
              long long v62 = 0;
LABEL_350:
              if (v61 == 1)
              {
                uint64_t v115 = (int ***)(v21 + 1);
                goto LABEL_370;
              }
              if (v61 == 2)
              {
                uint64_t v115 = (int ***)(v21 + 2);
                goto LABEL_370;
              }
              if (v61 != 5)
              {
                uint64_t v115 = 0;
                goto LABEL_370;
              }
              long long v63 = (int **)*v21;
            }
            uint64_t v115 = (int ***)&v63[*((unsigned int *)v21 + 2)];
LABEL_370:
            if (v62 != v115)
            {
              do
              {
                if (!v120) {
                  operator new();
                }
                uint64_t v121 = v120;
                uint64_t v122 = DWORD2(v370);
                if (DWORD2(v370) >= (unint64_t)HIDWORD(v370))
                {
                  __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v370, (uint64_t)&v371, DWORD2(v370) + 1, 8);
                  uint64_t v122 = DWORD2(v370);
                }
                *(void *)(v370 + 8 * v122) = v121;
                ++DWORD2(v370);
                ++v62;
              }
              while (v62 != v115);
              int v10 = *((unsigned __int16 *)v8 + 8);
            }
            if (v10 == 191)
            {
              switch(*((unsigned char *)v8 + 18))
              {
                case 2:
                  goto LABEL_668;
                case 5:
                  if (*((_DWORD *)v8 + 2) <= 1u) {
                    goto LABEL_577;
                  }
                  unint64_t v8 = (uint64_t ***)*v8;
LABEL_668:
                  int v205 = *((unsigned __int16 *)v23 + 8);
                  if (v23 && v205 == 1) {
                    goto LABEL_578;
                  }
                  if (*((_WORD *)v23 + 8))
                  {
                    if (v205 == 1) {
                      ((void (*)(uint64_t, uint64_t, void))v23[1])(*v23, 3, 0);
                    }
                    uint64_t v123 = 0;
                    char v124 = 1;
                  }
                  else
                  {
                    uint64_t v123 = *v23;
                    char v124 = 1;
                  }
                  break;
                default:
LABEL_577:
                  operator new();
              }
            }
            else
            {
              uint64_t v123 = 0;
              char v124 = v10 == 192;
            }
            goto LABEL_578;
          default:
LABEL_392:
            operator new();
        }
      case 0xCF:
        int v13 = *((unsigned __int8 *)v8 + 18);
        if ((v13 - 1) < 2) {
          goto LABEL_50;
        }
        if (v13 != 5 || !*((_DWORD *)v8 + 2)) {
          operator new();
        }
        goto LABEL_49;
      case 0xD2:
        switch(*((unsigned char *)v8 + 18))
        {
          case 1:
          case 2:
            goto LABEL_441;
          case 5:
            if (!*((_DWORD *)v8 + 2)) {
              goto LABEL_397;
            }
            goto LABEL_440;
          default:
LABEL_397:
            operator new();
        }
      case 0xD3:
        v348 = a4;
        *(void *)&long long v367 = v368;
        *((void *)&v367 + 1) = 0x400000000;
        v363 = v365;
        uint64_t v364 = 0x400000000;
        v374 = (swift::Demangle::__runtime::Node ***)v376;
        uint64_t v375 = 0x400000000;
        *(void *)&long long v370 = &v371;
        *((void *)&v370 + 1) = 0x800000000;
        v360 = v362;
        int v34 = *((unsigned __int8 *)v8 + 18);
        uint64_t v361 = 0x400000000;
        unsigned int v35 = 0;
        switch(v34)
        {
          case 1:
            goto LABEL_401;
          case 2:
            goto LABEL_89;
          case 5:
            unsigned int v127 = *((_DWORD *)v8 + 2);
            if (!v127) {
              goto LABEL_406;
            }
            if (v127 == 1) {
              goto LABEL_400;
            }
            if (v127 < 3) {
              unsigned int v35 = 0;
            }
            else {
              unsigned int v35 = (*v8)[2];
            }
LABEL_89:
            if (*((_WORD *)v35 + 8) != 235) {
              operator new();
            }
            uint64_t v36 = v8;
            if (v34 == 2) {
              goto LABEL_94;
            }
            if (v34 == 5 && *((_DWORD *)v8 + 2) >= 2u)
            {
              uint64_t v36 = *v8;
LABEL_94:
              long long v37 = (uint64_t **)v36[1];
            }
            else
            {
              long long v37 = 0;
            }
            unsigned int v200 = (uint64_t *)(v37 + 2);
            if (*((_WORD *)v37 + 8) != 43) {
              operator new();
            }
            v341 = (uint64_t *)v37;
            int v201 = *((unsigned __int8 *)v37 + 18);
            if ((v201 - 1) < 2)
            {
              v357 = v359;
              uint64_t v358 = 0x400000000;
              uint64_t v203 = (uint64_t *)v37;
              uint64_t v273 = (uint64_t)(v37 + 1);
              if (v201 != 1) {
                uint64_t v273 = 0;
              }
              if (v201 == 2) {
                uint64_t v204 = (uint64_t)v200;
              }
              else {
                uint64_t v204 = v273;
              }
            }
            else
            {
              if (v201 != 5 || !*((_DWORD *)v37 + 2)) {
                operator new();
              }
              v357 = v359;
              uint64_t v358 = 0x400000000;
              uint64_t v202 = *((unsigned int *)v37 + 2);
              if (!v202)
              {
                v355[0] = v356;
                v355[1] = (void *)0x600000000;
                goto LABEL_913;
              }
              uint64_t v203 = *v37;
              uint64_t v204 = (uint64_t)&(*v37)[v202];
            }
            do
            {
              uint64_t v274 = *v203;
              if (*(_WORD *)(*v203 + 16) == 37 && *(unsigned char *)(v274 + 18) == 4) {
                __swift::__runtime::llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(&v357, *(_DWORD *)v274);
              }
              ++v203;
            }
            while (v203 != (uint64_t *)v204);
            v275 = v341;
            int v276 = *((unsigned __int8 *)v341 + 18);
            v355[0] = v356;
            v355[1] = (void *)0x600000000;
            if ((v276 - 1) >= 2)
            {
              if (v276 != 5)
              {
                v275 = 0;
                goto LABEL_846;
              }
LABEL_913:
              v277 = (uint64_t **)v341;
              v278 = (uint64_t *)*v341;
              v275 = (uint64_t *)*v341;
              goto LABEL_914;
            }
LABEL_846:
            if (v276 == 1)
            {
              unsigned int v200 = v341 + 1;
              goto LABEL_918;
            }
            if (v276 == 2) {
              goto LABEL_918;
            }
            if (v276 != 5)
            {
              unsigned int v200 = 0;
              goto LABEL_918;
            }
            v277 = (uint64_t **)v341;
            v278 = (uint64_t *)*v341;
LABEL_914:
            unsigned int v200 = &v278[*((unsigned int *)v277 + 2)];
LABEL_918:
            while (v275 != v200)
            {
              v296 = (uint64_t **)*v275;
              if (*(_WORD *)(*v275 + 16) != 42) {
                goto LABEL_917;
              }
              int v297 = *((unsigned __int8 *)v296 + 18);
              if ((v297 - 1) < 2) {
                goto LABEL_924;
              }
              if (v297 == 5 && *((_DWORD *)v296 + 2))
              {
                v296 = (uint64_t **)*v296;
LABEL_924:
                v298 = (uint64_t **)*v296;
                goto LABEL_926;
              }
              v298 = 0;
LABEL_926:
              int v299 = *((unsigned __int8 *)v298 + 18);
              if ((v299 - 1) >= 2)
              {
                if (v299 != 5 || !*((_DWORD *)v298 + 2))
                {
                  v300 = 0;
                  goto LABEL_932;
                }
                v298 = (uint64_t **)*v298;
              }
              v300 = (uint64_t **)*v298;
LABEL_932:
              int v301 = *((unsigned __int8 *)v300 + 18);
              if ((v301 - 1) <= 1)
              {
                v377[0] = **v300;
              }
              else
              {
                v377[0] = *(void *)**v300;
                if (v301 == 5) {
                  v300 = (uint64_t **)*v300;
                }
              }
              uint64_t v354 = *v300[1];
              __swift::__runtime::llvm::SmallVectorImpl<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned long long,unsigned long long>((uint64_t)v355, (unsigned int *)v377, &v354);
LABEL_917:
              ++v275;
            }
            unint64_t v302 = v358;
            if (v358)
            {
              unint64_t v303 = 0;
              v304 = v357;
              do
              {
                if (v304[v303])
                {
                  unsigned int v305 = 0;
                  do
                  {
                    v306 = *v9;
                    v307 = (*v9)[4];
                    if (v307)
                    {
                      LODWORD(v377[0]) = v303;
                      LODWORD(v354) = v305;
                      uint64_t v308 = (*(uint64_t (**)(swift::Demangle::__runtime::Node *, uint64_t *, uint64_t *))(*(void *)v307 + 48))(v307, v377, &v354);
                      uint64_t v312 = v308;
                      v313 = v306[11];
                      if (v306[10] != v313 && (v308 & 1) != 0)
                      {
                        unint64_t v314 = *((void *)v313 - 1);
                        v377[0] = v308;
                        if (v314 >= *(void *)((v308 & 0xFFFFFFFFFFFFFFFELL) - 8))
                        {
                          uint64_t NumElements = swift::TargetPackPointer<swift::InProcess,swift::TargetMetadata>::getNumElements(v377, v309, v310, v311);
                          swift::fatalError(0, "Pack index %zu exceeds pack length %zu\n", v328, v329, v314, NumElements);
                        }
                        uint64_t v312 = *(void *)((v308 & 0xFFFFFFFFFFFFFFFELL) + 8 * v314);
                      }
                    }
                    else
                    {
                      uint64_t v312 = 0;
                    }
                    uint64_t v315 = v361;
                    if (v361 >= (unint64_t)HIDWORD(v361))
                    {
                      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v360, (uint64_t)v362, v361 + 1, 8);
                      uint64_t v315 = v361;
                    }
                    *((void *)v360 + v315) = v312;
                    LODWORD(v361) = v361 + 1;
                    ++v305;
                    v304 = v357;
                  }
                  while (v305 < *((_DWORD *)v357 + v303));
                  unint64_t v302 = v358;
                }
                ++v303;
              }
              while (v303 < v302);
            }
            unsigned int v316 = *((unsigned __int8 *)v35 + 18);
            switch(v316)
            {
              case 1u:
                goto LABEL_964;
              case 5u:
                unsigned int v316 = *((_DWORD *)v35 + 2);
                if (!v316) {
                  break;
                }
                goto LABEL_964;
              case 2u:
LABEL_964:
                uint64_t v319 = 0;
                unint64_t v320 = 0;
                BOOL v317 = 1;
                unint64_t v321 = v316;
                while (1)
                {
                  unint64_t v322 = *((unsigned __int8 *)v35 + 18);
                  unsigned int v323 = v322 - 1;
                  if (v322 != 1)
                  {
                    if (v322 == 5)
                    {
                      unint64_t v322 = *((unsigned int *)v35 + 2);
                    }
                    else
                    {
                      if (v322 != 2) {
                        goto LABEL_975;
                      }
                      unint64_t v322 = 2;
                    }
                  }
                  if (v322 > v320)
                  {
                    uint64_t v324 = (uint64_t)v35;
                    if (v323 >= 2) {
                      uint64_t v324 = *v35;
                    }
                    uint64_t v325 = *(void *)(v324 + 8 * v320);
                    goto LABEL_976;
                  }
LABEL_975:
                  uint64_t v325 = 0;
LABEL_976:
                  if (!v348 || *((_WORD *)v348 + 8) != 1)
                  {
                    if (*((_WORD *)v348 + 8)) {
                      uint64_t v326 = 0;
                    }
                    else {
                      uint64_t v326 = *v348;
                    }
                    v377[0] = v326;
                    __swift::__runtime::llvm::SmallVectorImpl<std::pair<swift::MetadataOrPack,swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack&,swift::MetadataOrPack>((uint64_t)&v363, (uint64_t *)((char *)v360 + v319), v377);
                    if (*((_WORD *)v348 + 8) == 1) {
                      ((void (*)(uint64_t, uint64_t, void))v348[1])(*v348, 3, 0);
                    }
                    BOOL v317 = ++v320 < v321;
                    v319 += 8;
                    if (v321 != v320) {
                      continue;
                    }
                  }
                  goto LABEL_954;
                }
            }
            BOOL v317 = 0;
LABEL_954:
            if (v355[0] != v356) {
              free(v355[0]);
            }
            if (v357 != v359) {
              free(v357);
            }
            if (v317) {
              goto LABEL_816;
            }
            int v318 = *((unsigned __int8 *)v8 + 18);
            if ((v318 - 1) < 2)
            {
LABEL_401:
              uint64_t v128 = *v8;
              goto LABEL_402;
            }
            if (v318 == 5 && *((_DWORD *)v8 + 2))
            {
LABEL_400:
              unint64_t v8 = (uint64_t ***)*v8;
              goto LABEL_401;
            }
            uint64_t v128 = 0;
LABEL_402:
            uint64_t v129 = v128 + 2;
            if (*((_WORD *)v128 + 8) != 212) {
              operator new();
            }
            int v130 = *((unsigned __int8 *)v128 + 18);
            uint64_t v131 = v128;
            if ((v130 - 1) >= 2)
            {
              if (v130 == 5)
              {
                unsigned int v132 = *v128;
                uint64_t v131 = (uint64_t **)*v128;
                goto LABEL_814;
              }
              uint64_t v131 = 0;
            }
            if (v130 == 1)
            {
              uint64_t v129 = v128 + 1;
            }
            else if (v130 != 2)
            {
              if (v130 == 5)
              {
                unsigned int v132 = *v128;
LABEL_814:
                uint64_t v129 = (uint64_t **)&v132[*((unsigned int *)v128 + 2)];
              }
              else
              {
                uint64_t v129 = 0;
              }
            }
            if (v131 == v129)
            {
LABEL_870:
              uint64_t *v348 = (uint64_t)"unknown error";
              v348[1] = (uint64_t)swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
              *((_WORD *)v348 + 8) = 1;
            }
            else
            {
              while (1)
              {
                v279 = *v131;
                int v280 = *((unsigned __int16 *)*v131 + 8);
                if (v280 == 213)
                {
                  char v281 = 1;
                }
                else
                {
                  if (v280 != 214) {
                    goto LABEL_907;
                  }
                  char v281 = 0;
                }
                LOBYTE(v357) = v281;
                int v282 = *((unsigned __int8 *)v279 + 18);
                if ((v282 - 1) >= 2)
                {
                  if (v282 != 5 || !*((_DWORD *)v279 + 2)) {
LABEL_907:
                  }
                    operator new();
                  v279 = (uint64_t *)*v279;
                }
                if (v348)
                {
                  if (*((_WORD *)v348 + 8) == 1) {
                    break;
                  }
                }
                if (*((_WORD *)v348 + 8)) {
                  v283 = 0;
                }
                else {
                  v283 = (void *)*v348;
                }
                v355[0] = v283;
                if (*((_WORD *)v348 + 8) == 1) {
                  ((void (*)(uint64_t, uint64_t, void))v348[1])(*v348, 3, 0);
                }
                if (++v131 == v129) {
                  goto LABEL_870;
                }
              }
            }
LABEL_816:
            if (v360 != v362) {
              free(v360);
            }
            if ((uint64_t *)v370 != &v371) {
              free((void *)v370);
            }
            if (v374 != v376) {
              free(v374);
            }
            if (v363 != v365) {
              free(v363);
            }
            long long v57 = (swift::Demangle::__runtime::Node ***)v367;
            if ((_WORD *)v367 != v368) {
              goto LABEL_893;
            }
            return;
          default:
LABEL_406:
            operator new();
        }
      case 0xDF:
        v374 = (swift::Demangle::__runtime::Node ***)v376;
        uint64_t v375 = 0x800000000;
        *(void *)&long long v370 = &v371;
        *((void *)&v370 + 1) = 0x800000000;
        int v50 = *((unsigned __int8 *)v8 + 18);
        uint64_t v51 = (unsigned __int8 **)v8;
        if ((v50 - 1) < 2) {
          goto LABEL_385;
        }
        if (v50 == 5)
        {
          uint64_t v52 = *v8;
          uint64_t v51 = (unsigned __int8 **)*v8;
LABEL_389:
          int v126 = (uint64_t ***)&v52[*((unsigned int *)v8 + 2)];
          goto LABEL_474;
        }
        uint64_t v51 = 0;
LABEL_385:
        switch(v50)
        {
          case 1:
            int v126 = v8 + 1;
            break;
          case 2:
            int v126 = v8 + 2;
            break;
          case 5:
            uint64_t v52 = *v8;
            goto LABEL_389;
          default:
            int v126 = 0;
            break;
        }
LABEL_474:
        if (v51 == (unsigned __int8 **)v126)
        {
          uint64_t v170 = 0;
          uint64_t v171 = 0;
          long long v172 = &v371;
          long long v173 = (swift::Demangle::__runtime::Node ***)v376;
LABEL_561:
          goto LABEL_827;
        }
        unsigned int v351 = v7 + 1;
        v349 = a4;
        v333 = v126;
        while (1)
        {
          unint64_t v143 = *v51;
          if (*((_WORD *)*v51 + 8) != 224) {
            operator new();
          }
          if (v143[18] - 1 > 1) {
            unint64_t v143 = *(unsigned __int8 **)v143;
          }
          if (*(_WORD *)(*(void *)v143 + 16) == 276) {
            operator new();
          }
          v355[0] = 0;
          v355[1] = 0;
          size_t v144 = *v51;
          unsigned int v145 = (*v51)[18];
          if (v145 - 1 > 1) {
            unsigned int v146 = **(void ***)v144;
          }
          else {
            unsigned int v146 = *(void **)v144;
          }
          if (*((_WORD *)v146 + 8) == 225)
          {
            *(_OWORD *)v355 = *(_OWORD *)v146;
            size_t v144 = *v51;
            unsigned int v145 = (*v51)[18];
            unint64_t v147 = 1;
          }
          else
          {
            unint64_t v147 = 0;
          }
          unint64_t v148 = v145;
          if (v145 != 1)
          {
            if (v145 == 2) {
              goto LABEL_495;
            }
            if (v145 != 5) {
              goto LABEL_496;
            }
            unint64_t v148 = *((unsigned int *)v144 + 2);
          }
          if (v148 > v147)
          {
            if (v145 - 1 >= 2) {
              size_t v144 = *(unsigned __int8 **)v144;
            }
LABEL_495:
            unint64_t v149 = *(uint64_t **)&v144[8 * v147];
            goto LABEL_497;
          }
LABEL_496:
          unint64_t v149 = 0;
LABEL_497:
          v366[0] = (uint64_t)&v374;
          v366[1] = (uint64_t)&v370;
          v366[2] = (uint64_t)v355;
          if (*((_WORD *)v149 + 8) == 232)
          {
            int v150 = *((unsigned __int8 *)v149 + 18);
            if ((v150 - 1) >= 2)
            {
              if (v150 != 5 || !*((_DWORD *)v149 + 2))
              {
                unint64_t v149 = 0;
                goto LABEL_504;
              }
              unint64_t v149 = (uint64_t *)*v149;
            }
            unint64_t v149 = (uint64_t *)*v149;
          }
LABEL_504:
          if (*((_WORD *)v149 + 8) == 229)
          {
            switch(*((unsigned char *)v149 + 18))
            {
              case 2:
                goto LABEL_508;
              case 5:
                if (*((_DWORD *)v149 + 2) <= 1u) {
                  goto LABEL_826;
                }
                unint64_t v149 = (uint64_t *)*v149;
LABEL_508:
                uint64_t v151 = (uint64_t *)*v149;
                if (v368[0] == 1)
                {
                  uint64_t v4 = (uint64_t (*)(void, void, void))*((void *)&v367 + 1);
                  uint64_t v344 = (*((uint64_t (**)(void, uint64_t, void))&v367 + 1))(v367, 2, 0);
                  char v154 = 0;
                  int v155 = 1;
                }
                else
                {
                  uint64_t v158 = v4;
                  if (v368[0]) {
                    uint64_t v159 = 0;
                  }
                  else {
                    uint64_t v159 = v367;
                  }
                  if (v160)
                  {
                    uint64_t v161 = v160;
                    uint64_t v162 = 0;
                    int v155 = 0;
                    while (1)
                    {
                      uint64_t v163 = (*v9)[11];
                      if ((*v9)[10] == v163) {
                        goto LABEL_983;
                      }
                      *((void *)v163 - 1) = v162;
                      int v164 = v365[0];
                      if (v365[0] == 1)
                      {
                        uint64_t v158 = (uint64_t (*)(void, void, void))v364;
                        uint64_t v344 = ((uint64_t (*)(void *, uint64_t, void))v364)(v363, 2, 0);
                        int v155 = 1;
                      }
                      else
                      {
                        if (v365[0]) {
                          long long v165 = 0;
                        }
                        else {
                          long long v165 = (swift::Demangle::__runtime::Node **)v363;
                        }
                        uint64_t v166 = v375;
                        if (v375 >= (unint64_t)HIDWORD(v375))
                        {
                          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v374, (uint64_t)v376, v375 + 1, 8);
                          uint64_t v166 = v375;
                        }
                        v374[v166] = v165;
                        LODWORD(v375) = v375 + 1;
                        long long v167 = *(_OWORD *)v355;
                        uint64_t v168 = DWORD2(v370);
                        if (DWORD2(v370) >= (unint64_t)HIDWORD(v370))
                        {
                          long long v330 = *(_OWORD *)v355;
                          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v370, (uint64_t)&v371, DWORD2(v370) + 1, 16);
                          long long v167 = v330;
                          uint64_t v168 = DWORD2(v370);
                        }
                        *(_OWORD *)(v370 + 16 * v168) = v167;
                        ++DWORD2(v370);
                      }
                      if (v365[0] == 1) {
                        ((void (*)(void *, uint64_t, void))v364)(v363, 3, 0);
                      }
                      if (v164 == 1) {
                        break;
                      }
                      if (v161 == ++v162) {
                        goto LABEL_542;
                      }
                    }
                    char v154 = 0;
                    a4 = v349;
                    int v126 = v333;
                    uint64_t v4 = v158;
                  }
                  else
                  {
                    int v155 = 0;
LABEL_542:
                    long long v169 = (*v9)[11];
                    a4 = v349;
                    int v126 = v333;
                    if ((*v9)[10] == v169) {
                      goto LABEL_984;
                    }
                    uint64_t v4 = v158;
                    (*v9)[11] = (swift::Demangle::__runtime::Node *)((char *)v169 - 16);
                    char v154 = 1;
                  }
                }
                if (v368[0] == 1) {
                  (*((void (**)(void, uint64_t, void))&v367 + 1))(v367, 3, 0);
                }
                if ((v154 & 1) == 0) {
                  goto LABEL_548;
                }
                goto LABEL_476;
              default:
LABEL_826:
                operator new();
            }
          }
          int v156 = v368[0];
          if (v368[0] == 1)
          {
            uint64_t v4 = (uint64_t (*)(void, void, void))*((void *)&v367 + 1);
            uint64_t v344 = (*((uint64_t (**)(void, uint64_t, void))&v367 + 1))(v367, 2, 0);
            int v155 = 1;
          }
          else
          {
            if (v368[0]) {
              uint64_t v157 = 0;
            }
            else {
              uint64_t v157 = v367;
            }
            int v155 = 0;
          }
          if (v368[0] == 1) {
            (*((void (**)(void, uint64_t, void))&v367 + 1))(v367, 3, 0);
          }
          if (v156 == 1)
          {
LABEL_548:
            if (v155)
            {
              *((_WORD *)a4 + 8) = 1;
              a4[1] = v4;
              *a4 = v4(v344, 2, 0);
              v4(v344, 3, 0);
LABEL_827:
              if ((uint64_t *)v370 != &v371) {
                free((void *)v370);
              }
              long long v57 = v374;
              if (v374 == v376) {
                return;
              }
LABEL_893:
              free(v57);
              return;
            }
          }
          else
          {
LABEL_476:
            v344 &= 0xFFFFFFFFFFFFFF00;
          }
          if (++v51 == (unsigned __int8 **)v126)
          {
            long long v173 = v374;
            uint64_t v171 = v375;
            long long v172 = (uint64_t *)v370;
            uint64_t v170 = DWORD2(v370);
            goto LABEL_561;
          }
        }
      case 0xE0:
        int v14 = *((unsigned __int8 *)v8 + 18);
        char v15 = v8;
        if ((v14 - 1) >= 2)
        {
          if (v14 != 5 || !*((_DWORD *)v8 + 2)) {
            operator new();
          }
          char v15 = *v8;
        }
        if (*(_WORD *)(*(void *)v15 + 16) == 225)
        {
          switch(*((unsigned char *)v8 + 18))
          {
            case 2:
              goto LABEL_45;
            case 5:
              if (*((_DWORD *)v8 + 2) <= 1u) {
                goto LABEL_393;
              }
LABEL_44:
              unint64_t v8 = (uint64_t ***)*v8;
LABEL_45:
              ++v8;
              break;
            default:
LABEL_393:
              operator new();
          }
          goto LABEL_50;
        }
        if ((v14 - 1) < 2) {
          goto LABEL_50;
        }
        if (v14 == 5 && *((_DWORD *)v8 + 2))
        {
LABEL_49:
          unint64_t v8 = (uint64_t ***)*v8;
LABEL_50:
          unint64_t v8 = (uint64_t ***)*v8;
          goto LABEL_51;
        }
        unint64_t v8 = 0;
LABEL_51:
        uint64_t v7 = (v7 + 1);
        if (v7 == 1025) {
          goto LABEL_2;
        }
        continue;
      case 0xE2:
      case 0xE3:
      case 0xE4:
        uint64_t v347 = (uint64_t)a4;
        *(void *)&long long v370 = &v371;
        *((void *)&v370 + 1) = 0x800000000;
        int v24 = *((unsigned __int8 *)v8 + 18);
        uint16x8_t v25 = v8;
        if ((v24 - 1) < 2) {
          goto LABEL_174;
        }
        if (v24 == 5)
        {
          uint16x8_t v26 = *v8;
          uint16x8_t v25 = (uint64_t ***)*v8;
LABEL_178:
          long long v64 = (uint64_t ***)&v26[*((unsigned int *)v8 + 2)];
          goto LABEL_204;
        }
        uint16x8_t v25 = 0;
LABEL_174:
        switch(v24)
        {
          case 1:
            long long v64 = v8 + 1;
            break;
          case 2:
            long long v64 = v8 + 2;
            break;
          case 5:
            uint16x8_t v26 = *v8;
            goto LABEL_178;
          default:
            long long v64 = 0;
            break;
        }
LABEL_204:
        if (v25 == v64)
        {
LABEL_262:
          if (v10 == 228 || v10 == 227) {
LABEL_578:
          }
          long long v57 = (swift::Demangle::__runtime::Node ***)v370;
          if ((uint64_t *)v370 == &v371) {
            return;
          }
          goto LABEL_893;
        }
        v336 = (unsigned __int16 *)(v8 + 2);
        v345 = v64;
        unsigned int v350 = v7 + 1;
        while (1)
        {
          long long v67 = *v25;
          if (*((_WORD *)*v25 + 8) == 232)
          {
            int v68 = *((unsigned __int8 *)v67 + 18);
            if ((v68 - 1) >= 2)
            {
              if (v68 != 5 || !*((_DWORD *)v67 + 2))
              {
                long long v67 = 0;
                goto LABEL_215;
              }
              long long v67 = (uint64_t **)*v67;
            }
            long long v67 = (uint64_t **)*v67;
          }
LABEL_215:
          if (*((_WORD *)v67 + 8) == 229)
          {
            switch(*((unsigned char *)v67 + 18))
            {
              case 2:
                goto LABEL_219;
              case 5:
                if (*((_DWORD *)v67 + 2) <= 1u) {
                  goto LABEL_551;
                }
                long long v67 = (uint64_t **)*v67;
LABEL_219:
                long long v69 = *v67;
                if (LOWORD(v376[0]) == 1)
                {
                  unint64_t v8 = (uint64_t ***)v375;
                  uint64_t v7 = ((uint64_t (*)(swift::Demangle::__runtime::Node ***, uint64_t, void))v375)(v374, 2, 0);
                  char v72 = 0;
                  int v73 = 1;
                }
                else
                {
                  uint64_t v77 = v7;
                  if (LOWORD(v376[0])) {
                    long long v78 = 0;
                  }
                  else {
                    long long v78 = v374;
                  }
                  if (v79)
                  {
                    uint64_t v82 = v79;
                    uint64_t v83 = 0;
                    int v73 = 0;
                    while (1)
                    {
                      long long v84 = (*v9)[11];
                      if ((*v9)[10] == v84) {
LABEL_983:
                      }
                        swift::fatalError(0, "advancePackExpansion() without beginPackExpansion()\n", v80, v81);
                      *((void *)v84 - 1) = v83;
                      int v85 = v368[0];
                      if (v368[0] == 1)
                      {
                        unint64_t v8 = (uint64_t ***)*((void *)&v367 + 1);
                        uint64_t v77 = (*((uint64_t (**)(void, uint64_t, void))&v367 + 1))(v367, 2, 0);
                        int v73 = 1;
                      }
                      else
                      {
                        uint64_t v86 = v9;
                        if (v368[0]) {
                          uint64_t v87 = 0;
                        }
                        else {
                          uint64_t v87 = v367;
                        }
                        uint64_t v88 = DWORD2(v370);
                        if (DWORD2(v370) >= (unint64_t)HIDWORD(v370))
                        {
                          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v370, (uint64_t)&v371, DWORD2(v370) + 1, 8);
                          uint64_t v88 = DWORD2(v370);
                        }
                        *(void *)(v370 + 8 * v88) = v87;
                        ++DWORD2(v370);
                        char v9 = v86;
                      }
                      if (v368[0] == 1) {
                        (*((void (**)(void, uint64_t, void))&v367 + 1))(v367, 3, 0);
                      }
                      if (v85 == 1) {
                        break;
                      }
                      if (v82 == ++v83) {
                        goto LABEL_253;
                      }
                    }
                    char v72 = 0;
                    long long v64 = v345;
                    uint64_t v7 = v77;
                  }
                  else
                  {
                    int v73 = 0;
LABEL_253:
                    uint64_t v89 = (*v9)[11];
                    long long v64 = v345;
                    if ((*v9)[10] == v89) {
LABEL_984:
                    }
                      swift::fatalError(0, "endPackExpansion() without beginPackExpansion()\n", v80, v81);
                    uint64_t v7 = v77;
                    (*v9)[11] = (swift::Demangle::__runtime::Node *)((char *)v89 - 16);
                    char v72 = 1;
                  }
                }
                if (LOWORD(v376[0]) == 1) {
                  ((void (*)(swift::Demangle::__runtime::Node ***, uint64_t, void))v375)(v374, 3, 0);
                }
                if ((v72 & 1) == 0) {
                  goto LABEL_259;
                }
                goto LABEL_206;
              default:
LABEL_551:
                operator new();
            }
          }
          int v74 = LOWORD(v376[0]);
          if (LOWORD(v376[0]) == 1)
          {
            unint64_t v8 = (uint64_t ***)v375;
            uint64_t v7 = ((uint64_t (*)(swift::Demangle::__runtime::Node ***, uint64_t, void))v375)(v374, 2, 0);
            int v73 = 1;
          }
          else
          {
            if (LOWORD(v376[0])) {
              int v75 = 0;
            }
            else {
              int v75 = v374;
            }
            uint64_t v76 = DWORD2(v370);
            if (DWORD2(v370) >= (unint64_t)HIDWORD(v370))
            {
              __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v370, (uint64_t)&v371, DWORD2(v370) + 1, 8);
              uint64_t v76 = DWORD2(v370);
            }
            int v73 = 0;
            *(void *)(v370 + 8 * v76) = v75;
            ++DWORD2(v370);
          }
          if (LOWORD(v376[0]) == 1) {
            ((void (*)(swift::Demangle::__runtime::Node ***, uint64_t, void))v375)(v374, 3, 0);
          }
          if (v74 == 1)
          {
LABEL_259:
            if (v73)
            {
              *(_WORD *)(v347 + 16) = 1;
              *(void *)(v347 + 8) = v8;
              *(void *)uint64_t v347 = ((uint64_t (*)(uint64_t, uint64_t, void))v8)(v7, 2, 0);
              ((void (*)(uint64_t, uint64_t, void))v8)(v7, 3, 0);
              goto LABEL_578;
            }
          }
          else
          {
LABEL_206:
            v7 &= 0xFFFFFFFFFFFFFF00;
          }
          if (++v25 == v64)
          {
            int v10 = *v336;
            goto LABEL_262;
          }
        }
      case 0xE5:
        operator new();
      case 0xE8:
        int v16 = *((unsigned __int8 *)v8 + 18);
        if ((v16 - 1) < 2) {
          goto LABEL_50;
        }
        if (v16 != 5 || !*((_DWORD *)v8 + 2)) {
          operator new();
        }
        goto LABEL_49;
      case 0xEC:
        int v18 = *((unsigned __int8 *)v8 + 18);
        if ((v18 - 1) < 2) {
          goto LABEL_50;
        }
        if (v18 != 5 || !*((_DWORD *)v8 + 2)) {
          operator new();
        }
        goto LABEL_49;
      case 0xF7:
        switch(*((unsigned char *)v8 + 18))
        {
          case 1:
          case 2:
            goto LABEL_420;
          case 5:
            if (!*((_DWORD *)v8 + 2)) {
              goto LABEL_633;
            }
            unint64_t v8 = (uint64_t ***)*v8;
LABEL_420:
            if ((unsigned __int16)v371 == 1) {
              goto LABEL_426;
            }
            uint64_t v133 = *v9;
            if ((_WORD)v371)
            {
              *((unsigned char *)v133 + 72) |= 1u;
              goto LABEL_272;
            }
            uint64_t v194 = v370;
            char v195 = *((unsigned char *)v133 + 72) | 1;
            break;
          default:
LABEL_633:
            operator new();
        }
        goto LABEL_629;
      case 0xF8:
        switch(*((unsigned char *)v8 + 18))
        {
          case 1:
          case 2:
            goto LABEL_409;
          case 5:
            if (!*((_DWORD *)v8 + 2)) {
              goto LABEL_632;
            }
            unint64_t v8 = (uint64_t ***)*v8;
LABEL_409:
            if ((unsigned __int16)v371 == 1) {
              goto LABEL_426;
            }
            uint64_t v133 = *v9;
            if ((_WORD)v371)
            {
              *((unsigned char *)v133 + 72) |= 2u;
              goto LABEL_272;
            }
            uint64_t v194 = v370;
            char v195 = *((unsigned char *)v133 + 72) | 2;
            break;
          default:
LABEL_632:
            operator new();
        }
        goto LABEL_629;
      case 0xF9:
        switch(*((unsigned char *)v8 + 18))
        {
          case 1:
          case 2:
            goto LABEL_425;
          case 5:
            if (!*((_DWORD *)v8 + 2)) {
              goto LABEL_634;
            }
            unint64_t v8 = (uint64_t ***)*v8;
LABEL_425:
            if ((unsigned __int16)v371 == 1)
            {
LABEL_426:
              *((_WORD *)a4 + 8) = 1;
              *(_OWORD *)a4 = v370;
              return;
            }
            uint64_t v133 = *v9;
            if ((_WORD)v371)
            {
              *((unsigned char *)v133 + 72) |= 4u;
              goto LABEL_272;
            }
            uint64_t v194 = v370;
            char v195 = *((unsigned char *)v133 + 72) | 4;
            break;
          default:
LABEL_634:
            operator new();
        }
LABEL_629:
        *((unsigned char *)v133 + 72) = v195;
        *((_WORD *)a4 + 8) = 0;
        *a4 = v194;
        if (!v194)
        {
LABEL_272:
          *a4 = "unknown error";
          a4[1] = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *((_WORD *)a4 + 8) = 1;
        }
        return;
      case 0x127:
        switch(*((unsigned char *)v8 + 18))
        {
          case 1:
          case 2:
            goto LABEL_441;
          case 5:
            if (!*((_DWORD *)v8 + 2)) {
              goto LABEL_430;
            }
            goto LABEL_440;
          default:
LABEL_430:
            operator new();
        }
      case 0x128:
        switch(*((unsigned char *)v8 + 18))
        {
          case 1:
          case 2:
            goto LABEL_441;
          case 5:
            if (!*((_DWORD *)v8 + 2)) {
              goto LABEL_432;
            }
            goto LABEL_440;
          default:
LABEL_432:
            operator new();
        }
      case 0x129:
        switch(*((unsigned char *)v8 + 18))
        {
          case 2:
            unint64_t v136 = v8;
            goto LABEL_596;
          case 5:
            if (*((_DWORD *)v8 + 2) <= 1u) {
              goto LABEL_435;
            }
            unint64_t v136 = *v8;
LABEL_596:
            uint64_t v183 = (v7 + 1);
            if ((unsigned __int16)v371 == 1)
            {
LABEL_597:
              *((_WORD *)a4 + 8) = 1;
              *(_OWORD *)a4 = v370;
              *((void *)&v370 + 1) = swift::TypeLookupError::nop;
              *(void *)&long long v370 = 0;
              ((void (*)(void, uint64_t, void))swift::TypeLookupError::nop)(0, 3, 0);
              return;
            }
            int v184 = *((unsigned __int8 *)v8 + 18);
            if (v184 == 2) {
              goto LABEL_602;
            }
            if (v184 == 5 && *((_DWORD *)v8 + 2) >= 2u)
            {
              unint64_t v8 = (uint64_t ***)*v8;
LABEL_602:
              long long v185 = v8[1];
            }
            else
            {
              long long v185 = 0;
            }
            if (LOWORD(v376[0]) == 1) {
              uint64_t v198 = (uint64_t (*)())v375;
            }
            else {
              uint64_t v198 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            }
            BOOL v199 = "unknown error";
            if (LOWORD(v376[0]) == 1) {
              BOOL v199 = (const char *)v374;
            }
            *((_WORD *)a4 + 8) = 1;
            *a4 = v199;
            a4[1] = v198;
            break;
          default:
LABEL_435:
            operator new();
        }
        goto LABEL_885;
      case 0x12A:
        switch(*((unsigned char *)v8 + 18))
        {
          case 1:
          case 2:
            goto LABEL_441;
          case 5:
            if (!*((_DWORD *)v8 + 2)) {
              goto LABEL_635;
            }
LABEL_440:
            unint64_t v8 = (uint64_t ***)*v8;
LABEL_441:
            if ((unsigned __int16)v371 == 1) {
              unint64_t v137 = (uint64_t (*)())*((void *)&v370 + 1);
            }
            else {
              unint64_t v137 = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
            }
            size_t v138 = "unknown error";
            if ((unsigned __int16)v371 == 1) {
              size_t v138 = (const char *)v370;
            }
            *((_WORD *)a4 + 8) = 1;
            *a4 = v138;
            a4[1] = v137;
            break;
          default:
LABEL_635:
            operator new();
        }
        return;
      case 0x12C:
        switch(*((unsigned char *)v8 + 18))
        {
          case 5:
            if (*((_DWORD *)v8 + 2) < 3u) {
              goto LABEL_436;
            }
            long long v186 = (*v8)[1];
            if (*((_WORD *)v186 + 8) != 102 || *((unsigned char *)v186 + 18) != 4) {
              operator new();
            }
            char v206 = 0;
            v331 = **v8;
            uint64_t v334 = *v186;
            uint64_t v371 = 0;
            long long v370 = 0uLL;
            if (*((_DWORD *)v8 + 2) >= 3u) {
              char v206 = (*v8)[2];
            }
            unint64_t v207 = 0;
            uint64_t v208 = 0;
            uint64_t v209 = 0;
            uint64_t v210 = 0;
            uint64_t v211 = (v7 + 1);
            v337 = v206;
            break;
          default:
LABEL_436:
            operator new();
        }
        while (2)
        {
          unint64_t v212 = *((unsigned __int8 *)v206 + 18);
          switch(v212)
          {
            case 1:
              break;
            case 5:
              unint64_t v212 = *((unsigned int *)v206 + 2);
              break;
            case 2:
              unint64_t v212 = 2;
              break;
            default:
              goto LABEL_897;
          }
          if (v212 <= v207) {
            goto LABEL_897;
          }
          LODWORD(v374) = (unint64_t)(v209 - v208) >> 3;
          std::vector<unsigned int>::push_back[abi:nn180100]((uint64_t)&v370, &v374);
          unint64_t v213 = *((unsigned __int8 *)v206 + 18);
          unsigned int v214 = v213 - 1;
          switch(v213)
          {
            case 1:
              break;
            case 5:
              unint64_t v213 = *((unsigned int *)v206 + 2);
              break;
            case 2:
              unint64_t v213 = 2;
              break;
            default:
              goto LABEL_694;
          }
          if (v213 > v207)
          {
            uint64_t v215 = (uint64_t)v206;
            if (v214 >= 2) {
              uint64_t v215 = *v206;
            }
            v216 = *(uint64_t **)(v215 + 8 * v207);
LABEL_695:
            if (*((_WORD *)v216 + 8) == 235)
            {
              char v217 = v216 + 2;
              int v218 = *((unsigned __int8 *)v216 + 18);
              unint64_t v219 = v216;
              unint64_t v342 = v207;
              if ((v218 - 1) >= 2)
              {
                if (v218 == 5)
                {
                  uint64_t v220 = *v216;
                  unint64_t v219 = (void *)*v216;
                  goto LABEL_704;
                }
                unint64_t v219 = 0;
              }
              if (v218 == 1)
              {
                char v217 = v216 + 1;
                goto LABEL_707;
              }
              if (v218 == 2)
              {
LABEL_707:
                if (v219 == v217)
                {
LABEL_678:
                  unint64_t v207 = v342 + 1;
                  char v206 = v337;
                  continue;
                }
                v221 = v217;
                v346 = v217;
                while (1)
                {
                  int v222 = *((unsigned __int16 *)a4 + 8);
                  if (a4 && v222 == 1) {
                    goto LABEL_903;
                  }
                  uint64_t v223 = *((_WORD *)a4 + 8) ? 0 : *a4;
                  if (v209 >= v210) {
                    break;
                  }
                  *(void *)uint64_t v209 = v223;
                  v209 += 8;
LABEL_738:
                  if (v222 == 1) {
                    ((void (*)(void, uint64_t, void))a4[1])(*a4, 3, 0);
                  }
                  if (++v219 == v221) {
                    goto LABEL_678;
                  }
                }
                uint64_t v224 = (v209 - v208) >> 3;
                unint64_t v225 = v224 + 1;
                if ((unint64_t)(v224 + 1) >> 61) {
                  abort();
                }
                if ((v210 - v208) >> 2 > v225) {
                  unint64_t v225 = (v210 - v208) >> 2;
                }
                unint64_t v226 = 0x1FFFFFFFFFFFFFFFLL;
                if ((unint64_t)(v210 - v208) < 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v226 = v225;
                }
                unint64_t v352 = v226;
                if (v226)
                {
                  if (v226 >> 61) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  v227 = a4;
                  v228 = operator new(8 * v226);
                }
                else
                {
                  v227 = a4;
                  v228 = 0;
                }
                unint64_t v229 = &v228[8 * v224];
                *(void *)unint64_t v229 = v223;
                unint64_t v230 = v229 + 8;
                if (v209 == v208)
                {
                  uint64_t v208 = &v228[8 * v224];
                  v221 = v346;
                  unint64_t v234 = v352;
                  goto LABEL_735;
                }
                unint64_t v231 = v209 - v208 - 8;
                if (v231 >= 0x168
                  && (unint64_t v232 = (v209 - 8 - v208) & 0xFFFFFFFFFFFFFFF8,
                      &v228[v209 - v208 - 8 - v232] <= &v228[v209 - v208 - 8])
                  && &v209[-v232 - 8] <= v209 - 8
                  && (unint64_t)(v208 - v228) >= 0x20)
                {
                  uint64_t v236 = (v231 >> 3) + 1;
                  uint64_t v237 = 8 * (v236 & 0x3FFFFFFFFFFFFFFCLL);
                  unint64_t v233 = &v209[-v237];
                  v229 -= v237;
                  uint64_t v238 = &v228[8 * v224 - 16];
                  BOOL v239 = v209 - 16;
                  uint64_t v240 = v236 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v241 = *(_OWORD *)v239;
                    *(v238 - 1) = *((_OWORD *)v239 - 1);
                    *uint64_t v238 = v241;
                    v238 -= 2;
                    v239 -= 32;
                    v240 -= 4;
                  }
                  while (v240);
                  v221 = v346;
                  unint64_t v234 = v352;
                  if (v236 == (v236 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_733;
                  }
                }
                else
                {
                  unint64_t v233 = v209;
                  v221 = v346;
                  unint64_t v234 = v352;
                }
                do
                {
                  uint64_t v235 = *((void *)v233 - 1);
                  v233 -= 8;
                  *((void *)v229 - 1) = v235;
                  v229 -= 8;
                }
                while (v233 != v208);
LABEL_733:
                uint64_t v209 = v208;
                uint64_t v208 = v229;
LABEL_735:
                uint64_t v210 = &v228[8 * v234];
                if (v209)
                {
                  operator delete(v209);
                  int v222 = *((unsigned __int16 *)v227 + 8);
                }
                uint64_t v209 = v230;
                a4 = v227;
                char v9 = a1;
                goto LABEL_738;
              }
              if (v218 != 5)
              {
                char v217 = 0;
                goto LABEL_707;
              }
              uint64_t v220 = *v216;
LABEL_704:
              char v217 = (void *)(v220 + 8 * *((unsigned int *)v216 + 2));
              goto LABEL_707;
            }
LABEL_897:
            LODWORD(v374) = (unint64_t)(v209 - v208) >> 3;
            std::vector<unsigned int>::push_back[abi:nn180100]((uint64_t)&v370, &v374);
            uint64_t v289 = 0;
            v290 = 0;
            v374 = 0;
            uint64_t v375 = 0;
            v376[0] = 0;
            uint64_t v291 = v370;
            if (*((void *)&v370 + 1) - (void)v370 != 4)
            {
              unint64_t v292 = 0;
              unsigned int v293 = 1;
              do
              {
                uint64_t v294 = *(unsigned int *)(v291 + 4 * v292);
                unint64_t v292 = v293;
                int v295 = *(_DWORD *)(v291 + 4 * v293);
                *(void *)&long long v367 = &v208[8 * v294];
                LODWORD(v363) = v295 - v294;
                std::vector<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack*,unsigned int>((uint64_t)&v374, &v367, (unsigned int *)&v363);
                uint64_t v291 = v370;
                ++v293;
              }
              while (((uint64_t)(*((void *)&v370 + 1) - v370) >> 2) - 1 > v292);
              v290 = v374;
              uint64_t v289 = v375;
            }
            if (v374)
            {
              uint64_t v375 = (uint64_t)v374;
              operator delete(v374);
            }
LABEL_903:
            if ((void)v370)
            {
              *((void *)&v370 + 1) = v370;
              operator delete((void *)v370);
            }
            if (v208) {
              operator delete(v208);
            }
            return;
          }
          break;
        }
LABEL_694:
        v216 = 0;
        goto LABEL_695;
      case 0x152:
        int v38 = *((unsigned __int8 *)v8 + 18);
        if (v38 == 2)
        {
          uint64_t v125 = (uint64_t)*v8;
          *(void *)&long long v370 = &v371;
          *((void *)&v370 + 1) = 0x800000000;
        }
        else
        {
          if (v38 != 5 || *((_DWORD *)v8 + 2) < 2u) {
            operator new();
          }
          uint64_t v125 = (uint64_t)**v8;
          *(void *)&long long v370 = &v371;
          *((void *)&v370 + 1) = 0x800000000;
          if (*((_DWORD *)v8 + 2) < 2u)
          {
            long long v174 = 0;
LABEL_565:
            if (LOBYTE(v376[0]))
            {
              *((_WORD *)a4 + 8) = 1;
              long long v176 = v374;
              long long v175 = (uint64_t (*)(swift::Demangle::__runtime::Node ***, uint64_t, void))v375;
              a4[1] = v375;
              *a4 = v175(v176, 2, 0);
              v175(v176, 3, 0);
            }
            else
            {
            }
            long long v57 = (swift::Demangle::__runtime::Node ***)v370;
            if ((uint64_t *)v370 == &v371) {
              return;
            }
            goto LABEL_893;
          }
          unint64_t v8 = (uint64_t ***)*v8;
        }
        long long v174 = (uint64_t *)v8[1];
        goto LABEL_565;
      default:
        operator new();
    }
  }
}

unint64_t anonymous namespace'::DecodedMetadataBuilder::createObjCClassType@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  Class Class = objc_getClass(a1);
  unint64_t result = swift_getObjCClassMetadata((unint64_t)Class);
  *(_WORD *)(a2 + 16) = 0;
  *(void *)a2 = result;
  if (!result)
  {
    *(void *)a2 = "unknown error";
    *(void *)(a2 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a2 + 16) = 1;
  }
  return result;
}

swift::Demangle::__runtime::Node ***swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledTypeDecl@<X0>(swift::Demangle::__runtime::Node *a1@<X1>, swift::Demangle::__runtime::Node ***result@<X0>, unsigned int a3@<W2>, swift::Demangle::__runtime::Node ****a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  if (a3 > 0x400)
  {
LABEL_2:
    uint64_t v7 = "Mangled type is too complex";
LABEL_3:
    *(void *)a6 = v7;
    *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(unsigned char *)(a6 + 16) = 1;
    return result;
  }
  int v11 = result;
  uint64_t v12 = a3 + 1;
  while (1)
  {
    int v13 = *((unsigned __int16 *)a1 + 8);
    if (v13 != 232) {
      break;
    }
    int v14 = *((unsigned __int8 *)a1 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !*((_DWORD *)a1 + 2))
      {
        a1 = 0;
        goto LABEL_8;
      }
      a1 = *(swift::Demangle::__runtime::Node **)a1;
    }
    a1 = *(swift::Demangle::__runtime::Node **)a1;
LABEL_8:
    uint64_t v12 = (v12 + 1);
    if (v12 == 1026) {
      goto LABEL_2;
    }
  }
  if (v13 != 233)
  {
    char v15 = a1;
    switch(*((unsigned char *)a1 + 18))
    {
      case 2:
        goto LABEL_21;
      case 5:
        if (*((_DWORD *)a1 + 2) <= 1u) {
          goto LABEL_19;
        }
        char v15 = *(swift::Demangle::__runtime::Node **)a1;
LABEL_21:
        int v16 = *(uint64_t **)v15;
        int v17 = *(unsigned __int16 *)(*(void *)v15 + 16);
        if (v17 == 153) {
          break;
        }
        if (v17 == 71)
        {
          int v18 = *((unsigned __int8 *)v16 + 18);
          if (v18 != 2)
          {
            if (v18 != 5 || *((_DWORD *)v16 + 2) < 2u) {
              operator new();
            }
            int v16 = (uint64_t *)*v16;
          }
          int v16 = (uint64_t *)v16[1];
        }
        int v19 = v21;
        if (v21)
        {
          *a5 = 0;
          if (v19 == 1) {
            ((void (*)(void, uint64_t, void))v20[1])(v20[0], 3, 0);
          }
        }
        else
        {
          *a5 = v20[0];
        }
        unint64_t result = (swift::Demangle::__runtime::Node ***)swift::Demangle::__runtime::getUnspecialized((unint64_t)a1, **v11, (uint64_t)v20);
        if (LODWORD(v20[0]))
        {
          uint64_t v7 = "Failed to unspecialize type";
          goto LABEL_3;
        }
        a1 = v22;
        break;
      default:
LABEL_19:
        operator new();
    }
  }
  unint64_t result = (swift::Demangle::__runtime::Node ***)_findContextDescriptor(a1, **v11);
  *a4 = result;
  if (!result)
  {
    uint64_t v7 = "Failed to create type decl";
    goto LABEL_3;
  }
  *(unsigned char *)a6 = 0;
  *(unsigned char *)(a6 + 16) = 0;
  return result;
}

void *swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeGenericArgs@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a2 + 2;
  if (*((_WORD *)a2 + 8) != 235) {
    operator new();
  }
  char v9 = result;
  int v10 = *((unsigned __int8 *)a2 + 18);
  int v11 = a2;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      uint64_t v12 = *a2;
      int v11 = (uint64_t *)*a2;
      goto LABEL_11;
    }
    int v11 = 0;
  }
  switch(v10)
  {
    case 1:
      uint64_t v6 = a2 + 1;
      if (v11 != a2 + 1) {
        goto LABEL_16;
      }
      goto LABEL_28;
    case 2:
      goto LABEL_16;
    case 5:
      uint64_t v12 = *a2;
LABEL_11:
      uint64_t v6 = (uint64_t *)(v12 + 8 * *((unsigned int *)a2 + 2));
      if (v11 != v6) {
        goto LABEL_16;
      }
      goto LABEL_28;
  }
  uint64_t v6 = 0;
  if (!v11)
  {
LABEL_28:
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 16) = 0;
    return result;
  }
  while (1)
  {
LABEL_16:
    int v13 = v20;
    if (v20 == 1)
    {
      uint64_t v14 = v18;
      char v15 = v19;
      *(void *)(a5 + 8) = v19;
      unint64_t result = (void *)v15(v14, 2, 0);
      *(void *)a5 = result;
      *(unsigned char *)(a5 + 16) = 1;
    }
    else
    {
      if (v20) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v18;
      }
      unint64_t v17 = *(unsigned int *)(a4 + 8);
      if (v17 >= *(unsigned int *)(a4 + 12))
      {
        unint64_t result = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v17 + 1, 8);
        unint64_t v17 = *(unsigned int *)(a4 + 8);
      }
      *(void *)(*(void *)a4 + 8 * v17) = v16;
      ++*(_DWORD *)(a4 + 8);
    }
    if (v20 == 1) {
      unint64_t result = (void *)v19(v18, 3, 0);
    }
    if (v13 == 1) {
      return result;
    }
    if (++v11 == v6) {
      goto LABEL_28;
    }
  }
}

void anonymous namespace'::DecodedMetadataBuilder::createBoundGenericType(uint64_t *a1@<X0>, _DWORD *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  if (a2 && (*a2 & 0x10) != 0)
  {
    if (a5) {
      operator new();
    }
    v23[0] = v24;
    v23[1] = (void *)0x800000000;
    unsigned __int16 v20 = v22;
    uint64_t v21 = 0x800000000;
    _gatherGenericParameters((uint64_t)a2, a3, a4, a5, (uint64_t)v23, (uint64_t)&v20, *a1, (uint64_t)&v17);
    if (v19)
    {
      *(_WORD *)(a6 + 16) = 1;
      uint64_t v8 = v17;
      char v9 = v18;
      *(void *)(a6 + 8) = v18;
      *(void *)a6 = v9(v8, 2, 0);
      v9(v8, 3, 0);
    }
    else
    {
      uint64_t v13 = (int)a2[3];
      uint64_t v12 = a2 + 3;
      uint64_t v11 = v13;
      if (!v13 || !(_DWORD *)((char *)v12 + v11)) {
        goto LABEL_20;
      }
      uint64_t v14 = (_DWORD *)((char *)v12 + v11);
      char v15 = v20;
      switch((int)v21)
      {
        case 1:
          char v15 = *(void **)v20;
          goto LABEL_15;
        case 2:
          uint64_t v16 = ((uint64_t (*)(uint64_t, void, void))v14)(255, *(void *)v20, *((void *)v20 + 1));
          break;
        case 3:
          uint64_t v16 = ((uint64_t (*)(uint64_t, void, void, void))v14)(255, *(void *)v20, *((void *)v20 + 1), *((void *)v20 + 2));
          break;
        default:
LABEL_15:
          uint64_t v16 = ((uint64_t (*)(uint64_t, void *))v14)(255, v15);
          break;
      }
      *(_WORD *)(a6 + 16) = 0;
      *(void *)a6 = v16;
      if (!v16)
      {
LABEL_20:
        *(void *)a6 = "unknown error";
        *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
        *(_WORD *)(a6 + 16) = 1;
      }
    }
    if (v20 != v22) {
      free(v20);
    }
    if (v23[0] != v24) {
      free(v23[0]);
    }
  }
  else if (!a2 {
         || (*a2 & 0x1F) != 3
  }
         || (SimpleProtocolTypeMetadata = swift::_getSimpleProtocolTypeMetadata(a2),
             *(_WORD *)(a6 + 16) = 0,
             (*(void *)a6 = SimpleProtocolTypeMetadata) == 0))
  {
    *(void *)a6 = "unknown error";
    *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a6 + 16) = 1;
  }
}

uint64_t anonymous namespace'::DecodedMetadataBuilder::createBuiltinType@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 2:
      switch(*(_WORD *)result)
      {
        case 0x7742:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Word;
          break;
        case 0x6F42:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.NativeObject;
          break;
        case 0x6242:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.BridgeObject;
          break;
        case 0x7042:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.RawPointer;
          break;
        case 0x4242:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.UnsafeValueBuffer;
          break;
        case 0x4F42:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.UnknownObject;
          break;
        case 0x6342:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.RawUnsafeContinuation;
          break;
        case 0x4442:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.DefaultActorStorage;
          break;
        case 0x6442:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.NonDefaultDistributedActorStorage;
          break;
        case 0x6542:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Executor;
          break;
        case 0x6A42:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Job;
          break;
        default:
          goto LABEL_74;
      }
      goto LABEL_293;
    case 4:
      switch(*(_DWORD *)result)
      {
        case 0x5F316942:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Int1;
          break;
        case 0x5F376942:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Int7;
          break;
        case 0x5F386942:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int8;
          break;
        default:
          goto LABEL_74;
      }
      goto LABEL_293;
    case 5:
      if (*(_DWORD *)result == 909207874 && *(unsigned char *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int16;
        goto LABEL_293;
      }
      if (*(_DWORD *)result == 842230082 && *(unsigned char *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int32;
        goto LABEL_293;
      }
      if (*(_DWORD *)result == 859203906 && *(unsigned char *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Int63;
        goto LABEL_293;
      }
      if (*(_DWORD *)result == 875981122 && *(unsigned char *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int64;
        goto LABEL_293;
      }
      if (*(_DWORD *)result == 909207106 && *(unsigned char *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.FPIEEE16;
        goto LABEL_293;
      }
      if (*(_DWORD *)result == 842229314 && *(unsigned char *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.FPIEEE32;
        goto LABEL_293;
      }
      if (*(_DWORD *)result == 875980354 && *(unsigned char *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.FPIEEE64;
        goto LABEL_293;
      }
      if (*(_DWORD *)result == 809002562 && *(unsigned char *)(result + 4) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.FPIEEE80;
        goto LABEL_293;
      }
      goto LABEL_74;
    case 6:
      if (*(_DWORD *)result == 842099010 && *(_WORD *)(result + 4) == 24376)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = (uint64_t (***)())&type metadata for Builtin.Int128;
        goto LABEL_293;
      }
      if (*(_DWORD *)result == 892496194 && *(_WORD *)(result + 4) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Int256;
        goto LABEL_293;
      }
      if (*(_DWORD *)result == 825583938 && *(_WORD *)(result + 4) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Int512;
        goto LABEL_293;
      }
      if (*(_DWORD *)result == 842098242 && *(_WORD *)(result + 4) == 24376)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.FPIEEE128;
        goto LABEL_293;
      }
      goto LABEL_74;
    case 8:
      switch(*(void *)result)
      {
        case 0x5F3276425F386942:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Vec2xInt8;
          break;
        case 0x5F3376425F386942:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Vec3xInt8;
          break;
        case 0x5F3476425F386942:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Vec4xInt8;
          break;
        case 0x5F3876425F386942:
          *(_WORD *)(a3 + 16) = 0;
          uint64_t v3 = &type metadata for Builtin.Vec8xInt8;
          break;
        default:
          goto LABEL_74;
      }
      goto LABEL_293;
    case 9:
      if (*(void *)result == 0x363176425F386942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xInt8;
        goto LABEL_293;
      }
      if (*(void *)result == 0x323376425F386942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xInt8;
        goto LABEL_293;
      }
      if (*(void *)result == 0x343676425F386942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xInt8;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3276425F36316942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec2xInt16;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3376425F36316942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec3xInt16;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3476425F36316942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec4xInt16;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3876425F36316942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec8xInt16;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3276425F32336942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec2xInt32;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3376425F32336942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec3xInt32;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3476425F32336942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec4xInt32;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3876425F32336942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec8xInt32;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3276425F34366942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec2xInt64;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3376425F34366942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec3xInt64;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3476425F34366942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec4xInt64;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3876425F34366942 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec8xInt64;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3276425F32336642 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec2xFPIEEE32;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3376425F32336642 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec3xFPIEEE32;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3476425F32336642 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec4xFPIEEE32;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3876425F32336642 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec8xFPIEEE32;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3276425F34366642 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec2xFPIEEE64;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3376425F34366642 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec3xFPIEEE64;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3476425F34366642 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec4xFPIEEE64;
        goto LABEL_293;
      }
      if (*(void *)result == 0x3876425F34366642 && *(unsigned char *)(result + 8) == 95)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec8xFPIEEE64;
        goto LABEL_293;
      }
      goto LABEL_74;
    case 10:
      if (*(void *)result == 0x3176425F36316942 && *(_WORD *)(result + 8) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xInt16;
      }
      else if (*(void *)result == 0x3376425F36316942 && *(_WORD *)(result + 8) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xInt16;
      }
      else if (*(void *)result == 0x3676425F36316942 && *(_WORD *)(result + 8) == 24372)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xInt16;
      }
      else if (*(void *)result == 0x3176425F32336942 && *(_WORD *)(result + 8) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xInt32;
      }
      else if (*(void *)result == 0x3376425F32336942 && *(_WORD *)(result + 8) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xInt32;
      }
      else if (*(void *)result == 0x3676425F32336942 && *(_WORD *)(result + 8) == 24372)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xInt32;
      }
      else if (*(void *)result == 0x3176425F34366942 && *(_WORD *)(result + 8) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xInt64;
      }
      else if (*(void *)result == 0x3376425F34366942 && *(_WORD *)(result + 8) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xInt64;
      }
      else if (*(void *)result == 0x3676425F34366942 && *(_WORD *)(result + 8) == 24372)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xInt64;
      }
      else if (*(void *)result == 0x3176425F32336642 && *(_WORD *)(result + 8) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xFPIEEE32;
      }
      else if (*(void *)result == 0x3376425F32336642 && *(_WORD *)(result + 8) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xFPIEEE32;
      }
      else if (*(void *)result == 0x3676425F32336642 && *(_WORD *)(result + 8) == 24372)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xFPIEEE32;
      }
      else if (*(void *)result == 0x3176425F34366642 && *(_WORD *)(result + 8) == 24374)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec16xFPIEEE64;
      }
      else if (*(void *)result == 0x3376425F34366642 && *(_WORD *)(result + 8) == 24370)
      {
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec32xFPIEEE64;
      }
      else
      {
        if (*(void *)result != 0x3676425F34366642 || *(_WORD *)(result + 8) != 24372)
        {
LABEL_74:
          *(void *)a3 = "unknown error";
          *(void *)(a3 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
          *(_WORD *)(a3 + 16) = 1;
          return result;
        }
        *(_WORD *)(a3 + 16) = 0;
        uint64_t v3 = &type metadata for Builtin.Vec64xFPIEEE64;
      }
LABEL_293:
      *(void *)a3 = v3 + 1;
      return result;
    default:
      goto LABEL_74;
  }
}

unint64_t anonymous namespace'::DecodedMetadataBuilder::createMetatypeType@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1 || (a1 & 1) != 0) {
    operator new();
  }
  unint64_t result = swift_getMetatypeMetadata(a1);
  *(_WORD *)(a2 + 16) = 0;
  *(void *)a2 = result;
  if (!result)
  {
    *(void *)a2 = "unknown error";
    *(void *)(a2 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a2 + 16) = 1;
  }
  return result;
}

unint64_t anonymous namespace'::DecodedMetadataBuilder::createExistentialMetatypeType@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1 || (a1 & 1) != 0) {
    operator new();
  }
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1 > 0x7FFuLL) {
    LODWORD(v3) = 0;
  }
  if (v3 != 771 && v3 != 774) {
    operator new();
  }
  unint64_t result = swift_getExistentialMetatypeMetadata(a1);
  *(_WORD *)(a2 + 16) = 0;
  *(void *)a2 = result;
  if (!result)
  {
    *(void *)a2 = "unknown error";
    *(void *)(a2 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a2 + 16) = 1;
  }
  return result;
}

void anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = *(unsigned __int16 *)(a1 + 16);
  if (v7 == 337)
  {
    ExtendedExistentialTypeShape = (char *)swift_getExtendedExistentialTypeShape(*(const char **)a1);
    if (ExtendedExistentialTypeShape)
    {
LABEL_4:
      char v9 = (unsigned int *)ExtendedExistentialTypeShape;
      goto LABEL_7;
    }
  }
  else
  {
    if (v7 != 336) {
      operator new();
    }
    ExtendedExistentialTypeShape = *(char **)a1;
    if (*(void *)a1) {
      goto LABEL_4;
    }
  }
  char v9 = 0;
LABEL_7:
  swift::TargetExtendedExistentialTypeShape<swift::InProcess>::getGeneralizationSignature(v9, (uint64_t)v33);
  if (a3 != v33[0]) {
    operator new();
  }
  int32x4_t v30 = v32;
  uint64_t v31 = 0x800000000;
  if (a3)
  {
    unsigned int v12 = 0;
    uint64_t v13 = 8 * a3;
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = *v14;
      if (*v14) {
        BOOL v16 = (*v14 & 1) == 0;
      }
      else {
        BOOL v16 = 0;
      }
      if (!v16) {
        swift::fatalError(0, "Expected metadata but got a metadata pack\n", v10, v11);
      }
      if (v12 >= HIDWORD(v31))
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v12 + 1, 8);
        unsigned int v12 = v31;
      }
      *((void *)v30 + v12) = v15;
      unsigned int v12 = v31 + 1;
      LODWORD(v31) = v31 + 1;
      ++v14;
      v13 -= 8;
    }
    while (v13);
    uint64_t v17 = v33[0];
  }
  else
  {
    uint64_t v17 = 0;
  }
  v25[0] = &unk_1ECA06AA0;
  v25[1] = a2;
  void v25[2] = a3;
  uint16x8_t v26 = v25;
  v23[0] = &unk_1ECA06AE8;
  v23[1] = a2;
  v23[2] = a3;
  int v24 = v23;
  v21[0] = &unk_1ECA06B30;
  int v22 = v21;
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, void, void **, void *, void *, void *))swift::_checkGenericRequirements)(&v27, v34, v17, v35, v33[1], &v30, v25, v23, v21);
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
  }
  else if (v22)
  {
    (*(void (**)(void))(*v22 + 40))();
  }
  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
  }
  else if (v24)
  {
    (*(void (**)(void))(*v24 + 40))();
  }
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
    if (v29)
    {
LABEL_34:
      *(_WORD *)(a4 + 16) = 1;
      uint64_t v18 = v27;
      char v19 = v28;
      *(void *)(a4 + 8) = v28;
      *(void *)a4 = v19(v18, 2, 0);
      goto LABEL_38;
    }
  }
  else
  {
    if (v26) {
      (*(void (**)(void))(*v26 + 40))();
    }
    if (v29) {
      goto LABEL_34;
    }
  }
  ExtendedExistentialTypeMetadata_unique = swift_getExtendedExistentialTypeMetadata_unique((unsigned int *)ExtendedExistentialTypeShape, (uint64_t)v30);
  *(_WORD *)(a4 + 16) = 0;
  *(void *)a4 = ExtendedExistentialTypeMetadata_unique;
  if (!ExtendedExistentialTypeMetadata_unique)
  {
    *(void *)a4 = "unknown error";
    *(void *)(a4 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a4 + 16) = 1;
  }
LABEL_38:
  if (v29) {
    v28(v27, 3, 0);
  }
  if (v30 != v32) {
    free(v30);
  }
}

uint64_t swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledProtocolType(swift::Demangle::__runtime::Node ***a1, int **a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  if (a3 > 0x400) {
    return 0;
  }
  int v6 = a3 - 1025;
  while (1)
  {
    int v8 = *((unsigned __int16 *)a2 + 8);
    int v9 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 232) {
      break;
    }
    if ((v9 - 1) < 2) {
      goto LABEL_7;
    }
    if (v9 == 5 && *((_DWORD *)a2 + 2))
    {
      a2 = (int **)*a2;
LABEL_7:
      a2 = (int **)*a2;
      BOOL v7 = __CFADD__(v6++, 1);
      if (v7) {
        return 0;
      }
    }
    else
    {
      a2 = 0;
      BOOL v7 = __CFADD__(v6++, 1);
      if (v7) {
        return 0;
      }
    }
  }
  if (v9 != 2)
  {
    if (v9 != 5 || ((unsigned int v10 = *((_DWORD *)a2 + 2), v8 == 180) ? (v11 = v10 > 1) : (v11 = 0), !v11))
    {
      if (v8 == 181) {
        goto LABEL_25;
      }
LABEL_24:
      if (v8 != 347) {
        return 0;
      }
LABEL_25:
      uint64_t v13 = *a1;
      if (v8 == 347)
      {
        uint64_t v14 = *(void *)((char *)*a2 + **a2);
        if (v14) {
          return v14 | 1;
        }
      }
LABEL_49:
      uint16x8_t v25 = *v13;
      if (qword_1EB208C50 != -1) {
      uint16x8_t v26 = a2;
      }
      if (*((_WORD *)a2 + 8) == 232)
      {
        int v27 = *((unsigned __int8 *)a2 + 18);
        uint16x8_t v28 = (int ***)a2;
        if ((v27 - 1) < 2) {
          goto LABEL_56;
        }
        if (v27 == 5 && *((_DWORD *)a2 + 2))
        {
          uint16x8_t v28 = (int ***)*a2;
LABEL_56:
          uint16x8_t v26 = *v28;
        }
        else
        {
          uint16x8_t v26 = 0;
        }
      }
      if (*((_WORD *)v26 + 8) == 181)
      {
        if (*v26)
        {
          p_Flags = *v26;
LABEL_240:
          if (p_Flags) {
            return (uint64_t)p_Flags;
          }
        }
        swift::Demangle::__runtime::mangleNodeAsObjcCString((swift::Demangle::__runtime *)a2, *v13, a3);
        if (!__p)
        {
          Protocol = objc_getProtocol((const char *)__src);
          if (Protocol) {
            return (unint64_t)Protocol | 1;
          }
          else {
            return 0;
          }
        }
        return 0;
      }
      int32x4_t v30 = descriptorFromStandardMangling(v26);
      if (v30)
      {
        p_Flags = &v30->Flags;
        goto LABEL_240;
      }
      v148.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      swift::Demangle::__runtime::mangleNode((uint64_t)a2);
      if (__p)
      {
        p_Flags = 0;
        goto LABEL_240;
      }
      if (__src)
      {
        size_t v31 = __len;
        if (__len <= 0x7FFFFFFFFFFFFFF7)
        {
          if (__len >= 0x17)
          {
            size_t v33 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17) {
              size_t v33 = __len | 7;
            }
            size_t v34 = v33 + 1;
            p_dst = (std::string *)operator new(v33 + 1);
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
            p_dst = &__dst;
            if (!__len)
            {
LABEL_75:
              p_dst->__r_.__value_.__s.__data_[v31] = 0;
              goto LABEL_76;
            }
          }
          memmove(p_dst, __src, __len);
          goto LABEL_75;
        }
LABEL_265:
        abort();
      }
      memset(&__dst, 0, sizeof(__dst));
LABEL_76:
      do
      {
        unint64_t explicit = atomic_load_explicit(&qword_1EB208BE0, memory_order_acquire);
        uint64_t v36 = (swift::Demangle::__runtime::Node *)atomic_load_explicit(&qword_1EB208BE8, memory_order_acquire);
        unint64_t v37 = atomic_load_explicit(&dword_1EB208BDC, memory_order_acquire);
      }
      while (explicit != atomic_load_explicit(&qword_1EB208BE0, memory_order_acquire));
      if (explicit) {
        BOOL v38 = v36 == 0;
      }
      else {
        BOOL v38 = 1;
      }
      if (!v38 && v37 != 0)
      {
        if (v40)
        {
          p_Flags = *(int **)(v40 + 16);
          goto LABEL_238;
        }
      }
      int LibPrespecializedTypeDescriptor = swift::getLibPrespecializedTypeDescriptor((swift *)a2, v36);
      p_Flags = v42;
      if (swift::runtime::environment::initializeToken != -1) {
        dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
      }
      if (swift::runtime::environment::SWIFT_DEBUG_VALIDATE_LIB_PRESPECIALIZED_DESCRIPTOR_LOOKUP_variable) {
        BOOL v43 = (LibPrespecializedTypeDescriptor & 0xFFFFFFFE) == 0;
      }
      else {
        BOOL v43 = 0;
      }
      if (!v43)
      {
LABEL_93:
        if (LibPrespecializedTypeDescriptor != 2)
        {
          if (!LibPrespecializedTypeDescriptor)
          {
            if (p_Flags) {
              goto LABEL_136;
            }
            goto LABEL_238;
          }
LABEL_117:
          swift::runtime::trace::protocol_scan_begin((swift::runtime::trace *)a2, (uint64_t)&v148);
          atomic_fetch_add_explicit(&qword_1EB208C08, 1uLL, memory_order_acquire);
          uint64_t v56 = qword_1EB208C10;
          if (qword_1EB208C10)
          {
            unint64_t v57 = atomic_load_explicit((atomic_ullong *volatile)qword_1EB208C10, memory_order_acquire);
            if (v57)
            {
              long long v58 = (int **)(v56 + 8);
              uint64_t v59 = v56 + 8 + 16 * v57;
              while (1)
              {
                int v60 = *v58;
                int v61 = v58[1];
                if (*v58 != v61) {
                  break;
                }
LABEL_120:
                v58 += 2;
                if (v58 == (int **)v59) {
                  goto LABEL_132;
                }
              }
              long long v62 = *v58;
              while (2)
              {
                uint64_t v63 = *v62;
                if ((v63 & 0xFFFFFFFD) != 0)
                {
                  long long v64 = (char **)((char *)v60 + (v63 & 0xFFFFFFFFFFFFFFFCLL));
                  if (v63)
                  {
                    int v65 = *v64;
                    if (*v64)
                    {
LABEL_129:
                      if (v65)
                      {
                        p_Flags = (int *)v65;
                        if (swift::_contextDescriptorMatchesMangling(v65, (const char *)a2)) {
                          goto LABEL_133;
                        }
                      }
                    }
                  }
                  else if (v64)
                  {
                    int v65 = (char *)v60 + (v63 & 0xFFFFFFFFFFFFFFFCLL);
                    goto LABEL_129;
                  }
                }
                ++v62;
                ++v60;
                if (v62 == v61) {
                  goto LABEL_120;
                }
                continue;
              }
            }
          }
LABEL_132:
          p_Flags = 0;
LABEL_133:
          atomic_fetch_add_explicit(&qword_1EB208C08, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
          os_signpost_id_t v66 = v148.__r_.__value_.__r.__words[0];
          if (v148.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            long long v67 = swift::runtime::trace::ScanLog;
            if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
            {
              *(_DWORD *)buf = 134217984;
              int v150 = p_Flags;
              _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v67, OS_SIGNPOST_INTERVAL_END, v66, "section_scan", "result=%p", buf, 0xCu);
            }
          }
LABEL_136:
          if (!p_Flags)
          {
LABEL_238:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            goto LABEL_240;
          }
LABEL_137:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v141, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else {
            std::string v141 = __dst;
          }
          os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB208BF0);
          uint64_t v68 = qword_1EB208BE8;
          uint64_t v135 = qword_1EB208BE8 & 3;
          BOOL v69 = v135 == 0;
          if ((qword_1EB208BE8 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
            BOOL v69 = 1;
          }
          BOOL v132 = v69;
          unint64_t v133 = qword_1EB208BE8 & 0xFFFFFFFFFFFFFFFCLL;
          if (v69) {
            int v70 = 4;
          }
          else {
            int v70 = *(unsigned __int8 *)(qword_1EB208BE8 & 0xFFFFFFFFFFFFFFFCLL);
          }
          unint64_t v71 = dword_1EB208BDC;
          char v72 = (_DWORD *)qword_1EB208BE0;
          if (qword_1EB208BE0) {
            uint64_t v73 = qword_1EB208BE0 + 8;
          }
          else {
            uint64_t v73 = 0;
          }
          {
            __dmb(0xBu);
            {
              int v75 = (void **)qword_1EB208BF8;
              if (qword_1EB208BF8)
              {
                do
                {
                  uint64_t v76 = (void **)*v75;
                  free(v75[1]);
                  free(v75);
                  int v75 = v76;
                }
                while (v76);
              }
              goto LABEL_235;
            }
          }
          else
          {
            uint64_t v137 = v73;
            unint64_t v134 = v68;
            uint64_t v130 = (v71 + 1);
            uint64_t v131 = v72;
            uint64_t v129 = v72 + 2;
            if ((1 << v70) / (unint64_t)((1 << v70) - v130) < 4)
            {
              unint64_t v85 = v68;
            }
            else
            {
              unsigned int v77 = (v70 + 1);
              char v139 = v70;
              if (v77 >= 0x11) {
                unsigned int v78 = 4;
              }
              else {
                unsigned int v78 = 2;
              }
              if (v77 < 9) {
                size_t v79 = 1;
              }
              else {
                size_t v79 = v78;
              }
              unint64_t v80 = (unint64_t)malloc_type_calloc(2 << v70, v79, 0x4269077AuLL);
              if (!v80) {
                swift::hashable_support::findHashableBaseTypeOfHashableType();
              }
              uint64_t v81 = v73;
              unint64_t v128 = v71;
              if (v79 != 1)
              {
                if (v79 == 4) {
                  size_t v79 = 3;
                }
                else {
                  size_t v79 = 2;
                }
              }
              unint64_t v85 = v79 | v80;
              *(unsigned char *)unint64_t v80 = v70 + 1;
              if (v70)
              {
                uint64_t v86 = ~(-2 << v70);
                uint64_t v138 = v68 & 3;
                unint64_t v87 = v133;
                if (!v135) {
                  unint64_t v87 = 0;
                }
                unint64_t v136 = v87;
                int v88 = v85 & 3;
                if ((v85 & 3) != 0) {
                  unint64_t v89 = v80 & 0xFFFFFFFFFFFFFFFCLL;
                }
                else {
                  unint64_t v89 = 0;
                }
                unint64_t v90 = 1;
                do
                {
                  switch(v138)
                  {
                    case 0:
                      uint64_t v91 = (v134 >> (4 * v90)) & 0xF;
                      break;
                    case 1:
                      LODWORD(v91) = *(unsigned __int8 *)(v136 + v90);
                      break;
                    case 2:
                      LODWORD(v91) = *(unsigned __int16 *)(v136 + 2 * v90);
                      break;
                    case 3:
                      LODWORD(v91) = *(_DWORD *)(v136 + 4 * v90);
                      break;
                    default:
                      JUMPOUT(0);
                  }
                  if (v91)
                  {
                    for (unint64_t i = __swift::__runtime::llvm::hash_value(*(void **)(v81 + 24 * (v91 - 1)), *(void *)(v81 + 24 * (v91 - 1) + 8)); ; unint64_t i = v94 + 1)
                    {
                      unint64_t v94 = i & v86;
                      if ((i & v86) != 0)
                      {
                        switch(v85 & 3)
                        {
                          case 1uLL:
                            LODWORD(v93) = *(unsigned __int8 *)(v89 + v94);
                            break;
                          case 2uLL:
                            LODWORD(v93) = *(unsigned __int16 *)(v89 + 2 * v94);
                            break;
                          case 3uLL:
                            LODWORD(v93) = *(_DWORD *)(v89 + 4 * v94);
                            break;
                          default:
                            uint64_t v93 = (v85 >> (4 * v94)) & 0xF;
                            break;
                        }
                        if (!v93) {
                          break;
                        }
                      }
                    }
                    if (v88 == 3)
                    {
                      *(_DWORD *)(v89 + 4 * v94) = v91;
                      uint64_t v81 = v137;
                    }
                    else
                    {
                      uint64_t v81 = v137;
                      if (v88 == 2) {
                        *(_WORD *)(v89 + 2 * v94) = v91;
                      }
                      else {
                        *(unsigned char *)(v89 + v94) = v91;
                      }
                    }
                  }
                  ++v90;
                }
                while (!(v90 >> v139));
              }
              atomic_store(v85, (unint64_t *)&qword_1EB208BE8);
              if (!v132)
              {
                uint64_t v95 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
                uint64_t v81 = v137;
                void *v95 = qword_1EB208BF8;
                v95[1] = v133;
                qword_1EB208BF8 = (uint64_t)v95;
              }
              unint64_t v71 = v128;
            }
            unsigned int v96 = v74;
            if (!v131 || (unint64_t v97 = (unint64_t)v131, v71 >= *v131))
            {
              unint64_t v98 = v71 + (v71 >> 2);
              if (v98 <= v71 + 1) {
                unint64_t v98 = v71 + 1;
              }
              size_t v99 = malloc_good_size(24 * v98 + 8);
              unint64_t v100 = malloc_type_malloc(v99, 0x1000D770uLL);
              if (!v100) {
                swift::hashable_support::findHashableBaseTypeOfHashableType();
              }
              unint64_t v97 = (unint64_t)v100;
              _DWORD *v100 = (v99 - 8) / 0x18;
              if (v131)
              {
                memcpy(v100 + 2, v129, 24 * v71);
                int v101 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
                *int v101 = qword_1EB208BF8;
                v101[1] = v131;
                qword_1EB208BF8 = (uint64_t)v101;
              }
              atomic_store(v97, (unint64_t *)&qword_1EB208BE0);
            }
            int v102 = (void *)(v97 + 24 * v71);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v103 = &__dst;
            }
            else {
              char v103 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __dst.__r_.__value_.__l.__size_;
            }
            v102[3] = p_Flags;
            long long v105 = malloc_type_malloc(size, 0xA3F8B2CDuLL);
            memcpy(v105, v103, size);
            v102[1] = v105;
            v102[2] = size;
            atomic_store(v130, (unsigned int *)&dword_1EB208BDC);
            switch((int)v102)
            {
              case 1:
                unint64_t v107 = v85 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v85 & 3) == 0) {
                  unint64_t v107 = 0;
                }
                atomic_store(v130, (unsigned __int8 *)(v107 + v96));
                break;
              case 2:
                unint64_t v106 = v85 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v85 & 3) == 0) {
                  unint64_t v106 = 0;
                }
                atomic_store(v130, (unsigned __int16 *)(v106 + 2 * v96));
                break;
              case 3:
                unint64_t v108 = v85 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v85 & 3) == 0) {
                  unint64_t v108 = 0;
                }
                atomic_store(v130, (unsigned int *)(v108 + 4 * v96));
                break;
              default:
                atomic_store((v130 << (4 * v96)) | v85, (unint64_t *)&qword_1EB208BE8);
                break;
            }
            __dmb(0xBu);
            {
              unsigned int v109 = (void **)qword_1EB208BF8;
              if (qword_1EB208BF8)
              {
                do
                {
                  uint64_t v110 = (void **)*v109;
                  free(v109[1]);
                  free(v109);
                  unsigned int v109 = v110;
                }
                while (v110);
              }
LABEL_235:
              qword_1EB208BF8 = 0;
            }
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB208BF0);
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v141.__r_.__value_.__l.__data_);
          }
          goto LABEL_238;
        }
        swift::runtime::trace::protocol_scan_begin((swift::runtime::trace *)a2, (uint64_t)&v148);
        atomic_fetch_add_explicit(&qword_1EB208C30, 1uLL, memory_order_acquire);
        uint64_t v44 = qword_1EB208C38;
        if (!qword_1EB208C38
          || (unint64_t v45 = atomic_load_explicit((atomic_ullong *volatile)qword_1EB208C38, memory_order_acquire)) == 0)
        {
LABEL_112:
          p_Flags = 0;
LABEL_113:
          atomic_fetch_add_explicit(&qword_1EB208C30, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
          os_signpost_id_t v54 = v148.__r_.__value_.__r.__words[0];
          if (v148.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            long long v55 = swift::runtime::trace::ScanLog;
            if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
            {
              *(_DWORD *)buf = 134217984;
              int v150 = p_Flags;
              _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v55, OS_SIGNPOST_INTERVAL_END, v54, "section_scan", "result=%p", buf, 0xCu);
            }
          }
          if (!p_Flags) {
            goto LABEL_117;
          }
          goto LABEL_137;
        }
        long long v46 = (int **)(v44 + 8);
        uint64_t v47 = v44 + 8 + 16 * v45;
        while (1)
        {
          int v48 = *v46;
          uint64_t v49 = v46[1];
          if (*v46 != v49) {
            break;
          }
LABEL_100:
          v46 += 2;
          if (v46 == (int **)v47) {
            goto LABEL_112;
          }
        }
        int v50 = *v46;
        while (2)
        {
          uint64_t v51 = *v50;
          if ((v51 & 0xFFFFFFFD) != 0)
          {
            uint64_t v52 = (char **)((char *)v48 + (v51 & 0xFFFFFFFFFFFFFFFCLL));
            if (v51)
            {
              uint64_t v53 = *v52;
              if (*v52)
              {
LABEL_109:
                if (v53)
                {
                  p_Flags = (int *)v53;
                  if (swift::_contextDescriptorMatchesMangling(v53, (const char *)a2)) {
                    goto LABEL_113;
                  }
                }
              }
            }
            else if (v52)
            {
              uint64_t v53 = (char *)v48 + (v51 & 0xFFFFFFFFFFFFFFFCLL);
              goto LABEL_109;
            }
          }
          ++v50;
          ++v48;
          if (v50 == v49) {
            goto LABEL_100;
          }
          continue;
        }
      }
      atomic_fetch_add_explicit(&qword_1EB208C30, 1uLL, memory_order_acquire);
      uint64_t v112 = qword_1EB208C38;
      if (qword_1EB208C38)
      {
        unint64_t v113 = atomic_load_explicit((atomic_ullong *volatile)qword_1EB208C38, memory_order_acquire);
        if (v113)
        {
          uint64_t v114 = (int **)(v112 + 8);
          uint64_t v140 = v112 + 8 + 16 * v113;
          while (1)
          {
            int v116 = *v114;
            uint64_t v115 = v114[1];
            if (*v114 != v115) {
              break;
            }
LABEL_249:
            v114 += 2;
            if (v114 == (int **)v140) {
              goto LABEL_261;
            }
          }
          uint64_t v117 = *v114;
          while (2)
          {
            uint64_t v118 = *v117;
            if ((v118 & 0xFFFFFFFD) != 0)
            {
              uint64_t v119 = (char **)((char *)v116 + (v118 & 0xFFFFFFFFFFFFFFFCLL));
              if (v118)
              {
                uint64_t v120 = *v119;
                if (*v119)
                {
LABEL_258:
                  if (v120)
                  {
                    uint64_t v121 = v120;
                    if (swift::_contextDescriptorMatchesMangling(v120, (const char *)a2)) {
                      goto LABEL_262;
                    }
                  }
                }
              }
              else if (v119)
              {
                uint64_t v120 = (char *)v116 + (v118 & 0xFFFFFFFFFFFFFFFCLL);
                goto LABEL_258;
              }
            }
            ++v117;
            ++v116;
            if (v117 == v115) {
              goto LABEL_249;
            }
            continue;
          }
        }
      }
LABEL_261:
      uint64_t v121 = 0;
LABEL_262:
      atomic_fetch_add_explicit(&qword_1EB208C30, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
      if (qword_1EB208CA0 == -1)
      {
        if (v121) {
          goto LABEL_264;
        }
LABEL_268:
        unint64_t v122 = 0;
      }
      else
      {
        dispatch_once_f(&qword_1EB208CA0, &SharedCacheInfo, (dispatch_function_t)swift::Lazy<SharedCacheInfoState>::defaultInitCallback);
        if (!v121) {
          goto LABEL_268;
        }
LABEL_264:
        unint64_t v122 = (unint64_t)v121;
      }
      if (SharedCacheInfo <= v122 && qword_1EB208C98 > v122)
      {
        uint64_t v123 = p_Flags ? (const char *)p_Flags : 0;
        if ((swift::equalContexts(v123, v121) & 1) == 0)
        {
          double NodeTreeAsString = swift::Demangle::__runtime::getNodeTreeAsString((swift::Demangle::__runtime *)a2, &v148);
          if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v127 = &v148;
          }
          else {
            unsigned int v127 = (std::string *)v148.__r_.__value_.__r.__words[0];
          }
          swift::fatalError(0, "Searching for type descriptor, prespecialized descriptor map returned %p, but scan returned %p. Node tree:\n%s", v124, v125, NodeTreeAsString, p_Flags, v121, v127);
        }
      }
      goto LABEL_93;
    }
    if (v10 == 2)
    {
      unsigned int v12 = (unsigned __int16 ***)*a2;
      goto LABEL_30;
    }
    goto LABEL_48;
  }
  unsigned int v12 = (unsigned __int16 ***)a2;
  if (v8 != 180)
  {
    if (v8 != 181) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }
LABEL_30:
  uint64_t v15 = *v12;
  if (*((_WORD *)v15 + 8) != 153
    || v15[1] != (unsigned __int16 *)3
    || ((BOOL v16 = *v15, v17 = *v16, v18 = *((unsigned __int8 *)v16 + 2), v17 == 24415) ? (v19 = v18 == 67) : (v19 = 0), !v19))
  {
LABEL_48:
    uint64_t v13 = *a1;
    goto LABEL_49;
  }
  unsigned __int16 v20 = a2;
  if (v9 == 2)
  {
LABEL_40:
    uint64_t v21 = v20[1];
  }
  else
  {
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      unsigned __int16 v20 = (int **)*a2;
      goto LABEL_40;
    }
    uint64_t v21 = 0;
  }
  if (*((_WORD *)v21 + 8) != 101) {
    goto LABEL_48;
  }
  int v22 = *(const void **)v21;
  if (*(void *)v21)
  {
    size_t v23 = *((void *)v21 + 1);
    if (v23 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_265;
    }
    if (v23 >= 0x17)
    {
      uint64_t v83 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v83 = v23 | 7;
      }
      uint64_t v84 = v83 + 1;
      p_p = operator new(v83 + 1);
      size_t v144 = v23;
      int64_t v145 = v84 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v145) = *((void *)v21 + 1);
      p_p = &__p;
      if (!v23) {
        goto LABEL_169;
      }
    }
    memmove(p_p, v22, v23);
LABEL_169:
    *((unsigned char *)p_p + v23) = 0;
    if (v145 >= 0) {
      uint64_t v82 = (const char *)&__p;
    }
    else {
      uint64_t v82 = (const char *)__p;
    }
  }
  else
  {
    __p = 0;
    size_t v144 = 0;
    uint64_t v82 = (const char *)&__p;
    int64_t v145 = 0;
  }
  unint64_t v3 = (unint64_t)objc_getProtocol(v82) | 1;
  if (SHIBYTE(v145) < 0) {
    operator delete(__p);
  }
  return v3;
}

uint64_t (***anonymous namespace'::DecodedMetadataBuilder::createProtocolCompositionType@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>))()
{
  unsigned int v7 = 0;
  if ((a4 & 1) != 0 || a3)
  {
LABEL_12:
    if (a3) {
      operator new();
    }
  }
  else if (a2)
  {
    uint64_t v8 = 8 * a2;
    int v9 = a1;
    while (1)
    {
      uint64_t v10 = *v9;
      if (*v9) {
        break;
      }
      unint64_t v11 = (v10 & 0xFFFFFFFFFFFFFFFELL) != 0 ? v10 & 0xFFFFFFFFFFFFFFFELL : 0;
      if ((*(unsigned char *)(v11 + 2) & 1) == 0) {
        break;
      }
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        unsigned int v7 = 1;
        goto LABEL_12;
      }
    }
    unsigned int v7 = 0;
  }
  else
  {
    unsigned int v7 = 1;
  }
  unint64_t result = swift_getExistentialTypeMetadata(v7, a3, a2, a1);
  *(_WORD *)(a5 + 16) = 0;
  *(void *)a5 = result;
  if (!result)
  {
    *(void *)a5 = "unknown error";
    *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a5 + 16) = 1;
  }
  return result;
}

uint64_t **swift::Demangle::__runtime::decodeRequirement<swift::MetadataOrPack,anonymous namespace'::DecodedMetadataBuilder::BuiltRequirement,anonymous namespace'::DecodedMetadataBuilder::BuiltInverseRequirement,anonymous namespace'::DecodedMetadataBuilder::BuiltLayoutConstraint,anonymous namespace'::DecodedMetadataBuilder>(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *((unsigned __int8 *)result + 18);
  uint64_t v8 = result;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      int v9 = *result;
      uint64_t v8 = (uint64_t **)*result;
      goto LABEL_9;
    }
    uint64_t v8 = 0;
  }
  switch(v7)
  {
    case 1:
      uint64_t v10 = result + 1;
      if (v8 != result + 1) {
        goto LABEL_21;
      }
      break;
    case 2:
      uint64_t v10 = result + 2;
      if (v8 != result + 2) {
        goto LABEL_21;
      }
      break;
    case 5:
      int v9 = *result;
LABEL_9:
      uint64_t v10 = (uint64_t **)&v9[*((unsigned int *)result + 2)];
      if (v8 == v10) {
        return result;
      }
      while (1)
      {
LABEL_21:
        uint64_t v14 = *v8;
        int v15 = *((unsigned __int16 *)*v8 + 8);
        if (v15 == 37 || v15 == 42) {
          goto LABEL_20;
        }
        int v16 = *((unsigned __int8 *)v14 + 18);
        if (v16 != 2)
        {
          if (v16 != 5 || *((_DWORD *)v14 + 2) != 2) {
            return result;
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        int v17 = (uint64_t *)*v14;
        uint64_t v47 = a4;
        int v18 = (unsigned __int16)v46;
        if ((_WORD)v46)
        {
LABEL_85:
          if (v18 == 1) {
            return (uint64_t **)v45(v44, 3, 0);
          }
          return result;
        }
        BOOL v19 = v44;
        if (!v44) {
          return result;
        }
        unsigned __int16 v20 = *v8;
        int v21 = *((unsigned __int16 *)*v8 + 8);
        if (v21 == 354)
        {
          int v24 = *((unsigned __int8 *)v20 + 18);
          uint16x8_t v25 = *v8;
          if ((v24 - 1) < 2) {
            goto LABEL_41;
          }
          if (v24 == 5 && *((_DWORD *)v20 + 2))
          {
            uint16x8_t v25 = (uint64_t *)*v20;
LABEL_41:
            uint64_t v26 = *v25;
          }
          else
          {
            uint64_t v26 = 0;
          }
          if (*(_WORD *)(v26 + 16) != 232) {
            return result;
          }
          int v40 = *(unsigned __int8 *)(v26 + 18);
          if (v40 != 1 && (v40 != 5 || *(_DWORD *)(v26 + 8) != 1)) {
            return result;
          }
          if (v24 == 5) {
            unsigned __int16 v20 = (uint64_t *)*v20;
          }
          uint64_t v11 = *(unsigned __int8 *)v20[1];
          unint64_t v12 = *(unsigned int *)(a3 + 8);
          if (v12 >= *(unsigned int *)(a3 + 12))
          {
            unint64_t result = (uint64_t **)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 16);
            unint64_t v12 = *(unsigned int *)(a3 + 8);
          }
          uint64_t v13 = (void *)(*(void *)a3 + 16 * v12);
          *uint64_t v13 = v19;
          v13[1] = v11;
          ++*(_DWORD *)(a3 + 8);
          goto LABEL_20;
        }
        if (v21 == 39) {
          break;
        }
        if (v21 == 36)
        {
          int v22 = *((unsigned __int8 *)v20 + 18);
          if (v22 == 2) {
            goto LABEL_36;
          }
          if (v22 == 5 && *((_DWORD *)v20 + 2) >= 2u)
          {
            unsigned __int16 v20 = (uint64_t *)*v20;
LABEL_36:
            uint64_t v23 = v20[1];
          }
          else
          {
            uint64_t v23 = 0;
          }
          uint64_t v47 = a4;
          uint64_t v29 = 1;
LABEL_52:
          int v18 = (unsigned __int16)v46;
          if ((_WORD)v46) {
            goto LABEL_85;
          }
          uint16x8_t v28 = v44;
          if (!v44) {
            return result;
          }
          goto LABEL_54;
        }
        uint16x8_t v28 = 0;
LABEL_54:
        int32x4_t v30 = *v8;
        int v31 = *((unsigned __int16 *)*v8 + 8);
        switch(v31)
        {
          case ')':
            int v32 = *((unsigned __int8 *)v30 + 18);
            if (v32 == 2) {
              goto LABEL_62;
            }
            if (v32 == 5 && *((_DWORD *)v30 + 2) >= 2u)
            {
              int32x4_t v30 = (uint64_t *)*v30;
LABEL_62:
              size_t v33 = (unsigned __int8 **)v30[1];
            }
            else
            {
              size_t v33 = 0;
            }
            if (*((_WORD *)v33 + 8) != 101) {
              return result;
            }
            if (v33[1] != (unsigned __int8 *)1) {
              return result;
            }
            unsigned int v34 = **v33 - 66;
            if (v34 > 0x2B || ((1 << v34) & 0x808000F180FLL) == 0) {
              return result;
            }
            LODWORD(v44) = 3;
            unint64_t v45 = v19;
            goto LABEL_71;
          case '\'':
            LODWORD(v44) = 2;
LABEL_64:
            unint64_t v45 = v19;
            long long v46 = v28;
LABEL_71:
            uint64_t v35 = *(unsigned int *)(a2 + 8);
            unint64_t v36 = *(void *)a2;
            if (v35 >= *(_DWORD *)(a2 + 12))
            {
              unint64_t v41 = v35 + 1;
              BOOL v42 = v36 + 24 * v35 > (unint64_t)&v44;
              if (v36 > (unint64_t)&v44 || !v42)
              {
                unint64_t result = (uint64_t **)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v41, 24);
                unint64_t v36 = *(void *)a2;
                goto LABEL_72;
              }
              BOOL v43 = (char *)&v44 - v36;
              unint64_t result = (uint64_t **)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v41, 24);
              unint64_t v36 = *(void *)a2;
              unint64_t v37 = &v43[*(void *)a2];
            }
            else
            {
LABEL_72:
              unint64_t v37 = (char *)&v44;
            }
            uint64_t v38 = v36 + 24 * *(unsigned int *)(a2 + 8);
            long long v39 = *(_OWORD *)v37;
            *(void *)(v38 + 16) = *((void *)v37 + 2);
            *(_OWORD *)uint64_t v38 = v39;
            ++*(_DWORD *)(a2 + 8);
            break;
          case '$':
            LODWORD(v44) = 0;
            goto LABEL_64;
        }
LABEL_20:
        if (++v8 == v10) {
          return result;
        }
      }
      int v27 = *((unsigned __int8 *)v20 + 18);
      if (v27 != 2)
      {
        if (v27 != 5 || *((_DWORD *)v20 + 2) < 2u)
        {
          uint64_t v23 = 0;
          goto LABEL_51;
        }
        unsigned __int16 v20 = (uint64_t *)*v20;
      }
      uint64_t v23 = v20[1];
LABEL_51:
      uint64_t v47 = a4;
      uint64_t v29 = 0;
      goto LABEL_52;
    default:
      uint64_t v10 = 0;
      if (v8) {
        goto LABEL_21;
      }
      break;
  }
  return result;
}

uint64_t anonymous namespace'::DecodedMetadataBuilder::createGenericTypeParameterType(_anonymous_namespace_::DecodedMetadataBuilder *this, int a2, int a3)
{
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    LODWORD(v13) = a2;
    int v14 = a3;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)result + 48))(result, &v13, &v14);
    uint64_t v8 = *((void *)this + 11);
    if (*((void *)this + 10) != v8 && (result & 1) != 0)
    {
      unint64_t v9 = *(void *)(v8 - 8);
      uint64_t v13 = result;
      if (v9 >= *(void *)((result & 0xFFFFFFFFFFFFFFFELL) - 8))
      {
        uint64_t NumElements = swift::TargetPackPointer<swift::InProcess,swift::TargetMetadata>::getNumElements(&v13, v5, v6, v7);
        swift::fatalError(0, "Pack index %zu exceeds pack length %zu\n", v11, v12, v9, NumElements, v13);
      }
      return *(void *)((result & 0xFFFFFFFFFFFFFFFELL) + 8 * v9);
    }
  }
  return result;
}

void *swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledFunctionInputType@<X0>(void *result@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X8>)
{
  if (a3 > 0x400) {
    goto LABEL_2;
  }
  while (1)
  {
    int v8 = *((unsigned __int16 *)a2 + 8);
    if (v8 != 232 && v8 != 3) {
      break;
    }
    int v10 = *((unsigned __int8 *)a2 + 18);
    if ((v10 - 1) >= 2)
    {
      if (v10 != 5 || !*((_DWORD *)a2 + 2))
      {
        a2 = 0;
        goto LABEL_7;
      }
      a2 = (uint64_t *)*a2;
    }
    a2 = (uint64_t *)*a2;
LABEL_7:
    if (++a3 == 1025) {
      goto LABEL_2;
    }
  }
  unsigned int v33 = a3;
  v32[0] = a5;
  v32[1] = &v33;
  v32[2] = a4;
  void v32[3] = result;
  if (v8 == 223)
  {
    int v11 = *((unsigned __int8 *)a2 + 18);
    unint64_t v12 = a2;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        uint64_t v13 = (uint64_t *)*a2;
        unint64_t v12 = (uint64_t *)*a2;
        goto LABEL_29;
      }
      unint64_t v12 = 0;
    }
    switch(v11)
    {
      case 1:
        int v17 = a2 + 1;
        break;
      case 2:
        int v17 = a2 + 2;
        break;
      case 5:
        uint64_t v13 = (uint64_t *)*a2;
LABEL_29:
        int v17 = &v13[*((unsigned int *)a2 + 2)];
        break;
      default:
        int v17 = 0;
        break;
    }
    if (v12 != v17)
    {
      while (2)
      {
        int v18 = (uint64_t *)*v12;
        BOOL v19 = (uint64_t *)(*v12 + 16);
        if (*(_WORD *)v19 != 224) {
          goto LABEL_35;
        }
        int v36 = 0;
        uint64_t v35 = 0;
        long long v34 = 0uLL;
        int v20 = *((unsigned __int8 *)v18 + 18);
        int v21 = v18;
        if ((v20 - 1) >= 2)
        {
          if (v20 == 5)
          {
            uint64_t v22 = *v18;
            int v21 = (uint64_t *)*v18;
LABEL_45:
            BOOL v19 = (uint64_t *)(v22 + 8 * *((unsigned int *)v18 + 2));
            if (v21 != v19) {
              break;
            }
            goto LABEL_35;
          }
          int v21 = 0;
        }
        switch(v20)
        {
          case 1:
            BOOL v19 = v18 + 1;
            if (v21 != v18 + 1) {
              goto LABEL_54;
            }
            goto LABEL_35;
          case 2:
            goto LABEL_53;
          case 5:
            uint64_t v22 = *v18;
            goto LABEL_45;
        }
        BOOL v19 = 0;
        if (!v21)
        {
LABEL_35:
          if (++v12 == v17) {
            goto LABEL_2;
          }
          continue;
        }
        break;
      }
LABEL_54:
      while (2)
      {
        while (2)
        {
          uint64_t v23 = (uint64_t *)*v21;
          int v24 = *(unsigned __int16 *)(*v21 + 16);
          switch(v24)
          {
            case 276:
              v36 |= 0x80u;
              *a5 = 1;
              break;
            case 232:
              int v25 = *((unsigned __int8 *)v23 + 18);
              if ((v25 - 1) < 2)
              {
LABEL_63:
                uint64_t v26 = (uint64_t *)*v23;
              }
              else
              {
                if (v25 == 5 && *((_DWORD *)v23 + 2))
                {
                  uint64_t v23 = (uint64_t *)*v23;
                  goto LABEL_63;
                }
                uint64_t v26 = 0;
              }
              if (v31)
              {
                uint64_t v27 = v29;
                uint16x8_t v28 = v30;
                *(void *)(a6 + 8) = v30;
                *(void *)a6 = v28(v27, 2, 0);
                *(unsigned char *)(a6 + 16) = 1;
                return (void *)v28(v27, 3, 0);
              }
              break;
            case 225:
              long long v34 = *(_OWORD *)v23;
              if (++v21 == v19) {
                goto LABEL_35;
              }
              continue;
            default:
              operator new();
          }
          break;
        }
        ++v21;
LABEL_53:
        if (v21 == v19) {
          goto LABEL_35;
        }
        continue;
      }
    }
LABEL_2:
    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 16) = 0;
    return result;
  }
  long long v34 = 0uLL;
  int v36 = 0;
  uint64_t v35 = 0;
  char v14 = v31;
  if (v31)
  {
    uint64_t v15 = v29;
    int v16 = v30;
    *(void *)(a6 + 8) = v30;
    *(void *)a6 = v16(v15, 2, 0);
    uint64_t result = (void *)v16(v15, 3, 0);
    char v14 = 1;
  }
  else
  {
    *(unsigned char *)a6 = 0;
  }
  *(unsigned char *)(a6 + 16) = v14;
  return result;
}

void anonymous namespace'::DecodedMetadataBuilder::createFunctionType(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  if (!a3 || (a3 & 1) != 0) {
    operator new();
  }
  uint64_t v11 = a7;
  unint64_t v12 = a4;
  BOOL v42 = v44;
  uint64_t v43 = 0x800000000;
  long long v39 = v41;
  uint64_t v40 = 0x800000000;
  if (a2 < 9)
  {
    unint64_t v18 = a4 & 0x2000000;
    if (!a2) {
      goto LABEL_24;
    }
    uint64_t v19 = (a4 >> 25) & 1;
  }
  else
  {
    uint64_t v15 = a8;
    uint64_t v16 = a5;
    uint64_t v17 = a6;
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, a2, 8);
    unint64_t v18 = v12 & 0x2000000;
    uint64_t v19 = (v12 >> 25) & 1;
    if ((v12 & 0x2000000) != 0 && a2 > HIDWORD(v40))
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, a2, 4);
      unint64_t v18 = v12 & 0x2000000;
      LODWORD(v19) = 1;
    }
    a6 = v17;
    a5 = v16;
    a8 = v15;
    uint64_t v11 = a7;
  }
  uint64_t v20 = 32 * a2;
  int v21 = (_DWORD *)(a1 + 24);
  do
  {
    uint64_t v22 = *((void *)v21 - 1);
    if (v22) {
      BOOL v23 = (*((void *)v21 - 1) & 1) == 0;
    }
    else {
      BOOL v23 = 0;
    }
    if (!v23) {
      operator new();
    }
    uint64_t v24 = v43;
    if (v43 >= (unint64_t)HIDWORD(v43))
    {
      unint64_t v35 = v18;
      uint64_t v38 = a6;
      uint64_t v29 = a5;
      uint64_t v30 = a8;
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
      unint64_t v18 = v35;
      a6 = v38;
      a8 = v30;
      a5 = v29;
      uint64_t v24 = v43;
    }
    *((void *)v42 + v24) = v22;
    LODWORD(v43) = v43 + 1;
    if (v19)
    {
      int v25 = *v21;
      uint64_t v26 = v40;
      if (v40 >= (unint64_t)HIDWORD(v40))
      {
        unint64_t v34 = v18;
        uint64_t v37 = a6;
        uint64_t v27 = a5;
        uint64_t v28 = a8;
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 4);
        unint64_t v18 = v34;
        a6 = v37;
        a8 = v28;
        a5 = v27;
        uint64_t v26 = v40;
      }
      *((_DWORD *)v39 + v26) = v25;
      LODWORD(v40) = v40 + 1;
    }
    v21 += 8;
    v20 -= 32;
  }
  while (v20);
LABEL_24:
  if (v11)
  {
    if (v11) {
      operator new();
    }
    uint64_t v31 = v12 << 38;
    v12 |= 0x10000000uLL;
    int v32 = (char *)((unint64_t)v39 & (v31 >> 63));
  }
  else if (v18)
  {
    int v32 = (char *)v39;
  }
  else
  {
    int v32 = 0;
  }
  if (a8) {
    swift::fatalError(0, "Expected metadata but got a metadata pack\n", (const char *)a3, v32);
  }
  uint64_t ExtendedFunctionTypeMetadata = swift_getExtendedFunctionTypeMetadata(v12, a6, (uint64_t)v42, (uint64_t)v32, a3, v11, a5, a8);
  *(_WORD *)(a9 + 16) = 0;
  *(void *)a9 = ExtendedFunctionTypeMetadata;
  if (!ExtendedFunctionTypeMetadata)
  {
    *(void *)a9 = "unknown error";
    *(void *)(a9 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a9 + 16) = 1;
  }
  if (v39 != v41) {
    free(v39);
  }
  if (v42 != v44) {
    free(v42);
  }
}

uint64_t swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 > 0x400) {
    return 1;
  }
  int v8 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v9 = 1;
  if (v8 == 2)
  {
    uint64_t v11 = (char ***)a2;
  }
  else
  {
    if (v8 != 5) {
      return v9;
    }
    uint64_t v10 = *(unsigned int *)(a2 + 8);
    if ((v10 - 2) > 2) {
      return 1;
    }
    uint64_t v11 = *(char ****)a2;
    uint64_t v9 = v10 - 1;
  }
  if (*((_WORD *)*v11 + 8) != 106) {
    return 1;
  }
  unint64_t v12 = v11[v9];
  if (*((_WORD *)v12 + 8) != 232) {
    return 1;
  }
  uint64_t ConventionFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>::getConventionFromString(**v11, (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000) == 0) {
    return 1;
  }
  uint64_t v9 = 1;
  if (v20 == 1)
  {
LABEL_29:
    ((void (*)(void, uint64_t, void))v19[1])(v19[0], 3, 0);
    return v9;
  }
  unsigned __int8 v18 = 0;
  if (*(unsigned char *)(a2 + 18) != 5) {
    goto LABEL_23;
  }
  if ((*(_DWORD *)(a2 + 8) - 3) > 1)
  {
    LOBYTE(DifferentiabilityFromString) = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(*(void *)a2 + 8);
    if (*(_WORD *)(v13 + 16) != 110) {
      goto LABEL_27;
    }
    unsigned __int16 DifferentiabilityFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>::getDifferentiabilityFromString(*(void **)v13, *(void *)(v13 + 8));
    if (DifferentiabilityFromString < 0x100u) {
      goto LABEL_27;
    }
    unsigned __int8 v18 = DifferentiabilityFromString;
    if (*(unsigned char *)(a2 + 18) != 5) {
      goto LABEL_23;
    }
  }
  if (*(_DWORD *)(a2 + 8) == 4)
  {
    if (*(_WORD *)(*(void *)(*(void *)a2 + 16) + 16) == 111)
    {
      unsigned __int8 v18 = DifferentiabilityFromString | 2;
      goto LABEL_23;
    }
LABEL_27:
    uint64_t v9 = 1;
    goto LABEL_28;
  }
LABEL_23:
  if (v20) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v19[0];
  }
  uint64_t v17 = v16;
  __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(a4, &v17, (unsigned int *)&ConventionFromString, &v18);
  uint64_t v9 = 0;
LABEL_28:
  if (v20 == 1) {
    goto LABEL_29;
  }
  return v9;
}

uint64_t swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeImplFunctionParam<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 > 0x400) {
    return 1;
  }
  int v8 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v9 = 1;
  if (v8 == 2)
  {
    uint64_t v11 = (_DWORD ***)a2;
  }
  else
  {
    if (v8 != 5) {
      return v9;
    }
    uint64_t v10 = *(unsigned int *)(a2 + 8);
    if ((v10 - 2) > 2) {
      return 1;
    }
    uint64_t v11 = *(_DWORD ****)a2;
    uint64_t v9 = v10 - 1;
  }
  if (*((_WORD *)*v11 + 8) != 106) {
    return 1;
  }
  unint64_t v12 = v11[v9];
  if (*((_WORD *)v12 + 8) != 232) {
    return 1;
  }
  uint64_t ConventionFromString = swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>::getConventionFromString(**v11, (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000) == 0) {
    return 1;
  }
  uint64_t v9 = 1;
  if (v20 == 1)
  {
LABEL_29:
    ((void (*)(void, uint64_t, void))v19[1])(v19[0], 3, 0);
    return v9;
  }
  unsigned __int8 v18 = 0;
  if (*(unsigned char *)(a2 + 18) != 5) {
    goto LABEL_23;
  }
  if ((*(_DWORD *)(a2 + 8) - 3) > 1)
  {
    LOBYTE(DifferentiabilityFromString) = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(*(void *)a2 + 8);
    if (*(_WORD *)(v13 + 16) != 110) {
      goto LABEL_27;
    }
    unsigned __int16 DifferentiabilityFromString = swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>::getDifferentiabilityFromString(*(void **)v13, *(void *)(v13 + 8));
    if (DifferentiabilityFromString < 0x100u) {
      goto LABEL_27;
    }
    unsigned __int8 v18 = DifferentiabilityFromString;
    if (*(unsigned char *)(a2 + 18) != 5) {
      goto LABEL_23;
    }
  }
  if (*(_DWORD *)(a2 + 8) == 4)
  {
    if (*(_WORD *)(*(void *)(*(void *)a2 + 16) + 16) == 111)
    {
      unsigned __int8 v18 = DifferentiabilityFromString | 2;
      goto LABEL_23;
    }
LABEL_27:
    uint64_t v9 = 1;
    goto LABEL_28;
  }
LABEL_23:
  if (v20) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v19[0];
  }
  uint64_t v17 = v16;
  __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(a4, &v17, (unsigned int *)&ConventionFromString, &v18);
  uint64_t v9 = 0;
LABEL_28:
  if (v20 == 1) {
    goto LABEL_29;
  }
  return v9;
}

uint64_t swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeImplFunctionPart<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>>(uint64_t a1, _DWORD ***a2, unsigned int a3, uint64_t a4)
{
  if (a3 > 0x400) {
    return 1;
  }
  int v6 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 != 2)
  {
    if (v8 == 5 && *((_DWORD *)a2 + 2) == 2)
    {
      uint64_t v9 = (_WORD **)*a2;
      if (*((_WORD *)**a2 + 8) == 106) {
        goto LABEL_8;
      }
    }
    return 1;
  }
  uint64_t v9 = (_WORD **)a2;
  if (*((_WORD *)*a2 + 8) != 106) {
    return 1;
  }
LABEL_8:
  if (v9[1][8] != 232) {
    return 1;
  }
  unsigned int v10 = v8 - 1;
  uint64_t v11 = a2;
  if (v10 >= 2) {
    uint64_t v11 = (_DWORD ***)*a2;
  }
  uint64_t ConventionFromString = swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>::getConventionFromString(**v11, (size_t)(*v11)[1]);
  if ((ConventionFromString & 0xFF00000000) == 0) {
    return 1;
  }
  int v12 = *((unsigned __int8 *)v6 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v6 + 2) < 2u)
    {
      uint64_t v13 = 0;
      goto LABEL_20;
    }
    int v6 = (_DWORD ***)*v6;
  }
  uint64_t v13 = v6[1];
LABEL_20:
  BOOL v14 = v19 == 1;
  if (v19 == 1
    || (v19 ? (uint64_t v16 = 0) : (uint64_t v16 = v18[0]),
        uint64_t v17 = v16,
        __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack,swift::Demangle::__runtime::ImplResultConvention &>(a4, &v17, (unsigned int *)&ConventionFromString), v19 == 1))
  {
    ((void (*)(void, uint64_t, void))v18[1])(v18[0], 3, 0);
  }
  return v14;
}

void anonymous namespace'::DecodedMetadataBuilder::createTupleType(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7 = a2;
  if (a2)
  {
    if (a2 == 1 && !*(void *)(a3 + 8))
    {
      *(_WORD *)(a5 + 16) = 0;
      uint64_t v24 = *a1;
      *(void *)a5 = *a1;
      if (!v24)
      {
        *(void *)a5 = "unknown error";
        *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
        *(_WORD *)(a5 + 16) = 1;
      }
      return;
    }
    uint64_t v10 = 8 * a2;
    uint64_t v11 = a1;
    do
    {
      if (*v11) {
        BOOL v12 = (*v11 & 1) == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (!v12) {
        operator new();
      }
      ++v11;
      v10 -= 8;
    }
    while (v10);
  }
  memset(&v25, 0, sizeof(v25));
  if (a4)
  {
    uint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = a3 + 16 * v13;
      std::string::size_type v15 = *(void *)(v14 + 8);
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v25.__r_.__value_.__l.__size_;
      }
      if (v15)
      {
        uint64_t v17 = *(const std::string::value_type **)v14;
        if (!size) {
          std::string::append(&v25, v13, 32);
        }
        std::string::append(&v25, v17, v15);
      }
      else if (!size)
      {
        goto LABEL_15;
      }
      std::string::push_back(&v25, 32);
LABEL_15:
      if (a4 == ++v13)
      {
        unsigned int v18 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
        std::string::size_type v19 = v25.__r_.__value_.__l.__size_;
        goto LABEL_25;
      }
    }
  }
  std::string::size_type v19 = 0;
  unsigned int v18 = 0;
LABEL_25:
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v20 = v18;
  }
  else {
    std::string::size_type v20 = v19;
  }
  if (v20) {
    int v21 = v7 | 0x10000;
  }
  else {
    int v21 = v7;
  }
  if ((v18 & 0x80) != 0)
  {
    if (v19) {
      uint64_t v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    else {
      uint64_t v22 = 0;
    }
  }
  else if (v18)
  {
    uint64_t v22 = &v25;
  }
  else
  {
    uint64_t v22 = 0;
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, v21, (uint64_t)a1, (const char *)v22, 0);
  *(_WORD *)(a5 + 16) = 0;
  *(void *)a5 = TupleTypeMetadata;
  if (TupleTypeMetadata)
  {
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
  }
  else
  {
    *(void *)a5 = "unknown error";
    *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a5 + 16) = 1;
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
  }
  operator delete(v25.__r_.__value_.__l.__data_);
}

uint64_t anonymous namespace'::DecodedMetadataBuilder::createPackType@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (void *)a1;
    do
    {
      if (*v5) {
        BOOL v6 = (*v5 & 1) == 0;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        operator new();
      }
      ++v5;
      v4 -= 8;
    }
    while (v4);
  }
  uint64_t result = swift_allocateMetadataPack(a1, a2);
  if ((result & 1) == 0) {
    swift::fatalError(0, "Cannot have an on-stack pack here\n", v8, v9);
  }
  *(_WORD *)(a3 + 16) = 0;
  *(void *)a3 = result;
  if (!result)
  {
    *(void *)a3 = "unknown error";
    *(void *)(a3 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a3 + 16) = 1;
  }
  return result;
}

void anonymous namespace'::DecodedMetadataBuilder::createSILPackType()
{
}

void anonymous namespace'::DecodedMetadataBuilder::createDependentMemberType()
{
}

void anonymous namespace'::DecodedMetadataBuilder::createDependentMemberType(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if ((a4 & 1) != 0
    || ((a4 & 0xFFFFFFFFFFFFFFFELL) == 0 ? (unint64_t v8 = 0) : (unint64_t v8 = a4 & 0xFFFFFFFFFFFFFFFELL),
        (uint64_t v9 = *(int *)(v8 + 20), v10 = (char *)(v8 + 20 + v9), v9) ? (v11 = v10 == 0) : (v11 = 1),
        v11 || (size_t v12 = strlen((const char *)(v8 + 20 + v9))) == 0))
  {
LABEL_65:
    *(void *)a5 = "unknown error";
    *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a5 + 16) = 1;
    return;
  }
  size_t v13 = v12;
  int v14 = 0;
  while (1)
  {
    std::string::size_type v15 = memchr(v10, 32, v13);
    unint64_t v18 = v15 ? v15 - v10 : -1;
    unint64_t v19 = v13 >= v18 ? v18 : v13;
    if (v19 == a2 && (!a2 || !memcmp(v10, a1, a2))) {
      break;
    }
    ++v14;
    if (v13 <= v18) {
      v10 += v19;
    }
    else {
      v10 += v19 + 1;
    }
    size_t v13 = (__PAIR128__(v13, v18) - __PAIR128__(v19, v13)) >> 64;
    if (!v13) {
      goto LABEL_65;
    }
  }
  uint64_t v20 = *(unsigned int *)(v8 + 16);
  unint64_t v21 = v8;
  if (v8) {
    unint64_t v21 = v8;
  }
  unint64_t v22 = v21;
  if (v21 == -24) {
    unint64_t v23 = 0;
  }
  else {
    unint64_t v23 = v21 + 24;
  }
  if (!v20) {
LABEL_67:
  }
    abort();
  int v24 = 0;
  std::string v25 = (_DWORD *)(v23 + 12 * *(unsigned int *)(v22 + 12));
  while ((*v25 & 0xF) != 7)
  {
LABEL_31:
    v25 += 2;
    if (!--v20) {
      goto LABEL_67;
    }
  }
  if (v24 != v14)
  {
    ++v24;
    goto LABEL_31;
  }
  if (!a3 || (a3 & 1) != 0)
  {
    if ((a3 & 1) == 0) {
      swift::fatalError(0, "Expected a metadata pack but got metadata\n", v16, v17);
    }
    uint64_t v44 = v46;
    uint64_t v45 = 0x400000000;
    uint64_t v28 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v29 = *(void *)((a3 & 0xFFFFFFFFFFFFFFFELL) - 8);
    if (v29)
    {
      do
      {
        uint64_t v30 = *v28;
        uint64_t v31 = (int **)swift_conformsToProtocolCommon(*v28, v8);
        if (v31)
        {
          if (v8) {
            unint64_t v32 = v8;
          }
          else {
            unint64_t v32 = 0;
          }
          unint64_t v34 = v32;
          if (v32 == -24) {
            unint64_t v35 = 0;
          }
          else {
            unint64_t v35 = v32 + 24;
          }
          AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v31, v30, v35 + 12 * *(unsigned int *)(v34 + 12) - 8, v25);
        }
        else
        {
          AssociatedTypeWitness = 0;
        }
        uint64_t v36 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v45 + 1, 8);
          uint64_t v36 = v45;
        }
        *((void *)v44 + v36) = AssociatedTypeWitness;
        unint64_t v37 = (v45 + 1);
        LODWORD(v45) = v45 + 1;
        ++v28;
        --v29;
      }
      while (v29);
      uint64_t v38 = v44;
    }
    else
    {
      unint64_t v37 = 0;
      uint64_t v38 = v46;
    }
    uint64_t MetadataPack = swift_allocateMetadataPack((uint64_t)v38, v37);
    *(_WORD *)(a5 + 16) = 0;
    *(void *)a5 = MetadataPack;
    if (!MetadataPack)
    {
      *(void *)a5 = "unknown error";
      *(void *)(a5 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a5 + 16) = 1;
    }
    if (v44 != v46) {
      free(v44);
    }
  }
  else
  {
    uint64_t v26 = (int **)swift_conformsToProtocolCommon(a3, v8);
    if (!v26) {
      goto LABEL_65;
    }
    unint64_t v27 = v8 ? v8 : 0;
    unint64_t v40 = v27;
    uint64_t v41 = v27 == -24 ? 0 : v27 + 24;
    BOOL v42 = swift_getAssociatedTypeWitness(255, v26, a3, v41 + 12 * *(unsigned int *)(v40 + 12) - 8, v25);
    *(_WORD *)(a5 + 16) = 0;
    *(void *)a5 = v42;
    if (!v42) {
      goto LABEL_65;
    }
  }
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned long long,unsigned long long>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<unsigned int,unsigned int>,true>::growAndEmplaceBack<unsigned long long,unsigned long long>(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = (_DWORD *)(*(void *)a1 + 8 * v3);
  uint64_t v6 = *a3;
  *uint64_t v5 = *(void *)a2;
  v5[1] = v6;
  unsigned int v7 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return v4 + 8 * v7 - 8;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<std::pair<swift::MetadataOrPack,swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack&,swift::MetadataOrPack>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<swift::MetadataOrPack,swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack&,swift::MetadataOrPack>(a1, a2, a3);
  }
  uint64_t v4 = (uint64_t *)(*(void *)a1 + 16 * v3);
  *uint64_t v4 = *a2;
  v4[1] = *a3;
  unsigned int v5 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(void *)a1 + 16 * v5 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<anonymous namespace'::DecodedMetadataBuilder::BuiltSILBoxField>::emplace_back<swift::MetadataOrPack,BOOL &>(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
  uint64_t v4 = *(void *)a1 + 16 * v3;
  }
  unsigned __int8 v5 = *a3;
  *(void *)uint64_t v4 = *a2;
  *(unsigned char *)(v4 + 8) = v5;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

void std::vector<unsigned int>::push_back[abi:nn180100](uint64_t a1, _DWORD *a2)
{
  unsigned __int8 v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      abort();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v14 = operator new(4 * v13);
    }
    else
    {
      int v14 = 0;
    }
    std::string::size_type v15 = &v14[4 * v10];
    *std::string::size_type v15 = *a2;
    unsigned int v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v18];
      std::string::size_type v15 = (_DWORD *)((char *)v15 - v18);
      unint64_t v19 = &v14[4 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *unint64_t v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--std::string::size_type v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[4 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)unsigned __int8 v5 = *a2;
    unsigned int v7 = v5 + 4;
  }
  *(void *)(a1 + 8) = v7;
}

void *std::vector<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack*,unsigned int>(uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned int v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = *(void **)a1;
    uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      abort();
    }
    uint64_t v13 = v6 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (char *)operator new(16 * v15);
    uint64_t v18 = *a3;
    unint64_t v19 = &v17[16 * v11];
    *(void *)unint64_t v19 = *a2;
    *((void *)v19 + 1) = v18;
    uint64_t v9 = v19 + 16;
    if (v7 == v10)
    {
      uint64_t v20 = &v17[16 * v11];
    }
    else
    {
      do
      {
        uint64_t v20 = v19 - 16;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
        v7 -= 2;
        v19 -= 16;
      }
      while (v7 != v10);
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = &v17[v16];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    uint64_t v8 = *a3;
    *unsigned int v7 = *a2;
    v7[1] = v8;
    uint64_t v9 = v7 + 2;
  }
  *(void *)(a1 + 8) = v9;
  return v9 - 2;
}

void anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  if (*((_WORD *)a2 + 8) != 301)
  {
LABEL_29:
    *(void *)a6 = "unknown error";
    *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
    *(_WORD *)(a6 + 16) = 1;
    return;
  }
  if (*a2) {
    uint64_t v11 = *a2;
  }
  else {
    uint64_t v11 = 0;
  }
  if (qword_1EB208CC0 != -1) {
  if (qword_1EB208C68 != -1)
  }
    dispatch_once_f(&qword_1EB208C68, &DynamicReplacementLock, (dispatch_function_t)swift::Lazy<swift::Mutex>::defaultInitCallback);
  os_unfair_lock_lock((os_unfair_lock_t)&DynamicReplacementLock);
  if (!dword_1EB208CB8) {
    goto LABEL_18;
  }
  if (v11) {
    unsigned int v12 = (v11 >> 9) ^ (v11 >> 4);
  }
  else {
    unsigned int v12 = 0;
  }
  LODWORD(v13) = v12 & (dword_1EB208CB8 - 1);
  BOOL v14 = (uint64_t *)(opaqueTypeMappings + 16 * v13);
  uint64_t v15 = *v14;
  if (*v14 != v11)
  {
    int v16 = 1;
    while (v15 != -4096)
    {
      int v17 = v13 + v16++;
      uint64_t v13 = v17 & (dword_1EB208CB8 - 1);
      uint64_t v15 = *(void *)(opaqueTypeMappings + 16 * v13);
      if (v15 == v11)
      {
        BOOL v14 = (uint64_t *)(opaqueTypeMappings + 16 * v13);
        goto LABEL_19;
      }
    }
LABEL_18:
    BOOL v14 = (uint64_t *)(opaqueTypeMappings + 16 * dword_1EB208CB8);
  }
LABEL_19:
  if (v14 == (uint64_t *)(opaqueTypeMappings + 16 * dword_1EB208CB8)) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v14[1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&DynamicReplacementLock);
  if (!v18) {
    uint64_t v18 = v11;
  }
  if (!v18) {
    goto LABEL_29;
  }
  uint64_t v20 = v18 + 4;
  uint64_t v19 = *(int *)(v18 + 4);
  if (!v19) {
    goto LABEL_32;
  }
  uint64_t v21 = (uint64_t *)((v19 & 0xFFFFFFFFFFFFFFFELL) + v20);
  if (v19)
  {
    if (*v21)
    {
      uint64_t v22 = *v21;
      goto LABEL_33;
    }
LABEL_32:
    uint64_t v22 = 0;
    goto LABEL_33;
  }
  if (!v21) {
    goto LABEL_32;
  }
  uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFFELL) + v20;
LABEL_33:
  long long v55 = v57;
  uint64_t v56 = 0x800000000;
  if (a4)
  {
    LODWORD(v23) = 0;
    uint64_t v24 = a3 + 16 * a4;
    do
    {
      std::string v25 = *(const void **)a3;
      uint64_t v26 = *(void *)(a3 + 8);
      if (v26 + (unint64_t)v23 > HIDWORD(v56))
      {
        __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, (uint64_t)v57, v26 + v23, 8);
        LODWORD(v23) = v56;
      }
      if (v26)
      {
        memcpy(&v55[8 * v23], v25, 8 * v26);
        LODWORD(v23) = v56;
      }
      uint64_t v23 = (v23 + v26);
      LODWORD(v56) = v23;
      a3 += 16;
    }
    while (a3 != v24);
    unint64_t v27 = v55;
  }
  else
  {
    uint64_t v23 = 0;
    unint64_t v27 = v57;
  }
  v53[0] = v54;
  v53[1] = (void *)0x800000000;
  v51[0] = v52;
  v51[1] = (void *)0x800000000;
  _gatherGenericParameters(v22, v27, v23, 0, (uint64_t)v53, (uint64_t)v51, *a1, (uint64_t)&v45);
  if ((_BYTE)v47)
  {
    *(_WORD *)(a6 + 16) = 1;
    uint64_t v28 = v45;
    uint64_t v29 = v46;
    *(void *)(a6 + 8) = v46;
    *(void *)a6 = v29(v28, 2, 0);
    v29(v28, 3, 0);
  }
  else
  {
    uint64_t v31 = (int *)(swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl((unsigned char *)v18)
                + 4 * a5);
    uint64_t v32 = *v31;
    unsigned int v33 = (char *)v31 + v32;
    if (v32) {
      unint64_t v34 = v33;
    }
    else {
      unint64_t v34 = 0;
    }
    SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v34, v30);
    LODWORD(v45) = 0;
    long long v46 = (uint64_t (*)(uint64_t, uint64_t, void))v18;
    uint64_t v47 = v51[0];
    int v48 = v50;
    uint64_t v49 = 0x800000000;
    v50[32] = 0;
    v41[0] = &unk_1ECA06B78;
    v41[1] = &v45;
    BOOL v42 = v41;
    v39[0] = &unk_1ECA06BC0;
    v39[1] = &v45;
    unint64_t v40 = v39;
    swift_getTypeByMangledName(v43, 0, SymbolicMangledNameStringRef, v36, v51[0], v41, v39);
    int v37 = v44;
    if (v44)
    {
      *(void *)a6 = "unknown error";
      *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
      *(_WORD *)(a6 + 16) = 1;
      if (v37 == 1) {
        ((void (*)(void, uint64_t, void))v43[1])(v43[0], 3, 0);
      }
    }
    else
    {
      uint64_t v38 = v43[0];
      *(_WORD *)(a6 + 16) = 0;
      *(void *)a6 = v38;
      if (!v38)
      {
        *(void *)a6 = "unknown error";
        *(void *)(a6 + 8) = swift::TypeLookupError::TypeLookupError(char const*)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke;
        *(_WORD *)(a6 + 16) = 1;
      }
    }
    if (v40 == v39)
    {
      (*(void (**)(void *))(v39[0] + 32))(v39);
    }
    else if (v40)
    {
      (*(void (**)(void))(*v40 + 40))();
    }
    if (v42 == v41)
    {
      (*(void (**)(void *))(v41[0] + 32))(v41);
    }
    else if (v42)
    {
      (*(void (**)(void))(*v42 + 40))();
    }
    if (v48 != v50) {
      free(v48);
    }
  }
  if (v51[0] != v52) {
    free(v51[0]);
  }
  if (v53[0] != v54) {
    free(v53[0]);
  }
  if (v55 != v57) {
    free(v55);
  }
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,char const*>(char const*,int,unsigned int,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C401AB4594ELL, a3);
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      unint64_t v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
      uint64_t result = v4;
      break;
  }
  return result;
}

void swift_asprintf(char **a1, const char *__format, ...)
{
  va_start(va, __format);
  int v4 = vsnprintf(0, 0, __format, va);
  *a1 = 0;
  if ((v4 & 0x80000000) == 0)
  {
    size_t v5 = (v4 + 1);
    unint64_t v6 = (char *)malloc_type_malloc(v5, 0x887381A9uLL);
    if (v6)
    {
      unsigned int v7 = v6;
      if (vsnprintf(v6, v5, __format, va) < 0) {
        free(v7);
      }
      else {
        *a1 = v7;
      }
    }
  }
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long>(char const*,int,unsigned int,int,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C400DFE80CBLL, a3);
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      int v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
      uint64_t result = v4;
      break;
  }
  return result;
}

char *_ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB_(const char **a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x50C40EE9192B6, a3);
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      int v4 = 0;
      swift_asprintf(&v4, *a1, a3);
      uint64_t result = v4;
      break;
  }
  return result;
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int>(char const*,int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int>(char const*,int,unsigned int,int,char const*,swift::Demangle::__runtime::ManglingError::Code,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C400DFE80CBLL, a3);
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      int v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36));
      uint64_t result = v4;
      break;
  }
  return result;
}

void std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1ECA06AA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECA06AA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, const char *a3, char *a4)
{
  if (*a2) {
    return 0;
  }
  unint64_t v4 = *(unsigned int *)a3;
  if (*(void *)(a1 + 16) <= v4) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 8 * v4);
  if (result) {
    BOOL v6 = (result & 1) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    swift::fatalError(0, "Expected metadata but got a metadata pack\n", a3, a4);
  }
  return result;
}

void std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2}>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2}>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1ECA06AE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2}>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECA06AE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(unsigned int,unsigned int)#2}>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, const char *a3, char *a4)
{
  unint64_t v4 = *a2;
  if (*(void *)(a1 + 16) <= v4) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 8 * v4);
  if (result) {
    BOOL v6 = (result & 1) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    swift::fatalError(0, "Expected metadata but got a metadata pack\n", a3, a4);
  }
  return result;
}

void std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1ECA06B30;
  return result;
}

void std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ECA06B30;
}

void std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::createSymbolicExtendedExistentialType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()()
{
}

uint64_t swift::ConcurrentReadableHashMap<anonymous namespace'::ProtocolDescriptorCacheEntry,swift::LazyMutex>::find<std::string>(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v7 = a1;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v8 & 0x80u) != 0)
  {
    a1 = *(void *)a1;
    uint64_t v8 = v9;
  }
  unint64_t v10 = __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<std::__wrap_iter<char const*>>(a1, (_OWORD *)(a1 + v8));
  uint64_t v11 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v12 = 4;
  if ((a2 & 3) != 0 && v11) {
    char v12 = *v11;
  }
  uint64_t v13 = ~(-1 << v12);
  if ((a2 & 3) != 0) {
    unint64_t v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else {
    unint64_t v14 = 0;
  }
  while (2)
  {
    if ((v10 & v13) <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v10 & v13;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v16) = v14 + v15;
        LOBYTE(v16) = atomic_load_explicit((atomic_uchar *volatile)(v14 + v15), memory_order_acquire);
        if (v16) {
          goto LABEL_21;
        }
        return 0;
      case 2uLL:
        LODWORD(v16) = v14 + 2 * v15;
        LOWORD(v16) = atomic_load_explicit((atomic_ushort *volatile)(v14 + 2 * v15), memory_order_acquire);
        if (!v16) {
          return 0;
        }
        goto LABEL_21;
      case 3uLL:
        LODWORD(v16) = atomic_load_explicit((atomic_uint *volatile)(v14 + 4 * v15), memory_order_acquire);
        if (v16) {
          goto LABEL_21;
        }
        return 0;
      default:
        uint64_t v16 = (a2 >> (4 * v15)) & 0xF;
        if (v16)
        {
LABEL_21:
          unint64_t v17 = (v16 - 1);
          if (v17 < a3)
          {
            uint64_t v18 = a4 + 24 * v17;
            int v19 = *(char *)(v7 + 23);
            uint64_t v20 = v19 >= 0 ? (const void *)v7 : *(const void **)v7;
            size_t v21 = v19 >= 0 ? *(unsigned __int8 *)(v7 + 23) : *(void *)(v7 + 8);
            if (v21 == *(void *)(v18 + 8) && (!v21 || !memcmp(v20, *(const void **)v18, v21))) {
              return v18;
            }
          }
          unint64_t v10 = v15 + 1;
          continue;
        }
        return 0;
    }
  }
}

unint64_t __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<std::__wrap_iter<char const*>>(unint64_t a1, _OWORD *a2)
{
  {
    unint64_t v95 = __swift::__runtime::llvm::hashing::detail::fixed_seed_override;
    if (!__swift::__runtime::llvm::hashing::detail::fixed_seed_override) {
      unint64_t v95 = 0xFF51AFD7ED558CCDLL;
    }
    __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed = v95;
  }
  unint64_t v4 = __swift::__runtime::llvm::hashing::detail::get_execution_seed(void)::seed;
  if ((_OWORD *)a1 == a2)
  {
    unint64_t v5 = 0;
    unint64_t v10 = a1;
    goto LABEL_17;
  }
  unint64_t v5 = 0;
  unint64_t v6 = 63;
  if ((unint64_t)a2 + ~a1 < 0x3F) {
    unint64_t v6 = (unint64_t)a2 + ~a1;
  }
  if (v6 < 0x1F)
  {
    p_src = &__src;
LABEL_13:
    unint64_t v10 = a1;
    unint64_t v12 = v5;
    do
    {
      unint64_t v5 = v12 + 1;
      char v13 = *(unsigned char *)v10++;
      *(unsigned char *)p_src = v13;
      if ((_OWORD *)v10 == a2) {
        break;
      }
      p_src = (long long *)((char *)&__src + v5);
      BOOL v14 = v12++ >= 0x3F;
    }
    while (!v14);
    goto LABEL_17;
  }
  p_src = &__src;
  if ((unint64_t)&__src - a1 < 0x20) {
    goto LABEL_13;
  }
  unint64_t v8 = v6 + 1;
  unint64_t v5 = v8 & 0x60;
  long long v9 = *(_OWORD *)(a1 + 16);
  p_src = (long long *)((char *)&__src + v5);
  unint64_t v10 = a1 + v5;
  long long __src = *(_OWORD *)a1;
  long long v103 = v9;
  if (v5 != 32)
  {
    long long v11 = *(_OWORD *)(a1 + 48);
    long long v104 = *(_OWORD *)(a1 + 32);
    long long v105 = v11;
  }
  a1 += v8 & 0x60;
  if (v8 != v5) {
    goto LABEL_13;
  }
LABEL_17:
  if ((_OWORD *)v10 != a2)
  {
    unint64_t v15 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v16 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    unint64_t v17 = v4 ^ (v4 >> 47);
    unint64_t v18 = v4 ^ (((0x9DDFEA08EB382D69 * (v17 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (v17 ^ (0xB492B66FBE98F273 * v4)));
    unint64_t v19 = v16 + v4 + *((void *)&__src + 1);
    unint64_t v20 = *((void *)&v104 + 1) + v16 - 0x4B6D499041670D8DLL * __ROR8__(v105 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    unint64_t v21 = v17 - 0x622015F714C7D297 * (v15 ^ (v15 >> 47));
    uint64_t v22 = __src - 0x6D8ED9027DD26057 * v4;
    unint64_t v23 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v18) ^ ((0x9DDFEA08EB382D69 * v18) >> 47));
    unint64_t v24 = (0xB492B66FBE98F273 * __ROR8__(v19, 37)) ^ v23;
    unint64_t v25 = 0xB492B66FBE98F273 * __ROR8__(v21, 33);
    uint64_t v26 = __ROR8__(v22 + *((void *)&__src + 1) + v103, 44)
        + v22
        + __ROR8__(v24 + v17 + v22 + *((void *)&v103 + 1), 21);
    uint64_t v27 = v22 + *((void *)&__src + 1) + v103 + *((void *)&v103 + 1);
    unint64_t v28 = v23 + v104 + v25;
    unint64_t v29 = __ROR8__(v20 + v103 + *((void *)&v105 + 1) + v28, 21)
        + v28
        + __ROR8__(*((void *)&v104 + 1) + v105 + v28, 44);
    unint64_t v30 = *((void *)&v104 + 1) + v105 + v28 + *((void *)&v105 + 1);
    unint64_t v31 = 64;
    while (1)
    {
      unint64_t v39 = 0;
      unint64_t v40 = v10;
      unint64_t v41 = (unint64_t)a2 + ~v10;
      if (v41 >= 0x3F) {
        unint64_t v41 = 63;
      }
      if (v41 < 0x1F) {
        break;
      }
      BOOL v42 = (char *)&__src;
      if ((unint64_t)&__src - v10 < 0x20) {
        goto LABEL_31;
      }
      unint64_t v43 = v41 + 1;
      unint64_t v39 = v43 & 0x60;
      long long v44 = *(_OWORD *)(v10 + 16);
      long long __src = *(_OWORD *)v10;
      long long v103 = v44;
      if (v39 == 32)
      {
        uint64_t v45 = 31;
      }
      else
      {
        long long v46 = *(_OWORD *)(v10 + 48);
        long long v104 = *(_OWORD *)(v10 + 32);
        long long v105 = v46;
        uint64_t v45 = 63;
      }
      BOOL v42 = (char *)&__src + v39;
      v10 += v39;
      BOOL v47 = v40 + v45 + 1 == (void)a2;
      if (v43 != v39) {
        goto LABEL_31;
      }
LABEL_35:
      unint64_t v50 = v39 - 1;
      if ((v39 & 0x7FFFFFFFFFFFFFBFLL) == 0) {
        goto LABEL_21;
      }
      unint64_t v98 = v25;
      unint64_t v99 = v30;
      unint64_t v100 = v24;
      uint64_t v101 = v27;
      unint64_t v51 = v31;
      unint64_t v52 = v29;
      if (v39 == 63)
      {
        char v96 = HIBYTE(v105);
        memmove((char *)&__src + 1, &__src, 0x3FuLL);
        LOBYTE(__src) = v96;
LABEL_20:
        unint64_t v29 = v52;
        unint64_t v31 = v51;
        unint64_t v24 = v100;
        uint64_t v27 = v101;
        unint64_t v25 = v98;
        unint64_t v30 = v99;
        goto LABEL_21;
      }
      if (v39 == 1)
      {
        char v97 = __src;
        memmove(&__src, v42, 0x3FuLL);
        HIBYTE(v105) = v97;
        goto LABEL_20;
      }
      uint64_t v53 = 64 - v39;
      uint64_t v54 = v39;
      if (v39 != 64 - v39)
      {
        do
        {
          uint64_t v65 = v54;
          uint64_t v54 = v53;
          uint64_t v53 = v65 % v53;
        }
        while (v53);
        unint64_t v24 = v100;
        unint64_t v25 = v98;
        if (v54)
        {
          os_signpost_id_t v66 = (long long *)((char *)&__src + v54);
          do
          {
            long long v67 = (long long *)((char *)v66 + v50);
            char v69 = *((unsigned char *)v66 - 1);
            os_signpost_id_t v66 = (long long *)((char *)v66 - 1);
            char v68 = v69;
            int v70 = v66;
            do
            {
              unint64_t v71 = v70;
              int v70 = v67;
              *(unsigned char *)unint64_t v71 = *(unsigned char *)v67;
              char v72 = (char *)((char *)&v106 - (char *)v67);
              BOOL v73 = __OFSUB__(v39, v72);
              uint64_t v75 = v39 - (void)v72;
              char v74 = (v75 < 0) ^ v73;
              long long v67 = (long long *)((char *)&__src + v75);
              if (v74) {
                long long v67 = (long long *)((char *)v70 + v39);
              }
            }
            while (v67 != v66);
            *(unsigned char *)int v70 = v68;
          }
          while (v66 != &__src);
        }
        goto LABEL_21;
      }
      unint64_t v55 = (unint64_t)a2 + ~v40;
      if (v55 >= 0x3F) {
        uint64_t v56 = 63;
      }
      else {
        uint64_t v56 = v55;
      }
      unint64_t v57 = 62 - v56;
      if (v55 < v57) {
        unint64_t v57 = v55;
      }
      if (v57 >= 0x3F) {
        unint64_t v58 = 63;
      }
      else {
        unint64_t v58 = v57;
      }
      uint64_t v59 = (char *)&__src;
      unint64_t v60 = v39;
      unint64_t v24 = v100;
      unint64_t v25 = v98;
      if (v58 < 7) {
        goto LABEL_78;
      }
      if (v55 >= 0x3F) {
        uint64_t v61 = 63;
      }
      else {
        uint64_t v61 = v55;
      }
      unint64_t v62 = 62 - v61;
      if (v55 >= v62) {
        unint64_t v55 = v62;
      }
      if (v55 >= 0x3F) {
        unint64_t v55 = 63;
      }
      if (&__src < (long long *)((char *)&__src + v50 + v55 + 2))
      {
        unint64_t v60 = v39;
        if ((char *)&__src + v39 < (char *)&__src + v55 + 1) {
          goto LABEL_78;
        }
      }
      unint64_t v63 = v58 + 1;
      if (v58 >= 0x1F)
      {
        unint64_t v64 = v63 & 0x60;
        uint64_t v76 = (long long *)((char *)&__src + v39);
        long long v77 = __src;
        long long v78 = v103;
        long long v79 = *(long long *)((char *)&__src + v39 + 16);
        long long __src = *(long long *)((char *)&__src + v39);
        long long v103 = v79;
        *uint64_t v76 = v77;
        v76[1] = v78;
        if (v64 != 32)
        {
          unint64_t v80 = (long long *)((char *)&v104 + v39);
          long long v81 = v104;
          long long v82 = v105;
          long long v83 = *(long long *)((char *)&v104 + v39 + 16);
          long long v104 = *(long long *)((char *)&v104 + v39);
          long long v105 = v83;
          *unint64_t v80 = v81;
          v80[1] = v82;
        }
        if (v63 == v64) {
          goto LABEL_21;
        }
        if ((v63 & 0x18) == 0)
        {
          uint64_t v59 = (char *)&__src + v64;
          unint64_t v60 = v39 + v64;
LABEL_78:
          unint64_t v87 = v59 + 1;
          do
          {
            char v88 = *(v87 - 1);
            *(v87 - 1) = *((unsigned char *)&__src + v60);
            *((unsigned char *)&__src + v60) = v88;
            if (v87 == v42) {
              break;
            }
            ++v87;
          }
          while (v60++ != 63);
          goto LABEL_21;
        }
      }
      else
      {
        unint64_t v64 = 0;
      }
      unint64_t v60 = v39 + (v63 & 0x78);
      uint64_t v59 = (char *)&__src + (v63 & 0x78);
      uint64_t v84 = (uint64_t *)((char *)&__src + v64);
      unint64_t v85 = v64 - (v63 & 0x78);
      do
      {
        uint64_t v86 = *v84;
        *uint64_t v84 = *(uint64_t *)((char *)v84 + v39);
        *(uint64_t *)((char *)v84++ + v39) = v86;
        v85 += 8;
      }
      while (v85);
      if (v63 != (v63 & 0x78)) {
        goto LABEL_78;
      }
LABEL_21:
      unint64_t v32 = v20 + v27 + v25 + *((void *)&__src + 1);
      unint64_t v20 = *((void *)&v104 + 1) + v27 - 0x4B6D499041670D8DLL * __ROR8__(v20 + v26 + v105, 42);
      uint64_t v33 = __src - 0x4B6D499041670D8DLL * v26;
      uint64_t v34 = v33 + *((void *)&__src + 1) + v103;
      unint64_t v35 = 0xB492B66FBE98F273 * __ROR8__(v32, 37);
      uint64_t v36 = __ROR8__(v24 + v30, 33);
      unint64_t v37 = v35 ^ v29;
      uint64_t v26 = __ROR8__(v34, 44) + v33 + __ROR8__(v37 + v30 + v33 + *((void *)&v103 + 1), 21);
      unint64_t v25 = 0xB492B66FBE98F273 * v36;
      unint64_t v38 = 0xB492B66FBE98F273 * v36 + v29 + v104;
      uint64_t v27 = v34 + *((void *)&v103 + 1);
      unint64_t v29 = __ROR8__(v20 + v103 + v38 + *((void *)&v105 + 1), 21)
          + v38
          + __ROR8__(*((void *)&v104 + 1) + v105 + v38, 44);
      unint64_t v30 = *((void *)&v104 + 1) + v105 + v38 + *((void *)&v105 + 1);
      v31 += v39;
      unint64_t v24 = v37;
      if (v47)
      {
        unint64_t v90 = 0x9DDFEA08EB382D69
            * (v30 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v30)));
        uint64_t v91 = v37 - 0x4B6D499041670D8DLL * (v20 ^ (v20 >> 47)) - 0x622015F714C7D297 * (v90 ^ (v90 >> 47));
        unint64_t v92 = 0x9DDFEA08EB382D69
            * (v29 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v29)));
        unint64_t v93 = 0x9DDFEA08EB382D69 * (v92 ^ (v92 >> 47)) - 0x4B6D499041670D8DLL * ((v31 ^ (v31 >> 47)) + v36);
        return 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69
               * (v93 ^ ((0x9DDFEA08EB382D69 * (v91 ^ v93)) >> 47) ^ (0x9DDFEA08EB382D69 * (v91 ^ v93)))) ^ ((0x9DDFEA08EB382D69 * (v93 ^ ((0x9DDFEA08EB382D69 * (v91 ^ v93)) >> 47) ^ (0x9DDFEA08EB382D69 * (v91 ^ v93)))) >> 47));
      }
    }
    BOOL v42 = (char *)&__src;
LABEL_31:
    unint64_t v48 = v39;
    do
    {
      unint64_t v39 = v48 + 1;
      char v49 = *(unsigned char *)v10++;
      *BOOL v42 = v49;
      BOOL v42 = (char *)&__src + v48 + 1;
      BOOL v47 = v10 == (void)a2;
      if ((_OWORD *)v10 == a2) {
        break;
      }
      BOOL v14 = v48++ >= 0x3F;
    }
    while (!v14);
    goto LABEL_35;
  }
  return __swift::__runtime::llvm::hashing::detail::hash_short((__swift::__runtime::llvm::hashing::detail *)&__src, v5, v4);
}

void swift::runtime::trace::protocol_scan_begin(swift::runtime::trace *this@<X0>, uint64_t a2@<X8>)
{
  if (!_os_trace_lazy_init_completed_4swift()) {
    goto LABEL_16;
  }
  if (swift::runtime::trace::LogsToken != -1) {
    dispatch_once_f(&swift::runtime::trace::LogsToken, 0, (dispatch_function_t)swift::runtime::trace::setupLogs);
  }
  if (swift::runtime::trace::TracingEnabled)
  {
    os_signpost_id_t v5 = os_signpost_id_generate((os_log_t)swift::runtime::trace::ScanLog);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v6 = swift::runtime::trace::ScanLog;
      if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
      {
        if (this)
        {
          char v9 = 0;
          uint64_t v10 = 0x101010101010101;
          char v11 = 1;
          uint64_t v12 = 0x101010100000000;
          char v13 = 1;
          __int16 v14 = 256;
          char v15 = 1;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          v18[0] = &unk_1ECA041D0;
          v18[1] = swift::Demangle::__runtime::genericParameterName;
          unint64_t v19 = v18;
          swift::Demangle::__runtime::nodeToString((uint64_t *)__p, (uint64_t *)this, (swift::Demangle::__runtime::Node *)&v9, v7);
          if (v21 >= 0) {
            unint64_t v8 = __p;
          }
          else {
            unint64_t v8 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315138;
          unint64_t v23 = (const char *)v8;
          _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "section_scan", "protocol scan for '%s'", buf, 0xCu);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
          if (v19 == v18)
          {
            (*(void (**)(void *))(v18[0] + 32))(v18);
          }
          else if (v19)
          {
            (*(void (**)(void))(*v19 + 40))();
          }
        }
        else
        {
          *(_DWORD *)buf = 136315138;
          unint64_t v23 = "<null>";
          _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "section_scan", "protocol scan for '%s'", buf, 0xCu);
        }
      }
    }
  }
  else
  {
LABEL_16:
    os_signpost_id_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = 0;
}

uint64_t swift::TargetPackPointer<swift::InProcess,swift::TargetMetadata>::getNumElements(void *a1, uint64_t a2, const char *a3, char *a4)
{
  if ((*a1 & 1) == 0) {
    swift::fatalError(0, "Cannot get length of on-stack pack", a3, a4);
  }
  return *(void *)((*a1 & 0xFFFFFFFFFFFFFFFELL) - 8);
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long,unsigned int>(char const*,int,unsigned int,int,char const*,unsigned long,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,unsigned int,int,char const*,unsigned long,unsigned int>(char const*,int,unsigned int,int,char const*,unsigned long,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C40363580A0, a3);
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      unint64_t v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
      uint64_t result = v4;
      break;
  }
  return result;
}

uint64_t anonymous namespace'::DecodedMetadataBuilder::beginPackExpansion(void *a1, uint64_t a2, const char *a3, char *a4)
{
  if ((a2 & 1) == 0) {
    swift::fatalError(0, "Pack expansion count type should be a pack\n", a3, a4);
  }
  unint64_t v7 = (char *)a1[11];
  unint64_t v6 = a1[12];
  if ((unint64_t)v7 >= v6)
  {
    char v9 = (char *)a1[10];
    uint64_t v10 = (v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (char *)operator new(16 * v14);
    uint64_t v17 = &v16[16 * v10];
    unint64_t v18 = &v16[v15];
    *(void *)uint64_t v17 = a2;
    *((void *)v17 + 1) = 0;
    unint64_t v8 = v17 + 16;
    if (v7 == v9)
    {
      unint64_t v19 = &v16[16 * v10];
    }
    else
    {
      do
      {
        unint64_t v19 = v17 - 16;
        *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
        v7 -= 16;
        v17 -= 16;
      }
      while (v7 != v9);
    }
    a1[10] = v19;
    a1[11] = v8;
    a1[12] = v18;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)unint64_t v7 = a2;
    *((void *)v7 + 1) = 0;
    unint64_t v8 = v7 + 16;
  }
  a1[11] = v8;
  return *(void *)((a2 & 0xFFFFFFFFFFFFFFFELL) - 8);
}

uint64_t swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>::getConventionFromString(char *__s1, size_t __n)
{
  switch(__n)
  {
    case 3uLL:
      if (*(_WORD *)__s1 != 26944 || __s1[2] != 110) {
        goto LABEL_26;
      }
      uint64_t v5 = 0;
      uint64_t v6 = 0x100000000;
      break;
    case 6uLL:
      if (!memcmp(__s1, "@inout", __n))
      {
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 3;
      }
      else
      {
        if (memcmp(__s1, "@owned", __n)) {
          goto LABEL_26;
        }
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 5;
      }
      break;
    case 8uLL:
      if (memcmp(__s1, "@unowned", __n)) {
        goto LABEL_26;
      }
      uint64_t v6 = 0x100000000;
      uint64_t v5 = 6;
      break;
    case 0xBuLL:
      if (!memcmp(__s1, "@guaranteed", __n))
      {
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 7;
      }
      else if (*(void *)__s1 == 0x776F5F6B63617040 && *(void *)(__s1 + 3) == 0x64656E776F5F6B63)
      {
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 8;
      }
      else
      {
        if (memcmp(__s1, "@pack_inout", __n)) {
          goto LABEL_26;
        }
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 10;
      }
      break;
    case 0xCuLL:
      if (memcmp(__s1, "@in_constant", __n)) {
        goto LABEL_26;
      }
      uint64_t v6 = 0x100000000;
      uint64_t v5 = 1;
      break;
    case 0xEuLL:
      if (memcmp(__s1, "@in_guaranteed", __n)) {
        goto LABEL_26;
      }
      uint64_t v6 = 0x100000000;
      uint64_t v5 = 2;
      break;
    case 0x10uLL:
      if (!memcmp(__s1, "@inout_aliasable", __n))
      {
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 4;
      }
      else
      {
        if (memcmp(__s1, "@pack_guaranteed", __n)) {
          goto LABEL_26;
        }
        uint64_t v6 = 0x100000000;
        uint64_t v5 = 9;
      }
      break;
    default:
LABEL_26:
      uint64_t v6 = 0;
      uint64_t v5 = 0;
      break;
  }
  return v5 | v6;
}

uint64_t swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>::getDifferentiabilityFromString(void *a1, uint64_t a2)
{
  if (!a2) {
    return 256;
  }
  if (a2 == 13 && *a1 == 0x76697265446F6E40 && *(void *)((char *)a1 + 5) == 0x6576697461766972) {
    return 257;
  }
  return 0;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(a1, a2, a3, a4);
  }
  uint64_t v5 = *(void *)a1 + 16 * v4;
  unsigned int v6 = *a3;
  unsigned __int8 v7 = *a4;
  *(void *)uint64_t v5 = *a2;
  *(_DWORD *)(v5 + 8) = v6;
  *(unsigned char *)(v5 + 12) = v7;
  LODWORD(v5) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(void *)a1 + 16 * v5 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionParam<swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack,swift::Demangle::__runtime::ImplParameterConvention &,swift::optionset::OptionSet<swift::Demangle::__runtime::ImplParameterInfoFlags,unsigned char> &>(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  char v9 = (void *)(*(void *)a1 + 16 * v8);
  *char v9 = v5;
  v9[1] = v6 | (v7 << 32);
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v9;
  return *(void *)a1 + 16 * v9 - 16;
}

uint64_t swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>::getConventionFromString(_DWORD *a1, size_t __n)
{
  switch(__n)
  {
    case 4uLL:
      if (*a1 != 1953853248) {
        goto LABEL_13;
      }
      uint64_t v2 = 0;
      uint64_t v3 = 0x100000000;
      break;
    case 6uLL:
      if (memcmp(a1, "@owned", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000;
      uint64_t v2 = 1;
      break;
    case 8uLL:
      if (memcmp(a1, "@unowned", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000;
      uint64_t v2 = 2;
      break;
    case 9uLL:
      if (memcmp(a1, "@pack_out", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000;
      uint64_t v2 = 5;
      break;
    case 0xDuLL:
      if (memcmp(a1, "@autoreleased", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000;
      uint64_t v2 = 4;
      break;
    case 0x16uLL:
      if (memcmp(a1, "@unowned_inner_pointer", __n)) {
        goto LABEL_13;
      }
      uint64_t v3 = 0x100000000;
      uint64_t v2 = 3;
      break;
    default:
LABEL_13:
      uint64_t v3 = 0;
      uint64_t v2 = 0;
      break;
  }
  return v2 | v3;
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>>::emplace_back<swift::MetadataOrPack,swift::Demangle::__runtime::ImplResultConvention &>(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack,swift::Demangle::__runtime::ImplResultConvention &>(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1 + 16 * v3;
  unsigned int v5 = *a3;
  *(void *)uint64_t v4 = *a2;
  *(_DWORD *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 12) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  return *(void *)a1 + 16 * v4 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<swift::Demangle::__runtime::ImplFunctionResult<swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack,swift::Demangle::__runtime::ImplResultConvention &>(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  uint64_t v7 = (void *)(*(void *)a1 + 16 * v6);
  *uint64_t v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 16 * v7 - 16;
}

uint64_t *swift::Demangle::__runtime::TypeDecoder<anonymous namespace'::DecodedMetadataBuilder>::decodeMangledType(swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::MetadataOrPack)#1}::operator()(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 8);
  if (v5 >= *(_DWORD *)(*result + 12))
  {
    uint64_t result = (uint64_t *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(*result, v4 + 16, v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(v4 + 8);
  }
  *(void *)(*(void *)v4 + 8 * v5) = a2;
  ++*(_DWORD *)(v4 + 8);
  uint64_t v6 = v3[1];
  long long v7 = *(_OWORD *)v3[2];
  uint64_t v8 = *(unsigned int *)(v6 + 8);
  if (v8 >= *(_DWORD *)(v6 + 12))
  {
    long long v9 = *(_OWORD *)v3[2];
    uint64_t result = (uint64_t *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(v3[1], v6 + 16, v8 + 1, 16);
    long long v7 = v9;
    LODWORD(v8) = *(_DWORD *)(v6 + 8);
  }
  *(_OWORD *)(*(void *)v6 + 16 * v8) = v7;
  ++*(_DWORD *)(v6 + 8);
  return result;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<unsigned int,unsigned int>,true>::growAndEmplaceBack<unsigned long long,unsigned long long>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(void *)(*(void *)a1 + 8 * v6) = v4 | (v5 << 32);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 8 * v7 - 8;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<std::pair<swift::MetadataOrPack,swift::MetadataOrPack>,true>::growAndEmplaceBack<swift::MetadataOrPack&,swift::MetadataOrPack>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  unsigned int v7 = (void *)(*(void *)a1 + 16 * v6);
  *unsigned int v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 16 * v7 - 16;
}

uint64_t __swift::__runtime::llvm::SmallVectorTemplateBase<anonymous namespace'::DecodedMetadataBuilder::BuiltSILBoxField,true>::growAndEmplaceBack<swift::MetadataOrPack,BOOL &>(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  unsigned int v7 = (void *)(*(void *)a1 + 16 * v6);
  *unsigned int v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 16 * v7 - 16;
}

void *swift::Lazy<anonymous namespace'::OpaqueTypeMappings>::defaultInitCallback(void *result)
{
  char *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  uint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  uint64_t v3 = a1;
  unsigned int NumConditionalInvertibleProtocolsRequirementCounts = swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(a1);
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  if ((*v5 & 0x80) == 0) {
    goto LABEL_13;
  }
  if (!v5) {
    uint64_t v5 = 0;
  }
  if ((*((_WORD *)v5 + 7) & 2) != 0
    && (!v3 ? (uint64_t v6 = 0) : (uint64_t v6 = v3),
        uint64_t v7 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v6),
        (unsigned int v8 = swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(v3)) != 0))
  {
    unsigned int v9 = *(unsigned __int16 *)(v7 + 2 * v8 - 2);
  }
  else
  {
LABEL_13:
    unsigned int v9 = 0;
  }
  return ((TrailingObjectsImpl + 2 * NumConditionalInvertibleProtocolsRequirementCounts + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 12 * v9;
}

uint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(a1);
  if (*a1 & 0x80) != 0 && (!a1 ? (uint64_t v3 = 0) : (uint64_t v3 = a1), (*((_WORD *)v3 + 7)))
  {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(a1);
    if (a1) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t GenericPackShapeHeader = 0;
    if (a1)
    {
LABEL_7:
      uint64_t v5 = a1;
      goto LABEL_10;
    }
  }
  uint64_t v5 = 0;
LABEL_10:
  if ((*v5 & 0x80) != 0)
  {
    if (!v5) {
      uint64_t v5 = 0;
    }
    unint64_t v6 = ((unint64_t)*((unsigned __int16 *)v5 + 7) >> 1) & 1;
  }
  else
  {
    unint64_t v6 = 0;
  }
  return TrailingObjectsImpl + 8 * GenericPackShapeHeader + 2 * v6;
}

unint64_t swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(unsigned char *a1)
{
  if (a1 == (unsigned char *)-8)
  {
    int v1 = 0;
    goto LABEL_3;
  }
  int v1 = a1 + 8;
  if (a1)
  {
LABEL_3:
    uint64_t v2 = (unsigned int *)a1;
    goto LABEL_6;
  }
  uint64_t v2 = 0;
LABEL_6:
  unint64_t v3 = *v2;
  if ((v3 & 0x80) != 0)
  {
    if (a1) {
      unint64_t v6 = a1;
    }
    else {
      unint64_t v6 = 0;
    }
    uint64_t v4 = *((unsigned __int16 *)v6 + 4);
    if (a1) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (a1)
    {
LABEL_8:
      uint64_t v5 = a1;
      goto LABEL_14;
    }
  }
  uint64_t v5 = 0;
LABEL_14:
  if ((*v5 & 0x80) != 0)
  {
    if (a1) {
      unsigned int v9 = a1;
    }
    else {
      unsigned int v9 = 0;
    }
    unsigned int v7 = *((unsigned __int16 *)v9 + 5);
    if (a1) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v7 = 0;
    if (a1)
    {
LABEL_16:
      unsigned int v8 = a1;
      goto LABEL_22;
    }
  }
  unsigned int v8 = 0;
LABEL_22:
  if ((*v8 & 0x80) != 0)
  {
    if (a1) {
      unint64_t v11 = a1;
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v10 = *((_WORD *)v11 + 7) & 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  return ((unint64_t)&v1[8 * ((v3 >> 7) & 1) + 3 + v4] & 0xFFFFFFFFFFFFFFFCLL) + 12 * v7 + 4 * v10;
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(unsigned char *a1)
{
  if (a1) {
    int v1 = a1;
  }
  else {
    int v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  uint64_t v2 = a1 ? a1 : 0;
  if ((*((_WORD *)v2 + 7) & 1) == 0) {
    return 0;
  }
  if (a1) {
    uint64_t v4 = (unsigned int *)a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4;
  if (v4 == (unsigned int *)-8)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = v4 + 2;
    if (!v4) {
      uint64_t v4 = 0;
    }
  }
  unint64_t v7 = *v4;
  if ((v7 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v8 = *((unsigned __int16 *)v10 + 4);
    if (v5) {
      goto LABEL_20;
    }
LABEL_25:
    unsigned int v9 = 0;
    goto LABEL_26;
  }
  uint64_t v8 = 0;
  if (!v5) {
    goto LABEL_25;
  }
LABEL_20:
  unsigned int v9 = v5;
LABEL_26:
  if ((*(unsigned char *)v9 & 0x80) != 0)
  {
    if (v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = 0;
    }
    unsigned int v11 = *((unsigned __int16 *)v12 + 5);
  }
  else
  {
    unsigned int v11 = 0;
  }
  unint64_t v13 = ((unint64_t)&v6[2 * ((v7 >> 7) & 1)] + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  return (*(unsigned __int16 *)(v13 + 12 * v11 + 2) << 16) | *(unsigned __int16 *)(v13 + 12 * v11);
}

uint64_t swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getNumConditionalInvertibleProtocolsRequirementCounts(unsigned char *a1)
{
  if (a1) {
    int v1 = a1;
  }
  else {
    int v1 = 0;
  }
  if ((*v1 & 0x80) == 0) {
    return 0;
  }
  if (!v1) {
    int v1 = 0;
  }
  if ((*((_WORD *)v1 + 7) & 2) == 0) {
    return 0;
  }
  if (a1) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v3);
  if (*v3 & 0x80) != 0 && (!v3 ? (uint64_t v5 = 0) : (uint64_t v5 = v3), (*((_WORD *)v5 + 7))) {
    uint64_t GenericPackShapeHeader = (unsigned __int16)swift::TrailingGenericContextObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getGenericPackShapeHeader(v3);
  }
  else {
    uint64_t GenericPackShapeHeader = 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned __int16 *)(TrailingObjectsImpl + 8 * GenericPackShapeHeader));
  v7.i16[0] = vaddlv_u8(v7);
  return v7.u32[0];
}

void std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06B78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06B78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(unsigned int,unsigned int)#1}>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  if (*(_DWORD *)(v3 + 32) <= v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  if (*(_DWORD *)(v6 + 16) <= v5) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(unsigned char *)(v6 + 28))
  {
    uint64_t v8 = *(uint8x16_t **)v6;
    unsigned int v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0;
    }
    if (v5)
    {
      if (v5 < 8)
      {
        unsigned int v11 = v8;
        goto LABEL_22;
      }
      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          unsigned int v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            unsigned int v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }
          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      unsigned int v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      unint64_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8;
      }
      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8 * v7);
      }
      goto LABEL_22;
    }
  }
  else
  {
    v7 += v5;
  }
  return *(void *)(*(void *)(v3 + 16) + 8 * v7);
}

void std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06BC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06BC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1},std::allocator<anonymous namespace'::DecodedMetadataBuilder::resolveOpaqueType(swift::Demangle::__runtime::Node *,__swift::__runtime::llvm::ArrayRef<__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>>,unsigned int)::{lambda(swift::TargetMetadata<swift::InProcess> const*,unsigned int)#1}>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8 * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06C08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06C08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  if (*(_DWORD *)(v3 + 32) <= v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  if (*(_DWORD *)(v6 + 16) <= v5) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(unsigned char *)(v6 + 28))
  {
    uint64_t v8 = *(uint8x16_t **)v6;
    unsigned int v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0;
    }
    if (v5)
    {
      if (v5 < 8)
      {
        unsigned int v11 = v8;
        goto LABEL_22;
      }
      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          unsigned int v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            unsigned int v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }
          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      unsigned int v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      unint64_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8;
      }
      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8 * v7);
      }
      goto LABEL_22;
    }
  }
  else
  {
    v7 += v5;
  }
  return *(void *)(*(void *)(v3 + 16) + 8 * v7);
}

void std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06C50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06C50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1,std::allocator<swift_getOpaqueTypeMetadataImpl(swift::MetadataRequest,void const* const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8 * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

uint64_t __swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack>::insert<swift::MetadataOrPack const*,void>(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 3;
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  unint64_t v9 = *(unsigned int *)(a1 + 12);
  unsigned int v11 = *(_DWORD *)(a1 + 8);
  size_t v12 = a4 - __src;
  unint64_t v13 = (a4 - __src) >> 3;
  unint64_t v14 = v13 + v10;
  if (*(void *)a1 + 8 * v10 != a2)
  {
    if (v14 > v9)
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v14, 8);
      uint64_t v7 = *(void *)a1;
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      unsigned int v11 = *(_DWORD *)(a1 + 8);
    }
    uint64_t v15 = (char *)(v7 + 8 * v10);
    unint64_t __srca = (char *)(v7 + 8 * v8);
    size_t v16 = v15 - __srca;
    unint64_t v17 = (v15 - __srca) >> 3;
    if (v17 < v13)
    {
      unsigned int v18 = v11 + (v12 >> 3);
      *(_DWORD *)(a1 + 8) = v18;
      if (v8 == v10)
      {
        int32x4_t v19 = __src;
        uint64_t v21 = v7 + 8 * v8;
        int32x4_t v20 = a4;
        goto LABEL_34;
      }
      uint64_t v21 = v7 + 8 * v8;
      memcpy((void *)(v7 + 8 * v18 - 8 * v17), __srca, v16);
      if (v16 < 0x20 || (unint64_t)(__srca - __src) < 0x20)
      {
        uint16x8_t v28 = (char *)(v7 + 8 * v8);
        uint64_t v29 = (v15 - __srca) >> 3;
        int32x4_t v19 = __src;
        int32x4_t v20 = a4;
      }
      else
      {
        unint64_t v27 = 8 * (v17 & 0xFFFFFFFFFFFFFFFCLL);
        uint16x8_t v28 = &__srca[v27];
        uint64_t v29 = (v16 >> 3) & 3;
        int32x4_t v19 = &__src[v27];
        int32x4_t v30 = (long long *)(__src + 16);
        unint64_t v31 = (_OWORD *)(v7 + 8 * v8 + 16);
        unint64_t v32 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *unint64_t v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 4;
        }
        while (v32);
        int32x4_t v20 = a4;
        if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          if (v19 != v20) {
            memcpy(v15, v19, v20 - v19);
          }
          return v21;
        }
      }
      do
      {
        uint64_t v42 = *(void *)v19;
        v19 += 8;
        *(void *)uint16x8_t v28 = v42;
        v28 += 8;
        --v29;
      }
      while (v29);
      goto LABEL_34;
    }
    uint64_t v22 = 8 * v13;
    uint64_t v23 = v10;
    if (v13 + v10 > *(unsigned int *)(a1 + 12))
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v13 + v10, 8);
      uint64_t v23 = *(unsigned int *)(a1 + 8);
      unsigned int v11 = *(_DWORD *)(a1 + 8);
    }
    uint8x16_t v24 = &v15[-v22];
    if (a4 == __src) {
      goto LABEL_28;
    }
    uint16x8_t v25 = (void *)(*(void *)a1 + 8 * v23);
    if (v12 - 8 >= 0x78)
    {
      uint64_t v34 = 8 * v23 + *(void *)a1;
      uint16x8_t v26 = &v15[-v22];
      if ((v12 & 0xFFFFFFFFFFFFFFF8) - v7 - 8 * v10 + v34 >= 0x20)
      {
        unint64_t v35 = ((v12 - 8) >> 3) + 1;
        uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        uint16x8_t v25 = (void *)((char *)v25 + v36);
        uint16x8_t v26 = &v24[v36];
        unint64_t v37 = (long long *)(8 * v10 - 8 * v13 + v7 + 16);
        unint64_t v38 = (_OWORD *)(v34 + 16);
        uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *unint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint16x8_t v26 = &v15[-v22];
    }
    do
    {
      uint64_t v41 = *(void *)v26;
      v26 += 8;
      *v25++ = v41;
    }
    while (v26 != v15);
LABEL_28:
    *(_DWORD *)(a1 + 8) = v11 + v13;
    uint64_t v21 = v7 + 8 * v8;
    if (v24 != __srca) {
      memmove(&__srca[v22], __srca, &v15[-v22] - __srca);
    }
    if (a4 != __src) {
      memmove(__srca, __src, v12);
    }
    return v21;
  }
  if (v14 > v9)
  {
    __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v14, 8);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(void *)a1;
  }
  if (__src != a4)
  {
    memcpy((void *)(v7 + 8 * v11), __src, v12);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(void *)a1;
  }
  *(_DWORD *)(a1 + 8) = v11 + (v12 >> 3);
  return v7 + 8 * v8;
}

char *swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_0>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_0 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      return 0;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1060C40D29BE02FLL, a3);
      }
      return 0;
    default:
      _gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_10::operator() const(void)::{lambda(void)#1}::operator()((const void **)a1, &v40);
      int v4 = std::string::append(&v40, "incorrect number of generic args (");
      std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, *(void *)(a1 + 32));
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v6 = &v39;
      }
      else {
        uint64_t v6 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v39.__r_.__value_.__l.__size_;
      }
      uint64_t v8 = std::string::append(&v41, (const std::string::value_type *)v6, size);
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      uint64_t v10 = std::string::append(&v42, "), ");
      unint64_t v11 = 0;
      std::string::size_type v12 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v12;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v13 = *(_DWORD **)(a1 + 40);
      if ((*(unsigned char *)v13 & 0x80) == 0) {
        goto LABEL_25;
      }
      uint64_t v15 = v13 + 1;
      uint64_t v14 = (int)v13[1];
      if (!v14) {
        goto LABEL_23;
      }
      size_t v16 = (void *)((char *)v15 + (v14 & 0xFFFFFFFFFFFFFFFELL));
      if (v14)
      {
        if (!*v16) {
          goto LABEL_23;
        }
        unint64_t v17 = (_DWORD *)*v16;
      }
      else
      {
        if (!v16) {
          goto LABEL_23;
        }
        unint64_t v17 = (_DWORD *)((char *)v15 + (v14 & 0xFFFFFFFFFFFFFFFELL));
      }
      if (v17)
      {
        uint64_t GenericContext = swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v17);
        if (GenericContext)
        {
          uint64_t v20 = *(unsigned __int16 *)(GenericContext + 4);
          goto LABEL_24;
        }
      }
LABEL_23:
      uint64_t v20 = 0;
LABEL_24:
      unint64_t v11 = *(unsigned __int16 *)(swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v13) + 4) - v20;
LABEL_25:
      std::to_string(&v38, v11);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v38;
      }
      else {
        uint64_t v21 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v43, (const std::string::value_type *)v21, v22);
      std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      uint16x8_t v25 = std::string::append(&v44, " local params, ");
      std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v37, *(_DWORD *)(a1 + 48));
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v27 = &v37;
      }
      else {
        unint64_t v27 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v28 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v28 = v37.__r_.__value_.__l.__size_;
      }
      uint64_t v29 = std::string::append(&v45, (const std::string::value_type *)v27, v28);
      std::string::size_type v30 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      unint64_t v31 = std::string::append(&v46, " total params");
      std::string v36 = *v31;
      v31->__r_.__value_.__r.__words[0] = 0;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v46.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_39:
          if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_40;
          }
          goto LABEL_55;
        }
      }
      else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_39;
      }
      operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_40:
        if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_41;
        }
        goto LABEL_56;
      }
LABEL_55:
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_41:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_42;
        }
        goto LABEL_57;
      }
LABEL_56:
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_42:
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_43;
        }
        goto LABEL_58;
      }
LABEL_57:
      operator delete(v38.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_43:
        if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_44;
        }
        goto LABEL_59;
      }
LABEL_58:
      operator delete(v43.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_45;
        }
        goto LABEL_60;
      }
LABEL_59:
      operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_45:
        if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_61;
      }
LABEL_60:
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_47;
        }
        goto LABEL_62;
      }
LABEL_61:
      operator delete(v41.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_47;
      }
LABEL_62:
      operator delete(v40.__r_.__value_.__l.__data_);
LABEL_47:
      int v32 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
      long long v33 = (void *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v34 = &v36;
      }
      else {
        uint64_t v34 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      unsigned int v18 = strdup((const char *)v34);
      if (v32 < 0) {
        operator delete(v33);
      }
      return v18;
  }
}

std::string *_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_10::operator() const(void)::{lambda(void)#1}::operator()@<X0>(const void **a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "_gatherGenericParameters: context: ");
  if (*a1) {
    int v4 = (swift::SymbolInfo *)*a1;
  }
  else {
    int v4 = 0;
  }
  swift::SymbolInfo::lookup(v4, (uint64_t)&__p);
  if (v24)
  {
    std::string::size_type v5 = (const std::string::value_type *)_ContiguousArrayBuffer.mutableCount.getter((uint64_t)&__p);
    std::string::append(a2, v5);
    std::string::append(a2, " ");
  }
  __s = 0;
  swift_asprintf(&__s, "%p", *a1);
  uint64_t v6 = __s;
  std::string::append(a2, __s);
  free(v6);
  std::string::append(a2, " <");
  uint64_t v7 = a1[2];
  if (v7)
  {
    uint64_t v8 = (std::string **)a1[1];
    int32x4_t v19 = *v8;
    swift::MetadataOrPack::nameForMetadata(&v19, (uint64_t)&__p);
    if ((v23 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v23 & 0x80u) == 0) {
      std::string::size_type v10 = v23;
    }
    else {
      std::string::size_type v10 = v22;
    }
    std::string::append(a2, p_p, v10);
    if ((char)v23 < 0)
    {
      operator delete(__p);
      if (v7 == (const void *)1) {
        goto LABEL_17;
      }
    }
    else if (v7 == (const void *)1)
    {
      goto LABEL_17;
    }
    uint64_t v15 = v8 + 1;
    uint64_t v16 = 8 * (void)v7 - 8;
    do
    {
      int32x4_t v19 = *v15;
      std::string::append(a2, ", ");
      swift::MetadataOrPack::nameForMetadata(&v19, (uint64_t)&__p);
      if ((v23 & 0x80u) == 0) {
        unint64_t v17 = (const std::string::value_type *)&__p;
      }
      else {
        unint64_t v17 = (const std::string::value_type *)__p;
      }
      if ((v23 & 0x80u) == 0) {
        std::string::size_type v18 = v23;
      }
      else {
        std::string::size_type v18 = v22;
      }
      std::string::append(a2, v17, v18);
      if ((char)v23 < 0) {
        operator delete(__p);
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
LABEL_17:
  std::string::append(a2, "> ");
  std::string::append(a2, "parent: ");
  unint64_t v11 = (objc_class *)a1[3];
  if (v11)
  {
    swift::nameForMetadata((uint64_t *)&__p, v11);
    if ((v23 & 0x80u) == 0) {
      std::string::size_type v12 = (const std::string::value_type *)&__p;
    }
    else {
      std::string::size_type v12 = (const std::string::value_type *)__p;
    }
    if ((v23 & 0x80u) == 0) {
      std::string::size_type v13 = v23;
    }
    else {
      std::string::size_type v13 = v22;
    }
    std::string::append(a2, v12, v13);
    if ((char)v23 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    std::string::append(a2, "<null>");
  }
  return std::string::append(a2, " - ");
}

char *swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_1>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_1 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(const void **a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      return 0;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1060C404361888DLL, a3);
      }
      return 0;
    default:
      _gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_10::operator() const(void)::{lambda(void)#1}::operator()(a1, &v12);
      uint64_t v3 = std::string::append(&v12, "failed to get parent context's written");
      std::string::size_type v4 = v3->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      v13.__r_.__value_.__r.__words[2] = v4;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v5 = std::string::append(&v13, " generic arguments");
      std::string v11 = *v5;
      v5->__r_.__value_.__r.__words[0] = 0;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v13.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete(v12.__r_.__value_.__l.__data_);
LABEL_4:
      int v6 = SHIBYTE(v11.__r_.__value_.__r.__words[2]);
      uint64_t v7 = (void *)v11.__r_.__value_.__r.__words[0];
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v11;
      }
      else {
        uint64_t v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v9 = strdup((const char *)v8);
      if (v6 < 0) {
        operator delete(v7);
      }
      return v9;
  }
}

char *swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_2>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_2 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      return 0;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1060C40E00DCE36, a3);
      }
      return 0;
    default:
      _gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_10::operator() const(void)::{lambda(void)#1}::operator()((const void **)a1, &v23);
      std::string::size_type v4 = std::string::append(&v23, "have ");
      std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v22, *(void *)(a1 + 32));
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v6 = &v22;
      }
      else {
        int v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
      }
      uint64_t v8 = std::string::append(&v24, (const std::string::value_type *)v6, size);
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v10 = std::string::append(&v25, "generic args, expected ");
      std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v21, *(_DWORD *)(a1 + 40));
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v12 = &v21;
      }
      else {
        std::string v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = v21.__r_.__value_.__l.__size_;
      }
      uint64_t v14 = std::string::append(&v26, (const std::string::value_type *)v12, v13);
      std::string v20 = *v14;
      v14->__r_.__value_.__r.__words[0] = 0;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v21.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_16:
          if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_33;
        }
      }
      else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(v26.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_34;
      }
LABEL_33:
      operator delete(v25.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_18:
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v22.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_19:
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_36;
      }
LABEL_35:
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_20;
      }
LABEL_36:
      operator delete(v23.__r_.__value_.__l.__data_);
LABEL_20:
      int v15 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
      uint64_t v16 = (void *)v20.__r_.__value_.__r.__words[0];
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v17 = &v20;
      }
      else {
        unint64_t v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v18 = strdup((const char *)v17);
      if (v15 < 0) {
        operator delete(v16);
      }
      return v18;
  }
}

char *swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_3>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_3 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      return 0;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1060C40FBDF1FB7, a3);
      }
      return 0;
    default:
      _gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_10::operator() const(void)::{lambda(void)#1}::operator()((const void **)a1, &v18);
      std::string::size_type v4 = std::string::append(&v18, "param ");
      std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v17, *(_DWORD *)(a1 + 32));
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v6 = &v17;
      }
      else {
        int v6 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      uint64_t v8 = std::string::append(&v19, (const std::string::value_type *)v6, size);
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v10 = std::string::append(&v20, " expected metadata but got a metadata pack");
      std::string v16 = *v10;
      v10->__r_.__value_.__r.__words[0] = 0;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v20.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_10:
          if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_11;
          }
          goto LABEL_25;
        }
      }
      else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_10;
      }
      operator delete(v17.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_11:
        if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_26;
      }
LABEL_25:
      operator delete(v19.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
LABEL_26:
      operator delete(v18.__r_.__value_.__l.__data_);
LABEL_12:
      int v11 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
      std::string v12 = (void *)v16.__r_.__value_.__r.__words[0];
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = &v16;
      }
      else {
        std::string::size_type v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      uint64_t v14 = strdup((const char *)v13);
      if (v11 < 0) {
        operator delete(v12);
      }
      return v14;
  }
}

char *swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_4>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_4 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      return 0;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1060C40FBDF1FB7, a3);
      }
      return 0;
    default:
      _gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_10::operator() const(void)::{lambda(void)#1}::operator()((const void **)a1, &v18);
      std::string::size_type v4 = std::string::append(&v18, "param ");
      std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v17, *(_DWORD *)(a1 + 32));
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v6 = &v17;
      }
      else {
        int v6 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      uint64_t v8 = std::string::append(&v19, (const std::string::value_type *)v6, size);
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v10 = std::string::append(&v20, " expected a metadata pack but got metadata");
      std::string v16 = *v10;
      v10->__r_.__value_.__r.__words[0] = 0;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v20.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_10:
          if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_11;
          }
          goto LABEL_25;
        }
      }
      else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_10;
      }
      operator delete(v17.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_11:
        if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_26;
      }
LABEL_25:
      operator delete(v19.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
LABEL_26:
      operator delete(v18.__r_.__value_.__l.__data_);
LABEL_12:
      int v11 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
      std::string v12 = (void *)v16.__r_.__value_.__r.__words[0];
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = &v16;
      }
      else {
        std::string::size_type v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      uint64_t v14 = strdup((const char *)v13);
      if (v11 < 0) {
        operator delete(v12);
      }
      return v14;
  }
}

char *swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_5>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_5 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      return 0;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1060C4063E0DDF5, a3);
      }
      return 0;
    default:
      _gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_10::operator() const(void)::{lambda(void)#1}::operator()((const void **)a1, &v23);
      std::string::size_type v4 = std::string::append(&v23, "param ");
      std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v22, *(_DWORD *)(a1 + 32));
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v6 = &v22;
      }
      else {
        int v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
      }
      uint64_t v8 = std::string::append(&v24, (const std::string::value_type *)v6, size);
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v10 = std::string::append(&v25, " has unexpected kind ");
      std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v21, *(unsigned char *)(a1 + 36) & 0x3F);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v12 = &v21;
      }
      else {
        std::string v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = v21.__r_.__value_.__l.__size_;
      }
      uint64_t v14 = std::string::append(&v26, (const std::string::value_type *)v12, v13);
      std::string v20 = *v14;
      v14->__r_.__value_.__r.__words[0] = 0;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v21.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_16:
          if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_33;
        }
      }
      else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(v26.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_34;
      }
LABEL_33:
      operator delete(v25.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_18:
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v22.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_19:
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_36;
      }
LABEL_35:
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_20;
      }
LABEL_36:
      operator delete(v23.__r_.__value_.__l.__data_);
LABEL_20:
      int v15 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
      std::string v16 = (void *)v20.__r_.__value_.__r.__words[0];
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v17 = &v20;
      }
      else {
        std::string v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      std::string v18 = strdup((const char *)v17);
      if (v15 < 0) {
        operator delete(v16);
      }
      return v18;
  }
}

void std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06C98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06C98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_6>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v3 = *a2;
  std::string::size_type v4 = *(uint64_t **)(a1 + 8);
  std::string::size_type v5 = (uint64_t *)v4[1];
  if (*((_DWORD *)v5 + 2) <= v3) {
    return 0;
  }
  uint64_t v6 = *v5;
  int v7 = v3 ? *(_DWORD *)(v6 + 4 * (v3 - 1)) : 0;
  unsigned int v8 = v7 + *a3;
  if (v8 >= *(_DWORD *)(v6 + 4 * v3)) {
    return 0;
  }
  uint64_t v9 = *v4;
  if (*(_DWORD *)(v9 + 8) <= v8) {
    return 0;
  }
  else {
    return *(void *)(*(void *)v9 + 8 * v8);
  }
}

void std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06CE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06CE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_7>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  if (*(_DWORD *)(v3 + 8) <= v2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)v3 + 8 * v2);
  }
}

void std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06D28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06D28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8,std::allocator<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_8>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()()
{
  return 0;
}

char *swift::TypeLookupError::TypeLookupError<_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_9>(_gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_9 const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      return 0;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1060C4032852127, a3);
      }
      return 0;
    default:
      _gatherGenericParameters(swift::TargetContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<swift::MetadataOrPack>,swift::TargetMetadata<swift::InProcess> const*,__swift::__runtime::llvm::SmallVectorImpl<unsigned int> &,__swift::__runtime::llvm::SmallVectorImpl<void const*> &,swift::Demangle::__runtime::Demangler &)::$_10::operator() const(void)::{lambda(void)#1}::operator()((const void **)a1, &v23);
      std::string::size_type v4 = std::string::append(&v23, "generic argument count mismatch, expected ");
      std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v22, *(unsigned __int16 *)(*(void *)(a1 + 32) + 8));
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v6 = &v22;
      }
      else {
        uint64_t v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
      }
      unsigned int v8 = std::string::append(&v24, (const std::string::value_type *)v6, size);
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v10 = std::string::append(&v25, ", have ");
      std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v21, *(void *)(a1 + 40));
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v12 = &v21;
      }
      else {
        std::string v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = v21.__r_.__value_.__l.__size_;
      }
      uint64_t v14 = std::string::append(&v26, (const std::string::value_type *)v12, v13);
      std::string v20 = *v14;
      v14->__r_.__value_.__r.__words[0] = 0;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v21.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_16:
          if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_33;
        }
      }
      else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(v26.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_34;
      }
LABEL_33:
      operator delete(v25.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_18:
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v22.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_19:
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_36;
      }
LABEL_35:
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_20;
      }
LABEL_36:
      operator delete(v23.__r_.__value_.__l.__data_);
LABEL_20:
      int v15 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
      std::string v16 = (void *)v20.__r_.__value_.__r.__words[0];
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v17 = &v20;
      }
      else {
        std::string v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      std::string v18 = strdup((const char *)v17);
      if (v15 < 0) {
        operator delete(v16);
      }
      return v18;
  }
}

void std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_0,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_0,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1ECA06D70;
  return result;
}

void std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_0,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ECA06D70;
}

uint64_t std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_0,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()()
{
  return 0;
}

void std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_1,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_1,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1ECA06DB8;
  return result;
}

void std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_1,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ECA06DB8;
}

uint64_t std::__function::__func<getObjCClassByMangledName(char const*,objc_class **)::$_1,std::allocator<getObjCClassByMangledName(char const*,objc_class **)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()()
{
  return 0;
}

void *swift_getTypeByMangledNode::$_0::__invoke(swift_getTypeByMangledNode::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_getTypeByMangledNode(this);
  swift_getTypeByMangledNode::Override = result;
  return result;
}

void *swift_getTypeByMangledName::$_0::__invoke(swift_getTypeByMangledName::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_getTypeByMangledName(this);
  swift_getTypeByMangledName::Override = result;
  return result;
}

void std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_0,std::allocator<swift_getTypeByMangledNameInEnvironment::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_0,std::allocator<swift_getTypeByMangledNameInEnvironment::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06E00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_0,std::allocator<swift_getTypeByMangledNameInEnvironment::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06E00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_0,std::allocator<swift_getTypeByMangledNameInEnvironment::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  if (*(_DWORD *)(v3 + 32) <= v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  if (*(_DWORD *)(v6 + 16) <= v5) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(unsigned char *)(v6 + 28))
  {
    unsigned int v8 = *(uint8x16_t **)v6;
    std::string::size_type v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0;
    }
    if (v5)
    {
      if (v5 < 8)
      {
        std::string::size_type v11 = v8;
        goto LABEL_22;
      }
      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        int v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          std::string::size_type v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            std::string::size_type v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }
          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      std::string::size_type v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      unint64_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8;
      }
      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8 * v7);
      }
      goto LABEL_22;
    }
  }
  else
  {
    v7 += v5;
  }
  return *(void *)(*(void *)(v3 + 16) + 8 * v7);
}

void std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_1,std::allocator<swift_getTypeByMangledNameInEnvironment::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_1,std::allocator<swift_getTypeByMangledNameInEnvironment::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06E48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_1,std::allocator<swift_getTypeByMangledNameInEnvironment::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06E48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironment::$_1,std::allocator<swift_getTypeByMangledNameInEnvironment::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8 * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06E90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06E90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  if (*(_DWORD *)(v3 + 32) <= v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  if (*(_DWORD *)(v6 + 16) <= v5) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(unsigned char *)(v6 + 28))
  {
    unsigned int v8 = *(uint8x16_t **)v6;
    std::string::size_type v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0;
    }
    if (v5)
    {
      if (v5 < 8)
      {
        std::string::size_type v11 = v8;
        goto LABEL_22;
      }
      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        int v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          std::string::size_type v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            std::string::size_type v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }
          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      std::string::size_type v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      unint64_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8;
      }
      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8 * v7);
      }
      goto LABEL_22;
    }
  }
  else
  {
    v7 += v5;
  }
  return *(void *)(*(void *)(v3 + 16) + 8 * v7);
}

void std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06ED8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06ED8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1,std::allocator<swift_getTypeByMangledNameInEnvironmentInMetadataState::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8 * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void std::__function::__func<swift_func_getReturnTypeInfo::$_0,std::allocator<swift_func_getReturnTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_func_getReturnTypeInfo::$_0,std::allocator<swift_func_getReturnTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06F20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_func_getReturnTypeInfo::$_0,std::allocator<swift_func_getReturnTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06F20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_func_getReturnTypeInfo::$_0,std::allocator<swift_func_getReturnTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  if (*(_DWORD *)(v3 + 32) <= v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  if (*(_DWORD *)(v6 + 16) <= v5) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(unsigned char *)(v6 + 28))
  {
    unsigned int v8 = *(uint8x16_t **)v6;
    std::string::size_type v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0;
    }
    if (v5)
    {
      if (v5 < 8)
      {
        std::string::size_type v11 = v8;
        goto LABEL_22;
      }
      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        int v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          std::string::size_type v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            std::string::size_type v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }
          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      std::string::size_type v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      unint64_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8;
      }
      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8 * v7);
      }
      goto LABEL_22;
    }
  }
  else
  {
    v7 += v5;
  }
  return *(void *)(*(void *)(v3 + 16) + 8 * v7);
}

void std::__function::__func<swift_func_getReturnTypeInfo::$_1,std::allocator<swift_func_getReturnTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_func_getReturnTypeInfo::$_1,std::allocator<swift_func_getReturnTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06F68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_func_getReturnTypeInfo::$_1,std::allocator<swift_func_getReturnTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06F68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_func_getReturnTypeInfo::$_1,std::allocator<swift_func_getReturnTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8 * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void std::__function::__func<swift_func_getParameterTypeInfo::$_0,std::allocator<swift_func_getParameterTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_func_getParameterTypeInfo::$_0,std::allocator<swift_func_getParameterTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06FB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_func_getParameterTypeInfo::$_0,std::allocator<swift_func_getParameterTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06FB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_func_getParameterTypeInfo::$_0,std::allocator<swift_func_getParameterTypeInfo::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  if (*(_DWORD *)(v3 + 32) <= v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  if (*(_DWORD *)(v6 + 16) <= v5) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(unsigned char *)(v6 + 28))
  {
    unsigned int v8 = *(uint8x16_t **)v6;
    std::string::size_type v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0;
    }
    if (v5)
    {
      if (v5 < 8)
      {
        std::string::size_type v11 = v8;
        goto LABEL_22;
      }
      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        int v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          std::string::size_type v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            std::string::size_type v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }
          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      std::string::size_type v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      unint64_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8;
      }
      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8 * v7);
      }
      goto LABEL_22;
    }
  }
  else
  {
    v7 += v5;
  }
  return *(void *)(*(void *)(v3 + 16) + 8 * v7);
}

void std::__function::__func<swift_func_getParameterTypeInfo::$_1,std::allocator<swift_func_getParameterTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_func_getParameterTypeInfo::$_1,std::allocator<swift_func_getParameterTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA06FF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_func_getParameterTypeInfo::$_1,std::allocator<swift_func_getParameterTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA06FF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_func_getParameterTypeInfo::$_1,std::allocator<swift_func_getParameterTypeInfo::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8 * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void std::__function::__func<swift_distributed_getWitnessTables::$_0,std::allocator<swift_distributed_getWitnessTables::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_distributed_getWitnessTables::$_0,std::allocator<swift_distributed_getWitnessTables::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA07040;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_0,std::allocator<swift_distributed_getWitnessTables::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA07040;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_0,std::allocator<swift_distributed_getWitnessTables::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  if (*(_DWORD *)(v3 + 32) <= v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 24) + 32 * v4;
  if (*(_DWORD *)(v6 + 16) <= v5) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 300) + *(_DWORD *)(v6 + 20);
  if (*(unsigned char *)(v6 + 28))
  {
    unsigned int v8 = *(uint8x16_t **)v6;
    std::string::size_type v9 = (uint8x16_t *)(*(void *)v6 + v5);
    if ((v9->i8[0] & 0x80000000) == 0) {
      return 0;
    }
    if (v5)
    {
      if (v5 < 8)
      {
        std::string::size_type v11 = v8;
        goto LABEL_22;
      }
      if (v5 >= 0x20)
      {
        uint64_t v12 = v5 & 0xFFFFFFE0;
        int32x4_t v13 = 0uLL;
        int32x4_t v14 = (int32x4_t)v7;
        int v15 = v8 + 1;
        uint64_t v16 = v12;
        int32x4_t v17 = 0uLL;
        int32x4_t v18 = 0uLL;
        int32x4_t v19 = 0uLL;
        int32x4_t v20 = 0uLL;
        int32x4_t v21 = 0uLL;
        int32x4_t v22 = 0uLL;
        do
        {
          uint8x16_t v23 = vshrq_n_u8(v15[-1], 7uLL);
          uint8x16_t v24 = vshrq_n_u8(*v15, 7uLL);
          uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v23.i8);
          uint16x8_t v26 = vmovl_high_u8(v23);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24.i8);
          uint16x8_t v28 = vmovl_high_u8(v24);
          int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v26);
          int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v26.i8);
          int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v25);
          int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v25.i8);
          int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v28);
          int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v28.i8);
          int32x4_t v20 = (int32x4_t)vaddw_high_u16((uint32x4_t)v20, v27);
          int32x4_t v19 = (int32x4_t)vaddw_u16((uint32x4_t)v19, *(uint16x4_t *)v27.i8);
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17)), vaddq_s32(vaddq_s32(v20, v13), vaddq_s32(v22, v18))));
        if (v12 == v5) {
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
        if ((v5 & 0x18) == 0)
        {
          std::string::size_type v11 = (uint8x16_t *)((char *)v8 + v12);
          do
          {
LABEL_22:
            unsigned int v35 = v11->u8[0];
            std::string::size_type v11 = (uint8x16_t *)((char *)v11 + 1);
            v7 += v35 >> 7;
          }
          while (v11 != v9);
          return *(void *)(*(void *)(v3 + 16) + 8 * v7);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      std::string::size_type v11 = (uint8x16_t *)((char *)v8 + (v5 & 0xFFFFFFF8));
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = (int32x4_t)v7;
      unint64_t v31 = (uint8x8_t *)&v8->i8[v12];
      uint64_t v32 = v12 - (v5 & 0xFFFFFFF8);
      do
      {
        uint8x8_t v33 = *v31++;
        uint16x8_t v34 = vmovl_u8(vshr_n_u8(v33, 7uLL));
        int32x4_t v29 = (int32x4_t)vaddw_high_u16((uint32x4_t)v29, v34);
        int32x4_t v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v34.i8);
        v32 += 8;
      }
      while (v32);
      unsigned int v7 = vaddvq_s32(vaddq_s32(v30, v29));
      if ((v5 & 0xFFFFFFF8) == v5) {
        return *(void *)(*(void *)(v3 + 16) + 8 * v7);
      }
      goto LABEL_22;
    }
  }
  else
  {
    v7 += v5;
  }
  return *(void *)(*(void *)(v3 + 16) + 8 * v7);
}

void std::__function::__func<swift_distributed_getWitnessTables::$_1,std::allocator<swift_distributed_getWitnessTables::$_1>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_distributed_getWitnessTables::$_1,std::allocator<swift_distributed_getWitnessTables::$_1>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA07088;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_1,std::allocator<swift_distributed_getWitnessTables::$_1>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA07088;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_1,std::allocator<swift_distributed_getWitnessTables::$_1>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8 * (*(_DWORD *)(v3 + 300) + v4));
}

void std::__function::__func<swift_distributed_getWitnessTables::$_2,std::allocator<swift_distributed_getWitnessTables::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift_distributed_getWitnessTables::$_2,std::allocator<swift_distributed_getWitnessTables::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA070D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_2,std::allocator<swift_distributed_getWitnessTables::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA070D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift_distributed_getWitnessTables::$_2,std::allocator<swift_distributed_getWitnessTables::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  int v4 = *a3;
  swift::SubstGenericParametersFromMetadata::setup(*(unsigned int ***)(a1 + 8));
  return *(void *)(*(void *)(v3 + 16) + 8 * (*(_DWORD *)(v3 + 296) + v4 + *(_DWORD *)(v3 + 300)));
}

void std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA07118;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA07118;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v3 = *a2;
  int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = (uint64_t *)v4[1];
  if (*((_DWORD *)v5 + 2) <= v3) {
    return 0;
  }
  uint64_t v6 = *v5;
  int v7 = v3 ? *(_DWORD *)(v6 + 4 * (v3 - 1)) : 0;
  unsigned int v8 = v7 + *a3;
  if (v8 >= *(_DWORD *)(v6 + 4 * v3)) {
    return 0;
  }
  uint64_t v9 = *v4;
  if (*(_DWORD *)(v9 + 8) <= v8) {
    return 0;
  }
  else {
    return *(void *)(*(void *)v9 + 8 * v8);
  }
}

void std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA07160;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA07160;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1,std::allocator<swift::_gatherWrittenGenericParameters(swift::TargetTypeContextDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::ArrayRef<void const*>,__swift::__runtime::llvm::SmallVectorImpl<swift::MetadataOrPack> &,swift::Demangle::__runtime::Demangler &)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()()
{
  return 0;
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>>,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>>::InsertIntoBucket<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const* const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  __swift::__runtime::llvm::DenseMap<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>>::grow(a1, v7);
  int v9 = *(_DWORD *)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)a1;
    uint64_t v11 = *a3;
    if (*a3) {
      unsigned int v12 = (v11 >> 9) ^ (v11 >> 4);
    }
    else {
      unsigned int v12 = 0;
    }
    int v13 = v9 - 1;
    unsigned int v14 = v12 & (v9 - 1);
    a2 = (uint64_t *)(v10 + 16 * v14);
    uint64_t v15 = *a2;
    if (v11 != *a2)
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          uint64_t v16 = a2;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a2 = (uint64_t *)(v10 + 16 * (v19 & v13));
        uint64_t v15 = *a2;
        if (v11 == *a2) {
          goto LABEL_3;
        }
      }
      if (v16) {
        a2 = v16;
      }
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void *__swift::__runtime::llvm::DenseMap<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*,swift::TargetOpaqueTypeDescriptor<swift::InProcess> const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(__swift::__runtime::llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = __swift::__runtime::llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_47;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      int v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *int v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_47:
        do
        {
          *uint64_t v10 = -4096;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if (v3)
    {
      int v15 = 0;
      unsigned int v16 = v11 - 1;
      int v17 = v4;
      do
      {
        uint64_t v22 = *(void *)v17;
        if (*(void *)v17 != -4096 && v22 != -8192)
        {
          uint8x16_t v24 = *(__swift::__runtime::llvm **)a1;
          if (v22) {
            unsigned int v18 = (v22 >> 9) ^ (v22 >> 4);
          }
          else {
            unsigned int v18 = 0;
          }
          int v19 = v18 & v16;
          int32x4_t v20 = (void *)((char *)v24 + 16 * (v18 & v16));
          uint64_t v21 = *v20;
          if (v22 != *v20)
          {
            uint16x8_t v25 = 0;
            int v26 = 1;
            while (v21 != -4096)
            {
              if (v25) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v21 == -8192;
              }
              if (v27) {
                uint16x8_t v25 = v20;
              }
              int v28 = v19 + v26++;
              int v19 = v28 & v16;
              int32x4_t v20 = (void *)((char *)v24 + 16 * (v28 & v16));
              uint64_t v21 = *v20;
              if (v22 == *v20) {
                goto LABEL_15;
              }
            }
            if (v25) {
              int32x4_t v20 = v25;
            }
          }
LABEL_15:
          *int32x4_t v20 = v22;
          v20[1] = *((void *)v17 + 1);
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        int v17 = (__swift::__runtime::llvm *)((char *)v17 + 16);
      }
      while (v17 != (__swift::__runtime::llvm *)((char *)v4 + 16 * v3));
    }
    __swift::__runtime::llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v29 = *(unsigned int *)(a1 + 16);
  if (v29)
  {
    if (((v29 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_43;
    }
    uint64_t v30 = ((v29 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[2 * (v30 & 0x1FFFFFFFFFFFFFFELL)];
    unint64_t v31 = result + 2;
    uint64_t v32 = v30 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v31 - 2) = -4096;
      *unint64_t v31 = -4096;
      v31 += 4;
      v32 -= 2;
    }
    while (v32);
    if (v30 != (v30 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_43:
      uint8x8_t v33 = &result[2 * v29];
      do
      {
        *uint64_t v10 = -4096;
        v10 += 2;
      }
      while (v10 != v33);
    }
  }
  return result;
}

float swift_intToFloat32(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = ((unint64_t)(a2 >> 8) + 63) >> 6;
  uint64_t v3 = *a1;
  unint64_t v4 = v2 - 1;
  if (v2 == 1) {
    return (float)v3;
  }
  float v6 = (float)(unint64_t)v3;
  if (v2 == 2)
  {
    float v7 = 1.8447e19;
  }
  else
  {
    unint64_t v8 = 2 - v2;
    int v9 = (unint64_t *)(a1 + 1);
    float v7 = 1.8447e19;
    do
    {
      unint64_t v10 = *v9++;
      float v6 = v6 + (float)((float)v10 * v7);
      float v7 = v7 * 1.8447e19;
    }
    while (!__CFADD__(v8++, 1));
  }
  return v6 + (float)((float)a1[v4] * v7);
}

double swift_intToFloat64(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = ((unint64_t)(a2 >> 8) + 63) >> 6;
  uint64_t v3 = *a1;
  unint64_t v4 = v2 - 1;
  if (v2 == 1) {
    return (double)v3;
  }
  double v6 = (double)(unint64_t)v3;
  if (v2 == 2)
  {
    double v7 = 1.84467441e19;
  }
  else
  {
    unint64_t v8 = 2 - v2;
    int v9 = (unint64_t *)(a1 + 1);
    double v7 = 1.84467441e19;
    do
    {
      unint64_t v10 = *v9++;
      double v6 = v6 + (double)v10 * v7;
      double v7 = v7 * 1.84467441e19;
    }
    while (!__CFADD__(v8++, 1));
  }
  return v6 + (double)a1[v4] * v7;
}

void swift_once(dispatch_once_t *a1, dispatch_function_t function, void *context)
{
  if (*a1 != -1) {
    dispatch_once_f(a1, context, function);
  }
}

uint64_t swift_getRuntimeLibraryPath()
{
}

uint64_t anonymous namespace'::_swift_initRuntimePath(_anonymous_namespace_ *this, void *a2)
{
  uint64_t result = dyld_image_path_containing_address();
  return result;
}

uint64_t swift_getRootPath()
{
}

void anonymous namespace'::_swift_initRootPath(_anonymous_namespace_ *this, void *a2)
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  unint64_t v2 = (char *)swift::runtime::environment::SWIFT_ROOT_variable;
  if (!swift::runtime::environment::SWIFT_ROOT_variable || !*swift::runtime::environment::SWIFT_ROOT_variable)
  {
    {
      unint64_t v2 = 0;
      goto LABEL_43;
    }
    do
    {
        break;
      int v9 = *(unsigned __int8 *)--v8;
    }
    while (v9 != 47);
      && *(unsigned char *)(v8 - 10) == 47
      && !strncmp((const char *)(v8 - 9), "lib", 3uLL)
      && *(unsigned char *)(v8 - 6) == 47
      && !strncmp((const char *)(v8 - 5), "swift", 5uLL))
    {
      v8 -= 10;
    }
    else
    {
      size_t v11 = v8;
      do
      {
        if (v11 <= (unint64_t)v7) {
          break;
        }
        int v12 = *(unsigned __int8 *)--v11;
      }
      while (v12 != 47);
      if ((uint64_t)(v11 - (void)v7) >= 10
        && *(unsigned char *)(v11 - 10) == 47
        && !strncmp((const char *)(v11 - 9), "lib", 3uLL)
        && *(unsigned char *)(v11 - 6) == 47
        && !strncmp((const char *)(v11 - 5), "swift", 5uLL))
      {
        goto LABEL_44;
      }
      do
      {
        if (v11 <= (unint64_t)v7) {
          break;
        }
        int v13 = *(unsigned __int8 *)--v11;
      }
      while (v13 != 47);
      if ((uint64_t)(v11 - (void)v7) >= 10
        && *(unsigned char *)(v11 - 10) == 47
        && !strncmp((const char *)(v11 - 9), "lib", 3uLL)
        && *(unsigned char *)(v11 - 6) == 47
        && !strncmp((const char *)(v11 - 5), "swift", 5uLL))
      {
LABEL_44:
        size_t v8 = v11 - 10;
      }
      else if (v10 > 4 && *(unsigned char *)(v8 - 4) == 47)
      {
        int v14 = strncmp((const char *)(v8 - 3), "bin", 3uLL);
        uint64_t v15 = -4;
        if (v14) {
          uint64_t v15 = 0;
        }
        v8 += v15;
      }
    }
    size_t v16 = v8 - (void)v7;
    if ((const void *)v8 == v7)
    {
      unint64_t v2 = "./";
      goto LABEL_43;
    }
    size_t v17 = v16 + 1;
    unint64_t v2 = (char *)malloc_type_malloc(v16 + 2, 0xB5E3BE08uLL);
    memcpy(v2, v7, v17);
    double v6 = &v2[v17];
    goto LABEL_40;
  }
  size_t v3 = strlen(swift::runtime::environment::SWIFT_ROOT_variable);
  if (*(unsigned char *)(v3 + swift::runtime::environment::SWIFT_ROOT_variable - 1) != 47)
  {
    size_t v4 = v3;
    unint64_t v5 = (char *)malloc_type_malloc(v3 + 2, 0xEEE23DACuLL);
    memcpy(v5, v2, v4);
    v5[v4] = 47;
    double v6 = &v5[v4 + 1];
    unint64_t v2 = v5;
LABEL_40:
    *double v6 = 0;
  }
LABEL_43:
}

unsigned char *swift_copyAuxiliaryExecutablePath(_anonymous_namespace_ *this, uint64_t a2, char *a3)
{
    return 0;
  if (!result)
  {
    if (!result)
    {
      if (!result)
      {
        if (!result)
        {
          if (!result)
          {
            if (!result) {
          }
            }
        }
      }
    }
  }
  return result;
}

unsigned char *anonymous namespace'::_swift_tryAuxExePath(_anonymous_namespace_ *this, _anonymous_namespace_ *a2, char *a3, ...)
{
  va_start(va, a3);
  if (stat(v4, &v9)) {
    goto LABEL_4;
  }
  if (stat(v7, &v9))
  {
    free(v7);
LABEL_4:
    double v7 = 0;
  }
  free(v4);
  return v7;
}

unsigned char *anonymous namespace'::_swift_joinPathsV(_anonymous_namespace_ *this, char *a2, char *a3)
{
  uint64_t v21 = a2;
  size_t v4 = strlen((const char *)this);
  do
  {
    size_t v5 = v4;
    if (!v4) {
      break;
    }
    --v4;
  }
  while (*((unsigned char *)this + v5 - 1) == 47);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v5;
  }
LABEL_7:
  while (1)
  {
    double v7 = (const char **)v21;
    v21 += 8;
    size_t v8 = *v7;
    if (!*v7) {
      break;
    }
    size_t v9 = strlen(*v7);
    while (v9)
    {
      size_t v10 = v9 - 1;
      int v11 = v8[--v9];
      if (v11 != 47)
      {
        v6 += v10 + 2;
        goto LABEL_7;
      }
    }
  }
  int v12 = malloc_type_malloc(v6 + 1, 0x40742CAFuLL);
  int v13 = v12;
  if (v5)
  {
    memcpy(v12, this, v5);
    int v14 = &v13[v5];
  }
  else
  {
    unsigned char *v12 = 47;
    int v14 = v12 + 1;
  }
  uint64_t v15 = (const char **)a2;
  uint8x16_t v23 = a2 + 8;
  size_t v16 = *v15;
  if (*v15)
  {
    do
    {
      size_t v18 = strlen(v16) - 1;
      while (v18 != -1)
      {
        int v19 = v16[v18--];
        if (v19 != 47)
        {
          *int v14 = 47;
          memcpy(v14 + 1, v16, v18 + 2);
          v14 += v18 + 3;
          break;
        }
      }
      size_t v17 = (const char **)v23;
      v23 += 8;
      size_t v16 = *v17;
    }
    while (*v17);
  }
  v13[v6] = 0;
  return v13;
}

unsigned char *anonymous namespace'::_swift_joinPaths(_anonymous_namespace_ *this, const char *a2, char *a3, ...)
{
  va_start(va, a3);
}

size_t _swift_strlcpy(char *a1, const char *__s, size_t a3)
{
  size_t v6 = strlen(__s);
  size_t v7 = v6;
  if (v6 >= a3)
  {
    if (a3)
    {
      size_t v8 = a3 - 1;
      memmove(a1, __s, v8);
      a1[v8] = 0;
    }
  }
  else
  {
    memmove(a1, __s, v6 + 1);
  }
  return v7;
}

uint64_t (***swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata(uint64_t a1))()
{
  unsigned int v1 = (*(_DWORD *)(a1 + 12) >> 3) & 7;
  if (v1 < 2)
  {
    size_t v4 = (int *)(a1 + 4);
    if (v1 == 1)
    {
      uint64_t v10 = *v4;
      int v11 = (void *)((char *)v4 + v10);
      if (v10) {
        int v12 = v11;
      }
      else {
        int v12 = 0;
      }
      if (!*v12) {
        return 0;
      }
      size_t v6 = (_DWORD *)*v12;
    }
    else
    {
      uint64_t v5 = *v4;
      if (!v5 || !(int *)((char *)v4 + v5)) {
        return 0;
      }
      size_t v6 = (int *)((char *)v4 + v5);
    }
    if ((*v6 & 0x10) != 0 && (int v13 = v6) != 0)
    {
      if ((*v6 & 0x80) == 0)
      {
        uint64_t v14 = (int)v6[3];
        uint64_t v15 = (uint64_t (*)(uint64_t))((char *)v13 + v14 + 12);
        BOOL v16 = !v14 || v15 == 0;
        if (!v16 && v15) {
          return (uint64_t (***)())v15(255);
        }
      }
    }
    else if ((*v6 & 0x1F) == 3 && v6)
    {
      return swift::_getSimpleProtocolTypeMetadata(v6);
    }
    return 0;
  }
  if (v1 - 2 > 1) {
    goto LABEL_38;
  }
  unint64_t v2 = (int *)(a1 + 4);
  if (v1 != 2)
  {
    if (v1 == 3)
    {
      uint64_t result = *(uint64_t (****)())((char *)v2 + *v2);
      if (!result) {
        return result;
      }
      goto LABEL_15;
    }
LABEL_38:
    abort();
  }
  uint64_t v7 = *v2;
  size_t v8 = (char *)v2 + v7;
  if (v7) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = 0;
  }
  uint64_t result = (uint64_t (***)())objc_lookUpClass(v9);
  if (result)
  {
LABEL_15:
    return (uint64_t (***)())swift_getObjCClassMetadata((unint64_t)result);
  }
  return result;
}

uint64_t swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(uint64_t a1, unint64_t *a2)
{
  v30[0] = v31;
  v30[1] = (void *)0x800000000;
  uint64_t TypeContextDescriptor = (_DWORD *)swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(a2);
  if (TypeContextDescriptor)
  {
    GenericParams = swift::TargetTypeContextDescriptor<swift::InProcess>::getGenericParams(TypeContextDescriptor);
    if (*(unsigned char *)(a1 + 13)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v6 == 0;
    }
    if (v7) {
      goto LABEL_31;
    }
    size_t v8 = GenericParams;
    uint64_t v9 = v6;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 13)) {
      goto LABEL_31;
    }
    uint64_t v9 = 0;
    size_t v8 = 0;
  }
  int v24 = 0;
  uint64_t v10 = swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(a2);
  if (v10)
  {
    uint64_t v25 = v10;
    if (a2)
    {
LABEL_11:
      GenericArgs = swift::TargetMetadata<swift::InProcess>::getGenericArgs(a2);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v25 = 0;
    if (a2) {
      goto LABEL_11;
    }
  }
  GenericArgs = 0;
LABEL_14:
  int v26 = GenericArgs;
  BOOL v27 = v29;
  uint64_t v28 = 0x800000000;
  v29[32] = 0;
  unint64_t v12 = *(unsigned int *)(a1 + 12);
  v20[0] = &unk_1ECA07280;
  v20[1] = &v24;
  uint64_t v21 = v20;
  v18[0] = &unk_1ECA072C8;
  v18[1] = &v24;
  int v19 = v18;
  v16[0] = &unk_1ECA07310;
  v16[1] = &v24;
  size_t v17 = v16;
  ((void (*)(void *__return_ptr, unsigned char *, uint64_t, unint64_t, void, void **, void *, void *, void *))swift::_checkGenericRequirements)(v22, v8, v9, a1 + 4 * ((v12 >> 6) & 1) + 16, BYTE1(v12), v30, v20, v18, v16);
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*v17 + 40))();
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    int v13 = v23;
    if (v23) {
LABEL_26:
    }
      ((void (*)(void, uint64_t, void))v22[1])(v22[0], 3, 0);
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    int v13 = v23;
    if (v23) {
      goto LABEL_26;
    }
  }
  if (v27 != v29) {
    free(v27);
  }
  if (v13)
  {
    uint64_t WitnessTable = 0;
    goto LABEL_32;
  }
LABEL_31:
  uint64_t WitnessTable = swift::_getWitnessTable((int *)a1, a2, (uint64_t)v30[0]);
LABEL_32:
  if (v30[0] != v31) {
    free(v30[0]);
  }
  return WitnessTable;
}

unsigned char *swift::TargetTypeContextDescriptor<swift::InProcess>::getGenericParams(_DWORD *a1)
{
  switch(*a1 & 0x1F)
  {
    case 4:
      if (a1) {
        unsigned int v1 = a1;
      }
      else {
        unsigned int v1 = 0;
      }
      if ((*v1 & 0x80) == 0) {
        goto LABEL_24;
      }
      if (!v1) {
        unsigned int v1 = 0;
      }
      if (v1 == (unsigned char *)-8)
      {
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v6 = v1 + 8;
        if (!v1) {
          unsigned int v1 = 0;
        }
      }
      uint64_t result = &v6[8 * (((unint64_t)*(unsigned int *)v1 >> 7) & 1)];
      break;
    case 0x10:
      if (a1) {
        size_t v4 = a1;
      }
      else {
        size_t v4 = 0;
      }
      if ((*v4 & 0x80) == 0) {
        goto LABEL_24;
      }
      if (!v4) {
        size_t v4 = 0;
      }
      if (v4 == (unsigned char *)-44)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = v4 + 44;
        if (!v4) {
          size_t v4 = 0;
        }
      }
      uint64_t result = &v9[16 * (((unint64_t)*(unsigned int *)v4 >> 7) & 1)];
      break;
    case 0x11:
      if (a1) {
        unint64_t v2 = a1;
      }
      else {
        unint64_t v2 = 0;
      }
      if ((*v2 & 0x80) == 0) {
        goto LABEL_24;
      }
      if (!v2) {
        unint64_t v2 = 0;
      }
      if (v2 == (unsigned char *)-28)
      {
        BOOL v7 = 0;
      }
      else
      {
        BOOL v7 = v2 + 28;
        if (!v2) {
          unint64_t v2 = 0;
        }
      }
      uint64_t result = &v7[16 * (((unint64_t)*(unsigned int *)v2 >> 7) & 1)];
      break;
    case 0x12:
      if (a1) {
        size_t v3 = a1;
      }
      else {
        size_t v3 = 0;
      }
      if ((*v3 & 0x80) != 0)
      {
        if (!v3) {
          size_t v3 = 0;
        }
        if (v3 == (unsigned char *)-28)
        {
          size_t v8 = 0;
        }
        else
        {
          size_t v8 = v3 + 28;
          if (!v3) {
            size_t v3 = 0;
          }
        }
        uint64_t result = &v8[16 * (((unint64_t)*(unsigned int *)v3 >> 7) & 1)];
      }
      else
      {
LABEL_24:
        uint64_t result = 0;
      }
      break;
    default:
      abort();
  }
  return result;
}

void swift::addImageProtocolConformanceBlockCallbackUnsafe(swift *this, unint64_t a2, char *a3)
{
  if ((dyld_shared_cache_some_image_overridden() & 1) == 0
    && (qword_1EB208D40 <= a2 ? (BOOL v5 = unk_1EB208D48 > a2) : (BOOL v5 = 0),
        v5 || MEMORY[0x1E4F144C8] && _dyld_has_preoptimized_swift_protocol_conformances()))
  {
    if (byte_1EB208D51)
    {
      *(void *)&long long v6 = a2;
      *((void *)&v6 + 1) = &a3[a2];
    }
  }
  else
  {
    _registerProtocolConformances((uint64_t)&Conformances, a2, (uint64_t)&a3[a2]);
  }
}

void _registerProtocolConformances(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = 0;
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v4 & 3) != 0 && v6 != 0)
  {
    size_t v8 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
    *size_t v8 = *(void *)(a1 + 32);
    v8[1] = v6;
    *(void *)(a1 + 32) = v8;
  }
  uint64_t v9 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
  *uint64_t v9 = *(void *)(a1 + 32);
  v9[1] = v5;
  *(void *)(a1 + 32) = v9;
  __dmb(0xBu);
  if (!*(_DWORD *)a1)
  {
    uint64_t v10 = *(void ***)(a1 + 32);
    if (v10)
    {
      do
      {
        int v11 = (void **)*v10;
        free(v10[1]);
        free(v10);
        uint64_t v10 = v11;
      }
      while (v11);
    }
    *(void *)(a1 + 32) = 0;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
}

void swift_registerProtocolConformances(uint64_t a1, uint64_t a2)
{
  if (qword_1EB208D80 != -1) {
    dispatch_once_f(&qword_1EB208D80, &Conformances, (dispatch_function_t)swift::Lazy<ConformanceState>::defaultInitCallback);
  }

  _registerProtocolConformances((uint64_t)&Conformances, a1, a2);
}

char *swift::_searchConformancesByMangledTypeName(swift *this, swift::Demangle::__runtime::Node *a2)
{
  if (!_os_trace_lazy_init_completed_4swift()) {
    goto LABEL_16;
  }
  if (swift::runtime::trace::LogsToken != -1) {
    dispatch_once_f(&swift::runtime::trace::LogsToken, 0, (dispatch_function_t)swift::runtime::trace::setupLogs);
  }
  if (swift::runtime::trace::TracingEnabled)
  {
    os_signpost_id_t v3 = os_signpost_id_generate((os_log_t)swift::runtime::trace::ScanLog);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v4 = swift::runtime::trace::ScanLog;
      if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
      {
        if (this)
        {
          v26[0] = 0;
          *(void *)&v26[1] = 0x101010101010101;
          v26[9] = 1;
          *(void *)&v26[10] = 0x101010100000000;
          char v27 = 1;
          __int16 v28 = 256;
          char v29 = 1;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          v32[0] = &unk_1ECA041D0;
          v32[1] = swift::Demangle::__runtime::genericParameterName;
          uint8x8_t v33 = v32;
          swift::Demangle::__runtime::nodeToString((uint64_t *)__p, (uint64_t *)this, (swift::Demangle::__runtime::Node *)v26, v5);
          if (v35 >= 0) {
            unint64_t v6 = __p;
          }
          else {
            unint64_t v6 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315138;
          std::string v37 = (const char *)v6;
          _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "section_scan", "protocol conformance scan for %s", buf, 0xCu);
          if (v35 < 0) {
            operator delete(__p[0]);
          }
          if (v33 == v32)
          {
            (*(void (**)(void *))(v32[0] + 32))(v32);
          }
          else if (v33)
          {
            (*(void (**)(void))(*v33 + 40))();
          }
        }
        else
        {
          *(_DWORD *)buf = 136315138;
          std::string v37 = "<null>";
          _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "section_scan", "protocol conformance scan for %s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
LABEL_16:
    os_signpost_id_t v3 = 0;
  }
  if (qword_1EB208D80 != -1) {
    dispatch_once_f(&qword_1EB208D80, &Conformances, (dispatch_function_t)swift::Lazy<ConformanceState>::defaultInitCallback);
  }
  atomic_fetch_add_explicit(&qword_1EB208D18, 1uLL, memory_order_acquire);
  uint64_t v7 = qword_1EB208D20;
  if (!qword_1EB208D20
    || (unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)qword_1EB208D20, memory_order_acquire)) == 0)
  {
LABEL_39:
    atomic_fetch_add_explicit(&qword_1EB208D18, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unsigned __int8 v23 = swift::runtime::trace::ScanLog;
      if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
      {
        *(_DWORD *)int v26 = 134217984;
        *(void *)&v26[4] = 0;
        _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v23, OS_SIGNPOST_INTERVAL_END, v3, "section_scan", "result=%p", v26, 0xCu);
      }
    }
    return 0;
  }
  uint64_t v9 = (int **)(v7 + 8);
  uint64_t v10 = v7 + 8 + 16 * explicit;
  while (1)
  {
    int v11 = *v9;
    long long v12 = v9[1];
    if (*v9 != v12) {
      break;
    }
LABEL_22:
    v9 += 2;
    if (v9 == (int **)v10) {
      goto LABEL_39;
    }
  }
  int v13 = *v9;
  while (1)
  {
    uint64_t v14 = (uint64_t)v11 + *v13;
    uint64_t v15 = (int *)(v14 + 4);
    int v16 = (*(_DWORD *)(v14 + 12) >> 3) & 7;
    if (v16 == 1)
    {
      uint64_t v21 = *v15;
      uint64_t v22 = (char **)((char *)v15 + v21);
      if (!v21) {
        uint64_t v22 = 0;
      }
      if (!*v22) {
        goto LABEL_26;
      }
      int32x4_t v20 = *v22;
    }
    else
    {
      if (v16) {
        goto LABEL_26;
      }
      uint64_t v17 = *v15;
      size_t v18 = (char *)v15 + v17;
      if (!v17 || v18 == 0) {
        goto LABEL_26;
      }
      int32x4_t v20 = (char *)v15 + v17;
      if (!v18) {
        goto LABEL_26;
      }
    }
    if (swift::_contextDescriptorMatchesMangling(v20, (const char *)this)) {
      break;
    }
LABEL_26:
    ++v13;
    ++v11;
    if (v13 == v12) {
      goto LABEL_22;
    }
  }
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v24 = swift::runtime::trace::ScanLog;
    if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
    {
      *(_DWORD *)int v26 = 134217984;
      *(void *)&v26[4] = v20;
      _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v24, OS_SIGNPOST_INTERVAL_END, v3, "section_scan", "result=%p", v26, 0xCu);
    }
  }
  atomic_fetch_add_explicit(&qword_1EB208D18, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
  return v20;
}

uint64_t _swift_class_isSubclass(uint64_t a1, uint64_t *a2)
{
  return isSubclass(a1, a2);
}

uint64_t isSubclass(uint64_t SuperclassForMaybeIncompleteMetadata, uint64_t *a2)
{
  if ((uint64_t *)SuperclassForMaybeIncompleteMetadata == a2) {
    return 1;
  }
  unint64_t v2 = a2;
  unint64_t v3 = *a2;
  if (*(void *)SuperclassForMaybeIncompleteMetadata > 0x7FFuLL
    || *(void *)SuperclassForMaybeIncompleteMetadata == 0)
  {
    if (v3 != 515)
    {
      if (v3 == 773)
      {
        unint64_t v2 = (uint64_t *)a2[1];
        while (1)
        {
          SuperclassForMaybeIncompleteMetadata = getSuperclassForMaybeIncompleteMetadata(SuperclassForMaybeIncompleteMetadata, 0, 0, 1);
          BOOL v5 = v2 == (uint64_t *)SuperclassForMaybeIncompleteMetadata;
          if (v2 == (uint64_t *)SuperclassForMaybeIncompleteMetadata || SuperclassForMaybeIncompleteMetadata == 0) {
            break;
          }
          BOOL v7 = *(void *)SuperclassForMaybeIncompleteMetadata > 0x7FFuLL
            || *(void *)SuperclassForMaybeIncompleteMetadata == 0;
          if (!v7 || (*(unsigned char *)(SuperclassForMaybeIncompleteMetadata + 32) & 2) == 0) {
            return swift_dynamicCastMetatype((uint64_t *)SuperclassForMaybeIncompleteMetadata, v2) != 0;
          }
        }
      }
      else
      {
        while (1)
        {
          SuperclassForMaybeIncompleteMetadata = getSuperclassForMaybeIncompleteMetadata(SuperclassForMaybeIncompleteMetadata, 0, 0, 1);
          BOOL v5 = SuperclassForMaybeIncompleteMetadata == (void)v2;
          if (!SuperclassForMaybeIncompleteMetadata || (uint64_t *)SuperclassForMaybeIncompleteMetadata == v2) {
            break;
          }
          BOOL v8 = *(void *)SuperclassForMaybeIncompleteMetadata > 0x7FFuLL
            || *(void *)SuperclassForMaybeIncompleteMetadata == 0;
          if (!v8 || (*(unsigned char *)(SuperclassForMaybeIncompleteMetadata + 32) & 2) == 0) {
            return 0;
          }
        }
      }
      return v5;
    }
  }
  else if (v3 <= 0x7FF && *a2 != 0)
  {
    return swift_dynamicCastMetatype((uint64_t *)SuperclassForMaybeIncompleteMetadata, v2) != 0;
  }
  return 0;
}

void checkInvertibleRequirements(uint64_t a1@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  uint64_t TypeContextDescriptor = (_DWORD *)swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor((unint64_t *)a1);
  if (!TypeContextDescriptor)
  {
    unint64_t v14 = *(void *)a1;
    if (*(void *)a1 > 0x7FFuLL) {
      LODWORD(v14) = 0;
    }
    if ((int)v14 > 767)
    {
      switch((int)v14)
      {
        case 769:
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          if (!*(_DWORD *)(a1 + 8)) {
            goto LABEL_86;
          }
          int v16 = (void *)(a1 + 24);
          break;
        case 770:
          uint64_t v19 = *(void *)(a1 + 8);
          if ((v19 & 0x80000000) != 0)
          {
            unsigned int v20 = swift::TargetFunctionTypeMetadata<swift::InProcess>::getExtendedFlags(a1) >> 16;
            uint64_t v19 = *(void *)(a1 + 8);
          }
          else
          {
            unsigned int v20 = 0;
          }
          if ((v19 & 0x4FF0000) != 0) {
            int v22 = v20;
          }
          else {
            int v22 = v20 | 2;
          }
          if ((v22 & ~a2) != 0) {
            operator new();
          }
          goto LABEL_86;
        case 775:
          if (*(void *)(a1 + 8)) {
            uint64_t v21 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v21 = 0;
          }
          unint64_t ReqSigRequirements = swift::TargetExtendedExistentialTypeShape<swift::InProcess>::getReqSigRequirements((unsigned int *)v21);
          if (*(_WORD *)(v21 + 10))
          {
            uint64_t v45 = 12 * *(unsigned __int16 *)(v21 + 10);
            do
            {
              if ((*(_DWORD *)ReqSigRequirements & 0x1F) == 5
                && (*(_WORD *)(ReqSigRequirements + 10) & (unsigned __int16)~(_WORD)a2) != 0)
              {
                operator new();
              }
              ReqSigRequirements += 12;
              v45 -= 12;
            }
            while (v45);
          }
          goto LABEL_86;
        default:
          goto LABEL_86;
      }
      do
      {
        checkInvertibleRequirements(*v16, (unsigned __int16)a2);
        if (a3[16]) {
          return;
        }
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    goto LABEL_86;
  }
  BOOL v7 = TypeContextDescriptor;
  if ((*(unsigned char *)TypeContextDescriptor & 0x20) == 0) {
    goto LABEL_86;
  }
  BOOL v8 = TypeContextDescriptor;
  InvertedProtocols = (unsigned __int16 *)swift::TargetContextDescriptor<swift::InProcess>::getInvertedProtocols(TypeContextDescriptor);
  if (!InvertedProtocols) {
    operator new();
  }
  unsigned int v10 = *InvertedProtocols & ~a2;
  if (!v10)
  {
LABEL_86:
    *a3 = 0;
    a3[16] = 0;
    return;
  }
  if ((*v8 & 0x80) == 0
    || (uint64_t GenericContext = (unsigned __int16 *)swift::TargetContextDescriptor<swift::InProcess>::getGenericContext(v7)) == 0
    || (v12 = GenericContext, unsigned int v13 = GenericContext[5], (v13 & 2) == 0))
  {
    operator new();
  }
  std::string v46 = GenericContext + 6;
  uint64_t v17 = (unsigned __int16 *)((((unint64_t)GenericContext + GenericContext[2] + 15) & 0xFFFFFFFFFFFFFFFCLL)
                           + 12 * GenericContext[3]);
  if (v13) {
    uint64_t v18 = *v17;
  }
  else {
    uint64_t v18 = 0;
  }
  if ((v10 & (v17[4 * v18 + 2 * (v13 & 1)] ^ 0xFFFF)) != 0) {
    operator new();
  }
  unsigned __int8 v23 = 0;
  if ((v10 & 1) == 0)
  {
    do
      ++v23;
    while (((v10 >> v23) & 1) == 0);
  }
  if ((v13 & 2) != 0) {
    goto LABEL_38;
  }
LABEL_49:
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  while (1)
  {
    int v55 = 0;
    uint64_t v41 = swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor((unint64_t *)a1);
    if (v41)
    {
      uint64_t v56 = v41;
      if (a1) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v56 = 0;
      if (a1)
      {
LABEL_55:
        GenericArgs = swift::TargetMetadata<swift::InProcess>::getGenericArgs((unint64_t *)a1);
        goto LABEL_58;
      }
    }
    GenericArgs = 0;
LABEL_58:
    unint64_t v57 = GenericArgs;
    unint64_t v58 = v60;
    uint64_t v59 = 0x800000000;
    v60[32] = 0;
    v53[0] = &v54;
    v53[1] = (void *)0x100000000;
    uint64_t v43 = v12[2];
    v51[0] = &unk_1ECA071A8;
    v51[1] = &v55;
    unint64_t v52 = v51;
    v49[0] = &unk_1ECA071F0;
    v49[1] = &v55;
    unint64_t v50 = v49;
    v47[0] = &unk_1ECA07238;
    v47[1] = &v55;
    unint64_t v48 = v47;
    ((void (*)(unsigned __int16 *, uint64_t, unint64_t, uint64_t, void **, void *, void *, void *))swift::_checkGenericRequirements)(v46, v43, v39, v38, v53, v51, v49, v47);
    if (v48 == v47)
    {
      (*(void (**)(void *))(v47[0] + 32))(v47);
    }
    else if (v48)
    {
      (*(void (**)(void))(*v48 + 40))();
    }
    if (v50 == v49)
    {
      (*(void (**)(void *))(v49[0] + 32))(v49);
    }
    else if (v50)
    {
      (*(void (**)(void))(*v50 + 40))();
    }
    if (v52 == v51)
    {
      (*(void (**)(void *))(v51[0] + 32))(v51);
    }
    else if (v52)
    {
      (*(void (**)(void))(*v52 + 40))();
    }
    if (a3[16]) {
      break;
    }
    if (v53[0] != &v54) {
      free(v53[0]);
    }
    if (v58 != v60) {
      free(v58);
    }
    v10 &= ~(1 << v23);
    if (!v10) {
      goto LABEL_86;
    }
    do
      ++v23;
    while (((v10 >> v23) & 1) == 0);
    unsigned int v13 = v12[5];
    if ((v13 & 2) == 0) {
      goto LABEL_49;
    }
LABEL_38:
    int v24 = (unsigned __int16 *)((((unint64_t)v46 + v12[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v12[3]);
    if (v13) {
      uint64_t v25 = *v24;
    }
    else {
      uint64_t v25 = 0;
    }
    int v26 = v13 & 1;
    char v27 = &v24[2 * (v13 & 1)];
    unsigned int v28 = v27[4 * v25];
    if (((v28 >> v23) & 1) == 0) {
      goto LABEL_49;
    }
    unsigned int v29 = 0;
    int v30 = v23;
    if (v23)
    {
      do
      {
        v29 += v28 & 1;
        v28 >>= 1;
        --v30;
      }
      while (v30);
    }
    unint64_t v31 = (((unint64_t)v46 + v12[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v12[3];
    if (v13) {
      unint64_t v31 = (unint64_t)&v27[4 * *v24];
    }
    uint64_t v32 = (v13 >> 1) & 1;
    unint64_t v33 = v31 + 2 * v32;
    if (v29)
    {
      uint64_t v34 = *(unsigned __int16 *)(v33 + 2 * (v29 - 1));
      if (!v26) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v34 = 0;
      if (!v26)
      {
LABEL_48:
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        unint64_t v37 = (((unint64_t)v46 + v12[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v12[3];
        goto LABEL_52;
      }
    }
    uint64_t v36 = *v24;
    unint64_t v37 = (unint64_t)&v27[4 * v36];
    uint64_t v35 = 1;
LABEL_52:
    uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v24[4 * v36 + 2 * v35]);
    v40.i16[0] = vaddlv_u8(v40);
    unint64_t v39 = ((v37 + 2 * v32 + 2 * v40.u32[0] + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v34;
    uint64_t v38 = *(unsigned __int16 *)(v33 + 2 * v29) - v34;
  }
  if (v53[0] != &v54) {
    free(v53[0]);
  }
  if (v58 != v60) {
    free(v58);
  }
}

uint64_t swift::findConformingSuperclass(uint64_t a1, uint64_t a2)
{
  uint64_t SuperclassForMaybeIncompleteMetadata = a1;
  unint64_t v3 = (int *)(a2 + 4);
  int v4 = (*(_DWORD *)(a2 + 12) >> 3) & 7;
  if (v4 == 1)
  {
    uint64_t v9 = *v3;
    unsigned int v10 = (uint64_t (****)())((char *)v3 + v9);
    if (!v9) {
      unsigned int v10 = 0;
    }
    BOOL v8 = *v10;
    if (!*v10) {
      goto LABEL_14;
    }
LABEL_12:
    int v11 = v8;
    char v12 = 1;
    if (!a1) {
      return SuperclassForMaybeIncompleteMetadata;
    }
    goto LABEL_16;
  }
  if (!v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = (char *)v3 + v5;
    if (v5 && v6 != 0)
    {
      BOOL v8 = (uint64_t (***)())((char *)v3 + v5);
      if (v6) {
        goto LABEL_12;
      }
    }
  }
LABEL_14:
  CanonicalTypeMetadata = swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata(a2);
  if (!CanonicalTypeMetadata)
  {
    if (!SuperclassForMaybeIncompleteMetadata) {
      return SuperclassForMaybeIncompleteMetadata;
    }
    getContextDescriptor(SuperclassForMaybeIncompleteMetadata, (uint64_t)v24);
    int v11 = 0;
    uint64_t v17 = 0;
    int v16 = 0;
    uint64_t v15 = v24[0];
    BOOL v14 = 1;
    if (!v24[0]) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  int v11 = CanonicalTypeMetadata;
  char v12 = 0;
  if (!SuperclassForMaybeIncompleteMetadata) {
    return SuperclassForMaybeIncompleteMetadata;
  }
LABEL_16:
  BOOL v14 = v11 == 0;
  if ((v12 & 1) == 0)
  {
    if (v11 == (uint64_t (***)())SuperclassForMaybeIncompleteMetadata) {
      return SuperclassForMaybeIncompleteMetadata;
    }
    char v18 = 0;
    uint64_t v17 = (const char *)v11;
    goto LABEL_28;
  }
  getContextDescriptor(SuperclassForMaybeIncompleteMetadata, (uint64_t)v24);
  uint64_t v15 = v24[0];
  if (v11)
  {
    BOOL v14 = 0;
    int v16 = (const char *)v11;
  }
  else
  {
    int v16 = 0;
    BOOL v14 = 1;
  }
  uint64_t v17 = (const char *)v11;
  if (v24[0])
  {
LABEL_26:
    if (swift::equalContexts(v15, v16)) {
      return SuperclassForMaybeIncompleteMetadata;
    }
  }
LABEL_27:
  char v18 = 1;
LABEL_28:
  uint64_t SuperclassForMaybeIncompleteMetadata = getSuperclassForMaybeIncompleteMetadata(SuperclassForMaybeIncompleteMetadata, 0, 0, 1);
  if (SuperclassForMaybeIncompleteMetadata)
  {
    uint64_t v20 = v19;
    do
    {
      if (v18)
      {
        getContextDescriptor(SuperclassForMaybeIncompleteMetadata, (uint64_t)v24);
        if (v14)
        {
          int v22 = 0;
          if (!v24[0]) {
            goto LABEL_31;
          }
        }
        else
        {
          int v22 = v17;
          if (!v24[0]) {
            goto LABEL_31;
          }
        }
        if (swift::equalContexts(v24[0], v22)) {
          return SuperclassForMaybeIncompleteMetadata;
        }
      }
      else if (v11 == (uint64_t (***)())SuperclassForMaybeIncompleteMetadata)
      {
        return (uint64_t)v11;
      }
LABEL_31:
      uint64_t SuperclassForMaybeIncompleteMetadata = getSuperclassForMaybeIncompleteMetadata(SuperclassForMaybeIncompleteMetadata, v20, 1, 1);
      uint64_t v20 = v21;
    }
    while (SuperclassForMaybeIncompleteMetadata);
  }
  return SuperclassForMaybeIncompleteMetadata;
}

uint64_t swift_conformsToProtocol(uint64_t a1, uint64_t a2)
{
  swift_once(&swift_conformsToProtocol::Predicate, (dispatch_function_t)swift_conformsToProtocol::$_0::__invoke, 0);
  int v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t)))swift_conformsToProtocol::Override;
  if (swift_conformsToProtocol::Override)
  {
    return v4(a1, a2, swift_conformsToProtocolImpl);
  }
  else
  {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, a2, 0);
    if (!result && v6) {
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, a2, 1);
    }
  }
  return result;
}

uint64_t swift_conformsToProtocolImpl(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, v3, 0);
  if (!result)
  {
    if (v5) {
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, v3, 1);
    }
  }
  return result;
}

uint64_t swift_conformsToProtocol2(uint64_t a1, uint64_t a2)
{
  swift_once(&swift_conformsToProtocol2::Predicate, (dispatch_function_t)swift_conformsToProtocol2::$_0::__invoke, 0);
  int v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t)))swift_conformsToProtocol2::Override;
  if (swift_conformsToProtocol2::Override)
  {
    return v4(a1, a2, swift_conformsToProtocol2Impl);
  }
  else
  {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, a2, 0);
    if (!result && v6) {
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, a2, 1);
    }
  }
  return result;
}

uint64_t swift_conformsToProtocol2Impl(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, v3, 0);
  if (!result)
  {
    if (v5) {
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, v3, 1);
    }
  }
  return result;
}

uint64_t swift_conformsToProtocolCommon(uint64_t a1, uint64_t a2)
{
  swift_once(&swift_conformsToProtocolCommon::Predicate, (dispatch_function_t)swift_conformsToProtocolCommon::$_0::__invoke, 0);
  int v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t)))swift_conformsToProtocolCommon::Override;
  if (swift_conformsToProtocolCommon::Override)
  {
    return v4(a1, a2, swift_conformsToProtocolCommonImpl);
  }
  else
  {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, a2, 0);
    if (!result && v6) {
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, a2, 1);
    }
  }
  return result;
}

uint64_t swift_conformsToProtocolCommonImpl(uint64_t a1, uint64_t a2)
{
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, a2, 0);
  if (!result)
  {
    if (v5) {
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_conformsToProtocolMaybeInstantiateSuperclasses)(a1, a2, 1);
    }
  }
  return result;
}

uint64_t getSuperclassForMaybeIncompleteMetadata(uint64_t a1, uint64_t a2, char a3, int a4)
{
  if (*(void *)a1 <= 0x7FFuLL && *(void *)a1 != 0) {
    return _swift_class_getSuperclass((swift *)a1);
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0 && *(void *)(a1 + 64))
  {
    if (!a3) {
      swift_checkMetadataState(256, a1);
    }
    if (a2 == 1)
    {
      if (*(void *)(a1 + 8)) {
        unint64_t v11 = *(void *)(a1 + 8);
      }
      else {
        unint64_t v11 = 0;
      }
      unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v11);
      swift_checkMetadataState(256, ObjCClassMetadata);
    }
    else
    {
      if (!a2)
      {
        if (*(void *)(a1 + 8)) {
          unint64_t v7 = *(void *)(a1 + 8);
        }
        else {
          unint64_t v7 = 0;
        }
        return swift_getObjCClassMetadata(v7);
      }
      if (a4) {
        return getSuperclassMetadata(511, a1);
      }
      else {
        return 0;
      }
    }
  }
  else if (*(void *)(a1 + 8))
  {
    return *(void *)(a1 + 8);
  }
  else
  {
    return 0;
  }
  return ObjCClassMetadata;
}

BOOL satisfiesLayoutConstraint@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (*(_DWORD *)(a1 + 8)) {
    operator new();
  }
  BOOL result = swift::TargetMetadata<swift::InProcess>::satisfiesClassConstraint(a2);
  if (!result)
  {
    uint64_t v8 = *(int *)(a1 + 4);
    unint64_t v7 = (int *)(a1 + 4);
    swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v7 + v8, v6);
    swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v7 + *v7, v9);
    operator new();
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,char const*,unsigned long>(char const*,int,char const*,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,char const*,unsigned long>(char const*,int,char const*,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C402607123CLL, a3);
      }
LABEL_7:
      BOOL result = 0;
      break;
    default:
      int v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
      BOOL result = v4;
      break;
  }
  return result;
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,unsigned long,unsigned long>(char const*,int,char const*,unsigned long,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,unsigned long,unsigned long>(char const*,int,char const*,unsigned long,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C409A01E8C7, a3);
      }
LABEL_7:
      BOOL result = 0;
      break;
    default:
      int v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
      BOOL result = v4;
      break;
  }
  return result;
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,int,char const*,unsigned long>(char const*,int,char const*,int,char const*,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,int,char const*,unsigned long>(char const*,int,char const*,int,char const*,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C405416CA85, a3);
      }
LABEL_7:
      BOOL result = 0;
      break;
    default:
      int v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40));
      BOOL result = v4;
      break;
  }
  return result;
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*>(char const*,int,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*>(char const*,int,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C400D13D5BALL, a3);
      }
LABEL_7:
      BOOL result = 0;
      break;
    default:
      int v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(void *)(a1 + 16));
      BOOL result = v4;
      break;
  }
  return result;
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned long,unsigned long>(char const*,unsigned long,unsigned long)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned long,unsigned long>(char const*,unsigned long,unsigned long)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C40E4AAA758, a3);
      }
LABEL_7:
      BOOL result = 0;
      break;
    default:
      int v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(void *)(a1 + 8), *(void *)(a1 + 16));
      BOOL result = v4;
      break;
  }
  return result;
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,char const*>(char const*,int,char const*,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,char const*>(char const*,int,char const*,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C404DAAC892, a3);
      }
LABEL_7:
      BOOL result = 0;
      break;
    default:
      uint64_t v3 = *(const char **)a1;
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(unsigned int *)(a1 + 8);
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v8 = 0;
      swift_asprintf(&v8, v3, a3, v5, v4, v7);
      BOOL result = v8;
      break;
  }
  return result;
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,int,char const*>(char const*,int,char const*,int,char const*)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<int,char const*,int,char const*>(char const*,int,char const*,int,char const*)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C40229B2414, a3);
      }
LABEL_7:
      BOOL result = 0;
      break;
    default:
      uint64_t v4 = 0;
      swift_asprintf(&v4, *(const char **)a1, a3, *(unsigned int *)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24), *(void *)(a1 + 32));
      BOOL result = v4;
      break;
  }
  return result;
}

char *_ZZN5swift15TypeLookupErrorC1IZNS_L19TypeLookupErrorImplIJEEES0_PKcDpT_EUlvE_EERKT_ENUlPvNS0_7CommandESB_E_8__invokeESB_SC_SB__0(const char **a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x50C40EE9192B6, a3);
      }
LABEL_7:
      BOOL result = 0;
      break;
    default:
      uint64_t v4 = 0;
      swift_asprintf(&v4, *a1, a3);
      BOOL result = v4;
      break;
  }
  return result;
}

uint64_t swift::TargetContextDescriptor<swift::InProcess>::getInvertedProtocols(_DWORD *a1)
{
  int v1 = *a1;
  if ((*a1 & 0x20) == 0) {
    return 0;
  }
  uint64_t result = 0;
  switch(v1 & 0x1F)
  {
    case 4:
      if (a1) {
        uint64_t v4 = a1;
      }
      else {
        uint64_t v4 = 0;
      }
      if (v4) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t result = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetOpaqueTypeDescriptor<swift::InProcess>,swift::TargetGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::RelativeDirectPointer<char const,true,int,void>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v8)
             + (((unint64_t)*(unsigned int *)v8 >> 14) & 0x3FFFC);
      break;
    case 0x10:
      if (a1) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = 0;
      }
      if (v5) {
        uint64_t v9 = v5;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t result = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetClassDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetClassDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetResilientSuperclass<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetVTableDescriptorHeader<swift::InProcess>,swift::TargetMethodDescriptor<swift::InProcess>,swift::TargetOverrideTableHeader<swift::InProcess>,swift::TargetMethodOverrideDescriptor<swift::InProcess>,swift::TargetObjCResilientClassStubInfo<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetCanonicalSpecializedMetadataAccessorsListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v9)
             + 4 * (((unint64_t)*v9 >> 19) & 1);
      break;
    case 0x11:
      if (a1) {
        char v6 = a1;
      }
      else {
        char v6 = 0;
      }
      if (v6) {
        unsigned int v10 = v6;
      }
      else {
        unsigned int v10 = 0;
      }
      unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v10);
      unint64_t v12 = *v10;
      if ((v12 & 0x80000) == 0) {
        goto LABEL_34;
      }
      unsigned int v13 = v10;
      if (!v10) {
        unsigned int v10 = 0;
      }
      unint64_t v17 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetStructDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetStructDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v10);
      char v18 = v10;
      goto LABEL_41;
    case 0x12:
      if (a1) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = 0;
      }
      if (v7) {
        BOOL v14 = v7;
      }
      else {
        BOOL v14 = 0;
      }
      unint64_t TrailingObjectsImpl = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v14);
      unint64_t v12 = *v14;
      if ((v12 & 0x80000) != 0)
      {
        unsigned int v13 = v14;
        if (!v14) {
          BOOL v14 = 0;
        }
        unint64_t v17 = swift::ABI::trailing_objects_internal::TrailingObjectsImpl<4,swift::TargetEnumDescriptor<swift::InProcess>,swift::ABI::TrailingObjects<swift::TargetEnumDescriptor<swift::InProcess>,swift::TargetTypeGenericContextDescriptorHeader<swift::InProcess>,swift::GenericParamDescriptor,swift::TargetGenericRequirementDescriptor<swift::InProcess>,swift::GenericPackShapeHeader,swift::GenericPackShapeDescriptor,swift::ConditionalInvertibleProtocolSet,swift::ConditionalInvertibleProtocolsRequirementCount,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>,swift::TargetConditionalInvertibleProtocolRequirement<swift::InProcess>,swift::TargetForeignMetadataInitialization<swift::InProcess>,swift::TargetSingletonMetadataInitialization<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListCount<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasListEntry<swift::InProcess>,swift::TargetCanonicalSpecializedMetadatasCachingOnceToken<swift::InProcess>,swift::InvertibleProtocolSet>::getTrailingObjectsImpl(v14);
        char v18 = v14;
LABEL_41:
        uint64_t v15 = *(unsigned int *)(v17 + 4 * ((*v18 & 0x30000) == 0x20000) + 12 * ((*v18 & 0x30000) == 0x10000));
        unsigned int v16 = *v13;
      }
      else
      {
LABEL_34:
        uint64_t v15 = 0;
        unsigned int v16 = v12;
      }
      uint64_t result = TrailingObjectsImpl
             + 4 * ((v12 & 0x30000) == 0x20000)
             + 12 * ((v12 & 0x30000) == 0x10000)
             + 4 * ((v12 >> 19) & 1)
             + 4 * v15
             + 4 * ((v16 >> 19) & 1);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t swift::TargetExtendedExistentialTypeShape<swift::InProcess>::getReqSigRequirements(unsigned int *a1)
{
  unint64_t v2 = (unsigned __int16 *)(a1 + 4);
  unint64_t v1 = *a1;
  if ((v1 & 0x800) != 0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((unsigned __int16 *)a1 + 4);
  }
  if ((*a1 & 0x1100) == 0x100) {
    uint64_t v4 = *v2;
  }
  else {
    uint64_t v4 = 0;
  }
  return ((((unint64_t)&v2[4 * ((v1 >> 8) & 1) + 1] + 1) & 0xFFFFFFFFFFFFFFFCLL)
        + 4 * ((v1 >> 9) & 1)
        + 4 * ((v1 >> 10) & 1)
        + v4
        + v3
        + 3) & 0xFFFFFFFFFFFFFFFCLL;
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned short>(char const*,unsigned short)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned short>(char const*,unsigned short)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C40A90F5278, a3);
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      uint64_t v3 = *(const char **)a1;
      uint64_t v5 = *(unsigned __int16 *)(a1 + 8);
      char v6 = 0;
      swift_asprintf(&v6, v3, a3, v5);
      uint64_t result = v6;
      break;
  }
  return result;
}

void std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA071A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA071A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata(*(swift::SubstGenericParametersFromMetadata **)(a1 + 8), *a2, *a3);
}

void std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA071F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA071F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_1>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadataKeyArgOrdinal(*(swift::SubstGenericParametersFromMetadata **)(a1 + 8), *a3);
}

void std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA07238;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA07238;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2,std::allocator<checkInvertibleRequirements(swift::TargetMetadata<swift::InProcess> const*,swift::InvertibleProtocolSet)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

_DWORD *getContextDescriptor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (_DWORD *)swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor((unint64_t *)a1);
  if (result)
  {
    uint64_t v5 = result;
    if ((*result & 0x30000) == 0x20000)
    {
      uint64_t result = (_DWORD *)swift::ParsedTypeIdentity::parse((uint64_t)result, (uint64_t)v12);
      *(_OWORD *)(a2 + 8) = v13;
      char v6 = v5;
    }
    else
    {
      char v6 = result;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    *(void *)a2 = v6;
  }
  else if (*(void *)a1 != 771 {
         || *(_DWORD *)(a1 + 12) != 1
  }
         || (uint64_t v7 = (void *)(a1 + 16), v8 = *(unsigned int *)(a1 + 8), (v8 & 0x40000000) != 0) && *v7
         || (uint64_t v9 = v7[(v8 >> 30) & 1], (v9 & 1) != 0))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = v11;
  }
  return result;
}

void *swift_conformsToProtocol::$_0::__invoke(swift_conformsToProtocol::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_conformsToProtocol(this);
  swift_conformsToProtocol::Override = result;
  return result;
}

void *swift_conformsToProtocol2::$_0::__invoke(swift_conformsToProtocol2::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_conformsToProtocol2(this);
  swift_conformsToProtocol2::Override = result;
  return result;
}

void *swift_conformsToProtocolCommon::$_0::__invoke(swift_conformsToProtocolCommon::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_conformsToProtocolCommon(this);
  swift_conformsToProtocolCommon::Override = result;
  return result;
}

void ConformanceState::cacheResult(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, atomic_ullong *a5)
{
  unint64_t v8 = a1;
  uint64_t v82 = a2;
  uint64_t v83 = a3;
  uint64_t v9 = a1 + 6;
  os_unfair_lock_lock(a1 + 6);
  unint64_t v10 = *(void *)&v8[4]._os_unfair_lock_opaque;
  unint64_t v11 = v10 & 3;
  BOOL v12 = v11 == 0;
  unint64_t v80 = v10;
  long long v13 = (char *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if (!v13) {
    BOOL v12 = 1;
  }
  BOOL v79 = v12;
  uint64_t v75 = a3;
  uint64_t v76 = a4;
  uint64_t v74 = a2;
  BOOL v14 = v13;
  if (v12) {
    int v15 = 4;
  }
  else {
    int v15 = *v13;
  }
  unint64_t os_unfair_lock_opaque = v8[1]._os_unfair_lock_opaque;
  unint64_t v17 = *(_DWORD **)&v8[2]._os_unfair_lock_opaque;
  long long __src = v17 + 2;
  if (v17) {
    char v18 = v17 + 2;
  }
  else {
    char v18 = 0;
  }
  unint64_t v19 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>(&v82, &v83);
  long long v78 = v17;
  if (v79)
  {
    char v20 = 4;
    uint64_t v21 = v14;
  }
  else
  {
    uint64_t v21 = v14;
    char v20 = *v14;
  }
  uint64_t v22 = ~(-1 << v20);
  if (v11) {
    unsigned __int8 v23 = v21;
  }
  else {
    unsigned __int8 v23 = 0;
  }
  while (2)
  {
    uint64_t v24 = v19 & v22;
    if ((v19 & v22) <= 1) {
      uint64_t v24 = 1;
    }
    switch(v80 & 3)
    {
      case 1uLL:
        LODWORD(v25) = v23 + v24;
        LOBYTE(v25) = atomic_load_explicit(&v23[v24], memory_order_acquire);
        if (!v25) {
          goto LABEL_33;
        }
        goto LABEL_26;
      case 2uLL:
        LODWORD(v25) = v23 + 2 * v24;
        LOWORD(v25) = atomic_load_explicit((atomic_ushort *volatile)&v23[2 * v24], memory_order_acquire);
        if (!v25) {
          goto LABEL_33;
        }
        goto LABEL_26;
      case 3uLL:
        LODWORD(v25) = atomic_load_explicit((atomic_uint *volatile)&v23[4 * v24], memory_order_acquire);
        if (v25) {
          goto LABEL_26;
        }
        goto LABEL_33;
      default:
        uint64_t v25 = (v80 >> (4 * v24)) & 0xF;
        if (!v25)
        {
LABEL_33:
          uint64_t v73 = (os_unfair_lock_opaque + 1);
          if ((1 << v15) / (unint64_t)((1 << v15) - v73) > 3)
          {
            char v68 = v21;
            unsigned int v32 = (v15 + 1);
            char v81 = v15;
            if (v32 >= 0x11) {
              unsigned int v33 = 4;
            }
            else {
              unsigned int v33 = 2;
            }
            if (v32 < 9) {
              size_t v34 = 1;
            }
            else {
              size_t v34 = v33;
            }
            unint64_t v35 = (unint64_t)malloc_type_calloc(2 << v15, v34, 0x4269077AuLL);
            if (!v35) {
              swift::hashable_support::findHashableBaseTypeOfHashableType();
            }
            char v69 = v9;
            int v70 = v8;
            if (v34 != 1)
            {
              if (v34 == 4) {
                size_t v34 = 3;
              }
              else {
                size_t v34 = 2;
              }
            }
            unint64_t v38 = v34 | v35;
            unint64_t v71 = v35;
            *(unsigned char *)unint64_t v35 = v15 + 1;
            if (v15)
            {
              uint64_t v39 = ~(-2 << v15);
              LODWORD(v34) = v38 & 3;
              if ((v38 & 3) != 0) {
                unint64_t v40 = v35 & 0xFFFFFFFFFFFFFFFCLL;
              }
              else {
                unint64_t v40 = 0;
              }
              uint64_t v41 = 1;
              while (2)
              {
                switch(v80 & 3)
                {
                  case 0uLL:
                    uint64_t v42 = (v80 >> (4 * v41)) & 0xF;
                    if (!v42) {
                      goto LABEL_53;
                    }
                    goto LABEL_62;
                  case 1uLL:
                    LODWORD(v42) = v23[v41];
                    if (v23[v41]) {
                      goto LABEL_62;
                    }
                    goto LABEL_53;
                  case 2uLL:
                    LODWORD(v42) = *(unsigned __int16 *)&v23[2 * v41];
                    if (!*(_WORD *)&v23[2 * v41]) {
                      goto LABEL_53;
                    }
                    goto LABEL_62;
                  case 3uLL:
                    LODWORD(v42) = *(_DWORD *)&v23[4 * v41];
                    if (!v42) {
                      goto LABEL_53;
                    }
LABEL_62:
                    for (unint64_t i = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>(&v18[6 * (v42 - 1)], (uint64_t *)&v18[6 * (v42 - 1) + 2]); ; unint64_t i = v45 + 1)
                    {
                      unint64_t v45 = i & v39;
                      if ((i & v39) != 0)
                      {
                        switch(v38 & 3)
                        {
                          case 1uLL:
                            LODWORD(v44) = *(unsigned __int8 *)(v40 + v45);
                            break;
                          case 2uLL:
                            LODWORD(v44) = *(unsigned __int16 *)(v40 + 2 * v45);
                            break;
                          case 3uLL:
                            LODWORD(v44) = *(_DWORD *)(v40 + 4 * v45);
                            break;
                          default:
                            uint64_t v44 = (v38 >> (4 * v45)) & 0xF;
                            break;
                        }
                        if (!v44) {
                          break;
                        }
                      }
                    }
                    if (v34 == 3)
                    {
                      *(_DWORD *)(v40 + 4 * v45) = v42;
                    }
                    else if (v34 == 2)
                    {
                      *(_WORD *)(v40 + 2 * v45) = v42;
                    }
                    else
                    {
                      *(unsigned char *)(v40 + v45) = v42;
                    }
LABEL_53:
                    if (!((unint64_t)++v41 >> v81)) {
                      continue;
                    }
                    goto LABEL_75;
                  default:
                    JUMPOUT(0);
                }
              }
            }
LABEL_75:
            unint64_t v8 = v70;
            atomic_store(v38, (unint64_t *)&v70[4]._os_unfair_lock_opaque);
            if (!v79)
            {
              std::string v46 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
              *std::string v46 = *(void *)&v70[8]._os_unfair_lock_opaque;
              v46[1] = v68;
              *(void *)&v70[8]._unint64_t os_unfair_lock_opaque = v46;
            }
            unint64_t v47 = __swift::__runtime::llvm::hash_combine<__swift::__runtime::llvm::hash_code,swift::TargetMetadata<swift::InProcess> const*>(&v82, &v83);
            char v48 = 4;
            unint64_t v37 = v78;
            if ((v71 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (v38 & 3) != 0) {
              char v48 = *(unsigned char *)(v71 & 0xFFFFFFFFFFFFFFFCLL);
            }
            uint64_t v49 = ~(-1 << v48);
            if ((v38 & 3) != 0) {
              unint64_t v50 = v71 & 0xFFFFFFFFFFFFFFFCLL;
            }
            else {
              unint64_t v50 = 0;
            }
            while (1)
            {
              uint64_t v51 = v47 & v49;
              if ((v47 & v49) <= 1) {
                uint64_t v51 = 1;
              }
              switch((int)v34)
              {
                case 1:
                  LODWORD(v52) = v50 + v51;
                  LOBYTE(v52) = atomic_load_explicit((atomic_uchar *volatile)(v50 + v51), memory_order_acquire);
                  if (v52) {
                    goto LABEL_94;
                  }
                  goto LABEL_98;
                case 2:
                  LODWORD(v52) = v50 + 2 * v51;
                  LOWORD(v52) = atomic_load_explicit((atomic_ushort *volatile)(v50 + 2 * v51), memory_order_acquire);
                  if (!v52) {
                    goto LABEL_98;
                  }
                  goto LABEL_94;
                case 3:
                  LODWORD(v52) = atomic_load_explicit((atomic_uint *volatile)(v50 + 4 * v51), memory_order_acquire);
                  if (v52) {
                    goto LABEL_94;
                  }
                  goto LABEL_98;
                default:
                  uint64_t v52 = (v38 >> (4 * v51)) & 0xF;
                  if (!v52)
                  {
LABEL_98:
                    uint64_t v36 = v51;
LABEL_99:
                    unint64_t v80 = v38;
                    uint64_t v9 = v69;
                    if (v78)
                    {
LABEL_100:
                      unint64_t v55 = (unint64_t)v37;
                      if (os_unfair_lock_opaque >= *v37) {
                        goto LABEL_101;
                      }
LABEL_107:
                      if (!a5) {
                        goto LABEL_132;
                      }
                      atomic_fetch_add_explicit((atomic_ullong *volatile)&v8[12], 1uLL, memory_order_acquire);
                      unint64_t explicit = *(atomic_ullong **)&v8[14]._os_unfair_lock_opaque;
                      if (explicit) {
                        unint64_t explicit = (atomic_ullong *)atomic_load_explicit(explicit, memory_order_acquire);
                      }
                      atomic_fetch_add_explicit((atomic_ullong *volatile)&v8[12], 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
                      if (explicit == a5)
                      {
LABEL_132:
                        uint64_t v61 = (void *)(v55 + 8 + 24 * os_unfair_lock_opaque);
                        *uint64_t v61 = v74;
                        v61[1] = v75;
                        v61[2] = v76;
                        atomic_store(v73, &v8[1]._os_unfair_lock_opaque);
                        switch((int)v55)
                        {
                          case 1:
                            unint64_t v62 = v80 & 0xFFFFFFFFFFFFFFFCLL;
                            if ((v80 & 3) == 0) {
                              unint64_t v62 = 0;
                            }
                            atomic_store(v73, (unsigned __int8 *)(v62 + v36));
                            break;
                          case 2:
                            unint64_t v63 = v80 & 0xFFFFFFFFFFFFFFFCLL;
                            if ((v80 & 3) == 0) {
                              unint64_t v63 = 0;
                            }
                            atomic_store(v73, (unsigned __int16 *)(v63 + 2 * v36));
                            break;
                          case 3:
                            unint64_t v64 = v80 & 0xFFFFFFFFFFFFFFFCLL;
                            if ((v80 & 3) == 0) {
                              unint64_t v64 = 0;
                            }
                            atomic_store(v73, (unsigned int *)(v64 + 4 * v36));
                            break;
                          default:
                            atomic_store((v73 << (4 * v36)) | v80, (unint64_t *)&v8[4]._os_unfair_lock_opaque);
                            break;
                        }
                      }
                      __dmb(0xBu);
                      if (!v8->_os_unfair_lock_opaque)
                      {
                        os_signpost_id_t v66 = *(void ***)&v8[8]._os_unfair_lock_opaque;
                        unsigned int v29 = v8 + 8;
                        uint64_t v65 = v66;
                        if (v66)
                        {
                          do
                          {
                            long long v67 = (void **)*v65;
                            free(v65[1]);
                            free(v65);
                            uint64_t v65 = v67;
                          }
                          while (v67);
                        }
                        goto LABEL_125;
                      }
                      goto LABEL_126;
                    }
LABEL_101:
                    unint64_t v56 = os_unfair_lock_opaque + (os_unfair_lock_opaque >> 2);
                    if (v56 <= os_unfair_lock_opaque + 1) {
                      unint64_t v56 = os_unfair_lock_opaque + 1;
                    }
                    size_t v57 = malloc_good_size(24 * v56 + 8);
                    unint64_t v58 = malloc_type_malloc(v57, 0x1000D770uLL);
                    if (!v58) {
                      swift::hashable_support::findHashableBaseTypeOfHashableType();
                    }
                    unint64_t v55 = (unint64_t)v58;
                    *unint64_t v58 = (v57 - 8) / 0x18;
                    if (v37)
                    {
                      memcpy(v58 + 2, __src, 24 * os_unfair_lock_opaque);
                      uint64_t v59 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
                      *uint64_t v59 = *(void *)&v8[8]._os_unfair_lock_opaque;
                      v59[1] = v37;
                      *(void *)&v8[8]._unint64_t os_unfair_lock_opaque = v59;
                    }
                    atomic_store(v55, (unint64_t *)&v8[2]._os_unfair_lock_opaque);
                    goto LABEL_107;
                  }
LABEL_94:
                  unsigned int v53 = v52 - 1;
                  if (v53 < os_unfair_lock_opaque)
                  {
                    uint64_t v54 = &v18[6 * v53];
                    if (*v54 == v82 && v54[1] == v83)
                    {
                      uint64_t v36 = 0;
                      goto LABEL_99;
                    }
                  }
                  unint64_t v47 = v51 + 1;
                  break;
              }
            }
          }
          uint64_t v36 = v24;
          unint64_t v37 = v17;
          if (v17) {
            goto LABEL_100;
          }
          goto LABEL_101;
        }
LABEL_26:
        unsigned int v26 = v25 - 1;
        if (v26 >= os_unfair_lock_opaque || (char v27 = &v18[6 * v26], *v27 != v82) || v27[1] != v83)
        {
          unint64_t v19 = v24 + 1;
          continue;
        }
        __dmb(0xBu);
        if (!v8->_os_unfair_lock_opaque)
        {
          int v30 = *(void ***)&v8[8]._os_unfair_lock_opaque;
          unsigned int v29 = v8 + 8;
          unsigned int v28 = v30;
          if (v30)
          {
            do
            {
              unint64_t v31 = (void **)*v28;
              free(v28[1]);
              free(v28);
              unsigned int v28 = v31;
            }
            while (v31);
          }
LABEL_125:
          *(void *)&v29->_unint64_t os_unfair_lock_opaque = 0;
        }
LABEL_126:
        os_unfair_lock_unlock(v9);
        return;
    }
  }
}

void validateDyldResults(ConformanceState &,swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolDescriptor<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,swift::TargetProtocolConformanceDescriptor<swift::InProcess> const*,BOOL)::$_0::operator()(unint64_t ***a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = *((unsigned int *)*a1 + 2);
  if (v4)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (uint64_t)&(*v3)[v4];
    uint64_t v7 = "0x";
    do
    {
      unint64_t v8 = *v5;
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      if (v9) {
        std::string::append((std::string *)a2, ", ");
      }
      std::string::append((std::string *)a2, v7);
      if (v8)
      {
        uint64_t v10 = 16;
        do
        {
          if ((v8 & 0xF) >= 0xA) {
            char v11 = (v8 & 0xF) + 55;
          }
          else {
            char v11 = v8 & 0xF | 0x30;
          }
          v25[v10--] = v11;
          BOOL v12 = v8 > 0xF;
          v8 >>= 4;
        }
        while (v12);
        uint64_t v13 = v10 + 1;
      }
      else
      {
        v25[16] = 48;
        uint64_t v13 = 16;
      }
      uint64_t v14 = 17 - v13;
      if ((unint64_t)(17 - v13) > 0x16)
      {
        uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v16 = v14 | 7;
        }
        unint64_t v17 = v7;
        uint64_t v18 = v16 + 1;
        p_p = operator new(v16 + 1);
        unint64_t v19 = v18 | 0x8000000000000000;
        uint64_t v7 = v17;
        std::string::size_type v23 = 17 - v13;
        int64_t v24 = v19;
        __p = p_p;
        if (v13 == 17) {
          goto LABEL_23;
        }
      }
      else
      {
        HIBYTE(v24) = 17 - v13;
        p_p = &__p;
        if (v13 == 17) {
          goto LABEL_23;
        }
      }
      memcpy(p_p, &v25[v13], 17 - v13);
      p_p += v14;
LABEL_23:
      unsigned char *p_p = 0;
      if (v24 >= 0) {
        char v20 = (const std::string::value_type *)&__p;
      }
      else {
        char v20 = (const std::string::value_type *)__p;
      }
      if (v24 >= 0) {
        std::string::size_type v21 = HIBYTE(v24);
      }
      else {
        std::string::size_type v21 = v23;
      }
      std::string::append((std::string *)a2, v20, v21);
      if (SHIBYTE(v24) < 0) {
        operator delete(__p);
      }
      ++v5;
    }
    while (v5 != (unint64_t *)v6);
  }
}

uint64_t swift_conformsToProtocolMaybeInstantiateSuperclasses(swift::TargetMetadata<swift::InProcess> const*,swift::TargetProtocolDescriptor<swift::InProcess> const*,BOOL)::$_1::operator() const(anonymous namespace'::ConformanceSection const&)::{lambda(swift::TargetProtocolConformanceDescriptor<swift::InProcess> const&)#1}::operator()(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  if (!v4)
  {
LABEL_5:
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = (char **)((char *)a2 + (v4 & 0xFFFFFFFFFFFFFFFELL));
  if ((v4 & 1) == 0)
  {
    if (v5)
    {
      uint64_t v6 = (char *)a2 + (v4 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  uint64_t v6 = *v5;
LABEL_7:
  if (v6 != **(char ***)result) {
    return result;
  }
  uint64_t v7 = a2 + 1;
  int v8 = (a2[3] >> 3) & 7;
  if (v8 == 1)
  {
    uint64_t v11 = *v7;
    BOOL v12 = (unint64_t **)((char *)v7 + v11);
    if (!v11) {
      BOOL v12 = 0;
    }
    uint64_t v10 = *v12;
    if (*v12) {
      goto LABEL_16;
    }
  }
  else if (!v8)
  {
    uint64_t v9 = *v7;
    if (v9)
    {
      if ((int *)((char *)v7 + v9))
      {
        uint64_t v10 = (unint64_t *)((char *)v7 + v9);
LABEL_16:
        BOOL v13 = 0;
        uint64_t v14 = v10;
        goto LABEL_18;
      }
    }
  }
  uint64_t result = (uint64_t)swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)a2);
  uint64_t v14 = (unint64_t *)result;
  BOOL v13 = result != 0;
LABEL_18:
  uint64_t v15 = **(void **)(v3 + 8);
  if (!v15)
  {
    uint64_t v17 = 0;
    goto LABEL_41;
  }
  int v16 = **(unsigned __int8 **)(v3 + 16);
  if (v13)
  {
    if (v14 == (unint64_t *)v15)
    {
LABEL_21:
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      goto LABEL_42;
    }
    goto LABEL_29;
  }
  getContextDescriptor(v15, (uint64_t)&v41);
  if (v14)
  {
    char v20 = (const char *)v14;
    if (!v41) {
      goto LABEL_29;
    }
LABEL_27:
    uint64_t result = swift::equalContexts(v41, v20);
    if (result)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      uint64_t v14 = (unint64_t *)v15;
      goto LABEL_42;
    }
    goto LABEL_29;
  }
  char v20 = 0;
  if (v41) {
    goto LABEL_27;
  }
LABEL_29:
  uint64_t result = getSuperclassForMaybeIncompleteMetadata(v15, 0, 0, v16 != 0);
  uint64_t v15 = v21;
  if (result)
  {
    uint64_t v22 = result;
    uint64_t v17 = 1;
    while (1)
    {
      if (v13)
      {
        if (v14 == (unint64_t *)v22) {
          goto LABEL_21;
        }
        goto LABEL_32;
      }
      getContextDescriptor(v22, (uint64_t)&v41);
      if (v14)
      {
        int64_t v24 = (const char *)v14;
        if (!v41) {
          goto LABEL_32;
        }
      }
      else
      {
        int64_t v24 = 0;
        if (!v41) {
          goto LABEL_32;
        }
      }
      uint64_t result = swift::equalContexts(v41, v24);
      if (result)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        uint64_t v14 = (unint64_t *)v22;
        goto LABEL_42;
      }
LABEL_32:
      uint64_t result = getSuperclassForMaybeIncompleteMetadata(v22, v15, 1, v16 != 0);
      uint64_t v22 = result;
      uint64_t v15 = v23;
      if (!result) {
        goto LABEL_41;
      }
    }
  }
  uint64_t v17 = 1;
LABEL_41:
  uint64_t v14 = 0;
  unint64_t v19 = v15 & 0xFFFFFFFFFFFFFF00;
  uint64_t v18 = v15;
LABEL_42:
  uint64_t v25 = **(char ***)(v3 + 24);
  unint64_t v26 = v19 | v18;
  if (v17) {
    BOOL v27 = v26 == 255;
  }
  else {
    BOOL v27 = 0;
  }
  char v28 = v27;
  if (*v25) {
    char v28 = 1;
  }
  *uint64_t v25 = v28;
  if (v14)
  {
    uint64_t WitnessTable = swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable((uint64_t)a2, v14);
    ConformanceState::cacheResult(*(os_unfair_lock_s **)(v3 + 32), (uint64_t)v14, **(void **)v3, WitnessTable, 0);
    uint64_t result = *(void *)(v3 + 40);
    uint64_t v41 = (const char *)v14;
    uint64_t v42 = WitnessTable;
    uint64_t v30 = result + 8;
    if (*(unsigned char *)result)
    {
      int v31 = 4;
    }
    else
    {
      int v31 = *(_DWORD *)(result + 16);
      if (!v31)
      {
        uint64_t v36 = 0;
        return (uint64_t)__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::InsertIntoBucket<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>(result, v36, &v41, &v42);
      }
      uint64_t v30 = *(void *)(result + 8);
    }
    int v32 = v31 - 1;
    unsigned int v33 = v32 & ((v14 >> 4) ^ (v14 >> 9));
    size_t v34 = (unint64_t **)(v30 + 16 * v33);
    unint64_t v35 = *v34;
    if (v14 == *v34) {
      return result;
    }
    unint64_t v37 = 0;
    int v38 = 1;
    while (v35 != (unint64_t *)-4096)
    {
      if (v37) {
        BOOL v39 = 0;
      }
      else {
        BOOL v39 = v35 == (unint64_t *)-8192;
      }
      if (v39) {
        unint64_t v37 = v34;
      }
      unsigned int v40 = v33 + v38++;
      unsigned int v33 = v40 & v32;
      size_t v34 = (unint64_t **)(v30 + 16 * v33);
      unint64_t v35 = *v34;
      if (v14 == *v34) {
        return result;
      }
    }
    if (v37) {
      uint64_t v36 = v37;
    }
    else {
      uint64_t v36 = v34;
    }
    return (uint64_t)__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::InsertIntoBucket<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>(result, v36, &v41, &v42);
  }
  return result;
}

void *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::InsertIntoBucket<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v8 = *(_DWORD *)a1;
  int v9 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    int v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  __swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::grow(a1, v10);
  uint64_t v13 = a1 + 8;
  int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v14 = 4;
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      int v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(a1 + 8);
  }
  int v11 = *(_DWORD *)a1 & 1;
  int v15 = v14 - 1;
  unsigned int v16 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v14 - 1);
  a2 = (void *)(v13 + 16 * v16);
  uint64_t v17 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    while (v17 != -4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -8192;
      }
      if (v20) {
        uint64_t v18 = a2;
      }
      unsigned int v21 = v16 + v19++;
      unsigned int v16 = v21 & v15;
      a2 = (void *)(v13 + 16 * (v21 & v15));
      uint64_t v17 = *a2;
      if (*a3 == *a2) {
        goto LABEL_7;
      }
    }
    if (v18) {
      a2 = v18;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*a2 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *a2 = *a3;
  a2[1] = *a4;
  return a2;
}

int *__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::grow(uint64_t a1, unsigned int a2)
{
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v16 = a2;
      *(void *)(a1 + 8) = __swift::__runtime::llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    uint64_t v17 = (char *)(16 * v7);
    __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::moveFromOldBuckets((int *)a1, v6, (uint64_t *)&v17[(void)v6]);
    __swift::__runtime::llvm::deallocate_buffer((__swift::__runtime::llvm *)v6, v17);
  }
  int v8 = v18;
  if ((*(void *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    v18[0] = *(void *)(a1 + 8);
    v18[1] = v9;
    int v8 = &v19;
  }
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    *int v8 = v10;
    v8[1] = v11;
    v8 += 2;
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    *int v8 = v12;
    v8[1] = *(void *)(a1 + 48);
    v8 += 2;
  }
  uint64_t v13 = *(void *)(a1 + 56);
  if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    *int v8 = v13;
    v8[1] = *(void *)(a1 + 64);
    v8 += 2;
    if (a2 < 5) {
      return __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::moveFromOldBuckets((int *)a1, v18, v8);
    }
    goto LABEL_16;
  }
  if (a2 >= 5)
  {
LABEL_16:
    *(_DWORD *)a1 &= ~1u;
    uint64_t v14 = a2;
    *(void *)(a1 + 8) = __swift::__runtime::llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v14;
  }
  return __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::moveFromOldBuckets((int *)a1, v18, v8);
}

int *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::SmallDenseMap<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,4u,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>,swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*,__swift::__runtime::llvm::DenseMapInfo<swift::TargetMetadata<swift::InProcess> const*>,__swift::__runtime::llvm::detail::DenseMapPair<swift::TargetMetadata<swift::InProcess> const*,swift::TargetWitnessTable<swift::InProcess> const*>>::moveFromOldBuckets(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = (char *)(result + 18);
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_11;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = (char *)&v5[2 * v4];
  }
  unint64_t v7 = v6 - (char *)v5 - 16;
  if (v7 < 0x10)
  {
    int v8 = (char *)v5;
    do
    {
LABEL_10:
      *(void *)int v8 = -4096;
      v8 += 16;
    }
    while (v8 != v6);
    goto LABEL_11;
  }
  uint64_t v9 = (v7 >> 4) + 1;
  int v8 = (char *)&v5[2 * (v9 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v10 = v5 + 2;
  uint64_t v11 = v9 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = -4096;
    *uint64_t v10 = -4096;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  if (v9 != (v9 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_10;
  }
LABEL_11:
  while (a2 != a3)
  {
    uint64_t v18 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v13 = 4;
        uint64_t v12 = result + 2;
      }
      else
      {
        uint64_t v12 = (int *)*((void *)result + 1);
        int v13 = result[4];
      }
      int v14 = v13 - 1;
      unsigned int v15 = (v13 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      uint64_t v16 = &v12[4 * v15];
      uint64_t v17 = *(void *)v16;
      if (v18 != *(void *)v16)
      {
        uint64_t v19 = 0;
        int v20 = 1;
        while (v17 != -4096)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v17 == -8192;
          }
          if (v21) {
            uint64_t v19 = v16;
          }
          unsigned int v22 = v15 + v20++;
          unsigned int v15 = v22 & v14;
          uint64_t v16 = &v12[4 * (v22 & v14)];
          uint64_t v17 = *(void *)v16;
          if (v18 == *(void *)v16) {
            goto LABEL_15;
          }
        }
        if (v19) {
          uint64_t v16 = v19;
        }
      }
LABEL_15:
      *(void *)uint64_t v16 = v18;
      *((void *)v16 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA07280;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA07280;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata(*(swift::SubstGenericParametersFromMetadata **)(a1 + 8), *a2, *a3);
}

void std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA072C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA072C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_1>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadataKeyArgOrdinal(*(swift::SubstGenericParametersFromMetadata **)(a1 + 8), *a3);
}

void std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA07310;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA07310;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2,std::allocator<swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getWitnessTable(swift::TargetMetadata<swift::InProcess> const*)::$_2>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

void ConformanceState::ConformanceState(ConformanceState *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  shared_cache_range = (swift *)swift::runtime::bincompat::useLegacyProtocolConformanceReverseIteration(this);
  *((unsigned char *)this + 80) = (_BYTE)shared_cache_range;
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (swift::runtime::environment::SWIFT_DEBUG_ENABLE_SHARED_CACHE_PROTOCOL_CONFORMANCES_variable
    && MEMORY[0x1E4F144E0])
  {
    shared_cache_range = (swift *)_dyld_swift_optimizations_version();
    if (shared_cache_range == 1)
    {
      shared_cache_range = (swift *)_dyld_get_shared_cache_range();
      uint64_t v3 = shared_cache_range;
      if (!shared_cache_range) {
        uint64_t v3 = 0;
      }
      *((void *)this + 11) = shared_cache_range;
      *((void *)this + 12) = v3;
      if (swift::runtime::environment::initializeToken != -1) {
        dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
      }
      *((unsigned char *)this + 105) = swift::runtime::environment::SWIFT_DEBUG_VALIDATE_SHARED_CACHE_PROTOCOL_CONFORMANCES_variable;
    }
    else
    {
      *((void *)this + 11) = 0;
      *((void *)this + 12) = 0;
    }
  }
  swift::initializeProtocolConformanceLookup(shared_cache_range);
}

char *swift::TypeLookupError::TypeLookupError<swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1}>(swift::TypeLookupError swift::TypeLookupErrorImpl<unsigned int>(char const*,unsigned int)::{lambda(void)#1} const&)::{lambda(void *,swift::TypeLookupError::Command,void *)#1}::__invoke(uint64_t a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1:
      free(a3);
      goto LABEL_7;
    case 2:
      operator new();
    case 3:
      if (a1) {
        MEMORY[0x1852FF000](a1, 0x1050C40DB1D6C16, a3);
      }
LABEL_7:
      uint64_t result = 0;
      break;
    default:
      uint64_t v3 = *(const char **)a1;
      uint64_t v5 = *(unsigned int *)(a1 + 8);
      uint64_t v6 = 0;
      swift_asprintf(&v6, v3, a3, v5);
      uint64_t result = v6;
      break;
  }
  return result;
}

uint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::tryIncrementSlow(swift *a1, uint64_t a2, const char *a3, char *a4)
{
  if (a2 == -1) {
    return 1;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    swift::swift_abortRetainOverflow(a1, a2, a3, a4);
  }
  _X4 = 0;
  _X5 = 0;
  __asm { CASP            X4, X5, X4, X5, [X0] }
  if ((_X4 & 0x100000000) != 0) {
    return 0;
  }
  unint64_t v12 = 0;
  _X3 = 0;
  while (1)
  {
    _X6 = _X4 + 0x200000000;
    if (_X4 + 0x200000000 < 0) {
      break;
    }
    unint64_t v15 = _X3 | (v12 << 32);
    _X3 = (char *)v15;
    __asm { CASP            X2, X3, X6, X7, [X0] }
    BOOL v4 = _X2 == _X4;
    if (_X2 != _X4)
    {
      unint64_t v12 = HIDWORD(v15);
      _X4 = _X2;
      if ((_X2 & 0x100000000) == 0) {
        continue;
      }
    }
    return v4;
  }
  if (_X4 == -1) {
    return 1;
  }

  return swift::RefCounts<swift::SideTableRefCountBits>::tryIncrementSlow((swift *)(8 * a2 + 16), _X4, (const char *)(_X3 | (v12 << 32)), _X3);
}

uint64_t swift::RefCounts<swift::SideTableRefCountBits>::tryIncrementSlow(swift *a1, uint64_t a2, const char *a3, char *a4)
{
  if (a2 != -1) {
    swift::swift_abortRetainOverflow(a1, a2, a3, a4);
  }
  return 1;
}

uint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::tryIncrementNonAtomicSlow(swift *a1, uint64_t a2, const char *a3, char *a4)
{
  if (a2 == -1) {
    return 1;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    swift::swift_abortRetainOverflow(a1, a2, a3, a4);
  }
  _X4 = 0;
  _X5 = 0;
  __asm { CASP            X4, X5, X4, X5, [X0] }
  if ((_X4 & 0x100000000) != 0) {
    return 0;
  }
  _X2 = _X4 + 0x200000000;
  if (_X4 + 0x200000000 >= 0)
  {
    uint64_t v12 = *(void *)(8 * a2 + 0x10);
    do
    {
      _X7 = *(void *)(8 * a2 + 0x18);
      __asm { CASP            X6, X7, X2, X3, [X0] }
      _ZF = _X6 == v12;
      uint64_t v12 = _X6;
    }
    while (!_ZF);
    return 1;
  }
  if (_X4 == -1) {
    return 1;
  }

  return swift::RefCounts<swift::SideTableRefCountBits>::tryIncrementSlow((swift *)(8 * a2 + 16), _X4, 0, a4);
}

unint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementUnownedSlow(atomic_ullong *a1, uint64_t a2, const char *a3, char *a4)
{
  int v4 = a2;
  atomic_ullong v6 = *a1;
  if (*a1 < 0 && *a1 != 0xFFFFFFFFLL)
  {
LABEL_11:
    unint64_t result = 8 * v6;
    if (!(8 * v6)) {
      swift::swift_abortUnownedRetainOverflow(0, a2, a3, a4);
    }
  }
  else
  {
    unint64_t result = (unint64_t)swift_slowAlloc(0x20uLL, 0xFuLL);
    *(void *)unint64_t result = a1 - 1;
    while (1)
    {
      _X2 = v6;
      uint64_t v9 = *(void *)(result + 16);
      do
      {
        _X7 = *(void *)(result + 24);
        __asm { CASP            X6, X7, X2, X3, [X10] }
        _ZF = _X6 == v9;
        uint64_t v9 = _X6;
      }
      while (!_ZF);
      atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v6, (result >> 3) | 0xC000000000000000, memory_order_release, memory_order_relaxed);
      if (v6 == _X2) {
        break;
      }
      if (v6 < 0 && v6 != 0xFFFFFFFFLL)
      {
        swift_slowDealloc((void *)result);
        goto LABEL_11;
      }
    }
  }
  _X2 = 0;
  _X3 = 0;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  if (((unint64_t)_X2 & 0x8000000000000000) == 0 || _X2 != 0xFFFFFFFFLL)
  {
    unsigned int v18 = 2 * (v4 + (_X2 >> 1));
    _ZF = v18 != -2 && v18 >> 1 == v4 + (_X2 >> 1);
    if (!_ZF) {
LABEL_26:
    }
      swift::RefCounts<swift::SideTableRefCountBits>::incrementUnownedSlow((swift *)result, a2, _X2, (char *)_X3);
    unint64_t v20 = 0;
    LODWORD(_X5) = 0;
    while (1)
    {
      _X6 = (unint64_t)_X2 & 0xFFFFFFFF00000001 | (2 * (v18 >> 1));
      _X3 = _X5 | (v20 << 32);
      _X5 = (char *)_X3;
      __asm { CASP            X4, X5, X6, X7, [X8] }
      if (_X4 == _X2) {
        break;
      }
      unint64_t v20 = HIDWORD(_X3);
      unsigned int v18 = 2 * (v4 + (_X4 >> 1));
      BOOL v24 = v18 != -2 && v18 >> 1 == v4 + (_X4 >> 1);
      _X2 = _X4;
      if (!v24) {
        goto LABEL_26;
      }
    }
  }
  return result;
}

atomic_ullong *swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementSlow(atomic_ullong *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == -1) {
    return a1 - 1;
  }
  if (a2 < 0)
  {
    _X2 = 0;
    uint64_t v9 = (swift *)(8 * a2 + 16);
    _X3 = 0;
    __asm { CASP            X2, X3, X2, X3, [X0] }
    if (a3 != 1 && _X2 < 0 && _X2 == 0xFFFFFFFFLL) {
      return a1 - 1;
    }
    LODWORD(_X5) = 0;
    unint64_t v17 = 0;
    uint64_t v18 = a3 << 33;
    _X6 = (a3 << 33) + _X2;
    if (_X6 < 0)
    {
      unint64_t v21 = 0;
      _X4 = _X2;
      if (_X2 == -1) {
        return a1 - 1;
      }
      goto LABEL_28;
    }
    while (1)
    {
      _X3 = _X5 | (v17 << 32);
      _X5 = (char *)_X3;
      __asm { CASP            X4, X5, X6, X7, [X0] }
      if (_X4 == _X2) {
        break;
      }
      unint64_t v21 = HIDWORD(_X3);
      _X2 = _X4;
      unint64_t v17 = HIDWORD(_X3);
      _X6 = v18 + _X4;
      if (v18 + _X4 < 0) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    atomic_ullong v6 = *a1;
    if ((*a1 & 0x8000000000000000) == 0 || *a1 == 0xFFFFFFFFLL)
    {
      unint64_t v7 = (unint64_t)swift_slowAlloc(0x20uLL, 0xFuLL);
      *(void *)unint64_t v7 = a1 - 1;
      while (1)
      {
        _X2 = v6;
        uint64_t v23 = *(void *)(v7 + 16);
        do
        {
          _X7 = *(void *)(v7 + 24);
          __asm { CASP            X6, X7, X2, X3, [X10] }
          _ZF = _X6 == v23;
          uint64_t v23 = _X6;
        }
        while (!_ZF);
        atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v6, (v7 >> 3) | 0xC000000000000000, memory_order_release, memory_order_relaxed);
        if (v6 == _X2) {
          break;
        }
        if (v6 < 0 && v6 != 0xFFFFFFFFLL)
        {
          swift_slowDealloc((void *)v7);
          unint64_t v7 = 8 * v6;
          break;
        }
      }
    }
    else
    {
      unint64_t v7 = 8 * v6;
    }
    _X2 = 0;
    uint64_t v9 = (swift *)(v7 + 16);
    _X3 = 0;
    __asm { CASP            X2, X3, X2, X3, [X0] }
    if (a3 == 1 || (_X2 & 0x8000000000000000) == 0 || _X2 != 0xFFFFFFFFLL)
    {
      LODWORD(_X5) = 0;
      unint64_t v28 = 0;
      uint64_t v29 = a3 << 33;
      _X6 = (a3 << 33) + _X2;
      if (_X6 >= 0)
      {
        while (1)
        {
          _X3 = _X5 | (v28 << 32);
          _X5 = (char *)_X3;
          __asm { CASP            X4, X5, X6, X7, [X0] }
          if (_X4 == _X2) {
            return a1 - 1;
          }
          unint64_t v31 = HIDWORD(_X3);
          _X2 = _X4;
          unint64_t v28 = HIDWORD(_X3);
          _X6 = v29 + _X4;
          if (v29 + _X4 < 0) {
            goto LABEL_26;
          }
        }
      }
      unint64_t v31 = 0;
      _X4 = _X2;
LABEL_26:
      unint64_t v21 = v31;
LABEL_27:
      if (_X4 != -1) {
LABEL_28:
      }
        swift::RefCounts<swift::SideTableRefCountBits>::incrementSlow(v9, _X4, (const char *)(_X5 | (v21 << 32)), (char *)_X3);
    }
  }
  return a1 - 1;
}

uint64_t swift::RefCounts<swift::SideTableRefCountBits>::incrementSlow(swift *a1, uint64_t a2, const char *a3, char *a4)
{
  if (a2 != -1) {
    swift::swift_abortRetainOverflow(a1, a2, a3, a4);
  }
  return *((void *)a1 - 2);
}

swift *swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::incrementNonAtomicSlow(swift *result, uint64_t a2, uint64_t a3)
{
  if (a2 == -1) {
    return result;
  }
  if (a2 < 0)
  {
    _X2 = 0;
    unint64_t result = (swift *)(8 * a2 + 16);
    _X3 = 0;
    __asm { CASP            X2, X3, X2, X3, [X0] }
    if (a3 != 1 && _X2 < 0 && _X2 == 0xFFFFFFFFLL) {
      return result;
    }
    LODWORD(_X5) = 0;
    unint64_t v15 = 0;
    uint64_t v16 = a3 << 33;
    _X6 = (a3 << 33) + _X2;
    if (_X6 < 0)
    {
      unint64_t v19 = 0;
      _X4 = _X2;
      if (_X2 == -1) {
        return result;
      }
      goto LABEL_28;
    }
    while (1)
    {
      _X3 = _X5 | (v15 << 32);
      _X5 = (char *)_X3;
      __asm { CASP            X4, X5, X6, X7, [X0] }
      if (_X4 == _X2) {
        break;
      }
      unint64_t v19 = HIDWORD(_X3);
      _X2 = _X4;
      unint64_t v15 = HIDWORD(_X3);
      _X6 = v16 + _X4;
      if (v16 + _X4 < 0) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v4 = (atomic_ullong *)result;
    uint64_t v5 = *(void *)result;
    if ((*(void *)result & 0x8000000000000000) == 0 || *(void *)result == 0xFFFFFFFFLL)
    {
      unint64_t v6 = (unint64_t)swift_slowAlloc(0x20uLL, 0xFuLL);
      *(void *)unint64_t v6 = v4 - 1;
      while (1)
      {
        _X2 = v5;
        uint64_t v21 = *(void *)(v6 + 16);
        do
        {
          _X7 = *(void *)(v6 + 24);
          __asm { CASP            X6, X7, X2, X3, [X10] }
          _ZF = _X6 == v21;
          uint64_t v21 = _X6;
        }
        while (!_ZF);
        atomic_compare_exchange_strong_explicit(v4, (unint64_t *)&v5, (v6 >> 3) | 0xC000000000000000, memory_order_release, memory_order_relaxed);
        if (v5 == _X2) {
          break;
        }
        if (v5 < 0 && v5 != 0xFFFFFFFFLL)
        {
          swift_slowDealloc((void *)v6);
          unint64_t v6 = 8 * v5;
          break;
        }
      }
    }
    else
    {
      unint64_t v6 = 8 * v5;
    }
    _X2 = 0;
    unint64_t result = (swift *)(v6 + 16);
    _X3 = 0;
    __asm { CASP            X2, X3, X2, X3, [X0] }
    if (a3 == 1 || (_X2 & 0x8000000000000000) == 0 || _X2 != 0xFFFFFFFFLL)
    {
      LODWORD(_X5) = 0;
      unint64_t v26 = 0;
      uint64_t v27 = a3 << 33;
      _X6 = (a3 << 33) + _X2;
      if (_X6 >= 0)
      {
        while (1)
        {
          _X3 = _X5 | (v26 << 32);
          _X5 = (char *)_X3;
          __asm { CASP            X4, X5, X6, X7, [X0] }
          if (_X4 == _X2) {
            return result;
          }
          unint64_t v29 = HIDWORD(_X3);
          _X2 = _X4;
          unint64_t v26 = HIDWORD(_X3);
          _X6 = v27 + _X4;
          if (v27 + _X4 < 0) {
            goto LABEL_26;
          }
        }
      }
      unint64_t v29 = 0;
      _X4 = _X2;
LABEL_26:
      unint64_t v19 = v29;
LABEL_27:
      if (_X4 != -1)
      {
LABEL_28:
        return (swift *)swift::RefCounts<swift::SideTableRefCountBits>::incrementSlow(result, _X4, (const char *)(_X5 | (v19 << 32)), (char *)_X3);
      }
    }
  }
  return result;
}

unint64_t swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::formWeakReference(atomic_ullong *a1)
{
  atomic_ullong v2 = *a1;
  if ((*a1 & 0x8000000000000000) == 0 || *a1 == 0xFFFFFFFFLL)
  {
    if ((v2 & 0x100000000) == 0)
    {
      unint64_t v3 = (unint64_t)swift_slowAlloc(0x20uLL, 0xFuLL);
      *(void *)(v3 + 16) = 0;
      *(void *)unint64_t v3 = a1 - 1;
      *(void *)(v3 + 24) = 0;
      while ((v2 & 0x100000000) == 0)
      {
        _X2 = v2;
        uint64_t v20 = *(void *)(v3 + 16);
        do
        {
          _X7 = *(void *)(v3 + 24);
          __asm { CASP            X6, X7, X2, X3, [X8] }
          _ZF = _X6 == v20;
          uint64_t v20 = _X6;
        }
        while (!_ZF);
        atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v2, (v3 >> 3) | 0xC000000000000000, memory_order_release, memory_order_relaxed);
        if (v2 == _X2) {
          goto LABEL_4;
        }
        if (v2 < 0 && v2 != 0xFFFFFFFFLL)
        {
          swift_slowDealloc((void *)v3);
          unint64_t v3 = 8 * v2;
          if (8 * v2) {
            goto LABEL_4;
          }
          return 0;
        }
      }
    }
    return 0;
  }
  unint64_t v3 = 8 * v2;
  if (!(8 * v2)) {
    return 0;
  }
LABEL_4:
  _X2 = 0;
  _X3 = 0;
  uint64_t v6 = 0;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  if ((_X2 & 0x100000000) == 0)
  {
    _X2 = 0;
    _X3 = 0;
    __asm { CASP            X2, X3, X2, X3, [X8] }
    unint64_t v15 = 0;
    _X4 = _X2;
    while (1)
    {
      unint64_t v17 = _X3 | (v15 << 32);
      _X3 = (char *)v17;
      __asm { CASP            X2, X3, X4, X5, [X8] }
      if (_X2 == _X4) {
        break;
      }
      unint64_t v15 = HIDWORD(v17);
      _X4 = _X2;
      if (v17 == -1) {
        swift::swift_abortWeakRetainOverflow((swift *)v3, 0, _X2, (char *)v17);
      }
    }
    return v3;
  }
  return v6;
}

void swift::RefCounts<swift::SideTableRefCountBits>::incrementUnownedSlow(swift *a1, uint64_t a2, const char *a3, char *a4)
{
}

uint64_t _swift_stdlib_immortalize(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if ((~v1 & 0x80000000FFFFFFFFLL) != 0)
  {
    uint64_t v2 = *(void *)(result + 8);
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 8), (unint64_t *)&v2, v1 | 0x80000000FFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
    if (v2 != v1)
    {
      uint64_t v3 = v2;
      do
      {
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 8), (unint64_t *)&v3, v2 | 0x80000000FFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
        BOOL v4 = v3 == v2;
        uint64_t v2 = v3;
      }
      while (!v4);
    }
  }
  return result;
}

uint64_t *swift_reflectionMirror_normalizedType(swift::SwiftError **a1, unint64_t *a2, uint64_t *a3)
{
  DynamicType = a3;
  for (unint64_t i = *a3; *DynamicType == 771; unint64_t i = *DynamicType)
  {
    uint64_t v7 = (uint64_t)DynamicType;
    DynamicType = (uint64_t *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType((uint64_t)DynamicType, a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v7, a1);
  }
  if (a2)
  {
    unint64_t i = *a2;
    DynamicType = (uint64_t *)a2;
  }
  if (i > 0x7FF) {
    LODWORD(i) = 0;
  }
  if ((int)i <= 767)
  {
    if (i && i != 515) {
      return DynamicType;
    }
  }
  else
  {
    if ((int)i <= 772)
    {
      if (i != 768) {
        return DynamicType;
      }
      uint64_t v10 = (uint64_t (***)())&type metadata for Builtin.UnknownObject;
      if (DynamicType == &qword_1ECA05F70)
      {
        DynamicType = &qword_1ECA05F70;
        if (a2) {
          return DynamicType;
        }
        Class Class = swift::_swift_getClass((unint64_t)*a1, a2);
        if ((*((unsigned char *)Class + 32) & 2) != 0)
        {
          while (!*((void *)Class + 8))
          {
            if (*((void *)Class + 1)) {
              Class Class = (Class)*((void *)Class + 1);
            }
            else {
              Class Class = 0;
            }
            DynamicType = &qword_1ECA05F70;
            if ((*((unsigned char *)Class + 32) & 2) == 0) {
              return DynamicType;
            }
          }
        }
      }
      else
      {
        uint64_t v10 = &type metadata for Builtin.NativeObject;
        if (DynamicType != &qword_1ECA05F30) {
          return DynamicType;
        }
        unint64_t v11 = **(void **)*a1;
        BOOL v12 = v11 >= 0x800 || v11 == 0;
        BOOL v13 = !v12;
        DynamicType = &qword_1ECA05F30;
        if (a2 || v13) {
          return DynamicType;
        }
        Class v14 = swift::_swift_getClass((unint64_t)*a1, a2);
        if ((*((unsigned char *)v14 + 32) & 2) != 0)
        {
          while (!*((void *)v14 + 8))
          {
            if (*((void *)v14 + 1)) {
              Class v14 = (Class)*((void *)v14 + 1);
            }
            else {
              Class v14 = 0;
            }
            DynamicType = &qword_1ECA05F30;
            if ((*((unsigned char *)v14 + 32) & 2) == 0) {
              return DynamicType;
            }
          }
        }
      }
      return (uint64_t *)(v10 + 1);
    }
    if (i != 773)
    {
      if ((i - 1280) < 2 || i == 1024) {
        swift_reflectionMirror_normalizedType_cold_1();
      }
      return DynamicType;
    }
  }
  if (!a2)
  {
    Class v8 = swift::_swift_getClass((unint64_t)*a1, a2);
    if ((*((unsigned char *)v8 + 32) & 2) != 0)
    {
      while (!*((void *)v8 + 8))
      {
        uint64_t v9 = *((void *)v8 + 1);
        if (v9)
        {
          Class v8 = (Class)*((void *)v8 + 1);
          if ((*(unsigned char *)(v9 + 32) & 2) == 0) {
            return DynamicType;
          }
        }
        else
        {
          Class v8 = 0;
          if ((MEMORY[0x20] & 2) == 0) {
            return DynamicType;
          }
        }
      }
    }
  }
  return DynamicType;
}

uint64_t swift_getMetadataKind(void *a1)
{
  if (*a1 <= 0x7FFuLL) {
    return *a1;
  }
  else {
    return 0;
  }
}

unint64_t swift_reflectionMirror_count(swift::SwiftError **a1, objc_class *a2, unint64_t *a3)
{
  DynamicType = a3;
  Class Class = a2;
  for (unint64_t i = *a3; *DynamicType == 771; unint64_t i = *DynamicType)
  {
    uint64_t v7 = (uint64_t)DynamicType;
    DynamicType = (unint64_t *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType((uint64_t)DynamicType, a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v7, a1);
  }
  if (Class)
  {
    unint64_t i = *(void *)Class;
    DynamicType = (unint64_t *)Class;
  }
  unint64_t result = 0;
  if (i > 0x7FF) {
    LODWORD(i) = 0;
  }
  if ((int)i <= 514)
  {
    if ((i - 513) < 2)
    {
      if (DynamicType[1]) {
        unint64_t v15 = DynamicType[1];
      }
      else {
        unint64_t v15 = 0;
      }
      unint64_t result = 0;
      uint64_t v18 = *(int *)(v15 + 16);
      if (v18 && v18 != -16 - v15 && a1)
      {
        if (*(DynamicType - 1)) {
          uint64_t v19 = *(DynamicType - 1);
        }
        else {
          uint64_t v19 = 0;
        }
        unsigned int v26 = (*(uint64_t (**)(swift::SwiftError **, unint64_t *))(v19 + 88))(a1, DynamicType);
        return v35 != 0;
      }
      return result;
    }
    if (i)
    {
      if (i == 512)
      {
        unint64_t v9 = DynamicType[1];
        unint64_t v10 = v9 ? DynamicType[1] : 0;
        unint64_t result = 0;
        uint64_t v20 = *(int *)(v10 + 16);
        if (v20)
        {
          if (v20 != -16 - v10)
          {
            if (v9) {
              unint64_t v21 = DynamicType[1];
            }
            else {
              unint64_t v21 = 0;
            }
            return *(unsigned int *)(v21 + 20);
          }
        }
      }
      return result;
    }
  }
  else if ((int)i <= 768)
  {
    if (i != 515)
    {
      if (i != 768) {
        return result;
      }
      if (DynamicType == (unint64_t *)&qword_1ECA05F70)
      {
        if (!Class)
        {
          Class Class = swift::_swift_getClass((unint64_t)*a1, a2);
          if ((*((unsigned char *)Class + 32) & 2) != 0)
          {
            while (!*((void *)Class + 8))
            {
              uint64_t v22 = *((void *)Class + 1);
              if (v22)
              {
                Class Class = (Class)*((void *)Class + 1);
                if ((*(unsigned char *)(v22 + 32) & 2) == 0) {
                  break;
                }
              }
              else
              {
                Class Class = 0;
                if ((MEMORY[0x20] & 2) == 0) {
                  break;
                }
              }
            }
          }
        }
        unint64_t v23 = *(void *)Class;
        if (*(void *)Class > 0x7FFuLL) {
          LODWORD(v23) = 0;
        }
        if (v23)
        {
          if (v23 != 773) {
            return 0;
          }
          Class Class = (Class)*((void *)Class + 1);
          if (!Class) {
            return 0;
          }
        }
        if ((*((unsigned char *)Class + 32) & 2) == 0) {
          return 0;
        }
        uint64_t v24 = qword_1ECA05FB0;
        if (qword_1ECA05FB0) {
          uint64_t v25 = qword_1ECA05FB0;
        }
        else {
          uint64_t v25 = 0;
        }
        unint64_t result = 0;
        uint64_t v32 = *(int *)(v25 + 16);
        if (!v32 || v32 == -16 - v25) {
          return result;
        }
        if (!qword_1ECA05FB0) {
          goto LABEL_107;
        }
      }
      else
      {
        if (DynamicType != (unint64_t *)&qword_1ECA05F30) {
          return 0;
        }
        unint64_t v11 = **(void **)*a1;
        if (v11 <= 0x7FF && v11 != 0) {
          return 0;
        }
        if (!Class)
        {
          Class Class = swift::_swift_getClass((unint64_t)*a1, a2);
          if ((*((unsigned char *)Class + 32) & 2) != 0)
          {
            while (!*((void *)Class + 8))
            {
              uint64_t v29 = *((void *)Class + 1);
              if (v29)
              {
                Class Class = (Class)*((void *)Class + 1);
                if ((*(unsigned char *)(v29 + 32) & 2) == 0) {
                  break;
                }
              }
              else
              {
                Class Class = 0;
                if ((MEMORY[0x20] & 2) == 0) {
                  break;
                }
              }
            }
          }
        }
        unint64_t v30 = *(void *)Class;
        if (*(void *)Class > 0x7FFuLL) {
          LODWORD(v30) = 0;
        }
        if (v30)
        {
          if (v30 != 773) {
            return 0;
          }
          Class Class = (Class)*((void *)Class + 1);
          if (!Class) {
            return 0;
          }
        }
        if ((*((unsigned char *)Class + 32) & 2) == 0) {
          return 0;
        }
        uint64_t v24 = qword_1ECA05F70;
        if (qword_1ECA05F70) {
          uint64_t v31 = qword_1ECA05F70;
        }
        else {
          uint64_t v31 = 0;
        }
        unint64_t result = 0;
        uint64_t v33 = *(int *)(v31 + 16);
        if (!v33 || v33 == -16 - v31) {
          return result;
        }
        if (!qword_1ECA05F70) {
          goto LABEL_107;
        }
      }
      uint64_t v28 = v24;
      return *(unsigned int *)(v28 + 36);
    }
  }
  else
  {
    if ((int)i <= 772)
    {
      if (i == 769) {
        return DynamicType[1];
      }
      return result;
    }
    if (i != 773)
    {
      if ((i - 1280) < 2 || i == 1024) {
        swift_reflectionMirror_normalizedType_cold_1();
      }
      return result;
    }
  }
  if (!Class)
  {
    Class Class = swift::_swift_getClass((unint64_t)*a1, a2);
    if ((*((unsigned char *)Class + 32) & 2) != 0)
    {
      while (!*((void *)Class + 8))
      {
        uint64_t v13 = *((void *)Class + 1);
        if (v13)
        {
          Class Class = (Class)*((void *)Class + 1);
          if ((*(unsigned char *)(v13 + 32) & 2) == 0) {
            break;
          }
        }
        else
        {
          Class Class = 0;
          if ((MEMORY[0x20] & 2) == 0) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = *(void *)Class;
  if (*(void *)Class > 0x7FFuLL) {
    LODWORD(v14) = 0;
  }
  if (v14)
  {
    if (v14 != 773) {
      return 0;
    }
    Class Class = (Class)*((void *)Class + 1);
    if (!Class) {
      return 0;
    }
  }
  if ((*((unsigned char *)Class + 32) & 2) == 0) {
    return 0;
  }
  unint64_t v16 = DynamicType[8];
  if (v16) {
    unint64_t v17 = DynamicType[8];
  }
  else {
    unint64_t v17 = 0;
  }
  unint64_t result = 0;
  uint64_t v27 = *(int *)(v17 + 16);
  if (v27 && v27 != -16 - v17)
  {
    if (v16)
    {
      uint64_t v28 = DynamicType[8];
      return *(unsigned int *)(v28 + 36);
    }
LABEL_107:
    uint64_t v28 = 0;
    return *(unsigned int *)(v28 + 36);
  }
  return result;
}

uint64_t swift_reflectionMirror_recursiveCount(uint64_t *a1)
{
  unint64_t v2 = *a1;
  if (*a1 == 771)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t)a1;
    do
    {
      DynamicType = (void *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType(v4, v3);
      uint64_t v3 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v4, v3);
      uint64_t v4 = (uint64_t)DynamicType;
    }
    while (*DynamicType == 771);
    unint64_t v2 = *a1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t result = 0;
  if (v2 > 0x7FF) {
    LODWORD(v2) = 0;
  }
  if ((int)v2 > 767)
  {
    if ((int)v2 > 772)
    {
      if (v2 == 773)
      {
        uint64_t v7 = (uint64_t *)a1[1];
        if (!v7) {
          return 0;
        }
        goto LABEL_22;
      }
      if ((v2 - 1280) < 2 || v2 == 1024) {
        swift_reflectionMirror_normalizedType_cold_1();
      }
    }
    else
    {
      if (v2 == 768)
      {
        unint64_t v11 = (uint64_t (***)())&type metadata for Builtin.UnknownObject;
        if (a1 == &qword_1ECA05F70)
        {
          uint64_t v20 = &qword_1ECA05F70;
          int v21 = qword_1ECA05F70;
          if ((unint64_t)qword_1ECA05F70 > 0x7FF) {
            int v21 = 0;
          }
          if (v21)
          {
            if (v21 != 773) {
              return 0;
            }
            uint64_t v20 = (uint64_t *)type metadata for Builtin.RawUnsafeContinuation;
            if (!type metadata for Builtin.RawUnsafeContinuation) {
              return 0;
            }
          }
          if ((v20[4] & 2) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v11 = &type metadata for Builtin.NativeObject;
          if (a1 != &qword_1ECA05F30) {
            return 0;
          }
          unint64_t v12 = **(void **)*v3;
          if (v12 <= 0x7FF && v12 != 0) {
            return 0;
          }
          unint64_t v14 = &qword_1ECA05F30;
          int v15 = qword_1ECA05F30;
          if ((unint64_t)qword_1ECA05F30 > 0x7FF) {
            int v15 = 0;
          }
          if (v15)
          {
            if (v15 != 773) {
              return 0;
            }
            unint64_t v14 = (uint64_t *)type metadata for Builtin.BridgeObject;
            if (!type metadata for Builtin.BridgeObject) {
              return 0;
            }
          }
          if ((v14[4] & 2) == 0) {
            return 0;
          }
        }
        unint64_t v23 = &unk_1ECA07618;
        uint64_t v24 = (uint64_t *)(v11 + 1);
        goto LABEL_24;
      }
      if (v2 == 769) {
        return a1[1];
      }
    }
  }
  else
  {
    if ((v2 - 513) >= 2)
    {
      uint64_t v7 = a1;
      if (v2)
      {
        if (v2 == 512)
        {
          uint64_t v8 = a1[1];
          uint64_t v9 = v8 ? a1[1] : 0;
          uint64_t result = 0;
          uint64_t v18 = *(int *)(v9 + 16);
          if (v18)
          {
            if (v18 != -16 - v9)
            {
              if (v8) {
                uint64_t v19 = a1[1];
              }
              else {
                uint64_t v19 = 0;
              }
              return *(unsigned int *)(v19 + 20);
            }
          }
        }
        return result;
      }
LABEL_22:
      if ((v7[4] & 2) != 0)
      {
        unint64_t v23 = &unk_1ECA07618;
        uint64_t v24 = a1;
LABEL_24:
        uint64_t v25 = v3;
      }
      return 0;
    }
    if (a1[1]) {
      uint64_t v10 = a1[1];
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t result = 0;
    uint64_t v16 = *(int *)(v10 + 16);
    if (v16 && v16 != -16 - v10 && v3)
    {
      if (*(a1 - 1)) {
        uint64_t v17 = *(a1 - 1);
      }
      else {
        uint64_t v17 = 0;
      }
      unsigned int v22 = (*(uint64_t (**)(swift::SwiftError **, uint64_t *))(v17 + 88))(v3, a1);
      return v25 != 0;
    }
  }
  return result;
}

uint64_t swift_reflectionMirror_recursiveChildMetadata(char *a1, const char *a2, char **a3)
{
  uint64_t v18 = a3;
  v19[0] = a2;
  uint64_t v16 = v19;
  uint64_t v17 = &v18;
  uint64_t v24 = a1;
  unint64_t v4 = *(void *)a1;
  if (*(void *)a1 == 771)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t)a1;
    do
    {
      DynamicType = (void *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType(v6, v5);
      uint64_t v5 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v6, v5);
      uint64_t v6 = (uint64_t)DynamicType;
    }
    while (*DynamicType == 771);
    unint64_t v4 = *(void *)a1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  unsigned int v22 = v5;
  unint64_t v23 = a1;
  v21[0] = &v23;
  v21[1] = &v22;
  v21[2] = &v16;
  v20[0] = &v24;
  v20[1] = &v22;
  if (v4 > 0x7FF) {
    LODWORD(v4) = 0;
  }
  void v20[2] = v21;
  if ((int)v4 <= 767)
  {
    switch((int)v4)
    {
      case 512:
        v19[1] = (const char *)&unk_1ECA07438;
        void v19[2] = a1;
        void v19[3] = (const char *)v5;
        uint64_t v13 = v18;
        uint64_t result = (uint64_t)v27;
        unsigned int v14 = v28 | (v29 << 16);
        *uint64_t v13 = v25;
        v13[1] = 0;
        int v15 = *v17;
        *((unsigned char *)*v17 + 16) = v14 < 0x10000;
        *((unsigned char *)v15 + 17) = (v14 & 0xFF00) != 0;
        return result;
      case 513:
      case 514:
        uint64_t result = 0;
        *((_WORD *)v18 + 8) = 1;
        return result;
      case 515:
        return _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv((uint64_t)v20, a2);
      case 516:
        goto LABEL_29;
      default:
        if (!v4) {
          return _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv((uint64_t)v20, a2);
        }
        goto LABEL_27;
    }
  }
  switch((int)v4)
  {
    case 768:
      if (a1 != (char *)&qword_1ECA05F70)
      {
        if (a1 != (char *)&qword_1ECA05F30) {
          goto LABEL_27;
        }
        unint64_t v9 = **(void **)*v5;
        if (v9 <= 0x7FF && v9 != 0) {
          goto LABEL_27;
        }
      }
      return _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv((uint64_t)v20, a2);
    case 769:
      uint64_t v25 = (char *)&unk_1ECA07358;
      unsigned int v26 = a1;
      uint64_t v27 = v5;
      unint64_t v12 = *v17;
      *((unsigned char *)*v17 + 16) = (*(void *)&v11 & 0xFF0000) == 0;
      *((unsigned char *)v12 + 17) = (v11 & 0xFF00) != 0;
      return result;
    case 770:
    case 771:
      goto LABEL_27;
    case 772:
    case 774:
      goto LABEL_28;
    case 773:
      return _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv((uint64_t)v20, a2);
    default:
      if ((v4 - 1280) < 2 || v4 == 1024) {
        swift_reflectionMirror_normalizedType_cold_1();
      }
LABEL_27:
      uint64_t v25 = (char *)&unk_1ECA076F8;
      unsigned int v26 = a1;
      uint64_t v27 = v5;
      qword_1E8EBFEB0[0] = (atomic_ullong)"Opaque types have no children.";
      __break(1u);
LABEL_28:
      uint64_t v25 = (char *)&unk_1ECA07688;
      unsigned int v26 = a1;
      uint64_t v27 = v5;
      qword_1E8EBFEB0[0] = (atomic_ullong)"Metatypes have no children.";
      __break(1u);
LABEL_29:
      uint64_t v25 = (char *)&unk_1ECA073C8;
      unsigned int v26 = a1;
      uint64_t v27 = v5;
      qword_1E8EBFEB0[0] = (atomic_ullong)"FRT has no children.";
      __break(1u);
      JUMPOUT(0x1815AE094);
  }
}

uint64_t swift_reflectionMirror_recursiveChildOffset(uint64_t *a1, const void *a2)
{
  unsigned int v14 = &v15;
  unint64_t v15 = (unint64_t)a2;
  unint64_t v23 = a1;
  unint64_t v3 = *a1;
  if (*a1 == 771)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (uint64_t)a1;
    do
    {
      DynamicType = (void *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType(v5, v4);
      unint64_t v4 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v5, v4);
      uint64_t v5 = (uint64_t)DynamicType;
    }
    while (*DynamicType == 771);
    unint64_t v3 = *a1;
  }
  else
  {
    unint64_t v4 = 0;
  }
  int v21 = v4;
  unsigned int v22 = a1;
  v20[0] = &v22;
  v20[1] = &v21;
  void v20[2] = &v14;
  v19[0] = &v23;
  v19[1] = &v21;
  if (v3 > 0x7FF) {
    LODWORD(v3) = 0;
  }
  void v19[2] = v20;
  if ((int)v3 <= 767)
  {
    uint64_t result = 0;
    switch((int)v3)
    {
      case 512:
        uint64_t v16 = &unk_1ECA07438;
        uint64_t v17 = a1;
        uint64_t v18 = v4;
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_38;
        }
        uint64_t v8 = a1[1];
        if (v8)
        {
          if (v15 <= *(unsigned int *)(v8 + 20))
          {
            uint64_t v9 = a1[1];
LABEL_28:
            uint64_t v12 = *(unsigned int *)(v9 + 24);
            if (v12) {
              uint64_t v13 = &a1[v12];
            }
            else {
              uint64_t v13 = 0;
            }
            return *((unsigned int *)v13 + v15);
          }
        }
        else
        {
          uint64_t v9 = 0;
          if (v15 <= MEMORY[0x14]) {
            goto LABEL_28;
          }
        }
LABEL_38:
        swift_reflectionMirror_recursiveChildOffset_cold_1();
      case 513:
      case 514:
        return result;
      case 515:
        goto LABEL_23;
      case 516:
        uint64_t v16 = &unk_1ECA073C8;
        uint64_t v17 = a1;
        uint64_t v18 = v4;
        qword_1E8EBFEB0[0] = (atomic_ullong)"Cannot find offset of FRT.";
        __break(1u);
        JUMPOUT(0x1815AE484);
      default:
        if (!v3) {
          goto LABEL_23;
        }
        goto LABEL_35;
    }
  }
  switch((int)v3)
  {
    case 768:
      if (a1 != &qword_1ECA05F70)
      {
        if (a1 != &qword_1ECA05F30) {
          goto LABEL_35;
        }
        unint64_t v10 = **(void **)*v4;
        if (v10 <= 0x7FF && v10 != 0) {
          goto LABEL_35;
        }
      }
      goto LABEL_23;
    case 769:
      uint64_t v16 = &unk_1ECA07358;
      uint64_t v17 = a1;
      uint64_t v18 = v4;
      if ((v15 & 0x8000000000000000) != 0 || a1[1] < v15) {
        goto LABEL_37;
      }
      uint64_t result = a1[2 * v15 + 4];
      break;
    case 770:
    case 771:
      goto LABEL_35;
    case 772:
    case 774:
      goto LABEL_36;
    case 773:
LABEL_23:
      uint64_t result = _ZZN12_GLOBAL__N_14callIZ43swift_reflectionMirror_recursiveChildOffsetE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv((uint64_t)v19, a2);
      break;
    default:
      if ((v3 - 1280) < 2 || v3 == 1024) {
        swift_reflectionMirror_normalizedType_cold_1();
      }
LABEL_35:
      uint64_t v16 = &unk_1ECA076F8;
      uint64_t v17 = a1;
      uint64_t v18 = v4;
      qword_1E8EBFEB0[0] = (atomic_ullong)"Opaque types have no children.";
      __break(1u);
LABEL_36:
      uint64_t v16 = &unk_1ECA07688;
      uint64_t v17 = a1;
      uint64_t v18 = v4;
      qword_1E8EBFEB0[0] = (atomic_ullong)"Metatypes have no children.";
      __break(1u);
LABEL_37:
      swift_reflectionMirror_recursiveChildOffset_cold_1();
  }
  return result;
}

double swift_reflectionMirror_subscript@<D0>(swift::SwiftError **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, void (__cdecl **a5)(void *)@<X4>, unint64_t *a6@<X5>, _OWORD *a7@<X8>)
{
  DynamicType = a6;
  uint64_t v31 = (const char **)a4;
  uint64_t v32 = a3;
  v29[0] = &v32;
  v29[1] = &v31;
  v29[2] = &v30;
  unint64_t v30 = (void (**)(const char *))a5;
  unsigned int v40 = a2;
  for (unint64_t i = *a6; *DynamicType == 771; unint64_t i = *DynamicType)
  {
    uint64_t v12 = (uint64_t)DynamicType;
    DynamicType = (unint64_t *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType((uint64_t)DynamicType, a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v12, a1);
  }
  BOOL v39 = DynamicType;
  int v38 = a1;
  if (a2)
  {
    BOOL v39 = a2;
    unint64_t i = *a2;
    DynamicType = a2;
  }
  v37[0] = &v39;
  v37[1] = &v38;
  uint64_t v37[2] = v29;
  v36[0] = &v40;
  v36[1] = &v38;
  v36[2] = v37;
  if (i > 0x7FF) {
    LODWORD(i) = 0;
  }
  if ((int)i <= 767)
  {
    switch((int)i)
    {
      case 512:
        uint64_t v33 = (uint64_t (**)(void **, uint64_t))&unk_1ECA07438;
        size_t v34 = DynamicType;
        uint64_t v35 = a1;
        unsigned int v22 = v31;
        uint64_t v21 = v32;
        unint64_t v23 = v30;
        unint64_t v24 = v42;
        int v25 = WORD4(v42) | (BYTE10(v42) << 16);
        *unsigned int v22 = (const char *)v41;
        *unint64_t v23 = 0;
        unsigned int v26 = v35;
        uint64_t v27 = v33[2]((void **)&v33, v21);
      case 513:
      case 514:
        *(void *)&long long v41 = &unk_1ECA07538;
        *((void *)&v41 + 1) = DynamicType;
        *(void *)&long long v42 = a1;
      case 515:
        goto LABEL_19;
      case 516:
        *(void *)&long long v41 = &unk_1ECA073C8;
        *((void *)&v41 + 1) = DynamicType;
        *(void *)&long long v42 = a1;
        qword_1E8EBFEB0[0] = (atomic_ullong)"FRT has no subscript.";
        __break(1u);
        JUMPOUT(0x1815AE8B4);
      default:
        if (!i) {
          goto LABEL_19;
        }
        goto LABEL_31;
    }
  }
  switch((int)i)
  {
    case 768:
      if (DynamicType != (unint64_t *)&qword_1ECA05F70)
      {
        if (DynamicType != (unint64_t *)&qword_1ECA05F30) {
          goto LABEL_31;
        }
        unint64_t v14 = **(void **)*a1;
        if (v14 <= 0x7FF && v14 != 0) {
          goto LABEL_31;
        }
      }
      goto LABEL_19;
    case 769:
      uint64_t v33 = (uint64_t (**)(void **, uint64_t))&unk_1ECA07358;
      size_t v34 = DynamicType;
      uint64_t v35 = a1;
      if (v32 < 0 || DynamicType[1] < v32) {
        goto LABEL_33;
      }
      unint64_t v16 = DynamicType[2 * v32 + 4];
      uint64_t v18 = v35;
      *((void *)&v42 + 1) = v17;
      uint64_t v19 = swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(v17, &v41);
      if (*(void *)(*((void *)&v42 + 1) - 8)) {
        uint64_t v20 = *(void *)(*((void *)&v42 + 1) - 8);
      }
      else {
        uint64_t v20 = 0;
      }
      (*(void (**)(void *, unint64_t))(v20 + 16))(v19, (unint64_t)v18 + v16);
      double result = *(double *)&v41;
      long long v28 = v42;
      *a7 = v41;
      a7[1] = v28;
      break;
    case 770:
    case 771:
      goto LABEL_31;
    case 772:
    case 774:
      goto LABEL_32;
    case 773:
LABEL_19:
      double result = _ZZN12_GLOBAL__N_14callIZ32swift_reflectionMirror_subscriptE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv((uint64_t)v36, a2, a7);
      break;
    default:
      if ((i - 1280) < 2 || i == 1024) {
        swift_reflectionMirror_normalizedType_cold_1();
      }
LABEL_31:
      *(void *)&long long v41 = &unk_1ECA076F8;
      *((void *)&v41 + 1) = DynamicType;
      *(void *)&long long v42 = a1;
      qword_1E8EBFEB0[0] = (atomic_ullong)"Opaque types have no children.";
      __break(1u);
LABEL_32:
      *(void *)&long long v41 = &unk_1ECA07688;
      *((void *)&v41 + 1) = DynamicType;
      *(void *)&long long v42 = a1;
      qword_1E8EBFEB0[0] = (atomic_ullong)"Metatypes have no children.";
      __break(1u);
LABEL_33:
      swift_reflectionMirror_recursiveChildOffset_cold_1();
  }
  return result;
}

uint64_t swift_reflectionMirror_displayStyle(swift::SwiftError **a1, uint64_t *a2)
{
  DynamicType = a2;
  for (unint64_t i = *a2; *DynamicType == 771; unint64_t i = *DynamicType)
  {
    uint64_t v5 = (uint64_t)DynamicType;
    DynamicType = (uint64_t *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType((uint64_t)DynamicType, a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v5, a1);
  }
  if (i > 0x7FF) {
    LODWORD(i) = 0;
  }
  if ((int)i > 767)
  {
    uint64_t result = 116;
    switch((int)i)
    {
      case 768:
        if (DynamicType == &qword_1ECA05F70)
        {
          Class Class = swift::_swift_getClass((unint64_t)*a1, a2);
          if ((*((unsigned char *)Class + 32) & 2) == 0) {
            return 99;
          }
          Class v15 = Class;
          uint64_t result = 99;
          do
          {
            while (1)
            {
              if (*((void *)v15 + 8)) {
                return 99;
              }
              uint64_t v16 = *((void *)v15 + 1);
              if (!v16) {
                break;
              }
              Class v15 = (Class)*((void *)v15 + 1);
              if ((*(unsigned char *)(v16 + 32) & 2) == 0) {
                return result;
              }
            }
            Class v15 = 0;
          }
          while ((MEMORY[0x20] & 2) != 0);
        }
        else
        {
          if (DynamicType != &qword_1ECA05F30) {
            return 0;
          }
          unint64_t v9 = **(void **)*a1;
          if (v9 <= 0x7FF && v9 != 0) {
            return 0;
          }
          Class v11 = swift::_swift_getClass((unint64_t)*a1, a2);
          if ((*((unsigned char *)v11 + 32) & 2) == 0) {
            return 99;
          }
          Class v12 = v11;
          uint64_t result = 99;
          do
          {
            while (1)
            {
              if (*((void *)v12 + 8)) {
                return 99;
              }
              uint64_t v13 = *((void *)v12 + 1);
              if (!v13) {
                break;
              }
              Class v12 = (Class)*((void *)v12 + 1);
              if ((*(unsigned char *)(v13 + 32) & 2) == 0) {
                return result;
              }
            }
            Class v12 = 0;
          }
          while ((MEMORY[0x20] & 2) != 0);
        }
        return result;
      case 769:
        return result;
      case 770:
      case 771:
      case 772:
      case 774:
        return 0;
      case 773:
LABEL_11:
        Class v7 = swift::_swift_getClass((unint64_t)*a1, a2);
        if ((*((unsigned char *)v7 + 32) & 2) == 0) {
          return 99;
        }
        break;
      default:
        if ((i - 1280) < 2 || i == 1024) {
          swift_reflectionMirror_normalizedType_cold_1();
        }
        return 0;
    }
    while (!*((void *)v7 + 8))
    {
      uint64_t v8 = *((void *)v7 + 1);
      if (v8)
      {
        Class v7 = (Class)*((void *)v7 + 1);
        if ((*(unsigned char *)(v8 + 32) & 2) == 0) {
          return 99;
        }
      }
      else
      {
        Class v7 = 0;
        if ((MEMORY[0x20] & 2) == 0) {
          return 99;
        }
      }
    }
    return 99;
  }
  else
  {
    switch((int)i)
    {
      case 512:
        uint64_t result = 115;
        break;
      case 513:
      case 514:
        uint64_t result = 101;
        break;
      case 515:
        goto LABEL_11;
      case 516:
        uint64_t result = 102;
        break;
      default:
        if (!i) {
          goto LABEL_11;
        }
        return 0;
    }
  }
  return result;
}

uint64_t swift_EnumCaseName(swift::SwiftError **a1, unint64_t *a2)
{
  DynamicType = a2;
  for (unint64_t i = *a2; *DynamicType == 771; unint64_t i = *DynamicType)
  {
    uint64_t v5 = (uint64_t)DynamicType;
    DynamicType = (unint64_t *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType((uint64_t)DynamicType, a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v5, a1);
  }
  uint64_t result = 0;
  if (i > 0x7FF) {
    LODWORD(i) = 0;
  }
  if ((int)i <= 514)
  {
    if ((i - 513) < 2)
    {
      if (DynamicType[1]) {
        unint64_t v11 = DynamicType[1];
      }
      else {
        unint64_t v11 = 0;
      }
      uint64_t result = 0;
      uint64_t v14 = *(int *)(v11 + 16);
      if (v14 && v14 != -16 - v11)
      {
        if (*(DynamicType - 1)) {
          uint64_t v15 = *(DynamicType - 1);
        }
        else {
          uint64_t v15 = 0;
        }
        unsigned int v18 = (*(uint64_t (**)(swift::SwiftError **, unint64_t *))(v15 + 88))(a1, DynamicType);
        return v21[0];
      }
      return result;
    }
    if (i) {
      return result;
    }
LABEL_24:
    Class Class = swift::_swift_getClass((unint64_t)*a1, a2);
    if ((*((unsigned char *)Class + 32) & 2) != 0)
    {
      while (!*((void *)Class + 8))
      {
        uint64_t v13 = *((void *)Class + 1);
        if (v13)
        {
          Class Class = (Class)*((void *)Class + 1);
          if ((*(unsigned char *)(v13 + 32) & 2) == 0) {
            return 0;
          }
        }
        else
        {
          Class Class = 0;
          if ((MEMORY[0x20] & 2) == 0) {
            return 0;
          }
        }
      }
    }
    return 0;
  }
  if ((int)i > 772)
  {
    if (i != 773)
    {
      if ((i - 1280) < 2 || i == 1024) {
        swift_reflectionMirror_normalizedType_cold_1();
      }
      return result;
    }
    goto LABEL_24;
  }
  if (i == 515) {
    goto LABEL_24;
  }
  if (i == 768)
  {
    if (DynamicType == (unint64_t *)&qword_1ECA05F70)
    {
      Class v17 = swift::_swift_getClass((unint64_t)*a1, a2);
      if ((*((unsigned char *)v17 + 32) & 2) != 0)
      {
        Class v19 = v17;
        uint64_t result = 0;
        while (!*((void *)v19 + 8))
        {
          uint64_t v20 = *((void *)v19 + 1);
          if (v20)
          {
            Class v19 = (Class)*((void *)v19 + 1);
            if ((*(unsigned char *)(v20 + 32) & 2) == 0) {
              return result;
            }
          }
          else
          {
            Class v19 = 0;
            if ((MEMORY[0x20] & 2) == 0) {
              return result;
            }
          }
        }
      }
    }
    else if (DynamicType == (unint64_t *)&qword_1ECA05F30)
    {
      unint64_t v7 = **(void **)*a1;
      if (v7 > 0x7FF || v7 == 0)
      {
        Class v9 = swift::_swift_getClass((unint64_t)*a1, a2);
        if ((*((unsigned char *)v9 + 32) & 2) != 0)
        {
          Class v10 = v9;
          uint64_t result = 0;
          while (!*((void *)v10 + 8))
          {
            uint64_t v16 = *((void *)v10 + 1);
            if (v16)
            {
              Class v10 = (Class)*((void *)v10 + 1);
              if ((*(unsigned char *)(v16 + 32) & 2) == 0) {
                return result;
              }
            }
            else
            {
              Class v10 = 0;
              if ((MEMORY[0x20] & 2) == 0) {
                return result;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

const char *swift_OpaqueSummary(unint64_t *a1)
{
  uint64_t result = 0;
  unint64_t v3 = *a1;
  if (v3 > 0x7FF) {
    LODWORD(v3) = 0;
  }
  if ((int)v3 > 767)
  {
    if ((int)v3 <= 1023)
    {
      switch((int)v3)
      {
        case 768:
          uint64_t result = "(Opaque Value)";
          break;
        case 769:
          uint64_t result = "(Tuple)";
          break;
        case 770:
          uint64_t result = "(Function)";
          break;
        case 771:
          uint64_t result = "(Existential)";
          break;
        case 772:
          return result;
        case 773:
          uint64_t result = "(Objective-C Class Wrapper)";
          break;
        case 774:
          uint64_t result = "(Existential Metatype)";
          break;
        case 775:
          uint64_t result = "(Extended Existential)";
          break;
        default:
          return "(Unknown)";
      }
      return result;
    }
    switch(v3)
    {
      case 0x400:
        return "(Heap Local Variable)";
      case 0x500:
        return "(Heap Generic Local Variable)";
      case 0x501:
        return "(ErrorType Object)";
    }
    return "(Unknown)";
  }
  if ((int)v3 > 514)
  {
    if (v3 == 515) {
      return "(Foreign Class)";
    }
    if (v3 == 516) {
      return "(Foreign Reference Type)";
    }
    return "(Unknown)";
  }
  if ((v3 - 512) >= 3 && v3 != 0) {
    return "(Unknown)";
  }
  return result;
}

id swift_reflectionMirror_quickLookObject(swift::SwiftError **a1, uint64_t *a2)
{
  DynamicType = a2;
  for (unint64_t i = *a2; *DynamicType == 771; unint64_t i = *DynamicType)
  {
    uint64_t v5 = (uint64_t)DynamicType;
    DynamicType = (uint64_t *)swift::TargetExistentialTypeMetadata<swift::InProcess>::getDynamicType((uint64_t)DynamicType, a1);
    a1 = swift::TargetExistentialTypeMetadata<swift::InProcess>::projectValue(v5, a1);
  }
  id result = 0;
  if (i > 0x7FF) {
    LODWORD(i) = 0;
  }
  if ((int)i <= 767)
  {
    if (i && i != 515) {
      return result;
    }
  }
  else if ((int)i <= 772)
  {
    if (i != 768) {
      return result;
    }
    if (DynamicType != &qword_1ECA05F70)
    {
      if (DynamicType != &qword_1ECA05F30) {
        return 0;
      }
      unint64_t v7 = **(void **)*a1;
      if (v7 <= 0x7FF && v7 != 0) {
        return 0;
      }
    }
  }
  else if (i != 773)
  {
    if ((i - 1280) < 2 || i == 1024) {
      swift_reflectionMirror_normalizedType_cold_1();
    }
    return result;
  }
  Class Class = swift::_swift_getClass((unint64_t)*a1, a2);
  if ((*((unsigned char *)Class + 32) & 2) != 0)
  {
    while (!*((void *)Class + 8))
    {
      uint64_t v10 = *((void *)Class + 1);
      if (v10)
      {
        Class Class = (Class)*((void *)Class + 1);
        if ((*(unsigned char *)(v10 + 32) & 2) == 0) {
          return _quickLookObjectForPointer((id *)a1);
        }
      }
      else
      {
        Class Class = 0;
        if ((MEMORY[0x20] & 2) == 0) {
          return _quickLookObjectForPointer((id *)a1);
        }
      }
    }
  }
  return _quickLookObjectForPointer((id *)a1);
}

char *swift_keyPath_copySymbolName(swift::SymbolInfo *a1)
{
  swift::SymbolInfo::lookup(a1, (uint64_t)v3);
  if (!v3[32] || !_ContiguousArrayBuffer.mutableCount.getter((uint64_t)v3)) {
    return 0;
  }
  uint64_t v1 = (const char *)_ContiguousArrayBuffer.mutableCount.getter((uint64_t)v3);
  return strdup(v1);
}

void swift_keyPathSourceString(char *a1)
{
  unint64_t v2 = (const char *)strlen(a1);
  swift::Demangle::__runtime::keyPathSourceString((swift::Demangle::__runtime *)a1, v2);
}

uint64_t anonymous namespace'::TupleImpl::displayStyle(_anonymous_namespace_::TupleImpl *this)
{
  return 116;
}

uint64_t anonymous namespace'::TupleImpl::count(_anonymous_namespace_::TupleImpl *this)
{
  return *(void *)(*((void *)this + 1) + 8);
}

uint64_t anonymous namespace'::TupleImpl::childOffset(_anonymous_namespace_::TupleImpl *this, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0 || (uint64_t v2 = *((void *)this + 1), *(void *)(v2 + 8) < a2)) {
    swift_reflectionMirror_recursiveChildOffset_cold_1();
  }
  return *(void *)(v2 + 16 * a2 + 32);
}

uint64_t anonymous namespace'::TupleImpl::childMetadata(_anonymous_namespace_::TupleImpl *this, const char *a2, char **a3, void (__cdecl **a4)(void *))
{
  if (((unint64_t)a2 & 0x8000000000000000) != 0
    || (uint64_t v5 = *((void *)this + 1), *(void *)(v5 + 8) < (unint64_t)a2))
  {
    swift_reflectionMirror_recursiveChildOffset_cold_1();
  }
  uint64_t v8 = *(char **)(v5 + 16);
  if (!v8) {
    goto LABEL_15;
  }
  Class v9 = strchr(*(char **)(v5 + 16), 32);
  BOOL v10 = v9 != 0;
  if (a2 && v9)
  {
    unint64_t v11 = a2 - 1;
    do
    {
      uint64_t v8 = v9 + 1;
      Class v9 = strchr(v9 + 1, 32);
      BOOL v10 = v9 != 0;
      BOOL v12 = v11-- != 0;
    }
    while (v12 && v9);
  }
  if (!v10 || v8 == v9)
  {
LABEL_15:
    Class v17 = 0;
    swift_asprintf(&v17, a2, a2);
    *a3 = v17;
  }
  else
  {
    size_t v14 = v9 - v8;
    uint64_t v15 = malloc_type_malloc(v9 - v8 + 1, 0x7EEFBA19uLL);
    memcpy(v15, v8, v14);
    *((unsigned char *)v15 + v14) = 0;
    *a3 = (char *)v15;
  }
  return *(void *)(v5 + 16 * a2 + 24);
}

double anonymous namespace'::TupleImpl::subscript@<D0>(_anonymous_namespace_::TupleImpl *this@<X0>, const char **a2@<X2>, void (**a3)(const char *)@<X3>, uint64_t a4@<X1>, _OWORD *a5@<X8>)
{
  uint64_t v10 = (*(uint64_t (**)(_anonymous_namespace_::TupleImpl *))(*(void *)this + 16))(this);
  unint64_t v11 = (*(uint64_t (**)(_anonymous_namespace_::TupleImpl *, uint64_t, const char **, void (**)(const char *)))(*(void *)this + 24))(this, a4, a2, a3);
  uint64_t v12 = *((void *)this + 2);
  *((void *)&v18 + 1) = v11;
  uint64_t v13 = swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(v11, &v17);
  if (*(void *)(*((void *)&v18 + 1) - 8)) {
    uint64_t v14 = *(void *)(*((void *)&v18 + 1) - 8);
  }
  else {
    uint64_t v14 = 0;
  }
  (*(void (**)(void *, uint64_t))(v14 + 16))(v13, v12 + v10);
  double result = *(double *)&v17;
  long long v16 = v18;
  *a5 = v17;
  a5[1] = v16;
  return result;
}

uint64_t anonymous namespace'::ReflectionMirrorImpl::enumCaseName(_anonymous_namespace_::ReflectionMirrorImpl *this)
{
  return 0;
}

uint64_t anonymous namespace'::ReflectionMirrorImpl::quickLookObject(_anonymous_namespace_::ReflectionMirrorImpl *this)
{
  return 0;
}

uint64_t anonymous namespace'::ReflectionMirrorImpl::recursiveCount(_anonymous_namespace_::ReflectionMirrorImpl *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 8))();
}

uint64_t anonymous namespace'::ReflectionMirrorImpl::recursiveChildOffset(_anonymous_namespace_::ReflectionMirrorImpl *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

uint64_t anonymous namespace'::ReflectionMirrorImpl::recursiveChildMetadata(_anonymous_namespace_::ReflectionMirrorImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  return (*(uint64_t (**)(_anonymous_namespace_::ReflectionMirrorImpl *, uint64_t, const char **, void (**)(const char *)))(*(void *)this + 24))(this, a2, a3, a4);
}

void anonymous namespace'::TupleImpl::~TupleImpl(_anonymous_namespace_::TupleImpl *this)
{
}

uint64_t anonymous namespace'::ForeignReferenceTypeImpl::displayStyle(_anonymous_namespace_::ForeignReferenceTypeImpl *this)
{
  return 102;
}

uint64_t anonymous namespace'::ForeignReferenceTypeImpl::count(_anonymous_namespace_::ForeignReferenceTypeImpl *this)
{
  return 0;
}

void anonymous namespace'::ForeignReferenceTypeImpl::childOffset(_anonymous_namespace_::ForeignReferenceTypeImpl *this)
{
  qword_1E8EBFEB0 = (uint64_t)"Cannot find offset of FRT.";
  __break(1u);
}

void anonymous namespace'::ForeignReferenceTypeImpl::childMetadata(_anonymous_namespace_::ForeignReferenceTypeImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  qword_1E8EBFEB0 = (uint64_t)"FRT has no children.";
  __break(1u);
}

void anonymous namespace'::ForeignReferenceTypeImpl::subscript(_anonymous_namespace_::ForeignReferenceTypeImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  qword_1E8EBFEB0 = (uint64_t)"FRT has no subscript.";
  __break(1u);
}

void anonymous namespace'::ForeignReferenceTypeImpl::~ForeignReferenceTypeImpl(_anonymous_namespace_::ForeignReferenceTypeImpl *this)
{
}

uint64_t anonymous namespace'::StructImpl::displayStyle(_anonymous_namespace_::StructImpl *this)
{
  return 115;
}

uint64_t anonymous namespace'::StructImpl::count(_anonymous_namespace_::StructImpl *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 8);
  if (v1) {
    uint64_t v2 = *(void *)(*((void *)this + 1) + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(int *)(v2 + 16);
  if (v3) {
    BOOL v4 = v3 == -16 - v2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  if (v1) {
    uint64_t v6 = *(void *)(*((void *)this + 1) + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  return *(unsigned int *)(v6 + 20);
}

uint64_t anonymous namespace'::StructImpl::childOffset(_anonymous_namespace_::StructImpl *this, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *(void *)(v2 + 8);
  if (v3)
  {
    if (*(unsigned int *)(v3 + 20) >= a2)
    {
      uint64_t v4 = *(void *)(*((void *)this + 1) + 8);
      goto LABEL_6;
    }
LABEL_10:
    swift_reflectionMirror_recursiveChildOffset_cold_1();
  }
  uint64_t v4 = 0;
  if (MEMORY[0x14] < a2) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v5 = *(unsigned int *)(v4 + 24);
  uint64_t v6 = v2 + 8 * v5;
  if (v5) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  return *(unsigned int *)(v7 + 4 * a2);
}

uint64_t anonymous namespace'::StructImpl::childMetadata(unint64_t **this, unsigned int a2, const char **a3, void (**a4)(const char *))
{
  uint64_t result = v7[2];
  *a3 = (const char *)v7[0];
  *a4 = 0;
  return result;
}

double anonymous namespace'::StructImpl::subscript@<D0>(_anonymous_namespace_::StructImpl *this@<X0>, const char **a2@<X2>, void (**a3)(const char *)@<X3>, uint64_t a4@<X1>, _OWORD *a5@<X8>)
{
  unint64_t v8 = (*(uint64_t (**)(_anonymous_namespace_::StructImpl *, uint64_t, const char **, void (**)(const char *)))(*(void *)this + 24))(this, a4, a2, a3);
  int v10 = v9;
  uint64_t v11 = *((void *)this + 2);
  uint64_t v12 = (uint64_t *)(v11
                  + (*(uint64_t (**)(_anonymous_namespace_::StructImpl *, uint64_t))(*(void *)this + 16))(this, a4));
}

void anonymous namespace'::StructImpl::~StructImpl(_anonymous_namespace_::StructImpl *this)
{
}

void anonymous namespace'::getFieldAt(unint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t TypeContextDescriptor = swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(a1);
  if (!TypeContextDescriptor
    || ((uint64_t v8 = *(int *)(TypeContextDescriptor + 16), v9 = TypeContextDescriptor + 16 + v8, v8)
      ? (BOOL v10 = v9 == 0)
      : (BOOL v10 = 1),
        v10))
  {
    TypeName = swift_getTypeName((Class *)a1, 1);
    *(void *)a3 = "unknown";
    *(void *)(a3 + 8) = 7;
    *(void *)(a3 + 16) = &unk_1ECA06270;
    *(_WORD *)(a3 + 24) = 0;
    *(unsigned char *)(a3 + 26) = 0;
    return;
  }
  uint64_t v15 = v9 + 16;
  unsigned int v16 = a2;
  long long v17 = (_DWORD *)(v9 + 16 + 12 * a2);
  uint64_t v18 = (int)v17[2];
  if (v18) {
    Class v19 = (char *)v17 + v18 + 8;
  }
  else {
    Class v19 = 0;
  }
  if (v19) {
    size_t v20 = strlen(v19);
  }
  else {
    size_t v20 = 0;
  }
  uint64_t v21 = v15 + 12 * v16;
  uint64_t v24 = *(int *)(v21 + 4);
  uint64_t v22 = v21 + 4;
  uint64_t v23 = v24;
  if (v24) {
    BOOL v25 = v23 == -v22;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25)
  {
    uint64_t v26 = *v17 & 1;
    *(void *)a3 = v19;
    *(void *)(a3 + 8) = v20;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = v26;
    return;
  }
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)(v23 + v22), v7);
  unint64_t v29 = v28;
  int v48 = 0;
  uint64_t v30 = swift::TargetMetadata<swift::InProcess>::getTypeContextDescriptor(a1);
  if (v30)
  {
    uint64_t v49 = v30;
    if (a1)
    {
LABEL_23:
      GenericArgs = swift::TargetMetadata<swift::InProcess>::getGenericArgs(a1);
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v49 = 0;
    if (a1) {
      goto LABEL_23;
    }
  }
  GenericArgs = 0;
LABEL_26:
  unint64_t v50 = GenericArgs;
  uint64_t v51 = v53;
  uint64_t v52 = 0x800000000;
  v53[32] = 0;
  v42[0] = &unk_1ECA074A8;
  v42[1] = &v48;
  uint64_t v43 = v42;
  v40[0] = &unk_1ECA074F0;
  v40[1] = &v48;
  long long v41 = v40;
  swift_getTypeByMangledName(0, SymbolicMangledNameStringRef, v29, (uint64_t)GenericArgs, v42, v40, (uint64_t)&v44);
  if (v41 == v40)
  {
    (*(void (**)(void *))(v40[0] + 32))(v40);
  }
  else if (v41)
  {
    (*(void (**)(void))(*v41 + 40))();
  }
  if (v43 == v42)
  {
    (*(void (**)(void *))(v42[0] + 32))(v42);
    int v32 = v47;
    if (v47)
    {
LABEL_34:
      if (v32 == 1)
      {
        uint64_t v33 = v45(v44, 0, 0);
        v45(v44, 1, v33);
        char v37 = 0;
        int v32 = v47;
        int v38 = &unk_1ECA06270;
      }
      else
      {
        int v38 = 0;
        char v37 = 0;
      }
      goto LABEL_39;
    }
  }
  else
  {
    if (v43) {
      (*(void (**)(void))(*v43 + 40))();
    }
    int v32 = v47;
    if (v47) {
      goto LABEL_34;
    }
  }
  int v38 = v44;
  char v37 = v46;
LABEL_39:
  char v39 = *(unsigned char *)v17;
  *(void *)a3 = v19;
  *(void *)(a3 + 8) = v20;
  *(void *)(a3 + 16) = v38;
  *(unsigned char *)(a3 + 24) = v39 & 1;
  *(unsigned char *)(a3 + 25) = (v39 & 2) != 0;
  *(unsigned char *)(a3 + 26) = v37;
  if (v32 == 1) {
    v45(v44, 3, 0);
  }
  if (v51 != v53) {
    free(v51);
  }
}

void anonymous namespace'::missing_reflection_metadata_warning(_anonymous_namespace_ *this, const char *a2, uint64_t a3, char *a4, ...)
{
  va_start(va, a4);
  if (qword_1E8ECFA88 != -1) {
    swift::warningv(0, (char *)this, va, a4);
  }
}

void std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA074A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA074A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_0>,void const* ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getMetadata(*(swift::SubstGenericParametersFromMetadata **)(a1 + 8), *a2, *a3);
}

void std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECA074F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECA074F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1,std::allocator<anonymous namespace'::getFieldAt(swift::TargetMetadata<swift::InProcess> const*,unsigned int)::$_1>,swift::TargetWitnessTable<swift::InProcess> const* ()(swift::TargetMetadata<swift::InProcess> const*,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, int *a3)
{
  return swift::SubstGenericParametersFromMetadata::getWitnessTable(*(void *)(a1 + 8), *a2, *a3);
}

uint64_t anonymous namespace'::missing_reflection_metadata_warning(char const*,...)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(BOOL *a1)
{
  uint64_t result = (uint64_t)_playgroundPrintHook.getter();
  uint64_t v4 = result;
  if (result) {
    uint64_t result = swift_release(v3);
  }
  *a1 = v4 == 0;
  return result;
}

double anonymous namespace'::copyFieldContents@<D0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  int v7 = BYTE2(a3);
  *((void *)&v18 + 1) = a2;
  uint64_t v8 = swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(a2, &v17);
  uint64_t v12 = v8;
  switch(v7)
  {
    case 0:
    case 4:
      if (*(void *)(a2 - 8)) {
        uint64_t v13 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v13 = 0;
      }
      (*(void (**)(uint64_t *, uint64_t *, unint64_t))(v13 + 16))(v8, a1, a2);
      break;
    case 1:
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
      goto LABEL_6;
    case 2:
      uint64_t Strong = swift_unknownObjectUnownedLoadStrong(a1, v9, v10, v11);
LABEL_6:
      uint64_t *v12 = Strong;
      memcpy(v12 + 1, a1 + 1, *(void *)(*(void *)(a2 - 8) + 64) - 8);
      break;
    default:
      swift::warning(0, "Value with unrecognized reference type is reflected as ()", v10, v11);
      swift::TargetMetadata<swift::InProcess>::deallocateBoxForExistentialIn(a2, (uint64_t *)&v17);
      *((void *)&v18 + 1) = &unk_1ECA06270;
      break;
  }
  double result = *(double *)&v17;
  long long v16 = v18;
  *a4 = v17;
  a4[1] = v16;
  return result;
}

uint64_t anonymous namespace'::EnumImpl::displayStyle(_anonymous_namespace_::EnumImpl *this)
{
  return 101;
}

uint64_t anonymous namespace'::EnumImpl::count(_anonymous_namespace_::EnumImpl *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(void *)(*((void *)this + 1) + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(int *)(v3 + 16);
  if (v4) {
    BOOL v5 = v4 == -16 - v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    if (*(void *)(v2 - 8)) {
      uint64_t v7 = *(void *)(v2 - 8);
    }
    else {
      uint64_t v7 = 0;
    }
    unsigned int v8 = (*(uint64_t (**)(void))(v7 + 88))();
    return v9[2] != 0;
  }
  return result;
}

uint64_t anonymous namespace'::EnumImpl::childOffset(_anonymous_namespace_::EnumImpl *this)
{
  return 0;
}

uint64_t anonymous namespace'::EnumImpl::childMetadata(_anonymous_namespace_::EnumImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  return 0;
}

double anonymous namespace'::EnumImpl::subscript@<D0>(_anonymous_namespace_::EnumImpl *this@<X0>, const char **a2@<X2>, void (**a3)(const char *)@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  if (*(void *)(v8 - 8)) {
    uint64_t v9 = *(void *)(v8 - 8);
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(v9 + 88))(v7);
  uint64_t v11 = (const char *)v30[0];
  unint64_t v12 = v30[2];
  int v13 = v31;
  BoxForExistentialIn = swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(*((void *)this + 1), v30);
  uint64_t v15 = BoxForExistentialIn;
  if (*(void *)(*((void *)this + 1) - 8)) {
    uint64_t v16 = *(void *)(*((void *)this + 1) - 8);
  }
  else {
    uint64_t v16 = 0;
  }
  (*(void (**)(void *, void))(v16 + 16))(BoxForExistentialIn, *((void *)this + 2));
  if (v13) {
    long long v17 = &qword_1ECA05F30;
  }
  else {
    long long v17 = (uint64_t *)v12;
  }
  long long v18 = swift_allocBox((unint64_t)v17);
  size_t v20 = v19;
  if (*(void *)(*((void *)this + 1) - 8)) {
    uint64_t v21 = *(void *)(*((void *)this + 1) - 8);
  }
  else {
    uint64_t v21 = 0;
  }
  (*(void (**)(void *))(v21 + 96))(v15);
  if (*(v17 - 1)) {
    uint64_t v22 = *(v17 - 1);
  }
  else {
    uint64_t v22 = 0;
  }
  (*(void (**)(uint64_t *, void *, uint64_t *))(v22 + 32))(v20, v15, v17);
  swift::TargetMetadata<swift::InProcess>::deallocateBoxForExistentialIn(*((void *)this + 1), v30);
  *((void *)this + 2) = v20;
  if (v13) {
    *((void *)this + 2) = swift_projectBox(*v20);
  }
  *a2 = v11;
  *a3 = 0;
  *((void *)&v29 + 1) = v12;
  uint64_t v23 = swift::TargetMetadata<swift::InProcess>::allocateBoxForExistentialIn(v12, &v28);
  if (*(void *)(*((void *)&v29 + 1) - 8)) {
    uint64_t v24 = *(void *)(*((void *)&v29 + 1) - 8);
  }
  else {
    uint64_t v24 = 0;
  }
  (*(void (**)(void *, void))(v24 + 16))(v23, *((void *)this + 2));
  swift_release((uint64_t)v18);
  double result = *(double *)&v28;
  long long v26 = v29;
  *a4 = v28;
  a4[1] = v26;
  return result;
}

uint64_t anonymous namespace'::EnumImpl::enumCaseName(_anonymous_namespace_::EnumImpl *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)(v2 + 8)) {
    uint64_t v3 = *(void *)(*((void *)this + 1) + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(int *)(v3 + 16);
  if (v4) {
    BOOL v5 = v4 == -16 - v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v7 = *((void *)this + 2);
  if (*(void *)(v2 - 8)) {
    uint64_t v8 = *(void *)(v2 - 8);
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(v8 + 88))(v7);
  return v10[0];
}

void anonymous namespace'::EnumImpl::~EnumImpl(_anonymous_namespace_::EnumImpl *this)
{
}

uint64_t anonymous namespace'::ClassImpl::displayStyle(_anonymous_namespace_::ClassImpl *this)
{
  return 99;
}

uint64_t anonymous namespace'::ObjCClassImpl::count(_anonymous_namespace_::ObjCClassImpl *this)
{
  return 0;
}

void anonymous namespace'::ObjCClassImpl::childOffset(_anonymous_namespace_::ObjCClassImpl *this)
{
  qword_1E8EBFEB0 = (uint64_t)"Cannot get children of Objective-C objects.";
  __break(1u);
}

void anonymous namespace'::ObjCClassImpl::childMetadata(_anonymous_namespace_::ObjCClassImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  qword_1E8EBFEB0 = (uint64_t)"Cannot get children of Objective-C objects.";
  __break(1u);
}

void anonymous namespace'::ObjCClassImpl::subscript(_anonymous_namespace_::ObjCClassImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  qword_1E8EBFEB0 = (uint64_t)"Cannot get children of Objective-C objects.";
  __break(1u);
}

id anonymous namespace'::ClassImpl::quickLookObject(id **this)
{
  return _quickLookObjectForPointer(this[2]);
}

uint64_t anonymous namespace'::ObjCClassImpl::recursiveCount(_anonymous_namespace_::ObjCClassImpl *this)
{
  return 0;
}

void anonymous namespace'::ObjCClassImpl::recursiveChildOffset(_anonymous_namespace_::ObjCClassImpl *this)
{
  qword_1E8EBFEB0 = (uint64_t)"Cannot get children of Objective-C objects.";
  __break(1u);
}

void anonymous namespace'::ObjCClassImpl::recursiveChildMetadata(_anonymous_namespace_::ObjCClassImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  qword_1E8EBFEB0 = (uint64_t)"Cannot get children of Objective-C objects.";
  __break(1u);
}

void anonymous namespace'::ObjCClassImpl::~ObjCClassImpl(_anonymous_namespace_::ObjCClassImpl *this)
{
}

uint64_t anonymous namespace'::ClassImpl::count(_anonymous_namespace_::ClassImpl *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 64);
  if (v1) {
    uint64_t v2 = *(void *)(*((void *)this + 1) + 64);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(int *)(v2 + 16);
  if (v3) {
    BOOL v4 = v3 == -16 - v2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  if (v1) {
    uint64_t v6 = *(void *)(*((void *)this + 1) + 64);
  }
  else {
    uint64_t v6 = 0;
  }
  return *(unsigned int *)(v6 + 36);
}

ptrdiff_t anonymous namespace'::ClassImpl::childOffset(_anonymous_namespace_::ClassImpl *this, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 1);
  BOOL v4 = v3 + 8;
  if ((a2 & 0x8000000000000000) != 0 || *(unsigned int *)(v3[8] + 36) < a2) {
    swift_reflectionMirror_recursiveChildOffset_cold_1();
  }
  if (swift::usesNativeSwiftReferenceCounting((uint64_t)v3))
  {
    if (*v4) {
      uint64_t v5 = *v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v9 = v5;
    if ((*(unsigned char *)(v5 + 3) & 0x20) != 0)
    {
      swift::getResilientMetadataBounds(v5);
      int v10 = *(_DWORD *)(v9 + 40) + (v11 >> 3);
    }
    else
    {
      int v10 = *(_DWORD *)(v5 + 40);
    }
    if (v10) {
      unint64_t v12 = &v3[v10];
    }
    else {
      unint64_t v12 = 0;
    }
    return v12[a2];
  }
  else
  {
    uint64_t v6 = class_copyIvarList((Class)v3, 0);
    ptrdiff_t Offset = ivar_getOffset(v6[a2]);
    free(v6);
    return Offset;
  }
}

uint64_t anonymous namespace'::ClassImpl::childMetadata(unint64_t **this, unsigned int a2, const char **a3, void (**a4)(const char *))
{
  uint64_t result = v7[2];
  *a3 = (const char *)v7[0];
  *a4 = 0;
  return result;
}

double anonymous namespace'::ClassImpl::subscript@<D0>(_anonymous_namespace_::ClassImpl *this@<X0>, const char **a2@<X2>, void (**a3)(const char *)@<X3>, uint64_t a4@<X1>, _OWORD *a5@<X8>)
{
  unint64_t v8 = (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *, uint64_t, const char **, void (**)(const char *)))(*(void *)this + 24))(this, a4, a2, a3);
  int v10 = v9;
  uint64_t v11 = **((void **)this + 2);
  unint64_t v12 = (uint64_t *)(v11
                  + (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *, uint64_t))(*(void *)this + 16))(this, a4));
}

uint64_t anonymous namespace'::ClassImpl::recursiveCount(_anonymous_namespace_::ClassImpl *this)
{
  uint64_t v3 = *(void *)(*((void *)this + 1) + 64);
  if (v3) {
    uint64_t v4 = *(void *)(*((void *)this + 1) + 64);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(int *)(v4 + 20);
  if (v5) {
    BOOL v6 = v5 == -20 - v4;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6
    && (v2 = *((void *)this + 1), (uint64_t v7 = *(void *)(v2 + 8)) != 0)
    && (uint64_t v8 = *(void *)(v2 + 8), (*(unsigned char *)(v7 + 32) & 2) != 0))
  {
    if (v3) {
      uint64_t v11 = *(void *)(*((void *)this + 1) + 64);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(int *)(v11 + 20);
    if (!v12 || v12 == -20 - v11) {
    v14[0] = &unk_1ECA07618;
    }
    v14[1] = v8;
    v14[2] = 0;
    return (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *))(*(void *)this + 8))(this) + v13;
  }
  else
  {
    int v9 = *(uint64_t (**)(void))(*(void *)this + 8);
    return v9();
  }
}

uint64_t anonymous namespace'::ClassImpl::recursiveChildOffset(_anonymous_namespace_::ClassImpl *this, uint64_t a2)
{
  uint64_t v5 = *(void *)(*((void *)this + 1) + 64);
  if (v5) {
    uint64_t v6 = *(void *)(*((void *)this + 1) + 64);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(v6 + 20);
  if (v7) {
    BOOL v8 = v7 == -20 - v6;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v4 = *((void *)this + 1);
    uint64_t v9 = *(void *)(v4 + 8);
    if (v9)
    {
      uint64_t v10 = *(void *)(v4 + 8);
      if ((*(unsigned char *)(v9 + 32) & 2) != 0)
      {
        if (v5) {
          uint64_t v11 = *(void *)(*((void *)this + 1) + 64);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = *(int *)(v11 + 20);
        if (!v12 || v12 == -20 - v11) {
        v15[0] = &unk_1ECA07618;
        }
        v15[1] = v10;
        v15[2] = 0;
        if (a2 < v13) {
        a2 -= v13;
        }
      }
    }
  }
  return (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *, uint64_t))(*(void *)this + 16))(this, a2);
}

uint64_t anonymous namespace'::ClassImpl::recursiveChildMetadata(_anonymous_namespace_::ClassImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  uint64_t v9 = *(void *)(*((void *)this + 1) + 64);
  if (v9) {
    uint64_t v10 = *(void *)(*((void *)this + 1) + 64);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(int *)(v10 + 20);
  if (v11) {
    BOOL v12 = v11 == -20 - v10;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v8 = *((void *)this + 1);
    uint64_t v13 = *(void *)(v8 + 8);
    if (v13)
    {
      uint64_t v14 = *(void *)(v8 + 8);
      if ((*(unsigned char *)(v13 + 32) & 2) != 0)
      {
        if (v9) {
          uint64_t v15 = *(void *)(*((void *)this + 1) + 64);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(int *)(v15 + 20);
        if (!v16 || v16 == -20 - v15) {
        v19[0] = &unk_1ECA07618;
        }
        v19[1] = v14;
        void v19[2] = 0;
        if (a2 < v17) {
        a2 -= v17;
        }
      }
    }
  }
  return (*(uint64_t (**)(_anonymous_namespace_::ClassImpl *, uint64_t, const char **, void (**)(const char *)))(*(void *)this + 24))(this, a2, a3, a4);
}

void anonymous namespace'::ClassImpl::~ClassImpl(_anonymous_namespace_::ClassImpl *this)
{
}

uint64_t anonymous namespace'::MetatypeImpl::displayStyle(_anonymous_namespace_::MetatypeImpl *this)
{
  return 0;
}

uint64_t anonymous namespace'::MetatypeImpl::count(_anonymous_namespace_::MetatypeImpl *this)
{
  return 0;
}

void anonymous namespace'::MetatypeImpl::childOffset(_anonymous_namespace_::MetatypeImpl *this)
{
  qword_1E8EBFEB0 = (uint64_t)"Metatypes have no children.";
  __break(1u);
}

void anonymous namespace'::MetatypeImpl::childMetadata(_anonymous_namespace_::MetatypeImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  qword_1E8EBFEB0 = (uint64_t)"Metatypes have no children.";
  __break(1u);
}

void anonymous namespace'::MetatypeImpl::subscript(_anonymous_namespace_::MetatypeImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  qword_1E8EBFEB0 = (uint64_t)"Metatypes have no children.";
  __break(1u);
}

void anonymous namespace'::MetatypeImpl::~MetatypeImpl(_anonymous_namespace_::MetatypeImpl *this)
{
}

uint64_t anonymous namespace'::OpaqueImpl::displayStyle(_anonymous_namespace_::OpaqueImpl *this)
{
  return 0;
}

uint64_t anonymous namespace'::OpaqueImpl::count(_anonymous_namespace_::OpaqueImpl *this)
{
  return 0;
}

void anonymous namespace'::OpaqueImpl::childOffset(_anonymous_namespace_::OpaqueImpl *this)
{
  qword_1E8EBFEB0 = (uint64_t)"Opaque types have no children.";
  __break(1u);
}

void anonymous namespace'::OpaqueImpl::childMetadata(_anonymous_namespace_::OpaqueImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  qword_1E8EBFEB0 = (uint64_t)"Opaque types have no children.";
  __break(1u);
}

void anonymous namespace'::OpaqueImpl::subscript(_anonymous_namespace_::OpaqueImpl *this, uint64_t a2, const char **a3, void (**a4)(const char *))
{
  qword_1E8EBFEB0 = (uint64_t)"Opaque types have no children.";
  __break(1u);
}

void anonymous namespace'::OpaqueImpl::~OpaqueImpl(_anonymous_namespace_::OpaqueImpl *this)
{
}

uint64_t _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv(uint64_t a1, const void *a2)
{
  uint64_t v3 = **(uint64_t ***)a1;
  if (!v3)
  {
    Class Class = swift::_swift_getClass(***(void ***)(a1 + 8), a2);
    if ((*((unsigned char *)Class + 32) & 2) != 0)
    {
      while (!*((void *)Class + 8))
      {
        uint64_t v5 = *((void *)Class + 1);
        if (v5)
        {
          Class Class = (Class)*((void *)Class + 1);
          if ((*(unsigned char *)(v5 + 32) & 2) == 0) {
            break;
          }
        }
        else
        {
          Class Class = 0;
          if ((MEMORY[0x20] & 2) == 0) {
            break;
          }
        }
      }
    }
    **(void **)a1 = Class;
    uint64_t v3 = **(uint64_t ***)a1;
  }
  unint64_t v6 = *v3;
  if ((unint64_t)*v3 > 0x7FF) {
    LODWORD(v6) = 0;
  }
  if (v6 && (v6 != 773 || (uint64_t v3 = (uint64_t *)v3[1]) == 0) || (v3[4] & 2) == 0) {
    _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv_cold_1(v12, a1);
  }
  v12[0] = &unk_1ECA07618;
  uint64_t v7 = *(void *)(a1 + 16);
  v12[1] = **(void **)v7;
  v12[2] = **(void **)(v7 + 8);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v11 = **(void **)(v8 + 8);
  *(unsigned char *)(v11 + 16) = (*(void *)&v10 & 0xFF0000) == 0;
  *(unsigned char *)(v11 + 17) = (v10 & 0xFF00) != 0;
  return result;
}

uint64_t _ZZN12_GLOBAL__N_14callIZ43swift_reflectionMirror_recursiveChildOffsetE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv(uint64_t a1, const void *a2)
{
  uint64_t v3 = **(uint64_t ***)a1;
  if (!v3)
  {
    Class Class = swift::_swift_getClass(***(void ***)(a1 + 8), a2);
    if ((*((unsigned char *)Class + 32) & 2) != 0)
    {
      while (!*((void *)Class + 8))
      {
        uint64_t v5 = *((void *)Class + 1);
        if (v5)
        {
          Class Class = (Class)*((void *)Class + 1);
          if ((*(unsigned char *)(v5 + 32) & 2) == 0) {
            break;
          }
        }
        else
        {
          Class Class = 0;
          if ((MEMORY[0x20] & 2) == 0) {
            break;
          }
        }
      }
    }
    **(void **)a1 = Class;
    uint64_t v3 = **(uint64_t ***)a1;
  }
  unint64_t v6 = *v3;
  if ((unint64_t)*v3 > 0x7FF) {
    LODWORD(v6) = 0;
  }
  if (v6 && (v6 != 773 || (uint64_t v3 = (uint64_t *)v3[1]) == 0) || (v3[4] & 2) == 0) {
    _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv_cold_1(v9, a1);
  }
  v9[0] = &unk_1ECA07618;
  uint64_t v7 = *(void *)(a1 + 16);
  v9[1] = **(void **)v7;
  v9[2] = **(void **)(v7 + 8);
}

double _ZZN12_GLOBAL__N_14callIZ32swift_reflectionMirror_subscriptE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv@<D0>(uint64_t a1@<X0>, const void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = **(uint64_t ***)a1;
  if (!v5)
  {
    Class Class = swift::_swift_getClass(***(void ***)(a1 + 8), a2);
    if ((*((unsigned char *)Class + 32) & 2) != 0)
    {
      while (!*((void *)Class + 8))
      {
        uint64_t v7 = *((void *)Class + 1);
        if (v7)
        {
          Class Class = (Class)*((void *)Class + 1);
          if ((*(unsigned char *)(v7 + 32) & 2) == 0) {
            break;
          }
        }
        else
        {
          Class Class = 0;
          if ((MEMORY[0x20] & 2) == 0) {
            break;
          }
        }
      }
    }
    **(void **)a1 = Class;
    uint64_t v5 = **(uint64_t ***)a1;
  }
  unint64_t v8 = *v5;
  if ((unint64_t)*v5 > 0x7FF) {
    LODWORD(v8) = 0;
  }
  if (v8 && (v8 != 773 || (uint64_t v5 = (uint64_t *)v5[1]) == 0) || (v5[4] & 2) == 0) {
    _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv_cold_1(v22, a1);
  }
  Class v19 = (uint64_t (**)(void **, void))&unk_1ECA07618;
  uint64_t v9 = *(void *)(a1 + 16);
  size_t v20 = **(unint64_t ***)v9;
  uint64_t v21 = **(uint64_t ***)(v9 + 8);
  int v10 = *(uint64_t ***)(v9 + 16);
  uint64_t v11 = **v10;
  BOOL v12 = (void *)*v10[1];
  uint64_t v13 = (void *)*v10[2];
  unint64_t v14 = v22[2];
  int v15 = v23 | (v24 << 16);
  void *v12 = v22[0];
  *uint64_t v13 = 0;
  uint64_t v16 = *v21;
  uint64_t v17 = v19[2]((void **)&v19, v11);
}

uint64_t swift_dtoa_optimal_binary16_p(_WORD *a1, unsigned char *a2, unint64_t a3)
{
  if (!a3) {
    return 0;
  }
  unsigned int v5 = (unsigned __int16)*a1;
  int v6 = (v5 >> 10) & 0x1F;
  if (v6)
  {
    if (v6 == 31)
    {
      if ((v5 & 0x3FF) != 0)
      {
        if (*a1) {
          snprintf(__str, 0x40uLL, "%s%snan(0x%llx)");
        }
        else {
          snprintf(__str, 0x40uLL, "%s%snan");
        }
        size_t v39 = strlen(__str);
        if (v39 < a3)
        {
          size_t v7 = v39;
          memcpy(a2, __str, v39 + 1);
          return v7;
        }
LABEL_76:
        size_t v7 = 0;
        *a2 = 0;
        return v7;
      }
      if ((v5 & 0x8000) == 0)
      {
        if (a3 < 4) {
          goto LABEL_76;
        }
        int v38 = 6712937;
        goto LABEL_57;
      }
      if (a3 < 5) {
        goto LABEL_76;
      }
      a2[4] = 0;
      int v40 = 1718511917;
      goto LABEL_70;
    }
    int v8 = v6 - 14;
    unsigned int v9 = v5 & 0x3FF | 0x400;
  }
  else
  {
    if ((v5 & 0x3FF) == 0)
    {
      if ((v5 & 0x8000) == 0)
      {
        if (a3 < 4) {
          goto LABEL_76;
        }
        int v38 = 3157552;
LABEL_57:
        *(_DWORD *)a2 = v38;
        return 3;
      }
      if (a3 < 5) {
        goto LABEL_76;
      }
      a2[4] = 0;
      int v40 = 808333357;
LABEL_70:
      *(_DWORD *)a2 = v40;
      return 4;
    }
    int v8 = -13;
    unsigned int v9 = v5 & 0x3FF;
  }
  if ((v5 & 0x3FF) != 0) {
    int v10 = -2;
  }
  else {
    int v10 = -1;
  }
  if (a3 <= 3) {
    goto LABEL_76;
  }
  unsigned int v11 = 4 * v9;
  BOOL v12 = a2;
  if ((v5 & 0x8000) != 0)
  {
    *a2 = 45;
    BOOL v12 = a2 + 1;
  }
  int v13 = (4 * (v9 & 0x7FF)) | 2;
  unsigned int v14 = v10 + v11;
  if (v9 <= 0x68D && v8 == -13)
  {
    int v15 = 400000 * v13;
    int v16 = 400000 * v14;
    int v17 = 1600000 * v9;
    BOOL v18 = v9 > 0x10;
    int v19 = 40000000 * v13;
    int v20 = 40000000 * v14;
    int v21 = 160000000 * v9;
    if (v18) {
      int v22 = -5;
    }
    else {
      int v22 = -7;
    }
    if (v18)
    {
      int v19 = v15;
      int v20 = v16;
      unsigned int v23 = v17;
    }
    else
    {
      unsigned int v23 = v21;
    }
    if (v23 >> 28) {
      int v24 = v22;
    }
    else {
      int v24 = v22 - 1;
    }
    if (v23 >> 28) {
      int v25 = v19;
    }
    else {
      int v25 = 10 * v19;
    }
    if (v23 >> 28) {
      int v26 = v20;
    }
    else {
      int v26 = 10 * v20;
    }
    if (v23 >> 28) {
      unsigned int v27 = v23;
    }
    else {
      unsigned int v27 = 10 * v23;
    }
    if (!((v26 ^ v25) >> 28))
    {
      if (v12 > &a2[a3 - 6]) {
        goto LABEL_76;
      }
      unsigned char *v12 = (v27 >> 28) | 0x30;
      long long v28 = v12 + 2;
      v12[1] = 46;
      unsigned int v29 = 5 * (v25 & 0xFFFFFFF);
      unsigned int v30 = 10 * (v26 & 0xFFFFFFF);
      int v31 = (v29 >> 27) & 0xF;
      if (v31 == v30 >> 28)
      {
        int v32 = 2 * v29;
        do
        {
          *v28++ = v31 | 0x30;
          v27 *= 10;
          unsigned int v33 = 5 * (v32 & 0xFFFFFFE);
          int v32 = 10 * (v32 & 0xFFFFFFE);
          unsigned int v30 = 10 * (v30 & 0xFFFFFFE);
          int v31 = (v33 >> 27) & 0xF;
        }
        while (v31 == v30 >> 28);
      }
      unsigned int v27 = 10 * (v27 & 0xFFFFFFF);
      BOOL v12 = v28;
    }
    if (v12 > &a2[a3 - 6]) {
      goto LABEL_76;
    }
    unsigned char *v12 = ((v27 + 0x8000000) >> 28) | 0x30;
    *(_WORD *)(v12 + 1) = 11621;
    *(_WORD *)(v12 + 3) = *(_WORD *)&asciiDigitTable[-2 * v24];
    v12[5] = 0;
    return v12 + 5 - a2;
  }
  else
  {
    int v34 = (unsigned __int16)(v11 - (v11 >> (13 - v8) << (13 - v8)));
    if (v8 <= 12)
    {
      unsigned int v35 = v11 >> (13 - v8);
    }
    else
    {
      int v34 = 0;
      unsigned int v35 = v11 << (v8 - 13);
    }
    uint64_t v36 = &a2[a3];
    if (v35 > 9)
    {
      if (v35 > 0x3E7)
      {
        if (v12 > v36 - 6) {
          goto LABEL_76;
        }
        if (v35 >> 4 >= 0x271)
        {
          *v12++ = v35 / 0x2710 + 48;
          v35 %= 0x2710u;
        }
        *(_WORD *)BOOL v12 = *(_WORD *)&asciiDigitTable[2 * ((unsigned __int16)v35 / 0x64u)];
        *((_WORD *)v12 + 1) = *(_WORD *)&asciiDigitTable[2 * ((unsigned __int16)v35 % 0x64u)];
        char v37 = v12 + 4;
      }
      else
      {
        if (v12 > v36 - 4) {
          goto LABEL_76;
        }
        if (v35 >= 0x64) {
          *v12++ = (unsigned __int16)v35 / 0x64u + 48;
        }
        *(_WORD *)BOOL v12 = *(_WORD *)&asciiDigitTable[2 * ((unsigned __int16)v35 % 0x64u)];
        char v37 = v12 + 2;
      }
    }
    else
    {
      if (v12 > v36 - 3) {
        goto LABEL_76;
      }
      unsigned char *v12 = v35 + 48;
      char v37 = v12 + 1;
    }
    unint64_t v41 = (unint64_t)&a2[a3 - 3];
    if ((unint64_t)v37 > v41) {
      goto LABEL_76;
    }
    unsigned char *v37 = 46;
    uint64_t v43 = v37 + 1;
    if (!v34)
    {
      *(_WORD *)(v37 + 1) = 48;
      return v37 - a2 + 2;
    }
    int v44 = v34 << (v8 + 15);
    unsigned int v45 = 5 * ((v13 << (v8 + 15)) & 0xFFFFFFE);
    int v46 = (v14 << (v8 + 15)) & 0xFFFFFFF;
    int v47 = (v45 >> 27) & 0xF;
    unsigned int v48 = ((5 * v46) >> 27) & 0xF;
    if (v47 == v48)
    {
      int v49 = 2 * v45;
      int v50 = 10 * v46;
      while ((unint64_t)v43 <= v41)
      {
        v44 *= 10;
        *(unsigned char *)uint64_t v43 = v47 | 0x30;
        uint64_t v43 = (_WORD *)((char *)v43 + 1);
        unsigned int v51 = 5 * (v49 & 0xFFFFFFE);
        int v49 = 10 * (v49 & 0xFFFFFFE);
        int v46 = v50 & 0xFFFFFFE;
        int v50 = 10 * (v50 & 0xFFFFFFE);
        int v47 = (v51 >> 27) & 0xF;
        unsigned int v48 = ((5 * v46) >> 27) & 0xF;
        if (v47 != v48) {
          goto LABEL_83;
        }
      }
      goto LABEL_76;
    }
LABEL_83:
    unsigned int v52 = 10 * (v44 & 0xFFFFFFF) + 0x8000000;
    if ((v52 & 0xFFFFFFE) != 0) {
      unsigned int v53 = v52 >> 28;
    }
    else {
      unsigned int v53 = (v52 >> 28) & 0xE;
    }
    if (v46) {
      BOOL v54 = v53 > v48;
    }
    else {
      BOOL v54 = 1;
    }
    if (!v54) {
      LOBYTE(v53) = v53 + 1;
    }
    _WORD *v43 = (v53 + 48);
    return (char *)v43 + 1 - a2;
  }
}

size_t swift_dtoa_optimal_float(char *__dst, unint64_t a2, float a3)
{
  float v4 = a3;
  return swift_dtoa_optimal_binary32_p((unsigned int *)&v4, __dst, a2);
}

size_t swift_dtoa_optimal_binary32_p(unsigned int *a1, char *__dst, unint64_t a3)
{
  if (a3)
  {
    unsigned int v5 = *a1;
    int v6 = *a1 & 0x7FFFFF;
    if ((*a1 >> 23))
    {
      if ((*a1 >> 23) == 255)
      {
        if (v6)
        {
          if ((v5 & 0x1FFFFF) != 0) {
            snprintf(__str, 0x40uLL, "%s%snan(0x%llx)");
          }
          else {
            snprintf(__str, 0x40uLL, "%s%snan");
          }
          size_t v45 = strlen(__str);
          if (v45 < a3)
          {
            size_t v7 = v45;
            memcpy(__dst, __str, v45 + 1);
            return v7;
          }
LABEL_91:
          size_t v7 = 0;
          void *__dst = 0;
          return v7;
        }
        if ((v5 & 0x80000000) == 0)
        {
          if (a3 < 4) {
            goto LABEL_91;
          }
          int v44 = 6712937;
          goto LABEL_52;
        }
        if (a3 < 5) {
          goto LABEL_91;
        }
        __dst[4] = 0;
        int v46 = 1718511917;
        goto LABEL_60;
      }
      int v9 = (v5 >> 23) - 126;
      unsigned int v8 = (v6 << 8) | 0x80000000;
    }
    else
    {
      if (!v6)
      {
        if ((v5 & 0x80000000) == 0)
        {
          if (a3 < 4) {
            goto LABEL_91;
          }
          int v44 = 3157552;
LABEL_52:
          *(_DWORD *)std::string __dst = v44;
          return 3;
        }
        if (a3 < 5) {
          goto LABEL_91;
        }
        __dst[4] = 0;
        int v46 = 808333357;
LABEL_60:
        *(_DWORD *)std::string __dst = v46;
        return 4;
      }
      unsigned int v8 = v6 << 8;
      int v9 = -125;
    }
    unsigned int v10 = v8 + 128;
    if (v6) {
      int v11 = -128;
    }
    else {
      int v11 = -64;
    }
    unsigned int v12 = v8 + v11;
    unint64_t v13 = (unint64_t)(20201781 * v9) >> 26;
    if ((int)v13 <= 0)
    {
      uint64_t v14 = powersOf10_Exact128[(-2 * ((unint64_t)(20201781 * v9) >> 26)) | 1];
      if (-(int)((unint64_t)(20201781 * v9) >> 26) <= 0x1B) {
        unint64_t v15 = powersOf10_Exact128[(-2 * ((unint64_t)(20201781 * v9) >> 26)) | 1];
      }
      else {
        unint64_t v15 = v14 + 1;
      }
    }
    else
    {
      uint64_t v14 = powersOf10_negativeBinary32[(40 - v13)];
      unint64_t v15 = v14 + 1;
    }
    char v16 = 7 - v9 - ((-55732705 * ((unint64_t)(20201781 * v9) >> 26)) >> 24);
    uint64_t v17 = ~(-1 << v16);
    unsigned int v18 = v15;
    unint64_t v19 = v15 * (unint64_t)v10 + 0xFFFFFFFF;
    unint64_t v20 = HIDWORD(v15);
    unint64_t v21 = (v20 * (unint64_t)v10 + v17 + HIDWORD(v19)) >> v16;
    unint64_t v22 = (((v14 * (unint64_t)v12) >> 32) + HIDWORD(v14) * (unint64_t)v12) >> v16;
    unint64_t v23 = (((v14 * (unint64_t)v10) >> 32) + HIDWORD(v14) * (unint64_t)v10) >> v16;
    unint64_t v24 = (v17 + v20 * (unint64_t)v12 + ((v18 * (unint64_t)v12 + 0xFFFFFFFF) >> 32)) >> v16;
    if (v5) {
      unint64_t v25 = v23;
    }
    else {
      unint64_t v25 = v21;
    }
    if (v5) {
      unint64_t v26 = v24;
    }
    else {
      unint64_t v26 = v22;
    }
    unint64_t v27 = v25 - v26;
    if (HIBYTE(v25))
    {
      unint64_t v28 = v25;
    }
    else
    {
      do
      {
        LODWORD(v13) = v13 - 1;
        unint64_t v28 = 10 * v25;
        v27 *= 10;
        BOOL v29 = v25 >= 0x1999999999999ALL;
        v25 *= 10;
      }
      while (!v29);
    }
    unsigned int v30 = &__dst[a3];
    int v31 = &__dst[a3 - 3];
    if (v31 < __dst) {
      goto LABEL_91;
    }
    int v32 = __dst;
    if ((v5 & 0x80000000) != 0)
    {
      void *__dst = 45;
      int v32 = __dst + 1;
    }
    *(_WORD *)int v32 = *(_WORD *)&asciiDigitTable[(v28 >> 55) & 0x1FE];
    unint64_t v33 = (unint64_t)(v32 + 2);
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v35 = 10 * v27;
    uint64_t v36 = 10 * v34;
    unint64_t v37 = (10 * v34) & 0xFFFFFFFFFFFFFELL;
    if (10 * v27 < v37)
    {
      while (v33 <= (unint64_t)v31)
      {
        unint64_t v38 = 100 * v27;
        *(_WORD *)unint64_t v33 = *(_WORD *)&asciiDigitTable[((100 * v34) >> 55) & 0xFE];
        v33 += 2;
        unint64_t v34 = (100 * v34) & 0xFFFFFFFFFFFFFCLL;
        unint64_t v35 = 1000 * v27;
        uint64_t v36 = 10 * v34;
        unint64_t v37 = (10 * v34) & 0xFFFFFFFFFFFFF8;
        v27 *= 100;
        if (v35 >= v37)
        {
          size_t v39 = (char *)(v33 - 2);
          unint64_t v27 = v38;
          if (v38 < v34) {
            goto LABEL_39;
          }
          goto LABEL_37;
        }
      }
      goto LABEL_91;
    }
    size_t v39 = v32;
    if (v27 >= v34)
    {
LABEL_37:
      unint64_t v37 = v34;
      unint64_t v35 = v27;
    }
    else
    {
LABEL_39:
      if (v33 > (unint64_t)(v30 - 2)) {
        goto LABEL_91;
      }
      *(unsigned char *)unint64_t v33 = HIBYTE(v36) | 0x30;
      unint64_t v33 = (unint64_t)(v39 + 3);
    }
    if (v35 > (v37 | 0x100000000000000))
    {
      unint64_t v40 = v35 >> 1;
      unint64_t v41 = v35 - v35 / 3;
      if (!v6) {
        unint64_t v40 = v41;
      }
      unint64_t v42 = v40 - v37;
      if (((v42 + 0x800000) & 0xFFFFFFFF000000) == 0x80000000000000) {
        char v43 = (*(unsigned char *)(v33 - 1) - HIBYTE(v42)) & 0xFE;
      }
      else {
        char v43 = *(unsigned char *)(v33 - 1) - ((v42 + 0x80000000000000) >> 56);
      }
      *(unsigned char *)(v33 - 1) = v43;
    }
    BOOL v47 = v9 == 25;
    if (!v6) {
      BOOL v47 = 0;
    }
    size_t v48 = v33 - (void)v32 - 1;
    if (v9 > 25 || v47 || (int)v13 <= -5)
    {
      *int v32 = v32[1];
      if ((int)v48 < 2) {
        --v33;
      }
      else {
        v32[1] = 46;
      }
      if (v33 > (unint64_t)(v30 - 5)) {
        goto LABEL_91;
      }
      *(unsigned char *)unint64_t v33 = 101;
      if ((v13 & 0x80000000) == 0) {
        char v51 = 43;
      }
      else {
        char v51 = 45;
      }
      if ((v13 & 0x80000000) == 0) {
        unsigned int v52 = v13;
      }
      else {
        unsigned int v52 = -(int)v13;
      }
      *(unsigned char *)(v33 + 1) = v51;
      unint64_t v53 = v33 + 2;
      if (v52 < 0x64)
      {
        BOOL v54 = (__int16 *)(v33 + 2);
      }
      else
      {
        if (v52 < 0x3E8)
        {
          if (v53 > (unint64_t)(v30 - 4)) {
            goto LABEL_91;
          }
          *(unsigned char *)(v33 + 2) = (unsigned __int16)v52 / 0x64u + 48;
          BOOL v54 = (__int16 *)(v33 + 3);
        }
        else
        {
          if (v53 > (unint64_t)(v30 - 5)) {
            goto LABEL_91;
          }
          *(_WORD *)(v33 + 2) = *(_WORD *)&asciiDigitTable[(v52 / 0x32uLL) & 0x7FFFFFE];
          BOOL v54 = (__int16 *)(v33 + 4);
        }
        v52 %= 0x64u;
      }
      __int16 v55 = *(_WORD *)&asciiDigitTable[2 * v52];
    }
    else
    {
      if ((v13 & 0x80000000) != 0)
      {
        if ((unint64_t)&v30[(int)v13 - 1] < v33) {
          goto LABEL_91;
        }
        memmove(&v32[-(int)v13], v32, v33 - (void)v32);
        memset(v32, 48, -(int)v13);
        v32[1] = 46;
        v33 += -(int)v13;
LABEL_97:
        *(unsigned char *)unint64_t v33 = 0;
        return (int)v33 - (int)__dst;
      }
      uint64_t v49 = v13 + 1;
      int v50 = v49 - v48;
      if ((int)v49 < (int)v48)
      {
        memmove(v32, v32 + 1, v13 + 1);
        v32[v49] = 46;
        goto LABEL_97;
      }
      if (v33 + v13 - (int)v48 > (unint64_t)v31) {
        goto LABEL_91;
      }
      memmove(v32, v32 + 1, v48);
      memset((void *)(v33 - 1), 48, v50);
      BOOL v54 = (__int16 *)(v33 - 1 + v50);
      __int16 v55 = 12334;
    }
    __int16 *v54 = v55;
    unint64_t v33 = (unint64_t)(v54 + 1);
    goto LABEL_97;
  }
  return 0;
}

size_t swift_dtoa_optimal_binary64_p(uint64_t *a1, char *__dst, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = ((unint64_t)*a1 >> 52) & 0x7FF;
    uint64_t v7 = *a1 & 0xFFFFFFFFFFFFFLL;
    if (v6)
    {
      if (v6 == 2047)
      {
        if (v7)
        {
          if ((v5 & 0x3FFFFFFFFFFFFLL) != 0) {
            snprintf(__str, 0x40uLL, "%s%snan(0x%llx)");
          }
          else {
            snprintf(__str, 0x40uLL, "%s%snan");
          }
          size_t v94 = strlen(__str);
          if (v94 < a3)
          {
            size_t v8 = v94;
            memcpy(__dst, __str, v94 + 1);
            return v8;
          }
LABEL_163:
          size_t v8 = 0;
          void *__dst = 0;
          return v8;
        }
        if ((v5 & 0x8000000000000000) == 0)
        {
          if (a3 < 4) {
            goto LABEL_163;
          }
          int v25 = 6712937;
          goto LABEL_27;
        }
        if (a3 < 5) {
          goto LABEL_163;
        }
        __dst[4] = 0;
        int v95 = 1718511917;
        goto LABEL_126;
      }
      int v10 = v6 - 1022;
      unint64_t v9 = (v7 << 11) | 0x8000000000000000;
    }
    else
    {
      if (!v7)
      {
        if ((v5 & 0x8000000000000000) == 0)
        {
          if (a3 < 4) {
            goto LABEL_163;
          }
          int v25 = 3157552;
LABEL_27:
          *(_DWORD *)std::string __dst = v25;
          return 3;
        }
        if (a3 < 5) {
          goto LABEL_163;
        }
        __dst[4] = 0;
        int v95 = 808333357;
LABEL_126:
        *(_DWORD *)std::string __dst = v95;
        return 4;
      }
      unint64_t v9 = v7 << 11;
      int v10 = -1021;
    }
    if (v7) {
      uint64_t v11 = -1024;
    }
    else {
      uint64_t v11 = -512;
    }
    unint64_t v12 = (unint64_t)(20201781 * v10) >> 26;
    int v13 = 6 - v12;
    if ((6 - v12) > 0x37)
    {
      unsigned int v18 = (406 - (int)v12) / 0x1Cu;
      unint64_t v15 = powersOf10_Binary64[2 * v18];
      unint64_t v14 = powersOf10_Binary64[2 * v18 + 1];
      signed int v19 = (406 - (int)v12) % 0x1Cu;
      int v13 = ((unint64_t)(55732705 * (v13 - v19)) >> 24) + 1;
      if (v19)
      {
        unint64_t v20 = powersOf10_Exact128[2 * v19 + 1];
        v13 += ((unint64_t)(55732705 * v19) >> 24) + 1;
        unint64_t v21 = (v20 * (unsigned __int128)v14) >> 64;
        uint64_t v22 = v20 * v14;
        uint64_t v23 = (v20 * (unsigned __int128)v15) >> 64;
        BOOL v24 = __CFADD__(v23, v22);
        unint64_t v15 = v23 + v22;
        if (v24) {
          unint64_t v14 = v21 + 1;
        }
        else {
          unint64_t v14 = v21;
        }
        BOOL v24 = __CFADD__(v15, 2);
        unint64_t v16 = v15 + 2;
      }
      else
      {
        BOOL v24 = __CFADD__(v15, 1);
        unint64_t v16 = v15 + 1;
      }
      if (v24) {
        unint64_t v17 = v14 + 1;
      }
      else {
        unint64_t v17 = v14;
      }
    }
    else
    {
      unint64_t v14 = powersOf10_Exact128[(2 * v13) | 1u];
      unint64_t v15 = powersOf10_Exact128[2 * v13];
      LOBYTE(v13) = ((55732705 * v13) >> 24) + 1;
      unint64_t v16 = v15;
      unint64_t v17 = v14;
    }
    unint64_t v26 = v9 + 1024;
    unint64_t v27 = v9 + v11;
    char v28 = v13 + v10;
    if (v5)
    {
      unint64_t v49 = (v14 * (unsigned __int128)v26) >> 64;
      unint64_t v50 = v14 * v26;
      uint64_t v51 = (v15 * (unsigned __int128)v26) >> 64;
      BOOL v24 = __CFADD__(v51, v50);
      unint64_t v52 = v51 + v50;
      if (v24) {
        unint64_t v53 = v49 + 1;
      }
      else {
        unint64_t v53 = v49;
      }
      char v54 = 32 - v28;
      uint64_t v55 = ((2 * v53) << ~v54) | (v52 >> v54);
      unint64_t v56 = v53 >> v54;
      unint64_t v57 = (v17 * (unsigned __int128)v27) >> 64;
      unint64_t v58 = v17 * v27;
      if (v16 * v27) {
        uint64_t v59 = ((v16 * (unsigned __int128)v27) >> 64) + 1;
      }
      else {
        uint64_t v59 = (v16 * (unsigned __int128)v27) >> 64;
      }
      BOOL v24 = __CFADD__(v59, v58);
      uint64_t v60 = v59 + v58;
      if (v24) {
        ++v57;
      }
      uint64_t v61 = ~(-1 << v54);
      BOOL v24 = __CFADD__(v60, v61);
      unint64_t v62 = v60 + v61;
      if (v24) {
        ++v57;
      }
      BOOL v63 = (v54 & 0x40) == 0;
      if ((v54 & 0x40) != 0) {
        uint64_t v43 = v56;
      }
      else {
        uint64_t v43 = v55;
      }
      if ((v54 & 0x40) != 0) {
        unint64_t v44 = 0;
      }
      else {
        unint64_t v44 = v56;
      }
      uint64_t v64 = v57 >> v54;
      uint64_t v47 = ((2 * v57) << ~v54) | (v62 >> v54);
      if (v63)
      {
        unint64_t v48 = v64;
      }
      else
      {
        uint64_t v47 = v64;
        unint64_t v48 = 0;
      }
    }
    else
    {
      unint64_t v29 = (v17 * (unsigned __int128)v26) >> 64;
      unint64_t v30 = v17 * v26;
      if (v16 * v26) {
        uint64_t v31 = ((v16 * (unsigned __int128)v26) >> 64) + 1;
      }
      else {
        uint64_t v31 = (v16 * (unsigned __int128)v26) >> 64;
      }
      BOOL v24 = __CFADD__(v31, v30);
      uint64_t v32 = v31 + v30;
      if (v24) {
        ++v29;
      }
      char v33 = 32 - v28;
      uint64_t v34 = ~(-1 << v33);
      BOOL v24 = __CFADD__(v32, v34);
      unint64_t v35 = v32 + v34;
      if (v24) {
        ++v29;
      }
      unint64_t v36 = v29 >> v33;
      uint64_t v37 = ((2 * v29) << ~v33) | (v35 >> v33);
      unint64_t v38 = (v14 * (unsigned __int128)v27) >> 64;
      unint64_t v39 = v14 * v27;
      uint64_t v40 = (v15 * (unsigned __int128)v27) >> 64;
      BOOL v24 = __CFADD__(v40, v39);
      unint64_t v41 = v40 + v39;
      if (v24) {
        ++v38;
      }
      BOOL v42 = (v33 & 0x40) == 0;
      if ((v33 & 0x40) != 0) {
        uint64_t v43 = v36;
      }
      else {
        uint64_t v43 = v37;
      }
      if ((v33 & 0x40) != 0) {
        unint64_t v44 = 0;
      }
      else {
        unint64_t v44 = v36;
      }
      uint64_t v45 = ((2 * v38) << ~v33) | (v41 >> v33);
      unint64_t v46 = v38 >> v33;
      if ((v33 & 0x40) != 0) {
        uint64_t v47 = v38 >> v33;
      }
      else {
        uint64_t v47 = v45;
      }
      if (v42) {
        unint64_t v48 = v46;
      }
      else {
        unint64_t v48 = 0;
      }
    }
    if (v44 > 0xF423FFFFFFFFFLL)
    {
      unint64_t v65 = v44;
    }
    else
    {
      do
      {
        LODWORD(v12) = v12 - 1;
        unint64_t v48 = (__PAIR128__(v48, v47) * 0xA) >> 64;
        v47 *= 10;
        unint64_t v65 = (__PAIR128__(v44, v43) * 0xA) >> 64;
        v43 *= 10;
        unint64_t v66 = v44 >> 37;
        unint64_t v44 = v65;
      }
      while (v66 < 0xC35);
    }
    unint64_t v68 = (__PAIR128__(v65, v43) - __PAIR128__(v48, v47)) >> 64;
    uint64_t v67 = v43 - v47;
    char v69 = __dst;
    if (v5 < 0)
    {
      if ((uint64_t)a3 <= 0) {
        goto LABEL_163;
      }
      void *__dst = 45;
      char v69 = __dst + 1;
    }
    unint64_t v70 = HIDWORD(v65);
    unint64_t v71 = v65;
    if (__PAIR128__(v68, v67) >= __PAIR128__(v65, v43))
    {
      if (v47) {
        unint64_t v81 = v48 + 1;
      }
      else {
        unint64_t v81 = v48;
      }
      unint64_t v82 = (v65 + 2 * v81) / 3;
      if (v7) {
        unint64_t v82 = (v81 + v65) >> 1;
      }
      unint64_t v83 = HIDWORD(v81);
      if (v81) {
        LODWORD(v83) = HIDWORD(v81) + 1;
      }
      unint64_t v84 = HIDWORD(v82);
      int v85 = (v43 | v71) == 0;
      unsigned int v86 = (5 * v82) >> 31;
      for (uint64_t i = 9; ; --i)
      {
        unsigned int v88 = v86 % 0xA;
        unsigned int v86 = v84;
        if (v70 < 0xA) {
          break;
        }
        LODWORD(v83) = ((int)v83 + 9) / 0xAu;
        LODWORD(v70) = v70 / 0xA;
        if (v70 < v83) {
          break;
        }
        int v85 = v85 & (v88 == 0);
        LODWORD(v84) = v84 / 0xA;
      }
      if (v88 > 5 || (v88 == 5 ? (BOOL v89 = v85 == 0) : (BOOL v89 = 0), v89))
      {
        unsigned int v86 = v84 + 1;
      }
      else if (v88 == 5 && v85 != 0)
      {
        unsigned int v86 = (v84 + 1) & 0xFFFFFFFE;
      }
      if (v69 > &__dst[a3 - i]) {
        goto LABEL_163;
      }
      unsigned int v91 = i - 1;
      if ((int)i - 1 > 1)
      {
        unsigned int v92 = i + 1;
        do
        {
          unsigned int v93 = v86;
          v86 /= 0x64u;
          *(_WORD *)&v69[v92 - 4] = *(_WORD *)&asciiDigitTable[2 * (v93 - 100 * v86)];
          v92 -= 2;
        }
        while (v92 > 3);
        unsigned int v91 = v92 - 2;
      }
      if (v91 == 1) {
        *char v69 = v86 + 48;
      }
      uint64_t v73 = &v69[i - 1];
    }
    else
    {
      char v72 = &__dst[a3 - 9];
      if (v69 > v72) {
        goto LABEL_163;
      }
      *((_WORD *)v69 + 3) = *(_WORD *)&asciiDigitTable[2 * (v70 % 0x2710 % 0x64)];
      *((_WORD *)v69 + 2) = *(_WORD *)&asciiDigitTable[2 * (v70 % 0x2710 / 0x64)];
      *((_WORD *)v69 + 1) = *(_WORD *)&asciiDigitTable[2
                                                     * (v70 / 0x2710
                                                                    - 100
                                                                    * ((42949673
                                                                      * (unint64_t)(v70 / 0x2710)) >> 32))];
      *(_WORD *)char v69 = *(_WORD *)&asciiDigitTable[(v70 / 0x7A120uLL) & 0x3FFE];
      uint64_t v73 = v69 + 8;
      unint64_t v74 = (__PAIR128__(v68, v67) * 0x5F5E100) >> 64;
      uint64_t v75 = (__PAIR128__(v71, v43) * 0x5F5E100) >> 64;
      if (__PAIR128__(v68, v67) * 0x5F5E100 < __PAIR128__(v75, 100000000 * v43))
      {
        if (v73 > v72) {
          goto LABEL_163;
        }
        unsigned __int16 v76 = HIDWORD(v75) % 0x2710;
        *((_WORD *)v69 + 7) = *(_WORD *)&asciiDigitTable[2 * (v76 % 0x64u)];
        *((_WORD *)v69 + 6) = *(_WORD *)&asciiDigitTable[2 * (v76 / 0x64u)];
        *((_WORD *)v69 + 5) = *(_WORD *)&asciiDigitTable[2 * ((unsigned __int16)(HIDWORD(v75) / 0x2710) % 0x64u)];
        uint64_t v73 = v69 + 16;
        *((_WORD *)v69 + 4) = *(_WORD *)&asciiDigitTable[2 * (HIDWORD(v75) / 0xF4240)];
        v43 *= 100000000;
        unint64_t v71 = v75;
        v67 *= 100000000;
        unint64_t v68 = v74;
      }
      if (__PAIR128__(v68, v67) < __PAIR128__(v71, v43))
      {
        while (v73 <= &__dst[a3 - 2])
        {
          unint64_t v68 = (__PAIR128__(v68, v67) * 0xA) >> 64;
          v67 *= 10;
          unint64_t v71 = (__PAIR128__(v71, v43) * 0xA) >> 64;
          v43 *= 10;
          unint64_t v77 = HIDWORD(v71);
          unint64_t v71 = v71;
          *v73++ = v77 + 48;
          if (__PAIR128__(v68, v67) >= __PAIR128__(v71, v43))
          {
            *((void *)&v79 + 1) = v68;
            *(void *)&long long v79 = v67;
            unint64_t v78 = v79 >> 36;
            *((void *)&v79 + 1) = v71;
            *(void *)&long long v79 = v43;
            uint64_t v80 = v79 >> 36;
            goto LABEL_128;
          }
        }
        goto LABEL_163;
      }
      *((void *)&v96 + 1) = v71;
      *(void *)&long long v96 = v43;
      uint64_t v80 = v96 >> 36;
      *((void *)&v96 + 1) = v68;
      *(void *)&long long v96 = v67;
      unint64_t v78 = v96 >> 36;
LABEL_128:
      if (v80 + 0x1000000000000000 <= v78)
      {
        unint64_t v97 = v78 >> 1;
        unint64_t v98 = v78 - v78 / 3;
        if (!v7) {
          unint64_t v97 = v98;
        }
        unint64_t v99 = v97 - v80;
        if ((v99 & 0xFFFFFFFFFFFFFFFLL) == 0x800000000000000) {
          char v100 = (*(v73 - 1) - (v99 >> 60)) & 0xFE;
        }
        else {
          char v100 = *(v73 - 1) - ((v99 + 0x800000000000000) >> 60);
        }
        *(v73 - 1) = v100;
      }
    }
    BOOL v101 = v10 == 54;
    if (!v7) {
      BOOL v101 = 0;
    }
    size_t v102 = v73 - v69 - 1;
    if (v10 > 54 || v101 || (int)v12 <= -5)
    {
      *char v69 = v69[1];
      if ((int)v102 < 2) {
        --v73;
      }
      else {
        v69[1] = 46;
      }
      long long v105 = &__dst[a3 - 5];
      if (v73 > v105) {
        goto LABEL_163;
      }
      char *v73 = 101;
      if ((v12 & 0x80000000) == 0) {
        char v106 = 43;
      }
      else {
        char v106 = 45;
      }
      if ((v12 & 0x80000000) == 0) {
        unsigned int v107 = v12;
      }
      else {
        unsigned int v107 = -(int)v12;
      }
      v73[1] = v106;
      unint64_t v108 = (unint64_t)(v73 + 2);
      if (v107 < 0x64)
      {
        unsigned int v109 = (__int16 *)(v73 + 2);
      }
      else
      {
        if (v107 < 0x3E8)
        {
          if (v108 > (unint64_t)&__dst[a3 - 4]) {
            goto LABEL_163;
          }
          v73[2] = (unsigned __int16)v107 / 0x64u + 48;
          unsigned int v109 = (__int16 *)(v73 + 3);
        }
        else
        {
          if (v108 > (unint64_t)v105) {
            goto LABEL_163;
          }
          *((_WORD *)v73 + 1) = *(_WORD *)&asciiDigitTable[(v107 / 0x32uLL) & 0x7FFFFFE];
          unsigned int v109 = (__int16 *)(v73 + 4);
        }
        v107 %= 0x64u;
      }
      __int16 v110 = *(_WORD *)&asciiDigitTable[2 * v107];
    }
    else
    {
      if ((v12 & 0x80000000) != 0)
      {
        if (&__dst[a3 - 1 + (int)v12] < v73) {
          goto LABEL_163;
        }
        memmove(&v69[-(int)v12], v69, v73 - v69);
        memset(v69, 48, -(int)v12);
        v69[1] = 46;
        v73 += -(int)v12;
LABEL_169:
        char *v73 = 0;
        return (int)v73 - (int)__dst;
      }
      uint64_t v103 = v12 + 1;
      int v104 = v103 - v102;
      if ((int)v103 < (int)v102)
      {
        memmove(v69, v69 + 1, v12 + 1);
        v69[v103] = 46;
        goto LABEL_169;
      }
      if (&v73[v12 - (int)v102] > &__dst[a3 - 3]) {
        goto LABEL_163;
      }
      memmove(v69, v69 + 1, v102);
      memset(v73 - 1, 48, v104);
      unsigned int v109 = (__int16 *)&v73[v104 - 1];
      __int16 v110 = 12334;
    }
    *unsigned int v109 = v110;
    uint64_t v73 = (char *)(v109 + 1);
    goto LABEL_169;
  }
  return 0;
}

size_t swift_dtoa_optimal_double(char *__dst, unint64_t a2, double a3)
{
  double v4 = a3;
  return swift_dtoa_optimal_binary64_p((uint64_t *)&v4, __dst, a2);
}

void *swift::runtime::SwiftTLSContext::get(swift::runtime::SwiftTLSContext *this)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t result = *(void **)(StatusReg + 800);
  if (!result)
  {
    uint64_t v4 = 100;
    context[0] = &v4;
    context[1] = swift::runtime::SwiftTLSContext::get(void)::$_0::__invoke;
    if (swift::runtime::SwiftTLSContext::get(void)::token != -1) {
      dispatch_once_f(&swift::runtime::SwiftTLSContext::get(void)::token, context, (dispatch_function_t)swift::tls_init_once(long &,unsigned long,void (*)(void *))::{lambda(void *)#1}::__invoke);
    }
    uint64_t result = swift_slowAlloc(0x10uLL, 7uLL);
    void *result = 0;
    result[1] = 0;
    *(void *)(StatusReg + 800) = result;
  }
  return result;
}

uint64_t swift::tls_init_once(long &,unsigned long,void (*)(void *))::{lambda(void *)#1}::__invoke()
{
  uint64_t result = pthread_key_init_np();
  if (result) {
    swift::threading::fatal((swift::threading *)"tls_init_once() failed to set destructor", v1, v2, v3);
  }
  return result;
}

void swift::runtime::SwiftTLSContext::get(void)::$_0::__invoke(void *a1)
{
  if (a1) {
    swift_slowDealloc(a1);
  }
}

void swift::threading::fatal(swift::threading *this, const char *a2, uint64_t a3, char *a4, ...)
{
  va_start(va, a4);
  swift::fatalErrorv(0, (char *)this, va, a4);
}

os_log_t swift::runtime::trace::setupLogs(swift::runtime::trace *this, void *a2)
{
  uint64_t v2 = (const char *)*MEMORY[0x1E4F143B0];
  if (!*MEMORY[0x1E4F143B0]
    || (os_log_t result = (os_log_t)strcmp((const char *)*MEMORY[0x1E4F143B0], "logd"), result)
    && (os_log_t result = (os_log_t)strcmp(v2, "diagnosticd"), result)
    && (os_log_t result = (os_log_t)strcmp(v2, "notifyd"), result)
    && (os_log_t result = (os_log_t)strcmp(v2, "xpcproxy"), result)
    && (os_log_t result = (os_log_t)strcmp(v2, "logd_helper"), result))
  {
    swift::runtime::trace::TracingEnabled = 1;
    os_log_t result = os_log_create("com.apple.swift", "SectionScan");
    swift::runtime::trace::ScanLog = (uint64_t)result;
  }
  else
  {
    swift::runtime::trace::TracingEnabled = 0;
  }
  return result;
}

void swift::addImageAccessibleFunctionsBlockCallbackUnsafe(swift *this, unint64_t a2, char *a3)
{
  if (a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = &a3[a2];
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  unint64_t v22 = v3;
  uint64_t v23 = v4;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1E8ECFAD0);
  uint64_t v5 = qword_1E8ECFAC8;
  if (qword_1E8ECFAC8) {
    unint64_t v6 = *(void *)qword_1E8ECFAC8;
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v7 = (unint64_t *)qword_1E8ECFAC8;
  if (v6 >= qword_1E8ECFAB8)
  {
    if (2 * v6 <= 0x10) {
      unint64_t v8 = 16;
    }
    else {
      unint64_t v8 = 2 * v6;
    }
    unint64_t v9 = (unint64_t *)malloc_type_malloc((32 * (v8 >> 1)) | 8, 0x603479EuLL);
    if (!v9) {
      swift::hashable_support::findHashableBaseTypeOfHashableType();
    }
    uint64_t v7 = v9;
    *unint64_t v9 = 0;
    if (v5)
    {
      if (v6)
      {
        int v10 = v9 + 1;
        uint64_t v11 = (void *)(v5 + 8);
        unint64_t v12 = v9 + 2;
        uint64_t v13 = v5 + 16;
        unint64_t v14 = v6;
        do
        {
          *int v10 = *v11;
          v12 += 2;
          v10[1] = v11[1];
          v13 += 16;
          v11 += 2;
          v10 += 2;
          --v14;
        }
        while (v14);
      }
      atomic_store(v6, v9);
      unint64_t v15 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
      *unint64_t v15 = qword_1E8ECFAD8;
      v15[1] = v5;
      qword_1E8ECFAD8 = (uint64_t)v15;
    }
    qword_1E8ECFAB8 = v8;
    atomic_store((unint64_t)v7, (unint64_t *)&qword_1E8ECFAC8);
  }
  unint64_t v16 = &v7[2 * v6 + 1];
  *unint64_t v16 = v22;
  v16[1] = (unint64_t)v23;
  atomic_store(v6 + 1, v7);
  __dmb(0xBu);
  if (!qword_1E8ECFAC0)
  {
    unint64_t v17 = (void *)qword_1E8ECFAD8;
    if (qword_1E8ECFAD8)
    {
      do
      {
        signed int v19 = (void *)*v17;
        unsigned int v18 = (unint64_t *)v17[1];
        unint64_t v20 = -1;
        do
        {
          unint64_t v21 = atomic_load(v18);
          ++v20;
        }
        while (v20 < v21);
        free(v18);
        free(v17);
        unint64_t v17 = v19;
      }
      while (v19);
    }
    qword_1E8ECFAD8 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E8ECFAD0);
}

uint64_t swift::Lazy<anonymous namespace'::AccessibleFunctionsState>::defaultInitCallback(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return swift::initializeAccessibleFunctionsLookup((swift *)a1);
}

int *swift_findAccessibleFunction(const void *a1, size_t a2)
{
  if (qword_1E8ECFAE0 != -1) {
  unsigned int v88 = a1;
  }
  size_t v89 = a2;
  do
  {
    unint64_t explicit = atomic_load_explicit(&qword_1E8ECFA98, memory_order_acquire);
    unint64_t v5 = atomic_load_explicit(&qword_1E8ECFAA0, memory_order_acquire);
    unint64_t v6 = atomic_load_explicit(&dword_1E8ECFA94, memory_order_acquire);
  }
  while (explicit != atomic_load_explicit(&qword_1E8ECFA98, memory_order_acquire));
  if (explicit) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && v6 != 0)
  {
    if (v9)
    {
      if (*(void *)(v9 + 16)) {
        int v10 = *(int **)(v9 + 16);
      }
      else {
        int v10 = 0;
      }
      return v10;
    }
  }
  uint64_t v11 = v88;
  size_t v12 = v89;
  if (!_os_trace_lazy_init_completed_4swift()) {
    goto LABEL_22;
  }
  if (swift::runtime::trace::LogsToken != -1) {
    dispatch_once_f(&swift::runtime::trace::LogsToken, 0, (dispatch_function_t)swift::runtime::trace::setupLogs);
  }
  if (swift::runtime::trace::TracingEnabled)
  {
    os_signpost_id_t v14 = os_signpost_id_generate((os_log_t)swift::runtime::trace::ScanLog);
    if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v15 = swift::runtime::trace::ScanLog;
      if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
      {
        *(_DWORD *)buf = 68157954;
        *(_DWORD *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[8] = 2080;
        *(void *)&buf[10] = v11;
        _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v15, OS_SIGNPOST_INTERVAL_BEGIN, v14, "section_scan", "accessible function scan for '%.*s'", buf, 0x12u);
      }
    }
  }
  else
  {
LABEL_22:
    os_signpost_id_t v14 = 0;
  }
  atomic_fetch_add_explicit(&qword_1E8ECFAC0, 1uLL, memory_order_acquire);
  uint64_t v16 = qword_1E8ECFAC8;
  if (!qword_1E8ECFAC8
    || (unint64_t v17 = atomic_load_explicit((atomic_ullong *volatile)qword_1E8ECFAC8, memory_order_acquire)) == 0)
  {
LABEL_46:
    atomic_fetch_add_explicit(&qword_1E8ECFAC0, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
    if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v30 = swift::runtime::trace::ScanLog;
      if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = 0;
        _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v30, OS_SIGNPOST_INTERVAL_END, v14, "section_scan", "result=%p", buf, 0xCu);
      }
    }
    return 0;
  }
  unsigned int v18 = (void *)(v16 + 8);
  uint64_t v19 = v16 + 8 + 16 * v17;
  while (1)
  {
    int v10 = *v18 ? (int *)*v18 : 0;
    unint64_t v20 = (int *)v18[1];
    if (!v20) {
      break;
    }
    unint64_t v21 = (int *)v18[1];
    if (v10 != v20) {
      goto LABEL_34;
    }
LABEL_26:
    v18 += 2;
    if (v18 == (void *)v19) {
      goto LABEL_46;
    }
  }
  unint64_t v21 = 0;
  if (!v10) {
    goto LABEL_26;
  }
LABEL_34:
  unint64_t v22 = v10;
  while (1)
  {
    SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((unsigned char *)v22 + *v10, v13);
    if (v13 == (const char *)v12 && (!v12 || !memcmp(SymbolicMangledNameStringRef, v11, v12))) {
      break;
    }
    v10 += 5;
    v22 += 5;
    if (v10 == v21) {
      goto LABEL_26;
    }
  }
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    BOOL v24 = swift::runtime::trace::ScanLog;
    if (os_signpost_enabled((os_log_t)swift::runtime::trace::ScanLog))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v22;
      _os_signpost_emit_with_name_impl(&swift_runtimeSupportsNoncopyableTypes, v24, OS_SIGNPOST_INTERVAL_END, v14, "section_scan", "result=%p", buf, 0xCu);
    }
  }
  atomic_fetch_add_explicit(&qword_1E8ECFAC0, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
  int v25 = v88;
  size_t v26 = v89;
  *(void *)buf = v88;
  *(void *)&buf[8] = v89;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1E8ECFAA8);
  uint64_t v27 = qword_1E8ECFAA0;
  uint64_t v83 = qword_1E8ECFAA0 & 3;
  BOOL v28 = v83 == 0;
  if ((qword_1E8ECFAA0 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    BOOL v28 = 1;
  }
  BOOL v79 = v28;
  unint64_t v80 = qword_1E8ECFAA0 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v81 = v25;
  if (v28) {
    int v29 = 4;
  }
  else {
    int v29 = *(unsigned __int8 *)(qword_1E8ECFAA0 & 0xFFFFFFFFFFFFFFFCLL);
  }
  unint64_t v31 = dword_1E8ECFA94;
  uint64_t v32 = (_DWORD *)qword_1E8ECFA98;
  uint64_t v33 = qword_1E8ECFA98 + 8;
  if (qword_1E8ECFA98) {
    uint64_t v34 = qword_1E8ECFA98 + 8;
  }
  else {
    uint64_t v34 = 0;
  }
  {
    __dmb(0xBu);
    {
      unint64_t v36 = (void **)qword_1E8ECFAB0;
      if (qword_1E8ECFAB0)
      {
        do
        {
          uint64_t v37 = (void **)*v36;
          free(v36[1]);
          free(v36);
          unint64_t v36 = v37;
        }
        while (v37);
      }
      goto LABEL_133;
    }
  }
  else
  {
    uint64_t v85 = v34;
    unint64_t v82 = v27;
    size_t size = v26;
    unint64_t v78 = v32;
    unint64_t v38 = v31;
    uint64_t v76 = (v31 + 1);
    if ((1 << v29) / (unint64_t)((1 << v29) - v76) < 4)
    {
      unint64_t v44 = v27;
    }
    else
    {
      unint64_t v75 = v31;
      unsigned int v39 = (v29 + 1);
      char v87 = v29;
      if (v39 >= 0x11) {
        unsigned int v40 = 4;
      }
      else {
        unsigned int v40 = 2;
      }
      if (v39 < 9) {
        size_t v41 = 1;
      }
      else {
        size_t v41 = v40;
      }
      unint64_t v42 = (unint64_t)malloc_type_calloc(2 << v29, v41, 0x4269077AuLL);
      if (!v42) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      uint64_t v43 = v34;
      if (v41 != 1)
      {
        if (v41 == 4) {
          size_t v41 = 3;
        }
        else {
          size_t v41 = 2;
        }
      }
      unint64_t v44 = v41 | v42;
      *(unsigned char *)unint64_t v42 = v29 + 1;
      if (v29)
      {
        uint64_t v45 = ~(-2 << v29);
        uint64_t v86 = v27 & 3;
        unint64_t v46 = v80;
        if (!v83) {
          unint64_t v46 = 0;
        }
        unint64_t v84 = v46;
        int v47 = v44 & 3;
        if ((v44 & 3) != 0) {
          unint64_t v48 = v42 & 0xFFFFFFFFFFFFFFFCLL;
        }
        else {
          unint64_t v48 = 0;
        }
        uint64_t v49 = 1;
        while (2)
        {
          switch(v86)
          {
            case 0:
              uint64_t v50 = (v82 >> (4 * v49)) & 0xF;
              if (!v50) {
                goto LABEL_82;
              }
              goto LABEL_91;
            case 1:
              LODWORD(v50) = *(unsigned __int8 *)(v84 + v49);
              if (*(unsigned char *)(v84 + v49)) {
                goto LABEL_91;
              }
              goto LABEL_82;
            case 2:
              LODWORD(v50) = *(unsigned __int16 *)(v84 + 2 * v49);
              if (!*(_WORD *)(v84 + 2 * v49)) {
                goto LABEL_82;
              }
              goto LABEL_91;
            case 3:
              LODWORD(v50) = *(_DWORD *)(v84 + 4 * v49);
              if (!v50) {
                goto LABEL_82;
              }
LABEL_91:
              for (unint64_t i = __swift::__runtime::llvm::hash_value(*(void **)(v43 + 24 * (v50 - 1)), *(void *)(v43 + 24 * (v50 - 1) + 8)); ; unint64_t i = v53 + 1)
              {
                unint64_t v53 = i & v45;
                if ((i & v45) != 0)
                {
                  switch(v44 & 3)
                  {
                    case 1uLL:
                      LODWORD(v52) = *(unsigned __int8 *)(v48 + v53);
                      break;
                    case 2uLL:
                      LODWORD(v52) = *(unsigned __int16 *)(v48 + 2 * v53);
                      break;
                    case 3uLL:
                      LODWORD(v52) = *(_DWORD *)(v48 + 4 * v53);
                      break;
                    default:
                      uint64_t v52 = (v44 >> (4 * v53)) & 0xF;
                      break;
                  }
                  if (!v52) {
                    break;
                  }
                }
              }
              if (v47 == 3)
              {
                *(_DWORD *)(v48 + 4 * v53) = v50;
                uint64_t v43 = v85;
              }
              else
              {
                uint64_t v43 = v85;
                if (v47 == 2) {
                  *(_WORD *)(v48 + 2 * v53) = v50;
                }
                else {
                  *(unsigned char *)(v48 + v53) = v50;
                }
              }
LABEL_82:
              if (!((unint64_t)++v49 >> v87)) {
                continue;
              }
              goto LABEL_104;
            default:
              JUMPOUT(0);
          }
        }
      }
LABEL_104:
      atomic_store(v44, (unint64_t *)&qword_1E8ECFAA0);
      if (!v79)
      {
        char v54 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
        uint64_t v43 = v85;
        void *v54 = qword_1E8ECFAB0;
        v54[1] = v80;
        qword_1E8ECFAB0 = (uint64_t)v54;
      }
      unint64_t v38 = v75;
    }
    uint64_t v55 = v81;
    unsigned int v56 = v35;
    unint64_t v57 = (unint64_t)v78;
    if (!v78 || v38 >= *v78)
    {
      unint64_t v58 = v38 + (v38 >> 2);
      unint64_t v59 = v38;
      if (v58 <= v38 + 1) {
        unint64_t v58 = v38 + 1;
      }
      size_t v60 = malloc_good_size(24 * v58 + 8);
      uint64_t v61 = malloc_type_malloc(v60, 0x1000D770uLL);
      if (!v61) {
        swift::hashable_support::findHashableBaseTypeOfHashableType();
      }
      unint64_t v57 = (unint64_t)v61;
      *uint64_t v61 = (v60 - 8) / 0x18;
      uint64_t v55 = v81;
      if (v78)
      {
        unint64_t v62 = v59;
        if (v59)
        {
          BOOL v63 = v61 + 2;
          uint64_t v64 = v61 + 6;
          unint64_t v65 = v78 + 6;
          do
          {
            *(_OWORD *)BOOL v63 = *(_OWORD *)v33;
            v64 += 6;
            *((void *)v63 + 2) = *(void *)(v33 + 16);
            v65 += 6;
            v63 += 6;
            v33 += 24;
            --v62;
          }
          while (v62);
        }
        unint64_t v66 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
        *unint64_t v66 = qword_1E8ECFAB0;
        v66[1] = v78;
        qword_1E8ECFAB0 = (uint64_t)v66;
      }
      atomic_store(v57, (unint64_t *)&qword_1E8ECFA98);
      LODWORD(v38) = v59;
    }
    uint64_t v67 = (void *)(v57 + 24 * v38);
    v67[3] = v22;
    unint64_t v68 = malloc_type_malloc(size, 0x647706EuLL);
    memcpy(v68, v55, size);
    v67[1] = v68;
    v67[2] = size;
    atomic_store(v76, (unsigned int *)&dword_1E8ECFA94);
    switch(v56)
    {
      case 1u:
        unint64_t v69 = v44 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v44 & 3) == 0) {
          unint64_t v69 = 0;
        }
        atomic_store(v76, (unsigned __int8 *)(v69 + v56));
        break;
      case 2u:
        unint64_t v70 = v44 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v44 & 3) == 0) {
          unint64_t v70 = 0;
        }
        atomic_store(v76, (unsigned __int16 *)(v70 + 2 * v56));
        break;
      case 3u:
        unint64_t v71 = v44 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v44 & 3) == 0) {
          unint64_t v71 = 0;
        }
        atomic_store(v76, (unsigned int *)(v71 + 4 * v56));
        break;
      default:
        atomic_store((v76 << (4 * v56)) | v44, (unint64_t *)&qword_1E8ECFAA0);
        break;
    }
    __dmb(0xBu);
    {
      char v72 = (void **)qword_1E8ECFAB0;
      if (qword_1E8ECFAB0)
      {
        do
        {
          uint64_t v73 = (void **)*v72;
          free(v72[1]);
          free(v72);
          char v72 = v73;
        }
        while (v73);
      }
LABEL_133:
      qword_1E8ECFAB0 = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E8ECFAA8);
  return v10;
}

uint64_t swift::ConcurrentReadableHashMap<anonymous namespace'::AccessibleFunctionCacheEntry,swift::LazyMutex>::find<__swift::__runtime::llvm::StringRef>(const void **a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = __swift::__runtime::llvm::hash_value(*a1, (uint64_t)a1[1]);
  uint64_t v9 = (char *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  char v10 = 4;
  if ((a2 & 3) != 0 && v9) {
    char v10 = *v9;
  }
  uint64_t v11 = ~(-1 << v10);
  if ((a2 & 3) != 0) {
    unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else {
    unint64_t v12 = 0;
  }
  while (2)
  {
    if ((v8 & v11) <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v8 & v11;
    }
    switch(a2 & 3)
    {
      case 1uLL:
        LODWORD(v14) = v12 + v13;
        LOBYTE(v14) = atomic_load_explicit((atomic_uchar *volatile)(v12 + v13), memory_order_acquire);
        if (v14) {
          goto LABEL_19;
        }
        return 0;
      case 2uLL:
        LODWORD(v14) = v12 + 2 * v13;
        LOWORD(v14) = atomic_load_explicit((atomic_ushort *volatile)(v12 + 2 * v13), memory_order_acquire);
        if (!v14) {
          return 0;
        }
        goto LABEL_19;
      case 3uLL:
        LODWORD(v14) = atomic_load_explicit((atomic_uint *volatile)(v12 + 4 * v13), memory_order_acquire);
        if (v14) {
          goto LABEL_19;
        }
        return 0;
      default:
        uint64_t v14 = (a2 >> (4 * v13)) & 0xF;
        if (v14)
        {
LABEL_19:
          unint64_t v15 = (v14 - 1);
          if (v15 < a3)
          {
            uint64_t v16 = a4 + 24 * v15;
            size_t v17 = (size_t)a1[1];
            if (v17 == *(void *)(v16 + 8) && (!v17 || !memcmp(*a1, *(const void **)v16, v17))) {
              return v16;
            }
          }
          unint64_t v8 = v13 + 1;
          continue;
        }
        return 0;
    }
  }
}

void _swift_backtrace_isThunkFunction()
{
  swift::Demangle::__runtime::Context::Context((swift::Demangle::__runtime::Context *)v0);
}

char *_swift_backtrace_demangle(swift::Demangle::__runtime *a1, const char *a2, void *a3, uint64_t *a4)
{
  unint64_t v5 = a3;
  if (a3 && !a4) {
    return 0;
  }
  if (swift::Demangle::__runtime::isSwiftSymbol(a1, (unint64_t)a2))
  {
    char v17 = 1;
    char v19 = 1;
    __int16 v20 = 0;
    char v21 = 1;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    v24[0] = &unk_1ECA041D0;
    v24[1] = swift::Demangle::__runtime::genericParameterName;
    void v24[3] = v24;
    *(_WORD *)outlen = 257;
    *(_DWORD *)&outlen[2] = 0;
    *(_DWORD *)&outlen[5] = 0;
    uint64_t v18 = 0x101000001010101;
    swift::Demangle::__runtime::demangleSymbolAsString(a1, a2, (unint64_t)outlen, v8);
  }
  if ((unint64_t)a2 < 2) {
    return 0;
  }
  if (*(_WORD *)a1 != 23135) {
    return 0;
  }
  *(void *)outlen = 0;
  LODWORD(__p) = 0;
  char v10 = __cxa_demangle((const char *)a1, 0, (size_t *)outlen, (int *)&__p);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v10;
  if (a4)
  {
    uint64_t v12 = *a4;
    *a4 = *(void *)outlen;
    unint64_t v13 = v12 - 1;
  }
  else
  {
    unint64_t v13 = -1;
  }
  if (!v5) {
    return v10;
  }
  if (*(void *)outlen - 1 >= v13) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = *(void *)outlen - 1;
  }
  memcpy(v5, v10, v14);
  *((unsigned char *)v5 + v14) = 0;
  free(v11);
  return (char *)v5;
}

void anonymous namespace'::_swift_processBacktracingSetting(unsigned __int8 *a1, uint64_t a2, const char *a3, unint64_t *a4)
{
  char v21 = a1;
  uint64_t v22 = a2;
  *(void *)&long long v20 = a3;
  *((void *)&v20 + 1) = a4;
  if (a2 == 6)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "enable", 6uLL))
    {
      return;
    }
    a2 = v22;
  }
  if (a2 == 8)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "demangle", 8uLL))
    {
      return;
    }
    a2 = v22;
  }
  if (a2 == 11)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "interactive", 0xBuLL))
    {
      return;
    }
    a2 = v22;
  }
  if (a2 == 5)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "color", 5uLL))
    {
      return;
    }
    a2 = v22;
  }
  if (a2 == 7)
  {
    if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "timeout", 7uLL))
    {
      a2 = v22;
      goto LABEL_16;
    }
    long long v19 = v20;
    if (*((void *)&v20 + 1) == 4
      && !__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "none", 4uLL))
    {
      dword_1EB1F3164 = 0;
      return;
    }
    char v17 = 0;
    if ((__swift::__runtime::llvm::consumeSignedInteger((__swift::__runtime::llvm *)&v19, 0, (unint64_t *)&v17, a4) & 1) != 0|| (int v6 = (int)v17, v17 != (unsigned __int8 *)(int)v17))
    {
      swift::warning(0, "swift runtime: bad backtracing timeout '%.*s'\n", v4, v5, *((void *)&v20 + 1), (void)v20);
      return;
    }
    char v17 = (unsigned __int8 *)__swift::__runtime::llvm::StringRef::trim(&v19, " \t\n\v\f\r", 6);
    uint64_t v18 = v7;
    if (v7)
    {
      if (v7 == 1)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v17, "s", 1uLL)) {
          goto LABEL_166;
        }
        uint64_t v7 = v18;
      }
      if (v7 != 7) {
        goto LABEL_65;
      }
      if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v17, "seconds", 7uLL))
      {
        uint64_t v7 = v18;
LABEL_65:
        if (v7 == 1)
        {
          if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v17, "m", 1uLL)) {
            goto LABEL_165;
          }
          uint64_t v7 = v18;
        }
        if (v7 != 7) {
          goto LABEL_71;
        }
        if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v17, "minutes", 7uLL))
        {
          uint64_t v7 = v18;
LABEL_71:
          if (v7 == 1)
          {
            if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v17, "h", 1uLL))
            {
LABEL_76:
              v6 *= 3600;
              goto LABEL_166;
            }
            uint64_t v7 = v18;
          }
          if (v7 != 5 || __swift::__runtime::llvm::StringRef::compare_insensitive(&v17, "hours", 5uLL)) {
            return;
          }
          goto LABEL_76;
        }
LABEL_165:
        v6 *= 60;
      }
    }
LABEL_166:
    dword_1EB1F3164 = v6;
    return;
  }
LABEL_16:
  if (a2 == 6)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "unwind", 6uLL))
    {
      uint64_t v8 = *((void *)&v20 + 1);
      if (*((void *)&v20 + 1) == 4)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "auto", 4uLL))
        {
          _swift_backtraceSettings = 0;
          return;
        }
        uint64_t v8 = *((void *)&v20 + 1);
        if (*((void *)&v20 + 1) == 4)
        {
          if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "fast", 4uLL))
          {
            _swift_backtraceSettings = 1;
            return;
          }
          uint64_t v8 = *((void *)&v20 + 1);
        }
      }
      if (v8 == 7)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "precise", 7uLL))
        {
          _swift_backtraceSettings = 2;
          return;
        }
        uint64_t v8 = *((void *)&v20 + 1);
      }
      swift::warning(0, "swift runtime: unknown unwind algorithm '%.*s'\n", a3, (char *)a4, v8, (void)v20);
      return;
    }
    a2 = v22;
  }
  if (a2 == 8)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "sanitize", 8uLL))
    {
      return;
    }
    a2 = v22;
  }
  if (a2 == 6)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "preset", 6uLL))
    {
      uint64_t v9 = *((void *)&v20 + 1);
      if (*((void *)&v20 + 1) == 4)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "auto", 4uLL))
        {
          dword_1EB1F3180 = -1;
          return;
        }
        uint64_t v9 = *((void *)&v20 + 1);
      }
      if (v9 == 8)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "friendly", 8uLL))
        {
          dword_1EB1F3180 = 0;
          return;
        }
        uint64_t v9 = *((void *)&v20 + 1);
      }
      if (v9 == 6)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "medium", 6uLL))
        {
          dword_1EB1F3180 = 1;
          return;
        }
        uint64_t v9 = *((void *)&v20 + 1);
      }
      if (v9 == 4)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "full", 4uLL))
        {
          dword_1EB1F3180 = 2;
          return;
        }
        uint64_t v9 = *((void *)&v20 + 1);
      }
      swift::warning(0, "swift runtime: unknown backtracing preset '%.*s'\n", a3, (char *)a4, v9, (void)v20);
      return;
    }
    a2 = v22;
  }
  if (a2 == 7)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "threads", 7uLL))
    {
      uint64_t v10 = *((void *)&v20 + 1);
      if (*((void *)&v20 + 1) == 3)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "all", 3uLL))
        {
          dword_1EB1F3168 = 0;
          return;
        }
        uint64_t v10 = *((void *)&v20 + 1);
      }
      if (v10 == 7)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "crashed", 7uLL))
        {
          dword_1EB1F3168 = 1;
          return;
        }
        uint64_t v10 = *((void *)&v20 + 1);
      }
      swift::warning(0, "swift runtime: unknown threads setting '%.*s'\n", a3, (char *)a4, v10, (void)v20);
      return;
    }
    a2 = v22;
  }
  if (a2 == 9)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "registers", 9uLL))
    {
      uint64_t v11 = *((void *)&v20 + 1);
      if (*((void *)&v20 + 1) == 4)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "none", 4uLL))
        {
          dword_1EB1F316C = 0;
          return;
        }
        uint64_t v11 = *((void *)&v20 + 1);
      }
      if (v11 == 3)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "all", 3uLL))
        {
          dword_1EB1F316C = 1;
          return;
        }
        uint64_t v11 = *((void *)&v20 + 1);
      }
      if (v11 == 7)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "crashed", 7uLL))
        {
          dword_1EB1F316C = 2;
          return;
        }
LABEL_125:
        uint64_t v11 = *((void *)&v20 + 1);
      }
LABEL_126:
      swift::warning(0, "swift runtime: unknown registers setting '%.*s'\n", a3, (char *)a4, v11, (void)v20);
      return;
    }
    a2 = v22;
  }
  if (a2 != 6) {
    goto LABEL_34;
  }
  if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "images", 6uLL))
  {
    uint64_t v11 = *((void *)&v20 + 1);
    if (*((void *)&v20 + 1) == 4)
    {
      if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "none", 4uLL))
      {
        dword_1EB1F3170 = 0;
        return;
      }
      uint64_t v11 = *((void *)&v20 + 1);
    }
    if (v11 == 3)
    {
      if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "all", 3uLL))
      {
        dword_1EB1F3170 = 1;
        return;
      }
      uint64_t v11 = *((void *)&v20 + 1);
    }
    if (v11 == 9)
    {
      if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "mentioned", 9uLL))
      {
        dword_1EB1F3170 = 2;
        return;
      }
      goto LABEL_125;
    }
    goto LABEL_126;
  }
  a2 = v22;
LABEL_34:
  if (a2 == 5)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "limit", 5uLL))
    {
      LODWORD(v19) = 0;
      if (*((void *)&v20 + 1) == 4
        && !__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "none", 4uLL))
      {
        dword_1EB1F3174 = -1;
      }
      else if ((__swift::__runtime::llvm::StringRef::getAsInteger<int>((uint64_t)&v20, 0, &v19) & 1) != 0 {
             || (int)v19 < 1)
      }
      {
        swift::warning(0, "swift runtime: bad backtrace limit '%.*s'\n", v12, v13, *((void *)&v20 + 1), (void)v20);
      }
      else
      {
        dword_1EB1F3174 = v19;
      }
      return;
    }
    a2 = v22;
  }
  if (a2 == 3)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "top", 3uLL))
    {
      LODWORD(v19) = 0;
      if ((__swift::__runtime::llvm::StringRef::getAsInteger<int>((uint64_t)&v20, 0, &v19) & 1) != 0
        || (v19 & 0x80000000) != 0)
      {
        swift::warning(0, "swift runtime: bad backtrace top count '%.*s'\n", v14, v15, *((void *)&v20 + 1), (void)v20);
      }
      else
      {
        dword_1EB1F3178 = v19;
      }
      return;
    }
    a2 = v22;
  }
  if (a2 == 5)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "cache", 5uLL))
    {
      return;
    }
    a2 = v22;
  }
  if (a2 == 9)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "output-to", 9uLL))
    {
      uint64_t v16 = *((void *)&v20 + 1);
      if (*((void *)&v20 + 1) == 4)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "auto", 4uLL))
        {
          dword_1EB1F3188 = -1;
          return;
        }
        uint64_t v16 = *((void *)&v20 + 1);
      }
      if (v16 == 6)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "stdout", 6uLL))
        {
          dword_1EB1F3188 = 0;
          return;
        }
        uint64_t v16 = *((void *)&v20 + 1);
        if (*((void *)&v20 + 1) == 6)
        {
          if (!__swift::__runtime::llvm::StringRef::compare_insensitive((unsigned __int8 **)&v20, "stderr", 6uLL))
          {
            dword_1EB1F3188 = 2;
            return;
          }
          uint64_t v16 = *((void *)&v20 + 1);
        }
      }
      swift::warning(0, "swift runtime: unknown output-to setting '%.*s'\n", a3, (char *)a4, v16, (void)v20);
      return;
    }
    a2 = v22;
  }
  if (a2 != 11)
  {
LABEL_49:
    swift::warning(0, "swift runtime: unknown backtracing setting '%.*s'\n", a3, (char *)a4, a2, v21);
    return;
  }
  if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v21, "symbolicate", 0xBuLL))
  {
    a2 = v22;
    goto LABEL_49;
  }
}

uint64_t anonymous namespace'::parseOnOffTty(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = a2;
  if (a2 == 2)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "on", 2uLL)) {
      return 1;
    }
    a2 = v5;
  }
  if (a2 == 4)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "true", 4uLL)) {
      return 1;
    }
    a2 = v5;
  }
  if (a2 != 3) {
    goto LABEL_10;
  }
  if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "yes", 3uLL)) {
    return 1;
  }
  a2 = v5;
LABEL_10:
  if (a2 == 1)
  {
    uint64_t v2 = 1;
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "y", 1uLL)) {
      return v2;
    }
    a2 = v5;
    if (v5 == 1)
    {
      uint64_t v2 = 1;
      if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "t", 1uLL)) {
        return v2;
      }
      a2 = v5;
      if (v5 == 1)
      {
        uint64_t v2 = 1;
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "1", 1uLL)) {
          return v2;
        }
        a2 = v5;
      }
    }
  }
  if (a2 == 3)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "tty", 3uLL)) {
      return 2;
    }
    a2 = v5;
  }
  if (a2 == 4) {
    return 2
  }
         * (__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "auto", 4uLL) == 0);
  else {
    return 0;
  }
}

BOOL anonymous namespace'::parseBoolean(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = a2;
  if (a2 == 2)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "on", 2uLL)) {
      return 1;
    }
    a2 = v5;
  }
  if (a2 == 4)
  {
    if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "true", 4uLL)) {
      return 1;
    }
    a2 = v5;
  }
  if (a2 != 3) {
    goto LABEL_10;
  }
  if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "yes", 3uLL)) {
    return 1;
  }
  a2 = v5;
LABEL_10:
  if (a2 != 1) {
    return 0;
  }
  uint64_t v2 = 1;
  if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "y", 1uLL))
  {
    if (v5 == 1)
    {
      uint64_t v2 = 1;
      if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "t", 1uLL)) {
        return v2;
      }
      if (v5 == 1) {
        return __swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "1", 1uLL) == 0;
      }
    }
    return 0;
  }
  return v2;
}

uint64_t __swift::__runtime::llvm::StringRef::trim(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t first_not_of = __swift::__runtime::llvm::StringRef::find_first_not_of(a1, a2, a3, 0);
  unint64_t v7 = a1[1];
  if (first_not_of >= v7) {
    unint64_t v8 = a1[1];
  }
  else {
    unint64_t v8 = first_not_of;
  }
  v10[0] = *a1 + v8;
  v10[1] = v7 - v8;
  __swift::__runtime::llvm::StringRef::find_last_not_of(v10, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
  return v10[0];
}

uint64_t __swift::__runtime::llvm::StringRef::getAsInteger<int>(uint64_t a1, __swift::__runtime::llvm::StringRef *a2, _DWORD *a3)
{
  unint64_t v5 = 0;
  if (__swift::__runtime::llvm::getAsSignedInteger(*(unsigned char **)a1, *(void *)(a1 + 8), a2, &v5) || v5 != (int)v5) {
    return 1;
  }
  uint64_t result = 0;
  *a3 = v5;
  return result;
}

uint64_t anonymous namespace'::parseSymbolication(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = a2;
  if (a2 != 2)
  {
LABEL_4:
    if (a2 == 4)
    {
      if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "true", 4uLL)) {
        return 2;
      }
      a2 = v5;
    }
    if (a2 == 3)
    {
      if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "yes", 3uLL)) {
        return 2;
      }
      a2 = v5;
    }
    if (a2 == 1)
    {
      if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "y", 1uLL)) {
        return 2;
      }
      a2 = v5;
      if (v5 == 1)
      {
        if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "t", 1uLL)) {
          return 2;
        }
        a2 = v5;
        if (v5 == 1)
        {
          if (!__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "1", 1uLL)) {
            return 2;
          }
          a2 = v5;
        }
      }
    }
    if (a2 != 4) {
      return 0;
    }
    if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "full", 4uLL))
    {
      if (v5 == 4) {
        return __swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "fast", 4uLL) == 0;
      }
      return 0;
    }
    return 2;
  }
  uint64_t v2 = 2;
  if (__swift::__runtime::llvm::StringRef::compare_insensitive(&v4, "on", 2uLL))
  {
    a2 = v5;
    goto LABEL_4;
  }
  return v2;
}

void _GLOBAL__sub_I_Backtrace_cpp()
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  v0 = (unsigned __int8 *)swift::runtime::environment::SWIFT_BACKTRACE_variable;
  if (issetugid()) {
    dword_1EB1F3154 = 0;
  }
  if ((_os_feature_enabled_simple_impl() & 1) == 0) {
    dword_1EB1F3154 = 0;
  }
  if (!v0) {
    goto LABEL_25;
  }
  int v3 = *v0;
  if (!*v0) {
    goto LABEL_25;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  while (2)
  {
    char v6 = 1;
    unint64_t v7 = v4;
    unint64_t v8 = (char *)v0;
LABEL_11:
    uint64_t v4 = v7;
    unint64_t v7 = v8 + 1;
    for (unint64_t i = v8; ; ++i)
    {
      int v10 = v3;
      if (v6)
      {
        int v3 = *(unsigned __int8 *)v7;
        if (v10 == 61)
        {
          char v6 = 0;
          uint64_t v5 = v7 - 1;
          unint64_t v8 = (char *)v7;
          if (*v7) {
            goto LABEL_11;
          }
          goto LABEL_24;
        }
        if (!*v7) {
          goto LABEL_25;
        }
        goto LABEL_12;
      }
      if (v3 == 44) {
        break;
      }
      int v3 = *(unsigned __int8 *)v7;
      if (!*v7)
      {
        unint64_t v7 = v4;
LABEL_24:
        goto LABEL_25;
      }
LABEL_12:
      ++v7;
    }
    int v3 = *(unsigned __int8 *)v7;
    v0 = (unsigned __int8 *)v7;
    if (*v7) {
      continue;
    }
    break;
  }
LABEL_25:
  if (dword_1EB1F3154 == -1)
  {
LABEL_28:
    dword_1EB1F3154 = 0;
  }
  else if (dword_1EB1F3154)
  {
    swift::warning(0, "swift runtime: backtrace-on-crash is not supported on this platform.\n", v1, v2);
    goto LABEL_28;
  }
}

unint64_t swift::SwiftError::getType(swift::SwiftError *this, const void *a2)
{
  Class Class = swift::_swift_getClass((unint64_t)this, a2);
  if (qword_1EB208DD8 != -1) {
    dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (Class == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy) {
    return *((void *)this + 5);
  }
  unint64_t v4 = objc_opt_class();

  return swift_getObjCClassMetadata(v4);
}

uint64_t swift::getNSErrorClass(swift *this)
{
  if (qword_1EB208DC8 != -1) {
    dispatch_once_f(&qword_1EB208DC8, &swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)swift::getNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy;
}

BOOL swift::SwiftError::isPureNSError(swift::SwiftError *this, const void *a2)
{
  Class Class = swift::_swift_getClass((unint64_t)this, a2);
  if (qword_1EB208DD8 != -1) {
    dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return Class != (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy;
}

unint64_t swift::SwiftError::getHashableBaseType(atomic_ullong *this, const void *a2)
{
  Class Class = swift::_swift_getClass((unint64_t)this, a2);
  if (qword_1EB208DD8 != -1) {
    dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (Class != (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
  {
    unint64_t v4 = &swift::getNSErrorMetadata(void)::$_0::operator() const(void)::TheLazy;
    if (qword_1E8ECFAF0 != -1) {
      dispatch_once_f(&qword_1E8ECFAF0, &swift::getNSErrorMetadata(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)swift::getNSErrorMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    }
    return *v4;
  }
  unint64_t explicit = atomic_load_explicit(this + 7, memory_order_acquire);
  if (explicit == 1) {
    unint64_t result = 0;
  }
  else {
    unint64_t result = explicit;
  }
  if (!explicit)
  {
    uint64_t v7 = this[5];
    unint64_t v4 = this + 5;
    uint64_t HashableBaseType = swift::hashable_support::findHashableBaseType(v7);
    uint64_t v9 = 0;
    if (HashableBaseType) {
      unint64_t v10 = HashableBaseType;
    }
    else {
      unint64_t v10 = 1;
    }
    atomic_compare_exchange_strong(v4 + 2, (unint64_t *)&v9, v10);
    return *v4;
  }
  return result;
}

uint64_t swift::SwiftError::getHashableConformance(atomic_ullong *this, const void *a2)
{
  Class Class = swift::_swift_getClass((unint64_t)this, a2);
  if (qword_1EB208DD8 != -1) {
    dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (Class == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
  {
    unint64_t explicit = atomic_load_explicit(this + 8, memory_order_acquire);
    if (explicit == 1) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = explicit;
    }
    if (!explicit)
    {
      uint64_t result = swift_conformsToProtocolCommon(this[5], (uint64_t)&protocol descriptor for Hashable);
      uint64_t v9 = 0;
      if (result) {
        unint64_t v10 = result;
      }
      else {
        unint64_t v10 = 1;
      }
      atomic_compare_exchange_strong(this + 8, (unint64_t *)&v9, v10);
    }
  }
  else
  {
    gotLoadHelper_x19___sSo8NSObjectCSH10ObjectiveCMc(v4);
    uint64_t v5 = (int *)this[423];
    CanonicalTypeMetadata = (unint64_t *)swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)v5);
    return swift::_getWitnessTable(v5, CanonicalTypeMetadata, 0);
  }
  return result;
}

uint64_t swift::getNSErrorMetadata(swift *this)
{
  if (qword_1E8ECFAF0 != -1) {
    dispatch_once_f(&qword_1E8ECFAF0, &swift::getNSErrorMetadata(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)swift::getNSErrorMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return swift::getNSErrorMetadata(void)::$_0::operator() const(void)::TheLazy;
}

uint64_t swift::findErrorWitness(uint64_t a1)
{
  return swift_conformsToProtocolCommon(a1, (uint64_t)&protocol descriptor for Error);
}

atomic_ullong *swift::dynamicCastValueToNSError(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = _getErrorEmbeddedNSErrorIndirect<A>(_:)(a1, a2, a3);
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)v8;
    if ((a4 & 2) != 0)
    {
      if (*(void *)(a2 - 8)) {
        uint64_t v10 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v10 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
    }
  }
  else
  {
    uint64_t v9 = swift_allocError(a2, a3, a1, (a4 & 2) != 0);
    _swift_stdlib_bridgeErrorToNSError(v9, v11);
  }
  return v9;
}

void *swift_allocError(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (qword_1EB208DD8 != -1) {
    dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xB8;
  Instance = class_createInstance((Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, *(unsigned int *)(v8 + 64) + v9 + 32);
  uint64_t v11 = Instance;
  Instance[5] = a1;
  Instance[6] = a2;
  atomic_store(0, Instance + 7);
  atomic_store(0, Instance + 8);
  if (a3)
  {
    uint64_t v12 = *(void *)(a1 - 8);
    if (a4)
    {
      if (v12) {
        uint64_t v13 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v13 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))((uint64_t)Instance + v9 + 72, a3, a1);
    }
    else
    {
      if (v12) {
        uint64_t v14 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v14 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))((uint64_t)Instance + v9 + 72, a3, a1);
    }
  }
  return v11;
}

atomic_ullong *_swift_stdlib_bridgeErrorToNSError(atomic_ullong *a1, const void *a2)
{
  uint64_t v23 = (swift *)a1;
  if (!atomic_load_explicit(a1 + 3, memory_order_acquire))
  {
    int v3 = v23;
    Class Class = swift::_swift_getClass((unint64_t)v23, a2);
    if (qword_1EB208DD8 != -1) {
      dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    }
    if (Class == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy) {
      uint64_t v6 = ((unint64_t)v23 + *(unsigned __int8 *)(*(void *)(*((void *)v23 + 5) - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*((void *)v23 + 5) - 8) + 80);
    }
    else {
      uint64_t v6 = (uint64_t)&v23;
    }
    Class v8 = swift::_swift_getClass((unint64_t)v23, v4);
    if (qword_1EB208DD8 != -1) {
      dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    }
    if (v8 == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
    {
      unint64_t ObjCClassMetadata = *((void *)v3 + 5);
    }
    else
    {
      unint64_t v9 = objc_opt_class();
      unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v9);
    }
    Class v11 = swift::_swift_getClass((unint64_t)v3, v7);
    if (qword_1EB208DD8 != -1) {
      dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
    }
    if (v11 == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
    {
      uint64_t WitnessTable = *((void *)v3 + 6);
    }
    else
    {
      gotLoadHelper_x20___sSo10CFErrorRefas5Error10FoundationMc(v12);
      uint64_t v13 = (int *)*((void *)v3 + 489);
      CanonicalTypeMetadata = (unint64_t *)swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)v13);
      uint64_t WitnessTable = swift::_getWitnessTable(v13, CanonicalTypeMetadata, 0);
    }
    uint64_t v16 = (void *)_getErrorDomainNSString<A>(_:)(v6, ObjCClassMetadata, WitnessTable);
    uint64_t v17 = _getErrorCode<A>(_:)(v6, ObjCClassMetadata, WitnessTable);
    uint64_t v18 = (void *)_getErrorUserInfoNSDictionary<A>(_:)(v6, ObjCClassMetadata, WitnessTable);
    if (!v18)
    {
      if (qword_1E8ECFB00 != -1) {
        dispatch_once_f(&qword_1E8ECFB00, &_swift_stdlib_bridgeErrorToNSError::$_0::operator() const(void)::TheLazy, (dispatch_function_t)_swift_stdlib_bridgeErrorToNSError::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
      }
      uint64_t v18 = (void *)_swift_stdlib_bridgeErrorToNSError::$_0::operator() const(void)::TheLazy;
    }
    uint64_t v19 = 0;
    long long v20 = v23;
    *((void *)v23 + 2) = v17;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v20 + 4, (unint64_t *)&v19, (unint64_t)v18);
    if (v19) {

    }
    uint64_t v21 = 0;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v23 + 3, (unint64_t *)&v21, (unint64_t)v16);
    if (v21) {
  }
    }
  return a1;
}

uint64_t swift_getErrorValue(void *a1, void *a2, unint64_t *a3)
{
  Class Class = swift::_swift_getClass((unint64_t)a1, a2);
  if (qword_1EB208DD8 != -1) {
    dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (Class == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
  {
    unint64_t ObjCClassMetadata = a1[5];
  }
  else
  {
    unint64_t v8 = objc_opt_class();
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v8);
  }
  a3[1] = ObjCClassMetadata;
  Class v10 = swift::_swift_getClass((unint64_t)a1, v6);
  if (qword_1EB208DD8 != -1) {
    dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (v10 == (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
  {
    *a3 = ((unint64_t)a1 + *(unsigned __int8 *)(*(void *)(a1[5] - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1[5] - 8) + 80);
    uint64_t result = a1[6];
  }
  else
  {
    *a2 = a1;
    *a3 = (unint64_t)a2;
    gotLoadHelper_x20___sSo10CFErrorRefas5Error10FoundationMc(v11);
    double v12 = (int *)a1[489];
    CanonicalTypeMetadata = (unint64_t *)swift::TargetProtocolConformanceDescriptor<swift::InProcess>::getCanonicalTypeMetadata((uint64_t)v12);
    uint64_t result = swift::_getWitnessTable(v12, CanonicalTypeMetadata, 0);
  }
  a3[2] = result;
  return result;
}

uint64_t swift::tryDynamicCastNSErrorObjectToValue(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v19 = a1;
  if (qword_1EB208DC8 == -1)
  {
    if (a1 >= 1) {
      goto LABEL_3;
    }
    return 0;
  }
  dispatch_once_f(&qword_1EB208DC8, &swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)swift::getNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  if (a1 < 1) {
    return 0;
  }
LABEL_3:
  if (qword_1EB208DE8 != -1) {
    dispatch_once_f(&qword_1EB208DE8, &isKindOfClass(swift::HeapObject *,objc_class *)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)isKindOfClass(swift::HeapObject *,objc_class *)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  unint64_t v8 = (void (*)(void))isKindOfClass(swift::HeapObject *,objc_class *)::$_0::operator() const(void)::TheLazy;
  Class Class = object_getClass((id)a1);
  if (class_getMethodImplementation(Class, sel_methodSignatureForSelector_) == v8
    || (objc_opt_isKindOfClass() & 1) == 0)
  {
    return 0;
  }
  Class v11 = swift::_swift_getClass(a1, v10);
  if (qword_1EB208DD8 != -1) {
    dispatch_once_f(&qword_1EB208DD8, &getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (v11 != (Class)getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::TheLazy)
  {
    gotLoadHelper_x16___s10Foundation26_ObjectiveCBridgeableErrorMp(v12);
    if (swift_conformsToProtocolCommon((uint64_t)a3, *(void *)(v13 + 1672))
      && (_s10Foundation21_bridgeNSErrorToError_3outSbSo0C0C_SpyxGtAA021_ObjectiveCBridgeableE0RzlF_delayInitStub(v14) & 1) != 0)
    {
      if ((a4 & 2) != 0) {

      }
      return 1;
    }
    if (*a3 == 771
      && swift::TargetExistentialTypeMetadata<swift::InProcess>::getRepresentation((uint64_t)a3) == 2)
    {
      *a2 = (id)a1;
      return 1;
    }
    return 0;
  }
  uint64_t v16 = &protocol descriptor for Error;
  if (!&protocol descriptor for Error) {
    uint64_t v16 = 0;
  }
  uint64_t v18 = v16;
  ExistentialTypeMetadata = swift_getExistentialTypeMetadata(1u, 0, 1, (uint64_t *)&v18);
  return swift_dynamicCast(a2, &v19, ExistentialTypeMetadata, a3, a4);
}

uint64_t swift::tryDynamicCastNSErrorToValue(void *a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = *a3;
  if ((unint64_t)*a3 > 0x7FF) {
    LODWORD(v5) = 0;
  }
  if (!v5 || v5 == 773 || v5 == 515) {
    return swift::tryDynamicCastNSErrorObjectToValue(*a2, a1, a4, a5);
  }
  else {
    return 0;
  }
}

Class swift::getNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(Class *a1)
{
  Class result = objc_lookUpClass("NSError");
  *a1 = result;
  return result;
}

unint64_t swift::getNSErrorMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(unint64_t *a1)
{
  if (qword_1EB208DC8 != -1) {
    dispatch_once_f(&qword_1EB208DC8, &swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)swift::getNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  unint64_t result = swift_getObjCClassMetadata(swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy);
  *a1 = result;
  return result;
}

objc_class *getSwiftNativeNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(objc_class **a1)
{
  if (qword_1EB208DC8 != -1) {
    dispatch_once_f(&qword_1EB208DC8, &swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)swift::getNSErrorClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  uint64_t v2 = (objc_class *)swift::getNSErrorClass(void)::$_0::operator() const(void)::TheLazy;
  unint64_t result = (objc_class *)objc_opt_class();
  double v4 = result;
  if (v2) {
    unint64_t result = class_setSuperclass(result, v2);
  }
  *a1 = v4;
  return result;
}

uint64_t _swift_stdlib_bridgeErrorToNSError::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t result = [(objc_class *)objc_lookUpClass("NSDictionary") dictionary];
  *a1 = result;
  return result;
}

IMP isKindOfClass(swift::HeapObject *,objc_class *)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(IMP *a1)
{
  uint64_t v2 = objc_lookUpClass("NSProxy");
  IMP result = class_getMethodImplementation(v2, sel_methodSignatureForSelector_);
  *a1 = result;
  return result;
}

Class swift::_swift_getClass(unint64_t this, const void *a2)
{
  if ((this & 0x8000000000000000) != 0) {
    return object_getClass((id)this);
  }
  else {
    return (Class)(*(void *)this & 0x7FFFFFFFFFFFF8);
  }
}

Class swift_getObjCClassFromObject(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t Class = (uint64_t)object_getClass((id)a1);
    if (Class) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t Class = *(void *)a1 & 0x7FFFFFFFFFFFF8;
    if (Class)
    {
LABEL_5:
      while ((*(unsigned char *)(Class + 32) & 2) != 0)
      {
        if (*(void *)(Class + 64)) {
          return (Class)Class;
        }
        if (!*(void *)(Class + 8)) {
          break;
        }
        uint64_t Class = *(void *)(Class + 8);
      }
    }
  }
  uint64_t Class = objc_opt_class();
  int v3 = object_getClass((id)a1);
  if (!class_isMetaClass(v3)) {
    return (Class)Class;
  }

  return object_getClass((id)Class);
}

unint64_t swift_getObjectType(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    unint64_t result = (unint64_t)object_getClass((id)a1);
    if (result) {
      goto LABEL_5;
    }
  }
  else
  {
    unint64_t result = *(void *)a1 & 0x7FFFFFFFFFFFF8;
    if (result)
    {
LABEL_5:
      while ((*(unsigned char *)(result + 32) & 2) != 0)
      {
        if (*(void *)(result + 64)) {
          return result;
        }
        if (!*(void *)(result + 8)) {
          break;
        }
        unint64_t result = *(void *)(result + 8);
      }
    }
  }
  int v3 = objc_opt_class();
  uint64_t Class = object_getClass((id)a1);
  if (class_isMetaClass(Class)) {
    int v3 = object_getClass(v3);
  }

  return swift_getObjCClassMetadata((unint64_t)v3);
}

uint64_t _swift_classOfObjCHeapObject(void *a1)
{
  return *a1 & 0x7FFFFFFFFFFFF8;
}

id swift::getDescription(uint64_t a1, Class *a2)
{
  Description = (void *)swift_stdlib_getDescription(a1, a2);
  if (*(a2 - 1)) {
    uint64_t v5 = (uint64_t)*(a2 - 1);
  }
  else {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t, Class *))(v5 + 8))(a1, a2);

  return Description;
}

void sub_1815B6BC0(_Unwind_Exception *a1)
{
}

double swift::Lazy<std::unordered_set<objc_class *>>::defaultInitCallback(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t swift::usesNativeSwiftReferenceCounting(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned __int8 *)(a1 + 40) >> 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t _swift_objcClassUsesNativeSwiftReferenceCounting(uint64_t a1)
{
  if (*(void *)a1 == 773) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned __int8 *)(a1 + 40) >> 1) & 1;
  }
  return 0;
}

uint64_t swift_unknownObjectRetain_n(uint64_t a1, uint64_t a2)
{
  if (a1 < 1) {
    return a1;
  }
  int v3 = a2;
  if ((*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) == 0
    || (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) == 0)
  {
    if ((int)a2 >= 1)
    {
      do
      {
        id v4 = (id)a1;
        --v3;
      }
      while (v3);
    }
    return a1;
  }

  return swift_retain_n(a1, a2);
}

void swift_unknownObjectRelease_n(uint64_t a1, uint64_t a2)
{
  if (a1 >= 1)
  {
    int v2 = a2;
    if ((*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) != 0
      && (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) != 0)
    {
      swift_release_n(a1, a2);
    }
    else if ((int)a2 >= 1)
    {
      do
      {

        --v2;
      }
      while (v2);
    }
  }
}

id swift_unknownObjectRetain(id result)
{
  if ((uint64_t)result >= 1)
  {
    if ((*(unsigned char *)((*(void *)result & 0x7FFFFFFFFFFFF8) + 0x20) & 2) != 0
      && (*(unsigned char *)((*(void *)result & 0x7FFFFFFFFFFFF8) + 0x28) & 2) != 0)
    {
      return swift_retain((atomic_ullong *)result);
    }
    else
    {
      return result;
    }
  }
  return result;
}

void swift_unknownObjectRelease(id a1)
{
  if ((uint64_t)a1 >= 1)
  {
    if ((*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) != 0
      && (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) != 0)
    {
      swift_release((uint64_t)a1);
    }
    else
    {
    }
  }
}

uint64_t swift_nonatomic_unknownObjectRetain_n(uint64_t a1, uint64_t a2)
{
  if (a1 < 1) {
    return a1;
  }
  int v3 = a2;
  if ((*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) == 0
    || (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) == 0)
  {
    if ((int)a2 >= 1)
    {
      do
      {
        id v4 = (id)a1;
        --v3;
      }
      while (v3);
    }
    return a1;
  }

  return swift_nonatomic_retain_n(a1, a2);
}

void swift_nonatomic_unknownObjectRelease_n(uint64_t a1, uint64_t a2)
{
  if (a1 >= 1)
  {
    int v2 = a2;
    if ((*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) != 0
      && (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) != 0)
    {
      swift_nonatomic_release_n(a1, a2);
    }
    else if ((int)a2 >= 1)
    {
      do
      {

        --v2;
      }
      while (v2);
    }
  }
}

id swift_nonatomic_unknownObjectRetain(id result)
{
  if ((uint64_t)result >= 1)
  {
    if ((*(unsigned char *)((*(void *)result & 0x7FFFFFFFFFFFF8) + 0x20) & 2) != 0
      && (*(unsigned char *)((*(void *)result & 0x7FFFFFFFFFFFF8) + 0x28) & 2) != 0)
    {
      return (id)swift_nonatomic_retain((uint64_t)result);
    }
    else
    {
      return result;
    }
  }
  return result;
}

void swift_nonatomic_unknownObjectRelease(id a1)
{
  if ((uint64_t)a1 >= 1)
  {
    if ((*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) != 0
      && (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) != 0)
    {
      swift_release((uint64_t)a1);
    }
    else
    {
    }
  }
}

unint64_t swift_bridgeObjectRetain(unint64_t result)
{
  if ((result & 0x8000000000000000) == 0)
  {
    if ((result & 0x4000000000000000) != 0) {
      return objcRetainAndReturn(result);
    }
    else {
      return (unint64_t)swift_retain((atomic_ullong *)(result & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

unint64_t objcRetainAndReturn(unint64_t a1)
{
  id v2 = (id)(a1 & 0x8FFFFFFFFFFFFFF8);
  return a1;
}

atomic_ullong *swift_bridgeObjectRetain_x1(int a1, unint64_t a2)
{
  double result = (atomic_ullong *)a2;
  if ((a2 & 0x8000000000000000) == 0)
  {
    if ((a2 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(a2);
    }
    else
    {
      return swift_retain((atomic_ullong *)(a2 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x2(int a1, int a2, unint64_t a3)
{
  double result = (atomic_ullong *)a3;
  if ((a3 & 0x8000000000000000) == 0)
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(a3);
    }
    else
    {
      return swift_retain((atomic_ullong *)(a3 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x3(int a1, int a2, int a3, unint64_t a4)
{
  double result = (atomic_ullong *)a4;
  if ((a4 & 0x8000000000000000) == 0)
  {
    if ((a4 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(a4);
    }
    else
    {
      return swift_retain((atomic_ullong *)(a4 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x4(int a1, int a2, int a3, int a4, unint64_t a5)
{
  double result = (atomic_ullong *)a5;
  if ((a5 & 0x8000000000000000) == 0)
  {
    if ((a5 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(a5);
    }
    else
    {
      return swift_retain((atomic_ullong *)(a5 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x5(int a1, int a2, int a3, int a4, int a5, unint64_t a6)
{
  double result = (atomic_ullong *)a6;
  if ((a6 & 0x8000000000000000) == 0)
  {
    if ((a6 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(a6);
    }
    else
    {
      return swift_retain((atomic_ullong *)(a6 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x6(int a1, int a2, int a3, int a4, int a5, int a6, unint64_t a7)
{
  double result = (atomic_ullong *)a7;
  if ((a7 & 0x8000000000000000) == 0)
  {
    if ((a7 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(a7);
    }
    else
    {
      return swift_retain((atomic_ullong *)(a7 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x7(int a1, int a2, int a3, int a4, int a5, int a6, int a7, unint64_t a8)
{
  double result = (atomic_ullong *)a8;
  if ((a8 & 0x8000000000000000) == 0)
  {
    if ((a8 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(a8);
    }
    else
    {
      return swift_retain((atomic_ullong *)(a8 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x8@<X0>(unint64_t a1@<X8>)
{
  double result = (atomic_ullong *)a1;
  if ((a1 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(a1);
    }
    else
    {
      return swift_retain((atomic_ullong *)(a1 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x9()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x10()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x11()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x12()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x13()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x14()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x15()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x19()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x20()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x21()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x22()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x23()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x24()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x25()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x26()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x27()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

atomic_ullong *swift_bridgeObjectRetain_x28()
{
  double result = (atomic_ullong *)v0;
  if ((v0 & 0x8000000000000000) == 0)
  {
    if ((v0 & 0x4000000000000000) != 0)
    {
      return (atomic_ullong *)objcRetainAndReturn(v0);
    }
    else
    {
      return swift_retain((atomic_ullong *)(v0 & 0x8FFFFFFFFFFFFFF8));
    }
  }
  return result;
}

uint64_t swift_nonatomic_bridgeObjectRetain(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    uint64_t v2 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8);
    if ((a1 & 0x4000000000000000) != 0) {
      id v3 = v2;
    }
    else {
      swift_nonatomic_retain((uint64_t)v2);
    }
  }
  return a1;
}

void swift_bridgeObjectRelease(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release(a1 & 0x8FFFFFFFFFFFFFF8);
    }
  }
}

void swift_bridgeObjectRelease_x1(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v2 = (void *)(a2 & 0x8FFFFFFFFFFFFFF8);
    if ((a2 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v2);
    }
  }
}

void swift_bridgeObjectRelease_x2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    id v3 = (void *)(a3 & 0x8FFFFFFFFFFFFFF8);
    if ((a3 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v3);
    }
  }
}

void swift_bridgeObjectRelease_x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = (void *)(a4 & 0x8FFFFFFFFFFFFFF8);
    if ((a4 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v4);
    }
  }
}

void swift_bridgeObjectRelease_x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a5 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (void *)(a5 & 0x8FFFFFFFFFFFFFF8);
    if ((a5 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v5);
    }
  }
}

void swift_bridgeObjectRelease_x5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = (void *)(a6 & 0x8FFFFFFFFFFFFFF8);
    if ((a6 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v6);
    }
  }
}

void swift_bridgeObjectRelease_x6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((a7 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = (void *)(a7 & 0x8FFFFFFFFFFFFFF8);
    if ((a7 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v7);
    }
  }
}

void swift_bridgeObjectRelease_x7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = (void *)(a8 & 0x8FFFFFFFFFFFFFF8);
    if ((a8 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v8);
    }
  }
}

void swift_bridgeObjectRelease_x8(uint64_t a1@<X8>)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8);
    if ((a1 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x9()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x10()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x11()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x12()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x13()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x14()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x15()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x19()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x20()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x21()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x22()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x23()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x24()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x25()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x26()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x27()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_bridgeObjectRelease_x28()
{
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = (void *)(v0 & 0x8FFFFFFFFFFFFFF8);
    if ((v0 & 0x4000000000000000) != 0) {

    }
    else {
      swift_release((uint64_t)v1);
    }
  }
}

void swift_nonatomic_bridgeObjectRelease(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0x4000000000000000) != 0) {

    }
    else {
      swift_nonatomic_release(a1 & 0x8FFFFFFFFFFFFFF8);
    }
  }
}

uint64_t swift_bridgeObjectRetain_n(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    int v3 = a2;
    uint64_t v4 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8);
    if ((a1 & 0x4000000000000000) != 0)
    {
      if ((int)a2 >= 1)
      {
        do
        {
          id v5 = v4;
          --v3;
        }
        while (v3);
      }
    }
    else
    {
      swift_retain_n(a1 & 0x8FFFFFFFFFFFFFF8, a2);
    }
  }
  return a1;
}

void swift_bridgeObjectRelease_n(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    int v2 = a2;
    int v3 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8);
    if ((a1 & 0x4000000000000000) != 0)
    {
      if ((int)a2 >= 1)
      {
        do
        {

          --v2;
        }
        while (v2);
      }
    }
    else
    {
      unint64_t v4 = a1 & 0x8FFFFFFFFFFFFFF8;
      swift_release_n(v4, a2);
    }
  }
}

uint64_t swift_nonatomic_bridgeObjectRetain_n(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    int v3 = a2;
    unint64_t v4 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8);
    if ((a1 & 0x4000000000000000) != 0)
    {
      if ((int)a2 >= 1)
      {
        do
        {
          id v5 = v4;
          --v3;
        }
        while (v3);
      }
    }
    else
    {
      swift_nonatomic_retain_n(a1 & 0x8FFFFFFFFFFFFFF8, a2);
    }
  }
  return a1;
}

void swift_nonatomic_bridgeObjectRelease_n(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    int v2 = a2;
    int v3 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8);
    if ((a1 & 0x4000000000000000) != 0)
    {
      if ((int)a2 >= 1)
      {
        do
        {

          --v2;
        }
        while (v2);
      }
    }
    else
    {
      unint64_t v4 = a1 & 0x8FFFFFFFFFFFFFF8;
      swift_nonatomic_release_n(v4, a2);
    }
  }
}

void *swift_unknownObjectUnownedInit(void *a1, uint64_t a2, const char *a3, char *a4)
{
  if (a2)
  {
    if ((a2 & 0x8000000000000000) == 0
      && (*(unsigned char *)((*(void *)a2 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) != 0
      && (*(unsigned char *)((*(void *)a2 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) != 0)
    {
      *a1 = a2;
      swift_unownedRetain(a2, a2, a3, a4);
    }
    else
    {
      uint64_t v6 = (id *)malloc_type_malloc(8uLL, 0x29E333FBuLL);
      objc_initWeak(v6, (id)a2);
      *a1 = (unint64_t)v6 | 1;
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_1815B815C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

atomic_ullong **swift_unknownObjectUnownedAssign(atomic_ullong **a1, uint64_t obj, const char *a3, char *a4)
{
  if (obj)
  {
    if ((obj & 0x8000000000000000) == 0
      && (*(unsigned char *)((*(void *)obj & 0x7FFFFFFFFFFFF8) + 0x20) & 2) != 0
      && (*(unsigned char *)((*(void *)obj & 0x7FFFFFFFFFFFF8) + 0x28) & 2) != 0)
    {
      Class v11 = *a1;
      if (*a1)
      {
        double v12 = (id *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFFELL);
        if (v12)
        {
          objc_destroyWeak(v12);
          free(v12);
        }
        *a1 = (atomic_ullong *)obj;
        swift_unownedRetain(obj, obj, a3, a4);
      }
      else if (v11 != (atomic_ullong *)obj)
      {
        swift_unownedRetain(obj, obj, a3, a4);
        *a1 = (atomic_ullong *)obj;
        swift_unownedRelease(v11);
      }
    }
    else
    {
      uint64_t v6 = *a1;
      if (*a1)
      {
        objc_storeWeak((id *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFFELL), (id)obj);
      }
      else
      {
        swift_unownedRelease(v6);
        uint64_t v7 = (id *)malloc_type_malloc(8uLL, 0x29E333FBuLL);
        objc_initWeak(v7, (id)obj);
        *a1 = (atomic_ullong *)((unint64_t)v7 | 1);
      }
    }
  }
  else
  {
    uint64_t v8 = *a1;
    if (*a1)
    {
      if (v8)
      {
        unint64_t v9 = (void *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFFELL);
        if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          objc_destroyWeak((id *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFFELL));
          free(v9);
        }
      }
      else
      {
        swift_unownedRelease(v8);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void sub_1815B82A4(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void swift_unknownObjectUnownedDestroy(atomic_ullong **a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    if (v1)
    {
      int v2 = (void *)((unint64_t)v1 & 0xFFFFFFFFFFFFFFFELL);
      if (((unint64_t)v1 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        objc_destroyWeak((id *)((unint64_t)v1 & 0xFFFFFFFFFFFFFFFELL));
        free(v2);
      }
    }
    else
    {
      swift_unownedRelease(v1);
    }
  }
}

uint64_t swift_unknownObjectUnownedLoadStrong(uint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t WeakRetained = *a1;
  if (*a1)
  {
    if (WeakRetained)
    {
      uint64_t WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(WeakRetained & 0xFFFFFFFFFFFFFFFELL));
      if (!WeakRetained) {
        swift::swift_abortRetainUnowned(0, v5, v6, v7);
      }
    }
    else
    {
      swift_unownedRetainStrong(*a1, a2, a3, a4);
    }
  }
  return WeakRetained;
}

uint64_t swift_unknownObjectUnownedTakeStrong(uint64_t *a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    if (v4)
    {
      id v5 = (id *)(v4 & 0xFFFFFFFFFFFFFFFELL);
      id WeakRetained = objc_loadWeakRetained((id *)(v4 & 0xFFFFFFFFFFFFFFFELL));
      if (!WeakRetained) {
        swift::swift_abortRetainUnowned(0, v7, v8, v9);
      }
      uint64_t v4 = (uint64_t)WeakRetained;
      if (v5)
      {
        objc_destroyWeak(v5);
        free(v5);
      }
    }
    else
    {
      swift_unownedRetainStrongAndRelease(*a1, a2, a3, a4);
    }
  }
  return v4;
}

void *swift_unknownObjectUnownedCopyInit(void *a1, uint64_t *a2, const char *a3, char *a4)
{
  uint64_t v5 = *a2;
  if (*a2)
  {
    if (v5)
    {
      uint64_t v6 = (id *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v7 = (id *)malloc_type_malloc(8uLL, 0x29E333FBuLL);
      objc_copyWeak(v7, v6);
      *a1 = (unint64_t)v7 | 1;
    }
    else
    {
      *a1 = v5;
      swift_unownedRetain(v5, (uint64_t)a2, a3, a4);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_1815B8450(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void *swift_unknownObjectUnownedTakeInit(void *result, void *a2)
{
  atomic_ullong *result = *a2;
  return result;
}

atomic_ullong **swift_unknownObjectUnownedCopyAssign(atomic_ullong **a1, uint64_t *a2, const char *a3, char *a4)
{
  if (a1 != (atomic_ullong **)a2)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = *a1;
    if (*a2)
    {
      if (v7)
      {
        objc_destroyWeak((id *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFFELL));
        objc_copyWeak((id *)((unint64_t)*a1 & 0xFFFFFFFFFFFFFFFELL), (id *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
      }
      else
      {
        swift_unownedRelease(*a1);
        uint64_t v8 = (id *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
        unint64_t v9 = (id *)malloc_type_malloc(8uLL, 0x29E333FBuLL);
        objc_copyWeak(v9, v8);
        *a1 = (atomic_ullong *)((unint64_t)v9 | 1);
      }
    }
    else if (v7)
    {
      Class v10 = (id *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFFELL);
      if (v10)
      {
        objc_destroyWeak(v10);
        free(v10);
        uint64_t v6 = *a2;
      }
      *a1 = (atomic_ullong *)v6;
      swift_unownedRetain(v6, (uint64_t)a2, a3, a4);
    }
    else if ((atomic_ullong *)v6 != v7)
    {
      *a1 = (atomic_ullong *)v6;
      swift_unownedRetain(v6, (uint64_t)a2, a3, a4);
      swift_unownedRelease(v7);
    }
  }
  return a1;
}

void sub_1815B8554(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

atomic_ullong **swift_unknownObjectUnownedTakeAssign(atomic_ullong **a1, atomic_ullong **a2)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    if (v4)
    {
      uint64_t v5 = (void *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFFELL);
      if (((unint64_t)v4 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        objc_destroyWeak((id *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFFELL));
        free(v5);
      }
    }
    else
    {
      swift_unownedRelease(v4);
    }
  }
  *a1 = *a2;
  return a1;
}

BOOL swift_unknownObjectUnownedIsEqual(const void **a1, id a2, const char *a3, char *a4)
{
  unint64_t v5 = (unint64_t)*a1;
  if (!*a1) {
    return a2 == 0;
  }
  if (v5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v5 & 0xFFFFFFFFFFFFFFFELL));
    BOOL v6 = WeakRetained == a2;
  }
  else if ((id)v5 == a2)
  {
    swift_unownedCheck((uint64_t)a2, a2, a3, a4);
    return 1;
  }
  else
  {
    return 0;
  }
  return v6;
}

id *swift_unknownObjectWeakInit(id *location, atomic_ullong *a2)
{
  if ((uint64_t)a2 <= 0)
  {
    *location = a2;
  }
  else if ((*(unsigned char *)((*a2 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) != 0 {
         && (*(unsigned char *)((*a2 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) != 0)
  }
  {
    unint64_t v3 = swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::formWeakReference(a2 + 1);
    uint64_t v4 = (void *)(v3 | 1);
    if (!v3) {
      uint64_t v4 = 0;
    }
    *location = v4;
  }
  else
  {
    objc_initWeak(location, a2);
  }
  return location;
}

id *swift_unknownObjectWeakAssign(id *a1, atomic_ullong *a2)
{
  return a1;
}

void swift::WeakReference::unknownAssign(id *location, atomic_ullong *obj)
{
  if ((uint64_t)obj <= 0)
  {
    if (*location) {
      BOOL v7 = ((unint64_t)*location & 0x8000000000000001) == 1;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      unint64_t v8 = (unint64_t)*location;
      *location = 0;
      if ((v8 & 0x7FFFFFFFFFFFFFFELL) != 0)
      {
        _X6 = 0;
        _X7 = 0;
        __asm { CASP            X6, X7, X6, X7, [X8] }
        _X2 = _X6;
        _X5 = 0;
        __asm { CASP            X4, X5, X2, X3, [X8] }
        if (_X4 != _X6)
        {
          do
          {
            _X2 = _X4;
            _X7 = 0;
            __asm { CASP            X6, X7, X2, X3, [X8] }
            uint64_t v21 = _X6 ^ _X4;
            _X4 = _X6;
          }
          while (v21);
        }
      }
    }
    else
    {
      objc_destroyWeak(location);
    }
    *location = obj;
    return;
  }
  if ((*(unsigned char *)((*obj & 0x7FFFFFFFFFFFF8) + 0x20) & 2) != 0)
  {
    if (*location) {
      BOOL v22 = ((unint64_t)*location & 0x8000000000000001) == 1;
    }
    else {
      BOOL v22 = 1;
    }
    int v6 = v22;
    if (v6 == 1 && (*(_DWORD *)((*obj & 0x7FFFFFFFFFFFF8) + 0x28) & 2) != 0)
    {
      unint64_t v37 = swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::formWeakReference(obj + 1);
      unint64_t v38 = (void *)(v37 | 1);
      if (!v37) {
        unint64_t v38 = 0;
      }
      unint64_t v39 = (unint64_t)*location;
      *location = v38;
      if ((v39 & 0x7FFFFFFFFFFFFFFELL) != 0)
      {
        _X6 = 0;
        _X7 = 0;
        __asm { CASP            X6, X7, X6, X7, [X8] }
        _X2 = _X6;
        _X5 = 0;
        __asm { CASP            X4, X5, X2, X3, [X8] }
        if (_X4 != _X6)
        {
          do
          {
            _X2 = _X4;
            _X7 = 0;
            __asm { CASP            X6, X7, X2, X3, [X8] }
            uint64_t v49 = _X6 ^ _X4;
            _X4 = _X6;
          }
          while (v49);
        }
      }
      return;
    }
    int v4 = (*(_DWORD *)((*obj & 0x7FFFFFFFFFFFF8) + 0x28) >> 1) & 1;
    if (v6) {
      goto LABEL_38;
    }
    goto LABEL_32;
  }
  int v4 = 0;
  if (*location) {
    _ZF = ((unint64_t)*location & 0x8000000000000001) == 1;
  }
  else {
    _ZF = 1;
  }
  int v6 = _ZF;
  if ((v6 & 1) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0)
    {
      objc_storeWeak(location, obj);
      return;
    }
  }
LABEL_38:
  if (v6)
  {
    unint64_t v24 = (unint64_t)*location;
    *location = 0;
    if ((v24 & 0x7FFFFFFFFFFFFFFELL) != 0)
    {
      _X6 = 0;
      _X7 = 0;
      __asm { CASP            X6, X7, X6, X7, [X8] }
      _X2 = _X6;
      _X5 = 0;
      __asm { CASP            X4, X5, X2, X3, [X8] }
      if (_X4 != _X6)
      {
        do
        {
          _X2 = _X4;
          _X7 = 0;
          __asm { CASP            X6, X7, X2, X3, [X8] }
          uint64_t v34 = _X6 ^ _X4;
          _X4 = _X6;
        }
        while (v34);
      }
    }
    if (v4) {
      goto LABEL_43;
    }
  }
  else
  {
    objc_destroyWeak(location);
    if (v4)
    {
LABEL_43:
      unint64_t v35 = swift::RefCounts<swift::RefCountBitsT<(swift::RefCountInlinedness)1>>::formWeakReference(obj + 1);
      unint64_t v36 = (void *)(v35 | 1);
      if (!v35) {
        unint64_t v36 = 0;
      }
      *location = v36;
      return;
    }
  }

  objc_initWeak(location, obj);
}

id swift::WeakReference::unknownLoadStrong(id *this)
{
  unint64_t v1 = (unint64_t)*this;
  if (*this) {
    _ZF = ((unint64_t)*this & 0x8000000000000001) == 1;
  }
  else {
    _ZF = 1;
  }
  if (_ZF)
  {
    uint64_t v3 = v1 & 0x7FFFFFFFFFFFFFFELL;
    if ((v1 & 0x7FFFFFFFFFFFFFFELL) != 0)
    {
      _X4 = 0;
      _X5 = 0;
      uint64_t v6 = 0;
      __asm { CASP            X4, X5, X4, X5, [X0] }
      if ((_X4 & 0x100000000) != 0) {
        return (id)v6;
      }
      unint64_t v11 = 0;
      _X3 = 0;
      while (1)
      {
        _X6 = _X4 + 0x200000000;
        if (_X4 + 0x200000000 < 0) {
          break;
        }
        unint64_t v14 = _X3 | (v11 << 32);
        _X3 = (char *)v14;
        __asm { CASP            X2, X3, X6, X7, [X0] }
        if (_X2 == _X4) {
          return *(id *)v3;
        }
        unint64_t v11 = HIDWORD(v14);
        _X4 = _X2;
        if ((_X2 & 0x100000000) != 0) {
          return 0;
        }
      }
      if (_X4 == -1
        || swift::RefCounts<swift::SideTableRefCountBits>::tryIncrementSlow((swift *)(v3 + 16), _X4, (const char *)(_X3 | (v11 << 32)), _X3))
      {
        return *(id *)v3;
      }
    }
    return 0;
  }

  return objc_loadWeakRetained(this);
}

id swift_unknownObjectWeakTakeStrong(id *location, uint64_t a2, uint64_t a3, char *a4)
{
  id v5 = *location;
  if (*location) {
    BOOL v6 = ((unint64_t)*location & 0x8000000000000001) == 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    *location = 0;
    return (id)swift::WeakReference::nativeTakeStrongFromBits((uint64_t)location, (uint64_t)v5, a3, a4);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained(location);
    objc_destroyWeak(location);
    return WeakRetained;
  }
}

void swift_unknownObjectWeakDestroy(id *a1)
{
  if (*a1) {
    _ZF = ((unint64_t)*a1 & 0x8000000000000001) == 1;
  }
  else {
    _ZF = 1;
  }
  if (_ZF)
  {
    unint64_t v2 = (unint64_t)*a1;
    *a1 = 0;
    if ((v2 & 0x7FFFFFFFFFFFFFFELL) != 0)
    {
      _X6 = 0;
      _X7 = 0;
      __asm { CASP            X6, X7, X6, X7, [X8] }
      _X2 = _X6;
      _X5 = 0;
      __asm { CASP            X4, X5, X2, X3, [X8] }
      if (_X4 != _X6)
      {
        do
        {
          _X2 = _X4;
          _X7 = 0;
          __asm { CASP            X6, X7, X2, X3, [X8] }
          uint64_t v15 = _X6 ^ _X4;
          _X4 = _X6;
        }
        while (v15);
      }
    }
  }
  else
  {
    objc_destroyWeak(a1);
  }
}

id *swift_unknownObjectWeakCopyInit(id *to, id *a2)
{
  if (*a2) {
    _ZF = ((unint64_t)*a2 & 0x8000000000000001) == 1;
  }
  else {
    _ZF = 1;
  }
  if (_ZF)
  {
    uint64_t v4 = (unint64_t)*a2 & 0x7FFFFFFFFFFFFFFELL;
    if (v4)
    {
      _X0 = 0;
      _X1 = 0;
      uint64_t v7 = 0;
      __asm { CASP            X0, X1, X0, X1, [X10] }
      if ((_X0 & 0x100000000) == 0)
      {
        _X0 = 0;
        _X1 = 0;
        __asm { CASP            X0, X1, X0, X1, [X10] }
        unint64_t v15 = 0;
        _X2 = _X0;
        while (1)
        {
          uint64_t v17 = (char *)(_X1 + 1);
          unint64_t v18 = _X1 | (v15 << 32);
          _X1 = v18;
          __asm { CASP            X0, X1, X2, X3, [X9]; this }
          if (_X0 == _X2) {
            break;
          }
          unint64_t v15 = HIDWORD(v18);
          _X2 = _X0;
          if (v18 == -1) {
            swift::swift_abortWeakRetainOverflow(_X0, v18, (const char *)_X0, v17);
          }
        }
        uint64_t v7 = v4;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    long long v20 = (void *)(v7 | 1);
    if (!v7) {
      long long v20 = 0;
    }
    *to = v20;
  }
  else
  {
    objc_copyWeak(to, a2);
  }
  return to;
}

id *swift_unknownObjectWeakTakeInit(id *to, id *a2)
{
  if (*a2) {
    BOOL v3 = ((unint64_t)*a2 & 0x8000000000000001) == 1;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    id v4 = *a2;
    *a2 = 0;
    *to = v4;
  }
  else
  {
    objc_moveWeak(to, a2);
  }
  return to;
}

id *swift_unknownObjectWeakCopyAssign(id *a1, id *a2)
{
  return a1;
}

void swift::WeakReference::unknownCopyAssign(id *location, id *from)
{
  if (location != from)
  {
    if (*location) {
      _ZF = ((unint64_t)*location & 0x8000000000000001) == 1;
    }
    else {
      _ZF = 1;
    }
    if (_ZF)
    {
      unint64_t v5 = (unint64_t)*location;
      *location = 0;
      if ((v5 & 0x7FFFFFFFFFFFFFFELL) != 0)
      {
        _X6 = 0;
        _X7 = 0;
        __asm { CASP            X6, X7, X6, X7, [X8] }
        _X2 = _X6;
        _X5 = 0;
        __asm { CASP            X4, X5, X2, X3, [X8] }
        if (_X4 != _X6)
        {
          do
          {
            _X2 = _X4;
            _X7 = 0;
            __asm { CASP            X6, X7, X2, X3, [X8] }
            uint64_t v18 = _X6 ^ _X4;
            _X4 = _X6;
          }
          while (v18);
        }
      }
    }
    else
    {
      objc_destroyWeak(location);
    }
    unint64_t v19 = (unint64_t)*from;
    if (!*from || (v19 & 0x8000000000000001) == 1)
    {
      uint64_t v20 = v19 & 0x7FFFFFFFFFFFFFFELL;
      if (v20)
      {
        _X0 = 0;
        _X1 = 0;
        uint64_t v23 = 0;
        __asm { CASP            X0, X1, X0, X1, [X10] }
        if ((_X0 & 0x100000000) == 0)
        {
          _X0 = 0;
          _X1 = 0;
          __asm { CASP            X0, X1, X0, X1, [X10] }
          unint64_t v28 = 0;
          _X2 = _X0;
          while (1)
          {
            unint64_t v30 = (char *)(_X1 + 1);
            unint64_t v31 = _X1 | (v28 << 32);
            _X1 = v31;
            __asm { CASP            X0, X1, X2, X3, [X9]; this }
            if (_X0 == _X2) {
              break;
            }
            unint64_t v28 = HIDWORD(v31);
            _X2 = _X0;
            if (v31 == -1) {
              swift::swift_abortWeakRetainOverflow(_X0, v31, (const char *)_X0, v30);
            }
          }
          uint64_t v23 = v20;
        }
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v33 = (void *)(v23 | 1);
      if (!v23) {
        uint64_t v33 = 0;
      }
      *location = v33;
    }
    else
    {
      objc_copyWeak(location, from);
    }
  }
}

id *swift_unknownObjectWeakTakeAssign(id *a1, id *a2)
{
  return a1;
}

void swift::WeakReference::unknownTakeAssign(id *to, id *from)
{
  if (to != from)
  {
    if (*to) {
      _ZF = ((unint64_t)*to & 0x8000000000000001) == 1;
    }
    else {
      _ZF = 1;
    }
    if (_ZF)
    {
      unint64_t v5 = (unint64_t)*to;
      *to = 0;
      if ((v5 & 0x7FFFFFFFFFFFFFFELL) != 0)
      {
        _X6 = 0;
        _X7 = 0;
        __asm { CASP            X6, X7, X6, X7, [X8] }
        _X2 = _X6;
        _X5 = 0;
        __asm { CASP            X4, X5, X2, X3, [X8] }
        if (_X4 != _X6)
        {
          do
          {
            _X2 = _X4;
            _X7 = 0;
            __asm { CASP            X6, X7, X2, X3, [X8] }
            uint64_t v18 = _X6 ^ _X4;
            _X4 = _X6;
          }
          while (v18);
        }
      }
    }
    else
    {
      objc_destroyWeak(to);
    }
    if (!*from || ((unint64_t)*from & 0x8000000000000001) == 1)
    {
      id v19 = *from;
      *from = 0;
      *to = v19;
    }
    else
    {
      objc_moveWeak(to, from);
    }
  }
}

uint64_t swift::objectConformsToObjCProtocol(void *a1, const char *a2)
{
  return [a1 conformsToProtocol:(unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL];
}

Class *swift_dynamicCastTypeToObjCProtocolUnconditional(Class *cls, uint64_t a2, Protocol **a3)
{
  uint64_t v4 = a2;
  Class v6 = 0;
  Class v7 = *cls;
  if ((unint64_t)*cls > 0x7FF) {
    LODWORD(v7) = 0;
  }
  if ((int)v7 > 1279)
  {
    if ((v7 - 1280) >= 2) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  if (!v7)
  {
    Class v6 = (Class)cls;
    goto LABEL_14;
  }
  if (v7 != 773)
  {
    if (v7 != 1024)
    {
LABEL_9:
      swift::nameForMetadata(&v21, cls, 1);
      int v8 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = v21.__r_.__value_.__r.__words[0];
      Class v10 = *a3;
      Name = (char *)protocol_getName(v10);
      if (v8 >= 0) {
        uint64_t v13 = &v21;
      }
      else {
        uint64_t v13 = (std::string *)v9;
      }
      swift::swift_dynamicCastFailure((swift *)cls, v13, (const char *)v10, Name, 0, v12);
    }
LABEL_14:
    if (!a2) {
      return cls;
    }
    goto LABEL_15;
  }
  Class v6 = cls[1];
  if (!a2) {
    return cls;
  }
  do
  {
LABEL_15:
    if (([(objc_class *)v6 conformsToProtocol:*a3] & 1) == 0)
    {
      swift::nameForMetadata(&v21, cls, 1);
      int v15 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
      std::string::size_type v16 = v21.__r_.__value_.__r.__words[0];
      uint64_t v17 = *a3;
      uint64_t v18 = (char *)protocol_getName(v17);
      if (v15 >= 0) {
        uint64_t v20 = &v21;
      }
      else {
        uint64_t v20 = (std::string *)v16;
      }
      swift::swift_dynamicCastFailure((swift *)cls, v20, (const char *)v17, v18, 0, v19);
    }
    ++a3;
    --v4;
  }
  while (v4);
  return cls;
}

void sub_1815B9158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *swift_dynamicCastTypeToObjCProtocolConditional(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  Class v6 = 0;
  uint64_t v7 = *a1;
  if ((unint64_t)*a1 > 0x7FF) {
    LODWORD(v7) = 0;
  }
  if ((int)v7 > 1279)
  {
    if ((v7 - 1280) >= 2) {
      return v6;
    }
    goto LABEL_7;
  }
  switch(v7)
  {
    case 0:
      Class v6 = a1;
      if (a2) {
        goto LABEL_8;
      }
      return a1;
    case 0x305:
      Class v6 = (uint64_t *)a1[1];
      if (!a2) {
        return a1;
      }
LABEL_8:
      while (([v6 conformsToProtocol:*a3] & 1) != 0)
      {
        ++a3;
        if (!--v4) {
          return a1;
        }
      }
      return 0;
    case 0x400:
LABEL_7:
      if (a2) {
        goto LABEL_8;
      }
      return a1;
  }
  return v6;
}

void *swift_dynamicCastObjCProtocolUnconditional(void *a1, uint64_t a2, Protocol **a3)
{
  if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      if (([a1 conformsToProtocol:*a3] & 1) == 0)
      {
        uint64_t Class = object_getClass(a1);
        Name = class_getName(Class);
        std::string::size_type v9 = *a3;
        Class v10 = (char *)protocol_getName(v9);
        swift::swift_dynamicCastFailure(Class, Name, (const char *)v9, v10, 0, v11);
      }
      ++a3;
      --v5;
    }
    while (v5);
  }
  return a1;
}

swift::runtime::bincompat *swift_dynamicCastObjCProtocolConditional(swift::runtime::bincompat *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1;
  if ((swift::runtime::bincompat::useLegacyObjCBoxingInCasting(a1) & 1) != 0 || !swift::getAsSwiftValue(v5, v6))
  {
    if (!a2) {
      return v5;
    }
    while (([(swift::runtime::bincompat *)v5 conformsToProtocol:*a3] & 1) != 0)
    {
      ++a3;
      if (!--a2) {
        return v5;
      }
    }
  }
  return 0;
}

uint64_t swift_instantiateObjCClass(objc_class *a1)
{
  class_getSuperclass(a1);
  objc_opt_class();

  return MEMORY[0x1F41817D8](a1, &swift_instantiateObjCClass::ImageInfo);
}

uint64_t swift_getInitializedObjCClass(uint64_t a1)
{
  return a1;
}

BOOL swift_isUniquelyReferenced_nonNull_native(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if ((v1 & 0x8000000000000000) != 0)
  {
    if (v1 == -1) {
      return 0;
    }
    _X0 = 0;
    _X1 = 0;
    __asm { CASP            X0, X1, X0, X1, [X8] }
    uint64_t v2 = _X0 & 0x100000000 | (_X0 >> 33);
  }
  else
  {
    uint64_t v2 = HIDWORD(v1);
  }
  return v2 == 0;
}

BOOL swift_isUniquelyReferenced_native(BOOL result)
{
  if (result)
  {
    unint64_t v1 = *(void *)(result + 8);
    if ((v1 & 0x8000000000000000) != 0)
    {
      if (v1 == -1) {
        return 0;
      }
      _X0 = 0;
      _X1 = 0;
      __asm { CASP            X0, X1, X0, X1, [X8] }
      uint64_t v2 = _X0 & 0x100000000 | (_X0 >> 33);
    }
    else
    {
      uint64_t v2 = HIDWORD(v1);
    }
    return v2 == 0;
  }
  return result;
}

BOOL swift_isUniquelyReferencedNonObjC_nonNull(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0
    || (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) == 0
    || (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) == 0)
  {
    return 0;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 0x8000000000000000) != 0)
  {
    if (v2 == -1) {
      return 0;
    }
    _X0 = 0;
    _X1 = 0;
    __asm { CASP            X0, X1, X0, X1, [X8] }
    uint64_t v3 = _X0 & 0x100000000 | (_X0 >> 33);
  }
  else
  {
    uint64_t v3 = HIDWORD(v2);
  }
  return v3 == 0;
}

uint64_t swift_isUniquelyReferenced_nonNull(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0) {
    return 0;
  }
  if ((*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) == 0
    || (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) == 0)
  {
    return MEMORY[0x1F4181770]();
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 0x8000000000000000) != 0)
  {
    if (v2 == -1) {
      return 0;
    }
    _X0 = 0;
    _X1 = 0;
    __asm { CASP            X0, X1, X0, X1, [X8] }
    uint64_t v3 = _X0 & 0x100000000 | (_X0 >> 33);
  }
  else
  {
    uint64_t v3 = HIDWORD(v2);
  }
  return v3 == 0;
}

BOOL swift_isUniquelyReferencedNonObjC(uint64_t a1)
{
  if (a1 < 1
    || (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) == 0
    || (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) == 0)
  {
    return 0;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 0x8000000000000000) != 0)
  {
    if (v2 == -1) {
      return 0;
    }
    _X0 = 0;
    _X1 = 0;
    __asm { CASP            X0, X1, X0, X1, [X8] }
    uint64_t v3 = _X0 & 0x100000000 | (_X0 >> 33);
  }
  else
  {
    uint64_t v3 = HIDWORD(v2);
  }
  return v3 == 0;
}

uint64_t swift_isUniquelyReferenced(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if ((*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) == 0
    || (*(unsigned char *)((*(void *)a1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) == 0)
  {
    return MEMORY[0x1F4181770]();
  }
  unint64_t v1 = *(void *)(a1 + 8);
  if ((v1 & 0x8000000000000000) != 0)
  {
    if (v1 != -1)
    {
      _X0 = 0;
      _X1 = 0;
      __asm { CASP            X0, X1, X0, X1, [X8] }
      uint64_t v2 = _X0 & 0x100000000 | (_X0 >> 33);
      return v2 == 0;
    }
    return 0;
  }
  uint64_t v2 = HIDWORD(v1);
  return v2 == 0;
}

BOOL swift_isUniquelyReferencedNonObjC_nonNull_bridgeObject(uint64_t a1)
{
  if (a1 < 0) {
    return 0;
  }
  unint64_t v1 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8);
  if ((a1 & 0x4000000000000000) != 0
    && ((*(unsigned char *)((*v1 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) == 0
     || (*(unsigned char *)((*v1 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) == 0))
  {
    return 0;
  }
  unint64_t v2 = *(void *)((a1 & 0x8FFFFFFFFFFFFFF8) + 8);
  if ((v2 & 0x8000000000000000) != 0)
  {
    if (v2 != -1)
    {
      _X0 = 0;
      _X1 = 0;
      __asm { CASP            X0, X1, X0, X1, [X8] }
      uint64_t v3 = _X0 & 0x100000000 | (_X0 >> 33);
      return v3 == 0;
    }
    return 0;
  }
  uint64_t v3 = HIDWORD(v2);
  return v3 == 0;
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject(uint64_t a1)
{
  if (a1 < 0) {
    return 0;
  }
  unint64_t v2 = (void *)(a1 & 0x8FFFFFFFFFFFFFF8);
  if ((a1 & 0x8000000000000000) == 0
    && (a1 & 0x4000000000000000) != 0
    && ((*(unsigned char *)((*v2 & 0x7FFFFFFFFFFFF8) + 0x20) & 2) == 0
     || (*(unsigned char *)((*v2 & 0x7FFFFFFFFFFFF8) + 0x28) & 2) == 0))
  {
    return MEMORY[0x1F4181770]();
  }
  unint64_t v3 = v2[1];
  if ((v3 & 0x8000000000000000) != 0)
  {
    if (v3 != -1)
    {
      _X0 = 0;
      _X1 = 0;
      __asm { CASP            X0, X1, X0, X1, [X8] }
      uint64_t v4 = _X0 & 0x100000000 | (_X0 >> 33);
      return v4 == 0;
    }
    return 0;
  }
  uint64_t v4 = HIDWORD(v3);
  return v4 == 0;
}

uint64_t swift_isEscapingClosureAtFileLocation(uint64_t a1, const char *a2, int a3, int a4, int a5, int a6)
{
  if (!a1) {
    return 0;
  }
  unint64_t v6 = *(void *)(a1 + 8);
  if ((v6 & 0x8000000000000000) != 0)
  {
    if (v6 != -1)
    {
      _X6 = 0;
      _X7 = 0;
      __asm { CASP            X6, X7, X6, X7, [X8] }
      if (!(_X6 >> 33) && (_X6 & 0x100000000) == 0) {
        return 0;
      }
    }
  }
  else if (!HIDWORD(v6))
  {
    return 0;
  }
  unint64_t v14 = "closure argument passed as @noescape to Objective-C has escaped";
  if (!a6) {
    unint64_t v14 = "closure argument was escaped in withoutActuallyEscaping block";
  }
  BOOL v22 = 0;
  int v15 = 63;
  if (!a6) {
    int v15 = 61;
  }
  swift_asprintf(&v22, "%.*s: file %.*s, line %u, column %u \n", v15, v14, a3, a2, a4, a5);
  swift::printCurrentBacktrace((swift *)2);
  int shouldReportFatalErrorsToDebugger = _swift_shouldReportFatalErrorsToDebugger();
  uint64_t v17 = v22;
  if (shouldReportFatalErrorsToDebugger)
  {
    memset(&v20[2], 0, 48);
    uint64_t v21 = 0;
    v20[0] = xmmword_1E4FC7908;
    v20[1] = *(_OWORD *)&off_1E4FC7918;
    _swift_reportToDebugger(1, v22, v20);
  }
  uint64_t v18 = 1;
  swift_reportError(1, v17);
  free(v17);
  return v18;
}

uint64_t _swift_getSwiftClassInstanceExtents(uint64_t a1)
{
  if (*(void *)a1 <= 0x7FFuLL && *(void *)a1 != 0) {
    a1 = *(void *)(a1 + 8);
  }
  return *(unsigned int *)(a1 + 44);
}

uint64_t _swift_getObjCClassInstanceExtents(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if (*(void *)a1 <= 0x7FFuLL && *(void *)a1 != 0) {
      a1 = *(void *)(a1 + 8);
    }
    return *(unsigned int *)(a1 + 44);
  }
  else
  {
    class_getInstanceSize((Class)a1);
    return 0;
  }
}

void swift_objc_swift3ImplicitObjCEntrypoint(id a1, const char *a2, const char *a3, unint64_t a4, uint64_t a5, uint64_t a6, atomic_uchar *a7)
{
  if ((atomic_exchange(a7, 1u) & 1) == 0)
  {
    if (swift::runtime::environment::initializeToken != -1) {
      dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
    }
    unsigned int v13 = swift::runtime::environment::SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT_variable;
    if (swift::runtime::environment::SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT_variable)
    {
      BOOL v27 = swift::runtime::environment::SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT_variable != 1;
      uint64_t Class = object_getClass(a1);
      isMetauint64_t Class = class_isMetaClass(Class);
      BOOL v16 = v13 > 2;
      BOOL v17 = v13 > 2;
      if (v16) {
        uint64_t v18 = (void (*)(BOOL, const char *, ...))swift::fatalError;
      }
      else {
        uint64_t v18 = (void (*)(BOOL, const char *, ...))swift::warning;
      }
      size_t v26 = v18;
      if (a4 >= 0x7FFFFFFF) {
        LODWORD(a4) = 0x7FFFFFFF;
      }
      unint64_t v36 = 0;
      unint64_t v37 = 0;
      id v19 = (objc_class *)objc_opt_class();
      Name = class_getName(v19);
      int v25 = sel_getName(a2);
      uint64_t v20 = 45;
      if (isMetaClass) {
        uint64_t v20 = 43;
      }
      swift_asprintf(&v37, "implicit Objective-C entrypoint %c[%s %s] is deprecated and will be removed in Swift 4", v20, Name, v25);
      swift_asprintf(&v36, "%*s", a4, a3);
      uint64_t v21 = v36;
      v35[0] = v36;
      v35[1] = a5;
      void v35[2] = a6;
      v35[3] = a5;
      v35[4] = a6;
      v35[5] = "@objc ";
      v34[0] = "add '@objc' to expose this Swift declaration to Objective-C";
      v34[1] = 1;
      uint64_t v34[2] = v35;
      v28[0] = 2;
      v28[1] = "implicit-objc-entrypoint";
      void v28[2] = 0;
      void v28[3] = 1;
      long long v29 = 0u;
      long long v30 = 0u;
      uint64_t v31 = 0;
      uint64_t v32 = 1;
      uint64_t v33 = v34;
      uint64_t v22 = (char *)swift::warning == (char *)swift::fatalError || v17;
      uint64_t v23 = v37;
      _swift_reportToDebugger(v22, v37, v28);
      v26(v27, "*** %s:%zu:%zu: %s; add explicit '@objc' to the declaration to emit the Objective-C entrypoint in Swift 4 and su"
        "ppress this message\n",
        v21,
        a5,
        a6,
        v23);
      free(v23);
      free(v21);
    }
  }
}

uint64_t swift::getNSObjectMetadata(swift *this)
{
  if (qword_1E8ECFB88 != -1) {
    dispatch_once_f(&qword_1E8ECFB88, &swift::getNSObjectMetadata(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)swift::getNSObjectMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return swift::getNSObjectMetadata(void)::$_0::operator() const(void)::TheLazy;
}

uint64_t swift::getNSStringMetadata(swift *this)
{
  if (qword_1EB208E48 != -1) {
    dispatch_once_f(&qword_1EB208E48, &swift::getNSStringMetadata(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)swift::getNSStringMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return swift::getNSStringMetadata(void)::$_0::operator() const(void)::TheLazy;
}

uint64_t swift::hashable_support::getNSStringHashableConformance(swift::hashable_support *this)
{
  if (qword_1EB208E58 != -1) {
    dispatch_once_f(&qword_1EB208E58, &swift::hashable_support::getNSStringHashableConformance(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)swift::hashable_support::getNSStringHashableConformance(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  return swift::hashable_support::getNSStringHashableConformance(void)::$_0::operator() const(void)::TheLazy;
}

uint64_t swift::getRootSuperclass(swift *this)
{
  if (qword_1EB208DF8 != -1) {
    dispatch_once_f(&qword_1EB208DF8, &swift::getRootSuperclass(void)::SwiftObjectClass, (dispatch_function_t)swift::getRootSuperclass(void)::$_0::__invoke);
  }
  return swift::getRootSuperclass(void)::SwiftObjectClass;
}

atomic_ullong *swift_dynamicCastObjCClass(void *a1, uint64_t a2)
{
  swift_once(&swift_dynamicCastObjCClass::Predicate, (dispatch_function_t)swift_dynamicCastObjCClass::$_0::__invoke, 0);
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, atomic_ullong *(*)(void *, uint64_t)))swift_dynamicCastObjCClass::Override;
  if (swift_dynamicCastObjCClass::Override)
  {
    return (atomic_ullong *)v4(a1, a2, swift_dynamicCastObjCClassImpl);
  }
  else
  {
    return swift_dynamicCastObjCClassImpl(a1, a2);
  }
}

atomic_ullong *swift_dynamicCastObjCClassImpl(void *a1, uint64_t a2)
{
  unint64_t v2 = a1;
  std::string::size_type v9 = a1;
  if (a1)
  {
    isKindOfClass Class = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) == 0)
    {
      if ((swift::getNSErrorClass((swift *)isKindOfClass) == a2 || objc_opt_class() == a2)
        && (Class Class = object_getClass(v2),
            unint64_t ObjCClassMetadata = swift_getObjCClassMetadata((unint64_t)Class),
            (uint64_t ErrorWitness = swift::findErrorWitness(ObjCClassMetadata)) != 0))
      {
        return swift::dynamicCastValueToNSError((uint64_t)&v9, ObjCClassMetadata, ErrorWitness, 2);
      }
      else
      {
        return 0;
      }
    }
  }
  return (atomic_ullong *)v2;
}

atomic_ullong *swift_dynamicCastObjCClassUnconditional(void *a1, Class *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_once(&swift_dynamicCastObjCClassUnconditional::Predicate, (dispatch_function_t)swift_dynamicCastObjCClassUnconditional::$_0::__invoke, 0);
  Class v10 = (uint64_t (*)(void *, Class *, uint64_t, uint64_t, uint64_t, atomic_ullong *(*)(void *, Class *)))swift_dynamicCastObjCClassUnconditional::Override;
  if (swift_dynamicCastObjCClassUnconditional::Override)
  {
    return (atomic_ullong *)v10(a1, a2, a3, a4, a5, swift_dynamicCastObjCClassUnconditionalImpl);
  }
  else
  {
    return swift_dynamicCastObjCClassUnconditionalImpl(a1, a2);
  }
}

atomic_ullong *swift_dynamicCastObjCClassUnconditionalImpl(void *a1, Class *a2)
{
  unint64_t v2 = a1;
  Class v10 = a1;
  if (a1)
  {
    isKindOfClass Class = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) == 0)
    {
      if ((Class *)swift::getNSErrorClass((swift *)isKindOfClass) != a2 && (Class *)objc_opt_class() != a2
        || (Class v5 = object_getClass(v2),
            unint64_t ObjCClassMetadata = swift_getObjCClassMetadata((unint64_t)v5),
            (uint64_t ErrorWitness = swift::findErrorWitness(ObjCClassMetadata)) == 0))
      {
        Class Class = (Class *)object_getClass(v2);
        swift::swift_dynamicCastFailure(Class, a2, 0);
      }
      return swift::dynamicCastValueToNSError((uint64_t)&v10, ObjCClassMetadata, ErrorWitness, 2);
    }
  }
  return (atomic_ullong *)v2;
}

uint64_t swift_dynamicCastObjCClassMetatype(void *a1, uint64_t a2)
{
  swift_once(&swift_dynamicCastObjCClassMetatype::Predicate, (dispatch_function_t)swift_dynamicCastObjCClassMetatype::$_0::__invoke, 0);
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void *(*)(void *, uint64_t)))swift_dynamicCastObjCClassMetatype::Override;
  if (swift_dynamicCastObjCClassMetatype::Override)
  {
    return v4(a1, a2, swift_dynamicCastObjCClassMetatypeImpl);
  }
  else if ([a1 isSubclassOfClass:a2])
  {
    return (uint64_t)a1;
  }
  else
  {
    return 0;
  }
}

void *swift_dynamicCastObjCClassMetatypeImpl(void *a1, uint64_t a2)
{
  if ([a1 isSubclassOfClass:a2]) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t swift_dynamicCastObjCClassMetatypeUnconditional(Class *a1, Class *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_once(&swift_dynamicCastObjCClassMetatypeUnconditional::Predicate, (dispatch_function_t)swift_dynamicCastObjCClassMetatypeUnconditional::$_0::__invoke, 0);
  Class v10 = (uint64_t (*)(Class *, Class *, uint64_t, uint64_t, uint64_t, Class *(*)(Class *, Class *)))swift_dynamicCastObjCClassMetatypeUnconditional::Override;
  if (swift_dynamicCastObjCClassMetatypeUnconditional::Override)
  {
    return v10(a1, a2, a3, a4, a5, swift_dynamicCastObjCClassMetatypeUnconditionalImpl);
  }
  else
  {
    if (([(Class *)a1 isSubclassOfClass:a2] & 1) == 0) {
      swift::swift_dynamicCastFailure(a1, a2, 0);
    }
    return (uint64_t)a1;
  }
}

Class *swift_dynamicCastObjCClassMetatypeUnconditionalImpl(Class *a1, Class *a2)
{
  if (![(Class *)a1 isSubclassOfClass:a2]) {
    swift::swift_dynamicCastFailure(a1, a2, 0);
  }
  return a1;
}

uint64_t swift_dynamicCastForeignClassMetatype(uint64_t a1, uint64_t a2)
{
  swift_once(&swift_dynamicCastForeignClassMetatype::Predicate, (dispatch_function_t)swift_dynamicCastForeignClassMetatype::$_0::__invoke, 0);
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)()))swift_dynamicCastForeignClassMetatype::Override;
  if (!swift_dynamicCastForeignClassMetatype::Override) {
    return a1;
  }

  return v4(a1, a2, swift_dynamicCastForeignClassMetatypeImpl);
}

uint64_t swift_dynamicCastForeignClassMetatypeUnconditional(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_once(&swift_dynamicCastForeignClassMetatypeUnconditional::Predicate, (dispatch_function_t)swift_dynamicCastForeignClassMetatypeUnconditional::$_0::__invoke, 0);
  Class v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)()))swift_dynamicCastForeignClassMetatypeUnconditional::Override;
  if (!swift_dynamicCastForeignClassMetatypeUnconditional::Override) {
    return a1;
  }

  return v10(a1, a2, a3, a4, a5, swift_dynamicCastForeignClassMetatypeUnconditionalImpl);
}

uint64_t swift_dynamicCastForeignClass(uint64_t a1, uint64_t a2)
{
  swift_once(&swift_dynamicCastForeignClass::Predicate, (dispatch_function_t)swift_dynamicCastForeignClass::$_0::__invoke, 0);
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)()))swift_dynamicCastForeignClass::Override;
  if (!swift_dynamicCastForeignClass::Override) {
    return a1;
  }

  return v4(a1, a2, swift_dynamicCastForeignClassImpl);
}

uint64_t swift_dynamicCastForeignClassUnconditional(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_once(&swift_dynamicCastForeignClassUnconditional::Predicate, (dispatch_function_t)swift_dynamicCastForeignClassUnconditional::$_0::__invoke, 0);
  Class v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)()))swift_dynamicCastForeignClassUnconditional::Override;
  if (!swift_dynamicCastForeignClassUnconditional::Override) {
    return a1;
  }

  return v10(a1, a2, a3, a4, a5, swift_dynamicCastForeignClassUnconditionalImpl);
}

unint64_t swift::getNSObjectMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(unint64_t *a1)
{
  unint64_t v2 = objc_opt_class();
  unint64_t result = swift_getObjCClassMetadata(v2);
  *a1 = result;
  return result;
}

unint64_t swift::getNSStringMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(unint64_t *a1)
{
  Class v2 = objc_lookUpClass("NSString");
  unint64_t result = swift_getObjCClassMetadata((unint64_t)v2);
  *a1 = result;
  return result;
}

uint64_t swift::hashable_support::getNSStringHashableConformance(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  if (qword_1EB208E48 != -1) {
    dispatch_once_f(&qword_1EB208E48, &swift::getNSStringMetadata(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)swift::getNSStringMetadata(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  uint64_t result = swift_conformsToProtocolCommon(swift::getNSStringMetadata(void)::$_0::operator() const(void)::TheLazy, (uint64_t)&protocol descriptor for Hashable);
  *a1 = result;
  return result;
}

uint64_t swift::getRootSuperclass(void)::$_0::__invoke(uint64_t *a1)
{
  uint64_t result = objc_opt_class();
  *a1 = result;
  return result;
}

void *swift_dynamicCastObjCClass::$_0::__invoke(swift_dynamicCastObjCClass::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastObjCClass(this);
  swift_dynamicCastObjCClass::Override = result;
  return result;
}

void *swift_dynamicCastObjCClassUnconditional::$_0::__invoke(swift_dynamicCastObjCClassUnconditional::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastObjCClassUnconditional(this);
  swift_dynamicCastObjCClassUnconditional::Override = result;
  return result;
}

void *swift_dynamicCastObjCClassMetatype::$_0::__invoke(swift_dynamicCastObjCClassMetatype::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastObjCClassMetatype(this);
  swift_dynamicCastObjCClassMetatype::Override = result;
  return result;
}

void *swift_dynamicCastObjCClassMetatypeUnconditional::$_0::__invoke(swift_dynamicCastObjCClassMetatypeUnconditional::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastObjCClassMetatypeUnconditional(this);
  swift_dynamicCastObjCClassMetatypeUnconditional::Override = result;
  return result;
}

void *swift_dynamicCastForeignClassMetatype::$_0::__invoke(swift_dynamicCastForeignClassMetatype::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastForeignClassMetatype(this);
  swift_dynamicCastForeignClassMetatype::Override = result;
  return result;
}

void *swift_dynamicCastForeignClassMetatypeUnconditional::$_0::__invoke(swift_dynamicCastForeignClassMetatypeUnconditional::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastForeignClassMetatypeUnconditional(this);
  swift_dynamicCastForeignClassMetatypeUnconditional::Override = result;
  return result;
}

void *swift_dynamicCastForeignClass::$_0::__invoke(swift_dynamicCastForeignClass::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastForeignClass(this);
  swift_dynamicCastForeignClass::Override = result;
  return result;
}

void *swift_dynamicCastForeignClassUnconditional::$_0::__invoke(swift_dynamicCastForeignClassUnconditional::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_dynamicCastForeignClassUnconditional(this);
  swift_dynamicCastForeignClassUnconditional::Override = result;
  return result;
}

void *std::__hash_table<objc_class *,std::hash<objc_class *>,std::equal_to<objc_class *>,std::allocator<objc_class *>>::__emplace_unique_key_args<objc_class *,objc_class * const&>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = HIDWORD(*a2);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x18uLL);
  *unint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_30;
    }
    if (prime < v9)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v9) {
LABEL_30:
      }
        std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *unint64_t i = *v24;
LABEL_55:
    *unint64_t v24 = i;
    goto LABEL_56;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1815BA880(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t SwiftValueHeader::getHashableBaseType(atomic_ullong *this)
{
  unint64_t explicit = atomic_load_explicit(this + 1, memory_order_acquire);
  if (!explicit)
  {
    uint64_t v3 = swift_conformsToProtocolCommon(*this, (uint64_t)&protocol descriptor for Hashable);
    if (v3)
    {
      unint64_t v4 = v3;
      unint64_t HashableBaseType = swift::hashable_support::findHashableBaseType(*this);
    }
    else
    {
      uint64_t v6 = swift_conformsToProtocolCommon(*this, (uint64_t)&protocol descriptor for Equatable);
      unint64_t v4 = v6 | 1;
      if (v6)
      {
        if (*(void *)v6) {
          uint64_t v7 = *(void *)v6;
        }
        else {
          uint64_t v7 = 0;
        }
        unint64_t HashableBaseType = swift::findConformingSuperclass(*this, v7) | 1;
      }
      else
      {
        unint64_t HashableBaseType = 1;
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    atomic_compare_exchange_strong(this + 2, (unint64_t *)&v8, v4);
    atomic_compare_exchange_strong(this + 1, (unint64_t *)&v9, HashableBaseType);
    unint64_t explicit = atomic_load_explicit(this + 1, memory_order_acquire);
  }
  if (explicit) {
    return 0;
  }
  else {
    return explicit;
  }
}

unint64_t SwiftValueHeader::getEquatableBaseType(atomic_ullong *this)
{
  unint64_t explicit = atomic_load_explicit(this + 1, memory_order_acquire);
  if (!explicit)
  {
    uint64_t v3 = swift_conformsToProtocolCommon(*this, (uint64_t)&protocol descriptor for Hashable);
    if (v3)
    {
      unint64_t v4 = v3;
      unint64_t HashableBaseType = swift::hashable_support::findHashableBaseType(*this);
    }
    else
    {
      uint64_t v6 = swift_conformsToProtocolCommon(*this, (uint64_t)&protocol descriptor for Equatable);
      unint64_t v4 = v6 | 1;
      if (v6)
      {
        if (*(void *)v6) {
          uint64_t v7 = *(void *)v6;
        }
        else {
          uint64_t v7 = 0;
        }
        unint64_t HashableBaseType = swift::findConformingSuperclass(*this, v7) | 1;
      }
      else
      {
        unint64_t HashableBaseType = 1;
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    atomic_compare_exchange_strong(this + 2, (unint64_t *)&v8, v4);
    atomic_compare_exchange_strong(this + 1, (unint64_t *)&v9, HashableBaseType);
    unint64_t explicit = atomic_load_explicit(this + 1, memory_order_acquire);
  }
  return explicit & ((uint64_t)(explicit << 63) >> 63) & 0xFFFFFFFFFFFFFFFELL;
}

unint64_t SwiftValueHeader::getHashableConformance(atomic_ullong *this)
{
  unint64_t explicit = atomic_load_explicit(this + 2, memory_order_acquire);
  if (!explicit)
  {
    uint64_t v3 = swift_conformsToProtocolCommon(*this, (uint64_t)&protocol descriptor for Hashable);
    if (v3)
    {
      unint64_t explicit = v3;
      unint64_t HashableBaseType = swift::hashable_support::findHashableBaseType(*this);
    }
    else
    {
      uint64_t v5 = swift_conformsToProtocolCommon(*this, (uint64_t)&protocol descriptor for Equatable);
      unint64_t explicit = v5 | 1;
      if (v5)
      {
        if (*(void *)v5) {
          uint64_t v6 = *(void *)v5;
        }
        else {
          uint64_t v6 = 0;
        }
        unint64_t HashableBaseType = swift::findConformingSuperclass(*this, v6) | 1;
      }
      else
      {
        unint64_t HashableBaseType = 1;
      }
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    atomic_compare_exchange_strong(this + 2, (unint64_t *)&v7, explicit);
    atomic_compare_exchange_strong(this + 1, (unint64_t *)&v8, HashableBaseType);
  }
  if (explicit) {
    return 0;
  }
  else {
    return explicit;
  }
}

unint64_t SwiftValueHeader::getEquatableConformance(atomic_ullong *this)
{
  unint64_t explicit = atomic_load_explicit(this + 2, memory_order_acquire);
  if (!explicit)
  {
    uint64_t v3 = swift_conformsToProtocolCommon(*this, (uint64_t)&protocol descriptor for Hashable);
    if (v3)
    {
      unint64_t explicit = v3;
      unint64_t HashableBaseType = swift::hashable_support::findHashableBaseType(*this);
    }
    else
    {
      uint64_t v5 = swift_conformsToProtocolCommon(*this, (uint64_t)&protocol descriptor for Equatable);
      unint64_t explicit = v5 | 1;
      if (v5)
      {
        if (*(void *)v5) {
          uint64_t v6 = *(void *)v5;
        }
        else {
          uint64_t v6 = 0;
        }
        unint64_t HashableBaseType = swift::findConformingSuperclass(*this, v6) | 1;
      }
      else
      {
        unint64_t HashableBaseType = 1;
      }
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    atomic_compare_exchange_strong(this + 2, (unint64_t *)&v7, explicit);
    atomic_compare_exchange_strong(this + 1, (unint64_t *)&v8, HashableBaseType);
  }
  return explicit & ((uint64_t)(explicit << 63) >> 63) & 0xFFFFFFFFFFFFFFFELL;
}

uint64_t swift::getValueFromSwiftValue(swift *this, __SwiftValue *a2)
{
  return *((void *)this + 1);
}

void *swift::bridgeAnythingToSwiftValueObject(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(_DWORD *)(*(void *)(a2 - 8) + 80) & 0xF8;
  uint64_t v7 = (v6 + 39) & ~(v6 | 7);
  uint64_t v8 = swift_slowAlloc(v7 + *(void *)(*(void *)(a2 - 8) + 64), v6 | 7);
  if (qword_1EB208E68 != -1) {
    dispatch_once_f(&qword_1EB208E68, &getSwiftValueClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftValueClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  uint64_t v9 = objc_constructInstance((Class)getSwiftValueClass(void)::$_0::operator() const(void)::TheLazy, v8);
  v9[2] = 0;
  void v9[3] = 0;
  v9[1] = a2;
  uint8x8_t v10 = (char *)v9 + v7;
  uint64_t v11 = *(void *)(a2 - 8);
  if (a3)
  {
    if (v11) {
      uint64_t v12 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v12 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v10, a1, a2);
  }
  else
  {
    if (v11) {
      uint64_t v13 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v13 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v10, a1, a2);
  }
  return v9;
}

swift *swift::getAsSwiftValue(swift *this, objc_object *a2)
{
  Class Class = object_getClass(this);
  if (qword_1EB208E68 != -1) {
    dispatch_once_f(&qword_1EB208E68, &getSwiftValueClass(void)::$_0::operator() const(void)::TheLazy, (dispatch_function_t)getSwiftValueClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  if (Class == (Class)getSwiftValueClass(void)::$_0::operator() const(void)::TheLazy) {
    return this;
  }
  else {
    return 0;
  }
}

uint64_t swift::findSwiftValueConformances(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x40000000) != 0 && *(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 8 * ((v1 >> 30) & 1) + 16);
    uint64_t v6 = 8 * v3;
    while (1)
    {
      uint64_t v7 = *v5;
      if ((*v5 & 1) == 0) {
        break;
      }
      if (!v4) {
        unint64_t v4 = objc_opt_class();
      }
      if (([v4 conformsToProtocol:v7 & 0xFFFFFFFFFFFFFFFELL] & 1) == 0) {
        break;
      }
      ++v5;
      v6 -= 8;
      if (!v6) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

void sub_1815BB350(_Unwind_Exception *a1)
{
}

double swift::Lazy<std::unordered_set<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>>::defaultInitCallback(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t getSwiftValueClass(void)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t result = objc_opt_class();
  *a1 = result;
  return result;
}

id _quickLookObjectForPointer(id *a1)
{
  id v1 = *a1;
  if (objc_opt_respondsToSelector())
  {
    Class v2 = (void *)[v1 debugQuickLookObject];
    id v3 = v2;

    return v2;
  }
  return v1;
}

void swift::setUpObjCRuntimeGetImageNameFromClass(swift *this)
{
}

uint64_t replacementGetImageNameFromClass(objc_class *a1, const char **a2)
{
  if (a1)
  {
    if ((*((unsigned char *)a1 + 32) & 2) != 0)
    {
      if (*((void *)a1 + 8))
      {
        unint64_t v4 = (const char *)dyld_image_path_containing_address();
        *a2 = v4;
        if (v4) {
          return 1;
        }
      }
    }
  }
  uint64_t v6 = (uint64_t (*)(objc_class *, const char **))defaultGetImageNameFromClass;

  return v6(a1, a2);
}

uint64_t (*__tsan_on_initialize())(void)
{
  _swift_tsan_enabled = 1;
  _swift_tsan_acquire = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "__tsan_acquire");
  _swift_tsan_release = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "__tsan_release");
  uint64_t result = (uint64_t (*)(void))dlsym((void *)0xFFFFFFFFFFFFFFFFLL, "__tsan_on_initialize");
  if (result)
  {
    return (uint64_t (*)(void))result();
  }
  return result;
}

uint64_t anonymous namespace'::error(_anonymous_namespace_ *this, const char *a2, const char *a3, const char *a4)
{
  if (a3) {
    snprintf(__str, 0x400uLL, "%s%s at %s:%u\n");
  }
  else {
    snprintf(__str, 0x400uLL, "%s%s\n");
  }
  return asl_log(0, 0, 3, "%s", __str);
}

void __swift::__runtime::llvm::report_bad_alloc_error(__swift::__runtime::llvm *this, const char *a2)
{
}

void __swift::__runtime::llvm::deallocate_buffer(__swift::__runtime::llvm *this, void *a2)
{
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (HIDWORD(a2)) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity overflow during allocation", (const char *)1);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4 == -1) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)1);
  }
  unint64_t v5 = (2 * v4) | 1;
  if (v5 <= a2) {
    unint64_t v5 = a2;
  }
  if (v5 >= 0xFFFFFFFF) {
    unint64_t v5 = 0xFFFFFFFFLL;
  }
  *a4 = v5;
  unint64_t v6 = v5 * a3;
  uint64_t result = malloc_type_malloc(v5 * a3, 0x3880A471uLL);
  if (!result && (v6 || (uint64_t result = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0)) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)1);
  }
  return result;
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (HIDWORD(a3)) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity overflow during allocation", (const char *)1);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 == -1) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)1);
  }
  unint64_t v7 = (2 * v5) | 1;
  if (v7 <= a3) {
    unint64_t v7 = a3;
  }
  if (v7 >= 0xFFFFFFFF) {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = v8 * a4;
  if (*(void *)a1 == a2)
  {
    uint64_t v12 = malloc_type_malloc(v8 * a4, 0x3880A471uLL);
    if (!v12 && (v10 || (uint64_t v12 = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0)) {
LABEL_20:
    }
      __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)1);
    uint64_t result = memcpy(v12, *(const void **)a1, *(unsigned int *)(a1 + 8) * a4);
  }
  else
  {
    uint64_t result = malloc_type_realloc(v9, v8 * a4, 0x88FD67E7uLL);
    uint64_t v12 = result;
    if (!result)
    {
      if (v10) {
        goto LABEL_20;
      }
      uint64_t result = malloc_type_malloc(1uLL, 0x3880A471uLL);
      uint64_t v12 = result;
      if (!result) {
        goto LABEL_20;
      }
    }
  }
  *(void *)a1 = v12;
  *(_DWORD *)(a1 + 12) = v8;
  return result;
}

void *__swift::__runtime::llvm::SmallVectorBase<unsigned long long>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == -1) {
    __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"SmallVector capacity unable to grow", (const char *)1);
  }
  unint64_t v7 = (2 * v4) | 1;
  if (v7 <= a3) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = v7;
  }
  uint64_t v9 = *(void **)a1;
  unint64_t v10 = v8 * a4;
  if (v9 == a2)
  {
    uint64_t v12 = malloc_type_malloc(v8 * a4, 0x3880A471uLL);
    if (!v12 && (v10 || (uint64_t v12 = malloc_type_malloc(1uLL, 0x3880A471uLL)) == 0)) {
LABEL_16:
    }
      __swift::__runtime::llvm::report_bad_alloc_error((__swift::__runtime::llvm *)"Allocation failed", (const char *)1);
    uint64_t result = memcpy(v12, *(const void **)a1, *(void *)(a1 + 8) * a4);
  }
  else
  {
    uint64_t result = malloc_type_realloc(v9, v8 * a4, 0x88FD67E7uLL);
    uint64_t v12 = result;
    if (!result)
    {
      if (v10) {
        goto LABEL_16;
      }
      uint64_t result = malloc_type_malloc(1uLL, 0x3880A471uLL);
      uint64_t v12 = result;
      if (!result) {
        goto LABEL_16;
      }
    }
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 16) = v8;
  return result;
}

uint64_t __swift::__runtime::llvm::StringRef::compare_insensitive(unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3 = (unint64_t)a1[1];
  if (a3 >= v3) {
    unint64_t v4 = (unint64_t)a1[1];
  }
  else {
    unint64_t v4 = a3;
  }
  if (v4)
  {
    uint64_t v5 = *a1;
    while (1)
    {
      int v7 = *v5++;
      unsigned __int8 v6 = v7;
      unsigned __int8 v8 = v7 + 32;
      if ((v7 - 65) < 0x1A) {
        unsigned __int8 v6 = v8;
      }
      int v10 = *a2++;
      unsigned __int8 v9 = v10;
      unsigned __int8 v11 = v10 + 32;
      if ((v10 - 65) < 0x1A) {
        unsigned __int8 v9 = v11;
      }
      if (v6 != v9) {
        break;
      }
      if (!--v4) {
        goto LABEL_12;
      }
    }
    if (v6 < v9) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  else
  {
LABEL_12:
    BOOL v12 = v3 == a3;
    if (v3 < a3) {
      unsigned int v13 = -1;
    }
    else {
      unsigned int v13 = 1;
    }
    if (v12) {
      return 0;
    }
    else {
      return v13;
    }
  }
}

uint64_t __swift::__runtime::llvm::StringRef::find_first_not_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(unsigned char *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4) {
      return -1;
    }
  }
  return a4;
}

uint64_t __swift::__runtime::llvm::StringRef::find_last_not_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a1[1];
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if ((v8 & 1) == 0) {
      return v6;
    }
  }
  return -1;
}

uint64_t __swift::__runtime::llvm::consumeUnsignedInteger(__swift::__runtime::llvm *this, __swift::__runtime::llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *((void *)this + 1);
  if (a2)
  {
    if (!v4) {
      return 1;
    }
    goto LABEL_3;
  }
  if (v4 < 2)
  {
    LODWORD(a2) = 10;
    if (!v4) {
      return 1;
    }
    goto LABEL_3;
  }
  uint64_t v13 = *(void *)this;
  if (**(_WORD **)this == 30768 || *(_WORD *)v13 == 22576)
  {
    v4 -= 2;
    LODWORD(a2) = 16;
    *(void *)this = v13 + 2;
    *((void *)this + 1) = v4;
    if (!v4) {
      return 1;
    }
  }
  else if (*(_WORD *)v13 == 25136 || *(_WORD *)v13 == 16944)
  {
    LODWORD(a2) = 2;
    v4 -= 2;
    *(void *)this = v13 + 2;
    *((void *)this + 1) = v4;
    if (!v4) {
      return 1;
    }
  }
  else
  {
    if (*(_WORD *)v13 == 28464)
    {
      uint64_t v14 = v13 + 2;
      v4 -= 2;
LABEL_34:
      LODWORD(a2) = 8;
      *(void *)this = v14;
      *((void *)this + 1) = v4;
      if (!v4) {
        return 1;
      }
      goto LABEL_3;
    }
    if (*(unsigned char *)v13 == 48)
    {
      int v15 = *(unsigned __int8 *)(v13 + 1);
      uint64_t v14 = v13 + 1;
      if ((v15 - 48) <= 9)
      {
        --v4;
        goto LABEL_34;
      }
    }
    LODWORD(a2) = 10;
  }
LABEL_3:
  unint64_t v5 = 0;
  unint64_t v6 = *(unsigned __int8 **)this;
  *a3 = 0;
  unint64_t v7 = v4;
  do
  {
    if ((char)*v6 < 48) {
      break;
    }
    unsigned int v8 = *v6;
    if (v8 >= 0x3A)
    {
      if (v8 < 0x61)
      {
        if (v8 - 65 > 0x19) {
          break;
        }
        int v9 = -55;
      }
      else
      {
        if (v8 >= 0x7B) {
          break;
        }
        int v9 = -87;
      }
    }
    else
    {
      int v9 = -48;
    }
    unsigned int v10 = v9 + v8;
    if (v10 >= a2) {
      break;
    }
    unint64_t v11 = v5 * a2 + v10;
    *a3 = v11;
    if (v11 / a2 < v5) {
      return 1;
    }
    ++v6;
    unint64_t v5 = v11;
    --v7;
  }
  while (v7);
  if (v4 != v7)
  {
    *(void *)this = v6;
    *((void *)this + 1) = v7;
    return 0;
  }
  return 1;
}

uint64_t __swift::__runtime::llvm::consumeSignedInteger(__swift::__runtime::llvm *this, __swift::__runtime::llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v12 = 0;
  uint64_t v6 = *((void *)this + 1);
  if (v6 && **(unsigned char **)this == 45)
  {
    *(void *)&long long v11 = *(void *)this + 1;
    *((void *)&v11 + 1) = v6 - 1;
    LODWORD(result) = __swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v11, a2, &v12, a4);
    unint64_t v8 = v12;
    if (v12 > 0x8000000000000000) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = result;
    }
    if ((result & 1) == 0)
    {
      *(_OWORD *)this = v11;
      unint64_t v9 = -(uint64_t)v8;
LABEL_11:
      *a3 = v9;
    }
  }
  else
  {
    char v10 = __swift::__runtime::llvm::consumeUnsignedInteger(this, a2, &v12, a4);
    uint64_t result = 1;
    if ((v10 & 1) == 0)
    {
      unint64_t v9 = v12;
      if ((v12 & 0x8000000000000000) == 0)
      {
        uint64_t result = 0;
        goto LABEL_11;
      }
    }
  }
  return result;
}

BOOL __swift::__runtime::llvm::getAsSignedInteger(unsigned char *a1, uint64_t a2, __swift::__runtime::llvm::StringRef *a3, unint64_t *a4)
{
  *(void *)&long long v7 = a1;
  *((void *)&v7 + 1) = a2;
  uint64_t v9 = 0;
  if (a2 && *a1 == 45)
  {
    *(void *)&long long v8 = a1 + 1;
    *((void *)&v8 + 1) = a2 - 1;
    if ((__swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v8, a3, (unint64_t *)&v9, a4) & 1) == 0&& (unint64_t)v9 < 0x8000000000000001)
    {
      long long v7 = v8;
      uint64_t v5 = -v9;
LABEL_8:
      *a4 = v5;
      return *((void *)&v7 + 1) != 0;
    }
  }
  else if ((__swift::__runtime::llvm::consumeUnsignedInteger((__swift::__runtime::llvm *)&v7, a3, (unint64_t *)&v9, a4) & 1) == 0)
  {
    uint64_t v5 = v9;
    if ((v9 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  return 1;
}

unint64_t __swift::__runtime::llvm::hash_value(void *a1, uint64_t a2)
{
  return __swift::__runtime::llvm::hashing::detail::hash_combine_range_impl<swift::TargetMetadata<swift::InProcess> const* const>(a1, (uint64_t)a1 + a2);
}

void swift::Demangle::__runtime::Context::Context(swift::Demangle::__runtime::Context *this)
{
}

void swift::Demangle::__runtime::Context::~Context(swift::Demangle::__runtime::Context *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Context::demangleSymbolAsNode(swift::Demangle::__runtime::NodeFactory **a1, _WORD *a2, unint64_t a3)
{
  int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  long long v7 = *a1;
  if (ManglingPrefixLength)
  {
    long long v11 = 0;
    unint64_t v8 = swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v7, a2, a3, v10);
    if (v11 == v10)
    {
      (*(void (**)(void *))(v10[0] + 32))(v10);
    }
    else if (v11)
    {
      (*(void (**)(void))(*v11 + 40))();
    }
    return (swift::Demangle::__runtime::Node *)v8;
  }
  else
  {
    return swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v7);
  }
}

void swift::Demangle::__runtime::Context::demangleSymbolAsString(swift::Demangle::__runtime::NodeFactory **a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, swift::Demangle::__runtime::Node *a4@<X3>, void *a5@<X8>)
{
  int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  long long v11 = *a1;
  if (!ManglingPrefixLength)
  {
    uint64_t v13 = swift::Demangle::__runtime::demangleOldSymbolAsNode(a2, a3, v11);
    goto LABEL_7;
  }
  unint64_t v24 = 0;
  uint64_t v13 = (swift::Demangle::__runtime *)swift::Demangle::__runtime::Demangler::demangleSymbol((uint64_t)v11, a2, a3, __p);
  if (v24 == __p)
  {
    (*((void (**)(void **))__p[0] + 4))(__p);
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  if (!v24)
  {
LABEL_7:
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  (*((void (**)(void))*v24 + 5))();
  if (!v13)
  {
LABEL_13:
    if (!a2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        uint64_t v16 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17) {
          uint64_t v16 = a3 | 7;
        }
        uint64_t v17 = v16 + 1;
        unint64_t v18 = operator new(v16 + 1);
        a5[1] = a3;
        a5[2] = v17 | 0x8000000000000000;
        *a5 = v18;
        a5 = v18;
      }
      else
      {
        *((unsigned char *)a5 + 23) = a3;
        if (!a3) {
          goto LABEL_28;
        }
      }
      memmove(a5, a2, a3);
LABEL_28:
      *((unsigned char *)a5 + a3) = 0;
      return;
    }
LABEL_38:
    abort();
  }
LABEL_8:
  swift::Demangle::__runtime::nodeToString((uint64_t *)__p, v13, a4, v12);
  uint64_t v14 = (void *)HIBYTE(v23);
  char v15 = HIBYTE(v23);
  if (v23 < 0) {
    uint64_t v14 = __p[1];
  }
  if (v14)
  {
    *(_OWORD *)a5 = *(_OWORD *)__p;
    a5[2] = v23;
    return;
  }
  if (a2)
  {
    if (a3 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_38;
    }
    if (a3 >= 0x17)
    {
      uint64_t v19 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v19 = a3 | 7;
      }
      uint64_t v20 = v19 + 1;
      uint8x8_t v21 = operator new(v19 + 1);
      a5[1] = a3;
      a5[2] = v20 | 0x8000000000000000;
      *a5 = v21;
      a5 = v21;
    }
    else
    {
      *((unsigned char *)a5 + 23) = a3;
      if (!a3)
      {
LABEL_35:
        *((unsigned char *)a5 + a3) = 0;
        if ((v23 & 0x8000000000000000) == 0) {
          return;
        }
        goto LABEL_36;
      }
    }
    memmove(a5, a2, a3);
    goto LABEL_35;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((v15 & 0x80) == 0) {
    return;
  }
LABEL_36:
  operator delete(__p[0]);
}

BOOL swift::Demangle::__runtime::Context::isThunkSymbol(uint64_t *a1, char *a2, unint64_t a3)
{
  size_t v3 = a3;
  if (!swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3))
  {
    if (v3 < 2) {
      return 0;
    }
    if (*(_WORD *)a2 != 21599) {
      return 0;
    }
    unint64_t v9 = v3 - 2;
    if (v3 - 2 < 2) {
      return 0;
    }
    char v10 = a2 + 2;
    if (*((_WORD *)a2 + 1) != 28500 && *v10 != 20308)
    {
      if (v9 < 3) {
        return 0;
      }
      BOOL v11 = *v10 == 16720 && a2[4] == 95;
      if (!v11 && (v9 < 4 || *(_DWORD *)v10 != 1601126736)) {
        return 0;
      }
    }
    return 1;
  }
  if (a2[v3 - 1] - 48 > 9)
  {
LABEL_10:
    if (!v3) {
      return 0;
    }
    goto LABEL_11;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v6 = memchr(a2, 46, v3);
  if (v6)
  {
    size_t v7 = v3 >= v6 - a2 ? v6 - a2 : v3;
    if (v6 - a2 != -1)
    {
      size_t v3 = v7;
      goto LABEL_10;
    }
  }
LABEL_11:
  if (a2[v3 - 1] == 95)
  {
    unint64_t v8 = v3 - 1;
    if (v3 < v3 - 1) {
      unint64_t v8 = v3;
    }
    if (v8)
    {
      while (a2[v8 - 1] - 48 <= 9)
      {
        if (v8 >= v8 - 1) {
          --v8;
        }
        if (!v8) {
          goto LABEL_39;
        }
      }
      if (v8 >= 2 && (*(_WORD *)&a2[v8 - 2] == 20820 || *(_WORD *)&a2[v8 - 2] == 22868))
      {
        if (v8 >= v8 - 2) {
          size_t v3 = v8 - 2;
        }
        else {
          size_t v3 = v8;
        }
      }
    }
  }
LABEL_39:
  if (v3 < 2) {
    return 0;
  }
  unint64_t v12 = &a2[v3];
  if (*(_WORD *)&a2[v3 - 2] != 16724
    && *((_WORD *)v12 - 1) != 24916
    && *((_WORD *)v12 - 1) != 28500
    && *((_WORD *)v12 - 1) != 20308
    && *((_WORD *)v12 - 1) != 21076
    && *((_WORD *)v12 - 1) != 29268
    && *((_WORD *)v12 - 1) != 22356
    && *((_WORD *)v12 - 1) != 17254)
  {
    return 0;
  }
  uint64_t v13 = *a1;
  uint8x8_t v21 = 0;
  unint64_t v14 = swift::Demangle::__runtime::Demangler::demangleSymbol(v13, a2, v3, v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    if (!v14) {
      return 0;
    }
  }
  else
  {
    if (v21) {
      (*(void (**)(void))(*v21 + 40))();
    }
    if (!v14) {
      return 0;
    }
  }
  if (*(_WORD *)(v14 + 16) == 99)
  {
    int v15 = *(unsigned __int8 *)(v14 + 18);
    if ((v15 - 1) < 2) {
      goto LABEL_59;
    }
    if (v15 == 5 && *(_DWORD *)(v14 + 8))
    {
      unint64_t v14 = *(void *)v14;
LABEL_59:
      int v16 = *(unsigned __int16 *)(*(void *)v14 + 16);
      return (v16 - 160) <= 0x29 && ((1 << (v16 + 96)) & 0x31000000C11) != 0
          || v16 == 0;
    }
  }
  return 0;
}

void swift::Demangle::__runtime::demangleSymbolAsString(swift::Demangle::__runtime *this, const char *a2, unint64_t a3, const swift::Demangle::__runtime::DemangleOptions *a4)
{
}

void swift::Demangle::__runtime::failAssert(swift::Demangle::__runtime *this, const char *a2, swift::Demangle::__runtime *a3, swift::Demangle::__runtime::Node *a4, const char *a5)
{
  double NodeTreeAsString = swift::Demangle::__runtime::getNodeTreeAsString(a3, &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v12 = &v13;
  }
  else {
    unint64_t v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  swift::Demangle::__runtime::fatal(0, "%s:%u: assertion failed for Node %p: %s\n%s:%u: Node %p is:\n%s\n", v9, v10, NodeTreeAsString, this, a2, a3, a4, this, a2, a3, v12);
}

uint64_t swift::Demangle::__runtime::isContext()
{
  return 1;
}

uint64_t swift::Demangle::__runtime::isFunctionAttr(int a1)
{
  int v1 = a1 - 53;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 24:
    case 33:
    case 34:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 91:
    case 107:
    case 111:
    case 117:
    case 118:
    case 203:
    case 224:
    case 234:
    case 235:
    case 266:
    case 275:
    case 276:
    case 277:
    case 279:
    case 280:
    case 287:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

unsigned char *swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(unsigned char *this, const char *a2)
{
  if (this)
  {
    unsigned int v2 = *this;
    if (*this)
    {
      size_t v3 = this;
      do
      {
        if (v2 >= 0x18) {
          uint64_t v4 = 8 * ((v2 & 0xF8) == 24);
        }
        else {
          uint64_t v4 = 4;
        }
        uint64_t v5 = &v3[v4];
        unsigned int v6 = v5[1];
        size_t v3 = v5 + 1;
        unsigned int v2 = v6;
      }
      while (v6);
    }
  }
  return this;
}

uint64_t swift::Demangle::__runtime::getManglingPrefixLength(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 3)
  {
    if (a2 != 2 || *(_WORD *)a1 != 21284 && *(_WORD *)a1 != 29476) {
      return 0;
    }
    return 2;
  }
  if (*(_WORD *)a1 == 21599 && *(unsigned char *)(a1 + 2) == 48) {
    return 3;
  }
  if (*(_WORD *)a1 == 21284) {
    return 2;
  }
  if (*(_WORD *)a1 == 9311 && *(unsigned char *)(a1 + 2) == 83) {
    return 3;
  }
  if (*(_WORD *)a1 == 29476) {
    return 2;
  }
  if (*(_WORD *)a1 == 9311 && *(unsigned char *)(a1 + 2) == 115) {
    return 3;
  }
  if (a2 < 0xE) {
    return 0;
  }
  if (*(void *)a1 != 0x74666977735F5F40 || *(void *)(a1 + 6) != 0x5F6F7263616D7466) {
    return 0;
  }
  return 14;
}

BOOL swift::Demangle::__runtime::isSwiftSymbol(_WORD *a1, unint64_t a2)
{
  return a2 >= 2 && *a1 == 21599
      || swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a1, a2) != 0;
}

BOOL swift::Demangle::__runtime::isSwiftSymbol(swift::Demangle::__runtime *this, const char *a2)
{
  if (this)
  {
    size_t v3 = strlen((const char *)this);
    if (v3 >= 2 && *(_WORD *)this == 21599) {
      return 1;
    }
  }
  else
  {
    size_t v3 = 0;
  }
  return swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)this, v3) != 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleType(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  size_t v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      int v15 = v14;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v14);
    }
    else
    {
      int v15 = (void *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    int v15 = 0;
  }
  swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)v16, a1, a2, a3, (uint64_t)v14);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  unint64_t v8 = *(void *)(a1 + 64);
  while (*(void *)(a1 + 72) < v8)
  {
    unint64_t v9 = swift::Demangle::__runtime::Demangler::demangleOperator((swift::Demangle::__runtime::Demangler *)a1);
    if (!v9) {
      break;
    }
    uint64_t v17 = v9;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)(a1 + 88), (uint64_t *)&v17, (void *)a1);
  }
  int v10 = *(_DWORD *)(a1 + 96);
  if (!v10 || (unsigned int v11 = v10 - 1, Node = *(void *)(*(void *)(a1 + 88) + 8 * v11), *(_DWORD *)(a1 + 96) = v11, !Node)) {
    unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode((void *)a1, 221, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }
  swift::Demangle::__runtime::Demangler::DemangleInitRAII::~DemangleInitRAII((swift::Demangle::__runtime::Demangler::DemangleInitRAII *)v16);
  return Node;
}

void swift::Demangle::__runtime::Demangler::~Demangler(swift::Demangle::__runtime::Demangler *this)
{
  *(void *)this = &unk_1ECA07790;
  unsigned int v2 = (char *)this + 544;
  size_t v3 = (char *)*((void *)this + 71);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)this = &unk_1ECA07768;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      free(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    *(unsigned char *)(v6 + 48) = 0;
  }
}

{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1ECA07790;
  unsigned int v2 = (char *)this + 544;
  size_t v3 = (char *)*((void *)this + 71);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)this = &unk_1ECA07768;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      free(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    *(unsigned char *)(v6 + 48) = 0;
  }

  JUMPOUT(0x1852FF000);
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2)
{
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v5 = 2 * a1[4];
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    a1[4] = v5;
    unint64_t v6 = v5 + 8;
    size_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    *size_t v7 = a1[3];
    unint64_t result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v7 + v6;
    a1[3] = v7;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 0;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, void *__src, size_t __len)
{
  if (__len)
  {
    unint64_t v8 = (void *)a1[1];
    size_t v9 = (size_t)v8 + __len;
    if (v8) {
      BOOL v10 = v9 > a1[2];
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      unint64_t v11 = 2 * a1[4];
      if (v11 <= __len + 1) {
        unint64_t v11 = __len + 1;
      }
      a1[4] = v11;
      unint64_t v12 = v11 + 8;
      std::string v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      unint64_t v14 = (char *)v13 + v12;
      *std::string v13 = a1[3];
      unint64_t v8 = v13 + 1;
      a1[2] = v14;
      a1[3] = v13;
      size_t v9 = (size_t)v13 + __len + 8;
    }
    a1[1] = v9;
    memmove(v8, __src, __len);
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v16 = 2 * a1[4];
    if (v16 <= 0x20) {
      unint64_t v16 = 32;
    }
    a1[4] = v16;
    unint64_t v17 = v16 + 8;
    unint64_t v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
    *unint64_t v18 = a1[3];
    unint64_t result = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v18 + v17;
    a1[3] = v18;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v8;
  *(void *)(result + 8) = __len;
  return result;
}

uint64_t swift::Demangle::__runtime::Node::replaceChild(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(result + 18);
  if (v3 != 1)
  {
    if (v3 == 5)
    {
      unint64_t result = *(void *)result + 8 * a2;
    }
    else
    {
      if (v3 != 2) {
        return result;
      }
      result += 8 * a2;
    }
  }
  *(void *)unint64_t result = a3;
  return result;
}

int8x16_t *swift::Demangle::__runtime::Node::reverseChildren(int8x16_t *this, uint64_t a2)
{
  int v2 = this[1].u8[2];
  if (v2 == 5)
  {
    unint64_t v4 = this->i64[0] + 8 * a2;
    uint64_t v5 = this->u32[2];
    unint64_t v6 = (void *)(this->i64[0] + 8 * v5 - 8);
    if (v5 != a2 && (unint64_t)v6 > v4)
    {
      unint64_t v8 = v4 + 8;
      do
      {
        uint64_t v9 = *(void *)(v8 - 8);
        *(void *)(v8 - 8) = *v6;
        *v6-- = v9;
        BOOL v10 = v8 >= (unint64_t)v6;
        v8 += 8;
      }
      while (!v10);
    }
  }
  else if (v2 == 2 && a2 == 0)
  {
    *this = vextq_s8(*this, *this, 8uLL);
  }
  return this;
}

uint64_t swift::Demangle::__runtime::Node::findByKind(uint64_t result, uint64_t a2, int a3)
{
  int v3 = (void *)(result + 16);
  if (*(unsigned __int16 *)(result + 16) != a2)
  {
    uint64_t v4 = (a3 - 1);
    if (a3 < 1) {
      return 0;
    }
    int v6 = *(unsigned __int8 *)(result + 18);
    size_t v7 = (void *)result;
    if ((v6 - 1) >= 2)
    {
      if (v6 == 5)
      {
        unint64_t v8 = *(void **)result;
        size_t v7 = *(void **)result;
        goto LABEL_11;
      }
      size_t v7 = 0;
    }
    switch(v6)
    {
      case 1:
        int v3 = (void *)(result + 8);
        if (v7 != (void *)(result + 8)) {
          goto LABEL_12;
        }
        return 0;
      case 2:
        goto LABEL_12;
      case 5:
        unint64_t v8 = *(void **)result;
LABEL_11:
        int v3 = &v8[*(unsigned int *)(result + 8)];
        if (v7 != v3) {
          goto LABEL_12;
        }
        return 0;
    }
    int v3 = 0;
    if (!v7) {
      return 0;
    }
LABEL_12:
    while (1)
    {
      unint64_t result = swift::Demangle::__runtime::Node::findByKind(*v7, a2, v4);
      if (result) {
        break;
      }
      if (++v7 == v3) {
        return 0;
      }
    }
  }
  return result;
}

void *swift::Demangle::__runtime::NodeFactory::freeSlabs(void *result)
{
  if (result)
  {
    do
    {
      int v1 = (void *)*result;
      free(result);
      unint64_t result = v1;
    }
    while (v1);
  }
  return result;
}

void *swift::Demangle::__runtime::NodeFactory::clear(void *this)
{
  int v1 = (void **)this[3];
  if (v1)
  {
    int v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        int v3 = (void *)*this;
        free(this);
        this = v3;
      }
      while (v3);
      int v1 = (void **)v2[3];
    }
    *int v1 = 0;
    v2[1] = v1 + 1;
  }
  return this;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, uint64_t a3)
{
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v7 = 2 * a1[4];
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    a1[4] = v7;
    unint64_t v8 = v7 + 8;
    uint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    *uint64_t v9 = a1[3];
    unint64_t result = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v9 + v8;
    a1[3] = v9;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 4;
  *(void *)unint64_t result = a3;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(void *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v9 = 2 * a1[4];
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    a1[4] = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    void *v11 = a1[3];
    unint64_t result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v11 + v10;
    a1[3] = v11;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = a3;
  *(void *)(result + 8) = a4;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *((unsigned int *)a3 + 2);
  unint64_t result = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = result;
  if (!result || result + 24 > a1[2])
  {
    unint64_t v8 = 2 * a1[4];
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    a1[4] = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    *unint64_t v10 = a1[3];
    unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = (char *)v10 + v9;
    a1[3] = v10;
  }
  a1[1] = result + 24;
  *(_WORD *)(result + 16) = a2;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v5;
  *(void *)(result + 8) = v6;
  return result;
}

unint64_t swift::Demangle::__runtime::NodeFactory::createNode(void *a1, __int16 a2, char *__s)
{
  unint64_t v6 = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  a1[1] = v6;
  if (!v6 || v6 + 24 > a1[2])
  {
    unint64_t v7 = 2 * a1[4];
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    a1[4] = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    *unint64_t v9 = a1[3];
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    a1[2] = v10;
    a1[3] = v9;
  }
  a1[1] = v6 + 24;
  if (__s) {
    size_t v11 = strlen(__s);
  }
  else {
    size_t v11 = 0;
  }
  *(_WORD *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 18) = 3;
  *(void *)unint64_t v6 = __s;
  *(void *)(v6 + 8) = v11;
  return v6;
}

void *swift::Demangle::__runtime::CharVector::append(char **a1, const void *a2, size_t a3, void *a4)
{
  uint64_t v7 = *((unsigned int *)a1 + 2);
  size_t v8 = *((unsigned int *)a1 + 3);
  unint64_t v9 = *a1;
  if (a3 + v7 > v8)
  {
    size_t v11 = (char *)a4[1];
    if (&v9[v8] == v11)
    {
      std::string v13 = &v9[v8 + a3];
      unint64_t v12 = a4[2];
      if ((unint64_t)v13 <= v12)
      {
        a4[1] = v13;
        LODWORD(v15) = a3;
LABEL_19:
        *((_DWORD *)a1 + 3) = v8 + v15;
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v12 = a4[2];
    }
    unint64_t v14 = (2 * v8);
    if (a3 > v14) {
      unint64_t v14 = a3;
    }
    if (v14 <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = v14;
    }
    size_t v16 = v15 + v8;
    if (!v11 || (unint64_t)&v11[v16] > v12)
    {
      unint64_t v17 = 2 * a4[4];
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      a4[4] = v17;
      unint64_t v18 = v17 + 8;
      uint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      uint64_t v20 = (char *)v19 + v18;
      *uint64_t v19 = a4[3];
      size_t v11 = (char *)(v19 + 1);
      a4[2] = v20;
      a4[3] = v19;
    }
    a4[1] = &v11[v16];
    if (v8) {
      memcpy(v11, *a1, v8);
    }
    *a1 = v11;
    unint64_t v9 = v11;
    uint64_t v7 = *((unsigned int *)a1 + 2);
    LODWORD(v8) = *((_DWORD *)a1 + 3);
    goto LABEL_19;
  }
LABEL_20:
  unint64_t result = memcpy(&v9[v7], a2, a3);
  *((_DWORD *)a1 + 2) += a3;
  return result;
}

unsigned int *swift::Demangle::__runtime::CharVector::append(unsigned int *this, unsigned int a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v4 = (uint64_t)this;
  unsigned int v5 = this[2];
  size_t v6 = this[3];
  uint64_t v7 = *(char **)this;
  if (v5 + 11 > v6)
  {
    unint64_t v9 = (char *)*((void *)a3 + 1);
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 11];
      unint64_t v10 = *((void *)a3 + 2);
      if (v11 <= v10)
      {
        *((void *)a3 + 1) = v11;
        LODWORD(v12) = 11;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = *((void *)a3 + 2);
    }
    if ((2 * v6) <= 0xB) {
      uint64_t v12 = 11;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2 * *((void *)a3 + 4);
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      *((void *)a3 + 4) = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      size_t v16 = (char *)this + v15;
      *(void *)this = *((void *)a3 + 3);
      unint64_t v9 = (char *)(this + 2);
      *((void *)a3 + 2) = v16;
      *((void *)a3 + 3) = this;
    }
    *((void *)a3 + 1) = &v9[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v6);
    }
    *(void *)uint64_t v4 = v9;
    uint64_t v7 = v9;
    unsigned int v5 = *(_DWORD *)(v4 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 12);
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v17 = v5;
  unint64_t v18 = &v7[v5];
  if ((a2 & 0x80000000) != 0)
  {
    uint64_t v19 = 0;
    *unint64_t v18 = 45;
    unsigned int v25 = -a2;
    do
    {
      v18[++v19] = (v25 % 0xA) | 0x30;
      BOOL v20 = v25 > 9;
      v25 /= 0xAu;
    }
    while (v20);
    v18[v19 + 1] = 0;
    size_t v26 = &v18[v19 + 1];
    if (&v18[v19] > v18)
    {
      unint64_t v27 = (unint64_t)&v7[v17 + 2];
      do
      {
        char v28 = *--v26;
        *size_t v26 = *(unsigned char *)(v27 - 1);
        *(unsigned char *)(v27 - 1) = v28;
        BOOL v24 = v27++ >= (unint64_t)v26;
      }
      while (!v24);
    }
  }
  else if (a2)
  {
    uint64_t v19 = 0;
    do
    {
      v18[v19++] = (a2 % 0xA) | 0x30;
      BOOL v20 = a2 > 9;
      a2 /= 0xAu;
    }
    while (v20);
    uint8x8_t v21 = &v18[v19];
    v18[v19] = 0;
    if (&v18[v19] > v18)
    {
      unint64_t v22 = (unint64_t)&v7[v17 + 1];
      do
      {
        char v23 = *--v21;
        *uint8x8_t v21 = *(unsigned char *)(v22 - 1);
        *(unsigned char *)(v22 - 1) = v23;
        BOOL v24 = v22++ >= (unint64_t)v21;
      }
      while (!v24);
    }
  }
  else
  {
    *(_WORD *)unint64_t v18 = 48;
    LODWORD(v19) = 1;
  }
  *(_DWORD *)(v4 + 8) += v19;
  return this;
}

unsigned int *swift::Demangle::__runtime::CharVector::append(unsigned int *this, unint64_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v4 = (uint64_t)this;
  unsigned int v5 = this[2];
  size_t v6 = this[3];
  uint64_t v7 = *(char **)this;
  if (v5 + 21 > v6)
  {
    unint64_t v9 = (char *)*((void *)a3 + 1);
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 21];
      unint64_t v10 = *((void *)a3 + 2);
      if (v11 <= v10)
      {
        *((void *)a3 + 1) = v11;
        LODWORD(v12) = 21;
LABEL_17:
        *(_DWORD *)(v4 + 12) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = *((void *)a3 + 2);
    }
    if ((2 * v6) <= 0x15) {
      uint64_t v12 = 21;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2 * *((void *)a3 + 4);
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      *((void *)a3 + 4) = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      size_t v16 = (char *)this + v15;
      *(void *)this = *((void *)a3 + 3);
      unint64_t v9 = (char *)(this + 2);
      *((void *)a3 + 2) = v16;
      *((void *)a3 + 3) = this;
    }
    *((void *)a3 + 1) = &v9[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v9, *(const void **)v4, v6);
    }
    *(void *)uint64_t v4 = v9;
    uint64_t v7 = v9;
    unsigned int v5 = *(_DWORD *)(v4 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 12);
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v17 = v5;
  unint64_t v18 = &v7[v5];
  if (a2)
  {
    uint64_t v19 = 0;
    do
    {
      v18[v19++] = (a2 % 0xA) | 0x30;
      BOOL v20 = a2 > 9;
      a2 /= 0xAuLL;
    }
    while (v20);
    uint8x8_t v21 = &v18[v19];
    v18[v19] = 0;
    if (&v18[v19] > v18)
    {
      unint64_t v22 = (unint64_t)&v7[v17 + 1];
      do
      {
        char v23 = *--v21;
        *uint8x8_t v21 = *(unsigned char *)(v22 - 1);
        *(unsigned char *)(v22 - 1) = v23;
      }
      while (v22++ < (unint64_t)v21);
    }
  }
  else
  {
    *(_WORD *)unint64_t v18 = 48;
    LODWORD(v19) = 1;
  }
  *(_DWORD *)(v4 + 8) += v19;
  return this;
}

void *swift::Demangle::__runtime::Demangler::clear(void *this)
{
  *((_DWORD *)this + 25) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 29) = 0;
  *((void *)this + 13) = 0;
  int v1 = (void **)*((void *)this + 3);
  if (v1)
  {
    int v2 = this;
    this = *v1;
    if (*v1)
    {
      do
      {
        int v3 = *(void **)this;
        free(this);
        this = v3;
      }
      while (v3);
      int v1 = (void **)*((void *)v2 + 3);
    }
    *int v1 = 0;
    *((void *)v2 + 1) = v1 + 1;
  }
  return this;
}

uint64_t swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 72);
  uint64_t v10 = a2 + 544;
  uint64_t v11 = *(void *)(a2 + 568);
  if (v11)
  {
    if (v11 == v10)
    {
      *(void *)(a1 + 96) = a1 + 72;
      (*(void (**)(void))(**(void **)(a2 + 568) + 24))(*(void *)(a2 + 568));
    }
    else
    {
      *(void *)(a1 + 96) = v11;
      *(void *)(a2 + 568) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  unint64_t v12 = (*(void *)(a2 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a2 + 8) = v12;
  if (!v12 || (unint64_t v13 = *(void *)(a2 + 16), v12 + 128 > v13))
  {
    unint64_t v14 = 2 * *(void *)(a2 + 32);
    if (v14 <= 0x88) {
      unint64_t v14 = 136;
    }
    *(void *)(a2 + 32) = v14;
    unint64_t v15 = v14 + 8;
    size_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    unint64_t v13 = (unint64_t)v16 + v15;
    *size_t v16 = *(void *)(a2 + 24);
    unint64_t v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 16) = (char *)v16 + v15;
    *(void *)(a2 + 24) = v16;
  }
  *(void *)(a2 + 88) = v12;
  *(void *)(a2 + 96) = 0x1000000000;
  unint64_t v17 = (v12 + 135) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a2 + 8) = v17;
  if (!v17 || v17 + 128 > v13)
  {
    unint64_t v18 = 2 * *(void *)(a2 + 32);
    if (v18 <= 0x88) {
      unint64_t v18 = 136;
    }
    *(void *)(a2 + 32) = v18;
    unint64_t v19 = v18 + 8;
    BOOL v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *BOOL v20 = *(void *)(a2 + 24);
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 16) = (char *)v20 + v19;
    *(void *)(a2 + 24) = v20;
  }
  *(void *)(a2 + 8) = v17 + 128;
  *(void *)(a2 + 104) = v17;
  *(void *)(a2 + 112) = 0x1000000000;
  *(_DWORD *)(a2 + 536) = 0;
  *(void *)(a2 + 56) = a3;
  *(void *)(a2 + 64) = a4;
  *(void *)(a2 + 72) = 0;
  uint64_t v21 = *(void *)(a2 + 568);
  *(void *)(a2 + 568) = 0;
  if (v21 != v10)
  {
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 40))(v21);
    }
    uint64_t v22 = *(void *)(a5 + 24);
    if (v22) {
      goto LABEL_20;
    }
LABEL_23:
    *(void *)(a2 + 568) = 0;
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 32))(v10);
  uint64_t v22 = *(void *)(a5 + 24);
  if (!v22) {
    goto LABEL_23;
  }
LABEL_20:
  if (v22 == a5)
  {
    *(void *)(a2 + 568) = v10;
    (*(void (**)(void, uint64_t))(**(void **)(a5 + 24) + 24))(*(void *)(a5 + 24), v10);
  }
  else
  {
    *(void *)(a2 + 568) = v22;
    *(void *)(a5 + 24) = 0;
  }
  return a1;
}

void swift::Demangle::__runtime::Demangler::DemangleInitRAII::~DemangleInitRAII(swift::Demangle::__runtime::Demangler::DemangleInitRAII *this)
{
  *(_OWORD *)(*(void *)this + 88) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(*(void *)this + 104) = *(_OWORD *)((char *)this + 24);
  uint64_t v2 = *(void *)this;
  *(_DWORD *)(v2 + 536) = *((_DWORD *)this + 10);
  *(_OWORD *)(v2 + 56) = *((_OWORD *)this + 3);
  uint64_t v3 = *(void *)this;
  *(void *)(v3 + 72) = *((void *)this + 8);
  uint64_t v4 = v3 + 544;
  uint64_t v5 = *(void *)(v3 + 568);
  *(void *)(v3 + 568) = 0;
  if (v5 == v3 + 544)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v3 + 544);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  size_t v6 = (char *)this + 72;
  uint64_t v7 = (char *)*((void *)this + 12);
  if (v7)
  {
    if (v7 != v6)
    {
      *(void *)(v3 + 568) = v7;
      *((void *)this + 12) = 0;
      return;
    }
    *(void *)(v3 + 568) = v4;
    (*(void (**)(void, uint64_t))(**((void **)this + 12) + 24))(*((void *)this + 12), v3 + 544);
  }
  else
  {
    *(void *)(v3 + 568) = 0;
  }
  size_t v8 = (char *)*((void *)this + 12);
  if (v8 == v6)
  {
    (*(void (**)(char *))(*(void *)v6 + 32))((char *)this + 72);
  }
  else if (v8)
  {
    (*(void (**)(char *))(*(void *)v8 + 40))(v8);
  }
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSymbol(uint64_t a1, _WORD *a2, unint64_t a3, void *a4)
{
  uint64_t v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      uint64_t v34 = v33;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v33);
    }
    else
    {
      uint64_t v34 = (void *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    uint64_t v34 = 0;
  }
  swift::Demangle::__runtime::Demangler::DemangleInitRAII::DemangleInitRAII((uint64_t)v35, a1, (uint64_t)a2, a3, (uint64_t)v33);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  size_t v8 = *(void *)(a1 + 64);
  size_t v9 = *(void *)(a1 + 72);
  if (v8 >= v9) {
    uint64_t v10 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 64);
  }
  if (v8 - v10 >= 3)
  {
    uint64_t v11 = *(_WORD **)(a1 + 56);
    unint64_t v12 = (_WORD *)((char *)v11 + v10);
    int v13 = *v12;
    int v14 = *((unsigned __int8 *)v12 + 2);
    if (v13 == 21599 && v14 == 116)
    {
      *(void *)(a1 + 72) = v9 + 3;
      unint64_t v20 = (unint64_t)swift::Demangle::__runtime::demangleOldSymbolAsNode(v11, v8, (swift::Demangle::__runtime::NodeFactory *)a1);
      goto LABEL_41;
    }
  }
  unsigned int ManglingPrefixLength = swift::Demangle::__runtime::getManglingPrefixLength((uint64_t)a2, a3);
  if (!ManglingPrefixLength) {
    goto LABEL_39;
  }
  BOOL v17 = a3 >= 2 && *a2 == 21599;
  *(unsigned char *)(a1 + 80) = v17;
  size_t v18 = v9 + ManglingPrefixLength;
  *(void *)(a1 + 72) = v18;
  while (*(void *)(a1 + 72) < v8)
  {
    unint64_t v19 = swift::Demangle::__runtime::Demangler::demangleOperator((swift::Demangle::__runtime::Demangler *)a1);
    if (!v19) {
      goto LABEL_39;
    }
    unint64_t v36 = v19;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)(a1 + 88), (uint64_t *)&v36, (void *)a1);
  }
  unint64_t v20 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a1 + 8) = v20;
  if (!v20 || v20 + 24 > *(void *)(a1 + 16))
  {
    unint64_t v21 = 2 * *(void *)(a1 + 32);
    if (v21 <= 0x20) {
      unint64_t v21 = 32;
    }
    *(void *)(a1 + 32) = v21;
    unint64_t v22 = v21 + 8;
    char v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
    *char v23 = *(void *)(a1 + 24);
    unint64_t v20 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 16) = (char *)v23 + v22;
    *(void *)(a1 + 24) = v23;
  }
  *(void *)(a1 + 8) = v20 + 24;
  *(_WORD *)(v20 + 16) = 99;
  *(unsigned char *)(v20 + 18) = 0;
  unsigned int v24 = *(_DWORD *)(a1 + 96);
  if (!v24)
  {
LABEL_39:
    unint64_t v20 = 0;
    goto LABEL_41;
  }
  unsigned int v25 = (swift::Demangle::__runtime::Node *)v20;
  do
  {
    size_t v26 = *(uint64_t ***)(a1 + 88);
    unint64_t v27 = (unsigned __int16 *)v26[v24 - 1];
    if (!swift::Demangle::__runtime::isFunctionAttr(v27[8]))
    {
      uint64_t v30 = 8 * v24;
      while (1)
      {
        uint64_t v31 = *v26;
        if (*((_WORD *)*v26 + 8) == 232)
        {
          int v32 = *((unsigned __int8 *)v31 + 18);
          if ((v32 - 1) >= 2)
          {
            if (v32 != 5 || !*((_DWORD *)v31 + 2))
            {
              uint64_t v31 = 0;
              goto LABEL_46;
            }
            uint64_t v31 = (uint64_t *)*v31;
          }
          uint64_t v31 = (uint64_t *)*v31;
        }
LABEL_46:
        swift::Demangle::__runtime::Node::addChild(v25, (swift::Demangle::__runtime::Node *)v31, (swift::Demangle::__runtime::NodeFactory *)a1);
        ++v26;
        v30 -= 8;
        if (!v30) {
          goto LABEL_36;
        }
      }
    }
    *(_DWORD *)(a1 + 96) = v24 - 1;
    swift::Demangle::__runtime::Node::addChild(v25, (swift::Demangle::__runtime::Node *)v27, (swift::Demangle::__runtime::NodeFactory *)a1);
    if ((v27[8] & 0xFFFE) == 0xAA) {
      unsigned int v25 = (swift::Demangle::__runtime::Node *)v27;
    }
    unsigned int v24 = *(_DWORD *)(a1 + 96);
  }
  while (v24);
LABEL_36:
  int v28 = *(unsigned __int8 *)(v20 + 18);
  if ((v28 - 1) >= 2 && (v28 != 5 || !*(_DWORD *)(v20 + 8))) {
    goto LABEL_39;
  }
LABEL_41:
  swift::Demangle::__runtime::Demangler::DemangleInitRAII::~DemangleInitRAII((swift::Demangle::__runtime::Demangler::DemangleInitRAII *)v35);
  return v20;
}

uint64_t swift::Demangle::__runtime::Demangler::popNode<BOOL (*)(swift::Demangle::__runtime::Node::Kind)>(uint64_t a1, unsigned int (*a2)(void))
{
  int v2 = *(_DWORD *)(a1 + 96);
  if (!v2) {
    return 0;
  }
  if (!a2(*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 88) + 8 * (v2 - 1)) + 16))) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 96);
  if (!v4) {
    return 0;
  }
  unsigned int v5 = v4 - 1;
  uint64_t result = *(void *)(*(void *)(a1 + 88) + 8 * v5);
  *(_DWORD *)(a1 + 96) = v5;
  return result;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleOperator(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v3 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v3 <= v2) {
    unint64_t v4 = *((void *)this + 9);
  }
  else {
    unint64_t v4 = *((void *)this + 8);
  }
  while (2)
  {
    if (v4 == v2)
    {
      unint64_t v2 = v4;
LABEL_10:
      unint64_t v9 = v2 - 1;
LABEL_11:
      *((void *)this + 9) = v9;
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIdentifier(this);
    }
    else
    {
      uint64_t v5 = v2++;
      *((void *)this + 9) = v2;
      uint64_t v6 = *((void *)this + 7);
      int v7 = *(unsigned __int8 *)(v6 + v5);
      switch(*(unsigned char *)(v6 + v5))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleSymbolicReference(this, v7);
        case 0x2E:
          unint64_t v10 = v2 - 1;
          if (v3 < v10) {
            unint64_t v10 = v3;
          }
          uint64_t v11 = (char *)(v6 + v10);
          size_t v12 = v3 - v10;
          *((void *)this + 9) = v3;
          __int16 v13 = 221;
          goto LABEL_172;
        case 0x41:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleMultiSubstitutions(this);
        case 0x42:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBuiltinType(this);
        case 0x43:
          __int16 v14 = 24;
          goto LABEL_104;
        case 0x44:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleTypeMangling(this);
        case 0x45:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleExtensionContext(this);
        case 0x46:
          return swift::Demangle::__runtime::Demangler::demanglePlainFunction(this);
        case 0x47:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBoundGenericType(this);
        case 0x48:
          if (v2 < v3)
          {
            unint64_t v15 = v2 + 1;
            *((void *)this + 9) = v2 + 1;
            switch(*(unsigned char *)(v6 + v2))
            {
              case 'A':
                size_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                BOOL v17 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popDependentAssociatedConformance(this);
                int v18 = *((_DWORD *)this + 24);
                if (v18
                  && (unsigned int v19 = v18 - 1,
                      unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v19),
                      v20[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v19;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                char v139 = this;
                __int16 v140 = 49;
                goto LABEL_300;
              case 'C':
                size_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this);
                int v91 = *((_DWORD *)this + 24);
                if (v91
                  && ((unsigned int v92 = v91 - 1,
                       BOOL v17 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v92),
                       int v93 = v17[8],
                       v93 == 184)
                   || v93 == 183))
                {
                  *((_DWORD *)this + 24) = v92;
                }
                else
                {
                  BOOL v17 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::demangleRetroactiveProtocolConformanceRef(this);
                  unsigned int v92 = *((_DWORD *)this + 24);
                }
                if (v92
                  && (v141 = v92 - 1, unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v141), v20[8] == 232))
                {
                  *((_DWORD *)this + 24) = v141;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                char v139 = this;
                __int16 v140 = 26;
                goto LABEL_300;
              case 'D':
                size_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                BOOL v17 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popProtocol(this);
                int v94 = *((_DWORD *)this + 24);
                if (v94
                  && (v95 = v94 - 1, unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v95), v20[8] == 232))
                {
                  *((_DWORD *)this + 24) = v95;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                char v139 = this;
                __int16 v140 = 47;
                goto LABEL_300;
              case 'F':
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v96 = 2 * *((void *)this + 4);
                  if (v96 <= 0x20) {
                    unint64_t v96 = 32;
                  }
                  *((void *)this + 4) = v96;
                  unint64_t v97 = v96 + 8;
                  unint64_t v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
                  unint64_t v99 = (char *)v98 + v97;
                  void *v98 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v99;
                  *((void *)this + 3) = v98;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v26 = 330;
                goto LABEL_195;
              case 'I':
                size_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(this);
                BOOL v17 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popProtocol(this);
                int v100 = *((_DWORD *)this + 24);
                if (v100
                  && (unsigned int v101 = v100 - 1,
                      unint64_t v20 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v101),
                      v20[8] - 47 <= 2))
                {
                  *((_DWORD *)this + 24) = v101;
                }
                else
                {
                  unint64_t v20 = 0;
                }
                char v139 = this;
                __int16 v140 = 48;
LABEL_300:
                return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(v139, v140, (swift::Demangle::__runtime::Node *)v20, (swift::Demangle::__runtime::Node *)v17, v16);
              case 'P':
                unint64_t v102 = swift::Demangle::__runtime::Demangler::popProtocol(this);
                if (!v102) {
                  goto LABEL_286;
                }
                unint64_t v29 = v102;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v103 = 2 * *((void *)this + 4);
                  if (v103 <= 0x20) {
                    unint64_t v103 = 32;
                  }
                  *((void *)this + 4) = v103;
                  unint64_t v104 = v103 + 8;
                  long long v105 = malloc_type_malloc(v103 + 8, 0xD0263BC5uLL);
                  char v106 = (char *)v105 + v104;
                  *long long v105 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v106;
                  *((void *)this + 3) = v105;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 183;
                goto LABEL_216;
              case 'X':
                unint64_t v107 = swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(this);
                if (!v107) {
                  goto LABEL_286;
                }
                unint64_t v29 = v107;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v108 = 2 * *((void *)this + 4);
                  if (v108 <= 0x20) {
                    unint64_t v108 = 32;
                  }
                  *((void *)this + 4) = v108;
                  unint64_t v109 = v108 + 8;
                  __int16 v110 = malloc_type_malloc(v108 + 8, 0xD0263BC5uLL);
                  long long v111 = (char *)v110 + v109;
                  *__int16 v110 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v111;
                  *((void *)this + 3) = v110;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 27;
                goto LABEL_216;
              case 'c':
                uint64_t v112 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
                if (!v112) {
                  goto LABEL_286;
                }
                unint64_t v29 = (unint64_t)v112;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v113 = 2 * *((void *)this + 4);
                  if (v113 <= 0x20) {
                    unint64_t v113 = 32;
                  }
                  *((void *)this + 4) = v113;
                  unint64_t v114 = v113 + 8;
                  uint64_t v115 = malloc_type_malloc(v113 + 8, 0xD0263BC5uLL);
                  int v116 = (char *)v115 + v114;
                  *uint64_t v115 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v116;
                  *((void *)this + 3) = v115;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 189;
                goto LABEL_216;
              case 'n':
                int v117 = *((_DWORD *)this + 24);
                if (!v117) {
                  goto LABEL_286;
                }
                unsigned int v118 = v117 - 1;
                unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * v118);
                if (*(_WORD *)(v29 + 16) != 232) {
                  goto LABEL_286;
                }
                *((_DWORD *)this + 24) = v118;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v119 = 2 * *((void *)this + 4);
                  if (v119 <= 0x20) {
                    unint64_t v119 = 32;
                  }
                  *((void *)this + 4) = v119;
                  unint64_t v120 = v119 + 8;
                  uint64_t v121 = malloc_type_malloc(v119 + 8, 0xD0263BC5uLL);
                  unint64_t v122 = (char *)v121 + v120;
                  *uint64_t v121 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v121 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v122;
                  *((void *)this + 3) = v121;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 159;
                goto LABEL_216;
              case 'o':
                int v123 = *((_DWORD *)this + 24);
                if (!v123) {
                  goto LABEL_286;
                }
                unsigned int v124 = v123 - 1;
                unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * v124);
                *((_DWORD *)this + 24) = v124;
                if (!v29) {
                  goto LABEL_286;
                }
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v125 = 2 * *((void *)this + 4);
                  if (v125 <= 0x20) {
                    unint64_t v125 = 32;
                  }
                  *((void *)this + 4) = v125;
                  unint64_t v126 = v125 + 8;
                  unsigned int v127 = malloc_type_malloc(v125 + 8, 0xD0263BC5uLL);
                  unint64_t v128 = (char *)v127 + v126;
                  *unsigned int v127 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v127 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v128;
                  *((void *)this + 3) = v127;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 303;
                goto LABEL_216;
              case 'p':
                unint64_t v129 = swift::Demangle::__runtime::Demangler::popProtocol(this);
                if (!v129) {
                  goto LABEL_286;
                }
                unint64_t v29 = v129;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v130 = 2 * *((void *)this + 4);
                  if (v130 <= 0x20) {
                    unint64_t v130 = 32;
                  }
                  *((void *)this + 4) = v130;
                  unint64_t v131 = v130 + 8;
                  BOOL v132 = malloc_type_malloc(v130 + 8, 0xD0263BC5uLL);
                  unint64_t v133 = (char *)v132 + v131;
                  void *v132 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v132 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v133;
                  *((void *)this + 3) = v132;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 184;
                goto LABEL_216;
              case 'r':
                unint64_t v134 = swift::Demangle::__runtime::Demangler::popProtocol(this);
                if (!v134) {
                  goto LABEL_286;
                }
                unint64_t v29 = v134;
                unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 1) = v21;
                if (!v21 || v21 + 24 > *((void *)this + 2))
                {
                  unint64_t v135 = 2 * *((void *)this + 4);
                  if (v135 <= 0x20) {
                    unint64_t v135 = 32;
                  }
                  *((void *)this + 4) = v135;
                  unint64_t v136 = v135 + 8;
                  uint64_t v137 = malloc_type_malloc(v135 + 8, 0xD0263BC5uLL);
                  uint64_t v138 = (char *)v137 + v136;
                  *uint64_t v137 = *((void *)this + 3);
                  unint64_t v21 = ((unint64_t)v137 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *((void *)this + 2) = v138;
                  *((void *)this + 3) = v137;
                }
                *((void *)this + 1) = v21 + 24;
                __int16 v34 = 187;
                goto LABEL_216;
              default:
                goto LABEL_218;
            }
          }
          unint64_t v15 = v2;
LABEL_218:
          unint64_t v9 = v15 - 2;
          goto LABEL_11;
        case 0x49:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplFunctionType(this);
        case 0x4B:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v22 = 2 * *((void *)this + 4);
            if (v22 <= 0x20) {
              unint64_t v22 = 32;
            }
            *((void *)this + 4) = v22;
            unint64_t v23 = v22 + 8;
            unsigned int v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
            unsigned int v25 = (char *)v24 + v23;
            *unsigned int v24 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v25;
            *((void *)this + 3) = v24;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 272;
          goto LABEL_195;
        case 0x4C:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleLocalIdentifier(this);
        case 0x4D:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleMetatype(this);
        case 0x4E:
          int v27 = *((_DWORD *)this + 24);
          if (!v27) {
            goto LABEL_286;
          }
          unsigned int v28 = v27 - 1;
          unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * v28);
          if (*(_WORD *)(v29 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v28;
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v30 = 2 * *((void *)this + 4);
            if (v30 <= 0x20) {
              unint64_t v30 = 32;
            }
            *((void *)this + 4) = v30;
            unint64_t v31 = v30 + 8;
            int v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
            uint64_t v33 = (char *)v32 + v31;
            *int v32 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v33;
            *((void *)this + 3) = v32;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v34 = 237;
          goto LABEL_216;
        case 0x4F:
          __int16 v14 = 61;
          goto LABEL_104;
        case 0x50:
          __int16 v14 = 180;
          goto LABEL_104;
        case 0x51:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleArchetype(this);
        case 0x52:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericRequirement(this);
        case 0x53:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleStandardSubstitution(this);
        case 0x54:
          return swift::Demangle::__runtime::Demangler::demangleThunkOrSpecialization(this);
        case 0x56:
          __int16 v14 = 219;
          goto LABEL_104;
        case 0x57:
          return swift::Demangle::__runtime::Demangler::demangleWitness(this);
        case 0x58:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleSpecialType(this);
        case 0x59:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleTypeAnnotation(this);
        case 0x5A:
          int v35 = *((_DWORD *)this + 24);
          if (!v35) {
            goto LABEL_286;
          }
          int v36 = v35 - 1;
          unint64_t v29 = *(void *)(*((void *)this + 11) + 8 * (v35 - 1));
          if (*(_WORD *)(v29 + 16) != 232 && !swift::Demangle::__runtime::isContext()) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v36;
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v37 = 2 * *((void *)this + 4);
            if (v37 <= 0x20) {
              unint64_t v37 = 32;
            }
            *((void *)this + 4) = v37;
            unint64_t v38 = v37 + 8;
            unint64_t v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
            unsigned int v40 = (char *)v39 + v38;
            *unint64_t v39 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v40;
            *((void *)this + 3) = v39;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v34 = 218;
          goto LABEL_216;
        case 0x5F:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v41 = 2 * *((void *)this + 4);
            if (v41 <= 0x20) {
              unint64_t v41 = 32;
            }
            *((void *)this + 4) = v41;
            unint64_t v42 = v41 + 8;
            uint64_t v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
            unint64_t v44 = (char *)v43 + v42;
            void *v43 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v44;
            *((void *)this + 3) = v43;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 275;
          goto LABEL_195;
        case 0x61:
          __int16 v14 = 234;
LABEL_104:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, v14);
        case 0x63:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionType(this, 82, 0);
        case 0x64:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v45 = 2 * *((void *)this + 4);
            if (v45 <= 0x20) {
              unint64_t v45 = 32;
            }
            *((void *)this + 4) = v45;
            unint64_t v46 = v45 + 8;
            int v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
            unint64_t v48 = (char *)v47 + v46;
            *int v47 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v48;
            *((void *)this + 3) = v47;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 276;
          goto LABEL_195;
        case 0x66:
          return swift::Demangle::__runtime::Demangler::demangleFunctionEntity(this);
        case 0x67:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleRetroactiveConformance(this);
        case 0x68:
          int v49 = *((_DWORD *)this + 24);
          if (!v49) {
            goto LABEL_286;
          }
          int v50 = v49 - 1;
          unint64_t v51 = *(void *)(*((void *)this + 11) + 8 * (v49 - 1));
          if (*(_WORD *)(v51 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v50;
          int v52 = *(unsigned __int8 *)(v51 + 18);
          if (v52 == 1) {
            goto LABEL_128;
          }
          if (v52 != 5 || *(_DWORD *)(v51 + 8) != 1) {
            goto LABEL_286;
          }
          unint64_t v51 = *(void *)v51;
LABEL_128:
          unint64_t v21 = *(void *)v51;
          if (!*(void *)v51) {
            goto LABEL_287;
          }
          unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v53 = 2 * *((void *)this + 4);
            if (v53 <= 0x20) {
              unint64_t v53 = 32;
            }
            *((void *)this + 4) = v53;
            unint64_t v54 = v53 + 8;
            uint64_t v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
            unsigned int v56 = (char *)v55 + v54;
            *uint64_t v55 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v56;
            *((void *)this + 3) = v55;
          }
          *((void *)this + 1) = v29 + 24;
          __int16 v57 = 208;
          goto LABEL_209;
        case 0x69:
          return swift::Demangle::__runtime::Demangler::demangleSubscript(this);
        case 0x6C:
          int v58 = 0;
          goto LABEL_168;
        case 0x6D:
          int v59 = *((_DWORD *)this + 24);
          if (!v59) {
            goto LABEL_286;
          }
          unsigned int v60 = v59 - 1;
          unint64_t v21 = *(void *)(*((void *)this + 11) + 8 * v60);
          if (*(_WORD *)(v21 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v60;
          unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v61 = 2 * *((void *)this + 4);
            if (v61 <= 0x20) {
              unint64_t v61 = 32;
            }
            *((void *)this + 4) = v61;
            unint64_t v62 = v61 + 8;
            BOOL v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
            uint64_t v64 = (char *)v63 + v62;
            *BOOL v63 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v64;
            *((void *)this + 3) = v63;
          }
          *((void *)this + 1) = v29 + 24;
          __int16 v57 = 145;
          goto LABEL_209;
        case 0x6E:
          int v65 = *((_DWORD *)this + 24);
          if (!v65) {
            goto LABEL_286;
          }
          int v66 = v65 - 1;
          unint64_t v67 = *(void *)(*((void *)this + 11) + 8 * (v65 - 1));
          if (*(_WORD *)(v67 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v66;
          int v68 = *(unsigned __int8 *)(v67 + 18);
          if (v68 == 1) {
            goto LABEL_153;
          }
          if (v68 != 5 || *(_DWORD *)(v67 + 8) != 1) {
            goto LABEL_286;
          }
          unint64_t v67 = *(void *)v67;
LABEL_153:
          unint64_t v21 = *(void *)v67;
          if (!*(void *)v67) {
            goto LABEL_287;
          }
          unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v29;
          if (!v29 || v29 + 24 > *((void *)this + 2))
          {
            unint64_t v69 = 2 * *((void *)this + 4);
            if (v69 <= 0x20) {
              unint64_t v69 = 32;
            }
            *((void *)this + 4) = v69;
            unint64_t v70 = v69 + 8;
            unint64_t v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
            char v72 = (char *)v71 + v70;
            *unint64_t v71 = *((void *)this + 3);
            unint64_t v29 = ((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v72;
            *((void *)this + 3) = v71;
          }
          *((void *)this + 1) = v29 + 24;
          __int16 v57 = 209;
          goto LABEL_209;
        case 0x6F:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(this);
        case 0x70:
          unint64_t DependentGenericParamType = swift::Demangle::__runtime::Demangler::demangleProtocolList(this);
          if (!DependentGenericParamType) {
            goto LABEL_286;
          }
          goto LABEL_188;
        case 0x71:
          unint64_t DependentGenericParamType = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
          if (!DependentGenericParamType) {
            goto LABEL_286;
          }
          goto LABEL_188;
        case 0x72:
          int v58 = 1;
LABEL_168:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericSignature(this, v58);
        case 0x73:
          uint64_t v11 = "Swift";
          __int16 v13 = 153;
          size_t v12 = 5;
LABEL_172:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this, v13, v11, v12);
        case 0x74:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popTuple(this);
        case 0x75:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericType(this);
        case 0x76:
          unint64_t v74 = swift::Demangle::__runtime::Demangler::demangleEntity(this, 254);
          return swift::Demangle::__runtime::Demangler::demangleAccessor(this, v74);
        case 0x77:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleValueWitness(this);
        case 0x78:
          unint64_t DependentGenericParamType = swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, 0, 0);
          if (!DependentGenericParamType) {
            goto LABEL_286;
          }
LABEL_188:
          unint64_t v29 = DependentGenericParamType;
          goto LABEL_210;
        case 0x79:
          unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v21;
          if (!v21 || v21 + 24 > *((void *)this + 2))
          {
            unint64_t v75 = 2 * *((void *)this + 4);
            if (v75 <= 0x20) {
              unint64_t v75 = 32;
            }
            *((void *)this + 4) = v75;
            unint64_t v76 = v75 + 8;
            unint64_t v77 = malloc_type_malloc(v75 + 8, 0xD0263BC5uLL);
            unint64_t v78 = (char *)v77 + v76;
            void *v77 = *((void *)this + 3);
            unint64_t v21 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v78;
            *((void *)this + 3) = v77;
          }
          *((void *)this + 1) = v21 + 24;
          __int16 v26 = 274;
LABEL_195:
          *(_WORD *)(v21 + 16) = v26;
          *(unsigned char *)(v21 + 18) = 0;
          goto LABEL_287;
        case 0x7A:
          int v79 = *((_DWORD *)this + 24);
          if (!v79) {
            goto LABEL_286;
          }
          int v80 = v79 - 1;
          unint64_t v81 = *(void *)(*((void *)this + 11) + 8 * (v79 - 1));
          if (*(_WORD *)(v81 + 16) != 232) {
            goto LABEL_286;
          }
          *((_DWORD *)this + 24) = v80;
          int v82 = *(unsigned __int8 *)(v81 + 18);
          if (v82 == 1) {
            goto LABEL_202;
          }
          if (v82 == 5 && *(_DWORD *)(v81 + 8) == 1)
          {
            unint64_t v81 = *(void *)v81;
LABEL_202:
            unint64_t v21 = *(void *)v81;
            if (*(void *)v81)
            {
              unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 1) = v29;
              if (!v29 || v29 + 24 > *((void *)this + 2))
              {
                unint64_t v83 = 2 * *((void *)this + 4);
                if (v83 <= 0x20) {
                  unint64_t v83 = 32;
                }
                *((void *)this + 4) = v83;
                unint64_t v84 = v83 + 8;
                uint64_t v85 = malloc_type_malloc(v83 + 8, 0xD0263BC5uLL);
                uint64_t v86 = (char *)v85 + v84;
                void *v85 = *((void *)this + 3);
                unint64_t v29 = ((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 2) = v86;
                *((void *)this + 3) = v85;
              }
              *((void *)this + 1) = v29 + 24;
              __int16 v57 = 123;
LABEL_209:
              *(_WORD *)(v29 + 16) = v57;
              *(unsigned char *)(v29 + 18) = 0;
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v29, (swift::Demangle::__runtime::Node *)v21, this);
LABEL_210:
              unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 1) = v21;
              if (!v21 || v21 + 24 > *((void *)this + 2))
              {
                unint64_t v87 = 2 * *((void *)this + 4);
                if (v87 <= 0x20) {
                  unint64_t v87 = 32;
                }
                *((void *)this + 4) = v87;
                unint64_t v88 = v87 + 8;
                size_t v89 = malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
                unint64_t v90 = (char *)v89 + v88;
                *size_t v89 = *((void *)this + 3);
                unint64_t v21 = ((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8;
                *((void *)this + 2) = v90;
                *((void *)this + 3) = v89;
              }
              *((void *)this + 1) = v21 + 24;
              __int16 v34 = 232;
LABEL_216:
              *(_WORD *)(v21 + 16) = v34;
              *(unsigned char *)(v21 + 18) = 0;
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v21, (swift::Demangle::__runtime::Node *)v29, this);
            }
          }
          else
          {
LABEL_286:
            unint64_t v21 = 0;
          }
LABEL_287:
          uint64_t result = (swift::Demangle::__runtime::Node *)v21;
          break;
        case 0xFF:
          continue;
        default:
          goto LABEL_10;
      }
    }
    return result;
  }
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChild(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3)
{
  if (!a3) {
    return 0;
  }
  unint64_t v6 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)a1 + 2))
  {
    unint64_t v7 = 2 * *((void *)a1 + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)a1 + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    *unint64_t v9 = *((void *)a1 + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v10;
    *((void *)a1 + 3) = v9;
  }
  *((void *)a1 + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a3, a1);
  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::createType(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unint64_t v8 = (char *)v7 + v6;
    *unint64_t v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 232;
  *(unsigned char *)(v4 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, a2, this);
  return v4;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4)
{
  unint64_t v4 = 0;
  if (a3 && a4)
  {
    unint64_t v4 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v4;
    if (!v4 || v4 + 24 > *((void *)a1 + 2))
    {
      unint64_t v9 = 2 * *((void *)a1 + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)a1 + 4) = v9;
      unint64_t v10 = v9 + 8;
      uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      size_t v12 = (char *)v11 + v10;
      void *v11 = *((void *)a1 + 3);
      unint64_t v4 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v12;
      *((void *)a1 + 3) = v11;
    }
    *((void *)a1 + 1) = v4 + 24;
    *(_WORD *)(v4 + 16) = a2;
    *(unsigned char *)(v4 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, a3, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, a4, a1);
  }
  return v4;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4, swift::Demangle::__runtime::Node *a5)
{
  unint64_t v5 = 0;
  if (a3 && a4 && a5)
  {
    unint64_t v5 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v5;
    if (!v5 || v5 + 24 > *((void *)a1 + 2))
    {
      unint64_t v11 = 2 * *((void *)a1 + 4);
      if (v11 <= 0x20) {
        unint64_t v11 = 32;
      }
      *((void *)a1 + 4) = v11;
      unint64_t v12 = v11 + 8;
      __int16 v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      __int16 v14 = (char *)v13 + v12;
      *__int16 v13 = *((void *)a1 + 3);
      unint64_t v5 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v14;
      *((void *)a1 + 3) = v13;
    }
    *((void *)a1 + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = a2;
    *(unsigned char *)(v5 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, a3, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, a4, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, a5, a1);
  }
  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::createWithChildren(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, swift::Demangle::__runtime::Node *a3, swift::Demangle::__runtime::Node *a4, swift::Demangle::__runtime::Node *a5, swift::Demangle::__runtime::Node *a6)
{
  unint64_t v6 = 0;
  if (a3 && a4 && a5 && a6)
  {
    unint64_t v6 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v6;
    if (!v6 || v6 + 24 > *((void *)a1 + 2))
    {
      unint64_t v13 = 2 * *((void *)a1 + 4);
      if (v13 <= 0x20) {
        unint64_t v13 = 32;
      }
      *((void *)a1 + 4) = v13;
      unint64_t v14 = v13 + 8;
      unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
      size_t v16 = (char *)v15 + v14;
      *unint64_t v15 = *((void *)a1 + 3);
      unint64_t v6 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v16;
      *((void *)a1 + 3) = v15;
    }
    *((void *)a1 + 1) = v6 + 24;
    *(_WORD *)(v6 + 16) = a2;
    *(unsigned char *)(v6 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a3, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a4, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a5, a1);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a6, a1);
  }
  return v6;
}

unint64_t swift::Demangle::__runtime::Demangler::changeKind(swift::Demangle::__runtime::NodeFactory *a1, swift::Demangle::__runtime::Node **a2, __int16 a3)
{
  if (!a2) {
    return 0;
  }
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 4)
  {
    unint64_t v13 = *a2;
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v14 = 2 * *((void *)a1 + 4);
      if (v14 <= 0x20) {
        unint64_t v14 = 32;
      }
      *((void *)a1 + 4) = v14;
      unint64_t v15 = v14 + 8;
      size_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      BOOL v17 = (char *)v16 + v15;
      *size_t v16 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v17;
      *((void *)a1 + 3) = v16;
    }
    *((void *)a1 + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = a3;
    *(unsigned char *)(v8 + 18) = 4;
    *(void *)unint64_t v8 = v13;
  }
  else if (v6 == 3)
  {
    long long v7 = *(_OWORD *)a2;
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v9 = 2 * *((void *)a1 + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)a1 + 4) = v9;
      unint64_t v10 = v9 + 8;
      long long v28 = v7;
      unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      long long v7 = v28;
      unint64_t v12 = (char *)v11 + v10;
      void *v11 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v12;
      *((void *)a1 + 3) = v11;
    }
    *((void *)a1 + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = a3;
    *(unsigned char *)(v8 + 18) = 3;
    *(_OWORD *)unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v18 = 2 * *((void *)a1 + 4);
      if (v18 <= 0x20) {
        unint64_t v18 = 32;
      }
      *((void *)a1 + 4) = v18;
      unint64_t v19 = v18 + 8;
      unint64_t v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)v20 + v19;
      *unint64_t v20 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v21;
      *((void *)a1 + 3) = v20;
    }
    *((void *)a1 + 1) = v8 + 24;
    *(_WORD *)(v8 + 16) = a3;
    *(unsigned char *)(v8 + 18) = 0;
  }
  int v22 = *((unsigned __int8 *)a2 + 18);
  unint64_t v23 = a2;
  if ((v22 - 1) >= 2)
  {
    if (v22 == 5)
    {
      unsigned int v24 = *a2;
      unint64_t v23 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_31:
      unsigned int v25 = (swift::Demangle::__runtime::Node **)((char *)v24 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_36;
    }
    unint64_t v23 = 0;
  }
  switch(v22)
  {
    case 1:
      unsigned int v25 = a2 + 1;
      break;
    case 2:
      unsigned int v25 = a2 + 2;
      break;
    case 5:
      unsigned int v24 = *a2;
      goto LABEL_31;
    default:
      unsigned int v25 = 0;
      break;
  }
LABEL_36:
  while (v23 != v25)
  {
    __int16 v26 = *v23++;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v8, v26, a1);
  }
  return v8;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleTypeMangling(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (v2
    && (unsigned int v3 = v2 - 1,
        unint64_t v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v3),
        *((_WORD *)v4 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v3;
  }
  else
  {
    unint64_t v4 = 0;
  }
  unint64_t v5 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v4);
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)this + 2))
  {
    unint64_t v7 = 2 * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    *unint64_t v9 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }
  *((void *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 236;
  *(unsigned char *)(v6 + 18) = 0;
  if (v5 && v6) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v5, this);
  }
  unint64_t result = 0;
  if (v4)
  {
    if (v6)
    {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v4, this);
      return v6;
    }
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popFunctionParamLabels(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2)
{
  if (!*((unsigned char *)this + 80))
  {
    int v5 = *((_DWORD *)this + 24);
    if (v5)
    {
      unsigned int v6 = v5 - 1;
      if (*(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v6) + 16) == 274)
      {
        *((_DWORD *)this + 24) = v6;
        unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v8 = 2 * *((void *)this + 4);
          if (v8 <= 0x20) {
            unint64_t v8 = 32;
          }
          *((void *)this + 4) = v8;
          unint64_t v9 = v8 + 8;
          unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
          unint64_t v11 = (char *)v10 + v9;
          *unint64_t v10 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v11;
          *((void *)this + 3) = v10;
        }
        *((void *)this + 1) = v7 + 24;
        *(_WORD *)(v7 + 16) = 290;
        *(unsigned char *)(v7 + 18) = 0;
        return v7;
      }
    }
  }
  if (!a2 || *((_WORD *)a2 + 8) != 232) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 18);
  if ((v3 - 1) < 2) {
    goto LABEL_8;
  }
  if (v3 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_8:
    unint64_t v4 = *(uint64_t **)a2;
    goto LABEL_18;
  }
  unint64_t v4 = 0;
LABEL_18:
  if (*((_WORD *)v4 + 8) != 44) {
    goto LABEL_31;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      unint64_t v13 = 0;
      goto LABEL_25;
    }
    unint64_t v4 = (uint64_t *)*v4;
  }
  unint64_t v13 = (uint64_t *)v4[1];
LABEL_25:
  int v14 = *((unsigned __int8 *)v13 + 18);
  if ((v14 - 1) >= 2)
  {
    if (v14 != 5 || !*((_DWORD *)v13 + 2))
    {
      unint64_t v4 = 0;
      goto LABEL_31;
    }
    unint64_t v13 = (uint64_t *)*v13;
  }
  unint64_t v4 = (uint64_t *)*v13;
LABEL_31:
  int v15 = *((unsigned __int16 *)v4 + 8);
  if (v15 != 82 && v15 != 65) {
    return 0;
  }
  int v16 = *((unsigned __int8 *)v4 + 18);
  unsigned int v17 = v16 - 1;
  unint64_t v18 = v4;
  if ((v16 - 1) >= 2) {
    unint64_t v18 = (uint64_t *)*v4;
  }
  uint64_t v19 = *(unsigned __int16 *)(*v18 + 16) == 349;
  if (v17 >= 2)
  {
    unint64_t v20 = (uint64_t *)*v4;
    if (*(_WORD *)(*(void *)(*v4 + 8 * v19) + 16) == 67) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
  }
  else
  {
    if (*(_WORD *)(v4[v19] + 16) == 67) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
    unint64_t v20 = v4;
  }
  if (*(_WORD *)(v20[v19] + 16) == 129) {
    uint64_t v19 = (v19 + 1);
  }
  else {
    uint64_t v19 = v19;
  }
  if (v16 == 5)
  {
    unint64_t v21 = (uint64_t *)*v4;
    if (*(_WORD *)(*(void *)(*v4 + 8 * v19) + 16) == 130) {
      LODWORD(v19) = v19 + 1;
    }
    if (*(_WORD *)(v21[v19] + 16) == 68) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
  }
  else
  {
    if (v16 == 2)
    {
      if (*(_WORD *)(v4[v19] + 16) == 130) {
        uint64_t v19 = (v19 + 1);
      }
      else {
        uint64_t v19 = v19;
      }
    }
    else
    {
      uint64_t v19 = *(unsigned __int16 *)(v4[v19] + 16) == 130;
    }
    if (*(_WORD *)(v4[v19] + 16) == 68) {
      uint64_t v19 = (v19 + 1);
    }
    else {
      uint64_t v19 = v19;
    }
    unint64_t v21 = v4;
  }
  if (*(_WORD *)(v21[v19] + 16) == 272) {
    goto LABEL_65;
  }
  int v22 = v4;
  if (v17 >= 2) {
    int v22 = (uint64_t *)*v4;
  }
  if (*(_WORD *)(v22[v19] + 16) == 273) {
LABEL_65:
  }
    uint64_t v19 = (v19 + 1);
  if (v16 == 5)
  {
    unint64_t v24 = *((unsigned int *)v4 + 2);
    unsigned int v25 = (uint64_t *)*v4;
    if (*(_WORD *)(*(void *)(*v4 + 8 * v19) + 16) == 66) {
      LODWORD(v19) = v19 + 1;
    }
    if (*(_WORD *)(v25[v19] + 16) == 271) {
      LODWORD(v19) = v19 + 1;
    }
    if (*(_WORD *)(v25[v19] + 16) == 348) {
      LODWORD(v19) = v19 + 1;
    }
  }
  else if (v16 == 2)
  {
    if (*(_WORD *)(v4[v19] + 16) == 66) {
      unsigned int v23 = v19 + 1;
    }
    else {
      unsigned int v23 = v19;
    }
    if (*(_WORD *)(v4[v23] + 16) == 271) {
      ++v23;
    }
    if (*(_WORD *)(v4[v23] + 16) == 348) {
      LODWORD(v19) = v23 + 1;
    }
    else {
      LODWORD(v19) = v23;
    }
    unint64_t v24 = 2;
  }
  else
  {
    if (*(_WORD *)(v4[v19] + 16) == 66) {
      unsigned int v26 = v19 + 1;
    }
    else {
      unsigned int v26 = v19;
    }
    LODWORD(v19) = *(unsigned __int16 *)(v4[*(_WORD *)(v4[v26] + 16) == 271] + 16) == 348;
    unint64_t v24 = 1;
  }
  if (v24 <= v19)
  {
    int v27 = 0;
  }
  else
  {
    if (v17 >= 2) {
      unint64_t v4 = (uint64_t *)*v4;
    }
    int v27 = (uint64_t *)v4[v19];
  }
  int v28 = *((unsigned __int8 *)v27 + 18);
  unint64_t v29 = (uint64_t **)v27;
  if ((v28 - 1) < 2) {
    goto LABEL_97;
  }
  if (v28 == 5 && *((_DWORD *)v27 + 2))
  {
    unint64_t v29 = (uint64_t **)*v27;
LABEL_97:
    unint64_t v30 = *v29;
    goto LABEL_99;
  }
  unint64_t v30 = 0;
LABEL_99:
  int v31 = *((unsigned __int8 *)v30 + 18);
  if ((v31 - 1) < 2)
  {
LABEL_103:
    int v32 = (uint64_t *)*v30;
    goto LABEL_105;
  }
  if (v31 == 5 && *((_DWORD *)v30 + 2))
  {
    unint64_t v30 = (uint64_t *)*v30;
    goto LABEL_103;
  }
  int v32 = 0;
LABEL_105:
  if (*((_WORD *)v32 + 8) == 223)
  {
    int v33 = *((unsigned __int8 *)v32 + 18);
    if (v33 != 1)
    {
      if (v33 == 5)
      {
        int v33 = *((_DWORD *)v32 + 2);
        if (!v33) {
          return 0;
        }
      }
      else if (v33 != 2)
      {
        return 0;
      }
    }
  }
  else
  {
    int v33 = 1;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)this + 2))
  {
    unint64_t v34 = 2 * *((void *)this + 4);
    if (v34 <= 0x20) {
      unint64_t v34 = 32;
    }
    *((void *)this + 4) = v34;
    unint64_t v35 = v34 + 8;
    int v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
    unint64_t v37 = (char *)v36 + v35;
    *int v36 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v37;
    *((void *)this + 3) = v36;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 290;
  *(unsigned char *)(v7 + 18) = 0;
  int v38 = *((unsigned __int8 *)v27 + 18);
  if ((v38 - 1) < 2) {
    goto LABEL_120;
  }
  if (v38 == 5 && *((_DWORD *)v27 + 2))
  {
    int v27 = (uint64_t *)*v27;
LABEL_120:
    unint64_t v39 = (uint64_t *)*v27;
    goto LABEL_122;
  }
  unint64_t v39 = 0;
LABEL_122:
  int v40 = *((unsigned __int8 *)v39 + 18);
  if ((v40 - 1) < 2) {
    goto LABEL_126;
  }
  if (v40 == 5 && *((_DWORD *)v39 + 2))
  {
    unint64_t v39 = (uint64_t *)*v39;
LABEL_126:
    unint64_t v41 = (uint64_t *)*v39;
    if (!*((unsigned char *)this + 80)) {
      goto LABEL_131;
    }
LABEL_129:
    if (!v41 || *((_WORD *)v41 + 8) != 223) {
      return v7;
    }
    goto LABEL_131;
  }
  unint64_t v41 = 0;
  if (*((unsigned char *)this + 80)) {
    goto LABEL_129;
  }
LABEL_131:
  unint64_t v42 = 0;
  char v43 = 0;
  do
  {
    if (!*((unsigned char *)this + 80))
    {
      int v53 = *((_DWORD *)this + 24);
      if (v53)
      {
        unsigned int v54 = v53 - 1;
        unint64_t v48 = *(void *)(*((void *)this + 11) + 8 * v54);
        *((_DWORD *)this + 24) = v54;
        if (v48)
        {
          int v55 = *(unsigned __int16 *)(v48 + 16);
          if (v55 == 275 || v55 == 101) {
            goto LABEL_136;
          }
        }
      }
      return 0;
    }
    unint64_t v49 = *((unsigned __int8 *)v41 + 18);
    unsigned int v50 = v49 - 1;
    if (v49 == 1) {
      goto LABEL_142;
    }
    if (v49 != 5)
    {
      if (v49 != 2) {
        goto LABEL_152;
      }
      unint64_t v49 = 2;
LABEL_142:
      if (v49 > v42) {
        goto LABEL_143;
      }
      goto LABEL_152;
    }
    if (*((unsigned int *)v41 + 2) > v42)
    {
LABEL_143:
      unint64_t v51 = v41;
      if (v50 >= 2) {
        unint64_t v51 = (uint64_t *)*v41;
      }
      int v52 = (uint64_t *)v51[v42];
      goto LABEL_153;
    }
LABEL_152:
    int v52 = 0;
LABEL_153:
    int v56 = *((unsigned __int8 *)v52 + 18);
    switch(v56)
    {
      case 1:
        uint64_t v57 = *((unsigned __int8 *)v52 + 18);
        break;
      case 5:
        uint64_t v57 = *((unsigned int *)v52 + 2);
        if (!v57)
        {
LABEL_171:
          unint64_t v48 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v48;
          if (!v48 || v48 + 24 > *((void *)this + 2))
          {
            unint64_t v44 = 2 * *((void *)this + 4);
            if (v44 <= 0x20) {
              unint64_t v44 = 32;
            }
            *((void *)this + 4) = v44;
            unint64_t v45 = v44 + 8;
            unint64_t v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
            int v47 = (char *)v46 + v45;
            *unint64_t v46 = *((void *)this + 3);
            unint64_t v48 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v47;
            *((void *)this + 3) = v46;
          }
          *((void *)this + 1) = v48 + 24;
          *(_WORD *)(v48 + 16) = 275;
          *(unsigned char *)(v48 + 18) = 0;
          goto LABEL_136;
        }
        break;
      case 2:
        uint64_t v57 = 2;
        break;
      default:
        goto LABEL_171;
    }
    unint64_t v58 = 0;
    unsigned int v59 = 1;
    while (1)
    {
      unint64_t v60 = *((unsigned __int8 *)v52 + 18);
      if (v56 == 1) {
        goto LABEL_163;
      }
      if (v56 != 5)
      {
        unint64_t v60 = 2;
LABEL_163:
        if (v60 <= v58) {
          goto LABEL_168;
        }
        goto LABEL_164;
      }
      if (*((unsigned int *)v52 + 2) <= v58)
      {
LABEL_168:
        unint64_t v62 = 0;
        goto LABEL_169;
      }
LABEL_164:
      unint64_t v61 = v52;
      if ((v56 - 1) >= 2) {
        unint64_t v61 = (uint64_t *)*v52;
      }
      unint64_t v62 = (long long *)v61[v58];
LABEL_169:
      if (*((_WORD *)v62 + 8) == 225) {
        break;
      }
      ++v58;
      ++v59;
      if (v57 == v58) {
        goto LABEL_171;
      }
    }
    if (v56 == 5)
    {
      int v63 = *((_DWORD *)v52 + 2);
      if (v58 - v63 == -1)
      {
        *((_DWORD *)v52 + 2) = v58;
      }
      else
      {
        do
        {
          *(void *)(*v52 + 8 * (v59 - 1)) = *(void *)(*v52 + 8 * v59);
          ++v59;
        }
        while (v63 != v59);
        --*((_DWORD *)v52 + 2);
      }
    }
    else if (v56 == 2)
    {
      if (!v58) {
        uint64_t *v52 = v52[1];
      }
      *((unsigned char *)v52 + 18) = 1;
    }
    else
    {
      *((unsigned char *)v52 + 18) = 0;
    }
    long long v64 = *v62;
    unint64_t v48 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v48;
    if (!v48 || v48 + 24 > *((void *)this + 2))
    {
      unint64_t v65 = 2 * *((void *)this + 4);
      if (v65 <= 0x20) {
        unint64_t v65 = 32;
      }
      *((void *)this + 4) = v65;
      unint64_t v66 = v65 + 8;
      long long v70 = v64;
      unint64_t v67 = malloc_type_malloc(v65 + 8, 0xD0263BC5uLL);
      long long v64 = v70;
      int v68 = (char *)v67 + v66;
      *unint64_t v67 = *((void *)this + 3);
      unint64_t v48 = ((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v68;
      *((void *)this + 3) = v67;
    }
    *((void *)this + 1) = v48 + 24;
    *(_WORD *)(v48 + 16) = 101;
    *(unsigned char *)(v48 + 18) = 3;
    *(_OWORD *)unint64_t v48 = v64;
LABEL_136:
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v48, this);
    v43 |= *(unsigned __int16 *)(v48 + 16) != 275;
    ++v42;
  }
  while (v42 != v33);
  if (v43)
  {
    if (!*((unsigned char *)this + 80)) {
      swift::Demangle::__runtime::Node::reverseChildren((int8x16_t *)v7, 0);
    }
    return v7;
  }

  return swift::Demangle::__runtime::NodeFactory::createNode(this, 290);
}

uint64_t swift::Demangle::__runtime::Demangler::demangleSymbolicReference(swift::Demangle::__runtime::Demangler *this, int a2)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = v2 + 4;
  if ((unint64_t)(v2 + 4) > *((void *)this + 8)) {
    return 0;
  }
  uint64_t v5 = 0;
  unsigned int v6 = (_DWORD *)(*((void *)this + 7) + v2);
  int v7 = *v6;
  *((void *)this + 9) = v3;
  int v8 = 0;
  char v9 = 0;
  int v10 = 0;
  int v11 = 1;
  switch(a2)
  {
    case 1:
      goto LABEL_10;
    case 2:
      int v8 = 0;
      char v9 = 0;
      int v10 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
      goto LABEL_11;
    case 9:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
      goto LABEL_11;
    case 10:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 2;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
      goto LABEL_11;
    case 11:
      int v11 = 0;
      int v8 = 0;
      int v10 = 0;
      char v9 = 3;
LABEL_10:
      uint64_t v12 = *((void *)this + 71);
      if (v12) {
        goto LABEL_11;
      }
      return 0;
    case 12:
      int v11 = 0;
      int v10 = 0;
      char v9 = 4;
      int v8 = 1;
      uint64_t v12 = *((void *)this + 71);
      if (!v12) {
        return 0;
      }
LABEL_11:
      char v18 = v9;
      int v16 = v7;
      int v17 = v10;
      uint64_t v19 = v6;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, char *, int *, int *, _DWORD **))(*(void *)v12 + 48))(v12, &v18, &v17, &v16, &v19);
      uint64_t v5 = v13;
      if (v13)
      {
        if ((v11 | v8) == 1)
        {
          int v14 = *(unsigned __int16 *)(v13 + 16);
          if (v14 != 301 && v14 != 309)
          {
            uint64_t v19 = (_DWORD *)v13;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v19, this);
          }
        }
      }
      break;
    default:
      return v5;
  }
  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleTypeAnnotation(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  switch(*(unsigned char *)(v6 + v1))
  {
    case 'A':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v7 = 2 * *((void *)this + 4);
        if (v7 <= 0x20) {
          unint64_t v7 = 32;
        }
        *((void *)this + 4) = v7;
        unint64_t v8 = v7 + 8;
        char v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
        int v10 = (char *)v9 + v8;
        *char v9 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v10;
        *((void *)this + 3) = v9;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 129;
      goto LABEL_50;
    case 'K':
      int v12 = *((_DWORD *)this + 24);
      if (!v12) {
        return 0;
      }
      int v13 = v12 - 1;
      unint64_t v14 = *(void *)(*((void *)this + 11) + 8 * (v12 - 1));
      if (*(_WORD *)(v14 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v13;
      int v15 = *(unsigned __int8 *)(v14 + 18);
      if (v15 == 1) {
        goto LABEL_15;
      }
      if (v15 != 5 || *(_DWORD *)(v14 + 8) != 1) {
        return 0;
      }
      unint64_t v14 = *(void *)v14;
LABEL_15:
      unint64_t v16 = *(void *)v14;
      if (!*(void *)v14) {
        return 0;
      }
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= 0x20) {
          unint64_t v17 = 32;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        uint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        unint64_t v20 = (char *)v19 + v18;
        *uint64_t v19 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v21 = 273;
      goto LABEL_128;
    case 'L':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      uint64_t v22 = *(char *)(v6 + v5);
      if (v22 == 115) {
        goto LABEL_26;
      }
      if (v22 != 105) {
        return 0;
      }
      uint64_t v22 = 105;
LABEL_26:
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v23 = 2 * *((void *)this + 4);
        if (v23 <= 0x20) {
          unint64_t v23 = 32;
        }
        *((void *)this + 4) = v23;
        unint64_t v24 = v23 + 8;
        unsigned int v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
        unsigned int v26 = (char *)v25 + v24;
        *unsigned int v25 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v26;
        *((void *)this + 3) = v25;
      }
      *((void *)this + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 349;
      *(unsigned char *)(v4 + 18) = 4;
      *(void *)unint64_t v4 = v22;
      return v4;
    case 'T':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v27 = 2 * *((void *)this + 4);
        if (v27 <= 0x20) {
          unint64_t v27 = 32;
        }
        *((void *)this + 4) = v27;
        unint64_t v28 = v27 + 8;
        unint64_t v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        unint64_t v30 = (char *)v29 + v28;
        *unint64_t v29 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v30;
        *((void *)this + 3) = v29;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 130;
      goto LABEL_50;
    case 'a':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v31 = 2 * *((void *)this + 4);
        if (v31 <= 0x20) {
          unint64_t v31 = 32;
        }
        *((void *)this + 4) = v31;
        unint64_t v32 = v31 + 8;
        int v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
        unint64_t v34 = (char *)v33 + v32;
        *int v33 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v34;
        *((void *)this + 3) = v33;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 271;
      goto LABEL_50;
    case 'b':
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v35 = 2 * *((void *)this + 4);
        if (v35 <= 0x20) {
          unint64_t v35 = 32;
        }
        *((void *)this + 4) = v35;
        unint64_t v36 = v35 + 8;
        unint64_t v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        int v38 = (char *)v37 + v36;
        void *v37 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v38;
        *((void *)this + 3) = v37;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v11 = 66;
LABEL_50:
      *(_WORD *)(v4 + 16) = v11;
      *(unsigned char *)(v4 + 18) = 0;
      return v4;
    case 'c':
      int v39 = *((_DWORD *)this + 24);
      if (!v39) {
        return 0;
      }
      int v40 = v39 - 1;
      unint64_t v41 = *(void *)(*((void *)this + 11) + 8 * (v39 - 1));
      if (*(_WORD *)(v41 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v40;
      int v42 = *(unsigned __int8 *)(v41 + 18);
      if (v42 == 1) {
        goto LABEL_57;
      }
      if (v42 != 5 || *(_DWORD *)(v41 + 8) != 1) {
        return 0;
      }
      unint64_t v41 = *(void *)v41;
LABEL_57:
      unint64_t v16 = *(void *)v41;
      if (!*(void *)v41) {
        return 0;
      }
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v43 = 2 * *((void *)this + 4);
        if (v43 <= 0x20) {
          unint64_t v43 = 32;
        }
        *((void *)this + 4) = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        unint64_t v46 = (char *)v45 + v44;
        *unint64_t v45 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v46;
        *((void *)this + 3) = v45;
      }
      *((void *)this + 1) = v4 + 24;
      __int16 v21 = 67;
      goto LABEL_128;
    case 'i':
      int v47 = *((_DWORD *)this + 24);
      if (!v47) {
        return 0;
      }
      int v48 = v47 - 1;
      unint64_t v49 = *(void *)(*((void *)this + 11) + 8 * (v47 - 1));
      if (*(_WORD *)(v49 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v48;
      int v50 = *(unsigned __int8 *)(v49 + 18);
      if (v50 == 1) {
        goto LABEL_70;
      }
      if (v50 != 5 || *(_DWORD *)(v49 + 8) != 1) {
        return 0;
      }
      unint64_t v49 = *(void *)v49;
LABEL_70:
      unint64_t v4 = *(void *)v49;
      if (!*(void *)v49) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v51 = 2 * *((void *)this + 4);
        if (v51 <= 0x20) {
          unint64_t v51 = 32;
        }
        *((void *)this + 4) = v51;
        unint64_t v52 = v51 + 8;
        int v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        unsigned int v54 = (char *)v53 + v52;
        *int v53 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v54;
        *((void *)this + 3) = v53;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 127;
      break;
    case 'j':
      return swift::Demangle::__runtime::Demangler::demangleDifferentiableFunctionType(this);
    case 'k':
      int v57 = *((_DWORD *)this + 24);
      if (!v57) {
        return 0;
      }
      int v58 = v57 - 1;
      unint64_t v59 = *(void *)(*((void *)this + 11) + 8 * (v57 - 1));
      if (*(_WORD *)(v59 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v58;
      int v60 = *(unsigned __int8 *)(v59 + 18);
      if (v60 == 1) {
        goto LABEL_86;
      }
      if (v60 != 5 || *(_DWORD *)(v59 + 8) != 1) {
        return 0;
      }
      unint64_t v59 = *(void *)v59;
LABEL_86:
      unint64_t v4 = *(void *)v59;
      if (!*(void *)v59) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v61 = 2 * *((void *)this + 4);
        if (v61 <= 0x20) {
          unint64_t v61 = 32;
        }
        *((void *)this + 4) = v61;
        unint64_t v62 = v61 + 8;
        int v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
        long long v64 = (char *)v63 + v62;
        *int v63 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v64;
        *((void *)this + 3) = v63;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 326;
      break;
    case 'l':
      return swift::Demangle::__runtime::Demangler::demangleLifetimeDependenceKind(this, 0);
    case 't':
      int v65 = *((_DWORD *)this + 24);
      if (!v65) {
        return 0;
      }
      int v66 = v65 - 1;
      unint64_t v67 = *(void *)(*((void *)this + 11) + 8 * (v65 - 1));
      if (*(_WORD *)(v67 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v66;
      int v68 = *(unsigned __int8 *)(v67 + 18);
      if (v68 == 1) {
        goto LABEL_102;
      }
      if (v68 != 5 || *(_DWORD *)(v67 + 8) != 1) {
        return 0;
      }
      unint64_t v67 = *(void *)v67;
LABEL_102:
      unint64_t v4 = *(void *)v67;
      if (!*(void *)v67) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v69 = 2 * *((void *)this + 4);
        if (v69 <= 0x20) {
          unint64_t v69 = 32;
        }
        *((void *)this + 4) = v69;
        unint64_t v70 = v69 + 8;
        unint64_t v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
        char v72 = (char *)v71 + v70;
        *unint64_t v71 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v72;
        *((void *)this + 3) = v71;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 331;
      break;
    case 'u':
      int v73 = *((_DWORD *)this + 24);
      if (!v73) {
        return 0;
      }
      int v74 = v73 - 1;
      unint64_t v75 = *(void *)(*((void *)this + 11) + 8 * (v73 - 1));
      if (*(_WORD *)(v75 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v74;
      int v76 = *(unsigned __int8 *)(v75 + 18);
      if (v76 == 1) {
        goto LABEL_115;
      }
      if (v76 != 5 || *(_DWORD *)(v75 + 8) != 1) {
        return 0;
      }
      unint64_t v75 = *(void *)v75;
LABEL_115:
      unint64_t v4 = *(void *)v75;
      if (!*(void *)v75) {
        return v4;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v77 = 2 * *((void *)this + 4);
        if (v77 <= 0x20) {
          unint64_t v77 = 32;
        }
        *((void *)this + 4) = v77;
        unint64_t v78 = v77 + 8;
        int v79 = malloc_type_malloc(v77 + 8, 0xD0263BC5uLL);
        int v80 = (char *)v79 + v78;
        void *v79 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v79 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v80;
        *((void *)this + 3) = v79;
      }
      *((void *)this + 1) = v16 + 24;
      __int16 v55 = 128;
      break;
    default:
      return v4;
  }
  *(_WORD *)(v16 + 16) = v55;
  *(unsigned char *)(v16 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v16, (swift::Demangle::__runtime::Node *)v4, this);
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v81 = 2 * *((void *)this + 4);
    if (v81 <= 0x20) {
      unint64_t v81 = 32;
    }
    *((void *)this + 4) = v81;
    unint64_t v82 = v81 + 8;
    unint64_t v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
    unint64_t v84 = (char *)v83 + v82;
    void *v83 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v84;
    *((void *)this + 3) = v83;
  }
  *((void *)this + 1) = v4 + 24;
  __int16 v21 = 232;
LABEL_128:
  *(_WORD *)(v4 + 16) = v21;
  *(unsigned char *)(v4 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v16, this);
  return v4;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDifferentiableFunctionType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8))
  {
    int v3 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    int v3 = *(char *)(*((void *)this + 7) + v2);
  }
  HIDWORD(v5) = v3;
  LODWORD(v5) = v3 - 100;
  unsigned int v4 = v5 >> 1;
  if (v4 > 7 || ((0x93u >> v4) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = qword_181637258[v4];
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v8 = 2 * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    int v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    *int v10 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v10 + v9;
    *((void *)this + 3) = v10;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 68;
  *(unsigned char *)(result + 18) = 4;
  *(void *)unint64_t result = v7;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleLifetimeDependenceKind(swift::Demangle::__runtime::Demangler *this, int a2)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v2 + 1;
  uint64_t v4 = *(char *)(*((void *)this + 7) + v2);
  if (v4 != 115)
  {
    if (v4 != 105) {
      return 0;
    }
    uint64_t v4 = 105;
  }
  unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v5;
  if (a2)
  {
    if (!v5 || v5 + 24 > *((void *)this + 2))
    {
      unint64_t v6 = 2 * *((void *)this + 4);
      if (v6 <= 0x20) {
        unint64_t v6 = 32;
      }
      *((void *)this + 4) = v6;
      unint64_t v7 = v6 + 8;
      unint64_t v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
      unint64_t v9 = (char *)v8 + v7;
      *unint64_t v8 = *((void *)this + 3);
      unint64_t v5 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v9;
      *((void *)this + 3) = v8;
    }
    *((void *)this + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = 349;
    *(unsigned char *)(v5 + 18) = 4;
    *(void *)unint64_t v5 = v4;
    return v5;
  }
  if (!v5 || v5 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    int v13 = (char *)v12 + v11;
    void *v12 = *((void *)this + 3);
    unint64_t v5 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v5 + 24;
  *(_WORD *)(v5 + 16) = 102;
  *(unsigned char *)(v5 + 18) = 4;
  *(void *)unint64_t v5 = v4;
  int v14 = *((_DWORD *)this + 24);
  if (!v14) {
    return 0;
  }
  int v15 = v14 - 1;
  unint64_t v16 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v14 - 1));
  if (*((_WORD *)v16 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v15;
  int v17 = *((unsigned __int8 *)v16 + 18);
  if (v17 != 1)
  {
    if (v17 != 5 || *((_DWORD *)v16 + 2) != 1) {
      return 0;
    }
    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v16;
  }
  unint64_t v18 = *(swift::Demangle::__runtime::Node **)v16;
  if (!*(void *)v16) {
    return 0;
  }
  unint64_t v19 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v19;
  if (!v19 || v19 + 24 > *((void *)this + 2))
  {
    unint64_t v20 = 2 * *((void *)this + 4);
    if (v20 <= 0x20) {
      unint64_t v20 = 32;
    }
    *((void *)this + 4) = v20;
    unint64_t v21 = v20 + 8;
    uint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
    unint64_t v23 = (char *)v22 + v21;
    *uint64_t v22 = *((void *)this + 3);
    unint64_t v19 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v23;
    *((void *)this + 3) = v22;
  }
  *((void *)this + 1) = v19 + 24;
  *(_WORD *)(v19 + 16) = 348;
  *(unsigned char *)(v19 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v19, (swift::Demangle::__runtime::Node *)v5, this);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v19, v18, this);
  unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v5;
  if (!v5 || v5 + 24 > *((void *)this + 2))
  {
    unint64_t v24 = 2 * *((void *)this + 4);
    if (v24 <= 0x20) {
      unint64_t v24 = 32;
    }
    *((void *)this + 4) = v24;
    unint64_t v25 = v24 + 8;
    unsigned int v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
    unint64_t v27 = (char *)v26 + v25;
    *unsigned int v26 = *((void *)this + 3);
    unint64_t v5 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v27;
    *((void *)this + 3) = v26;
  }
  *((void *)this + 1) = v5 + 24;
  *(_WORD *)(v5 + 16) = 232;
  *(unsigned char *)(v5 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, (swift::Demangle::__runtime::Node *)v19, this);
  return v5;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleMultiSubstitutions(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 < v2)
  {
    uint64_t v4 = (const void **)((char *)this + 88);
    int v5 = -1;
    do
    {
      *((void *)this + 9) = v1 + 1;
      uint64_t v6 = *((void *)this + 7);
      int v7 = *(char *)(v6 + v1);
      if (!*(unsigned char *)(v6 + v1)) {
        break;
      }
      if ((v7 - 97) > 0x19u)
      {
        if ((v7 - 65) <= 0x19u)
        {
          uint64_t v8 = 0;
          if (v5 <= 2048 && *((unsigned int *)this + 28) > (unint64_t)(*(char *)(v6 + v1) - 65))
          {
            uint64_t v8 = *(void *)(*((void *)this + 13) + 8 * (*(char *)(v6 + v1) - 65));
            if (v5 >= 2)
            {
              unsigned int v12 = v5 + 1;
              do
              {
                uint64_t v15 = v8;
                swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
                --v12;
              }
              while (v12 > 2);
            }
          }
          return v8;
        }
        if (v7 == 95)
        {
          unsigned int v13 = v5 + 27;
          if (*((_DWORD *)this + 28) <= v13) {
            return 0;
          }
          return *(void *)(*((void *)this + 13) + 8 * v13);
        }
        *((void *)this + 9) = v1;
        if (v1 >= v2 || *(unsigned __int8 *)(v6 + v1) - 48 > 9) {
          return 0;
        }
        int v5 = 0;
        while (1)
        {
          int v10 = *(unsigned __int8 *)(v6 + v1);
          if ((v10 - 48) > 9) {
            break;
          }
          int v11 = v10 + 10 * v5 - 48;
          if (v11 < v5) {
            return 0;
          }
          *((void *)this + 9) = ++v1;
          int v5 = v11;
          if (v2 == v1)
          {
            unint64_t v1 = v2;
            int v5 = v11;
            break;
          }
        }
        if (v5 < 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v8 = 0;
        if (v5 > 2048 || *((unsigned int *)this + 28) <= (unint64_t)(*(char *)(v6 + v1) - 97)) {
          return v8;
        }
        uint64_t v8 = *(void *)(*((void *)this + 13) + 8 * (*(char *)(v6 + v1) - 97));
        if (v5 >= 2)
        {
          unsigned int v9 = v5 + 1;
          do
          {
            uint64_t v15 = v8;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
            --v9;
          }
          while (v9 > 2);
        }
        if (!v8) {
          return v8;
        }
        uint64_t v15 = v8;
        swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v4, &v15, this);
        unint64_t v2 = *((void *)this + 8);
        unint64_t v1 = *((void *)this + 9);
        int v5 = -1;
      }
    }
    while (v1 < v2);
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBuiltinType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v1) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v2 + 1;
  *((void *)this + 9) = v2 + 1;
  uint64_t v6 = *((void *)this + 7);
  switch(*(unsigned char *)(v6 + v2))
  {
    case 'B':
      int v7 = "Builtin.UnsafeValueBuffer";
      size_t v8 = 25;
      goto LABEL_45;
    case 'D':
      int v7 = "Builtin.DefaultActorStorage";
      size_t v8 = 27;
      goto LABEL_45;
    case 'I':
      int v7 = "Builtin.IntLiteral";
      goto LABEL_38;
    case 'O':
      int v7 = "Builtin.UnknownObject";
      size_t v8 = 21;
      goto LABEL_45;
    case 'P':
      int v7 = "Builtin.PackIndex";
      size_t v8 = 17;
      goto LABEL_45;
    case 'T':
      unint64_t Node = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = Node;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v10 = 2 * *((void *)this + 4);
        if (v10 <= 0x20) {
          unint64_t v10 = 32;
        }
        *((void *)this + 4) = v10;
        unint64_t v11 = v10 + 8;
        unsigned int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
        void *v12 = *((void *)this + 3);
        unint64_t Node = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v12 + v11;
        *((void *)this + 3) = v12;
      }
      *((void *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 21;
      *(unsigned char *)(Node + 18) = 0;
      goto LABEL_46;
    case 'b':
      int v7 = "Builtin.BridgeObject";
      goto LABEL_36;
    case 'c':
      int v7 = "Builtin.RawUnsafeContinuation";
      size_t v8 = 29;
      goto LABEL_45;
    case 'd':
      int v7 = "Builtin.NonDefaultDistributedActorStorage";
      size_t v8 = 41;
      goto LABEL_45;
    case 'e':
      int v7 = "Builtin.Executor";
      goto LABEL_40;
    case 'f':
      if (v5 >= v1) {
        return 0;
      }
      int v13 = *(unsigned __int8 *)(v6 + v5);
      if (v13 == 95) {
        goto LABEL_43;
      }
      if ((v13 - 48) > 9) {
        return 0;
      }
      signed int v14 = 0;
      while (1)
      {
        int v15 = *(unsigned __int8 *)(v6 + v5);
        if ((v15 - 48) > 9) {
          break;
        }
        int v16 = v15 + 10 * v14 - 48;
        if (v16 < v14) {
          return 0;
        }
        unint64_t v4 = 0;
        *((void *)this + 9) = ++v5;
        signed int v14 = v16;
        if (v1 == v5) {
          return v4;
        }
      }
      unint64_t v4 = 0;
      if (v14 < 0 || v5 >= v1 || v15 != 95) {
        return v4;
      }
      *((void *)this + 9) = v5 + 1;
      if ((v14 - 1) > 0xFFF) {
        return 0;
      }
      unint64_t v49 = 0;
      unint64_t v27 = (char *)*((void *)this + 1);
      if (!v27 || (unint64_t)(v27 + 14) > *((void *)this + 2))
      {
        unint64_t v28 = 2 * *((void *)this + 4);
        if (v28 <= 0xF) {
          unint64_t v28 = 15;
        }
        *((void *)this + 4) = v28;
        unint64_t v29 = v28 + 8;
        unint64_t v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
        *unint64_t v30 = *((void *)this + 3);
        unint64_t v27 = (char *)(v30 + 1);
        *((void *)this + 2) = (char *)v30 + v29;
        *((void *)this + 3) = v30;
      }
      *((void *)this + 1) = v27 + 14;
      unint64_t v49 = v27;
      qmemcpy(v27, "Builtin.FPIEEE", 14);
      uint64_t v31 = 0xE0000000ELL;
      goto LABEL_78;
    case 'i':
      if (v5 >= v1) {
        return 0;
      }
      int v17 = *(unsigned __int8 *)(v6 + v5);
      if (v17 == 95) {
        goto LABEL_43;
      }
      if ((v17 - 48) > 9) {
        return 0;
      }
      signed int v14 = 0;
      while (1)
      {
        int v18 = *(unsigned __int8 *)(v6 + v5);
        if ((v18 - 48) > 9) {
          break;
        }
        int v19 = v18 + 10 * v14 - 48;
        if (v19 < v14) {
          return 0;
        }
        unint64_t v4 = 0;
        *((void *)this + 9) = ++v5;
        signed int v14 = v19;
        if (v1 == v5) {
          return v4;
        }
      }
      unint64_t v4 = 0;
      if (v14 < 0 || v5 >= v1 || v18 != 95) {
        return v4;
      }
      *((void *)this + 9) = v5 + 1;
      if ((v14 - 1) > 0xFFF) {
        return 0;
      }
      unint64_t v49 = 0;
      unint64_t v32 = (void *)*((void *)this + 1);
      if (!v32 || (unint64_t)v32 + 11 > *((void *)this + 2))
      {
        unint64_t v33 = 2 * *((void *)this + 4);
        if (v33 <= 0xC) {
          unint64_t v33 = 12;
        }
        *((void *)this + 4) = v33;
        unint64_t v34 = v33 + 8;
        unint64_t v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
        *unint64_t v35 = *((void *)this + 3);
        unint64_t v32 = v35 + 1;
        *((void *)this + 2) = (char *)v35 + v34;
        *((void *)this + 3) = v35;
      }
      *((void *)this + 1) = (char *)v32 + 11;
      unint64_t v49 = (char *)v32;
      *(_DWORD *)((char *)v32 + 7) = 1953384750;
      *unint64_t v32 = *(void *)"Builtin.Int";
      uint64_t v31 = 0xB0000000BLL;
LABEL_78:
      uint64_t v50 = v31;
      swift::Demangle::__runtime::CharVector::append((unsigned int *)&v49, v14, this);
      unint64_t v36 = v49;
      uint64_t v37 = v50;
      unint64_t Node = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = Node;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v38 = 2 * *((void *)this + 4);
        if (v38 <= 0x20) {
          unint64_t v38 = 32;
        }
        *((void *)this + 4) = v38;
        unint64_t v39 = v38 + 8;
        int v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
        *int v40 = *((void *)this + 3);
        unint64_t Node = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v40 + v39;
        *((void *)this + 3) = v40;
      }
      *((void *)this + 1) = Node + 24;
      *(_WORD *)(Node + 16) = 20;
      *(unsigned char *)(Node + 18) = 3;
      *(void *)unint64_t Node = v36;
      *(void *)(Node + 8) = v37;
      goto LABEL_46;
    case 'j':
      int v7 = "Builtin.Job";
      size_t v8 = 11;
      goto LABEL_45;
    case 'o':
      int v7 = "Builtin.NativeObject";
LABEL_36:
      size_t v8 = 20;
      goto LABEL_45;
    case 'p':
      int v7 = "Builtin.RawPointer";
LABEL_38:
      size_t v8 = 18;
      goto LABEL_45;
    case 't':
      int v7 = "Builtin.SILToken";
LABEL_40:
      size_t v8 = 16;
      goto LABEL_45;
    case 'v':
      if (v5 >= v1) {
        return 0;
      }
      int v20 = *(unsigned __int8 *)(v6 + v5);
      if (v20 == 95)
      {
LABEL_43:
        unint64_t v4 = 0;
        *((void *)this + 9) = v2 + 2;
        return v4;
      }
      if ((v20 - 48) > 9) {
        return 0;
      }
      signed int v24 = 0;
      break;
    case 'w':
      int v7 = "Builtin.Word";
      size_t v8 = 12;
LABEL_45:
      unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 20, v7, v8);
      if (Node) {
        goto LABEL_46;
      }
      return 0;
    default:
      return v4;
  }
  while (1)
  {
    int v25 = *(unsigned __int8 *)(v6 + v5);
    if ((v25 - 48) > 9) {
      break;
    }
    int v26 = v25 + 10 * v24 - 48;
    if (v26 < v24) {
      return 0;
    }
    unint64_t v4 = 0;
    *((void *)this + 9) = ++v5;
    signed int v24 = v26;
    if (v1 == v5) {
      return v4;
    }
  }
  unint64_t v4 = 0;
  if (v24 < 0 || v5 >= v1 || v25 != 95) {
    return v4;
  }
  *((void *)this + 9) = v5 + 1;
  if ((v24 - 4097) < 0xFFFFF000) {
    return 0;
  }
  int v41 = *((_DWORD *)this + 24);
  if (!v41) {
    return 0;
  }
  int v42 = v41 - 1;
  unint64_t v43 = *(void *)(*((void *)this + 11) + 8 * (v41 - 1));
  if (*(_WORD *)(v43 + 16) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v42;
  int v44 = *(unsigned __int8 *)(v43 + 18);
  if (v44 == 1) {
    goto LABEL_94;
  }
  if (v44 != 5 || *(_DWORD *)(v43 + 8) != 1) {
    return 0;
  }
  unint64_t v43 = *(void *)v43;
LABEL_94:
  unint64_t v4 = *(void *)v43;
  if (*(void *)v43)
  {
    if (*(_WORD *)(v4 + 16) != 20 || *(void *)(v4 + 8) < 8uLL || **(void **)v4 != 0x2E6E69746C697542) {
      return 0;
    }
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    swift::Demangle::__runtime::CharVector::append(&v49, "Builtin.Vec", 0xBuLL, this);
    swift::Demangle::__runtime::CharVector::append((unsigned int *)&v49, v24, this);
    char v48 = 120;
    swift::Demangle::__runtime::Vector<char>::push_back((unsigned int *)&v49, &v48, this);
    unint64_t v45 = *(void *)(v4 + 8);
    uint64_t v46 = 8;
    if (v45 < 8) {
      uint64_t v46 = *(void *)(v4 + 8);
    }
    swift::Demangle::__runtime::CharVector::append(&v49, (const void *)(*(void *)v4 + v46), v45 - v46, this);
    unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 20, (uint64_t *)&v49);
    if (!Node) {
      return 0;
    }
LABEL_46:
    unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v4;
    if (!v4 || v4 + 24 > *((void *)this + 2))
    {
      unint64_t v21 = 2 * *((void *)this + 4);
      if (v21 <= 0x20) {
        unint64_t v21 = 32;
      }
      *((void *)this + 4) = v21;
      unint64_t v22 = v21 + 8;
      unint64_t v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      *unint64_t v23 = *((void *)this + 3);
      unint64_t v4 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v23 + v22;
      *((void *)this + 3) = v23;
    }
    *((void *)this + 1) = v4 + 24;
    *(_WORD *)(v4 + 16) = 232;
    *(unsigned char *)(v4 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)Node, this);
  }
  return v4;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAnyGenericType(swift::Demangle::__runtime::Demangler *this, __int16 a2)
{
  int v4 = *((_DWORD *)this + 24);
  if (!v4
    || ((unsigned int v5 = v4 - 1,
         uint64_t v6 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v5),
         int v7 = v6[8],
         (v7 - 173) <= 0x3C)
      ? (BOOL v8 = ((1 << (v7 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v8 = 1),
        v8
     && ((v7 - 101) <= 0x24
       ? (BOOL v9 = ((1 << (v7 - 101)) & 0x1000800001) == 0)
       : (BOOL v9 = 1),
         v9 && v7 != 347)))
  {
    uint64_t v6 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v5;
  }
  unint64_t v10 = swift::Demangle::__runtime::Demangler::popContext(this);
  if (!v6) {
    return 0;
  }
  unint64_t v11 = v10;
  if (!v10) {
    return 0;
  }
  unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v12;
  if (!v12 || v12 + 24 > *((void *)this + 2))
  {
    unint64_t v13 = 2 * *((void *)this + 4);
    if (v13 <= 0x20) {
      unint64_t v13 = 32;
    }
    *((void *)this + 4) = v13;
    unint64_t v14 = v13 + 8;
    int v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    int v16 = (char *)v15 + v14;
    *int v15 = *((void *)this + 3);
    unint64_t v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v15;
  }
  *((void *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = a2;
  *(unsigned char *)(v12 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v12, v11, this);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v12, (swift::Demangle::__runtime::Node *)v6, this);
  unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v17;
  if (!v17 || v17 + 24 > *((void *)this + 2))
  {
    unint64_t v18 = 2 * *((void *)this + 4);
    if (v18 <= 0x20) {
      unint64_t v18 = 32;
    }
    *((void *)this + 4) = v18;
    unint64_t v19 = v18 + 8;
    int v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    unint64_t v21 = (char *)v20 + v19;
    *int v20 = *((void *)this + 3);
    unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v21;
    *((void *)this + 3) = v20;
  }
  *((void *)this + 1) = v17 + 24;
  *(_WORD *)(v17 + 16) = 232;
  *(unsigned char *)(v17 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, (swift::Demangle::__runtime::Node *)v12, this);
  unint64_t v23 = v17;
  swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v23, this);
  return v17;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleExtensionContext(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2)
  {
    unsigned int v5 = 0;
LABEL_10:
    unint64_t v7 = 0;
    goto LABEL_12;
  }
  int v3 = v2 - 1;
  uint64_t v4 = *((void *)this + 11);
  unsigned int v5 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * (v2 - 1));
  if (*((_WORD *)v5 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v3;
    if (v2 == 1) {
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v3 = *((_DWORD *)this + 24);
  }
  unsigned int v6 = v3 - 1;
  unint64_t v7 = *(void *)(v4 + 8 * v6);
  int v8 = *(unsigned __int16 *)(v7 + 16);
  if (v8 == 153)
  {
    *((_DWORD *)this + 24) = v6;
    goto LABEL_12;
  }
  if (v8 != 101) {
    goto LABEL_10;
  }
  *((_DWORD *)this + 24) = v6;
  unint64_t v7 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v7, 153);
LABEL_12:
  AnyGeneric = swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(this);
  unint64_t v10 = 0;
  if (v7)
  {
    unint64_t v11 = (swift::Demangle::__runtime::Node *)AnyGeneric;
    if (AnyGeneric)
    {
      unint64_t v10 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v10;
      if (!v10 || v10 + 24 > *((void *)this + 2))
      {
        unint64_t v12 = 2 * *((void *)this + 4);
        if (v12 <= 0x20) {
          unint64_t v12 = 32;
        }
        *((void *)this + 4) = v12;
        unint64_t v13 = v12 + 8;
        unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
        int v15 = (char *)v14 + v13;
        *unint64_t v14 = *((void *)this + 3);
        unint64_t v10 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v15;
        *((void *)this + 3) = v14;
      }
      *((void *)this + 1) = v10 + 24;
      *(_WORD *)(v10 + 16) = 71;
      *(unsigned char *)(v10 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, (swift::Demangle::__runtime::Node *)v7, this);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, v11, this);
      if (v5) {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, v5, this);
      }
    }
  }
  return v10;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demanglePlainFunction(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (v2
    && (unsigned int v3 = v2 - 1,
        uint64_t v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v3),
        *((_WORD *)v4 + 8) == 43))
  {
    *((_DWORD *)this + 24) = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unint64_t v5 = swift::Demangle::__runtime::Demangler::popFunctionType(this, 82, 0);
  unsigned int v6 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, (swift::Demangle::__runtime::Node *)v5);
  if (v4 && v5)
  {
    unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v7;
    if (!v7 || v7 + 24 > *((void *)this + 2))
    {
      unint64_t v8 = 2 * *((void *)this + 4);
      if (v8 <= 0x20) {
        unint64_t v8 = 32;
      }
      *((void *)this + 4) = v8;
      unint64_t v9 = v8 + 8;
      unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
      unint64_t v11 = (char *)v10 + v9;
      *unint64_t v10 = *((void *)this + 3);
      unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v11;
      *((void *)this + 3) = v10;
    }
    *((void *)this + 1) = v7 + 24;
    *(_WORD *)(v7 + 16) = 44;
    *(unsigned char *)(v7 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v4, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v5, this);
    unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v5;
    if (!v5 || v5 + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      int v15 = (char *)v14 + v13;
      *unint64_t v14 = *((void *)this + 3);
      unint64_t v5 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v15;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = 232;
    *(unsigned char *)(v5 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, (swift::Demangle::__runtime::Node *)v7, this);
  }
  int v16 = *((_DWORD *)this + 24);
  if (!v16
    || ((unsigned int v17 = v16 - 1,
         unint64_t v18 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v17),
         int v19 = v18[8],
         (v19 - 173) <= 0x3C)
      ? (BOOL v20 = ((1 << (v19 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v20 = 1),
        v20
     && ((v19 - 101) <= 0x24
       ? (BOOL v21 = ((1 << (v19 - 101)) & 0x1000800001) == 0)
       : (BOOL v21 = 1),
         v21 && v19 != 347)))
  {
    unint64_t v18 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v17;
  }
  unint64_t v22 = swift::Demangle::__runtime::Demangler::popContext(this);
  if (v6) {
    unint64_t v23 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 76, v22, (swift::Demangle::__runtime::Node *)v18, v6, (swift::Demangle::__runtime::Node *)v5);
  }
  else {
    unint64_t v23 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 76, v22, (swift::Demangle::__runtime::Node *)v18, (swift::Demangle::__runtime::Node *)v5);
  }

  return setParentForOpaqueReturnTypeNodes(this, v23, (swift::Demangle::__runtime::Node *)v5);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenericType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 2);
  unsigned int v3 = (char *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((void *)this + 1) = v3;
  if (v3) {
    BOOL v4 = (unint64_t)(v3 + 32) > v2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x28) {
      unint64_t v5 = 40;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    *unint64_t v7 = *((void *)this + 3);
    unsigned int v3 = (char *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((void *)this + 2) = (char *)v7 + v6;
    *((void *)this + 3) = v7;
  }
  unsigned int v17 = 0;
  *((void *)this + 1) = v3 + 32;
  v16[0] = v3;
  v16[1] = (const void *)0x400000000;
  unint64_t v8 = 0;
  if (swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, v16, (unint64_t *)&v17))
  {
    AnyGeneric = swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(this);
    if (AnyGeneric
      && (unint64_t v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(this, (unint64_t)AnyGeneric, (uint64_t)v16, 0)) != 0)
    {
      unint64_t v11 = v10;
      if (v17) {
        swift::Demangle::__runtime::Node::addChild(v10, v17, this);
      }
      unint64_t v8 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v12 = 2 * *((void *)this + 4);
        if (v12 <= 0x20) {
          unint64_t v12 = 32;
        }
        *((void *)this + 4) = v12;
        unint64_t v13 = v12 + 8;
        unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
        *unint64_t v14 = *((void *)this + 3);
        unint64_t v8 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v14 + v13;
        *((void *)this + 3) = v14;
      }
      *((void *)this + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 232;
      *(unsigned char *)(v8 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v8, v11, this);
      unint64_t v18 = v8;
      swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v18, this);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

unint64_t swift::Demangle::__runtime::Demangler::popProtocol(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2) {
    goto LABEL_21;
  }
  unsigned int v3 = v2 - 1;
  BOOL v4 = *(uint64_t **)(*((void *)this + 11) + 8 * v3);
  int v5 = *((unsigned __int16 *)v4 + 8);
  uint64_t v6 = (v5 - 173);
  if (v6 > 0x3C)
  {
LABEL_14:
    if ((v5 - 101) <= 0x24 && ((1 << (v5 - 101)) & 0x1000800001) != 0) {
      goto LABEL_18;
    }
    if (v5 == 347)
    {
LABEL_20:
      *((_DWORD *)this + 24) = v3;
      return (unint64_t)v4;
    }
LABEL_21:
    BOOL v4 = 0;
    goto LABEL_22;
  }
  if (((1 << (v5 + 83)) & 0x100000010000000DLL) == 0)
  {
    if (v6 == 8) {
      goto LABEL_20;
    }
    if (v6 == 59)
    {
      *((_DWORD *)this + 24) = v3;
      int v7 = *((unsigned __int8 *)v4 + 18);
      if ((v7 - 1) >= 2 && (v7 != 5 || !*((_DWORD *)v4 + 2))) {
        return 0;
      }
      unsigned __int16 v8 = 232;
      unint64_t v9 = v4;
      while (v8 == 232)
      {
        if (*((unsigned __int8 *)v9 + 18) - 1 >= 2) {
          unint64_t v9 = (uint64_t *)*v9;
        }
        unint64_t v9 = (uint64_t *)*v9;
        unsigned __int16 v8 = *((_WORD *)v9 + 8);
      }
      unsigned int v23 = v8 - 180;
      if (v8 == 347) {
        signed int v24 = v4;
      }
      else {
        signed int v24 = 0;
      }
      if (v23 >= 2) {
        return (unint64_t)v24;
      }
      else {
        return (unint64_t)v4;
      }
    }
    goto LABEL_14;
  }
LABEL_18:
  *((_DWORD *)this + 24) = v3;
LABEL_22:
  unint64_t v12 = swift::Demangle::__runtime::Demangler::popContext(this);
  unint64_t v11 = 0;
  if (v4)
  {
    unint64_t v13 = v12;
    if (v12)
    {
      unint64_t v14 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v14;
      if (!v14 || v14 + 24 > *((void *)this + 2))
      {
        unint64_t v15 = 2 * *((void *)this + 4);
        if (v15 <= 0x20) {
          unint64_t v15 = 32;
        }
        *((void *)this + 4) = v15;
        unint64_t v16 = v15 + 8;
        unsigned int v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        unint64_t v18 = (char *)v17 + v16;
        *unsigned int v17 = *((void *)this + 3);
        unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v18;
        *((void *)this + 3) = v17;
      }
      *((void *)this + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 180;
      *(unsigned char *)(v14 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, v13, this);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v4, this);
      unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v11;
      if (!v11 || v11 + 24 > *((void *)this + 2))
      {
        unint64_t v19 = 2 * *((void *)this + 4);
        if (v19 <= 0x20) {
          unint64_t v19 = 32;
        }
        *((void *)this + 4) = v19;
        unint64_t v20 = v19 + 8;
        BOOL v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *BOOL v21 = *((void *)this + 3);
        unint64_t v11 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v21 + v20;
        *((void *)this + 3) = v21;
      }
      *((void *)this + 1) = v11 + 24;
      *(_WORD *)(v11 + 16) = 232;
      *(unsigned char *)(v11 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, (swift::Demangle::__runtime::Node *)v14, this);
    }
  }
  return v11;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::popProtocolConformance(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2)
  {
    int v5 = 0;
LABEL_10:
    unint64_t v7 = 0;
    goto LABEL_12;
  }
  int v3 = v2 - 1;
  uint64_t v4 = *((void *)this + 11);
  int v5 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * (v2 - 1));
  if (*((_WORD *)v5 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v3;
    if (v2 == 1) {
      goto LABEL_10;
    }
  }
  else
  {
    int v5 = 0;
    int v3 = *((_DWORD *)this + 24);
  }
  unsigned int v6 = v3 - 1;
  unint64_t v7 = *(void *)(v4 + 8 * v6);
  int v8 = *(unsigned __int16 *)(v7 + 16);
  if (v8 != 153)
  {
    if (v8 == 101)
    {
      *((_DWORD *)this + 24) = v6;
      unint64_t v7 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v7, 153);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  *((_DWORD *)this + 24) = v6;
LABEL_12:
  unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
  int v10 = *((_DWORD *)this + 24);
  if (v10)
  {
    unint64_t v11 = 0;
    int v12 = v10 - 1;
    uint64_t v13 = *((void *)this + 11);
    unint64_t v14 = *(unsigned __int16 **)(v13 + 8 * (v10 - 1));
    int v15 = v14[8];
    if (v15 == 232) {
      goto LABEL_18;
    }
    if (v15 == 101)
    {
      *((_DWORD *)this + 24) = v12;
      if (v10 == 1)
      {
        unint64_t v16 = 0;
        if (!v5) {
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      unint64_t v11 = v14;
      --v10;
    }
    int v12 = v10 - 1;
    unint64_t v14 = *(unsigned __int16 **)(v13 + 8 * (v10 - 1));
    if (v14[8] == 232)
    {
LABEL_18:
      *((_DWORD *)this + 24) = v12;
      unint64_t v16 = (unint64_t)v14;
      unint64_t v14 = v11;
      if (!v5) {
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v16 = 0;
      unint64_t v14 = v11;
      if (!v5) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    unint64_t v16 = 0;
    unint64_t v14 = 0;
    if (!v5) {
      goto LABEL_37;
    }
  }
LABEL_25:
  if (v16)
  {
    unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v17;
    if (!v17 || v17 + 24 > *((void *)this + 2))
    {
      unint64_t v18 = 2 * *((void *)this + 4);
      if (v18 <= 0x20) {
        unint64_t v18 = 32;
      }
      *((void *)this + 4) = v18;
      unint64_t v19 = v18 + 8;
      unint64_t v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v21 = (char *)v20 + v19;
      *unint64_t v20 = *((void *)this + 3);
      unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v21;
      *((void *)this + 3) = v20;
    }
    *((void *)this + 1) = v17 + 24;
    *(_WORD *)(v17 + 16) = 44;
    *(unsigned char *)(v17 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, v5, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, (swift::Demangle::__runtime::Node *)v16, this);
    unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v16;
    if (!v16 || v16 + 24 > *((void *)this + 2))
    {
      unint64_t v22 = 2 * *((void *)this + 4);
      if (v22 <= 0x20) {
        unint64_t v22 = 32;
      }
      *((void *)this + 4) = v22;
      unint64_t v23 = v22 + 8;
      signed int v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *signed int v24 = *((void *)this + 3);
      unint64_t v16 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v24 + v23;
      *((void *)this + 3) = v24;
    }
    *((void *)this + 1) = v16 + 24;
    *(_WORD *)(v16 + 16) = 232;
    *(unsigned char *)(v16 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v16, (swift::Demangle::__runtime::Node *)v17, this);
  }
LABEL_37:
  int v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 182, (swift::Demangle::__runtime::Node *)v16, v9, (swift::Demangle::__runtime::Node *)v7);
  int v26 = v25;
  if (v14 && v25) {
    swift::Demangle::__runtime::Node::addChild(v25, (swift::Demangle::__runtime::Node *)v14, this);
  }
  return v26;
}

_WORD *swift::Demangle::__runtime::Demangler::demangleIdentifier(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v1) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v2);
  if ((v5 - 48) > 9) {
    return 0;
  }
  if (v5 == 48)
  {
    *((void *)this + 9) = v2 + 1;
    if (v2 + 1 < v1 && *(unsigned char *)(v4 + v2 + 1) == 48)
    {
      char v6 = 0;
      v2 += 2;
      *((void *)this + 9) = v2;
      int v75 = 1;
    }
    else
    {
      int v75 = 0;
      char v6 = 1;
      ++v2;
    }
  }
  else
  {
    int v75 = 0;
    char v6 = 0;
  }
  unsigned int v7 = 0;
  unsigned int v8 = 0;
  unint64_t v9 = 0;
  do
  {
    if ((v6 & 1) == 0)
    {
      char v10 = 0;
      goto LABEL_40;
    }
    do
    {
      unint64_t v2 = *((void *)this + 9);
      if (v2 >= *((void *)this + 8) || (uint64_t v11 = *((void *)this + 7), (*(unsigned char *)(v11 + v2) & 0xDFu) - 65 > 0x19))
      {
        char v10 = 1;
        goto LABEL_40;
      }
      *((void *)this + 9) = v2 + 1;
      int v12 = *(char *)(v11 + v2);
      unsigned __int8 v13 = v12 - 97;
      if ((v12 - 97) >= 0x1A) {
        int v14 = -65;
      }
      else {
        int v14 = -97;
      }
      int v15 = v14 + v12;
      if (v15 >= *((_DWORD *)this + 134)) {
        return 0;
      }
      unint64_t v16 = (char *)this + 16 * v15;
      unint64_t v18 = (const void *)*((void *)v16 + 15);
      size_t v17 = *((void *)v16 + 16);
      uint64_t v19 = v8;
      size_t v20 = v7;
      if (v17 + v8 > v7)
      {
        long long __src = v9;
        BOOL v21 = &v9[v7];
        unint64_t v9 = (char *)*((void *)this + 1);
        if (v21 == v9)
        {
          unint64_t v23 = &v21[v17];
          unint64_t v22 = *((void *)this + 2);
          if ((unint64_t)v23 <= v22)
          {
            unsigned int v24 = v7;
            *((void *)this + 1) = v23;
            LODWORD(v26) = v17;
            unint64_t v9 = __src;
LABEL_13:
            unsigned int v7 = v24 + v26;
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v22 = *((void *)this + 2);
        }
        unsigned int v81 = v8;
        unsigned int v24 = v7;
        unint64_t v25 = 2 * v7;
        if (v17 > v25) {
          unint64_t v25 = v17;
        }
        if (v25 <= 4) {
          uint64_t v26 = 4;
        }
        else {
          uint64_t v26 = v25;
        }
        size_t v27 = v26 + v20;
        if (!v9 || (unint64_t)&v9[v27] > v22)
        {
          unint64_t v28 = 2 * *((void *)this + 4);
          if (v28 <= v27 + 1) {
            unint64_t v28 = v27 + 1;
          }
          *((void *)this + 4) = v28;
          int v76 = v18;
          unint64_t v29 = v28 + 8;
          unint64_t v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
          *unint64_t v30 = *((void *)this + 3);
          unint64_t v9 = (char *)(v30 + 1);
          uint64_t v31 = (char *)v30 + v29;
          unint64_t v18 = v76;
          *((void *)this + 2) = v31;
          *((void *)this + 3) = v30;
        }
        *((void *)this + 1) = &v9[v27];
        if (v24) {
          memcpy(v9, __src, v20);
        }
        unsigned int v8 = v81;
        goto LABEL_13;
      }
LABEL_14:
      memcpy(&v9[v19], v18, v17);
      v8 += v17;
    }
    while (v13 < 0x1Au);
    char v10 = 0;
    unint64_t v2 = *((void *)this + 9);
LABEL_40:
    unint64_t v32 = *((void *)this + 8);
    if (v2 >= v32) {
      return 0;
    }
    uint64_t v33 = *((void *)this + 7);
    if (*(unsigned char *)(v33 + v2) == 48)
    {
      *((void *)this + 9) = v2 + 1;
      break;
    }
    if (*(unsigned __int8 *)(v33 + v2) - 48 > 9) {
      return 0;
    }
    LODWORD(v34) = 0;
    while (1)
    {
      int v35 = *(unsigned __int8 *)(v33 + v2);
      if ((v35 - 48) > 9) {
        break;
      }
      int v36 = v35 + 10 * v34 - 48;
      if (v36 < (int)v34) {
        return 0;
      }
      *((void *)this + 9) = ++v2;
      LODWORD(v34) = v36;
      if (v32 == v2)
      {
        unint64_t v2 = v32;
        LODWORD(v34) = v36;
        break;
      }
    }
    if ((int)v34 < 1) {
      return 0;
    }
    char v77 = v10;
    if (!v75)
    {
      uint64_t v37 = v34;
      if (v2 + v34 <= v32)
      {
        uint64_t v42 = v8;
        if (v34 + (unint64_t)v8 > v7)
        {
          unint64_t __srca = v9;
          unint64_t v43 = &v9[v7];
          unint64_t v9 = (char *)*((void *)this + 1);
          if (v43 != v9)
          {
            unint64_t v44 = *((void *)this + 2);
            goto LABEL_70;
          }
          uint64_t v46 = &v43[v34];
          unint64_t v44 = *((void *)this + 2);
          if ((unint64_t)v46 <= v44)
          {
            *((void *)this + 1) = v46;
            int v51 = v34;
            unint64_t v9 = __srca;
          }
          else
          {
LABEL_70:
            unsigned int v82 = v8;
            LODWORD(v47) = 2 * v7;
            if (v34 > 2 * v7) {
              LODWORD(v47) = v34;
            }
            if (v47 <= 4) {
              uint64_t v47 = 4;
            }
            else {
              uint64_t v47 = v47;
            }
            int v74 = v47;
            uint64_t v48 = v47 + v7;
            if (!v9 || (unint64_t)&v9[v48] > v44)
            {
              unint64_t v49 = 2 * *((void *)this + 4);
              if (v49 <= v48 + 1) {
                unint64_t v49 = v48 + 1;
              }
              *((void *)this + 4) = v49;
              unint64_t v73 = v49 + 8;
              uint64_t v50 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
              *uint64_t v50 = *((void *)this + 3);
              unint64_t v9 = (char *)(v50 + 1);
              *((void *)this + 2) = (char *)v50 + v73;
              *((void *)this + 3) = v50;
            }
            *((void *)this + 1) = &v9[v48];
            if (v7) {
              memcpy(v9, __srca, v7);
            }
            unsigned int v8 = v82;
            int v51 = v74;
          }
          v7 += v51;
        }
        uint64_t v52 = v33 + v2;
        memcpy(&v9[v42], (const void *)(v33 + v2), v34);
        unint64_t v53 = 0;
        unsigned int v54 = -1;
        while (2)
        {
          if (v53 >= v34)
          {
            int v57 = 0;
            if ((v54 & 0x80000000) == 0) {
              goto LABEL_99;
            }
LABEL_86:
            if ((v57 - 58) < 0xFFFFFFF6 && v57 != 95 && v57 != 0) {
              unsigned int v54 = v53;
            }
          }
          else
          {
            int v57 = *(unsigned __int8 *)(v52 + v53);
            if ((v54 & 0x80000000) != 0) {
              goto LABEL_86;
            }
LABEL_99:
            if (!v57
              || v57 == 95
              || (v57 - 65) <= 0x19
              && *(unsigned __int8 *)(v52 + v53 - 1) - 91 <= 0xFFFFFFE5)
            {
              if ((int)(v53 - v54) >= 2)
              {
                uint64_t v58 = *((int *)this + 134);
                if ((int)v58 <= 25)
                {
                  *((_DWORD *)this + 134) = v58 + 1;
                  unint64_t v59 = (char *)this + 16 * v58;
                  *((void *)v59 + 15) = v52 + v54;
                  *((void *)v59 + 16) = v53 - v54;
                }
              }
              unsigned int v54 = -1;
              goto LABEL_86;
            }
          }
          if (v34 + 1 == ++v53)
          {
            char v45 = v77;
            goto LABEL_124;
          }
          continue;
        }
      }
      return 0;
    }
    if (v2 < v32 && *(unsigned char *)(v33 + v2) == 95) {
      *((void *)this + 9) = ++v2;
    }
    uint64_t v37 = v34;
    if (v2 + v34 > v32) {
      return 0;
    }
    __p = 0;
    size_t v85 = 0;
    uint64_t v86 = 0;
    if (!swift::Punycode::__runtime::decodePunycodeUTF8((unsigned __int8 *)(v33 + v2), v34, (uint64_t)&__p))
    {
      if (v86 < 0) {
        operator delete(__p);
      }
      return 0;
    }
    if (v86 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v86 >= 0) {
      size_t v34 = HIBYTE(v86);
    }
    else {
      size_t v34 = v85;
    }
    uint64_t v39 = v8;
    if (v34 + v8 <= v7)
    {
      char v45 = v77;
    }
    else
    {
      int v40 = (char *)*((void *)this + 1);
      if (&v9[v7] != v40)
      {
        unint64_t v41 = *((void *)this + 2);
        goto LABEL_108;
      }
      int v60 = &v9[v7 + v34];
      unint64_t v41 = *((void *)this + 2);
      if ((unint64_t)v60 <= v41)
      {
        *((void *)this + 1) = v60;
        LODWORD(v62) = v34;
      }
      else
      {
LABEL_108:
        unsigned int v83 = v8;
        unint64_t v61 = 2 * v7;
        if (v34 > v61) {
          unint64_t v61 = v34;
        }
        if (v61 <= 4) {
          uint64_t v62 = 4;
        }
        else {
          uint64_t v62 = v61;
        }
        uint64_t v63 = v62 + v7;
        if (!v40 || (unint64_t)&v40[v63] > v41)
        {
          unint64_t v64 = 2 * *((void *)this + 4);
          if (v64 <= v63 + 1) {
            unint64_t v64 = v63 + 1;
          }
          *((void *)this + 4) = v64;
          __srcb = (char *)(v64 + 8);
          int v65 = p_p;
          int v66 = malloc_type_malloc(v64 + 8, 0xD0263BC5uLL);
          p_p = v65;
          *(void *)int v66 = *((void *)this + 3);
          int v40 = (char *)v66 + 8;
          *((void *)this + 2) = &__srcb[(void)v66];
          *((void *)this + 3) = v66;
        }
        *((void *)this + 1) = &v40[v63];
        if (v7)
        {
          unint64_t v67 = p_p;
          memcpy(v40, v9, v7);
          p_p = v67;
        }
        unint64_t v9 = v40;
        unsigned int v8 = v83;
      }
      char v45 = v77;
      v7 += v62;
    }
    memcpy(&v9[v39], p_p, v34);
    if (SHIBYTE(v86) < 0) {
      operator delete(__p);
    }
LABEL_124:
    v8 += v34;
    unint64_t v2 = *((void *)this + 9) + v37;
    *((void *)this + 9) = v2;
    char v6 = 1;
  }
  while ((v45 & 1) != 0);
  if (!v8) {
    return 0;
  }
  int v68 = (_WORD *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((void *)this + 1) = v68;
  if (!v68 || (unint64_t)(v68 + 12) > *((void *)this + 2))
  {
    unint64_t v69 = 2 * *((void *)this + 4);
    if (v69 <= 0x20) {
      unint64_t v69 = 32;
    }
    *((void *)this + 4) = v69;
    unint64_t v70 = v69 + 8;
    unint64_t v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
    *unint64_t v71 = *((void *)this + 3);
    int v68 = (_WORD *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((void *)this + 2) = (char *)v71 + v70;
    *((void *)this + 3) = v71;
  }
  *((void *)this + 1) = v68 + 12;
  v68[8] = 101;
  *((unsigned char *)v68 + 18) = 3;
  *(void *)int v68 = v9;
  *((void *)v68 + 1) = v8;
  __p = v68;
  swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&__p, this);
  return v68;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplFunctionType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v5 + v4;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 115;
  *(unsigned char *)(v2 + 18) = 0;
  unint64_t v7 = *((void *)this + 8);
  unint64_t v6 = *((void *)this + 9);
  if (v6 < v7 && *(unsigned char *)(*((void *)this + 7) + v6) == 115)
  {
    *((void *)this + 9) = v6 + 1;
    uint64_t v137 = 0;
    uint64_t v138 = 0;
    unint64_t v136 = 0;
    if (!swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v137, (unint64_t *)&v136))return 0; {
    int v8 = *((_DWORD *)this + 24);
    }
    if (!v8) {
      return 0;
    }
    unsigned int v9 = v8 - 1;
    char v10 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v9);
    if (*((_WORD *)v10 + 8) != 43) {
      return 0;
    }
    *((_DWORD *)this + 24) = v9;
    unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v11;
    if (!v11 || v11 + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      *int v14 = *((void *)this + 3);
      unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v14 + v13;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = v11 + 24;
    *(_WORD *)(v11 + 16) = 119;
    *(unsigned char *)(v11 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v10, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, *v137, this);
    if (v136) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v136, this);
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v11, this);
    unint64_t v7 = *((void *)this + 8);
    unint64_t v6 = *((void *)this + 9);
  }
  if (v6 < v7 && *(unsigned char *)(*((void *)this + 7) + v6) == 73)
  {
    *((void *)this + 9) = v6 + 1;
    uint64_t v137 = 0;
    uint64_t v138 = 0;
    unint64_t v136 = 0;
    if (!swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v137, (unint64_t *)&v136))return 0; {
    unint64_t v15 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 1) = v15;
    if (!v15 || v15 + 24 > *((void *)this + 2))
    {
      unint64_t v16 = 2 * *((void *)this + 4);
      if (v16 <= 0x20) {
        unint64_t v16 = 32;
      }
      *((void *)this + 4) = v16;
      unint64_t v17 = v16 + 8;
      unint64_t v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      *unint64_t v18 = *((void *)this + 3);
      unint64_t v15 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v18 + v17;
      *((void *)this + 3) = v18;
    }
    *((void *)this + 1) = v15 + 24;
    *(_WORD *)(v15 + 16) = 116;
    *(unsigned char *)(v15 + 18) = 0;
    if (v138 != 1) {
      return 0;
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v15, *v137, this);
    if (v136) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v15, v136, this);
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v15, this);
  }
  int v19 = *((_DWORD *)this + 24);
  if (v19 && (v20 = v19 - 1, unint64_t v21 = *(void *)(*((void *)this + 11) + 8 * v20), *(_WORD *)(v21 + 16) == 43))
  {
    *((_DWORD *)this + 24) = v20;
    unint64_t v22 = *((void *)this + 9);
    if (v22 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v22) == 80)
    {
      *((void *)this + 9) = v22 + 1;
      unint64_t v21 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v21, 46);
    }
  }
  else
  {
    unint64_t v21 = 0;
  }
  unint64_t v24 = *((void *)this + 8);
  unint64_t v23 = *((void *)this + 9);
  if (v23 < v24 && *(unsigned char *)(*((void *)this + 7) + v23) == 101)
  {
    *((void *)this + 9) = v23 + 1;
    unint64_t v25 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)this + 2))
    {
      unint64_t v26 = 2 * *((void *)this + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)this + 4) = v26;
      unint64_t v27 = v26 + 8;
      unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      void *v28 = *((void *)this + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v28 + v27;
      *((void *)this + 3) = v28;
    }
    *((void *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 105;
    *(unsigned char *)(v25 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v25, this);
    unint64_t v24 = *((void *)this + 8);
    unint64_t v23 = *((void *)this + 9);
  }
  if (v23 < v24 && *(unsigned char *)(*((void *)this + 7) + v23) == 65)
  {
    *((void *)this + 9) = v23 + 1;
    unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v29;
    if (!v29 || v29 + 24 > *((void *)this + 2))
    {
      unint64_t v30 = 2 * *((void *)this + 4);
      if (v30 <= 0x20) {
        unint64_t v30 = 32;
      }
      *((void *)this + 4) = v30;
      unint64_t v31 = v30 + 8;
      unint64_t v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      *unint64_t v32 = *((void *)this + 3);
      unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v32 + v31;
      *((void *)this + 3) = v32;
    }
    *((void *)this + 1) = v29 + 24;
    *(_WORD *)(v29 + 16) = 108;
    *(unsigned char *)(v29 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v29, this);
    unint64_t v24 = *((void *)this + 8);
    unint64_t v23 = *((void *)this + 9);
  }
  if (v23 >= v24) {
    int v33 = 0;
  }
  else {
    int v33 = *(unsigned __int8 *)(*((void *)this + 7) + v23);
  }
  HIDWORD(v34) = v33;
  LODWORD(v34) = (v33 << 24) - 1677721600;
  unsigned int v35 = (v34 >> 25);
  if (v35 <= 7 && ((1 << v35) & 0x93) != 0)
  {
    if (v23 >= v24)
    {
      char v36 = 0;
    }
    else
    {
      *((void *)this + 9) = v23 + 1;
      char v36 = *(unsigned char *)(*((void *)this + 7) + v23);
    }
    uint64_t v37 = v36;
    unint64_t v38 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v38;
    if (!v38 || v38 + 24 > *((void *)this + 2))
    {
      unint64_t v39 = 2 * *((void *)this + 4);
      if (v39 <= 0x20) {
        unint64_t v39 = 32;
      }
      *((void *)this + 4) = v39;
      unint64_t v40 = v39 + 8;
      unint64_t v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      *unint64_t v41 = *((void *)this + 3);
      unint64_t v38 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v41 + v40;
      *((void *)this + 3) = v41;
    }
    *((void *)this + 1) = v38 + 24;
    *(_WORD *)(v38 + 16) = 107;
    *(unsigned char *)(v38 + 18) = 4;
    *(void *)unint64_t v38 = v37;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v38, this);
    unint64_t v24 = *((void *)this + 8);
    unint64_t v23 = *((void *)this + 9);
  }
  if (v23 >= v24) {
    return 0;
  }
  unint64_t v42 = 0;
  *((void *)this + 9) = v23 + 1;
  unint64_t v43 = "@callee_unowned";
  switch(*(unsigned char *)(*((void *)this + 7) + v23))
  {
    case 'g':
      unint64_t v43 = "@callee_guaranteed";
      goto LABEL_72;
    case 't':
      unint64_t v43 = "@convention(thin)";
      goto LABEL_72;
    case 'x':
      unint64_t v43 = "@callee_owned";
      goto LABEL_72;
    case 'y':
LABEL_72:
      unint64_t v44 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v44;
      unint64_t v135 = (swift::Demangle::__runtime::Node *)v2;
      if (!v44 || v44 + 24 > *((void *)this + 2))
      {
        unint64_t v45 = 2 * *((void *)this + 4);
        if (v45 <= 0x20) {
          unint64_t v45 = 32;
        }
        *((void *)this + 4) = v45;
        unint64_t v46 = v45 + 8;
        uint64_t v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
        *uint64_t v47 = *((void *)this + 3);
        unint64_t v44 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v48 = (char *)v47 + v46;
        unint64_t v2 = (unint64_t)v135;
        *((void *)this + 2) = v48;
        *((void *)this + 3) = v47;
      }
      *((void *)this + 1) = v44 + 24;
      size_t v49 = strlen(v43);
      *(_WORD *)(v44 + 16) = 106;
      *(unsigned char *)(v44 + 18) = 3;
      *(void *)unint64_t v44 = v43;
      *(void *)(v44 + 8) = v49;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v44, this);
      unint64_t v50 = *((void *)this + 8);
      unint64_t v51 = *((void *)this + 9);
      if (v51 < v50)
      {
        unint64_t v52 = v51 + 1;
        *((void *)this + 9) = v51 + 1;
        uint64_t v53 = *((void *)this + 7);
        int v54 = 0;
        __int16 v55 = "block";
        switch(*(unsigned char *)(v53 + v51))
        {
          case 'B':
            goto LABEL_89;
          case 'C':
            int v54 = 0;
            goto LABEL_80;
          case 'K':
            int v54 = 0;
            __int16 v55 = "closure";
            goto LABEL_89;
          case 'M':
            int v54 = 0;
            __int16 v55 = "method";
            goto LABEL_89;
          case 'O':
            int v54 = 0;
            __int16 v55 = "objc_method";
            goto LABEL_89;
          case 'W':
            int v54 = 0;
            __int16 v55 = "witness_method";
            goto LABEL_89;
          case 'z':
            if (v52 >= v50) {
              goto LABEL_220;
            }
            unint64_t v133 = v51 + 2;
            *((void *)this + 9) = v133;
            int v134 = *(char *)(v53 + v52);
            if (v134 == 66)
            {
              int v54 = 1;
            }
            else
            {
              unint64_t v52 = v133;
              if (v134 != 67)
              {
LABEL_220:
                unint64_t v56 = v52 - 2;
                goto LABEL_83;
              }
              int v54 = 1;
LABEL_80:
              __int16 v55 = "c";
            }
LABEL_89:
            unint64_t v57 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v57;
            if (!v57 || (unint64_t v58 = *((void *)this + 2), v57 + 24 > v58))
            {
              unint64_t v59 = 2 * *((void *)this + 4);
              if (v59 <= 0x20) {
                unint64_t v59 = 32;
              }
              *((void *)this + 4) = v59;
              unint64_t v60 = v59 + 8;
              unint64_t v61 = malloc_type_malloc(v59 + 8, 0xD0263BC5uLL);
              *unint64_t v61 = *((void *)this + 3);
              unint64_t v57 = ((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v58 = (unint64_t)v61 + v60;
              *((void *)this + 2) = (char *)v61 + v60;
              *((void *)this + 3) = v61;
            }
            *(_WORD *)(v57 + 16) = 113;
            *(unsigned char *)(v57 + 18) = 0;
            unint64_t v62 = (v57 + 31) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v62;
            if (!v62 || v62 + 24 > v58)
            {
              unint64_t v63 = 2 * *((void *)this + 4);
              if (v63 <= 0x20) {
                unint64_t v63 = 32;
              }
              *((void *)this + 4) = v63;
              unint64_t v64 = v63 + 8;
              int v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
              *int v65 = *((void *)this + 3);
              unint64_t v62 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v65 + v64;
              *((void *)this + 3) = v65;
            }
            *((void *)this + 1) = v62 + 24;
            size_t v66 = strlen(v55);
            *(_WORD *)(v62 + 16) = 114;
            *(unsigned char *)(v62 + 18) = 3;
            *(void *)unint64_t v62 = v55;
            *(void *)(v62 + 8) = v66;
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v57, (swift::Demangle::__runtime::Node *)v62, this);
            if (v54)
            {
              unint64_t v67 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleClangType(this);
              if (v67) {
                swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v57, v67, this);
              }
            }
            unint64_t v2 = (unint64_t)v135;
            swift::Demangle::__runtime::Node::addChild(v135, (swift::Demangle::__runtime::Node *)v57, this);
            unint64_t v50 = *((void *)this + 8);
            unint64_t v56 = *((void *)this + 9);
            if (v56 < v50) {
              goto LABEL_103;
            }
            goto LABEL_113;
          default:
            goto LABEL_82;
        }
      }
      unint64_t v52 = *((void *)this + 9);
LABEL_82:
      unint64_t v56 = v52 - 1;
LABEL_83:
      *((void *)this + 9) = v56;
      if (v56 >= v50) {
        goto LABEL_113;
      }
LABEL_103:
      int v68 = *(unsigned __int8 *)(*((void *)this + 7) + v56);
      if (v68 == 65)
      {
        unint64_t v69 = "@yield_once";
      }
      else
      {
        if (v68 != 71) {
          goto LABEL_113;
        }
        unint64_t v69 = "@yield_many";
      }
      *((void *)this + 9) = v56 + 1;
      unint64_t v70 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v70;
      if (!v70 || v70 + 24 > *((void *)this + 2))
      {
        unint64_t v71 = 2 * *((void *)this + 4);
        if (v71 <= 0x20) {
          unint64_t v71 = 32;
        }
        *((void *)this + 4) = v71;
        unint64_t v72 = v71 + 8;
        unint64_t v73 = malloc_type_malloc(v71 + 8, 0xD0263BC5uLL);
        void *v73 = *((void *)this + 3);
        unint64_t v70 = ((unint64_t)v73 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v73 + v72;
        *((void *)this + 3) = v73;
      }
      *((void *)this + 1) = v70 + 24;
      *(_WORD *)(v70 + 16) = 112;
      *(unsigned char *)(v70 + 18) = 3;
      *(void *)unint64_t v70 = v69;
      *(void *)(v70 + 8) = 11;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v70, this);
      unint64_t v50 = *((void *)this + 8);
      unint64_t v56 = *((void *)this + 9);
LABEL_113:
      if (v56 < v50 && *(unsigned char *)(*((void *)this + 7) + v56) == 104)
      {
        *((void *)this + 9) = v56 + 1;
        unint64_t v74 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v74;
        if (!v74 || v74 + 24 > *((void *)this + 2))
        {
          unint64_t v75 = 2 * *((void *)this + 4);
          if (v75 <= 0x20) {
            unint64_t v75 = 32;
          }
          *((void *)this + 4) = v75;
          unint64_t v76 = v75 + 8;
          char v77 = malloc_type_malloc(v75 + 8, 0xD0263BC5uLL);
          void *v77 = *((void *)this + 3);
          unint64_t v74 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v77 + v76;
          *((void *)this + 3) = v77;
        }
        *((void *)this + 1) = v74 + 24;
        *(_WORD *)(v74 + 16) = 112;
        *(unsigned char *)(v74 + 18) = 3;
        *(void *)unint64_t v74 = "@Sendable";
        *(void *)(v74 + 8) = 9;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v74, this);
        unint64_t v50 = *((void *)this + 8);
        unint64_t v56 = *((void *)this + 9);
      }
      if (v56 < v50 && *(unsigned char *)(*((void *)this + 7) + v56) == 72)
      {
        *((void *)this + 9) = v56 + 1;
        unint64_t v78 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v78;
        if (!v78 || v78 + 24 > *((void *)this + 2))
        {
          unint64_t v79 = 2 * *((void *)this + 4);
          if (v79 <= 0x20) {
            unint64_t v79 = 32;
          }
          *((void *)this + 4) = v79;
          unint64_t v80 = v79 + 8;
          unsigned int v81 = malloc_type_malloc(v79 + 8, 0xD0263BC5uLL);
          *unsigned int v81 = *((void *)this + 3);
          unint64_t v78 = ((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v81 + v80;
          *((void *)this + 3) = v81;
        }
        *((void *)this + 1) = v78 + 24;
        *(_WORD *)(v78 + 16) = 112;
        *(unsigned char *)(v78 + 18) = 3;
        *(void *)unint64_t v78 = "@async";
        *(void *)(v78 + 8) = 6;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v78, this);
      }
      if (v21) {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v21, this);
      }
      unint64_t v82 = swift::Demangle::__runtime::Demangler::demangleImplParamConvention(this, 118);
      if (v82)
      {
        unsigned int v83 = (swift::Demangle::__runtime::Node *)v82;
        int v84 = 0;
        do
        {
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v83, this);
          unint64_t v89 = *((void *)this + 9);
          unint64_t v90 = "";
          if (v89 < *((void *)this + 8))
          {
            unint64_t v90 = "";
            if (*(unsigned char *)(*((void *)this + 7) + v89) == 119)
            {
              *((void *)this + 9) = v89 + 1;
              unint64_t v90 = "@noDerivative";
            }
          }
          unint64_t v91 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v91;
          if (!v91 || v91 + 24 > *((void *)this + 2))
          {
            unint64_t v92 = 2 * *((void *)this + 4);
            if (v92 <= 0x20) {
              unint64_t v92 = 32;
            }
            *((void *)this + 4) = v92;
            unint64_t v93 = v92 + 8;
            int v94 = malloc_type_malloc(v92 + 8, 0xD0263BC5uLL);
            *int v94 = *((void *)this + 3);
            unint64_t v91 = ((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFFFF8;
            unsigned int v95 = (char *)v94 + v93;
            unint64_t v2 = (unint64_t)v135;
            *((void *)this + 2) = v95;
            *((void *)this + 3) = v94;
          }
          *((void *)this + 1) = v91 + 24;
          size_t v96 = strlen(v90);
          *(_WORD *)(v91 + 16) = 110;
          *(unsigned char *)(v91 + 18) = 3;
          *(void *)unint64_t v91 = v90;
          *(void *)(v91 + 8) = v96;
          swift::Demangle::__runtime::Node::addChild(v83, (swift::Demangle::__runtime::Node *)v91, this);
          unint64_t v97 = *((void *)this + 9);
          if (v97 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v97) == 84)
          {
            *((void *)this + 9) = v97 + 1;
            unint64_t v88 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v88;
            if (!v88 || v88 + 24 > *((void *)this + 2))
            {
              unint64_t v85 = 2 * *((void *)this + 4);
              if (v85 <= 0x20) {
                unint64_t v85 = 32;
              }
              *((void *)this + 4) = v85;
              unint64_t v86 = v85 + 8;
              unint64_t v87 = malloc_type_malloc(v85 + 8, 0xD0263BC5uLL);
              void *v87 = *((void *)this + 3);
              unint64_t v88 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v87 + v86;
              *((void *)this + 3) = v87;
            }
            *((void *)this + 1) = v88 + 24;
            *(_WORD *)(v88 + 16) = 111;
            *(unsigned char *)(v88 + 18) = 3;
            *(void *)unint64_t v88 = "sending";
            *(void *)(v88 + 8) = 7;
            swift::Demangle::__runtime::Node::addChild(v83, (swift::Demangle::__runtime::Node *)v88, this);
          }
          ++v84;
          unsigned int v83 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplParamConvention(this, 118);
        }
        while (v83);
      }
      else
      {
        int v84 = 0;
      }
      unint64_t v98 = *((void *)this + 9);
      if (v98 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v98) == 84)
      {
        *((void *)this + 9) = v98 + 1;
        unint64_t v99 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v99;
        if (!v99 || v99 + 24 > *((void *)this + 2))
        {
          unint64_t v100 = 2 * *((void *)this + 4);
          if (v100 <= 0x20) {
            unint64_t v100 = 32;
          }
          *((void *)this + 4) = v100;
          unint64_t v101 = v100 + 8;
          unint64_t v102 = malloc_type_malloc(v100 + 8, 0xD0263BC5uLL);
          *unint64_t v102 = *((void *)this + 3);
          unint64_t v99 = ((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v102 + v101;
          *((void *)this + 3) = v102;
        }
        *((void *)this + 1) = v99 + 24;
        *(_WORD *)(v99 + 16) = 109;
        *(unsigned char *)(v99 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v99, this);
      }
      unint64_t v103 = swift::Demangle::__runtime::Demangler::demangleImplResultConvention(this, 120);
      if (v103)
      {
        unint64_t v104 = (swift::Demangle::__runtime::Node *)v103;
        do
        {
          if (v2) {
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v104, this);
          }
          unint64_t v111 = *((void *)this + 9);
          uint64_t v112 = "";
          if (v111 < *((void *)this + 8))
          {
            uint64_t v112 = "";
            if (*(unsigned char *)(*((void *)this + 7) + v111) == 119)
            {
              *((void *)this + 9) = v111 + 1;
              uint64_t v112 = "@noDerivative";
            }
          }
          unint64_t v108 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v108;
          if (!v108 || v108 + 24 > *((void *)this + 2))
          {
            unint64_t v105 = 2 * *((void *)this + 4);
            if (v105 <= 0x20) {
              unint64_t v105 = 32;
            }
            *((void *)this + 4) = v105;
            unint64_t v106 = v105 + 8;
            unint64_t v107 = malloc_type_malloc(v105 + 8, 0xD0263BC5uLL);
            void *v107 = *((void *)this + 3);
            unint64_t v108 = ((unint64_t)v107 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v109 = (char *)v107 + v106;
            unint64_t v2 = (unint64_t)v135;
            *((void *)this + 2) = v109;
            *((void *)this + 3) = v107;
          }
          *((void *)this + 1) = v108 + 24;
          size_t v110 = strlen(v112);
          *(_WORD *)(v108 + 16) = 110;
          *(unsigned char *)(v108 + 18) = 3;
          *(void *)unint64_t v108 = v112;
          *(void *)(v108 + 8) = v110;
          swift::Demangle::__runtime::Node::addChild(v104, (swift::Demangle::__runtime::Node *)v108, this);
          ++v84;
          unint64_t v104 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplResultConvention(this, 120);
        }
        while (v104);
      }
      unint64_t v114 = *((void *)this + 8);
      unint64_t v113 = *((void *)this + 9);
      if (v113 >= v114 || *(unsigned char *)(*((void *)this + 7) + v113) != 89) {
        goto LABEL_182;
      }
      int v115 = v84 + 1;
      break;
    default:
      return v42;
  }
  do
  {
    int v84 = v115;
    *((void *)this + 9) = v113 + 1;
    int v116 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplParamConvention(this, 121);
    if (!v116) {
      return 0;
    }
    if (v2) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v116, this);
    }
    unint64_t v114 = *((void *)this + 8);
    unint64_t v113 = *((void *)this + 9);
    if (v113 >= v114) {
      break;
    }
    int v115 = v84 + 1;
  }
  while (*(unsigned char *)(*((void *)this + 7) + v113) == 89);
LABEL_182:
  if (v113 >= v114 || *(unsigned char *)(*((void *)this + 7) + v113) != 122) {
    goto LABEL_188;
  }
  *((void *)this + 9) = v113 + 1;
  int v117 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleImplResultConvention(this, 122);
  if (!v117) {
    return 0;
  }
  if (v2) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v117, this);
  }
  ++v84;
  unint64_t v114 = *((void *)this + 8);
  unint64_t v113 = *((void *)this + 9);
LABEL_188:
  if (v113 >= v114 || *(unsigned char *)(*((void *)this + 7) + v113) != 95) {
    return 0;
  }
  *((void *)this + 9) = v113 + 1;
  if (v84 >= 1)
  {
    unint64_t v118 = 0;
    uint64_t v119 = 0;
    do
    {
      int v121 = *((_DWORD *)this + 24);
      if (!v121) {
        return 0;
      }
      unsigned int v122 = v121 - 1;
      int v123 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v122);
      if (*((_WORD *)v123 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v122;
      int v124 = *(unsigned __int8 *)(v2 + 18);
      switch(v124)
      {
        case 5:
          unint64_t v126 = *(unsigned int *)(v2 + 8);
          unint64_t v125 = v126 + ~v119;
          if (v126 > v125) {
            goto LABEL_204;
          }
          break;
        case 2:
          unint64_t v125 = 1 - v119;
          if ((unint64_t)(1 - v119) < 2) {
            goto LABEL_204;
          }
          break;
        case 1:
          unint64_t v125 = v118;
          if (!v118)
          {
LABEL_204:
            unsigned int v127 = v124 - 1;
            unint64_t v128 = v2;
            if (v127 >= 2) {
              unint64_t v128 = *(void *)v2;
            }
            unint64_t v120 = *(swift::Demangle::__runtime::Node **)(v128 + 8 * v125);
            goto LABEL_193;
          }
          break;
      }
      unint64_t v120 = 0;
LABEL_193:
      swift::Demangle::__runtime::Node::addChild(v120, v123, this);
      ++v119;
      --v118;
    }
    while (-(uint64_t)v84 != v118);
  }
  if (!v2) {
    return 0;
  }
  unint64_t v42 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v42;
  if (!v42 || v42 + 24 > *((void *)this + 2))
  {
    unint64_t v129 = 2 * *((void *)this + 4);
    if (v129 <= 0x20) {
      unint64_t v129 = 32;
    }
    *((void *)this + 4) = v129;
    unint64_t v130 = v129 + 8;
    unint64_t v131 = malloc_type_malloc(v129 + 8, 0xD0263BC5uLL);
    *unint64_t v131 = *((void *)this + 3);
    unint64_t v42 = ((unint64_t)v131 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v131 + v130;
    *((void *)this + 3) = v131;
  }
  *((void *)this + 1) = v42 + 24;
  *(_WORD *)(v42 + 16) = 232;
  *(unsigned char *)(v42 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v42, (swift::Demangle::__runtime::Node *)v2, this);
  return v42;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleLocalIdentifier(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8)) {
    goto LABEL_18;
  }
  uint64_t v3 = *((void *)this + 7);
  unsigned int v4 = *(unsigned __int8 *)(v3 + v2);
  if (v4 == 108)
  {
    *((void *)this + 9) = v2 + 1;
    int v9 = *((_DWORD *)this + 24);
    if (v9)
    {
      unsigned int v10 = v9 - 1;
      unint64_t v11 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v10);
      if (*((_WORD *)v11 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v10;
        unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v12;
        if (!v12 || v12 + 24 > *((void *)this + 2))
        {
          unint64_t v13 = 2 * *((void *)this + 4);
          if (v13 <= 0x20) {
            unint64_t v13 = 32;
          }
          *((void *)this + 4) = v13;
          unint64_t v14 = v13 + 8;
          unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
          unint64_t v16 = (char *)v15 + v14;
          *unint64_t v15 = *((void *)this + 3);
          unint64_t v12 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v16;
          *((void *)this + 3) = v15;
        }
        *((void *)this + 1) = v12 + 24;
        *(_WORD *)(v12 + 16) = 176;
        *(unsigned char *)(v12 + 18) = 0;
        unint64_t v17 = (swift::Demangle::__runtime::Node *)v12;
        unint64_t v18 = v11;
        goto LABEL_38;
      }
    }
    return 0;
  }
  if (v4 == 76)
  {
    *((void *)this + 9) = v2 + 1;
    int v5 = *((_DWORD *)this + 24);
    if (v5)
    {
      uint64_t v6 = (v5 - 1);
      uint64_t v7 = *((void *)this + 11);
      int v8 = *(swift::Demangle::__runtime::Node **)(v7 + 8 * v6);
      if (*((_WORD *)v8 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v6;
        if (v5 == 1) {
          return 0;
        }
        uint64_t v6 = (v5 - 2);
      }
      else
      {
        int v8 = 0;
      }
      unint64_t v22 = *(unsigned __int16 **)(v7 + 8 * v6);
      int v35 = v22[8];
      BOOL v36 = (v35 - 173) > 0x3C || ((1 << (v35 + 83)) & 0x100000010000010DLL) == 0;
      if (!v36
        || ((v35 - 101) <= 0x24
          ? (BOOL v37 = ((1 << (v35 - 101)) & 0x1000800001) == 0)
          : (BOOL v37 = 1),
            !v37 || v35 == 347))
      {
        *((_DWORD *)this + 24) = v6;
        if (v8)
        {
          unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v12;
          if (!v12 || v12 + 24 > *((void *)this + 2))
          {
            unint64_t v38 = 2 * *((void *)this + 4);
            if (v38 <= 0x20) {
              unint64_t v38 = 32;
            }
            *((void *)this + 4) = v38;
            unint64_t v39 = v38 + 8;
            unint64_t v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
            unint64_t v41 = (char *)v40 + v39;
            *unint64_t v40 = *((void *)this + 3);
            unint64_t v12 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v41;
            *((void *)this + 3) = v40;
          }
          *((void *)this + 1) = v12 + 24;
          __int16 v30 = 176;
LABEL_37:
          *(_WORD *)(v12 + 16) = v30;
          *(unsigned char *)(v12 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v12, v8, this);
          unint64_t v17 = (swift::Demangle::__runtime::Node *)v12;
          unint64_t v18 = (swift::Demangle::__runtime::Node *)v22;
LABEL_38:
          swift::Demangle::__runtime::Node::addChild(v17, v18, this);
          return v12;
        }
      }
    }
    return 0;
  }
  if ((char)v4 < 97)
  {
    if (v4 - 65 <= 9) {
      goto LABEL_40;
    }
LABEL_18:
    unint64_t v19 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
    int v20 = *((_DWORD *)this + 24);
    if (v20)
    {
      int v8 = (swift::Demangle::__runtime::Node *)v19;
      unsigned int v21 = v20 - 1;
      unint64_t v22 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v21);
      int v23 = v22[8];
      BOOL v24 = (v23 - 173) > 0x3C || ((1 << (v23 + 83)) & 0x100000010000010DLL) == 0;
      if (!v24
        || ((v23 - 101) <= 0x24
          ? (BOOL v25 = ((1 << (v23 - 101)) & 0x1000800001) == 0)
          : (BOOL v25 = 1),
            !v25 || v23 == 347))
      {
        *((_DWORD *)this + 24) = v21;
        if (v19)
        {
          unint64_t v12 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v12;
          if (!v12 || v12 + 24 > *((void *)this + 2))
          {
            unint64_t v26 = 2 * *((void *)this + 4);
            if (v26 <= 0x20) {
              unint64_t v26 = 32;
            }
            *((void *)this + 4) = v26;
            unint64_t v27 = v26 + 8;
            unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
            unint64_t v29 = (char *)v28 + v27;
            void *v28 = *((void *)this + 3);
            unint64_t v12 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v29;
            *((void *)this + 3) = v28;
          }
          *((void *)this + 1) = v12 + 24;
          __int16 v30 = 137;
          goto LABEL_37;
        }
      }
    }
    return 0;
  }
  if (v4 >= 0x6B) {
    goto LABEL_18;
  }
LABEL_40:
  *((void *)this + 9) = v2 + 1;
  char __src = *(unsigned char *)(v3 + v2);
  unint64_t v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this, 101, &__src, 1uLL);
  int v32 = *((_DWORD *)this + 24);
  if (v32)
  {
    unsigned int v33 = v32 - 1;
    unint64_t v34 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v33);
    *((_DWORD *)this + 24) = v33;
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v43 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v43;
  if (!v43 || v43 + 24 > *((void *)this + 2))
  {
    unint64_t v44 = 2 * *((void *)this + 4);
    if (v44 <= 0x20) {
      unint64_t v44 = 32;
    }
    *((void *)this + 4) = v44;
    unint64_t v45 = v44 + 8;
    unint64_t v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
    uint64_t v47 = (char *)v46 + v45;
    *unint64_t v46 = *((void *)this + 3);
    unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v47;
    *((void *)this + 3) = v46;
  }
  *((void *)this + 1) = v43 + 24;
  *(_WORD *)(v43 + 16) = 205;
  *(unsigned char *)(v43 + 18) = 0;
  if (v31 && v43) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v43, v31, this);
  }
  unint64_t v12 = 0;
  if (v34 && v43)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v43, v34, this);
    return v43;
  }
  return v12;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMetatype(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 < *((void *)this + 8))
  {
    unint64_t v3 = 0;
    *((void *)this + 9) = v1 + 1;
    switch(*(unsigned char *)(*((void *)this + 7) + v1))
    {
      case 'A':
        unsigned int v4 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
        if (!v4) {
          return 0;
        }
        int v5 = v4;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v6 = 2 * *((void *)this + 4);
          if (v6 <= 0x20) {
            unint64_t v6 = 32;
          }
          *((void *)this + 4) = v6;
          unint64_t v7 = v6 + 8;
          int v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
          int v9 = (char *)v8 + v7;
          *int v8 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v9;
          *((void *)this + 3) = v8;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 260;
        goto LABEL_293;
      case 'B':
        int v11 = *((_DWORD *)this + 24);
        if (!v11) {
          return 0;
        }
        unsigned int v12 = v11 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v12);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v12;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v13 = 2 * *((void *)this + 4);
          if (v13 <= 0x20) {
            unint64_t v13 = 32;
          }
          *((void *)this + 4) = v13;
          unint64_t v14 = v13 + 8;
          unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
          unint64_t v16 = (char *)v15 + v14;
          *unint64_t v15 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v16;
          *((void *)this + 3) = v15;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 258;
        goto LABEL_293;
      case 'C':
        int v17 = *((_DWORD *)this + 24);
        if (!v17) {
          return 0;
        }
        unsigned int v18 = v17 - 1;
        unint64_t v19 = *(uint64_t **)(*((void *)this + 11) + 8 * v18);
        if (*((_WORD *)v19 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v18;
        int v20 = *((unsigned __int8 *)v19 + 18);
        unsigned int v21 = (swift::Demangle::__runtime::Node *)v19;
        if ((v20 - 1) >= 2) {
          unsigned int v21 = (swift::Demangle::__runtime::Node *)*v19;
        }
          return 0;
        if ((v20 - 1) < 2) {
          goto LABEL_27;
        }
        if (v20 == 5 && *((_DWORD *)v19 + 2))
        {
          unint64_t v19 = (uint64_t *)*v19;
LABEL_27:
          unint64_t v22 = (swift::Demangle::__runtime::Node *)*v19;
        }
        else
        {
          unint64_t v22 = 0;
        }
        return swift::Demangle::__runtime::Demangler::createWithChild(this, 261, v22);
      case 'D':
        int v23 = *((_DWORD *)this + 24);
        if (!v23) {
          return 0;
        }
        unsigned int v24 = v23 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v24);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v24;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v25 = 2 * *((void *)this + 4);
          if (v25 <= 0x20) {
            unint64_t v25 = 32;
          }
          *((void *)this + 4) = v25;
          unint64_t v26 = v25 + 8;
          unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
          unint64_t v28 = (char *)v27 + v26;
          *unint64_t v27 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v28;
          *((void *)this + 3) = v27;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 243;
        goto LABEL_293;
      case 'F':
        int v29 = *((_DWORD *)this + 24);
        if (!v29) {
          return 0;
        }
        unsigned int v30 = v29 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v30);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v30;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v31 = 2 * *((void *)this + 4);
          if (v31 <= 0x20) {
            unint64_t v31 = 32;
          }
          *((void *)this + 4) = v31;
          unint64_t v32 = v31 + 8;
          unsigned int v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
          unint64_t v34 = (char *)v33 + v32;
          *unsigned int v33 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v34;
          *((void *)this + 3) = v33;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 259;
        goto LABEL_293;
      case 'I':
        int v35 = *((_DWORD *)this + 24);
        if (!v35) {
          return 0;
        }
        unsigned int v36 = v35 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v36);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v36;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v37 = 2 * *((void *)this + 4);
          if (v37 <= 0x20) {
            unint64_t v37 = 32;
          }
          *((void *)this + 4) = v37;
          unint64_t v38 = v37 + 8;
          unint64_t v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
          unint64_t v40 = (char *)v39 + v38;
          *unint64_t v39 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v40;
          *((void *)this + 3) = v39;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 240;
        goto LABEL_293;
      case 'J':
        int v41 = *((_DWORD *)this + 24);
        if (!v41) {
          return 0;
        }
        unsigned int v42 = v41 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v42);
        *((_DWORD *)this + 24) = v42;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v43 = 2 * *((void *)this + 4);
          if (v43 <= 0x20) {
            unint64_t v43 = 32;
          }
          *((void *)this + 4) = v43;
          unint64_t v44 = v43 + 8;
          unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
          unint64_t v46 = (char *)v45 + v44;
          *unint64_t v45 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v46;
          *((void *)this + 3) = v45;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 314;
        goto LABEL_293;
      case 'K':
        int v47 = *((_DWORD *)this + 24);
        if (!v47) {
          return 0;
        }
        unsigned int v48 = v47 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v48);
        *((_DWORD *)this + 24) = v48;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v49 = 2 * *((void *)this + 4);
          if (v49 <= 0x20) {
            unint64_t v49 = 32;
          }
          *((void *)this + 4) = v49;
          unint64_t v50 = v49 + 8;
          unint64_t v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
          unint64_t v52 = (char *)v51 + v50;
          *unint64_t v51 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v52;
          *((void *)this + 3) = v51;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 312;
        goto LABEL_293;
      case 'L':
        int v53 = *((_DWORD *)this + 24);
        if (!v53) {
          return 0;
        }
        unsigned int v54 = v53 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v54);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v54;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v55 = 2 * *((void *)this + 4);
          if (v55 <= 0x20) {
            unint64_t v55 = 32;
          }
          *((void *)this + 4) = v55;
          unint64_t v56 = v55 + 8;
          unint64_t v57 = malloc_type_malloc(v55 + 8, 0xD0263BC5uLL);
          unint64_t v58 = (char *)v57 + v56;
          *unint64_t v57 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v58;
          *((void *)this + 3) = v57;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 244;
        goto LABEL_293;
      case 'M':
        int v59 = *((_DWORD *)this + 24);
        if (!v59) {
          return 0;
        }
        unsigned int v60 = v59 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v60);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v60;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v61 = 2 * *((void *)this + 4);
          if (v61 <= 0x20) {
            unint64_t v61 = 32;
          }
          *((void *)this + 4) = v61;
          unint64_t v62 = v61 + 8;
          unint64_t v63 = malloc_type_malloc(v61 + 8, 0xD0263BC5uLL);
          unint64_t v64 = (char *)v63 + v62;
          *unint64_t v63 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v64;
          *((void *)this + 3) = v63;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 310;
        goto LABEL_293;
      case 'N':
        int v65 = *((_DWORD *)this + 24);
        if (!v65) {
          return 0;
        }
        unsigned int v66 = v65 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v66);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v66;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v67 = 2 * *((void *)this + 4);
          if (v67 <= 0x20) {
            unint64_t v67 = 32;
          }
          *((void *)this + 4) = v67;
          unint64_t v68 = v67 + 8;
          unint64_t v69 = malloc_type_malloc(v67 + 8, 0xD0263BC5uLL);
          unint64_t v70 = (char *)v69 + v68;
          *unint64_t v69 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v70;
          *((void *)this + 3) = v69;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 313;
        goto LABEL_293;
      case 'P':
        int v71 = *((_DWORD *)this + 24);
        if (!v71) {
          return 0;
        }
        unsigned int v72 = v71 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v72);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v72;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v73 = 2 * *((void *)this + 4);
          if (v73 <= 0x20) {
            unint64_t v73 = 32;
          }
          *((void *)this + 4) = v73;
          unint64_t v74 = v73 + 8;
          unint64_t v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
          unint64_t v76 = (char *)v75 + v74;
          *unint64_t v75 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v76;
          *((void *)this + 3) = v75;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 97;
        goto LABEL_293;
      case 'Q':
        int v77 = *((_DWORD *)this + 24);
        if (!v77) {
          return 0;
        }
        unsigned int v78 = v77 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v78);
        *((_DWORD *)this + 24) = v78;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v79 = 2 * *((void *)this + 4);
          if (v79 <= 0x20) {
            unint64_t v79 = 32;
          }
          *((void *)this + 4) = v79;
          unint64_t v80 = v79 + 8;
          unsigned int v81 = malloc_type_malloc(v79 + 8, 0xD0263BC5uLL);
          unint64_t v82 = (char *)v81 + v80;
          *unsigned int v81 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v82;
          *((void *)this + 3) = v81;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 302;
        goto LABEL_293;
      case 'S':
        unint64_t v83 = swift::Demangle::__runtime::Demangler::popProtocol(this);
        if (!v83) {
          return 0;
        }
        int v5 = (swift::Demangle::__runtime::Node *)v83;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v84 = 2 * *((void *)this + 4);
          if (v84 <= 0x20) {
            unint64_t v84 = 32;
          }
          *((void *)this + 4) = v84;
          unint64_t v85 = v84 + 8;
          unint64_t v86 = malloc_type_malloc(v84 + 8, 0xD0263BC5uLL);
          unint64_t v87 = (char *)v86 + v85;
          *unint64_t v86 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v87;
          *((void *)this + 3) = v86;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 193;
        goto LABEL_293;
      case 'U':
        int v88 = *((_DWORD *)this + 24);
        if (!v88) {
          return 0;
        }
        unsigned int v89 = v88 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v89);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v89;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v90 = 2 * *((void *)this + 4);
          if (v90 <= 0x20) {
            unint64_t v90 = 32;
          }
          *((void *)this + 4) = v90;
          unint64_t v91 = v90 + 8;
          unint64_t v92 = malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
          unint64_t v93 = (char *)v92 + v91;
          void *v92 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v93;
          *((void *)this + 3) = v92;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 149;
        goto LABEL_293;
      case 'V':
        int v94 = *((_DWORD *)this + 24);
        if (!v94) {
          return 0;
        }
        int v95 = v94 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v94 - 1));
        if (*((_WORD *)v5 + 8) != 232 && !swift::Demangle::__runtime::isContext()) {
          return 0;
        }
        *((_DWORD *)this + 24) = v95;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v96 = 2 * *((void *)this + 4);
          if (v96 <= 0x20) {
            unint64_t v96 = 32;
          }
          *((void *)this + 4) = v96;
          unint64_t v97 = v96 + 8;
          unint64_t v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
          unint64_t v99 = (char *)v98 + v97;
          void *v98 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v99;
          *((void *)this + 3) = v98;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 177;
        goto LABEL_293;
      case 'X':
        return swift::Demangle::__runtime::Demangler::demanglePrivateContextDescriptor(this);
      case 'a':
        int v101 = *((_DWORD *)this + 24);
        if (!v101) {
          return 0;
        }
        unsigned int v102 = v101 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v102);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v102;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v103 = 2 * *((void *)this + 4);
          if (v103 <= 0x20) {
            unint64_t v103 = 32;
          }
          *((void *)this + 4) = v103;
          unint64_t v104 = v103 + 8;
          unint64_t v105 = malloc_type_malloc(v103 + 8, 0xD0263BC5uLL);
          unint64_t v106 = (char *)v105 + v104;
          *unint64_t v105 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v106;
          *((void *)this + 3) = v105;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 238;
        goto LABEL_293;
      case 'b':
        int v107 = *((_DWORD *)this + 24);
        if (!v107) {
          return 0;
        }
        unsigned int v108 = v107 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v108);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v108;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v109 = 2 * *((void *)this + 4);
          if (v109 <= 0x20) {
            unint64_t v109 = 32;
          }
          *((void *)this + 4) = v109;
          unint64_t v110 = v109 + 8;
          unint64_t v111 = malloc_type_malloc(v109 + 8, 0xD0263BC5uLL);
          uint64_t v112 = (char *)v111 + v110;
          *unint64_t v111 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v112;
          *((void *)this + 3) = v111;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 311;
        goto LABEL_293;
      case 'c':
        unint64_t v113 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
        if (!v113) {
          return 0;
        }
        int v5 = v113;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v114 = 2 * *((void *)this + 4);
          if (v114 <= 0x20) {
            unint64_t v114 = 32;
          }
          *((void *)this + 4) = v114;
          unint64_t v115 = v114 + 8;
          int v116 = malloc_type_malloc(v114 + 8, 0xD0263BC5uLL);
          int v117 = (char *)v116 + v115;
          *int v116 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v116 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v117;
          *((void *)this + 3) = v116;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 188;
        goto LABEL_293;
      case 'f':
        int v118 = *((_DWORD *)this + 24);
        if (!v118) {
          return 0;
        }
        unsigned int v119 = v118 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v119);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v119;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v120 = 2 * *((void *)this + 4);
          if (v120 <= 0x20) {
            unint64_t v120 = 32;
          }
          *((void *)this + 4) = v120;
          unint64_t v121 = v120 + 8;
          unsigned int v122 = malloc_type_malloc(v120 + 8, 0xD0263BC5uLL);
          int v123 = (char *)v122 + v121;
          *unsigned int v122 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v122 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v123;
          *((void *)this + 3) = v122;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 75;
        goto LABEL_293;
      case 'g':
        int v124 = *((_DWORD *)this + 24);
        if (!v124) {
          return 0;
        }
        unsigned int v125 = v124 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v125);
        *((_DWORD *)this + 24) = v125;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v126 = 2 * *((void *)this + 4);
          if (v126 <= 0x20) {
            unint64_t v126 = 32;
          }
          *((void *)this + 4) = v126;
          unint64_t v127 = v126 + 8;
          unint64_t v128 = malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
          unint64_t v129 = (char *)v128 + v127;
          *unint64_t v128 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v129;
          *((void *)this + 3) = v128;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 304;
        goto LABEL_293;
      case 'h':
        int v130 = *((_DWORD *)this + 24);
        if (!v130) {
          return 0;
        }
        unsigned int v131 = v130 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v131);
        *((_DWORD *)this + 24) = v131;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v132 = 2 * *((void *)this + 4);
          if (v132 <= 0x20) {
            unint64_t v132 = 32;
          }
          *((void *)this + 4) = v132;
          unint64_t v133 = v132 + 8;
          int v134 = malloc_type_malloc(v132 + 8, 0xD0263BC5uLL);
          unint64_t v135 = (char *)v134 + v133;
          *int v134 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v134 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v135;
          *((void *)this + 3) = v134;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 305;
        goto LABEL_293;
      case 'i':
        int v136 = *((_DWORD *)this + 24);
        if (!v136) {
          return 0;
        }
        unsigned int v137 = v136 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v137);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v137;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v138 = 2 * *((void *)this + 4);
          if (v138 <= 0x20) {
            unint64_t v138 = 32;
          }
          *((void *)this + 4) = v138;
          unint64_t v139 = v138 + 8;
          __int16 v140 = malloc_type_malloc(v138 + 8, 0xD0263BC5uLL);
          unsigned int v141 = (char *)v140 + v139;
          void *v140 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v140 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v141;
          *((void *)this + 3) = v140;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 241;
        goto LABEL_293;
      case 'j':
        int v142 = *((_DWORD *)this + 24);
        if (!v142) {
          return 0;
        }
        unsigned int v143 = v142 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v143);
        *((_DWORD *)this + 24) = v143;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v144 = 2 * *((void *)this + 4);
          if (v144 <= 0x20) {
            unint64_t v144 = 32;
          }
          *((void *)this + 4) = v144;
          unint64_t v145 = v144 + 8;
          unsigned int v146 = malloc_type_malloc(v144 + 8, 0xD0263BC5uLL);
          unint64_t v147 = (char *)v146 + v145;
          *unsigned int v146 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v147;
          *((void *)this + 3) = v146;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 306;
        goto LABEL_293;
      case 'k':
        int v148 = *((_DWORD *)this + 24);
        if (!v148) {
          return 0;
        }
        unsigned int v149 = v148 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v149);
        *((_DWORD *)this + 24) = v149;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v150 = 2 * *((void *)this + 4);
          if (v150 <= 0x20) {
            unint64_t v150 = 32;
          }
          *((void *)this + 4) = v150;
          unint64_t v151 = v150 + 8;
          unint64_t v152 = malloc_type_malloc(v150 + 8, 0xD0263BC5uLL);
          uint64_t v153 = (char *)v152 + v151;
          *unint64_t v152 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v152 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v153;
          *((void *)this + 3) = v152;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 307;
        goto LABEL_293;
      case 'l':
        int v154 = *((_DWORD *)this + 24);
        if (!v154) {
          return 0;
        }
        unsigned int v155 = v154 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v155);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v155;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v156 = 2 * *((void *)this + 4);
          if (v156 <= 0x20) {
            unint64_t v156 = 32;
          }
          *((void *)this + 4) = v156;
          unint64_t v157 = v156 + 8;
          uint64_t v158 = malloc_type_malloc(v156 + 8, 0xD0263BC5uLL);
          uint64_t v159 = (char *)v158 + v157;
          void *v158 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v159;
          *((void *)this + 3) = v158;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 242;
        goto LABEL_293;
      case 'm':
        int v160 = *((_DWORD *)this + 24);
        if (!v160) {
          return 0;
        }
        unsigned int v161 = v160 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v161);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v161;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v162 = 2 * *((void *)this + 4);
          if (v162 <= 0x20) {
            unint64_t v162 = 32;
          }
          *((void *)this + 4) = v162;
          unint64_t v163 = v162 + 8;
          int v164 = malloc_type_malloc(v162 + 8, 0xD0263BC5uLL);
          long long v165 = (char *)v164 + v163;
          *int v164 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v164 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v165;
          *((void *)this + 3) = v164;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 147;
        goto LABEL_293;
      case 'n':
        int v166 = *((_DWORD *)this + 24);
        if (!v166) {
          return 0;
        }
        unsigned int v167 = v166 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v167);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v167;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v168 = 2 * *((void *)this + 4);
          if (v168 <= 0x20) {
            unint64_t v168 = 32;
          }
          *((void *)this + 4) = v168;
          unint64_t v169 = v168 + 8;
          uint64_t v170 = malloc_type_malloc(v168 + 8, 0xD0263BC5uLL);
          uint64_t v171 = (char *)v170 + v169;
          *uint64_t v170 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v170 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v171;
          *((void *)this + 3) = v170;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 158;
        goto LABEL_293;
      case 'o':
        int v172 = *((_DWORD *)this + 24);
        if (!v172) {
          return 0;
        }
        unsigned int v173 = v172 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v173);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v173;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v174 = 2 * *((void *)this + 4);
          if (v174 <= 0x20) {
            unint64_t v174 = 32;
          }
          *((void *)this + 4) = v174;
          unint64_t v175 = v174 + 8;
          long long v176 = malloc_type_malloc(v174 + 8, 0xD0263BC5uLL);
          unint64_t v177 = (char *)v176 + v175;
          *long long v176 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v176 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v177;
          *((void *)this + 3) = v176;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 25;
        goto LABEL_293;
      case 'p':
        unint64_t v178 = swift::Demangle::__runtime::Demangler::popProtocol(this);
        if (!v178) {
          return 0;
        }
        int v5 = (swift::Demangle::__runtime::Node *)v178;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v179 = 2 * *((void *)this + 4);
          if (v179 <= 0x20) {
            unint64_t v179 = 32;
          }
          *((void *)this + 4) = v179;
          unint64_t v180 = v179 + 8;
          int v181 = malloc_type_malloc(v179 + 8, 0xD0263BC5uLL);
          long long v182 = (char *)v181 + v180;
          void *v181 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v181 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v182;
          *((void *)this + 3) = v181;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 186;
        goto LABEL_293;
      case 'q':
        int v183 = *((_DWORD *)this + 24);
        if (!v183) {
          return 0;
        }
        unsigned int v184 = v183 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v184);
        *((_DWORD *)this + 24) = v184;
        if (!v5) {
          return 0;
        }
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v185 = 2 * *((void *)this + 4);
          if (v185 <= 0x20) {
            unint64_t v185 = 32;
          }
          *((void *)this + 4) = v185;
          unint64_t v186 = v185 + 8;
          long long v187 = malloc_type_malloc(v185 + 8, 0xD0263BC5uLL);
          long long v188 = (char *)v187 + v186;
          *long long v187 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v187 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v188;
          *((void *)this + 3) = v187;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 335;
        goto LABEL_293;
      case 'r':
        int v189 = *((_DWORD *)this + 24);
        if (!v189) {
          return 0;
        }
        unsigned int v190 = v189 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v190);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v190;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v191 = 2 * *((void *)this + 4);
          if (v191 <= 0x20) {
            unint64_t v191 = 32;
          }
          *((void *)this + 4) = v191;
          unint64_t v192 = v191 + 8;
          int v193 = malloc_type_malloc(v191 + 8, 0xD0263BC5uLL);
          uint64_t v194 = (char *)v193 + v192;
          *int v193 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v193 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v194;
          *((void *)this + 3) = v193;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 239;
        goto LABEL_293;
      case 's':
        int v195 = *((_DWORD *)this + 24);
        if (!v195) {
          return 0;
        }
        unsigned int v196 = v195 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v196);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v196;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v197 = 2 * *((void *)this + 4);
          if (v197 <= 0x20) {
            unint64_t v197 = 32;
          }
          *((void *)this + 4) = v197;
          unint64_t v198 = v197 + 8;
          BOOL v199 = malloc_type_malloc(v197 + 8, 0xD0263BC5uLL);
          unsigned int v200 = (char *)v199 + v198;
          void *v199 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v199 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v200;
          *((void *)this + 3) = v199;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 150;
        goto LABEL_293;
      case 't':
        int v201 = *((_DWORD *)this + 24);
        if (!v201) {
          return 0;
        }
        unsigned int v202 = v201 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v202);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v202;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v203 = 2 * *((void *)this + 4);
          if (v203 <= 0x20) {
            unint64_t v203 = 32;
          }
          *((void *)this + 4) = v203;
          unint64_t v204 = v203 + 8;
          int v205 = malloc_type_malloc(v203 + 8, 0xD0263BC5uLL);
          char v206 = (char *)v205 + v204;
          *int v205 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v205 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v206;
          *((void *)this + 3) = v205;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 151;
        goto LABEL_293;
      case 'u':
        int v207 = *((_DWORD *)this + 24);
        if (!v207) {
          return 0;
        }
        unsigned int v208 = v207 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v208);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v208;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v209 = 2 * *((void *)this + 4);
          if (v209 <= 0x20) {
            unint64_t v209 = 32;
          }
          *((void *)this + 4) = v209;
          unint64_t v210 = v209 + 8;
          uint64_t v211 = malloc_type_malloc(v209 + 8, 0xD0263BC5uLL);
          unint64_t v212 = (char *)v211 + v210;
          *uint64_t v211 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v211 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v212;
          *((void *)this + 3) = v211;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 148;
        goto LABEL_293;
      case 'z':
        int v213 = *((_DWORD *)this + 24);
        if (!v213) {
          return 0;
        }
        unsigned int v214 = v213 - 1;
        int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v214);
        if (*((_WORD *)v5 + 8) != 232) {
          return 0;
        }
        *((_DWORD *)this + 24) = v214;
        unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v3;
        if (!v3 || v3 + 24 > *((void *)this + 2))
        {
          unint64_t v215 = 2 * *((void *)this + 4);
          if (v215 <= 0x20) {
            unint64_t v215 = 32;
          }
          *((void *)this + 4) = v215;
          unint64_t v216 = v215 + 8;
          char v217 = malloc_type_malloc(v215 + 8, 0xD0263BC5uLL);
          int v218 = (char *)v217 + v216;
          *char v217 = *((void *)this + 3);
          unint64_t v3 = ((unint64_t)v217 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v218;
          *((void *)this + 3) = v217;
        }
        *((void *)this + 1) = v3 + 24;
        __int16 v10 = 318;
LABEL_293:
        *(_WORD *)(v3 + 16) = v10;
        *(unsigned char *)(v3 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, v5, this);
        return v3;
      default:
        return v3;
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleArchetype(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v1) {
    return 0;
  }
  unint64_t v3 = this;
  unint64_t Type = 0;
  unint64_t v5 = v2 + 1;
  *((void *)this + 9) = v2 + 1;
  uint64_t v6 = *((void *)this + 7);
  switch(*(unsigned char *)(v6 + v2))
  {
    case 'O':
      unint64_t v7 = swift::Demangle::__runtime::Demangler::popContext(this);
      if (!v7) {
        return 0;
      }
      unint64_t v8 = (unint64_t)v7;
      unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (!Type || Type + 24 > *((void *)v3 + 2))
      {
        unint64_t v9 = 2 * *((void *)v3 + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)v3 + 4) = v9;
        unint64_t v10 = v9 + 8;
        int v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        void *v11 = *((void *)v3 + 3);
        unint64_t Type = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v11 + v10;
        *((void *)v3 + 3) = v11;
      }
      *((void *)v3 + 1) = Type + 24;
      __int16 v12 = 309;
      goto LABEL_71;
    case 'P':
      return swift::Demangle::__runtime::Demangler::popPack(this);
    case 'R':
      if (v5 >= v1) {
        return 0;
      }
      int v14 = *(unsigned __int8 *)(v6 + v5);
      if (v14 == 95)
      {
        uint64_t v15 = 0;
        *((void *)this + 9) = v2 + 2;
      }
      else
      {
        if ((v14 - 48) > 9) {
          return 0;
        }
        int v79 = 0;
        while (1)
        {
          int v80 = *(unsigned __int8 *)(v6 + v5);
          if ((v80 - 48) > 9) {
            break;
          }
          int v81 = v80 + 10 * v79 - 48;
          if (v81 < v79) {
            return 0;
          }
          unint64_t Type = 0;
          *((void *)this + 9) = ++v5;
          int v79 = v81;
          if (v1 == v5) {
            return Type;
          }
        }
        unint64_t Type = 0;
        if (v79 < 0 || v5 >= v1 || v80 != 95) {
          return Type;
        }
        *((void *)this + 9) = v5 + 1;
        uint64_t v15 = (v79 + 1);
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= 0x20) {
          unint64_t v17 = 32;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        unint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        *unint64_t v19 = *((void *)v3 + 3);
        unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v19 + v18;
        *((void *)v3 + 3) = v19;
      }
      *((void *)v3 + 1) = v16 + 24;
      *(_WORD *)(v16 + 16) = 341;
      *(unsigned char *)(v16 + 18) = 4;
      *(void *)unint64_t v16 = v15;
      unint64_t v8 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v8;
      if (!v8 || v8 + 24 > *((void *)v3 + 2))
      {
        unint64_t v20 = 2 * *((void *)v3 + 4);
        if (v20 <= 0x20) {
          unint64_t v20 = 32;
        }
        *((void *)v3 + 4) = v20;
        unint64_t v21 = v20 + 8;
        unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
        *unint64_t v22 = *((void *)v3 + 3);
        unint64_t v8 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v22 + v21;
        *((void *)v3 + 3) = v22;
      }
      *((void *)v3 + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 308;
      *(unsigned char *)(v8 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v8, (swift::Demangle::__runtime::Node *)v16, v3);
      unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (!Type || Type + 24 > *((void *)v3 + 2))
      {
LABEL_67:
        unint64_t v47 = 2 * *((void *)v3 + 4);
        if (v47 <= 0x20) {
          unint64_t v47 = 32;
        }
        *((void *)v3 + 4) = v47;
        unint64_t v48 = v47 + 8;
        unint64_t v49 = malloc_type_malloc(v47 + 8, 0xD0263BC5uLL);
        void *v49 = *((void *)v3 + 3);
        unint64_t Type = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v49 + v48;
        *((void *)v3 + 3) = v49;
      }
LABEL_70:
      *((void *)v3 + 1) = Type + 24;
      __int16 v12 = 232;
LABEL_71:
      *(_WORD *)(Type + 16) = v12;
      *(unsigned char *)(Type + 18) = 0;
      unint64_t v50 = (swift::Demangle::__runtime::Node *)Type;
      unint64_t v51 = (swift::Demangle::__runtime::Node *)v8;
      goto LABEL_72;
    case 'S':
      return swift::Demangle::__runtime::Demangler::popSILPack(this);
    case 'X':
      int v23 = (swift::Demangle::__runtime::Node **)swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(this, 0);
      goto LABEL_78;
    case 'Y':
      unint64_t DependentGenericParamType = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
      goto LABEL_35;
    case 'Z':
      unint64_t DependentGenericParamType = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, 0, 0);
LABEL_35:
      int v23 = (swift::Demangle::__runtime::Node **)swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(v3, DependentGenericParamType);
      goto LABEL_78;
    case 'a':
      int v25 = *((_DWORD *)this + 24);
      if (!v25) {
        return 0;
      }
      int v26 = v25 - 1;
      uint64_t v27 = *((void *)this + 11);
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)(v27 + 8 * (v25 - 1));
      if (*((_WORD *)v28 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v26;
        if (v25 == 1) {
          return 0;
        }
      }
      else
      {
        unint64_t v28 = 0;
        int v26 = *((_DWORD *)this + 24);
      }
      unsigned int v68 = v26 - 1;
      unint64_t v69 = *(swift::Demangle::__runtime::Node **)(v27 + 8 * v68);
      if (*((_WORD *)v69 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v68;
      int v70 = *((unsigned __int8 *)v69 + 18);
      if (v70 == 1) {
        goto LABEL_103;
      }
      if (v70 != 5 || *((_DWORD *)v69 + 2) != 1) {
        return 0;
      }
      unint64_t v69 = *(swift::Demangle::__runtime::Node **)v69;
LABEL_103:
      if (!v28) {
        return 0;
      }
      int v71 = *(swift::Demangle::__runtime::Node **)v69;
      if (!*(void *)v69) {
        return 0;
      }
      unint64_t v72 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v72;
      if (!v72 || v72 + 24 > *((void *)this + 2))
      {
        unint64_t v73 = 2 * *((void *)this + 4);
        if (v73 <= 0x20) {
          unint64_t v73 = 32;
        }
        *((void *)this + 4) = v73;
        unint64_t v74 = v73 + 8;
        unint64_t v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
        *unint64_t v75 = *((void *)v3 + 3);
        unint64_t v72 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v75 + v74;
        *((void *)v3 + 3) = v75;
      }
      *((void *)v3 + 1) = v72 + 24;
      *(_WORD *)(v72 + 16) = 5;
      *(unsigned char *)(v72 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v72, v71, v3);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v72, v28, v3);
      unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (!Type || Type + 24 > *((void *)v3 + 2))
      {
        unint64_t v76 = 2 * *((void *)v3 + 4);
        if (v76 <= 0x20) {
          unint64_t v76 = 32;
        }
        *((void *)v3 + 4) = v76;
        unint64_t v77 = v76 + 8;
        unsigned int v78 = malloc_type_malloc(v76 + 8, 0xD0263BC5uLL);
        *unsigned int v78 = *((void *)v3 + 3);
        unint64_t Type = ((unint64_t)v78 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v78 + v77;
        *((void *)v3 + 3) = v78;
      }
      *((void *)v3 + 1) = Type + 24;
      *(_WORD *)(Type + 16) = 232;
      *(unsigned char *)(Type + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Type, (swift::Demangle::__runtime::Node *)v72, v3);
      unint64_t v106 = (swift::Demangle::__runtime::Node **)Type;
LABEL_79:
      unsigned int v54 = (const void **)((char *)v3 + 104);
      unint64_t v55 = (uint64_t *)&v106;
      goto LABEL_80;
    case 'e':
      int v29 = *((_DWORD *)this + 24);
      if (!v29) {
        goto LABEL_81;
      }
      int v30 = v29 - 1;
      unint64_t v31 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v29 - 1));
      if (*((_WORD *)v31 + 8) != 232) {
        goto LABEL_81;
      }
      *((_DWORD *)this + 24) = v30;
      int v32 = *((unsigned __int8 *)v31 + 18);
      if (v32 == 1) {
        goto LABEL_46;
      }
      if (v32 == 5 && *((_DWORD *)v31 + 2) == 1)
      {
        unint64_t v31 = *(swift::Demangle::__runtime::Node **)v31;
LABEL_46:
        unsigned int v33 = *(swift::Demangle::__runtime::Node **)v31;
      }
      else
      {
LABEL_81:
        unsigned int v33 = 0;
      }
      if (v5 >= v1) {
        return 0;
      }
      int v56 = *(unsigned __int8 *)(v6 + v5);
      if (v56 == 95)
      {
        uint64_t v57 = 0;
        *((void *)this + 9) = v2 + 2;
      }
      else
      {
        if ((v56 - 48) > 9) {
          return 0;
        }
        int v92 = 0;
        while (1)
        {
          int v93 = *(unsigned __int8 *)(v6 + v5);
          if ((v93 - 48) > 9) {
            break;
          }
          int v94 = v93 + 10 * v92 - 48;
          if (v94 < v92) {
            return 0;
          }
          unint64_t Type = 0;
          *((void *)this + 9) = ++v5;
          int v92 = v94;
          if (v1 == v5) {
            return Type;
          }
        }
        unint64_t Type = 0;
        if (v92 < 0 || v5 >= v1 || v93 != 95) {
          return Type;
        }
        *((void *)this + 9) = v5 + 1;
        uint64_t v57 = (v92 + 1);
      }
      unint64_t v58 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v58;
      if (!v58 || v58 + 24 > *((void *)this + 2))
      {
        unint64_t v59 = 2 * *((void *)this + 4);
        if (v59 <= 0x20) {
          unint64_t v59 = 32;
        }
        *((void *)this + 4) = v59;
        unint64_t v60 = v59 + 8;
        unint64_t v61 = malloc_type_malloc(v59 + 8, 0xD0263BC5uLL);
        *unint64_t v61 = *((void *)v3 + 3);
        unint64_t v58 = ((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v61 + v60;
        *((void *)v3 + 3) = v61;
      }
      *((void *)v3 + 1) = v58 + 24;
      *(_WORD *)(v58 + 16) = 231;
      *(unsigned char *)(v58 + 18) = 4;
      *(void *)unint64_t v58 = v57;
      if (v33)
      {
        unint64_t v62 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 1) = v62;
        if (!v62 || v62 + 24 > *((void *)v3 + 2))
        {
          unint64_t v63 = 2 * *((void *)v3 + 4);
          if (v63 <= 0x20) {
            unint64_t v63 = 32;
          }
          *((void *)v3 + 4) = v63;
          unint64_t v64 = v63 + 8;
          int v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
          *int v65 = *((void *)v3 + 3);
          unint64_t v62 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v3 + 2) = (char *)v65 + v64;
          *((void *)v3 + 3) = v65;
        }
        *((void *)v3 + 1) = v62 + 24;
        *(_WORD *)(v62 + 16) = 230;
        *(unsigned char *)(v62 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v62, v33, v3);
        unsigned int v66 = (swift::Demangle::__runtime::Node *)v62;
        unint64_t v67 = (swift::Demangle::__runtime::Node *)v58;
        goto LABEL_160;
      }
      return 0;
    case 'o':
      if (v5 >= v1) {
        goto LABEL_128;
      }
      int v34 = *(unsigned __int8 *)(v6 + v5);
      if (v34 == 95)
      {
        uint64_t v35 = 0;
        *((void *)this + 9) = v2 + 2;
        goto LABEL_129;
      }
      if ((v34 - 48) > 9) {
        goto LABEL_128;
      }
      int v82 = 0;
      break;
    case 'p':
      int v36 = *((_DWORD *)this + 24);
      if (!v36) {
        return 0;
      }
      int v37 = v36 - 1;
      uint64_t v38 = *((void *)this + 11);
      unint64_t v39 = *(swift::Demangle::__runtime::Node **)(v38 + 8 * (v36 - 1));
      if (*((_WORD *)v39 + 8) != 232)
      {
        int v41 = 0;
        int v37 = *((_DWORD *)this + 24);
        goto LABEL_147;
      }
      *((_DWORD *)this + 24) = v37;
      int v40 = *((unsigned __int8 *)v39 + 18);
      if (v40 == 1) {
        goto LABEL_56;
      }
      if (v40 == 5 && *((_DWORD *)v39 + 2) == 1)
      {
        unint64_t v39 = *(swift::Demangle::__runtime::Node **)v39;
LABEL_56:
        int v41 = *(swift::Demangle::__runtime::Node **)v39;
      }
      else
      {
        int v41 = 0;
      }
      if (!v37) {
        return 0;
      }
LABEL_147:
      unsigned int v95 = v37 - 1;
      unint64_t v96 = *(swift::Demangle::__runtime::Node **)(v38 + 8 * v95);
      if (*((_WORD *)v96 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v95;
      int v97 = *((unsigned __int8 *)v96 + 18);
      if (v97 == 1) {
        goto LABEL_152;
      }
      if (v97 != 5 || *((_DWORD *)v96 + 2) != 1) {
        return 0;
      }
      unint64_t v96 = *(swift::Demangle::__runtime::Node **)v96;
LABEL_152:
      unint64_t Type = 0;
      if (v41)
      {
        unint64_t v98 = *(swift::Demangle::__runtime::Node **)v96;
        if (*(void *)v96)
        {
          unint64_t v62 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v62;
          if (!v62 || v62 + 24 > *((void *)this + 2))
          {
            unint64_t v99 = 2 * *((void *)this + 4);
            if (v99 <= 0x20) {
              unint64_t v99 = 32;
            }
            *((void *)this + 4) = v99;
            unint64_t v100 = v99 + 8;
            int v101 = malloc_type_malloc(v99 + 8, 0xD0263BC5uLL);
            *int v101 = *((void *)v3 + 3);
            unint64_t v62 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)v3 + 2) = (char *)v101 + v100;
            *((void *)v3 + 3) = v101;
          }
          *((void *)v3 + 1) = v62 + 24;
          *(_WORD *)(v62 + 16) = 229;
          *(unsigned char *)(v62 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v62, v98, v3);
          unsigned int v66 = (swift::Demangle::__runtime::Node *)v62;
          unint64_t v67 = v41;
LABEL_160:
          swift::Demangle::__runtime::Node::addChild(v66, v67, v3);
          unint64_t Type = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v3 + 1) = Type;
          if (!Type || Type + 24 > *((void *)v3 + 2))
          {
            unint64_t v102 = 2 * *((void *)v3 + 4);
            if (v102 <= 0x20) {
              unint64_t v102 = 32;
            }
            *((void *)v3 + 4) = v102;
            unint64_t v103 = v102 + 8;
            unint64_t v104 = malloc_type_malloc(v102 + 8, 0xD0263BC5uLL);
            *unint64_t v104 = *((void *)v3 + 3);
            unint64_t Type = ((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)v3 + 2) = (char *)v104 + v103;
            *((void *)v3 + 3) = v104;
          }
          *((void *)v3 + 1) = Type + 24;
          *(_WORD *)(Type + 16) = 232;
          *(unsigned char *)(Type + 18) = 0;
          unint64_t v50 = (swift::Demangle::__runtime::Node *)Type;
          unint64_t v51 = (swift::Demangle::__runtime::Node *)v62;
LABEL_72:
          swift::Demangle::__runtime::Node::addChild(v50, v51, v3);
        }
      }
      return Type;
    case 'r':
      unint64_t v8 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v8;
      if (!v8 || (unint64_t v42 = *((void *)this + 2), v8 + 24 > v42))
      {
        unint64_t v43 = 2 * *((void *)this + 4);
        if (v43 <= 0x20) {
          unint64_t v43 = 32;
        }
        *((void *)this + 4) = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        *unint64_t v45 = *((void *)v3 + 3);
        unint64_t v8 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v42 = (unint64_t)v45 + v44;
        *((void *)v3 + 2) = (char *)v45 + v44;
        *((void *)v3 + 3) = v45;
      }
      *(_WORD *)(v8 + 16) = 308;
      *(unsigned char *)(v8 + 18) = 0;
      unint64_t Type = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Type;
      if (Type) {
        BOOL v46 = Type + 24 > v42;
      }
      else {
        BOOL v46 = 1;
      }
      if (!v46) {
        goto LABEL_70;
      }
      goto LABEL_67;
    case 'x':
      unint64_t v52 = 0;
      goto LABEL_77;
    case 'y':
      unint64_t v53 = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
      goto LABEL_76;
    case 'z':
      unint64_t v53 = swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, 0, 0);
LABEL_76:
      unint64_t v52 = (swift::Demangle::__runtime::Node *)v53;
      this = v3;
LABEL_77:
      int v23 = (swift::Demangle::__runtime::Node **)swift::Demangle::__runtime::Demangler::demangleAssociatedTypeSimple(this, v52);
LABEL_78:
      unint64_t Type = (unint64_t)v23;
      unint64_t v106 = v23;
      if (v23) {
        goto LABEL_79;
      }
      return Type;
    default:
      return Type;
  }
  while (1)
  {
    int v83 = *(unsigned __int8 *)(v6 + v5);
    if ((v83 - 48) > 9) {
      break;
    }
    int v84 = v83 + 10 * v82 - 48;
    if (v84 >= v82)
    {
      *((void *)this + 9) = ++v5;
      int v82 = v84;
      if (v1 != v5) {
        continue;
      }
    }
LABEL_128:
    uint64_t v35 = -1000;
    goto LABEL_129;
  }
  uint64_t v35 = -1000;
  if ((v82 & 0x80000000) == 0 && v5 < v1 && v83 == 95)
  {
    *((void *)this + 9) = v5 + 1;
    uint64_t v35 = (v82 + 1);
  }
LABEL_129:
  unint64_t v106 = 0;
  uint64_t v107 = 0;
  unint64_t v105 = 0;
  unint64_t Type = 0;
  if (swift::Demangle::__runtime::Demangler::demangleBoundGenerics((uint64_t)this, (const void **)&v106, (unint64_t *)&v105))
  {
    int v85 = *((_DWORD *)v3 + 24);
    if (v85)
    {
      unsigned int v86 = v85 - 1;
      unint64_t Type = *(void *)(*((void *)v3 + 11) + 8 * v86);
      *((_DWORD *)v3 + 24) = v86;
      if (Type)
      {
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v3, 102, v35);
        int v88 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(v3, 300, (swift::Demangle::__runtime::Node *)Type, Node);
        unsigned int v89 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v3, 235);
        if (v107)
        {
          unsigned int v90 = v107 - 1;
          do
          {
            uint64_t v91 = v90;
            swift::Demangle::__runtime::Node::addChild(v89, v106[v90--], v3);
          }
          while (v91);
        }
        swift::Demangle::__runtime::Node::addChild(v88, v89, v3);
        if (v105) {
          swift::Demangle::__runtime::Node::addChild(v88, v105, v3);
        }
        unint64_t Type = swift::Demangle::__runtime::Demangler::createType(v3, v88);
        unint64_t v108 = Type;
        if (Type)
        {
          unsigned int v54 = (const void **)((char *)v3 + 104);
          unint64_t v55 = (uint64_t *)&v108;
LABEL_80:
          swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(v54, v55, v3);
        }
      }
      return Type;
    }
    return 0;
  }
  return Type;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleGenericRequirement(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8))
  {
    unint64_t v3 = *((void *)this + 9);
LABEL_6:
    int v6 = 0;
    unsigned int v4 = 0;
    *((void *)this + 9) = v3 - 1;
LABEL_7:
    uint64_t v8 = swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
    if (v8)
    {
      unint64_t v9 = (swift::Demangle::__runtime::Node *)v8;
      unint64_t v10 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v10;
      if (!v10 || v10 + 24 > *((void *)this + 2))
      {
        unint64_t v11 = 2 * *((void *)this + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32;
        }
        *((void *)this + 4) = v11;
        unint64_t v12 = v11 + 8;
        unint64_t v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        *unint64_t v13 = *((void *)this + 3);
        unint64_t v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v13 + v12;
        *((void *)this + 3) = v13;
      }
      *((void *)this + 1) = v10 + 24;
      *(_WORD *)(v10 + 16) = 232;
      *(unsigned char *)(v10 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, v9, this);
    }
    else
    {
      unint64_t v10 = 0;
    }
LABEL_40:
    switch(v6)
    {
      case 0:
        unint64_t v20 = swift::Demangle::__runtime::Demangler::popProtocol(this);
        unint64_t v21 = 0;
        if (!v10) {
          return v21;
        }
        unsigned int v4 = (swift::Demangle::__runtime::Node *)v20;
        if (!v20) {
          return v21;
        }
        goto LABEL_47;
      case 1:
        int v22 = *((_DWORD *)this + 24);
        if (!v22) {
          goto LABEL_122;
        }
        unsigned int v23 = v22 - 1;
        unsigned int v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v23);
        if (*((_WORD *)v4 + 8) != 232) {
          goto LABEL_122;
        }
        *((_DWORD *)this + 24) = v23;
        if (!v10) {
          goto LABEL_122;
        }
LABEL_47:
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v24 = 2 * *((void *)this + 4);
          if (v24 <= 0x20) {
            unint64_t v24 = 32;
          }
          *((void *)this + 4) = v24;
          unint64_t v25 = v24 + 8;
          int v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
          *int v26 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v26 + v25;
          *((void *)this + 3) = v26;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 36;
        goto LABEL_89;
      case 2:
        int v28 = *((_DWORD *)this + 24);
        if (!v28) {
          goto LABEL_122;
        }
        unsigned int v29 = v28 - 1;
        unsigned int v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v29);
        if (*((_WORD *)v4 + 8) != 232) {
          goto LABEL_122;
        }
        *((_DWORD *)this + 24) = v29;
        if (!v10) {
          goto LABEL_122;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v30 = 2 * *((void *)this + 4);
          if (v30 <= 0x20) {
            unint64_t v30 = 32;
          }
          *((void *)this + 4) = v30;
          unint64_t v31 = v30 + 8;
          int v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
          *int v32 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v32 + v31;
          *((void *)this + 3) = v32;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 39;
        goto LABEL_89;
      case 3:
        int v33 = *((_DWORD *)this + 24);
        if (!v33) {
          goto LABEL_122;
        }
        unsigned int v34 = v33 - 1;
        unsigned int v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v34);
        if (*((_WORD *)v4 + 8) != 232) {
          goto LABEL_122;
        }
        *((_DWORD *)this + 24) = v34;
        if (!v10) {
          goto LABEL_122;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v35 = 2 * *((void *)this + 4);
          if (v35 <= 0x20) {
            unint64_t v35 = 32;
          }
          *((void *)this + 4) = v35;
          unint64_t v36 = v35 + 8;
          int v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
          void *v37 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v37 + v36;
          *((void *)this + 3) = v37;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 40;
        goto LABEL_89;
      case 4:
        unint64_t v38 = *((void *)this + 9);
        if (v38 >= *((void *)this + 8)) {
          goto LABEL_122;
        }
        unint64_t v21 = 0;
        *((void *)this + 9) = v38 + 1;
        unint64_t v39 = "U";
        int v40 = 0;
        switch(*(unsigned char *)(*((void *)this + 7) + v38))
        {
          case 'B':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "B";
            goto LABEL_106;
          case 'C':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "C";
            goto LABEL_106;
          case 'D':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "D";
            goto LABEL_106;
          case 'E':
            unint64_t v21 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            if (!v21) {
              return v21;
            }
            int v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            unint64_t v39 = "E";
            goto LABEL_106;
          case 'M':
            unint64_t v21 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            if (!v21) {
              return v21;
            }
            int v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            unint64_t v39 = "M";
            goto LABEL_106;
          case 'N':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "N";
            goto LABEL_106;
          case 'R':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "R";
            goto LABEL_106;
          case 'S':
            unint64_t v49 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            int v40 = 0;
            if (!v49) {
              return 0;
            }
            unint64_t v21 = v49;
            unint64_t v39 = "S";
            goto LABEL_106;
          case 'T':
            unint64_t v21 = 0;
            int v40 = 0;
            unint64_t v39 = "T";
            goto LABEL_106;
          case 'U':
            goto LABEL_106;
          case 'e':
            unint64_t v50 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            int v40 = 0;
            if (!v50) {
              return 0;
            }
            unint64_t v21 = v50;
            unint64_t v39 = "e";
            goto LABEL_106;
          case 'm':
            unint64_t v51 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
            int v40 = 0;
            if (!v51) {
              return 0;
            }
            unint64_t v21 = v51;
            unint64_t v39 = "m";
LABEL_106:
            unint64_t v52 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v52;
            if (!v52 || v52 + 24 > *((void *)this + 2))
            {
              unint64_t v53 = 2 * *((void *)this + 4);
              if (v53 <= 0x20) {
                unint64_t v53 = 32;
              }
              *((void *)this + 4) = v53;
              unint64_t v54 = v53 + 8;
              unint64_t v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
              *unint64_t v55 = *((void *)this + 3);
              unint64_t v52 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v55 + v54;
              *((void *)this + 3) = v55;
            }
            *((void *)this + 1) = v52 + 24;
            *(_WORD *)(v52 + 16) = 101;
            *(unsigned char *)(v52 + 18) = 3;
            *(void *)unint64_t v52 = v39;
            *(void *)(v52 + 8) = 1;
            if (!v10) {
              goto LABEL_122;
            }
            unint64_t v56 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v56;
            if (!v56 || v56 + 24 > *((void *)this + 2))
            {
              unint64_t v57 = 2 * *((void *)this + 4);
              if (v57 <= 0x20) {
                unint64_t v57 = 32;
              }
              *((void *)this + 4) = v57;
              unint64_t v58 = v57 + 8;
              unint64_t v59 = malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
              *unint64_t v59 = *((void *)this + 3);
              unint64_t v56 = ((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v59 + v58;
              *((void *)this + 3) = v59;
            }
            *((void *)this + 1) = v56 + 24;
            *(_WORD *)(v56 + 16) = 41;
            *(unsigned char *)(v56 + 18) = 0;
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v56, (swift::Demangle::__runtime::Node *)v10, this);
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v56, (swift::Demangle::__runtime::Node *)v52, this);
            if (v21) {
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v56, (swift::Demangle::__runtime::Node *)v21, this);
            }
            if (v40) {
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v56, v40, this);
            }
            unint64_t v21 = v56;
            break;
          default:
            return v21;
        }
        return v21;
      case 5:
        if (!v10) {
          goto LABEL_122;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v41 = 2 * *((void *)this + 4);
          if (v41 <= 0x20) {
            unint64_t v41 = 32;
          }
          *((void *)this + 4) = v41;
          unint64_t v42 = v41 + 8;
          unint64_t v43 = malloc_type_malloc(v41 + 8, 0xD0263BC5uLL);
          void *v43 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v43 + v42;
          *((void *)this + 3) = v43;
        }
        *((void *)this + 1) = v21 + 24;
        *(_WORD *)(v21 + 16) = 42;
        *(unsigned char *)(v21 + 18) = 0;
        unint64_t v44 = (swift::Demangle::__runtime::Node *)v21;
        unint64_t v45 = (swift::Demangle::__runtime::Node *)v10;
        goto LABEL_90;
      case 6:
        unint64_t v21 = 0;
        if (!v4 || !v10) {
          return v21;
        }
        unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v21;
        if (!v21 || v21 + 24 > *((void *)this + 2))
        {
          unint64_t v46 = 2 * *((void *)this + 4);
          if (v46 <= 0x20) {
            unint64_t v46 = 32;
          }
          *((void *)this + 4) = v46;
          unint64_t v47 = v46 + 8;
          unint64_t v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
          void *v48 = *((void *)this + 3);
          unint64_t v21 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v48 + v47;
          *((void *)this + 3) = v48;
        }
        *((void *)this + 1) = v21 + 24;
        __int16 v27 = 354;
LABEL_89:
        *(_WORD *)(v21 + 16) = v27;
        *(unsigned char *)(v21 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v21, (swift::Demangle::__runtime::Node *)v10, this);
        unint64_t v44 = (swift::Demangle::__runtime::Node *)v21;
        unint64_t v45 = v4;
LABEL_90:
        swift::Demangle::__runtime::Node::addChild(v44, v45, this);
        break;
      default:
        goto LABEL_122;
    }
  }
  else
  {
    unint64_t v3 = v2 + 1;
    *((void *)this + 9) = v2 + 1;
    unsigned int v4 = 0;
    int v5 = 1;
    int v6 = 5;
    switch(*(unsigned char *)(*((void *)this + 7) + v2))
    {
      case 'B':
        goto LABEL_20;
      case 'C':
        goto LABEL_25;
      case 'I':
        unint64_t v7 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        if (!v7) {
          goto LABEL_122;
        }
        unsigned int v4 = (swift::Demangle::__runtime::Node *)v7;
        int v5 = 6;
LABEL_20:
        int v14 = *((_DWORD *)this + 24);
        if (v14 && (v15 = v14 - 1, unint64_t v10 = *(void *)(*((void *)this + 11) + 8 * v15), *(_WORD *)(v10 + 16) == 232)) {
          *((_DWORD *)this + 24) = v15;
        }
        else {
          unint64_t v10 = 0;
        }
        goto LABEL_39;
      case 'L':
        unsigned int v4 = 0;
        int v5 = 4;
        goto LABEL_20;
      case 'M':
        int v5 = 4;
        goto LABEL_25;
      case 'P':
        int v5 = 0;
        goto LABEL_25;
      case 'Q':
        int v5 = 0;
        unsigned int v4 = 0;
        goto LABEL_20;
      case 'S':
        unsigned int v4 = 0;
        int v5 = 2;
        goto LABEL_20;
      case 'T':
        int v5 = 2;
LABEL_25:
        unint64_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
        unint64_t v17 = swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(this, v16);
        goto LABEL_36;
      case 'b':
        unsigned int v4 = 0;
        int v6 = 1;
        goto LABEL_7;
      case 'c':
        goto LABEL_35;
      case 'h':
        unsigned int v4 = 0;
        int v6 = 3;
        goto LABEL_7;
      case 'i':
        unint64_t v18 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        if (v18)
        {
          unsigned int v4 = (swift::Demangle::__runtime::Node *)v18;
          int v6 = 6;
          goto LABEL_7;
        }
LABEL_122:
        unint64_t v21 = 0;
        break;
      case 'l':
        unsigned int v4 = 0;
        int v6 = 4;
        goto LABEL_7;
      case 'm':
        int v5 = 4;
        goto LABEL_35;
      case 'p':
        int v5 = 0;
        goto LABEL_35;
      case 's':
        unsigned int v4 = 0;
        int v6 = 2;
        goto LABEL_7;
      case 't':
        int v5 = 2;
LABEL_35:
        unint64_t v19 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(this);
        unint64_t v17 = swift::Demangle::__runtime::Demangler::demangleAssociatedTypeSimple(this, v19);
LABEL_36:
        unint64_t v10 = v17;
        unint64_t v61 = v17;
        if (v17) {
          swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v61, this);
        }
        unsigned int v4 = 0;
LABEL_39:
        int v6 = v5;
        goto LABEL_40;
      case 'v':
        goto LABEL_7;
      default:
        goto LABEL_6;
    }
  }
  return v21;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleStandardSubstitution(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v3 = *((void *)this + 9);
  if (v3 >= v2) {
    goto LABEL_6;
  }
  *((void *)this + 9) = v3 + 1;
  int v4 = *(char *)(*((void *)this + 7) + v3);
  if (v4 == 67)
  {
    int v5 = "__C_Synthesized";
    size_t v6 = 15;
    goto LABEL_28;
  }
  if (v4 == 103)
  {
    Swiftunint64_t Type = swift::Demangle::__runtime::Demangler::createSwiftType(this, 61, "Optional");
    int v18 = *((_DWORD *)this + 24);
    if (v18)
    {
      unsigned int v19 = v18 - 1;
      unint64_t v20 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v19);
      if (*((_WORD *)v20 + 8) == 232)
      {
        unint64_t v21 = (swift::Demangle::__runtime::Node *)SwiftType;
        *((_DWORD *)this + 24) = v19;
        unint64_t v22 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v22;
        if (!v22 || v22 + 24 > *((void *)this + 2))
        {
          unint64_t v23 = 2 * *((void *)this + 4);
          if (v23 <= 0x20) {
            unint64_t v23 = 32;
          }
          *((void *)this + 4) = v23;
          unint64_t v24 = v23 + 8;
          unint64_t v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
          *unint64_t v25 = *((void *)this + 3);
          unint64_t v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v25 + v24;
          *((void *)this + 3) = v25;
        }
        *((void *)this + 1) = v22 + 24;
        *(_WORD *)(v22 + 16) = 235;
        *(unsigned char *)(v22 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v22, v20, this);
        if (v21)
        {
          if (v22)
          {
            unint64_t v26 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v26;
            if (!v26 || v26 + 24 > *((void *)this + 2))
            {
              unint64_t v27 = 2 * *((void *)this + 4);
              if (v27 <= 0x20) {
                unint64_t v27 = 32;
              }
              *((void *)this + 4) = v27;
              unint64_t v28 = v27 + 8;
              unsigned int v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
              *unsigned int v29 = *((void *)this + 3);
              unint64_t v26 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v29 + v28;
              *((void *)this + 3) = v29;
            }
            *((void *)this + 1) = v26 + 24;
            *(_WORD *)(v26 + 16) = 14;
            *(unsigned char *)(v26 + 18) = 0;
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v26, v21, this);
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v26, (swift::Demangle::__runtime::Node *)v22, this);
            unint64_t StandardSubstitution = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = StandardSubstitution;
            if (!StandardSubstitution || StandardSubstitution + 24 > *((void *)this + 2))
            {
              unint64_t v30 = 2 * *((void *)this + 4);
              if (v30 <= 0x20) {
                unint64_t v30 = 32;
              }
              *((void *)this + 4) = v30;
              unint64_t v31 = v30 + 8;
              int v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
              *int v32 = *((void *)this + 3);
              unint64_t StandardSubstitution = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = (char *)v32 + v31;
              *((void *)this + 3) = v32;
            }
            *((void *)this + 1) = StandardSubstitution + 24;
            *(_WORD *)(StandardSubstitution + 16) = 232;
            *(unsigned char *)(StandardSubstitution + 18) = 0;
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)StandardSubstitution, (swift::Demangle::__runtime::Node *)v26, this);
            unint64_t v33 = StandardSubstitution;
            swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 13, (uint64_t *)&v33, this);
            return StandardSubstitution;
          }
        }
      }
    }
    return 0;
  }
  ++v3;
  if (v4 != 111)
  {
LABEL_6:
    unint64_t v7 = v3 - 1;
    *((void *)this + 9) = v7;
    if (v7 >= v2 || (uint64_t v8 = *((void *)this + 7), *(unsigned __int8 *)(v8 + v7) - 48 > 9))
    {
LABEL_16:
      int v9 = -1000;
      if (v7 >= v2) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
    int v9 = 0;
    while (1)
    {
      int v10 = *(unsigned __int8 *)(v8 + v7);
      if ((v10 - 48) > 9) {
        break;
      }
      int v11 = v10 + 10 * v9 - 48;
      if (v11 < v9) {
        goto LABEL_16;
      }
      *((void *)this + 9) = ++v7;
      int v9 = v11;
      if (v2 == v7)
      {
        unint64_t v7 = v2;
        int v9 = v11;
        break;
      }
    }
    if (v9 <= 2048)
    {
      if (v7 >= v2) {
        goto LABEL_20;
      }
LABEL_17:
      if (*(unsigned char *)(*((void *)this + 7) + v7) == 99)
      {
        *((void *)this + 9) = ++v7;
        int v12 = 1;
        if (v7 >= v2)
        {
LABEL_19:
          char v13 = 0;
LABEL_22:
          unint64_t StandardSubstitution = swift::Demangle::__runtime::Demangler::createStandardSubstitution(this, v13, v12);
          if (StandardSubstitution && v9 >= 2)
          {
            unsigned int v15 = v9 + 1;
            do
            {
              unint64_t v33 = StandardSubstitution;
              swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back((const void **)this + 11, (uint64_t *)&v33, this);
              --v15;
            }
            while (v15 > 2);
          }
          return StandardSubstitution;
        }
LABEL_21:
        *((void *)this + 9) = v7 + 1;
        char v13 = *(unsigned char *)(*((void *)this + 7) + v7);
        goto LABEL_22;
      }
LABEL_20:
      int v12 = 0;
      if (v7 >= v2) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
    return 0;
  }
  int v5 = "__C";
  size_t v6 = 3;
LABEL_28:

  return swift::Demangle::__runtime::NodeFactory::createNode(this, 153, v5, v6);
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleThunkOrSpecialization(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v3 = this;
  unint64_t Node = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  int v7 = *(unsigned __int8 *)(v6 + v1);
  switch(*(unsigned char *)(v6 + v1))
  {
    case 'A':
      __int16 v65 = 170;
      goto LABEL_187;
    case 'B':
      __int16 v66 = 93;
      goto LABEL_171;
    case 'C':
      int v67 = *((_DWORD *)this + 24);
      if (v67
        && (unsigned int v68 = v67 - 1,
            unint64_t v69 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v68),
            *((_WORD *)v69 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v68;
      }
      else
      {
        unint64_t v69 = 0;
      }
      __int16 v72 = 30;
      goto LABEL_193;
    case 'D':
      __int16 v65 = 55;
      goto LABEL_187;
    case 'E':
      __int16 v65 = 53;
      goto LABEL_187;
    case 'F':
      __int16 v65 = 54;
      goto LABEL_187;
    case 'G':
      __int16 v66 = 92;
      goto LABEL_171;
    case 'H':
    case 'h':
      if (v7 == 72) {
        __int16 v22 = 133;
      }
      else {
        __int16 v22 = 134;
      }
      if (v5 < v2 && *(unsigned char *)(v6 + v5) == 113)
      {
        *((void *)this + 9) = v1 + 2;
        int v23 = 1;
      }
      else
      {
        int v23 = 0;
      }
      memset(&__p, 0, sizeof(__p));
      int v37 = *((_DWORD *)this + 24);
      if (!v37) {
        goto LABEL_267;
      }
      int v38 = v37 - 1;
      unint64_t v39 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * (v37 - 1));
      *((_DWORD *)this + 24) = v37 - 1;
      int v148 = v39;
      if (!v39) {
        goto LABEL_267;
      }
      int v40 = v39[8];
      if (v40 == 43)
      {
        __int16 v145 = v22;
        int v146 = v23;
      }
      else
      {
        if (v40 != 232)
        {
LABEL_267:
          unint64_t Node = 0;
          goto LABEL_268;
        }
        __int16 v145 = v22;
        int v146 = v23;
        std::vector<swift::Demangle::__runtime::Node *>::push_back[abi:nn180100]((void **)&__p.__r_.__value_.__l.__data_, &v148);
        unint64_t v39 = 0;
        int v38 = *((_DWORD *)v3 + 24);
      }
      for (; v38; __p.__r_.__value_.__l.__size_ = v120)
      {
        uint64_t v121 = *(void *)(*((void *)v3 + 11) + 8 * --v38);
        *((_DWORD *)v3 + 24) = v38;
        if (!v121) {
          break;
        }
        if (*(_WORD *)(v121 + 16) != 232) {
          goto LABEL_267;
        }
        size_t size = (unsigned char *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
        {
          *(void *)__p.__r_.__value_.__l.__size_ = v121;
          std::string::size_type v120 = (std::string::size_type)(size + 8);
        }
        else
        {
          std::string::size_type v123 = __p.__r_.__value_.__r.__words[0];
          std::string::size_type v124 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
          uint64_t v125 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          unint64_t v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 61) {
            goto LABEL_289;
          }
          int64_t v127 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v126) {
            unint64_t v126 = v127 >> 2;
          }
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v128 = v126;
          }
          if (v128)
          {
            if (v128 >> 61) {
              goto LABEL_290;
            }
            unint64_t v129 = operator new(8 * v128);
          }
          else
          {
            unint64_t v129 = 0;
          }
          int v130 = &v129[8 * v125];
          *int v130 = v121;
          std::string::size_type v120 = (std::string::size_type)(v130 + 1);
          if (size != (unsigned char *)v123)
          {
            unint64_t v131 = (unint64_t)&size[-v123 - 8];
            if (v131 < 0x58) {
              goto LABEL_293;
            }
            if ((unint64_t)(size - &v129[v124]) < 0x20) {
              goto LABEL_293;
            }
            uint64_t v132 = (v131 >> 3) + 1;
            uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
            int v134 = &size[-v133];
            int v130 = (void *)((char *)v130 - v133);
            unint64_t v135 = &v129[8 * v125 - 16];
            int v136 = (long long *)(size - 16);
            uint64_t v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v138 = *v136;
              *(v135 - 1) = *(v136 - 1);
              _OWORD *v135 = v138;
              v135 -= 2;
              v136 -= 2;
              v137 -= 4;
            }
            while (v137);
            size_t size = v134;
            if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_293:
              do
              {
                uint64_t v139 = *((void *)size - 1);
                size -= 8;
                *--int v130 = v139;
              }
              while (size != (unsigned char *)v123);
            }
            size_t size = (unsigned char *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
          __p.__r_.__value_.__l.__size_ = v120;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v129[8 * v128];
          if (size)
          {
            operator delete(size);
            int v38 = *((_DWORD *)v3 + 24);
          }
        }
      }
      unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(v3, v145);
      std::string::size_type v116 = __p.__r_.__value_.__l.__size_;
      std::string::size_type v117 = __p.__r_.__value_.__r.__words[0];
      while (v116 != v117)
      {
        int v118 = *(swift::Demangle::__runtime::Node **)(v116 - 8);
        v116 -= 8;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v118, v3);
      }
      if (v39) {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, (swift::Demangle::__runtime::Node *)v39, v3);
      }
      if (v146)
      {
        unsigned int v119 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v3, 217);
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v119, v3);
      }
LABEL_268:
      unint64_t v115 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      goto LABEL_270;
    case 'I':
      __int16 v65 = 58;
      goto LABEL_187;
    case 'J':
      if (v5 >= v2) {
        goto LABEL_212;
      }
      int v70 = *(char *)(v6 + v5);
      if (v70 == 79)
      {
        *((void *)this + 9) = v1 + 2;
        return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk(this);
      }
      else
      {
        if (v70 == 86)
        {
          *((void *)this + 9) = v1 + 2;
          __int16 v110 = 324;
        }
        else
        {
          if (v70 == 83)
          {
            *((void *)this + 9) = v1 + 2;
            return swift::Demangle::__runtime::Demangler::demangleAutoDiffSubsetParametersThunk(this);
          }
LABEL_212:
          __int16 v110 = 320;
        }
        return swift::Demangle::__runtime::Demangler::demangleAutoDiffFunctionOrSimpleThunk(this, v110);
      }
    case 'K':
    case 'k':
      if (v7 == 75) {
        __int16 v24 = 131;
      }
      else {
        __int16 v24 = 132;
      }
      if (v5 < v2 && *(unsigned char *)(v6 + v5) == 113)
      {
        *((void *)this + 9) = v1 + 2;
        char v25 = 1;
      }
      else
      {
        char v25 = 0;
      }
      int v41 = *((_DWORD *)this + 24);
      if (!v41) {
        return 0;
      }
      int v42 = v41 - 1;
      unint64_t Node = *(void *)(*((void *)this + 11) + 8 * (v41 - 1));
      *((_DWORD *)this + 24) = v41 - 1;
      if (!Node) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      if (*(_WORD *)(Node + 16) != 232) {
        return 0;
      }
      char v147 = v25;
      unint64_t v43 = 0;
      unint64_t v44 = 0;
      unint64_t v45 = 0;
      break;
    case 'L':
      unint64_t v69 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
      this = v3;
      __int16 v72 = 266;
      goto LABEL_193;
    case 'M':
      unint64_t v69 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypeName(this);
      this = v3;
      __int16 v72 = 7;
      goto LABEL_193;
    case 'N':
      unint64_t v73 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
      unint64_t v74 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypePath(v3);
      int v75 = *((_DWORD *)v3 + 24);
      if (v75
        && (unsigned int v76 = v75 - 1,
            unint64_t v77 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v76),
            *((_WORD *)v77 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v76;
      }
      else
      {
        unint64_t v77 = 0;
      }
      unint64_t v108 = v3;
      __int16 v109 = 268;
      goto LABEL_205;
    case 'O':
      __int16 v65 = 160;
      goto LABEL_187;
    case 'P':
      __int16 v78 = 87;
      goto LABEL_162;
    case 'Q':
    case 'Y':
      unint64_t v26 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
      if (v7 == 81) {
        __int16 v27 = 328;
      }
      else {
        __int16 v27 = 329;
      }
      if (!v26) {
        return 0;
      }
      unint64_t v28 = (swift::Demangle::__runtime::Node *)v26;
      unint64_t Node = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = Node;
      if (!Node || Node + 24 > *((void *)v3 + 2))
      {
        unint64_t v29 = 2 * *((void *)v3 + 4);
        if (v29 <= 0x20) {
          unint64_t v29 = 32;
        }
        *((void *)v3 + 4) = v29;
        unint64_t v30 = v29 + 8;
        unint64_t v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
        *unint64_t v31 = *((void *)v3 + 3);
        unint64_t Node = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v31 + v30;
        *((void *)v3 + 3) = v31;
      }
      *((void *)v3 + 1) = Node + 24;
      *(_WORD *)(Node + 16) = v27;
      *(unsigned char *)(Node + 18) = 0;
      goto LABEL_225;
    case 'R':
    case 'r':
    case 'y':
      if (v7 == 121) {
        __int16 v8 = 202;
      }
      else {
        __int16 v8 = 200;
      }
      BOOL v9 = v7 == 82;
      BOOL v10 = v7 != 82 && v7 == 121;
      if (v9) {
        __int16 v11 = 201;
      }
      else {
        __int16 v11 = v8;
      }
      unint64_t Node = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = Node;
      if (!Node || Node + 24 > *((void *)this + 2))
      {
        unint64_t v12 = 2 * *((void *)this + 4);
        if (v12 <= 0x20) {
          unint64_t v12 = 32;
        }
        *((void *)this + 4) = v12;
        unint64_t v13 = v12 + 8;
        int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
        *int v14 = *((void *)v3 + 3);
        unint64_t Node = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v14 + v13;
        *((void *)v3 + 3) = v14;
      }
      *((void *)v3 + 1) = Node + 24;
      *(_WORD *)(Node + 16) = v11;
      *(unsigned char *)(Node + 18) = 0;
      int v15 = *((_DWORD *)v3 + 24);
      if (!v15) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      unint64_t v16 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * (v15 - 1));
      if (*((_WORD *)v16 + 8) == 43)
      {
        *((_DWORD *)v3 + 24) = v15 - 1;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v16, v3);
        int v15 = *((_DWORD *)v3 + 24);
      }
      if (!v10) {
        goto LABEL_24;
      }
      if (!v15) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      unint64_t v17 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * (v15 - 1));
      if (*((_WORD *)v17 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v15 - 1;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v17, v3);
        int v15 = *((_DWORD *)v3 + 24);
LABEL_24:
        if (!v15) {
          return (swift::Demangle::__runtime::Node *)Node;
        }
      }
      int v18 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * (v15 - 1));
      if (*((_WORD *)v18 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v15 - 1;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v18, v3);
        int v15 = *((_DWORD *)v3 + 24);
        if (!v15) {
          return (swift::Demangle::__runtime::Node *)Node;
        }
      }
      unsigned int v19 = v15 - 1;
      unint64_t v20 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v19);
      if (*((_WORD *)v20 + 8) != 232) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      *((_DWORD *)v3 + 24) = v19;
      unint64_t v21 = (swift::Demangle::__runtime::Node *)Node;
      goto LABEL_226;
    case 'S':
      this = v3;
      __int16 v72 = 194;
      goto LABEL_193;
    case 'U':
      int v79 = *((_DWORD *)this + 24);
      if (!v79) {
        return 0;
      }
      uint64_t v80 = *((void *)this + 11);
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)(v80 + 8 * (v79 - 1));
      if (*((_WORD *)v28 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v79 - 1;
      if (v79 == 1) {
        return 0;
      }
      unsigned int v81 = v79 - 2;
      int v82 = *(swift::Demangle::__runtime::Node **)(v80 + 8 * v81);
      *((_DWORD *)this + 24) = v81;
      if (!v82) {
        return 0;
      }
      unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 203);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v82, v3);
      goto LABEL_225;
    case 'V':
      int v85 = v3;
      __int16 v86 = 255;
      unint64_t v87 = (swift::Demangle::__runtime::Node *)v83;
      goto LABEL_200;
    case 'W':
      int v84 = swift::Demangle::__runtime::Demangler::popProtocolConformance(v3);
      int v85 = v3;
      __int16 v86 = 196;
      unint64_t v87 = (swift::Demangle::__runtime::Node *)v88;
      goto LABEL_200;
    case 'X':
      __int16 v65 = 60;
      goto LABEL_187;
    case 'Z':
    case 'z':
      int v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
      int v33 = *((_DWORD *)v3 + 24);
      if (!v33)
      {
        unint64_t v36 = 0;
        unint64_t v28 = 0;
        goto LABEL_219;
      }
      int v34 = v33 - 1;
      uint64_t v35 = *((void *)v3 + 11);
      unint64_t v28 = *(swift::Demangle::__runtime::Node **)(v35 + 8 * (v33 - 1));
      if (*((_WORD *)v28 + 8) == 43)
      {
        *((_DWORD *)v3 + 24) = v34;
        if (v33 == 1)
        {
          unint64_t v36 = 0;
          goto LABEL_219;
        }
      }
      else
      {
        unint64_t v28 = 0;
        int v34 = *((_DWORD *)v3 + 24);
      }
      unint64_t v36 = *(swift::Demangle::__runtime::Node **)(v35 + 8 * (v34 - 1));
      if (*((_WORD *)v36 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v34 - 1;
        if (v34 == 1) {
          goto LABEL_219;
        }
        --v34;
      }
      else
      {
        unint64_t v36 = 0;
      }
      unsigned int v111 = v34 - 1;
      uint64_t v112 = *(swift::Demangle::__runtime::Node **)(v35 + 8 * v111);
      if (*((_WORD *)v112 + 8) == 232)
      {
        *((_DWORD *)v3 + 24) = v111;
        goto LABEL_220;
      }
LABEL_219:
      uint64_t v112 = 0;
LABEL_220:
      if (v7 == 122) {
        __int16 v113 = 162;
      }
      else {
        __int16 v113 = 163;
      }
      unint64_t v114 = swift::Demangle::__runtime::Demangler::createWithChildren(v3, v113, v112, v36, v32);
      unint64_t Node = v114;
      if (v28 && v114)
      {
LABEL_225:
        unint64_t v21 = (swift::Demangle::__runtime::Node *)Node;
        unint64_t v20 = v28;
LABEL_226:
        swift::Demangle::__runtime::Node::addChild(v21, v20, v3);
      }
      return (swift::Demangle::__runtime::Node *)Node;
    case 'a':
      __int16 v65 = 171;
      goto LABEL_187;
    case 'b':
      unint64_t v87 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
      int v89 = *((_DWORD *)v3 + 24);
      if (v89
        && (unsigned int v90 = v89 - 1,
            int v84 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v90),
            *((_WORD *)v84 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v90;
      }
      else
      {
        int v84 = 0;
      }
      int v85 = v3;
      __int16 v86 = 269;
LABEL_200:
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(v85, v86, v84, v87);
    case 'c':
      this = v3;
      __int16 v72 = 263;
      goto LABEL_193;
    case 'd':
      __int16 v65 = 56;
      goto LABEL_187;
    case 'e':
      swift::Demangle::__runtime::Demangler::demangleBridgedMethodParams(this, &__p);
      char v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v92 = __p.__r_.__value_.__l.__size_;
      }
      if (v92)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(v3, 277, p_p, v92);
        char v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        unint64_t Node = 0;
      }
      if ((v91 & 0x80) == 0) {
        return (swift::Demangle::__runtime::Node *)Node;
      }
      unint64_t v115 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_270;
    case 'f':
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleFunctionSpecialization(this);
    case 'g':
      __int16 v66 = 91;
      goto LABEL_171;
    case 'i':
      __int16 v66 = 96;
      goto LABEL_171;
    case 'j':
      this = v3;
      __int16 v72 = 264;
      goto LABEL_193;
    case 'l':
      unint64_t v94 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this);
      if (!v94) {
        return 0;
      }
      unint64_t v69 = (swift::Demangle::__runtime::Node *)v94;
      this = v3;
      __int16 v72 = 270;
LABEL_193:
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild(this, v72, v69);
    case 'm':
      __int16 v65 = 144;
      goto LABEL_187;
    case 'n':
      unint64_t v73 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
      unint64_t v74 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypePath(v3);
      int v95 = *((_DWORD *)v3 + 24);
      if (v95
        && (unsigned int v96 = v95 - 1,
            unint64_t v77 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v96),
            *((_WORD *)v77 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v96;
      }
      else
      {
        unint64_t v77 = 0;
      }
      unint64_t v108 = v3;
      __int16 v109 = 267;
LABEL_205:
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(v108, v109, v77, v74, v73);
    case 'o':
      __int16 v65 = 164;
      goto LABEL_187;
    case 'p':
      __int16 v78 = 86;
LABEL_162:
      int v97 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleSpecAttributes(this, v78);
      int v98 = *((_DWORD *)v3 + 24);
      if (v98
        && (unsigned int v99 = v98 - 1,
            unint64_t v100 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v99),
            *((_WORD *)v100 + 8) == 232))
      {
        *((_DWORD *)v3 + 24) = v99;
      }
      else
      {
        unint64_t v100 = 0;
      }
      int v101 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild(v3, 94, v100);
      unint64_t Node = 0;
      if (v97 && v101)
      {
        swift::Demangle::__runtime::Node::addChild(v97, v101, v3);
        return v97;
      }
      return (swift::Demangle::__runtime::Node *)Node;
    case 'q':
      this = v3;
      __int16 v72 = 265;
      goto LABEL_193;
    case 's':
      __int16 v66 = 95;
LABEL_171:
      return swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(this, v66);
    case 'u':
      __int16 v65 = 319;
      goto LABEL_187;
    case 'v':
      unsigned int v102 = swift::Demangle::__runtime::Demangler::demangleIndex(this);
      if ((v102 & 0x80000000) != 0) {
        return 0;
      }
      unint64_t v103 = *((void *)v3 + 9);
      if (v103 < *((void *)v3 + 8) && (*((void *)v3 + 9) = v103 + 1, *(unsigned char *)(*((void *)v3 + 7) + v103) == 114))
      {
        uint64_t v104 = v102;
        unint64_t v105 = v3;
        __int16 v106 = 288;
      }
      else
      {
        uint64_t v104 = v102;
        unint64_t v105 = v3;
        __int16 v106 = 287;
      }
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v105, v106, v104);
    case 'w':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      int v107 = *(char *)(v6 + v5);
      switch(v107)
      {
        case 'B':
          __int16 v65 = 333;
          break;
        case 'S':
          __int16 v65 = 340;
          break;
        case 'b':
          __int16 v65 = 332;
          break;
        default:
          return 0;
      }
LABEL_187:
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this, v65);
    case 'x':
      __int16 v65 = 59;
      goto LABEL_187;
    default:
      return (swift::Demangle::__runtime::Node *)Node;
  }
  do
  {
    if (v44 < v43)
    {
      *v44++ = Node;
      int v46 = v42;
      goto LABEL_87;
    }
    uint64_t v47 = v44 - v45;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61) {
LABEL_289:
    }
      abort();
    if (((char *)v43 - (char *)v45) >> 2 > v48) {
      unint64_t v48 = ((char *)v43 - (char *)v45) >> 2;
    }
    if ((unint64_t)((char *)v43 - (char *)v45) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v49)
    {
      if (v49 >> 61) {
LABEL_290:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      unint64_t v50 = (char *)operator new(8 * v49);
    }
    else
    {
      unint64_t v50 = 0;
    }
    unint64_t v51 = (unint64_t *)&v50[8 * v47];
    *unint64_t v51 = Node;
    unint64_t v52 = v51 + 1;
    if (v44 != v45)
    {
      unint64_t v53 = (char *)v44 - (char *)v45 - 8;
      if (v53 >= 0x168)
      {
        unint64_t v58 = ((char *)(v44 - 1) - (char *)v45) & 0xFFFFFFFFFFFFFFF8;
        if (&v50[(char *)v44 - (char *)v45 - 8 - v58] > &v50[(char *)v44 - (char *)v45 - 8])
        {
          unint64_t v54 = v44;
        }
        else if ((unint64_t *)((char *)v44 - v58 - 8) > v44 - 1)
        {
          unint64_t v54 = v44;
        }
        else if ((unint64_t)((char *)v45 - v50) >= 0x20)
        {
          uint64_t v59 = (v53 >> 3) + 1;
          uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v54 = &v44[v60 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v51 = (unint64_t *)((char *)v51 - v60);
          unint64_t v61 = &v50[8 * v47 - 16];
          unint64_t v62 = v44 - 2;
          uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v64 = *(_OWORD *)v62;
            *((_OWORD *)v61 - 1) = *((_OWORD *)v62 - 1);
            *(_OWORD *)unint64_t v61 = v64;
            v61 -= 32;
            v62 -= 4;
            v63 -= 4;
          }
          while (v63);
          if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_82;
          }
        }
        else
        {
          unint64_t v54 = v44;
        }
      }
      else
      {
        unint64_t v54 = v44;
      }
      do
      {
        unint64_t v55 = *--v54;
        *--unint64_t v51 = v55;
      }
      while (v54 != v45);
LABEL_82:
      unint64_t v44 = v45;
    }
    unint64_t v45 = v51;
    unint64_t v43 = (unint64_t *)&v50[8 * v49];
    if (v44)
    {
      operator delete(v44);
      int v46 = *((_DWORD *)v3 + 24);
    }
    else
    {
      int v46 = v42;
    }
    unint64_t v44 = v52;
LABEL_87:
    if (!v46) {
      goto LABEL_275;
    }
    int v42 = v46 - 1;
    uint64_t v56 = *((void *)v3 + 11);
    unint64_t Node = *(void *)(v56 + 8 * (v46 - 1));
    *((_DWORD *)v3 + 24) = v46 - 1;
    if (!Node) {
      goto LABEL_287;
    }
    int v57 = *(unsigned __int16 *)(Node + 16);
  }
  while (v57 == 232);
  if (v57 == 43)
  {
    if (v46 == 1
      || (unsigned int v140 = v46 - 2,
          unsigned int v141 = *(swift::Demangle::__runtime::Node **)(v56 + 8 * v140),
          *((_DWORD *)v3 + 24) = v140,
          !v141))
    {
LABEL_275:
      unint64_t Node = 0;
      goto LABEL_287;
    }
    unint64_t v142 = swift::Demangle::__runtime::Demangler::createWithChildren(v3, v24, v141, (swift::Demangle::__runtime::Node *)Node);
  }
  else
  {
    unint64_t v142 = swift::Demangle::__runtime::Demangler::createWithChild(v3, v24, (swift::Demangle::__runtime::Node *)Node);
  }
  unint64_t Node = v142;
  while (v44 != v45)
  {
    unsigned int v143 = (swift::Demangle::__runtime::Node *)*--v44;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v143, v3);
  }
  if (v147)
  {
    unint64_t v144 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v3, 217);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)Node, v144, v3);
  }
LABEL_287:
  if (v45)
  {
    unint64_t v115 = v45;
LABEL_270:
    operator delete(v115);
  }
  return (swift::Demangle::__runtime::Node *)Node;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleWitness(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v3 = this;
  unint64_t v4 = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  char v7 = *(unsigned char *)(v6 + v1);
  switch(v7)
  {
    case 'C':
      int v37 = *((_DWORD *)this + 24);
      if (!v37) {
        return 0;
      }
      int v38 = v37 - 1;
      unint64_t v39 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v37 - 1));
      if (*((_WORD *)v39 + 8) != 232 && !swift::Demangle::__runtime::isContext()) {
        return 0;
      }
      *((_DWORD *)v3 + 24) = v38;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v40 = 2 * *((void *)v3 + 4);
        if (v40 <= 0x20) {
          unint64_t v40 = 32;
        }
        *((void *)v3 + 4) = v40;
        unint64_t v41 = v40 + 8;
        int v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
        unint64_t v43 = (char *)v42 + v41;
        *int v42 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v43;
        *((void *)v3 + 3) = v42;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 62;
      goto LABEL_154;
    case 'G':
      unint64_t v45 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v45) {
        return 0;
      }
      unint64_t v39 = v45;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v46 = 2 * *((void *)v3 + 4);
        if (v46 <= 0x20) {
          unint64_t v46 = 32;
        }
        *((void *)v3 + 4) = v46;
        unint64_t v47 = v46 + 8;
        unint64_t v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
        unint64_t v49 = (char *)v48 + v47;
        void *v48 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v49;
        *((void *)v3 + 3) = v48;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 88;
      goto LABEL_154;
    case 'I':
      unint64_t v50 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v50) {
        return 0;
      }
      unint64_t v39 = v50;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v51 = 2 * *((void *)v3 + 4);
        if (v51 <= 0x20) {
          unint64_t v51 = 32;
        }
        *((void *)v3 + 4) = v51;
        unint64_t v52 = v51 + 8;
        unint64_t v53 = malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        unint64_t v54 = (char *)v53 + v52;
        *unint64_t v53 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v54;
        *((void *)v3 + 3) = v53;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 89;
      goto LABEL_154;
    case 'J':
      return swift::Demangle::__runtime::Demangler::demangleDifferentiabilityWitness(this);
    case 'L':
      uint64_t v56 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      int v57 = *((_DWORD *)v3 + 24);
      if (!v57) {
        return 0;
      }
      unsigned int v58 = v57 - 1;
      uint64_t v59 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v58);
      if (*((_WORD *)v59 + 8) != 232) {
        return 0;
      }
      unint64_t v39 = v56;
      *((_DWORD *)v3 + 24) = v58;
      if (!v56) {
        return 0;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v60 = 2 * *((void *)v3 + 4);
        if (v60 <= 0x20) {
          unint64_t v60 = 32;
        }
        *((void *)v3 + 4) = v60;
        unint64_t v61 = v60 + 8;
        unint64_t v62 = malloc_type_malloc(v60 + 8, 0xD0263BC5uLL);
        uint64_t v63 = (char *)v62 + v61;
        *unint64_t v62 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v62 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v63;
        *((void *)v3 + 3) = v62;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 136;
      goto LABEL_186;
    case 'O':
      if (v5 >= v2) {
        return 0;
      }
      unint64_t v4 = 0;
      *((void *)this + 9) = v1 + 2;
      switch(*(unsigned char *)(v6 + v5))
      {
        case 'C':
          int v65 = *((_DWORD *)this + 24);
          if (!v65) {
            goto LABEL_316;
          }
          int v66 = v65 - 1;
          uint64_t v67 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v67 + 8 * (v65 - 1));
          int v69 = v68[8];
          if (v69 == 232)
          {
            *((_DWORD *)this + 24) = v66;
          }
          else
          {
            if (v69 == 43)
            {
              *((_DWORD *)this + 24) = v66;
              if (v65 == 1 || (v70 = v65 - 2, int v71 = *(unsigned __int16 **)(v67 + 8 * v70), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v70;
              }
              __int16 v232 = 350;
LABEL_359:
              return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v232, (swift::Demangle::__runtime::Node *)v71, (swift::Demangle::__runtime::Node *)v68);
            }
LABEL_316:
            unsigned int v68 = 0;
          }
          __int16 v231 = 350;
          goto LABEL_368;
        case 'D':
          int v156 = *((_DWORD *)this + 24);
          if (!v156) {
            goto LABEL_317;
          }
          int v157 = v156 - 1;
          uint64_t v158 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v158 + 8 * (v156 - 1));
          int v159 = v68[8];
          if (v159 == 232)
          {
            *((_DWORD *)this + 24) = v157;
          }
          else
          {
            if (v159 == 43)
            {
              *((_DWORD *)this + 24) = v157;
              if (v156 == 1 || (v160 = v156 - 2, int v71 = *(unsigned __int16 **)(v158 + 8 * v160), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v160;
              }
              __int16 v232 = 351;
              goto LABEL_359;
            }
LABEL_317:
            unsigned int v68 = 0;
          }
          __int16 v231 = 351;
          goto LABEL_368;
        case 'F':
          int v161 = *((_DWORD *)this + 24);
          if (!v161) {
            goto LABEL_318;
          }
          int v162 = v161 - 1;
          uint64_t v163 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v163 + 8 * (v161 - 1));
          int v164 = v68[8];
          if (v164 == 232)
          {
            *((_DWORD *)this + 24) = v162;
          }
          else
          {
            if (v164 == 43)
            {
              *((_DWORD *)this + 24) = v162;
              if (v161 == 1 || (v165 = v161 - 2, int v71 = *(unsigned __int16 **)(v163 + 8 * v165), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v165;
              }
              __int16 v232 = 352;
              goto LABEL_359;
            }
LABEL_318:
            unsigned int v68 = 0;
          }
          __int16 v231 = 352;
          goto LABEL_368;
        case 'H':
          int v166 = *((_DWORD *)this + 24);
          if (!v166) {
            goto LABEL_319;
          }
          int v167 = v166 - 1;
          uint64_t v168 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v168 + 8 * (v166 - 1));
          int v169 = v68[8];
          if (v169 == 232)
          {
            *((_DWORD *)this + 24) = v167;
          }
          else
          {
            if (v169 == 43)
            {
              *((_DWORD *)this + 24) = v167;
              if (v166 == 1 || (v170 = v166 - 2, int v71 = *(unsigned __int16 **)(v168 + 8 * v170), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v170;
              }
              __int16 v232 = 353;
              goto LABEL_359;
            }
LABEL_319:
            unsigned int v68 = 0;
          }
          __int16 v231 = 353;
          goto LABEL_368;
        case 'b':
          int v171 = *((_DWORD *)this + 24);
          if (!v171) {
            goto LABEL_320;
          }
          int v172 = v171 - 1;
          uint64_t v173 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v173 + 8 * (v171 - 1));
          int v174 = v68[8];
          if (v174 == 232)
          {
            *((_DWORD *)this + 24) = v172;
          }
          else
          {
            if (v174 == 43)
            {
              *((_DWORD *)this + 24) = v172;
              if (v171 == 1 || (v175 = v171 - 2, int v71 = *(unsigned __int16 **)(v173 + 8 * v175), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v175;
              }
              __int16 v232 = 282;
              goto LABEL_359;
            }
LABEL_320:
            unsigned int v68 = 0;
          }
          __int16 v231 = 282;
          goto LABEL_368;
        case 'c':
          int v176 = *((_DWORD *)this + 24);
          if (!v176) {
            goto LABEL_321;
          }
          int v177 = v176 - 1;
          uint64_t v178 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v178 + 8 * (v176 - 1));
          int v179 = v68[8];
          if (v179 == 232)
          {
            *((_DWORD *)this + 24) = v177;
          }
          else
          {
            if (v179 == 43)
            {
              *((_DWORD *)this + 24) = v177;
              if (v176 == 1 || (v180 = v176 - 2, int v71 = *(unsigned __int16 **)(v178 + 8 * v180), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v180;
              }
              __int16 v232 = 283;
              goto LABEL_359;
            }
LABEL_321:
            unsigned int v68 = 0;
          }
          __int16 v231 = 283;
          goto LABEL_368;
        case 'd':
          int v181 = *((_DWORD *)this + 24);
          if (!v181) {
            goto LABEL_322;
          }
          int v182 = v181 - 1;
          uint64_t v183 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v183 + 8 * (v181 - 1));
          int v184 = v68[8];
          if (v184 == 232)
          {
            *((_DWORD *)this + 24) = v182;
          }
          else
          {
            if (v184 == 43)
            {
              *((_DWORD *)this + 24) = v182;
              if (v181 == 1 || (v185 = v181 - 2, int v71 = *(unsigned __int16 **)(v183 + 8 * v185), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v185;
              }
              __int16 v232 = 284;
              goto LABEL_359;
            }
LABEL_322:
            unsigned int v68 = 0;
          }
          __int16 v231 = 284;
          goto LABEL_368;
        case 'e':
          int v186 = *((_DWORD *)this + 24);
          if (!v186) {
            goto LABEL_323;
          }
          int v187 = v186 - 1;
          uint64_t v188 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v188 + 8 * (v186 - 1));
          int v189 = v68[8];
          if (v189 == 232)
          {
            *((_DWORD *)this + 24) = v187;
          }
          else
          {
            if (v189 == 43)
            {
              *((_DWORD *)this + 24) = v187;
              if (v186 == 1 || (v190 = v186 - 2, int v71 = *(unsigned __int16 **)(v188 + 8 * v190), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v190;
              }
              __int16 v232 = 279;
              goto LABEL_359;
            }
LABEL_323:
            unsigned int v68 = 0;
          }
          __int16 v231 = 279;
          goto LABEL_368;
        case 'f':
          int v191 = *((_DWORD *)this + 24);
          if (!v191) {
            goto LABEL_324;
          }
          int v192 = v191 - 1;
          uint64_t v193 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v193 + 8 * (v191 - 1));
          int v194 = v68[8];
          if (v194 == 232)
          {
            *((_DWORD *)this + 24) = v192;
          }
          else
          {
            if (v194 == 43)
            {
              *((_DWORD *)this + 24) = v192;
              if (v191 == 1 || (v195 = v191 - 2, int v71 = *(unsigned __int16 **)(v193 + 8 * v195), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v195;
              }
              __int16 v232 = 285;
              goto LABEL_359;
            }
LABEL_324:
            unsigned int v68 = 0;
          }
          __int16 v231 = 285;
          goto LABEL_368;
        case 'g':
          int v196 = *((_DWORD *)this + 24);
          if (!v196) {
            goto LABEL_325;
          }
          int v197 = v196 - 1;
          uint64_t v198 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v198 + 8 * (v196 - 1));
          int v199 = v68[8];
          if (v199 == 232)
          {
            *((_DWORD *)this + 24) = v197;
          }
          else
          {
            if (v199 == 43)
            {
              *((_DWORD *)this + 24) = v197;
              if (v196 == 1 || (v200 = v196 - 2, int v71 = *(unsigned __int16 **)(v198 + 8 * v200), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v200;
              }
              __int16 v232 = 345;
              goto LABEL_359;
            }
LABEL_325:
            unsigned int v68 = 0;
          }
          __int16 v231 = 345;
          goto LABEL_368;
        case 'h':
          int v201 = *((_DWORD *)this + 24);
          if (!v201) {
            goto LABEL_326;
          }
          int v202 = v201 - 1;
          uint64_t v203 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v203 + 8 * (v201 - 1));
          int v204 = v68[8];
          if (v204 == 232)
          {
            *((_DWORD *)this + 24) = v202;
          }
          else
          {
            if (v204 == 43)
            {
              *((_DWORD *)this + 24) = v202;
              if (v201 == 1 || (v205 = v201 - 2, int v71 = *(unsigned __int16 **)(v203 + 8 * v205), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v205;
              }
              __int16 v232 = 286;
              goto LABEL_359;
            }
LABEL_326:
            unsigned int v68 = 0;
          }
          __int16 v231 = 286;
          goto LABEL_368;
        case 'i':
          std::string::size_type v124 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
          int v206 = *((_DWORD *)v3 + 24);
          if (!v206) {
            goto LABEL_327;
          }
          int v207 = v206 - 1;
          uint64_t v208 = *((void *)v3 + 11);
          std::string::size_type v123 = *(unsigned __int16 **)(v208 + 8 * (v206 - 1));
          int v209 = v123[8];
          if (v209 == 232)
          {
            *((_DWORD *)v3 + 24) = v207;
            goto LABEL_355;
          }
          if (v209 != 43)
          {
LABEL_327:
            std::string::size_type v123 = 0;
LABEL_355:
            this = v3;
            __int16 v232 = 343;
            goto LABEL_358;
          }
          *((_DWORD *)v3 + 24) = v207;
          if (v206 == 1
            || (unsigned int v210 = v206 - 2,
                std::string::size_type v120 = *(swift::Demangle::__runtime::Node **)(v208 + 8 * v210),
                *((_WORD *)v120 + 8) != 232))
          {
            std::string::size_type v120 = 0;
          }
          else
          {
            *((_DWORD *)v3 + 24) = v210;
          }
          uint64_t v121 = v3;
          __int16 v122 = 343;
LABEL_165:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(v121, v122, v120, (swift::Demangle::__runtime::Node *)v123, v124);
        case 'j':
          std::string::size_type v124 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
          int v211 = *((_DWORD *)v3 + 24);
          if (!v211) {
            goto LABEL_328;
          }
          int v212 = v211 - 1;
          uint64_t v213 = *((void *)v3 + 11);
          std::string::size_type v123 = *(unsigned __int16 **)(v213 + 8 * (v211 - 1));
          int v214 = v123[8];
          if (v214 == 232)
          {
            *((_DWORD *)v3 + 24) = v212;
          }
          else
          {
            if (v214 == 43)
            {
              *((_DWORD *)v3 + 24) = v212;
              if (v211 == 1
                || (unsigned int v215 = v211 - 2,
                    std::string::size_type v120 = *(swift::Demangle::__runtime::Node **)(v213 + 8 * v215),
                    *((_WORD *)v120 + 8) != 232))
              {
                std::string::size_type v120 = 0;
              }
              else
              {
                *((_DWORD *)v3 + 24) = v215;
              }
              uint64_t v121 = v3;
              __int16 v122 = 344;
              goto LABEL_165;
            }
LABEL_328:
            std::string::size_type v123 = 0;
          }
          this = v3;
          __int16 v232 = 344;
LABEL_358:
          int v71 = v123;
          unsigned int v68 = (unsigned __int16 *)v124;
          goto LABEL_359;
        case 'r':
          int v216 = *((_DWORD *)this + 24);
          if (!v216) {
            goto LABEL_329;
          }
          int v217 = v216 - 1;
          uint64_t v218 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v218 + 8 * (v216 - 1));
          int v219 = v68[8];
          if (v219 == 232)
          {
            *((_DWORD *)this + 24) = v217;
          }
          else
          {
            if (v219 == 43)
            {
              *((_DWORD *)this + 24) = v217;
              if (v216 == 1 || (v220 = v216 - 2, int v71 = *(unsigned __int16 **)(v218 + 8 * v220), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v220;
              }
              __int16 v232 = 280;
              goto LABEL_359;
            }
LABEL_329:
            unsigned int v68 = 0;
          }
          __int16 v231 = 280;
          goto LABEL_368;
        case 's':
          int v221 = *((_DWORD *)this + 24);
          if (!v221) {
            goto LABEL_330;
          }
          int v222 = v221 - 1;
          uint64_t v223 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v223 + 8 * (v221 - 1));
          int v224 = v68[8];
          if (v224 == 232)
          {
            *((_DWORD *)this + 24) = v222;
          }
          else
          {
            if (v224 == 43)
            {
              *((_DWORD *)this + 24) = v222;
              if (v221 == 1 || (v225 = v221 - 2, int v71 = *(unsigned __int16 **)(v223 + 8 * v225), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v225;
              }
              __int16 v232 = 281;
              goto LABEL_359;
            }
LABEL_330:
            unsigned int v68 = 0;
          }
          __int16 v231 = 281;
          goto LABEL_368;
        case 'y':
          int v226 = *((_DWORD *)this + 24);
          if (!v226) {
            goto LABEL_331;
          }
          int v227 = v226 - 1;
          uint64_t v228 = *((void *)this + 11);
          unsigned int v68 = *(unsigned __int16 **)(v228 + 8 * (v226 - 1));
          int v229 = v68[8];
          if (v229 == 232)
          {
            *((_DWORD *)this + 24) = v227;
          }
          else
          {
            if (v229 == 43)
            {
              *((_DWORD *)this + 24) = v227;
              if (v226 == 1 || (v230 = v226 - 2, int v71 = *(unsigned __int16 **)(v228 + 8 * v230), v71[8] != 232)) {
                int v71 = 0;
              }
              else {
                *((_DWORD *)this + 24) = v230;
              }
              __int16 v232 = 278;
              goto LABEL_359;
            }
LABEL_331:
            unsigned int v68 = 0;
          }
          __int16 v231 = 278;
LABEL_368:
          return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild(this, v231, (swift::Demangle::__runtime::Node *)v68);
        default:
          return (swift::Demangle::__runtime::Node *)v4;
      }
    case 'P':
      __int16 v72 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v72) {
        return 0;
      }
      unint64_t v39 = v72;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v73 = 2 * *((void *)v3 + 4);
        if (v73 <= 0x20) {
          unint64_t v73 = 32;
        }
        *((void *)v3 + 4) = v73;
        unint64_t v74 = v73 + 8;
        int v75 = malloc_type_malloc(v73 + 8, 0xD0263BC5uLL);
        unsigned int v76 = (char *)v75 + v74;
        *int v75 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v76;
        *((void *)v3 + 3) = v75;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 197;
      goto LABEL_154;
    case 'S':
      unint64_t v77 = swift::Demangle::__runtime::Demangler::popProtocol(this);
      if (!v77) {
        return 0;
      }
      unint64_t v39 = (swift::Demangle::__runtime::Node *)v77;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v78 = 2 * *((void *)v3 + 4);
        if (v78 <= 0x20) {
          unint64_t v78 = 32;
        }
        *((void *)v3 + 4) = v78;
        unint64_t v79 = v78 + 8;
        uint64_t v80 = malloc_type_malloc(v78 + 8, 0xD0263BC5uLL);
        unsigned int v81 = (char *)v80 + v79;
        *uint64_t v80 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v81;
        *((void *)v3 + 3) = v80;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 195;
      goto LABEL_154;
    case 'T':
      int v82 = *((_DWORD *)this + 24);
      if (v82
        && (unsigned int v83 = v82 - 1,
            int v84 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v83),
            *((_WORD *)v84 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v83;
      }
      else
      {
        int v84 = 0;
      }
      unint64_t v119 = swift::Demangle::__runtime::Demangler::popAssocTypePath(this);
      std::string::size_type v120 = swift::Demangle::__runtime::Demangler::popProtocolConformance(v3);
      uint64_t v121 = v3;
      __int16 v122 = 9;
      std::string::size_type v123 = (unsigned __int16 *)v119;
      std::string::size_type v124 = v84;
      goto LABEL_165;
    case 'V':
      int v85 = *((_DWORD *)this + 24);
      if (!v85) {
        return 0;
      }
      unsigned int v86 = v85 - 1;
      unint64_t v39 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v86);
      if (*((_WORD *)v39 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v86;
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v87 = 2 * *((void *)this + 4);
        if (v87 <= 0x20) {
          unint64_t v87 = 32;
        }
        *((void *)this + 4) = v87;
        unint64_t v88 = v87 + 8;
        int v89 = malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
        unsigned int v90 = (char *)v89 + v88;
        *int v89 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v90;
        *((void *)v3 + 3) = v89;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 253;
      goto LABEL_154;
    case 'Z':
    case 'z':
      unint64_t v8 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v8;
      if (!v8 || v8 + 24 > *((void *)this + 2))
      {
        unint64_t v9 = 2 * *((void *)this + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)this + 4) = v9;
        unint64_t v10 = v9 + 8;
        __int16 v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        void *v11 = *((void *)v3 + 3);
        unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v11 + v10;
        *((void *)v3 + 3) = v11;
      }
      *((void *)v3 + 1) = v8 + 24;
      *(_WORD *)(v8 + 16) = 317;
      *(unsigned char *)(v8 + 18) = 0;
      unsigned int v12 = *((_DWORD *)v3 + 24);
      if (!v12)
      {
        unint64_t v13 = 0;
        goto LABEL_195;
      }
      char v233 = v7;
      unint64_t v13 = 0;
      int v14 = 0;
      int v15 = 0;
      while (2)
      {
        uint64_t v17 = *((void *)v3 + 11);
        if (*(_WORD *)(*(void *)(v17 + 8 * (v12 - 1)) + 16) == 275)
        {
          *((_DWORD *)v3 + 24) = v12 - 1;
          if (v12 == 1) {
            goto LABEL_207;
          }
          v12 -= 2;
          uint64_t v18 = *(void *)(v17 + 8 * v12);
          int v19 = *(unsigned __int16 *)(v18 + 16);
          if ((v19 - 173) > 0x3C || ((1 << (v19 + 83)) & 0x100000010000010DLL) == 0)
          {
            BOOL v21 = (v19 - 101) > 0x24 || ((1 << (v19 - 101)) & 0x1000800001) == 0;
            if (v21 && v19 != 347) {
              goto LABEL_207;
            }
          }
          *((_DWORD *)v3 + 24) = v12;
          if (v14 < v15)
          {
            *(void *)int v14 = v18;
            unint64_t v16 = v14 + 8;
            v14 += 8;
            if (!v12) {
              goto LABEL_190;
            }
            continue;
          }
          uint64_t v22 = (v14 - v13) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            abort();
          }
          if ((v15 - v13) >> 2 > v23) {
            unint64_t v23 = (v15 - v13) >> 2;
          }
          if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24)
          {
            if (v24 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            char v25 = operator new(8 * v24);
          }
          else
          {
            char v25 = 0;
          }
          unint64_t v26 = &v25[8 * v22];
          *(void *)unint64_t v26 = v18;
          unint64_t v16 = v26 + 8;
          if (v14 == v13) {
            goto LABEL_39;
          }
          unint64_t v27 = v14 - v13 - 8;
          if (v27 < 0x168)
          {
            unint64_t v28 = v14;
            goto LABEL_38;
          }
          unint64_t v30 = (v14 - 8 - v13) & 0xFFFFFFFFFFFFFFF8;
          if (&v25[v14 - v13 - 8 - v30] > &v25[v14 - v13 - 8])
          {
            unint64_t v28 = v14;
          }
          else
          {
            if (&v14[-v30 - 8] <= v14 - 8)
            {
              if ((unint64_t)(v13 - v25) < 0x20)
              {
                unint64_t v28 = v14;
                goto LABEL_38;
              }
              uint64_t v31 = (v27 >> 3) + 1;
              uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v28 = &v14[-v32];
              v26 -= v32;
              int v33 = &v25[8 * v22 - 16];
              int v34 = v14 - 16;
              uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *int v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 4;
              }
              while (v35);
              if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_38;
              }
LABEL_39:
              int v15 = &v25[8 * v24];
              if (v13)
              {
                operator delete(v13);
                unsigned int v12 = *((_DWORD *)v3 + 24);
              }
              unint64_t v13 = v26;
              int v14 = v16;
              if (!v12) {
                goto LABEL_190;
              }
              continue;
            }
            unint64_t v28 = v14;
          }
          do
          {
LABEL_38:
            uint64_t v29 = *((void *)v28 - 1);
            v28 -= 8;
            *((void *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v28 != v13);
          goto LABEL_39;
        }
        break;
      }
      unint64_t v16 = v14;
LABEL_190:
      if (v16 == v13)
      {
        unint64_t v13 = v16;
      }
      else
      {
        do
        {
          uint64_t v137 = (swift::Demangle::__runtime::Node *)*((void *)v16 - 1);
          v16 -= 8;
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v8, v137, v3);
        }
        while (v16 != v13);
      }
      char v7 = v233;
LABEL_195:
      long long v138 = swift::Demangle::__runtime::Demangler::popContext(v3);
      if (v138 && (v7 == 90 ? (__int16 v139 = 315) : (__int16 v139 = 316), v8))
      {
        unsigned int v140 = v138;
        unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 1) = v4;
        if (!v4 || v4 + 24 > *((void *)v3 + 2))
        {
          unint64_t v141 = 2 * *((void *)v3 + 4);
          if (v141 <= 0x20) {
            unint64_t v141 = 32;
          }
          *((void *)v3 + 4) = v141;
          unint64_t v142 = v141 + 8;
          unsigned int v143 = malloc_type_malloc(v141 + 8, 0xD0263BC5uLL);
          unint64_t v144 = (char *)v143 + v142;
          *unsigned int v143 = *((void *)v3 + 3);
          unint64_t v4 = ((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v3 + 2) = v144;
          *((void *)v3 + 3) = v143;
        }
        *((void *)v3 + 1) = v4 + 24;
        *(_WORD *)(v4 + 16) = v139;
        *(unsigned char *)(v4 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v140, v3);
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v8, v3);
        if (!v13) {
          return (swift::Demangle::__runtime::Node *)v4;
        }
      }
      else
      {
LABEL_207:
        unint64_t v4 = 0;
        if (!v13) {
          return (swift::Demangle::__runtime::Node *)v4;
        }
      }
      operator delete(v13);
      return (swift::Demangle::__runtime::Node *)v4;
    case 'a':
      char v91 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v91) {
        return 0;
      }
      unint64_t v39 = v91;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v92 = 2 * *((void *)v3 + 4);
        if (v92 <= 0x20) {
          unint64_t v92 = 32;
        }
        *((void *)v3 + 4) = v92;
        unint64_t v93 = v92 + 8;
        unint64_t v94 = malloc_type_malloc(v92 + 8, 0xD0263BC5uLL);
        int v95 = (char *)v94 + v93;
        *unint64_t v94 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v95;
        *((void *)v3 + 3) = v94;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 198;
      goto LABEL_154;
    case 'b':
      int v96 = *((_DWORD *)this + 24);
      if (v96
        && (unsigned int v97 = v96 - 1,
            unint64_t v39 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v97),
            *((_WORD *)v39 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v97;
      }
      else
      {
        unint64_t v39 = 0;
      }
      uint64_t v125 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      unint64_t v4 = 0;
      if (!v39) {
        return (swift::Demangle::__runtime::Node *)v4;
      }
      uint64_t v59 = v125;
      if (!v125) {
        return (swift::Demangle::__runtime::Node *)v4;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v126 = 2 * *((void *)v3 + 4);
        if (v126 <= 0x20) {
          unint64_t v126 = 32;
        }
        *((void *)v3 + 4) = v126;
        unint64_t v127 = v126 + 8;
        unint64_t v128 = malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
        unint64_t v129 = (char *)v128 + v127;
        *unint64_t v128 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v129;
        *((void *)v3 + 3) = v128;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 10;
      goto LABEL_186;
    case 'l':
      int v98 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      int v99 = *((_DWORD *)v3 + 24);
      if (!v99) {
        return 0;
      }
      unsigned int v100 = v99 - 1;
      uint64_t v59 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * v100);
      if (*((_WORD *)v59 + 8) != 232) {
        return 0;
      }
      unint64_t v39 = v98;
      *((_DWORD *)v3 + 24) = v100;
      if (!v98) {
        return 0;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v101 = 2 * *((void *)v3 + 4);
        if (v101 <= 0x20) {
          unint64_t v101 = 32;
        }
        *((void *)v3 + 4) = v101;
        unint64_t v102 = v101 + 8;
        unint64_t v103 = malloc_type_malloc(v101 + 8, 0xD0263BC5uLL);
        uint64_t v104 = (char *)v103 + v102;
        *unint64_t v103 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v103 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v104;
        *((void *)v3 + 3) = v103;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 135;
      goto LABEL_186;
    case 'p':
      unint64_t v105 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v105) {
        return 0;
      }
      unint64_t v39 = v105;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v106 = 2 * *((void *)v3 + 4);
        if (v106 <= 0x20) {
          unint64_t v106 = 32;
        }
        *((void *)v3 + 4) = v106;
        unint64_t v107 = v106 + 8;
        unint64_t v108 = malloc_type_malloc(v106 + 8, 0xD0263BC5uLL);
        __int16 v109 = (char *)v108 + v107;
        *unint64_t v108 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v108 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v109;
        *((void *)v3 + 3) = v108;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 199;
      goto LABEL_154;
    case 'r':
      __int16 v110 = swift::Demangle::__runtime::Demangler::popProtocolConformance(this);
      if (!v110) {
        return 0;
      }
      unint64_t v39 = v110;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v111 = 2 * *((void *)v3 + 4);
        if (v111 <= 0x20) {
          unint64_t v111 = 32;
        }
        *((void *)v3 + 4) = v111;
        unint64_t v112 = v111 + 8;
        __int16 v113 = malloc_type_malloc(v111 + 8, 0xD0263BC5uLL);
        unint64_t v114 = (char *)v113 + v112;
        void *v113 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v113 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v114;
        *((void *)v3 + 3) = v113;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v44 = 90;
LABEL_154:
      *(_WORD *)(v4 + 16) = v44;
      *(unsigned char *)(v4 + 18) = 0;
      goto LABEL_187;
    case 't':
      int v115 = *((_DWORD *)this + 24);
      if (v115 {
        && (int v116 = v115 - 1,
      }
            unint64_t v39 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v115 - 1)),
      {
        *((_DWORD *)v3 + 24) = v116;
      }
      else
      {
        unint64_t v39 = 0;
      }
      int v130 = swift::Demangle::__runtime::Demangler::popProtocolConformance(v3);
      unint64_t v4 = 0;
      if (!v39) {
        return (swift::Demangle::__runtime::Node *)v4;
      }
      uint64_t v59 = v130;
      if (!v130) {
        return (swift::Demangle::__runtime::Node *)v4;
      }
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v131 = 2 * *((void *)v3 + 4);
        if (v131 <= 0x20) {
          unint64_t v131 = 32;
        }
        *((void *)v3 + 4) = v131;
        unint64_t v132 = v131 + 8;
        uint64_t v133 = malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
        int v134 = (char *)v133 + v132;
        void *v133 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v133 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v134;
        *((void *)v3 + 3) = v133;
      }
      *((void *)v3 + 1) = v4 + 24;
      __int16 v64 = 6;
LABEL_186:
      *(_WORD *)(v4 + 16) = v64;
      *(unsigned char *)(v4 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v59, v3);
LABEL_187:
      unint64_t v135 = (swift::Demangle::__runtime::Node *)v4;
      int v136 = v39;
      goto LABEL_188;
    case 'v':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      int v117 = *(char *)(v6 + v5);
      if (v117 == 100)
      {
        uint64_t v118 = 0;
      }
      else
      {
        unint64_t v4 = 0;
        if (v117 != 105) {
          return (swift::Demangle::__runtime::Node *)v4;
        }
        uint64_t v118 = 1;
      }
      unint64_t v145 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v145;
      if (!v145 || v145 + 24 > *((void *)this + 2))
      {
        unint64_t v146 = 2 * *((void *)this + 4);
        if (v146 <= 0x20) {
          unint64_t v146 = 32;
        }
        *((void *)this + 4) = v146;
        unint64_t v147 = v146 + 8;
        int v148 = malloc_type_malloc(v146 + 8, 0xD0263BC5uLL);
        *int v148 = *((void *)v3 + 3);
        unint64_t v145 = ((unint64_t)v148 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = (char *)v148 + v147;
        *((void *)v3 + 3) = v148;
      }
      *((void *)v3 + 1) = v145 + 24;
      *(_WORD *)(v145 + 16) = 52;
      *(unsigned char *)(v145 + 18) = 4;
      *(void *)unint64_t v145 = v118;
      int v149 = *((_DWORD *)v3 + 24);
      if (!v149) {
        return 0;
      }
      int v150 = v149 - 1;
      unint64_t v151 = *(swift::Demangle::__runtime::Node **)(*((void *)v3 + 11) + 8 * (v149 - 1));
      if (*((_WORD *)v151 + 8) != 232 && !swift::Demangle::__runtime::isContext()) {
        return 0;
      }
      *((_DWORD *)v3 + 24) = v150;
      unint64_t v4 = (*((void *)v3 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)v3 + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)v3 + 2))
      {
        unint64_t v152 = 2 * *((void *)v3 + 4);
        if (v152 <= 0x20) {
          unint64_t v152 = 32;
        }
        *((void *)v3 + 4) = v152;
        unint64_t v153 = v152 + 8;
        int v154 = malloc_type_malloc(v152 + 8, 0xD0263BC5uLL);
        unsigned int v155 = (char *)v154 + v153;
        void *v154 = *((void *)v3 + 3);
        unint64_t v4 = ((unint64_t)v154 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v3 + 2) = v155;
        *((void *)v3 + 3) = v154;
      }
      *((void *)v3 + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 73;
      *(unsigned char *)(v4 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v145, v3);
      unint64_t v135 = (swift::Demangle::__runtime::Node *)v4;
      int v136 = v151;
LABEL_188:
      swift::Demangle::__runtime::Node::addChild(v135, v136, v3);
      return (swift::Demangle::__runtime::Node *)v4;
    default:
      return (swift::Demangle::__runtime::Node *)v4;
  }
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSpecialType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v1 + 1;
  *((void *)this + 9) = v1 + 1;
  uint64_t v6 = *((void *)this + 7);
  int v7 = *(unsigned __int8 *)(v6 + v1);
  switch(*(unsigned char *)(v6 + v1))
  {
    case 'A':
      __int16 v14 = 64;
      goto LABEL_79;
    case 'B':
      __int16 v14 = 165;
      goto LABEL_79;
    case 'C':
      __int16 v14 = 22;
      goto LABEL_79;
    case 'D':
      int v15 = *((_DWORD *)this + 24);
      if (!v15) {
        return 0;
      }
      unsigned int v16 = v15 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v16);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v16;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v18 = 2 * *((void *)this + 4);
        if (v18 <= 0x20) {
          unint64_t v18 = 32;
        }
        *((void *)this + 4) = v18;
        unint64_t v19 = v18 + 8;
        unint64_t v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
        BOOL v21 = (char *)v20 + v19;
        *unint64_t v20 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v21;
        *((void *)this + 3) = v20;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 57;
      goto LABEL_135;
    case 'E':
      __int16 v14 = 65;
      goto LABEL_79;
    case 'G':
    case 'g':
      return swift::Demangle::__runtime::Demangler::demangleExtendedExistentialShape(this, (char)v7);
    case 'K':
      __int16 v14 = 11;
      goto LABEL_79;
    case 'L':
      __int16 v14 = 166;
      goto LABEL_79;
    case 'M':
      unint64_t v23 = swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation(this);
      int v24 = *((_DWORD *)this + 24);
      if (!v24) {
        return 0;
      }
      unsigned int v25 = v24 - 1;
      unint64_t v26 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v25);
      if (*((_WORD *)v26 + 8) != 232) {
        return 0;
      }
      unint64_t v4 = v23;
      *((_DWORD *)this + 24) = v25;
      if (!v23) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v27 = 2 * *((void *)this + 4);
        if (v27 <= 0x20) {
          unint64_t v27 = 32;
        }
        *((void *)this + 4) = v27;
        unint64_t v28 = v27 + 8;
        uint64_t v29 = malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
        unint64_t v30 = (char *)v29 + v28;
        *uint64_t v29 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v30;
        *((void *)this + 3) = v29;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v31 = 145;
      goto LABEL_102;
    case 'P':
      unint64_t v32 = swift::Demangle::__runtime::Demangler::demangleConstrainedExistentialRequirementList(this);
      int v33 = *((_DWORD *)this + 24);
      if (!v33) {
        return 0;
      }
      unsigned int v34 = v33 - 1;
      uint64_t v35 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v34);
      if (*((_WORD *)v35 + 8) != 232) {
        return 0;
      }
      unint64_t v4 = v32;
      *((_DWORD *)this + 24) = v34;
      if (!v32) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v36 = 2 * *((void *)this + 4);
        if (v36 <= 0x20) {
          unint64_t v36 = 32;
        }
        *((void *)this + 4) = v36;
        unint64_t v37 = v36 + 8;
        int v38 = malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
        unint64_t v39 = (char *)v38 + v37;
        *int v38 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v39;
        *((void *)this + 3) = v38;
      }
      *((void *)this + 1) = v17 + 24;
      *(_WORD *)(v17 + 16) = 83;
      *(unsigned char *)(v17 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, v35, this);
      goto LABEL_136;
    case 'S':
      if (v5 >= v2) {
        return 0;
      }
      unint64_t v4 = 0;
      *((void *)this + 9) = v1 + 2;
      int v40 = *(char *)(v6 + v5);
      if (v40 > 111)
      {
        if (v40 == 112)
        {
          int v166 = *((_DWORD *)this + 24);
          if (v166
            && (unsigned int v167 = v166 - 1,
                unint64_t v43 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v167),
                *((_WORD *)v43 + 8) == 232))
          {
            *((_DWORD *)this + 24) = v167;
          }
          else
          {
            unint64_t v43 = 0;
          }
          __int16 v168 = 298;
        }
        else
        {
          if (v40 != 113) {
            return v4;
          }
          int v131 = *((_DWORD *)this + 24);
          if (v131
            && (unsigned int v132 = v131 - 1,
                unint64_t v43 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v132),
                *((_WORD *)v43 + 8) == 232))
          {
            *((_DWORD *)this + 24) = v132;
          }
          else
          {
            unint64_t v43 = 0;
          }
          __int16 v168 = 295;
        }
        goto LABEL_261;
      }
      if (v40 != 68)
      {
        if (v40 != 97) {
          return v4;
        }
        int v41 = *((_DWORD *)this + 24);
        if (v41
          && (unsigned int v42 = v41 - 1,
              unint64_t v43 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v42),
              *((_WORD *)v43 + 8) == 232))
        {
          *((_DWORD *)this + 24) = v42;
        }
        else
        {
          unint64_t v43 = 0;
        }
        __int16 v168 = 296;
LABEL_261:
        int v169 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChild(this, v168, v43);
        goto LABEL_268;
      }
      int v162 = *((_DWORD *)this + 24);
      if (v162)
      {
        int v163 = v162 - 1;
        uint64_t v164 = *((void *)this + 11);
        unsigned int v165 = *(swift::Demangle::__runtime::Node **)(v164 + 8 * (v162 - 1));
        if (*((_WORD *)v165 + 8) == 232)
        {
          *((_DWORD *)this + 24) = v163;
          if (v162 == 1) {
            goto LABEL_266;
          }
        }
        else
        {
          unsigned int v165 = 0;
          int v163 = *((_DWORD *)this + 24);
        }
        unsigned int v170 = v163 - 1;
        int v171 = *(swift::Demangle::__runtime::Node **)(v164 + 8 * v170);
        if (*((_WORD *)v171 + 8) == 232)
        {
          *((_DWORD *)this + 24) = v170;
          goto LABEL_267;
        }
      }
      else
      {
        unsigned int v165 = 0;
      }
LABEL_266:
      int v171 = 0;
LABEL_267:
      int v169 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, 297, v171, v165);
LABEL_268:
      return swift::Demangle::__runtime::Demangler::createType(this, v169);
    case 'U':
      __int16 v14 = 245;
      goto LABEL_79;
    case 'X':
    case 'x':
      if (v7 == 88)
      {
        int v9 = *((_DWORD *)this + 24);
        if (!v9) {
          return 0;
        }
        unsigned int v10 = v9 - 1;
        __int16 v11 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v10);
        if (*((_WORD *)v11 + 8) != 43) {
          return 0;
        }
        *((_DWORD *)this + 24) = v10;
        unint64_t v12 = swift::Demangle::__runtime::Demangler::popTypeList(this);
        if (!v12) {
          return 0;
        }
        unint64_t v13 = (swift::Demangle::__runtime::Node *)v12;
      }
      else
      {
        unint64_t v13 = 0;
        __int16 v11 = 0;
      }
      unint64_t v107 = swift::Demangle::__runtime::Demangler::popTypeList(this);
      if (!v107) {
        return 0;
      }
      unint64_t v108 = v107;
      unint64_t v109 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v109;
      if (!v109 || v109 + 24 > *((void *)this + 2))
      {
        unint64_t v110 = 2 * *((void *)this + 4);
        if (v110 <= 0x20) {
          unint64_t v110 = 32;
        }
        *((void *)this + 4) = v110;
        unint64_t v111 = v110 + 8;
        unint64_t v112 = malloc_type_malloc(v110 + 8, 0xD0263BC5uLL);
        __int16 v113 = (char *)v112 + v111;
        *unint64_t v112 = *((void *)this + 3);
        unint64_t v109 = ((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v113;
        *((void *)this + 3) = v112;
      }
      unint64_t v114 = v109 + 24;
      *((void *)this + 1) = v109 + 24;
      *(_WORD *)(v109 + 16) = 212;
      *(unsigned char *)(v109 + 18) = 0;
      uint64_t v115 = *(unsigned __int8 *)(v108 + 18);
      switch(v115)
      {
        case 1:
          break;
        case 5:
          uint64_t v115 = *(unsigned int *)(v108 + 8);
          if (!v115) {
            goto LABEL_234;
          }
          break;
        case 2:
          uint64_t v115 = 2;
          break;
        default:
          goto LABEL_234;
      }
      int v172 = v13;
      unint64_t v133 = 0;
      break;
    case 'Y':
      return swift::Demangle::__runtime::Demangler::demangleAnyGenericType(this, 167);
    case 'Z':
      __int16 v44 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popTypeList(this);
      int v45 = *((_DWORD *)this + 24);
      if (v45
        && (unsigned int v46 = v45 - 1,
            unint64_t v47 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v46),
            *((_WORD *)v47 + 8) == 101))
      {
        *((_DWORD *)this + 24) = v46;
      }
      else
      {
        unint64_t v47 = 0;
      }
      int v116 = swift::Demangle::__runtime::Demangler::popContext(this);
      unint64_t v117 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v117;
      if (!v117 || v117 + 24 > *((void *)this + 2))
      {
        unint64_t v118 = 2 * *((void *)this + 4);
        if (v118 <= 0x20) {
          unint64_t v118 = 32;
        }
        *((void *)this + 4) = v118;
        unint64_t v119 = v118 + 8;
        std::string::size_type v120 = malloc_type_malloc(v118 + 8, 0xD0263BC5uLL);
        void *v120 = *((void *)this + 3);
        unint64_t v117 = ((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v120 + v119;
        *((void *)this + 3) = v120;
      }
      unint64_t v4 = 0;
      *((void *)this + 1) = v117 + 24;
      *(_WORD *)(v117 + 16) = 1;
      *(unsigned char *)(v117 + 18) = 0;
      if (!v47 || !v117) {
        return v4;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v117, v47, this);
      if (!v116) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v117, v116, this);
      if (!v44) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v117, v44, this);
      return v117;
    case 'b':
      int v48 = *((_DWORD *)this + 24);
      if (!v48) {
        return 0;
      }
      unsigned int v49 = v48 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v49);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v49;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v50 = 2 * *((void *)this + 4);
        if (v50 <= 0x20) {
          unint64_t v50 = 32;
        }
        *((void *)this + 4) = v50;
        unint64_t v51 = v50 + 8;
        unint64_t v52 = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
        unint64_t v53 = (char *)v52 + v51;
        void *v52 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v53;
        *((void *)this + 3) = v52;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 210;
      goto LABEL_135;
    case 'c':
      int v54 = *((_DWORD *)this + 24);
      if (v54
        && (unsigned int v55 = v54 - 1,
            uint64_t v56 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v55),
            *((_WORD *)v56 + 8) == 232))
      {
        *((_DWORD *)this + 24) = v55;
      }
      else
      {
        uint64_t v56 = 0;
      }
      unint64_t v121 = swift::Demangle::__runtime::Demangler::demangleProtocolList(this);
      unint64_t v4 = 0;
      if (!v56) {
        return v4;
      }
      __int16 v122 = (swift::Demangle::__runtime::Node *)v121;
      if (!v121) {
        return v4;
      }
      unint64_t v123 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v123;
      if (!v123 || v123 + 24 > *((void *)this + 2))
      {
        unint64_t v124 = 2 * *((void *)this + 4);
        if (v124 <= 0x20) {
          unint64_t v124 = 32;
        }
        *((void *)this + 4) = v124;
        unint64_t v125 = v124 + 8;
        unint64_t v126 = malloc_type_malloc(v124 + 8, 0xD0263BC5uLL);
        *unint64_t v126 = *((void *)this + 3);
        unint64_t v123 = ((unint64_t)v126 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v126 + v125;
        *((void *)this + 3) = v126;
      }
      *((void *)this + 1) = v123 + 24;
      *(_WORD *)(v123 + 16) = 191;
      *(unsigned char *)(v123 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v123, v122, this);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v123, v56, this);
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
        unint64_t v127 = 2 * *((void *)this + 4);
        if (v127 <= 0x20) {
          unint64_t v127 = 32;
        }
        *((void *)this + 4) = v127;
        unint64_t v128 = v127 + 8;
        unint64_t v129 = malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
        int v130 = (char *)v129 + v128;
        *unint64_t v129 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v129 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v130;
        *((void *)this + 3) = v129;
      }
      *((void *)this + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 232;
      *(unsigned char *)(v4 + 18) = 0;
      uint64_t v104 = (swift::Demangle::__runtime::Node *)v4;
      unint64_t v105 = (swift::Demangle::__runtime::Node *)v123;
      goto LABEL_143;
    case 'e':
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || (unint64_t v57 = *((void *)this + 2), v17 + 24 > v57))
      {
        unint64_t v58 = 2 * *((void *)this + 4);
        if (v58 <= 0x20) {
          unint64_t v58 = 32;
        }
        *((void *)this + 4) = v58;
        unint64_t v59 = v58 + 8;
        unint64_t v60 = malloc_type_malloc(v58 + 8, 0xD0263BC5uLL);
        unint64_t v57 = (unint64_t)v60 + v59;
        *unint64_t v60 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v60 + v59;
        *((void *)this + 3) = v60;
      }
      *(_WORD *)(v17 + 16) = 63;
      *(unsigned char *)(v17 + 18) = 0;
      unint64_t v4 = (v17 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (v4) {
        BOOL v61 = v4 + 24 > v57;
      }
      else {
        BOOL v61 = 1;
      }
      if (!v61) {
        goto LABEL_142;
      }
      goto LABEL_139;
    case 'f':
      __int16 v14 = 222;
LABEL_79:
      int v62 = 0;
      goto LABEL_80;
    case 'j':
      return swift::Demangle::__runtime::Demangler::demangleSymbolicExtendedExistentialType(this);
    case 'l':
      unint64_t v4 = swift::Demangle::__runtime::Demangler::demangleProtocolList(this);
      if (!v4) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v63 = 2 * *((void *)this + 4);
        if (v63 <= 0x20) {
          unint64_t v63 = 32;
        }
        *((void *)this + 4) = v63;
        unint64_t v64 = v63 + 8;
        int v65 = malloc_type_malloc(v63 + 8, 0xD0263BC5uLL);
        int v66 = (char *)v65 + v64;
        *int v65 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v66;
        *((void *)this + 3) = v65;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 192;
      goto LABEL_135;
    case 'm':
      unint64_t v67 = swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation(this);
      int v68 = *((_DWORD *)this + 24);
      if (!v68) {
        return 0;
      }
      unsigned int v69 = v68 - 1;
      unint64_t v26 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v69);
      if (*((_WORD *)v26 + 8) != 232) {
        return 0;
      }
      unint64_t v4 = v67;
      *((_DWORD *)this + 24) = v69;
      if (!v67) {
        return v4;
      }
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v70 = 2 * *((void *)this + 4);
        if (v70 <= 0x20) {
          unint64_t v70 = 32;
        }
        *((void *)this + 4) = v70;
        unint64_t v71 = v70 + 8;
        __int16 v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
        unint64_t v73 = (char *)v72 + v71;
        void *v72 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v73;
        *((void *)this + 3) = v72;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v31 = 69;
LABEL_102:
      *(_WORD *)(v17 + 16) = v31;
      *(unsigned char *)(v17 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v17, (swift::Demangle::__runtime::Node *)v4, this);
      unint64_t v74 = (swift::Demangle::__runtime::Node *)v17;
      int v75 = v26;
      goto LABEL_137;
    case 'o':
      int v76 = *((_DWORD *)this + 24);
      if (!v76) {
        return 0;
      }
      unsigned int v77 = v76 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v77);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v77;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v78 = 2 * *((void *)this + 4);
        if (v78 <= 0x20) {
          unint64_t v78 = 32;
        }
        *((void *)this + 4) = v78;
        unint64_t v79 = v78 + 8;
        uint64_t v80 = malloc_type_malloc(v78 + 8, 0xD0263BC5uLL);
        unsigned int v81 = (char *)v80 + v79;
        *uint64_t v80 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v81;
        *((void *)this + 3) = v80;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 248;
      goto LABEL_135;
    case 'p':
      int v82 = *((_DWORD *)this + 24);
      if (!v82) {
        return 0;
      }
      unsigned int v83 = v82 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v83);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v83;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v84 = 2 * *((void *)this + 4);
        if (v84 <= 0x20) {
          unint64_t v84 = 32;
        }
        *((void *)this + 4) = v84;
        unint64_t v85 = v84 + 8;
        unsigned int v86 = malloc_type_malloc(v84 + 8, 0xD0263BC5uLL);
        unint64_t v87 = (char *)v86 + v85;
        *unsigned int v86 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v87;
        *((void *)this + 3) = v86;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 69;
      goto LABEL_135;
    case 'u':
      int v88 = *((_DWORD *)this + 24);
      if (!v88) {
        return 0;
      }
      unsigned int v89 = v88 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v89);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v89;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v90 = 2 * *((void *)this + 4);
        if (v90 <= 0x20) {
          unint64_t v90 = 32;
        }
        *((void *)this + 4) = v90;
        unint64_t v91 = v90 + 8;
        unint64_t v92 = malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
        unint64_t v93 = (char *)v92 + v91;
        void *v92 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v93;
        *((void *)this + 3) = v92;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 249;
      goto LABEL_135;
    case 'w':
      int v94 = *((_DWORD *)this + 24);
      if (!v94) {
        return 0;
      }
      unsigned int v95 = v94 - 1;
      unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v95);
      if (*(_WORD *)(v4 + 16) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v95;
      unint64_t v17 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v17;
      if (!v17 || v17 + 24 > *((void *)this + 2))
      {
        unint64_t v96 = 2 * *((void *)this + 4);
        if (v96 <= 0x20) {
          unint64_t v96 = 32;
        }
        *((void *)this + 4) = v96;
        unint64_t v97 = v96 + 8;
        int v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
        int v99 = (char *)v98 + v97;
        void *v98 = *((void *)this + 3);
        unint64_t v17 = ((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v99;
        *((void *)this + 3) = v98;
      }
      *((void *)this + 1) = v17 + 24;
      __int16 v22 = 247;
LABEL_135:
      *(_WORD *)(v17 + 16) = v22;
      *(unsigned char *)(v17 + 18) = 0;
LABEL_136:
      unint64_t v74 = (swift::Demangle::__runtime::Node *)v17;
      int v75 = (swift::Demangle::__runtime::Node *)v4;
LABEL_137:
      swift::Demangle::__runtime::Node::addChild(v74, v75, this);
      unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v4;
      if (!v4 || v4 + 24 > *((void *)this + 2))
      {
LABEL_139:
        unint64_t v100 = 2 * *((void *)this + 4);
        if (v100 <= 0x20) {
          unint64_t v100 = 32;
        }
        *((void *)this + 4) = v100;
        unint64_t v101 = v100 + 8;
        unint64_t v102 = malloc_type_malloc(v100 + 8, 0xD0263BC5uLL);
        unint64_t v103 = (char *)v102 + v101;
        *unint64_t v102 = *((void *)this + 3);
        unint64_t v4 = ((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v103;
        *((void *)this + 3) = v102;
      }
LABEL_142:
      *((void *)this + 1) = v4 + 24;
      *(_WORD *)(v4 + 16) = 232;
      *(unsigned char *)(v4 + 18) = 0;
      uint64_t v104 = (swift::Demangle::__runtime::Node *)v4;
      unint64_t v105 = (swift::Demangle::__runtime::Node *)v17;
      goto LABEL_143;
    case 'z':
      if (v5 >= v2) {
        return 0;
      }
      *((void *)this + 9) = v1 + 2;
      int v106 = *(char *)(v6 + v5);
      if (v106 == 67)
      {
        __int16 v14 = 22;
        int v62 = 1;
      }
      else
      {
        if (v106 != 66) {
          return 0;
        }
        __int16 v14 = 165;
        int v62 = 1;
      }
LABEL_80:
      return swift::Demangle::__runtime::Demangler::popFunctionType(this, v14, v62);
    default:
      return v4;
  }
  do
  {
    unint64_t v139 = *(unsigned __int8 *)(v108 + 18);
    unsigned int v140 = v139 - 1;
    if (v139 == 1) {
      goto LABEL_201;
    }
    if (v139 != 5)
    {
      if (v139 != 2) {
        goto LABEL_206;
      }
      unint64_t v139 = 2;
LABEL_201:
      if (v139 <= v133) {
        goto LABEL_206;
      }
      goto LABEL_202;
    }
    if (*(unsigned int *)(v108 + 8) <= v133)
    {
LABEL_206:
      unint64_t v142 = 0;
      goto LABEL_207;
    }
LABEL_202:
    unint64_t v141 = v108;
    if (v140 >= 2) {
      unint64_t v141 = *(void *)v108;
    }
    unint64_t v142 = *(void *)(v141 + 8 * v133);
LABEL_207:
    int v143 = *(unsigned __int8 *)(v142 + 18);
    unint64_t v144 = v142;
    if ((v143 - 1) >= 2) {
      unint64_t v144 = *(void *)v142;
    }
    if (*(_WORD *)(*(void *)v144 + 16) == 123)
    {
      if ((v143 - 1) >= 2)
      {
        if (v143 != 5 || !*(_DWORD *)(v142 + 8))
        {
          unint64_t v145 = 0;
LABEL_217:
          int v147 = *((unsigned __int8 *)v145 + 18);
          if ((v147 - 1) >= 2)
          {
            if (v147 != 5 || !*((_DWORD *)v145 + 2)) {
              goto LABEL_228;
            }
            unint64_t v145 = *(swift::Demangle::__runtime::Node **)v145;
          }
          int v148 = *(swift::Demangle::__runtime::Node **)v145;
          if (*(void *)v145)
          {
            unint64_t v142 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 1) = v142;
            if (!v142 || v142 + 24 > *((void *)this + 2))
            {
              unint64_t v149 = 2 * *((void *)this + 4);
              if (v149 <= 0x20) {
                unint64_t v149 = 32;
              }
              *((void *)this + 4) = v149;
              unint64_t v150 = v149 + 8;
              unint64_t v151 = malloc_type_malloc(v149 + 8, 0xD0263BC5uLL);
              unint64_t v152 = (char *)v151 + v150;
              *unint64_t v151 = *((void *)this + 3);
              unint64_t v142 = ((unint64_t)v151 + 15) & 0xFFFFFFFFFFFFFFF8;
              *((void *)this + 2) = v152;
              *((void *)this + 3) = v151;
            }
            *((void *)this + 1) = v142 + 24;
            *(_WORD *)(v142 + 16) = 232;
            *(unsigned char *)(v142 + 18) = 0;
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v142, v148, this);
            goto LABEL_229;
          }
LABEL_228:
          unint64_t v142 = 0;
LABEL_229:
          __int16 v146 = 213;
          goto LABEL_230;
        }
        unint64_t v142 = *(void *)v142;
      }
      unint64_t v145 = *(swift::Demangle::__runtime::Node **)v142;
      goto LABEL_217;
    }
    __int16 v146 = 214;
LABEL_230:
    unint64_t v138 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v138;
    if (!v138 || v138 + 24 > *((void *)this + 2))
    {
      unint64_t v134 = 2 * *((void *)this + 4);
      if (v134 <= 0x20) {
        unint64_t v134 = 32;
      }
      *((void *)this + 4) = v134;
      unint64_t v135 = v134 + 8;
      int v136 = malloc_type_malloc(v134 + 8, 0xD0263BC5uLL);
      uint64_t v137 = (char *)v136 + v135;
      *int v136 = *((void *)this + 3);
      unint64_t v138 = ((unint64_t)v136 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v137;
      *((void *)this + 3) = v136;
    }
    *((void *)this + 1) = v138 + 24;
    *(_WORD *)(v138 + 16) = v146;
    *(unsigned char *)(v138 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v138, (swift::Demangle::__runtime::Node *)v142, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v109, (swift::Demangle::__runtime::Node *)v138, this);
    ++v133;
  }
  while (v115 != v133);
  unint64_t v114 = *((void *)this + 1);
  unint64_t v13 = v172;
LABEL_234:
  unint64_t v153 = (v114 + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v153;
  if (!v153 || v153 + 24 > *((void *)this + 2))
  {
    unint64_t v154 = 2 * *((void *)this + 4);
    if (v154 <= 0x20) {
      unint64_t v154 = 32;
    }
    *((void *)this + 4) = v154;
    unint64_t v155 = v154 + 8;
    int v156 = malloc_type_malloc(v154 + 8, 0xD0263BC5uLL);
    int v157 = (char *)v156 + v155;
    *int v156 = *((void *)this + 3);
    unint64_t v153 = ((unint64_t)v156 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v157;
    *((void *)this + 3) = v156;
  }
  *((void *)this + 1) = v153 + 24;
  *(_WORD *)(v153 + 16) = 211;
  *(unsigned char *)(v153 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v153, (swift::Demangle::__runtime::Node *)v109, this);
  if (v11)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v153, v11, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v153, v13, this);
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v158 = 2 * *((void *)this + 4);
    if (v158 <= 0x20) {
      unint64_t v158 = 32;
    }
    *((void *)this + 4) = v158;
    unint64_t v159 = v158 + 8;
    unsigned int v160 = malloc_type_malloc(v158 + 8, 0xD0263BC5uLL);
    int v161 = (char *)v160 + v159;
    *unsigned int v160 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v161;
    *((void *)this + 3) = v160;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 232;
  *(unsigned char *)(v4 + 18) = 0;
  uint64_t v104 = (swift::Demangle::__runtime::Node *)v4;
  unint64_t v105 = (swift::Demangle::__runtime::Node *)v153;
LABEL_143:
  swift::Demangle::__runtime::Node::addChild(v104, v105, this);
  return v4;
}

uint64_t anonymous namespace'::isEntity(int a1)
{
  if (a1 == 232) {
    return 1;
  }
  else {
    return swift::Demangle::__runtime::isContext();
  }
}

unint64_t swift::Demangle::__runtime::Demangler::popFunctionType(swift::Demangle::__runtime::Demangler *this, __int16 a2, int a3)
{
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)this + 2))
  {
    unint64_t v7 = 2 * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    int v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unsigned int v10 = (char *)v9 + v8;
    *int v9 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }
  *((void *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = a2;
  *(unsigned char *)(v6 + 18) = 0;
  if (a3)
  {
    __int16 v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleClangType(this);
    if (v11) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v11, this);
    }
  }
  int v12 = *((_DWORD *)this + 24);
  if (v12)
  {
    unint64_t v13 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
    if (*((_WORD *)v13 + 8) != 349
      || (*((_DWORD *)this + 24) = v12 - 1,
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v13, this),
          (int v12 = *((_DWORD *)this + 24)) != 0))
    {
      __int16 v14 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
      if (*((_WORD *)v14 + 8) != 67
        || (*((_DWORD *)this + 24) = v12 - 1,
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v14, this),
            (int v12 = *((_DWORD *)this + 24)) != 0))
      {
        int v15 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
        if (*((_WORD *)v15 + 8) != 129
          || (*((_DWORD *)this + 24) = v12 - 1,
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v15, this),
              (int v12 = *((_DWORD *)this + 24)) != 0))
        {
          unsigned int v16 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
          if (*((_WORD *)v16 + 8) != 130
            || (*((_DWORD *)this + 24) = v12 - 1,
                swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v16, this),
                (int v12 = *((_DWORD *)this + 24)) != 0))
          {
            unint64_t v17 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
            if (*((_WORD *)v17 + 8) != 68
              || (*((_DWORD *)this + 24) = v12 - 1,
                  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v17, this),
                  (int v12 = *((_DWORD *)this + 24)) != 0))
            {
              unint64_t v18 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
              if ((*((_WORD *)v18 + 8) & 0xFFFE) != 0x110
                || (*((_DWORD *)this + 24) = v12 - 1,
                    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v18, this),
                    (int v12 = *((_DWORD *)this + 24)) != 0))
              {
                unint64_t v19 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v12 - 1));
                if (*((_WORD *)v19 + 8) != 66
                  || (*((_DWORD *)this + 24) = v12 - 1,
                      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v19, this),
                      (int v12 = *((_DWORD *)this + 24)) != 0))
                {
                  unsigned int v20 = v12 - 1;
                  BOOL v21 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v20);
                  if (*((_WORD *)v21 + 8) == 271)
                  {
                    *((_DWORD *)this + 24) = v20;
                    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v21, this);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __int16 v22 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParams((uint64_t)this, 3);
  if (v22) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v22, this);
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v23 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParams((uint64_t)this, 207);
  unint64_t v24 = 0;
  if (v6 && v23)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, v23, this);
    unint64_t v24 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v24;
    if (!v24 || v24 + 24 > *((void *)this + 2))
    {
      unint64_t v25 = 2 * *((void *)this + 4);
      if (v25 <= 0x20) {
        unint64_t v25 = 32;
      }
      *((void *)this + 4) = v25;
      unint64_t v26 = v25 + 8;
      unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      unint64_t v28 = (char *)v27 + v26;
      *unint64_t v27 = *((void *)this + 3);
      unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v28;
      *((void *)this + 3) = v27;
    }
    *((void *)this + 1) = v24 + 24;
    *(_WORD *)(v24 + 16) = 232;
    *(unsigned char *)(v24 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v24, (swift::Demangle::__runtime::Node *)v6, this);
  }
  return v24;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleFunctionEntity(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 < *((void *)this + 8))
  {
    unint64_t v3 = 0;
    *((void *)this + 9) = v1 + 1;
    int v4 = *(char *)(*((void *)this + 7) + v1) - 65;
    __int16 v5 = 0;
    int v6 = 0;
    __int16 v7 = 70;
    __int16 v8 = 31;
    int v9 = 0;
    unsigned int v10 = 0;
    switch(v4)
    {
      case 0:
        unint64_t v3 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        int v9 = 0;
        unsigned int v10 = 0;
        int v6 = 3;
        __int16 v8 = 33;
        goto LABEL_35;
      case 2:
        goto LABEL_11;
      case 3:
        goto LABEL_35;
      case 4:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 104;
        goto LABEL_35;
      case 12:
        return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleMacroExpansion(this);
      case 15:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 178;
        goto LABEL_35;
      case 20:
        goto LABEL_24;
      case 22:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 179;
        goto LABEL_35;
      case 34:
        __int16 v5 = 29;
LABEL_11:
        __int16 v8 = v5;
        int v12 = *((_DWORD *)this + 24);
        if (v12)
        {
          int v13 = v12 - 1;
          uint64_t v14 = *((void *)this + 11);
          unint64_t v3 = *(void *)(v14 + 8 * (v12 - 1));
          if (*(_WORD *)(v3 + 16) == 176)
          {
            *((_DWORD *)this + 24) = v13;
            if (v12 == 1) {
              goto LABEL_33;
            }
          }
          else
          {
            unint64_t v3 = 0;
            int v13 = *((_DWORD *)this + 24);
          }
          unsigned int v18 = v13 - 1;
          int v9 = *(swift::Demangle::__runtime::Node **)(v14 + 8 * v18);
          if (*((_WORD *)v9 + 8) == 232)
          {
            *((_DWORD *)this + 24) = v18;
            goto LABEL_34;
          }
        }
        else
        {
          unint64_t v3 = 0;
        }
LABEL_33:
        int v9 = 0;
LABEL_34:
        unsigned int v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v9);
        int v6 = 1;
LABEL_35:
        unint64_t v19 = (swift::Demangle::__runtime::Node *)v3;
        unsigned int v20 = swift::Demangle::__runtime::Demangler::popContext(this);
        if (v20)
        {
          BOOL v21 = v20;
          unint64_t v22 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 1) = v22;
          if (!v22 || v22 + 24 > *((void *)this + 2))
          {
            unint64_t v23 = 2 * *((void *)this + 4);
            if (v23 <= 0x20) {
              unint64_t v23 = 32;
            }
            *((void *)this + 4) = v23;
            unint64_t v24 = v23 + 8;
            unint64_t v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
            unint64_t v26 = (char *)v25 + v24;
            *unint64_t v25 = *((void *)this + 3);
            unint64_t v22 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
            *((void *)this + 2) = v26;
            *((void *)this + 3) = v25;
          }
          *((void *)this + 1) = v22 + 24;
          *(_WORD *)(v22 + 16) = v8;
          *(unsigned char *)(v22 + 18) = 0;
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v22, v21, this);
          if (v6 != 1)
          {
LABEL_42:
            if (v6 == 2)
            {
              unint64_t v3 = 0;
              if (!v19 || !v22) {
                return (swift::Demangle::__runtime::Node *)v3;
              }
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v22, v19, this);
              if (!v9) {
                return 0;
              }
              unint64_t v27 = (swift::Demangle::__runtime::Node *)v22;
              unint64_t v28 = v9;
              goto LABEL_59;
            }
            if (v6 == 3)
            {
              unint64_t v3 = 0;
              if (!v19 || !v22) {
                return (swift::Demangle::__runtime::Node *)v3;
              }
              goto LABEL_54;
            }
            return (swift::Demangle::__runtime::Node *)v22;
          }
        }
        else
        {
          unint64_t v22 = 0;
          if (v6 != 1) {
            goto LABEL_42;
          }
        }
        if (v10 && v22) {
          swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v22, v10, this);
        }
        unint64_t v3 = 0;
        if (!v9 || !v22) {
          return (swift::Demangle::__runtime::Node *)v3;
        }
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v22, v9, this);
        if (v19)
        {
LABEL_54:
          unint64_t v27 = (swift::Demangle::__runtime::Node *)v22;
          unint64_t v28 = v19;
LABEL_59:
          swift::Demangle::__runtime::Node::addChild(v27, v28, this);
        }
        return (swift::Demangle::__runtime::Node *)v22;
      case 35:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 50;
        goto LABEL_35;
      case 36:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 103;
        goto LABEL_35;
      case 40:
        int v6 = 0;
        unint64_t v3 = 0;
        int v9 = 0;
        unsigned int v10 = 0;
        __int16 v8 = 125;
        goto LABEL_35;
      case 44:
        __int16 v15 = 138;
        goto LABEL_20;
      case 47:
        __int16 v15 = 262;
LABEL_20:
        return swift::Demangle::__runtime::Demangler::demangleEntity(this, v15);
      case 52:
        __int16 v7 = 117;
LABEL_24:
        unint64_t v3 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
        int v16 = *((_DWORD *)this + 24);
        if (v16
          && (unsigned int v17 = v16 - 1,
              int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v17),
              *((_WORD *)v9 + 8) == 232))
        {
          unsigned int v10 = 0;
          *((_DWORD *)this + 24) = v17;
        }
        else
        {
          int v9 = 0;
          unsigned int v10 = 0;
        }
        int v6 = 2;
        __int16 v8 = v7;
        goto LABEL_35;
      default:
        return (swift::Demangle::__runtime::Node *)v3;
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleRetroactiveConformance(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
  int v3 = *((_DWORD *)this + 24);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = v3 - 1;
  __int16 v5 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v4);
  unsigned int v6 = v5[8];
  BOOL v7 = v6 > 0x31;
  uint64_t v8 = (1 << v6) & 0x380000C000000;
  if (v7 || v8 == 0) {
    return 0;
  }
  unsigned int v10 = (swift::Demangle::__runtime::Node *)v2;
  *((_DWORD *)this + 24) = v4;
  if (!v2) {
    return 0;
  }
  unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v11;
  if (!v11 || v11 + 24 > *((void *)this + 2))
  {
    unint64_t v12 = 2 * *((void *)this + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)this + 4) = v12;
    unint64_t v13 = v12 + 8;
    uint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    __int16 v15 = (char *)v14 + v13;
    *uint64_t v14 = *((void *)this + 3);
    unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v14;
  }
  *((void *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 206;
  *(unsigned char *)(v11 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v10, this);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, (swift::Demangle::__runtime::Node *)v5, this);
  return v11;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleSubscript(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (v2)
  {
    int v3 = v2 - 1;
    uint64_t v4 = *((void *)this + 11);
    __int16 v5 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * (v2 - 1));
    if (*((_WORD *)v5 + 8) == 176)
    {
      *((_DWORD *)this + 24) = v3;
      if (v2 == 1) {
        goto LABEL_9;
      }
    }
    else
    {
      __int16 v5 = 0;
      int v3 = *((_DWORD *)this + 24);
    }
    unsigned int v6 = v3 - 1;
    BOOL v7 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * v6);
    if (*((_WORD *)v7 + 8) == 232)
    {
      *((_DWORD *)this + 24) = v6;
      goto LABEL_10;
    }
  }
  else
  {
    __int16 v5 = 0;
  }
LABEL_9:
  BOOL v7 = 0;
LABEL_10:
  uint64_t v8 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v7);
  int v9 = swift::Demangle::__runtime::Demangler::popContext(this);
  if (!v7) {
    return 0;
  }
  unsigned int v10 = v9;
  unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v11;
  if (!v11 || v11 + 24 > *((void *)this + 2))
  {
    unint64_t v12 = 2 * *((void *)this + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)this + 4) = v12;
    unint64_t v13 = v12 + 8;
    uint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    __int16 v15 = (char *)v14 + v13;
    *uint64_t v14 = *((void *)this + 3);
    unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v14;
  }
  int v16 = 0;
  *((void *)this + 1) = v11 + 24;
  *(_WORD *)(v11 + 16) = 220;
  *(unsigned char *)(v11 + 18) = 0;
  if (v10 && v11)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v10, this);
    if (v8) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v8, this);
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v7, this);
    if (v5) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, v5, this);
    }
    int v16 = (swift::Demangle::__runtime::Node *)v11;
  }
  unsigned int v17 = setParentForOpaqueReturnTypeNodes(this, v16, v7);

  return swift::Demangle::__runtime::Demangler::demangleAccessor(this, v17);
}

uint64_t swift::Demangle::__runtime::Demangler::demangleGenericSignature(swift::Demangle::__runtime::Demangler *this, int a2)
{
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || (unint64_t v5 = *((void *)this + 2), v4 + 24 > v5))
  {
    unint64_t v6 = 2 * *((void *)this + 4);
    if (v6 <= 0x20) {
      unint64_t v6 = 32;
    }
    *((void *)this + 4) = v6;
    unint64_t v7 = v6 + 8;
    uint64_t v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
    unint64_t v5 = (unint64_t)v8 + v7;
    *uint64_t v8 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v5;
    *((void *)this + 3) = v8;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = 43;
  *(unsigned char *)(v4 + 18) = 0;
  if (!a2)
  {
    unint64_t v22 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v22;
    if (v22) {
      BOOL v23 = v22 + 24 > v5;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23)
    {
      unint64_t v24 = 2 * *((void *)this + 4);
      if (v24 <= 0x20) {
        unint64_t v24 = 32;
      }
      *((void *)this + 4) = v24;
      unint64_t v25 = v24 + 8;
      unint64_t v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      *unint64_t v26 = *((void *)this + 3);
      unint64_t v22 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v26 + v25;
      *((void *)this + 3) = v26;
    }
    *((void *)this + 1) = v22 + 24;
    *(_WORD *)(v22 + 16) = 37;
    *(unsigned char *)(v22 + 18) = 4;
    *(void *)unint64_t v22 = 1;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v22, this);
LABEL_39:
    uint64_t v27 = *(unsigned __int8 *)(v4 + 18);
    uint64_t v28 = v27;
    if (v27 != 1)
    {
      if (v27 != 5)
      {
        if (v27 == 2)
        {
          uint64_t v28 = 2;
          int v29 = *((_DWORD *)this + 24);
          if (!v29) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v28 = 0;
          int v29 = *((_DWORD *)this + 24);
          if (!v29) {
            goto LABEL_49;
          }
        }
        goto LABEL_54;
      }
      uint64_t v28 = *(unsigned int *)(v4 + 8);
    }
    int v29 = *((_DWORD *)this + 24);
    if (!v29)
    {
LABEL_49:
      if (v27 != 5) {
        goto LABEL_50;
      }
      goto LABEL_58;
    }
    do
    {
LABEL_54:
      int v30 = v29 - 1;
      __int16 v31 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * (v29 - 1));
      int v32 = v31[8];
      if ((v32 - 39) >= 4 && v32 != 354 && v32 != 36) {
        break;
      }
      *((_DWORD *)this + 24) = v30;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v31, this);
      int v29 = *((_DWORD *)this + 24);
    }
    while (v29);
    LODWORD(v27) = *(unsigned __int8 *)(v4 + 18);
    if (v27 != 5)
    {
LABEL_50:
      if (v27 == 2 && !v28) {
        *(int8x16_t *)unint64_t v4 = vextq_s8(*(int8x16_t *)v4, *(int8x16_t *)v4, 8uLL);
      }
      return v4;
    }
LABEL_58:
    uint64_t v33 = *(unsigned int *)(v4 + 8);
    if (v28 != v33)
    {
      unsigned int v34 = (void *)(*(void *)v4 + 8 * v33 - 8);
      if ((unint64_t)v34 > *(void *)v4 + 8 * v28)
      {
        unint64_t v35 = *(void *)v4 + 8 * v28 + 8;
        do
        {
          uint64_t v36 = *(void *)(v35 - 8);
          *(void *)(v35 - 8) = *v34;
          *v34-- = v36;
          BOOL v37 = v35 >= (unint64_t)v34;
          v35 += 8;
        }
        while (!v37);
      }
    }
    return v4;
  }
  unint64_t v10 = *((void *)this + 8);
  unint64_t v9 = *((void *)this + 9);
  if (v9 < v10)
  {
    while (1)
    {
      uint64_t v11 = *((void *)this + 7);
      int v12 = *(unsigned __int8 *)(v11 + v9);
      switch(v12)
      {
        case '_':
          *((void *)this + 9) = v9 + 1;
          unsigned int v16 = 1;
          break;
        case 'z':
          unsigned int v16 = 0;
          *((void *)this + 9) = v9 + 1;
          break;
        case 'l':
          *((void *)this + 9) = v9 + 1;
          goto LABEL_39;
        default:
          if ((v12 - 48) > 9) {
            return 0;
          }
          int v13 = 0;
          while (1)
          {
            int v14 = *(unsigned __int8 *)(v11 + v9);
            if ((v14 - 48) > 9) {
              break;
            }
            int v15 = v14 + 10 * v13 - 48;
            if (v15 >= v13)
            {
              *((void *)this + 9) = ++v9;
              int v13 = v15;
              if (v10 != v9) {
                continue;
              }
            }
            return 0;
          }
          uint64_t result = 0;
          if (v13 < 0 || v9 >= v10 || v14 != 95) {
            return result;
          }
          *((void *)this + 9) = v9 + 1;
          unsigned int v16 = v13 + 2;
          break;
      }
      unint64_t v18 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v18;
      if (!v18 || v18 + 24 > *((void *)this + 2))
      {
        unint64_t v19 = 2 * *((void *)this + 4);
        if (v19 <= 0x20) {
          unint64_t v19 = 32;
        }
        *((void *)this + 4) = v19;
        unint64_t v20 = v19 + 8;
        BOOL v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *BOOL v21 = *((void *)this + 3);
        unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v21 + v20;
        *((void *)this + 3) = v21;
      }
      *((void *)this + 1) = v18 + 24;
      *(_WORD *)(v18 + 16) = 37;
      *(unsigned char *)(v18 + 18) = 4;
      *(void *)unint64_t v18 = v16;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v18, this);
      uint64_t result = 0;
      unint64_t v10 = *((void *)this + 8);
      unint64_t v9 = *((void *)this + 9);
      if (v9 >= v10) {
        return result;
      }
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  unint64_t v4 = *(uint64_t **)(*((void *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v4 + 8) != 101) {
    return 0;
  }
  *((_DWORD *)this + 24) = v3;
  uint64_t v5 = v4[1];
  if (!v5)
  {
    uint64_t v21 = 0;
    unint64_t v7 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = *v4;
  uint64_t v41 = *v4;
  do
  {
    uint64_t v10 = *(char *)(v9 + v6);
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (v10 - 97) > 0x19 || ((0x17007A2uLL >> (v10 - 97))) {
        return 0;
      }
      LOBYTE(v10) = swift::Demangle::__runtime::Demangler::demangleOperatorIdentifier(void)::op_char_table[v10 - 97];
    }
    if (v6 >= v8)
    {
      uint64_t v11 = &v7[v8];
      int v12 = (char *)*((void *)this + 1);
      if (v11 == v12)
      {
        int v14 = v11 + 1;
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v14 <= v13)
        {
          *((void *)this + 1) = v14;
          LODWORD(v15) = 1;
LABEL_6:
          v8 += v15;
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v13 = *((void *)this + 2);
      }
      if (2 * v8 <= 4) {
        uint64_t v15 = 4;
      }
      else {
        uint64_t v15 = 2 * v8;
      }
      uint64_t v16 = v15 + v8;
      if (!v12 || (unint64_t)&v12[v16] > v13)
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        unint64_t v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        unint64_t v20 = (char *)v19 + v18;
        *unint64_t v19 = *((void *)this + 3);
        int v12 = (char *)(v19 + 1);
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19;
      }
      *((void *)this + 1) = &v12[v16];
      if (v8) {
        memcpy(v12, v7, v8);
      }
      unint64_t v7 = v12;
      uint64_t v9 = v41;
      goto LABEL_6;
    }
LABEL_7:
    v7[v6++] = v10;
  }
  while (v5 != v6);
  uint64_t v21 = v6;
LABEL_29:
  unint64_t v22 = *((void *)this + 9);
  if (v22 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v22 + 1;
  int v23 = *(char *)(*((void *)this + 7) + v22);
  if (v23 == 80)
  {
    unint64_t v24 = (void *)((char *)this + 8);
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (result && result + 24 <= *((void *)this + 2))
    {
      __int16 v32 = 173;
      goto LABEL_50;
    }
    unint64_t v33 = 2 * *((void *)this + 4);
    if (v33 <= 0x20) {
      unint64_t v33 = 32;
    }
    *((void *)this + 4) = v33;
    unint64_t v34 = v33 + 8;
    unint64_t v35 = malloc_type_malloc(v33 + 8, 0xD0263BC5uLL);
    uint64_t v36 = *((void *)this + 3);
    *((void *)this + 3) = v35;
    int v30 = (char *)v35 + v34;
    *unint64_t v35 = v36;
    __int16 v31 = v35 + 1;
    __int16 v32 = 173;
    goto LABEL_49;
  }
  if (v23 == 112)
  {
    unint64_t v24 = (void *)((char *)this + 8);
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (result && result + 24 <= *((void *)this + 2))
    {
      __int16 v32 = 175;
      goto LABEL_50;
    }
    unint64_t v37 = 2 * *((void *)this + 4);
    if (v37 <= 0x20) {
      unint64_t v37 = 32;
    }
    *((void *)this + 4) = v37;
    unint64_t v38 = v37 + 8;
    unint64_t v39 = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
    uint64_t v40 = *((void *)this + 3);
    *((void *)this + 3) = v39;
    int v30 = (char *)v39 + v38;
    *unint64_t v39 = v40;
    __int16 v31 = v39 + 1;
    __int16 v32 = 175;
LABEL_49:
    unint64_t result = ((unint64_t)v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v30;
    goto LABEL_50;
  }
  if (v23 != 105) {
    return 0;
  }
  unint64_t v24 = (void *)((char *)this + 8);
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v26 = 2 * *((void *)this + 4);
    if (v26 <= 0x20) {
      unint64_t v26 = 32;
    }
    *((void *)this + 4) = v26;
    unint64_t v27 = v26 + 8;
    uint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    uint64_t v29 = *((void *)this + 3);
    *((void *)this + 3) = v28;
    int v30 = (char *)v28 + v27;
    void *v28 = v29;
    __int16 v31 = v28 + 1;
    __int16 v32 = 124;
    goto LABEL_49;
  }
  __int16 v32 = 124;
LABEL_50:
  *unint64_t v24 = result + 24;
  *(_WORD *)(result + 16) = v32;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v7;
  *(void *)(result + 8) = v21;
  return result;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleGenericParamIndex(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v3 = *((void *)this + 9);
  if (v3 >= v2)
  {
LABEL_10:
    unsigned int v5 = -999;
  }
  else
  {
    uint64_t v4 = *((void *)this + 7);
    switch(*(unsigned char *)(v4 + v3))
    {
      case '_':
        *((void *)this + 9) = v3 + 1;
        unsigned int v5 = 1;
        goto LABEL_11;
      case 'd':
        unint64_t v11 = v3 + 1;
        *((void *)this + 9) = v3 + 1;
        if (v3 + 1 >= v2) {
          goto LABEL_31;
        }
        int v12 = *(unsigned __int8 *)(v4 + v11);
        if (v12 == 95)
        {
          unint64_t v11 = v3 + 2;
          *((void *)this + 9) = v3 + 2;
          unsigned int v9 = 1;
          goto LABEL_32;
        }
        if ((v12 - 48) > 9) {
          goto LABEL_31;
        }
        int v16 = 0;
        while (2)
        {
          int v17 = *(unsigned __int8 *)(v4 + v11);
          if ((v17 - 48) > 9)
          {
            unsigned int v9 = -999;
            if ((v16 & 0x80000000) == 0 && v11 < v2 && v17 == 95)
            {
              *((void *)this + 9) = ++v11;
              unsigned int v9 = v16 + 2;
            }
          }
          else
          {
            int v18 = v17 + 10 * v16 - 48;
            if (v18 >= v16)
            {
              *((void *)this + 9) = ++v11;
              int v16 = v18;
              if (v2 == v11)
              {
                unsigned int v5 = -1000;
                unsigned int v9 = -999;
                goto LABEL_12;
              }
              continue;
            }
LABEL_31:
            unsigned int v9 = -999;
          }
          break;
        }
LABEL_32:
        if (v11 >= v2) {
          goto LABEL_40;
        }
        int v19 = *(unsigned __int8 *)(v4 + v11);
        if (v19 == 95)
        {
          unsigned int v5 = 0;
          *((void *)this + 9) = v11 + 1;
          goto LABEL_12;
        }
        if ((v19 - 48) > 9) {
          goto LABEL_40;
        }
        int v20 = 0;
        while (1)
        {
          int v21 = *(unsigned __int8 *)(v4 + v11);
          if ((v21 - 48) > 9) {
            break;
          }
          int v22 = v21 + 10 * v20 - 48;
          if (v22 >= v20)
          {
            *((void *)this + 9) = ++v11;
            int v20 = v22;
            if (v2 != v11) {
              continue;
            }
          }
LABEL_40:
          unsigned int v5 = -1000;
          goto LABEL_12;
        }
        unsigned int v5 = -1000;
        if ((v20 & 0x80000000) == 0 && v11 < v2 && v21 == 95)
        {
          *((void *)this + 9) = v11 + 1;
          unsigned int v5 = v20 + 1;
        }
        goto LABEL_12;
      case 's':
        *((void *)this + 9) = v3 + 1;
        uint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = result;
        if (!result || (unint64_t)(result + 24) > *((void *)this + 2))
        {
          unint64_t v13 = 2 * *((void *)this + 4);
          if (v13 <= 0x20) {
            unint64_t v13 = 32;
          }
          *((void *)this + 4) = v13;
          unint64_t v14 = v13 + 8;
          uint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
          *uint64_t v15 = *((void *)this + 3);
          uint64_t result = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v15 + v14;
          *((void *)this + 3) = v15;
        }
        *((void *)this + 1) = result + 24;
        *(_WORD *)(result + 16) = 85;
        *(unsigned char *)(result + 18) = 0;
        return result;
      case 'z':
        *((void *)this + 9) = v3 + 1;
        unsigned int v9 = 0;
        unsigned int v5 = 0;
        goto LABEL_12;
      default:
        if (*(unsigned __int8 *)(v4 + v3) - 48 > 9) {
          goto LABEL_10;
        }
        int v6 = 0;
        unsigned int v5 = -999;
        break;
    }
    while (1)
    {
      int v7 = *(unsigned __int8 *)(v4 + v3);
      if ((v7 - 48) > 9) {
        break;
      }
      int v8 = v7 + 10 * v6 - 48;
      if (v8 < v6) {
        goto LABEL_10;
      }
      *((void *)this + 9) = ++v3;
      int v6 = v8;
      if (v2 == v3) {
        goto LABEL_11;
      }
    }
    unsigned int v5 = -999;
    if ((v6 & 0x80000000) == 0 && v3 < v2 && v7 == 95)
    {
      *((void *)this + 9) = v3 + 1;
      unsigned int v5 = v6 + 2;
    }
  }
LABEL_11:
  unsigned int v9 = 0;
LABEL_12:

  return swift::Demangle::__runtime::Demangler::getDependentGenericParamType(this, v9, v5);
}

unint64_t swift::Demangle::__runtime::Demangler::popTuple(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unsigned int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    int v6 = (char *)v5 + v4;
    *unsigned int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 223;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v14 = *((_DWORD *)this + 24);
      if (v14
        && (uint64_t v15 = *(void *)(*((void *)this + 11) + 8 * (v14 - 1)), *(_WORD *)(v15 + 16) == 275))
      {
        *((_DWORD *)this + 24) = --v14;
      }
      else
      {
        uint64_t v15 = 0;
      }
      unint64_t v16 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v16;
      if (!v16 || v16 + 24 > *((void *)this + 2))
      {
        unint64_t v17 = 2 * *((void *)this + 4);
        if (v17 <= 0x20) {
          unint64_t v17 = 32;
        }
        *((void *)this + 4) = v17;
        unint64_t v18 = v17 + 8;
        int v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
        int v20 = (char *)v19 + v18;
        *int v19 = *((void *)this + 3);
        unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v19;
        int v14 = *((_DWORD *)this + 24);
      }
      *((void *)this + 1) = v16 + 24;
      *(_WORD *)(v16 + 16) = 224;
      *(unsigned char *)(v16 + 18) = 0;
      if (!v14) {
        return 0;
      }
      int v21 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v14 - 1));
      if (*((_WORD *)v21 + 8) == 276)
      {
        *((_DWORD *)this + 24) = v14 - 1;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v16, v21, this);
        int v14 = *((_DWORD *)this + 24);
        if (!v14) {
          return 0;
        }
      }
      int v22 = *(long long **)(*((void *)this + 11) + 8 * (v14 - 1));
      if (*((_WORD *)v22 + 8) == 101)
      {
        *((_DWORD *)this + 24) = v14 - 1;
        long long v23 = *v22;
        unint64_t v24 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v24;
        if (!v24 || v24 + 24 > *((void *)this + 2))
        {
          unint64_t v25 = 2 * *((void *)this + 4);
          if (v25 <= 0x20) {
            unint64_t v25 = 32;
          }
          *((void *)this + 4) = v25;
          unint64_t v26 = v25 + 8;
          long long v37 = v23;
          unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
          long long v23 = v37;
          *unint64_t v27 = *((void *)this + 3);
          unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v27 + v26;
          *((void *)this + 3) = v27;
        }
        *((void *)this + 1) = v24 + 24;
        *(_WORD *)(v24 + 16) = 225;
        *(unsigned char *)(v24 + 18) = 3;
        *(_OWORD *)unint64_t v24 = v23;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v16, (swift::Demangle::__runtime::Node *)v24, this);
        int v14 = *((_DWORD *)this + 24);
        if (!v14) {
          return 0;
        }
      }
      unsigned int v28 = v14 - 1;
      uint64_t v29 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v28);
      if (*((_WORD *)v29 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v28;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v16, v29, this);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v16, this);
    }
    while (!v15);
    int v30 = *(unsigned __int8 *)(v2 + 18);
    if (v30 == 5)
    {
      uint64_t v32 = *(unsigned int *)(v2 + 8);
      if (v32)
      {
        unint64_t v33 = (void *)(*(void *)v2 + 8 * v32 - 8);
        if ((unint64_t)v33 > *(void *)v2)
        {
          unint64_t v34 = *(void *)v2 + 8;
          do
          {
            uint64_t v35 = *(void *)(v34 - 8);
            *(void *)(v34 - 8) = *v33;
            *v33-- = v35;
            BOOL v36 = v34 >= (unint64_t)v33;
            v34 += 8;
          }
          while (!v36);
        }
      }
    }
    else if (v30 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    unint64_t v13 = (char *)v12 + v11;
    void *v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 232;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, (swift::Demangle::__runtime::Node *)v2, this);
  return v9;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleGenericType(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  uint64_t v4 = *((void *)this + 11);
  unsigned int v5 = *(unsigned __int16 **)(v4 + 8 * (v1 - 1));
  int v6 = v5[8];
  if (v6 == 232)
  {
    unint64_t v14 = 0;
    *((_DWORD *)this + 24) = v3;
    return v14;
  }
  if (v6 != 43) {
    return 0;
  }
  *((_DWORD *)this + 24) = v3;
  if (v1 == 1) {
    return 0;
  }
  unsigned int v7 = v1 - 2;
  unsigned int v8 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * v7);
  if (*((_WORD *)v8 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v7;
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    unint64_t v13 = (char *)v12 + v11;
    void *v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 44;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, (swift::Demangle::__runtime::Node *)v5, this);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, v8, this);
  unint64_t v14 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v14;
  if (!v14 || v14 + 24 > *((void *)this + 2))
  {
    unint64_t v15 = 2 * *((void *)this + 4);
    if (v15 <= 0x20) {
      unint64_t v15 = 32;
    }
    *((void *)this + 4) = v15;
    unint64_t v16 = v15 + 8;
    unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    unint64_t v18 = (char *)v17 + v16;
    *unint64_t v17 = *((void *)this + 3);
    unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v18;
    *((void *)this + 3) = v17;
  }
  *((void *)this + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = 232;
  *(unsigned char *)(v14 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v9, this);
  return v14;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleValueWitness(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v3 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v3)
  {
    char v4 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    char v4 = *(unsigned char *)(*((void *)this + 7) + v2++);
  }
  LOBYTE(v21) = v4;
  if (v2 >= v3)
  {
    char v5 = 0;
  }
  else
  {
    *((void *)this + 9) = v2 + 1;
    char v5 = *(unsigned char *)(*((void *)this + 7) + v2);
  }
  HIBYTE(v21) = v5;
  switch(v21)
  {
    case 0x6C61u:
      uint64_t v6 = 0;
      break;
    case 0x6163u:
      uint64_t v6 = 1;
      break;
    case 0x6174u:
      uint64_t v6 = 2;
      break;
    case 0x6564u:
      uint64_t v6 = 3;
      break;
    case 0x7878u:
      uint64_t v6 = 4;
      break;
    case 0x5858u:
      uint64_t v6 = 5;
      break;
    case 0x7858u:
      uint64_t v6 = 6;
      break;
    case 0x5043u:
      uint64_t v6 = 7;
      break;
    case 0x7043u:
      uint64_t v6 = 8;
      break;
    case 0x7063u:
      uint64_t v6 = 9;
      break;
    case 0x6B54u:
      uint64_t v6 = 10;
      break;
    case 0x6B74u:
      uint64_t v6 = 11;
      break;
    case 0x7270u:
      uint64_t v6 = 12;
      break;
    case 0x4B54u:
      uint64_t v6 = 13;
      break;
    case 0x6343u:
      uint64_t v6 = 14;
      break;
    case 0x7454u:
      uint64_t v6 = 15;
      break;
    case 0x5474u:
      uint64_t v6 = 16;
      break;
    case 0x7378u:
      uint64_t v6 = 17;
      break;
    case 0x6778u:
      uint64_t v6 = 18;
      break;
    case 0x6775u:
      uint64_t v6 = 19;
      break;
    case 0x7075u:
      uint64_t v6 = 20;
      break;
    case 0x6975u:
      uint64_t v6 = 21;
      break;
    case 0x7465u:
      uint64_t v6 = 22;
      break;
    default:
      if (bswap32(v21) >> 16 != 29556) {
        return 0;
      }
      uint64_t v6 = 23;
      break;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || (unint64_t v8 = *((void *)this + 2), v7 + 24 > v8))
  {
    unint64_t v9 = 2 * *((void *)this + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    *((void *)this + 4) = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    unint64_t v8 = (unint64_t)v11 + v10;
    void *v11 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v11;
  }
  *(_WORD *)(v7 + 16) = 252;
  *(unsigned char *)(v7 + 18) = 0;
  unint64_t v12 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v12;
  if (v12) {
    BOOL v13 = v12 + 24 > v8;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    unint64_t v14 = 2 * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    *unint64_t v16 = *((void *)this + 3);
    unint64_t v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v16 + v15;
    *((void *)this + 3) = v16;
  }
  *((void *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = 102;
  *(unsigned char *)(v12 + 18) = 4;
  *(void *)unint64_t v12 = v6;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v12, this);
  int v17 = *((_DWORD *)this + 24);
  if (!v17) {
    return 0;
  }
  unsigned int v18 = v17 - 1;
  int v19 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v18);
  if (*((_WORD *)v19 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v18;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v19, this);
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::getDependentGenericParamType(swift::Demangle::__runtime::Demangler *this, unsigned int a2, unsigned int a3)
{
  if (((a3 | a2) & 0x80000000) != 0) {
    return 0;
  }
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || (unint64_t v7 = *((void *)this + 2), v6 + 24 > v7))
  {
    unint64_t v8 = 2 * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    unint64_t v7 = (unint64_t)v10 + v9;
    *unint64_t v10 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v10;
  }
  *(_WORD *)(v6 + 16) = 38;
  *(unsigned char *)(v6 + 18) = 0;
  uint64_t v11 = a2;
  unint64_t v12 = (v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v12;
  if (v12) {
    BOOL v13 = v12 + 24 > v7;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    unint64_t v14 = 2 * *((void *)this + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32;
    }
    *((void *)this + 4) = v14;
    unint64_t v15 = v14 + 8;
    unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    *unint64_t v16 = *((void *)this + 3);
    unint64_t v12 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v16 + v15;
    *((void *)this + 3) = v16;
  }
  *((void *)this + 1) = v12 + 24;
  *(_WORD *)(v12 + 16) = 102;
  *(unsigned char *)(v12 + 18) = 4;
  *(void *)unint64_t v12 = v11;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, (swift::Demangle::__runtime::Node *)v12, this);
  uint64_t v17 = a3;
  unint64_t v18 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v18;
  if (!v18 || v18 + 24 > *((void *)this + 2))
  {
    unint64_t v19 = 2 * *((void *)this + 4);
    if (v19 <= 0x20) {
      unint64_t v19 = 32;
    }
    *((void *)this + 4) = v19;
    unint64_t v20 = v19 + 8;
    unsigned __int16 v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    *unsigned __int16 v21 = *((void *)this + 3);
    unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v21 + v20;
    *((void *)this + 3) = v21;
  }
  *((void *)this + 1) = v18 + 24;
  *(_WORD *)(v18 + 16) = 102;
  *(unsigned char *)(v18 + 18) = 4;
  *(void *)unint64_t v18 = v17;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, (swift::Demangle::__runtime::Node *)v18, this);
  return v6;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleIndex(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 < v2)
  {
    uint64_t v3 = *((void *)this + 7);
    int v4 = *(unsigned __int8 *)(v3 + v1);
    if (v4 == 95)
    {
      *((void *)this + 9) = v1 + 1;
      return 0;
    }
    if ((v4 - 48) <= 9)
    {
      int v6 = 0;
      while (1)
      {
        int v7 = *(unsigned __int8 *)(v3 + v1);
        if ((v7 - 48) > 9) {
          break;
        }
        int v8 = v7 + 10 * v6 - 48;
        if (v8 < v6) {
          return 4294966296;
        }
        *((void *)this + 9) = ++v1;
        int v6 = v8;
        if (v2 == v1)
        {
          unint64_t v1 = v2;
          int v6 = v8;
          break;
        }
      }
      uint64_t v9 = 4294966296;
      if (v6 < 0 || v1 >= v2) {
        return v9;
      }
      if (*(unsigned char *)(v3 + v1) == 95)
      {
        *((void *)this + 9) = v1 + 1;
        return (v6 + 1);
      }
    }
  }
  return 4294966296;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleIndexAsNode(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    uint64_t v6 = 0;
    *((void *)this + 9) = v1 + 1;
    goto LABEL_4;
  }
  if ((v5 - 48) > 9) {
    return 0;
  }
  int v11 = 0;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(v4 + v1);
    if ((v12 - 48) > 9) {
      break;
    }
    int v13 = v12 + 10 * v11 - 48;
    if (v13 >= v11)
    {
      *((void *)this + 9) = ++v1;
      int v11 = v13;
      if (v2 != v1) {
        continue;
      }
    }
    return 0;
  }
  unint64_t result = 0;
  if ((v11 & 0x80000000) == 0 && v1 < v2 && v12 == 95)
  {
    *((void *)this + 9) = v1 + 1;
    uint64_t v6 = (v11 + 1);
LABEL_4:
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v8 = 2 * *((void *)this + 4);
      if (v8 <= 0x20) {
        unint64_t v8 = 32;
      }
      *((void *)this + 4) = v8;
      unint64_t v9 = v8 + 8;
      unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
      *unint64_t v10 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v10 + v9;
      *((void *)this + 3) = v10;
    }
    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 161;
    *(unsigned char *)(result + 18) = 4;
    *(void *)unint64_t result = v6;
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::createSwiftType(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2, const char *a3)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a1, 153, "Swift", 5uLL);
  unint64_t v7 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)a1 + 2))
  {
    unint64_t v8 = 2 * *((void *)a1 + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)a1 + 4) = v8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    int v11 = (char *)v10 + v9;
    *unint64_t v10 = *((void *)a1 + 3);
    unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v11;
    *((void *)a1 + 3) = v10;
  }
  *((void *)a1 + 1) = v7 + 24;
  if (a3) {
    size_t v12 = strlen(a3);
  }
  else {
    size_t v12 = 0;
  }
  *(_WORD *)(v7 + 16) = 101;
  *(unsigned char *)(v7 + 18) = 3;
  *(void *)unint64_t v7 = a3;
  *(void *)(v7 + 8) = v12;
  if (!Node) {
    return 0;
  }
  unint64_t v13 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v13;
  if (!v13 || v13 + 24 > *((void *)a1 + 2))
  {
    unint64_t v14 = 2 * *((void *)a1 + 4);
    if (v14 <= 0x20) {
      unint64_t v14 = 32;
    }
    *((void *)a1 + 4) = v14;
    unint64_t v15 = v14 + 8;
    unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    uint64_t v17 = (char *)v16 + v15;
    *unint64_t v16 = *((void *)a1 + 3);
    unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v17;
    *((void *)a1 + 3) = v16;
  }
  *((void *)a1 + 1) = v13 + 24;
  *(_WORD *)(v13 + 16) = a2;
  *(unsigned char *)(v13 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v13, Node, a1);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v13, (swift::Demangle::__runtime::Node *)v7, a1);
  unint64_t v18 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v18;
  if (!v18 || v18 + 24 > *((void *)a1 + 2))
  {
    unint64_t v19 = 2 * *((void *)a1 + 4);
    if (v19 <= 0x20) {
      unint64_t v19 = 32;
    }
    *((void *)a1 + 4) = v19;
    unint64_t v20 = v19 + 8;
    unsigned __int16 v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    int v22 = (char *)v21 + v20;
    *unsigned __int16 v21 = *((void *)a1 + 3);
    unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v22;
    *((void *)a1 + 3) = v21;
  }
  *((void *)a1 + 1) = v18 + 24;
  *(_WORD *)(v18 + 16) = 232;
  *(unsigned char *)(v18 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v18, (swift::Demangle::__runtime::Node *)v13, a1);
  return v18;
}

unint64_t swift::Demangle::__runtime::Demangler::createStandardSubstitution(swift::Demangle::__runtime::Demangler *this, int a2, int a3)
{
  if (a2 == 65 && a3 != 1)
  {
    uint64_t v3 = "AutoreleasingUnsafeMutablePointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 97 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Array";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 98 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Bool";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 68 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Dictionary";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 100 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Double";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v6 = a3;
  if (a2 == 102) {
    char v7 = a3;
  }
  else {
    char v7 = 1;
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v3 = "Float";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 104) {
    char v6 = 1;
  }
  if ((v6 & 1) == 0)
  {
    uint64_t v3 = "Set";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v8 = a3;
  if (a2 == 73) {
    char v9 = a3;
  }
  else {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v3 = "DefaultIndices";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 105) {
    char v8 = 1;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v3 = "Int";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v10 = a3;
  if (a2 != 74) {
    char v10 = 1;
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v3 = "Character";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 78 && (a3 & 1) == 0)
  {
    uint64_t v3 = "ClosedRange";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 110 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Range";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 79 && (a3 & 1) == 0)
  {
    uint64_t v3 = "ObjectIdentifier";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v11 = a3;
  if (a2 != 80) {
    char v11 = 1;
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v3 = "UnsafePointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 112 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutablePointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 82 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 114 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v12 = a3;
  if (a2 == 83) {
    char v13 = a3;
  }
  else {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    uint64_t v3 = "String";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 115) {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    uint64_t v3 = "Substring";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 117 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UInt";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 86 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeRawPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 118 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableRawPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 87 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeRawBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 119 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsafeMutableRawBufferPointer";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 113 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Optional";
    __int16 v4 = 61;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 66 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BinaryFloatingPoint";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v14 = a3;
  if (a2 == 69) {
    char v15 = a3;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0)
  {
    uint64_t v3 = "Encodable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 101) {
    char v14 = 1;
  }
  if ((v14 & 1) == 0)
  {
    uint64_t v3 = "Decodable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v16 = a3;
  if (a2 == 70) {
    char v17 = a3;
  }
  else {
    char v17 = 1;
  }
  if ((v17 & 1) == 0)
  {
    uint64_t v3 = "FloatingPoint";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 71) {
    char v16 = 1;
  }
  if ((v16 & 1) == 0)
  {
    uint64_t v3 = "RandomNumberGenerator";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 72 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Hashable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 106 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Numeric";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 75 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BidirectionalCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 107 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RandomAccessCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 76 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Comparable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 108 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Collection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v18 = a3;
  if (a2 != 77) {
    char v18 = 1;
  }
  if ((v18 & 1) == 0)
  {
    uint64_t v3 = "MutableCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 109 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RangeReplaceableCollection";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 81 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Equatable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  char v19 = a3;
  if (a2 == 84) {
    char v20 = a3;
  }
  else {
    char v20 = 1;
  }
  if ((v20 & 1) == 0)
  {
    uint64_t v3 = "Sequence";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 != 116) {
    char v19 = 1;
  }
  if ((v19 & 1) == 0)
  {
    uint64_t v3 = "IteratorProtocol";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 85 && (a3 & 1) == 0)
  {
    uint64_t v3 = "UnsignedInteger";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 88 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RangeExpression";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 120 && (a3 & 1) == 0)
  {
    uint64_t v3 = "Strideable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 89 && (a3 & 1) == 0)
  {
    uint64_t v3 = "RawRepresentable";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 121 && (a3 & 1) == 0)
  {
    uint64_t v3 = "StringProtocol";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 90 && (a3 & 1) == 0)
  {
    uint64_t v3 = "SignedInteger";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 122 && (a3 & 1) == 0)
  {
    uint64_t v3 = "BinaryInteger";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 65 && a3)
  {
    uint64_t v3 = "Actor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 67 && a3)
  {
    uint64_t v3 = "CheckedContinuation";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 99 && a3)
  {
    uint64_t v3 = "UnsafeContinuation";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 69 && a3)
  {
    uint64_t v3 = "CancellationError";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 101 && a3)
  {
    uint64_t v3 = "UnownedSerialExecutor";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 70 && a3)
  {
    uint64_t v3 = "Executor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 102 && a3)
  {
    uint64_t v3 = "SerialExecutor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 71 && a3)
  {
    uint64_t v3 = "TaskGroup";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 103 && a3)
  {
    uint64_t v3 = "ThrowingTaskGroup";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 104 && a3)
  {
    uint64_t v3 = "TaskExecutor";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 73 && a3)
  {
    uint64_t v3 = "AsyncIteratorProtocol";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 105 && a3)
  {
    uint64_t v3 = "AsyncSequence";
    __int16 v4 = 180;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 74 && a3)
  {
    uint64_t v3 = "UnownedJob";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 77 && a3)
  {
    uint64_t v3 = "MainActor";
    __int16 v4 = 24;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 80 && a3)
  {
    uint64_t v3 = "TaskPriority";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 83 && a3)
  {
    uint64_t v3 = "AsyncStream";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 115 && a3)
  {
    uint64_t v3 = "AsyncThrowingStream";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 84 && a3)
  {
    uint64_t v3 = "Task";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  if (a2 == 116 && a3)
  {
    uint64_t v3 = "UnsafeCurrentTask";
    __int16 v4 = 219;
    return swift::Demangle::__runtime::Demangler::createSwiftType(this, v4, v3);
  }
  return 0;
}

unsigned int *swift::Demangle::__runtime::Vector<char>::push_back(unsigned int *result, char *a2, void *a3)
{
  __int16 v4 = (const void **)result;
  unsigned int v5 = result[2];
  size_t v6 = result[3];
  char v7 = *(char **)result;
  if (v5 >= v6)
  {
    char v9 = (char *)a3[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = a3[2];
      if (v11 <= v10)
      {
        a3[1] = v11;
        LODWORD(v12) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v12;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = a3[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (!v9 || (unint64_t)&v9[v13] > v10)
    {
      unint64_t v14 = 2 * a3[4];
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      a3[4] = v14;
      unint64_t v15 = v14 + 8;
      unint64_t result = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      char v16 = (char *)result + v15;
      *(void *)unint64_t result = a3[3];
      char v9 = (char *)(result + 2);
      a3[2] = v16;
      a3[3] = result;
    }
    a3[1] = &v9[v13];
    if (v6) {
      unint64_t result = (unsigned int *)memcpy(v9, *v4, v6);
    }
    *__int16 v4 = v9;
    char v7 = v9;
    unsigned int v5 = *((_DWORD *)v4 + 2);
    LODWORD(v6) = *((_DWORD *)v4 + 3);
    goto LABEL_17;
  }
LABEL_18:
  char v17 = *a2;
  *((_DWORD *)v4 + 2) = v5 + 1;
  v7[v5] = v17;
  return result;
}

BOOL anonymous namespace'::isDeclName(int a1)
{
  BOOL result = 1;
  if (((a1 - 173) > 0x3C || ((1 << (a1 + 83)) & 0x100000010000010DLL) == 0)
    && ((a1 - 101) > 0x24 || ((1 << (a1 - 101)) & 0x1000800001) == 0))
  {
    return a1 == 347;
  }
  return result;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::popContext(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  __int16 v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v1 - 1));
  int v5 = *((unsigned __int16 *)v4 + 8);
  if (v5 == 101)
  {
    *((_DWORD *)this + 24) = v3;
    __int16 v4 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v4, 153);
    if (v4) {
      return v4;
    }
    int v1 = *((_DWORD *)this + 24);
    if (!v1) {
      return 0;
    }
  }
  else if (v5 == 153)
  {
    *((_DWORD *)this + 24) = v3;
    return v4;
  }
  int v6 = v1 - 1;
  __int16 v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v4 + 8) != 232)
  {
    if (swift::Demangle::__runtime::isContext())
    {
      *((_DWORD *)this + 24) = v6;
      return v4;
    }
    return 0;
  }
  *((_DWORD *)this + 24) = v6;
  int v7 = *((unsigned __int8 *)v4 + 18);
  if (v7 == 1) {
    goto LABEL_12;
  }
  if (v7 != 5 || *((_DWORD *)v4 + 2) != 1) {
    return 0;
  }
  __int16 v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_12:
  __int16 v4 = *(swift::Demangle::__runtime::Node **)v4;
  if (!swift::Demangle::__runtime::isContext()) {
    return 0;
  }
  return v4;
}

uint64_t *swift::Demangle::__runtime::Demangler::popTypeAndGetAnyGeneric(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v2 = v1 - 1;
  int v3 = *(uint64_t **)(*((void *)this + 11) + 8 * (v1 - 1));
  if (*((_WORD *)v3 + 8) != 232) {
    return 0;
  }
  *((_DWORD *)this + 24) = v2;
  int v4 = *((unsigned __int8 *)v3 + 18);
  if (v4 != 1)
  {
    if (v4 != 5 || *((_DWORD *)v3 + 2) != 1) {
      return 0;
    }
    int v3 = (uint64_t *)*v3;
  }
  int v5 = (uint64_t *)*v3;
  if (!v5) {
    return 0;
  }
  BOOL result = 0;
  unsigned int v7 = *((unsigned __int16 *)v5 + 8);
  if (v7 > 0xB3)
  {
    BOOL v8 = v7 - 180 > 0x36 || ((1 << (v7 + 76)) & 0x60008000000003) == 0;
    if (v8 && v7 != 347) {
      return result;
    }
    return v5;
  }
  BOOL v9 = v7 > 0x3D || ((1 << v7) & 0x2000000001200000) == 0;
  if (!v9 || v7 == 167) {
    return v5;
  }
  return result;
}

uint64_t anonymous namespace'::isAnyGeneric(int a1)
{
  uint64_t result = 1;
  if (a1 <= 179)
  {
    if ((a1 > 0x3D || ((1 << a1) & 0x2000000001200000) == 0) && a1 != 167) {
      return 0;
    }
  }
  else if (((a1 - 180) > 0x36 || ((1 << (a1 + 76)) & 0x60008000000003) == 0) {
         && a1 != 347)
  }
  {
    return 0;
  }
  return result;
}

swift::Demangle::__runtime::Node *setParentForOpaqueReturnTypeNodes(swift::Demangle::__runtime::Demangler *a1, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    unsigned int v7 = *((unsigned __int16 *)a3 + 8);
    if (v7 <= 0xFD)
    {
      if (v7 != 76 && v7 != 220) {
        goto LABEL_14;
      }
      return a2;
    }
    if (v7 == 254) {
      return a2;
    }
    if (v7 != 308)
    {
LABEL_14:
      uint64_t v12 = *((unsigned __int8 *)a3 + 18);
      switch(v12)
      {
        case 1:
LABEL_31:
          unint64_t v17 = 0;
          while (1)
          {
            unint64_t v19 = *((unsigned __int8 *)a3 + 18);
            unsigned int v20 = v19 - 1;
            if (v19 == 1) {
              goto LABEL_38;
            }
            if (v19 != 5) {
              break;
            }
            if (*((unsigned int *)a3 + 2) > v17)
            {
LABEL_41:
              unsigned __int16 v21 = a3;
              if (v20 >= 2) {
                unsigned __int16 v21 = *(swift::Demangle::__runtime::Node **)a3;
              }
              char v18 = (swift::Demangle::__runtime::Node *)*((void *)v21 + v17);
              goto LABEL_33;
            }
LABEL_32:
            char v18 = 0;
LABEL_33:
            setParentForOpaqueReturnTypeNodes(a1, a2, v18);
            if (v12 == ++v17) {
              return a2;
            }
          }
          if (v19 != 2) {
            goto LABEL_32;
          }
          unint64_t v19 = 2;
LABEL_38:
          if (v19 > v17) {
            goto LABEL_41;
          }
          goto LABEL_32;
        case 5:
          uint64_t v12 = *((unsigned int *)a3 + 2);
          if (v12) {
            goto LABEL_31;
          }
          break;
        case 2:
          uint64_t v12 = 2;
          goto LABEL_31;
      }
      return a2;
    }
    int v8 = *((unsigned __int8 *)a3 + 18);
    switch(v8)
    {
      case 1:
        uint64_t v10 = 0;
        break;
      case 2:
        uint64_t v10 = 1;
        break;
      case 5:
        uint64_t v9 = *((unsigned int *)a3 + 2);
        if (!v9) {
          goto LABEL_22;
        }
        uint64_t v10 = v9 - 1;
        unint64_t v11 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_21:
        if (*(_WORD *)(*((void *)v11 + v10) + 16) == 342) {
          return a2;
        }
LABEL_22:
        unint64_t v13 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 1) = v13;
        if (!v13 || v13 + 24 > *((void *)a1 + 2))
        {
          unint64_t v14 = 2 * *((void *)a1 + 4);
          if (v14 <= 0x20) {
            unint64_t v14 = 32;
          }
          *((void *)a1 + 4) = v14;
          unint64_t v15 = v14 + 8;
          char v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
          *char v16 = *((void *)a1 + 3);
          unint64_t v13 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)a1 + 2) = (char *)v16 + v15;
          *((void *)a1 + 3) = v16;
        }
        *((void *)a1 + 1) = v13 + 24;
        *(_WORD *)(v13 + 16) = 342;
        *(unsigned char *)(v13 + 18) = 4;
        *(void *)unint64_t v13 = a2;
        swift::Demangle::__runtime::Node::addChild(a3, (swift::Demangle::__runtime::Node *)v13, a1);
        return a2;
      default:
        goto LABEL_22;
    }
    unint64_t v11 = a3;
    goto LABEL_21;
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleClangType(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  if (*(unsigned __int8 *)(v4 + v1) - 48 > 9) {
    return 0;
  }
  unsigned int v5 = 0;
  while (1)
  {
    int v6 = *(unsigned __int8 *)(v4 + v1);
    if ((v6 - 48) > 9) {
      break;
    }
    int v7 = v6 + 10 * v5 - 48;
    if (v7 < (int)v5) {
      return 0;
    }
    *((void *)this + 9) = ++v1;
    unsigned int v5 = v7;
    if (v2 == v1)
    {
      unint64_t v1 = v2;
      unsigned int v5 = v7;
      break;
    }
  }
  if ((int)v5 < 1) {
    return 0;
  }
  size_t v8 = v5;
  if (v1 + v5 > v2) {
    return 0;
  }
  uint64_t v10 = (const void *)(v4 + v1);
  unint64_t v11 = (char *)*((void *)this + 1);
  if (v11)
  {
    if (v5 <= 4uLL) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = v5;
    }
    if ((unint64_t)&v11[v12] <= *((void *)this + 2))
    {
LABEL_24:
      unint64_t v17 = &v11[v12];
      goto LABEL_26;
    }
LABEL_21:
    unint64_t v13 = 2 * *((void *)this + 4);
    if (v13 <= v12 + 1) {
      unint64_t v13 = v12 + 1;
    }
    *((void *)this + 4) = v13;
    unint64_t v14 = v13 + 8;
    unint64_t v15 = malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
    char v16 = (char *)v15 + v14;
    *unint64_t v15 = *((void *)this + 3);
    unint64_t v11 = (char *)(v15 + 1);
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v15;
    goto LABEL_24;
  }
  if ((unint64_t)v5 > *((void *)this + 2))
  {
    if (v5 <= 4uLL) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = v5;
    }
    goto LABEL_21;
  }
  unint64_t v11 = 0;
  unint64_t v17 = (char *)v5;
LABEL_26:
  *((void *)this + 1) = v17;
  memcpy(v11, v10, v8);
  *((void *)this + 9) += v8;
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v18 = 2 * *((void *)this + 4);
    if (v18 <= 0x20) {
      unint64_t v18 = 32;
    }
    *((void *)this + 4) = v18;
    unint64_t v19 = v18 + 8;
    unsigned int v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
    *unsigned int v20 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v20 + v19;
    *((void *)this + 3) = v20;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 23;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = v11;
  *(void *)(result + 8) = v8;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popFunctionParams(uint64_t a1, __int16 a2)
{
  int v2 = *(_DWORD *)(a1 + 96);
  if (!v2) {
    return 0;
  }
  unsigned int v5 = v2 - 1;
  unint64_t v6 = *(void *)(*(void *)(a1 + 88) + 8 * v5);
  int v7 = *(unsigned __int16 *)(v6 + 16);
  if (v7 != 232)
  {
    if (v7 == 274)
    {
      *(_DWORD *)(a1 + 96) = v5;
      unint64_t v8 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 8) = v8;
      if (!v8 || (unint64_t v9 = *(void *)(a1 + 16), v8 + 24 > v9))
      {
        unint64_t v10 = 2 * *(void *)(a1 + 32);
        if (v10 <= 0x20) {
          unint64_t v10 = 32;
        }
        *(void *)(a1 + 32) = v10;
        unint64_t v11 = v10 + 8;
        uint64_t v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
        unint64_t v9 = (unint64_t)v12 + v11;
        void *v12 = *(void *)(a1 + 24);
        unint64_t v8 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a1 + 16) = (char *)v12 + v11;
        *(void *)(a1 + 24) = v12;
      }
      *(_WORD *)(v8 + 16) = 223;
      *(unsigned char *)(v8 + 18) = 0;
      unint64_t v6 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 8) = v6;
      if (v6) {
        BOOL v13 = v6 + 24 > v9;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        unint64_t v14 = 2 * *(void *)(a1 + 32);
        if (v14 <= 0x20) {
          unint64_t v14 = 32;
        }
        *(void *)(a1 + 32) = v14;
        unint64_t v15 = v14 + 8;
        char v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        unint64_t v17 = (char *)v16 + v15;
        *char v16 = *(void *)(a1 + 24);
        unint64_t v6 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v16;
      }
      *(void *)(a1 + 8) = v6 + 24;
      *(_WORD *)(v6 + 16) = 232;
      *(unsigned char *)(v6 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, (swift::Demangle::__runtime::Node *)v8, (swift::Demangle::__runtime::NodeFactory *)a1);
      goto LABEL_20;
    }
    return 0;
  }
  *(_DWORD *)(a1 + 96) = v5;
LABEL_20:
  unint64_t v18 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a1 + 8) = v18;
  if (!v18 || v18 + 24 > *(void *)(a1 + 16))
  {
    unint64_t v19 = 2 * *(void *)(a1 + 32);
    if (v19 <= 0x20) {
      unint64_t v19 = 32;
    }
    *(void *)(a1 + 32) = v19;
    unint64_t v20 = v19 + 8;
    unsigned __int16 v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
    int v22 = (char *)v21 + v20;
    *unsigned __int16 v21 = *(void *)(a1 + 24);
    unint64_t v18 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 16) = v22;
    *(void *)(a1 + 24) = v21;
  }
  *(void *)(a1 + 8) = v18 + 24;
  *(_WORD *)(v18 + 16) = a2;
  *(unsigned char *)(v18 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v18, (swift::Demangle::__runtime::Node *)v6, (swift::Demangle::__runtime::NodeFactory *)a1);
  return v18;
}

unint64_t swift::Demangle::__runtime::Demangler::popPack(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unsigned int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unsigned int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 226;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v14 = *((_DWORD *)this + 24);
      if (!v14) {
        return 0;
      }
      int v15 = v14 - 1;
      uint64_t v16 = *((void *)this + 11);
      int v17 = *(unsigned __int16 *)(*(void *)(v16 + 8 * (v14 - 1)) + 16);
      if (v17 == 275)
      {
        *((_DWORD *)this + 24) = v15;
        --v14;
        if (!v15) {
          return 0;
        }
      }
      unsigned int v18 = v14 - 1;
      unint64_t v19 = *(swift::Demangle::__runtime::Node **)(v16 + 8 * v18);
      if (*((_WORD *)v19 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v18;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v19, this);
    }
    while (v17 != 275);
    int v20 = *(unsigned __int8 *)(v2 + 18);
    if (v20 == 5)
    {
      uint64_t v22 = *(unsigned int *)(v2 + 8);
      if (v22)
      {
        long long v23 = (void *)(*(void *)v2 + 8 * v22 - 8);
        if ((unint64_t)v23 > *(void *)v2)
        {
          unint64_t v24 = *(void *)v2 + 8;
          do
          {
            uint64_t v25 = *(void *)(v24 - 8);
            *(void *)(v24 - 8) = *v23;
            *v23-- = v25;
            BOOL v26 = v24 >= (unint64_t)v23;
            v24 += 8;
          }
          while (!v26);
        }
      }
    }
    else if (v20 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    uint64_t v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    BOOL v13 = (char *)v12 + v11;
    void *v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 232;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, (swift::Demangle::__runtime::Node *)v2, this);
  return v9;
}

unint64_t swift::Demangle::__runtime::Demangler::popSILPack(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v1 + 1;
  int v3 = *(char *)(*((void *)this + 7) + v1);
  if (v3 == 105)
  {
    unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v4;
    if (v4 && v4 + 24 <= *((void *)this + 2))
    {
      __int16 v9 = 228;
      goto LABEL_15;
    }
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    int v7 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    *int v7 = *((void *)this + 3);
    *((void *)this + 3) = v7;
    unsigned int v8 = (char *)v7 + v11;
    __int16 v9 = 228;
    goto LABEL_14;
  }
  if (v3 != 100) {
    return 0;
  }
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (v4 && v4 + 24 <= *((void *)this + 2))
  {
    __int16 v9 = 227;
    goto LABEL_15;
  }
  unint64_t v5 = 2 * *((void *)this + 4);
  if (v5 <= 0x20) {
    unint64_t v5 = 32;
  }
  *((void *)this + 4) = v5;
  unint64_t v6 = v5 + 8;
  int v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
  *int v7 = *((void *)this + 3);
  *((void *)this + 3) = v7;
  unsigned int v8 = (char *)v7 + v6;
  __int16 v9 = 227;
LABEL_14:
  unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 2) = v8;
LABEL_15:
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = v9;
  *(unsigned char *)(v4 + 18) = 0;
  int v12 = *((_DWORD *)this + 24);
  if (!v12 || (unsigned int v13 = v12 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v13) + 16) != 274))
  {
    while (1)
    {
      int v19 = *((_DWORD *)this + 24);
      if (!v19) {
        return 0;
      }
      int v20 = v19 - 1;
      uint64_t v21 = *((void *)this + 11);
      int v22 = *(unsigned __int16 *)(*(void *)(v21 + 8 * (v19 - 1)) + 16);
      if (v22 == 275)
      {
        *((_DWORD *)this + 24) = v20;
        --v19;
        if (!v20) {
          return 0;
        }
      }
      unsigned int v23 = v19 - 1;
      unint64_t v24 = *(swift::Demangle::__runtime::Node **)(v21 + 8 * v23);
      if (*((_WORD *)v24 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v23;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v24, this);
      if (v22 == 275)
      {
        int v25 = *(unsigned __int8 *)(v4 + 18);
        if (v25 == 5)
        {
          uint64_t v27 = *(unsigned int *)(v4 + 8);
          if (v27)
          {
            unsigned int v28 = (void *)(*(void *)v4 + 8 * v27 - 8);
            if ((unint64_t)v28 > *(void *)v4)
            {
              unint64_t v29 = *(void *)v4 + 8;
              do
              {
                uint64_t v30 = *(void *)(v29 - 8);
                *(void *)(v29 - 8) = *v28;
                *v28-- = v30;
                BOOL v31 = v29 >= (unint64_t)v28;
                v29 += 8;
              }
              while (!v31);
            }
          }
        }
        else if (v25 == 2)
        {
          *(int8x16_t *)unint64_t v4 = vextq_s8(*(int8x16_t *)v4, *(int8x16_t *)v4, 8uLL);
        }
        goto LABEL_18;
      }
    }
  }
  *((_DWORD *)this + 24) = v13;
LABEL_18:
  unint64_t v14 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v14;
  if (!v14 || v14 + 24 > *((void *)this + 2))
  {
    unint64_t v15 = 2 * *((void *)this + 4);
    if (v15 <= 0x20) {
      unint64_t v15 = 32;
    }
    *((void *)this + 4) = v15;
    unint64_t v16 = v15 + 8;
    int v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    unsigned int v18 = (char *)v17 + v16;
    *int v17 = *((void *)this + 3);
    unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v18;
    *((void *)this + 3) = v17;
  }
  *((void *)this + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = 232;
  *(unsigned char *)(v14 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v4, this);
  return v14;
}

unint64_t swift::Demangle::__runtime::Demangler::popTypeList(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 235;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v9 = *((_DWORD *)this + 24);
      if (!v9) {
        return 0;
      }
      int v10 = v9 - 1;
      uint64_t v11 = *((void *)this + 11);
      int v12 = *(unsigned __int16 *)(*(void *)(v11 + 8 * (v9 - 1)) + 16);
      if (v12 == 275)
      {
        *((_DWORD *)this + 24) = v10;
        --v9;
        if (!v10) {
          return 0;
        }
      }
      unsigned int v13 = v9 - 1;
      unint64_t v14 = *(swift::Demangle::__runtime::Node **)(v11 + 8 * v13);
      if (*((_WORD *)v14 + 8) != 232) {
        return 0;
      }
      *((_DWORD *)this + 24) = v13;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v14, this);
    }
    while (v12 != 275);
    int v15 = *(unsigned __int8 *)(v2 + 18);
    if (v15 == 5)
    {
      uint64_t v17 = *(unsigned int *)(v2 + 8);
      if (v17)
      {
        unsigned int v18 = (void *)(*(void *)v2 + 8 * v17 - 8);
        if ((unint64_t)v18 > *(void *)v2)
        {
          unint64_t v19 = *(void *)v2 + 8;
          do
          {
            uint64_t v20 = *(void *)(v19 - 8);
            *(void *)(v19 - 8) = *v18;
            *v18-- = v20;
            BOOL v21 = v19 >= (unint64_t)v18;
            v19 += 8;
          }
          while (!v21);
        }
      }
    }
    else if (v15 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  return v2;
}

unint64_t swift::Demangle::__runtime::Demangler::popAnyProtocolConformanceList(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 2;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7 && (unsigned int v8 = v7 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v8) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v8;
  }
  else
  {
    do
    {
      int v9 = *((_DWORD *)this + 24);
      if (!v9) {
        return 0;
      }
      int v10 = v9 - 1;
      uint64_t v11 = *((void *)this + 11);
      int v12 = *(unsigned __int16 *)(*(void *)(v11 + 8 * (v9 - 1)) + 16);
      if (v12 == 275)
      {
        *((_DWORD *)this + 24) = v10;
        --v9;
        if (!v10) {
          return 0;
        }
      }
      unsigned int v13 = v9 - 1;
      unint64_t v14 = *(unsigned __int16 **)(v11 + 8 * v13);
      unsigned int v15 = v14[8];
      BOOL v16 = v15 > 0x31;
      uint64_t v17 = (1 << v15) & 0x380000C000000;
      if (v16 || v17 == 0) {
        return 0;
      }
      *((_DWORD *)this + 24) = v13;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v14, this);
    }
    while (v12 != 275);
    int v19 = *(unsigned __int8 *)(v2 + 18);
    if (v19 == 5)
    {
      uint64_t v21 = *(unsigned int *)(v2 + 8);
      if (v21)
      {
        int v22 = (void *)(*(void *)v2 + 8 * v21 - 8);
        if ((unint64_t)v22 > *(void *)v2)
        {
          unint64_t v23 = *(void *)v2 + 8;
          do
          {
            uint64_t v24 = *(void *)(v23 - 8);
            *(void *)(v23 - 8) = *v22;
            *v22-- = v24;
            BOOL v25 = v23 >= (unint64_t)v22;
            v23 += 8;
          }
          while (!v25);
        }
      }
    }
    else if (v19 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  return v2;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleRetroactiveProtocolConformanceRef(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2) {
    goto LABEL_5;
  }
  unsigned int v3 = v2 - 1;
  unint64_t v4 = *(void *)(*((void *)this + 11) + 8 * v3);
  int v5 = *(unsigned __int16 *)(v4 + 16);
  if (v5 == 153)
  {
    *((_DWORD *)this + 24) = v3;
    goto LABEL_7;
  }
  if (v5 == 101)
  {
    *((_DWORD *)this + 24) = v3;
    unint64_t v4 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v4, 153);
  }
  else
  {
LABEL_5:
    unint64_t v4 = 0;
  }
LABEL_7:
  unint64_t v6 = swift::Demangle::__runtime::Demangler::popProtocol(this);
  unint64_t v7 = 0;
  if (v4)
  {
    unsigned int v8 = (swift::Demangle::__runtime::Node *)v6;
    if (v6)
    {
      unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v7;
      if (!v7 || v7 + 24 > *((void *)this + 2))
      {
        unint64_t v9 = 2 * *((void *)this + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)this + 4) = v9;
        unint64_t v10 = v9 + 8;
        uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        int v12 = (char *)v11 + v10;
        void *v11 = *((void *)this + 3);
        unint64_t v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v12;
        *((void *)this + 3) = v11;
      }
      *((void *)this + 1) = v7 + 24;
      *(_WORD *)(v7 + 16) = 185;
      *(unsigned char *)(v7 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v8, this);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v4, this);
    }
  }
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleDependentConformanceIndex(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = *((void *)this + 8);
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 7);
  int v5 = *(unsigned __int8 *)(v4 + v1);
  if (v5 == 95)
  {
    unint64_t result = 0;
    *((void *)this + 9) = v1 + 1;
    return result;
  }
  if ((v5 - 48) > 9) {
    return 0;
  }
  int v7 = 0;
  while (1)
  {
    int v8 = *(unsigned __int8 *)(v4 + v1);
    if ((v8 - 48) > 9) {
      break;
    }
    int v9 = v8 + 10 * v7 - 48;
    if (v9 >= v7)
    {
      *((void *)this + 9) = ++v1;
      int v7 = v9;
      if (v2 != v1) {
        continue;
      }
    }
    return 0;
  }
  unint64_t result = 0;
  if ((v7 & 0x80000000) == 0 && v1 < v2 && v8 == 95)
  {
    *((void *)this + 9) = v1 + 1;
    if (v7)
    {
      uint64_t v10 = (v7 - 1);
      unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = result;
      if (!result || result + 24 > *((void *)this + 2))
      {
        unint64_t v11 = 2 * *((void *)this + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32;
        }
        *((void *)this + 4) = v11;
        unint64_t v12 = v11 + 8;
        unsigned int v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        *unsigned int v13 = *((void *)this + 3);
        unint64_t result = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v13 + v12;
        *((void *)this + 3) = v13;
      }
      *((void *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 102;
      *(unsigned char *)(result + 18) = 4;
      *(void *)unint64_t result = v10;
    }
    else
    {
      unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = result;
      if (!result || result + 24 > *((void *)this + 2))
      {
        unint64_t v14 = 2 * *((void *)this + 4);
        if (v14 <= 0x20) {
          unint64_t v14 = 32;
        }
        *((void *)this + 4) = v14;
        unint64_t v15 = v14 + 8;
        BOOL v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        *BOOL v16 = *((void *)this + 3);
        unint64_t result = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = (char *)v16 + v15;
        *((void *)this + 3) = v16;
      }
      *((void *)this + 1) = result + 24;
      *(_WORD *)(result + 16) = 246;
      *(unsigned char *)(result + 18) = 0;
    }
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::popDependentAssociatedConformance(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = swift::Demangle::__runtime::Demangler::popProtocol(this);
  int v3 = *((_DWORD *)this + 24);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = v3 - 1;
  int v5 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v4);
  if (*((_WORD *)v5 + 8) != 232) {
    return 0;
  }
  unint64_t v6 = (swift::Demangle::__runtime::Node *)v2;
  *((_DWORD *)this + 24) = v4;
  if (!v2) {
    return 0;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)this + 2))
  {
    unint64_t v8 = 2 * *((void *)this + 4);
    if (v8 <= 0x20) {
      unint64_t v8 = 32;
    }
    *((void *)this + 4) = v8;
    unint64_t v9 = v8 + 8;
    uint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    unint64_t v11 = (char *)v10 + v9;
    *uint64_t v10 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v11;
    *((void *)this + 3) = v10;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 34;
  *(unsigned char *)(v7 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v5, this);
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v6, this);
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::popRetroactiveConformances(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0;
  while (1)
  {
    unsigned int v8 = v1 - 1;
    unint64_t v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v8);
    if (*((_WORD *)v9 + 8) != 206) {
      break;
    }
    *((_DWORD *)this + 24) = v8;
    if (!v3)
    {
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v4 = 2 * *((void *)this + 4);
        if (v4 <= 0x20) {
          unint64_t v4 = 32;
        }
        *((void *)this + 4) = v4;
        unint64_t v5 = v4 + 8;
        unint64_t v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
        unint64_t v7 = (char *)v6 + v5;
        *unint64_t v6 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v7;
        *((void *)this + 3) = v6;
      }
      *((void *)this + 1) = v3 + 24;
      *(_WORD *)(v3 + 16) = 235;
      *(unsigned char *)(v3 + 18) = 0;
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, v9, this);
    int v1 = *((_DWORD *)this + 24);
    if (!v1) {
      goto LABEL_15;
    }
  }
  if (!v3) {
    return v3;
  }
LABEL_15:
  int v10 = *(unsigned __int8 *)(v3 + 18);
  if (v10 == 5)
  {
    uint64_t v11 = *(unsigned int *)(v3 + 8);
    if (v11)
    {
      unint64_t v12 = (void *)(*(void *)v3 + 8 * v11 - 8);
      if ((unint64_t)v12 > *(void *)v3)
      {
        unint64_t v13 = *(void *)v3 + 8;
        do
        {
          uint64_t v14 = *(void *)(v13 - 8);
          *(void *)(v13 - 8) = *v12;
          *v12-- = v14;
          BOOL v15 = v13 >= (unint64_t)v12;
          v13 += 8;
        }
        while (!v15);
      }
    }
  }
  else if (v10 == 2)
  {
    *(int8x16_t *)unint64_t v3 = vextq_s8(*(int8x16_t *)v3, *(int8x16_t *)v3, 8uLL);
  }
  return v3;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenerics(uint64_t a1, const void **a2, unint64_t *a3)
{
  *a3 = swift::Demangle::__runtime::Demangler::popRetroactiveConformances((swift::Demangle::__runtime::Demangler *)a1);
  while (1)
  {
    int v22 = 0;
    unint64_t v5 = (*(void *)(a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 8) = v5;
    if (!v5 || v5 + 24 > *(void *)(a1 + 16))
    {
      unint64_t v6 = 2 * *(void *)(a1 + 32);
      if (v6 <= 0x20) {
        unint64_t v6 = 32;
      }
      *(void *)(a1 + 32) = v6;
      unint64_t v7 = v6 + 8;
      unsigned int v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
      *unsigned int v8 = *(void *)(a1 + 24);
      unint64_t v5 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 16) = (char *)v8 + v7;
      *(void *)(a1 + 24) = v8;
    }
    *(void *)(a1 + 8) = v5 + 24;
    *(_WORD *)(v5 + 16) = 235;
    *(unsigned char *)(v5 + 18) = 0;
    int v22 = (swift::Demangle::__runtime::Node *)v5;
    swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(a2, (uint64_t *)&v22, (void *)a1);
    for (int i = *(_DWORD *)(a1 + 96); i; int i = *(_DWORD *)(a1 + 96))
    {
      int v10 = *(swift::Demangle::__runtime::Node **)(*(void *)(a1 + 88) + 8 * (i - 1));
      if (*((_WORD *)v10 + 8) != 232) {
        break;
      }
      *(_DWORD *)(a1 + 96) = i - 1;
      swift::Demangle::__runtime::Node::addChild(v22, v10, (swift::Demangle::__runtime::NodeFactory *)a1);
    }
    int v11 = *((unsigned __int8 *)v22 + 18);
    if (v11 == 5)
    {
      unint64_t v12 = *(void *)v22;
      uint64_t v13 = *((unsigned int *)v22 + 2);
      uint64_t v14 = (void *)(*(void *)v22 + 8 * v13 - 8);
      if (v13 && (unint64_t)v14 > v12)
      {
        unint64_t v16 = v12 + 8;
        do
        {
          uint64_t v17 = *(void *)(v16 - 8);
          *(void *)(v16 - 8) = *v14;
          *v14-- = v17;
          BOOL v18 = v16 >= (unint64_t)v14;
          v16 += 8;
        }
        while (!v18);
      }
    }
    else if (v11 == 2)
    {
      *(int8x16_t *)int v22 = vextq_s8(*(int8x16_t *)v22, *(int8x16_t *)v22, 8uLL);
    }
    if (!i) {
      break;
    }
    unsigned int v19 = i - 1;
    int v20 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 88) + 8 * v19) + 16);
    if (v20 != 275)
    {
      if (v20 == 274)
      {
        *(_DWORD *)(a1 + 96) = v19;
        return 1;
      }
      return 0;
    }
    *(_DWORD *)(a1 + 96) = v19;
  }
  return 0;
}

const void **swift::Demangle::__runtime::Vector<swift::Demangle::__runtime::Node *>::push_back(const void **result, uint64_t *a2, void *a3)
{
  unint64_t v4 = result;
  unsigned int v5 = *((_DWORD *)result + 2);
  uint64_t v6 = *((unsigned int *)result + 3);
  unint64_t v7 = (char *)*result;
  if (v5 >= v6)
  {
    unint64_t v9 = &v7[8 * v6];
    int v10 = (char *)a3[1];
    if (v9 == v10)
    {
      unint64_t v12 = v9 + 8;
      unint64_t v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *((_DWORD *)v4 + 3) = v6 + v13;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v11 = a3[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = (2 * v6);
    }
    uint64_t v14 = 8 * (v13 + v6);
    unint64_t v7 = (char *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v7;
    if (!v7 || (unint64_t)&v7[v14] > v11)
    {
      unint64_t v15 = 2 * a3[4];
      if (v15 <= v14 + 8) {
        unint64_t v15 = v14 + 8;
      }
      a3[4] = v15;
      unint64_t v16 = v15 + 8;
      unint64_t result = (const void **)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      uint64_t v17 = (char *)result + v16;
      swift::Demangle::__runtime::Node *result = (const void *)a3[3];
      unint64_t v7 = (char *)(((unint64_t)result + 15) & 0xFFFFFFFFFFFFFFF8);
      a3[2] = v17;
      a3[3] = result;
    }
    a3[1] = &v7[v14];
    if (v6) {
      unint64_t result = (const void **)memcpy(v7, *v4, 8 * v6);
    }
    *unint64_t v4 = v7;
    unsigned int v5 = *((_DWORD *)v4 + 2);
    LODWORD(v6) = *((_DWORD *)v4 + 3);
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v18 = *a2;
  *((_DWORD *)v4 + 2) = v5 + 1;
  *(void *)&v7[8 * v5] = v18;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(swift::Demangle::__runtime::NodeFactory *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = a4;
  unint64_t v6 = *(unsigned int *)(a3 + 8);
  if (v6 <= a4) {
    return 0;
  }
  unint64_t v7 = a2;
  int v9 = *(unsigned __int16 *)(a2 + 16);
  if (v9 == 233 || v9 == 181)
  {
    unint64_t v10 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v10;
    if (!v10 || v10 + 24 > *((void *)a1 + 2))
    {
      unint64_t v11 = 2 * *((void *)a1 + 4);
      if (v11 <= 0x20) {
        unint64_t v11 = 32;
      }
      *((void *)a1 + 4) = v11;
      unint64_t v12 = v11 + 8;
      uint64_t v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
      uint64_t v14 = (char *)v13 + v12;
      *uint64_t v13 = *((void *)a1 + 3);
      unint64_t v10 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v14;
      *((void *)a1 + 3) = v13;
    }
    unint64_t v15 = v10 + 24;
    *((void *)a1 + 1) = v10 + 24;
    *(_WORD *)(v10 + 16) = 235;
    *(unsigned char *)(v10 + 18) = 0;
    unsigned int v16 = *(_DWORD *)(a3 + 8);
    unint64_t v17 = v16 - 1;
    if (v17 >= v4 && v16 != 0)
    {
      while (1)
      {
        uint64_t v20 = *(void *)(*(void *)a3 + 8 * v17);
        int v21 = *(unsigned __int8 *)(v20 + 18);
        int v22 = (swift::Demangle::__runtime::Node **)v20;
        if ((v21 - 1) >= 2)
        {
          if (v21 == 5)
          {
            unint64_t v23 = *(swift::Demangle::__runtime::Node **)v20;
            int v22 = *(swift::Demangle::__runtime::Node ***)v20;
            goto LABEL_29;
          }
          int v22 = 0;
        }
        switch(v21)
        {
          case 1:
            uint64_t v24 = (swift::Demangle::__runtime::Node **)(v20 + 8);
            if (v22 != (swift::Demangle::__runtime::Node **)(v20 + 8)) {
              goto LABEL_36;
            }
            break;
          case 2:
            uint64_t v24 = (swift::Demangle::__runtime::Node **)(v20 + 16);
            if (v22 != (swift::Demangle::__runtime::Node **)(v20 + 16)) {
              goto LABEL_36;
            }
            break;
          case 5:
            unint64_t v23 = *(swift::Demangle::__runtime::Node **)v20;
LABEL_29:
            uint64_t v24 = (swift::Demangle::__runtime::Node **)((char *)v23 + 8 * *(unsigned int *)(v20 + 8));
            if (v22 != v24) {
              goto LABEL_36;
            }
            break;
          default:
            uint64_t v24 = 0;
            if (v22)
            {
              do
              {
LABEL_36:
                BOOL v25 = *v22++;
                swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, v25, a1);
              }
              while (v22 != v24);
              unsigned int v16 = *(_DWORD *)(a3 + 8);
            }
            break;
        }
        unint64_t v17 = (v17 - 1);
        if (v17 < v4 || v16 <= v17)
        {
          unint64_t v15 = *((void *)a1 + 1);
          break;
        }
      }
    }
    unint64_t v29 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v29;
    if (!v29 || v29 + 24 > *((void *)a1 + 2))
    {
      unint64_t v30 = 2 * *((void *)a1 + 4);
      if (v30 <= 0x20) {
        unint64_t v30 = 32;
      }
      *((void *)a1 + 4) = v30;
      unint64_t v31 = v30 + 8;
      uint64_t v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      unint64_t v33 = (char *)v32 + v31;
      *uint64_t v32 = *((void *)a1 + 3);
      unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v33;
      *((void *)a1 + 3) = v32;
    }
    *((void *)a1 + 1) = v29 + 24;
    *(_WORD *)(v29 + 16) = 232;
    *(unsigned char *)(v29 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v29, (swift::Demangle::__runtime::Node *)v7, a1);
    unint64_t v34 = 0;
    if (v10 && v29)
    {
      unint64_t v34 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v34;
      if (!v34 || v34 + 24 > *((void *)a1 + 2))
      {
        unint64_t v35 = 2 * *((void *)a1 + 4);
        if (v35 <= 0x20) {
          unint64_t v35 = 32;
        }
        *((void *)a1 + 4) = v35;
        unint64_t v36 = v35 + 8;
        long long v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        void *v37 = *((void *)a1 + 3);
        unint64_t v34 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v37 + v36;
        *((void *)a1 + 3) = v37;
      }
      *((void *)a1 + 1) = v34 + 24;
      *(_WORD *)(v34 + 16) = 17;
      *(unsigned char *)(v34 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v34, (swift::Demangle::__runtime::Node *)v29, a1);
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v34, (swift::Demangle::__runtime::Node *)v10, a1);
    }
    return v34;
  }
  int v26 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v27 = (void *)a2;
  if ((v26 - 1) >= 2)
  {
    if (v26 == 5 && *(_DWORD *)(a2 + 8))
    {
      uint64_t v27 = *(void **)a2;
      goto LABEL_42;
    }
    return 0;
  }
LABEL_42:
  int v28 = 0;
  if (*(unsigned __int16 *)(a2 + 16) > 0xD9u)
  {
    unsigned int v38 = v9 - 218;
    if (v38 > 0x24 || ((1 << v38) & 0x1000000005) == 0)
    {
LABEL_64:
      ++a4;
      int v28 = 1;
    }
  }
  else if (((v9 - 117) > 0x3E || ((1 << (v9 - 117)) & 0x6000000000000101) == 0) {
         && v9 != 33
  }
         && v9 != 70)
  {
    goto LABEL_64;
  }
  uint64_t v39 = *(void *)(*(void *)a3 + 8 * v4);
  if (a4 < v6)
  {
    uint64_t v40 = *v27;
    if (*(_WORD *)(*v27 + 16) != 71)
    {
      __int16 v44 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(a1, *v27, a3);
LABEL_85:
      if (v44)
      {
LABEL_86:
        __int16 v51 = *(_WORD *)(v7 + 16);
        unint64_t v52 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 1) = v52;
        if (!v52 || v52 + 24 > *((void *)a1 + 2))
        {
          unint64_t v53 = 2 * *((void *)a1 + 4);
          if (v53 <= 0x20) {
            unint64_t v53 = 32;
          }
          *((void *)a1 + 4) = v53;
          unint64_t v54 = v53 + 8;
          unsigned int v55 = malloc_type_malloc(v53 + 8, 0xD0263BC5uLL);
          uint64_t v56 = (char *)v55 + v54;
          *unsigned int v55 = *((void *)a1 + 3);
          unint64_t v52 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)a1 + 2) = v56;
          *((void *)a1 + 3) = v55;
        }
        *((void *)a1 + 1) = v52 + 24;
        *(_WORD *)(v52 + 16) = v51;
        *(unsigned char *)(v52 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v52, v44, a1);
        for (unsigned int i = 1; ; unsigned int i = v61 + 1)
        {
          unint64_t v59 = *(unsigned __int8 *)(v7 + 18);
          switch(v59)
          {
            case 1:
              unint64_t v60 = *(unsigned __int8 *)(v7 + 18);
              break;
            case 5:
              unint64_t v60 = *(unsigned int *)(v7 + 8);
              break;
            case 2:
              unint64_t v60 = 2;
              break;
            default:
              goto LABEL_112;
          }
          unint64_t v61 = i;
          if (v60 <= i)
          {
LABEL_112:
            unint64_t v7 = v52;
            goto LABEL_113;
          }
          unsigned int v62 = v59 - 1;
          if (v59 != 1)
          {
            if (v59 == 5)
            {
              if (*(unsigned int *)(v7 + 8) <= v61) {
                continue;
              }
              goto LABEL_108;
            }
            unint64_t v59 = 2;
          }
          if (v59 <= v61) {
            continue;
          }
LABEL_108:
          unint64_t v63 = v7;
          if (v62 >= 2) {
            unint64_t v63 = *(void *)v7;
          }
          unint64_t v64 = *(swift::Demangle::__runtime::Node **)(v63 + 8 * v61);
          if (v64) {
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v52, v64, a1);
          }
        }
      }
      return 0;
    }
    int v41 = *(unsigned __int8 *)(v40 + 18);
    unsigned int v42 = (swift::Demangle::__runtime::Node *)v40;
    if (v41 != 2)
    {
      if (v41 != 5 || *(_DWORD *)(v40 + 8) < 2u)
      {
        uint64_t v43 = 0;
LABEL_74:
        int v45 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleBoundGenericArgs(a1, v43, a3);
        int v46 = *(unsigned __int8 *)(v40 + 18);
        unint64_t v47 = (swift::Demangle::__runtime::Node **)v40;
        if ((v46 - 1) >= 2)
        {
          if (v46 != 5 || !*(_DWORD *)(v40 + 8))
          {
            int v48 = 0;
            goto LABEL_80;
          }
          unint64_t v47 = *(swift::Demangle::__runtime::Node ***)v40;
        }
        int v48 = *v47;
LABEL_80:
        unsigned int v49 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(a1, 71, v48, v45);
        __int16 v44 = v49;
        if (*(unsigned char *)(v40 + 18) == 5 && *(_DWORD *)(v40 + 8) == 3)
        {
          if (v49)
          {
            unint64_t v50 = *(swift::Demangle::__runtime::Node **)(*(void *)v40 + 16);
            if (v50)
            {
              swift::Demangle::__runtime::Node::addChild(v49, v50, a1);
              goto LABEL_86;
            }
          }
        }
        goto LABEL_85;
      }
      unsigned int v42 = *(swift::Demangle::__runtime::Node **)v40;
    }
    uint64_t v43 = *((void *)v42 + 1);
    goto LABEL_74;
  }
LABEL_113:
  if (!v28) {
    return v7;
  }
  int v65 = *(unsigned __int8 *)(v39 + 18);
  if ((v65 - 1) >= 2 && (v65 != 5 || !*(_DWORD *)(v39 + 8))) {
    return v7;
  }
  unint64_t v34 = 0;
  unsigned int v66 = *(unsigned __int16 *)(v7 + 16);
  if (v66 > 0xA6)
  {
    if (*(unsigned __int16 *)(v7 + 16) > 0xDAu)
    {
      if (v66 == 234)
      {
        __int16 v67 = 18;
      }
      else
      {
        if (v66 != 219) {
          return v34;
        }
        __int16 v67 = 15;
      }
    }
    else if (v66 == 167)
    {
      __int16 v67 = 17;
    }
    else
    {
      if (v66 != 180) {
        return v34;
      }
      __int16 v67 = 16;
    }
    goto LABEL_137;
  }
  if (*(unsigned __int16 *)(v7 + 16) > 0x3Cu)
  {
    if (v66 != 61)
    {
      if (v66 != 76) {
        return v34;
      }
      goto LABEL_129;
    }
    __int16 v67 = 14;
LABEL_137:
    unint64_t Type = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createType(a1, (swift::Demangle::__runtime::Node *)v7);
    int v68 = a1;
    __int16 v69 = v67;
    goto LABEL_138;
  }
  if (v66 == 24)
  {
    __int16 v67 = 13;
    goto LABEL_137;
  }
  if (v66 != 29) {
    return v34;
  }
LABEL_129:
  int v68 = a1;
  __int16 v69 = 19;
  unint64_t Type = (swift::Demangle::__runtime::Node *)v7;
LABEL_138:

  return swift::Demangle::__runtime::Demangler::createWithChildren(v68, v69, Type, (swift::Demangle::__runtime::Node *)v39);
}

uint64_t swift::Demangle::__runtime::nodeConsumesGenericArgs(swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  uint64_t result = 0;
  int v4 = *((unsigned __int16 *)this + 8);
  if (v4 > 217)
  {
    unsigned int v6 = v4 - 218;
    BOOL v7 = v6 > 0x24;
    uint64_t v8 = (1 << v6) & 0x1000000005;
    if (v7 || v8 == 0) {
      return 1;
    }
  }
  else
  {
    BOOL v5 = (v4 - 117) > 0x3E || ((1 << (v4 - 117)) & 0x6000000000000101) == 0;
    if (v5 && v4 != 33 && v4 != 70) {
      return 1;
    }
  }
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplParamConvention(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v3 = *((void *)a1 + 9);
  if (v3 >= *((void *)a1 + 8))
  {
    unint64_t v4 = *((void *)a1 + 9);
LABEL_16:
    unint64_t v14 = 0;
    *((void *)a1 + 9) = v4 - 1;
    return v14;
  }
  unint64_t v4 = v3 + 1;
  *((void *)a1 + 9) = v3 + 1;
  uint64_t v5 = *(char *)(*((void *)a1 + 7) + v3) - 98;
  if (v5 >= 0x18 || ((0xD05CABu >> v5) & 1) == 0) {
    goto LABEL_16;
  }
  BOOL v7 = off_1E4FC7960[v5];
  unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v8;
  if (!v8 || v8 + 24 > *((void *)a1 + 2))
  {
    unint64_t v9 = 2 * *((void *)a1 + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    *((void *)a1 + 4) = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    unint64_t v12 = (char *)v11 + v10;
    void *v11 = *((void *)a1 + 3);
    unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v12;
    *((void *)a1 + 3) = v11;
  }
  *((void *)a1 + 1) = v8 + 24;
  size_t v13 = strlen(v7);
  *(_WORD *)(v8 + 16) = 106;
  *(unsigned char *)(v8 + 18) = 3;
  *(void *)unint64_t v8 = v7;
  *(void *)(v8 + 8) = v13;
  unint64_t v14 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v14;
  if (!v14 || v14 + 24 > *((void *)a1 + 2))
  {
    unint64_t v15 = 2 * *((void *)a1 + 4);
    if (v15 <= 0x20) {
      unint64_t v15 = 32;
    }
    *((void *)a1 + 4) = v15;
    unint64_t v16 = v15 + 8;
    unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    uint64_t v18 = (char *)v17 + v16;
    *unint64_t v17 = *((void *)a1 + 3);
    unint64_t v14 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v18;
    *((void *)a1 + 3) = v17;
  }
  *((void *)a1 + 1) = v14 + 24;
  *(_WORD *)(v14 + 16) = a2;
  *(unsigned char *)(v14 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v8, a1);
  return v14;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleImplResultConvention(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v3 = *((void *)a1 + 9);
  if (v3 >= *((void *)a1 + 8))
  {
    unint64_t v4 = *((void *)a1 + 9);
LABEL_5:
    unint64_t v7 = 0;
    *((void *)a1 + 9) = v4 - 1;
  }
  else
  {
    unint64_t v4 = v3 + 1;
    *((void *)a1 + 9) = v3 + 1;
    unsigned int v6 = "@out";
    switch(*(unsigned char *)(*((void *)a1 + 7) + v3))
    {
      case 'a':
        unsigned int v6 = "@autoreleased";
        break;
      case 'd':
        unsigned int v6 = "@unowned";
        break;
      case 'k':
        unsigned int v6 = "@pack_out";
        break;
      case 'o':
        unsigned int v6 = "@owned";
        break;
      case 'r':
        break;
      case 'u':
        unsigned int v6 = "@unowned_inner_pointer";
        break;
      default:
        goto LABEL_5;
    }
    unint64_t v8 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v8;
    if (!v8 || v8 + 24 > *((void *)a1 + 2))
    {
      unint64_t v9 = 2 * *((void *)a1 + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)a1 + 4) = v9;
      unint64_t v10 = v9 + 8;
      unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      unint64_t v12 = (char *)v11 + v10;
      void *v11 = *((void *)a1 + 3);
      unint64_t v8 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v12;
      *((void *)a1 + 3) = v11;
    }
    *((void *)a1 + 1) = v8 + 24;
    size_t v13 = strlen(v6);
    *(_WORD *)(v8 + 16) = 106;
    *(unsigned char *)(v8 + 18) = 3;
    *(void *)unint64_t v8 = v6;
    *(void *)(v8 + 8) = v13;
    unint64_t v7 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v7;
    if (!v7 || v7 + 24 > *((void *)a1 + 2))
    {
      unint64_t v14 = 2 * *((void *)a1 + 4);
      if (v14 <= 0x20) {
        unint64_t v14 = 32;
      }
      *((void *)a1 + 4) = v14;
      unint64_t v15 = v14 + 8;
      unint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      unint64_t v17 = (char *)v16 + v15;
      *unint64_t v16 = *((void *)a1 + 3);
      unint64_t v7 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = v17;
      *((void *)a1 + 3) = v16;
    }
    *((void *)a1 + 1) = v7 + 24;
    *(_WORD *)(v7 + 16) = a2;
    *(unsigned char *)(v7 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v8, a1);
  }
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::demanglePrivateContextDescriptor(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8)) {
    return 0;
  }
  unint64_t v3 = 0;
  *((void *)this + 9) = v1 + 1;
  switch(*(unsigned char *)(*((void *)this + 7) + v1))
  {
    case 'A':
      unint64_t v4 = swift::Demangle::__runtime::Demangler::popAssocTypePath(this);
      if (!v4) {
        return 0;
      }
      int v5 = *((_DWORD *)this + 24);
      if (!v5) {
        return 0;
      }
      unsigned int v6 = v5 - 1;
      unint64_t v7 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v6);
      if (*((_WORD *)v7 + 8) != 232) {
        return 0;
      }
      unint64_t v8 = v4;
      *((_DWORD *)this + 24) = v6;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v9 = 2 * *((void *)this + 4);
        if (v9 <= 0x20) {
          unint64_t v9 = 32;
        }
        *((void *)this + 4) = v9;
        unint64_t v10 = v9 + 8;
        unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
        unint64_t v12 = (char *)v11 + v10;
        void *v11 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v12;
        *((void *)this + 3) = v11;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v13 = 294;
      goto LABEL_39;
    case 'E':
      unint64_t v14 = swift::Demangle::__runtime::Demangler::popContext(this);
      if (!v14) {
        return 0;
      }
      unint64_t v8 = (unint64_t)v14;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v15 = 2 * *((void *)this + 4);
        if (v15 <= 0x20) {
          unint64_t v15 = 32;
        }
        *((void *)this + 4) = v15;
        unint64_t v16 = v15 + 8;
        unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
        uint64_t v18 = (char *)v17 + v16;
        *unint64_t v17 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v18;
        *((void *)this + 3) = v17;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v19 = 292;
      goto LABEL_47;
    case 'M':
      int v20 = *((_DWORD *)this + 24);
      if (!v20) {
        return 0;
      }
      unsigned int v21 = v20 - 1;
      unint64_t v8 = *(void *)(*((void *)this + 11) + 8 * v21);
      int v22 = *(unsigned __int16 *)(v8 + 16);
      if (v22 == 101)
      {
        *((_DWORD *)this + 24) = v21;
        unint64_t v8 = swift::Demangle::__runtime::Demangler::changeKind(this, (swift::Demangle::__runtime::Node **)v8, 153);
        if (!v8) {
          return 0;
        }
      }
      else
      {
        if (v22 != 153) {
          return 0;
        }
        *((_DWORD *)this + 24) = v21;
      }
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v35 = 2 * *((void *)this + 4);
        if (v35 <= 0x20) {
          unint64_t v35 = 32;
        }
        *((void *)this + 4) = v35;
        unint64_t v36 = v35 + 8;
        long long v37 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
        unsigned int v38 = (char *)v37 + v36;
        void *v37 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v38;
        *((void *)this + 3) = v37;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v19 = 291;
LABEL_47:
      *(_WORD *)(v3 + 16) = v19;
      *(unsigned char *)(v3 + 18) = 0;
LABEL_48:
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, (swift::Demangle::__runtime::Node *)v8, this);
      break;
    case 'X':
      unint64_t v23 = swift::Demangle::__runtime::Demangler::popContext(this);
      if (!v23) {
        return 0;
      }
      unint64_t v8 = (unint64_t)v23;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v24 = 2 * *((void *)this + 4);
        if (v24 <= 0x20) {
          unint64_t v24 = 32;
        }
        *((void *)this + 4) = v24;
        unint64_t v25 = v24 + 8;
        int v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
        uint64_t v27 = (char *)v26 + v25;
        *int v26 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v27;
        *((void *)this + 3) = v26;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v19 = 293;
      goto LABEL_47;
    case 'Y':
      int v28 = *((_DWORD *)this + 24);
      if (!v28) {
        return 0;
      }
      unsigned int v29 = v28 - 1;
      unint64_t v8 = *(void *)(*((void *)this + 11) + 8 * v29);
      *((_DWORD *)this + 24) = v29;
      if (!v8) {
        return 0;
      }
      unint64_t v30 = swift::Demangle::__runtime::Demangler::popContext(this);
      if (!v30) {
        return 0;
      }
      unint64_t v7 = v30;
      unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v3;
      if (!v3 || v3 + 24 > *((void *)this + 2))
      {
        unint64_t v31 = 2 * *((void *)this + 4);
        if (v31 <= 0x20) {
          unint64_t v31 = 32;
        }
        *((void *)this + 4) = v31;
        unint64_t v32 = v31 + 8;
        unint64_t v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
        unint64_t v34 = (char *)v33 + v32;
        *unint64_t v33 = *((void *)this + 3);
        unint64_t v3 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v34;
        *((void *)this + 3) = v33;
      }
      *((void *)this + 1) = v3 + 24;
      __int16 v13 = 293;
LABEL_39:
      *(_WORD *)(v3 + 16) = v13;
      *(unsigned char *)(v3 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, v7, this);
      goto LABEL_48;
    default:
      return v3;
  }
  return v3;
}

unint64_t swift::Demangle::__runtime::Demangler::popAssocTypePath(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unsigned int v6 = (char *)v5 + v4;
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 289;
  *(unsigned char *)(v2 + 18) = 0;
  do
  {
    int v7 = *((_DWORD *)this + 24);
    if (v7 && (unsigned int v8 = v7 - 1, v9 = *(void *)(*((void *)this + 11) + 8 * v8), *(_WORD *)(v9 + 16) == 275)) {
      *((_DWORD *)this + 24) = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popAssocTypeName(this);
    if (!v10) {
      return 0;
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v10, this);
  }
  while (!v9);
  int v11 = *(unsigned __int8 *)(v2 + 18);
  if (v11 == 5)
  {
    uint64_t v13 = *(unsigned int *)(v2 + 8);
    if (v13)
    {
      unint64_t v14 = (void *)(*(void *)v2 + 8 * v13 - 8);
      if ((unint64_t)v14 > *(void *)v2)
      {
        unint64_t v15 = *(void *)v2 + 8;
        do
        {
          uint64_t v16 = *(void *)(v15 - 8);
          *(void *)(v15 - 8) = *v14;
          *v14-- = v16;
          BOOL v17 = v15 >= (unint64_t)v14;
          v15 += 8;
        }
        while (!v17);
      }
    }
  }
  else if (v11 == 2)
  {
    *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
  }
  return v2;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAssociatedTypeSimple(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2)
{
  unint64_t v4 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this);
  unint64_t v5 = v4;
  if (!a2)
  {
    int v20 = *((_DWORD *)this + 24);
    if (!v20) {
      return 0;
    }
    unsigned int v21 = v20 - 1;
    unint64_t v6 = *(void *)(*((void *)this + 11) + 8 * v21);
    if (*(_WORD *)(v6 + 16) != 232) {
      return 0;
    }
    *((_DWORD *)this + 24) = v21;
    if (!v4) {
      return v5;
    }
    goto LABEL_8;
  }
  unint64_t v6 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)this + 2))
  {
    unint64_t v7 = 2 * *((void *)this + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)this + 4) = v7;
    unint64_t v8 = v7 + 8;
    uint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    unint64_t v10 = (char *)v9 + v8;
    *uint64_t v9 = *((void *)this + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v9;
  }
  *((void *)this + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 232;
  *(unsigned char *)(v6 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v6, a2, this);
  if (v5)
  {
LABEL_8:
    unint64_t v11 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v11;
    if (!v11 || v11 + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      unint64_t v15 = (char *)v14 + v13;
      *unint64_t v14 = *((void *)this + 3);
      unint64_t v11 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v15;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = v11 + 24;
    *(_WORD *)(v11 + 16) = 45;
    *(unsigned char *)(v11 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, (swift::Demangle::__runtime::Node *)v6, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v11, (swift::Demangle::__runtime::Node *)v5, this);
    unint64_t v5 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v5;
    if (!v5 || v5 + 24 > *((void *)this + 2))
    {
      unint64_t v16 = 2 * *((void *)this + 4);
      if (v16 <= 0x20) {
        unint64_t v16 = 32;
      }
      *((void *)this + 4) = v16;
      unint64_t v17 = v16 + 8;
      uint64_t v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      __int16 v19 = (char *)v18 + v17;
      *uint64_t v18 = *((void *)this + 3);
      unint64_t v5 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v19;
      *((void *)this + 3) = v18;
    }
    *((void *)this + 1) = v5 + 24;
    *(_WORD *)(v5 + 16) = 232;
    *(unsigned char *)(v5 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v5, (swift::Demangle::__runtime::Node *)v11, this);
  }
  return v5;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAssociatedTypeCompound(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2)
{
  unint64_t v3 = *((void *)this + 2);
  unint64_t v4 = (char *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  *((void *)this + 1) = v4;
  if (v4) {
    BOOL v5 = (unint64_t)(v4 + 32) > v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unint64_t v6 = 2 * *((void *)this + 4);
    if (v6 <= 0x28) {
      unint64_t v6 = 40;
    }
    *((void *)this + 4) = v6;
    unint64_t v7 = v6 + 8;
    unint64_t v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
    uint64_t v9 = (char *)v8 + v7;
    *unint64_t v8 = *((void *)this + 3);
    unint64_t v4 = (char *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((void *)this + 2) = v9;
    *((void *)this + 3) = v8;
  }
  unsigned int v10 = 0;
  *((void *)this + 1) = v4 + 32;
  unsigned int v11 = 4;
  do
  {
    int v13 = *((_DWORD *)this + 24);
    if (v13 && (unsigned int v14 = v13 - 1, v15 = *(void *)(*((void *)this + 11) + 8 * v14), *(_WORD *)(v15 + 16) == 275)) {
      *((_DWORD *)this + 24) = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = swift::Demangle::__runtime::Demangler::popAssocTypeName(this);
    if (!v16) {
      return 0;
    }
    unint64_t v17 = v16;
    if (v10 >= v11)
    {
      uint64_t v18 = &v4[8 * v11];
      __int16 v19 = (char *)*((void *)this + 1);
      if (v18 == v19)
      {
        unsigned int v21 = v18 + 8;
        unint64_t v20 = *((void *)this + 2);
        if ((unint64_t)v21 <= v20)
        {
          *((void *)this + 1) = v21;
          LODWORD(v22) = 1;
LABEL_11:
          v11 += v22;
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v20 = *((void *)this + 2);
      }
      if (2 * v11 <= 4) {
        uint64_t v22 = 4;
      }
      else {
        uint64_t v22 = 2 * v11;
      }
      uint64_t v23 = 8 * (v22 + v11);
      unint64_t v24 = (char *)((unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)this + 1) = v24;
      if (!v24 || (unint64_t)&v24[v23] > v20)
      {
        unint64_t v25 = 2 * *((void *)this + 4);
        if (v25 <= v23 + 8) {
          unint64_t v25 = v23 + 8;
        }
        *((void *)this + 4) = v25;
        unint64_t v26 = v25 + 8;
        uint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
        int v28 = (char *)v27 + v26;
        *uint64_t v27 = *((void *)this + 3);
        unint64_t v24 = (char *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((void *)this + 2) = v28;
        *((void *)this + 3) = v27;
      }
      *((void *)this + 1) = &v24[v23];
      if (v11) {
        memcpy(v24, v4, 8 * v11);
      }
      unint64_t v4 = v24;
      goto LABEL_11;
    }
LABEL_12:
    unsigned int v12 = v10 + 1;
    *(void *)&v4[8 * v10++] = v17;
  }
  while (!v15);
  if (a2)
  {
    unint64_t v30 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v30;
    if (!v30 || v30 + 24 > *((void *)this + 2))
    {
      unint64_t v31 = 2 * *((void *)this + 4);
      if (v31 <= 0x20) {
        unint64_t v31 = 32;
      }
      *((void *)this + 4) = v31;
      unint64_t v32 = v31 + 8;
      unint64_t v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      unint64_t v34 = (char *)v33 + v32;
      *unint64_t v33 = *((void *)this + 3);
      unint64_t v30 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v34;
      *((void *)this + 3) = v33;
    }
    *((void *)this + 1) = v30 + 24;
    *(_WORD *)(v30 + 16) = 232;
    *(unsigned char *)(v30 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v30, a2, this);
    if (!v12) {
      return v30;
    }
LABEL_47:
    uint64_t v37 = 8 * v12;
    unsigned int v38 = v4 - 8;
    while (1)
    {
      unsigned int v42 = *(swift::Demangle::__runtime::Node **)&v38[v37];
      if (!v42) {
        break;
      }
      unint64_t v43 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 1) = v43;
      if (!v43 || v43 + 24 > *((void *)this + 2))
      {
        unint64_t v44 = 2 * *((void *)this + 4);
        if (v44 <= 0x20) {
          unint64_t v44 = 32;
        }
        *((void *)this + 4) = v44;
        unint64_t v45 = v44 + 8;
        int v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
        unint64_t v47 = (char *)v46 + v45;
        *int v46 = *((void *)this + 3);
        unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 2) = v47;
        *((void *)this + 3) = v46;
      }
      unint64_t v29 = 0;
      *((void *)this + 1) = v43 + 24;
      *(_WORD *)(v43 + 16) = 45;
      *(unsigned char *)(v43 + 18) = 0;
      if (v30 && v43)
      {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v43, (swift::Demangle::__runtime::Node *)v30, this);
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v43, v42, this);
        unint64_t v29 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v29;
        if (!v29 || v29 + 24 > *((void *)this + 2))
        {
          unint64_t v39 = 2 * *((void *)this + 4);
          if (v39 <= 0x20) {
            unint64_t v39 = 32;
          }
          *((void *)this + 4) = v39;
          unint64_t v40 = v39 + 8;
          int v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
          *int v41 = *((void *)this + 3);
          unint64_t v29 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v41 + v40;
          *((void *)this + 3) = v41;
        }
        *((void *)this + 1) = v29 + 24;
        *(_WORD *)(v29 + 16) = 232;
        *(unsigned char *)(v29 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v29, (swift::Demangle::__runtime::Node *)v43, this);
      }
      unint64_t v30 = v29;
      v37 -= 8;
      if (!v37) {
        return v29;
      }
    }
    return v30;
  }
  int v35 = *((_DWORD *)this + 24);
  if (v35 && (v36 = v35 - 1, unint64_t v30 = *(void *)(*((void *)this + 11) + 8 * v36), *(_WORD *)(v30 + 16) == 232))
  {
    *((_DWORD *)this + 24) = v36;
    if (v12) {
      goto LABEL_47;
    }
  }
  else
  {
    unint64_t v30 = 0;
    if (v12) {
      goto LABEL_47;
    }
  }
  return v30;
}

unint64_t swift::Demangle::__runtime::Demangler::popAssocTypeName(swift::Demangle::__runtime::Demangler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (!v1) {
    return 0;
  }
  int v3 = v1 - 1;
  uint64_t v4 = *((void *)this + 11);
  BOOL v5 = *(unsigned __int16 **)(v4 + 8 * (v1 - 1));
  int v6 = v5[8];
  if (v6 == 181)
  {
LABEL_16:
    *((_DWORD *)this + 24) = v3;
    int v1 = v3;
    if (!v3) {
      return 0;
    }
    goto LABEL_19;
  }
  if (v6 != 232)
  {
LABEL_15:
    int v3 = v1 - 1;
    BOOL v5 = *(unsigned __int16 **)(v4 + 8 * (v1 - 1));
    if (v5[8] != 347)
    {
      BOOL v5 = 0;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  *((_DWORD *)this + 24) = v3;
  unint64_t v7 = v5;
  while ((unsigned __int16)v6 == 232)
  {
    if (*((unsigned __int8 *)v7 + 18) - 1 >= 2) {
      unint64_t v7 = *(unsigned __int16 **)v7;
    }
    unint64_t v7 = *(unsigned __int16 **)v7;
    LOWORD(v6) = v7[8];
  }
  if ((unsigned __int16)v6 - 180 >= 2 && (unsigned __int16)v6 != 347) {
    return 0;
  }
  if (!v5)
  {
    int v1 = v3;
    if (!v3) {
      return 0;
    }
    goto LABEL_15;
  }
  int v1 = v3;
  if (!v3) {
    return 0;
  }
LABEL_19:
  unint64_t v8 = *(swift::Demangle::__runtime::Node **)(v4 + 8 * (v1 - 1));
  if (*((_WORD *)v8 + 8) != 101) {
    return 0;
  }
  *((_DWORD *)this + 24) = v1 - 1;
  unint64_t v9 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v9;
  if (!v9 || v9 + 24 > *((void *)this + 2))
  {
    unint64_t v10 = 2 * *((void *)this + 4);
    if (v10 <= 0x20) {
      unint64_t v10 = 32;
    }
    *((void *)this + 4) = v10;
    unint64_t v11 = v10 + 8;
    unsigned int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    int v13 = (char *)v12 + v11;
    void *v12 = *((void *)this + 3);
    unint64_t v9 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v13;
    *((void *)this + 3) = v12;
  }
  *((void *)this + 1) = v9 + 24;
  *(_WORD *)(v9 + 16) = 35;
  *(unsigned char *)(v9 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, v8, this);
  if (v5 && v9) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, (swift::Demangle::__runtime::Node *)v5, this);
  }
  return v9;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleGenericSpecialization(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  int v3 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleSpecAttributes(a1, a2);
  if (!v3) {
    return v3;
  }
  unint64_t v4 = swift::Demangle::__runtime::Demangler::popTypeList(a1);
  if (!v4) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(v4 + 18);
  int v6 = (swift::Demangle::__runtime::Node **)v4;
  if ((v5 - 1) >= 2)
  {
    if (v5 == 5)
    {
      unint64_t v7 = *(swift::Demangle::__runtime::Node ***)v4;
      int v6 = *(swift::Demangle::__runtime::Node ***)v4;
LABEL_12:
      unint64_t v8 = &v7[*(unsigned int *)(v4 + 8)];
      if (v6 == v8) {
        return v3;
      }
      goto LABEL_22;
    }
    int v6 = 0;
  }
  switch(v5)
  {
    case 1:
      unint64_t v8 = (swift::Demangle::__runtime::Node **)(v4 + 8);
      if (v6 == (swift::Demangle::__runtime::Node **)(v4 + 8)) {
        return v3;
      }
      break;
    case 2:
      unint64_t v8 = (swift::Demangle::__runtime::Node **)(v4 + 16);
      if (v6 == (swift::Demangle::__runtime::Node **)(v4 + 16)) {
        return v3;
      }
      break;
    case 5:
      unint64_t v7 = *(swift::Demangle::__runtime::Node ***)v4;
      goto LABEL_12;
    default:
      unint64_t v8 = 0;
      if (!v6) {
        return v3;
      }
      goto LABEL_22;
  }
  do
  {
LABEL_22:
    unint64_t v10 = *v6;
    if (*v6)
    {
      unint64_t v9 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v9;
      if (!v9 || v9 + 24 > *((void *)a1 + 2))
      {
        unint64_t v11 = 2 * *((void *)a1 + 4);
        if (v11 <= 0x20) {
          unint64_t v11 = 32;
        }
        *((void *)a1 + 4) = v11;
        unint64_t v12 = v11 + 8;
        int v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
        unsigned int v14 = (char *)v13 + v12;
        *int v13 = *((void *)a1 + 3);
        unint64_t v9 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = v14;
        *((void *)a1 + 3) = v13;
      }
      *((void *)a1 + 1) = v9 + 24;
      *(_WORD *)(v9 + 16) = 94;
      *(unsigned char *)(v9 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v9, v10, a1);
    }
    else
    {
      unint64_t v9 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v3, (swift::Demangle::__runtime::Node *)v9, a1);
    ++v6;
  }
  while (v6 != v8);
  return v3;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSpecAttributes(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v5 = *((void *)a1 + 8);
  unint64_t v4 = *((void *)a1 + 9);
  if (v4 < v5 && *(unsigned char *)(*((void *)a1 + 7) + v4) == 109)
  {
    *((void *)a1 + 9) = ++v4;
    int v6 = 1;
    if (v4 >= v5) {
      goto LABEL_9;
    }
  }
  else
  {
    int v6 = 0;
    if (v4 >= v5) {
      goto LABEL_9;
    }
  }
  if (*(unsigned char *)(*((void *)a1 + 7) + v4) == 113)
  {
    *((void *)a1 + 9) = ++v4;
    int v7 = 1;
    if (v4 >= v5) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
LABEL_9:
  int v7 = 0;
  if (v4 >= v5) {
    goto LABEL_13;
  }
LABEL_10:
  if (*(unsigned char *)(*((void *)a1 + 7) + v4) != 97)
  {
LABEL_13:
    int v8 = 0;
    if (v4 < v5) {
      goto LABEL_14;
    }
    return 0;
  }
  *((void *)a1 + 9) = ++v4;
  int v8 = 1;
  if (v4 >= v5) {
    return 0;
  }
LABEL_14:
  *((void *)a1 + 9) = v4 + 1;
  int v9 = *(char *)(*((void *)a1 + 7) + v4);
  if ((v9 - 58) < 0xF6u) {
    return 0;
  }
  unint64_t v10 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v10;
  if (!v10 || (unint64_t v11 = *((void *)a1 + 2), v10 + 24 > v11))
  {
    unint64_t v12 = 2 * *((void *)a1 + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)a1 + 4) = v12;
    unint64_t v13 = v12 + 8;
    unsigned int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    unint64_t v11 = (unint64_t)v14 + v13;
    *unsigned int v14 = *((void *)a1 + 3);
    unint64_t v10 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v11;
    *((void *)a1 + 3) = v14;
  }
  unint64_t v15 = v10 + 24;
  *(_WORD *)(v10 + 16) = a2;
  *(unsigned char *)(v10 + 18) = 0;
  if (!v6)
  {
    if (!v7) {
      goto LABEL_28;
    }
LABEL_31:
    unint64_t v21 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v21;
    if (!v21 || v21 + 24 > *((void *)a1 + 2))
    {
      unint64_t v22 = 2 * *((void *)a1 + 4);
      if (v22 <= 0x20) {
        unint64_t v22 = 32;
      }
      *((void *)a1 + 4) = v22;
      unint64_t v23 = v22 + 8;
      unint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *unint64_t v24 = *((void *)a1 + 3);
      unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = (char *)v24 + v23;
      *((void *)a1 + 3) = v24;
    }
    *((void *)a1 + 1) = v21 + 24;
    *(_WORD *)(v21 + 16) = 217;
    *(unsigned char *)(v21 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, (swift::Demangle::__runtime::Node *)v21, a1);
    unint64_t v15 = *((void *)a1 + 1);
    unsigned int v20 = v9 - 48;
    if (!v8) {
      goto LABEL_43;
    }
    goto LABEL_37;
  }
  unint64_t v16 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v16;
  if (!v16 || v16 + 24 > v11)
  {
    unint64_t v17 = 2 * *((void *)a1 + 4);
    if (v17 <= 0x20) {
      unint64_t v17 = 32;
    }
    *((void *)a1 + 4) = v17;
    unint64_t v18 = v17 + 8;
    __int16 v19 = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
    *__int16 v19 = *((void *)a1 + 3);
    unint64_t v16 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v19 + v18;
    *((void *)a1 + 3) = v19;
  }
  *((void *)a1 + 1) = v16 + 24;
  *(_WORD *)(v16 + 16) = 339;
  *(unsigned char *)(v16 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, (swift::Demangle::__runtime::Node *)v16, a1);
  unint64_t v15 = *((void *)a1 + 1);
  if (v7) {
    goto LABEL_31;
  }
LABEL_28:
  unsigned int v20 = v9 - 48;
  if (v8)
  {
LABEL_37:
    unint64_t v25 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)a1 + 2))
    {
      unint64_t v26 = 2 * *((void *)a1 + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)a1 + 4) = v26;
      unint64_t v27 = v26 + 8;
      int v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      void *v28 = *((void *)a1 + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 2) = (char *)v28 + v27;
      *((void *)a1 + 3) = v28;
    }
    *((void *)a1 + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 346;
    *(unsigned char *)(v25 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, (swift::Demangle::__runtime::Node *)v25, a1);
    unint64_t v15 = *((void *)a1 + 1);
  }
LABEL_43:
  unint64_t v29 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v29;
  if (!v29 || v29 + 24 > *((void *)a1 + 2))
  {
    unint64_t v30 = 2 * *((void *)a1 + 4);
    if (v30 <= 0x20) {
      unint64_t v30 = 32;
    }
    *((void *)a1 + 4) = v30;
    unint64_t v31 = v30 + 8;
    unint64_t v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
    *unint64_t v32 = *((void *)a1 + 3);
    unint64_t v29 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v32 + v31;
    *((void *)a1 + 3) = v32;
  }
  *((void *)a1 + 1) = v29 + 24;
  *(_WORD *)(v29 + 16) = 216;
  *(unsigned char *)(v29 + 18) = 4;
  *(void *)unint64_t v29 = v20;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v10, (swift::Demangle::__runtime::Node *)v29, a1);
  return v10;
}

uint64_t swift::Demangle::__runtime::Demangler::demangleFunctionSpecialization(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = swift::Demangle::__runtime::Demangler::demangleSpecAttributes(this, 77);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = *((void *)this + 9);
      if (v3 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v3) == 95) {
        break;
      }
      unint64_t v4 = swift::Demangle::__runtime::Demangler::demangleFuncSpecParam(this, 78);
      if (!v4)
      {
        unint64_t v2 = 0;
        goto LABEL_8;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v4, this);
    }
    *((void *)this + 9) = v3 + 1;
  }
LABEL_8:
  unint64_t v5 = *((void *)this + 9);
  if (v5 < *((void *)this + 8) && *(unsigned char *)(*((void *)this + 7) + v5) == 110)
  {
    *((void *)this + 9) = v5 + 1;
    if (!v2) {
      return 0;
    }
  }
  else
  {
    int v7 = swift::Demangle::__runtime::Demangler::demangleFuncSpecParam(this, 79);
    uint64_t result = 0;
    if (!v2 || !v7) {
      return result;
    }
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v7, this);
  }
  uint64_t v8 = *(unsigned __int8 *)(v2 + 18);
  if (v8 == 1) {
    goto LABEL_20;
  }
  if (v8 == 5)
  {
    uint64_t v8 = *(unsigned int *)(v2 + 8);
    if (v8) {
      goto LABEL_20;
    }
    return v2;
  }
  if (v8 != 2) {
    return v2;
  }
  uint64_t v8 = 2;
LABEL_20:
  uint64_t v9 = 0;
  while (1)
  {
    unint64_t v10 = *(unsigned __int8 *)(v2 + 18);
    unsigned int v11 = v10 - 1;
    if (v10 != 1)
    {
      if (v10 == 5)
      {
        unint64_t v10 = *(unsigned int *)(v2 + 8);
      }
      else
      {
        if (v10 != 2) {
          goto LABEL_31;
        }
        unint64_t v10 = 2;
      }
    }
    unint64_t v12 = v8 + ~v9;
    if (v10 <= v12)
    {
LABEL_31:
      uint64_t v14 = 0;
      goto LABEL_32;
    }
    unint64_t v13 = v2;
    if (v11 >= 2) {
      unint64_t v13 = *(void *)v2;
    }
    uint64_t v14 = *(void *)(v13 + 8 * v12);
LABEL_32:
    if (*(_WORD *)(v14 + 16) != 78) {
      goto LABEL_21;
    }
    uint64_t v15 = *(unsigned __int8 *)(v14 + 18);
    unint64_t v16 = (unsigned int **)v14;
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*(_DWORD *)(v14 + 8)) {
        goto LABEL_21;
      }
      unint64_t v16 = *(unsigned int ***)v14;
    }
    unsigned int v17 = **v16;
    if (v17 > 9 || ((1 << v17) & 0x233) == 0) {
      goto LABEL_21;
    }
    if (v15 == 1) {
      goto LABEL_47;
    }
    if (v15 == 5) {
      break;
    }
    if (v15 == 2)
    {
      uint64_t v15 = 2;
      int v19 = *((_DWORD *)this + 24);
      if (v19) {
        goto LABEL_52;
      }
      return 0;
    }
    uint64_t v15 = 0;
    int v19 = *((_DWORD *)this + 24);
    if (!v19) {
      return 0;
    }
LABEL_52:
    while (1)
    {
      unsigned int v20 = v19 - 1;
      uint64_t v21 = *(void *)(*((void *)this + 11) + 8 * v20);
      int v22 = *(unsigned __int16 *)(v21 + 16);
      if (v22 != 232) {
        break;
      }
      *((_DWORD *)this + 24) = v20;
      if (v17 == 9 || v17 == 5)
      {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v21, this);
        int v19 = *((_DWORD *)this + 24);
        if (v19) {
          continue;
        }
      }
      return 0;
    }
    if (v22 != 101) {
      return 0;
    }
    *((_DWORD *)this + 24) = v20;
    unint64_t v24 = *(unsigned char **)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    if (v17 == 4 && v23 && *v24 == 95)
    {
      --v23;
      ++v24;
    }
    unint64_t v25 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)this + 2))
    {
      unint64_t v26 = 2 * *((void *)this + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)this + 4) = v26;
      unint64_t v27 = v26 + 8;
      int v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      void *v28 = *((void *)this + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v28 + v27;
      *((void *)this + 3) = v28;
    }
    *((void *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 81;
    *(unsigned char *)(v25 + 18) = 3;
    *(void *)unint64_t v25 = v24;
    *(void *)(v25 + 8) = v23;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v14, (swift::Demangle::__runtime::Node *)v25, this);
    int v29 = *(unsigned __int8 *)(v14 + 18);
    if (v29 == 5)
    {
      uint64_t v30 = *(unsigned int *)(v14 + 8);
      if (v15 != v30)
      {
        unint64_t v31 = (void *)(*(void *)v14 + 8 * v30 - 8);
        if ((unint64_t)v31 > *(void *)v14 + 8 * v15)
        {
          unint64_t v32 = *(void *)v14 + 8 * v15 + 8;
          do
          {
            uint64_t v33 = *(void *)(v32 - 8);
            *(void *)(v32 - 8) = *v31;
            *v31-- = v33;
            BOOL v34 = v32 >= (unint64_t)v31;
            v32 += 8;
          }
          while (!v34);
        }
      }
    }
    else if (v29 == 2 && !v15)
    {
      *(int8x16_t *)uint64_t v14 = vextq_s8(*(int8x16_t *)v14, *(int8x16_t *)v14, 8uLL);
    }
LABEL_21:
    if (++v9 == v8) {
      return v2;
    }
  }
  uint64_t v15 = *(unsigned int *)(v14 + 8);
LABEL_47:
  int v19 = *((_DWORD *)this + 24);
  if (v19) {
    goto LABEL_52;
  }
  return 0;
}

void std::vector<swift::Demangle::__runtime::Node *>::push_back[abi:nn180100](void **a1, void *a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  int v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = v5 - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    *uint64_t v15 = *a2;
    int v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      int v6 = &v5[-v18];
      uint64_t v15 = (void *)((char *)v15 - v18);
      int v19 = &v14[8 * v10 - 16];
      unsigned int v20 = (long long *)(v5 - 16);
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *int v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--uint64_t v15 = v23;
        }
        while (v6 != v8);
      }
      int v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)unint64_t v5 = *a2;
    int v7 = v5 + 8;
  }
  a1[1] = v7;
}

double swift::Demangle::__runtime::Demangler::demangleBridgedMethodParams@<D0>(swift::Demangle::__runtime::Demangler *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = *((void *)this + 9);
  if (v3 >= *((void *)this + 8)) {
    goto LABEL_22;
  }
  if (*(unsigned char *)(*((void *)this + 7) + v3) == 95)
  {
    *((void *)this + 9) = v3 + 1;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    return result;
  }
  memset(&v12, 0, sizeof(v12));
  *((void *)this + 9) = v3 + 1;
  int v5 = *(char *)(*((void *)this + 7) + v3);
  if ((v5 - 97) > 0xF || ((1 << (v5 - 97)) & 0xD001) == 0)
  {
LABEL_22:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return result;
  }
  std::string::push_back(&v12, v5);
  do
  {
    unint64_t v8 = *((void *)this + 9);
    if (v8 >= *((void *)this + 8))
    {
      int v10 = 0;
LABEL_17:
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      continue;
    }
    int v9 = *(unsigned __int8 *)(*((void *)this + 7) + v8);
    *((void *)this + 9) = v8 + 1;
    if (v9 == 95)
    {
      double result = *(double *)&v12.__r_.__value_.__l.__data_;
      *a2 = v12;
      return result;
    }
    int v10 = *(unsigned __int8 *)(*((void *)this + 7) + v8);
    if ((v10 - 98) > 0xC || ((1 << (v10 - 98)) & 0x1021) == 0) {
      goto LABEL_17;
    }
    std::string::push_back(&v12, v10);
  }
  while ((v10 - 98) <= 0xC && ((1 << (v10 - 98)) & 0x1021) != 0);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return result;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleAutoDiffSubsetParametersThunk(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    int v6 = (char *)v5 + v4;
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 323;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (v7)
  {
    do
    {
      unsigned int v8 = v7 - 1;
      int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v8);
      *((_DWORD *)this + 24) = v8;
      if (!v9) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v9, this);
      int v7 = *((_DWORD *)this + 24);
    }
    while (v7);
    int v10 = *(unsigned __int8 *)(v2 + 18);
    if (v10 == 5)
    {
      unint64_t v11 = *(void *)v2;
      uint64_t v12 = *(unsigned int *)(v2 + 8);
      unint64_t v13 = (void *)(*(void *)v2 + 8 * v12 - 8);
      if (v12) {
        BOOL v14 = (unint64_t)v13 > v11;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        unint64_t v15 = v11 + 8;
        do
        {
          uint64_t v16 = *(void *)(v15 - 8);
          *(void *)(v15 - 8) = *v13;
          *v13-- = v16;
          BOOL v17 = v15 >= (unint64_t)v13;
          v15 += 8;
        }
        while (!v17);
      }
    }
    else if (v10 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  unint64_t v18 = *((void *)this + 9);
  if (v18 >= *((void *)this + 8))
  {
    int v19 = 0;
  }
  else
  {
    *((void *)this + 9) = v18 + 1;
    int v19 = *(unsigned __int8 *)(*((void *)this + 7) + v18);
  }
  HIDWORD(v20) = v19;
  LODWORD(v20) = (v19 << 24) - 1677721600;
  unsigned int v21 = (v20 >> 25);
  BOOL v14 = v21 > 7;
  int v22 = (1 << v21) & 0xC3;
  if (v14 || v22 == 0)
  {
    unint64_t v2 = 0;
  }
  else
  {
    uint64_t v24 = (char)v19;
    unint64_t v25 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v25;
    if (!v25 || v25 + 24 > *((void *)this + 2))
    {
      unint64_t v26 = 2 * *((void *)this + 4);
      if (v26 <= 0x20) {
        unint64_t v26 = 32;
      }
      *((void *)this + 4) = v26;
      unint64_t v27 = v26 + 8;
      int v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      void *v28 = *((void *)this + 3);
      unint64_t v25 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v28 + v27;
      *((void *)this + 3) = v28;
    }
    *((void *)this + 1) = v25 + 24;
    *(_WORD *)(v25 + 16) = 321;
    *(unsigned char *)(v25 + 18) = 4;
    *(void *)unint64_t v25 = v24;
    if (v2) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v25, this);
    }
  }
  int v29 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  uint64_t v30 = 0;
  if (v2 && v29)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v29, this);
    uint64_t v30 = (swift::Demangle::__runtime::Node *)v2;
  }
  unint64_t v31 = *((void *)this + 9);
  if (v31 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v31) != 112) {
    return 0;
  }
  *((void *)this + 9) = v31 + 1;
  unint64_t v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  uint64_t v33 = 0;
  if (v30 && v32)
  {
    swift::Demangle::__runtime::Node::addChild(v30, v32, this);
    uint64_t v33 = v30;
  }
  unint64_t v34 = *((void *)this + 9);
  if (v34 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v34) != 114) {
    return 0;
  }
  *((void *)this + 9) = v34 + 1;
  int v35 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  double result = 0;
  if (v33 && v35)
  {
    swift::Demangle::__runtime::Node::addChild(v33, v35, this);
    double result = v33;
  }
  unint64_t v37 = *((void *)this + 9);
  if (v37 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v37) != 80) {
    return 0;
  }
  *((void *)this + 9) = v37 + 1;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleAutoDiffSelfReorderingReabstractionThunk(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    int v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    int v6 = (char *)v5 + v4;
    *int v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 322;
  *(unsigned char *)(v2 + 18) = 0;
  int v7 = *((_DWORD *)this + 24);
  if (!v7) {
    goto LABEL_18;
  }
  unsigned int v8 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v7 - 1));
  if (*((_WORD *)v8 + 8) == 43)
  {
    *((_DWORD *)this + 24) = v7 - 1;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v8, this);
    int v7 = *((_DWORD *)this + 24);
    if (!v7) {
      goto LABEL_18;
    }
  }
  int v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v7 - 1));
  if (*((_WORD *)v9 + 8) == 232)
  {
    *((_DWORD *)this + 24) = v7 - 1;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v9, this);
    int v7 = *((_DWORD *)this + 24);
    if (!v7) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }
  unsigned int v10 = v7 - 1;
  unint64_t v11 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v10);
  if (*((_WORD *)v11 + 8) != 232)
  {
LABEL_18:
    unint64_t v2 = 0;
    goto LABEL_19;
  }
  *((_DWORD *)this + 24) = v10;
  if (v2)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v11, this);
    int v12 = *(unsigned __int8 *)(v2 + 18);
    if (v12 == 5)
    {
      uint64_t v26 = *(unsigned int *)(v2 + 8);
      if (v26)
      {
        unint64_t v27 = (void *)(*(void *)v2 + 8 * v26 - 8);
        if ((unint64_t)v27 > *(void *)v2)
        {
          unint64_t v28 = *(void *)v2 + 8;
          do
          {
            uint64_t v29 = *(void *)(v28 - 8);
            *(void *)(v28 - 8) = *v27;
            *v27-- = v29;
            BOOL v30 = v28 >= (unint64_t)v27;
            v28 += 8;
          }
          while (!v30);
        }
      }
    }
    else if (v12 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
LABEL_19:
  unint64_t v13 = *((void *)this + 9);
  if (v13 >= *((void *)this + 8))
  {
    int v14 = 0;
  }
  else
  {
    *((void *)this + 9) = v13 + 1;
    int v14 = *(unsigned __int8 *)(*((void *)this + 7) + v13);
  }
  HIDWORD(v15) = v14;
  LODWORD(v15) = (v14 << 24) - 1677721600;
  unsigned int v16 = (v15 >> 25);
  BOOL v17 = v16 > 7;
  int v18 = (1 << v16) & 0xC3;
  if (v17 || v18 == 0) {
    return 0;
  }
  uint64_t v20 = (char)v14;
  unint64_t v21 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v21;
  if (!v21 || v21 + 24 > *((void *)this + 2))
  {
    unint64_t v22 = 2 * *((void *)this + 4);
    if (v22 <= 0x20) {
      unint64_t v22 = 32;
    }
    *((void *)this + 4) = v22;
    unint64_t v23 = v22 + 8;
    uint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
    *uint64_t v24 = *((void *)this + 3);
    unint64_t v21 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v24 + v23;
    *((void *)this + 3) = v24;
  }
  *((void *)this + 1) = v21 + 24;
  *(_WORD *)(v21 + 16) = 321;
  *(unsigned char *)(v21 + 18) = 4;
  *(void *)unint64_t v21 = v20;
  if (v2) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v21, this);
  }
  return v2;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleAutoDiffFunctionOrSimpleThunk(swift::Demangle::__runtime::Demangler *this, __int16 a2)
{
  unint64_t v4 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v4;
  if (!v4 || v4 + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    int v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    unsigned int v8 = (char *)v7 + v6;
    *int v7 = *((void *)this + 3);
    unint64_t v4 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 18) = 0;
  int v9 = *((_DWORD *)this + 24);
  if (v9)
  {
    do
    {
      unsigned int v10 = v9 - 1;
      unint64_t v11 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v10);
      *((_DWORD *)this + 24) = v10;
      if (!v11) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v11, this);
      int v9 = *((_DWORD *)this + 24);
    }
    while (v9);
    int v12 = *(unsigned __int8 *)(v4 + 18);
    if (v12 == 5)
    {
      unint64_t v13 = *(void *)v4;
      uint64_t v14 = *(unsigned int *)(v4 + 8);
      unint64_t v15 = (void *)(*(void *)v4 + 8 * v14 - 8);
      if (v14) {
        BOOL v16 = (unint64_t)v15 > v13;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        unint64_t v17 = v13 + 8;
        do
        {
          uint64_t v18 = *(void *)(v17 - 8);
          *(void *)(v17 - 8) = *v15;
          *v15-- = v18;
          BOOL v19 = v17 >= (unint64_t)v15;
          v17 += 8;
        }
        while (!v19);
      }
    }
    else if (v12 == 2)
    {
      *(int8x16_t *)unint64_t v4 = vextq_s8(*(int8x16_t *)v4, *(int8x16_t *)v4, 8uLL);
    }
  }
  unint64_t v20 = *((void *)this + 9);
  if (v20 >= *((void *)this + 8))
  {
    int v21 = 0;
  }
  else
  {
    *((void *)this + 9) = v20 + 1;
    int v21 = *(unsigned __int8 *)(*((void *)this + 7) + v20);
  }
  HIDWORD(v22) = v21;
  LODWORD(v22) = (v21 << 24) - 1677721600;
  unsigned int v23 = (v22 >> 25);
  BOOL v16 = v23 > 7;
  int v24 = (1 << v23) & 0xC3;
  if (v16 || v24 == 0)
  {
    unint64_t v4 = 0;
  }
  else
  {
    uint64_t v26 = (char)v21;
    unint64_t v27 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v27;
    if (!v27 || v27 + 24 > *((void *)this + 2))
    {
      unint64_t v28 = 2 * *((void *)this + 4);
      if (v28 <= 0x20) {
        unint64_t v28 = 32;
      }
      *((void *)this + 4) = v28;
      unint64_t v29 = v28 + 8;
      BOOL v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      *BOOL v30 = *((void *)this + 3);
      unint64_t v27 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v30 + v29;
      *((void *)this + 3) = v30;
    }
    *((void *)this + 1) = v27 + 24;
    *(_WORD *)(v27 + 16) = 321;
    *(unsigned char *)(v27 + 18) = 4;
    *(void *)unint64_t v27 = v26;
    if (v4) {
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v27, this);
    }
  }
  unint64_t v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  unint64_t v32 = 0;
  if (v4 && v31)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, v31, this);
    unint64_t v32 = (swift::Demangle::__runtime::Node *)v4;
  }
  unint64_t v33 = *((void *)this + 9);
  if (v33 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v33) != 112) {
    return 0;
  }
  *((void *)this + 9) = v33 + 1;
  unint64_t v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  double result = 0;
  if (v32 && v34)
  {
    swift::Demangle::__runtime::Node::addChild(v32, v34, this);
    double result = v32;
  }
  unint64_t v36 = *((void *)this + 9);
  if (v36 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v36) != 114) {
    return 0;
  }
  *((void *)this + 9) = v36 + 1;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleIndexSubset(swift::Demangle::__runtime::Demangler *this)
{
  memset(&v10, 0, sizeof(v10));
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= *((void *)this + 8)) {
    std::string::value_type v3 = 0;
  }
  else {
    std::string::value_type v3 = *(unsigned char *)(*((void *)this + 7) + v2);
  }
  while (v3 == 83 || v3 == 85)
  {
    std::string::push_back(&v10, v3);
    unint64_t v5 = *((void *)this + 8);
    unint64_t v4 = *((void *)this + 9);
    if (v4 < v5) {
      *((void *)this + 9) = ++v4;
    }
    std::string::value_type v3 = 0;
    if (v4 < v5) {
      std::string::value_type v3 = *(unsigned char *)(*((void *)this + 7) + v4);
    }
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v10.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    unint64_t Node = 0;
    if ((*((unsigned char *)&v10.__r_.__value_.__s + 23) & 0x80) == 0) {
      return Node;
    }
    goto LABEL_18;
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &v10;
  }
  else {
    int v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(this, 327, v7, size);
  if ((*((unsigned char *)&v10.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_18:
  }
    operator delete(v10.__r_.__value_.__l.__data_);
  return Node;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleDifferentiabilityWitness(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v5 + v4;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 325;
  *(unsigned char *)(v2 + 18) = 0;
  int v6 = *((_DWORD *)this + 24);
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v6 - 1));
    if (*((_WORD *)v8 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v7;
      if (v6 == 1) {
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v8 = 0;
      int v7 = *((_DWORD *)this + 24);
    }
    do
    {
      unsigned int v9 = v7 - 1;
      std::string v10 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v9);
      *((_DWORD *)this + 24) = v9;
      if (!v10) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v10, this);
      int v7 = *((_DWORD *)this + 24);
    }
    while (v7);
    int v11 = *(unsigned __int8 *)(v2 + 18);
    if (v11 == 5)
    {
      unint64_t v12 = *(void *)v2;
      uint64_t v13 = *(unsigned int *)(v2 + 8);
      uint64_t v14 = (void *)(*(void *)v2 + 8 * v13 - 8);
      if (v13) {
        BOOL v15 = (unint64_t)v14 > v12;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15)
      {
        unint64_t v16 = v12 + 8;
        do
        {
          uint64_t v17 = *(void *)(v16 - 8);
          *(void *)(v16 - 8) = *v14;
          *v14-- = v17;
          BOOL v18 = v16 >= (unint64_t)v14;
          v16 += 8;
        }
        while (!v18);
      }
    }
    else if (v11 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
LABEL_25:
  unint64_t v19 = *((void *)this + 9);
  if (v19 >= *((void *)this + 8))
  {
    int v20 = 0;
  }
  else
  {
    *((void *)this + 9) = v19 + 1;
    int v20 = *(char *)(*((void *)this + 7) + v19);
  }
  HIDWORD(v22) = v20;
  LODWORD(v22) = v20 - 100;
  unsigned int v21 = v22 >> 1;
  if (v21 > 7 || ((0x93u >> v21) & 1) == 0) {
    return 0;
  }
  uint64_t v23 = qword_181637258[v21];
  unint64_t v24 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v24;
  if (!v24 || v24 + 24 > *((void *)this + 2))
  {
    unint64_t v25 = 2 * *((void *)this + 4);
    if (v25 <= 0x20) {
      unint64_t v25 = 32;
    }
    *((void *)this + 4) = v25;
    unint64_t v26 = v25 + 8;
    unint64_t v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
    *unint64_t v27 = *((void *)this + 3);
    unint64_t v24 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v27 + v26;
    *((void *)this + 3) = v27;
  }
  *((void *)this + 1) = v24 + 24;
  *(_WORD *)(v24 + 16) = 102;
  *(unsigned char *)(v24 + 18) = 4;
  *(void *)unint64_t v24 = v23;
  if (v2) {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v24, this);
  }
  unint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  unint64_t v29 = 0;
  if (v2 && v28)
  {
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v28, this);
    unint64_t v29 = (swift::Demangle::__runtime::Node *)v2;
  }
  unint64_t v30 = *((void *)this + 9);
  if (v30 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v30) != 112) {
    return 0;
  }
  *((void *)this + 9) = v30 + 1;
  unint64_t v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexSubset(this);
  unint64_t v32 = 0;
  if (v29 && v31)
  {
    swift::Demangle::__runtime::Node::addChild(v29, v31, this);
    unint64_t v32 = v29;
  }
  unint64_t v33 = *((void *)this + 9);
  if (v33 >= *((void *)this + 8) || *(unsigned char *)(*((void *)this + 7) + v33) != 114) {
    return 0;
  }
  *((void *)this + 9) = v33 + 1;
  if (v8 && v32) {
    swift::Demangle::__runtime::Node::addChild(v32, v8, this);
  }
  return v32;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleFuncSpecParam(swift::Demangle::__runtime::NodeFactory *a1, __int16 a2)
{
  unint64_t v4 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v4;
  if (!v4 || (unint64_t v5 = *((void *)a1 + 2), v4 + 24 > v5))
  {
    unint64_t v6 = 2 * *((void *)a1 + 4);
    if (v6 <= 0x20) {
      unint64_t v6 = 32;
    }
    *((void *)a1 + 4) = v6;
    unint64_t v7 = v6 + 8;
    unsigned int v8 = malloc_type_malloc(v6 + 8, 0xD0263BC5uLL);
    unint64_t v5 = (unint64_t)v8 + v7;
    *unsigned int v8 = *((void *)a1 + 3);
    unint64_t v4 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v5;
    *((void *)a1 + 3) = v8;
  }
  *((void *)a1 + 1) = v4 + 24;
  *(_WORD *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 18) = 0;
  unint64_t v9 = *((void *)a1 + 8);
  unint64_t v10 = *((void *)a1 + 9);
  if (v10 >= v9) {
    return 0;
  }
  unint64_t v11 = v10 + 1;
  *((void *)a1 + 9) = v10 + 1;
  uint64_t v12 = *((void *)a1 + 7);
  double result = (swift::Demangle::__runtime::Node *)v4;
  switch(*(unsigned char *)(v12 + v10))
  {
    case 'c':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v15 = v14 + 24 > v5;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15)
      {
        unint64_t v16 = 2 * *((void *)a1 + 4);
        if (v16 <= 0x20) {
          unint64_t v16 = 32;
        }
        *((void *)a1 + 4) = v16;
        unint64_t v17 = v16 + 8;
        BOOL v18 = malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
        *BOOL v18 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v18 + v17;
        *((void *)a1 + 3) = v18;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 5;
      break;
    case 'd':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 71)
      {
        unint64_t v11 = v10 + 2;
        *((void *)a1 + 9) = v10 + 2;
        unsigned int v19 = 192;
      }
      else
      {
        unsigned int v19 = 64;
      }
      goto LABEL_74;
    case 'e':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 68)
      {
        unint64_t v11 = v10 + 2;
        *((void *)a1 + 9) = v10 + 2;
        unsigned int v19 = 1088;
      }
      else
      {
        unsigned int v19 = 1024;
      }
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 71)
      {
        *((void *)a1 + 9) = ++v11;
        v19 |= 0x80u;
      }
LABEL_74:
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 79)
      {
        *((void *)a1 + 9) = ++v11;
        v19 |= 0x200u;
      }
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 88)
      {
        *((void *)a1 + 9) = v11 + 1;
        v19 |= 0x100u;
      }
      uint64_t v20 = v19;
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (!v14 || v14 + 24 > v5) {
        goto LABEL_89;
      }
      goto LABEL_92;
    case 'g':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 88)
      {
        *((void *)a1 + 9) = v10 + 2;
        uint64_t v20 = 384;
      }
      else
      {
        uint64_t v20 = 128;
      }
      goto LABEL_84;
    case 'i':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v21 = v14 + 24 > v5;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21)
      {
        unint64_t v22 = 2 * *((void *)a1 + 4);
        if (v22 <= 0x20) {
          unint64_t v22 = 32;
        }
        *((void *)a1 + 4) = v22;
        unint64_t v23 = v22 + 8;
        unint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
        *unint64_t v24 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v24 + v23;
        *((void *)a1 + 3) = v24;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 6;
      break;
    case 'n':
      return result;
    case 'o':
      if (v11 < v9 && *(unsigned char *)(v12 + v11) == 88)
      {
        *((void *)a1 + 9) = v10 + 2;
        uint64_t v20 = 768;
      }
      else
      {
        uint64_t v20 = 512;
      }
LABEL_84:
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v41 = v14 + 24 > v5;
      }
      else {
        BOOL v41 = 1;
      }
      if (v41)
      {
LABEL_89:
        unint64_t v42 = 2 * *((void *)a1 + 4);
        if (v42 <= 0x20) {
          unint64_t v42 = 32;
        }
        *((void *)a1 + 4) = v42;
        unint64_t v43 = v42 + 8;
        unint64_t v44 = malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        *unint64_t v44 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v44 + v43;
        *((void *)a1 + 3) = v44;
      }
LABEL_92:
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = v20;
      break;
    case 'p':
      if (v11 >= v9) {
        return 0;
      }
      double result = 0;
      unint64_t v29 = v10 + 2;
      *((void *)a1 + 9) = v10 + 2;
      switch(*(unsigned char *)(v12 + v11))
      {
        case 'd':
          unint64_t v30 = a1;
          unint64_t v31 = (swift::Demangle::__runtime::Node *)v4;
          unsigned int v32 = 3;
          goto LABEL_104;
        case 'f':
          unint64_t v45 = a1;
          uint64_t v46 = 0;
          goto LABEL_108;
        case 'g':
          unint64_t v45 = a1;
          uint64_t v46 = 1;
          goto LABEL_108;
        case 'i':
          unint64_t v30 = a1;
          unint64_t v31 = (swift::Demangle::__runtime::Node *)v4;
          unsigned int v32 = 2;
LABEL_104:
          return swift::Demangle::__runtime::Demangler::addFuncSpecParamNumber(v30, v31, v32);
        case 'k':
          unint64_t v45 = a1;
          uint64_t v46 = 9;
LABEL_108:
          double result = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v45, 80, v46);
          if (result) {
            goto LABEL_109;
          }
          return result;
        case 's':
          if (v29 >= v9) {
            return 0;
          }
          *((void *)a1 + 9) = v10 + 3;
          int v47 = *(char *)(v12 + v29);
          switch(v47)
          {
            case 'b':
              int v48 = "u8";
              break;
            case 'c':
              int v48 = "objc";
              break;
            case 'w':
              int v48 = "u16";
              break;
            default:
              return 0;
          }
          unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a1, 80, 4);
          if (Node) {
            swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, Node, a1);
          }
          double result = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a1, 81, v48);
          if (!result) {
            return result;
          }
LABEL_109:
          unint64_t v14 = (unint64_t)result;
          break;
        default:
          return result;
      }
      break;
    case 'r':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v33 = v14 + 24 > v5;
      }
      else {
        BOOL v33 = 1;
      }
      if (v33)
      {
        unint64_t v34 = 2 * *((void *)a1 + 4);
        if (v34 <= 0x20) {
          unint64_t v34 = 32;
        }
        *((void *)a1 + 4) = v34;
        unint64_t v35 = v34 + 8;
        unint64_t v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
        *unint64_t v36 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v36 + v35;
        *((void *)a1 + 3) = v36;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 8;
      break;
    case 's':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v37 = v14 + 24 > v5;
      }
      else {
        BOOL v37 = 1;
      }
      if (v37)
      {
        unint64_t v38 = 2 * *((void *)a1 + 4);
        if (v38 <= 0x20) {
          unint64_t v38 = 32;
        }
        *((void *)a1 + 4) = v38;
        unint64_t v39 = v38 + 8;
        unint64_t v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
        *unint64_t v40 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v40 + v39;
        *((void *)a1 + 3) = v40;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 7;
      break;
    case 'x':
      unint64_t v14 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
      *((void *)a1 + 1) = v14;
      if (v14) {
        BOOL v25 = v14 + 24 > v5;
      }
      else {
        BOOL v25 = 1;
      }
      if (v25)
      {
        unint64_t v26 = 2 * *((void *)a1 + 4);
        if (v26 <= 0x20) {
          unint64_t v26 = 32;
        }
        *((void *)a1 + 4) = v26;
        unint64_t v27 = v26 + 8;
        unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
        void *v28 = *((void *)a1 + 3);
        unint64_t v14 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
        *((void *)a1 + 2) = (char *)v28 + v27;
        *((void *)a1 + 3) = v28;
      }
      *((void *)a1 + 1) = v14 + 24;
      *(_WORD *)(v14 + 16) = 80;
      *(unsigned char *)(v14 + 18) = 4;
      *(void *)unint64_t v14 = 256;
      break;
    default:
      return 0;
  }
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v4, (swift::Demangle::__runtime::Node *)v14, a1);
  return (swift::Demangle::__runtime::Node *)v4;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::addFuncSpecParamNumber(swift::Demangle::__runtime::NodeFactory *a1, swift::Demangle::__runtime::Node *a2, unsigned int a3)
{
  uint64_t v5 = a3;
  unint64_t v6 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v6;
  if (!v6 || v6 + 24 > *((void *)a1 + 2))
  {
    unint64_t v7 = 2 * *((void *)a1 + 4);
    if (v7 <= 0x20) {
      unint64_t v7 = 32;
    }
    *((void *)a1 + 4) = v7;
    unint64_t v8 = v7 + 8;
    unint64_t v9 = malloc_type_malloc(v7 + 8, 0xD0263BC5uLL);
    *unint64_t v9 = *((void *)a1 + 3);
    unint64_t v6 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v9 + v8;
    *((void *)a1 + 3) = v9;
  }
  *((void *)a1 + 1) = v6 + 24;
  *(_WORD *)(v6 + 16) = 80;
  *(unsigned char *)(v6 + 18) = 4;
  *(void *)unint64_t v6 = v5;
  swift::Demangle::__runtime::Node::addChild(a2, (swift::Demangle::__runtime::Node *)v6, a1);
  unint64_t v10 = *((void *)a1 + 9);
  if (v10 >= *((void *)a1 + 8)) {
    return 0;
  }
  BOOL v33 = a2;
  unint64_t v11 = 0;
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  while (1)
  {
    uint64_t v15 = *((void *)a1 + 7);
    if (*(unsigned __int8 *)(v15 + v10) - 48 > 9) {
      break;
    }
    *((void *)a1 + 9) = v10 + 1;
    char v16 = *(unsigned char *)(v15 + v10);
    if (v13 < v12) {
      goto LABEL_10;
    }
    unint64_t v17 = &v11[v12];
    BOOL v18 = (char *)*((void *)a1 + 1);
    if (v17 != v18)
    {
      unint64_t v19 = *((void *)a1 + 2);
LABEL_16:
      if (2 * v12 <= 4) {
        uint64_t v21 = 4;
      }
      else {
        uint64_t v21 = 2 * v12;
      }
      uint64_t v22 = v21 + v12;
      if (!v18 || (unint64_t)&v18[v22] > v19)
      {
        unint64_t v23 = 2 * *((void *)a1 + 4);
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        *((void *)a1 + 4) = v23;
        unint64_t v24 = v23 + 8;
        BOOL v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
        unint64_t v26 = (char *)v25 + v24;
        *BOOL v25 = *((void *)a1 + 3);
        BOOL v18 = (char *)(v25 + 1);
        *((void *)a1 + 2) = v26;
        *((void *)a1 + 3) = v25;
      }
      *((void *)a1 + 1) = &v18[v22];
      if (v12) {
        memcpy(v18, v11, v12);
      }
      unint64_t v11 = v18;
      goto LABEL_9;
    }
    uint64_t v20 = v17 + 1;
    unint64_t v19 = *((void *)a1 + 2);
    if ((unint64_t)v20 > v19) {
      goto LABEL_16;
    }
    *((void *)a1 + 1) = v20;
    LODWORD(v21) = 1;
LABEL_9:
    v12 += v21;
LABEL_10:
    unsigned int v14 = v13 + 1;
    v11[v13] = v16;
    unint64_t v10 = *((void *)a1 + 9);
    ++v13;
    if (v10 >= *((void *)a1 + 8)) {
      goto LABEL_28;
    }
  }
  unsigned int v14 = v13;
LABEL_28:
  if (!v14) {
    return 0;
  }
  unint64_t v27 = (*((void *)a1 + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)a1 + 1) = v27;
  if (!v27 || v27 + 24 > *((void *)a1 + 2))
  {
    unint64_t v28 = 2 * *((void *)a1 + 4);
    if (v28 <= 0x20) {
      unint64_t v28 = 32;
    }
    *((void *)a1 + 4) = v28;
    unint64_t v29 = v28 + 8;
    unint64_t v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
    *unint64_t v30 = *((void *)a1 + 3);
    unint64_t v27 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = (char *)v30 + v29;
    *((void *)a1 + 3) = v30;
  }
  *((void *)a1 + 1) = v27 + 24;
  *(_WORD *)(v27 + 16) = 81;
  *(unsigned char *)(v27 + 18) = 3;
  *(void *)unint64_t v27 = v11;
  *(void *)(v27 + 8) = v14;
  unint64_t v31 = v33;
  if (v33) {
    swift::Demangle::__runtime::Node::addChild(v33, (swift::Demangle::__runtime::Node *)v27, a1);
  }
  return v31;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleExtendedExistentialShape(swift::Demangle::__runtime::Demangler *this, int a2)
{
  int v2 = *((_DWORD *)this + 24);
  if (!v2) {
    return 0;
  }
  unint64_t v4 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v2 - 1));
  if (*((_WORD *)v4 + 8) == 232)
  {
    *((_DWORD *)this + 24) = --v2;
    if (a2 != 71) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v4 = 0;
    if (a2 != 71) {
      goto LABEL_15;
    }
  }
  if (v2)
  {
    unsigned int v5 = v2 - 1;
    unint64_t v6 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v5);
    if (*((_WORD *)v6 + 8) == 43)
    {
      *((_DWORD *)this + 24) = v5;
      if (v4)
      {
        unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v7;
        if (!v7 || v7 + 24 > *((void *)this + 2))
        {
          unint64_t v8 = 2 * *((void *)this + 4);
          if (v8 <= 0x20) {
            unint64_t v8 = 32;
          }
          *((void *)this + 4) = v8;
          unint64_t v9 = v8 + 8;
          unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
          unint64_t v11 = (char *)v10 + v9;
          *unint64_t v10 = *((void *)this + 3);
          unint64_t v7 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v11;
          *((void *)this + 3) = v10;
        }
        *((void *)this + 1) = v7 + 24;
        *(_WORD *)(v7 + 16) = 334;
        *(unsigned char *)(v7 + 18) = 0;
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v6, this);
        goto LABEL_22;
      }
      return 0;
    }
  }
LABEL_15:
  if (!v4) {
    return 0;
  }
  unint64_t v7 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (!v7 || v7 + 24 > *((void *)this + 2))
  {
    unint64_t v12 = 2 * *((void *)this + 4);
    if (v12 <= 0x20) {
      unint64_t v12 = 32;
    }
    *((void *)this + 4) = v12;
    unint64_t v13 = v12 + 8;
    unsigned int v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    uint64_t v15 = (char *)v14 + v13;
    *unsigned int v14 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v15;
    *((void *)this + 3) = v14;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 334;
  *(unsigned char *)(v7 + 18) = 0;
LABEL_22:
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, v4, this);
  return v7;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleSymbolicExtendedExistentialType(swift::Demangle::__runtime::Demangler *this)
{
  int v2 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popRetroactiveConformances(this);
  unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v3;
  if (!v3 || v3 + 24 > *((void *)this + 2))
  {
    unint64_t v4 = 2 * *((void *)this + 4);
    if (v4 <= 0x20) {
      unint64_t v4 = 32;
    }
    *((void *)this + 4) = v4;
    unint64_t v5 = v4 + 8;
    unint64_t v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
    unint64_t v7 = (char *)v6 + v5;
    *unint64_t v6 = *((void *)this + 3);
    unint64_t v3 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v6;
  }
  *((void *)this + 1) = v3 + 24;
  *(_WORD *)(v3 + 16) = 235;
  *(unsigned char *)(v3 + 18) = 0;
  int v8 = *((_DWORD *)this + 24);
  if (!v8) {
    return 0;
  }
  do
  {
    unint64_t v9 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * (v8 - 1));
    if (*((_WORD *)v9 + 8) != 232) {
      break;
    }
    *((_DWORD *)this + 24) = v8 - 1;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, v9, this);
    int v8 = *((_DWORD *)this + 24);
  }
  while (v8);
  int v10 = *(unsigned __int8 *)(v3 + 18);
  if (v10 == 5)
  {
    unint64_t v11 = *(void *)v3;
    uint64_t v12 = *(unsigned int *)(v3 + 8);
    unint64_t v13 = (void *)(*(void *)v3 + 8 * v12 - 8);
    if (v12) {
      BOOL v14 = (unint64_t)v13 > v11;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      unint64_t v15 = v11 + 8;
      do
      {
        uint64_t v16 = *(void *)(v15 - 8);
        *(void *)(v15 - 8) = *v13;
        *v13-- = v16;
        BOOL v17 = v15 >= (unint64_t)v13;
        v15 += 8;
      }
      while (!v17);
    }
  }
  else if (v10 == 2)
  {
    *(int8x16_t *)unint64_t v3 = vextq_s8(*(int8x16_t *)v3, *(int8x16_t *)v3, 8uLL);
  }
  if (!v8) {
    return 0;
  }
  unsigned int v18 = v8 - 1;
  unint64_t v19 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v18);
  *((_DWORD *)this + 24) = v18;
  if (!v19 || (*((_WORD *)v19 + 8) & 0xFFFE) != 0x150) {
    return 0;
  }
  if (v2)
  {
    unint64_t v20 = swift::Demangle::__runtime::Demangler::createWithChildren(this, 338, v19, (swift::Demangle::__runtime::Node *)v3, v2);
    if (!v20) {
      return 0;
    }
  }
  else
  {
    if (!v3) {
      return v3;
    }
    unint64_t v20 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = v20;
    if (!v20 || v20 + 24 > *((void *)this + 2))
    {
      unint64_t v22 = 2 * *((void *)this + 4);
      if (v22 <= 0x20) {
        unint64_t v22 = 32;
      }
      *((void *)this + 4) = v22;
      unint64_t v23 = v22 + 8;
      unint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      BOOL v25 = (char *)v24 + v23;
      *unint64_t v24 = *((void *)this + 3);
      unint64_t v20 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = v25;
      *((void *)this + 3) = v24;
    }
    *((void *)this + 1) = v20 + 24;
    *(_WORD *)(v20 + 16) = 338;
    *(unsigned char *)(v20 + 18) = 0;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v20, v19, this);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v20, (swift::Demangle::__runtime::Node *)v3, this);
  }
  unint64_t v3 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v3;
  if (!v3 || v3 + 24 > *((void *)this + 2))
  {
    unint64_t v26 = 2 * *((void *)this + 4);
    if (v26 <= 0x20) {
      unint64_t v26 = 32;
    }
    *((void *)this + 4) = v26;
    unint64_t v27 = v26 + 8;
    unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
    unint64_t v29 = (char *)v28 + v27;
    void *v28 = *((void *)this + 3);
    unint64_t v3 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v29;
    *((void *)this + 3) = v28;
  }
  *((void *)this + 1) = v3 + 24;
  *(_WORD *)(v3 + 16) = 232;
  *(unsigned char *)(v3 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v3, (swift::Demangle::__runtime::Node *)v20, this);
  return v3;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMetatypeRepresentation(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (v1 >= *((void *)this + 8)) {
    return 0;
  }
  *((void *)this + 9) = v1 + 1;
  int v3 = *(char *)(*((void *)this + 7) + v1);
  if (v3 == 84)
  {
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v9 = 2 * *((void *)this + 4);
      if (v9 <= 0x20) {
        unint64_t v9 = 32;
      }
      *((void *)this + 4) = v9;
      unint64_t v10 = v9 + 8;
      unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
      void *v11 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v11 + v10;
      *((void *)this + 3) = v11;
    }
    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(unsigned char *)(result + 18) = 3;
    *(void *)unint64_t result = "@thick";
    uint64_t v8 = 6;
    goto LABEL_24;
  }
  if (v3 == 111)
  {
    unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = result;
    if (!result || result + 24 > *((void *)this + 2))
    {
      unint64_t v12 = 2 * *((void *)this + 4);
      if (v12 <= 0x20) {
        unint64_t v12 = 32;
      }
      *((void *)this + 4) = v12;
      unint64_t v13 = v12 + 8;
      BOOL v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
      *BOOL v14 = *((void *)this + 3);
      unint64_t result = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
      *((void *)this + 2) = (char *)v14 + v13;
      *((void *)this + 3) = v14;
    }
    *((void *)this + 1) = result + 24;
    *(_WORD *)(result + 16) = 146;
    *(unsigned char *)(result + 18) = 3;
    *(void *)unint64_t result = "@objc_metatype";
    uint64_t v8 = 14;
    goto LABEL_24;
  }
  if (v3 != 116) {
    return 0;
  }
  unint64_t result = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = result;
  if (!result || result + 24 > *((void *)this + 2))
  {
    unint64_t v5 = 2 * *((void *)this + 4);
    if (v5 <= 0x20) {
      unint64_t v5 = 32;
    }
    *((void *)this + 4) = v5;
    unint64_t v6 = v5 + 8;
    unint64_t v7 = malloc_type_malloc(v5 + 8, 0xD0263BC5uLL);
    *unint64_t v7 = *((void *)this + 3);
    unint64_t result = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = (char *)v7 + v6;
    *((void *)this + 3) = v7;
  }
  *((void *)this + 1) = result + 24;
  *(_WORD *)(result + 16) = 146;
  *(unsigned char *)(result + 18) = 3;
  *(void *)unint64_t result = "@thin";
  uint64_t v8 = 5;
LABEL_24:
  *(void *)(result + 8) = v8;
  return result;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleConstrainedExistentialRequirementList(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || v2 + 24 > *((void *)this + 2))
  {
    unint64_t v3 = 2 * *((void *)this + 4);
    if (v3 <= 0x20) {
      unint64_t v3 = 32;
    }
    *((void *)this + 4) = v3;
    unint64_t v4 = v3 + 8;
    unint64_t v5 = malloc_type_malloc(v3 + 8, 0xD0263BC5uLL);
    unint64_t v6 = (char *)v5 + v4;
    *unint64_t v5 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v5;
  }
  *((void *)this + 1) = v2 + 24;
  *(_WORD *)(v2 + 16) = 84;
  *(unsigned char *)(v2 + 18) = 0;
  do
  {
    int v9 = *((_DWORD *)this + 24);
    if (!v9) {
      return 0;
    }
    uint64_t v10 = (v9 - 1);
    uint64_t v11 = *((void *)this + 11);
    int v12 = *(unsigned __int16 *)(*(void *)(v11 + 8 * v10) + 16);
    if (v12 == 275)
    {
      *((_DWORD *)this + 24) = v10;
      if (v9 == 1) {
        return 0;
      }
      uint64_t v10 = (v9 - 2);
    }
    unint64_t v7 = *(unsigned __int16 **)(v11 + 8 * v10);
    int v8 = v7[8];
    if ((v8 - 39) >= 4 && v8 != 354 && v8 != 36) {
      return 0;
    }
    *((_DWORD *)this + 24) = v10;
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, (swift::Demangle::__runtime::Node *)v7, this);
  }
  while (v12 != 275);
  int v14 = *(unsigned __int8 *)(v2 + 18);
  if (v14 == 5)
  {
    uint64_t v15 = *(unsigned int *)(v2 + 8);
    if (v15)
    {
      uint64_t v16 = (void *)(*(void *)v2 + 8 * v15 - 8);
      if ((unint64_t)v16 > *(void *)v2)
      {
        unint64_t v17 = *(void *)v2 + 8;
        do
        {
          uint64_t v18 = *(void *)(v17 - 8);
          *(void *)(v17 - 8) = *v16;
          *v16-- = v18;
          BOOL v19 = v17 >= (unint64_t)v16;
          v17 += 8;
        }
        while (!v19);
      }
    }
  }
  else if (v14 == 2)
  {
    *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
  }
  return v2;
}

unint64_t swift::Demangle::__runtime::Demangler::demangleProtocolList(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v2 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v2;
  if (!v2 || (unint64_t v3 = *((void *)this + 2), v2 + 24 > v3))
  {
    unint64_t v4 = 2 * *((void *)this + 4);
    if (v4 <= 0x20) {
      unint64_t v4 = 32;
    }
    *((void *)this + 4) = v4;
    unint64_t v5 = v4 + 8;
    unint64_t v6 = malloc_type_malloc(v4 + 8, 0xD0263BC5uLL);
    unint64_t v3 = (unint64_t)v6 + v5;
    *unint64_t v6 = *((void *)this + 3);
    unint64_t v2 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v3;
    *((void *)this + 3) = v6;
  }
  *(_WORD *)(v2 + 16) = 235;
  *(unsigned char *)(v2 + 18) = 0;
  unint64_t v7 = (v2 + 31) & 0xFFFFFFFFFFFFFFF8;
  *((void *)this + 1) = v7;
  if (v7) {
    BOOL v8 = v7 + 24 > v3;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    unint64_t v9 = 2 * *((void *)this + 4);
    if (v9 <= 0x20) {
      unint64_t v9 = 32;
    }
    *((void *)this + 4) = v9;
    unint64_t v10 = v9 + 8;
    uint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    int v12 = (char *)v11 + v10;
    void *v11 = *((void *)this + 3);
    unint64_t v7 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 2) = v12;
    *((void *)this + 3) = v11;
  }
  *((void *)this + 1) = v7 + 24;
  *(_WORD *)(v7 + 16) = 190;
  *(unsigned char *)(v7 + 18) = 0;
  swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v7, (swift::Demangle::__runtime::Node *)v2, this);
  int v13 = *((_DWORD *)this + 24);
  if (v13 && (unsigned int v14 = v13 - 1, *(_WORD *)(*(void *)(*((void *)this + 11) + 8 * v14) + 16) == 274))
  {
    *((_DWORD *)this + 24) = v14;
  }
  else
  {
    do
    {
      int v15 = *((_DWORD *)this + 24);
      if (v15 && (unsigned int v16 = v15 - 1, v17 = *(void *)(*((void *)this + 11) + 8 * v16), *(_WORD *)(v17 + 16) == 275)) {
        *((_DWORD *)this + 24) = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popProtocol(this);
      if (!v18) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v2, v18, this);
    }
    while (!v17);
    int v19 = *(unsigned __int8 *)(v2 + 18);
    if (v19 == 5)
    {
      uint64_t v21 = *(unsigned int *)(v2 + 8);
      if (v21)
      {
        unint64_t v22 = (void *)(*(void *)v2 + 8 * v21 - 8);
        if ((unint64_t)v22 > *(void *)v2)
        {
          unint64_t v23 = *(void *)v2 + 8;
          do
          {
            uint64_t v24 = *(void *)(v23 - 8);
            *(void *)(v23 - 8) = *v22;
            *v22-- = v24;
            BOOL v25 = v23 >= (unint64_t)v22;
            v23 += 8;
          }
          while (!v25);
        }
      }
    }
    else if (v19 == 2)
    {
      *(int8x16_t *)unint64_t v2 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    }
  }
  return v7;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleAccessor(swift::Demangle::__runtime::Demangler *this, swift::Demangle::__runtime::Node *a2)
{
  unint64_t v3 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 >= v3) {
    return 0;
  }
  unint64_t v5 = v2 + 1;
  *((void *)this + 9) = v2 + 1;
  uint64_t v6 = *((void *)this + 7);
  __int16 v8 = 141;
  unint64_t v9 = a2;
  switch(*(unsigned char *)(v6 + v2))
  {
    case 'G':
      __int16 v8 = 100;
      goto LABEL_17;
    case 'M':
      __int16 v8 = 152;
      goto LABEL_17;
    case 'W':
      __int16 v8 = 51;
      goto LABEL_17;
    case 'a':
      if (v5 >= v3) {
        return 0;
      }
      unint64_t v9 = 0;
      *((void *)this + 9) = v2 + 2;
      __int16 v8 = 169;
      switch(*(unsigned char *)(v6 + v5))
      {
        case 'O':
          goto LABEL_17;
        case 'P':
          __int16 v8 = 157;
          goto LABEL_17;
        case 'o':
          __int16 v8 = 155;
          goto LABEL_17;
        case 'u':
          __int16 v8 = 251;
          goto LABEL_17;
        default:
          return v9;
      }
      return v9;
    case 'g':
      __int16 v8 = 98;
      goto LABEL_17;
    case 'i':
      __int16 v8 = 126;
      goto LABEL_17;
    case 'l':
      if (v5 >= v3) {
        return 0;
      }
      unint64_t v9 = 0;
      *((void *)this + 9) = v2 + 2;
      __int16 v8 = 168;
      switch(*(unsigned char *)(v6 + v5))
      {
        case 'O':
          goto LABEL_17;
        case 'o':
          __int16 v8 = 154;
          goto LABEL_17;
        case 'p':
          __int16 v8 = 156;
          goto LABEL_17;
        case 'u':
          __int16 v8 = 250;
          goto LABEL_17;
        default:
          return v9;
      }
      return v9;
    case 'm':
      goto LABEL_17;
    case 'p':
      return v9;
    case 'r':
      __int16 v8 = 204;
      goto LABEL_17;
    case 's':
      __int16 v8 = 215;
      goto LABEL_17;
    case 'w':
      __int16 v8 = 257;
LABEL_17:
      if (!a2) {
        return 0;
      }
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)this + 1) = v9;
      if (!v9 || (unint64_t)v9 + 24 > *((void *)this + 2))
      {
        unint64_t v10 = 2 * *((void *)this + 4);
        if (v10 <= 0x20) {
          unint64_t v10 = 32;
        }
        *((void *)this + 4) = v10;
        unint64_t v11 = v10 + 8;
        int v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
        int v13 = (char *)v12 + v11;
        void *v12 = *((void *)this + 3);
        unint64_t v9 = (swift::Demangle::__runtime::Node *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((void *)this + 2) = v13;
        *((void *)this + 3) = v12;
      }
      *((void *)this + 1) = (char *)v9 + 24;
      *((_WORD *)v9 + 8) = v8;
      *((unsigned char *)v9 + 18) = 0;
      swift::Demangle::__runtime::Node::addChild(v9, a2, this);
      break;
    default:
      return 0;
  }
  return v9;
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::Demangler::demangleEntity(swift::Demangle::__runtime::Demangler *this, __int16 a2)
{
  int v4 = *((_DWORD *)this + 24);
  if (v4
    && (unsigned int v5 = v4 - 1,
        uint64_t v6 = *(swift::Demangle::__runtime::Node **)(*((void *)this + 11) + 8 * v5),
        *((_WORD *)v6 + 8) == 232))
  {
    *((_DWORD *)this + 24) = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::popFunctionParamLabels(this, v6);
  int v8 = *((_DWORD *)this + 24);
  if (!v8
    || ((unsigned int v9 = v8 - 1,
         unint64_t v10 = *(unsigned __int16 **)(*((void *)this + 11) + 8 * v9),
         int v11 = v10[8],
         (v11 - 173) <= 0x3C)
      ? (BOOL v12 = ((1 << (v11 + 83)) & 0x100000010000010DLL) == 0)
      : (BOOL v12 = 1),
        v12
     && ((v11 - 101) <= 0x24
       ? (BOOL v13 = ((1 << (v11 - 101)) & 0x1000800001) == 0)
       : (BOOL v13 = 1),
         v13 && v11 != 347)))
  {
    unint64_t v10 = 0;
  }
  else
  {
    *((_DWORD *)this + 24) = v9;
  }
  unsigned int v14 = swift::Demangle::__runtime::Demangler::popContext(this);
  if (v7) {
    int v15 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, a2, v14, (swift::Demangle::__runtime::Node *)v10, v7, v6);
  }
  else {
    int v15 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, a2, v14, (swift::Demangle::__runtime::Node *)v10, v6);
  }

  return setParentForOpaqueReturnTypeNodes(this, v15, v6);
}

unint64_t swift::Demangle::__runtime::Demangler::demangleMacroExpansion(swift::Demangle::__runtime::Demangler *this)
{
  unint64_t v1 = *((void *)this + 8);
  unint64_t v2 = *((void *)this + 9);
  if (v2 < v1)
  {
    int v4 = 0;
    unint64_t v5 = v2 + 1;
    *((void *)this + 9) = v2 + 1;
    uint64_t v6 = *((void *)this + 7);
    __int16 v7 = 8;
    int v8 = 1;
    switch(*(unsigned char *)(v6 + v2))
    {
      case 'X':
        if (v5 >= v1) {
          goto LABEL_76;
        }
        int v9 = *(unsigned __int8 *)(v6 + v5);
        if (v9 == 95)
        {
          uint64_t v10 = 0;
          unint64_t v5 = v2 + 2;
          *((void *)this + 9) = v2 + 2;
        }
        else if ((v9 - 48) > 9)
        {
LABEL_76:
          uint64_t v10 = -1000;
        }
        else
        {
          int v30 = 0;
          while (1)
          {
            int v31 = *(unsigned __int8 *)(v6 + v5);
            if ((v31 - 48) > 9) {
              break;
            }
            int v32 = v31 + 10 * v30 - 48;
            if (v32 < v30) {
              goto LABEL_76;
            }
            *((void *)this + 9) = ++v5;
            int v30 = v32;
            if (v1 == v5)
            {
              uint64_t v10 = -1000;
LABEL_85:
              uint64_t v34 = -1000;
              goto LABEL_86;
            }
          }
          uint64_t v10 = -1000;
          if ((v30 & 0x80000000) == 0 && v5 < v1 && v31 == 95)
          {
            *((void *)this + 9) = ++v5;
            uint64_t v10 = (v30 + 1);
          }
        }
        if (v5 >= v1) {
          goto LABEL_85;
        }
        int v33 = *(unsigned __int8 *)(v6 + v5);
        if (v33 == 95)
        {
          uint64_t v34 = 0;
          *((void *)this + 9) = v5 + 1;
          goto LABEL_86;
        }
        if ((v33 - 48) > 9) {
          goto LABEL_85;
        }
        int v35 = 0;
        while (1)
        {
          int v36 = *(unsigned __int8 *)(v6 + v5);
          if ((v36 - 48) > 9) {
            break;
          }
          int v37 = v36 + 10 * v35 - 48;
          if (v37 >= v35)
          {
            *((void *)this + 9) = ++v5;
            int v35 = v37;
            if (v1 != v5) {
              continue;
            }
          }
          goto LABEL_85;
        }
        uint64_t v34 = -1000;
        if ((v35 & 0x80000000) == 0 && v5 < v1 && v36 == 95)
        {
          *((void *)this + 9) = v5 + 1;
          uint64_t v34 = (v35 + 1);
        }
LABEL_86:
        unint64_t v38 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v38;
        if (!v38 || v38 + 24 > *((void *)this + 2))
        {
          unint64_t v39 = 2 * *((void *)this + 4);
          if (v39 <= 0x20) {
            unint64_t v39 = 32;
          }
          *((void *)this + 4) = v39;
          unint64_t v40 = v39 + 8;
          BOOL v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
          unint64_t v42 = (char *)v41 + v40;
          *BOOL v41 = *((void *)this + 3);
          unint64_t v38 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = v42;
          *((void *)this + 3) = v41;
        }
        *((void *)this + 1) = v38 + 24;
        *(_WORD *)(v38 + 16) = 102;
        *(unsigned char *)(v38 + 18) = 4;
        *(void *)unint64_t v38 = v10;
        unint64_t v43 = (*((void *)this + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
        *((void *)this + 1) = v43;
        if (!v43 || v43 + 24 > *((void *)this + 2))
        {
          unint64_t v44 = 2 * *((void *)this + 4);
          if (v44 <= 0x20) {
            unint64_t v44 = 32;
          }
          *((void *)this + 4) = v44;
          unint64_t v45 = v44 + 8;
          uint64_t v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
          *uint64_t v46 = *((void *)this + 3);
          unint64_t v43 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
          *((void *)this + 2) = (char *)v46 + v45;
          *((void *)this + 3) = v46;
        }
        *((void *)this + 1) = v43 + 24;
        *(_WORD *)(v43 + 16) = 102;
        *(unsigned char *)(v43 + 18) = 4;
        *(void *)unint64_t v43 = v34;
        int v47 = *((_DWORD *)this + 24);
        if (v47)
        {
          uint64_t v48 = (v47 - 1);
          uint64_t v49 = *((void *)this + 11);
          unint64_t v50 = *(swift::Demangle::__runtime::Node **)(v49 + 8 * v48);
          if (*((_WORD *)v50 + 8) == 101)
          {
            *((_DWORD *)this + 24) = v48;
            if (v47 == 1) {
              goto LABEL_104;
            }
            uint64_t v48 = (v47 - 2);
          }
          else
          {
            unint64_t v50 = 0;
          }
          __int16 v51 = *(swift::Demangle::__runtime::Node **)(v49 + 8 * v48);
          if (*((_WORD *)v51 + 8) == 101)
          {
            *((_DWORD *)this + 24) = v48;
            goto LABEL_105;
          }
        }
        else
        {
          unint64_t v50 = 0;
        }
LABEL_104:
        __int16 v51 = 0;
LABEL_105:
        return swift::Demangle::__runtime::Demangler::createWithChildren(this, 139, v51, v50, (swift::Demangle::__runtime::Node *)v38, (swift::Demangle::__runtime::Node *)v43);
      case 'a':
        goto LABEL_17;
      case 'b':
        __int16 v7 = 12;
        goto LABEL_17;
      case 'c':
        __int16 v7 = 28;
        goto LABEL_17;
      case 'e':
        __int16 v7 = 72;
        goto LABEL_17;
      case 'f':
        int v8 = 0;
        int v11 = (_DWORD *)((char *)this + 96);
        int v12 = *((_DWORD *)this + 24);
        __int16 v7 = 74;
        if (v12)
        {
          int v13 = 1;
          goto LABEL_19;
        }
        uint64_t v17 = 0;
        int v15 = 0;
        uint64_t v18 = 0;
        goto LABEL_64;
      case 'm':
        __int16 v7 = 142;
        goto LABEL_17;
      case 'p':
        __int16 v7 = 172;
        goto LABEL_17;
      case 'q':
        __int16 v7 = 174;
        goto LABEL_17;
      case 'r':
        __int16 v7 = 143;
        goto LABEL_17;
      case 'u':
        int v8 = 0;
        __int16 v7 = 140;
LABEL_17:
        int v11 = (_DWORD *)((char *)this + 96);
        int v12 = *((_DWORD *)this + 24);
        if (v12)
        {
          int v13 = 0;
LABEL_19:
          uint64_t v14 = *((void *)this + 11);
          int v15 = *(swift::Demangle::__runtime::Node **)(v14 + 8 * (v12 - 1));
          if (*((_WORD *)v15 + 8) == 101)
          {
            _DWORD *v11 = --v12;
            if (!v13)
            {
LABEL_44:
              LODWORD(v16) = v12;
              uint64_t v17 = 0;
              if (!v8)
              {
LABEL_45:
                uint64_t v18 = 0;
                if (!v16) {
                  goto LABEL_64;
                }
                goto LABEL_46;
              }
LABEL_30:
              if (!v16)
              {
                uint64_t v18 = 0;
                int v8 = 1;
                goto LABEL_64;
              }
              uint64_t v16 = (v16 - 1);
              uint64_t v19 = *((void *)this + 11);
              uint64_t v18 = *(unsigned __int16 **)(v19 + 8 * v16);
              int v20 = v18[8];
              if ((v20 - 173) > 0x3C
                || ((1 << (v20 + 83)) & 0x100000010000010DLL) == 0)
              {
                BOOL v22 = (v20 - 101) > 0x24 || ((1 << (v20 - 101)) & 0x1000800001) == 0;
                if (v22 && v20 != 347)
                {
                  uint64_t v18 = 0;
                  int v8 = 1;
LABEL_47:
                  unint64_t v23 = *(unsigned __int16 **)(v19 + 8 * v16);
                  int v24 = v23[8];
                  BOOL v25 = (v24 - 139) > 0x21 || ((1 << (v24 + 117)) & 0x200000019) == 0;
                  if (!v25
                    || ((v24 - 28) <= 0x2E
                      ? (BOOL v26 = ((1 << (v24 - 28)) & 0x500000000001) == 0)
                      : (BOOL v26 = 1),
                        v26 ? (BOOL v27 = v24 == 8) : (BOOL v27 = 1),
                        v27))
                  {
                    *((_DWORD *)this + 24) = v16;
                    unint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
                    if (v8)
                    {
LABEL_65:
                      int v4 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v7, (swift::Demangle::__runtime::Node *)v23, (swift::Demangle::__runtime::Node *)v18, v15, v28);
                      if (!v17) {
                        return (unint64_t)v4;
                      }
LABEL_66:
                      swift::Demangle::__runtime::Node::addChild(v4, v17, this);
                      return (unint64_t)v4;
                    }
LABEL_61:
                    int v4 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::createWithChildren(this, v7, (swift::Demangle::__runtime::Node *)v23, v15, v28);
                    if (!v17) {
                      return (unint64_t)v4;
                    }
                    goto LABEL_66;
                  }
LABEL_64:
                  unint64_t v23 = (unsigned __int16 *)swift::Demangle::__runtime::Demangler::popContext(this);
                  unint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleIndexAsNode(this);
                  if (v8) {
                    goto LABEL_65;
                  }
                  goto LABEL_61;
                }
              }
              _DWORD *v11 = v16;
              int v8 = 1;
              if (!v16) {
                goto LABEL_64;
              }
LABEL_46:
              uint64_t v19 = *((void *)this + 11);
              uint64_t v16 = (v16 - 1);
              goto LABEL_47;
            }
          }
          else
          {
            int v15 = 0;
            if (!v13) {
              goto LABEL_44;
            }
          }
          if (v12)
          {
            LODWORD(v16) = v12 - 1;
            uint64_t v17 = *(swift::Demangle::__runtime::Node **)(v14 + 8 * (v12 - 1));
            if (*((_WORD *)v17 + 8) == 176)
            {
              _DWORD *v11 = v16;
              if ((v8 & 1) == 0)
              {
                int v8 = 0;
                uint64_t v18 = 0;
                if (v12 == 1) {
                  goto LABEL_64;
                }
                goto LABEL_46;
              }
              goto LABEL_30;
            }
            goto LABEL_44;
          }
        }
        else
        {
          int v15 = 0;
        }
        LODWORD(v16) = 0;
        uint64_t v17 = 0;
        if (!v8) {
          goto LABEL_45;
        }
        goto LABEL_30;
      default:
        return (unint64_t)v4;
    }
  }
  return 0;
}

void swift::Demangle::__runtime::NodeFactory::~NodeFactory(swift::Demangle::__runtime::NodeFactory *this)
{
  *(void *)this = &unk_1ECA07768;
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      free(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1ECA07768;
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      free(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    *(unsigned char *)(v4 + 48) = 0;
  }

  JUMPOUT(0x1852FF000);
}

uint64_t swift::Mangle::__runtime::needsPunycodeEncoding(unsigned char *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  while (1)
  {
    if ((*a1 - 48) >= 0xAu && ((*a1 & 0xDF) - 65) >= 0x1Au)
    {
      int v4 = *a1;
      if (v4 != 95 && v4 != 36) {
        break;
      }
    }
    ++a1;
    if (!--a2) {
      return 0;
    }
  }
  return 1;
}

uint64_t swift::Mangle::__runtime::translateOperatorChar(swift::Mangle::__runtime *this)
{
  int v2 = this - 33;
  uint64_t result = 97;
  switch(v2)
  {
    case 0:
      uint64_t result = 110;
      break;
    case 4:
      uint64_t result = 114;
      break;
    case 5:
      return result;
    case 9:
      uint64_t result = 109;
      break;
    case 10:
      uint64_t result = 112;
      break;
    case 12:
      uint64_t result = 115;
      break;
    case 13:
      uint64_t result = 122;
      break;
    case 14:
      uint64_t result = 100;
      break;
    case 27:
      uint64_t result = 108;
      break;
    case 28:
      uint64_t result = 101;
      break;
    case 29:
      uint64_t result = 103;
      break;
    case 30:
      uint64_t result = 113;
      break;
    case 31:
      uint64_t result = 99;
      break;
    case 61:
      uint64_t result = 120;
      break;
    case 91:
      uint64_t result = 111;
      break;
    case 93:
      uint64_t result = 116;
      break;
    default:
      uint64_t result = (uint64_t)this;
      break;
  }
  return result;
}

void swift::Mangle::__runtime::translateOperator(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    uint64_t v3 = a2;
    do
    {
      unsigned int v6 = *a1++;
      std::string::value_type v7 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)v6);
      std::string::push_back(a3, v7);
      --v3;
    }
    while (v3);
  }
}

void *swift::Mangle::__runtime::getStandardTypeSubst@<X0>(void *result@<X0>, size_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v6 = result;
  switch(a2)
  {
    case 3uLL:
      uint64_t result = (void *)memcmp(result, "Set", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "Int", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "i";
      }
      else
      {
        int v8 = "h";
      }
      goto LABEL_167;
    case 4uLL:
      uint64_t result = (void *)memcmp(result, "Bool", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "UInt", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "u";
      }
      else
      {
        int v8 = "b";
      }
      goto LABEL_167;
    case 5uLL:
      uint64_t result = (void *)memcmp(result, "Array", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "Float", a2);
        if (result)
        {
          uint64_t result = (void *)memcmp(v6, "Range", a2);
          if (result) {
            goto LABEL_97;
          }
          int v8 = "n";
        }
        else
        {
          int v8 = "f";
        }
      }
      else
      {
        int v8 = "a";
      }
      goto LABEL_167;
    case 6uLL:
      uint64_t result = (void *)memcmp(result, "Double", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "String", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "S";
      }
      else
      {
        int v8 = "d";
      }
      goto LABEL_167;
    case 7uLL:
      uint64_t result = (void *)memcmp(result, "Numeric", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "j";
      goto LABEL_167;
    case 8uLL:
      uint64_t result = (void *)memcmp(result, "Optional", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "Hashable", a2);
        if (result)
        {
          uint64_t result = (void *)memcmp(v6, "Sequence", a2);
          if (result) {
            goto LABEL_97;
          }
          int v8 = "T";
        }
        else
        {
          int v8 = "H";
        }
      }
      else
      {
        int v8 = "q";
      }
      goto LABEL_167;
    case 9uLL:
      uint64_t result = (void *)memcmp(result, "Character", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "Substring", a2);
        if (result)
        {
          uint64_t result = (void *)memcmp(v6, "Encodable", a2);
          if (result)
          {
            if (*v6 == 0x6C6261646F636544 && *((unsigned char *)v6 + 8) == 101)
            {
              int v8 = "e";
            }
            else
            {
              uint64_t result = (void *)memcmp(v6, "Equatable", a2);
              if (result) {
                goto LABEL_97;
              }
              int v8 = "Q";
            }
          }
          else
          {
            int v8 = "E";
          }
        }
        else
        {
          int v8 = "s";
        }
      }
      else
      {
        int v8 = "J";
      }
      goto LABEL_167;
    case 0xAuLL:
      uint64_t result = (void *)memcmp(result, "Dictionary", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "Comparable", a2);
        if (result)
        {
          if (*v6 == 0x697463656C6C6F43 && *((_WORD *)v6 + 4) == 28271)
          {
            int v8 = "l";
          }
          else
          {
            uint64_t result = (void *)memcmp(v6, "Strideable", a2);
            if (result) {
              goto LABEL_97;
            }
            int v8 = "x";
          }
        }
        else
        {
          int v8 = "L";
        }
      }
      else
      {
        int v8 = "D";
      }
      goto LABEL_167;
    case 0xBuLL:
      uint64_t result = (void *)memcmp(result, "ClosedRange", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "N";
      goto LABEL_167;
    case 0xDuLL:
      uint64_t result = (void *)memcmp(result, "UnsafePointer", a2);
      if (!result)
      {
        int v8 = "P";
        goto LABEL_167;
      }
      uint64_t result = (void *)memcmp(v6, "FloatingPoint", a2);
      if (!result)
      {
        int v8 = "F";
        goto LABEL_167;
      }
      uint64_t result = (void *)memcmp(v6, "SignedInteger", a2);
      if (!result)
      {
        int v8 = "Z";
        goto LABEL_167;
      }
      if (*v6 == 0x6E497972616E6942 && *(void *)((char *)v6 + 5) == 0x72656765746E4979)
      {
        int v8 = "z";
        goto LABEL_167;
      }
      goto LABEL_97;
    case 0xEuLL:
      uint64_t result = (void *)memcmp(result, "DefaultIndices", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "StringProtocol", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "y";
      }
      else
      {
        int v8 = "I";
      }
      goto LABEL_167;
    case 0xFuLL:
      uint64_t result = (void *)memcmp(result, "UnsignedInteger", a2);
      if (!result)
      {
        int v8 = "U";
        goto LABEL_167;
      }
      if (*v6 == 0x70784565676E6152 && *(void *)((char *)v6 + 7) == 0x6E6F697373657270)
      {
        int v8 = "X";
        goto LABEL_167;
      }
      goto LABEL_97;
    case 0x10uLL:
      uint64_t result = (void *)memcmp(result, "ObjectIdentifier", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "UnsafeRawPointer", a2);
        if (result)
        {
          uint64_t result = (void *)memcmp(v6, "IteratorProtocol", a2);
          if (result)
          {
            uint64_t result = (void *)memcmp(v6, "RawRepresentable", a2);
            if (result) {
              goto LABEL_97;
            }
            int v8 = "Y";
          }
          else
          {
            int v8 = "t";
          }
        }
        else
        {
          int v8 = "V";
        }
      }
      else
      {
        int v8 = "O";
      }
      goto LABEL_167;
    case 0x11uLL:
      uint64_t result = (void *)memcmp(result, "MutableCollection", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "M";
      goto LABEL_167;
    case 0x13uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeBufferPointer", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "BinaryFloatingPoint", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "B";
      }
      else
      {
        int v8 = "R";
      }
      goto LABEL_167;
    case 0x14uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutablePointer", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "p";
      goto LABEL_167;
    case 0x15uLL:
      uint64_t result = (void *)memcmp(result, "RandomNumberGenerator", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "G";
      goto LABEL_167;
    case 0x16uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeRawBufferPointer", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "RandomAccessCollection", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "k";
      }
      else
      {
        int v8 = "W";
      }
      goto LABEL_167;
    case 0x17uLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutableRawPointer", a2);
      if (result)
      {
        uint64_t result = (void *)memcmp(v6, "BidirectionalCollection", a2);
        if (result) {
          goto LABEL_97;
        }
        int v8 = "K";
      }
      else
      {
        int v8 = "v";
      }
      goto LABEL_167;
    case 0x1AuLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutableBufferPointer", a2);
      if (!result)
      {
        int v8 = "r";
        goto LABEL_167;
      }
      uint64_t result = (void *)memcmp(v6, "RangeReplaceableCollection", a2);
      if (!result)
      {
        int v8 = "m";
LABEL_167:
        *(void *)a4 = v8;
        *(void *)(a4 + 8) = 1;
        char v18 = 1;
        goto LABEL_168;
      }
LABEL_97:
      if (a3)
      {
        switch(a2)
        {
          case 4uLL:
            uint64_t result = (void *)memcmp(v6, "Task", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cT";
            goto LABEL_171;
          case 5uLL:
            if (*(_DWORD *)v6 != 1869898561 || *((unsigned char *)v6 + 4) != 114) {
              goto LABEL_150;
            }
            uint64_t v17 = "cA";
            goto LABEL_171;
          case 8uLL:
            uint64_t result = (void *)memcmp(v6, "Executor", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cF";
            goto LABEL_171;
          case 9uLL:
            uint64_t result = (void *)memcmp(v6, "TaskGroup", a2);
            if (result)
            {
              uint64_t result = (void *)memcmp(v6, "MainActor", a2);
              if (result) {
                goto LABEL_150;
              }
              uint64_t v17 = "cM";
            }
            else
            {
              uint64_t v17 = "cG";
            }
            goto LABEL_171;
          case 0xAuLL:
            uint64_t result = (void *)memcmp(v6, "UnownedJob", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cJ";
            goto LABEL_171;
          case 0xBuLL:
            uint64_t result = (void *)memcmp(v6, "AsyncStream", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cS";
            goto LABEL_171;
          case 0xCuLL:
            uint64_t result = (void *)memcmp(v6, "TaskExecutor", a2);
            if (result)
            {
              uint64_t result = (void *)memcmp(v6, "TaskPriority", a2);
              if (result) {
                goto LABEL_150;
              }
              uint64_t v17 = "cP";
            }
            else
            {
              uint64_t v17 = "ch";
            }
            goto LABEL_171;
          case 0xDuLL:
            uint64_t result = (void *)memcmp(v6, "AsyncSequence", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "ci";
            goto LABEL_171;
          case 0xEuLL:
            uint64_t result = (void *)memcmp(v6, "SerialExecutor", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cf";
            goto LABEL_171;
          case 0x11uLL:
            uint64_t result = (void *)memcmp(v6, "CancellationError", a2);
            if (result)
            {
              uint64_t result = (void *)memcmp(v6, "ThrowingTaskGroup", a2);
              if (result)
              {
                uint64_t result = (void *)memcmp(v6, "UnsafeCurrentTask", a2);
                if (result) {
                  goto LABEL_150;
                }
                uint64_t v17 = "ct";
              }
              else
              {
                uint64_t v17 = "cg";
              }
            }
            else
            {
              uint64_t v17 = "cE";
            }
            goto LABEL_171;
          case 0x12uLL:
            uint64_t result = (void *)memcmp(v6, "UnsafeContinuation", a2);
            if (result) {
              goto LABEL_150;
            }
            uint64_t v17 = "cc";
            goto LABEL_171;
          case 0x13uLL:
            uint64_t result = (void *)memcmp(v6, "CheckedContinuation", a2);
            if (result)
            {
              uint64_t result = (void *)memcmp(v6, "AsyncThrowingStream", a2);
              if (result) {
                goto LABEL_150;
              }
              uint64_t v17 = "cs";
            }
            else
            {
              uint64_t v17 = "cC";
            }
            goto LABEL_171;
          case 0x15uLL:
            uint64_t result = (void *)memcmp(v6, "UnownedSerialExecutor", a2);
            if (result)
            {
              uint64_t result = (void *)memcmp(v6, "AsyncIteratorProtocol", a2);
              if (result) {
                goto LABEL_150;
              }
              uint64_t v17 = "cI";
            }
            else
            {
              uint64_t v17 = "ce";
            }
LABEL_171:
            *(void *)a4 = v17;
            *(void *)(a4 + 8) = 2;
            char v18 = 1;
            break;
          default:
            goto LABEL_150;
        }
      }
      else
      {
LABEL_150:
        char v18 = 0;
        *(unsigned char *)a4 = 0;
      }
LABEL_168:
      *(unsigned char *)(a4 + 16) = v18;
      return result;
    case 0x1DuLL:
      uint64_t result = (void *)memcmp(result, "UnsafeMutableRawBufferPointer", a2);
      if (result) {
        goto LABEL_97;
      }
      int v8 = "w";
      goto LABEL_167;
    case 0x21uLL:
      if (*result != 0x656C65726F747541
        || result[1] != 0x736E55676E697361
        || result[2] != 0x626174754D656661
        || result[3] != 0x65746E696F50656CLL
        || *((unsigned char *)result + 32) != 114)
      {
        goto LABEL_97;
      }
      char v18 = 1;
      *(void *)a4 = "A";
      *(void *)(a4 + 8) = 1;
      goto LABEL_168;
    default:
      goto LABEL_97;
  }
}

std::string *swift::Demangle::__runtime::DemanglerPrinter::operator<<(std::string *a1, uint64_t a2)
{
  snprintf(__str, 0x20uLL, "%llu", a2);
  std::string::append(a1, __str);
  return a1;
}

std::string *swift::Demangle::__runtime::DemanglerPrinter::writeHex(std::string *a1, uint64_t a2)
{
  snprintf(__str, 0x20uLL, "%llX", a2);
  std::string::append(a1, __str);
  return a1;
}

double swift::Demangle::__runtime::genericParameterName@<D0>(swift::Demangle::__runtime *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  memset(&v8, 0, sizeof(v8));
  do
  {
    std::string::push_back(&v8, a2 % 0x1A + 65);
    BOOL v6 = a2 > 0x19;
    a2 /= 0x1AuLL;
  }
  while (v6);
  if (this)
  {
    snprintf(__str, 0x20uLL, "%llu", this);
    std::string::append(&v8, __str);
  }
  double result = *(double *)&v8.__r_.__value_.__l.__data_;
  *a3 = v8;
  return result;
}

void swift::Demangle::__runtime::keyPathSourceString(swift::Demangle::__runtime *this, const char *a2)
{
  char v4 = 3;
  LODWORD(v3) = 2112095;
  swift::Demangle::__runtime::Context::Context((swift::Demangle::__runtime::Context *)v2);
}

void swift::Demangle::__runtime::keyPathSourceString(char const*,unsigned long)::$_1::operator()(void *a1@<X0>, char *a2@<X8>)
{
  int v3 = *((unsigned __int16 *)a1 + 8);
  if (v3 != 137)
  {
    if (v3 != 101)
    {
      a2[23] = 9;
      strcpy(a2, "<unknown>");
      return;
    }
    size_t v4 = a1[1];
    if (v4 <= 0x7FFFFFFFFFFFFFF7)
    {
      unint64_t v5 = (void *)*a1;
      if (v4 >= 0x17)
      {
        uint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17) {
          uint64_t v11 = v4 | 7;
        }
        uint64_t v12 = v11 + 1;
        int v13 = (char *)operator new(v11 + 1);
        *((void *)a2 + 1) = v4;
        *((void *)a2 + 2) = v12 | 0x8000000000000000;
        *(void *)a2 = v13;
        a2 = v13;
      }
      else
      {
        a2[23] = v4;
        if (!v4) {
          goto LABEL_18;
        }
      }
      memmove(a2, v5, v4);
LABEL_18:
      a2[v4] = 0;
      return;
    }
LABEL_36:
    abort();
  }
  if (*((unsigned char *)a1 + 18) == 5) {
    a1 = (void *)*a1;
  }
  uint64_t v6 = a1[1];
  std::string::size_type v7 = *(void *)(v6 + 8);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_36;
  }
  std::string v8 = *(const void **)v6;
  unint64_t v9 = *(void *)*a1 + 1;
  if (v7 >= 0x17)
  {
    uint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v14 = v7 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(v6 + 8);
  p_dst = &__dst;
  if (v7) {
LABEL_22:
  }
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  uint64_t v16 = std::string::append(&__dst, " #");
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v20 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
  *(std::string *)a2 = *v20;
  v20->__r_.__value_.__r.__words[0] = 0;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_35;
  }
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  std::string::size_type v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void swift::Demangle::__runtime::keyPathSourceString(char const*,unsigned long)::$_0::operator()(uint64_t **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = **a1;
  if (0xAAAAAAAAAAAAAAABLL * (((*a1)[1] - v3) >> 3) <= a2)
  {
    *(unsigned char *)(a3 + 23) = 9;
    strcpy((char *)a3, "<unknown>");
  }
  else
  {
    int v4 = (long long *)(v3 + 24 * a2);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      long long v5 = *v4;
      *(void *)(a3 + 16) = *((void *)v4 + 2);
      *(_OWORD *)a3 = v5;
    }
  }
}

void *std::string::basic_string<__swift::__runtime::llvm::StringRef,0>(void *__dst, uint64_t a2)
{
  size_t v2 = *(void *)(a2 + 8);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  int v4 = *(const void **)a2;
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v5 = operator new(v6 + 1);
    __dst[1] = v2;
    __dst[2] = v7 | 0x8000000000000000;
    void *__dst = v5;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v2;
    long long v5 = __dst;
    if (!v2) {
      goto LABEL_9;
    }
  }
  memmove(v5, v4, v2);
LABEL_9:
  *((unsigned char *)v5 + v2) = 0;
  return __dst;
}

uint64_t *swift::Demangle::__runtime::nodeToString@<X0>(uint64_t *__return_ptr a1@<X8>, uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a3@<X1>, const swift::Demangle::__runtime::DemangleOptions *a4@<X2>)
{
  if (!this)
  {
    *((unsigned char *)a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
    return this;
  }
  long long v5 = (swift::Demangle::__runtime::Node *)this;
  long long v9 = *(_OWORD *)a3;
  long long v10 = *((_OWORD *)a3 + 1);
  uint64_t v11 = *((void *)a3 + 4);
  uint64_t v6 = (swift::Demangle::__runtime::Node *)*((void *)a3 + 8);
  if (v6)
  {
    if (v6 == (swift::Demangle::__runtime::Node *)((char *)a3 + 40))
    {
      int v13 = v12;
      (*(void (**)(swift::Demangle::__runtime::Node *, void *, const swift::Demangle::__runtime::DemangleOptions *))(*(void *)v6 + 24))(v6, v12, a4);
      uint64_t v7 = v13;
    }
    else
    {
      uint64_t v7 = (uint64_t *)(*(uint64_t (**)(swift::Demangle::__runtime::Node *))(*(void *)v6 + 16))(v6);
      int v13 = v7;
    }
    memset(&__p, 0, sizeof(__p));
    long long v15 = v9;
    long long v16 = v10;
    uint64_t v17 = v11;
    if (v7)
    {
      if (v7 == v12)
      {
        uint64_t v19 = v18;
        (*(void (**)(void *, void *))(v12[0] + 24))(v12, v18);
      }
      else
      {
        uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
  }
  else
  {
    int v13 = 0;
    memset(&__p, 0, sizeof(__p));
    long long v8 = *((_OWORD *)a3 + 1);
    long long v15 = *(_OWORD *)a3;
    long long v16 = v8;
    uint64_t v17 = *((void *)a3 + 4);
    uint64_t v19 = 0;
  }
  __int16 v20 = 256;
  if (HIBYTE(v20))
  {
    *(std::string *)a1 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    *((unsigned char *)a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
  if (v19 != v18)
  {
    if (v19) {
      (*(void (**)(void))(*v19 + 40))();
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  (*(void (**)(void *))(v18[0] + 32))(v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_20:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_21:
  this = v13;
  if (v13 == v12) {
    return (uint64_t *)(*(uint64_t (**)(void *))(v12[0] + 32))(v12);
  }
  if (v13) {
    return (uint64_t *)(*(uint64_t (**)(void))(*v13 + 40))();
  }
  return this;
}

void swift::Demangle::__runtime::DemangleOptions::~DemangleOptions(swift::Demangle::__runtime::DemangleOptions *this)
{
  unint64_t v1 = (char *)this + 40;
  size_t v2 = (char *)*((void *)this + 8);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::NodePrinter::print(std::string *this, swift::Demangle::__runtime::Node *a2, const swift::Demangle::__runtime::DemangleOptions *a3, const swift::Demangle::__runtime::DemangleOptions *a4)
{
  uint64_t v5 = a3 < 0x301;
  if (a3 > 0x300)
  {
LABEL_820:
    std::string::append(this, "<<too complex>>", 0xFuLL);
    long long v10 = 0;
    char v8 = v5;
    goto LABEL_824;
  }
  char v6 = (char)a4;
  unsigned int v7 = a3;
  char v8 = 0;
  while (2)
  {
    if (!a2)
    {
      uint64_t v274 = "<null node pointer>";
      v275 = this;
      std::string::size_type v276 = 19;
LABEL_822:
      std::string::append(v275, v274, v276);
      goto LABEL_823;
    }
    int v11 = *((unsigned __int16 *)a2 + 8);
    long long v10 = 0;
    switch(*((_WORD *)a2 + 8))
    {
      case 0:
        v415 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          v415 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_WORD *)(*(void *)v415 + 16) == 24) {
          size_t v416 = 17;
        }
        else {
          size_t v416 = 4;
        }
        if (*(_WORD *)(*(void *)v415 + 16) == 24) {
          char v281 = "__allocating_init";
        }
        else {
          char v281 = "init";
        }
        v625 = "";
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 2;
        goto LABEL_1338;
      case 1:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2]) {
          goto LABEL_823;
        }
        int v366 = *((unsigned __int8 *)a2 + 18);
        long long v367 = a2;
        if (v366 == 2) {
          goto LABEL_979;
        }
        if (v366 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          long long v367 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_979:
          v368 = (swift::Demangle::__runtime::Node *)*((void *)v367 + 1);
        }
        else
        {
          v368 = 0;
        }
        unsigned int v597 = v7 + 1;
        std::string::append(this, ".(unknown context at ", 0x15uLL);
        int v598 = *((unsigned __int8 *)a2 + 18);
        v599 = (swift::Demangle::__runtime::Node **)a2;
        if ((v598 - 1) < 2) {
          goto LABEL_1757;
        }
        if (v598 == 5 && *((_DWORD *)a2 + 2))
        {
          v599 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1757:
          v600 = *v599;
        }
        else
        {
          v600 = 0;
        }
        std::string::append(this, ")", 1uLL);
        if (*((unsigned char *)a2 + 18) != 5) {
          goto LABEL_823;
        }
        if (*((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_823;
        }
        uint64_t v604 = *(void *)(*(void *)a2 + 16);
        int v605 = *(unsigned __int8 *)(v604 + 18);
        if ((v605 - 1) >= 2 && (v605 != 5 || !*(_DWORD *)(v604 + 8))) {
          goto LABEL_823;
        }
        std::string::push_back(this, 60);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v606 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        }
        else {
          v606 = 0;
        }
        v586 = this;
        std::string::value_type v587 = 62;
        goto LABEL_1720;
      case 2:
        int v314 = *((unsigned __int8 *)a2 + 18);
        if ((v314 - 1) >= 2 && (v314 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_823;
        }
        std::string::append(this, "(", 1uLL);
        int v315 = *((unsigned __int8 *)a2 + 18);
        unsigned int v316 = (swift::Demangle::__runtime::Node **)a2;
        if ((v315 - 1) < 2) {
          goto LABEL_881;
        }
        if (v315 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1489;
        }
        unsigned int v316 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_881:
        unsigned int v317 = v7 + 1;
        unint64_t v318 = 1;
        while (2)
        {
          unint64_t v320 = *((unsigned __int8 *)a2 + 18);
          if (v320 == 2) {
            goto LABEL_887;
          }
          if (v320 != 5) {
            goto LABEL_1489;
          }
          unint64_t v320 = *((unsigned int *)a2 + 2);
LABEL_887:
          if (v320 <= v318) {
            goto LABEL_1489;
          }
          std::string::append(this, ", ", 2uLL);
          int v321 = *((unsigned __int8 *)a2 + 18);
          if (v321 == 2)
          {
            unint64_t v322 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v321 != 5) {
              goto LABEL_882;
            }
            unint64_t v322 = *((unsigned int *)a2 + 2);
          }
          if (v322 > v318)
          {
            unsigned int v323 = v321 - 1;
            uint64_t v324 = a2;
            if (v323 >= 2) {
              uint64_t v324 = *(swift::Demangle::__runtime::Node **)a2;
            }
            uint64_t v319 = (swift::Demangle::__runtime::Node *)*((void *)v324 + v318);
            goto LABEL_883;
          }
LABEL_882:
          uint64_t v319 = 0;
LABEL_883:
          ++v318;
          continue;
        }
      case 3:
        goto LABEL_823;
      case 4:
      case 0x72:
      case 0x122:
      case 0x155:
      case 0x156:
        goto LABEL_824;
      case 5:
        int v487 = *((unsigned __int8 *)a2 + 18);
        v488 = (swift::Demangle::__runtime::Node **)a2;
        if ((v487 - 1) < 2) {
          goto LABEL_1373;
        }
        if (v487 == 5 && *((_DWORD *)a2 + 2))
        {
          v488 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1373:
          v489 = *v488;
        }
        else
        {
          v489 = 0;
        }
        std::string::push_back(this, 46);
        if (*((unsigned char *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v562 = *((void *)a2 + 1);
        uint64_t v274 = *(const std::string::value_type **)v562;
        std::string::size_type v276 = *(void *)(v562 + 8);
        v275 = this;
        goto LABEL_822;
      case 6:
        std::string::append(this, "associated type metadata accessor for ", 0x26uLL);
        int v46 = *((unsigned __int8 *)a2 + 18);
        int v47 = a2;
        if (v46 == 2) {
          goto LABEL_91;
        }
        if (v46 != 5) {
          goto LABEL_92;
        }
        goto LABEL_89;
      case 7:
        unint64_t v43 = "default associated type metadata accessor for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 46;
        goto LABEL_318;
      case 8:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v346 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v346 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = &unk_1ECA041D0;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v346, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "accessor macro @";
        goto LABEL_1402;
      case 9:
        std::string::append(this, "associated type witness table accessor for ", 0x2BuLL);
        int v133 = *((unsigned __int8 *)a2 + 18);
        unint64_t v134 = a2;
        if (v133 == 2) {
          goto LABEL_341;
        }
        if (v133 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v134 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_341:
          unint64_t v135 = (swift::Demangle::__runtime::Node *)*((void *)v134 + 1);
        }
        else
        {
          unint64_t v135 = 0;
        }
        std::string::append(this, " : ", 3uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          unint64_t v52 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        }
        else {
          unint64_t v52 = 0;
        }
        goto LABEL_468;
      case 0xA:
        std::string::append(this, "base witness table accessor for ", 0x20uLL);
        int v51 = *((unsigned __int8 *)a2 + 18);
        int v47 = a2;
        if (v51 == 2) {
          goto LABEL_91;
        }
        if (v51 != 5) {
          goto LABEL_92;
        }
LABEL_89:
        if (*((_DWORD *)a2 + 2) < 2u)
        {
LABEL_92:
          unint64_t v52 = 0;
        }
        else
        {
          int v47 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_91:
          unint64_t v52 = (swift::Demangle::__runtime::Node *)*((void *)v47 + 1);
        }
        ++v7;
LABEL_468:
        unsigned int v180 = " in ";
        int v181 = this;
        std::string::size_type v182 = 4;
        goto LABEL_469;
      case 0xB:
      case 0x16:
      case 0x40:
      case 0x41:
      case 0x52:
      case 0xA5:
      case 0xA6:
      case 0xDE:
      case 0xF5:
        v278 = this;
        v279 = 0;
        int v280 = a2;
        goto LABEL_828;
      case 0xC:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v479 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v479 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = &unk_1ECA041D0;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v479, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "body macro @";
        goto LABEL_1402;
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        goto LABEL_823;
      case 0x13:
      case 0x4C:
        char v281 = "";
        v625 = "";
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 2;
        goto LABEL_1476;
      case 0x14:
      case 0x17:
      case 0x65:
      case 0x6A:
      case 0x70:
      case 0x92:
        goto LABEL_1007;
      case 0x15:
        uint64_t v274 = "Builtin.TheTupleType";
        v275 = this;
        std::string::size_type v276 = 20;
        goto LABEL_822;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xB4:
      case 0xDB:
      case 0xEA:
      case 0x106:
        char v281 = "";
        v625 = "";
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 0;
        goto LABEL_1476;
      case 0x19:
        unint64_t v43 = "class metadata base offset for ";
        goto LABEL_108;
      case 0x1A:
        std::string::append(this, "concrete protocol conformance ", 0x1EuLL);
        int v144 = *((unsigned __int8 *)a2 + 18);
        if (v144 == 4)
        {
          std::string::append(this, "#", 1uLL);
          unint64_t v145 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, *(void *)a2);
          std::string::append(v145, " ", 1uLL);
          int v144 = *((unsigned __int8 *)a2 + 18);
        }
        __int16 v146 = (swift::Demangle::__runtime::Node **)a2;
        if ((v144 - 1) < 2) {
          goto LABEL_365;
        }
        if (v144 == 5 && *((_DWORD *)a2 + 2))
        {
          __int16 v146 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_365:
          int v147 = *v146;
        }
        else
        {
          int v147 = 0;
        }
        std::string::append(this, " to ", 4uLL);
        int v193 = *((unsigned __int8 *)a2 + 18);
        int v194 = a2;
        if (v193 == 2) {
          goto LABEL_515;
        }
        if (v193 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v194 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_515:
          unsigned int v195 = (swift::Demangle::__runtime::Node *)*((void *)v194 + 1);
        }
        else
        {
          unsigned int v195 = 0;
        }
        if (*((unsigned char *)a2 + 18) != 5) {
          goto LABEL_823;
        }
        if (*((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_823;
        }
        uint64_t v196 = *(void *)(*(void *)a2 + 16);
        int v197 = *(unsigned __int8 *)(v196 + 18);
        if ((v197 - 1) >= 2 && (v197 != 5 || !*(_DWORD *)(v196 + 8))) {
          goto LABEL_823;
        }
        int v157 = " with conditional requirements: ";
        unint64_t v158 = this;
        std::string::size_type v159 = 32;
        goto LABEL_523;
      case 0x1B:
        v372 = "pack protocol conformance ";
        unsigned __int8 v373 = this;
        std::string::size_type v374 = 26;
        goto LABEL_1507;
      case 0x1C:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v377 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v377 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = &unk_1ECA041D0;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v377, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "conformance macro @";
        goto LABEL_1402;
      case 0x1D:
        int v486 = *((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u;
        goto LABEL_1479;
      case 0x1E:
        unint64_t v28 = "coroutine continuation prototype for ";
        goto LABEL_118;
      case 0x1F:
        v477 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          v477 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_WORD *)(*(void *)v477 + 16) == 24) {
          size_t v416 = 21;
        }
        else {
          size_t v416 = 6;
        }
        if (*(_WORD *)(*(void *)v477 + 16) == 24) {
          char v281 = "__deallocating_deinit";
        }
        else {
          char v281 = "deinit";
        }
        v625 = "";
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 0;
LABEL_1338:
        int v443 = 0;
        goto LABEL_1478;
      case 0x20:
      case 0xE8:
        goto LABEL_311;
      case 0x21:
        v360 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v360 = *(swift::Demangle::__runtime::Node **)a2;
        }
        goto LABEL_1479;
      case 0x22:
        v372 = "dependent associated conformance ";
        unsigned __int8 v373 = this;
        std::string::size_type v374 = 33;
        goto LABEL_1507;
      case 0x23:
        int v106 = *((unsigned __int8 *)a2 + 18);
        unint64_t v107 = a2;
        if (v106 == 2) {
          goto LABEL_251;
        }
        if (v106 != 5) {
          goto LABEL_252;
        }
        unsigned int v108 = *((_DWORD *)a2 + 2);
        if (v108 < 2) {
          goto LABEL_255;
        }
        unint64_t v107 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_251:
        std::string::push_back(this, 46);
        int v106 = *((unsigned __int8 *)a2 + 18);
LABEL_252:
        if ((v106 - 1) < 2) {
          goto LABEL_299;
        }
        if (v106 != 5) {
          goto LABEL_496;
        }
        unsigned int v108 = *((_DWORD *)a2 + 2);
LABEL_255:
        if (!v108) {
          goto LABEL_496;
        }
        goto LABEL_298;
      case 0x24:
        int v103 = *((unsigned __int8 *)a2 + 18);
        uint64_t v104 = (swift::Demangle::__runtime::Node **)a2;
        if ((v103 - 1) < 2) {
          goto LABEL_244;
        }
        if (v103 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            unint64_t v105 = 0;
            goto LABEL_801;
          }
          uint64_t v104 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_244:
          unint64_t v105 = *v104;
        }
        else
        {
          unint64_t v105 = 0;
        }
        if (v103 == 2) {
          goto LABEL_631;
        }
        if (v103 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_631:
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_802;
        }
LABEL_801:
        long long v10 = 0;
LABEL_802:
        std::string::append(this, ": ", 2uLL);
        goto LABEL_7;
      case 0x25:
      case 0x2A:
        printer_unreachable("should be printed as a child of a DependentGenericSignature");
      case 0x26:
        if (*((unsigned char *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        std::function<std::string ()(unsigned long long,unsigned long long)>::operator()((uint64_t)&this[2].__r_.__value_.__r.__words[2], **(unsigned int **)a2, **((unsigned int **)a2 + 1));
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        std::string::append(this, (const std::string::value_type *)p_str, size);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_823;
      case 0x27:
        int v38 = *((unsigned __int8 *)a2 + 18);
        unint64_t v39 = (swift::Demangle::__runtime::Node **)a2;
        if ((v38 - 1) < 2) {
          goto LABEL_62;
        }
        if (v38 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            unint64_t v40 = 0;
            goto LABEL_733;
          }
          unint64_t v39 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_62:
          unint64_t v40 = *v39;
        }
        else
        {
          unint64_t v40 = 0;
        }
        if (v38 == 2) {
          goto LABEL_600;
        }
        if (v38 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_600:
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_734;
        }
LABEL_733:
        long long v10 = 0;
LABEL_734:
        std::string::append(this, " == ", 4uLL);
        goto LABEL_7;
      case 0x28:
        int v356 = *((unsigned __int8 *)a2 + 18);
        v357 = (swift::Demangle::__runtime::Node **)a2;
        if ((v356 - 1) < 2) {
          goto LABEL_947;
        }
        if (v356 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            uint64_t v358 = 0;
LABEL_1799:
            v565 = 0;
LABEL_1800:
            unsigned int v607 = v7 + 1;
            std::string::append(this, ".shape == ", 0xAuLL);
            v536 = ".shape";
            v560 = this;
            std::string::size_type v561 = 6;
LABEL_1801:
            std::string::append(v560, v536, v561);
            return 0;
          }
          v357 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_947:
          uint64_t v358 = *v357;
        }
        else
        {
          uint64_t v358 = 0;
        }
        if (v356 == 2)
        {
LABEL_1650:
          v565 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_1800;
        }
        if (v356 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1650;
        }
        goto LABEL_1799;
      case 0x29:
        int v483 = *((unsigned __int8 *)a2 + 18);
        v484 = (swift::Demangle::__runtime::Node **)a2;
        if ((v483 - 1) < 2) {
          goto LABEL_1360;
        }
        if (v483 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v485 = 0;
LABEL_1803:
            v575 = 0;
LABEL_1804:
            unsigned int v608 = v7 + 1;
            std::string::append(this, ": ", 2uLL);
            v609 = "_UnknownLayout";
            std::string::size_type v610 = 14;
            switch(**v575)
            {
              case 'C':
                v609 = "AnyObject";
                std::string::size_type v610 = 9;
                break;
              case 'D':
                v609 = "_NativeClass";
                std::string::size_type v610 = 12;
                break;
              case 'N':
                v609 = "_NativeRefCountedObject";
                std::string::size_type v610 = 23;
                break;
              case 'R':
                v609 = "_RefCountedObject";
                std::string::size_type v610 = 17;
                break;
              case 'T':
                goto LABEL_1809;
              case 'U':
                break;
              default:
                int v611 = **v575 & 0xDF;
                if (v611 == 77)
                {
                  v609 = "_TrivialAtMost";
                  std::string::size_type v610 = 14;
                }
                else if (v611 == 69)
                {
LABEL_1809:
                  v609 = "_Trivial";
                  std::string::size_type v610 = 8;
                }
                else
                {
                  std::string::size_type v610 = 0;
                  v609 = 0;
                }
                break;
            }
            std::string::append(this, v609, v610);
            if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u) {
              goto LABEL_823;
            }
            std::string::append(this, "(", 1uLL);
            if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
              v623 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
            }
            else {
              v623 = 0;
            }
            if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
            {
              std::string::append(this, ", ", 2uLL);
              if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u) {
                v403 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 24);
              }
              else {
                v403 = 0;
              }
              v405 = (_anonymous_namespace_::NodePrinter *)this;
              unsigned int v404 = v608;
LABEL_1116:
            }
            goto LABEL_1489;
          }
          v484 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1360:
          v485 = *v484;
        }
        else
        {
          v485 = 0;
        }
        v574 = a2;
        if (v483 == 2)
        {
LABEL_1691:
          v575 = (unsigned char **)*((void *)v574 + 1);
          goto LABEL_1804;
        }
        if (v483 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v574 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1691;
        }
        goto LABEL_1803;
      case 0x2B:
      case 0x2E:
        goto LABEL_823;
      case 0x2C:
        int v141 = *((unsigned __int8 *)a2 + 18);
        unint64_t v142 = (swift::Demangle::__runtime::Node **)a2;
        if ((v141 - 1) < 2) {
          goto LABEL_358;
        }
        if (v141 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            int v143 = 0;
LABEL_804:
            long long v10 = 0;
LABEL_805:
            unint64_t v269 = v10;
            while (1)
            {
              while (1)
              {
                v270 = v269;
                int v271 = *((unsigned __int16 *)v269 + 8);
                if (v271 != 232)
                {
                  BOOL v273 = (v271 - 44) > 0x26
                      || ((1 << (v271 - 44)) & 0x4000200001) == 0;
                  if (v273 && v271 != 245) {
                    std::string::push_back(this, 32);
                  }
                  goto LABEL_7;
                }
                int v272 = *((unsigned __int8 *)v270 + 18);
                if ((v272 - 1) >= 2) {
                  break;
                }
LABEL_808:
                unint64_t v269 = *(swift::Demangle::__runtime::Node **)v270;
              }
              unint64_t v269 = 0;
              if (v272 == 5)
              {
                unint64_t v269 = 0;
                if (*((_DWORD *)v270 + 2))
                {
                  v270 = *(swift::Demangle::__runtime::Node **)v270;
                  goto LABEL_808;
                }
              }
            }
          }
          unint64_t v142 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_358:
          int v143 = *v142;
        }
        else
        {
          int v143 = 0;
        }
        if (v141 == 2)
        {
LABEL_637:
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_805;
        }
        if (v141 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_637;
        }
        goto LABEL_804;
      case 0x2D:
        int v139 = *((unsigned __int8 *)a2 + 18);
        unsigned int v66 = (swift::Demangle::__runtime::Node **)a2;
        if ((v139 - 1) < 2) {
          goto LABEL_353;
        }
        if (v139 == 5 && *((_DWORD *)a2 + 2)) {
          goto LABEL_352;
        }
        goto LABEL_403;
      case 0x2F:
        int v94 = "dependent root protocol conformance ";
        unsigned int v95 = this;
        std::string::size_type v96 = 36;
        goto LABEL_324;
      case 0x30:
        int v94 = "dependent inherited protocol conformance ";
        unsigned int v95 = this;
        std::string::size_type v96 = 41;
        goto LABEL_324;
      case 0x31:
        int v94 = "dependent associated protocol conformance ";
        unsigned int v95 = this;
        std::string::size_type v96 = 42;
LABEL_324:
        std::string::append(v95, v94, v96);
        int v126 = *((unsigned __int8 *)a2 + 18);
        if (v126 == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          uint64_t v127 = *(void *)(*(void *)a2 + 16);
        }
        else {
          uint64_t v127 = 0;
        }
        if (*(unsigned char *)(v127 + 18) == 4)
        {
          std::string::append(this, "#", 1uLL);
          snprintf((char *)&__str, 0x20uLL, "%llu", *(void *)v127);
          std::string::append(this, (const std::string::value_type *)&__str);
          std::string::append(this, " ", 1uLL);
          int v126 = *((unsigned __int8 *)a2 + 18);
        }
        unint64_t v128 = (swift::Demangle::__runtime::Node **)a2;
        if ((v126 - 1) < 2) {
          goto LABEL_334;
        }
        if (v126 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v128 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_334:
          unint64_t v129 = *v128;
        }
        else
        {
          unint64_t v129 = 0;
        }
        int v130 = " to ";
        int v131 = this;
        std::string::size_type v132 = 4;
        goto LABEL_504;
      case 0x32:
        goto LABEL_1479;
      case 0x33:
        int v361 = *((unsigned __int8 *)a2 + 18);
        if ((v361 - 1) < 2) {
          goto LABEL_959;
        }
        if (v361 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_959:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "didset";
        goto LABEL_1536;
      case 0x34:
        if (*(_DWORD *)a2)
        {
          if (*(_DWORD *)a2 != 1) {
            printer_unreachable("bad directness");
          }
          v311 = "indirect";
          std::string::size_type v312 = 8;
        }
        else
        {
          v311 = "direct";
          std::string::size_type v312 = 6;
        }
        std::string::append(this, v311, v312);
        uint64_t v274 = " ";
        goto LABEL_1490;
      case 0x35:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "distributed thunk ";
LABEL_1320:
        v275 = this;
        std::string::size_type v276 = 18;
        goto LABEL_822;
      case 0x36:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "distributed accessor for ";
LABEL_1291:
        v275 = this;
        std::string::size_type v276 = 25;
        goto LABEL_822;
      case 0x37:
        uint64_t v274 = "dynamic ";
        goto LABEL_1749;
      case 0x38:
        uint64_t v274 = "super ";
        goto LABEL_1286;
      case 0x39:
      case 0x55:
        uint64_t v274 = "Self";
        goto LABEL_1032;
      case 0x3A:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "dynamically replaceable thunk for ";
        v275 = this;
        std::string::size_type v276 = 34;
        goto LABEL_822;
      case 0x3B:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "dynamically replaceable key for ";
        v275 = this;
        std::string::size_type v276 = 32;
        goto LABEL_822;
      case 0x3C:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "dynamically replaceable variable for ";
        v275 = this;
        std::string::size_type v276 = 37;
        goto LABEL_822;
      case 0x3E:
        unint64_t v43 = "enum case for ";
        goto LABEL_208;
      case 0x3F:
        uint64_t v274 = "<ERROR TYPE>";
        goto LABEL_1062;
      case 0x42:
        uint64_t v274 = "@Sendable ";
        goto LABEL_1246;
      case 0x43:
        int v431 = *((unsigned __int8 *)a2 + 18);
        if ((v431 - 1) >= 2 && (v431 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_823;
        }
        std::string::push_back(this, 64);
        int v432 = *((unsigned __int8 *)a2 + 18);
        if ((v432 - 1) < 2) {
          goto LABEL_1180;
        }
        if (v432 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1180:
          v433 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v433 = 0;
        }
        v586 = this;
        std::string::value_type v587 = 32;
LABEL_1720:
        std::string::push_back(v586, v587);
        return 0;
      case 0x44:
        std::string::append(this, "@differentiable", 0xFuLL);
        int v359 = *(unsigned __int8 *)a2;
        switch(v359)
        {
          case 'r':
            unint64_t v292 = "(reverse)";
            break;
          case 'l':
            unint64_t v292 = "(_linear)";
            break;
          case 'f':
            unint64_t v292 = "(_forward)";
            unsigned int v293 = this;
            std::string::size_type v291 = 10;
LABEL_1654:
            std::string::append(v293, v292, v291);
LABEL_1655:
            std::string::push_back(this, 32);
            goto LABEL_823;
          default:
            goto LABEL_1655;
        }
        unsigned int v293 = this;
        std::string::size_type v291 = 9;
        goto LABEL_1654;
      case 0x45:
        int v335 = *((unsigned __int8 *)a2 + 18);
        v336 = (swift::Demangle::__runtime::Node **)a2;
        if (v335 == 2) {
          goto LABEL_912;
        }
        switch(v335)
        {
          case 5:
            unsigned int v337 = *((_DWORD *)a2 + 2);
            if (v337 != 2)
            {
              unint64_t v338 = 0;
              goto LABEL_1762;
            }
            v336 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_912:
            unint64_t v338 = 1;
            std::string::append(this, " ", 1uLL);
            char v339 = 0;
            int v335 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            unint64_t v338 = 0;
            v595 = 0;
            if ((v339 & 1) == 0) {
              goto LABEL_1766;
            }
            goto LABEL_1764;
          case 2:
LABEL_1764:
            v595 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v338);
            goto LABEL_1766;
          default:
            unint64_t v338 = 0;
            char v339 = 1;
            break;
        }
        if (v335 != 5)
        {
LABEL_1765:
          v595 = 0;
LABEL_1766:
          v536 = ".Type";
          v560 = this;
          std::string::size_type v561 = 5;
          goto LABEL_1801;
        }
        unsigned int v337 = *((_DWORD *)a2 + 2);
LABEL_1762:
        if (v338 < v337)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1764;
        }
        goto LABEL_1765;
      case 0x46:
        v490 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v490 = *(swift::Demangle::__runtime::Node **)a2;
        }
        goto LABEL_1479;
      case 0x47:
        if (!this[1].__r_.__value_.__s.__data_[1] || !this[1].__r_.__value_.__s.__data_[2]) {
          goto LABEL_709;
        }
        std::string::append(this, "(extension in ", 0xEuLL);
        int v136 = *((unsigned __int8 *)a2 + 18);
        uint64_t v137 = (swift::Demangle::__runtime::Node **)a2;
        if ((v136 - 1) < 2) {
          goto LABEL_348;
        }
        if (v136 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v137 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_348:
          unint64_t v138 = *v137;
        }
        else
        {
          unint64_t v138 = 0;
        }
        std::string::append(this, "):", 2uLL);
LABEL_709:
        int v245 = *((unsigned __int8 *)a2 + 18);
        int v246 = a2;
        if (v245 == 2) {
          goto LABEL_713;
        }
        if (v245 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v246 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_713:
          BOOL v247 = (swift::Demangle::__runtime::Node *)*((void *)v246 + 1);
        }
        else
        {
          BOOL v247 = 0;
        }
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3 && !this[1].__r_.__value_.__s.__data_[19]) {
          goto LABEL_718;
        }
        goto LABEL_823;
      case 0x48:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v428 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v428 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = &unk_1ECA041D0;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v428, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "extension macro @";
        goto LABEL_1402;
      case 0x49:
        int v35 = *((unsigned __int8 *)a2 + 18);
        int v36 = (swift::Demangle::__runtime::Node **)a2;
        if ((v35 - 1) < 2) {
          goto LABEL_57;
        }
        if (v35 == 5 && *((_DWORD *)a2 + 2))
        {
          int v36 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_57:
          int v37 = *v36;
        }
        else
        {
          int v37 = 0;
        }
        int v130 = "field offset for ";
        goto LABEL_499;
      case 0x4A:
        goto LABEL_1479;
      case 0x4B:
        unint64_t v43 = "full type metadata for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 23;
        goto LABEL_318;
      case 0x4D:
        size_t v287 = "function signature specialization";
        uint64_t v288 = this;
        uint64_t v289 = (uint64_t *)a2;
        std::string::size_type v290 = 33;
        goto LABEL_1350;
      case 0x4E:
      case 0x4F:
        printer_unreachable("should be handled in printSpecializationPrefix");
      case 0x50:
        uint64_t v313 = *(void *)a2;
        if ((*(void *)a2 & 0x400) != 0)
        {
          std::string::append(this, "Existential To Protocol Constrained Generic", 0x2BuLL);
          if ((v313 & 0x40) == 0)
          {
            if ((v313 & 0x80) == 0) {
              goto LABEL_1638;
            }
LABEL_1636:
            std::string::append(this, " and ", 5uLL);
LABEL_1637:
            std::string::append(this, "Owned To Guaranteed", 0x13uLL);
            goto LABEL_1638;
          }
          std::string::append(this, " and ", 5uLL);
        }
        else if ((v313 & 0x40) == 0)
        {
          if ((v313 & 0x80) == 0)
          {
            if ((v313 & 0x200) == 0)
            {
              if ((v313 & 0x100) == 0)
              {
                long long v10 = 0;
                if ((int)v313 <= 127)
                {
                  switch((int)v313)
                  {
                    case 0:
                      uint64_t v274 = "Constant Propagated Function";
                      v275 = this;
                      std::string::size_type v276 = 28;
                      goto LABEL_822;
                    case 1:
                      uint64_t v274 = "Constant Propagated Global";
                      goto LABEL_1051;
                    case 2:
                      uint64_t v274 = "Constant Propagated Integer";
                      goto LABEL_1871;
                    case 3:
                      uint64_t v274 = "Constant Propagated Float";
                      goto LABEL_1291;
                    case 4:
                      uint64_t v274 = "Constant Propagated String";
                      goto LABEL_1051;
                    case 5:
                      uint64_t v274 = "Closure Propagated";
                      goto LABEL_1320;
                    case 6:
                      uint64_t v274 = "Value Promoted from Box";
                      goto LABEL_1751;
                    case 7:
                      uint64_t v274 = "Stack Promoted from Box";
                      goto LABEL_1751;
                    case 8:
                      uint64_t v274 = "InOut Converted to Out";
                      goto LABEL_1023;
                    case 9:
                      uint64_t v274 = "Constant Propagated KeyPath";
LABEL_1871:
                      v275 = this;
                      std::string::size_type v276 = 27;
                      goto LABEL_822;
                    case 64:
                      goto LABEL_1878;
                    default:
                      goto LABEL_824;
                  }
                }
                if ((int)v313 > 511)
                {
                  if (v313 != 512 && v313 != 1024) {
                    goto LABEL_824;
                  }
                }
                else if (v313 != 128 && v313 != 256)
                {
                  goto LABEL_824;
                }
LABEL_1878:
                printer_unreachable("option sets should have been handled earlier");
              }
              goto LABEL_1644;
            }
            goto LABEL_1642;
          }
          goto LABEL_1637;
        }
        std::string::append(this, "Dead", 4uLL);
        if ((v313 & 0x80) == 0)
        {
LABEL_1638:
          if ((v313 & 0x200) == 0)
          {
            if ((v313 & 0x100) == 0) {
              goto LABEL_823;
            }
LABEL_1643:
            std::string::append(this, " and ", 5uLL);
LABEL_1644:
            uint64_t v274 = "Exploded";
LABEL_1749:
            v275 = this;
            std::string::size_type v276 = 8;
            goto LABEL_822;
          }
          std::string::append(this, " and ", 5uLL);
LABEL_1642:
          std::string::append(this, "Guaranteed To Owned", 0x13uLL);
          if ((v313 & 0x100) == 0) {
            goto LABEL_823;
          }
          goto LABEL_1643;
        }
        goto LABEL_1636;
      case 0x51:
        v474 = *(swift::Demangle::__runtime **)a2;
        v475 = (const char *)*((void *)a2 + 1);
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = &unk_1ECA041D0;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::demangleSymbolAsString(v474, v475, (unint64_t)&__str, a4);
      case 0x53:
        std::string::append(this, "any ", 4uLL);
        int v480 = *((unsigned __int8 *)a2 + 18);
        v481 = (swift::Demangle::__runtime::Node **)a2;
        if ((v480 - 1) < 2) {
          goto LABEL_1355;
        }
        if (v480 == 5 && *((_DWORD *)a2 + 2))
        {
          v481 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1355:
          v482 = *v481;
        }
        else
        {
          v482 = 0;
        }
        unsigned int v557 = v7 + 1;
        std::string::append(this, "<", 1uLL);
        int v558 = *((unsigned __int8 *)a2 + 18);
        if (v558 == 2) {
          goto LABEL_1603;
        }
        if (v558 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1603:
          v559 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }
        else
        {
          v559 = 0;
        }
        v536 = ">";
        goto LABEL_1606;
      case 0x54:
        v434 = ", ";
        goto LABEL_1323;
      case 0x56:
        v328 = "generic partial specialization";
        v329 = this;
        long long v330 = (uint64_t *)a2;
        std::string::size_type v331 = 30;
        goto LABEL_1364;
      case 0x57:
        v328 = "generic not-reabstracted partial specialization";
        v329 = this;
        long long v330 = (uint64_t *)a2;
        std::string::size_type v331 = 47;
LABEL_1364:
        goto LABEL_823;
      case 0x58:
        unint64_t v43 = "generic protocol witness table for ";
        goto LABEL_317;
      case 0x59:
        unint64_t v43 = "instantiation function for generic protocol witness table for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 62;
        goto LABEL_318;
      case 0x5A:
        unint64_t v43 = "resilient protocol witness table for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 37;
        goto LABEL_318;
      case 0x5B:
      case 0x5D:
        size_t v287 = "generic specialization";
        uint64_t v288 = this;
        uint64_t v289 = (uint64_t *)a2;
        std::string::size_type v290 = 22;
        goto LABEL_1350;
      case 0x5C:
        size_t v287 = "generic not re-abstracted specialization";
        uint64_t v288 = this;
        uint64_t v289 = (uint64_t *)a2;
        std::string::size_type v290 = 40;
        goto LABEL_1350;
      case 0x5E:
        int v435 = *((unsigned __int8 *)a2 + 18);
        v436 = (swift::Demangle::__runtime::Node **)a2;
        if ((v435 - 1) < 2) {
          goto LABEL_1192;
        }
        if (v435 == 5 && *((_DWORD *)a2 + 2))
        {
          v436 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1192:
          v437 = *v436;
        }
        else
        {
          v437 = 0;
        }
        unsigned int v551 = v7 + 1;
        unsigned int v552 = *((unsigned __int8 *)a2 + 18);
        if (v552 != 2)
        {
          if (v552 != 5) {
            goto LABEL_823;
          }
          unsigned int v552 = *((_DWORD *)a2 + 2);
          if (v552 < 2) {
            goto LABEL_823;
          }
        }
        uint64_t v553 = v552;
        std::string::append(this, " with ", 6uLL);
        int v554 = *((unsigned __int8 *)a2 + 18);
        v555 = a2;
        if (v554 == 2) {
          goto LABEL_1591;
        }
        if (v554 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v555 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1591:
          v556 = (swift::Demangle::__runtime::Node *)*((void *)v555 + 1);
        }
        else
        {
          v556 = 0;
        }
        if (v553 == 2) {
          goto LABEL_823;
        }
        unint64_t v568 = 2;
        while (1)
        {
          std::string::append(this, " and ", 5uLL);
          int v570 = *((unsigned __int8 *)a2 + 18);
          if (v570 == 2)
          {
            unint64_t v571 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v570 != 5) {
              goto LABEL_1668;
            }
            unint64_t v571 = *((unsigned int *)a2 + 2);
          }
          if (v571 > v568)
          {
            unsigned int v572 = v570 - 1;
            v573 = a2;
            if (v572 >= 2) {
              v573 = *(swift::Demangle::__runtime::Node **)a2;
            }
            v569 = (swift::Demangle::__runtime::Node *)*((void *)v573 + v568);
            goto LABEL_1669;
          }
LABEL_1668:
          v569 = 0;
LABEL_1669:
          if (v553 == ++v568) {
            goto LABEL_823;
          }
        }
      case 0x5F:
        size_t v287 = "generic pre-specialization";
        uint64_t v288 = this;
        uint64_t v289 = (uint64_t *)a2;
        std::string::size_type v290 = 26;
        goto LABEL_1350;
      case 0x60:
        size_t v287 = "inlined generic function";
        uint64_t v288 = this;
        uint64_t v289 = (uint64_t *)a2;
        std::string::size_type v290 = 24;
LABEL_1350:
        goto LABEL_823;
      case 0x61:
        unint64_t v43 = "generic type metadata pattern for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 34;
        goto LABEL_318;
      case 0x62:
        int v447 = *((unsigned __int8 *)a2 + 18);
        if ((v447 - 1) < 2) {
          goto LABEL_1344;
        }
        if (v447 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1440;
        }
        goto LABEL_1343;
      case 0x63:
      case 0xEB:
        goto LABEL_1508;
      case 0x64:
        int v478 = *((unsigned __int8 *)a2 + 18);
        if ((v478 - 1) < 2) {
          goto LABEL_1344;
        }
        if (v478 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_1343:
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1344:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
LABEL_1440:
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "getter";
        goto LABEL_1536;
      case 0x66:
      case 0xA1:
      case 0xD8:
        goto LABEL_1155;
      case 0x67:
        v625 = "";
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        char v281 = "__ivar_initializer";
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 0;
        goto LABEL_1204;
      case 0x68:
        goto LABEL_1479;
      case 0x69:
        uint64_t v274 = "@escaping";
        goto LABEL_1781;
      case 0x6B:
        std::string::append(this, "@differentiable", 0xFuLL);
        int v464 = *(unsigned __int8 *)a2;
        switch(v464)
        {
          case 'f':
            uint64_t v274 = "(_forward)";
LABEL_1246:
            v275 = this;
            std::string::size_type v276 = 10;
            goto LABEL_822;
          case 'r':
            uint64_t v274 = "(reverse)";
            break;
          case 'l':
            uint64_t v274 = "(_linear)";
            break;
          default:
            goto LABEL_823;
        }
        goto LABEL_1781;
      case 0x6C:
        uint64_t v274 = "@isolated(any)";
        goto LABEL_1448;
      case 0x6D:
        uint64_t v274 = "sending";
        goto LABEL_1624;
      case 0x6E:
      case 0x6F:
        std::string::size_type v291 = *((void *)a2 + 1);
        if (!v291) {
          goto LABEL_823;
        }
        unint64_t v292 = *(const std::string::value_type **)a2;
        unsigned int v293 = this;
        goto LABEL_1654;
      case 0x71:
        std::string::append(this, "@convention(", 0xCuLL);
        int v340 = *((unsigned __int8 *)a2 + 18);
        if (v340 == 1) {
          goto LABEL_1685;
        }
        v341 = (const std::string::value_type ***)a2;
        if (v340 == 2) {
          goto LABEL_1822;
        }
        if (v340 != 5) {
          goto LABEL_1829;
        }
        int v342 = *((_DWORD *)a2 + 2);
        if (v342 != 2)
        {
          if (v342 == 1) {
            goto LABEL_1684;
          }
          goto LABEL_1829;
        }
        v341 = *(const std::string::value_type ****)a2;
LABEL_1822:
        std::string::append(this, **v341, (std::string::size_type)(*v341)[1]);
        std::string::append(this, ", mangledCType: \"", 0x11uLL);
        int v613 = *((unsigned __int8 *)a2 + 18);
        if (v613 == 2) {
          goto LABEL_1826;
        }
        if (v613 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1826:
          v614 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }
        else
        {
          v614 = 0;
        }
        std::string::push_back(this, 34);
        goto LABEL_1829;
      case 0x73:
        goto LABEL_823;
      case 0x74:
        std::string::append(this, "for <", 5uLL);
        int v445 = *((unsigned __int8 *)a2 + 18);
        if ((v445 - 1) < 2) {
          goto LABEL_1214;
        }
        if (v445 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_1519;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1214:
        v446 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_1520;
      case 0x75:
        int v286 = 2 * this[1].__r_.__value_.__s.__data_[15];
        v442 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v442 = *(swift::Demangle::__runtime::Node **)a2;
        }
        v625 = "";
        std::string::size_type v626 = 0;
        unsigned int v624 = **((_DWORD **)v442 + 1) + 1;
        int v282 = v6 & 1;
        char v281 = "implicit closure #";
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
LABEL_1204:
        int v443 = 0;
        size_t v416 = 18;
        goto LABEL_1478;
      case 0x76:
      case 0x78:
        int v12 = *((unsigned __int8 *)a2 + 18);
        int v13 = (swift::Demangle::__runtime::Node **)a2;
        if ((v12 - 1) < 2) {
          goto LABEL_14;
        }
        if (v12 == 5 && *((_DWORD *)a2 + 2))
        {
          int v13 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_14:
          uint64_t v14 = *v13;
        }
        else
        {
          uint64_t v14 = 0;
        }
        std::string::append(this, " ", 1uLL);
        int v151 = *((unsigned __int8 *)a2 + 18);
        if (v151 != 5) {
          goto LABEL_549;
        }
        uint64_t v152 = *((unsigned int *)a2 + 2);
        if (v152 != 3) {
          goto LABEL_384;
        }
        int v151 = *((unsigned __int8 *)a2 + 18);
        if (v151 != 5) {
          goto LABEL_549;
        }
        uint64_t v152 = *((unsigned int *)a2 + 2);
LABEL_384:
        if (v152 != 4) {
          goto LABEL_553;
        }
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          unint64_t v153 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        }
        else {
          unint64_t v153 = 0;
        }
        int v151 = *((unsigned __int8 *)a2 + 18);
LABEL_549:
        switch(v151)
        {
          case 1:
            long long v10 = *(swift::Demangle::__runtime::Node **)a2;
            goto LABEL_7;
          case 2:
            long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
            goto LABEL_7;
          case 5:
            uint64_t v152 = *((unsigned int *)a2 + 2);
LABEL_553:
            if (v152)
            {
              long long v10 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8 * (v152 - 1));
              goto LABEL_7;
            }
            break;
        }
        goto LABEL_799;
      case 0x77:
        std::string::append(this, "@substituted ", 0xDuLL);
        int v353 = *((unsigned __int8 *)a2 + 18);
        uint64_t v354 = (swift::Demangle::__runtime::Node **)a2;
        if ((v353 - 1) < 2) {
          goto LABEL_942;
        }
        if (v353 == 5 && *((_DWORD *)a2 + 2))
        {
          uint64_t v354 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_942:
          v355 = *v354;
        }
        else
        {
          v355 = 0;
        }
        std::string::append(this, " for <", 6uLL);
        int v535 = *((unsigned __int8 *)a2 + 18);
        if (v535 == 2) {
          goto LABEL_1518;
        }
        if (v535 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1518:
          v446 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }
        else
        {
LABEL_1519:
          v446 = 0;
        }
LABEL_1520:
        goto LABEL_1521;
      case 0x79:
        unint64_t v343 = "@yields ";
        uint64_t v344 = this;
        std::string::size_type v345 = 8;
        goto LABEL_1185;
      case 0x7A:
        unint64_t v343 = "@error ";
        uint64_t v344 = this;
        std::string::size_type v345 = 7;
LABEL_1185:
        std::string::append(v344, v343, v345);
        v434 = " ";
LABEL_1323:
        v476 = this;
        v457 = a2;
        goto LABEL_1324;
      case 0x7B:
        unint64_t v43 = "inout ";
        unint64_t v44 = this;
        std::string::size_type v45 = 6;
        goto LABEL_318;
      case 0x7C:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v274 = " infix";
        goto LABEL_1286;
      case 0x7D:
        goto LABEL_1479;
      case 0x7E:
        int v379 = *((unsigned __int8 *)a2 + 18);
        if ((v379 - 1) < 2) {
          goto LABEL_1029;
        }
        if (v379 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1029:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "init";
        goto LABEL_1596;
      case 0x7F:
        unint64_t v43 = "isolated ";
        goto LABEL_292;
      case 0x80:
        unint64_t v43 = "sending ";
        goto LABEL_290;
      case 0x81:
        uint64_t v274 = "@isolated(any) ";
        v275 = this;
        std::string::size_type v276 = 15;
        goto LABEL_822;
      case 0x82:
        uint64_t v274 = "sending ";
        goto LABEL_1749;
      case 0x83:
      case 0x84:
        if (v11 == 131) {
          int v299 = "key path getter for ";
        }
        else {
          int v299 = "key path setter for ";
        }
        std::string::append(this, v299, 0x14uLL);
        int v300 = *((unsigned __int8 *)a2 + 18);
        int v301 = (swift::Demangle::__runtime::Node **)a2;
        if ((v300 - 1) < 2) {
          goto LABEL_850;
        }
        if (v300 == 5 && *((_DWORD *)a2 + 2))
        {
          int v301 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_850:
          unint64_t v302 = *v301;
        }
        else
        {
          unint64_t v302 = 0;
        }
        unsigned int v505 = v7 + 1;
        std::string::append(this, " : ", 3uLL);
        int v506 = *((unsigned __int8 *)a2 + 18);
        v507 = a2;
        if (v506 == 2) {
          goto LABEL_1432;
        }
        if (v506 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v507 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1432:
          v508 = (swift::Demangle::__runtime::Node *)*((void *)v507 + 1);
          if (*((_WORD *)v508 + 8) == 217) {
            std::string::append(this, ", ", 2uLL);
          }
          if (*((unsigned char *)a2 + 18) == 5)
          {
            unint64_t v509 = 2;
            do
            {
              if (v509 >= *((unsigned int *)a2 + 2)) {
                break;
              }
              v510 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8 * v509);
              if (*((_WORD *)v510 + 8) == 217) {
                std::string::append(this, ", ", 2uLL);
              }
              ++v509;
            }
            while (*((unsigned char *)a2 + 18) == 5);
          }
        }
        goto LABEL_823;
      case 0x85:
      case 0x86:
        std::string::append(this, "key path index ", 0xFuLL);
        int v303 = *((unsigned __int16 *)a2 + 8);
        if (v303 == 133) {
          v304 = "equality";
        }
        else {
          v304 = "hash";
        }
        if (v303 == 133) {
          std::string::size_type v305 = 8;
        }
        else {
          std::string::size_type v305 = 4;
        }
        std::string::append(this, v304, v305);
        std::string::append(this, " operator for ", 0xEuLL);
        int v306 = *((unsigned __int8 *)a2 + 18);
        unsigned int v307 = v306 - 1;
        switch(v306)
        {
          case 1:
            uint64_t v309 = 0;
            int v308 = 1;
            v310 = a2;
            goto LABEL_1453;
          case 5:
            int v308 = *((_DWORD *)a2 + 2);
            if (v308)
            {
              uint64_t v309 = (v308 - 1);
              v310 = *(swift::Demangle::__runtime::Node **)a2;
              int v306 = *((_DWORD *)a2 + 2);
              goto LABEL_1453;
            }
            break;
          case 2:
            int v308 = 2;
            uint64_t v309 = 1;
            int v306 = 2;
            v310 = a2;
LABEL_1453:
            v513 = (unsigned __int16 *)*((void *)v310 + v309);
            goto LABEL_1455;
        }
        int v306 = 0;
        int v308 = 0;
        v513 = 0;
LABEL_1455:
        int v514 = v513[8];
        if (v514 == 217)
        {
          --v306;
          uint64_t v515 = (v308 - 2);
          v516 = a2;
          if (v307 >= 2) {
            v516 = *(swift::Demangle::__runtime::Node **)a2;
          }
          v513 = (unsigned __int16 *)*((void *)v516 + v515);
          int v514 = v513[8];
        }
        if (v514 == 43)
        {
          --v306;
        }
        std::string::append(this, "(", 1uLL);
        if (!v306) {
          goto LABEL_1489;
        }
        unsigned int v517 = v7 + 1;
        int v518 = *((unsigned __int8 *)a2 + 18);
        v519 = (swift::Demangle::__runtime::Node **)a2;
        if ((v518 - 1) < 2) {
          goto LABEL_1466;
        }
        if (v518 == 5 && *((_DWORD *)a2 + 2))
        {
          v519 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1466:
          v520 = *v519;
        }
        else
        {
          v520 = 0;
        }
        if (v306 == 1)
        {
LABEL_1489:
          uint64_t v274 = ")";
LABEL_1490:
          v275 = this;
          std::string::size_type v276 = 1;
          goto LABEL_822;
        }
        unint64_t v525 = 1;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          int v527 = *((unsigned __int8 *)a2 + 18);
          if (v527 == 2)
          {
            unint64_t v528 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v527 != 5) {
              goto LABEL_1492;
            }
            unint64_t v528 = *((unsigned int *)a2 + 2);
          }
          if (v528 > v525)
          {
            unsigned int v529 = v527 - 1;
            v530 = a2;
            if (v529 >= 2) {
              v530 = *(swift::Demangle::__runtime::Node **)a2;
            }
            v526 = (swift::Demangle::__runtime::Node *)*((void *)v530 + v525);
            goto LABEL_1493;
          }
LABEL_1492:
          v526 = 0;
LABEL_1493:
          if (v306 == ++v525) {
            goto LABEL_1489;
          }
        }
      case 0x87:
        std::string::append(this, "lazy protocol witness table accessor for type ", 0x2EuLL);
        int v41 = *((unsigned __int8 *)a2 + 18);
        unint64_t v42 = (swift::Demangle::__runtime::Node **)a2;
        if ((v41 - 1) < 2) {
          goto LABEL_261;
        }
        if (v41 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_388;
        }
        goto LABEL_260;
      case 0x88:
        std::string::append(this, "lazy protocol witness table cache variable for type ", 0x34uLL);
        int v109 = *((unsigned __int8 *)a2 + 18);
        unint64_t v42 = (swift::Demangle::__runtime::Node **)a2;
        if ((v109 - 1) < 2) {
          goto LABEL_261;
        }
        if (v109 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_260:
          unint64_t v42 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_261:
          unint64_t v110 = *v42;
        }
        else
        {
LABEL_388:
          unint64_t v110 = 0;
        }
        int v130 = " and conformance ";
LABEL_499:
        int v131 = this;
        std::string::size_type v132 = 17;
        goto LABEL_504;
      case 0x89:
        int v465 = *((unsigned __int8 *)a2 + 18);
        v466 = a2;
        if (v465 == 2) {
          goto LABEL_1284;
        }
        if (v465 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v466 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1284:
          v467 = (swift::Demangle::__runtime::Node *)*((void *)v466 + 1);
        }
        else
        {
          v467 = 0;
        }
        if (!this[1].__r_.__value_.__s.__data_[9]) {
          goto LABEL_823;
        }
        std::string::append(this, " #", 2uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v425 = **(void **)a2 + 1;
        goto LABEL_1156;
      case 0x8A:
        if (*((unsigned char *)a2 + 18) == 5)
        {
          if (*((_DWORD *)a2 + 2) == 3) {
            int v286 = 1;
          }
          else {
            int v286 = 2;
          }
        }
        else
        {
          int v286 = 2;
        }
        char v281 = "";
        v625 = "";
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        goto LABEL_1476;
      case 0x8B:
        int v83 = *((unsigned __int8 *)a2 + 18);
        if ((v83 - 1) < 2) {
          goto LABEL_183;
        }
        if (v83 != 5) {
          goto LABEL_559;
        }
        if (!*((_DWORD *)a2 + 2)) {
          goto LABEL_823;
        }
LABEL_183:
        std::string::append(this, "module ", 7uLL);
        int v84 = *((unsigned __int8 *)a2 + 18);
        unint64_t v85 = (swift::Demangle::__runtime::Node **)a2;
        if ((v84 - 1) < 2) {
          goto LABEL_187;
        }
        if (v84 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v85 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_187:
          unsigned int v86 = *v85;
        }
        else
        {
          unsigned int v86 = 0;
        }
        int v83 = *((unsigned __int8 *)a2 + 18);
LABEL_559:
        if (v83 == 2) {
          goto LABEL_562;
        }
        if (v83 != 5) {
          goto LABEL_569;
        }
        if (*((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_823;
        }
LABEL_562:
        std::string::append(this, " file ", 6uLL);
        int v206 = *((unsigned __int8 *)a2 + 18);
        int v207 = a2;
        if (v206 == 2) {
          goto LABEL_566;
        }
        if (v206 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v207 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_566:
          uint64_t v208 = (swift::Demangle::__runtime::Node *)*((void *)v207 + 1);
        }
        else
        {
          uint64_t v208 = 0;
        }
        int v83 = *((unsigned __int8 *)a2 + 18);
LABEL_569:
        if (v83 != 5 || *((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_823;
        }
        std::string::append(this, " line ", 6uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          int v209 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        }
        else {
          int v209 = 0;
        }
        if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u) {
          goto LABEL_823;
        }
        std::string::append(this, " column ", 8uLL);
        if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 4u) {
          goto LABEL_799;
        }
        long long v10 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 24);
        goto LABEL_7;
      case 0x8C:
        goto LABEL_1479;
      case 0x8D:
        int v453 = *((unsigned __int8 *)a2 + 18);
        if ((v453 - 1) < 2) {
          goto LABEL_1244;
        }
        if (v453 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1244:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "materializeForSet";
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 17;
        goto LABEL_1597;
      case 0x8E:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v380 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v380 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = &unk_1ECA041D0;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v380, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "member macro @";
        goto LABEL_1402;
      case 0x8F:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v378 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v378 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = &unk_1ECA041D0;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v378, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "memberAttribute macro @";
        goto LABEL_1402;
      case 0x90:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "merged ";
        goto LABEL_1624;
      case 0x91:
        int v385 = *((unsigned __int8 *)a2 + 18);
        v386 = (swift::Demangle::__runtime::Node **)a2;
        if (v385 == 2) {
          goto LABEL_1067;
        }
        switch(v385)
        {
          case 5:
            unsigned int v387 = *((_DWORD *)a2 + 2);
            if (v387 != 2)
            {
              unint64_t v388 = 0;
              goto LABEL_1768;
            }
            v386 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1067:
            unint64_t v388 = 1;
            std::string::append(this, " ", 1uLL);
            char v389 = 0;
            int v385 = *((unsigned __int8 *)a2 + 18);
            break;
          case 1:
            unint64_t v388 = 0;
            v596 = 0;
            if ((v389 & 1) == 0) {
              goto LABEL_1772;
            }
            goto LABEL_1770;
          case 2:
LABEL_1770:
            v596 = (unsigned __int16 *)*((void *)a2 + v388);
            goto LABEL_1772;
          default:
            unint64_t v388 = 0;
            char v389 = 1;
            break;
        }
        if (v385 != 5)
        {
LABEL_1771:
          v596 = 0;
LABEL_1772:
          int v601 = *((unsigned __int8 *)v596 + 18);
          if ((v601 - 1) >= 2)
          {
            if (v601 != 5 || !*((_DWORD *)v596 + 2))
            {
              v602 = 0;
              goto LABEL_1778;
            }
            v596 = *(unsigned __int16 **)v596;
          }
          v602 = *(unsigned __int16 **)v596;
LABEL_1778:
          int v603 = v602[8];
          if ((v603 - 190) < 3 || v603 == 69)
          {
            uint64_t v274 = ".Protocol";
LABEL_1781:
            v275 = this;
            std::string::size_type v276 = 9;
          }
          else
          {
            uint64_t v274 = ".Type";
LABEL_1014:
            v275 = this;
            std::string::size_type v276 = 5;
          }
          goto LABEL_822;
        }
        unsigned int v387 = *((_DWORD *)a2 + 2);
LABEL_1768:
        if (v388 < v387)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1770;
        }
        goto LABEL_1771;
      case 0x93:
        unint64_t v43 = "metaclass for ";
        goto LABEL_208;
      case 0x94:
        long long v15 = "method lookup function for ";
        goto LABEL_309;
      case 0x95:
        long long v15 = "ObjC metadata update function for ";
        int v31 = this;
        std::string::size_type v32 = 34;
        goto LABEL_310;
      case 0x96:
        long long v15 = "ObjC resilient class stub for ";
        int v31 = this;
        std::string::size_type v32 = 30;
        goto LABEL_310;
      case 0x97:
        long long v15 = "full ObjC resilient class stub for ";
        int v31 = this;
        std::string::size_type v32 = 35;
        goto LABEL_310;
      case 0x98:
        int v370 = *((unsigned __int8 *)a2 + 18);
        if ((v370 - 1) < 2) {
          goto LABEL_989;
        }
        if (v370 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_989:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "modify";
        goto LABEL_1536;
      case 0x99:
        if (!this[1].__r_.__value_.__s.__data_[4]) {
          goto LABEL_823;
        }
        goto LABEL_1007;
      case 0x9A:
        int v347 = *((unsigned __int8 *)a2 + 18);
        if ((v347 - 1) < 2) {
          goto LABEL_930;
        }
        if (v347 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_930:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "nativeOwningAddressor";
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 21;
        goto LABEL_1597;
      case 0x9B:
        int v326 = *((unsigned __int8 *)a2 + 18);
        if ((v326 - 1) < 2) {
          goto LABEL_901;
        }
        if (v326 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_901:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "nativeOwningMutableAddressor";
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 28;
        goto LABEL_1597;
      case 0x9C:
        int v371 = *((unsigned __int8 *)a2 + 18);
        if ((v371 - 1) < 2) {
          goto LABEL_994;
        }
        if (v371 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_994:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "nativePinningAddressor";
        goto LABEL_1560;
      case 0x9D:
        int v414 = *((unsigned __int8 *)a2 + 18);
        if ((v414 - 1) < 2) {
          goto LABEL_1137;
        }
        if (v414 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1137:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "nativePinningMutableAddressor";
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 29;
        goto LABEL_1597;
      case 0x9E:
        unint64_t v43 = "nominal type descriptor for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 28;
        goto LABEL_318;
      case 0x9F:
        unint64_t v43 = "nominal type descriptor runtime record for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 43;
        goto LABEL_318;
      case 0xA0:
        uint64_t v274 = "@nonobjc ";
        goto LABEL_1781;
      case 0xA2:
        goto LABEL_961;
      case 0xA3:
        std::string::append(this, "predefined ", 0xBuLL);
LABEL_961:
        std::string::append(this, "@objc completion handler block implementation for ", 0x32uLL);
        int v362 = *((unsigned __int8 *)a2 + 18);
        if (v362 != 5) {
          goto LABEL_964;
        }
        unsigned int v363 = *((_DWORD *)a2 + 2);
        if (v363 < 4) {
          goto LABEL_967;
        }
        int v362 = *((unsigned __int8 *)a2 + 18);
LABEL_964:
        uint64_t v364 = (swift::Demangle::__runtime::Node **)a2;
        if ((v362 - 1) < 2) {
          goto LABEL_969;
        }
        if (v362 != 5) {
          goto LABEL_1415;
        }
        unsigned int v363 = *((_DWORD *)a2 + 2);
LABEL_967:
        if (v363)
        {
          uint64_t v364 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_969:
          v365 = *v364;
        }
        else
        {
LABEL_1415:
          v365 = 0;
        }
        unsigned int v500 = v7 + 1;
        std::string::append(this, " with result type ", 0x12uLL);
        int v501 = *((unsigned __int8 *)a2 + 18);
        v502 = a2;
        if (v501 == 2) {
          goto LABEL_1420;
        }
        if (v501 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v502 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1420:
          v503 = (swift::Demangle::__runtime::Node *)*((void *)v502 + 1);
        }
        else
        {
          v503 = 0;
        }
        uint64_t v504 = **(void **)(*(void *)a2 + 16);
        switch(v504)
        {
          case 0:
            goto LABEL_823;
          case 2:
            uint64_t v274 = " zero on error";
LABEL_1448:
            v275 = this;
            std::string::size_type v276 = 14;
            break;
          case 1:
            uint64_t v274 = " nonzero on error";
LABEL_1426:
            v275 = this;
            std::string::size_type v276 = 17;
            break;
          default:
            uint64_t v274 = " <invalid error flag>";
            v275 = this;
            std::string::size_type v276 = 21;
            break;
        }
        goto LABEL_822;
      case 0xA4:
        uint64_t v274 = "@objc ";
        goto LABEL_1286;
      case 0xA8:
        int v390 = *((unsigned __int8 *)a2 + 18);
        if ((v390 - 1) < 2) {
          goto LABEL_1074;
        }
        if (v390 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1074:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "owningAddressor";
        goto LABEL_1539;
      case 0xA9:
        int v375 = *((unsigned __int8 *)a2 + 18);
        if ((v375 - 1) < 2) {
          goto LABEL_1003;
        }
        if (v375 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1003:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "owningMutableAddressor";
        goto LABEL_1560;
      case 0xAA:
        if (this[1].__r_.__value_.__s.__data_[10]) {
          goto LABEL_1039;
        }
        v348 = "partial apply forwarder";
        v349 = this;
        std::string::size_type v350 = 23;
        goto LABEL_1503;
      case 0xAB:
        if (this[1].__r_.__value_.__s.__data_[10])
        {
LABEL_1039:
          v348 = "partial apply";
          v349 = this;
          std::string::size_type v350 = 13;
        }
        else
        {
          v348 = "partial apply ObjC forwarder";
          v349 = this;
          std::string::size_type v350 = 28;
        }
LABEL_1503:
        std::string::append(v349, v348, v350);
        int v531 = *((unsigned __int8 *)a2 + 18);
        if ((v531 - 1) >= 2 && (v531 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_823;
        }
        v372 = " for ";
        unsigned __int8 v373 = this;
        std::string::size_type v374 = 5;
        goto LABEL_1507;
      case 0xAC:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v444 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v444 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = &unk_1ECA041D0;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v444, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "peer macro @";
        goto LABEL_1402;
      case 0xAD:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v274 = " postfix";
        goto LABEL_1749;
      case 0xAE:
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
          v393 = *(swift::Demangle::__runtime **)(*(void *)a2 + 16);
        }
        else {
          v393 = 0;
        }
        __str.__r_.__value_.__s.__data_[0] = 0;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 1) = 0x101010101010101;
        __str.__r_.__value_.__s.__data_[9] = 1;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = 0x101010100000000;
        __str.__r_.__value_.__s.__data_[18] = 1;
        *(_WORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = 256;
        __str.__r_.__value_.__s.__data_[21] = 1;
        uint64_t v631 = 0;
        uint64_t v632 = 0;
        v633 = &unk_1ECA041D0;
        v634 = swift::Demangle::__runtime::genericParameterName;
        v635 = &v633;
        swift::Demangle::__runtime::nodeToString((uint64_t *)&v636, v393, (swift::Demangle::__runtime::Node *)&__str, a3);
        v493 = "preamble macro @";
LABEL_1402:
        v494 = std::string::insert(&v636, 0, v493);
        std::string::size_type v495 = v494->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v637.__r_.__value_.__l.__data_ = *(_OWORD *)&v494->__r_.__value_.__l.__data_;
        v637.__r_.__value_.__r.__words[2] = v495;
        v494->__r_.__value_.__l.__size_ = 0;
        v494->__r_.__value_.__r.__words[2] = 0;
        v494->__r_.__value_.__r.__words[0] = 0;
        v496 = std::string::append(&v637, " expansion #");
        std::string::size_type v497 = v496->__r_.__value_.__r.__words[2];
        long long v638 = *(_OWORD *)&v496->__r_.__value_.__l.__data_;
        uint64_t v639 = v497;
        v496->__r_.__value_.__l.__size_ = 0;
        v496->__r_.__value_.__r.__words[2] = 0;
        v496->__r_.__value_.__r.__words[0] = 0;
        if (v639 >= 0) {
          v498 = (std::string::value_type *)&v638;
        }
        else {
          v498 = (std::string::value_type *)v638;
        }
        if (v639 >= 0) {
          size_t v499 = HIBYTE(v639);
        }
        else {
          size_t v499 = *((void *)&v638 + 1);
        }
        if (SHIBYTE(v639) < 0)
        {
          operator delete((void *)v638);
          if ((SHIBYTE(v637.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_1410:
            if ((SHIBYTE(v636.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_1411;
            }
            goto LABEL_1414;
          }
        }
        else if ((SHIBYTE(v637.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_1410;
        }
        operator delete(v637.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v636.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_1411;
        }
LABEL_1414:
        operator delete(v636.__r_.__value_.__l.__data_);
LABEL_1411:
        swift::Demangle::__runtime::DemangleOptions::~DemangleOptions((swift::Demangle::__runtime::DemangleOptions *)&__str);
        goto LABEL_824;
      case 0xAF:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v274 = " prefix";
        goto LABEL_1624;
      case 0xB0:
        int v471 = *((unsigned __int8 *)a2 + 18);
        if (v471 != 2 && (v471 != 5 || *((_DWORD *)a2 + 2) < 2u))
        {
          if (!this[1].__r_.__value_.__s.__data_[14]) {
            goto LABEL_823;
          }
          v521 = "(in ";
          goto LABEL_1683;
        }
        if (this[1].__r_.__value_.__s.__data_[14])
        {
          std::string::push_back(this, 40);
          int v471 = *((unsigned __int8 *)a2 + 18);
        }
        v472 = a2;
        if (v471 == 2) {
          goto LABEL_1316;
        }
        if (v471 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v472 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1316:
          v473 = (swift::Demangle::__runtime::Node *)*((void *)v472 + 1);
        }
        else
        {
          v473 = 0;
        }
        if (!this[1].__r_.__value_.__s.__data_[14]) {
          goto LABEL_823;
        }
        v521 = " in ";
LABEL_1683:
        std::string::append(this, v521, 4uLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
LABEL_1684:
        }
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1685:
        std::string::append(this, **(const std::string::value_type ***)a2, *(void *)(*(void *)a2 + 8));
        goto LABEL_1829;
      case 0xB1:
        unint64_t v43 = "property descriptor for ";
        goto LABEL_305;
      case 0xB2:
        goto LABEL_1479;
      case 0xB3:
        goto LABEL_1479;
      case 0xB5:
        uint64_t v332 = "protocol symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 30;
        goto LABEL_1248;
      case 0xB6:
        int v48 = *((unsigned __int8 *)a2 + 18);
        uint64_t v49 = (swift::Demangle::__runtime::Node **)a2;
        if ((v48 - 1) < 2) {
          goto LABEL_78;
        }
        if (v48 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            long long v10 = 0;
            unint64_t v50 = 0;
            goto LABEL_736;
          }
          uint64_t v49 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_78:
          unint64_t v50 = *v49;
        }
        else
        {
          unint64_t v50 = 0;
        }
        long long v10 = 0;
        if (v48 == 1)
        {
          int v217 = 0;
          goto LABEL_737;
        }
        unsigned int v215 = a2;
        if (v48 == 2) {
          goto LABEL_607;
        }
        if (v48 != 5) {
          goto LABEL_608;
        }
        if (*((_DWORD *)a2 + 2) < 2u)
        {
          long long v10 = 0;
        }
        else
        {
          unsigned int v215 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_607:
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)v215 + 1);
LABEL_608:
          if (v48 == 5)
          {
            unsigned int v216 = *((_DWORD *)a2 + 2);
            if (v216 >= 3)
            {
              int v217 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
              if (v216 == 4)
              {
                std::string::append(this, "property behavior storage of ", 0x1DuLL);
                std::string::append(this, " in ", 4uLL);
                std::string::append(this, " : ", 3uLL);
                goto LABEL_7;
              }
LABEL_737:
              if (this[1].__r_.__value_.__s.__data_[6])
              {
                std::string::append(this, " : ", 3uLL);
                std::string::append(this, " in ", 4uLL);
                long long v10 = v217;
                goto LABEL_7;
              }
              goto LABEL_823;
            }
          }
        }
LABEL_736:
        int v217 = 0;
        goto LABEL_737;
      case 0xB7:
        v372 = "protocol conformance ref (type's module) ";
        unsigned __int8 v373 = this;
        std::string::size_type v374 = 41;
        goto LABEL_1507;
      case 0xB8:
        v372 = "protocol conformance ref (protocol's module) ";
        unsigned __int8 v373 = this;
        std::string::size_type v374 = 45;
        goto LABEL_1507;
      case 0xB9:
        v372 = "protocol conformance ref (retroactive) ";
        unsigned __int8 v373 = this;
        std::string::size_type v374 = 39;
        goto LABEL_1507;
      case 0xBA:
        unint64_t v43 = "protocol descriptor for ";
LABEL_305:
        unint64_t v44 = this;
        std::string::size_type v45 = 24;
        goto LABEL_318;
      case 0xBB:
        unint64_t v43 = "protocol descriptor runtime record for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 39;
        goto LABEL_318;
      case 0xBC:
        unint64_t v43 = "protocol conformance descriptor for ";
        goto LABEL_315;
      case 0xBD:
        unint64_t v43 = "protocol conformance descriptor runtime record for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 51;
        goto LABEL_318;
      case 0xBE:
        int v456 = *((unsigned __int8 *)a2 + 18);
        if ((v456 - 1) < 2) {
          goto LABEL_1261;
        }
        if (v456 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_823;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1261:
        v457 = *(swift::Demangle::__runtime::Node **)a2;
        if (!*(void *)a2) {
          goto LABEL_823;
        }
        int v458 = *((unsigned __int8 *)v457 + 18);
        if ((v458 - 1) < 2 || v458 == 5 && *((_DWORD *)v457 + 2)) {
          goto LABEL_1622;
        }
        uint64_t v274 = "Any";
LABEL_1253:
        v275 = this;
        std::string::size_type v276 = 3;
        goto LABEL_822;
      case 0xBF:
        int v351 = *((unsigned __int8 *)a2 + 18);
        if (v351 == 2)
        {
          unint64_t v352 = a2;
        }
        else
        {
          if (v351 != 5 || *((_DWORD *)a2 + 2) < 2u) {
            goto LABEL_823;
          }
          unint64_t v352 = *(swift::Demangle::__runtime::Node **)a2;
        }
        v563 = *(swift::Demangle::__runtime::Node **)v352;
        std::string::append(this, " & ", 3uLL);
        int v564 = *((unsigned __int8 *)v563 + 18);
        if ((v564 - 1) >= 2)
        {
          if (v564 != 5 || !*((_DWORD *)v563 + 2)) {
            goto LABEL_823;
          }
          v563 = *(swift::Demangle::__runtime::Node **)v563;
        }
        v457 = *(swift::Demangle::__runtime::Node **)v563;
LABEL_1622:
        v434 = " & ";
        v476 = this;
LABEL_1324:
        goto LABEL_823;
      case 0xC0:
        int v448 = *((unsigned __int8 *)a2 + 18);
        if ((v448 - 1) < 2) {
          goto LABEL_1227;
        }
        if (v448 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_823;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1227:
        v449 = *(_DWORD **)a2;
        int v450 = *(unsigned __int8 *)(*(void *)a2 + 18);
        if ((v450 - 1) < 2) {
          goto LABEL_1231;
        }
        if (v450 != 5 || !v449[2]) {
          goto LABEL_823;
        }
        v449 = *(_DWORD **)v449;
LABEL_1231:
        v451 = *(swift::Demangle::__runtime::Node **)v449;
        int v452 = *(unsigned __int8 *)(*(void *)v449 + 18);
        if ((v452 - 1) < 2 || v452 == 5 && *((_DWORD *)v451 + 2))
        {
          std::string::append(this, " & ", 3uLL);
        }
        if (this[1].__r_.__value_.__s.__data_[1] && this[1].__r_.__value_.__s.__data_[17])
        {
          std::string::append(this, "Swift", 5uLL);
          std::string::append(this, ".", 1uLL);
        }
        uint64_t v274 = "AnyObject";
        goto LABEL_1781;
      case 0xC1:
        unint64_t v43 = "protocol self-conformance descriptor for ";
        goto LABEL_219;
      case 0xC2:
        unint64_t v43 = "protocol self-conformance witness for ";
        goto LABEL_246;
      case 0xC3:
        unint64_t v43 = "protocol self-conformance witness table for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 44;
        goto LABEL_318;
      case 0xC4:
        std::string::append(this, "protocol witness for ", 0x15uLL);
        int v97 = *((unsigned __int8 *)a2 + 18);
        int v98 = a2;
        if (v97 == 2) {
          goto LABEL_225;
        }
        if (v97 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          int v98 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_225:
          int v99 = (swift::Demangle::__runtime::Node *)*((void *)v98 + 1);
        }
        else
        {
          int v99 = 0;
        }
        unsigned int v180 = " in conformance ";
        goto LABEL_462;
      case 0xC5:
        unint64_t v43 = "protocol witness table for ";
        goto LABEL_145;
      case 0xC6:
        unint64_t v43 = "protocol witness table accessor for ";
        goto LABEL_315;
      case 0xC7:
        unint64_t v43 = "protocol witness table pattern for ";
LABEL_317:
        unint64_t v44 = this;
        std::string::size_type v45 = 35;
        goto LABEL_318;
      case 0xC8:
      case 0xC9:
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "thunk for ", 0xAuLL);
          int v33 = *((unsigned __int8 *)a2 + 18);
          if (v33 == 1)
          {
            uint64_t v34 = 0;
          }
          else if (v33 == 5)
          {
            uint64_t v205 = *((unsigned int *)a2 + 2);
            if (!v205) {
              goto LABEL_544;
            }
            uint64_t v34 = v205 - 1;
            a2 = *(swift::Demangle::__runtime::Node **)a2;
          }
          else
          {
            long long v10 = 0;
            if (v33 != 2) {
              goto LABEL_6;
            }
            uint64_t v34 = 1;
          }
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v34);
          goto LABEL_6;
        }
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((_WORD *)a2 + 8) == 201) {
          std::string::append(this, "helper ", 7uLL);
        }
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          unint64_t v74 = 1;
          std::string::append(this, " ", 1uLL);
        }
        else
        {
          unint64_t v74 = 0;
        }
        std::string::append(this, "from ", 5uLL);
        int v161 = *((unsigned __int8 *)a2 + 18);
        if (v161 == 2)
        {
          unint64_t v162 = *((unsigned __int8 *)a2 + 18);
        }
        else
        {
          if (v161 != 5) {
            goto LABEL_585;
          }
          unint64_t v162 = *((unsigned int *)a2 + 2);
        }
        if (v162 > v74 + 1)
        {
          unsigned int v210 = v161 - 1;
          int v211 = a2;
          if (v210 >= 2) {
            int v211 = *(swift::Demangle::__runtime::Node **)a2;
          }
          int v212 = (swift::Demangle::__runtime::Node *)*((void *)v211 + v74 + 1);
          goto LABEL_586;
        }
LABEL_585:
        int v212 = 0;
LABEL_586:
        int v201 = " to ";
        int v202 = this;
        std::string::size_type v203 = 4;
        goto LABEL_587;
      case 0xCA:
        std::string::append(this, "reabstraction thunk ", 0x14uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) == 4)
        {
          unint64_t v74 = 1;
          std::string::append(this, " ", 1uLL);
        }
        else
        {
          unint64_t v74 = 0;
        }
        std::string::append(this, "from ", 5uLL);
        if (*((unsigned char *)a2 + 18) == 5 && *((unsigned int *)a2 + 2) > (v74 | 2)) {
          int v148 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8 * (v74 | 2));
        }
        else {
          int v148 = 0;
        }
        std::string::append(this, " to ", 4uLL);
        int v149 = *((unsigned __int8 *)a2 + 18);
        if (v149 == 2)
        {
          unint64_t v150 = *((unsigned __int8 *)a2 + 18);
        }
        else
        {
          if (v149 != 5) {
            goto LABEL_531;
          }
          unint64_t v150 = *((unsigned int *)a2 + 2);
        }
        if (v150 > v74 + 1)
        {
          unsigned int v198 = v149 - 1;
          int v199 = a2;
          if (v198 >= 2) {
            int v199 = *(swift::Demangle::__runtime::Node **)a2;
          }
          unsigned int v200 = (swift::Demangle::__runtime::Node *)*((void *)v199 + v74 + 1);
LABEL_532:
          int v201 = " self ";
          int v202 = this;
          std::string::size_type v203 = 6;
LABEL_587:
          std::string::append(v202, v201, v203);
          unint64_t v213 = *((unsigned __int8 *)a2 + 18);
          unsigned int v214 = v213 - 1;
          if (v213 != 1)
          {
            if (v213 == 2)
            {
LABEL_594:
              long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v74);
              goto LABEL_7;
            }
            if (v213 != 5)
            {
LABEL_799:
              long long v10 = 0;
              goto LABEL_7;
            }
            unint64_t v213 = *((unsigned int *)a2 + 2);
          }
          if (v213 > v74)
          {
            if (v214 >= 2) {
              a2 = *(swift::Demangle::__runtime::Node **)a2;
            }
            goto LABEL_594;
          }
          goto LABEL_799;
        }
LABEL_531:
        unsigned int v200 = 0;
        goto LABEL_532;
      case 0xCB:
        int v121 = *((unsigned __int8 *)a2 + 18);
        __int16 v122 = (swift::Demangle::__runtime::Node **)a2;
        if ((v121 - 1) < 2) {
          goto LABEL_288;
        }
        if (v121 == 5 && *((_DWORD *)a2 + 2))
        {
          __int16 v122 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_288:
          unint64_t v123 = *v122;
        }
        else
        {
          unint64_t v123 = 0;
        }
        int v130 = " with global actor constraint ";
        int v131 = this;
        std::string::size_type v132 = 30;
        goto LABEL_504;
      case 0xCC:
        int v468 = *((unsigned __int8 *)a2 + 18);
        if ((v468 - 1) < 2) {
          goto LABEL_1296;
        }
        if (v468 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1296:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "read";
LABEL_1596:
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 4;
        goto LABEL_1597;
      case 0xCD:
        std::string::append(this, "related decl '", 0xEuLL);
        unint64_t v54 = (const std::string::value_type ***)a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          unint64_t v54 = *(const std::string::value_type ****)a2;
        }
        std::string::append(this, **v54, (std::string::size_type)(*v54)[1]);
        std::string::append(this, "' for ", 6uLL);
        int v55 = *((unsigned __int8 *)a2 + 18);
        if (v55 == 2) {
          goto LABEL_539;
        }
        if (v55 == 5 && *((_DWORD *)a2 + 2) >= 2u) {
          goto LABEL_538;
        }
        goto LABEL_313;
      case 0xCE:
        int v111 = *((unsigned __int8 *)a2 + 18);
        if (v111 != 2 && (v111 != 5 || *((_DWORD *)a2 + 2) != 2)) {
          goto LABEL_823;
        }
        std::string::append(this, "retroactive @ ", 0xEuLL);
        int v112 = *((unsigned __int8 *)a2 + 18);
        __int16 v113 = (swift::Demangle::__runtime::Node **)a2;
        if ((v112 - 1) < 2) {
          goto LABEL_270;
        }
        if (v112 == 5 && *((_DWORD *)a2 + 2))
        {
          __int16 v113 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_270:
          unint64_t v114 = *v113;
        }
        else
        {
          unint64_t v114 = 0;
        }
        goto LABEL_505;
      case 0xCF:
        int v376 = *((unsigned __int8 *)a2 + 18);
        if ((v376 - 1) < 2 || v376 == 5 && *((_DWORD *)a2 + 2)) {
          goto LABEL_1508;
        }
LABEL_1007:
        uint64_t v274 = *(const std::string::value_type **)a2;
        std::string::size_type v276 = *((void *)a2 + 1);
        v275 = this;
        goto LABEL_822;
      case 0xD0:
        unint64_t v43 = "__shared ";
LABEL_292:
        unint64_t v44 = this;
        std::string::size_type v45 = 9;
        goto LABEL_318;
      case 0xD1:
        unint64_t v43 = "__owned ";
LABEL_290:
        unint64_t v44 = this;
        std::string::size_type v45 = 8;
        goto LABEL_318;
      case 0xD2:
        unint64_t v28 = "@box ";
        unint64_t v29 = this;
        std::string::size_type v30 = 5;
        goto LABEL_295;
      case 0xD3:
        int v67 = *((unsigned __int8 *)a2 + 18);
        int v68 = (swift::Demangle::__runtime::Node **)a2;
        if ((v67 - 1) < 2) {
          goto LABEL_151;
        }
        if (v67 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
LABEL_496:
            long long v10 = 0;
            goto LABEL_6;
          }
          int v68 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_151:
          long long v10 = *v68;
        }
        else
        {
          long long v10 = 0;
        }
        if (v67 == 5 && *((_DWORD *)a2 + 2) == 3)
        {
          uint64_t v522 = *(void *)(*(void *)a2 + 16);
          unsigned int v523 = v7 + 1;
          std::string::push_back(this, 32);
          if (!v522) {
            goto LABEL_823;
          }
          std::string::append(this, " <", 2uLL);
          int v524 = *(unsigned __int8 *)(v522 + 18);
          if (v524 == 5)
          {
            v615 = (unsigned int *)(v522 + 8);
            uint64_t v616 = *(unsigned int *)(v522 + 8);
            if (!v616
            {
LABEL_1521:
              std::string::push_back(this, 62);
              goto LABEL_823;
            }
          }
          else
          {
            if (v524 != 2)
            {
              if (v524 == 1) {
              goto LABEL_1521;
              }
            }
            v615 = (unsigned int *)(v522 + 8);
            uint64_t v616 = 2;
          }
          unint64_t v617 = 1;
          while (1)
          {
            std::string::append(this, ", ", 2uLL);
            int v619 = *(unsigned __int8 *)(v522 + 18);
            if (v619 == 2)
            {
              unint64_t v620 = *(unsigned __int8 *)(v522 + 18);
            }
            else
            {
              if (v619 != 5) {
                goto LABEL_1835;
              }
              unint64_t v620 = *v615;
            }
            if (v620 > v617)
            {
              unsigned int v621 = v619 - 1;
              v622 = (swift::Demangle::__runtime::Node **)v522;
              if (v621 >= 2) {
                v622 = *(swift::Demangle::__runtime::Node ***)v522;
              }
              v618 = v622[v617];
              goto LABEL_1836;
            }
LABEL_1835:
            v618 = 0;
LABEL_1836:
            if (v616 == ++v617) {
              goto LABEL_1521;
            }
          }
        }
        goto LABEL_6;
      case 0xD4:
        std::string::push_back(this, 123);
        int v459 = *((unsigned __int8 *)a2 + 18);
        if ((v459 - 1) >= 2 && (v459 != 5 || !*((_DWORD *)a2 + 2))) {
          goto LABEL_1737;
        }
        unsigned int v460 = v7 + 1;
        std::string::push_back(this, 32);
        int v461 = *((unsigned __int8 *)a2 + 18);
        v462 = (swift::Demangle::__runtime::Node **)a2;
        if ((v461 - 1) < 2) {
          goto LABEL_1275;
        }
        if (v461 == 5 && *((_DWORD *)a2 + 2))
        {
          v462 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1275:
          v463 = *v462;
        }
        else
        {
          v463 = 0;
        }
        unint64_t v588 = 1;
        while (2)
        {
          unint64_t v590 = *((unsigned __int8 *)a2 + 18);
          if (v590 == 2) {
            goto LABEL_1728;
          }
          if (v590 == 5)
          {
            unint64_t v590 = *((unsigned int *)a2 + 2);
LABEL_1728:
            if (v590 > v588)
            {
              std::string::push_back(this, 44);
              std::string::push_back(this, 32);
              int v591 = *((unsigned __int8 *)a2 + 18);
              if (v591 == 2)
              {
                unint64_t v592 = *((unsigned __int8 *)a2 + 18);
              }
              else
              {
                if (v591 != 5) {
                  goto LABEL_1723;
                }
                unint64_t v592 = *((unsigned int *)a2 + 2);
              }
              if (v592 > v588)
              {
                unsigned int v593 = v591 - 1;
                v594 = a2;
                if (v593 >= 2) {
                  v594 = *(swift::Demangle::__runtime::Node **)a2;
                }
                v589 = (swift::Demangle::__runtime::Node *)*((void *)v594 + v588);
                goto LABEL_1724;
              }
LABEL_1723:
              v589 = 0;
LABEL_1724:
              ++v588;
              continue;
            }
          }
          break;
        }
LABEL_1737:
        uint64_t v274 = " }";
LABEL_1738:
        v275 = this;
        std::string::size_type v276 = 2;
        goto LABEL_822;
      case 0xD5:
      case 0xD6:
        if (v11 == 214) {
          unint64_t v28 = "let ";
        }
        else {
          unint64_t v28 = "var ";
        }
        unint64_t v29 = this;
        std::string::size_type v30 = 4;
        goto LABEL_295;
      case 0xD7:
        int v383 = *((unsigned __int8 *)a2 + 18);
        if ((v383 - 1) < 2) {
          goto LABEL_1056;
        }
        if (v383 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1056:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "setter";
LABEL_1536:
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 6;
        goto LABEL_1597;
      case 0xD9:
        uint64_t v274 = "serialized";
        goto LABEL_1246;
      case 0xDA:
        unint64_t v28 = "static ";
        unint64_t v29 = this;
        std::string::size_type v30 = 7;
        goto LABEL_295;
      case 0xDC:
        v625 = "subscript";
        std::string::size_type v626 = 9;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        char v281 = "";
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 2;
        int v443 = 0;
        goto LABEL_1477;
      case 0xDD:
        if (this[1].__r_.__value_.__s.__data_[3])
        {
          std::string::append(this, " with unmangled suffix ", 0x17uLL);
          long long v638 = *(_OWORD *)a2;
          __swift::__runtime::llvm::StringRef::str((const void **)&v638, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = __p;
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_823;
      case 0xDF:
        std::string::append(this, "(", 1uLL);
        goto LABEL_1489;
      case 0xE0:
        if (ChildIf)
        {
          std::string::append(this, *(const std::string::value_type **)ChildIf, *(void *)(ChildIf + 8));
          std::string::append(this, ": ", 2uLL);
        }
          goto LABEL_823;
        uint64_t v274 = "...";
        goto LABEL_1253;
      case 0xE1:
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v274 = ": ";
        goto LABEL_1738;
      case 0xE2:
        v296 = "Pack{";
        int v297 = this;
        std::string::size_type v298 = 5;
        goto LABEL_972;
      case 0xE3:
      case 0xE4:
        if (v11 == 227) {
          uint64_t v294 = "@direct";
        }
        else {
          uint64_t v294 = "@indirect";
        }
        if (v11 == 227) {
          std::string::size_type v295 = 7;
        }
        else {
          std::string::size_type v295 = 9;
        }
        std::string::append(this, v294, v295);
        v296 = " Pack{";
        int v297 = this;
        std::string::size_type v298 = 6;
LABEL_972:
        std::string::append(v297, v296, v298);
        uint64_t v274 = "}";
        goto LABEL_1490;
      case 0xE5:
        unint64_t v43 = "repeat ";
        goto LABEL_204;
      case 0xE6:
        std::string::append(this, "/* level: ", 0xAuLL);
        unint64_t v53 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          unint64_t v53 = *(swift::Demangle::__runtime::Node **)a2;
        }
        snprintf((char *)&__str, 0x20uLL, "%llu", **((void **)v53 + 1));
        std::string::append(this, (const std::string::value_type *)&__str);
        std::string::append(this, " */ ", 4uLL);
        unint64_t v43 = "each ";
        unint64_t v44 = this;
        std::string::size_type v45 = 5;
        goto LABEL_318;
      case 0xE7:
        printer_unreachable("should be handled in Node::Kind::PackElement");
      case 0xE9:
        uint64_t v332 = "type symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 26;
        goto LABEL_1248;
      case 0xEC:
        int v118 = *((unsigned __int8 *)a2 + 18);
        unsigned int v119 = v118 - 1;
        std::string::size_type v120 = a2;
        if ((v118 - 1) >= 2) {
          std::string::size_type v120 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_WORD *)(*(void *)v120 + 16) != 290)
        {
          if (v119 >= 2)
          {
LABEL_312:
            if (v118 != 5 || !*((_DWORD *)a2 + 2))
            {
LABEL_313:
              long long v10 = 0;
              goto LABEL_6;
            }
LABEL_4:
            a2 = *(swift::Demangle::__runtime::Node **)a2;
          }
LABEL_5:
          long long v10 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_6:
          ++v7;
          goto LABEL_7;
        }
        v492 = (swift::Demangle::__runtime::Node **)a2;
        if (v119 < 2) {
          goto LABEL_1385;
        }
        if (v118 == 5)
        {
          if (!*((_DWORD *)a2 + 2))
          {
            v279 = 0;
            goto LABEL_1813;
          }
          v492 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1385:
          v279 = *v492;
        }
        else
        {
          v279 = 0;
        }
        if (v118 == 2)
        {
LABEL_1712:
          v585 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          goto LABEL_1814;
        }
        if (v118 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_1712;
        }
LABEL_1813:
        v585 = 0;
LABEL_1814:
        int v612 = *((unsigned __int8 *)v585 + 18);
        if ((v612 - 1) >= 2)
        {
          if (v612 != 5 || !*((_DWORD *)v585 + 2))
          {
            int v280 = 0;
LABEL_1820:
            v278 = this;
LABEL_828:
            goto LABEL_823;
          }
          v585 = *(swift::Demangle::__runtime::Node **)v585;
        }
        int v280 = *(swift::Demangle::__runtime::Node **)v585;
        goto LABEL_1820;
      case 0xED:
        unint64_t v43 = "type metadata for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 18;
        goto LABEL_318;
      case 0xEE:
        unint64_t v43 = "type metadata accessor for ";
        goto LABEL_145;
      case 0xEF:
        unint64_t v43 = "type metadata completion function for ";
        goto LABEL_246;
      case 0xF0:
        unint64_t v43 = "type metadata instantiation cache for ";
LABEL_246:
        unint64_t v44 = this;
        std::string::size_type v45 = 38;
        goto LABEL_318;
      case 0xF1:
        unint64_t v43 = "type metadata instantiation function for ";
        goto LABEL_219;
      case 0xF2:
        unint64_t v43 = "type metadata singleton initialization cache for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 49;
        goto LABEL_318;
      case 0xF3:
        unint64_t v43 = "demangling cache variable for type metadata for ";
        unint64_t v44 = this;
        std::string::size_type v45 = 48;
        goto LABEL_318;
      case 0xF4:
        unint64_t v43 = "lazy cache variable for type metadata for ";
        goto LABEL_276;
      case 0xF6:
        uint64_t v274 = "unknown index";
        v275 = this;
        std::string::size_type v276 = 13;
        goto LABEL_822;
      case 0xF7:
        uint64_t v115 = "weak";
        int v116 = this;
        std::string::size_type v117 = 4;
        goto LABEL_278;
      case 0xF8:
        uint64_t v115 = "unowned";
        int v116 = this;
        std::string::size_type v117 = 7;
        goto LABEL_278;
      case 0xF9:
        uint64_t v115 = "unowned(unsafe)";
        int v116 = this;
        std::string::size_type v117 = 15;
LABEL_278:
        std::string::append(v116, v115, v117);
        unint64_t v43 = " ";
        unint64_t v44 = this;
        std::string::size_type v45 = 1;
        goto LABEL_318;
      case 0xFA:
        int v369 = *((unsigned __int8 *)a2 + 18);
        if ((v369 - 1) < 2) {
          goto LABEL_984;
        }
        if (v369 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_984:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "unsafeAddressor";
LABEL_1539:
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 15;
        goto LABEL_1597;
      case 0xFB:
        int v401 = *((unsigned __int8 *)a2 + 18);
        if ((v401 - 1) < 2) {
          goto LABEL_1107;
        }
        if (v401 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1107:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "unsafeMutableAddressor";
LABEL_1560:
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 22;
        goto LABEL_1597;
      case 0xFC:
        __int16 v69 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          __int16 v69 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v70 = **(void **)v69;
        if (v70 >= 0x18) {
          printer_unreachable("bad value witness kind");
        }
        std::string::append(this, off_1E4FC7A20[(int)v70], qword_1816372A8[(int)v70]);
        if (this[1].__r_.__value_.__s.__data_[12])
        {
          unint64_t v71 = " for ";
          __int16 v72 = this;
          std::string::size_type v73 = 5;
        }
        else
        {
          unint64_t v71 = " value witness for ";
          __int16 v72 = this;
          std::string::size_type v73 = 19;
        }
        std::string::append(v72, v71, v73);
        int v191 = *((unsigned __int8 *)a2 + 18);
        if (v191 == 2) {
          goto LABEL_495;
        }
        if (v191 == 5) {
          goto LABEL_493;
        }
        goto LABEL_496;
      case 0xFD:
        unint64_t v28 = "value witness table for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 24;
        goto LABEL_295;
      case 0xFE:
        char v281 = "";
        v625 = "";
        std::string::size_type v626 = 0;
        unsigned int v624 = -1;
        int v282 = v6 & 1;
        v283 = (_anonymous_namespace_::NodePrinter *)this;
        uint64_t v284 = (uint64_t *)a2;
        int v285 = v7;
        int v286 = 1;
LABEL_1476:
        int v443 = 1;
LABEL_1477:
        size_t v416 = 0;
LABEL_1478:
LABEL_1479:
        long long v10 = v325;
        goto LABEL_824;
      case 0xFF:
        std::string::append(this, "vtable thunk for ", 0x11uLL);
        int v60 = *((unsigned __int8 *)a2 + 18);
        unint64_t v61 = a2;
        if (v60 == 2) {
          goto LABEL_124;
        }
        if (v60 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v61 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_124:
          unsigned int v62 = (swift::Demangle::__runtime::Node *)*((void *)v61 + 1);
        }
        else
        {
          unsigned int v62 = 0;
        }
        unsigned int v180 = " dispatching to ";
LABEL_462:
        int v181 = this;
        std::string::size_type v182 = 16;
LABEL_469:
        std::string::append(v181, v180, v182);
        int v183 = *((unsigned __int8 *)a2 + 18);
        if ((v183 - 1) < 2) {
          goto LABEL_473;
        }
        if (v183 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_799;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_473:
        long long v10 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_7;
      case 0x100:
        uint64_t v274 = "override ";
        goto LABEL_1781;
      case 0x101:
        int v397 = *((unsigned __int8 *)a2 + 18);
        if ((v397 - 1) < 2) {
          goto LABEL_1096;
        }
        if (v397 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1096:
          uint64_t v327 = *(void *)a2;
        }
        else
        {
          uint64_t v327 = 0;
        }
        int v511 = v6 & 1;
        v512 = "willset";
        v532 = (_anonymous_namespace_::NodePrinter *)this;
        int v533 = v7;
        size_t v534 = 7;
LABEL_1597:
        goto LABEL_824;
      case 0x102:
        unint64_t v28 = "reflection metadata builtin descriptor ";
        unint64_t v29 = this;
        std::string::size_type v30 = 39;
        goto LABEL_295;
      case 0x103:
        unint64_t v28 = "reflection metadata field descriptor ";
LABEL_118:
        unint64_t v29 = this;
        std::string::size_type v30 = 37;
        goto LABEL_295;
      case 0x104:
        unint64_t v28 = "reflection metadata associated type descriptor ";
        unint64_t v29 = this;
        std::string::size_type v30 = 47;
        goto LABEL_295;
      case 0x105:
        unint64_t v28 = "reflection metadata superclass descriptor ";
        unint64_t v29 = this;
        std::string::size_type v30 = 42;
        goto LABEL_295;
      case 0x107:
        long long v15 = "curry thunk of ";
        int v31 = this;
        std::string::size_type v32 = 15;
        goto LABEL_310;
      case 0x108:
        long long v15 = "dispatch thunk of ";
        goto LABEL_272;
      case 0x109:
        long long v15 = "method descriptor for ";
        int v31 = this;
        std::string::size_type v32 = 22;
        goto LABEL_310;
      case 0x10A:
        unint64_t v43 = "protocol requirements base descriptor for ";
        goto LABEL_276;
      case 0x10B:
        std::string::append(this, "associated conformance descriptor for ", 0x26uLL);
        int v58 = *((unsigned __int8 *)a2 + 18);
        unint64_t v59 = (swift::Demangle::__runtime::Node **)a2;
        if ((v58 - 1) < 2) {
          goto LABEL_129;
        }
        if (v58 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_390;
        }
        goto LABEL_128;
      case 0x10C:
        std::string::append(this, "default associated conformance accessor for ", 0x2CuLL);
        int v63 = *((unsigned __int8 *)a2 + 18);
        unint64_t v59 = (swift::Demangle::__runtime::Node **)a2;
        if ((v63 - 1) < 2) {
          goto LABEL_129;
        }
        if (v63 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_128:
          unint64_t v59 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_129:
          unint64_t v64 = *v59;
        }
        else
        {
LABEL_390:
          unint64_t v64 = 0;
        }
        std::string::append(this, ".", 1uLL);
        int v154 = *((unsigned __int8 *)a2 + 18);
        unint64_t v155 = a2;
        if (v154 == 2) {
          goto LABEL_395;
        }
        if (v154 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          unint64_t v155 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_395:
          int v156 = (swift::Demangle::__runtime::Node *)*((void *)v155 + 1);
        }
        else
        {
          int v156 = 0;
        }
        int v157 = ": ";
        unint64_t v158 = this;
        std::string::size_type v159 = 2;
LABEL_523:
        std::string::append(v158, v157, v159);
        if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u) {
          goto LABEL_799;
        }
LABEL_718:
        long long v10 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        goto LABEL_7;
      case 0x10D:
        std::string::append(this, "base conformance descriptor for ", 0x20uLL);
        int v100 = *((unsigned __int8 *)a2 + 18);
        unint64_t v101 = (swift::Demangle::__runtime::Node **)a2;
        if ((v100 - 1) < 2) {
          goto LABEL_231;
        }
        if (v100 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v101 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_231:
          unint64_t v102 = *v101;
        }
        else
        {
          unint64_t v102 = 0;
        }
        int v130 = ": ";
        int v131 = this;
        std::string::size_type v132 = 2;
LABEL_504:
        std::string::append(v131, v130, v132);
        goto LABEL_505;
      case 0x10E:
        unint64_t v43 = "associated type descriptor for ";
LABEL_108:
        unint64_t v44 = this;
        std::string::size_type v45 = 31;
        goto LABEL_318;
      case 0x10F:
        uint64_t v274 = " async";
LABEL_1286:
        v275 = this;
        std::string::size_type v276 = 6;
        goto LABEL_822;
      case 0x110:
        uint64_t v274 = " throws";
        goto LABEL_1624;
      case 0x111:
        std::string::append(this, " throws(", 8uLL);
        int v402 = *((unsigned __int8 *)a2 + 18);
        if (v402 == 1) {
          goto LABEL_1115;
        }
        if (v402 != 5 || *((_DWORD *)a2 + 2) != 1) {
          goto LABEL_1489;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1115:
        v403 = *(swift::Demangle::__runtime::Node **)a2;
        unsigned int v404 = v7 + 1;
        v405 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1116;
      case 0x112:
        uint64_t v274 = " empty-list ";
LABEL_1062:
        v275 = this;
        std::string::size_type v276 = 12;
        goto LABEL_822;
      case 0x113:
        uint64_t v274 = " first-element-marker ";
        goto LABEL_1023;
      case 0x114:
        uint64_t v274 = " variadic-marker ";
        goto LABEL_1426;
      case 0x115:
        std::string::append(this, "outlined bridged method (", 0x19uLL);
        std::string::append(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
        uint64_t v274 = ") of ";
        goto LABEL_1014;
      case 0x116:
        std::string::append(this, "outlined copy of ", 0x11uLL);
        int v56 = *((unsigned __int8 *)a2 + 18);
        unint64_t v57 = (swift::Demangle::__runtime::Node **)a2;
        if ((v56 - 1) < 2) {
          goto LABEL_196;
        }
        if (v56 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_398;
        }
        goto LABEL_195;
      case 0x117:
        std::string::append(this, "outlined consume of ", 0x14uLL);
        int v88 = *((unsigned __int8 *)a2 + 18);
        unint64_t v57 = (swift::Demangle::__runtime::Node **)a2;
        if ((v88 - 1) < 2) {
          goto LABEL_196;
        }
        if (v88 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_195:
          unint64_t v57 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_196:
          unsigned int v89 = *v57;
        }
        else
        {
LABEL_398:
          unsigned int v89 = 0;
        }
        int v160 = *((unsigned __int8 *)a2 + 18);
        if (v160 == 2) {
          goto LABEL_509;
        }
        if (v160 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_823;
        }
        goto LABEL_508;
      case 0x118:
        long long v15 = "outlined retain of ";
        int v31 = this;
        std::string::size_type v32 = 19;
        goto LABEL_310;
      case 0x119:
        long long v15 = "outlined release of ";
        goto LABEL_235;
      case 0x11A:
        long long v15 = "outlined init with take of ";
        goto LABEL_309;
      case 0x11B:
      case 0x15E:
        long long v15 = "outlined init with copy of ";
        goto LABEL_309;
      case 0x11C:
      case 0x15F:
        long long v15 = "outlined assign with take of ";
        goto LABEL_46;
      case 0x11D:
      case 0x160:
        long long v15 = "outlined assign with copy of ";
LABEL_46:
        int v31 = this;
        std::string::size_type v32 = 29;
        goto LABEL_310;
      case 0x11E:
      case 0x161:
        long long v15 = "outlined destroy of ";
LABEL_235:
        int v31 = this;
        std::string::size_type v32 = 20;
        goto LABEL_310;
      case 0x11F:
        v417 = "outlined variable #";
        v418 = this;
        std::string::size_type v419 = 19;
        goto LABEL_1182;
      case 0x120:
        v417 = "outlined read-only object #";
        v418 = this;
        std::string::size_type v419 = 27;
LABEL_1182:
        std::string::append(v418, v417, v419);
        v275 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, *(void *)a2);
        uint64_t v274 = " of ";
        std::string::size_type v276 = 4;
        goto LABEL_822;
      case 0x121:
        int v406 = *((unsigned __int8 *)a2 + 18);
        v407 = (swift::Demangle::__runtime::Node *const *)a2;
        if ((v406 - 1) < 2) {
          goto LABEL_1657;
        }
        if (v406 == 5)
        {
          v407 = *(swift::Demangle::__runtime::Node *const **)a2;
        }
        else
        {
          v407 = 0;
LABEL_1657:
          if (v406 != 5)
          {
            v566 = (swift::Demangle::__runtime::Node *const *)((char *)a2 + 8);
            if (v406 != 1) {
              v566 = 0;
            }
            if (v406 == 2) {
              v567 = (swift::Demangle::__runtime::Node *const *)((char *)a2 + 16);
            }
            else {
              v567 = v566;
            }
LABEL_1664:
            goto LABEL_823;
          }
        }
        v567 = (swift::Demangle::__runtime::Node *const *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2));
        goto LABEL_1664;
      case 0x123:
        unint64_t v28 = "module descriptor ";
        unint64_t v29 = this;
        std::string::size_type v30 = 18;
        goto LABEL_295;
      case 0x124:
        unint64_t v28 = "extension descriptor ";
        goto LABEL_239;
      case 0x125:
        unint64_t v28 = "anonymous descriptor ";
LABEL_239:
        unint64_t v29 = this;
        std::string::size_type v30 = 21;
        goto LABEL_295;
      case 0x126:
        v372 = "generic parameter reference for associated type ";
        unsigned __int8 v373 = this;
        std::string::size_type v374 = 48;
LABEL_1507:
        std::string::append(v373, v372, v374);
LABEL_1508:
        goto LABEL_823;
      case 0x127:
        int v429 = *((unsigned __int8 *)a2 + 18);
        if ((v429 - 1) < 2) {
          goto LABEL_1171;
        }
        if (v429 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1171:
          v430 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v430 = 0;
        }
        uint64_t v274 = "?";
        goto LABEL_1490;
      case 0x128:
        std::string::append(this, "[", 1uLL);
        int v408 = *((unsigned __int8 *)a2 + 18);
        if ((v408 - 1) < 2) {
          goto LABEL_1124;
        }
        if (v408 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1124:
          v409 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v409 = 0;
        }
        unsigned int v542 = v7 + 1;
        v541 = (_anonymous_namespace_::NodePrinter *)this;
        goto LABEL_1563;
      case 0x129:
        std::string::append(this, "[", 1uLL);
        int v398 = *((unsigned __int8 *)a2 + 18);
        v399 = (swift::Demangle::__runtime::Node **)a2;
        if ((v398 - 1) < 2) {
          goto LABEL_1101;
        }
        if (v398 == 5 && *((_DWORD *)a2 + 2))
        {
          v399 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1101:
          v400 = *v399;
        }
        else
        {
          v400 = 0;
        }
        unsigned int v539 = v7 + 1;
        std::string::append(this, " : ", 3uLL);
        int v540 = *((unsigned __int8 *)a2 + 18);
        if (v540 == 2) {
          goto LABEL_1555;
        }
        if (v540 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1555:
          v409 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        }
        else
        {
          v409 = 0;
        }
        v541 = (_anonymous_namespace_::NodePrinter *)this;
        unsigned int v542 = v539;
LABEL_1563:
        v536 = "]";
LABEL_1606:
        v560 = this;
        std::string::size_type v561 = 1;
        goto LABEL_1801;
      case 0x12A:
        std::string::append(this, "(", 1uLL);
        int v391 = *((unsigned __int8 *)a2 + 18);
        if ((v391 - 1) < 2) {
          goto LABEL_1079;
        }
        if (v391 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1079:
          v392 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v392 = 0;
        }
        v536 = ")";
        goto LABEL_1606;
      case 0x12B:
        std::string::append(this, "accessor function at ", 0x15uLL);
LABEL_1155:
        uint64_t v425 = *(void *)a2;
LABEL_1156:
        swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, v425);
        goto LABEL_823;
      case 0x12C:
        int v65 = *((unsigned __int8 *)a2 + 18);
        unsigned int v66 = (swift::Demangle::__runtime::Node **)a2;
        if ((v65 - 1) < 2) {
          goto LABEL_353;
        }
        if (v65 == 5 && *((_DWORD *)a2 + 2))
        {
LABEL_352:
          unsigned int v66 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_353:
          unsigned int v140 = *v66;
        }
        else
        {
LABEL_403:
          unsigned int v140 = 0;
        }
        std::string::push_back(this, 46);
LABEL_505:
        int v192 = *((unsigned __int8 *)a2 + 18);
        if (v192 == 2) {
          goto LABEL_509;
        }
        if (v192 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_799;
        }
LABEL_508:
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_509:
        long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        goto LABEL_7;
      case 0x12D:
        uint64_t v332 = "opaque type symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 33;
        goto LABEL_1248;
      case 0x12E:
        unint64_t v43 = "opaque type descriptor for ";
LABEL_145:
        unint64_t v44 = this;
        std::string::size_type v45 = 27;
        goto LABEL_318;
      case 0x12F:
        unint64_t v43 = "opaque type descriptor runtime record for ";
LABEL_276:
        unint64_t v44 = this;
        std::string::size_type v45 = 42;
        goto LABEL_318;
      case 0x130:
        unint64_t v43 = "opaque type descriptor accessor for ";
LABEL_315:
        unint64_t v44 = this;
        std::string::size_type v45 = 36;
        goto LABEL_318;
      case 0x131:
        unint64_t v43 = "opaque type descriptor accessor impl for ";
LABEL_219:
        unint64_t v44 = this;
        std::string::size_type v45 = 41;
        goto LABEL_318;
      case 0x132:
        std::string::append(this, "opaque type descriptor accessor key for ", 0x28uLL);
        int v87 = *((unsigned __int8 *)a2 + 18);
        if ((v87 - 1) < 2) {
          goto LABEL_299;
        }
        if (v87 != 5) {
          goto LABEL_544;
        }
        goto LABEL_297;
      case 0x133:
        unint64_t v28 = "opaque type descriptor accessor var for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 40;
        goto LABEL_295;
      case 0x134:
        uint64_t v274 = "some";
LABEL_1032:
        v275 = this;
        std::string::size_type v276 = 4;
        goto LABEL_822;
      case 0x135:
        std::string::append(this, "<<opaque return type of ", 0x18uLL);
        uint64_t v274 = ">>";
        goto LABEL_1738;
      case 0x136:
        unint64_t v28 = "specialized generic metaclass for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 34;
        goto LABEL_295;
      case 0x137:
        unint64_t v28 = "canonical specialized generic type metadata accessor for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 57;
        goto LABEL_295;
      case 0x138:
        unint64_t v28 = "metadata instantiation cache for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 33;
        goto LABEL_295;
      case 0x139:
        unint64_t v28 = "noncanonical specialized generic type metadata for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 51;
        goto LABEL_295;
      case 0x13A:
        unint64_t v28 = "cache variable for noncanonical specialized generic type metadata for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 70;
        goto LABEL_295;
      case 0x13B:
      case 0x13C:
        if (v11 == 316) {
          long long v16 = "one-time initialization token for ";
        }
        else {
          long long v16 = "one-time initialization function for ";
        }
        if (v11 == 316) {
          std::string::size_type v17 = 34;
        }
        else {
          std::string::size_type v17 = 37;
        }
        std::string::append(this, v16, v17);
        int v18 = *((unsigned __int8 *)a2 + 18);
        if (v18 == 2) {
          goto LABEL_495;
        }
        if (v18 != 5) {
          goto LABEL_496;
        }
LABEL_493:
        if (*((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_496;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_495:
        long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        goto LABEL_6;
      case 0x13D:
        int v75 = *((unsigned __int8 *)a2 + 18);
        if (v75 == 1) {
          goto LABEL_5;
        }
        if (v75 == 5 && *((_DWORD *)a2 + 2) == 1) {
          goto LABEL_4;
        }
        std::string::push_back(this, 40);
        int v491 = *((unsigned __int8 *)a2 + 18);
        if (v491 == 5)
        {
          v576 = (unsigned int *)((char *)a2 + 8);
          uint64_t v577 = *((unsigned int *)a2 + 2);
          if (!v577
            || (unsigned int v578 = v7 + 1,
          {
LABEL_1829:
            std::string::push_back(this, 41);
            goto LABEL_823;
          }
        }
        else
        {
          if (v491 != 2)
          {
            if (v491 == 1) {
            goto LABEL_1829;
            }
          }
          v576 = (unsigned int *)((char *)a2 + 8);
          unsigned int v578 = v7 + 1;
          uint64_t v577 = 2;
        }
        unint64_t v579 = 1;
        while (1)
        {
          std::string::append(this, ", ", 2uLL);
          int v581 = *((unsigned __int8 *)a2 + 18);
          if (v581 == 2)
          {
            unint64_t v582 = *((unsigned __int8 *)a2 + 18);
          }
          else
          {
            if (v581 != 5) {
              goto LABEL_1697;
            }
            unint64_t v582 = *v576;
          }
          if (v582 > v579)
          {
            unsigned int v583 = v581 - 1;
            v584 = a2;
            if (v583 >= 2) {
              v584 = *(swift::Demangle::__runtime::Node **)a2;
            }
            v580 = (swift::Demangle::__runtime::Node *)*((void *)v584 + v579);
            goto LABEL_1698;
          }
LABEL_1697:
          v580 = 0;
LABEL_1698:
          if (v577 == ++v579) {
            goto LABEL_1829;
          }
        }
      case 0x13E:
        unint64_t v28 = "flag for loading of canonical specialized generic type metadata for ";
        unint64_t v29 = this;
        std::string::size_type v30 = 68;
        goto LABEL_295;
      case 0x13F:
        uint64_t v274 = "async function pointer to ";
        goto LABEL_1051;
      case 0x140:
      case 0x144:
        unsigned int v628 = v5;
        int v19 = 0;
        unint64_t v20 = 0;
        unint64_t v21 = *((unsigned __int8 *)a2 + 18);
        unint64_t v22 = v21;
        unsigned int v23 = v21 - 1;
        int v24 = -1;
        while (2)
        {
          uint64_t v25 = *((unsigned __int8 *)a2 + 18);
          if (v21 == 1) {
            goto LABEL_30;
          }
          if (v21 == 5)
          {
            if (v20 == *((_DWORD *)a2 + 2)) {
              break;
            }
            goto LABEL_31;
          }
          uint64_t v25 = 2;
          if (v21 != 2) {
            uint64_t v25 = 0;
          }
LABEL_30:
          if (v20 != v25)
          {
LABEL_31:
            BOOL v26 = a2;
            if ((v21 - 1) >= 2) {
              BOOL v26 = *(swift::Demangle::__runtime::Node **)a2;
            }
            if (*(_WORD *)(*((void *)v26 + v20) + 16) != 321)
            {
              ++v20;
              ++v24;
              ++v19;
              continue;
            }
          }
          break;
        }
        unint64_t v27 = *((unsigned __int8 *)a2 + 18);
        switch(v21)
        {
          case 1:
            break;
          case 5:
            unint64_t v27 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v27 = 2;
            break;
          default:
            goto LABEL_414;
        }
        if (v27 > v20)
        {
          int v163 = a2;
          if (v23 >= 2) {
            int v163 = *(swift::Demangle::__runtime::Node **)a2;
          }
          uint64_t v164 = (swift::Demangle::__runtime::Node *)*((void *)v163 + v20);
LABEL_415:
          if (v21 != 1)
          {
            if (v21 == 5)
            {
              unint64_t v22 = *((unsigned int *)a2 + 2);
            }
            else
            {
              if (v21 != 2) {
                goto LABEL_424;
              }
              unint64_t v22 = 2;
            }
          }
          unint64_t v165 = (v20 + 1);
          if (v22 > v165)
          {
            int v166 = a2;
            if (v23 >= 2) {
              int v166 = *(swift::Demangle::__runtime::Node **)a2;
            }
            unsigned int v167 = (swift::Demangle::__runtime::Node *)*((void *)v166 + v165);
LABEL_425:
            if (v21 != 1)
            {
              if (v21 == 5)
              {
                unint64_t v21 = *((unsigned int *)a2 + 2);
              }
              else
              {
                if (v21 != 2) {
                  goto LABEL_434;
                }
                unint64_t v21 = 2;
              }
            }
            unint64_t v168 = (v20 + 2);
            if (v21 > v168)
            {
              int v169 = a2;
              if (v23 >= 2) {
                int v169 = *(swift::Demangle::__runtime::Node **)a2;
              }
              unsigned int v170 = (swift::Demangle::__runtime::Node *)*((void *)v169 + v168);
              goto LABEL_435;
            }
LABEL_434:
            unsigned int v170 = 0;
LABEL_435:
            if (v11 == 324) {
              std::string::append(this, "vtable thunk for ", 0x11uLL);
            }
            std::string::append(this, " of ", 4uLL);
            if (!v20)
            {
              long long v10 = 0;
              uint64_t v5 = v628;
              goto LABEL_728;
            }
            v627 = v170;
            int v171 = v167;
            unint64_t v172 = 0;
            unint64_t v173 = (v20 - 1);
            while (1)
            {
              unint64_t v175 = *((unsigned __int8 *)a2 + 18);
              if (v24 == v172)
              {
                if ((v175 - 1) >= 2)
                {
                  char v176 = 0;
                  int v177 = *(swift::Demangle::__runtime::Node **)a2;
                }
                else
                {
                  char v176 = 1;
                  int v177 = a2;
                }
                if (*(_WORD *)(*((void *)v177 + v173) + 16) == 43)
                {
                  if (v175 == 1)
                  {
                    uint64_t v5 = v628;
                    unsigned int v167 = v171;
                  }
                  else
                  {
                    uint64_t v5 = v628;
                    unsigned int v167 = v171;
                    if (v175 != 5)
                    {
                      unsigned int v170 = v627;
                      if (v175 == 2)
                      {
                        unint64_t v175 = 2;
                        goto LABEL_723;
                      }
                      goto LABEL_727;
                    }
                    unint64_t v175 = *((unsigned int *)a2 + 2);
                  }
                  unsigned int v170 = v627;
LABEL_723:
                  if (v175 <= v173)
                  {
LABEL_727:
                    long long v10 = 0;
                  }
                  else
                  {
                    if ((v176 & 1) == 0) {
                      a2 = *(swift::Demangle::__runtime::Node **)a2;
                    }
                    long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v173);
                  }
LABEL_728:
                  if (this[1].__r_.__value_.__s.__data_[11]) {
                    goto LABEL_823;
                  }
                  std::string::append(this, " with respect to parameters ", 0x1CuLL);
                  std::string::append(this, " and results ", 0xDuLL);
                  if (v10)
                  {
                    if (this[1].__r_.__value_.__s.__data_[7])
                    {
LABEL_731:
                      std::string::append(this, " with ", 6uLL);
                      goto LABEL_7;
                    }
                    goto LABEL_823;
                  }
                  goto LABEL_824;
                }
              }
              unsigned int v178 = v175 - 1;
              if (v175 == 1) {
                goto LABEL_450;
              }
              if (v175 != 5) {
                break;
              }
              if (*((unsigned int *)a2 + 2) > v172)
              {
LABEL_453:
                int v179 = a2;
                if (v178 >= 2) {
                  int v179 = *(swift::Demangle::__runtime::Node **)a2;
                }
                int v174 = (swift::Demangle::__runtime::Node *)*((void *)v179 + v172);
                goto LABEL_440;
              }
LABEL_439:
              int v174 = 0;
LABEL_440:
              if (v19 == ++v172)
              {
                long long v10 = 0;
                uint64_t v5 = v628;
                unsigned int v167 = v171;
                unsigned int v170 = v627;
                goto LABEL_728;
              }
            }
            if (v175 != 2) {
              goto LABEL_439;
            }
            unint64_t v175 = 2;
LABEL_450:
            if (v175 > v172) {
              goto LABEL_453;
            }
            goto LABEL_439;
          }
LABEL_424:
          unsigned int v167 = 0;
          goto LABEL_425;
        }
LABEL_414:
        uint64_t v164 = 0;
        goto LABEL_415;
      case 0x141:
        long long v10 = 0;
        HIDWORD(v410) = *(unsigned __int8 *)a2;
        LODWORD(v410) = (HIDWORD(v410) << 24) - 1677721600;
        switch((v410 >> 25))
        {
          case 0u:
            uint64_t v274 = "differential";
            goto LABEL_1062;
          case 1u:
            uint64_t v274 = "forward-mode derivative";
            goto LABEL_1751;
          case 6u:
            uint64_t v274 = "pullback";
            goto LABEL_1749;
          case 7u:
            uint64_t v274 = "reverse-mode derivative";
LABEL_1751:
            v275 = this;
            std::string::size_type v276 = 23;
            goto LABEL_822;
          default:
            goto LABEL_824;
        }
      case 0x142:
        std::string::append(this, "autodiff self-reordering reabstraction thunk ", 0x2DuLL);
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        long long v10 = *(swift::Demangle::__runtime::Node **)a2;
        if (this[1].__r_.__value_.__s.__data_[11])
        {
          std::string::append(this, "for ", 4uLL);
          goto LABEL_6;
        }
        unsigned int v185 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
        int v184 = (unsigned __int16 *)*((void *)a2 + 2);
        int v186 = v184[8];
        if (v186 == 43) {
          uint64_t v187 = 24;
        }
        else {
          uint64_t v187 = 16;
        }
        std::string::append(this, "for ", 4uLL);
        if (v184 && v186 == 43)
        {
          std::string::push_back(this, 32);
        }
        std::string::append(this, " from ", 6uLL);
        std::string::append(this, " to ", 4uLL);
        long long v10 = v185;
        goto LABEL_7;
      case 0x143:
        std::string::append(this, "autodiff subset parameters thunk for ", 0x25uLL);
        unint64_t v90 = *((unsigned __int8 *)a2 + 18);
        switch(v90)
        {
          case 1:
            uint64_t v93 = 0;
            unint64_t v91 = -1;
            uint64_t v92 = *((unsigned __int8 *)a2 + 18);
            goto LABEL_619;
          case 5:
            uint64_t v92 = *((unsigned int *)a2 + 2);
            unint64_t v91 = v92 - 2;
            if (!v92)
            {
              int v219 = 0;
              uint64_t v92 = 0;
              unint64_t v221 = 0;
              unint64_t v220 = -3;
              goto LABEL_740;
            }
            uint64_t v93 = v92 - 1;
            uint64_t v218 = *(swift::Demangle::__runtime::Node **)a2;
            goto LABEL_620;
          case 2:
            unint64_t v91 = 0;
            uint64_t v92 = 2;
            uint64_t v93 = 1;
LABEL_619:
            uint64_t v218 = a2;
LABEL_620:
            int v219 = (swift::Demangle::__runtime::Node *)*((void *)v218 + v93);
            goto LABEL_622;
        }
        uint64_t v92 = 0;
        int v219 = 0;
        unint64_t v91 = -2;
LABEL_622:
        unint64_t v220 = v92 - 3;
        switch(v90)
        {
          case 1:
            unint64_t v221 = *((unsigned __int8 *)a2 + 18);
            break;
          case 2:
            unint64_t v221 = 2;
            break;
          case 5:
            unint64_t v221 = *((unsigned int *)a2 + 2);
            break;
          default:
            goto LABEL_744;
        }
LABEL_740:
        if (v221 <= v91)
        {
LABEL_744:
          unint64_t v249 = 0;
          goto LABEL_745;
        }
        unsigned int v248 = a2;
        if ((v90 - 1) >= 2) {
          unsigned int v248 = *(swift::Demangle::__runtime::Node **)a2;
        }
        unint64_t v249 = (swift::Demangle::__runtime::Node *)*((void *)v248 + v91);
LABEL_745:
        switch(v90)
        {
          case 1:
            unint64_t v250 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            unint64_t v250 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v250 = 2;
            break;
          default:
            goto LABEL_755;
        }
        if (v250 <= v220)
        {
LABEL_755:
          char v252 = 0;
          goto LABEL_756;
        }
        unint64_t v251 = a2;
        if ((v90 - 1) >= 2) {
          unint64_t v251 = *(swift::Demangle::__runtime::Node **)a2;
        }
        char v252 = (swift::Demangle::__runtime::Node *)*((void *)v251 + v220);
LABEL_756:
        unsigned int v253 = v90 - 1;
        switch(v90)
        {
          case 1:
            break;
          case 5:
            unint64_t v90 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v90 = 2;
            break;
          default:
            goto LABEL_765;
        }
        if (v90 <= v92 - 4)
        {
LABEL_765:
          uint64_t v255 = 0;
          goto LABEL_766;
        }
        BOOL v254 = a2;
        if (v253 >= 2) {
          BOOL v254 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v255 = (swift::Demangle::__runtime::Node *)*((void *)v254 + v92 - 4);
LABEL_766:
        unint64_t v256 = v92 - 5;
        std::string::append(this, " from ", 6uLL);
        if (v256)
        {
          uint64_t v257 = v5;
          unint64_t v258 = 0;
          unsigned int v259 = 1;
          while (1)
          {
            unint64_t v261 = *((unsigned __int8 *)a2 + 18);
            unsigned int v262 = v261 - 1;
            if (v261 == 1) {
              goto LABEL_774;
            }
            if (v261 != 5) {
              break;
            }
            if (*((unsigned int *)a2 + 2) > v258)
            {
LABEL_777:
              v263 = a2;
              if (v262 >= 2) {
                v263 = *(swift::Demangle::__runtime::Node **)a2;
              }
              v260 = (swift::Demangle::__runtime::Node *)*((void *)v263 + v258);
              goto LABEL_769;
            }
LABEL_768:
            v260 = 0;
LABEL_769:
            unint64_t v258 = v259++;
            if (v256 <= v258) {
              goto LABEL_787;
            }
          }
          if (v261 != 2) {
            goto LABEL_768;
          }
          unint64_t v261 = 2;
LABEL_774:
          if (v261 > v258) {
            goto LABEL_777;
          }
          goto LABEL_768;
        }
        int v264 = *((unsigned __int8 *)a2 + 18);
        unint64_t v265 = (swift::Demangle::__runtime::Node **)a2;
        if ((v264 - 1) < 2) {
          goto LABEL_784;
        }
        if (v264 == 5 && *((_DWORD *)a2 + 2))
        {
          unint64_t v265 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_784:
          uint64_t v257 = v5;
          uint64_t v266 = *v265;
        }
        else
        {
          uint64_t v257 = v5;
          uint64_t v266 = 0;
        }
LABEL_787:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        std::string::append(this, " and results ", 0xDuLL);
        std::string::append(this, " to parameters ", 0xFuLL);
        if (!v256) {
          goto LABEL_823;
        }
        std::string::append(this, " of type ", 9uLL);
        unint64_t v267 = *((unsigned __int8 *)a2 + 18);
        unsigned int v268 = v267 - 1;
        if (v267 == 1)
        {
          uint64_t v5 = v257;
        }
        else
        {
          uint64_t v5 = v257;
          if (v267 == 5)
          {
            unint64_t v267 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v267 != 2) {
              goto LABEL_799;
            }
            unint64_t v267 = 2;
          }
        }
        if (v267 <= v256) {
          goto LABEL_799;
        }
        if (v268 >= 2) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v256);
LABEL_7:
        char v6 = 0;
        char v8 = 1;
        a2 = v10;
        if (v7 > 0x300) {
          goto LABEL_820;
        }
        continue;
      case 0x145:
        uint64_t v76 = *((unsigned int *)a2 + 2);
        if (v76) {
          uint64_t v77 = *(void *)(*(void *)a2 + 8 * v76 - 8) + 16;
        }
        else {
          uint64_t v77 = 16;
        }
        BOOL v273 = *(unsigned __int16 *)v77 == 43;
        uint64_t v188 = -4;
        if (!v273) {
          uint64_t v188 = -3;
        }
        HIDWORD(v189) = **(unsigned __int8 **)(*(void *)a2 + 8 * (v188 + v76));
        LODWORD(v189) = (HIDWORD(v189) << 24) - 1677721600;
        switch((v189 >> 25))
        {
          case 0u:
            unsigned int v190 = "normal";
            goto LABEL_642;
          case 1u:
            unsigned int v190 = "forward-mode";
            goto LABEL_645;
          case 4u:
            unsigned int v190 = "linear";
LABEL_642:
            int v222 = this;
            std::string::size_type v223 = 6;
            goto LABEL_646;
          case 7u:
            unsigned int v190 = "reverse-mode";
LABEL_645:
            int v222 = this;
            std::string::size_type v223 = 12;
LABEL_646:
            std::string::append(v222, v190, v223);
            break;
          default:
            break;
        }
        std::string::append(this, " differentiability witness for ", 0x1FuLL);
        uint64_t v224 = *((unsigned __int8 *)a2 + 18);
        if (v224 == 1) {
          goto LABEL_652;
        }
        if (v224 == 5)
        {
          uint64_t v224 = *((unsigned int *)a2 + 2);
          if (v224) {
            goto LABEL_652;
          }
LABEL_669:
          LODWORD(v225) = 0;
          goto LABEL_671;
        }
        if (v224 != 2) {
          goto LABEL_669;
        }
        uint64_t v224 = 2;
LABEL_652:
        unint64_t v225 = 0;
        while (1)
        {
          unint64_t v227 = *((unsigned __int8 *)a2 + 18);
          if ((v227 - 1) >= 2)
          {
            char v228 = 0;
            int v229 = *(swift::Demangle::__runtime::Node **)a2;
          }
          else
          {
            char v228 = 1;
            int v229 = a2;
          }
          if (*(_WORD *)(*((void *)v229 + v225) + 16) == 102) {
            break;
          }
          if (v227 == 1) {
            goto LABEL_663;
          }
          if (v227 != 5)
          {
            if (v227 != 2) {
              goto LABEL_653;
            }
            unint64_t v227 = 2;
LABEL_663:
            if (v227 > v225) {
              goto LABEL_666;
            }
            goto LABEL_653;
          }
          if (*((unsigned int *)a2 + 2) > v225)
          {
LABEL_666:
            unsigned int v230 = a2;
            if ((v228 & 1) == 0) {
              unsigned int v230 = *(swift::Demangle::__runtime::Node **)a2;
            }
            int v226 = (swift::Demangle::__runtime::Node *)*((void *)v230 + v225);
            goto LABEL_654;
          }
LABEL_653:
          int v226 = 0;
LABEL_654:
          if (v224 == ++v225)
          {
            LODWORD(v225) = v224;
            break;
          }
        }
LABEL_671:
        std::string::append(this, " with respect to parameters ", 0x1CuLL);
        unint64_t v231 = *((unsigned __int8 *)a2 + 18);
        unsigned int v232 = v231 - 1;
        if (v231 == 1) {
          goto LABEL_676;
        }
        if (v231 != 5)
        {
          if (v231 == 2)
          {
            unint64_t v231 = 2;
            goto LABEL_676;
          }
          goto LABEL_680;
        }
        unint64_t v231 = *((unsigned int *)a2 + 2);
LABEL_676:
        unint64_t v233 = (v225 + 1);
        if (v231 <= v233)
        {
LABEL_680:
          uint64_t v235 = 0;
        }
        else
        {
          unint64_t v234 = a2;
          if (v232 >= 2) {
            unint64_t v234 = *(swift::Demangle::__runtime::Node **)a2;
          }
          uint64_t v235 = (swift::Demangle::__runtime::Node *)*((void *)v234 + v233);
        }
        std::string::append(this, " and results ", 0xDuLL);
        unint64_t v236 = *((unsigned __int8 *)a2 + 18);
        unsigned int v237 = v236 - 1;
        if (v236 != 1)
        {
          if (v236 != 5)
          {
            if (v236 == 2)
            {
              unint64_t v236 = 2;
              goto LABEL_686;
            }
LABEL_690:
            uint64_t v240 = 0;
            goto LABEL_691;
          }
          unint64_t v236 = *((unsigned int *)a2 + 2);
        }
LABEL_686:
        unint64_t v238 = (v225 + 2);
        if (v236 <= v238) {
          goto LABEL_690;
        }
        BOOL v239 = a2;
        if (v237 >= 2) {
          BOOL v239 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v240 = (swift::Demangle::__runtime::Node *)*((void *)v239 + v238);
LABEL_691:
        unint64_t v241 = *((unsigned __int8 *)a2 + 18);
        switch(v241)
        {
          case 1:
            unint64_t v242 = *((unsigned __int8 *)a2 + 18);
            break;
          case 5:
            unint64_t v242 = *((unsigned int *)a2 + 2);
            break;
          case 2:
            unint64_t v242 = 2;
            break;
          default:
            goto LABEL_823;
        }
        unint64_t v243 = (v225 + 3);
        if (v242 > v243)
        {
          unsigned int v244 = v241 - 1;
          if (v241 != 1)
          {
            if (v241 == 5) {
              unint64_t v241 = *((unsigned int *)a2 + 2);
            }
            else {
              unint64_t v241 = 2;
            }
          }
          if (v241 <= v243)
          {
            long long v10 = 0;
          }
          else
          {
            if (v244 >= 2) {
              a2 = *(swift::Demangle::__runtime::Node **)a2;
            }
            long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + v243);
          }
          goto LABEL_731;
        }
LABEL_823:
        long long v10 = 0;
LABEL_824:
        if (v8) {
          return 0;
        }
        else {
          return v10;
        }
      case 0x146:
        unint64_t v43 = "@noDerivative ";
LABEL_208:
        unint64_t v44 = this;
        std::string::size_type v45 = 14;
        goto LABEL_318;
      case 0x147:
        std::string::push_back(this, 123);
        uint64_t v438 = *((unsigned int *)a2 + 2);
        if (*((_DWORD *)a2 + 2))
        {
          uint64_t v439 = 0;
          char v440 = 0;
          uint64_t v441 = *(void *)a2;
          do
          {
            if (*(unsigned char *)(v441 + v439) == 83)
            {
              if (v440) {
                std::string::append(this, ", ", 2uLL);
              }
              swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, v439);
              char v440 = 1;
            }
            ++v439;
          }
          while (v438 != v439);
        }
        std::string::push_back(this, 125);
        goto LABEL_823;
      case 0x148:
        if (!this[1].__r_.__value_.__s.__data_[20]) {
          goto LABEL_823;
        }
        std::string::append(this, "(", 1uLL);
        int v426 = *((unsigned __int8 *)a2 + 18);
        if ((v426 - 1) < 2) {
          goto LABEL_1162;
        }
        if (v426 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1162:
          v427 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v427 = 0;
        }
        std::string::append(this, ")", 1uLL);
        v536 = " await resume partial function for ";
        v560 = this;
        std::string::size_type v561 = 35;
        goto LABEL_1801;
      case 0x149:
        if (!this[1].__r_.__value_.__s.__data_[20]) {
          goto LABEL_823;
        }
        std::string::append(this, "(", 1uLL);
        int v381 = *((unsigned __int8 *)a2 + 18);
        if ((v381 - 1) < 2) {
          goto LABEL_1048;
        }
        if (v381 == 5 && *((_DWORD *)a2 + 2))
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1048:
          v382 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v382 = 0;
        }
        std::string::append(this, ")", 1uLL);
        v536 = " suspend resume partial function for ";
        v560 = this;
        std::string::size_type v561 = 37;
        goto LABEL_1801;
      case 0x14A:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "accessible function runtime record for ";
        v275 = this;
        std::string::size_type v276 = 39;
        goto LABEL_822;
      case 0x14B:
        unint64_t v43 = "_const ";
LABEL_204:
        unint64_t v44 = this;
        std::string::size_type v45 = 7;
LABEL_318:
        std::string::append(v44, v43, v45);
        int v125 = *((unsigned __int8 *)a2 + 18);
        if ((v125 - 1) < 2) {
          goto LABEL_322;
        }
        if (v125 != 5 || !*((_DWORD *)a2 + 2)) {
          goto LABEL_544;
        }
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_322:
        long long v10 = *(swift::Demangle::__runtime::Node **)a2;
        ++v7;
        goto LABEL_7;
      case 0x14C:
        if (this[1].__r_.__value_.__s.__data_[11]) {
          goto LABEL_823;
        }
        uint64_t v274 = "back deployment thunk for ";
LABEL_1051:
        v275 = this;
        std::string::size_type v276 = 26;
        goto LABEL_822;
      case 0x14D:
        uint64_t v274 = "back deployment fallback for ";
        v275 = this;
        std::string::size_type v276 = 29;
        goto LABEL_822;
      case 0x14E:
        std::string::value_type v420 = this[1].__r_.__value_.__s.__data_[7];
        this[1].__r_.__value_.__s.__data_[7] = 1;
        int v421 = *((unsigned __int8 *)a2 + 18);
        if (v421 == 2) {
          goto LABEL_1152;
        }
        if (v421 != 5) {
          goto LABEL_1785;
        }
        unsigned int v422 = *((_DWORD *)a2 + 2);
        if (v422 == 2)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1152:
          v423 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          std::string::append(this, "existential shape for ", 0x16uLL);
          if (v423)
          {
            unsigned int v424 = v7 + 1;
            std::string::append(this, " ", 1uLL);
            v423 = 0;
            goto LABEL_1788;
          }
        }
        else
        {
          if (v422 < 2) {
LABEL_1785:
          }
            v423 = 0;
          else {
            v423 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 8);
          }
          std::string::append(this, "existential shape for ", 0x16uLL);
        }
        unsigned int v424 = v7 + 1;
LABEL_1788:
        std::string::append(this, "any ", 4uLL);
        __n128 result = 0;
        this[1].__r_.__value_.__s.__data_[7] = v420;
        return result;
      case 0x14F:
        unint64_t v28 = "uniquable ";
        unint64_t v29 = this;
        std::string::size_type v30 = 10;
LABEL_295:
        std::string::append(v29, v28, v30);
        int v124 = *((unsigned __int8 *)a2 + 18);
        if ((v124 - 1) < 2) {
          goto LABEL_299;
        }
        if (v124 != 5) {
          goto LABEL_496;
        }
LABEL_297:
        if (!*((_DWORD *)a2 + 2)) {
          goto LABEL_496;
        }
LABEL_298:
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_299:
        long long v10 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_6;
      case 0x150:
        uint64_t v332 = "unique existential shape symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 46;
        goto LABEL_1248;
      case 0x151:
        uint64_t v332 = "non-unique existential shape symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 50;
        goto LABEL_1248;
      case 0x152:
        int v411 = *((unsigned __int8 *)a2 + 18);
        v412 = a2;
        if ((v411 - 1) < 2) {
          goto LABEL_1132;
        }
        if (v411 == 5 && *((_DWORD *)a2 + 2))
        {
          v412 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1132:
          uint64_t v413 = *(void *)v412;
        }
        else
        {
          uint64_t v413 = 0;
        }
        int v543 = *(unsigned __int16 *)(v413 + 16);
        std::string::append(this, "symbolic existential type (", 0x1BuLL);
        if (v543 == 336) {
          v544 = "";
        }
        else {
          v544 = "non-";
        }
        std::string::append(this, v544, 4 * (v543 != 336));
        std::string::append(this, "unique) 0x", 0xAuLL);
        v545 = swift::Demangle::__runtime::DemanglerPrinter::writeHex(this, *(void *)v413);
        std::string::append(v545, " <", 2uLL);
        int v546 = *((unsigned __int8 *)a2 + 18);
        v547 = a2;
        if (v546 == 2) {
          goto LABEL_1572;
        }
        if (v546 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
          v547 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_1572:
          v548 = (swift::Demangle::__runtime::Node *)*((void *)v547 + 1);
        }
        else
        {
          v548 = 0;
        }
        unsigned int v549 = v7 + 1;
        if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
        {
          std::string::append(this, ", ", 2uLL);
          if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
            v550 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
          }
          else {
            v550 = 0;
          }
        }
        uint64_t v274 = ">";
        goto LABEL_1490;
      case 0x153:
        uint64_t v274 = "metatypes-removed";
        goto LABEL_1426;
      case 0x154:
        uint64_t v274 = "#_hasSymbol query for ";
LABEL_1023:
        v275 = this;
        std::string::size_type v276 = 22;
        goto LABEL_822;
      case 0x157:
        long long v15 = "outlined enum tag store of ";
LABEL_309:
        int v31 = this;
        std::string::size_type v32 = 27;
        goto LABEL_310;
      case 0x158:
        long long v15 = "outlined enum project data for load of ";
        int v31 = this;
        std::string::size_type v32 = 39;
        goto LABEL_310;
      case 0x159:
        long long v15 = "outlined enum get tag of ";
        int v31 = this;
        std::string::size_type v32 = 25;
        goto LABEL_310;
      case 0x15A:
        long long v15 = "async demotion of ";
LABEL_272:
        int v31 = this;
        std::string::size_type v32 = 18;
LABEL_310:
        std::string::append(v31, v15, v32);
LABEL_311:
        int v118 = *((unsigned __int8 *)a2 + 18);
        if ((v118 - 1) >= 2) {
          goto LABEL_312;
        }
        goto LABEL_5;
      case 0x15B:
        uint64_t v332 = "objective-c protocol symbolic reference 0x";
        v333 = this;
        std::string::size_type v334 = 42;
LABEL_1248:
        std::string::append(v333, v332, v334);
        swift::Demangle::__runtime::DemanglerPrinter::writeHex(this, *(void *)a2);
        goto LABEL_823;
      case 0x15C:
        std::string::append(this, "lifetime dependence: ", 0x15uLL);
        unint64_t v78 = a2;
        if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
          unint64_t v78 = *(swift::Demangle::__runtime::Node **)a2;
        }
        int v79 = **(unsigned __int8 **)v78;
        if (v79 == 115)
        {
          uint64_t v80 = "scope ";
          unsigned int v81 = this;
          std::string::size_type v82 = 6;
        }
        else
        {
          if (v79 != 105) {
            goto LABEL_535;
          }
          uint64_t v80 = "inherit ";
          unsigned int v81 = this;
          std::string::size_type v82 = 8;
        }
        std::string::append(v81, v80, v82);
LABEL_535:
        int v204 = *((unsigned __int8 *)a2 + 18);
        if (v204 == 2) {
          goto LABEL_539;
        }
        if (v204 == 5 && *((_DWORD *)a2 + 2) >= 2u)
        {
LABEL_538:
          a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_539:
          long long v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
          ++v7;
        }
        else
        {
LABEL_544:
          long long v10 = 0;
          ++v7;
        }
        goto LABEL_7;
      case 0x15D:
        std::string::append(this, "(self lifetime dependence: ", 0x1BuLL);
        int v384 = *(unsigned __int8 *)a2;
        if (v384 == 115)
        {
          uint64_t v274 = "scope) ";
LABEL_1624:
          v275 = this;
          std::string::size_type v276 = 7;
          goto LABEL_822;
        }
        if (v384 != 105) {
          goto LABEL_823;
        }
        uint64_t v274 = "inherit) ";
        goto LABEL_1781;
      case 0x162:
        int v394 = *((unsigned __int8 *)a2 + 18);
        v395 = (swift::Demangle::__runtime::Node **)a2;
        if ((v394 - 1) < 2) {
          goto LABEL_1090;
        }
        if (v394 == 5 && *((_DWORD *)a2 + 2))
        {
          v395 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_1090:
          v396 = *v395;
        }
        else
        {
          v396 = 0;
        }
        std::string::append(this, ": ~", 3uLL);
        v537 = a2;
        if (*((unsigned char *)a2 + 18) == 5) {
          v537 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v538 = **((void **)v537 + 1);
        if (v538 == 1)
        {
          std::string::append(this, "Swift.", 6uLL);
          uint64_t v274 = "Escapable";
          goto LABEL_1781;
        }
        if (!v538)
        {
          std::string::append(this, "Swift.", 6uLL);
          uint64_t v274 = "Copyable";
          goto LABEL_1749;
        }
        std::string::append(this, "Swift.<bit ", 0xBuLL);
        if (*((unsigned char *)a2 + 18) == 5) {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
        }
        v275 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(this, **((void **)a2 + 1));
        uint64_t v274 = ">";
        std::string::size_type v276 = 1;
        goto LABEL_822;
      default:
        printer_unreachable("bad node kind!");
    }
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::NodePrinter::printEntity(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int a6, std::string::value_type *__s, size_t __n, unsigned int a9, std::string::value_type *__sa, std::string::size_type __na)
{
  std::string::size_type v11 = __n;
  int v12 = __s;
  std::string::size_type v17 = a2;
  if (*((_WORD *)a2 + 8) != 19)
  {
    unint64_t v19 = 0;
    if (!__n) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  unint64_t v19 = 0;
  int v20 = *((unsigned __int8 *)a2 + 18);
  if (v20 == 1) {
    goto LABEL_12;
  }
  unint64_t v21 = a2;
  if (v20 != 2)
  {
    if (v20 != 5) {
      goto LABEL_8;
    }
    unsigned int v22 = *((_DWORD *)a2 + 2);
    if (v22 < 2)
    {
      unint64_t v19 = 0;
      if (v22) {
        goto LABEL_11;
      }
LABEL_21:
      std::string::size_type v17 = 0;
      if (!__n) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }
    unint64_t v21 = (uint64_t *)*a2;
  }
  unint64_t v19 = v21[1];
LABEL_8:
  if (v20 == 2) {
    goto LABEL_12;
  }
  if (v20 != 5 || !*((_DWORD *)a2 + 2)) {
    goto LABEL_21;
  }
LABEL_11:
  std::string::size_type v17 = (uint64_t *)*a2;
LABEL_12:
  std::string::size_type v17 = (uint64_t *)*v17;
  if (!__n)
  {
LABEL_22:
    BOOL v24 = 0;
    if (a6) {
      goto LABEL_23;
    }
LABEL_29:
    int v26 = 0;
    goto LABEL_30;
  }
LABEL_15:
  unsigned int v23 = memchr(__s, 32, __n);
  if (v23) {
    BOOL v24 = v23 - v12 != -1;
  }
  else {
    BOOL v24 = 0;
  }
  if (!a6) {
    goto LABEL_29;
  }
LABEL_23:
  uint64_t v25 = v17;
  if (*((unsigned char *)v17 + 18) == 5) {
    uint64_t v25 = (uint64_t *)*v17;
  }
  if (*(_WORD *)(v25[1] + 16) != 137) {
    goto LABEL_29;
  }
  if (*(unsigned char *)(a1 + 33)) {
    BOOL v24 = 1;
  }
  int v26 = 1;
LABEL_30:
  if (a5) {
    char v27 = 1;
  }
  else {
    char v27 = v24;
  }
  if (a4 && (v27 & 1) != 0) {
    return (swift::Demangle::__runtime::Node *)v17;
  }
  int v28 = *((unsigned __int8 *)v17 + 18);
  unint64_t v29 = v17;
  int v84 = v26;
  unint64_t v87 = v19;
  if ((v28 - 1) < 2) {
    goto LABEL_39;
  }
  if (v28 == 5 && *((_DWORD *)v17 + 2))
  {
    unint64_t v29 = (uint64_t *)*v17;
LABEL_39:
    uint64_t v30 = *v29;
    goto LABEL_41;
  }
  uint64_t v30 = 0;
LABEL_41:
  uint64_t v31 = a9;
  BOOL v85 = v24;
  char v86 = a4;
  if (!*(unsigned char *)(a1 + 25))
  {
    uint64_t v34 = 0;
    std::string::size_type v37 = __na;
    if (a6) {
      goto LABEL_93;
    }
    goto LABEL_90;
  }
  int v32 = a5;
  int v33 = (swift::Demangle::__runtime::Node *)v30;
  if (*(_WORD *)(v30 + 16) == 153)
  {
    int v35 = *(unsigned char **)v30;
    uint64_t v34 = *(swift::Demangle::__runtime::Node **)(v30 + 8);
    if (v34 == (swift::Demangle::__runtime::Node *)3)
    {
      if (*(_WORD *)v35 == 24415 && v35[2] == 67)
      {
        int v41 = *(unsigned __int8 *)(a1 + 42);
        goto LABEL_74;
      }
      if (*(void *)(a1 + 56) != 3) {
        goto LABEL_67;
      }
    }
    else if (v34 == (swift::Demangle::__runtime::Node *)5)
    {
      if (*(_DWORD *)v35 == 1718187859 && v35[4] == 116)
      {
        int v41 = *(unsigned __int8 *)(a1 + 41);
        goto LABEL_74;
      }
      if (*(void *)(a1 + 56) != 5) {
        goto LABEL_67;
      }
    }
    else
    {
      if (v34 != *(swift::Demangle::__runtime::Node **)(a1 + 56))
      {
LABEL_62:
        if ((unint64_t)v34 < 0xC) {
          goto LABEL_67;
        }
        if (*(void *)v35 != 0x655F62646C6C5F5FLL || *((_DWORD *)v35 + 2) != 1601335416) {
          goto LABEL_67;
        }
        int v41 = *(unsigned __int8 *)(a1 + 40);
LABEL_74:
        if (v41) {
          char v42 = v24;
        }
        else {
          char v42 = 1;
        }
        if (v41) {
          uint64_t v34 = v33;
        }
        else {
          uint64_t v34 = 0;
        }
        if (v42) {
          goto LABEL_69;
        }
        goto LABEL_81;
      }
      if (!v34)
      {
LABEL_69:
        a5 = v32;
        goto LABEL_89;
      }
    }
    int v39 = memcmp(*(const void **)v30, *(const void **)(a1 + 48), *(void *)(v30 + 8));
    BOOL v24 = v85;
    if (!v39)
    {
      uint64_t v34 = 0;
      goto LABEL_69;
    }
    goto LABEL_62;
  }
LABEL_67:
  if (v24)
  {
    uint64_t v34 = v33;
    goto LABEL_69;
  }
LABEL_81:
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v43 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v43 = *(void *)(a1 + 8);
  }
  uint64_t v45 = *(unsigned __int8 *)(a1 + 23);
  if ((v45 & 0x80u) != 0) {
    uint64_t v45 = *(void *)(a1 + 8);
  }
  if (v45 != v43) {
    std::string::push_back((std::string *)a1, 46);
  }
  uint64_t v34 = (swift::Demangle::__runtime::Node *)v44;
  a5 = v32;
  BOOL v24 = v85;
LABEL_89:
  uint64_t v31 = a9;
  std::string::size_type v37 = __na;
  if (a6) {
    goto LABEL_93;
  }
LABEL_90:
  if (!v37)
  {
    int v46 = a3;
    unint64_t v47 = v87;
    if (!v11) {
      goto LABEL_114;
    }
    goto LABEL_112;
  }
LABEL_93:
  if (v11) {
    BOOL v48 = v24;
  }
  else {
    BOOL v48 = 0;
  }
  int v49 = a5;
  unint64_t v50 = v34;
  if (v48)
  {
    std::string::append((std::string *)a1, v12, v11);
    if ((v31 & 0x80000000) == 0)
    {
      snprintf(__str, 0x20uLL, "%lld", v31);
      std::string::append((std::string *)a1, __str);
    }
    std::string::append((std::string *)a1, " of ", 4uLL);
    std::string::size_type v11 = 0;
    LODWORD(v31) = -1;
    int v12 = "";
  }
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v51 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v51 = *(void *)(a1 + 8);
  }
  if (v37)
  {
    std::string::append((std::string *)a1, __sa, v37);
    int v46 = a3;
    unint64_t v47 = v87;
    goto LABEL_105;
  }
  int v56 = *((unsigned __int8 *)v17 + 18);
  unint64_t v57 = v17;
  if (v56 == 5) {
    unint64_t v57 = (uint64_t *)*v17;
  }
  int v58 = (swift::Demangle::__runtime::Node *)v57[1];
  int v46 = a3;
  if (*((_WORD *)v58 + 8) != 176)
  {
    int v56 = *((unsigned __int8 *)v17 + 18);
  }
  unint64_t v59 = (swift::Demangle::__runtime::Node **)v17;
  unint64_t v47 = v87;
  if ((v56 - 1) >= 2)
  {
    if (v56 == 5)
    {
      int v60 = (uint64_t *)*v17;
      unint64_t v59 = (swift::Demangle::__runtime::Node **)*v17;
      goto LABEL_191;
    }
    unint64_t v59 = 0;
  }
  if (v56 == 1)
  {
    unint64_t v74 = (swift::Demangle::__runtime::Node **)(v17 + 1);
    goto LABEL_221;
  }
  if (v56 == 2)
  {
    unint64_t v74 = (swift::Demangle::__runtime::Node **)(v17 + 2);
    goto LABEL_221;
  }
  if (v56 != 5)
  {
    unint64_t v74 = 0;
    goto LABEL_221;
  }
  int v60 = (uint64_t *)*v17;
LABEL_191:
  unint64_t v74 = (swift::Demangle::__runtime::Node **)&v60[*((unsigned int *)v17 + 2)];
LABEL_221:
  if (v59 != v74)
  {
    while (*((_WORD *)*v59 + 8) != 176)
    {
      if (++v59 == v74)
      {
        unint64_t v59 = v74;
        break;
      }
    }
  }
  switch(v56)
  {
    case 5:
      uint64_t v83 = *v17 + 8 * *((unsigned int *)v17 + 2);
      break;
    case 2:
      uint64_t v83 = (uint64_t)(v17 + 2);
      break;
    case 1:
      uint64_t v83 = (uint64_t)(v17 + 1);
      break;
    default:
      uint64_t v83 = 0;
      break;
  }
  if (v59 != (swift::Demangle::__runtime::Node **)v83 && *v59) {
LABEL_105:
  }
  uint64_t v52 = *(unsigned __int8 *)(a1 + 23);
  if ((v52 & 0x80u) != 0) {
    uint64_t v52 = *(void *)(a1 + 8);
  }
  if (v52 == v51)
  {
    uint64_t v34 = v50;
    a5 = v49;
    if (!v11) {
      goto LABEL_114;
    }
  }
  else
  {
    uint64_t v34 = v50;
    a5 = v49;
    if (!v11) {
      goto LABEL_114;
    }
    std::string::push_back((std::string *)a1, 46);
  }
LABEL_112:
  std::string::append((std::string *)a1, v12, v11);
  if ((v31 & 0x80000000) == 0)
  {
    snprintf(__str, 0x20uLL, "%lld", v31);
    std::string::append((std::string *)a1, __str);
  }
LABEL_114:
  if (!a5) {
    goto LABEL_207;
  }
  int v53 = *((unsigned __int8 *)v17 + 18);
  unint64_t v54 = (swift::Demangle::__runtime::Node **)v17;
  if ((v53 - 1) >= 2)
  {
    if (v53 == 5)
    {
      int v55 = (uint64_t *)*v17;
      unint64_t v54 = (swift::Demangle::__runtime::Node **)*v17;
      goto LABEL_130;
    }
    unint64_t v54 = 0;
  }
  switch(v53)
  {
    case 1:
      unint64_t v61 = (swift::Demangle::__runtime::Node **)(v17 + 1);
      if (v54 != (swift::Demangle::__runtime::Node **)(v17 + 1)) {
        goto LABEL_137;
      }
      break;
    case 2:
      unint64_t v61 = (swift::Demangle::__runtime::Node **)(v17 + 2);
      if (v54 != (swift::Demangle::__runtime::Node **)(v17 + 2)) {
        goto LABEL_137;
      }
      break;
    case 5:
      int v55 = (uint64_t *)*v17;
LABEL_130:
      unint64_t v61 = (swift::Demangle::__runtime::Node **)&v55[*((unsigned int *)v17 + 2)];
      if (v54 != v61) {
        goto LABEL_137;
      }
      break;
    default:
      unint64_t v61 = 0;
      if (v54)
      {
LABEL_137:
        while (*((_WORD *)*v54 + 8) != 232)
        {
          if (++v54 == v61)
          {
            unint64_t v54 = v61;
            goto LABEL_140;
          }
        }
      }
      break;
  }
LABEL_140:
  if (v53 == 5)
  {
    if (v54 == (swift::Demangle::__runtime::Node **)(*v17 + 8 * *((unsigned int *)v17 + 2)))
    {
LABEL_156:
      std::string::size_type v17 = 0;
      *(unsigned char *)(a1 + 97) = 0;
      return (swift::Demangle::__runtime::Node *)v17;
    }
  }
  else
  {
    unsigned int v62 = (swift::Demangle::__runtime::Node **)(v17 + 1);
    if (v53 != 1) {
      unsigned int v62 = 0;
    }
    if (v53 == 2) {
      int v63 = (swift::Demangle::__runtime::Node **)(v17 + 2);
    }
    else {
      int v63 = v62;
    }
    if (v54 == v63) {
      goto LABEL_156;
    }
  }
  unint64_t v64 = *v54;
  if (!v64) {
    goto LABEL_156;
  }
  int v65 = *((unsigned __int8 *)v64 + 18);
  if ((v65 - 1) < 2) {
    goto LABEL_154;
  }
  if (v65 == 5 && *((_DWORD *)v64 + 2))
  {
    unint64_t v64 = *(swift::Demangle::__runtime::Node **)v64;
LABEL_154:
    unsigned int v66 = *(swift::Demangle::__runtime::Node **)v64;
    if (a5 != 2) {
      goto LABEL_184;
    }
    goto LABEL_158;
  }
  unsigned int v66 = 0;
  if (a5 != 2) {
    goto LABEL_184;
  }
LABEL_158:
  int v67 = v66;
  while (1)
  {
    int v69 = *((unsigned __int16 *)v67 + 8);
    if (v69 != 44) {
      break;
    }
    int v70 = *((unsigned __int8 *)v67 + 18);
    if (v70 != 2)
    {
      if (v70 != 5 || *((_DWORD *)v67 + 2) < 2u)
      {
        int v68 = 0;
        goto LABEL_169;
      }
      int v67 = *(swift::Demangle::__runtime::Node **)v67;
    }
    int v68 = (swift::Demangle::__runtime::Node *)*((void *)v67 + 1);
LABEL_169:
    int v71 = *((unsigned __int8 *)v68 + 18);
    if ((v71 - 1) < 2)
    {
LABEL_161:
      int v67 = *(swift::Demangle::__runtime::Node **)v68;
    }
    else
    {
      int v67 = 0;
      if (v71 == 5)
      {
        int v67 = 0;
        if (*((_DWORD *)v68 + 2))
        {
          int v68 = *(swift::Demangle::__runtime::Node **)v68;
          goto LABEL_161;
        }
      }
    }
  }
  BOOL v72 = (v69 - 22) > 0x3C || ((1 << (v69 - 22)) & 0x1000080000000001) == 0;
  if (!v72 || v69 == 222 || v69 == 245)
  {
    int v73 = *((unsigned __int16 *)v17 + 8);
    if ((v73 == 117 || v73 == 70) && !*(unsigned char *)(a1 + 45)) {
      goto LABEL_207;
    }
    if (v85) {
      goto LABEL_183;
    }
    int v75 = v66;
    while (1)
    {
LABEL_196:
      uint64_t v76 = v75;
      int v77 = *((unsigned __int16 *)v75 + 8);
      if (v77 != 232)
      {
        BOOL v79 = (v77 - 44) > 0x26 || ((1 << (v77 - 44)) & 0x4000200001) == 0;
        if (!v79 || v77 == 245)
        {
LABEL_206:
          goto LABEL_207;
        }
LABEL_183:
        std::string::push_back((std::string *)a1, 32);
        goto LABEL_206;
      }
      int v78 = *((unsigned __int8 *)v76 + 18);
      if ((v78 - 1) < 2) {
        goto LABEL_195;
      }
      int v75 = 0;
      if (v78 == 5)
      {
        int v75 = 0;
        if (*((_DWORD *)v76 + 2)) {
          break;
        }
      }
    }
    uint64_t v76 = *(swift::Demangle::__runtime::Node **)v76;
LABEL_195:
    int v75 = *(swift::Demangle::__runtime::Node **)v76;
    goto LABEL_196;
  }
LABEL_184:
  if (*(unsigned char *)(a1 + 32))
  {
    std::string::append((std::string *)a1, " : ", 3uLL);
    goto LABEL_206;
  }
LABEL_207:
  if ((v86 & 1) != 0 || !v34 || v84 && !*(unsigned char *)(a1 + 33)) {
    return v34;
  }
  int v80 = *((unsigned __int16 *)v17 + 8);
  unsigned int v81 = " of ";
  if (((v80 - 125) > 0x36 || ((1 << (v80 - 125)) & 0x60000000000001) == 0)
    && v80 != 33)
  {
    unsigned int v81 = " in ";
  }
  std::string::append((std::string *)a1, v81, 4uLL);
  return 0;
}

std::string *anonymous namespace'::NodePrinter::printChildren(std::string *this, swift::Demangle::__runtime::Node *a2, int a3, const char *a4)
{
  if (!a2) {
    return this;
  }
  uint64_t v5 = (_anonymous_namespace_::NodePrinter *)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_10;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      long long v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        return this;
      }
      goto LABEL_17;
    case 2:
      long long v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        return this;
      }
      goto LABEL_17;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_10:
      long long v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        return this;
      }
      goto LABEL_17;
  }
  long long v9 = 0;
  if (!v7) {
    return this;
  }
LABEL_17:
  unsigned int v10 = a3 + 1;
  do
  {
    std::string::size_type v11 = *(swift::Demangle::__runtime::Node **)v7;
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (a4)
    {
      if (v7 != v9)
      {
        std::string::size_type v12 = strlen(a4);
        this = std::string::append((std::string *)v5, a4, v12);
      }
    }
  }
  while (v7 != v9);
  return this;
}

std::string *anonymous namespace'::operator<<(std::string *a1, uint64_t a2)
{
  std::string::push_back(a1, 34);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (std::string::value_type *)a2;
  }
  else {
    uint64_t v5 = *(std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    while (2)
    {
      int v9 = *v5;
      switch(*v5)
      {
        case 0:
          unsigned int v7 = a1;
          uint64_t v8 = "\\0";
          goto LABEL_10;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          goto LABEL_16;
        case 9:
          unsigned int v7 = a1;
          uint64_t v8 = "\\t";
          goto LABEL_10;
        case 10:
          unsigned int v7 = a1;
          uint64_t v8 = "\\n";
          goto LABEL_10;
        case 13:
          unsigned int v7 = a1;
          uint64_t v8 = "\\r";
          goto LABEL_10;
        case 34:
          unsigned int v7 = a1;
          uint64_t v8 = "\\\"";
          goto LABEL_10;
        default:
          if (v9 == 92)
          {
            unsigned int v7 = a1;
            uint64_t v8 = "\\\\"";
LABEL_10:
            std::string::append(v7, v8, 2uLL);
          }
          else
          {
LABEL_16:
            unint64_t v10 = *v5;
            if ((v9 - 127) > 0xA0u)
            {
              std::string::value_type v11 = *v5;
            }
            else
            {
              std::string::append(a1, "\\x", 2uLL);
            }
            std::string::push_back(a1, v11);
          }
          ++v5;
          if (--v6) {
            continue;
          }
          goto LABEL_23;
      }
    }
  }
LABEL_23:
  std::string::push_back(a1, 34);
  return a1;
}

void anonymous namespace'::NodePrinter::printFunctionType(std::string *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, int a4)
{
  uint64_t v5 = a3;
  int v8 = *((unsigned __int8 *)a3 + 18);
  if (v8 != 2 && (v8 != 5 || *((_DWORD *)a3 + 2) <= 1u))
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }
  v56[0] = this;
  v56[1] = a3;
  int v57 = a4;
  unsigned int v9 = *((unsigned __int16 *)a3 + 8);
  if (v9 <= 0xA4)
  {
    if (v9 == 11)
    {
LABEL_9:
      std::string::append(this, "@autoclosure ", 0xDuLL);
      goto LABEL_18;
    }
    if (v9 != 22)
    {
      if (v9 != 64) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
    unint64_t v10 = "c";
    goto LABEL_17;
  }
  switch(v9)
  {
    case 0xA5u:
LABEL_16:
      unint64_t v10 = "block";
LABEL_17:
      break;
    case 0xA6u:
      std::string::append(this, "@escaping ", 0xAuLL);
      goto LABEL_16;
    case 0xDEu:
      std::string::append(this, "@convention(thin) ", 0x12uLL);
      break;
  }
LABEL_18:
  unint64_t v11 = *((unsigned __int8 *)v5 + 18);
  if (v11 == 5)
  {
    int v13 = *((_DWORD *)v5 + 2);
    unsigned int v55 = v13 - 2;
    if (v13)
    {
      uint64_t v15 = **(void **)v5 + 16;
    }
    else
    {
      int v13 = 0;
      uint64_t v15 = 16;
    }
    unsigned int v12 = *(unsigned __int16 *)v15 == 23;
    uint64_t v14 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    unsigned int v12 = *(unsigned __int16 *)(*(void *)v5 + 16) == 23;
    if (v11 == 2)
    {
      unsigned int v55 = 0;
      int v13 = 2;
    }
    else
    {
      unsigned int v55 = -1;
      int v13 = 1;
    }
    uint64_t v14 = v5;
  }
  if (*(_WORD *)(*((void *)v14 + v12) + 16) == 129)
  {
    unsigned int v16 = v11 - 1;
    if (v11 != 1)
    {
      std::string::size_type v17 = v5;
      if (v11 == 2)
      {
LABEL_35:
        int v18 = (swift::Demangle::__runtime::Node *)*((void *)v17 + v12);
LABEL_37:
        if (v12) {
          unsigned int v12 = 2;
        }
        else {
          unsigned int v12 = 1;
        }
        LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
        goto LABEL_41;
      }
      if (v11 != 5)
      {
LABEL_36:
        int v18 = 0;
        goto LABEL_37;
      }
      unint64_t v11 = *((unsigned int *)v5 + 2);
    }
    if (v11 > v12)
    {
      std::string::size_type v17 = v5;
      if (v16 >= 2) {
        std::string::size_type v17 = *(swift::Demangle::__runtime::Node **)v5;
      }
      goto LABEL_35;
    }
    goto LABEL_36;
  }
LABEL_41:
  unint64_t v19 = v12;
  if ((v11 - 1) >= 2)
  {
    char v20 = 0;
    unint64_t v21 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    char v20 = 1;
    unint64_t v21 = v5;
  }
  if (*(_WORD *)(*((void *)v21 + v12) + 16) == 67)
  {
    if (v11 == 1)
    {
      if (!v12) {
        goto LABEL_53;
      }
    }
    else
    {
      if (v11 != 5)
      {
        if (v11 != 2 || v12 >= 2uLL) {
          goto LABEL_51;
        }
LABEL_53:
        unsigned int v23 = v5;
        if ((v20 & 1) == 0) {
          unsigned int v23 = *(swift::Demangle::__runtime::Node **)v5;
        }
        unsigned int v22 = (swift::Demangle::__runtime::Node *)*((void *)v23 + v12);
        goto LABEL_56;
      }
      if (*((unsigned int *)v5 + 2) > (unint64_t)v12) {
        goto LABEL_53;
      }
    }
LABEL_51:
    unsigned int v22 = 0;
LABEL_56:
    unint64_t v19 = v12 + 1;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
    ++v12;
  }
  if ((v11 - 1) >= 2)
  {
    char v24 = 0;
    uint64_t v25 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    char v24 = 1;
    uint64_t v25 = v5;
  }
  if (*(_WORD *)(*((void *)v25 + v19) + 16) != 68)
  {
    unsigned __int8 v28 = -100;
    unint64_t v29 = v5;
    if (v24) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  int v26 = v5;
  if ((v24 & 1) == 0) {
    int v26 = *(swift::Demangle::__runtime::Node **)v5;
  }
  char v27 = **((unsigned char **)v26 + v19);
  unint64_t v19 = v12 + 1;
  unsigned __int8 v28 = v27 - 100;
  ++v12;
  unint64_t v29 = v5;
  if ((v24 & 1) == 0) {
LABEL_66:
  }
    unint64_t v29 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_67:
  if (*(_WORD *)(*((void *)v29 + v19) + 16) == 349)
  {
    if (v11 == 1)
    {
      if (!v19) {
        goto LABEL_76;
      }
    }
    else
    {
      if (v11 != 5)
      {
        if (v11 != 2 || v19 >= 2) {
          goto LABEL_74;
        }
LABEL_76:
        uint64_t v31 = v5;
        if ((v24 & 1) == 0) {
          uint64_t v31 = *(swift::Demangle::__runtime::Node **)v5;
        }
        uint64_t v30 = (swift::Demangle::__runtime::Node *)*((void *)v31 + v19);
        goto LABEL_79;
      }
      if (*((unsigned int *)v5 + 2) > v19) {
        goto LABEL_76;
      }
    }
LABEL_74:
    uint64_t v30 = 0;
LABEL_79:
    unint64_t v19 = v12 + 1;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
    ++v12;
  }
  if ((v11 - 1) >= 2)
  {
    char v32 = 0;
    int v33 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    char v32 = 1;
    int v33 = v5;
  }
  if (*(_WORD *)(*((void *)v33 + v19) + 16) == 272) {
    goto LABEL_87;
  }
  uint64_t v34 = v5;
  if ((v32 & 1) == 0) {
    uint64_t v34 = *(swift::Demangle::__runtime::Node **)v5;
  }
  if (*(_WORD *)(*((void *)v34 + v19) + 16) == 273)
  {
LABEL_87:
    if (v11 == 1)
    {
      if (!v19) {
        goto LABEL_97;
      }
    }
    else
    {
      if (v11 != 5)
      {
        if (v11 != 2 || v19 >= 2) {
          goto LABEL_95;
        }
LABEL_97:
        std::string::size_type v37 = v5;
        if ((v32 & 1) == 0) {
          std::string::size_type v37 = *(swift::Demangle::__runtime::Node **)v5;
        }
        int v35 = (swift::Demangle::__runtime::Node *)*((void *)v37 + v19);
LABEL_100:
        unint64_t v19 = ++v12;
        int v36 = v5;
        if (v32) {
          goto LABEL_102;
        }
        goto LABEL_101;
      }
      if (*((unsigned int *)v5 + 2) > v19) {
        goto LABEL_97;
      }
    }
LABEL_95:
    int v35 = 0;
    goto LABEL_100;
  }
  int v35 = 0;
  int v36 = v5;
  if ((v32 & 1) == 0) {
LABEL_101:
  }
    int v36 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_102:
  int v38 = *(unsigned __int16 *)(*((void *)v36 + v19) + 16);
  if (v38 == 66) {
    uint64_t v39 = v12 + 1;
  }
  else {
    uint64_t v39 = v12;
  }
  unint64_t v40 = v5;
  if ((v32 & 1) == 0) {
    unint64_t v40 = *(swift::Demangle::__runtime::Node **)v5;
  }
  int v41 = *(unsigned __int16 *)(*((void *)v40 + v39) + 16);
  if (v41 == 271) {
    uint64_t v39 = (v39 + 1);
  }
  else {
    uint64_t v39 = v39;
  }
  char v42 = v5;
  if ((v32 & 1) == 0) {
    char v42 = *(swift::Demangle::__runtime::Node **)v5;
  }
  int v43 = *(unsigned __int16 *)(*((void *)v42 + v39) + 16);
  switch((v28 >> 1) | (v28 << 7))
  {
    case 0:
      uint64_t v44 = "@differentiable ";
      uint64_t v45 = this;
      std::string::size_type v46 = 16;
      goto LABEL_118;
    case 1:
      uint64_t v44 = "@differentiable(_forward) ";
      uint64_t v45 = this;
      std::string::size_type v46 = 26;
      goto LABEL_118;
    case 4:
      uint64_t v44 = "@differentiable(_linear) ";
      goto LABEL_117;
    case 7:
      uint64_t v44 = "@differentiable(reverse) ";
LABEL_117:
      uint64_t v45 = this;
      std::string::size_type v46 = 25;
LABEL_118:
      std::string::append(v45, v44, v46);
      break;
    default:
      break;
  }
  if (v38 == 66) {
    std::string::append(this, "@Sendable ", 0xAuLL);
  }
  unint64_t v47 = *((unsigned __int8 *)v5 + 18);
  unsigned int v48 = v47 - 1;
  if (v47 != 1)
  {
    if (v47 == 5)
    {
      unint64_t v47 = *((unsigned int *)v5 + 2);
    }
    else
    {
      if (v47 != 2)
      {
LABEL_130:
        unint64_t v50 = 0;
        goto LABEL_131;
      }
      unint64_t v47 = 2;
    }
  }
  if (v47 <= v55) {
    goto LABEL_130;
  }
  int v49 = v5;
  if (v48 >= 2) {
    int v49 = *(swift::Demangle::__runtime::Node **)v5;
  }
  unint64_t v50 = (swift::Demangle::__runtime::Node *)*((void *)v49 + v55);
LABEL_131:
  if (!this[1].__r_.__value_.__s.__data_[15]) {
    return;
  }
  if (v41 == 271) {
    std::string::append(this, " async", 6uLL);
  }
  if (v35) {
  std::string::append(this, " -> ", 4uLL);
  }
  if (v43 == 130) {
    std::string::append(this, "sending ", 8uLL);
  }
  unint64_t v51 = *((unsigned __int8 *)v5 + 18);
  unsigned int v52 = v51 - 1;
  if (v51 != 1)
  {
    if (v51 == 5)
    {
      unint64_t v51 = *((unsigned int *)v5 + 2);
    }
    else
    {
      if (v51 != 2) {
        goto LABEL_147;
      }
      unint64_t v51 = 2;
    }
  }
  unint64_t v53 = (v13 - 1);
  if (v51 > v53)
  {
    if (v52 >= 2) {
      uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
    }
    unint64_t v54 = (swift::Demangle::__runtime::Node *)*((void *)v5 + v53);
    goto LABEL_148;
  }
LABEL_147:
  unint64_t v54 = 0;
LABEL_148:
}

void anonymous namespace'::NodePrinter::printFunctionParameters(std::string *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, int a4, int a5)
{
  char v27 = a2;
  int v26 = a4;
  unsigned __int8 v25 = a5;
  if (*((_WORD *)a3 + 8) != 3)
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }
  int v7 = *((unsigned __int8 *)a3 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_6;
  }
  if (v7 == 5 && *((_DWORD *)a3 + 2))
  {
    a3 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_6:
    int v8 = *(uint64_t **)a3;
    goto LABEL_9;
  }
  int v8 = 0;
LABEL_9:
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
  {
LABEL_13:
    unint64_t v10 = (uint64_t *)*v8;
    goto LABEL_15;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = (uint64_t *)*v8;
    goto LABEL_13;
  }
  unint64_t v10 = 0;
LABEL_15:
  unint64_t v11 = (swift::Demangle::__runtime::Node **)(v10 + 2);
  if (*((_WORD *)v10 + 8) == 223)
  {
    char v24 = &v27;
    int v23 = 0;
    if (!a2) {
      goto LABEL_28;
    }
    int v12 = *((unsigned __int8 *)a2 + 18);
    if ((v12 - 1) < 2)
    {
      BOOL v13 = 1;
      goto LABEL_29;
    }
    if (v12 == 5) {
      BOOL v13 = *((_DWORD *)a2 + 2) != 0;
    }
    else {
LABEL_28:
    }
      BOOL v13 = 0;
LABEL_29:
    BOOL v22 = v13;
    std::string::push_back(this, 40);
    int v14 = *((unsigned __int8 *)v10 + 18);
    uint64_t v15 = (swift::Demangle::__runtime::Node **)v10;
    if ((v14 - 1) >= 2)
    {
      if (v14 == 5)
      {
        unsigned int v16 = (swift::Demangle::__runtime::Node *)*v10;
        uint64_t v15 = (swift::Demangle::__runtime::Node **)*v10;
LABEL_37:
        unint64_t v11 = (swift::Demangle::__runtime::Node **)((char *)v16 + 8 * *((unsigned int *)v10 + 2));
        goto LABEL_40;
      }
      uint64_t v15 = 0;
    }
    switch(v14)
    {
      case 1:
        unint64_t v11 = (swift::Demangle::__runtime::Node **)(v10 + 1);
        break;
      case 2:
        break;
      case 5:
        unsigned int v16 = (swift::Demangle::__runtime::Node *)*v10;
        goto LABEL_37;
      default:
        unint64_t v11 = 0;
        break;
    }
LABEL_40:
    v21[0] = &v22;
    v21[1] = this;
    v21[2] = &v24;
    void v21[3] = &v23;
    void v21[4] = &v25;
    v21[5] = &v26;
    if (v15 != v11)
    {
      int v18 = *v15;
      std::string::size_type v17 = v15 + 1;
      while (v17 != v11)
      {
        if (v25) {
          unint64_t v19 = ", ";
        }
        else {
          unint64_t v19 = "";
        }
        std::string::append(this, v19, 2 * v25);
        char v20 = *v17++;
      }
    }
    std::string::push_back(this, 41);
    return;
  }
  if (a5)
  {
    std::string::push_back(this, 40);
    std::string::push_back(this, 41);
  }
  else
  {
    std::string::append(this, "(_:)", 4uLL);
  }
}

uint64_t anonymous namespace'::NodePrinter::getChildIf(uint64_t *a1, int a2)
{
  int v2 = *((unsigned __int8 *)a1 + 18);
  uint64_t v3 = a1;
  if ((v2 - 1) >= 2)
  {
    if (v2 == 5)
    {
      uint64_t v4 = *a1;
      uint64_t v3 = (uint64_t *)*a1;
      goto LABEL_9;
    }
    uint64_t v3 = 0;
  }
  switch(v2)
  {
    case 1:
      uint64_t v5 = a1 + 1;
      if (v3 != a1 + 1) {
        goto LABEL_16;
      }
      break;
    case 2:
      uint64_t v5 = a1 + 2;
      if (v3 != a1 + 2) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t v4 = *a1;
LABEL_9:
      uint64_t v5 = (uint64_t *)(v4 + 8 * *((unsigned int *)a1 + 2));
      if (v3 != v5) {
        goto LABEL_16;
      }
      break;
    default:
      uint64_t v5 = 0;
      if (v3)
      {
LABEL_16:
        while (*(unsigned __int16 *)(*v3 + 16) != a2)
        {
          if (++v3 == v5)
          {
            uint64_t v3 = v5;
            goto LABEL_19;
          }
        }
      }
      break;
  }
LABEL_19:
  if (v2 == 5)
  {
    if (v3 != (uint64_t *)(*a1 + 8 * *((unsigned int *)a1 + 2))) {
      return *v3;
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
    if (v2 != 1) {
      uint64_t v6 = 0;
    }
    if (v2 == 2) {
      int v7 = a1 + 2;
    }
    else {
      int v7 = v6;
    }
    if (v3 != v7) {
      return *v3;
    }
  }
  return 0;
}

void printer_unreachable(const char *a1)
{
}

std::string *anonymous namespace'::NodePrinter::printSpecializationPrefix(std::string *result, uint64_t *a2, const std::string::value_type *a3, std::string::size_type a4, int a5, const std::string::value_type *a6, std::string::size_type a7)
{
  int v7 = result;
  if (result[1].__r_.__value_.__s.__data_[5])
  {
    std::string::append(result, a3, a4);
    std::string::append(v7, " <", 2uLL);
    int v11 = *((unsigned __int8 *)a2 + 18);
    int v12 = a2;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        BOOL v13 = (uint64_t *)*a2;
        int v12 = (uint64_t *)*a2;
LABEL_12:
        int v14 = &v13[*((unsigned int *)a2 + 2)];
        if (v12 == v14) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        goto LABEL_19;
      }
      int v12 = 0;
    }
    switch(v11)
    {
      case 1:
        int v14 = a2 + 1;
        if (v12 == a2 + 1) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
      case 2:
        int v14 = a2 + 2;
        if (v12 == a2 + 2) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
      case 5:
        BOOL v13 = (uint64_t *)*a2;
        goto LABEL_12;
      default:
        int v14 = 0;
        if (!v12) {
          return std::string::append(v7, "> of ", 5uLL);
        }
        break;
    }
LABEL_19:
    int v15 = 0;
    unsigned int v16 = a5 + 1;
    std::string::size_type v17 = "";
    while (1)
    {
      uint64_t v20 = *v12;
      int v21 = *(unsigned __int16 *)(*v12 + 16);
      if (v21 == 216 || v21 == 339) {
        goto LABEL_24;
      }
      if (v21 == 217)
      {
        if (v17) {
          std::string::size_type v22 = strlen(v17);
        }
        else {
          std::string::size_type v22 = 0;
        }
        std::string::append(v7, v17, v22);
        std::string::size_type v17 = ", ";
        goto LABEL_24;
      }
      int v23 = *(unsigned __int8 *)(v20 + 18);
      if ((v23 - 1) < 2 || v23 == 5 && *(_DWORD *)(v20 + 8)) {
        break;
      }
LABEL_23:
      ++v15;
LABEL_24:
      if (++v12 == v14) {
        return std::string::append(v7, "> of ", 5uLL);
      }
    }
    if (v17) {
      std::string::size_type v24 = strlen(v17);
    }
    else {
      std::string::size_type v24 = 0;
    }
    std::string::append(v7, v17, v24);
    std::string::append(v7, a6, a7);
    int v25 = *(unsigned __int16 *)(v20 + 16);
    int v26 = v7;
    if (v25 == 79)
    {
      int v18 = "Return = ";
      std::string::size_type v19 = 9;
    }
    else
    {
      if (v25 != 78)
      {
        goto LABEL_22;
      }
      std::string::append(v7, "Arg[", 4uLL);
      snprintf(__str, 0x20uLL, "%lld", v15);
      std::string::append(v7, __str);
      int v26 = v7;
      int v18 = "] = ";
      std::string::size_type v19 = 4;
    }
    std::string::append(v26, v18, v19);
LABEL_22:
    std::string::size_type v17 = ", ";
    goto LABEL_23;
  }
  if (!result[4].__r_.__value_.__s.__data_[0])
  {
    __n128 result = std::string::append(result, "specialized ", 0xCuLL);
    v7[4].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *swift::Demangle::__runtime::DemanglerPrinter::operator<<(std::string *a1, unsigned int a2)
{
  snprintf(__str, 0x20uLL, "%llu", a2);
  std::string::append(a1, __str);
  return a1;
}

std::string *anonymous namespace'::NodePrinter::printBoundGeneric(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 2)
  {
    if (v6 != 5) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)a2 + 2);
    if (v7 < 2) {
      return this;
    }
    if (v7 != 2) {
      goto LABEL_114;
    }
  }
  if (!this[1].__r_.__value_.__s.__data_[0]) {
    goto LABEL_114;
  }
  int v8 = *((unsigned __int16 *)a2 + 8);
  if (v8 == 13) {
    goto LABEL_114;
  }
  if (v8 == 16)
  {
    int v9 = a2;
    if (v6 != 2)
    {
      if (*((_DWORD *)a2 + 2) < 2u) {
        goto LABEL_122;
      }
      int v9 = *(swift::Demangle::__runtime::Node **)a2;
    }
    uint64_t v10 = *((void *)v9 + 1);
    if (!v10)
    {
LABEL_122:
      std::string::append(v5, " as ", 4uLL);
      int v52 = *((unsigned __int8 *)v4 + 18);
      if ((v52 - 1) >= 2)
      {
        if (v52 != 5 || !*((_DWORD *)v4 + 2))
        {
          unint64_t v53 = 0;
          goto LABEL_128;
        }
        uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      unint64_t v53 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_128:
    }
    int v11 = *(unsigned __int8 *)(v10 + 18);
    int v12 = (swift::Demangle::__runtime::Node **)v10;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        BOOL v13 = *(swift::Demangle::__runtime::Node **)v10;
        int v12 = *(swift::Demangle::__runtime::Node ***)v10;
LABEL_63:
        unsigned __int8 v28 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8 * *(unsigned int *)(v10 + 8));
        goto LABEL_120;
      }
      int v12 = 0;
    }
    switch(v11)
    {
      case 1:
        unsigned __int8 v28 = (swift::Demangle::__runtime::Node **)(v10 + 8);
        break;
      case 2:
        unsigned __int8 v28 = (swift::Demangle::__runtime::Node **)(v10 + 16);
        break;
      case 5:
        BOOL v13 = *(swift::Demangle::__runtime::Node **)v10;
        goto LABEL_63;
      default:
        unsigned __int8 v28 = 0;
        break;
    }
LABEL_120:
    while (v12 != v28)
    {
      unint64_t v51 = *v12++;
    }
    goto LABEL_122;
  }
  int v14 = *((unsigned __int8 *)a2 + 18);
  for (i = a2; ; int v14 = *((unsigned __int8 *)i + 18))
  {
    if (v14 != 1)
    {
      if (v14 != 5)
      {
        if (v14 != 2) {
          goto LABEL_114;
        }
        goto LABEL_30;
      }
      int v16 = *((_DWORD *)i + 2);
      if (v16 != 1) {
        break;
      }
    }
    if (*((_WORD *)i + 8) != 232)
    {
      if (v14 != 5) {
        goto LABEL_114;
      }
      int v16 = *((_DWORD *)i + 2);
      break;
    }
    if ((v14 - 1) >= 2) {
      unsigned int i = *(swift::Demangle::__runtime::Node **)i;
    }
    unsigned int i = *(swift::Demangle::__runtime::Node **)i;
  }
  if (v16 != 2) {
    goto LABEL_114;
  }
  int v14 = 5;
LABEL_30:
  int v17 = *((unsigned __int16 *)i + 8);
  if ((v17 & 0xFFFE) != 0xE) {
    goto LABEL_114;
  }
  int v18 = i;
  if (v14 == 2) {
    goto LABEL_34;
  }
  if (*((_DWORD *)i + 2))
  {
    int v18 = *(swift::Demangle::__runtime::Node **)i;
LABEL_34:
    std::string::size_type v19 = *(uint64_t **)v18;
    goto LABEL_36;
  }
  std::string::size_type v19 = 0;
LABEL_36:
  int v20 = *((unsigned __int8 *)v19 + 18);
  if ((v20 - 1) < 2)
  {
LABEL_40:
    int v21 = (uint64_t *)*v19;
    goto LABEL_42;
  }
  if (v20 == 5 && *((_DWORD *)v19 + 2))
  {
    std::string::size_type v19 = (uint64_t *)*v19;
    goto LABEL_40;
  }
  int v21 = 0;
LABEL_42:
  if (v14 == 2)
  {
LABEL_45:
    uint64_t v22 = *((void *)i + 1);
    goto LABEL_47;
  }
  if (*((_DWORD *)i + 2) >= 2u)
  {
    unsigned int i = *(swift::Demangle::__runtime::Node **)i;
    goto LABEL_45;
  }
  uint64_t v22 = 0;
LABEL_47:
  int v23 = *((unsigned __int8 *)v21 + 18);
  if (v17 != 14)
  {
    int v26 = v21;
    if (v23 != 2)
    {
      if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
      {
        char v27 = 0;
LABEL_74:
        if (*((_WORD *)v27 + 8) != 101
          || v27[1] != 5
          || ((uint64_t v31 = (int *)*v27, v32 = *v31, v33 = *((unsigned __int8 *)v31 + 4), v32 == 1634890305)
            ? (BOOL v34 = v33 == 121)
            : (BOOL v34 = 0),
              !v34 || (int v57 = *(unsigned __int8 *)(v22 + 18), v57 != 1) && (v57 != 5 || *(_DWORD *)(v22 + 8) != 1)))
        {
LABEL_80:
          int v35 = v21;
          if (v23 != 2)
          {
            if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
            {
              int v36 = 0;
LABEL_108:
              if (*((_WORD *)v36 + 8) != 101 || v36[1] != (uint64_t *)10) {
                goto LABEL_114;
              }
              unint64_t v47 = *v36;
              uint64_t v48 = *v47;
              int v49 = *((unsigned __int16 *)v47 + 4);
              if (v48 != 0x616E6F6974636944 || v49 != 31090) {
                goto LABEL_114;
              }
              int v60 = *(unsigned __int8 *)(v22 + 18);
              if (v60 != 2 && (v60 != 5 || *(_DWORD *)(v22 + 8) != 2)) {
                goto LABEL_114;
              }
              if ((v23 - 1) >= 2)
              {
                if (v23 != 5 || !*((_DWORD *)v21 + 2))
                {
                  unint64_t v61 = 0;
LABEL_190:
                  if (*((_WORD *)v61 + 8) != 153 || v61[1] != 5) {
                    goto LABEL_114;
                  }
                  int v77 = (int *)*v61;
                  int v78 = *v77;
                  int v79 = *((unsigned __int8 *)v77 + 4);
                  if (v78 != 1718187859 || v79 != 116) {
                    goto LABEL_114;
                  }
                  unsigned int v81 = a2;
                  if (v6 != 2)
                  {
                    if (*((_DWORD *)a2 + 2) < 2u)
                    {
                      std::string::size_type v82 = 0;
LABEL_216:
                      int v89 = *((unsigned __int8 *)v82 + 18);
                      if ((v89 - 1) >= 2)
                      {
                        if (v89 != 5 || !*((_DWORD *)v82 + 2))
                        {
                          unint64_t v90 = 0;
LABEL_224:
                          if (v6 != 2)
                          {
                            if (*((_DWORD *)a2 + 2) < 2u)
                            {
                              int v94 = 0;
LABEL_229:
                              int v95 = *((unsigned __int8 *)v94 + 18);
                              if (v95 != 2)
                              {
                                if (v95 != 5 || *((_DWORD *)v94 + 2) < 2u)
                                {
                                  std::string::size_type v96 = 0;
                                  goto LABEL_235;
                                }
                                int v94 = (uint64_t *)*v94;
                              }
                              std::string::size_type v96 = (swift::Demangle::__runtime::Node *)v94[1];
LABEL_235:
                              std::string::append(this, "[", 1uLL);
                              unsigned int v97 = a3 + 1;
                              std::string::append(v5, " : ", 3uLL);
                              uint64_t v92 = (_anonymous_namespace_::NodePrinter *)v5;
                              uint64_t v93 = v96;
                              unsigned int v91 = v97;
                              goto LABEL_236;
                            }
                            uint64_t v4 = *(swift::Demangle::__runtime::Node **)a2;
                          }
                          int v94 = (uint64_t *)*((void *)v4 + 1);
                          goto LABEL_229;
                        }
                        std::string::size_type v82 = *(swift::Demangle::__runtime::Node **)v82;
                      }
                      unint64_t v90 = *(swift::Demangle::__runtime::Node **)v82;
                      goto LABEL_224;
                    }
                    unsigned int v81 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  std::string::size_type v82 = (swift::Demangle::__runtime::Node *)*((void *)v81 + 1);
                  goto LABEL_216;
                }
                int v21 = (uint64_t *)*v21;
              }
              unint64_t v61 = (uint64_t *)*v21;
              goto LABEL_190;
            }
            int v35 = (uint64_t *)*v21;
          }
          int v36 = (uint64_t **)v35[1];
          goto LABEL_108;
        }
        int v58 = (uint64_t **)v21;
        if ((v23 - 1) >= 2)
        {
          if (v23 != 5 || !*((_DWORD *)v21 + 2))
          {
            unint64_t v59 = 0;
LABEL_165:
            if (*((_WORD *)v59 + 8) != 153 || v59[1] != 5) {
              goto LABEL_80;
            }
            int v67 = (int *)*v59;
            int v68 = *v67;
            int v69 = *((unsigned __int8 *)v67 + 4);
            if (v68 != 1718187859 || v69 != 116) {
              goto LABEL_80;
            }
            if (v6 != 2)
            {
              if (*((_DWORD *)a2 + 2) < 2u)
              {
                int v71 = 0;
LABEL_210:
                int v87 = *((unsigned __int8 *)v71 + 18);
                if ((v87 - 1) >= 2)
                {
                  if (v87 != 5 || !*((_DWORD *)v71 + 2))
                  {
                    int v88 = 0;
                    goto LABEL_222;
                  }
                  int v71 = *(swift::Demangle::__runtime::Node **)v71;
                }
                int v88 = *(swift::Demangle::__runtime::Node **)v71;
LABEL_222:
                std::string::append(this, "[", 1uLL);
                unsigned int v91 = a3 + 1;
                uint64_t v92 = (_anonymous_namespace_::NodePrinter *)v5;
                uint64_t v93 = v88;
LABEL_236:
                char v86 = "]";
                BOOL v85 = v5;
                goto LABEL_237;
              }
              uint64_t v4 = *(swift::Demangle::__runtime::Node **)a2;
            }
            int v71 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
            goto LABEL_210;
          }
          int v58 = (uint64_t **)*v21;
        }
        unint64_t v59 = *v58;
        goto LABEL_165;
      }
      int v26 = (uint64_t *)*v21;
    }
    char v27 = (uint64_t *)v26[1];
    goto LABEL_74;
  }
  std::string::size_type v24 = v21;
  if (v23 != 2)
  {
    if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
    {
      uint64_t v25 = 0;
      goto LABEL_65;
    }
    std::string::size_type v24 = (uint64_t *)*v21;
  }
  uint64_t v25 = v24[1];
LABEL_65:
  if (*(_WORD *)(v25 + 16) != 101) {
    goto LABEL_68;
  }
  if (*(void *)(v25 + 8) != 8) {
    goto LABEL_68;
  }
  if (**(void **)v25 != 0x6C616E6F6974704FLL) {
    goto LABEL_68;
  }
  int v54 = *(unsigned __int8 *)(v22 + 18);
  if (v54 != 1 && (v54 != 5 || *(_DWORD *)(v22 + 8) != 1)) {
    goto LABEL_68;
  }
  unsigned int v55 = (int ***)v21;
  if ((v23 - 1) < 2) {
    goto LABEL_138;
  }
  if (v23 == 5 && *((_DWORD *)v21 + 2))
  {
    unsigned int v55 = (int ***)*v21;
LABEL_138:
    int v56 = *v55;
    goto LABEL_156;
  }
  int v56 = 0;
LABEL_156:
  if (*((_WORD *)v56 + 8) == 153 && v56[1] == (int *)5)
  {
    unsigned int v62 = *v56;
    int v63 = *v62;
    int v64 = *((unsigned __int8 *)v62 + 4);
    if (v63 == 1718187859 && v64 == 116)
    {
      unsigned int v66 = "?";
      goto LABEL_185;
    }
  }
LABEL_68:
  unint64_t v29 = v21;
  if (v23 == 2)
  {
LABEL_72:
    uint64_t v30 = v29[1];
    goto LABEL_86;
  }
  if (v23 == 5 && *((_DWORD *)v21 + 2) >= 2u)
  {
    unint64_t v29 = (uint64_t *)*v21;
    goto LABEL_72;
  }
  uint64_t v30 = 0;
LABEL_86:
  if (*(_WORD *)(v30 + 16) != 101 || *(void *)(v30 + 8) != 27) {
    goto LABEL_114;
  }
  std::string::size_type v37 = *(uint64_t **)v30;
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  uint64_t v40 = v37[2];
  uint64_t v41 = *(uint64_t *)((char *)v37 + 19);
  BOOL v42 = v38 == 0x746963696C706D49 && v39 == 0x706172776E55796CLL;
  BOOL v43 = v42 && v40 == 0x6F6974704F646570;
  if (!v43 || v41 != 0x6C616E6F6974704FLL) {
    goto LABEL_114;
  }
  int v45 = *(unsigned __int8 *)(v22 + 18);
  if (v45 != 1 && (v45 != 5 || *(_DWORD *)(v22 + 8) != 1)) {
    goto LABEL_114;
  }
  if ((v23 - 1) >= 2)
  {
    if (v23 != 5 || !*((_DWORD *)v21 + 2))
    {
      std::string::size_type v46 = 0;
      goto LABEL_177;
    }
    int v21 = (uint64_t *)*v21;
  }
  std::string::size_type v46 = (uint64_t *)*v21;
LABEL_177:
  if (*((_WORD *)v46 + 8) != 153
    || v46[1] != 5
    || ((BOOL v72 = (int *)*v46, v73 = *v72, v74 = *((unsigned __int8 *)v72 + 4), v73 == 1718187859)
      ? (BOOL v75 = v74 == 116)
      : (BOOL v75 = 0),
        !v75))
  {
LABEL_114:
  }
  unsigned int v66 = "!";
LABEL_185:
  if (v6 == 2)
  {
LABEL_188:
    uint64_t v76 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
    goto LABEL_202;
  }
  if (*((_DWORD *)a2 + 2) >= 2u)
  {
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_188;
  }
  uint64_t v76 = 0;
LABEL_202:
  int v83 = *((unsigned __int8 *)v76 + 18);
  if ((v83 - 1) >= 2)
  {
    if (v83 != 5 || !*((_DWORD *)v76 + 2))
    {
      int v84 = 0;
      goto LABEL_208;
    }
    uint64_t v76 = *(swift::Demangle::__runtime::Node **)v76;
  }
  int v84 = *(swift::Demangle::__runtime::Node **)v76;
LABEL_208:
  BOOL v85 = v5;
  char v86 = v66;
LABEL_237:

  return std::string::append(v85, v86, 1uLL);
}

std::string *anonymous namespace'::NodePrinter::printWithParens(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v6 = a2;
  while (2)
  {
    unsigned int v7 = v6;
    switch(*((_WORD *)v6 + 8))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x16:
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3E:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCE:
      case 0xD0:
      case 0xD1:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD7:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDC:
      case 0xDD:
      case 0xDE:
      case 0xE0:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13E:
      case 0x13F:
      case 0x140:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x145:
      case 0x146:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x157:
      case 0x158:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
        goto LABEL_33;
      case 4:
      case 5:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x18:
      case 0x26:
      case 0x2C:
      case 0x2D:
      case 0x39:
      case 0x3D:
      case 0x3F:
      case 0x45:
      case 0x54:
      case 0x55:
      case 0x91:
      case 0x92:
      case 0x99:
      case 0xA7:
      case 0xB4:
      case 0xB5:
      case 0xCF:
      case 0xD2:
      case 0xD3:
      case 0xDB:
      case 0xDF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0x122:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
        goto LABEL_36;
      case 0xBE:
        int v9 = *((unsigned __int8 *)v6 + 18);
        if ((v9 - 1) < 2) {
          goto LABEL_12;
        }
        if (v9 == 5 && *((_DWORD *)v7 + 2))
        {
          unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_12:
          uint64_t v10 = *(swift::Demangle::__runtime::Node **)v7;
        }
        else
        {
          uint64_t v10 = 0;
        }
        int v13 = *((unsigned __int8 *)v10 + 18);
        if (v13 == 2 || v13 == 5 && *((_DWORD *)v10 + 2) >= 2u) {
          goto LABEL_33;
        }
        goto LABEL_36;
      case 0xC0:
        int v11 = *((unsigned __int8 *)v6 + 18);
        if ((v11 - 1) < 2) {
          goto LABEL_17;
        }
        if (v11 == 5 && *((_DWORD *)v7 + 2))
        {
          unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_17:
          int v12 = *(swift::Demangle::__runtime::Node **)v7;
        }
        else
        {
          int v12 = 0;
        }
        int v14 = *((unsigned __int8 *)v12 + 18);
        if ((v14 - 1) < 2) {
          goto LABEL_28;
        }
        if (v14 == 5 && *((_DWORD *)v12 + 2))
        {
          int v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_28:
          int v15 = *(swift::Demangle::__runtime::Node **)v12;
        }
        else
        {
          int v15 = 0;
        }
        int v16 = *((unsigned __int8 *)v15 + 18);
        if ((v16 - 1) < 2 || v16 == 5 && *((_DWORD *)v15 + 2))
        {
LABEL_33:
          std::string::append(this, "(", 1uLL);
          return std::string::append(this, ")", 1uLL);
        }
        else
        {
LABEL_36:
          unsigned int v18 = a3 + 1;
        }
      case 0xE8:
        int v8 = *((unsigned __int8 *)v6 + 18);
        if ((v8 - 1) < 2) {
          goto LABEL_7;
        }
        int v6 = 0;
        if (v8 == 5)
        {
          int v6 = 0;
          if (*((_DWORD *)v7 + 2))
          {
            unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_7:
            int v6 = *(swift::Demangle::__runtime::Node **)v7;
          }
        }
        continue;
      default:
        printer_unreachable("bad node kind");
    }
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::NodePrinter::printAbstractStorage(uint64_t a1, uint64_t a2, int a3, int a4, std::string::value_type *a5, size_t a6)
{
  int v6 = *(unsigned __int16 *)(a2 + 16);
  if (v6 == 220) {
  if (v6 != 254)
  }
    printer_unreachable("Not an abstract storage node");
}

void anonymous namespace'::NodePrinter::printImplFunctionType(_anonymous_namespace_::NodePrinter *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v32 = a3;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v29 = 0;
  v28[0] = &v29;
  v28[1] = (int *)&v31;
  void v28[2] = (int *)this;
  void v28[3] = &v32;
  void v28[4] = (int *)&v30;
  int v4 = *((unsigned __int8 *)a2 + 18);
  uint64_t v5 = a2;
  if ((v4 - 1) >= 2)
  {
    if (v4 == 5)
    {
      uint64_t v6 = *(void *)a2;
      uint64_t v5 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v5 = 0;
  }
  if (v4 == 1)
  {
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v5 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  if (v4 == 2)
  {
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    if (v5 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
  if (v4 != 5)
  {
    unsigned int v7 = 0;
    if (v5) {
      goto LABEL_14;
    }
LABEL_29:
    int v9 = 0;
    goto LABEL_30;
  }
  uint64_t v6 = *(void *)a2;
LABEL_9:
  unsigned int v7 = (swift::Demangle::__runtime::Node *)(v6 + 8 * *((unsigned int *)a2 + 2));
  if (v5 == v7) {
    goto LABEL_29;
  }
LABEL_14:
  int v8 = 0;
  do
  {
    int v9 = *(swift::Demangle::__runtime::Node ***)v5;
    switch(*(_WORD *)(*(void *)v5 + 16))
    {
      case 'm':
        uint64_t v30 = *(swift::Demangle::__runtime::Node ***)v5;
        break;
      case 't':
        goto LABEL_17;
      case 'v':
        if (v29 == 1) {
          std::string::append((std::string *)this, ", ", 2uLL);
        }
        int v10 = 1;
        goto LABEL_26;
      case 'w':
        uint64_t v31 = *(swift::Demangle::__runtime::Node ***)v5;
        break;
      case 'x':
      case 'y':
      case 'z':
        if (v29 == 2) {
          std::string::append((std::string *)this, ", ", 2uLL);
        }
        int v10 = 2;
LABEL_26:
        break;
      default:
        std::string::push_back((std::string *)this, 32);
        break;
    }
    int v9 = v8;
LABEL_17:
    uint64_t v5 = (swift::Demangle::__runtime::Node *)((char *)v5 + 8);
    int v8 = v9;
  }
  while (v5 != v7);
LABEL_30:
  std::string::push_back((std::string *)this, 41);
  if (!v31) {
    goto LABEL_52;
  }
  std::string::append((std::string *)this, " for <", 6uLL);
  int v11 = v31;
  int v12 = *((unsigned __int8 *)v31 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v31 + 2) < 2u) {
      goto LABEL_51;
    }
    int v11 = *v31;
  }
  uint64_t v13 = v11[1];
  if (v13)
  {
    int v14 = *(unsigned __int8 *)(v13 + 18);
    int v15 = (swift::Demangle::__runtime::Node **)v13;
    if ((v14 - 1) >= 2)
    {
      if (v14 == 5)
      {
        int v16 = *(swift::Demangle::__runtime::Node **)v13;
        int v15 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_44:
        int v17 = (swift::Demangle::__runtime::Node **)((char *)v16 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_48;
      }
      int v15 = 0;
    }
    switch(v14)
    {
      case 1:
        int v17 = (swift::Demangle::__runtime::Node **)(v13 + 8);
        break;
      case 2:
        int v17 = (swift::Demangle::__runtime::Node **)(v13 + 16);
        break;
      case 5:
        int v16 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_44;
      default:
        int v17 = 0;
        break;
    }
LABEL_48:
    if (v15 != v17)
    {
      unsigned int v18 = v32 + 1;
      do
      {
        std::string::size_type v19 = *v15++;
      }
      while (v15 != v17);
    }
  }
LABEL_51:
  std::string::push_back((std::string *)this, 62);
LABEL_52:
  if (!v9) {
    return;
  }
  std::string::append((std::string *)this, " for <", 6uLL);
  int v20 = *((unsigned __int8 *)v9 + 18);
  if ((v20 - 1) >= 2)
  {
    if (v20 != 5 || !*((_DWORD *)v9 + 2)) {
      goto LABEL_73;
    }
    int v9 = (swift::Demangle::__runtime::Node **)*v9;
  }
  int v21 = *v9;
  if (*v9)
  {
    int v22 = *((unsigned __int8 *)v21 + 18);
    int v23 = (swift::Demangle::__runtime::Node **)*v9;
    if ((v22 - 1) >= 2)
    {
      if (v22 == 5)
      {
        std::string::size_type v24 = *(swift::Demangle::__runtime::Node ***)v21;
        int v23 = *(swift::Demangle::__runtime::Node ***)v21;
LABEL_66:
        uint64_t v25 = &v24[*((unsigned int *)v21 + 2)];
        goto LABEL_70;
      }
      int v23 = 0;
    }
    switch(v22)
    {
      case 1:
        uint64_t v25 = (swift::Demangle::__runtime::Node **)((char *)v21 + 8);
        break;
      case 2:
        uint64_t v25 = (swift::Demangle::__runtime::Node **)((char *)v21 + 16);
        break;
      case 5:
        std::string::size_type v24 = *(swift::Demangle::__runtime::Node ***)v21;
        goto LABEL_66;
      default:
        uint64_t v25 = 0;
        break;
    }
LABEL_70:
    if (v23 != v25)
    {
      unsigned int v26 = v32 + 1;
      do
      {
        char v27 = *v23++;
      }
      while (v23 != v25);
    }
  }
LABEL_73:
  std::string::push_back((std::string *)this, 62);
}

void anonymous namespace'::NodePrinter::printGenericSignature(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  std::string::push_back(this, 60);
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = v6 - 1;
  int v47 = a3;
  if (v6 == 1)
  {
    unsigned int v8 = 1;
    goto LABEL_7;
  }
  if (v6 != 5)
  {
    if (v6 != 2) {
      goto LABEL_106;
    }
    unsigned int v8 = 2;
LABEL_7:
    uint64_t v9 = 0;
    LODWORD(v10) = v8;
    while (1)
    {
      int v11 = a2;
      if (v7 >= 2) {
        int v11 = *(swift::Demangle::__runtime::Node **)a2;
      }
      if (*(_WORD *)(*((void *)v11 + v9) + 16) != 37) {
        goto LABEL_14;
      }
      if (v8 == ++v9)
      {
        unsigned int v48 = v8;
        LODWORD(v9) = v8;
        goto LABEL_35;
      }
    }
  }
  unsigned int v8 = *((_DWORD *)a2 + 2);
  if (v8) {
    goto LABEL_7;
  }
  LODWORD(v9) = 0;
LABEL_14:
  unsigned int v48 = v8;
  if (v9 >= v8)
  {
    LODWORD(v10) = v9;
    if (!v9) {
      goto LABEL_92;
    }
    goto LABEL_35;
  }
  unint64_t v10 = v9;
  do
  {
    unint64_t v12 = *((unsigned __int8 *)a2 + 18);
    if (v6 == 1) {
      goto LABEL_19;
    }
    if (v6 != 5)
    {
      unint64_t v12 = 2;
LABEL_19:
      if (v12 <= v10) {
        goto LABEL_24;
      }
      goto LABEL_20;
    }
    if (*((unsigned int *)a2 + 2) <= v10)
    {
LABEL_24:
      int v14 = 0;
      goto LABEL_25;
    }
LABEL_20:
    uint64_t v13 = a2;
    if (v7 >= 2) {
      uint64_t v13 = *(swift::Demangle::__runtime::Node **)a2;
    }
    int v14 = (uint64_t *)*((void *)v13 + v10);
LABEL_25:
    int v15 = *((unsigned __int16 *)v14 + 8);
    if (v15 == 232)
    {
      if (*((unsigned __int8 *)v14 + 18) - 1 >= 2) {
        int v14 = (uint64_t *)*v14;
      }
      int v15 = *(unsigned __int16 *)(*v14 + 16);
    }
    if (v15 != 42) {
      goto LABEL_32;
    }
    ++v10;
  }
  while (v8 != v10);
  LODWORD(v10) = v8;
LABEL_32:
  if (!v9)
  {
LABEL_92:
    if (v10 == v48) {
      goto LABEL_106;
    }
    if (!this[1].__r_.__value_.__s.__data_[7]) {
      goto LABEL_106;
    }
    std::string::append(this, " where ", 7uLL);
    if (v10 >= v48) {
      goto LABEL_106;
    }
    unint64_t v37 = *((unsigned __int8 *)a2 + 18);
    unsigned int v38 = v37 - 1;
    switch(v37)
    {
      case 1:
        goto LABEL_99;
      case 2:
        if (v10 < 2uLL) {
          goto LABEL_100;
        }
        break;
      case 5:
        unint64_t v37 = *((unsigned int *)a2 + 2);
LABEL_99:
        if (v37 > v10)
        {
LABEL_100:
          uint64_t v39 = a2;
          if (v38 >= 2) {
            uint64_t v39 = *(swift::Demangle::__runtime::Node **)a2;
          }
          uint64_t v40 = (swift::Demangle::__runtime::Node *)*((void *)v39 + v10);
LABEL_105:
          unint64_t v41 = v10 + 1;
          if (v48 == v10 + 1)
          {
LABEL_106:
            std::string::push_back(this, 62);
            return;
          }
          unsigned int v42 = ~v10 + v48;
          while (2)
          {
            if (v41 > v10) {
              std::string::append(this, ", ", 2uLL);
            }
            unint64_t v44 = *((unsigned __int8 *)a2 + 18);
            if (v44 == 2)
            {
              if (v44 <= v41) {
                goto LABEL_108;
              }
            }
            else if (v44 != 5 || *((unsigned int *)a2 + 2) <= v41)
            {
LABEL_108:
              BOOL v43 = 0;
              goto LABEL_109;
            }
            unsigned int v45 = v44 - 1;
            std::string::size_type v46 = a2;
            if (v45 >= 2) {
              std::string::size_type v46 = *(swift::Demangle::__runtime::Node **)a2;
            }
            BOOL v43 = (swift::Demangle::__runtime::Node *)*((void *)v46 + v41);
LABEL_109:
            ++v41;
            if (!--v42) {
              goto LABEL_106;
            }
            continue;
          }
        }
        break;
    }
    uint64_t v40 = 0;
    goto LABEL_105;
  }
LABEL_35:
  uint64_t v16 = 0;
  while (2)
  {
    if (v16) {
      std::string::append(this, "><", 2uLL);
    }
    int v17 = a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
      int v17 = *(swift::Demangle::__runtime::Node **)a2;
    }
    unsigned int v18 = (_DWORD *)*((void *)v17 + v16);
    uint64_t v19 = *v18;
    if (!*v18)
    {
LABEL_37:
      if (++v16 == v9) {
        goto LABEL_92;
      }
      continue;
    }
    break;
  }
  unint64_t v20 = 0;
  while (2)
  {
    if (v20)
    {
      std::string::append(this, ", ", 2uLL);
      if (v20 >= 0x80)
      {
        std::string::append(this, "...", 3uLL);
        goto LABEL_37;
      }
    }
    if (v10 <= v9) {
      goto LABEL_83;
    }
    int v21 = *((unsigned __int8 *)a2 + 18);
    BOOL v22 = 1;
    int v23 = v10 - v9;
    unint64_t v24 = v9;
    while (2)
    {
      unint64_t v25 = *((unsigned __int8 *)a2 + 18);
      switch(v21)
      {
        case 1:
LABEL_55:
          if (v25 <= v24) {
            break;
          }
LABEL_56:
          unsigned int v26 = a2;
          if ((v21 - 1) >= 2) {
            unsigned int v26 = *(swift::Demangle::__runtime::Node **)a2;
          }
          char v27 = (uint64_t *)*((void *)v26 + v24);
          goto LABEL_61;
        case 5:
          if (*((unsigned int *)a2 + 2) <= v24) {
            break;
          }
          goto LABEL_56;
        case 2:
          unint64_t v25 = 2;
          goto LABEL_55;
      }
      char v27 = 0;
LABEL_61:
      if (*((_WORD *)v27 + 8) != 42) {
        goto LABEL_50;
      }
      int v28 = *((unsigned __int8 *)v27 + 18);
      if ((v28 - 1) < 2) {
        goto LABEL_66;
      }
      if (v28 == 5 && *((_DWORD *)v27 + 2))
      {
        char v27 = (uint64_t *)*v27;
LABEL_66:
        int v29 = (void *)*v27;
      }
      else
      {
        int v29 = 0;
      }
      if (*((_WORD *)v29 + 8) != 232) {
        goto LABEL_50;
      }
      int v30 = *((unsigned __int8 *)v29 + 18);
      if ((v30 - 1) < 2) {
        goto LABEL_73;
      }
      if (v30 == 5 && *((_DWORD *)v29 + 2))
      {
        int v29 = (void *)*v29;
LABEL_73:
        uint64_t v31 = (void *)*v29;
      }
      else
      {
        uint64_t v31 = 0;
      }
      if (*((_WORD *)v31 + 8) != 38) {
        goto LABEL_50;
      }
      int v32 = *((unsigned __int8 *)v31 + 18);
      int v33 = (void **)v31;
      if ((v32 - 1) >= 2) {
        int v33 = (void **)*v31;
      }
      if (**v33 != v20) {
        goto LABEL_50;
      }
      if (v32 == 5) {
        uint64_t v31 = (void *)*v31;
      }
      if (*(void *)v31[1] != v16)
      {
LABEL_50:
        BOOL v22 = ++v24 < v10;
        if (!--v23) {
          break;
        }
        continue;
      }
      break;
    }
    if (v22) {
      std::string::append(this, "each ", 5uLL);
    }
LABEL_83:
    unint64_t v51 = v20;
    uint64_t v52 = v16;
    std::string::size_type v34 = this[3].__r_.__value_.__r.__words[2];
    if (v34)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v34 + 48))(__p);
      if ((v50 & 0x80u) == 0) {
        int v35 = __p;
      }
      else {
        int v35 = (void **)__p[0];
      }
      if ((v50 & 0x80u) == 0) {
        std::string::size_type v36 = v50;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)__p[1];
      }
      std::string::append(this, (const std::string::value_type *)v35, v36);
      if ((char)v50 < 0) {
        operator delete(__p[0]);
      }
      if (++v20 == v19) {
        goto LABEL_37;
      }
      continue;
    }
    break;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  std::function<std::string ()(unsigned long long,unsigned long long)>::operator()();
}

uint64_t std::function<std::string ()(unsigned long long,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a3;
  uint64_t v11 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v11, &v10);
  }
  std::__throw_bad_function_call[abi:nn180100]();
}

std::string *anonymous namespace'::NodePrinter::printChildren(std::string *this, swift::Demangle::__runtime::Node *const *a2, swift::Demangle::__runtime::Node *const *a3, int a4, const char *a5)
{
  if (a2 != a3)
  {
    unsigned int v7 = a2;
    unsigned int v8 = (_anonymous_namespace_::NodePrinter *)this;
    unsigned int v9 = a4 + 1;
    do
    {
      uint64_t v10 = *v7++;
      if (a5)
      {
        if (v7 != a3)
        {
          std::string::size_type v11 = strlen(a5);
          this = std::string::append((std::string *)v8, a5, v11);
        }
      }
    }
    while (v7 != a3);
  }
  return this;
}

void anonymous namespace'::NodePrinter::printEntityType(_anonymous_namespace_::NodePrinter *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, unint64_t a4, int a5)
{
  unsigned int v7 = a3;
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      unint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_16;
      }
      break;
    case 2:
      unint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v10 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      unint64_t v12 = (swift::Demangle::__runtime::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 != v12) {
        goto LABEL_16;
      }
      break;
    default:
      unint64_t v12 = 0;
      if (v10)
      {
LABEL_16:
        while (*(_WORD *)(*(void *)v10 + 16) != 290)
        {
          uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
          if (v10 == v12)
          {
            uint64_t v10 = v12;
            goto LABEL_19;
          }
        }
      }
      break;
  }
LABEL_19:
  if (v9 == 5)
  {
    if (v10 != (swift::Demangle::__runtime::Node *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2))) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v13 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v9 != 1) {
      uint64_t v13 = 0;
    }
    if (v9 == 2) {
      int v14 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    }
    else {
      int v14 = v13;
    }
    if (v10 != v14)
    {
LABEL_26:
      int v15 = *(swift::Demangle::__runtime::Node **)v10;
      if (a4 | *(void *)v10) {
        goto LABEL_27;
      }
LABEL_33:
      return;
    }
  }
  int v15 = 0;
  if (!a4) {
    goto LABEL_33;
  }
LABEL_27:
  if (!a4)
  {
    if (*((_WORD *)a3 + 8) != 44) {
      goto LABEL_87;
    }
    int v19 = *((unsigned __int8 *)a3 + 18);
    unint64_t v20 = (swift::Demangle::__runtime::Node **)a3;
    if ((v19 - 1) >= 2)
    {
      if (v19 != 5 || !*((_DWORD *)a3 + 2))
      {
        int v21 = 0;
        goto LABEL_59;
      }
      unint64_t v20 = *(swift::Demangle::__runtime::Node ***)a3;
    }
    int v21 = *v20;
LABEL_59:
    goto LABEL_60;
  }
  std::string::append((std::string *)this, "<", 1uLL);
  int v16 = *(unsigned __int8 *)(a4 + 18);
  int v17 = (swift::Demangle::__runtime::Node *)a4;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      unsigned int v18 = *(swift::Demangle::__runtime::Node **)a4;
      int v17 = *(swift::Demangle::__runtime::Node **)a4;
      goto LABEL_47;
    }
    int v17 = 0;
  }
  switch(v16)
  {
    case 1:
      BOOL v22 = (char *)(a4 + 8);
      if (v17 == (swift::Demangle::__runtime::Node *)(a4 + 8)) {
        goto LABEL_56;
      }
      goto LABEL_54;
    case 2:
      BOOL v22 = (char *)(a4 + 16);
      if (v17 == (swift::Demangle::__runtime::Node *)(a4 + 16)) {
        goto LABEL_56;
      }
      goto LABEL_54;
    case 5:
      unsigned int v18 = *(swift::Demangle::__runtime::Node **)a4;
LABEL_47:
      BOOL v22 = (char *)v18 + 8 * *(unsigned int *)(a4 + 8);
      if (v17 == (swift::Demangle::__runtime::Node *)v22) {
        goto LABEL_56;
      }
      goto LABEL_54;
  }
  BOOL v22 = 0;
  if (!v17) {
    goto LABEL_56;
  }
LABEL_54:
  unint64_t v24 = *(swift::Demangle::__runtime::Node **)v17;
  int v23 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8);
  while (v23 != (swift::Demangle::__runtime::Node **)v22)
  {
    std::string::append((std::string *)this, ", ", 2uLL);
    unint64_t v25 = *v23++;
  }
LABEL_56:
  std::string::append((std::string *)this, ">", 1uLL);
  if (*((_WORD *)v7 + 8) != 44) {
    goto LABEL_87;
  }
LABEL_60:
  int v26 = *((unsigned __int8 *)v7 + 18);
  if (v26 != 2)
  {
    if (v26 != 5 || *((_DWORD *)v7 + 2) < 2u)
    {
      char v27 = 0;
      goto LABEL_66;
    }
    unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  char v27 = (swift::Demangle::__runtime::Node *)*((void *)v7 + 1);
LABEL_66:
  int v28 = v27;
  while (1)
  {
    int v29 = v28;
    int v30 = *((unsigned __int16 *)v28 + 8);
    if (v30 != 232) {
      break;
    }
    int v31 = *((unsigned __int8 *)v29 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_69:
      int v28 = *(swift::Demangle::__runtime::Node **)v29;
    }
    else
    {
      int v28 = 0;
      if (v31 == 5)
      {
        int v28 = 0;
        if (*((_DWORD *)v29 + 2))
        {
          int v29 = *(swift::Demangle::__runtime::Node **)v29;
          goto LABEL_69;
        }
      }
    }
  }
  BOOL v32 = (v30 - 44) > 0x26 || ((1 << (v30 - 44)) & 0x4000200001) == 0;
  if (v32 && v30 != 245) {
    std::string::push_back((std::string *)this, 32);
  }
  int v33 = *((unsigned __int8 *)v27 + 18);
  if ((v33 - 1) < 2)
  {
LABEL_85:
    unsigned int v7 = *(swift::Demangle::__runtime::Node **)v27;
  }
  else
  {
    if (v33 == 5 && *((_DWORD *)v27 + 2))
    {
      char v27 = *(swift::Demangle::__runtime::Node **)v27;
      goto LABEL_85;
    }
    unsigned int v7 = 0;
  }
LABEL_87:
}

std::string *anonymous namespace'::NodePrinter::printFunctionType(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,unsigned int)::{lambda(char const*)#1}::operator()(uint64_t a1, const char *a2)
{
  int v4 = *(std::string **)a1;
  std::string::append(*(std::string **)a1, "@convention(", 0xCuLL);
  if (a2) {
    std::string::size_type v5 = strlen(a2);
  }
  else {
    std::string::size_type v5 = 0;
  }
  std::string::append(v4, a2, v5);
  int v6 = *(unsigned __int8 **)(a1 + 8);
  if (v6[18] - 1 >= 2) {
    int v6 = *(unsigned __int8 **)v6;
  }
  if (*(_WORD *)(*(void *)v6 + 16) == 23)
  {
    std::string::append(v4, ", mangledCType: \"", 0x11uLL);
    unsigned int v7 = *(swift::Demangle::__runtime::Node **)(a1 + 8);
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        int v9 = 0;
        goto LABEL_13;
      }
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
    }
    int v9 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_13:
    std::string::push_back(v4, 34);
  }

  return std::string::append(v4, ") ", 2uLL);
}

void anonymous namespace'::NodePrinter::printFunctionParameters(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()(uint64_t a1, swift::Demangle::__runtime::Node *a2)
{
  int v4 = *(std::string **)(a1 + 8);
  if (!**(unsigned char **)a1)
  {
    if (**(unsigned char **)(a1 + 32)) {
      goto LABEL_63;
    }
    int v10 = *((unsigned __int8 *)a2 + 18);
    uint64_t v11 = a2;
    if ((v10 - 1) >= 2)
    {
      if (v10 == 5)
      {
        uint64_t v12 = *(void *)a2;
        uint64_t v11 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_42:
        BOOL v22 = (swift::Demangle::__runtime::Node *)(v12 + 8 * *((unsigned int *)a2 + 2));
        goto LABEL_46;
      }
      uint64_t v11 = 0;
    }
    switch(v10)
    {
      case 1:
        BOOL v22 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
        break;
      case 2:
        BOOL v22 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
        break;
      case 5:
        uint64_t v12 = *(void *)a2;
        goto LABEL_42;
      default:
        BOOL v22 = 0;
        break;
    }
LABEL_46:
    if (v11 != v22)
    {
      while (*(_WORD *)(*(void *)v11 + 16) != 225)
      {
        uint64_t v11 = (swift::Demangle::__runtime::Node *)((char *)v11 + 8);
        if (v11 == v22)
        {
          uint64_t v11 = v22;
          break;
        }
      }
    }
    if (v10 == 5)
    {
      if (v11 == (swift::Demangle::__runtime::Node *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2))) {
        goto LABEL_61;
      }
    }
    else
    {
      int v23 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 != 1) {
        int v23 = 0;
      }
      if (v10 == 2) {
        unint64_t v24 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      }
      else {
        unint64_t v24 = v23;
      }
      if (v11 == v24) {
        goto LABEL_61;
      }
    }
    uint64_t v25 = *(void *)v11;
    if (v25)
    {
      std::string::append(*(std::string **)(a1 + 8), *(const std::string::value_type **)v25, *(void *)(v25 + 8));
      int v26 = ":";
      char v27 = v4;
      std::string::size_type v28 = 1;
LABEL_62:
      std::string::append(v27, v26, v28);
      goto LABEL_63;
    }
LABEL_61:
    int v26 = "_:";
    char v27 = *(std::string **)(a1 + 8);
    std::string::size_type v28 = 2;
    goto LABEL_62;
  }
  unint64_t v5 = **(unsigned int **)(a1 + 24);
  int v6 = ***(uint64_t *****)(a1 + 16);
  unint64_t v7 = *((unsigned __int8 *)v6 + 18);
  unsigned int v8 = v7 - 1;
  if (v7 == 1) {
    goto LABEL_6;
  }
  if (v7 == 5)
  {
    if (*((unsigned int *)v6 + 2) > v5) {
      goto LABEL_7;
    }
LABEL_15:
    int v9 = 0;
    goto LABEL_16;
  }
  if (v7 != 2) {
    goto LABEL_15;
  }
  unint64_t v7 = 2;
LABEL_6:
  if (v7 <= v5) {
    goto LABEL_15;
  }
LABEL_7:
  if (v8 >= 2) {
    int v6 = (uint64_t **)*v6;
  }
  int v9 = v6[v5];
LABEL_16:
  if (*((_WORD *)v9 + 8) != 101)
  {
    unsigned int v16 = 1;
    HIBYTE(v31) = 1;
    uint64_t v17 = 95;
    LOWORD(__dst) = 95;
    goto LABEL_29;
  }
  uint64_t v13 = (const void *)*v9;
  if (!*v9)
  {
    uint64_t v17 = 0;
    unsigned int v16 = 0;
    std::string __dst = 0;
    size_t v30 = 0;
    unint64_t v31 = 0;
    goto LABEL_29;
  }
  size_t v14 = v9[1];
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v14 >= 0x17)
  {
    uint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v18 = v14 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_dst = (void **)operator new(v18 + 1);
    size_t v30 = v14;
    unint64_t v31 = v19 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    HIBYTE(v31) = v9[1];
    p_dst = (void **)&__dst;
    if (!v14) {
      goto LABEL_28;
    }
  }
  memmove(p_dst, v13, v14);
LABEL_28:
  *((unsigned char *)p_dst + v14) = 0;
  unsigned int v16 = HIBYTE(v31);
  uint64_t v17 = v30;
LABEL_29:
  if ((v16 & 0x80u) == 0) {
    unint64_t v20 = (const std::string::value_type *)&__dst;
  }
  else {
    unint64_t v20 = (const std::string::value_type *)__dst;
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v21 = v16;
  }
  else {
    std::string::size_type v21 = v17;
  }
  std::string::append(v4, v20, v21);
  std::string::push_back(v4, 58);
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst);
  }
LABEL_63:
  if (**(unsigned char **)a1 && **(unsigned char **)(a1 + 32)) {
    std::string::push_back(v4, 32);
  }
  ++**(_DWORD **)(a1 + 24);
  if (**(unsigned char **)(a1 + 32)) {
}
  }

std::string *anonymous namespace'::NodePrinter::printFunctionSigSpecializationParams(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v4 = this;
  unsigned int v5 = *((unsigned __int8 *)a2 + 18);
  switch(v5)
  {
    case 1u:
      goto LABEL_6;
    case 5u:
      unsigned int v5 = *((_DWORD *)a2 + 2);
      if (!v5) {
        return this;
      }
LABEL_6:
      LODWORD(v6) = 0;
      unsigned int v7 = a3 + 1;
      while (2)
      {
        unint64_t v9 = *((unsigned __int8 *)a2 + 18);
        if ((v9 - 1) >= 2)
        {
          char v10 = 0;
          uint64_t v11 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          char v10 = 1;
          uint64_t v11 = a2;
        }
        switch(**((_DWORD **)v11 + v6))
        {
          case 0:
          case 1:
            std::string::append(v4, "[", 1uLL);
            unint64_t v14 = *((unsigned __int8 *)a2 + 18);
            unsigned int v15 = v14 - 1;
            switch(v14)
            {
              case 1:
                goto LABEL_27;
              case 5:
                if (*((unsigned int *)a2 + 2) > (unint64_t)v6) {
                  goto LABEL_28;
                }
                break;
              case 2:
                unint64_t v14 = 2;
LABEL_27:
                if (v14 > v6)
                {
LABEL_28:
                  unsigned int v16 = a2;
                  if (v15 >= 2) {
                    unsigned int v16 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  uint64_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v16 + v6);
LABEL_70:
                  std::string::append(v4, " : ", 3uLL);
                  int v35 = a2;
                  if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
                    int v35 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  uint64_t v36 = *((void *)v35 + (v6 + 1));
                  unint64_t v37 = *(swift::Demangle::__runtime **)v36;
                  unsigned int v38 = *(const char **)(v36 + 8);
                  char v82 = 0;
                  uint64_t v83 = 0x101010101010101;
                  char v84 = 1;
                  int v85 = 0;
                  int v86 = 16843009;
                  char v87 = 1;
                  __int16 v88 = 256;
                  char v89 = 1;
                  uint64_t v90 = 0;
                  uint64_t v91 = 0;
                  v92[0] = &unk_1ECA041D0;
                  v92[1] = swift::Demangle::__runtime::genericParameterName;
                  v92[3] = v92;
                  swift::Demangle::__runtime::demangleSymbolAsString(v37, v38, (unint64_t)&v82, v34);
                }
                break;
            }
            uint64_t v17 = 0;
            goto LABEL_70;
          case 2:
          case 3:
            std::string::append(v4, "[", 1uLL);
            unint64_t v18 = *((unsigned __int8 *)a2 + 18);
            unsigned int v19 = v18 - 1;
            switch(v18)
            {
              case 1:
                goto LABEL_35;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_74;
                }
                break;
              case 2:
                unint64_t v18 = 2;
LABEL_35:
                if (v18 <= v6)
                {
LABEL_74:
                  std::string::size_type v21 = 0;
                  goto LABEL_75;
                }
                break;
              default:
                goto LABEL_74;
            }
            unint64_t v20 = a2;
            if (v19 >= 2) {
              unint64_t v20 = *(swift::Demangle::__runtime::Node **)a2;
            }
            std::string::size_type v21 = (swift::Demangle::__runtime::Node *)*((void *)v20 + v6);
LABEL_75:
            std::string::append(v4, " : ", 3uLL);
            int v39 = *((unsigned __int8 *)a2 + 18);
            if (v39 == 2)
            {
              unint64_t v40 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v39 != 5) {
                goto LABEL_7;
              }
              unint64_t v40 = *((unsigned int *)a2 + 2);
            }
            unint64_t v41 = (v6 + 1);
            if (v40 > v41)
            {
              unsigned int v42 = v39 - 1;
              BOOL v43 = a2;
              if (v42 >= 2) {
                BOOL v43 = *(swift::Demangle::__runtime::Node **)a2;
              }
              unsigned int v8 = (swift::Demangle::__runtime::Node *)*((void *)v43 + v41);
              goto LABEL_8;
            }
LABEL_7:
            unsigned int v8 = 0;
LABEL_8:
            LODWORD(v6) = v6 + 2;
            goto LABEL_9;
          case 4:
            std::string::append(v4, "[", 1uLL);
            unint64_t v22 = *((unsigned __int8 *)a2 + 18);
            unsigned int v23 = v22 - 1;
            switch(v22)
            {
              case 1:
                goto LABEL_48;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_84;
                }
                break;
              case 2:
                unint64_t v22 = 2;
LABEL_48:
                if (v22 <= v6)
                {
LABEL_84:
                  uint64_t v25 = 0;
                  goto LABEL_85;
                }
                break;
              default:
                goto LABEL_84;
            }
            unint64_t v24 = a2;
            if (v23 >= 2) {
              unint64_t v24 = *(swift::Demangle::__runtime::Node **)a2;
            }
            uint64_t v25 = (swift::Demangle::__runtime::Node *)*((void *)v24 + v6);
LABEL_85:
            std::string::append(v4, " : ", 3uLL);
            int v44 = *((unsigned __int8 *)a2 + 18);
            if (v44 == 2)
            {
              unint64_t v45 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v44 != 5) {
                goto LABEL_93;
              }
              unint64_t v45 = *((unsigned int *)a2 + 2);
            }
            unint64_t v46 = (v6 + 1);
            if (v45 > v46)
            {
              unsigned int v47 = v44 - 1;
              unsigned int v48 = a2;
              if (v47 >= 2) {
                unsigned int v48 = *(swift::Demangle::__runtime::Node **)a2;
              }
              int v49 = (swift::Demangle::__runtime::Node *)*((void *)v48 + v46);
LABEL_94:
              std::string::append(v4, "'", 1uLL);
              unint64_t v50 = *((unsigned __int8 *)a2 + 18);
              unsigned int v51 = v50 - 1;
              if (v50 != 1)
              {
                if (v50 == 5)
                {
                  unint64_t v50 = *((unsigned int *)a2 + 2);
                }
                else
                {
                  if (v50 != 2) {
                    goto LABEL_134;
                  }
                  unint64_t v50 = 2;
                }
              }
              unint64_t v67 = (v6 + 2);
              if (v50 > v67)
              {
                int v68 = a2;
                if (v51 >= 2) {
                  int v68 = *(swift::Demangle::__runtime::Node **)a2;
                }
                int v69 = (swift::Demangle::__runtime::Node *)*((void *)v68 + v67);
                goto LABEL_135;
              }
LABEL_134:
              int v69 = 0;
LABEL_135:
              LODWORD(v6) = v6 + 3;
              std::string::append(v4, "'", 1uLL);
              goto LABEL_9;
            }
LABEL_93:
            int v49 = 0;
            goto LABEL_94;
          case 5:
            std::string::append(v4, "[", 1uLL);
            unint64_t v26 = *((unsigned __int8 *)a2 + 18);
            unsigned int v27 = v26 - 1;
            switch(v26)
            {
              case 1:
                goto LABEL_56;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_99;
                }
                break;
              case 2:
                unint64_t v26 = 2;
LABEL_56:
                if (v26 <= v6)
                {
LABEL_99:
                  int v29 = 0;
                  goto LABEL_100;
                }
                break;
              default:
                goto LABEL_99;
            }
            std::string::size_type v28 = a2;
            if (v27 >= 2) {
              std::string::size_type v28 = *(swift::Demangle::__runtime::Node **)a2;
            }
            int v29 = (swift::Demangle::__runtime::Node *)*((void *)v28 + v6);
LABEL_100:
            std::string::append(v4, " : ", 3uLL);
            int v52 = *((unsigned __int8 *)a2 + 18);
            if (v52 == 2)
            {
              unint64_t v53 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v52 != 5) {
                goto LABEL_108;
              }
              unint64_t v53 = *((unsigned int *)a2 + 2);
            }
            unint64_t v54 = (v6 + 1);
            if (v53 > v54)
            {
              unsigned int v55 = v52 - 1;
              int v56 = a2;
              if (v55 >= 2) {
                int v56 = *(swift::Demangle::__runtime::Node **)a2;
              }
              int v57 = (swift::Demangle::__runtime::Node *)*((void *)v56 + v54);
              goto LABEL_109;
            }
LABEL_108:
            int v57 = 0;
LABEL_109:
            uint64_t v6 = (v6 + 2);
            std::string::append(v4, ", Argument Types : [", 0x14uLL);
            unsigned int v58 = *((unsigned __int8 *)a2 + 18);
            switch(v58)
            {
              case 1u:
                goto LABEL_112;
              case 5u:
                unsigned int v58 = *((_DWORD *)a2 + 2);
                if (v6 < v58)
                {
                  while (1)
                  {
LABEL_139:
                    int v70 = a2;
                    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
                      int v70 = *(swift::Demangle::__runtime::Node **)a2;
                    }
                    int v71 = (swift::Demangle::__runtime::Node *)*((void *)v70 + v6);
                    if (*((_WORD *)v71 + 8) != 232) {
                      break;
                    }
                    uint64_t v72 = (v6 + 1);
                    if (v72 < v58)
                    {
                      int v73 = a2;
                      if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
                        int v73 = *(swift::Demangle::__runtime::Node **)a2;
                      }
                      if (*(unsigned char *)(*((void *)v73 + v72) + 18) == 3) {
                        std::string::append(v4, ", ", 2uLL);
                      }
                    }
                    if (v58 == ++v6)
                    {
                      LODWORD(v6) = v58;
                      goto LABEL_9;
                    }
                  }
                }
                break;
              case 2u:
LABEL_112:
                if (v6 < v58) {
                  goto LABEL_139;
                }
                break;
            }
LABEL_9:
            this = std::string::append(v4, "]", 1uLL);
LABEL_10:
            if (v6 >= v5) {
              return this;
            }
            continue;
          case 6:
          case 7:
          case 8:
            if (v9 == 1) {
              goto LABEL_19;
            }
            if (v9 != 5) {
              goto LABEL_17;
            }
            goto LABEL_41;
          case 9:
            std::string::append(v4, "[", 1uLL);
            unint64_t v30 = *((unsigned __int8 *)a2 + 18);
            unsigned int v31 = v30 - 1;
            switch(v30)
            {
              case 1:
                goto LABEL_64;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                  goto LABEL_115;
                }
                break;
              case 2:
                unint64_t v30 = 2;
LABEL_64:
                if (v30 <= v6)
                {
LABEL_115:
                  int v33 = 0;
                  goto LABEL_116;
                }
                break;
              default:
                goto LABEL_115;
            }
            BOOL v32 = a2;
            if (v31 >= 2) {
              BOOL v32 = *(swift::Demangle::__runtime::Node **)a2;
            }
            int v33 = (swift::Demangle::__runtime::Node *)*((void *)v32 + v6);
LABEL_116:
            std::string::append(v4, " : ", 3uLL);
            int v59 = *((unsigned __int8 *)a2 + 18);
            if (v59 == 2)
            {
              unint64_t v60 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v59 != 5) {
                goto LABEL_124;
              }
              unint64_t v60 = *((unsigned int *)a2 + 2);
            }
            unint64_t v61 = (v6 + 1);
            if (v60 > v61)
            {
              unsigned int v62 = v59 - 1;
              int v63 = a2;
              if (v62 >= 2) {
                int v63 = *(swift::Demangle::__runtime::Node **)a2;
              }
              int v64 = (swift::Demangle::__runtime::Node *)*((void *)v63 + v61);
LABEL_125:
              std::string::append(v4, "<", 1uLL);
              unint64_t v65 = *((unsigned __int8 *)a2 + 18);
              unsigned int v66 = v65 - 1;
              if (v65 != 1)
              {
                if (v65 == 5)
                {
                  unint64_t v65 = *((unsigned int *)a2 + 2);
                }
                else
                {
                  if (v65 != 2) {
                    goto LABEL_152;
                  }
                  unint64_t v65 = 2;
                }
              }
              unint64_t v74 = (v6 + 2);
              if (v65 > v74)
              {
                BOOL v75 = a2;
                if (v66 >= 2) {
                  BOOL v75 = *(swift::Demangle::__runtime::Node **)a2;
                }
                uint64_t v76 = (swift::Demangle::__runtime::Node *)*((void *)v75 + v74);
LABEL_153:
                std::string::append(v4, ",", 1uLL);
                unint64_t v77 = *((unsigned __int8 *)a2 + 18);
                unsigned int v78 = v77 - 1;
                if (v77 != 1)
                {
                  if (v77 == 5)
                  {
                    unint64_t v77 = *((unsigned int *)a2 + 2);
                  }
                  else
                  {
                    if (v77 != 2) {
                      goto LABEL_162;
                    }
                    unint64_t v77 = 2;
                  }
                }
                unint64_t v79 = (v6 + 3);
                if (v77 > v79)
                {
                  int v80 = a2;
                  if (v78 >= 2) {
                    int v80 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  unsigned int v81 = (swift::Demangle::__runtime::Node *)*((void *)v80 + v79);
                  goto LABEL_163;
                }
LABEL_162:
                unsigned int v81 = 0;
LABEL_163:
                LODWORD(v6) = v6 + 4;
                this = std::string::append(v4, ">]", 2uLL);
                goto LABEL_10;
              }
LABEL_152:
              uint64_t v76 = 0;
              goto LABEL_153;
            }
LABEL_124:
            int v64 = 0;
            goto LABEL_125;
          default:
            if (v9 == 1) {
              goto LABEL_19;
            }
            if (v9 == 5)
            {
LABEL_41:
              if (*((unsigned int *)a2 + 2) <= (unint64_t)v6) {
                goto LABEL_42;
              }
            }
            else
            {
LABEL_17:
              if (v9 != 2) {
                goto LABEL_42;
              }
              unint64_t v9 = 2;
LABEL_19:
              if (v9 <= v6)
              {
LABEL_42:
                uint64_t v13 = 0;
                goto LABEL_43;
              }
            }
            uint64_t v12 = a2;
            if ((v10 & 1) == 0) {
              uint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
            }
            uint64_t v13 = (swift::Demangle::__runtime::Node *)*((void *)v12 + v6);
LABEL_43:
            LODWORD(v6) = v6 + 1;
            goto LABEL_10;
        }
      }
    case 2u:
      goto LABEL_6;
  }
  return this;
}

std::string *anonymous namespace'::NodePrinter::printBoundGenericNoSugar(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v3 = this;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 != 2)
  {
    if (v4 != 5 || *((_DWORD *)a2 + 2) < 2u) {
      return this;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *((void *)a2 + 1);
  unsigned int v6 = a3 + 1;
  std::string::append(v3, "<", 1uLL);
  if (v5)
  {
    int v7 = *(unsigned __int8 *)(v5 + 18);
    unsigned int v8 = (swift::Demangle::__runtime::Node **)v5;
    if ((v7 - 1) >= 2)
    {
      if (v7 == 5)
      {
        unint64_t v9 = *(swift::Demangle::__runtime::Node **)v5;
        unsigned int v8 = *(swift::Demangle::__runtime::Node ***)v5;
        goto LABEL_15;
      }
      unsigned int v8 = 0;
    }
    switch(v7)
    {
      case 1:
        char v10 = (swift::Demangle::__runtime::Node **)(v5 + 8);
        if (v8 == (swift::Demangle::__runtime::Node **)(v5 + 8)) {
          goto LABEL_24;
        }
        goto LABEL_22;
      case 2:
        char v10 = (swift::Demangle::__runtime::Node **)(v5 + 16);
        if (v8 == (swift::Demangle::__runtime::Node **)(v5 + 16)) {
          goto LABEL_24;
        }
        goto LABEL_22;
      case 5:
        unint64_t v9 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_15:
        char v10 = (swift::Demangle::__runtime::Node **)((char *)v9 + 8 * *(unsigned int *)(v5 + 8));
        if (v8 == v10) {
          goto LABEL_24;
        }
LABEL_22:
        uint64_t v12 = *v8;
        uint64_t v11 = v8 + 1;
        while (v11 != v10)
        {
          std::string::append(v3, ", ", 2uLL);
          uint64_t v13 = *v11++;
        }
        goto LABEL_24;
    }
    char v10 = 0;
    if (v8) {
      goto LABEL_22;
    }
  }
LABEL_24:

  return std::string::append(v3, ">", 1uLL);
}

void anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::__runtime::Node *,unsigned int)::{lambda(anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::__runtime::Node *,unsigned int)::State)#1}::operator()(int **a1, int a2)
{
  int v2 = **a1;
  if (v2 != a2)
  {
    uint64_t v5 = (std::string *)a1[2];
    while (1)
    {
      if (v2)
      {
        if (v2 != 1)
        {
          if (v2 == 2) {
            printer_unreachable("no state after Results");
          }
          printer_unreachable("bad state");
        }
        std::string::append(v5, ") -> ", 5uLL);
        unsigned int v6 = *(swift::Demangle::__runtime::Node **)a1[4];
        if (v6)
        {
          std::string::append(v5, " ", 1uLL);
        }
        std::string::append(v5, "(", 1uLL);
        goto LABEL_5;
      }
      if (*(void *)a1[1]) {
        break;
      }
LABEL_18:
      std::string::push_back(v5, 40);
LABEL_5:
      int v2 = ++**a1;
      if (v2 == a2) {
        return;
      }
    }
    std::string::append(v5, "@substituted ", 0xDuLL);
    int v7 = *(swift::Demangle::__runtime::Node **)a1[1];
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        unint64_t v9 = 0;
        goto LABEL_17;
      }
      int v7 = *(swift::Demangle::__runtime::Node **)v7;
    }
    unint64_t v9 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_17:
    std::string::push_back(v5, 32);
    goto LABEL_18;
  }
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v7 = (char *)operator new(24 * v6);
  }
  else
  {
    int v7 = 0;
  }
  int v8 = &v7[24 * v2];
  unint64_t v9 = &v7[24 * v6];
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  char v10 = v8 + 24;
  uint64_t v11 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    uint64_t v12 = (void **)*a1;
    unint64_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

uint64_t swift::Punycode::__runtime::decodePunycode(unsigned __int8 *a1, unint64_t a2, std::vector<unsigned int> *this)
{
  unint64_t v3 = this;
  unint64_t v4 = a2;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  this->__end_ = this->__begin_;
  if (a2 > this->__end_cap_.__value_ - begin)
  {
    if (a2 >> 62) {
LABEL_71:
    }
      abort();
    uint64_t v7 = a2;
    int v8 = (unsigned int *)operator new(4 * a2);
    v3->__begin_ = v8;
    v3->__end_ = v8;
    v3->__end_cap_.__value_ = &v8[v7];
    if (begin) {
      operator delete(begin);
    }
  }
  std::vector<unsigned int>::value_type __x = 128;
  unint64_t v9 = v4;
  do
  {
    if (!v9) {
      goto LABEL_41;
    }
    unint64_t v10 = v9 - 1;
    int v11 = a1[--v9];
  }
  while (v11 != 95);
  if (v4 >= v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = v4;
  }
  if (v12)
  {
    long long v13 = (char *)&a1[v12];
    unint64_t v14 = a1;
    int v64 = v3;
    unint64_t v65 = (char *)&a1[v12];
    while (1)
    {
      if ((char)*v14 < 0) {
        return 0;
      }
      unsigned int v16 = *v14;
      end = (char *)v3->__end_;
      value = v3->__end_cap_.__value_;
      if (end >= (char *)value) {
        break;
      }
      *(_DWORD *)end = v16;
      unsigned int v15 = (unsigned int *)(end + 4);
LABEL_14:
      v3->__end_ = v15;
      if (++v14 == (unsigned __int8 *)v13) {
        goto LABEL_38;
      }
    }
    unsigned int v19 = a1;
    unint64_t v20 = v4;
    std::vector<unsigned int>::pointer v21 = v3->__begin_;
    uint64_t v22 = end - (char *)v3->__begin_;
    uint64_t v23 = v22 >> 2;
    unint64_t v24 = (v22 >> 2) + 1;
    if (v24 >> 62) {
      goto LABEL_71;
    }
    uint64_t v25 = (char *)value - (char *)v21;
    if (v25 >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v66 = v24;
    if (v24)
    {
      if (v24 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v26 = operator new(4 * v24);
    }
    else
    {
      unint64_t v26 = 0;
    }
    unsigned int v27 = (unsigned int *)&v26[4 * v23];
    *unsigned int v27 = v16;
    unsigned int v15 = v27 + 1;
    if (end == (char *)v21)
    {
      unint64_t v4 = v20;
      a1 = v19;
    }
    else
    {
      unint64_t v28 = end - (char *)v21 - 4;
      if (v28 >= 0x2C)
      {
        unint64_t v29 = end - &v26[v22];
        unint64_t v4 = v20;
        a1 = v19;
        if (v29 >= 0x20)
        {
          uint64_t v30 = (v28 >> 2) + 1;
          uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
          BOOL v32 = &end[-v31];
          unsigned int v27 = (unsigned int *)((char *)v27 - v31);
          int v33 = &v26[4 * v23 - 16];
          std::string::size_type v34 = end - 16;
          uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *int v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 8;
          }
          while (v35);
          end = v32;
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_35;
          }
        }
      }
      else
      {
        unint64_t v4 = v20;
        a1 = v19;
      }
      do
      {
        unsigned int v37 = *((_DWORD *)end - 1);
        end -= 4;
        *--unsigned int v27 = v37;
      }
      while (end != (char *)v21);
    }
LABEL_35:
    unint64_t v3 = v64;
    v64->__begin_ = v27;
    v64->__end_ = v15;
    v64->__end_cap_.__value_ = (unsigned int *)&v26[4 * v66];
    if (v21) {
      operator delete(v21);
    }
    long long v13 = v65;
    goto LABEL_14;
  }
LABEL_38:
  unint64_t v38 = v10 + 1;
  if (v4 < v10 + 1) {
    unint64_t v38 = v4;
  }
  a1 += v38;
  v4 -= v38;
LABEL_41:
  if (!v4) {
    return 1;
  }
  int v39 = 0;
  int v40 = 72;
LABEL_43:
  uint64_t v41 = 0;
  int v42 = 1;
  int v43 = 36;
  int v44 = v39;
  while (1)
  {
    int v45 = (char)a1[v41];
    int v46 = v45 - 97;
    if ((v45 - 97) > 0x19)
    {
      if ((v45 - 65) > 9) {
        return 0;
      }
      int v46 = v45 - 39;
    }
    if (v46 < 0 || v46 > (v44 ^ 0x7FFFFFFF) / v42) {
      return 0;
    }
    v44 += v46 * v42;
    int v47 = v43 - v40;
    if (v43 >= v40 + 26) {
      int v47 = 26;
    }
    if (v43 <= v40) {
      int v47 = 1;
    }
    if (v46 < v47)
    {
      int v48 = v44 - v39;
      std::vector<unsigned int>::pointer v49 = v3->__begin_;
      uint64_t v50 = v3->__end_ - v3->__begin_;
      if (v39) {
        int v51 = 2;
      }
      else {
        int v51 = 700;
      }
      signed int v52 = v48 / v51 / ((int)v50 + 1) + v48 / v51;
      if (v52 < 456)
      {
        int v53 = 0;
      }
      else
      {
        int v53 = 0;
        unsigned int v54 = v52;
        do
        {
          signed int v52 = v54 / 0x23;
          v53 += 36;
          unsigned int v55 = v54 >> 3;
          v54 /= 0x23u;
        }
        while (v55 > 0x7CA);
      }
      unint64_t v56 = v50 + 1;
      unint64_t v57 = v44 / v56;
      std::vector<unsigned int>::value_type v58 = __x;
      if (v57 > (__x ^ 0x7FFFFFFF)) {
        return 0;
      }
      __x += v57;
      if (v58 + v57 < 0x80) {
        return 0;
      }
      unint64_t v67 = v4 - 1;
      uint64_t v59 = (uint64_t)&a1[v41 + 1];
      int v40 = 36 * v52 / (v52 + 38) + v53;
      unint64_t v60 = ~v41 + v4;
      unint64_t v61 = v44 % v56;
      v62.__i_ = &v49[(int)v61];
      std::vector<unsigned int>::insert(v3, v62, &__x);
      int v39 = v61 + 1;
      unint64_t v4 = v60;
      a1 = (unsigned __int8 *)v59;
      uint64_t result = 1;
      if (v67 != v41) {
        goto LABEL_43;
      }
      return result;
    }
    if (v42 <= 0x7FFFFFFF / (36 - v47))
    {
      v42 *= 36 - v47;
      v43 += 36;
      if (v4 != ++v41) {
        continue;
      }
    }
    return 0;
  }
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  unint64_t v3 = (unsigned int *)__x;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  int64_t v7 = (char *)__position.__i_ - (char *)this->__begin_;
  uint64_t v8 = v7 >> 2;
  std::vector<unsigned int>::pointer v9 = (std::vector<unsigned int>::pointer)((char *)this->__begin_ + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  value = this->__end_cap_.__value_;
  if (end < value)
  {
    if (v9 == end)
    {
      *std::vector<unsigned int>::pointer v9 = *__x;
      this->__end_ = v9 + 1;
      return (std::vector<unsigned int>::iterator)v9;
    }
    int64_t v11 = (char *)end - (char *)(v9 + 1);
    uint64_t v12 = v11 >> 2;
    std::vector<unsigned int>::pointer v13 = end - 1;
    if ((unint64_t)end < 4)
    {
      std::vector<unsigned int>::pointer v17 = this->__end_;
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      std::vector<unsigned int>::pointer v15 = (unsigned int *)((char *)begin + v14 + 4);
      if (end > v15) {
        std::vector<unsigned int>::pointer v15 = this->__end_;
      }
      unint64_t v16 = (unint64_t)v15 + ~(unint64_t)begin - v14;
      if (v16 >= 0x2C)
      {
        std::vector<unsigned int>::pointer v17 = this->__end_;
        if ((unint64_t)((char *)(v9 + 1) - ((char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL))) >= 0x20)
        {
          uint64_t v47 = (v16 >> 2) + 1;
          uint64_t v48 = v47 & 0x7FFFFFFFFFFFFFF8;
          std::vector<unsigned int>::pointer v13 = (std::vector<unsigned int>::pointer)((char *)v13 + v48 * 4);
          std::vector<unsigned int>::pointer v17 = &end[v48];
          std::vector<unsigned int>::pointer v49 = end + 4;
          uint64_t v50 = &begin[v12 + 4 + v8];
          uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            _OWORD *v49 = v52;
            v49 += 2;
            v50 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        std::vector<unsigned int>::pointer v17 = this->__end_;
      }
      do
      {
        unsigned int v53 = *v13++;
        *v17++ = v53;
      }
      while (v13 < end);
    }
LABEL_49:
    this->__end_ = v17;
    if (end != v9 + 1) {
      memmove(&end[-v12], v9, v11);
    }
    if (v9 <= v3) {
      v3 += this->__end_ > v3;
    }
    *std::vector<unsigned int>::pointer v9 = *v3;
    return (std::vector<unsigned int>::iterator)v9;
  }
  unint64_t v18 = end - begin + 1;
  if (v18 >> 62) {
    abort();
  }
  uint64_t v20 = (char *)value - (char *)begin;
  if (v20 >> 1 > v18) {
    unint64_t v18 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v18;
  }
  if (v21)
  {
    if (v21 >> 62) {
      goto LABEL_56;
    }
    uint64_t v22 = (char *)operator new(4 * v21);
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v23 = (unsigned int *)&v22[4 * v8];
  unint64_t v24 = (unsigned int *)&v22[4 * v21];
  if (v8 != v21)
  {
LABEL_24:
    std::vector<unsigned int>::pointer v26 = begin;
    goto LABEL_25;
  }
  if (v7 >= 1)
  {
    unint64_t v25 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v25 = v8 + 1;
    }
    v23 -= v25 >> 1;
    goto LABEL_24;
  }
  if (begin == __position.__i_) {
    unint64_t v43 = 1;
  }
  else {
    unint64_t v43 = v7 >> 1;
  }
  if (v43 >> 62) {
LABEL_56:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v44 = 4 * v43;
  int v45 = (char *)operator new(4 * v43);
  uint64_t v23 = (unsigned int *)&v45[v43 & 0xFFFFFFFFFFFFFFFCLL];
  unint64_t v24 = (unsigned int *)&v45[v44];
  if (!v22) {
    goto LABEL_24;
  }
  int v46 = (unsigned int *)&v45[v44];
  operator delete(v22);
  unint64_t v24 = v46;
  std::vector<unsigned int>::pointer v26 = this->__begin_;
LABEL_25:
  *uint64_t v23 = *v3;
  unsigned int v27 = v23;
  if (v26 != v9)
  {
    unint64_t v28 = (char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v29 = v28 - (char *)v26 - 4;
    uint64_t v30 = v9;
    unsigned int v27 = v23;
    if (v29 < 0x2C) {
      goto LABEL_60;
    }
    uint64_t v30 = v9;
    unsigned int v27 = v23;
    if ((unint64_t)(v28 - (char *)v23) < 0x20) {
      goto LABEL_60;
    }
    uint64_t v31 = (v29 >> 2) + 1;
    uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v30 = &v9[v32 / 0xFFFFFFFFFFFFFFFCLL];
    unsigned int v27 = &v23[v32 / 0xFFFFFFFFFFFFFFFCLL];
    int v33 = v23 - 4;
    std::string::size_type v34 = &begin[v8 - 4];
    uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)int v33 = v36;
      v33 -= 8;
      v34 -= 8;
      v35 -= 8;
    }
    while (v35);
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_60:
      do
      {
        unsigned int v37 = *--v30;
        *--unsigned int v27 = v37;
      }
      while (v30 != v26);
    }
  }
  std::vector<unsigned int>::pointer v38 = this->__end_;
  int64_t v39 = (char *)v38 - (char *)v9;
  if (v38 != v9)
  {
    std::vector<unsigned int>::pointer v40 = v9;
    size_t v41 = (char *)v38 - (char *)v9;
    int v42 = v24;
    memmove(v23 + 1, v40, v41);
    unint64_t v24 = v42;
    std::vector<unsigned int>::pointer v26 = this->__begin_;
  }
  this->__begin_ = v27;
  this->__end_ = (unsigned int *)((char *)v23 + v39 + 4);
  this->__end_cap_.__value_ = v24;
  if (v26) {
    operator delete(v26);
  }
  return (std::vector<unsigned int>::iterator)v23;
}

BOOL swift::Punycode::__runtime::encodePunycode(unsigned int **a1, std::string *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      unsigned int v7 = *v4;
      if (*v4 <= 0x7F)
      {
        ++v6;
        std::string::push_back(this, v7);
      }
      else if (v7 >> 7 >= 0x1B1 && v7 - 57344 >= 0x102000)
      {
        BOOL result = 0;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          *this->__r_.__value_.__l.__data_ = 0;
          this->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          this->__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
        }
        return result;
      }
      ++v4;
    }
    while (v4 != v5);
    if (v6) {
      std::string::push_back(this, 95);
    }
  }
  unint64_t v10 = *a1;
  std::vector<unsigned int>::pointer v9 = a1[1];
  if (v6 >= v9 - *a1) {
    return 1;
  }
  uint64_t v35 = a1;
  int v11 = 0;
  int v12 = 72;
  unsigned int v13 = 128;
  unint64_t v14 = v6;
  unint64_t v36 = v6;
  do
  {
    unsigned int v15 = 1114111;
    for (unsigned int i = v10; i != v9; ++i)
    {
      unsigned int v18 = *i;
      unsigned int v17 = v18;
      if (v18 < v15 && v17 >= v13) {
        unsigned int v15 = v17;
      }
    }
    unint64_t v20 = v15 - v13;
    unint64_t v21 = (v11 ^ 0x7FFFFFFFu) / (v14 + 1);
    BOOL result = v21 >= v20;
    if (v21 < v20) {
      break;
    }
    int v22 = v11 + v20 * (v14 + 1);
    if (v10 != v9)
    {
      unsigned int v37 = v9;
      while (1)
      {
        if (*v10 < v15)
        {
          if (v22 == 0x7FFFFFFF) {
            return 0;
          }
          ++v22;
        }
        if (*v10 == v15)
        {
          unint64_t v38 = v14;
          int v24 = 36 - v12;
          if (v12 <= 10) {
            int v24 = 26;
          }
          if (v12 >= 36) {
            int v24 = 1;
          }
          int v25 = v22;
          if (v22 >= v24)
          {
            int v26 = 72;
            int v25 = v22;
            do
            {
              int v27 = v25 - v24;
              int v25 = (v25 - v24) / (36 - v24);
              int v28 = v27 - v25 * (36 - v24) + v24;
              if (v28 >= 26) {
                char v29 = 39;
              }
              else {
                char v29 = 97;
              }
              std::string::push_back(this, v29 + v28);
              if (v26 - 26 >= v12) {
                int v24 = 26;
              }
              else {
                int v24 = v26 - v12;
              }
              if (v26 <= v12) {
                int v24 = 1;
              }
              v26 += 36;
            }
            while (v25 >= v24);
          }
          if (v25 >= 26) {
            char v30 = 39;
          }
          else {
            char v30 = 97;
          }
          std::string::push_back(this, v30 + v25);
          if (v38 == v36) {
            int v31 = 700;
          }
          else {
            int v31 = 2;
          }
          signed int v32 = v22 / v31 / ((int)v38 + 1) + v22 / v31;
          if (v32 < 456)
          {
            int v23 = 0;
          }
          else
          {
            int v23 = 0;
            unsigned int v33 = v32;
            do
            {
              signed int v32 = v33 / 0x23;
              v23 += 36;
              unsigned int v34 = v33 >> 3;
              v33 /= 0x23u;
            }
            while (v34 > 0x7CA);
          }
          int v22 = 0;
          int v12 = 36 * v32 / (v32 + 38) + v23;
          unint64_t v14 = v38 + 1;
          std::vector<unsigned int>::pointer v9 = v37;
        }
        if (++v10 == v9)
        {
          unint64_t v10 = *v35;
          std::vector<unsigned int>::pointer v9 = v35[1];
          goto LABEL_19;
        }
      }
    }
    std::vector<unsigned int>::pointer v9 = v10;
LABEL_19:
    int v11 = v22 + 1;
    unsigned int v13 = v15 + 1;
    BOOL result = 1;
  }
  while (v14 < v9 - v10);
  return result;
}

uint64_t swift::Punycode::__runtime::decodePunycodeUTF8(unsigned __int8 *a1, unint64_t a2, uint64_t a3)
{
  memset(&v17, 0, sizeof(v17));
  if (swift::Punycode::__runtime::decodePunycode(a1, a2, &v17))
  {
    std::vector<unsigned int>::pointer begin = v17.__begin_;
    std::vector<unsigned int>::pointer end = v17.__end_;
    if (v17.__begin_ == v17.__end_)
    {
      uint64_t v15 = 1;
      if (!v17.__begin_) {
        return v15;
      }
      goto LABEL_26;
    }
    while (1)
    {
      unsigned int v7 = *begin;
      unsigned int v8 = *begin >> 7;
      if (v8 >= 0x1B1 && v7 - 57344 >= 0x102000) {
        break;
      }
      if (v8 == 432) {
        v7 -= 55296;
      }
      if (v7 < 0x80)
      {
        std::string::value_type v6 = v7;
      }
      else
      {
        std::string::value_type v6 = v7 & 0x3F | 0x80;
        if (v7 >= 0x800)
        {
          unsigned int v11 = (v7 >> 6) & 0x3F | 0xFFFFFF80;
          if (v7 >= 0x10000)
          {
            unsigned int v14 = (v7 >> 12) & 0x3F | 0xFFFFFF80;
            std::string::push_back((std::string *)a3, (v7 >> 18) | 0xF0);
            unsigned int v13 = (std::string *)a3;
            LOBYTE(v12) = v14;
          }
          else
          {
            unsigned int v12 = (v7 >> 12) | 0xFFFFFFE0;
            unsigned int v13 = (std::string *)a3;
          }
          std::string::push_back(v13, v12);
          unint64_t v10 = (std::string *)a3;
          LOBYTE(v9) = v11;
        }
        else
        {
          unsigned int v9 = (v7 >> 6) | 0xFFFFFFC0;
          unint64_t v10 = (std::string *)a3;
        }
        std::string::push_back(v10, v9);
      }
      std::string::push_back((std::string *)a3, v6);
      if (++begin == end)
      {
        uint64_t v15 = 1;
        goto LABEL_25;
      }
    }
    uint64_t v15 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      **(unsigned char **)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 23) = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
LABEL_25:
  std::vector<unsigned int>::pointer begin = v17.__begin_;
  if (v17.__begin_)
  {
LABEL_26:
    v17.__end_ = begin;
    operator delete(begin);
  }
  return v15;
}

BOOL swift::Punycode::__runtime::encodePunycodeUTF8(char *a1, unint64_t a2, std::string *a3, char a4)
{
  std::string __p = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  if (!a2)
  {
LABEL_68:
    BOOL v19 = swift::Punycode::__runtime::encodePunycode((unsigned int **)&__p, a3);
LABEL_69:
    size_t v41 = __p;
    if (__p) {
      goto LABEL_70;
    }
    return v19;
  }
  if (a2 >> 62) {
LABEL_74:
  }
    abort();
  unsigned int v7 = (unsigned int *)operator new(4 * a2);
  unsigned int v8 = (char *)&v7[a2];
  std::string __p = v7;
  int v46 = v7;
  unsigned int v9 = (unsigned __int8 *)&a1[a2];
  char v44 = a4 ^ 1;
  uint64_t v47 = v8;
  unint64_t v10 = v7;
  while (1)
  {
    unsigned int v12 = (unsigned __int8 *)(a1 + 1);
    unsigned int v13 = *a1;
    if ((*a1 & 0x80000000) == 0)
    {
      if ((v13 & 0xFFFFFFDF) - 65 < 0x1A) {
        goto LABEL_18;
      }
      BOOL v15 = v13 == 95 || v13 - 48 < 0xA || v13 == 36;
      char v16 = v44;
      if (v15) {
        char v16 = 1;
      }
      if (v16)
      {
LABEL_18:
        ++a1;
        goto LABEL_40;
      }
      v13 |= 0xD800u;
      ++a1;
      goto LABEL_38;
    }
    if (v13 < 0xC0) {
      goto LABEL_72;
    }
    if (v13 <= 0xDF) {
      break;
    }
    uint64_t v18 = v9 - v12;
    if (v13 > 0xEF)
    {
      BOOL v19 = 0;
      if (v13 > 0xF7 || v18 < 3) {
        goto LABEL_69;
      }
      unsigned __int8 v23 = a1[1];
      if ((v23 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v24 = a1[2];
      if ((v24 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v25 = a1[3];
      if ((v25 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      a1 += 4;
      unsigned int v13 = ((v13 & 7) << 18) | ((v23 & 0x3F) << 12) | ((v24 & 0x3F) << 6) | v25 & 0x3F;
    }
    else
    {
      if (v18 < 2) {
        goto LABEL_72;
      }
      BOOL v19 = 0;
      unsigned __int8 v20 = a1[1];
      if ((v20 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      unsigned __int8 v21 = a1[2];
      if ((v21 & 0xC0) != 0x80) {
        goto LABEL_69;
      }
      a1 += 3;
      unsigned int v13 = ((v13 & 0xF) << 12) | ((v20 & 0x3F) << 6) | v21 & 0x3F;
    }
LABEL_38:
    if (v13 >> 7 >= 0x1B1 && (v13 - 57344) >> 13 > 0x80) {
      goto LABEL_72;
    }
LABEL_40:
    if (v7 >= (unsigned int *)v8)
    {
      uint64_t v26 = v7 - v10;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62) {
        goto LABEL_74;
      }
      if ((v8 - (char *)v10) >> 1 > v27) {
        unint64_t v27 = (v8 - (char *)v10) >> 1;
      }
      if ((unint64_t)(v8 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28)
      {
        if (v28 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        char v29 = operator new(4 * v28);
      }
      else
      {
        char v29 = 0;
      }
      char v30 = (unsigned int *)&v29[4 * v26];
      *char v30 = v13;
      unsigned int v11 = v30 + 1;
      if (v7 == v10) {
        goto LABEL_55;
      }
      unint64_t v31 = (char *)v7 - (char *)v10 - 4;
      if (v31 >= 0xBC)
      {
        unint64_t v34 = ((char *)(v7 - 1) - (char *)v10) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v29[(char *)v7 - (char *)v10 - 4 - v34] > &v29[(char *)v7 - (char *)v10 - 4])
        {
          signed int v32 = v7;
        }
        else if ((unsigned int *)((char *)v7 - v34 - 4) > v7 - 1)
        {
          signed int v32 = v7;
        }
        else if ((unint64_t)((char *)v10 - v29) >= 0x20)
        {
          uint64_t v35 = (v31 >> 2) + 1;
          uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          signed int v32 = &v7[v36 / 0xFFFFFFFFFFFFFFFCLL];
          char v30 = (unsigned int *)((char *)v30 - v36);
          unsigned int v37 = &v29[4 * v26 - 16];
          unint64_t v38 = v7 - 4;
          uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            _OWORD *v37 = v40;
            v37 -= 2;
            v38 -= 8;
            v39 -= 8;
          }
          while (v39);
          if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_55;
          }
        }
        else
        {
          signed int v32 = v7;
        }
      }
      else
      {
        signed int v32 = v7;
      }
      do
      {
        unsigned int v33 = *--v32;
        *--char v30 = v33;
      }
      while (v32 != v10);
LABEL_55:
      unsigned int v8 = &v29[4 * v28];
      std::string __p = v30;
      uint64_t v47 = v8;
      if (v10) {
        operator delete(v10);
      }
      unint64_t v10 = v30;
      goto LABEL_5;
    }
    *unsigned int v7 = v13;
    unsigned int v11 = v7 + 1;
LABEL_5:
    int v46 = v11;
    unsigned int v7 = v11;
    if (a1 >= (char *)v9) {
      goto LABEL_68;
    }
  }
  if (v12 != v9)
  {
    unsigned __int8 v17 = *v12;
    if ((v17 & 0xC0) == 0x80)
    {
      a1 += 2;
      unsigned int v13 = v17 & 0x3F | ((v13 & 0x1F) << 6);
      goto LABEL_40;
    }
  }
LABEL_72:
  BOOL v19 = 0;
  size_t v41 = __p;
  if (!__p) {
    return v19;
  }
LABEL_70:
  operator delete(v41);
  return v19;
}

BOOL swift::Demangle::__runtime::SubstitutionEntry::identifierEquals(swift::Demangle::__runtime::SubstitutionEntry *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  size_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = v3;
  if (v4 != v3) {
    return 0;
  }
  if (*((unsigned __int16 *)this + 8) == *((unsigned __int16 *)a2 + 8))
  {
    if (v3 == v4)
    {
      if (v3) {
        return memcmp(*(const void **)this, *(const void **)a2, v3) == 0;
      }
      return 1;
    }
    return 0;
  }
  if (!*((void *)this + 1)) {
    return 1;
  }
  uint64_t v10 = 0;
  BOOL v8 = 0;
  do
  {
    unsigned int v11 = *((unsigned __int16 *)this + 8) - 124;
    BOOL v12 = v11 > 0x33;
    uint64_t v13 = (1 << v11) & 0xA000000000001;
    if (v12 || v13 == 0) {
      char v15 = *(unsigned char *)(*(void *)this + v10);
    }
    else {
      char v15 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)*(char *)(*(void *)this + v10));
    }
    unsigned int v16 = *((unsigned __int16 *)a2 + 8) - 124;
    if (v16 <= 0x33 && ((1 << v16) & 0xA000000000001) != 0) {
      char v17 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)*(char *)(*(void *)a2 + v10));
    }
    else {
      char v17 = *(unsigned char *)(*(void *)a2 + v10);
    }
    if (v15 != v17) {
      break;
    }
    BOOL v8 = ++v10 >= v5;
  }
  while (v5 != v10);
  return v8;
}

uint64_t swift::Demangle::__runtime::SubstitutionEntry::deepEquals(swift::Demangle::__runtime::SubstitutionEntry *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  size_t v3 = (char *)a2 + 16;
  if (*((unsigned __int16 *)a2 + 8) != *((unsigned __int16 *)a3 + 8)) {
    return 0;
  }
  uint64_t v4 = a3;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != *((unsigned __int8 *)a3 + 18)) {
    return 0;
  }
  unsigned int v8 = v6 - 1;
  unsigned int v9 = a2;
  switch(*((unsigned char *)a2 + 18))
  {
    case 1:
    case 2:
      if (v8 >= 2) {
        goto LABEL_13;
      }
      goto LABEL_5;
    case 3:
      size_t v10 = *((void *)a2 + 1);
      if (v10 != *((void *)v4 + 1) || v10 && memcmp(*(const void **)a2, *(const void **)v4, v10)) {
        return 0;
      }
      goto LABEL_12;
    case 4:
      if (*(void *)a2 != *(void *)a3) {
        return 0;
      }
      goto LABEL_12;
    case 5:
      if (*((_DWORD *)a2 + 2) != *((_DWORD *)a3 + 2)) {
        return 0;
      }
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_23;
    default:
LABEL_12:
      unsigned int v9 = 0;
      if (v8 < 2)
      {
LABEL_5:
        if (v6 != 5)
        {
LABEL_15:
          if (v6 != 2)
          {
            size_t v3 = v6 == 1 ? (char *)a2 + 8 : 0;
            if (v9 == (swift::Demangle::__runtime::Node *)v3) {
              return 1;
            }
          }
          goto LABEL_25;
        }
      }
      else
      {
LABEL_13:
        if (v6 != 5)
        {
          uint64_t v4 = 0;
          goto LABEL_15;
        }
LABEL_23:
        uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      size_t v3 = (char *)(*(void *)a2 + 8 * *((unsigned int *)a2 + 2));
      if (v9 == (swift::Demangle::__runtime::Node *)v3) {
        return 1;
      }
LABEL_25:
      BOOL v12 = (char *)v9 + 8;
      do
      {
        uint64_t v13 = *(swift::Demangle::__runtime::Node **)v4;
        uint64_t v4 = (swift::Demangle::__runtime::Node *)((char *)v4 + 8);
        uint64_t result = swift::Demangle::__runtime::SubstitutionEntry::deepEquals(this, *((swift::Demangle::__runtime::Node **)v12 - 1), v13);
        if (result) {
          BOOL v14 = v12 == v3;
        }
        else {
          BOOL v14 = 1;
        }
        v12 += 8;
      }
      while (!v14);
      break;
  }
  return result;
}

uint64_t swift::Demangle::__runtime::RemanglerBase::hashForNode(swift::Demangle::__runtime::RemanglerBase *this, swift::Demangle::__runtime::Node *a2, BOOL a3)
{
  BOOL v3 = a3;
  uint64_t v5 = *((unsigned __int16 *)a2 + 8);
  if (a3)
  {
    if ((v5 - 124) <= 0x33 && ((1 << (v5 - 124)) & 0xA000000000001) != 0)
    {
      uint64_t v7 = *((void *)a2 + 1);
      if (!v7) {
        return 101;
      }
      unsigned int v8 = *(char **)a2;
      uint64_t v5 = 101;
      do
      {
        unsigned int v9 = *v8++;
        uint64_t v5 = 33 * v5 + swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)v9);
        --v7;
      }
      while (v7);
      return v5;
    }
    uint64_t v5 = 101;
  }
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 3)
  {
    uint64_t v11 = *((void *)a2 + 1);
    if (!v11) {
      goto LABEL_23;
    }
    BOOL v12 = *(unsigned __int8 **)a2;
    do
    {
      unsigned int v13 = *v12++;
      uint64_t v5 = 33 * v5 + v13;
      --v11;
    }
    while (v11);
  }
  else if (v10 == 4)
  {
    uint64_t v5 = *(void *)a2 + 33 * v5;
    goto LABEL_23;
  }
  if ((v10 - 1) < 2)
  {
    BOOL v14 = (swift::Demangle::__runtime::Node **)a2;
    if (v10 != 1) {
      goto LABEL_24;
    }
LABEL_20:
    char v15 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    goto LABEL_31;
  }
  if (v10 == 5)
  {
    uint64_t v16 = *(void *)a2;
    BOOL v14 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_27:
    char v15 = (swift::Demangle::__runtime::Node **)(v16 + 8 * *((unsigned int *)a2 + 2));
    goto LABEL_31;
  }
LABEL_23:
  BOOL v14 = 0;
  if (v10 == 1) {
    goto LABEL_20;
  }
LABEL_24:
  if (v10 == 2)
  {
    char v15 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
  }
  else
  {
    if (v10 == 5)
    {
      uint64_t v16 = *(void *)a2;
      goto LABEL_27;
    }
    char v15 = 0;
  }
LABEL_31:
  while (v14 != v15)
  {
    char v17 = *v14++;
    swift::Demangle::__runtime::RemanglerBase::entryForNode(v19, this, v17, v3);
    uint64_t v5 = v19[1] + 33 * v5;
  }
  return v5;
}

__n128 swift::Demangle::__runtime::RemanglerBase::entryForNode@<Q0>(uint64_t *__return_ptr a1@<X8>, swift::Demangle::__runtime::RemanglerBase *this@<X0>, swift::Demangle::__runtime::Node *a3@<X1>, int a4@<W2>)
{
  char v4 = a4;
  uint64_t v7 = 4;
  if (!a4) {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v7 + ((unint64_t)(2043 * (void)a3) >> 12);
  unsigned int v9 = (char *)this + 24 * (v8 & 0x1FF);
  __n128 result = *(__n128 *)(v9 + 8);
  *(__n128 *)a1 = result;
  a1[2] = *((void *)v9 + 3);
  if (!*a1) {
    goto LABEL_30;
  }
  if ((swift::Demangle::__runtime::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
  {
    unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 1) & 0x1FF);
    __n128 result = *(__n128 *)(v9 + 8);
    *(__n128 *)a1 = result;
    a1[2] = *((void *)v9 + 3);
    if (*a1)
    {
      if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
        return result;
      }
      unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 2) & 0x1FF);
      __n128 result = *(__n128 *)(v9 + 8);
      *(__n128 *)a1 = result;
      a1[2] = *((void *)v9 + 3);
      if (*a1)
      {
        if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
          return result;
        }
        unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 3) & 0x1FF);
        __n128 result = *(__n128 *)(v9 + 8);
        *(__n128 *)a1 = result;
        a1[2] = *((void *)v9 + 3);
        if (*a1)
        {
          if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
            return result;
          }
          unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 4) & 0x1FF);
          __n128 result = *(__n128 *)(v9 + 8);
          *(__n128 *)a1 = result;
          a1[2] = *((void *)v9 + 3);
          if (*a1)
          {
            if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
              return result;
            }
            unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 5) & 0x1FF);
            __n128 result = *(__n128 *)(v9 + 8);
            *(__n128 *)a1 = result;
            a1[2] = *((void *)v9 + 3);
            if (*a1)
            {
              if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
                return result;
              }
              unsigned int v9 = (char *)this + 24 * (((unsigned __int16)v8 + 6) & 0x1FF);
              __n128 result = *(__n128 *)(v9 + 8);
              *(__n128 *)a1 = result;
              a1[2] = *((void *)v9 + 3);
              if (*a1)
              {
                if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4) {
                  return result;
                }
                BOOL v12 = (char *)this + 24 * (((unsigned __int16)v8 + 7) & 0x1FF);
                __n128 result = *(__n128 *)(v12 + 8);
                *(__n128 *)a1 = result;
                a1[2] = *((void *)v12 + 3);
                if (*a1)
                {
                  if ((swift::Demangle::__runtime::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
                  {
                    uint64_t v13 = swift::Demangle::__runtime::RemanglerBase::hashForNode(this, a3, a4);
                    *((unsigned char *)a1 + 16) = v4;
                    *a1 = (uint64_t)a3;
                    a1[1] = v13;
                  }
                  return result;
                }
                BOOL v14 = v12 + 8;
LABEL_31:
                uint64_t v15 = swift::Demangle::__runtime::RemanglerBase::hashForNode(this, a3, a4);
                *((unsigned char *)a1 + 16) = v4;
                *a1 = (uint64_t)a3;
                a1[1] = v15;
                v14[16] = v4;
                __n128 result = *(__n128 *)a1;
                *(_OWORD *)BOOL v14 = *(_OWORD *)a1;
                return result;
              }
            }
          }
        }
      }
    }
LABEL_30:
    BOOL v14 = v9 + 8;
    goto LABEL_31;
  }
  return result;
}

unint64_t swift::Demangle::__runtime::RemanglerBase::findSubstitution(swift::Demangle::__runtime::RemanglerBase *this, swift::Demangle::__runtime::Node **a2)
{
  char v4 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
  uint64_t v5 = *((void *)this + 1585);
  if (v5)
  {
    int v6 = (char *)v4 + 24 * v5;
    uint64_t v7 = 24 * v5;
    unint64_t v8 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
    do
    {
      if (*((swift::Demangle::__runtime::Node **)v8 + 1) == a2[1]
        && *((unsigned __int8 *)v8 + 16) == *((unsigned __int8 *)a2 + 16))
      {
        unsigned int v9 = *a2;
        if (*((unsigned char *)v8 + 16))
        {
          if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals(*(swift::Demangle::__runtime::SubstitutionEntry **)v8, *a2, v9))
          {
            goto LABEL_11;
          }
        }
        else if (swift::Demangle::__runtime::SubstitutionEntry::deepEquals(v8, *(swift::Demangle::__runtime::Node **)v8, v9))
        {
          goto LABEL_11;
        }
      }
      unint64_t v8 = (swift::Demangle::__runtime::SubstitutionEntry *)((char *)v8 + 24);
      v7 -= 24;
    }
    while (v7);
    unint64_t v8 = (swift::Demangle::__runtime::SubstitutionEntry *)v6;
LABEL_11:
    uint64_t v5 = *((void *)this + 1585);
  }
  else
  {
    unint64_t v8 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
  }
  unint64_t result = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
  if (result == v5)
  {
    uint64_t v11 = std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::__runtime::SubstitutionEntry>((void *)this + 1586, (uint64_t)a2);
    if (v11) {
      return *((unsigned int *)v11 + 10);
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

char *swift::Demangle::__runtime::RemanglerBase::addSubstitution(char *this, const swift::Demangle::__runtime::SubstitutionEntry *a2)
{
  unint64_t v2 = *((void *)this + 1585);
  if (v2 > 0xF)
  {
    int v5 = *((_DWORD *)this + 3178) + 16;
    long long v6 = *(_OWORD *)a2;
    uint64_t v7 = *((void *)a2 + 2);
    int v8 = v5;
    return std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 12688), (uint64_t)&v6, &v6);
  }
  else
  {
    *((void *)this + 1585) = v2 + 1;
    uint64_t v3 = (uint64_t)&this[24 * v2 + 12296];
    long long v4 = *(_OWORD *)a2;
    *(unsigned char *)(v3 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)uint64_t v3 = v4;
  }
  return this;
}

size_t *swift::Demangle::__runtime::mangleNode(swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  return swift::Demangle::__runtime::mangleNode((uint64_t)this);
}

size_t *swift::Demangle::__runtime::mangleNode(uint64_t a1)
{
  unint64_t result = (size_t *)MEMORY[0x1F4188790](a1);
  uint64_t v5 = v4;
  if (!result)
  {
    *(_DWORD *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 24) = 0;
    return result;
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  int v8 = result;
  int v80 = &unk_1ECA07768;
  unsigned int v81 = 0;
  char v82 = 0;
  uint64_t v83 = 0;
  uint64_t v85 = 0;
  char v86 = 0;
  char v24 = 0;
  v23[1540] = 0;
  int v22 = &v80;
  v23[1539] = 0;
  char v27 = 0;
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  char v30 = 0;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  char v33 = 0;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  char v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  char v39 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  char v42 = 0;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  char v45 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  char v48 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  char v51 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  char v54 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  char v57 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  char v60 = 0;
  uint64_t v59 = 0;
  uint64_t v58 = 0;
  char v63 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  char v66 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v69 = 0;
  bzero(v23, 0x3011uLL);
  int v70 = 1065353216;
  int v73 = &v80;
  uint64_t v84 = 4800;
  unsigned int v9 = malloc_type_malloc(0x12C8uLL, 0xD0263BC5uLL);
  int v10 = v83;
  uint64_t v83 = v9;
  *unsigned int v9 = v10;
  unsigned int v81 = v9 + 5;
  char v82 = v9 + 601;
  char __src = v9 + 1;
  size_t __len = 0x2000000000;
  char v74 = 1;
  long long v75 = 0u;
  long long v76 = 0u;
  memset(v77, 0, sizeof(v77));
  uint64_t v78 = v7;
  uint64_t v79 = v6;
  if (v20)
  {
    *(_OWORD *)uint64_t v5 = v20;
    *(void *)(v5 + 16) = v21;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    uint64_t v11 = (void *)*((void *)&v68 + 1);
    if (*((void *)&v68 + 1)) {
      goto LABEL_4;
    }
    goto LABEL_5;
  }
  BOOL v14 = __src;
  if (!__src)
  {
    long long v18 = 0uLL;
    uint64_t v19 = 0;
    goto LABEL_22;
  }
  size_t v15 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17) {
      uint64_t v17 = (__len & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v17 = __len | 7;
    }
    uint64_t v16 = (long long *)operator new(v17 + 1);
    *((void *)&v18 + 1) = v15;
    uint64_t v19 = v17 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&long long v18 = v16;
  }
  else
  {
    HIBYTE(v19) = __len;
    uint64_t v16 = &v18;
    if (!__len) {
      goto LABEL_21;
    }
  }
  memmove(v16, v14, v15);
LABEL_21:
  *((unsigned char *)v16 + v15) = 0;
LABEL_22:
  *(_DWORD *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 16) = 0;
  *(_OWORD *)(v5 + 24) = v18;
  *(void *)(v5 + 40) = v19;
  uint64_t v11 = (void *)*((void *)&v68 + 1);
  if (*((void *)&v68 + 1))
  {
    do
    {
LABEL_4:
      BOOL v12 = (void *)*v11;
      operator delete(v11);
      uint64_t v11 = v12;
    }
    while (v12);
  }
LABEL_5:
  uint64_t v13 = (void *)*((void *)&v67 + 1);
  *((void *)&v67 + 1) = 0;
  if (v13) {
    operator delete(v13);
  }
  int v80 = &unk_1ECA07768;
  unint64_t result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v83);
  if (v85) {
    *(unsigned char *)(v85 + 48) = 0;
  }
  return result;
}

void anonymous namespace'::Remangler::mangle(uint64_t *__return_ptr a1@<X8>, _anonymous_namespace_::Remangler *this@<X0>, size_t *a3@<X1>, unsigned int a4@<W2>)
{
  if (a4 <= 0x400)
  {
    int v6 = a4;
    while (2)
    {
      uint64_t v8 = 0;
      switch(*((_WORD *)a3 + 8))
      {
        case 0:
          int v13 = v6 + 1;
          BOOL v14 = a1;
          size_t v15 = (char **)this;
          char v16 = 67;
          goto LABEL_86;
        case 1:
          return;
        case 2:
          return;
        case 3:
          uint64_t v17 = a1;
          long long v18 = (unsigned int *)this;
          int v19 = v6;
          goto LABEL_31;
        case 4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 733;
          goto LABEL_3;
        case 5:
          return;
        case 6:
          return;
        case 7:
          return;
        case 8:
          return;
        case 9:
          return;
        case 0xA:
          return;
        case 0xB:
          return;
        case 0xC:
          return;
        case 0xD:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x18:
        case 0x3D:
        case 0xA7:
        case 0xDB:
        case 0xEA:
          return;
        case 0xE:
          return;
        case 0x13:
          return;
        case 0x14:
          return;
        case 0x15:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "BT";
          goto LABEL_856;
        case 0x16:
          return;
        case 0x17:
          return;
        case 0x19:
          return;
        case 0x1A:
          return;
        case 0x1B:
          return;
        case 0x1C:
          return;
        case 0x1D:
          BOOL v14 = a1;
          size_t v15 = (char **)this;
          char v16 = 99;
          int v13 = v6;
LABEL_86:
          return;
        case 0x1E:
          return;
        case 0x1F:
          return;
        case 0x20:
          unsigned int v20 = v6 + 1;
          uint64_t v21 = a1;
          int v22 = this;
          goto LABEL_97;
        case 0x21:
          return;
        case 0x22:
          return;
        case 0x23:
          return;
        case 0x24:
          return;
        case 0x25:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1138;
          goto LABEL_3;
        case 0x26:
          return;
        case 0x27:
          return;
        case 0x28:
          return;
        case 0x29:
          return;
        case 0x2A:
          return;
        case 0x2B:
          unsigned __int8 v23 = a1;
          char v24 = (uint64_t *)this;
          int v25 = v6;
          goto LABEL_134;
        case 0x2C:
          return;
        case 0x2D:
          return;
        case 0x2E:
          int v25 = v6 + 1;
          unsigned __int8 v23 = a1;
          char v24 = (uint64_t *)this;
LABEL_134:
          return;
        case 0x2F:
          return;
        case 0x30:
          return;
        case 0x31:
          return;
        case 0x32:
          return;
        case 0x33:
          return;
        case 0x34:
          return;
        case 0x35:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TE";
          goto LABEL_856;
        case 0x36:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TF";
          goto LABEL_856;
        case 0x37:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TD";
          goto LABEL_856;
        case 0x38:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Td";
          goto LABEL_856;
        case 0x39:
          return;
        case 0x3A:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TI";
          goto LABEL_856;
        case 0x3B:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tx";
          goto LABEL_856;
        case 0x3C:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TX";
          goto LABEL_856;
        case 0x3E:
          return;
        case 0x3F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Xe";
          goto LABEL_856;
        case 0x40:
          return;
        case 0x41:
          return;
        case 0x42:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Yb";
          goto LABEL_856;
        case 0x43:
          return;
        case 0x44:
          return;
        case 0x45:
          return;
        case 0x46:
          return;
        case 0x47:
          return;
        case 0x48:
          return;
        case 0x49:
          return;
        case 0x4A:
          return;
        case 0x4B:
          return;
        case 0x4C:
          return;
        case 0x4D:
          return;
        case 0x4E:
        case 0x4F:
          return;
        case 0x50:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1634;
          goto LABEL_3;
        case 0x51:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1641;
          goto LABEL_3;
        case 0x52:
          uint64_t v26 = a1;
          char v27 = (uint64_t *)this;
          int v28 = v6;
          goto LABEL_213;
        case 0x53:
          return;
        case 0x54:
          return;
        case 0x55:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "s";
          size_t v10 = 1;
          goto LABEL_857;
        case 0x56:
          uint64_t v29 = a1;
          char v30 = (char **)this;
          int v31 = v6;
          goto LABEL_223;
        case 0x57:
          int v31 = v6 + 1;
          uint64_t v29 = a1;
          char v30 = (char **)this;
LABEL_223:
          return;
        case 0x58:
          return;
        case 0x59:
          return;
        case 0x5A:
          return;
        case 0x5B:
          uint64_t v32 = "Tg";
          goto LABEL_241;
        case 0x5C:
          uint64_t v32 = "TG";
          goto LABEL_241;
        case 0x5D:
          uint64_t v32 = "TB";
          goto LABEL_241;
        case 0x5E:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1749;
          goto LABEL_3;
        case 0x5F:
          uint64_t v32 = "Ts";
          goto LABEL_241;
        case 0x60:
          uint64_t v32 = "Ti";
LABEL_241:
          return;
        case 0x61:
          return;
        case 0x62:
          return;
        case 0x63:
          return;
        case 0x64:
          return;
        case 0x65:
          char v33 = a1;
          uint64_t v34 = this;
          goto LABEL_258;
        case 0x66:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1834;
          goto LABEL_3;
        case 0x67:
          return;
        case 0x68:
          return;
        case 0x69:
          return;
        case 0x6A:
          return;
        case 0x6B:
          uint64_t v35 = a1;
          char v36 = (unsigned int *)this;
          goto LABEL_274;
        case 0x6C:
          return;
        case 0x6D:
          return;
        case 0x6E:
          return;
        case 0x6F:
          return;
        case 0x70:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1919;
          goto LABEL_3;
        case 0x71:
          return;
        case 0x72:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1949;
          goto LABEL_3;
        case 0x73:
          return;
        case 0x74:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1960;
          goto LABEL_3;
        case 0x75:
          return;
        case 0x76:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2165;
          goto LABEL_3;
        case 0x77:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1966;
          goto LABEL_3;
        case 0x78:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2170;
          goto LABEL_3;
        case 0x79:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2175;
          goto LABEL_3;
        case 0x7A:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 2180;
          goto LABEL_3;
        case 0x7B:
          return;
        case 0x7C:
          return;
        case 0x7D:
          return;
        case 0x7E:
          return;
        case 0x7F:
          return;
        case 0x80:
          return;
        case 0x81:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "YA";
          goto LABEL_856;
        case 0x82:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "YT";
          goto LABEL_856;
        case 0x83:
          int v37 = v6 + 1;
          uint64_t v38 = "TK";
          goto LABEL_328;
        case 0x84:
          int v37 = v6 + 1;
          uint64_t v38 = "Tk";
          goto LABEL_328;
        case 0x85:
          int v37 = v6 + 1;
          uint64_t v38 = "TH";
          goto LABEL_328;
        case 0x86:
          int v37 = v6 + 1;
          uint64_t v38 = "Th";
LABEL_328:
          return;
        case 0x87:
          return;
        case 0x88:
          return;
        case 0x89:
          return;
        case 0x8A:
          return;
        case 0x8B:
          return;
        case 0x8C:
          return;
        case 0x8D:
          return;
        case 0x8E:
          return;
        case 0x8F:
          return;
        case 0x90:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tm";
          goto LABEL_856;
        case 0x91:
          return;
        case 0x92:
          return;
        case 0x93:
          return;
        case 0x94:
          return;
        case 0x95:
          return;
        case 0x96:
          return;
        case 0x97:
          return;
        case 0x98:
          return;
        case 0x99:
          return;
        case 0x9A:
          return;
        case 0x9B:
          return;
        case 0x9C:
          return;
        case 0x9D:
          return;
        case 0x9E:
          return;
        case 0x9F:
          return;
        case 0xA0:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TO";
          goto LABEL_856;
        case 0xA1:
        case 0xE7:
          goto LABEL_858;
        case 0xA2:
          return;
        case 0xA3:
          return;
        case 0xA4:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "To";
          goto LABEL_856;
        case 0xA5:
          return;
        case 0xA6:
          return;
        case 0xA8:
          return;
        case 0xA9:
          return;
        case 0xAA:
          return;
        case 0xAB:
          return;
        case 0xAC:
          return;
        case 0xAD:
          return;
        case 0xAE:
          return;
        case 0xAF:
          return;
        case 0xB0:
          return;
        case 0xB1:
          return;
        case 0xB2:
          return;
        case 0xB3:
          return;
        case 0xB4:
          return;
        case 0xB5:
        case 0xE9:
        case 0x12D:
          goto LABEL_7;
        case 0xB6:
          return;
        case 0xB7:
          return;
        case 0xB8:
          return;
        case 0xB9:
          return;
        case 0xBA:
          return;
        case 0xBB:
          return;
        case 0xBC:
          return;
        case 0xBD:
          return;
        case 0xBE:
          return;
        case 0xBF:
          return;
        case 0xC0:
          return;
        case 0xC1:
          return;
        case 0xC2:
          return;
        case 0xC3:
          return;
        case 0xC4:
          return;
        case 0xC5:
          return;
        case 0xC6:
          return;
        case 0xC7:
          return;
        case 0xC8:
          return;
        case 0xC9:
          return;
        case 0xCA:
          return;
        case 0xCB:
          return;
        case 0xCC:
          return;
        case 0xCD:
          return;
        case 0xCE:
          return;
        case 0xCF:
          int v19 = v6 + 1;
          uint64_t v17 = a1;
          long long v18 = (unsigned int *)this;
LABEL_31:
          return;
        case 0xD0:
          return;
        case 0xD1:
          return;
        case 0xD2:
          return;
        case 0xD3:
          return;
        case 0xD4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3634;
          goto LABEL_3;
        case 0xD5:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3639;
          goto LABEL_3;
        case 0xD6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3645;
          goto LABEL_3;
        case 0xD7:
          return;
        case 0xD8:
          swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *a3, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
          goto LABEL_858;
        case 0xD9:
          return;
        case 0xDA:
          return;
        case 0xDC:
        case 0xFE:
          return;
        case 0xDD:
        case 0x147:
          unsigned int v9 = (char **)((char *)this + 12728);
          size_t v10 = a3[1];
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = (const char *)*a3;
          goto LABEL_857;
        case 0xDE:
          return;
        case 0xDF:
          return;
        case 0xE0:
          return;
        case 0xE1:
          char v33 = a1;
          uint64_t v34 = this;
LABEL_258:
          return;
        case 0xE2:
          return;
        case 0xE3:
          return;
        case 0xE4:
          return;
        case 0xE5:
          return;
        case 0xE6:
          return;
        case 0xE8:
          unsigned int v20 = v6 + 1;
          uint64_t v21 = a1;
          int v22 = this;
LABEL_97:
          return;
        case 0xEB:
          return;
        case 0xEC:
          return;
        case 0xED:
          return;
        case 0xEE:
          return;
        case 0xEF:
          return;
        case 0xF0:
          return;
        case 0xF1:
          return;
        case 0xF2:
          return;
        case 0xF3:
          return;
        case 0xF4:
          return;
        case 0xF5:
          uint64_t v26 = a1;
          char v27 = (uint64_t *)this;
          int v28 = v6;
LABEL_213:
          return;
        case 0xF6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 1839;
          goto LABEL_3;
        case 0xF7:
          return;
        case 0xF8:
          return;
        case 0xF9:
          return;
        case 0xFA:
          return;
        case 0xFB:
          return;
        case 0xFC:
          return;
        case 0xFD:
          return;
        case 0xFF:
          return;
        case 0x100:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3281;
          goto LABEL_3;
        case 0x101:
          return;
        case 0x102:
          return;
        case 0x103:
          return;
        case 0x104:
          return;
        case 0x105:
          return;
        case 0x106:
          return;
        case 0x107:
          return;
        case 0x108:
          return;
        case 0x109:
          return;
        case 0x10A:
          return;
        case 0x10B:
          return;
        case 0x10C:
          return;
        case 0x10D:
          return;
        case 0x10E:
          return;
        case 0x10F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Ya";
          goto LABEL_856;
        case 0x110:
          return;
        case 0x111:
          return;
        case 0x112:
          return;
        case 0x113:
          return;
        case 0x114:
          return;
        case 0x115:
          return;
        case 0x116:
          return;
        case 0x117:
          return;
        case 0x118:
          return;
        case 0x119:
          return;
        case 0x11A:
          return;
        case 0x11B:
          return;
        case 0x11C:
          return;
        case 0x11D:
          return;
        case 0x11E:
          return;
        case 0x11F:
          return;
        case 0x120:
          return;
        case 0x121:
          return;
        case 0x122:
          return;
        case 0x123:
          return;
        case 0x124:
          return;
        case 0x125:
          return;
        case 0x126:
          return;
        case 0x127:
          return;
        case 0x128:
          return;
        case 0x129:
          return;
        case 0x12A:
          return;
        case 0x12B:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3792;
          goto LABEL_3;
        case 0x12C:
          return;
        case 0x12E:
          return;
        case 0x12F:
          return;
        case 0x130:
          return;
        case 0x131:
          return;
        case 0x132:
          return;
        case 0x133:
          return;
        case 0x134:
          return;
        case 0x135:
          return;
        case 0x136:
          return;
        case 0x137:
          return;
        case 0x138:
          return;
        case 0x139:
          return;
        case 0x13A:
          return;
        case 0x13B:
          return;
        case 0x13C:
          return;
        case 0x13D:
          return;
        case 0x13E:
          return;
        case 0x13F:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Tu";
          goto LABEL_856;
        case 0x140:
          int v39 = v6 + 1;
          uint64_t v40 = "TJ";
          uint64_t v41 = a1;
          char v42 = this;
          size_t v43 = 2;
          goto LABEL_840;
        case 0x141:
          uint64_t v35 = a1;
          char v36 = (unsigned int *)this;
LABEL_274:
          return;
        case 0x142:
          return;
        case 0x143:
          return;
        case 0x144:
          int v39 = v6 + 1;
          uint64_t v40 = "TJV";
          uint64_t v41 = a1;
          char v42 = this;
          size_t v43 = 3;
LABEL_840:
          return;
        case 0x145:
          return;
        case 0x146:
          return;
        case 0x148:
          return;
        case 0x149:
          return;
        case 0x14A:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "HF";
LABEL_856:
          size_t v10 = 2;
          goto LABEL_857;
        case 0x14B:
          return;
        case 0x14C:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "Twb";
          size_t v10 = 3;
          goto LABEL_857;
        case 0x14D:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TwB";
          size_t v10 = 3;
          goto LABEL_857;
        case 0x14E:
          return;
        case 0x14F:
          return;
        case 0x150:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3931;
          goto LABEL_3;
        case 0x151:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          int v5 = 3937;
          goto LABEL_3;
        case 0x152:
          return;
        case 0x153:
          return;
        case 0x154:
          unsigned int v9 = (char **)((char *)this + 12728);
          uint64_t v11 = (void *)*((void *)this + 1593);
          BOOL v12 = "TwS";
          size_t v10 = 3;
LABEL_857:
          swift::Demangle::__runtime::CharVector::append(v9, v12, v10, v11);
LABEL_858:
          *(_DWORD *)a1 = 0;
          goto LABEL_859;
        case 0x155:
        case 0x156:
          *(_DWORD *)a1 = 11;
LABEL_859:
          a1[1] = 0;
          *((_DWORD *)a1 + 4) = 0;
          return;
        case 0x157:
          return;
        case 0x158:
          return;
        case 0x159:
          return;
        case 0x15A:
          return;
        case 0x15B:
          uint64_t v8 = 4;
LABEL_7:
          a3 = (size_t *)(*((uint64_t (**)(void, uint64_t, size_t))this + 1603))(*((void *)this + 1604), v8, *a3);
          if (++v6 == 1025) {
            break;
          }
          continue;
        case 0x15C:
          return;
        case 0x15D:
          return;
        case 0x15E:
          return;
        case 0x15F:
          return;
        case 0x160:
          return;
        case 0x161:
          return;
        case 0x162:
          return;
        default:
          *(_DWORD *)a1 = 4;
          a1[1] = (uint64_t)a3;
          int v5 = 401;
          goto LABEL_3;
      }
      break;
    }
  }
  *(_DWORD *)a1 = 3;
  a1[1] = (uint64_t)a3;
  int v5 = 392;
LABEL_3:
  *((_DWORD *)a1 + 4) = v5;
}

void swift::Demangle::__runtime::mangleNode(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = v5;
  if (!v1)
  {
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(_DWORD *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    return;
  }
  uint64_t v7 = v4;
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  size_t v10 = (size_t *)v1;
  char v25 = 0;
  v24[1540] = 0;
  unsigned __int8 v23 = v4;
  v24[1539] = 0;
  char v28 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  char v31 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  char v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  char v37 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  char v40 = 0;
  uint64_t v39 = 0;
  uint64_t v38 = 0;
  char v43 = 0;
  uint64_t v42 = 0;
  uint64_t v41 = 0;
  char v46 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  char v49 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  char v52 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  char v55 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  char v58 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  char v61 = 0;
  uint64_t v60 = 0;
  uint64_t v59 = 0;
  char v64 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  char v67 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  uint64_t v70 = 0;
  bzero(v24, 0x3011uLL);
  int v71 = 1065353216;
  char v74 = v7;
  uint64_t v11 = (void *)v7[1];
  if (!v11 || (unint64_t)(v11 + 4) > v7[2])
  {
    unint64_t v12 = 2 * v7[4];
    if (v12 <= 0x21) {
      unint64_t v12 = 33;
    }
    v7[4] = v12;
    unint64_t v13 = v12 + 8;
    BOOL v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    *BOOL v14 = v7[3];
    uint64_t v11 = v14 + 1;
    v7[2] = (char *)v14 + v13;
    void v7[3] = v14;
  }
  v7[1] = v11 + 4;
  uint64_t v72 = v11;
  uint64_t v73 = 0x2000000000;
  char v75 = 1;
  long long v76 = 0u;
  long long v77 = 0u;
  memset(v78, 0, sizeof(v78));
  uint64_t v79 = v9;
  uint64_t v80 = v8;
  if (v21)
  {
    *(_OWORD *)uint64_t v6 = v21;
    uint64_t v15 = v22;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 16) = v15;
    char v16 = (void *)*((void *)&v69 + 1);
    if (*((void *)&v69 + 1)) {
      goto LABEL_9;
    }
  }
  else
  {
    int v19 = v72;
    uint64_t v20 = v73;
    *(_DWORD *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = v19;
    *(void *)(v6 + 32) = v20;
    char v16 = (void *)*((void *)&v69 + 1);
    if (*((void *)&v69 + 1))
    {
      do
      {
LABEL_9:
        uint64_t v17 = (void *)*v16;
        operator delete(v16);
        char v16 = v17;
      }
      while (v17);
    }
  }
  long long v18 = (void *)*((void *)&v68 + 1);
  *((void *)&v68 + 1) = 0;
  if (v18) {
    operator delete(v18);
  }
}

uint64_t swift::Demangle::__runtime::isSpecialized(swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  if (this)
  {
    while (2)
    {
      uint64_t v2 = 1;
      switch(*((_WORD *)this + 8))
      {
        case 0:
        case 0x18:
        case 0x1D:
        case 0x21:
        case 0x32:
        case 0x33:
        case 0x3D:
        case 0x46:
        case 0x4C:
        case 0x62:
        case 0x75:
        case 0x7D:
        case 0x98:
        case 0xA7:
        case 0xB2:
        case 0xB3:
        case 0xB4:
        case 0xCC:
        case 0xD7:
        case 0xDA:
        case 0xDB:
        case 0xDC:
        case 0xEA:
        case 0xFA:
        case 0xFB:
        case 0xFE:
        case 0x101:
          int v4 = *((unsigned __int8 *)this + 18);
          if ((v4 - 1) < 2) {
            goto LABEL_5;
          }
          if (v4 != 5) {
            return 0;
          }
          uint64_t v2 = *((unsigned int *)this + 2);
          if (!v2) {
            return v2;
          }
          this = *(swift::Demangle::__runtime **)this;
LABEL_5:
          this = *(swift::Demangle::__runtime **)this;
          if (this) {
            continue;
          }
          return 0;
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x53:
          return v2;
        case 0x47:
          int v5 = *((unsigned __int8 *)this + 18);
          if (v5 == 2) {
            goto LABEL_4;
          }
          if (v5 != 5 || *((_DWORD *)this + 2) < 2u) {
            return 0;
          }
          this = *(swift::Demangle::__runtime **)this;
LABEL_4:
          this = (swift::Demangle::__runtime *)((char *)this + 8);
          goto LABEL_5;
        default:
          return 0;
      }
    }
  }
  return 0;
}

unint64_t swift::Demangle::__runtime::getUnspecialized@<X0>(unint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = this;
  while (2)
  {
    uint64_t v7 = (swift::Demangle::__runtime::Node *)*(unsigned __int16 *)(v5 + 16);
    if ((v7 - 13) < 6)
    {
      int v8 = *(unsigned __int8 *)(v5 + 18);
      if ((v8 - 1) >= 2)
      {
        if (v8 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4090;
          goto LABEL_72;
        }
        uint64_t v5 = *(void *)v5;
      }
      uint64_t v9 = *(void *)v5;
      if (*(_WORD *)(*(void *)v5 + 16) != 232)
      {
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = v9;
        int v13 = 4092;
        goto LABEL_72;
      }
      int v10 = *(unsigned __int8 *)(v9 + 18);
      if ((v10 - 1) >= 2)
      {
        if (v10 != 5 || !*(_DWORD *)(v9 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v9;
          int v13 = 4093;
          goto LABEL_72;
        }
        uint64_t v9 = *(void *)v9;
      }
      uint64_t v5 = *(void *)v9;
      goto LABEL_13;
    }
    switch(*(_WORD *)(v5 + 16))
    {
      case 0:
      case 0x1D:
      case 0x21:
      case 0x32:
      case 0x33:
      case 0x46:
      case 0x4C:
      case 0x62:
      case 0x75:
      case 0x7D:
      case 0x98:
      case 0xB2:
      case 0xB3:
      case 0xCC:
      case 0xD7:
      case 0xDA:
      case 0xDC:
      case 0xFA:
      case 0xFB:
      case 0xFE:
      case 0x101:
        unsigned int v14 = *(unsigned __int8 *)(v5 + 18);
        if (v14 != 1)
        {
          if (v14 == 5)
          {
            unsigned int v14 = *(_DWORD *)(v5 + 8);
          }
          else if (v14 == 2)
          {
            unsigned int v14 = 2;
          }
          else
          {
            unsigned int v14 = 0;
          }
        }
        goto LABEL_31;
      case 0x13:
        int v11 = *(unsigned __int8 *)(v5 + 18);
        if ((v11 - 1) < 2) {
          goto LABEL_20;
        }
        if (v11 == 5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v5 = *(void *)v5;
LABEL_20:
          uint64_t v5 = *(void *)v5;
          int v12 = *(unsigned __int16 *)(v5 + 16);
          if (v12 != 29 && v12 != 76)
          {
            *(_DWORD *)a3 = 1;
            *(void *)(a3 + 8) = v5;
            int v13 = 4113;
            goto LABEL_72;
          }
LABEL_13:
          this = swift::Demangle::__runtime::isSpecialized((swift::Demangle::__runtime *)v5, v7);
          if ((this & 1) == 0)
          {
LABEL_60:
            *(_DWORD *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 16) = 0;
            *(void *)(a3 + 24) = v5;
            return this;
          }
          continue;
        }
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = v5;
        int v13 = 4108;
LABEL_72:
        *(_DWORD *)(a3 + 16) = v13;
        return this;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xDB:
      case 0xEA:
        unsigned int v14 = 2;
LABEL_31:
        this = swift::Demangle::__runtime::NodeFactory::createNode(a2, (__int16)v7);
        char v16 = (swift::Demangle::__runtime::Node *)this;
        int v17 = *(unsigned __int8 *)(v5 + 18);
        long long v18 = (swift::Demangle::__runtime **)v5;
        if ((v17 - 1) < 2) {
          goto LABEL_35;
        }
        if (v17 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4069;
          goto LABEL_72;
        }
        long long v18 = *(swift::Demangle::__runtime ***)v5;
LABEL_35:
        int v19 = *v18;
        if (swift::Demangle::__runtime::isSpecialized(*v18, v15))
        {
          this = ((uint64_t (*)(swift::Demangle::__runtime *__hidden, swift::Demangle::__runtime::Node *, swift::Demangle::__runtime::NodeFactory *))swift::Demangle::__runtime::getUnspecialized)(v19, a2, v20);
          if (*(_DWORD *)a3) {
            return this;
          }
          int v19 = *(swift::Demangle::__runtime **)(a3 + 24);
        }
        this = swift::Demangle::__runtime::Node::addChild(v16, v19, a2);
        if (v14 < 2)
        {
LABEL_82:
          *(_DWORD *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(_DWORD *)(a3 + 16) = 0;
          *(void *)(a3 + 24) = v16;
          return this;
        }
        uint64_t v21 = v14;
        unint64_t v22 = 1;
        while (1)
        {
          unint64_t v24 = *(unsigned __int8 *)(v5 + 18);
          if (v24 == 2)
          {
            if (v24 > v22) {
              goto LABEL_47;
            }
          }
          else if (v24 == 5 && *(unsigned int *)(v5 + 8) > v22)
          {
LABEL_47:
            unsigned int v25 = v24 - 1;
            uint64_t v26 = v5;
            if (v25 >= 2) {
              uint64_t v26 = *(void *)v5;
            }
            unsigned __int8 v23 = *(swift::Demangle::__runtime::Node **)(v26 + 8 * v22);
            goto LABEL_41;
          }
          unsigned __int8 v23 = 0;
LABEL_41:
          this = swift::Demangle::__runtime::Node::addChild(v16, v23, a2);
          if (v21 == ++v22) {
            goto LABEL_82;
          }
        }
      case 0x47:
        int v27 = *(unsigned __int8 *)(v5 + 18);
        uint64_t v28 = v5;
        if (v27 == 2) {
          goto LABEL_57;
        }
        if (v27 != 5 || *(_DWORD *)(v5 + 8) <= 1u)
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4120;
          goto LABEL_72;
        }
        uint64_t v28 = *(void *)v5;
LABEL_57:
        uint64_t v29 = *(swift::Demangle::__runtime **)(v28 + 8);
        this = swift::Demangle::__runtime::isSpecialized(v29, v7);
        if ((this & 1) == 0) {
          goto LABEL_60;
        }
        this = (unint64_t)swift::Demangle::__runtime::getUnspecialized((uint64_t *)&v37, v29, a2, v30);
        if (v37)
        {
          *(_OWORD *)a3 = v37;
          *(void *)(a3 + 16) = v38;
          return this;
        }
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a2, 71);
        char v16 = Node;
        int v34 = *(unsigned __int8 *)(v5 + 18);
        uint64_t v35 = (swift::Demangle::__runtime::Node **)v5;
        if ((v34 - 1) < 2) {
          goto LABEL_77;
        }
        if (v34 == 5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v35 = *(swift::Demangle::__runtime::Node ***)v5;
LABEL_77:
          uint64_t v36 = *v35;
        }
        else
        {
          uint64_t v36 = 0;
        }
        swift::Demangle::__runtime::Node::addChild(Node, v36, a2);
        this = swift::Demangle::__runtime::Node::addChild(v16, v39, a2);
        if (*(unsigned char *)(v5 + 18) == 5 && *(_DWORD *)(v5 + 8) == 3) {
          this = swift::Demangle::__runtime::Node::addChild(v16, *(swift::Demangle::__runtime::Node **)(*(void *)v5 + 16), a2);
        }
        goto LABEL_82;
      case 0x53:
        int v31 = *(unsigned __int8 *)(v5 + 18);
        if ((v31 - 1) < 2) {
          goto LABEL_65;
        }
        if (v31 == 5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v5 = *(void *)v5;
LABEL_65:
          uint64_t v32 = *(void *)v5;
          if (*(_WORD *)(*(void *)v5 + 16) == 232)
          {
            *(_DWORD *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 16) = 0;
            *(void *)(a3 + 24) = v32;
            return this;
          }
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v32;
          int v13 = 4103;
        }
        else
        {
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + 8) = v5;
          int v13 = 4101;
        }
        goto LABEL_72;
      default:
        *(_DWORD *)a3 = 5;
        *(void *)(a3 + 8) = v5;
        int v13 = 4137;
        goto LABEL_72;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAnonymousContext@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    int v11 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)a2 + 18) != 5) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_36;
  }
LABEL_19:
  unsigned int v12 = *((_DWORD *)this + 3184);
  size_t v13 = *((unsigned int *)this + 3185);
  unsigned int v14 = (char *)this[1591];
  if (v12 >= v13)
  {
    uint64_t v15 = this[1593];
    char v16 = (char *)v15[1];
    if (&v14[v13] == v16)
    {
      unint64_t v18 = (unint64_t)&v14[v13 + 1];
      unint64_t v17 = v15[2];
      if (v18 <= v17)
      {
        v15[1] = v18;
        LODWORD(v19) = 1;
LABEL_34:
        *((_DWORD *)this + 3185) = v13 + v19;
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v17 = v15[2];
    }
    if ((2 * v13) <= 4) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = (2 * v13);
    }
    size_t v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      unint64_t v21 = 2 * v15[4];
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      v15[4] = v21;
      unint64_t v22 = v21 + 8;
      unsigned __int8 v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      unint64_t v24 = (char *)v23 + v22;
      *unsigned __int8 v23 = v15[3];
      char v16 = (char *)(v23 + 1);
      v15[2] = v24;
      void v15[3] = v23;
    }
    v15[1] = &v16[v20];
    if (v13) {
      memcpy(v16, this[1591], v13);
    }
    this[1591] = v16;
    LODWORD(v13) = *((_DWORD *)this + 3185);
    unsigned int v14 = v16;
    unsigned int v12 = *((_DWORD *)this + 3184);
    goto LABEL_34;
  }
LABEL_35:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 121;
LABEL_36:
  unint64_t result = swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XZ", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleAnyProtocolConformanceList@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v13 = 1;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    unsigned int v7 = 0;
  }
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    if (v6 != 5)
    {
      uint64_t v9 = 0;
      if (!v7) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)a2;
    goto LABEL_9;
  }
  uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
  if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
  {
LABEL_19:
    BOOL v12 = 1;
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_14:
  int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
    {
      BOOL v12 = v13;
      goto LABEL_20;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleArgumentTuple@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v7 = *a2;
    goto LABEL_7;
  }
  unsigned int v7 = 0;
LABEL_7:
  if (*((_WORD *)v7 + 8) == 232)
  {
    int v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        unsigned int v7 = 0;
        goto LABEL_14;
      }
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
    }
    unsigned int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
LABEL_14:
  if (*((_WORD *)v7 + 8) == 223)
  {
    int v9 = *((unsigned __int8 *)v7 + 18);
    if ((v9 - 1) >= 2 && (v9 != 5 || !*((_DWORD *)v7 + 2)))
    {
      unsigned int v11 = this[3184];
      size_t v12 = this[3185];
      BOOL v13 = (char *)*((void *)this + 1591);
      if (v11 < v12)
      {
LABEL_38:
        v4[3184] = v11 + 1;
        v13[v11] = 121;
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        return this;
      }
      unsigned int v14 = (void *)*((void *)this + 1593);
      uint64_t v15 = (char *)v14[1];
      if (&v13[v12] == v15)
      {
        unint64_t v17 = (unint64_t)&v13[v12 + 1];
        unint64_t v16 = v14[2];
        if (v17 <= v16)
        {
          v14[1] = v17;
          LODWORD(v18) = 1;
LABEL_37:
          v4[3185] = v12 + v18;
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v16 = v14[2];
      }
      if ((2 * v12) <= 4) {
        uint64_t v18 = 4;
      }
      else {
        uint64_t v18 = (2 * v12);
      }
      size_t v19 = v18 + v12;
      if (!v15 || (unint64_t)&v15[v19] > v16)
      {
        unint64_t v20 = 2 * v14[4];
        if (v20 <= v19 + 1) {
          unint64_t v20 = v19 + 1;
        }
        v14[4] = v20;
        unint64_t v21 = v20 + 8;
        this = (unsigned int *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
        unint64_t v22 = (char *)this + v21;
        *(void *)this = v14[3];
        uint64_t v15 = (char *)(this + 2);
        v14[2] = v22;
        void v14[3] = this;
      }
      v14[1] = &v15[v19];
      if (v12) {
        this = (unsigned int *)memcpy(v15, *((const void **)v4 + 1591), v12);
      }
      *((void *)v4 + 1591) = v15;
      LODWORD(v12) = v4[3185];
      BOOL v13 = v15;
      unsigned int v11 = v4[3184];
      goto LABEL_37;
    }
  }
  unsigned int v10 = a3 + 1;
}

uint64_t anonymous namespace'::Remangler::mangleAssociatedTypeRef@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  long long v17 = 0uLL;
  LOBYTE(v18) = 0;
  if (result) {
    goto LABEL_23;
  }
  int v9 = *((unsigned __int8 *)a2 + 18);
  unsigned int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      unsigned int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_10;
    }
    unsigned int v10 = 0;
  }
  if (v9 == 1)
  {
    size_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    if (v10 != v12) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if (v9 == 2)
  {
    size_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
    if (v10 != v12) {
      goto LABEL_17;
    }
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qa", 2uLL, this[1593]);
    unint64_t v14 = (unint64_t)this[1585];
    if (v14 > 0xF)
    {
      int v16 = *((_DWORD *)this + 3178) + 16;
      long long v19 = v17;
      uint64_t v20 = v18;
      int v21 = v16;
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 1586), (uint64_t)&v19, &v19);
    }
    else
    {
      this[1585] = (char *)(v14 + 1);
      uint64_t v15 = &this[3 * v14 + 1537];
      *(_OWORD *)uint64_t v15 = v17;
      *((unsigned char *)v15 + 16) = v18;
    }
LABEL_23:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if (v9 != 5)
  {
    size_t v12 = 0;
    if (!v10) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)a2;
LABEL_10:
  size_t v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
  if (v10 == v12) {
    goto LABEL_20;
  }
LABEL_17:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_20;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wt", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDefaultAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAccessorAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  uint64_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    uint64_t v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fMa", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    size_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleAssociatedTypeWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WT", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleBaseWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wb", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAutoClosureType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        size_t v12 = a2;
        if (v11 >= 2) {
          size_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "XK", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleBodyAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fMb", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    size_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t anonymous namespace'::Remangler::mangleBoundGenericEnum@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    unint64_t v10 = *(uint64_t **)v9;
    goto LABEL_7;
  }
  unint64_t v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if ((v11 - 1) < 2)
  {
LABEL_11:
    size_t v12 = (uint64_t *)*v10;
    goto LABEL_13;
  }
  if (v11 == 5 && *((_DWORD *)v10 + 2))
  {
    unint64_t v10 = (uint64_t *)*v10;
    goto LABEL_11;
  }
  size_t v12 = 0;
LABEL_13:
  if (*((_WORD *)v12 + 8) != 61)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 843;
    return this;
  }
  int v13 = *((unsigned __int8 *)v12 + 18);
  unint64_t v14 = (int ***)v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 != 5)
    {
      uint64_t v15 = 0;
      if (v13 == 2)
      {
LABEL_26:
        uint64_t v16 = v12[1];
        goto LABEL_29;
      }
      goto LABEL_23;
    }
    if (!*((_DWORD *)v12 + 2))
    {
      uint64_t v15 = 0;
      goto LABEL_28;
    }
    unint64_t v14 = (int ***)*v12;
  }
  uint64_t v15 = *v14;
  if (v13 == 2) {
    goto LABEL_26;
  }
LABEL_23:
  if (v13 == 5 && *((_DWORD *)v12 + 2) >= 2u)
  {
    size_t v12 = (uint64_t *)*v12;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v16 = 0;
LABEL_29:
  if (*((_WORD *)v15 + 8) == 153 && v15[1] == (int *)5)
  {
    long long v17 = *v15;
    int v18 = *v17;
    int v19 = *((unsigned __int8 *)v17 + 4);
    BOOL v20 = v18 == 1718187859 && v19 == 116;
    if (v20 && *(_WORD *)(v16 + 16) == 101 && *(void *)(v16 + 8) == 8 && **(void **)v16 == 0x6C616E6F6974704FLL)
    {
      v24[0] = 0;
      v24[1] = 0;
      char v25 = 0;
      if (this) {
        goto LABEL_51;
      }
      int v22 = *((unsigned __int8 *)v5 + 18);
      if (v22 != 2)
      {
        if (v22 != 5 || *((_DWORD *)v5 + 2) < 2u)
        {
          unsigned __int8 v23 = 0;
          goto LABEL_49;
        }
        uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
      }
      unsigned __int8 v23 = (swift::Demangle::__runtime::Node *)*((void *)v5 + 1);
LABEL_49:
      if (*(_DWORD *)a4) {
        return this;
      }
      swift::Demangle::__runtime::CharVector::append((char **)(v6 + 12728), "Sg", 2uLL, *(void **)(v6 + 12744));
      this = (uint64_t)swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)v6, (const swift::Demangle::__runtime::SubstitutionEntry *)v24);
LABEL_51:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
  }
  unsigned int v21 = a3 + 1;
}

void *anonymous namespace'::Remangler::mangleBoundGenericFunction@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  long long v28 = 0uLL;
  LOBYTE(v29) = 0;
  if (result) {
    goto LABEL_2;
  }
  uint64_t result = (void *)swift::Demangle::__runtime::getUnspecialized((unint64_t)a2, (swift::Demangle::__runtime::Node *)*this, (uint64_t)&v25);
  if (v25)
  {
    *(_OWORD *)a4 = v25;
    *(void *)(a4 + 16) = v26;
    return result;
  }
  int v9 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    char v24 = 121;
    if (!*(_DWORD *)a4)
    {
      unsigned int v10 = *((_DWORD *)this + 3184);
      size_t v11 = *((unsigned int *)this + 3185);
      size_t v12 = (char *)this[1591];
      if (v10 < v11) {
        goto LABEL_24;
      }
      int v13 = this[1593];
      unint64_t v14 = (char *)v13[1];
      if (&v12[v11] == v14)
      {
        unint64_t v16 = (unint64_t)&v12[v11 + 1];
        unint64_t v15 = v13[2];
        if (v16 <= v15)
        {
          v13[1] = v16;
          LODWORD(v17) = 1;
LABEL_23:
          *((_DWORD *)this + 3185) = v11 + v17;
LABEL_24:
          *((_DWORD *)this + 3184) = v10 + 1;
          v12[v10] = 71;
          unint64_t v21 = (unint64_t)this[1585];
          if (v21 > 0xF)
          {
            int v23 = *((_DWORD *)this + 3178) + 16;
            long long v30 = v28;
            uint64_t v31 = v29;
            int v32 = v23;
            uint64_t result = std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 1586), (uint64_t)&v30, &v30);
          }
          else
          {
            this[1585] = (const void *)(v21 + 1);
            int v22 = &this[3 * v21 + 1537];
            *(_OWORD *)int v22 = v28;
            *((unsigned char *)v22 + 16) = v29;
          }
LABEL_2:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          return result;
        }
      }
      else
      {
        unint64_t v15 = v13[2];
      }
      if ((2 * v11) <= 4) {
        uint64_t v17 = 4;
      }
      else {
        uint64_t v17 = (2 * v11);
      }
      size_t v18 = v17 + v11;
      if (!v14 || (unint64_t)&v14[v18] > v15)
      {
        unint64_t v19 = 2 * v13[4];
        if (v19 <= v18 + 1) {
          unint64_t v19 = v18 + 1;
        }
        v13[4] = v19;
        unint64_t v20 = v19 + 8;
        uint64_t result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        void *result = v13[3];
        unint64_t v14 = (char *)(result + 1);
        void v13[2] = (char *)result + v20;
        _OWORD v13[3] = result;
      }
      v13[1] = &v14[v18];
      if (v11) {
        uint64_t result = memcpy(v14, this[1591], v11);
      }
      this[1591] = v14;
      LODWORD(v11) = *((_DWORD *)this + 3185);
      size_t v12 = v14;
      unsigned int v10 = *((_DWORD *)this + 3184);
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t anonymous namespace'::Remangler::mangleBuiltinTypeName@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this;
  uint64_t v6 = (const void **)(this + 12728);
  unsigned int v7 = *(_DWORD *)(this + 12736);
  size_t v8 = *(unsigned int *)(this + 12740);
  int v9 = *(char **)(this + 12728);
  if (v7 < v8) {
    goto LABEL_20;
  }
  unsigned int v10 = *(void **)(this + 12744);
  size_t v11 = (char *)v10[1];
  if (&v9[v8] != v11)
  {
    unint64_t v12 = v10[2];
LABEL_5:
    if ((2 * v8) <= 4) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = (2 * v8);
    }
    size_t v15 = v14 + v8;
    if (v11) {
      BOOL v16 = (unint64_t)&v11[v14 + v8] > v12;
    }
    else {
      BOOL v16 = 1;
    }
    int v9 = (char *)v10[1];
    if (v16)
    {
      unint64_t v17 = 2 * v10[4];
      if (v17 <= v15 + 1) {
        unint64_t v17 = v15 + 1;
      }
      void v10[4] = v17;
      unint64_t v18 = v17 + 8;
      this = (uint64_t)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      *(void *)this = v10[3];
      int v9 = (char *)(this + 8);
      void v10[2] = this + v18;
      void v10[3] = this;
    }
    v10[1] = &v9[v15];
    if (v8) {
      this = (uint64_t)memcpy(v9, *v6, v8);
    }
    *(void *)(v4 + 12728) = v9;
    LODWORD(v8) = *(_DWORD *)(v4 + 12740);
    unsigned int v7 = *(_DWORD *)(v4 + 12736);
    goto LABEL_19;
  }
  unint64_t v13 = (unint64_t)&v9[v8 + 1];
  unint64_t v12 = v10[2];
  if (v13 > v12) {
    goto LABEL_5;
  }
  v10[1] = v13;
  LODWORD(v14) = 1;
LABEL_19:
  *(_DWORD *)(v4 + 12740) = v8 + v14;
LABEL_20:
  *(_DWORD *)(v4 + 12736) = v7 + 1;
  v9[v7] = 66;
  uint64_t v20 = *(void *)a2;
  unint64_t v19 = *((void *)a2 + 1);
  switch(v19)
  {
    case 0xBuLL:
      if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x626F4A2E6E69746CLL) {
        goto LABEL_29;
      }
      int v22 = (char **)v6;
      char v23 = 106;
      goto LABEL_213;
    case 0xCuLL:
      this = memcmp(*(const void **)a2, "Builtin.Word", *((void *)a2 + 1));
      if (!this)
      {
        int v22 = (char **)v6;
        char v23 = 119;
        goto LABEL_213;
      }
LABEL_29:
      if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x746E492E6E69746CLL) {
        goto LABEL_162;
      }
      goto LABEL_168;
    case 0x10uLL:
      if (*(void *)v20 == 0x2E6E69746C697542 && *(void *)(v20 + 8) == 0x726F747563657845)
      {
        int v22 = (char **)v6;
        char v23 = 101;
        goto LABEL_213;
      }
      if (*(void *)v20 == 0x2E6E69746C697542 && *(void *)(v20 + 8) == 0x6E656B6F544C4953)
      {
        int v22 = (char **)v6;
        char v23 = 116;
        goto LABEL_213;
      }
      goto LABEL_153;
    case 0x11uLL:
      this = memcmp(*(const void **)a2, "Builtin.PackIndex", *((void *)a2 + 1));
      if (!this)
      {
        int v22 = (char **)v6;
        char v23 = 80;
        goto LABEL_213;
      }
      if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x746E492E6E69746CLL) {
        goto LABEL_158;
      }
      goto LABEL_168;
    case 0x12uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x746E696F50776152
        || *(_WORD *)(v20 + 16) != 29285)
      {
        if (*(void *)v20 == 0x2E6E69746C697542
          && *(void *)(v20 + 8) == 0x726574694C746E49
          && *(_WORD *)(v20 + 16) == 27745)
        {
          int v22 = (char **)v6;
          char v23 = 73;
          goto LABEL_213;
        }
LABEL_153:
        if (*(void *)v20 == 0x2E6E69746C697542 && *(void *)(v20 + 3) == 0x746E492E6E69746CLL)
        {
LABEL_168:
          uint64_t v74 = 11;
          if (v19 < 0xB) {
            uint64_t v74 = v19;
          }
          char v75 = (const void *)(v20 + v74);
          size_t v76 = v19 - v74;
          long long v77 = (char **)v6;
          char v78 = 105;
        }
        else
        {
          if (v19 < 0xE)
          {
LABEL_162:
            if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 3) != 0x6365562E6E69746CLL)
            {
LABEL_166:
              *(_DWORD *)a3 = 9;
              *(void *)(a3 + 8) = a2;
              int v73 = 949;
LABEL_167:
              *(_DWORD *)(a3 + 16) = v73;
              return this;
            }
            uint64_t v79 = 11;
            if (v19 < 0xB) {
              uint64_t v79 = v19;
            }
            uint64_t v80 = (char *)(v20 + v79);
            unint64_t v81 = v19 - v79;
            if (v19 >= 0xC)
            {
              __int16 v88 = memchr(v80, 120, v19 - v79);
              unint64_t v82 = -1;
              if (v88) {
                unint64_t v82 = v88 - v80;
              }
            }
            else
            {
              unint64_t v82 = -1;
            }
            BOOL v89 = v81 > v82;
            if (v81 >= v82) {
              size_t v90 = v82;
            }
            else {
              size_t v90 = v81;
            }
            uint64_t v91 = (unsigned __int16 *)&v80[v90];
            uint64_t v92 = v89;
            if (v89) {
              uint64_t v91 = (unsigned __int16 *)((char *)v91 + 1);
            }
            unint64_t v138 = v91;
            size_t v139 = v81 - v90 - v92;
            if (v139 == 10
              && ((uint64_t v93 = *(void *)v91, v94 = v91[4], v93 == 0x746E696F50776152) ? (v95 = v94 == 29285) : (v95 = 0),
                  v95))
            {
              int v99 = (char **)v6;
              char v100 = 112;
            }
            else
            {
              if (__swift::__runtime::llvm::StringRef::consume_front((const void **)&v138, "FPIEEE", 6uLL))
              {
                std::string::size_type v96 = (char **)v6;
                char v97 = 102;
              }
              else
              {
                this = __swift::__runtime::llvm::StringRef::consume_front((const void **)&v138, "Int", 3uLL);
                if (!this)
                {
                  *(_DWORD *)a3 = 8;
                  *(void *)(a3 + 8) = a2;
                  int v73 = 945;
                  goto LABEL_167;
                }
                std::string::size_type v96 = (char **)v6;
                char v97 = 105;
              }
              int v98 = swift::Demangle::__runtime::RemanglerBuffer::operator<<(v96, v97);
              swift::Demangle::__runtime::CharVector::append(v98, v138, v139, v98[2]);
              int v99 = v98;
              char v100 = 95;
            }
            swift::Demangle::__runtime::RemanglerBuffer::operator<<(v99, v100);
            swift::Demangle::__runtime::CharVector::append((char **)v6, "Bv", 2uLL, *(void **)(v4 + 12744));
            uint64_t v85 = *(char **)(v4 + 12744);
            uint64_t v84 = (char **)v6;
            char v86 = v80;
            size_t v87 = v90;
            goto LABEL_212;
          }
LABEL_158:
          if (*(void *)v20 != 0x2E6E69746C697542 || *(void *)(v20 + 6) != 0x4545454950462E6ELL) {
            goto LABEL_162;
          }
          uint64_t v83 = 14;
          if (v19 < 0xE) {
            uint64_t v83 = v19;
          }
          char v75 = (const void *)(v20 + v83);
          size_t v76 = v19 - v83;
          long long v77 = (char **)v6;
          char v78 = 102;
        }
        uint64_t v84 = swift::Demangle::__runtime::RemanglerBuffer::operator<<(v77, v78);
        uint64_t v6 = (const void **)v84;
        uint64_t v85 = v84[2];
        char v86 = v75;
        size_t v87 = v76;
LABEL_212:
        swift::Demangle::__runtime::CharVector::append(v84, v86, v87, v85);
        int v22 = (char **)v6;
        char v23 = 95;
LABEL_213:
        this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<(v22, v23);
        goto LABEL_214;
      }
      unsigned int v101 = *(_DWORD *)(v4 + 12736);
      size_t v102 = *(unsigned int *)(v4 + 12740);
      int v103 = *(char **)(v4 + 12728);
      if (v101 < v102) {
        goto LABEL_257;
      }
      uint64_t v104 = *(void **)(v4 + 12744);
      unint64_t v105 = (char *)v104[1];
      if (&v103[v102] == v105)
      {
        unint64_t v123 = (unint64_t)&v103[v102 + 1];
        unint64_t v106 = v104[2];
        if (v123 <= v106)
        {
          v104[1] = v123;
          LODWORD(v124) = 1;
LABEL_256:
          *(_DWORD *)(v4 + 12740) = v102 + v124;
LABEL_257:
          *(_DWORD *)(v4 + 12736) = v101 + 1;
          v103[v101] = 112;
          goto LABEL_214;
        }
      }
      else
      {
        unint64_t v106 = v104[2];
      }
      if ((2 * v102) <= 4) {
        uint64_t v124 = 4;
      }
      else {
        uint64_t v124 = (2 * v102);
      }
      size_t v125 = v124 + v102;
      if (!v105 || (unint64_t)&v105[v125] > v106)
      {
        unint64_t v126 = 2 * v104[4];
        if (v126 <= v125 + 1) {
          unint64_t v126 = v125 + 1;
        }
        v104[4] = v126;
        unint64_t v127 = v126 + 8;
        this = (uint64_t)malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
        *(void *)this = v104[3];
        unint64_t v105 = (char *)(this + 8);
        v104[2] = this + v127;
        v104[3] = this;
      }
      v104[1] = &v105[v125];
      if (v102) {
        this = (uint64_t)memcpy(v105, *v6, v102);
      }
      *(void *)(v4 + 12728) = v105;
      LODWORD(v102) = *(_DWORD *)(v4 + 12740);
      int v103 = v105;
      unsigned int v101 = *(_DWORD *)(v4 + 12736);
      goto LABEL_256;
    case 0x14uLL:
      if (*(void *)v20 == 0x2E6E69746C697542
        && *(void *)(v20 + 8) == 0x624F656764697242
        && *(_DWORD *)(v20 + 16) == 1952671082)
      {
        unsigned int v107 = *(_DWORD *)(v4 + 12736);
        size_t v108 = *(unsigned int *)(v4 + 12740);
        int v109 = *(char **)(v4 + 12728);
        if (v107 < v108)
        {
LABEL_271:
          *(_DWORD *)(v4 + 12736) = v107 + 1;
          v109[v107] = 98;
          goto LABEL_214;
        }
        unint64_t v110 = *(void **)(v4 + 12744);
        int v111 = (char *)v110[1];
        if (&v109[v108] == v111)
        {
          unint64_t v128 = (unint64_t)&v109[v108 + 1];
          unint64_t v112 = v110[2];
          if (v128 <= v112)
          {
            v110[1] = v128;
            LODWORD(v129) = 1;
LABEL_270:
            *(_DWORD *)(v4 + 12740) = v108 + v129;
            goto LABEL_271;
          }
        }
        else
        {
          unint64_t v112 = v110[2];
        }
        if ((2 * v108) <= 4) {
          uint64_t v129 = 4;
        }
        else {
          uint64_t v129 = (2 * v108);
        }
        size_t v130 = v129 + v108;
        if (!v111 || (unint64_t)&v111[v130] > v112)
        {
          unint64_t v131 = 2 * v110[4];
          if (v131 <= v130 + 1) {
            unint64_t v131 = v130 + 1;
          }
          v110[4] = v131;
          unint64_t v132 = v131 + 8;
          this = (uint64_t)malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
          *(void *)this = v110[3];
          int v111 = (char *)(this + 8);
          v110[2] = this + v132;
          v110[3] = this;
        }
        v110[1] = &v111[v130];
        if (v108) {
          this = (uint64_t)memcpy(v111, *v6, v108);
        }
        *(void *)(v4 + 12728) = v111;
        LODWORD(v108) = *(_DWORD *)(v4 + 12740);
        int v109 = v111;
        unsigned int v107 = *(_DWORD *)(v4 + 12736);
        goto LABEL_270;
      }
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x624F65766974614ELL
        || *(_DWORD *)(v20 + 16) != 1952671082)
      {
        goto LABEL_153;
      }
      unsigned int v36 = *(_DWORD *)(v4 + 12736);
      size_t v37 = *(unsigned int *)(v4 + 12740);
      uint64_t v38 = *(char **)(v4 + 12728);
      if (v36 >= v37)
      {
        uint64_t v39 = *(void **)(v4 + 12744);
        char v40 = (char *)v39[1];
        if (&v38[v37] == v40)
        {
          unint64_t v133 = (unint64_t)&v38[v37 + 1];
          unint64_t v41 = v39[2];
          if (v133 <= v41)
          {
            v39[1] = v133;
            LODWORD(v134) = 1;
LABEL_289:
            *(_DWORD *)(v4 + 12740) = v37 + v134;
            goto LABEL_290;
          }
        }
        else
        {
          unint64_t v41 = v39[2];
        }
        if ((2 * v37) <= 4) {
          uint64_t v134 = 4;
        }
        else {
          uint64_t v134 = (2 * v37);
        }
        size_t v135 = v134 + v37;
        if (!v40 || (unint64_t)&v40[v135] > v41)
        {
          unint64_t v136 = 2 * v39[4];
          if (v136 <= v135 + 1) {
            unint64_t v136 = v135 + 1;
          }
          v39[4] = v136;
          unint64_t v137 = v136 + 8;
          this = (uint64_t)malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
          *(void *)this = v39[3];
          char v40 = (char *)(this + 8);
          v39[2] = this + v137;
          void v39[3] = this;
        }
        v39[1] = &v40[v135];
        if (v37) {
          this = (uint64_t)memcpy(v40, *v6, v37);
        }
        *(void *)(v4 + 12728) = v40;
        LODWORD(v37) = *(_DWORD *)(v4 + 12740);
        uint64_t v38 = v40;
        unsigned int v36 = *(_DWORD *)(v4 + 12736);
        goto LABEL_289;
      }
LABEL_290:
      *(_DWORD *)(v4 + 12736) = v36 + 1;
      v38[v36] = 111;
LABEL_214:
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
      return this;
    case 0x15uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x4F6E776F6E6B6E55
        || *(void *)(v20 + 13) != 0x7463656A624F6E77)
      {
        goto LABEL_153;
      }
      unsigned int v44 = *(_DWORD *)(v4 + 12736);
      size_t v45 = *(unsigned int *)(v4 + 12740);
      char v46 = *(char **)(v4 + 12728);
      if (v44 < v45) {
        goto LABEL_229;
      }
      uint64_t v47 = *(void **)(v4 + 12744);
      uint64_t v48 = (char *)v47[1];
      if (&v46[v45] == v48)
      {
        unint64_t v113 = (unint64_t)&v46[v45 + 1];
        unint64_t v49 = v47[2];
        if (v113 <= v49)
        {
          v47[1] = v113;
          LODWORD(v114) = 1;
          goto LABEL_228;
        }
      }
      else
      {
        unint64_t v49 = v47[2];
      }
      if ((2 * v45) <= 4) {
        uint64_t v114 = 4;
      }
      else {
        uint64_t v114 = (2 * v45);
      }
      size_t v115 = v114 + v45;
      if (!v48 || (unint64_t)&v48[v115] > v49)
      {
        unint64_t v116 = 2 * v47[4];
        if (v116 <= v115 + 1) {
          unint64_t v116 = v115 + 1;
        }
        v47[4] = v116;
        unint64_t v117 = v116 + 8;
        this = (uint64_t)malloc_type_malloc(v116 + 8, 0xD0263BC5uLL);
        *(void *)this = v47[3];
        uint64_t v48 = (char *)(this + 8);
        v47[2] = this + v117;
        void v47[3] = this;
      }
      v47[1] = &v48[v115];
      if (v45) {
        this = (uint64_t)memcpy(v48, *v6, v45);
      }
      *(void *)(v4 + 12728) = v48;
      LODWORD(v45) = *(_DWORD *)(v4 + 12740);
      char v46 = v48;
      unsigned int v44 = *(_DWORD *)(v4 + 12736);
LABEL_228:
      *(_DWORD *)(v4 + 12740) = v45 + v114;
LABEL_229:
      *(_DWORD *)(v4 + 12736) = v44 + 1;
      v46[v44] = 79;
      goto LABEL_214;
    case 0x19uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x6156656661736E55
        || *(void *)(v20 + 16) != 0x656666754265756CLL
        || *(unsigned char *)(v20 + 24) != 114)
      {
        goto LABEL_153;
      }
      unsigned int v53 = *(_DWORD *)(v4 + 12736);
      size_t v54 = *(unsigned int *)(v4 + 12740);
      char v55 = *(char **)(v4 + 12728);
      if (v53 < v54) {
        goto LABEL_243;
      }
      uint64_t v56 = *(void **)(v4 + 12744);
      uint64_t v57 = (char *)v56[1];
      if (&v55[v54] == v57)
      {
        unint64_t v118 = (unint64_t)&v55[v54 + 1];
        unint64_t v58 = v56[2];
        if (v118 <= v58)
        {
          v56[1] = v118;
          LODWORD(v119) = 1;
          goto LABEL_242;
        }
      }
      else
      {
        unint64_t v58 = v56[2];
      }
      if ((2 * v54) <= 4) {
        uint64_t v119 = 4;
      }
      else {
        uint64_t v119 = (2 * v54);
      }
      size_t v120 = v119 + v54;
      if (!v57 || (unint64_t)&v57[v120] > v58)
      {
        unint64_t v121 = 2 * v56[4];
        if (v121 <= v120 + 1) {
          unint64_t v121 = v120 + 1;
        }
        v56[4] = v121;
        unint64_t v122 = v121 + 8;
        this = (uint64_t)malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
        *(void *)this = v56[3];
        uint64_t v57 = (char *)(this + 8);
        void v56[2] = this + v122;
        v56[3] = this;
      }
      v56[1] = &v57[v120];
      if (v54) {
        this = (uint64_t)memcpy(v57, *v6, v54);
      }
      *(void *)(v4 + 12728) = v57;
      LODWORD(v54) = *(_DWORD *)(v4 + 12740);
      char v55 = v57;
      unsigned int v53 = *(_DWORD *)(v4 + 12736);
LABEL_242:
      *(_DWORD *)(v4 + 12740) = v54 + v119;
LABEL_243:
      *(_DWORD *)(v4 + 12736) = v53 + 1;
      v55[v53] = 66;
      goto LABEL_214;
    case 0x1BuLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x41746C7561666544
        || *(void *)(v20 + 16) != 0x726F7453726F7463
        || *(void *)(v20 + 19) != 0x656761726F745372)
      {
        goto LABEL_153;
      }
      int v22 = (char **)v6;
      char v23 = 68;
      goto LABEL_213;
    case 0x1DuLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x6661736E55776152
        || *(void *)(v20 + 16) != 0x756E69746E6F4365
        || *(void *)(v20 + 21) != 0x6E6F697461756E69)
      {
        goto LABEL_153;
      }
      int v22 = (char **)v6;
      char v23 = 99;
      goto LABEL_213;
    case 0x29uLL:
      if (*(void *)v20 != 0x2E6E69746C697542
        || *(void *)(v20 + 8) != 0x75616665446E6F4ELL
        || *(void *)(v20 + 16) != 0x697274736944746CLL
        || *(void *)(v20 + 24) != 0x7463416465747562
        || *(void *)(v20 + 32) != 0x6761726F7453726FLL
        || *(unsigned char *)(v20 + 40) != 101)
      {
        goto LABEL_153;
      }
      int v22 = (char **)v6;
      char v23 = 100;
      goto LABEL_213;
    default:
      if (v19 < 0xB) {
        goto LABEL_166;
      }
      goto LABEL_153;
  }
}

{
  uint64_t v4;
  const void **v6;
  unsigned int v7;
  size_t v8;
  char *v9;
  void *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v23;
  size_t v24;
  char *v25;
  void *v26;
  char *v27;
  unint64_t v28;
  unsigned int v31;
  size_t v32;
  char *v33;
  void *v34;
  char *v35;
  unint64_t v36;
  unsigned int v37;
  size_t v38;
  char *v39;
  void *v40;
  char *v41;
  unint64_t v42;
  BOOL v44;
  int v46;
  int v47;
  uint64_t v48;
  const void *v49;
  size_t v50;
  char **v51;
  char v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  size_t v56;
  char **v57;
  char v58;
  unsigned int v59;
  size_t v60;
  char *v61;
  void *v62;
  char *v63;
  unint64_t v64;
  unsigned int v65;
  size_t v66;
  char *v67;
  void *v68;
  char *v69;
  unint64_t v70;
  unsigned char *v71;
  char **v72;
  char **v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char **v81;
  unint64_t v82;
  uint64_t v83;
  size_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  size_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  size_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  size_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  size_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;

  uint64_t v4 = this;
  uint64_t v6 = (const void **)(this + 12728);
  unsigned int v7 = *(_DWORD *)(this + 12736);
  size_t v8 = *(unsigned int *)(this + 12740);
  int v9 = *(char **)(this + 12728);
  if (v7 < v8) {
    goto LABEL_20;
  }
  unsigned int v10 = *(void **)(this + 12744);
  size_t v11 = (char *)v10[1];
  if (&v9[v8] != v11)
  {
    unint64_t v12 = v10[2];
LABEL_5:
    if ((2 * v8) <= 4) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = (2 * v8);
    }
    size_t v15 = v14 + v8;
    if (v11) {
      BOOL v16 = (unint64_t)&v11[v14 + v8] > v12;
    }
    else {
      BOOL v16 = 1;
    }
    int v9 = (char *)v10[1];
    if (v16)
    {
      unint64_t v17 = 2 * v10[4];
      if (v17 <= v15 + 1) {
        unint64_t v17 = v15 + 1;
      }
      void v10[4] = v17;
      unint64_t v18 = v17 + 8;
      this = (uint64_t)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      unint64_t v19 = this + v18;
      *(void *)this = v10[3];
      int v9 = (char *)(this + 8);
      void v10[2] = v19;
      void v10[3] = this;
    }
    v10[1] = &v9[v15];
    if (v8) {
      this = (uint64_t)memcpy(v9, *v6, v8);
    }
    *(void *)(v4 + 12728) = v9;
    LODWORD(v8) = *(_DWORD *)(v4 + 12740);
    unsigned int v7 = *(_DWORD *)(v4 + 12736);
    goto LABEL_19;
  }
  unint64_t v13 = (unint64_t)&v9[v8 + 1];
  unint64_t v12 = v10[2];
  if (v13 > v12) {
    goto LABEL_5;
  }
  v10[1] = v13;
  LODWORD(v14) = 1;
LABEL_19:
  *(_DWORD *)(v4 + 12740) = v8 + v14;
LABEL_20:
  *(_DWORD *)(v4 + 12736) = v7 + 1;
  v9[v7] = 66;
  unint64_t v21 = *(void *)a2;
  uint64_t v20 = *((void *)a2 + 1);
  switch(v20)
  {
    case 0xCuLL:
      this = memcmp(*(const void **)a2, "Builtin.Word", *((void *)a2 + 1));
      if (!this)
      {
        uint64_t v57 = (char **)v6;
        unint64_t v58 = 119;
        goto LABEL_114;
      }
      if (*(void *)v21 == 0x2E6E69746C697542 && *(void *)(v21 + 3) == 0x746E492E6E69746CLL) {
        goto LABEL_64;
      }
      goto LABEL_59;
    case 0x12uLL:
      this = memcmp(*(const void **)a2, "Builtin.RawPointer", *((void *)a2 + 1));
      if (this) {
        goto LABEL_50;
      }
      char v23 = *(_DWORD *)(v4 + 12736);
      char v24 = *(unsigned int *)(v4 + 12740);
      long long v25 = *(char **)(v4 + 12728);
      if (v23 < v24) {
        goto LABEL_130;
      }
      uint64_t v26 = *(void **)(v4 + 12744);
      int v27 = (char *)v26[1];
      if (&v25[v24] == v27)
      {
        unint64_t v82 = (unint64_t)&v25[v24 + 1];
        long long v28 = v26[2];
        if (v82 <= v28)
        {
          v26[1] = v82;
          LODWORD(v83) = 1;
          goto LABEL_129;
        }
      }
      else
      {
        long long v28 = v26[2];
      }
      if ((2 * v24) <= 4) {
        uint64_t v83 = 4;
      }
      else {
        uint64_t v83 = (2 * v24);
      }
      uint64_t v84 = v83 + v24;
      if (!v27 || (unint64_t)&v27[v84] > v28)
      {
        uint64_t v85 = 2 * v26[4];
        if (v85 <= v84 + 1) {
          uint64_t v85 = v84 + 1;
        }
        v26[4] = v85;
        char v86 = v85 + 8;
        this = (uint64_t)malloc_type_malloc(v85 + 8, 0xD0263BC5uLL);
        size_t v87 = this + v86;
        *(void *)this = v26[3];
        int v27 = (char *)(this + 8);
        v26[2] = v87;
        void v26[3] = this;
      }
      v26[1] = &v27[v84];
      if (v24) {
        this = (uint64_t)memcpy(v27, *v6, v24);
      }
      *(void *)(v4 + 12728) = v27;
      LODWORD(v24) = *(_DWORD *)(v4 + 12740);
      long long v25 = v27;
      char v23 = *(_DWORD *)(v4 + 12736);
LABEL_129:
      *(_DWORD *)(v4 + 12740) = v24 + v83;
LABEL_130:
      uint64_t v47 = 0;
      a2 = 0;
      char v46 = 0;
      *(_DWORD *)(v4 + 12736) = v23 + 1;
      v25[v23] = 112;
      goto LABEL_115;
    case 0x14uLL:
      if (*(void *)v21 != 0x2E6E69746C697542
        || *(void *)(v21 + 8) != 0x624F656764697242
        || *(_DWORD *)(v21 + 16) != 1952671082)
      {
        this = memcmp(*(const void **)a2, "Builtin.NativeObject", *((void *)a2 + 1));
        if (!this)
        {
          uint64_t v31 = *(_DWORD *)(v4 + 12736);
          int v32 = *(unsigned int *)(v4 + 12740);
          uint64_t v33 = *(char **)(v4 + 12728);
          if (v31 < v32)
          {
LABEL_191:
            uint64_t v47 = 0;
            a2 = 0;
            char v46 = 0;
            *(_DWORD *)(v4 + 12736) = v31 + 1;
            v33[v31] = 111;
            goto LABEL_115;
          }
          int v34 = *(void **)(v4 + 12744);
          uint64_t v35 = (char *)v34[1];
          if (&v33[v32] == v35)
          {
            unint64_t v106 = (unint64_t)&v33[v32 + 1];
            unsigned int v36 = v34[2];
            if (v106 <= v36)
            {
              v34[1] = v106;
              LODWORD(v107) = 1;
LABEL_190:
              *(_DWORD *)(v4 + 12740) = v32 + v107;
              goto LABEL_191;
            }
          }
          else
          {
            unsigned int v36 = v34[2];
          }
          if ((2 * v32) <= 4) {
            unsigned int v107 = 4;
          }
          else {
            unsigned int v107 = (2 * v32);
          }
          size_t v108 = v107 + v32;
          if (!v35 || (unint64_t)&v35[v108] > v36)
          {
            int v109 = 2 * v34[4];
            if (v109 <= v108 + 1) {
              int v109 = v108 + 1;
            }
            v34[4] = v109;
            unint64_t v110 = v109 + 8;
            this = (uint64_t)malloc_type_malloc(v109 + 8, 0xD0263BC5uLL);
            int v111 = this + v110;
            *(void *)this = v34[3];
            uint64_t v35 = (char *)(this + 8);
            uint64_t v34[2] = v111;
            void v34[3] = this;
          }
          v34[1] = &v35[v108];
          if (v32) {
            this = (uint64_t)memcpy(v35, *v6, v32);
          }
          *(void *)(v4 + 12728) = v35;
          LODWORD(v32) = *(_DWORD *)(v4 + 12740);
          uint64_t v33 = v35;
          uint64_t v31 = *(_DWORD *)(v4 + 12736);
          goto LABEL_190;
        }
LABEL_50:
        if (*(void *)v21 == 0x2E6E69746C697542 && *(void *)(v21 + 3) == 0x746E492E6E69746CLL)
        {
LABEL_64:
          uint64_t v48 = 11;
          if (v20 < 0xB) {
            uint64_t v48 = v20;
          }
          unint64_t v49 = (const void *)(v21 + v48);
          uint64_t v50 = v20 - v48;
LABEL_67:
          uint64_t v51 = (char **)v6;
          char v52 = 105;
LABEL_113:
          unint64_t v81 = swift::Demangle::__runtime::RemanglerBuffer::operator<<(v51, v52);
          swift::Demangle::__runtime::CharVector::append(v81, v49, v50, v81[2]);
          uint64_t v57 = v81;
          unint64_t v58 = 95;
          goto LABEL_114;
        }
        if (v20 >= 0xE
          && (*(void *)v21 == 0x2E6E69746C697542 ? (unsigned int v44 = *(void *)(v21 + 6) == 0x4545454950462E6ELL) : (unsigned int v44 = 0),
              v44))
        {
          unint64_t v49 = (const void *)(v21 + 14);
          uint64_t v50 = v20 - 14;
        }
        else
        {
LABEL_59:
          if (*(void *)v21 != 0x2E6E69746C697542 || *(void *)(v21 + 3) != 0x6365562E6E69746CLL)
          {
LABEL_63:
            char v46 = 1553;
            uint64_t v47 = 9;
            goto LABEL_115;
          }
          unsigned int v53 = 11;
          if (v20 < 0xB) {
            unsigned int v53 = v20;
          }
          size_t v54 = (void *)(v21 + v53);
          char v55 = v20 - v53;
          if (v20 >= 0xC)
          {
            int v71 = memchr(v54, 120, v20 - v53);
            if (v71) {
              uint64_t v56 = v71 - (unsigned char *)v54;
            }
            else {
              uint64_t v56 = -1;
            }
          }
          else
          {
            uint64_t v56 = -1;
          }
          uint64_t v72 = swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)v6, 118);
          int v73 = v72;
          uint64_t v74 = v55 > v56;
          if (v55 < v56) {
            uint64_t v56 = v55;
          }
          char v75 = v74;
          if (v74) {
            size_t v76 = (uint64_t)v54 + v56 + 1;
          }
          else {
            size_t v76 = (uint64_t)v54 + v56;
          }
          swift::Demangle::__runtime::CharVector::append(v72, v54, v56, v72[2]);
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<(v73, 66);
          long long v77 = v55 - v56 - v75;
          if (v77 == 10)
          {
            if (*(void *)v76 == 0x746E696F50776152 && *(_WORD *)(v76 + 8) == 29285)
            {
              uint64_t v57 = (char **)v6;
              unint64_t v58 = 112;
LABEL_114:
              this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<(v57, v58);
              uint64_t v47 = 0;
              a2 = 0;
              char v46 = 0;
              goto LABEL_115;
            }
          }
          else if (v77 < 6)
          {
            if (v77 < 3)
            {
LABEL_109:
              char v46 = 1550;
              uint64_t v47 = 8;
              goto LABEL_115;
            }
            goto LABEL_105;
          }
          if (*(_DWORD *)v76 != 1162432582 || *(_WORD *)(v76 + 4) != 17733)
          {
LABEL_105:
            if (*(_WORD *)v76 != 28233 || *(unsigned char *)(v76 + 2) != 116) {
              goto LABEL_109;
            }
            unint64_t v49 = (const void *)(v76 + 3);
            uint64_t v50 = v77 - 3;
            goto LABEL_67;
          }
          unint64_t v49 = (const void *)(v76 + 6);
          uint64_t v50 = v77 - 6;
        }
        uint64_t v51 = (char **)v6;
        char v52 = 102;
        goto LABEL_113;
      }
      uint64_t v59 = *(_DWORD *)(v4 + 12736);
      uint64_t v60 = *(unsigned int *)(v4 + 12740);
      char v61 = *(char **)(v4 + 12728);
      if (v59 < v60) {
        goto LABEL_158;
      }
      uint64_t v62 = *(void **)(v4 + 12744);
      uint64_t v63 = (char *)v62[1];
      if (&v61[v60] == v63)
      {
        int v94 = (unint64_t)&v61[v60 + 1];
        char v64 = v62[2];
        if (v94 <= v64)
        {
          v62[1] = v94;
          LODWORD(v95) = 1;
          goto LABEL_157;
        }
      }
      else
      {
        char v64 = v62[2];
      }
      if ((2 * v60) <= 4) {
        BOOL v95 = 4;
      }
      else {
        BOOL v95 = (2 * v60);
      }
      std::string::size_type v96 = v95 + v60;
      if (!v63 || (unint64_t)&v63[v96] > v64)
      {
        char v97 = 2 * v62[4];
        if (v97 <= v96 + 1) {
          char v97 = v96 + 1;
        }
        v62[4] = v97;
        int v98 = v97 + 8;
        this = (uint64_t)malloc_type_malloc(v97 + 8, 0xD0263BC5uLL);
        int v99 = this + v98;
        *(void *)this = v62[3];
        uint64_t v63 = (char *)(this + 8);
        v62[2] = v99;
        void v62[3] = this;
      }
      v62[1] = &v63[v96];
      if (v60) {
        this = (uint64_t)memcpy(v63, *v6, v60);
      }
      *(void *)(v4 + 12728) = v63;
      LODWORD(v60) = *(_DWORD *)(v4 + 12740);
      char v61 = v63;
      uint64_t v59 = *(_DWORD *)(v4 + 12736);
LABEL_157:
      *(_DWORD *)(v4 + 12740) = v60 + v95;
LABEL_158:
      uint64_t v47 = 0;
      a2 = 0;
      char v46 = 0;
      *(_DWORD *)(v4 + 12736) = v59 + 1;
      v61[v59] = 98;
LABEL_115:
      *(_DWORD *)a3 = v47;
      *(void *)(a3 + 8) = a2;
      *(_DWORD *)(a3 + 16) = v46;
      return this;
    case 0x15uLL:
      this = memcmp(*(const void **)a2, "Builtin.UnknownObject", *((void *)a2 + 1));
      if (this) {
        goto LABEL_50;
      }
      size_t v37 = *(_DWORD *)(v4 + 12736);
      uint64_t v38 = *(unsigned int *)(v4 + 12740);
      uint64_t v39 = *(char **)(v4 + 12728);
      if (v37 < v38) {
        goto LABEL_144;
      }
      char v40 = *(void **)(v4 + 12744);
      unint64_t v41 = (char *)v40[1];
      if (&v39[v38] == v41)
      {
        __int16 v88 = (unint64_t)&v39[v38 + 1];
        uint64_t v42 = v40[2];
        if (v88 <= v42)
        {
          v40[1] = v88;
          LODWORD(v89) = 1;
          goto LABEL_143;
        }
      }
      else
      {
        uint64_t v42 = v40[2];
      }
      if ((2 * v38) <= 4) {
        BOOL v89 = 4;
      }
      else {
        BOOL v89 = (2 * v38);
      }
      size_t v90 = v89 + v38;
      if (!v41 || (unint64_t)&v41[v90] > v42)
      {
        uint64_t v91 = 2 * v40[4];
        if (v91 <= v90 + 1) {
          uint64_t v91 = v90 + 1;
        }
        v40[4] = v91;
        uint64_t v92 = v91 + 8;
        this = (uint64_t)malloc_type_malloc(v91 + 8, 0xD0263BC5uLL);
        uint64_t v93 = this + v92;
        *(void *)this = v40[3];
        unint64_t v41 = (char *)(this + 8);
        v40[2] = v93;
        void v40[3] = this;
      }
      v40[1] = &v41[v90];
      if (v38) {
        this = (uint64_t)memcpy(v41, *v6, v38);
      }
      *(void *)(v4 + 12728) = v41;
      LODWORD(v38) = *(_DWORD *)(v4 + 12740);
      uint64_t v39 = v41;
      size_t v37 = *(_DWORD *)(v4 + 12736);
LABEL_143:
      *(_DWORD *)(v4 + 12740) = v38 + v89;
LABEL_144:
      uint64_t v47 = 0;
      a2 = 0;
      char v46 = 0;
      *(_DWORD *)(v4 + 12736) = v37 + 1;
      v39[v37] = 79;
      goto LABEL_115;
    case 0x19uLL:
      this = memcmp(*(const void **)a2, "Builtin.UnsafeValueBuffer", *((void *)a2 + 1));
      if (this) {
        goto LABEL_50;
      }
      uint64_t v65 = *(_DWORD *)(v4 + 12736);
      uint64_t v66 = *(unsigned int *)(v4 + 12740);
      char v67 = *(char **)(v4 + 12728);
      if (v65 < v66) {
        goto LABEL_172;
      }
      long long v68 = *(void **)(v4 + 12744);
      long long v69 = (char *)v68[1];
      if (&v67[v66] == v69)
      {
        char v100 = (unint64_t)&v67[v66 + 1];
        uint64_t v70 = v68[2];
        if (v100 <= v70)
        {
          v68[1] = v100;
          LODWORD(v101) = 1;
          goto LABEL_171;
        }
      }
      else
      {
        uint64_t v70 = v68[2];
      }
      if ((2 * v66) <= 4) {
        unsigned int v101 = 4;
      }
      else {
        unsigned int v101 = (2 * v66);
      }
      size_t v102 = v101 + v66;
      if (!v69 || (unint64_t)&v69[v102] > v70)
      {
        int v103 = 2 * v68[4];
        if (v103 <= v102 + 1) {
          int v103 = v102 + 1;
        }
        v68[4] = v103;
        uint64_t v104 = v103 + 8;
        this = (uint64_t)malloc_type_malloc(v103 + 8, 0xD0263BC5uLL);
        unint64_t v105 = this + v104;
        *(void *)this = v68[3];
        long long v69 = (char *)(this + 8);
        v68[2] = v105;
        v68[3] = this;
      }
      v68[1] = &v69[v102];
      if (v66) {
        this = (uint64_t)memcpy(v69, *v6, v66);
      }
      *(void *)(v4 + 12728) = v69;
      LODWORD(v66) = *(_DWORD *)(v4 + 12740);
      char v67 = v69;
      uint64_t v65 = *(_DWORD *)(v4 + 12736);
LABEL_171:
      *(_DWORD *)(v4 + 12740) = v66 + v101;
LABEL_172:
      uint64_t v47 = 0;
      a2 = 0;
      char v46 = 0;
      *(_DWORD *)(v4 + 12736) = v65 + 1;
      v67[v65] = 66;
      goto LABEL_115;
    default:
      if (v20 < 0xB) {
        goto LABEL_63;
      }
      goto LABEL_50;
  }
}

void *anonymous namespace'::Remangler::mangleCFunctionPointer@<X0>(swift::Demangle::__runtime::NodeFactory **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  size_t v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5)
    {
LABEL_11:
      switch(v7)
      {
        case 1:
LABEL_16:
          unsigned int v10 = a3 + 1;
          uint64_t v11 = v7 - 1;
          while (1)
          {
            unint64_t v12 = *((unsigned __int8 *)v4 + 18);
            unsigned int v13 = v12 - 1;
            if (v12 != 1)
            {
              if (v12 == 5)
              {
                unint64_t v12 = *((unsigned int *)v4 + 2);
              }
              else
              {
                if (v12 != 2) {
                  goto LABEL_17;
                }
                unint64_t v12 = 2;
              }
            }
            if (v12 > v11)
            {
              uint64_t v14 = v4;
              if (v13 >= 2) {
                uint64_t v14 = *(swift::Demangle::__runtime::Node **)v4;
              }
              if (*(_DWORD *)a4) {
                return result;
              }
              goto LABEL_18;
            }
LABEL_17:
            *(_DWORD *)a4 = 0;
            *(void *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = 0;
LABEL_18:
            if (--v11 == -1) {
              goto LABEL_29;
            }
          }
        case 5:
          uint64_t v7 = *((unsigned int *)a2 + 2);
          if (v7) {
            goto LABEL_16;
          }
          break;
        case 2:
          uint64_t v7 = 2;
          goto LABEL_16;
      }
LABEL_29:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      BOOL v16 = (char **)(this + 1591);
      unint64_t v17 = this[1593];
      unint64_t v18 = "XC";
      size_t v19 = 2;
      goto LABEL_51;
    }
    if (!*((_DWORD *)a2 + 2)) {
      goto LABEL_29;
    }
    size_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v8 + 16) != 23) {
    goto LABEL_11;
  }
  if (v7 != 1)
  {
    if (v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
    }
    else
    {
      BOOL v9 = v7 == 2;
      uint64_t v7 = 2;
      if (!v9) {
        uint64_t v7 = 0;
      }
    }
  }
  unsigned int v20 = a3 + 1;
  uint64_t v21 = v7 - 1;
  while (v21)
  {
    unint64_t v22 = *((unsigned __int8 *)v4 + 18);
    unsigned int v23 = v22 - 1;
    if (v22 != 1)
    {
      if (v22 == 5)
      {
        unint64_t v22 = *((unsigned int *)v4 + 2);
      }
      else
      {
        if (v22 != 2) {
          goto LABEL_32;
        }
        unint64_t v22 = 2;
      }
    }
    if (v22 <= v21)
    {
LABEL_32:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      --v21;
    }
    else
    {
      char v24 = v4;
      if (v23 >= 2) {
        char v24 = *(swift::Demangle::__runtime::Node **)v4;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
    }
  }
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XzC", 3uLL, this[1593]);
  int v25 = *((unsigned __int8 *)v4 + 18);
  if ((v25 - 1) < 2) {
    goto LABEL_48;
  }
  if (v25 == 5 && *((_DWORD *)v4 + 2))
  {
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_48:
    uint64_t v26 = *(swift::Demangle::__runtime::Node **)v4;
  }
  else
  {
    uint64_t v26 = 0;
  }
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *((void *)v26 + 1), this[1593]);
  unint64_t v18 = *(const char **)v26;
  size_t v19 = *((void *)v26 + 1);
  unint64_t v17 = this[1593];
  BOOL v16 = (char **)(this + 1591);
LABEL_51:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v16, v18, v19, v17);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleClangType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (char **)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *((void *)a2 + 1), *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v6, *(const void **)a2, *((void *)a2 + 1), *((void **)this + 1593));
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleClassMetadataBaseOffset@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mo", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleConcreteProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }
  unsigned int v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v16 = 321;
      int v17 = 10;
LABEL_18:
      *(_DWORD *)a4 = v17;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v16;
      return this;
    }
    unsigned int v10 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  unsigned int v12 = a3 + 1;
  int v13 = *((unsigned __int8 *)a2 + 18);
  uint64_t v14 = (swift::Demangle::__runtime::Node *)a2;
  if (v13 == 2) {
    goto LABEL_16;
  }
  if (v13 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    uint64_t v14 = *a2;
LABEL_16:
    size_t v15 = (swift::Demangle::__runtime::Node *)*((void *)v14 + 1);
    goto LABEL_21;
  }
  size_t v15 = 0;
LABEL_21:
  if (!*(_DWORD *)a4)
  {
    if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u)
    {
      swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, "y", 1uLL, *((void **)v6 + 1593));
LABEL_27:
      this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, "HC", 2uLL, *((void **)v6 + 1593));
      int v17 = 0;
      unsigned int v10 = 0;
      int v16 = 0;
      goto LABEL_18;
    }
    if (!*(_DWORD *)a4) {
      goto LABEL_27;
    }
  }
  return this;
}

void *anonymous namespace'::Remangler::manglePackProtocolConformance@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HX", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleConformanceAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fMc", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unsigned int v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleCoroutineContinuationPrototype@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      BOOL v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  BOOL v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TC", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDeallocator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      BOOL v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      BOOL v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  BOOL v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDefaultArgumentInitializer@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fA", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 != 2)
  {
    if (v11 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  unsigned int v12 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

uint64_t anonymous namespace'::Remangler::mangleDependentAssociatedConformance@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v6 = (_anonymous_namespace_::Remangler *)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }
  unsigned int v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v14 = 321;
      int v15 = 10;
LABEL_44:
      *(_DWORD *)a4 = v15;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v14;
      return this;
    }
    unsigned int v10 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)v5 + 18);
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_16:
    int v13 = (uint64_t *)*((void *)v5 + 1);
    goto LABEL_19;
  }
  int v13 = 0;
LABEL_19:
  if (*((_WORD *)v13 + 8) != 232) {
    goto LABEL_26;
  }
  int v16 = *((unsigned __int8 *)v13 + 18);
  if ((v16 - 1) < 2) {
    goto LABEL_24;
  }
  if (v16 == 5 && *((_DWORD *)v13 + 2))
  {
    int v13 = (uint64_t *)*v13;
LABEL_24:
    int v13 = (uint64_t *)*v13;
    goto LABEL_26;
  }
  int v13 = 0;
LABEL_26:
  if (this)
  {
LABEL_43:
    int v15 = 0;
    unsigned int v10 = 0;
    int v14 = 0;
    goto LABEL_44;
  }
  int v17 = *((unsigned __int8 *)v13 + 18);
  unint64_t v18 = (swift::Demangle::__runtime::Node **)v13;
  if ((v17 - 1) >= 2)
  {
    if (v17 == 5)
    {
      size_t v19 = (uint64_t *)*v13;
      unint64_t v18 = (swift::Demangle::__runtime::Node **)*v13;
LABEL_35:
      unsigned int v20 = (swift::Demangle::__runtime::Node **)&v19[*((unsigned int *)v13 + 2)];
      goto LABEL_39;
    }
    unint64_t v18 = 0;
  }
  switch(v17)
  {
    case 1:
      unsigned int v20 = (swift::Demangle::__runtime::Node **)(v13 + 1);
      break;
    case 2:
      unsigned int v20 = (swift::Demangle::__runtime::Node **)(v13 + 2);
      break;
    case 5:
      size_t v19 = (uint64_t *)*v13;
      goto LABEL_35;
    default:
      unsigned int v20 = 0;
      break;
  }
LABEL_39:
  if (v18 == v20) {
    goto LABEL_43;
  }
  unsigned int v21 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v18 == v20) {
      goto LABEL_43;
    }
  }
}

void anonymous namespace'::Remangler::mangleDependentAssociatedTypeRef(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    BOOL v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    uint64_t v10 = *(void *)v9;
    goto LABEL_7;
  }
  uint64_t v10 = 0;
LABEL_7:
  long long v15 = 0uLL;
  LOBYTE(v16) = 0;
  {
    unint64_t v11 = *((void *)this + 1585);
    if (v11 > 0xF)
    {
      int v13 = *((_DWORD *)this + 3178) + 16;
      long long v17 = v15;
      uint64_t v18 = v16;
      int v19 = v13;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v17, &v17);
    }
    else
    {
      *((void *)this + 1585) = v11 + 1;
      int v12 = (char *)this + 24 * v11 + 12296;
      *(_OWORD *)int v12 = v15;
      unsigned char v12[16] = v16;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v14 = *((unsigned __int8 *)v5 + 18);
  if (v14 == 2) {
    goto LABEL_15;
  }
  if (v14 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_15:
    return;
  }
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericConformanceRequirement@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1048;
      return this;
    }
    int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  BOOL v9 = (uint64_t *)*((void *)v8 + 1);
  int v10 = *((unsigned __int8 *)v9 + 18);
  unint64_t v11 = v9;
  if ((v10 - 1) >= 2)
  {
    if (v10 != 5 || !*((_DWORD *)v9 + 2))
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = 1050;
      return this;
    }
    unint64_t v11 = (uint64_t *)*v9;
  }
  unsigned int v12 = a3 + 1;
  if (*(_WORD *)(*v11 + 16) != 180)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    int v13 = *((unsigned __int8 *)a2 + 18);
    int v14 = (swift::Demangle::__runtime::Node **)a2;
    if ((v13 - 1) >= 2)
    {
      if (v13 != 5 || !*((_DWORD *)a2 + 2))
      {
        long long v15 = 0;
LABEL_30:
        if (v29)
        {
LABEL_52:
          *(_OWORD *)a4 = v29;
          *(void *)(a4 + 16) = v30;
          return this;
        }
        int v19 = v32;
        if ((v31 & 0x80000000) == 0 && !v32)
        {
          *(_DWORD *)a4 = 1;
          *(void *)(a4 + 8) = a2;
          *(_DWORD *)(a4 + 16) = 1082;
          return this;
        }
        if (v31 == 1)
        {
          int v27 = "Rc";
        }
        else if (v31)
        {
          if (v31 == -1)
          {
            char v24 = (char **)(v5 + 1591);
            int v25 = (void *)v5[1593];
            uint64_t v26 = "RB";
            goto LABEL_65;
          }
          int v27 = "RC";
        }
        else
        {
          int v27 = "Rb";
        }
        goto LABEL_72;
      }
      int v14 = *(swift::Demangle::__runtime::Node ***)a2;
    }
    long long v15 = *v14;
    goto LABEL_30;
  }
  if (*((_WORD *)v9 + 8) != 232) {
    goto LABEL_25;
  }
  if ((v10 - 1) < 2) {
    goto LABEL_15;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    BOOL v9 = (uint64_t *)*v9;
LABEL_15:
    BOOL v9 = (uint64_t *)*v9;
    goto LABEL_25;
  }
  BOOL v9 = 0;
LABEL_25:
  {
    int v16 = *((unsigned __int8 *)v9 + 18);
    long long v17 = (swift::Demangle::__runtime::Node **)v9;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        uint64_t v18 = (uint64_t *)*v9;
        long long v17 = (swift::Demangle::__runtime::Node **)*v9;
LABEL_39:
        unsigned int v20 = (swift::Demangle::__runtime::Node **)&v18[*((unsigned int *)v9 + 2)];
        goto LABEL_45;
      }
      long long v17 = 0;
    }
    switch(v16)
    {
      case 1:
        unsigned int v20 = (swift::Demangle::__runtime::Node **)(v9 + 1);
        goto LABEL_45;
      case 2:
        unsigned int v20 = (swift::Demangle::__runtime::Node **)(v9 + 2);
        goto LABEL_45;
      case 5:
        uint64_t v18 = (uint64_t *)*v9;
        goto LABEL_39;
    }
    unsigned int v20 = 0;
LABEL_45:
    while (v17 != v20)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      ++v17;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v21 = *((unsigned __int8 *)a2 + 18);
  unint64_t v22 = (swift::Demangle::__runtime::Node **)a2;
  if ((v21 - 1) < 2) {
    goto LABEL_50;
  }
  unsigned int v23 = 0;
  if (v21 != 5) {
    goto LABEL_51;
  }
  if (*((_DWORD *)a2 + 2))
  {
    unint64_t v22 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_50:
    unsigned int v23 = *v22;
    goto LABEL_51;
  }
  unsigned int v23 = 0;
LABEL_51:
  if (v29) {
    goto LABEL_52;
  }
  int v19 = v32;
  if ((v31 & 0x80000000) == 0 && !v32)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1058;
    return this;
  }
  if (v31 == 1)
  {
    int v27 = "Rp";
LABEL_72:
    size_t v28 = 2;
    goto LABEL_73;
  }
  if (!v31)
  {
    int v27 = "R";
    size_t v28 = 1;
LABEL_73:
    swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, v27, v28, (void *)v5[1593]);
    goto LABEL_74;
  }
  if (v31 != -1)
  {
    int v27 = "RP";
    goto LABEL_72;
  }
  char v24 = (char **)(v5 + 1591);
  int v25 = (void *)v5[1593];
  uint64_t v26 = "RQ";
LABEL_65:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v24, v26, 2uLL, v25);
LABEL_74:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericParamType@<X0>(unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = (uint64_t *)a2;
  if ((v6 - 1) >= 2) {
    int v7 = *a2;
  }
  if (!*(void *)*v7)
  {
    int v8 = a2;
    if (v6 == 5) {
      int v8 = (uint64_t **)*a2;
    }
    if (!*v8[1])
    {
      unsigned int v23 = this[3184];
      size_t v24 = this[3185];
      int v25 = (char *)*((void *)this + 1591);
      if (v23 < v24)
      {
LABEL_46:
        *(_DWORD *)(v4 + 12736) = v23 + 1;
        v25[v23] = 120;
        goto LABEL_27;
      }
      uint64_t v26 = (void *)*((void *)this + 1593);
      int v27 = (char *)v26[1];
      if (&v25[v24] == v27)
      {
        unint64_t v29 = (unint64_t)&v25[v24 + 1];
        unint64_t v28 = v26[2];
        if (v29 <= v28)
        {
          v26[1] = v29;
          LODWORD(v30) = 1;
LABEL_45:
          *(_DWORD *)(v4 + 12740) = v24 + v30;
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v28 = v26[2];
      }
      if ((2 * v24) <= 4) {
        uint64_t v30 = 4;
      }
      else {
        uint64_t v30 = (2 * v24);
      }
      size_t v31 = v30 + v24;
      if (!v27 || (unint64_t)&v27[v31] > v28)
      {
        unint64_t v32 = 2 * v26[4];
        if (v32 <= v31 + 1) {
          unint64_t v32 = v31 + 1;
        }
        v26[4] = v32;
        unint64_t v33 = v32 + 8;
        this = (unsigned int *)malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
        int v34 = (char *)this + v33;
        *(void *)this = v26[3];
        int v27 = (char *)(this + 2);
        v26[2] = v34;
        void v26[3] = this;
      }
      v26[1] = &v27[v31];
      if (v24) {
        this = (unsigned int *)memcpy(v27, *(const void **)(v4 + 12728), v24);
      }
      *(void *)(v4 + 12728) = v27;
      LODWORD(v24) = *(_DWORD *)(v4 + 12740);
      int v25 = v27;
      unsigned int v23 = *(_DWORD *)(v4 + 12736);
      goto LABEL_45;
    }
  }
  unsigned int v9 = this[3184];
  size_t v10 = this[3185];
  unint64_t v11 = (char *)*((void *)this + 1591);
  if (v9 >= v10)
  {
    unsigned int v12 = (void *)*((void *)this + 1593);
    int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_25:
        *(_DWORD *)(v4 + 12740) = v10 + v16;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unint64_t v11 = (char *)v12[1];
    if (v18)
    {
      unint64_t v19 = 2 * v12[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v12[4] = v19;
      unint64_t v20 = v19 + 8;
      int v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v22 = (char *)v21 + v20;
      *int v21 = v12[3];
      unint64_t v11 = (char *)(v21 + 1);
      v12[2] = v22;
      void v12[3] = v21;
    }
    v12[1] = &v11[v17];
    if (v10) {
      memcpy(v11, *(const void **)(v4 + 12728), v10);
    }
    *(void *)(v4 + 12728) = v11;
    LODWORD(v10) = *(_DWORD *)(v4 + 12740);
    unsigned int v9 = *(_DWORD *)(v4 + 12736);
    goto LABEL_25;
  }
LABEL_26:
  *(_DWORD *)(v4 + 12736) = v9 + 1;
  v11[v9] = 113;
LABEL_27:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSameTypeRequirement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unint64_t v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    unsigned int v12 = *v11;
    goto LABEL_14;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unint64_t v11 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_12;
  }
  unsigned int v12 = 0;
LABEL_14:
  if (v15)
  {
    *(_OWORD *)a4 = v15;
    *(void *)(a4 + 16) = v16;
    return result;
  }
  int v13 = v18;
  if ((v17 & 0x80000000) == 0 && !v18)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1162;
    return result;
  }
  if (v17 == 1)
  {
    unint64_t v14 = "Rt";
LABEL_26:
    swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
    goto LABEL_27;
  }
  if (!v17)
  {
    unint64_t v14 = "Rs";
    goto LABEL_26;
  }
  if (v17 != -1)
  {
    unint64_t v14 = "RT";
    goto LABEL_26;
  }
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "RS", 2uLL, this[1593]);
LABEL_27:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSameShapeRequirement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unint64_t v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    unsigned int v12 = *v11;
    goto LABEL_14;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unint64_t v11 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_12;
  }
  unsigned int v12 = 0;
LABEL_14:
  if (v14)
  {
    *(_OWORD *)a4 = v14;
    *(void *)(a4 + 16) = v15;
  }
  else
  {
    int v13 = v17;
    if (v16 < 0 || v17)
    {
      if (v16)
      {
        *(_DWORD *)a4 = 1;
      }
      else
      {
        swift::Demangle::__runtime::CharVector::append(this + 1591, "Rh", 2uLL, this[1593]);
        *(_DWORD *)a4 = 0;
      }
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
    }
    else
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1190;
    }
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericLayoutRequirement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v9 = *v8;
    goto LABEL_7;
  }
  unsigned int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (v33)
  {
    *(_OWORD *)a4 = v33;
    a4[2] = v34;
    return result;
  }
  unsigned int v12 = v36;
  if ((v35 & 0x80000000) == 0 && !v36)
  {
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1210;
    return result;
  }
  if (v35 == -1)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "RL", 2uLL, this[1593]);
  }
  else
  {
    int v13 = "RM";
    if (v35 == 1) {
      int v13 = "Rm";
    }
    if (v35) {
      long long v14 = v13;
    }
    else {
      long long v14 = "Rl";
    }
    swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  }
  if (*((unsigned char *)a2 + 18) != 5)
  {
    int v17 = a2[1];
    if (*((_WORD *)v17 + 8) == 101)
    {
      uint64_t v18 = *((void *)v17 + 1);
      uint64_t v15 = (swift::Demangle::__runtime::Node *)a2;
      if (v18 != 1) {
        goto LABEL_23;
      }
      goto LABEL_26;
    }
LABEL_29:
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1221;
    return result;
  }
  uint64_t v15 = *a2;
  uint64_t v16 = *((void *)*a2 + 1);
  if (*(_WORD *)(v16 + 16) != 101) {
    goto LABEL_29;
  }
  if (*(void *)(v16 + 8) != 1)
  {
LABEL_23:
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1222;
    return result;
  }
LABEL_26:
  char v19 = ***((unsigned char ***)v15 + 1);
  unsigned int v20 = *((_DWORD *)this + 3184);
  size_t v21 = *((unsigned int *)this + 3185);
  unint64_t v22 = this[1591];
  if (v20 < v21) {
    goto LABEL_44;
  }
  unsigned int v23 = this[1593];
  size_t v24 = (char *)*((void *)v23 + 1);
  if (&v22[v21] != v24)
  {
    unint64_t v25 = *((void *)v23 + 2);
LABEL_31:
    if ((2 * v21) <= 4) {
      uint64_t v27 = 4;
    }
    else {
      uint64_t v27 = (2 * v21);
    }
    size_t v28 = v27 + v21;
    if (!v24 || (unint64_t)&v24[v28] > v25)
    {
      unint64_t v29 = 2 * *((void *)v23 + 4);
      if (v29 <= v28 + 1) {
        unint64_t v29 = v28 + 1;
      }
      *((void *)v23 + 4) = v29;
      char v32 = v19;
      unint64_t v30 = v29 + 8;
      uint64_t result = (uint64_t *)malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
      uint64_t *result = *((void *)v23 + 3);
      size_t v24 = (char *)(result + 1);
      size_t v31 = (char *)result + v30;
      char v19 = v32;
      *((void *)v23 + 2) = v31;
      *((void *)v23 + 3) = result;
    }
    *((void *)v23 + 1) = &v24[v28];
    if (v21) {
      uint64_t result = (uint64_t *)memcpy(v24, this[1591], v21);
    }
    this[1591] = v24;
    LODWORD(v21) = *((_DWORD *)this + 3185);
    unint64_t v22 = v24;
    unsigned int v20 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  unint64_t v26 = (unint64_t)&v22[v21 + 1];
  unint64_t v25 = *((void *)v23 + 2);
  if (v26 > v25) {
    goto LABEL_31;
  }
  *((void *)v23 + 1) = v26;
  LODWORD(v27) = 1;
LABEL_43:
  *((_DWORD *)this + 3185) = v21 + v27;
LABEL_44:
  *((_DWORD *)this + 3184) = v20 + 1;
  v22[v20] = v19;
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_50;
  }
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)a2 + 18) != 5) {
      goto LABEL_50;
    }
  }
  if (*((_DWORD *)a2 + 2) < 4u
  {
LABEL_50:
    *(_DWORD *)a4 = 0;
    a4[1] = 0;
    *((_DWORD *)a4 + 4) = 0;
  }
  return result;
}

char *anonymous namespace'::Remangler::mangleDependentGenericParamPackMarker@<X0>(char *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v10 = 1265;
      int v11 = 1;
      goto LABEL_21;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v7 + 16) == 232)
  {
    swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Rv", 2uLL, *((void **)this + 1593));
    int v8 = *((unsigned __int8 *)v3 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v3 + 2))
      {
        unsigned int v9 = 0;
LABEL_14:
        int v12 = *((unsigned __int8 *)v9 + 18);
        if ((v12 - 1) >= 2)
        {
          if (v12 != 5 || !*((_DWORD *)v9 + 2))
          {
            int v13 = 0;
            goto LABEL_20;
          }
          unsigned int v9 = (uint64_t **)*v9;
        }
        int v13 = (uint64_t **)*v9;
LABEL_20:
        int v11 = 0;
        uint64_t v3 = 0;
        int v10 = 0;
        goto LABEL_21;
      }
      uint64_t v3 = *(swift::Demangle::__runtime::Node **)v3;
    }
    unsigned int v9 = *(uint64_t ***)v3;
    goto LABEL_14;
  }
  int v10 = 1266;
  int v11 = 1;
LABEL_21:
  *(_DWORD *)a3 = v11;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericSignature@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_6;
  }
  if (v7 == 5)
  {
    uint64_t v7 = *((unsigned int *)a2 + 2);
    if (v7) {
      goto LABEL_6;
    }
LABEL_29:
    uint64_t v8 = 0;
    goto LABEL_31;
  }
  if (v7 != 2) {
    goto LABEL_29;
  }
  uint64_t v7 = 2;
LABEL_6:
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  unsigned int v10 = a3 + 1;
  do
  {
    unint64_t v11 = *((unsigned __int8 *)a2 + 18);
    if ((v11 - 1) >= 2)
    {
      char v12 = 0;
      int v13 = *a2;
    }
    else
    {
      char v12 = 1;
      int v13 = (swift::Demangle::__runtime::Node *)a2;
    }
    if (*(_WORD *)(*((void *)v13 + v9) + 16) == 37)
    {
      uint64_t v8 = v9 + 1;
      goto LABEL_8;
    }
    if (v11 == 1) {
      goto LABEL_17;
    }
    if (v11 != 5)
    {
      if (v11 != 2) {
        goto LABEL_23;
      }
      unint64_t v11 = 2;
LABEL_17:
      if (v11 <= v9) {
        goto LABEL_23;
      }
      goto LABEL_18;
    }
    if (*((unsigned int *)a2 + 2) <= v9)
    {
LABEL_23:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
LABEL_18:
    long long v14 = (swift::Demangle::__runtime::Node *)a2;
    if ((v12 & 1) == 0) {
      long long v14 = *a2;
    }
    if (*(_DWORD *)a4) {
      return this;
    }
LABEL_8:
    ++v9;
  }
  while (v7 != v9);
  if (v8 == 1)
  {
    uint64_t v15 = (swift::Demangle::__runtime::Node *)a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
      uint64_t v15 = *a2;
    }
    if (**(void **)v15 == 1)
    {
      uint64_t v16 = (_DWORD *)(v5 + 12736);
      goto LABEL_76;
    }
    uint64_t v8 = 1;
  }
LABEL_31:
  uint64_t v16 = (_DWORD *)(v5 + 12736);
  unsigned int v17 = *(_DWORD *)(v5 + 12736);
  size_t v18 = *(unsigned int *)(v5 + 12740);
  char v19 = *(char **)(v5 + 12728);
  if (v17 >= v18)
  {
    unsigned int v20 = *(void **)(v5 + 12744);
    size_t v21 = (char *)v20[1];
    if (&v19[v18] != v21)
    {
      unint64_t v22 = v20[2];
      goto LABEL_35;
    }
    unint64_t v23 = (unint64_t)&v19[v18 + 1];
    unint64_t v22 = v20[2];
    if (v23 <= v22)
    {
      v20[1] = v23;
      LODWORD(v24) = 1;
    }
    else
    {
LABEL_35:
      if ((2 * v18) <= 4) {
        uint64_t v24 = 4;
      }
      else {
        uint64_t v24 = (2 * v18);
      }
      size_t v25 = v24 + v18;
      if (!v21 || (unint64_t)&v21[v25] > v22)
      {
        unint64_t v26 = 2 * v20[4];
        if (v26 <= v25 + 1) {
          unint64_t v26 = v25 + 1;
        }
        v20[4] = v26;
        unint64_t v27 = v26 + 8;
        this = (uint64_t *)malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
        size_t v28 = (char *)this + v27;
        *this = v20[3];
        size_t v21 = (char *)(this + 1);
        void v20[2] = v28;
        void v20[3] = this;
      }
      v20[1] = &v21[v25];
      if (v18) {
        this = (uint64_t *)memcpy(v21, *(const void **)(v5 + 12728), v18);
      }
      *(void *)(v5 + 12728) = v21;
      LODWORD(v18) = *(_DWORD *)(v5 + 12740);
      char v19 = v21;
      unsigned int v17 = *(_DWORD *)(v5 + 12736);
    }
    uint64_t v16 = (_DWORD *)(v5 + 12736);
    *(_DWORD *)(v5 + 12740) = v18 + v24;
  }
  *uint64_t v16 = v17 + 1;
  v19[v17] = 114;
  if (v8)
  {
    uint64_t v29 = 0;
    while (1)
    {
      char v32 = (swift::Demangle::__runtime::Node *)a2;
      if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
        char v32 = *a2;
      }
      uint64_t v33 = **((void **)v32 + v29);
      if (v33)
      {
        goto LABEL_53;
      }
      unsigned int v31 = *(_DWORD *)(v5 + 12736);
      size_t v30 = *(unsigned int *)(v5 + 12740);
      uint64_t v34 = *(unsigned char **)(v5 + 12728);
      if (v31 >= v30) {
        break;
      }
LABEL_52:
      *uint64_t v16 = v31 + 1;
      v34[v31] = 122;
LABEL_53:
      if (v8 == ++v29) {
        goto LABEL_76;
      }
    }
    int v35 = *(void **)(v5 + 12744);
    unsigned int v36 = (unsigned char *)v35[1];
    if (&v34[v30] != v36)
    {
      unint64_t v37 = v35[2];
      goto LABEL_62;
    }
    unint64_t v38 = (unint64_t)&v34[v30 + 1];
    unint64_t v37 = v35[2];
    if (v38 <= v37)
    {
      v35[1] = v38;
      LODWORD(v39) = 1;
    }
    else
    {
LABEL_62:
      if ((2 * v30) <= 4) {
        uint64_t v39 = 4;
      }
      else {
        uint64_t v39 = (2 * v30);
      }
      size_t v40 = v39 + v30;
      if (v36) {
        BOOL v41 = (unint64_t)&v36[v39 + v30] > v37;
      }
      else {
        BOOL v41 = 1;
      }
      uint64_t v34 = (unsigned char *)v35[1];
      if (v41)
      {
        unint64_t v42 = 2 * v35[4];
        if (v42 <= v40 + 1) {
          unint64_t v42 = v40 + 1;
        }
        v35[4] = v42;
        unint64_t v43 = v42 + 8;
        this = (uint64_t *)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        unsigned int v44 = (char *)this + v43;
        *this = v35[3];
        uint64_t v34 = this + 1;
        void v35[2] = v44;
        v35[3] = this;
      }
      v35[1] = &v34[v40];
      if (v30) {
        this = (uint64_t *)memcpy(v34, *(const void **)(v5 + 12728), v30);
      }
      *(void *)(v5 + 12728) = v34;
      LODWORD(v30) = *(_DWORD *)(v5 + 12740);
      unsigned int v31 = *(_DWORD *)(v5 + 12736);
      uint64_t v16 = (_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v30 + v39;
    goto LABEL_52;
  }
LABEL_76:
  unsigned int v45 = *(_DWORD *)(v5 + 12736);
  size_t v46 = *(unsigned int *)(v5 + 12740);
  uint64_t v47 = *(char **)(v5 + 12728);
  if (v45 >= v46)
  {
    uint64_t v48 = *(void **)(v5 + 12744);
    unint64_t v49 = (char *)v48[1];
    if (&v47[v46] != v49)
    {
      unint64_t v50 = v48[2];
      goto LABEL_80;
    }
    unint64_t v51 = (unint64_t)&v47[v46 + 1];
    unint64_t v50 = v48[2];
    if (v51 <= v50)
    {
      v48[1] = v51;
      LODWORD(v52) = 1;
    }
    else
    {
LABEL_80:
      if ((2 * v46) <= 4) {
        uint64_t v52 = 4;
      }
      else {
        uint64_t v52 = (2 * v46);
      }
      size_t v53 = v52 + v46;
      if (!v49 || (unint64_t)&v49[v53] > v50)
      {
        unint64_t v54 = 2 * v48[4];
        if (v54 <= v53 + 1) {
          unint64_t v54 = v53 + 1;
        }
        v48[4] = v54;
        unint64_t v55 = v54 + 8;
        this = (uint64_t *)malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
        uint64_t v56 = (char *)this + v55;
        *this = v48[3];
        unint64_t v49 = (char *)(this + 1);
        v48[2] = v56;
        void v48[3] = this;
      }
      v48[1] = &v49[v53];
      if (v46) {
        this = (uint64_t *)memcpy(v49, *(const void **)(v5 + 12728), v46);
      }
      *(void *)(v5 + 12728) = v49;
      LODWORD(v46) = *(_DWORD *)(v5 + 12740);
      uint64_t v47 = v49;
      unsigned int v45 = *(_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v46 + v52;
  }
  *uint64_t v16 = v45 + 1;
  v47[v45] = 108;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleDependentGenericType@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        char v12 = a2;
        if (v11 >= 2) {
          char v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  size_t v14 = *(unsigned int *)(v5 + 12740);
  uint64_t v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    uint64_t v16 = *(void **)(v5 + 12744);
    unsigned int v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      unint64_t v19 = (unint64_t)&v15[v14 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v18 = v16[2];
    }
    if ((2 * v14) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v14);
    }
    size_t v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2 * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = (uint64_t *)malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      uint64_t v24 = (char *)this + v23;
      *this = v16[3];
      unsigned int v17 = (char *)(this + 1);
      v16[2] = v24;
      void v16[3] = this;
    }
    v16[1] = &v17[v21];
    if (v14) {
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
    }
    *(void *)(v5 + 12728) = v17;
    LODWORD(v14) = *(_DWORD *)(v5 + 12740);
    uint64_t v15 = v17;
    unsigned int v13 = *(_DWORD *)(v5 + 12736);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v15[v13] = 117;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

void *anonymous namespace'::Remangler::mangleDependentMemberType@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (v52)
  {
    *(_OWORD *)a4 = v52;
    *(void *)(a4 + 16) = v53;
    return result;
  }
  if (v54 == -1) {
    goto LABEL_82;
  }
  unsigned int v8 = (uint64_t **)v55;
  if (v54 != 1)
  {
    if (!v54)
    {
      *(_DWORD *)a4 = 12;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1289;
      return result;
    }
    unsigned int v15 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    unsigned int v17 = (char *)this[1591];
    if (v15 < v16)
    {
LABEL_44:
      *((_DWORD *)this + 3184) = v15 + 1;
      v17[v15] = 81;
      if (v8)
      {
        goto LABEL_82;
      }
      unsigned int v26 = *((_DWORD *)this + 3184);
      size_t v37 = *((unsigned int *)this + 3185);
      size_t v28 = (char *)this[1591];
      if (v26 < v37) {
        goto LABEL_80;
      }
      unint64_t v38 = this[1593];
      uint64_t v39 = (char *)v38[1];
      if (&v28[v37] == v39)
      {
        unint64_t v46 = (unint64_t)&v28[v37 + 1];
        unint64_t v40 = v38[2];
        if (v46 <= v40)
        {
          v38[1] = v46;
          LODWORD(v47) = 1;
LABEL_79:
          *((_DWORD *)this + 3185) = v37 + v47;
LABEL_80:
          *((_DWORD *)this + 3184) = v26 + 1;
          char v51 = 88;
          goto LABEL_81;
        }
      }
      else
      {
        unint64_t v40 = v38[2];
      }
      if ((2 * v37) <= 4) {
        uint64_t v47 = 4;
      }
      else {
        uint64_t v47 = (2 * v37);
      }
      size_t v48 = v47 + v37;
      if (!v39 || (unint64_t)&v39[v48] > v40)
      {
        unint64_t v49 = 2 * v38[4];
        if (v49 <= v48 + 1) {
          unint64_t v49 = v48 + 1;
        }
        v38[4] = v49;
        unint64_t v50 = v49 + 8;
        uint64_t result = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
        void *result = v38[3];
        uint64_t v39 = (char *)(result + 1);
        v38[2] = (char *)result + v50;
        v38[3] = result;
      }
      v38[1] = &v39[v48];
      if (v37) {
        uint64_t result = memcpy(v39, this[1591], v37);
      }
      this[1591] = v39;
      LODWORD(v37) = *((_DWORD *)this + 3185);
      size_t v28 = v39;
      unsigned int v26 = *((_DWORD *)this + 3184);
      goto LABEL_79;
    }
    unint64_t v18 = this[1593];
    unint64_t v19 = (char *)v18[1];
    if (&v17[v16] == v19)
    {
      unint64_t v32 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v32 <= v20)
      {
        v18[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *((_DWORD *)this + 3185) = v16 + v33;
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v20 = v18[2];
    }
    if ((2 * v16) <= 4) {
      uint64_t v33 = 4;
    }
    else {
      uint64_t v33 = (2 * v16);
    }
    size_t v34 = v33 + v16;
    if (!v19 || (unint64_t)&v19[v34] > v20)
    {
      unint64_t v35 = 2 * v18[4];
      if (v35 <= v34 + 1) {
        unint64_t v35 = v34 + 1;
      }
      void v18[4] = v35;
      unint64_t v36 = v35 + 8;
      uint64_t result = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      void *result = v18[3];
      unint64_t v19 = (char *)(result + 1);
      uint64_t v18[2] = (char *)result + v36;
      void v18[3] = result;
    }
    v18[1] = &v19[v34];
    if (v16) {
      uint64_t result = memcpy(v19, this[1591], v16);
    }
    this[1591] = v19;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    unsigned int v17 = v19;
    unsigned int v15 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = (char *)this[1591];
  if (v9 >= v10)
  {
    char v12 = this[1593];
    unsigned int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v21 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v21 <= v14)
      {
        v12[1] = v21;
        LODWORD(v22) = 1;
LABEL_25:
        *((_DWORD *)this + 3185) = v10 + v22;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v22 = 4;
    }
    else {
      uint64_t v22 = (2 * v10);
    }
    size_t v23 = v22 + v10;
    if (!v13 || (unint64_t)&v13[v23] > v14)
    {
      unint64_t v24 = 2 * v12[4];
      if (v24 <= v23 + 1) {
        unint64_t v24 = v23 + 1;
      }
      _OWORD v12[4] = v24;
      unint64_t v25 = v24 + 8;
      uint64_t result = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      void *result = v12[3];
      unsigned int v13 = (char *)(result + 1);
      v12[2] = (char *)result + v25;
      void v12[3] = result;
    }
    v12[1] = &v13[v23];
    if (v10) {
      uint64_t result = memcpy(v13, this[1591], v10);
    }
    this[1591] = v13;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    unsigned int v11 = v13;
    unsigned int v9 = *((_DWORD *)this + 3184);
    goto LABEL_25;
  }
LABEL_26:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = 81;
  if (!v8)
  {
    unsigned int v26 = *((_DWORD *)this + 3184);
    size_t v27 = *((unsigned int *)this + 3185);
    size_t v28 = (char *)this[1591];
    if (v26 < v27)
    {
LABEL_77:
      *((_DWORD *)this + 3184) = v26 + 1;
      char v51 = 120;
LABEL_81:
      v28[v26] = v51;
      goto LABEL_82;
    }
    uint64_t v29 = this[1593];
    size_t v30 = (char *)v29[1];
    if (&v28[v27] == v30)
    {
      unint64_t v41 = (unint64_t)&v28[v27 + 1];
      unint64_t v31 = v29[2];
      if (v41 <= v31)
      {
        v29[1] = v41;
        LODWORD(v42) = 1;
LABEL_76:
        *((_DWORD *)this + 3185) = v27 + v42;
        goto LABEL_77;
      }
    }
    else
    {
      unint64_t v31 = v29[2];
    }
    if ((2 * v27) <= 4) {
      uint64_t v42 = 4;
    }
    else {
      uint64_t v42 = (2 * v27);
    }
    size_t v43 = v42 + v27;
    if (!v30 || (unint64_t)&v30[v43] > v31)
    {
      unint64_t v44 = 2 * v29[4];
      if (v44 <= v43 + 1) {
        unint64_t v44 = v43 + 1;
      }
      v29[4] = v44;
      unint64_t v45 = v44 + 8;
      uint64_t result = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
      void *result = v29[3];
      size_t v30 = (char *)(result + 1);
      v29[2] = (char *)result + v45;
      void v29[3] = result;
    }
    v29[1] = &v30[v43];
    if (v27) {
      uint64_t result = memcpy(v30, this[1591], v27);
    }
    this[1591] = v30;
    LODWORD(v27) = *((_DWORD *)this + 3185);
    size_t v28 = v30;
    unsigned int v26 = *((_DWORD *)this + 3184);
    goto LABEL_76;
  }
LABEL_82:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDependentProtocolConformanceRoot@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v10 = *v9;
    goto LABEL_7;
  }
  size_t v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      int v15 = 321;
      int v16 = 10;
LABEL_18:
      *(_DWORD *)a4 = v16;
      *(void *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v15;
      return this;
    }
    size_t v10 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_16:
    unint64_t v14 = (uint64_t *)*((void *)v13 + 1);
    goto LABEL_21;
  }
  unint64_t v14 = 0;
LABEL_21:
  if (*((_WORD *)v14 + 8) != 232) {
    goto LABEL_28;
  }
  int v17 = *((unsigned __int8 *)v14 + 18);
  if ((v17 - 1) < 2) {
    goto LABEL_26;
  }
  if (v17 == 5 && *((_DWORD *)v14 + 2))
  {
    unint64_t v14 = (uint64_t *)*v14;
LABEL_26:
    unint64_t v14 = (uint64_t *)*v14;
    goto LABEL_28;
  }
  unint64_t v14 = 0;
LABEL_28:
  {
LABEL_45:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)(v6 + 12728), "HD", 2uLL, *(void **)(v6 + 12744));
    size_t v10 = 0;
    if (*((unsigned char *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u) {
        size_t v10 = 0;
      }
      else {
        size_t v10 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
      }
    }
    int v23 = *((unsigned __int16 *)v10 + 8);
    if (v23 == 246 || v23 == 102)
    {
      int v24 = *((unsigned __int8 *)v10 + 18);
      if ((v23 != 102) == (v24 == 4))
      {
        int v15 = 2713;
        int v16 = 1;
      }
      else
      {
        if (v24 == 4) {
          uint64_t v25 = *(void *)v10 + 2;
        }
        else {
          uint64_t v25 = 1;
        }
        int v16 = 0;
        size_t v10 = 0;
        int v15 = 0;
      }
    }
    else
    {
      int v15 = 2711;
      int v16 = 1;
    }
    goto LABEL_18;
  }
  int v18 = *((unsigned __int8 *)v14 + 18);
  unint64_t v19 = (swift::Demangle::__runtime::Node **)v14;
  if ((v18 - 1) >= 2)
  {
    if (v18 == 5)
    {
      unint64_t v20 = (uint64_t *)*v14;
      unint64_t v19 = (swift::Demangle::__runtime::Node **)*v14;
LABEL_37:
      unint64_t v21 = (swift::Demangle::__runtime::Node **)&v20[*((unsigned int *)v14 + 2)];
      goto LABEL_41;
    }
    unint64_t v19 = 0;
  }
  switch(v18)
  {
    case 1:
      unint64_t v21 = (swift::Demangle::__runtime::Node **)(v14 + 1);
      break;
    case 2:
      unint64_t v21 = (swift::Demangle::__runtime::Node **)(v14 + 2);
      break;
    case 5:
      unint64_t v20 = (uint64_t *)*v14;
      goto LABEL_37;
    default:
      unint64_t v21 = 0;
      break;
  }
LABEL_41:
  if (v19 == v21) {
    goto LABEL_45;
  }
  unsigned int v22 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v19 == v21) {
      goto LABEL_45;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDependentProtocolConformanceInherited@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v9 = *v8;
    goto LABEL_7;
  }
  unsigned int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    unint64_t v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unint64_t v14 = 0;
LABEL_14:
  if (*((_WORD *)v14 + 8) == 232)
  {
    int v15 = *((unsigned __int8 *)v14 + 18);
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v14 + 2))
      {
        unint64_t v14 = 0;
        goto LABEL_21;
      }
      unint64_t v14 = *(swift::Demangle::__runtime::Node **)v14;
    }
    unint64_t v14 = *(swift::Demangle::__runtime::Node **)v14;
  }
LABEL_21:
  {
    int v16 = *((unsigned __int8 *)v14 + 18);
    int v17 = (swift::Demangle::__runtime::Node **)v14;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        int v18 = *(swift::Demangle::__runtime::Node **)v14;
        int v17 = *(swift::Demangle::__runtime::Node ***)v14;
LABEL_30:
        unint64_t v19 = (swift::Demangle::__runtime::Node **)((char *)v18 + 8 * *((unsigned int *)v14 + 2));
        goto LABEL_36;
      }
      int v17 = 0;
    }
    switch(v16)
    {
      case 1:
        unint64_t v19 = (swift::Demangle::__runtime::Node **)((char *)v14 + 8);
        goto LABEL_36;
      case 2:
        unint64_t v19 = (swift::Demangle::__runtime::Node **)((char *)v14 + 16);
        goto LABEL_36;
      case 5:
        int v18 = *(swift::Demangle::__runtime::Node **)v14;
        goto LABEL_30;
    }
    unint64_t v19 = 0;
LABEL_36:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v17;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HI", 2uLL, this[1593]);
  uint64_t v20 = 0;
  if (*((unsigned char *)a2 + 18) == 5)
  {
    if (*((_DWORD *)a2 + 2) < 3u) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = *((void *)*a2 + 2);
    }
  }
  int v21 = *(unsigned __int16 *)(v20 + 16);
  if (v21 == 246 || v21 == 102)
  {
    int v22 = *(unsigned __int8 *)(v20 + 18);
    if ((v21 != 102) == (v22 == 4))
    {
      int v24 = 2713;
      int v25 = 1;
    }
    else
    {
      if (v22 == 4) {
        uint64_t v23 = *(void *)v20 + 2;
      }
      else {
        uint64_t v23 = 1;
      }
      int v25 = 0;
      uint64_t v20 = 0;
      int v24 = 0;
    }
  }
  else
  {
    int v24 = 2711;
    int v25 = 1;
  }
  *(_DWORD *)a4 = v25;
  *(void *)(a4 + 8) = v20;
  *(_DWORD *)(a4 + 16) = v24;
  return result;
}

void *anonymous namespace'::Remangler::mangleDependentProtocolConformanceAssociated@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    unsigned int v10 = *v9;
    goto LABEL_7;
  }
  unsigned int v10 = 0;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    unint64_t v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unint64_t v14 = 0;
LABEL_14:
  int v15 = *((unsigned __int8 *)v14 + 18);
  int v16 = (swift::Demangle::__runtime::Node **)v14;
  if ((v15 - 1) < 2)
  {
LABEL_18:
    int v17 = *v16;
    goto LABEL_20;
  }
  if (v15 == 5 && *((_DWORD *)v14 + 2))
  {
    int v16 = *(swift::Demangle::__runtime::Node ***)v14;
    goto LABEL_18;
  }
  int v17 = 0;
LABEL_20:
  int v18 = *((unsigned __int8 *)v17 + 18);
  if (v18 != 1)
  {
    if (v18 != 5 || *((_DWORD *)v17 + 2) != 1)
    {
      int v21 = 321;
      int v22 = 10;
LABEL_31:
      *(_DWORD *)a4 = v22;
      *(void *)(a4 + 8) = v17;
      *(_DWORD *)(a4 + 16) = v21;
      return result;
    }
    int v17 = *(swift::Demangle::__runtime::Node **)v17;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v19 = *((unsigned __int8 *)v14 + 18);
  if (v19 == 2) {
    goto LABEL_29;
  }
  if (v19 == 5 && *((_DWORD *)v14 + 2) >= 2u)
  {
    unint64_t v14 = *(swift::Demangle::__runtime::Node **)v14;
LABEL_29:
    uint64_t v20 = (uint64_t *)*((void *)v14 + 1);
    goto LABEL_34;
  }
  uint64_t v20 = 0;
LABEL_34:
  if (*((_WORD *)v20 + 8) != 232) {
    goto LABEL_41;
  }
  int v23 = *((unsigned __int8 *)v20 + 18);
  if ((v23 - 1) < 2) {
    goto LABEL_39;
  }
  if (v23 == 5 && *((_DWORD *)v20 + 2))
  {
    uint64_t v20 = (uint64_t *)*v20;
LABEL_39:
    uint64_t v20 = (uint64_t *)*v20;
    goto LABEL_41;
  }
  uint64_t v20 = 0;
LABEL_41:
  {
LABEL_58:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HA", 2uLL, this[1593]);
    int v17 = 0;
    if (*((unsigned char *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u) {
        int v17 = 0;
      }
      else {
        int v17 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
      }
    }
    int v29 = *((unsigned __int16 *)v17 + 8);
    if (v29 == 246 || v29 == 102)
    {
      int v30 = *((unsigned __int8 *)v17 + 18);
      if ((v29 != 102) == (v30 == 4))
      {
        int v21 = 2713;
        int v22 = 1;
      }
      else
      {
        if (v30 == 4) {
          uint64_t v31 = *(void *)v17 + 2;
        }
        else {
          uint64_t v31 = 1;
        }
        int v22 = 0;
        int v17 = 0;
        int v21 = 0;
      }
    }
    else
    {
      int v21 = 2711;
      int v22 = 1;
    }
    goto LABEL_31;
  }
  int v24 = *((unsigned __int8 *)v20 + 18);
  int v25 = (swift::Demangle::__runtime::Node **)v20;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      unsigned int v26 = (uint64_t *)*v20;
      int v25 = (swift::Demangle::__runtime::Node **)*v20;
LABEL_50:
      size_t v27 = (swift::Demangle::__runtime::Node **)&v26[*((unsigned int *)v20 + 2)];
      goto LABEL_54;
    }
    int v25 = 0;
  }
  switch(v24)
  {
    case 1:
      size_t v27 = (swift::Demangle::__runtime::Node **)(v20 + 1);
      break;
    case 2:
      size_t v27 = (swift::Demangle::__runtime::Node **)(v20 + 2);
      break;
    case 5:
      unsigned int v26 = (uint64_t *)*v20;
      goto LABEL_50;
    default:
      size_t v27 = 0;
      break;
  }
LABEL_54:
  if (v25 == v27) {
    goto LABEL_58;
  }
  unsigned int v28 = a3 + 2;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v25 == v27) {
      goto LABEL_58;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleDestructor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fd", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleDidSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_DWORD *anonymous namespace'::Remangler::mangleDirectness@<X0>(_DWORD *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = this;
  if (*(void *)a2 == 1)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v10 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v10)
    {
LABEL_42:
      char v9 = 105;
      goto LABEL_43;
    }
    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v8[v10] == v12)
    {
      unint64_t v24 = (unint64_t)&v8[v10 + 1];
      unint64_t v13 = v11[2];
      if (v24 <= v13)
      {
        v11[1] = v24;
        LODWORD(v25) = 1;
LABEL_41:
        *((_DWORD *)v3 + 3185) = v10 + v25;
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v25 = 4;
    }
    else {
      uint64_t v25 = (2 * v10);
    }
    size_t v26 = v25 + v10;
    if (v12) {
      BOOL v27 = (unint64_t)&v12[v25 + v10] > v13;
    }
    else {
      BOOL v27 = 1;
    }
    uint64_t v8 = (char *)v11[1];
    if (v27)
    {
      unint64_t v28 = 2 * v11[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      _OWORD v11[4] = v28;
      unint64_t v29 = v28 + 8;
      this = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      int v30 = (char *)this + v29;
      *(void *)this = v11[3];
      uint64_t v8 = (char *)(this + 2);
      void v11[2] = v30;
      void v11[3] = this;
    }
    v11[1] = &v8[v26];
    if (v10) {
      this = memcpy(v8, *((const void **)v3 + 1591), v10);
    }
    *((void *)v3 + 1591) = v8;
    LODWORD(v10) = *((_DWORD *)v3 + 3185);
    unsigned int v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_41;
  }
  if (!*(void *)a2)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v7 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v7)
    {
      char v9 = 100;
LABEL_43:
      int v15 = 0;
      a2 = 0;
      int v14 = 0;
      *uint64_t v5 = v6 + 1;
      v8[v6] = v9;
      goto LABEL_44;
    }
    int v16 = (void *)*((void *)this + 1593);
    int v17 = (char *)v16[1];
    if (&v8[v7] == v17)
    {
      unint64_t v19 = (unint64_t)&v8[v7 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_39:
        *((_DWORD *)v3 + 3185) = v7 + v20;
        char v9 = 100;
        goto LABEL_43;
      }
    }
    else
    {
      unint64_t v18 = v16[2];
    }
    if ((2 * v7) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v7);
    }
    size_t v21 = v20 + v7;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2 * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *(void *)this = v16[3];
      int v17 = (char *)(this + 2);
      v16[2] = (char *)this + v23;
      void v16[3] = this;
    }
    v16[1] = &v17[v21];
    if (v7) {
      this = memcpy(v17, *((const void **)v3 + 1591), v7);
    }
    *((void *)v3 + 1591) = v17;
    LODWORD(v7) = *((_DWORD *)v3 + 3185);
    uint64_t v8 = v17;
    unsigned int v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_39;
  }
  int v14 = 1335;
  int v15 = 13;
LABEL_44:
  *(_DWORD *)a3 = v15;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v14;
  return this;
}

{
  void *v3;
  _DWORD *v5;
  unsigned int v6;
  size_t v7;
  char *v8;
  char v9;
  size_t v10;
  void *v11;
  char *v12;
  unint64_t v13;
  int v14;
  int v15;
  void *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;

  uint64_t v3 = this;
  if (*(void *)a2 == 1)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v10 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v10)
    {
LABEL_42:
      char v9 = 105;
      goto LABEL_43;
    }
    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v8[v10] == v12)
    {
      unint64_t v24 = (unint64_t)&v8[v10 + 1];
      unint64_t v13 = v11[2];
      if (v24 <= v13)
      {
        v11[1] = v24;
        LODWORD(v25) = 1;
LABEL_41:
        *((_DWORD *)v3 + 3185) = v10 + v25;
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v25 = 4;
    }
    else {
      uint64_t v25 = (2 * v10);
    }
    size_t v26 = v25 + v10;
    if (v12) {
      BOOL v27 = (unint64_t)&v12[v25 + v10] > v13;
    }
    else {
      BOOL v27 = 1;
    }
    uint64_t v8 = (char *)v11[1];
    if (v27)
    {
      unint64_t v28 = 2 * v11[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      _OWORD v11[4] = v28;
      unint64_t v29 = v28 + 8;
      this = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      int v30 = (char *)this + v29;
      *(void *)this = v11[3];
      uint64_t v8 = (char *)(this + 2);
      void v11[2] = v30;
      void v11[3] = this;
    }
    v11[1] = &v8[v26];
    if (v10) {
      this = memcpy(v8, *((const void **)v3 + 1591), v10);
    }
    *((void *)v3 + 1591) = v8;
    LODWORD(v10) = *((_DWORD *)v3 + 3185);
    unsigned int v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_41;
  }
  if (!*(void *)a2)
  {
    uint64_t v5 = this + 3184;
    unsigned int v6 = this[3184];
    size_t v7 = this[3185];
    uint64_t v8 = (char *)*((void *)this + 1591);
    if (v6 < v7)
    {
      char v9 = 100;
LABEL_43:
      int v15 = 0;
      a2 = 0;
      int v14 = 0;
      *uint64_t v5 = v6 + 1;
      v8[v6] = v9;
      goto LABEL_44;
    }
    int v16 = (void *)*((void *)this + 1593);
    int v17 = (char *)v16[1];
    if (&v8[v7] == v17)
    {
      unint64_t v19 = (unint64_t)&v8[v7 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_39:
        *((_DWORD *)v3 + 3185) = v7 + v20;
        char v9 = 100;
        goto LABEL_43;
      }
    }
    else
    {
      unint64_t v18 = v16[2];
    }
    if ((2 * v7) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v7);
    }
    size_t v21 = v20 + v7;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2 * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *(void *)this = v16[3];
      int v17 = (char *)(this + 2);
      v16[2] = (char *)this + v23;
      void v16[3] = this;
    }
    v16[1] = &v17[v21];
    if (v7) {
      this = memcpy(v17, *((const void **)v3 + 1591), v7);
    }
    *((void *)v3 + 1591) = v17;
    LODWORD(v7) = *((_DWORD *)v3 + 3185);
    uint64_t v8 = v17;
    unsigned int v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_39;
  }
  int v14 = 797;
  int v15 = 13;
LABEL_44:
  *(_DWORD *)a3 = v15;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDynamicSelf@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XD", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleEnumCase@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WC", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleEscapingAutoClosureType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleNoEscapeFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XE", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalActorFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
  }
  switch(v6)
  {
    case 1:
      char v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      char v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      char v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  char v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Yc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDifferentiableFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = (const void **)(this + 1591);
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Yj", 2uLL, this[1593]);
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = this[1591];
  if (v9 >= v10)
  {
    int v12 = this[1593];
    unint64_t v13 = (char *)*((void *)v12 + 1);
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = *((void *)v12 + 2);
      if (v15 <= v14)
      {
        *((void *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v14 = *((void *)v12 + 2);
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unsigned int v11 = (char *)*((void *)v12 + 1);
    if (v18)
    {
      unint64_t v19 = 2 * *((void *)v12 + 4);
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      *((void *)v12 + 4) = v19;
      unint64_t v20 = v19 + 8;
      uint64_t result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      size_t v21 = (char *)result + v20;
      void *result = *((void *)v12 + 3);
      unsigned int v11 = (char *)(result + 1);
      *((void *)v12 + 2) = v21;
      *((void *)v12 + 3) = result;
    }
    *((void *)v12 + 1) = &v11[v17];
    if (v10) {
      uint64_t result = memcpy(v11, *v6, v10);
    }
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    unsigned int v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleExistentialMetatype@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) >= 2) {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v9 = a3 + 1;
  if (*(_WORD *)(*(void *)v8 + 16) != 146)
  {
    if (v7 != 1)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        *(_DWORD *)a4 = 10;
        *(void *)(a4 + 8) = a2;
        *(_DWORD *)(a4 + 16) = 321;
        return this;
      }
      int v4 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (*(_DWORD *)a4) {
      return this;
    }
    this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "Xp", 2uLL, (void *)v5[1593]);
    goto LABEL_25;
  }
  size_t v10 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_17;
    }
    size_t v10 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_17:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "Xm", 2uLL, (void *)v5[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5 && *((_DWORD *)v4 + 2))
    {
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_21;
    }
LABEL_25:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_21:
  int v12 = *(swift::Demangle::__runtime::Node **)v4;
}

uint64_t *anonymous namespace'::Remangler::mangleExplicitClosure@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)v4 + 18) != 5) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 2) <= 2u) {
    goto LABEL_12;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_13:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fU", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 != 2)
  {
    if (v11 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  int v12 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

uint64_t *anonymous namespace'::Remangler::mangleExtension@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    size_t v10 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  if (*((unsigned char *)a2 + 18) != 5)
  {
LABEL_18:
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    size_t v12 = *((unsigned int *)v5 + 3185);
    unint64_t v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_35:
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 69;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    unint64_t v14 = (void *)v5[1593];
    unint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_34:
        *((_DWORD *)v5 + 3185) = v12 + v18;
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2 * v14[4];
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      v14[4] = v20;
      unint64_t v21 = v20 + 8;
      this = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      unint64_t v22 = (char *)this + v21;
      *this = v14[3];
      unint64_t v15 = (char *)(this + 1);
      v14[2] = v22;
      void v14[3] = this;
    }
    v14[1] = &v15[v19];
    if (v12) {
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
    }
    v5[1591] = (uint64_t)v15;
    LODWORD(v12) = *((_DWORD *)v5 + 3185);
    unint64_t v13 = v15;
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    goto LABEL_34;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) != 3) {
    goto LABEL_18;
  }
  if (!*(_DWORD *)a4) {
    goto LABEL_18;
  }
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleExtensionAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMe", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    size_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleFieldOffset@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wv", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 != 5 || !*((_DWORD *)v4 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  size_t v12 = *(swift::Demangle::__runtime::Node **)v4;
}

uint64_t *anonymous namespace'::Remangler::mangleFreestandingMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (int v11 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3)) == 0)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      size_t v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4) {
        return result;
      }
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  size_t v12 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_17;
  }
  if (v8 == 5) {
    goto LABEL_15;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMf", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  {
    unint64_t v13 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleFullTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mf", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *anonymous namespace'::Remangler::mangleFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unsigned int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    int v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_14:
    size_t v12 = 0;
    BOOL v13 = MEMORY[0x10] == 290;
    goto LABEL_21;
  }
LABEL_16:
  BOOL v13 = *(unsigned __int16 *)(*((void *)*a2 + 2) + 16) == 290;
  unint64_t v14 = 2;
  if (*(_WORD *)(*((void *)*a2 + 2) + 16) == 290) {
    unint64_t v14 = 3;
  }
  if (v14 >= *((unsigned int *)a2 + 2)) {
    size_t v12 = 0;
  }
  else {
    size_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + v14);
  }
LABEL_21:
  int v15 = *((unsigned __int8 *)v12 + 18);
  if ((v15 - 1) < 2) {
    goto LABEL_25;
  }
  if (v15 == 5 && *((_DWORD *)v12 + 2))
  {
    size_t v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_25:
    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v12;
    if (!v13) {
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  unint64_t v16 = 0;
  if (!v13) {
    goto LABEL_33;
  }
LABEL_28:
  if (v8 == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
LABEL_33:
  if (*((_WORD *)v16 + 8) != 44)
  {
    uint64_t v20 = *((unsigned __int8 *)v16 + 18);
    if (v20 != 1)
    {
      if (v20 == 5)
      {
        uint64_t v20 = *((unsigned int *)v16 + 2);
        if (v20) {
          goto LABEL_55;
        }
      }
      else if (v20 == 2)
      {
        uint64_t v20 = 2;
        goto LABEL_55;
      }
LABEL_68:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      unint64_t v28 = (_DWORD *)(a4 + 16);
      goto LABEL_91;
    }
LABEL_55:
    uint64_t v24 = v20 - 1;
    while (1)
    {
      unint64_t v25 = *((unsigned __int8 *)v16 + 18);
      unsigned int v26 = v25 - 1;
      if (v25 != 1)
      {
        if (v25 == 5)
        {
          unint64_t v25 = *((unsigned int *)v16 + 2);
        }
        else
        {
          if (v25 != 2) {
            goto LABEL_56;
          }
          unint64_t v25 = 2;
        }
      }
      if (v25 > v24)
      {
        BOOL v27 = v16;
        if (v26 >= 2) {
          BOOL v27 = *(swift::Demangle::__runtime::Node **)v16;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
        goto LABEL_57;
      }
LABEL_56:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
LABEL_57:
      if (--v24 == -1) {
        goto LABEL_68;
      }
    }
  }
  int v17 = *((unsigned __int8 *)v16 + 18);
  uint64_t v18 = v16;
  if (v17 == 2)
  {
LABEL_38:
    size_t v19 = (uint64_t *)*((void *)v18 + 1);
    goto LABEL_44;
  }
  if (v17 == 5 && *((_DWORD *)v16 + 2) >= 2u)
  {
    uint64_t v18 = *(swift::Demangle::__runtime::Node **)v16;
    goto LABEL_38;
  }
  size_t v19 = 0;
LABEL_44:
  int v21 = *((unsigned __int8 *)v19 + 18);
  if ((v21 - 1) >= 2)
  {
    if (v21 != 5 || !*((_DWORD *)v19 + 2))
    {
      unint64_t v22 = 0;
      goto LABEL_50;
    }
    size_t v19 = (uint64_t *)*v19;
  }
  unint64_t v22 = (uint64_t *)*v19;
LABEL_50:
  uint64_t v23 = *((unsigned __int8 *)v22 + 18);
  if (v23 != 1)
  {
    if (v23 == 5)
    {
      uint64_t v23 = *((unsigned int *)v22 + 2);
      if (!v23) {
        goto LABEL_84;
      }
    }
    else
    {
      if (v23 != 2) {
        goto LABEL_84;
      }
      uint64_t v23 = 2;
    }
  }
  uint64_t v29 = v23 - 1;
  do
  {
    unint64_t v30 = *((unsigned __int8 *)v22 + 18);
    unsigned int v31 = v30 - 1;
    if (v30 != 1)
    {
      if (v30 == 5)
      {
        unint64_t v30 = *((unsigned int *)v22 + 2);
      }
      else
      {
        if (v30 != 2) {
          goto LABEL_71;
        }
        unint64_t v30 = 2;
      }
    }
    if (v30 <= v29)
    {
LABEL_71:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_72;
    }
    unint64_t v32 = v22;
    if (v31 >= 2) {
      unint64_t v32 = (uint64_t *)*v22;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
LABEL_72:
    --v29;
  }
  while (v29 != -1);
  int v17 = *((unsigned __int8 *)v16 + 18);
LABEL_84:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  unint64_t v28 = (_DWORD *)(a4 + 16);
  if ((v17 - 1) < 2)
  {
LABEL_88:
    if (!*(_DWORD *)a4) {
      goto LABEL_92;
    }
  }
  else
  {
    if (v17 == 5 && *((_DWORD *)v16 + 2))
    {
      unint64_t v16 = *(swift::Demangle::__runtime::Node **)v16;
      goto LABEL_88;
    }
    *(void *)(a4 + 8) = 0;
LABEL_91:
    _DWORD *v28 = 0;
LABEL_92:
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "F", 1uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void anonymous namespace'::Remangler::mangleFunctionSignatureSpecialization(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v9 = 0;
  }
  switch(v8)
  {
    case 1:
      int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_16;
      }
      break;
    case 2:
      int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t v10 = *(void *)a2;
LABEL_9:
      int v11 = (swift::Demangle::__runtime::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
      if (v9 == v11) {
        break;
      }
      goto LABEL_16;
    default:
      int v11 = 0;
      if (!v9) {
        break;
      }
LABEL_16:
      uint64_t v70 = (char *)this + 12688;
      unsigned int v12 = a3 + 2;
      while (1)
      {
        unint64_t v14 = *(_DWORD ***)v9;
        if (*(_WORD *)(*(void *)v9 + 16) == 78)
        {
          int v15 = *((unsigned __int8 *)v14 + 18);
          unint64_t v16 = *(_DWORD ***)v9;
          if ((v15 - 1) < 2) {
            goto LABEL_25;
          }
          if (v15 == 5 && *((_DWORD *)v14 + 2)) {
            break;
          }
        }
LABEL_19:
        unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
        if (v9 == v11) {
          goto LABEL_90;
        }
      }
      unint64_t v16 = (_DWORD **)*v14;
LABEL_25:
      switch(**v16)
      {
        case 0:
        case 1:
          if (v15 == 2) {
            goto LABEL_30;
          }
          if (v15 == 5 && *((_DWORD *)v14 + 2) >= 2u)
          {
            unint64_t v14 = (_DWORD **)*v14;
LABEL_30:
            NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)v14[1];
          }
          else
          {
            NodeWithAllocatedText = 0;
          }
LABEL_87:
          memset(&v74, 0, 17);
          {
            unint64_t v44 = *((void *)this + 1585);
            if (v44 > 0xF)
            {
              int v13 = *((_DWORD *)this + 3178) + 16;
              std::string v75 = v74;
              int v76 = v13;
              std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)v70, (uint64_t)&v75, &v75);
            }
            else
            {
              *((void *)this + 1585) = v44 + 1;
              unint64_t v45 = (char *)this + 24 * v44 + 12296;
              *(_OWORD *)unint64_t v45 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
              v45[16] = v74.__r_.__value_.__s.__data_[16];
            }
          }
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_19;
        case 4:
          NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)*((void *)*v14 + 2);
          std::string::size_type v20 = *((void *)NodeWithAllocatedText + 1);
          if (v20)
          {
            int v21 = *(const std::string::value_type **)NodeWithAllocatedText;
            int v22 = **(unsigned __int8 **)NodeWithAllocatedText;
            if (v22 == 95 || (v22 - 48) <= 9)
            {
              int v69 = v4;
              *((unsigned char *)&v75.__r_.__value_.__s + 23) = 1;
              LOWORD(v75.__r_.__value_.__l.__data_) = 95;
              std::string::append(&v75, v21, v20);
              uint64_t v24 = *(void **)this;
              if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v25 = &v75;
              }
              else {
                unint64_t v25 = (std::string *)v75.__r_.__value_.__r.__words[0];
              }
              if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v75.__r_.__value_.__l.__size_;
              }
              if (size)
              {
                BOOL v27 = (char *)v24[1];
                if (!v27 || (unint64_t v28 = &v27[size], (unint64_t)&v27[size] > v24[2]))
                {
                  unint64_t v29 = 2 * v24[4];
                  if (v29 <= size + 1) {
                    unint64_t v29 = size + 1;
                  }
                  void v24[4] = v29;
                  unint64_t v30 = v29 + 8;
                  unsigned int v31 = v25;
                  unint64_t v32 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
                  unint64_t v25 = v31;
                  *unint64_t v32 = v24[3];
                  BOOL v27 = (char *)(v32 + 1);
                  void v24[2] = (char *)v32 + v30;
                  void v24[3] = v32;
                  unint64_t v28 = (char *)v32 + size + 8;
                }
                v24[1] = v28;
                memmove(v27, v25, size);
              }
              else
              {
                BOOL v27 = 0;
              }
              NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v24, 101, (uint64_t)v27, size);
              if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v75.__r_.__value_.__l.__data_);
              }
              int v4 = v69;
            }
          }
          goto LABEL_87;
        case 5:
        case 9:
          uint64_t v18 = *(void *)v9;
          if (v15 == 2) {
            goto LABEL_35;
          }
          if (v15 == 5 && *((_DWORD *)v14 + 2) >= 2u)
          {
            uint64_t v18 = (uint64_t)*v14;
LABEL_35:
            uint64_t v19 = *(void *)(v18 + 8);
          }
          else
          {
            uint64_t v19 = 0;
          }
          memset(&v74, 0, 17);
          {
            unint64_t v33 = *((void *)this + 1585);
            if (v33 > 0xF)
            {
              int v35 = *((_DWORD *)this + 3178) + 16;
              std::string v75 = v74;
              int v76 = v35;
              std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)v70, (uint64_t)&v75, &v75);
            }
            else
            {
              *((void *)this + 1585) = v33 + 1;
              size_t v34 = (char *)this + 24 * v33 + 12296;
              *(_OWORD *)size_t v34 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
              unsigned char v34[16] = v74.__r_.__value_.__s.__data_[16];
            }
          }
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          int v36 = *((unsigned __int8 *)v14 + 18);
          switch(v36)
          {
            case 1:
              goto LABEL_64;
            case 2:
              goto LABEL_19;
            case 5:
              int v36 = *((_DWORD *)v14 + 2);
              if (v36 == 2) {
                goto LABEL_19;
              }
LABEL_64:
              unsigned int v37 = 2;
              break;
            default:
              int v36 = 0;
              unsigned int v37 = 2;
              break;
          }
          break;
        default:
          goto LABEL_19;
      }
      while (1)
      {
        unint64_t v38 = v37;
        unint64_t v39 = *((unsigned __int8 *)v14 + 18);
        unsigned int v40 = v39 - 1;
        if (v39 == 1) {
          goto LABEL_70;
        }
        if (v39 != 5) {
          break;
        }
        if (*((unsigned int *)v14 + 2) > v38)
        {
LABEL_71:
          unint64_t v41 = v14;
          if (v40 >= 2) {
            unint64_t v41 = (_DWORD **)*v14;
          }
          uint64_t v42 = (swift::Demangle::__runtime::Node *)v41[v38];
          goto LABEL_76;
        }
LABEL_75:
        uint64_t v42 = 0;
LABEL_76:
        int v43 = *((unsigned __int8 *)v42 + 18);
        if (v43 != 1)
        {
          if (v43 != 5 || *((_DWORD *)v42 + 2) != 1)
          {
            *(_DWORD *)a4 = 10;
            *(void *)(a4 + 8) = v42;
            *(_DWORD *)(a4 + 16) = 321;
            return;
          }
          uint64_t v42 = *(swift::Demangle::__runtime::Node **)v42;
        }
        if (*(_DWORD *)a4) {
          return;
        }
        unsigned int v37 = v38 + 1;
        if (v36 == v38 + 1) {
          goto LABEL_19;
        }
      }
      if (v39 != 2) {
        goto LABEL_75;
      }
      unint64_t v39 = 2;
LABEL_70:
      if (v39 > v38) {
        goto LABEL_71;
      }
      goto LABEL_75;
  }
LABEL_90:
  unint64_t v46 = (char **)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Tf", 2uLL, *((void **)this + 1593));
  int v47 = *((unsigned __int8 *)v5 + 18);
  size_t v48 = v5;
  if ((v47 - 1) >= 2)
  {
    if (v47 == 5)
    {
      unint64_t v49 = *(void *)v5;
      size_t v48 = *(swift::Demangle::__runtime::Node **)v5;
      goto LABEL_99;
    }
    size_t v48 = 0;
  }
  switch(v47)
  {
    case 1:
      unint64_t v50 = (swift::Demangle::__runtime::Node *)((char *)v5 + 8);
      if (v48 == (swift::Demangle::__runtime::Node *)((char *)v5 + 8)) {
        goto LABEL_135;
      }
      break;
    case 2:
      unint64_t v50 = (swift::Demangle::__runtime::Node *)((char *)v5 + 16);
      if (v48 == (swift::Demangle::__runtime::Node *)((char *)v5 + 16)) {
        goto LABEL_135;
      }
      break;
    case 5:
      unint64_t v49 = *(void *)v5;
LABEL_99:
      unint64_t v50 = (swift::Demangle::__runtime::Node *)(v49 + 8 * *((unsigned int *)v5 + 2));
      if (v48 == v50)
      {
LABEL_135:
        swift::Demangle::__runtime::CharVector::append(v46, "_n", 2uLL, *((void **)this + 1593));
        goto LABEL_136;
      }
      break;
    default:
      unint64_t v50 = 0;
      if (!v48) {
        goto LABEL_135;
      }
      break;
  }
  char v51 = 0;
  uint64_t v52 = (v4 + 1);
  int v71 = v50;
  uint64_t v72 = v5;
  uint64_t v73 = a4;
  do
  {
    uint64_t v53 = *(swift::Demangle::__runtime::Node **)v48;
    if (*(_WORD *)(*(void *)v48 + 16) != 79) {
      goto LABEL_129;
    }
    uint64_t v54 = v52;
    unsigned int v55 = *((_DWORD *)this + 3184);
    size_t v56 = *((unsigned int *)this + 3185);
    uint64_t v57 = (char *)*((void *)this + 1591);
    if (v55 >= v56)
    {
      unint64_t v58 = (void *)*((void *)this + 1593);
      uint64_t v59 = (char *)v58[1];
      if (&v57[v56] == v59)
      {
        unint64_t v61 = (unint64_t)&v57[v56 + 1];
        unint64_t v60 = v58[2];
        if (v61 <= v60)
        {
          v58[1] = v61;
          LODWORD(v62) = 1;
          uint64_t v5 = v72;
LABEL_127:
          *((_DWORD *)this + 3185) = v56 + v62;
          goto LABEL_128;
        }
      }
      else
      {
        unint64_t v60 = v58[2];
      }
      if ((2 * v56) <= 4) {
        uint64_t v62 = 4;
      }
      else {
        uint64_t v62 = (2 * v56);
      }
      size_t v63 = v62 + v56;
      if (v59) {
        BOOL v64 = (unint64_t)&v59[v62 + v56] > v60;
      }
      else {
        BOOL v64 = 1;
      }
      uint64_t v57 = (char *)v58[1];
      if (v64)
      {
        unint64_t v65 = 2 * v58[4];
        if (v65 <= v63 + 1) {
          unint64_t v65 = v63 + 1;
        }
        v58[4] = v65;
        unint64_t v66 = v65 + 8;
        char v67 = malloc_type_malloc(v65 + 8, 0xD0263BC5uLL);
        *char v67 = v58[3];
        uint64_t v57 = (char *)(v67 + 1);
        long long v68 = (char *)v67 + v66;
        unint64_t v46 = (char **)((char *)this + 12728);
        v58[2] = v68;
        void v58[3] = v67;
      }
      v58[1] = &v57[v63];
      if (v56) {
        memcpy(v57, *v46, v56);
      }
      *((void *)this + 1591) = v57;
      LODWORD(v56) = *((_DWORD *)this + 3185);
      unsigned int v55 = *((_DWORD *)this + 3184);
      unint64_t v50 = v71;
      uint64_t v5 = v72;
      goto LABEL_127;
    }
LABEL_128:
    *((_DWORD *)this + 3184) = v55 + 1;
    v57[v55] = 95;
    char v51 = 1;
    uint64_t v52 = v54;
    a4 = v73;
LABEL_129:
    if (*(_DWORD *)a4) {
      return;
    }
    if (*((_WORD *)v53 + 8) == 216 && *((unsigned char *)v5 + 18) == 4) {
      swift::Demangle::__runtime::CharVector::append((unsigned int *)v46, *(void *)v5, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
    }
    size_t v48 = (swift::Demangle::__runtime::Node *)((char *)v48 + 8);
  }
  while (v48 != v50);
  if ((v51 & 1) == 0) {
    goto LABEL_135;
  }
LABEL_136:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t anonymous namespace'::Remangler::mangleFunctionSignatureSpecializationParam@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 != 5 || !*((_DWORD *)a2 + 2))
  {
    unsigned int v12 = *(_DWORD *)(this + 12736);
    size_t v13 = *(unsigned int *)(this + 12740);
    unint64_t v14 = *(unsigned char **)(this + 12728);
    if (v12 < v13)
    {
LABEL_30:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v12 + 1;
      v14[v12] = 110;
      goto LABEL_206;
    }
    int v15 = *(void **)(this + 12744);
    unint64_t v16 = (unsigned char *)v15[1];
    if (&v14[v13] == v16)
    {
      unint64_t v24 = (unint64_t)&v14[v13 + 1];
      unint64_t v17 = v15[2];
      if (v24 <= v17)
      {
        v15[1] = v24;
        LODWORD(v25) = 1;
LABEL_29:
        *(_DWORD *)(v4 + 12740) = v13 + v25;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v17 = v15[2];
    }
    if ((2 * v13) <= 4) {
      uint64_t v25 = 4;
    }
    else {
      uint64_t v25 = (2 * v13);
    }
    size_t v26 = v25 + v13;
    if (v16) {
      BOOL v27 = (unint64_t)&v16[v25 + v13] > v17;
    }
    else {
      BOOL v27 = 1;
    }
    unint64_t v14 = (unsigned char *)v15[1];
    if (v27)
    {
      unint64_t v28 = 2 * v15[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      v15[4] = v28;
      unint64_t v29 = v28 + 8;
      this = (uint64_t)malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      uint64_t v30 = this + v29;
      *(void *)this = v15[3];
      unint64_t v14 = (unsigned char *)(this + 8);
      v15[2] = v30;
      void v15[3] = this;
    }
    v15[1] = &v14[v26];
    if (v13) {
      this = (uint64_t)memcpy(v14, *(const void **)(v4 + 12728), v13);
    }
    *(void *)(v4 + 12728) = v14;
    LODWORD(v13) = *(_DWORD *)(v4 + 12740);
    unsigned int v12 = *(_DWORD *)(v4 + 12736);
    goto LABEL_29;
  }
  unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
  int v8 = **(_DWORD **)v7;
  switch(v8)
  {
    case 0:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pf";
      goto LABEL_59;
    case 1:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pg";
      goto LABEL_59;
    case 2:
      unint64_t v33 = (char **)(this + 12728);
      size_t v34 = *(void **)(this + 12744);
      int v35 = "pi";
      goto LABEL_34;
    case 3:
      unint64_t v33 = (char **)(this + 12728);
      size_t v34 = *(void **)(this + 12744);
      int v35 = "pd";
LABEL_34:
      swift::Demangle::__runtime::CharVector::append(v33, v35, 2uLL, v34);
      if (*((unsigned char *)v3 + 18) == 5) {
        uint64_t v3 = *(swift::Demangle::__runtime::Node **)v3;
      }
      uint64_t v36 = *((void *)v3 + 1);
      int v11 = *(const char **)v36;
      size_t v37 = *(void *)(v36 + 8);
      uint64_t v10 = *(void **)(v4 + 12744);
      unsigned int v9 = v33;
      goto LABEL_60;
    case 4:
      unint64_t v38 = (const void **)(this + 12728);
      swift::Demangle::__runtime::CharVector::append((char **)(this + 12728), "ps", 2uLL, *(void **)(this + 12744));
      unint64_t v39 = v3;
      if (*((unsigned char *)v3 + 18) == 5) {
        unint64_t v39 = *(swift::Demangle::__runtime::Node **)v3;
      }
      unsigned int v40 = (uint64_t *)*((void *)v39 + 1);
      this = *v40;
      uint64_t v41 = v40[1];
      if (v41 == 4)
      {
        this = memcmp((const void *)this, "objc", 4uLL);
        if (!this)
        {
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 99);
          goto LABEL_61;
        }
        goto LABEL_74;
      }
      if (v41 != 3)
      {
        if (v41 == 2 && *(_WORD *)this == 14453)
        {
          unsigned int v18 = *(_DWORD *)(v4 + 12736);
          size_t v42 = *(unsigned int *)(v4 + 12740);
          std::string::size_type v20 = *(char **)(v4 + 12728);
          if (v18 < v42)
          {
LABEL_222:
            int v31 = 0;
            uint64_t v3 = 0;
            int v32 = 0;
            *(_DWORD *)(v4 + 12736) = v18 + 1;
            char v85 = 98;
            goto LABEL_205;
          }
          int v43 = *(void **)(v4 + 12744);
          unint64_t v44 = (char *)v43[1];
          if (&v20[v42] == v44)
          {
            unint64_t v130 = (unint64_t)&v20[v42 + 1];
            unint64_t v45 = v43[2];
            if (v130 <= v45)
            {
              v43[1] = v130;
              LODWORD(v131) = 1;
LABEL_221:
              *(_DWORD *)(v4 + 12740) = v42 + v131;
              goto LABEL_222;
            }
          }
          else
          {
            unint64_t v45 = v43[2];
          }
          if ((2 * v42) <= 4) {
            uint64_t v131 = 4;
          }
          else {
            uint64_t v131 = (2 * v42);
          }
          size_t v132 = v131 + v42;
          if (!v44 || (unint64_t)&v44[v132] > v45)
          {
            unint64_t v133 = 2 * v43[4];
            if (v133 <= v132 + 1) {
              unint64_t v133 = v132 + 1;
            }
            v43[4] = v133;
            unint64_t v134 = v133 + 8;
            this = (uint64_t)malloc_type_malloc(v133 + 8, 0xD0263BC5uLL);
            uint64_t v135 = this + v134;
            *(void *)this = v43[3];
            unint64_t v44 = (char *)(this + 8);
            v43[2] = v135;
            void v43[3] = this;
          }
          v43[1] = &v44[v132];
          if (v42) {
            this = (uint64_t)memcpy(v44, *v38, v42);
          }
          *(void *)(v4 + 12728) = v44;
          LODWORD(v42) = *(_DWORD *)(v4 + 12740);
          std::string::size_type v20 = v44;
          unsigned int v18 = *(_DWORD *)(v4 + 12736);
          goto LABEL_221;
        }
LABEL_74:
        int v32 = 1570;
        int v31 = 14;
        goto LABEL_206;
      }
      this = memcmp((const void *)this, "u16", 3uLL);
      if (this) {
        goto LABEL_74;
      }
      this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 119);
      goto LABEL_61;
    case 5:
      unsigned int v46 = *(_DWORD *)(this + 12736);
      size_t v47 = *(unsigned int *)(this + 12740);
      size_t v48 = *(char **)(this + 12728);
      if (v46 < v47) {
        goto LABEL_107;
      }
      unint64_t v49 = *(void **)(this + 12744);
      unint64_t v50 = (char *)v49[1];
      if (&v48[v47] == v50)
      {
        unint64_t v86 = (unint64_t)&v48[v47 + 1];
        unint64_t v51 = v49[2];
        if (v86 <= v51)
        {
          v49[1] = v86;
          LODWORD(v87) = 1;
          goto LABEL_106;
        }
      }
      else
      {
        unint64_t v51 = v49[2];
      }
      if ((2 * v47) <= 4) {
        uint64_t v87 = 4;
      }
      else {
        uint64_t v87 = (2 * v47);
      }
      size_t v88 = v87 + v47;
      if (v50) {
        BOOL v89 = (unint64_t)&v50[v87 + v47] > v51;
      }
      else {
        BOOL v89 = 1;
      }
      size_t v48 = (char *)v49[1];
      if (v89)
      {
        unint64_t v90 = 2 * v49[4];
        if (v90 <= v88 + 1) {
          unint64_t v90 = v88 + 1;
        }
        v49[4] = v90;
        unint64_t v91 = v90 + 8;
        this = (uint64_t)malloc_type_malloc(v90 + 8, 0xD0263BC5uLL);
        uint64_t v92 = this + v91;
        *(void *)this = v49[3];
        size_t v48 = (char *)(this + 8);
        v49[2] = v92;
        void v49[3] = this;
      }
      v49[1] = &v48[v88];
      if (v47) {
        this = (uint64_t)memcpy(v48, *(const void **)(v4 + 12728), v47);
      }
      *(void *)(v4 + 12728) = v48;
      LODWORD(v47) = *(_DWORD *)(v4 + 12740);
      unsigned int v46 = *(_DWORD *)(v4 + 12736);
LABEL_106:
      *(_DWORD *)(v4 + 12740) = v47 + v87;
LABEL_107:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v46 + 1;
      v48[v46] = 99;
      goto LABEL_206;
    case 6:
      unsigned int v52 = *(_DWORD *)(this + 12736);
      size_t v53 = *(unsigned int *)(this + 12740);
      uint64_t v54 = *(char **)(this + 12728);
      if (v52 < v53) {
        goto LABEL_124;
      }
      unsigned int v55 = *(void **)(this + 12744);
      size_t v56 = (char *)v55[1];
      if (&v54[v53] == v56)
      {
        unint64_t v93 = (unint64_t)&v54[v53 + 1];
        unint64_t v57 = v55[2];
        if (v93 <= v57)
        {
          v55[1] = v93;
          LODWORD(v94) = 1;
          goto LABEL_123;
        }
      }
      else
      {
        unint64_t v57 = v55[2];
      }
      if ((2 * v53) <= 4) {
        uint64_t v94 = 4;
      }
      else {
        uint64_t v94 = (2 * v53);
      }
      size_t v95 = v94 + v53;
      if (v56) {
        BOOL v96 = (unint64_t)&v56[v94 + v53] > v57;
      }
      else {
        BOOL v96 = 1;
      }
      uint64_t v54 = (char *)v55[1];
      if (v96)
      {
        unint64_t v97 = 2 * v55[4];
        if (v97 <= v95 + 1) {
          unint64_t v97 = v95 + 1;
        }
        uint64_t v55[4] = v97;
        unint64_t v98 = v97 + 8;
        this = (uint64_t)malloc_type_malloc(v97 + 8, 0xD0263BC5uLL);
        uint64_t v99 = this + v98;
        *(void *)this = v55[3];
        uint64_t v54 = (char *)(this + 8);
        void v55[2] = v99;
        void v55[3] = this;
      }
      v55[1] = &v54[v95];
      if (v53) {
        this = (uint64_t)memcpy(v54, *(const void **)(v4 + 12728), v53);
      }
      *(void *)(v4 + 12728) = v54;
      LODWORD(v53) = *(_DWORD *)(v4 + 12740);
      unsigned int v52 = *(_DWORD *)(v4 + 12736);
LABEL_123:
      *(_DWORD *)(v4 + 12740) = v53 + v94;
LABEL_124:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v52 + 1;
      v54[v52] = 105;
      goto LABEL_206;
    case 7:
      unsigned int v58 = *(_DWORD *)(this + 12736);
      size_t v59 = *(unsigned int *)(this + 12740);
      unint64_t v60 = *(char **)(this + 12728);
      if (v58 < v59) {
        goto LABEL_141;
      }
      unint64_t v61 = *(void **)(this + 12744);
      uint64_t v62 = (char *)v61[1];
      if (&v60[v59] == v62)
      {
        unint64_t v100 = (unint64_t)&v60[v59 + 1];
        unint64_t v63 = v61[2];
        if (v100 <= v63)
        {
          v61[1] = v100;
          LODWORD(v101) = 1;
          goto LABEL_140;
        }
      }
      else
      {
        unint64_t v63 = v61[2];
      }
      if ((2 * v59) <= 4) {
        uint64_t v101 = 4;
      }
      else {
        uint64_t v101 = (2 * v59);
      }
      size_t v102 = v101 + v59;
      if (v62) {
        BOOL v103 = (unint64_t)&v62[v101 + v59] > v63;
      }
      else {
        BOOL v103 = 1;
      }
      unint64_t v60 = (char *)v61[1];
      if (v103)
      {
        unint64_t v104 = 2 * v61[4];
        if (v104 <= v102 + 1) {
          unint64_t v104 = v102 + 1;
        }
        v61[4] = v104;
        unint64_t v105 = v104 + 8;
        this = (uint64_t)malloc_type_malloc(v104 + 8, 0xD0263BC5uLL);
        uint64_t v106 = this + v105;
        *(void *)this = v61[3];
        unint64_t v60 = (char *)(this + 8);
        v61[2] = v106;
        v61[3] = this;
      }
      v61[1] = &v60[v102];
      if (v59) {
        this = (uint64_t)memcpy(v60, *(const void **)(v4 + 12728), v59);
      }
      *(void *)(v4 + 12728) = v60;
      LODWORD(v59) = *(_DWORD *)(v4 + 12740);
      unsigned int v58 = *(_DWORD *)(v4 + 12736);
LABEL_140:
      *(_DWORD *)(v4 + 12740) = v59 + v101;
LABEL_141:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v58 + 1;
      v60[v58] = 115;
      goto LABEL_206;
    case 8:
      unsigned int v64 = *(_DWORD *)(this + 12736);
      size_t v65 = *(unsigned int *)(this + 12740);
      unint64_t v66 = *(char **)(this + 12728);
      if (v64 < v65) {
        goto LABEL_158;
      }
      char v67 = *(void **)(this + 12744);
      long long v68 = (char *)v67[1];
      if (&v66[v65] == v68)
      {
        unint64_t v107 = (unint64_t)&v66[v65 + 1];
        unint64_t v69 = v67[2];
        if (v107 <= v69)
        {
          v67[1] = v107;
          LODWORD(v108) = 1;
          goto LABEL_157;
        }
      }
      else
      {
        unint64_t v69 = v67[2];
      }
      if ((2 * v65) <= 4) {
        uint64_t v108 = 4;
      }
      else {
        uint64_t v108 = (2 * v65);
      }
      size_t v109 = v108 + v65;
      if (v68) {
        BOOL v110 = (unint64_t)&v68[v108 + v65] > v69;
      }
      else {
        BOOL v110 = 1;
      }
      unint64_t v66 = (char *)v67[1];
      if (v110)
      {
        unint64_t v111 = 2 * v67[4];
        if (v111 <= v109 + 1) {
          unint64_t v111 = v109 + 1;
        }
        v67[4] = v111;
        unint64_t v112 = v111 + 8;
        this = (uint64_t)malloc_type_malloc(v111 + 8, 0xD0263BC5uLL);
        uint64_t v113 = this + v112;
        *(void *)this = v67[3];
        unint64_t v66 = (char *)(this + 8);
        v67[2] = v113;
        v67[3] = this;
      }
      v67[1] = &v66[v109];
      if (v65) {
        this = (uint64_t)memcpy(v66, *(const void **)(v4 + 12728), v65);
      }
      *(void *)(v4 + 12728) = v66;
      LODWORD(v65) = *(_DWORD *)(v4 + 12740);
      unsigned int v64 = *(_DWORD *)(v4 + 12736);
LABEL_157:
      *(_DWORD *)(v4 + 12740) = v65 + v108;
LABEL_158:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
      *(_DWORD *)(v4 + 12736) = v64 + 1;
      v66[v64] = 114;
      goto LABEL_206;
    case 9:
      unsigned int v9 = (char **)(this + 12728);
      uint64_t v10 = *(void **)(v4 + 12744);
      int v11 = "pk";
LABEL_59:
      size_t v37 = 2;
LABEL_60:
      this = (uint64_t)swift::Demangle::__runtime::CharVector::append(v9, v11, v37, v10);
      goto LABEL_61;
    default:
      if (v8 == 256)
      {
        unsigned int v18 = *(_DWORD *)(this + 12736);
        size_t v19 = *(unsigned int *)(this + 12740);
        std::string::size_type v20 = *(char **)(this + 12728);
        if (v18 < v19)
        {
LABEL_90:
          int v31 = 0;
          uint64_t v3 = 0;
          int v32 = 0;
          *(_DWORD *)(v4 + 12736) = v18 + 1;
          char v85 = 120;
          goto LABEL_205;
        }
        int v21 = *(void **)(this + 12744);
        int v22 = (char *)v21[1];
        if (&v20[v19] == v22)
        {
          unint64_t v79 = (unint64_t)&v20[v19 + 1];
          unint64_t v23 = v21[2];
          if (v79 <= v23)
          {
            v21[1] = v79;
            LODWORD(v80) = 1;
LABEL_89:
            *(_DWORD *)(v4 + 12740) = v19 + v80;
            goto LABEL_90;
          }
        }
        else
        {
          unint64_t v23 = v21[2];
        }
        if ((2 * v19) <= 4) {
          uint64_t v80 = 4;
        }
        else {
          uint64_t v80 = (2 * v19);
        }
        size_t v81 = v80 + v19;
        if (!v22 || (unint64_t)&v22[v81] > v23)
        {
          unint64_t v82 = 2 * v21[4];
          if (v82 <= v81 + 1) {
            unint64_t v82 = v81 + 1;
          }
          void v21[4] = v82;
          unint64_t v83 = v82 + 8;
          this = (uint64_t)malloc_type_malloc(v82 + 8, 0xD0263BC5uLL);
          uint64_t v84 = this + v83;
          *(void *)this = v21[3];
          int v22 = (char *)(this + 8);
          v21[2] = v84;
          void v21[3] = this;
        }
        v21[1] = &v22[v81];
        if (v19) {
          this = (uint64_t)memcpy(v22, *(const void **)(v4 + 12728), v19);
        }
        *(void *)(v4 + 12728) = v22;
        LODWORD(v19) = *(_DWORD *)(v4 + 12740);
        std::string::size_type v20 = v22;
        unsigned int v18 = *(_DWORD *)(v4 + 12736);
        goto LABEL_89;
      }
      if ((v8 & 0x400) != 0)
      {
        uint64_t v72 = (const void **)(this + 12728);
        unsigned int v73 = *(_DWORD *)(this + 12736);
        size_t v74 = *(unsigned int *)(this + 12740);
        std::string v75 = *(char **)(this + 12728);
        if (v73 < v74) {
          goto LABEL_173;
        }
        int v76 = *(void **)(this + 12744);
        long long v77 = (char *)v76[1];
        if (&v75[v74] == v77)
        {
          unint64_t v114 = (unint64_t)&v75[v74 + 1];
          unint64_t v78 = v76[2];
          if (v114 <= v78)
          {
            v76[1] = v114;
            LODWORD(v115) = 1;
LABEL_172:
            *(_DWORD *)(v4 + 12740) = v74 + v115;
LABEL_173:
            *(_DWORD *)(v4 + 12736) = v73 + 1;
            v75[v73] = 101;
            if ((v8 & 0x40) != 0)
            {
              this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 68);
              if ((v8 & 0x80) == 0) {
                goto LABEL_175;
              }
            }
            else if ((v8 & 0x80) == 0)
            {
              goto LABEL_175;
            }
            this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 71);
            if ((v8 & 0x200) == 0) {
              goto LABEL_181;
            }
            goto LABEL_179;
          }
        }
        else
        {
          unint64_t v78 = v76[2];
        }
        if ((2 * v74) <= 4) {
          uint64_t v115 = 4;
        }
        else {
          uint64_t v115 = (2 * v74);
        }
        size_t v116 = v115 + v74;
        if (!v77 || (unint64_t)&v77[v116] > v78)
        {
          unint64_t v117 = 2 * v76[4];
          if (v117 <= v116 + 1) {
            unint64_t v117 = v116 + 1;
          }
          v76[4] = v117;
          unint64_t v118 = v117 + 8;
          this = (uint64_t)malloc_type_malloc(v117 + 8, 0xD0263BC5uLL);
          uint64_t v119 = this + v118;
          *(void *)this = v76[3];
          long long v77 = (char *)(this + 8);
          v76[2] = v119;
          v76[3] = this;
        }
        v76[1] = &v77[v116];
        if (v74) {
          this = (uint64_t)memcpy(v77, *v72, v74);
        }
        *(void *)(v4 + 12728) = v77;
        LODWORD(v74) = *(_DWORD *)(v4 + 12740);
        std::string v75 = v77;
        unsigned int v73 = *(_DWORD *)(v4 + 12736);
        goto LABEL_172;
      }
      if ((v8 & 0x40) != 0)
      {
        uint64_t v72 = (const void **)(this + 12728);
        this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(this + 12728), 100);
        if ((v8 & 0x80) != 0) {
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 71);
        }
LABEL_175:
        if ((v8 & 0x200) == 0) {
          goto LABEL_181;
        }
LABEL_179:
        uint64_t v70 = (char **)v72;
        char v71 = 79;
        goto LABEL_180;
      }
      if ((v8 & 0x80) != 0)
      {
        uint64_t v70 = (char **)(this + 12728);
        char v71 = 103;
      }
      else
      {
        if ((v8 & 0x200) == 0) {
          goto LABEL_181;
        }
        uint64_t v70 = (char **)(this + 12728);
        char v71 = 111;
      }
LABEL_180:
      this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<(v70, v71);
LABEL_181:
      if ((v8 & 0x100) != 0)
      {
        unsigned int v18 = *(_DWORD *)(v4 + 12736);
        size_t v120 = *(unsigned int *)(v4 + 12740);
        std::string::size_type v20 = *(char **)(v4 + 12728);
        if (v18 < v120)
        {
LABEL_204:
          int v31 = 0;
          uint64_t v3 = 0;
          int v32 = 0;
          *(_DWORD *)(v4 + 12736) = v18 + 1;
          char v85 = 88;
LABEL_205:
          v20[v18] = v85;
          goto LABEL_206;
        }
        unint64_t v121 = *(void **)(v4 + 12744);
        unint64_t v122 = (char *)v121[1];
        if (&v20[v120] == v122)
        {
          unint64_t v124 = (unint64_t)&v20[v120 + 1];
          unint64_t v123 = v121[2];
          if (v124 <= v123)
          {
            v121[1] = v124;
            LODWORD(v125) = 1;
LABEL_203:
            *(_DWORD *)(v4 + 12740) = v120 + v125;
            goto LABEL_204;
          }
        }
        else
        {
          unint64_t v123 = v121[2];
        }
        if ((2 * v120) <= 4) {
          uint64_t v125 = 4;
        }
        else {
          uint64_t v125 = (2 * v120);
        }
        size_t v126 = v125 + v120;
        if (!v122 || (unint64_t)&v122[v126] > v123)
        {
          unint64_t v127 = 2 * v121[4];
          if (v127 <= v126 + 1) {
            unint64_t v127 = v126 + 1;
          }
          v121[4] = v127;
          unint64_t v128 = v127 + 8;
          this = (uint64_t)malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
          uint64_t v129 = this + v128;
          *(void *)this = v121[3];
          unint64_t v122 = (char *)(this + 8);
          v121[2] = v129;
          v121[3] = this;
        }
        v121[1] = &v122[v126];
        if (v120) {
          this = (uint64_t)memcpy(v122, *(const void **)(v4 + 12728), v120);
        }
        *(void *)(v4 + 12728) = v122;
        LODWORD(v120) = *(_DWORD *)(v4 + 12740);
        std::string::size_type v20 = v122;
        unsigned int v18 = *(_DWORD *)(v4 + 12736);
        goto LABEL_203;
      }
LABEL_61:
      int v31 = 0;
      uint64_t v3 = 0;
      int v32 = 0;
LABEL_206:
      *(_DWORD *)a3 = v31;
      *(void *)(a3 + 8) = v3;
      *(_DWORD *)(a3 + 16) = v32;
      return this;
  }
}

uint64_t *anonymous namespace'::Remangler::mangleFunctionType@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unsigned int v12 = a2;
        if (v11 >= 2) {
          unsigned int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  size_t v14 = *(unsigned int *)(v5 + 12740);
  int v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    unint64_t v16 = *(void **)(v5 + 12744);
    unint64_t v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      unint64_t v19 = (unint64_t)&v15[v14 + 1];
      unint64_t v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v18 = v16[2];
    }
    if ((2 * v14) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v14);
    }
    size_t v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      unint64_t v22 = 2 * v16[4];
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      v16[4] = v22;
      unint64_t v23 = v22 + 8;
      this = (uint64_t *)malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      unint64_t v24 = (char *)this + v23;
      *this = v16[3];
      unint64_t v17 = (char *)(this + 1);
      v16[2] = v24;
      void v16[3] = this;
    }
    v16[1] = &v17[v21];
    if (v14) {
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
    }
    *(void *)(v5 + 12728) = v17;
    LODWORD(v14) = *(_DWORD *)(v5 + 12740);
    int v15 = v17;
    unsigned int v13 = *(_DWORD *)(v5 + 12736);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v15[v13] = 99;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleConstrainedExistential@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 == 2) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    unsigned int v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)v4 + 18);
  if (v8 == 2)
  {
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_9:
  if (v8 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
    goto LABEL_12;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XP", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleConstrainedExistentialRequirementList@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (_anonymous_namespace_::Remangler *)this;
  BOOL v13 = 1;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unint64_t v8 = 0;
      unsigned int v9 = a3 + 1;
      while (1)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 == 1) {
          goto LABEL_13;
        }
        if (v10 != 5) {
          break;
        }
        if (*((unsigned int *)a2 + 2) <= v8)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_8;
        }
LABEL_16:
        unsigned int v12 = a2;
        if (v11 >= 2) {
          unsigned int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
LABEL_8:
        if (v7 == ++v8) {
          goto LABEL_20;
        }
      }
      if (v10 != 2) {
        goto LABEL_7;
      }
      unint64_t v10 = 2;
LABEL_13:
      if (v10 <= v8) {
        goto LABEL_7;
      }
      goto LABEL_16;
  }
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGenericPartialSpecialization@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    unsigned int v9 = 0;
  }
  switch(v8)
  {
    case 1:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_15;
    case 2:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_15;
    case 5:
      uint64_t v10 = *(void *)a2;
      goto LABEL_9;
  }
  unsigned int v11 = 0;
LABEL_15:
  while (v9 != v11)
  {
    unsigned int v12 = *(swift::Demangle::__runtime::Node **)v9;
    if (*(_WORD *)(*(void *)v9 + 16) == 94)
    {
      int v19 = *((unsigned __int8 *)v12 + 18);
      if ((v19 - 1) >= 2)
      {
        if (v19 != 5 || !*((_DWORD *)v12 + 2))
        {
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          break;
        }
        unsigned int v12 = *(swift::Demangle::__runtime::Node **)v12;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
      break;
    }
    unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
  }
  BOOL v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
  if (*((_WORD *)a2 + 8) == 87) {
    size_t v14 = "TP";
  }
  else {
    size_t v14 = "Tp";
  }
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  int v16 = *((unsigned __int8 *)a2 + 18);
  unint64_t v17 = (swift::Demangle::__runtime::Node **)a2;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      uint64_t v18 = *(void *)a2;
      unint64_t v17 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_33;
    }
    unint64_t v17 = 0;
  }
  if (v16 == 1)
  {
    BOOL v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
LABEL_36:
    if (v17 != v13) {
      goto LABEL_37;
    }
    goto LABEL_43;
  }
  if (v16 == 2) {
    goto LABEL_36;
  }
  if (v16 != 5)
  {
    BOOL v13 = 0;
    if (v17) {
      goto LABEL_37;
    }
LABEL_43:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  uint64_t v18 = *(void *)a2;
LABEL_33:
  BOOL v13 = (swift::Demangle::__runtime::Node **)(v18 + 8 * *((unsigned int *)a2 + 2));
  if (v17 == v13) {
    goto LABEL_43;
  }
LABEL_37:
  unsigned int v20 = a3 + 1;
  while (1)
  {
    if (*((_WORD *)*v17 + 8) != 94)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
    }
    if (++v17 == v13) {
      goto LABEL_43;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WG", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTableInstantiationFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WI", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleResilientProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Wr", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleGenericTypeMetadataPattern@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MP", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobal@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "$s", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      unsigned int v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_31;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_31;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_31;
      }
      goto LABEL_16;
  }
  unsigned int v12 = 0;
  if (v10)
  {
LABEL_16:
    char v13 = 0;
    unsigned int v14 = a3 + 1;
    do
    {
      char v15 = 1;
      switch(*(_WORD *)(*(void *)v10 + 16))
      {
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x4D:
        case 0x56:
        case 0x57:
        case 0x5B:
        case 0x5C:
        case 0x5D:
        case 0x5F:
        case 0x60:
        case 0x90:
        case 0xA0:
        case 0xA4:
        case 0x100:
        case 0x115:
        case 0x11F:
        case 0x120:
        case 0x13F:
        case 0x148:
        case 0x149:
        case 0x14A:
        case 0x14C:
        case 0x14D:
        case 0x154:
          goto LABEL_18;
        default:
          if (*(_DWORD *)a4) {
            return result;
          }
          if ((v13 & 1) == 0) {
            goto LABEL_30;
          }
          int v16 = v10;
          break;
      }
      while (1)
      {
        int v17 = *((unsigned __int8 *)a2 + 18);
        uint64_t v18 = a2;
        if ((v17 - 1) < 2) {
          goto LABEL_26;
        }
        if (v17 != 5) {
          break;
        }
        uint64_t v18 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_26:
        if (v16 == v18) {
          goto LABEL_30;
        }
LABEL_27:
        int v19 = (swift::Demangle::__runtime::Node *)*((void *)v16 - 1);
        int v16 = (swift::Demangle::__runtime::Node *)((char *)v16 - 8);
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      if (v16) {
        goto LABEL_27;
      }
LABEL_30:
      char v15 = 0;
LABEL_18:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
      char v13 = v15;
    }
    while (v10 != v12);
  }
LABEL_31:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalGetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

void anonymous namespace'::Remangler::mangleIdentifier(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  long long v9 = 0uLL;
  LOBYTE(v10) = 0;
  {
    unint64_t v6 = *((void *)this + 1585);
    if (v6 > 0xF)
    {
      int v8 = *((_DWORD *)this + 3178) + 16;
      long long v11 = v9;
      uint64_t v12 = v10;
      int v13 = v8;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v11, &v11);
    }
    else
    {
      *((void *)this + 1585) = v6 + 1;
      int v7 = (char *)this + 24 * v6 + 12296;
      *(_OWORD *)int v7 = v9;
      v7[16] = v10;
    }
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIVarInitializer@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "fe", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIVarDestroyer@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "fE", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplEscaping@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    long long v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 101;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplConvention@<X0>(unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = *a2;
  size_t v6 = a2[1];
  if (v6 == (uint64_t *)13)
  {
    uint64_t v11 = *v5;
    uint64_t v12 = *(uint64_t *)((char *)v5 + 5);
    if (v11 != 0x5F65656C6C616340 || v12 != 0x64656E776F5F6565) {
      goto LABEL_23;
    }
    char v10 = 120;
    goto LABEL_25;
  }
  if (v6 == (uint64_t *)18)
  {
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    int v16 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 0x5F65656C6C616340 || v15 != 0x65746E6172617567 || v16 != 25701) {
      goto LABEL_23;
    }
    char v10 = 103;
LABEL_25:
    unsigned int v21 = this[3184];
    size_t v22 = this[3185];
    unint64_t v23 = (char *)*((void *)this + 1591);
    if (v21 < v22)
    {
LABEL_42:
      int v20 = 0;
      a2 = 0;
      int v19 = 0;
      v3[3184] = v21 + 1;
      v23[v21] = v10;
      goto LABEL_43;
    }
    unint64_t v24 = (void *)*((void *)this + 1593);
    uint64_t v25 = (char *)v24[1];
    if (&v23[v22] == v25)
    {
      unint64_t v27 = (unint64_t)&v23[v22 + 1];
      unint64_t v26 = v24[2];
      if (v27 <= v26)
      {
        v24[1] = v27;
        LODWORD(v28) = 1;
LABEL_41:
        v3[3185] = v22 + v28;
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v26 = v24[2];
    }
    if ((2 * v22) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v22);
    }
    size_t v29 = v28 + v22;
    if (!v25 || (unint64_t)&v25[v29] > v26)
    {
      unint64_t v30 = 2 * v24[4];
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      void v24[4] = v30;
      unint64_t v31 = v30 + 8;
      this = (unsigned int *)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      int v32 = (char *)this + v31;
      *(void *)this = v24[3];
      uint64_t v25 = (char *)(this + 2);
      void v24[2] = v32;
      void v24[3] = this;
    }
    v24[1] = &v25[v29];
    if (v22) {
      this = (unsigned int *)memcpy(v25, *((const void **)v3 + 1591), v22);
    }
    *((void *)v3 + 1591) = v25;
    LODWORD(v22) = v3[3185];
    unint64_t v23 = v25;
    unsigned int v21 = v3[3184];
    goto LABEL_41;
  }
  if (v6 == (uint64_t *)15)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = *(uint64_t *)((char *)v5 + 7);
    if (v7 == 0x5F65656C6C616340 && v8 == 0x64656E776F6E755FLL)
    {
      char v10 = 121;
      goto LABEL_25;
    }
  }
LABEL_23:
  int v19 = 1882;
  int v20 = 15;
LABEL_43:
  *(_DWORD *)a3 = v20;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v19;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplDifferentiabilityKind@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = this;
  uint64_t v5 = *(void *)a2;
  unsigned int v6 = this[3184];
  size_t v7 = this[3185];
  uint64_t v8 = (char *)*((void *)this + 1591);
  if (v6 >= v7)
  {
    long long v9 = (void *)*((void *)this + 1593);
    char v10 = (char *)v9[1];
    if (&v8[v7] == v10)
    {
      unint64_t v12 = (unint64_t)&v8[v7 + 1];
      unint64_t v11 = v9[2];
      if (v12 <= v11)
      {
        v9[1] = v12;
        LODWORD(v13) = 1;
LABEL_20:
        v3[3185] = v7 + v13;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v11 = v9[2];
    }
    if ((2 * v7) <= 4) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = (2 * v7);
    }
    size_t v14 = v13 + v7;
    if (v10) {
      BOOL v15 = (unint64_t)&v10[v13 + v7] > v11;
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v8 = (char *)v9[1];
    if (v15)
    {
      unint64_t v16 = 2 * v9[4];
      if (v16 <= v14 + 1) {
        unint64_t v16 = v14 + 1;
      }
      void v9[4] = v16;
      unint64_t v17 = v16 + 8;
      this = (unsigned int *)malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      uint64_t v18 = (char *)this + v17;
      *(void *)this = v9[3];
      uint64_t v8 = (char *)(this + 2);
      v9[2] = v18;
      void v9[3] = this;
    }
    v9[1] = &v8[v14];
    if (v7) {
      this = (unsigned int *)memcpy(v8, *((const void **)v3 + 1591), v7);
    }
    *((void *)v3 + 1591) = v8;
    LODWORD(v7) = v3[3185];
    unsigned int v6 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v6 + 1;
  v8[v6] = v5;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplErasedIsolation@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  size_t v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    long long v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    size_t v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      unint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      size_t v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 65;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplSendingResult@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  size_t v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    long long v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    size_t v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      unint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      size_t v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 84;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplParameterResultDifferentiability@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 18) != 3)
  {
    int v6 = 1890;
    int v7 = 1;
    goto LABEL_29;
  }
  uint64_t v4 = *((void *)a2 + 1);
  if (!v4)
  {
    int v7 = 0;
    a2 = 0;
    int v6 = 0;
    goto LABEL_29;
  }
  if (v4 == 13 && **(void **)a2 == 0x76697265446F6E40 && *(void *)(*(void *)a2 + 5) == 0x6576697461766972)
  {
    uint64_t v8 = this;
    unsigned int v9 = this[3184];
    size_t v10 = this[3185];
    unint64_t v11 = (char *)*((void *)this + 1591);
    if (v9 < v10)
    {
LABEL_28:
      int v7 = 0;
      a2 = 0;
      int v6 = 0;
      v8[3184] = v9 + 1;
      v11[v9] = 119;
      goto LABEL_29;
    }
    uint64_t v12 = (void *)*((void *)this + 1593);
    size_t v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_27:
        v8[3185] = v10 + v16;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (!v13 || (unint64_t)&v13[v17] > v14)
    {
      unint64_t v18 = 2 * v12[4];
      if (v18 <= v17 + 1) {
        unint64_t v18 = v17 + 1;
      }
      _OWORD v12[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      int v20 = (char *)this + v19;
      *(void *)this = v12[3];
      size_t v13 = (char *)(this + 2);
      v12[2] = v20;
      void v12[3] = this;
    }
    v12[1] = &v13[v17];
    if (v10) {
      this = (unsigned int *)memcpy(v13, *((const void **)v8 + 1591), v10);
    }
    *((void *)v8 + 1591) = v13;
    LODWORD(v10) = v8[3185];
    unint64_t v11 = v13;
    unsigned int v9 = v8[3184];
    goto LABEL_27;
  }
  int v6 = 1898;
  int v7 = 16;
LABEL_29:
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

{
  uint64_t v4;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;

  if (*((_WORD *)a2 + 8) != 107)
  {
    int v6 = 1798;
    int v7 = 1;
    goto LABEL_29;
  }
  uint64_t v4 = *((void *)a2 + 1);
  if (!v4)
  {
    int v7 = 0;
    a2 = 0;
    int v6 = 0;
    goto LABEL_29;
  }
  if (v4 == 13 && **(void **)a2 == 0x76697265446F6E40 && *(void *)(*(void *)a2 + 5) == 0x6576697461766972)
  {
    uint64_t v8 = this;
    unsigned int v9 = this[3184];
    size_t v10 = this[3185];
    unint64_t v11 = (char *)*((void *)this + 1591);
    if (v9 < v10)
    {
LABEL_28:
      int v7 = 0;
      a2 = 0;
      int v6 = 0;
      v8[3184] = v9 + 1;
      v11[v9] = 119;
      goto LABEL_29;
    }
    uint64_t v12 = (void *)*((void *)this + 1593);
    size_t v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_27:
        v8[3185] = v10 + v16;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (!v13 || (unint64_t)&v13[v17] > v14)
    {
      unint64_t v18 = 2 * v12[4];
      if (v18 <= v17 + 1) {
        unint64_t v18 = v17 + 1;
      }
      _OWORD v12[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      int v20 = (char *)this + v19;
      *(void *)this = v12[3];
      size_t v13 = (char *)(this + 2);
      v12[2] = v20;
      void v12[3] = this;
    }
    v12[1] = &v13[v17];
    if (v10) {
      this = (unsigned int *)memcpy(v13, *((const void **)v8 + 1591), v10);
    }
    *((void *)v8 + 1591) = v13;
    LODWORD(v10) = v8[3185];
    unint64_t v11 = v13;
    unsigned int v9 = v8[3184];
    goto LABEL_27;
  }
  int v6 = 1807;
  int v7 = 16;
LABEL_29:
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplParameterSending@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 18) != 3)
  {
    int v5 = 1906;
    int v6 = 1;
    goto LABEL_9;
  }
  if (*((void *)a2 + 1) == 7 && **(_DWORD **)a2 == 1684956531 && *(_DWORD *)(*(void *)a2 + 3) == 1735289188)
  {
    int v7 = this;
    unsigned int v8 = this[3184];
    size_t v9 = this[3185];
    size_t v10 = (char *)*((void *)this + 1591);
    if (v8 < v9)
    {
LABEL_27:
      int v6 = 0;
      a2 = 0;
      int v5 = 0;
      v7[3184] = v8 + 1;
      v10[v8] = 84;
      goto LABEL_9;
    }
    unint64_t v11 = (void *)*((void *)this + 1593);
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_26:
        v7[3185] = v9 + v15;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (!v12 || (unint64_t)&v12[v16] > v13)
    {
      unint64_t v17 = 2 * v11[4];
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      _OWORD v11[4] = v17;
      unint64_t v18 = v17 + 8;
      this = (unsigned int *)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      unint64_t v19 = (char *)this + v18;
      *(void *)this = v11[3];
      uint64_t v12 = (char *)(this + 2);
      void v11[2] = v19;
      void v11[3] = this;
    }
    v11[1] = &v12[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v12, *((const void **)v7 + 1591), v9);
    }
    *((void *)v7 + 1591) = v12;
    LODWORD(v9) = v7[3185];
    size_t v10 = v12;
    unsigned int v8 = v7[3184];
    goto LABEL_26;
  }
  int v5 = 1910;
  int v6 = 19;
LABEL_9:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v5;
  return this;
}

{
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  size_t v9;
  char *v10;
  void *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;

  if (*((void *)a2 + 1) == 7 && **(_DWORD **)a2 == 1684956531 && *(_DWORD *)(*(void *)a2 + 3) == 1735289188)
  {
    int v7 = this;
    unsigned int v8 = this[3184];
    size_t v9 = this[3185];
    size_t v10 = (char *)*((void *)this + 1591);
    if (v8 < v9)
    {
LABEL_25:
      int v6 = 0;
      a2 = 0;
      int v5 = 0;
      v7[3184] = v8 + 1;
      v10[v8] = 84;
      goto LABEL_7;
    }
    unint64_t v11 = (void *)*((void *)this + 1593);
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_24:
        v7[3185] = v9 + v15;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (!v12 || (unint64_t)&v12[v16] > v13)
    {
      unint64_t v17 = 2 * v11[4];
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      _OWORD v11[4] = v17;
      unint64_t v18 = v17 + 8;
      this = (unsigned int *)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      unint64_t v19 = (char *)this + v18;
      *(void *)this = v11[3];
      uint64_t v12 = (char *)(this + 2);
      void v11[2] = v19;
      void v11[3] = this;
    }
    v11[1] = &v12[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v12, *((const void **)v7 + 1591), v9);
    }
    *((void *)v7 + 1591) = v12;
    LODWORD(v9) = v7[3185];
    size_t v10 = v12;
    unsigned int v8 = v7[3184];
    goto LABEL_24;
  }
  int v5 = 1817;
  int v6 = 19;
LABEL_7:
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v5;
  return this;
}

char *anonymous namespace'::Remangler::mangleImplFunctionConvention@<X0>(char *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = (unsigned int *)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      goto LABEL_47;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(unsigned char *)(*(void *)v7 + 18) != 3)
  {
LABEL_47:
    int v11 = 1936;
    int v12 = 1;
    goto LABEL_48;
  }
  unsigned int v8 = a2;
  if ((v6 - 1) >= 2) {
    unsigned int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  size_t v9 = *(uint64_t **)v8;
  uint64_t v10 = *(void *)(*(void *)v8 + 8);
  int v11 = 1936;
  int v12 = 1;
  uint64_t v13 = *v9;
  switch(v10)
  {
    case 1:
      if (*(unsigned char *)v13 == 99)
      {
        char v14 = 67;
        goto LABEL_17;
      }
      int v11 = 1936;
      break;
    case 5:
      if (*(_DWORD *)v13 != 1668246626 || *(unsigned char *)(v13 + 4) != 107) {
        goto LABEL_47;
      }
      char v14 = 66;
LABEL_17:
      size_t v16 = a2;
      if (v6 != 2)
      {
        if (v6 != 5 || *((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_51;
        }
        size_t v16 = *(swift::Demangle::__runtime::Node **)a2;
      }
      if (*(_WORD *)(*((void *)v16 + 1) + 16) != 23) {
        goto LABEL_51;
      }
      unint64_t v17 = (const void **)(this + 12728);
      unsigned int v18 = *((_DWORD *)this + 3184);
      size_t v19 = *((unsigned int *)this + 3185);
      int v20 = (char *)*((void *)this + 1591);
      if (v18 < v19) {
        goto LABEL_83;
      }
      unsigned int v21 = (void *)*((void *)this + 1593);
      size_t v22 = (char *)v21[1];
      if (&v20[v19] == v22)
      {
        unint64_t v40 = (unint64_t)&v20[v19 + 1];
        unint64_t v23 = v21[2];
        if (v40 <= v23)
        {
          v21[1] = v40;
          LODWORD(v41) = 1;
          goto LABEL_82;
        }
      }
      else
      {
        unint64_t v23 = v21[2];
      }
      if ((2 * v19) <= 4) {
        uint64_t v41 = 4;
      }
      else {
        uint64_t v41 = (2 * v19);
      }
      size_t v42 = v41 + v19;
      if (!v22 || (unint64_t)&v22[v42] > v23)
      {
        unint64_t v43 = 2 * v21[4];
        if (v43 <= v42 + 1) {
          unint64_t v43 = v42 + 1;
        }
        void v21[4] = v43;
        unint64_t v44 = v43 + 8;
        unint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        unsigned int v46 = (char *)v45 + v44;
        *unint64_t v45 = v21[3];
        size_t v22 = (char *)(v45 + 1);
        v21[2] = v46;
        void v21[3] = v45;
      }
      v21[1] = &v22[v42];
      if (v19) {
        memcpy(v22, *v17, v19);
      }
      *((void *)v4 + 1591) = v22;
      LODWORD(v19) = v4[3185];
      int v20 = v22;
      unsigned int v18 = v4[3184];
LABEL_82:
      v4[3185] = v19 + v41;
LABEL_83:
      v4[3184] = v18 + 1;
      v20[v18] = 122;
      unsigned int v47 = v4[3184];
      size_t v48 = v4[3185];
      unint64_t v49 = (char *)*((void *)v4 + 1591);
      if (v47 < v48) {
        goto LABEL_100;
      }
      unint64_t v50 = (void *)*((void *)v4 + 1593);
      unint64_t v51 = (char *)v50[1];
      if (&v49[v48] == v51)
      {
        unint64_t v53 = (unint64_t)&v49[v48 + 1];
        unint64_t v52 = v50[2];
        if (v53 <= v52)
        {
          v50[1] = v53;
          LODWORD(v54) = 1;
          goto LABEL_99;
        }
      }
      else
      {
        unint64_t v52 = v50[2];
      }
      if ((2 * v48) <= 4) {
        uint64_t v54 = 4;
      }
      else {
        uint64_t v54 = (2 * v48);
      }
      size_t v55 = v54 + v48;
      if (!v51 || (unint64_t)&v51[v55] > v52)
      {
        unint64_t v56 = 2 * v50[4];
        if (v56 <= v55 + 1) {
          unint64_t v56 = v55 + 1;
        }
        v50[4] = v56;
        unint64_t v57 = v56 + 8;
        unsigned int v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
        size_t v59 = (char *)v58 + v57;
        *unsigned int v58 = v50[3];
        unint64_t v51 = (char *)(v58 + 1);
        v50[2] = v59;
        void v50[3] = v58;
      }
      v50[1] = &v51[v55];
      if (v48) {
        memcpy(v51, *v17, v48);
      }
      *((void *)v4 + 1591) = v51;
      LODWORD(v48) = v4[3185];
      unint64_t v49 = v51;
      unsigned int v47 = v4[3184];
LABEL_99:
      v4[3185] = v48 + v54;
LABEL_100:
      v4[3184] = v47 + 1;
      v49[v47] = v14;
      int v60 = *((unsigned __int8 *)v3 + 18);
      if (v60 == 2) {
        goto LABEL_104;
      }
      if (v60 == 5 && *((_DWORD *)v3 + 2) >= 2u)
      {
        uint64_t v3 = *(swift::Demangle::__runtime::Node **)v3;
LABEL_104:
        uint64_t v61 = *((void *)v3 + 1);
      }
      else
      {
        uint64_t v61 = 0;
      }
      swift::Demangle::__runtime::CharVector::append(v4 + 3182, *(void *)(v61 + 8), *((swift::Demangle::__runtime::NodeFactory **)v4 + 1593));
      this = (char *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, *(const void **)v61, *(void *)(v61 + 8), *((void **)v4 + 1593));
      int v12 = 0;
      uint64_t v3 = 0;
      int v11 = 0;
      break;
    case 6:
      if (*(_DWORD *)v13 != 1752458605 || *(_WORD *)(v13 + 4) != 25711) {
        goto LABEL_47;
      }
      char v14 = 77;
      goto LABEL_51;
    case 7:
      if (*(_DWORD *)v13 != 1936682083 || *(_DWORD *)(v13 + 3) != 1701999987) {
        goto LABEL_47;
      }
      char v14 = 75;
      goto LABEL_51;
    case 11:
      if (*(void *)v13 != 0x74656D5F636A626FLL || *(void *)(v13 + 3) != 0x646F6874656D5F63) {
        goto LABEL_47;
      }
      char v14 = 79;
      goto LABEL_51;
    case 14:
      if (*(void *)v13 != 0x5F7373656E746977 || *(void *)(v13 + 6) != 0x646F6874656D5F73) {
        goto LABEL_47;
      }
      char v14 = 87;
LABEL_51:
      unsigned int v28 = *((_DWORD *)this + 3184);
      size_t v29 = *((unsigned int *)this + 3185);
      unint64_t v30 = (char *)*((void *)this + 1591);
      if (v28 < v29) {
        goto LABEL_67;
      }
      unint64_t v31 = (void *)*((void *)this + 1593);
      int v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        unint64_t v34 = (unint64_t)&v30[v29 + 1];
        unint64_t v33 = v31[2];
        if (v34 <= v33)
        {
          v31[1] = v34;
          LODWORD(v35) = 1;
          goto LABEL_66;
        }
      }
      else
      {
        unint64_t v33 = v31[2];
      }
      if ((2 * v29) <= 4) {
        uint64_t v35 = 4;
      }
      else {
        uint64_t v35 = (2 * v29);
      }
      size_t v36 = v35 + v29;
      if (!v32 || (unint64_t)&v32[v36] > v33)
      {
        unint64_t v37 = 2 * v31[4];
        if (v37 <= v36 + 1) {
          unint64_t v37 = v36 + 1;
        }
        v31[4] = v37;
        unint64_t v38 = v37 + 8;
        this = (char *)malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        unint64_t v39 = &this[v38];
        *(void *)this = v31[3];
        int v32 = this + 8;
        v31[2] = v39;
        void v31[3] = this;
      }
      v31[1] = &v32[v36];
      if (v29) {
        this = (char *)memcpy(v32, *((const void **)v4 + 1591), v29);
      }
      *((void *)v4 + 1591) = v32;
      LODWORD(v29) = v4[3185];
      unint64_t v30 = v32;
      unsigned int v28 = v4[3184];
LABEL_66:
      v4[3185] = v29 + v35;
LABEL_67:
      int v12 = 0;
      uint64_t v3 = 0;
      int v11 = 0;
      v4[3184] = v28 + 1;
      v30[v28] = v14;
      break;
    default:
      break;
  }
LABEL_48:
  *(_DWORD *)a3 = v12;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v11;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleImplFunctionType@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      uint64_t v9 = *(void *)a2;
      unsigned int v8 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v8 = 0;
  }
  switch(v7)
  {
    case 1:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v8 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_30;
      }
      break;
    case 2:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v8 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_30;
      }
      break;
    case 5:
      uint64_t v9 = *(void *)a2;
LABEL_9:
      uint64_t v10 = (swift::Demangle::__runtime::Node *)(v9 + 8 * *((unsigned int *)a2 + 2));
      if (v8 != v10) {
        break;
      }
LABEL_30:
      unint64_t v26 = "";
      char v27 = 1;
      char v28 = 1;
      goto LABEL_31;
    default:
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_30;
      }
      break;
  }
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  unsigned int v14 = a3 + 1;
  uint64_t v289 = "";
  while (2)
  {
    unint64_t v17 = v11;
    size_t v16 = *(swift::Demangle::__runtime::Node **)v8;
    int v11 = *(swift::Demangle::__runtime::Node **)v8;
    switch(*(_WORD *)(*(void *)v8 + 16))
    {
      case '+':
        goto LABEL_13;
      case '.':
        uint64_t v289 = "P";
        int v11 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      case 't':
        int v11 = v17;
        uint64_t v13 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      case 'v':
      case 'x':
      case 'y':
      case 'z':
        int v18 = *((unsigned __int8 *)v16 + 18);
        uint64_t v15 = 1;
        if (v18 == 2) {
          goto LABEL_12;
        }
        if (v18 != 5)
        {
          int v50 = 1984;
          goto LABEL_475;
        }
        uint64_t v19 = *((unsigned int *)v16 + 2);
        if ((v19 - 2) > 2)
        {
          int v50 = 1984;
          LODWORD(v15) = 1;
          goto LABEL_475;
        }
        uint64_t v15 = v19 - 1;
        size_t v16 = *(swift::Demangle::__runtime::Node **)v16;
LABEL_12:
        int v11 = v17;
        if (*(_DWORD *)a4) {
          return this;
        }
LABEL_13:
        unsigned int v8 = (swift::Demangle::__runtime::Node *)((char *)v8 + 8);
        if (v8 != v10) {
          continue;
        }
        if (v11)
        {
          if (*(_DWORD *)a4) {
            return this;
          }
        }
        BOOL v292 = v13 == 0;
        if (!v13) {
          goto LABEL_528;
        }
        unsigned int v20 = *(_DWORD *)(v5 + 12736);
        size_t v21 = *(unsigned int *)(v5 + 12740);
        size_t v22 = *(char **)(v5 + 12728);
        if (v20 < v21) {
          goto LABEL_501;
        }
        unint64_t v23 = *(void **)(v5 + 12744);
        unint64_t v24 = (char *)v23[1];
        if (&v22[v21] == v24)
        {
          unint64_t v249 = (unint64_t)&v22[v21 + 1];
          unint64_t v25 = v23[2];
          if (v249 <= v25)
          {
            v23[1] = v249;
            int v256 = 1;
            goto LABEL_500;
          }
        }
        else
        {
          unint64_t v25 = v23[2];
        }
        LODWORD(v250) = 2 * v21;
        if ((2 * v21) <= 4) {
          uint64_t v250 = 4;
        }
        else {
          uint64_t v250 = v250;
        }
        int v288 = v250;
        size_t v251 = v250 + v21;
        if (!v24 || (unint64_t)&v24[v251] > v25)
        {
          unint64_t v252 = 2 * v23[4];
          if (v252 <= v251 + 1) {
            unint64_t v252 = v251 + 1;
          }
          v23[4] = v252;
          unint64_t v253 = v252 + 8;
          BOOL v254 = malloc_type_malloc(v252 + 8, 0xD0263BC5uLL);
          uint64_t v255 = (char *)v254 + v253;
          *BOOL v254 = v23[3];
          unint64_t v24 = (char *)(v254 + 1);
          v23[2] = v255;
          void v23[3] = v254;
        }
        v23[1] = &v24[v251];
        if (v21) {
          memcpy(v24, *(const void **)(v5 + 12728), v21);
        }
        *(void *)(v5 + 12728) = v24;
        LODWORD(v21) = *(_DWORD *)(v5 + 12740);
        size_t v22 = v24;
        unsigned int v20 = *(_DWORD *)(v5 + 12736);
        int v256 = v288;
LABEL_500:
        *(_DWORD *)(v5 + 12740) = v21 + v256;
LABEL_501:
        *(_DWORD *)(v5 + 12736) = v20 + 1;
        v22[v20] = 121;
        int v257 = *((unsigned __int8 *)v13 + 18);
        unint64_t v258 = v13;
        if ((v257 - 1) < 2) {
          goto LABEL_505;
        }
        if (v257 == 5 && *((_DWORD *)v13 + 2))
        {
          unint64_t v258 = *(swift::Demangle::__runtime::Node **)v13;
LABEL_505:
          uint64_t v259 = *(void *)v258;
        }
        else
        {
          uint64_t v259 = 0;
        }
        int v260 = *(unsigned __int8 *)(v259 + 18);
        unint64_t v261 = (swift::Demangle::__runtime::Node **)v259;
        if ((v260 - 1) < 2) {
          goto LABEL_511;
        }
        if (v260 == 5)
        {
          unsigned int v262 = *(swift::Demangle::__runtime::Node **)v259;
          unint64_t v261 = *(swift::Demangle::__runtime::Node ***)v259;
LABEL_515:
          v263 = (swift::Demangle::__runtime::Node **)((char *)v262 + 8 * *(unsigned int *)(v259 + 8));
          goto LABEL_519;
        }
        unint64_t v261 = 0;
LABEL_511:
        switch(v260)
        {
          case 1:
            v263 = (swift::Demangle::__runtime::Node **)(v259 + 8);
            break;
          case 2:
            v263 = (swift::Demangle::__runtime::Node **)(v259 + 16);
            break;
          case 5:
            unsigned int v262 = *(swift::Demangle::__runtime::Node **)v259;
            goto LABEL_515;
          default:
            v263 = 0;
            break;
        }
LABEL_519:
        if (v261 != v263)
        {
          do
          {
            if (*(_DWORD *)a4) {
              return this;
            }
            ++v261;
          }
          while (v261 != v263);
          int v257 = *((unsigned __int8 *)v13 + 18);
        }
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (v257 == 2) {
          goto LABEL_527;
        }
        if (v257 == 5 && *((_DWORD *)v13 + 2) >= 2u)
        {
          uint64_t v13 = *(swift::Demangle::__runtime::Node **)v13;
LABEL_527:
          if (*(_DWORD *)a4) {
            return this;
          }
        }
LABEL_528:
        if (!v12)
        {
          char v27 = 1;
LABEL_535:
          unint64_t v26 = v289;
          goto LABEL_590;
        }
        int v264 = *((unsigned __int8 *)v12 + 18);
        unint64_t v265 = (swift::Demangle::__runtime::Node **)v12;
        if ((v264 - 1) < 2) {
          goto LABEL_533;
        }
        if (v264 == 5 && *((_DWORD *)v12 + 2))
        {
          unint64_t v265 = *(swift::Demangle::__runtime::Node ***)v12;
LABEL_533:
          uint64_t v266 = *v265;
        }
        else
        {
          uint64_t v266 = 0;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
        unsigned int v267 = *(_DWORD *)(v5 + 12736);
        size_t v268 = *(unsigned int *)(v5 + 12740);
        unint64_t v269 = *(char **)(v5 + 12728);
        if (v267 < v268) {
          goto LABEL_563;
        }
        v270 = *(void **)(v5 + 12744);
        int v271 = (char *)v270[1];
        if (&v269[v268] == v271)
        {
          unint64_t v273 = (unint64_t)&v269[v268 + 1];
          unint64_t v272 = v270[2];
          if (v273 <= v272)
          {
            v270[1] = v273;
            LODWORD(v274) = 1;
            goto LABEL_562;
          }
        }
        else
        {
          unint64_t v272 = v270[2];
        }
        if ((2 * v268) <= 4) {
          uint64_t v274 = 4;
        }
        else {
          uint64_t v274 = (2 * v268);
        }
        size_t v275 = v274 + v268;
        if (!v271 || (unint64_t)&v271[v275] > v272)
        {
          unint64_t v276 = 2 * v270[4];
          if (v276 <= v275 + 1) {
            unint64_t v276 = v275 + 1;
          }
          v270[4] = v276;
          unint64_t v277 = v276 + 8;
          v278 = malloc_type_malloc(v276 + 8, 0xD0263BC5uLL);
          v279 = (char *)v278 + v277;
          void *v278 = v270[3];
          int v271 = (char *)(v278 + 1);
          v270[2] = v279;
          v270[3] = v278;
        }
        v270[1] = &v271[v275];
        if (v268) {
          memcpy(v271, *(const void **)(v5 + 12728), v268);
        }
        *(void *)(v5 + 12728) = v271;
        LODWORD(v268) = *(_DWORD *)(v5 + 12740);
        unint64_t v269 = v271;
        unsigned int v267 = *(_DWORD *)(v5 + 12736);
LABEL_562:
        *(_DWORD *)(v5 + 12740) = v268 + v274;
LABEL_563:
        *(_DWORD *)(v5 + 12736) = v267 + 1;
        v269[v267] = 121;
        int v280 = *((unsigned __int8 *)v12 + 18);
        char v281 = v12;
        if (v280 == 2) {
          goto LABEL_567;
        }
        if (v280 == 5 && *((_DWORD *)v12 + 2) >= 2u)
        {
          char v281 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_567:
          uint64_t v282 = *((void *)v281 + 1);
        }
        else
        {
          uint64_t v282 = 0;
        }
        int v283 = *(unsigned __int8 *)(v282 + 18);
        uint64_t v284 = (swift::Demangle::__runtime::Node **)v282;
        if ((v283 - 1) < 2) {
          goto LABEL_573;
        }
        if (v283 == 5)
        {
          int v285 = *(swift::Demangle::__runtime::Node **)v282;
          uint64_t v284 = *(swift::Demangle::__runtime::Node ***)v282;
LABEL_577:
          int v286 = (swift::Demangle::__runtime::Node **)((char *)v285 + 8 * *(unsigned int *)(v282 + 8));
          goto LABEL_581;
        }
        uint64_t v284 = 0;
LABEL_573:
        switch(v283)
        {
          case 1:
            int v286 = (swift::Demangle::__runtime::Node **)(v282 + 8);
            break;
          case 2:
            int v286 = (swift::Demangle::__runtime::Node **)(v282 + 16);
            break;
          case 5:
            int v285 = *(swift::Demangle::__runtime::Node **)v282;
            goto LABEL_577;
          default:
            int v286 = 0;
            break;
        }
LABEL_581:
        if (v284 != v286)
        {
          do
          {
            if (*(_DWORD *)a4) {
              return this;
            }
            ++v284;
          }
          while (v284 != v286);
          int v280 = *((unsigned __int8 *)v12 + 18);
        }
        unint64_t v26 = v289;
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (v280 == 5 && *((_DWORD *)v12 + 2) >= 3u)
        {
          uint64_t v287 = *(void *)(*(void *)v12 + 16);
          if (*(_WORD *)(v287 + 16) == 235) {
          else
          }
          if (*(_DWORD *)a4) {
            return this;
          }
          char v27 = 0;
          goto LABEL_535;
        }
        char v27 = 0;
LABEL_590:
        char v28 = v292;
        break;
      case 'w':
        int v11 = v17;
        int v12 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      default:
        int v11 = v17;
        goto LABEL_13;
    }
    break;
  }
LABEL_31:
  unsigned int v293 = (const void **)(v5 + 12728);
  unsigned int v29 = *(_DWORD *)(v5 + 12736);
  size_t v30 = *(unsigned int *)(v5 + 12740);
  unint64_t v31 = *(char **)(v5 + 12728);
  if (v29 < v30) {
    goto LABEL_51;
  }
  int v32 = *(void **)(v5 + 12744);
  unint64_t v33 = (char *)v32[1];
  if (&v31[v30] != v33)
  {
    unint64_t v34 = v32[2];
LABEL_39:
    std::string::size_type v290 = v26;
    char v36 = v28;
    if ((2 * v30) <= 4) {
      uint64_t v37 = 4;
    }
    else {
      uint64_t v37 = (2 * v30);
    }
    size_t v38 = v37 + v30;
    if (!v33 || (unint64_t)&v33[v38] > v34)
    {
      unint64_t v39 = 2 * v32[4];
      if (v39 <= v38 + 1) {
        unint64_t v39 = v38 + 1;
      }
      void v32[4] = v39;
      unint64_t v40 = v39 + 8;
      uint64_t v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      size_t v42 = (char *)v41 + v40;
      *uint64_t v41 = v32[3];
      unint64_t v33 = (char *)(v41 + 1);
      v32[2] = v42;
      void v32[3] = v41;
    }
    v32[1] = &v33[v38];
    if (v30) {
      memcpy(v33, *v293, v30);
    }
    *(void *)(v5 + 12728) = v33;
    LODWORD(v30) = *(_DWORD *)(v5 + 12740);
    unint64_t v31 = v33;
    unsigned int v29 = *(_DWORD *)(v5 + 12736);
    char v28 = v36;
    unint64_t v26 = v290;
    goto LABEL_50;
  }
  unint64_t v35 = (unint64_t)&v31[v30 + 1];
  unint64_t v34 = v32[2];
  if (v35 > v34) {
    goto LABEL_39;
  }
  v32[1] = v35;
  LODWORD(v37) = 1;
LABEL_50:
  *(_DWORD *)(v5 + 12740) = v30 + v37;
LABEL_51:
  *(_DWORD *)(v5 + 12736) = v29 + 1;
  v31[v29] = 73;
  if (v27)
  {
    if (v28) {
      goto LABEL_53;
    }
LABEL_74:
    unsigned int v60 = *(_DWORD *)(v5 + 12736);
    size_t v61 = *(unsigned int *)(v5 + 12740);
    uint64_t v62 = *(char **)(v5 + 12728);
    if (v60 < v61) {
      goto LABEL_90;
    }
    unint64_t v63 = *(void **)(v5 + 12744);
    unsigned int v64 = (char *)v63[1];
    if (&v62[v61] == v64)
    {
      unint64_t v66 = (unint64_t)&v62[v61 + 1];
      unint64_t v65 = v63[2];
      if (v66 <= v65)
      {
        v63[1] = v66;
        LODWORD(v67) = 1;
LABEL_89:
        *(_DWORD *)(v5 + 12740) = v61 + v67;
LABEL_90:
        *(_DWORD *)(v5 + 12736) = v60 + 1;
        v62[v60] = 73;
        if (v26) {
          goto LABEL_54;
        }
        goto LABEL_91;
      }
    }
    else
    {
      unint64_t v65 = v63[2];
    }
    if ((2 * v61) <= 4) {
      uint64_t v67 = 4;
    }
    else {
      uint64_t v67 = (2 * v61);
    }
    size_t v68 = v67 + v61;
    if (!v64 || (unint64_t)&v64[v68] > v65)
    {
      unint64_t v69 = 2 * v63[4];
      if (v69 <= v68 + 1) {
        unint64_t v69 = v68 + 1;
      }
      v63[4] = v69;
      unint64_t v70 = v69 + 8;
      char v71 = malloc_type_malloc(v69 + 8, 0xD0263BC5uLL);
      uint64_t v72 = (char *)v71 + v70;
      *char v71 = v63[3];
      unsigned int v64 = (char *)(v71 + 1);
      v63[2] = v72;
      v63[3] = v71;
    }
    v63[1] = &v64[v68];
    if (v61) {
      memcpy(v64, *v293, v61);
    }
    *(void *)(v5 + 12728) = v64;
    LODWORD(v61) = *(_DWORD *)(v5 + 12740);
    uint64_t v62 = v64;
    unsigned int v60 = *(_DWORD *)(v5 + 12736);
    goto LABEL_89;
  }
  unsigned int v44 = *(_DWORD *)(v5 + 12736);
  size_t v45 = *(unsigned int *)(v5 + 12740);
  unsigned int v46 = *(char **)(v5 + 12728);
  if (v44 >= v45)
  {
    unsigned int v47 = *(void **)(v5 + 12744);
    size_t v48 = (char *)v47[1];
    if (&v46[v45] == v48)
    {
      unint64_t v51 = (unint64_t)&v46[v45 + 1];
      unint64_t v49 = v47[2];
      if (v51 <= v49)
      {
        v47[1] = v51;
        LODWORD(v54) = 1;
LABEL_72:
        *(_DWORD *)(v5 + 12740) = v45 + v54;
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v49 = v47[2];
    }
    unint64_t v52 = v26;
    char v53 = v28;
    if ((2 * v45) <= 4) {
      uint64_t v54 = 4;
    }
    else {
      uint64_t v54 = (2 * v45);
    }
    size_t v55 = v54 + v45;
    if (!v48 || (unint64_t)&v48[v55] > v49)
    {
      unint64_t v56 = 2 * v47[4];
      if (v56 <= v55 + 1) {
        unint64_t v56 = v55 + 1;
      }
      v47[4] = v56;
      unint64_t v57 = v56 + 8;
      unsigned int v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
      size_t v59 = (char *)v58 + v57;
      *unsigned int v58 = v47[3];
      size_t v48 = (char *)(v58 + 1);
      v47[2] = v59;
      void v47[3] = v58;
    }
    v47[1] = &v48[v55];
    if (v45) {
      memcpy(v48, *v293, v45);
    }
    *(void *)(v5 + 12728) = v48;
    LODWORD(v45) = *(_DWORD *)(v5 + 12740);
    unsigned int v46 = v48;
    unsigned int v44 = *(_DWORD *)(v5 + 12736);
    char v28 = v53;
    unint64_t v26 = v52;
    goto LABEL_72;
  }
LABEL_73:
  *(_DWORD *)(v5 + 12736) = v44 + 1;
  v46[v44] = 115;
  if ((v28 & 1) == 0) {
    goto LABEL_74;
  }
LABEL_53:
  if (v26)
  {
LABEL_54:
    size_t v43 = strlen(v26);
    goto LABEL_92;
  }
LABEL_91:
  size_t v43 = 0;
LABEL_92:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v293, v26, v43, *(void **)(v5 + 12744));
  int v73 = *((unsigned __int8 *)v4 + 18);
  size_t v74 = (swift::Demangle::__runtime::Node **)v4;
  if ((v73 - 1) >= 2)
  {
    if (v73 == 5)
    {
      std::string v75 = *(swift::Demangle::__runtime::Node ***)v4;
      size_t v74 = *(swift::Demangle::__runtime::Node ***)v4;
      goto LABEL_100;
    }
    size_t v74 = 0;
  }
  if (v73 == 1)
  {
    int v76 = (swift::Demangle::__runtime::Node **)((char *)v4 + 8);
    if (v74 != (swift::Demangle::__runtime::Node **)((char *)v4 + 8)) {
      goto LABEL_107;
    }
    goto LABEL_455;
  }
  if (v73 == 2)
  {
    int v76 = (swift::Demangle::__runtime::Node **)((char *)v4 + 16);
    if (v74 != (swift::Demangle::__runtime::Node **)((char *)v4 + 16)) {
      goto LABEL_107;
    }
LABEL_455:
    unsigned int v236 = *(_DWORD *)(v5 + 12736);
    size_t v237 = *(unsigned int *)(v5 + 12740);
    unint64_t v238 = *(unsigned char **)(v5 + 12728);
    if (v236 < v237)
    {
LABEL_474:
      LODWORD(v15) = 0;
      uint64_t v4 = 0;
      int v50 = 0;
      *(_DWORD *)(v5 + 12736) = v236 + 1;
      v238[v236] = 95;
      goto LABEL_475;
    }
    BOOL v239 = *(void **)(v5 + 12744);
    uint64_t v240 = (unsigned char *)v239[1];
    if (&v238[v237] == v240)
    {
      unint64_t v242 = (unint64_t)&v238[v237 + 1];
      unint64_t v241 = v239[2];
      if (v242 <= v241)
      {
        v239[1] = v242;
        LODWORD(v243) = 1;
LABEL_473:
        *(_DWORD *)(v5 + 12740) = v237 + v243;
        goto LABEL_474;
      }
    }
    else
    {
      unint64_t v241 = v239[2];
    }
    if ((2 * v237) <= 4) {
      uint64_t v243 = 4;
    }
    else {
      uint64_t v243 = (2 * v237);
    }
    size_t v244 = v243 + v237;
    if (v240) {
      BOOL v245 = (unint64_t)&v240[v243 + v237] > v241;
    }
    else {
      BOOL v245 = 1;
    }
    unint64_t v238 = (unsigned char *)v239[1];
    if (v245)
    {
      unint64_t v246 = 2 * v239[4];
      if (v246 <= v244 + 1) {
        unint64_t v246 = v244 + 1;
      }
      v239[4] = v246;
      unint64_t v247 = v246 + 8;
      this = (uint64_t *)malloc_type_malloc(v246 + 8, 0xD0263BC5uLL);
      unsigned int v248 = (char *)this + v247;
      *this = v239[3];
      unint64_t v238 = this + 1;
      v239[2] = v248;
      v239[3] = this;
    }
    v239[1] = &v238[v244];
    if (v237) {
      this = (uint64_t *)memcpy(v238, *v293, v237);
    }
    *(void *)(v5 + 12728) = v238;
    LODWORD(v237) = *(_DWORD *)(v5 + 12740);
    unsigned int v236 = *(_DWORD *)(v5 + 12736);
    goto LABEL_473;
  }
  if (v73 != 5)
  {
    int v76 = 0;
    if (!v74) {
      goto LABEL_455;
    }
    goto LABEL_107;
  }
  std::string v75 = *(swift::Demangle::__runtime::Node ***)v4;
LABEL_100:
  int v76 = &v75[*((unsigned int *)v4 + 2)];
  if (v74 == v76) {
    goto LABEL_455;
  }
LABEL_107:
  std::string::size_type v291 = v76;
  while (2)
  {
    uint64_t v4 = *v74;
    switch(*((_WORD *)*v74 + 8))
    {
      case 'i':
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v81 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v81)
        {
          char v82 = 101;
          goto LABEL_111;
        }
        uint64_t v108 = *(void **)(v5 + 12744);
        size_t v109 = (char *)v108[1];
        if (&v78[v81] == v109)
        {
          unint64_t v189 = (unint64_t)&v78[v81 + 1];
          unint64_t v110 = v108[2];
          if (v189 <= v110)
          {
            v108[1] = v189;
            LODWORD(v190) = 1;
            goto LABEL_338;
          }
        }
        else
        {
          unint64_t v110 = v108[2];
        }
        if ((2 * v81) <= 4) {
          uint64_t v190 = 4;
        }
        else {
          uint64_t v190 = (2 * v81);
        }
        size_t v191 = v190 + v81;
        if (v109) {
          BOOL v192 = (unint64_t)&v109[v190 + v81] > v110;
        }
        else {
          BOOL v192 = 1;
        }
        unint64_t v78 = (char *)v108[1];
        if (v192)
        {
          unint64_t v193 = 2 * v108[4];
          if (v193 <= v191 + 1) {
            unint64_t v193 = v191 + 1;
          }
          v108[4] = v193;
          unint64_t v194 = v193 + 8;
          this = (uint64_t *)malloc_type_malloc(v193 + 8, 0xD0263BC5uLL);
          unsigned int v195 = (char *)this + v194;
          *this = v108[3];
          unint64_t v78 = (char *)(this + 1);
          v108[2] = v195;
          v108[3] = this;
        }
        v108[1] = &v78[v191];
        if (v81) {
          this = (uint64_t *)memcpy(v78, *v293, v81);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v81) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
LABEL_338:
        int v80 = v81 + v190;
        char v82 = 101;
        goto LABEL_110;
      case 'j':
        int v50 = 2059;
        LODWORD(v15) = 15;
        unint64_t v83 = *(swift::Demangle::__runtime::Node ***)v4;
        switch(*((void *)v4 + 1))
        {
          case 0xDLL:
            if (*v83 != (swift::Demangle::__runtime::Node *)0x5F65656C6C616340
              || *(swift::Demangle::__runtime::Node **)((char *)v83 + 5) != (swift::Demangle::__runtime::Node *)0x64656E776F5F6565)
            {
              goto LABEL_544;
            }
            char v82 = 120;
            goto LABEL_372;
          case 0xFLL:
            if (*v83 != (swift::Demangle::__runtime::Node *)0x5F65656C6C616340
              || *(swift::Demangle::__runtime::Node **)((char *)v83 + 7) != (swift::Demangle::__runtime::Node *)0x64656E776F6E755FLL)
            {
              goto LABEL_544;
            }
            char v82 = 121;
            goto LABEL_372;
          case 0x11:
            unint64_t v124 = *v83;
            uint64_t v125 = v83[1];
            int v126 = *((unsigned __int8 *)v83 + 16);
            if (v124 != (swift::Demangle::__runtime::Node *)0x746E65766E6F6340
              || v125 != (swift::Demangle::__runtime::Node *)0x6E696874286E6F69
              || v126 != 41)
            {
              goto LABEL_544;
            }
            char v82 = 116;
            goto LABEL_372;
          case 0x12:
            uint64_t v129 = *v83;
            unint64_t v130 = v83[1];
            int v131 = *((unsigned __int16 *)v83 + 8);
            if (v129 != (swift::Demangle::__runtime::Node *)0x5F65656C6C616340
              || v130 != (swift::Demangle::__runtime::Node *)0x65746E6172617567
              || v131 != 25701)
            {
LABEL_544:
              int v50 = 2059;
              LODWORD(v15) = 15;
              goto LABEL_475;
            }
            char v82 = 103;
LABEL_372:
            unsigned int v79 = *(_DWORD *)(v5 + 12736);
            size_t v77 = *(unsigned int *)(v5 + 12740);
            unint64_t v78 = *(char **)(v5 + 12728);
            if (v79 < v77) {
              goto LABEL_111;
            }
            unsigned int v210 = *(void **)(v5 + 12744);
            int v211 = (char *)v210[1];
            if (&v78[v77] != v211)
            {
              unint64_t v212 = v210[2];
LABEL_376:
              if ((2 * v77) <= 4) {
                uint64_t v135 = 4;
              }
              else {
                uint64_t v135 = (2 * v77);
              }
              size_t v214 = v135 + v77;
              if (!v211 || (unint64_t)&v211[v214] > v212)
              {
                unint64_t v215 = 2 * v210[4];
                if (v215 <= v214 + 1) {
                  unint64_t v215 = v214 + 1;
                }
                v210[4] = v215;
                unint64_t v216 = v215 + 8;
                this = (uint64_t *)malloc_type_malloc(v215 + 8, 0xD0263BC5uLL);
                *this = v210[3];
                int v211 = (char *)(this + 1);
                v210[2] = (char *)this + v216;
                v210[3] = this;
              }
              v210[1] = &v211[v214];
              if (v77) {
                this = (uint64_t *)memcpy(v211, *v293, v77);
              }
              *(void *)(v5 + 12728) = v211;
              LODWORD(v77) = *(_DWORD *)(v5 + 12740);
              unint64_t v78 = v211;
              unsigned int v79 = *(_DWORD *)(v5 + 12736);
              int v76 = v291;
              goto LABEL_109;
            }
            unint64_t v213 = (unint64_t)&v78[v77 + 1];
            unint64_t v212 = v210[2];
            if (v213 > v212) {
              goto LABEL_376;
            }
            v210[1] = v213;
LABEL_388:
            LODWORD(v135) = 1;
LABEL_109:
            int v80 = v77 + v135;
LABEL_110:
            *(_DWORD *)(v5 + 12740) = v80;
LABEL_111:
            *(_DWORD *)(v5 + 12736) = v79 + 1;
            v78[v79] = v82;
            break;
          default:
            goto LABEL_475;
        }
        goto LABEL_112;
      case 'k':
        char v82 = *(unsigned char *)v4;
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v77 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v77) {
          goto LABEL_111;
        }
        char v85 = *(void **)(v5 + 12744);
        unint64_t v86 = (char *)v85[1];
        if (&v78[v77] == v86)
        {
          unint64_t v134 = (unint64_t)&v78[v77 + 1];
          unint64_t v87 = v85[2];
          if (v134 <= v87)
          {
            v85[1] = v134;
            goto LABEL_388;
          }
        }
        else
        {
          unint64_t v87 = v85[2];
        }
        if ((2 * v77) <= 4) {
          uint64_t v135 = 4;
        }
        else {
          uint64_t v135 = (2 * v77);
        }
        size_t v136 = v135 + v77;
        if (v86) {
          BOOL v137 = (unint64_t)&v86[v135 + v77] > v87;
        }
        else {
          BOOL v137 = 1;
        }
        unint64_t v78 = (char *)v85[1];
        if (v137)
        {
          unint64_t v138 = 2 * v85[4];
          if (v138 <= v136 + 1) {
            unint64_t v138 = v136 + 1;
          }
          void v85[4] = v138;
          unint64_t v139 = v138 + 8;
          this = (uint64_t *)malloc_type_malloc(v138 + 8, 0xD0263BC5uLL);
          unsigned int v140 = (char *)this + v139;
          *this = v85[3];
          unint64_t v78 = (char *)(this + 1);
          v85[2] = v140;
          v85[3] = this;
        }
        v85[1] = &v78[v136];
        if (v77) {
          this = (uint64_t *)memcpy(v78, *v293, v77);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v77) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        goto LABEL_109;
      case 'l':
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v88 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v88)
        {
          char v82 = 65;
          goto LABEL_111;
        }
        unint64_t v111 = *(void **)(v5 + 12744);
        unint64_t v112 = (char *)v111[1];
        if (&v78[v88] == v112)
        {
          unint64_t v196 = (unint64_t)&v78[v88 + 1];
          unint64_t v113 = v111[2];
          if (v196 <= v113)
          {
            v111[1] = v196;
            LODWORD(v197) = 1;
            goto LABEL_354;
          }
        }
        else
        {
          unint64_t v113 = v111[2];
        }
        if ((2 * v88) <= 4) {
          uint64_t v197 = 4;
        }
        else {
          uint64_t v197 = (2 * v88);
        }
        size_t v198 = v197 + v88;
        if (v112) {
          BOOL v199 = (unint64_t)&v112[v197 + v88] > v113;
        }
        else {
          BOOL v199 = 1;
        }
        unint64_t v78 = (char *)v111[1];
        if (v199)
        {
          unint64_t v200 = 2 * v111[4];
          if (v200 <= v198 + 1) {
            unint64_t v200 = v198 + 1;
          }
          v111[4] = v200;
          unint64_t v201 = v200 + 8;
          this = (uint64_t *)malloc_type_malloc(v200 + 8, 0xD0263BC5uLL);
          int v202 = (char *)this + v201;
          *this = v111[3];
          unint64_t v78 = (char *)(this + 1);
          v111[2] = v202;
          v111[3] = this;
        }
        v111[1] = &v78[v198];
        if (v88) {
          this = (uint64_t *)memcpy(v78, *v293, v88);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v88) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
LABEL_354:
        int v80 = v88 + v197;
        char v82 = 65;
        goto LABEL_110;
      case 'm':
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
        size_t v89 = *(unsigned int *)(v5 + 12740);
        unint64_t v78 = *(char **)(v5 + 12728);
        if (v79 < v89)
        {
          char v82 = 84;
          goto LABEL_111;
        }
        unint64_t v114 = *(void **)(v5 + 12744);
        uint64_t v115 = (char *)v114[1];
        if (&v78[v89] == v115)
        {
          unint64_t v203 = (unint64_t)&v78[v89 + 1];
          unint64_t v116 = v114[2];
          if (v203 <= v116)
          {
            v114[1] = v203;
            LODWORD(v204) = 1;
            goto LABEL_370;
          }
        }
        else
        {
          unint64_t v116 = v114[2];
        }
        if ((2 * v89) <= 4) {
          uint64_t v204 = 4;
        }
        else {
          uint64_t v204 = (2 * v89);
        }
        size_t v205 = v204 + v89;
        if (v115) {
          BOOL v206 = (unint64_t)&v115[v204 + v89] > v116;
        }
        else {
          BOOL v206 = 1;
        }
        unint64_t v78 = (char *)v114[1];
        if (v206)
        {
          unint64_t v207 = 2 * v114[4];
          if (v207 <= v205 + 1) {
            unint64_t v207 = v205 + 1;
          }
          v114[4] = v207;
          unint64_t v208 = v207 + 8;
          this = (uint64_t *)malloc_type_malloc(v207 + 8, 0xD0263BC5uLL);
          int v209 = (char *)this + v208;
          *this = v114[3];
          unint64_t v78 = (char *)(this + 1);
          v114[2] = v209;
          v114[3] = this;
        }
        v114[1] = &v78[v205];
        if (v89) {
          this = (uint64_t *)memcpy(v78, *v293, v89);
        }
        *(void *)(v5 + 12728) = v78;
        LODWORD(v89) = *(_DWORD *)(v5 + 12740);
        unsigned int v79 = *(_DWORD *)(v5 + 12736);
LABEL_370:
        int v80 = v89 + v204;
        char v82 = 84;
        goto LABEL_110;
      case 'p':
        unint64_t v90 = *(swift::Demangle::__runtime::Node ***)v4;
        uint64_t v91 = *((void *)v4 + 1);
        switch(v91)
        {
          case 6:
            int v117 = *(_DWORD *)v90;
            int v118 = *((unsigned __int16 *)v90 + 2);
            if (v117 != 2037604672 || v118 != 25454)
            {
LABEL_543:
              int v50 = 2076;
              LODWORD(v15) = 17;
              goto LABEL_475;
            }
            char v82 = 72;
            break;
          case 9:
            size_t v120 = *v90;
            int v121 = *((unsigned __int8 *)v90 + 8);
            if (v120 != (swift::Demangle::__runtime::Node *)0x6C6261646E655340 || v121 != 101) {
              goto LABEL_543;
            }
            char v82 = 104;
            break;
          case 11:
            if (*v90 == (swift::Demangle::__runtime::Node *)0x6F5F646C65697940
              && *(swift::Demangle::__runtime::Node **)((char *)v90 + 3) == (swift::Demangle::__runtime::Node *)0x65636E6F5F646C65)
            {
              char v82 = 65;
            }
            else
            {
              unint64_t v93 = *v90;
              uint64_t v94 = *(uint64_t *)((char *)v90 + 3);
              if (v93 != (swift::Demangle::__runtime::Node *)0x6D5F646C65697940 || v94 != 0x796E616D5F646C65) {
                goto LABEL_543;
              }
              char v82 = 71;
            }
            break;
          default:
            goto LABEL_543;
        }
        goto LABEL_372;
      case 'q':
        goto LABEL_452;
      case 'v':
        goto LABEL_224;
      case 'x':
        goto LABEL_289;
      case 'y':
        unsigned int v96 = *(_DWORD *)(v5 + 12736);
        size_t v97 = *(unsigned int *)(v5 + 12740);
        unint64_t v98 = *(char **)(v5 + 12728);
        if (v96 < v97) {
          goto LABEL_223;
        }
        uint64_t v99 = *(void **)(v5 + 12744);
        unint64_t v100 = (char *)v99[1];
        if (&v98[v97] == v100)
        {
          unint64_t v141 = (unint64_t)&v98[v97 + 1];
          unint64_t v101 = v99[2];
          if (v141 <= v101)
          {
            v99[1] = v141;
            LODWORD(v142) = 1;
            goto LABEL_222;
          }
        }
        else
        {
          unint64_t v101 = v99[2];
        }
        if ((2 * v97) <= 4) {
          uint64_t v142 = 4;
        }
        else {
          uint64_t v142 = (2 * v97);
        }
        size_t v143 = v142 + v97;
        if (v100) {
          BOOL v144 = (unint64_t)&v100[v142 + v97] > v101;
        }
        else {
          BOOL v144 = 1;
        }
        unint64_t v98 = (char *)v99[1];
        if (v144)
        {
          unint64_t v145 = 2 * v99[4];
          if (v145 <= v143 + 1) {
            unint64_t v145 = v143 + 1;
          }
          v99[4] = v145;
          unint64_t v146 = v145 + 8;
          int v147 = malloc_type_malloc(v145 + 8, 0xD0263BC5uLL);
          int v148 = (char *)v147 + v146;
          *int v147 = v99[3];
          unint64_t v98 = (char *)(v147 + 1);
          v99[2] = v148;
          v99[3] = v147;
        }
        v99[1] = &v98[v143];
        if (v97) {
          memcpy(v98, *v293, v97);
        }
        *(void *)(v5 + 12728) = v98;
        LODWORD(v97) = *(_DWORD *)(v5 + 12740);
        unsigned int v96 = *(_DWORD *)(v5 + 12736);
LABEL_222:
        *(_DWORD *)(v5 + 12740) = v97 + v142;
LABEL_223:
        *(_DWORD *)(v5 + 12736) = v96 + 1;
        v98[v96] = 89;
LABEL_224:
        int v149 = *((unsigned __int8 *)v4 + 18);
        unint64_t v150 = (swift::Demangle::__runtime::Node **)v4;
        if ((v149 - 1) >= 2) {
          unint64_t v150 = *(swift::Demangle::__runtime::Node ***)v4;
        }
        break;
      case 'z':
        unsigned int v102 = *(_DWORD *)(v5 + 12736);
        size_t v103 = *(unsigned int *)(v5 + 12740);
        unint64_t v104 = *(char **)(v5 + 12728);
        if (v102 < v103) {
          goto LABEL_288;
        }
        unint64_t v105 = *(void **)(v5 + 12744);
        uint64_t v106 = (char *)v105[1];
        if (&v104[v103] == v106)
        {
          unint64_t v163 = (unint64_t)&v104[v103 + 1];
          unint64_t v107 = v105[2];
          if (v163 <= v107)
          {
            v105[1] = v163;
            LODWORD(v164) = 1;
            goto LABEL_287;
          }
        }
        else
        {
          unint64_t v107 = v105[2];
        }
        if ((2 * v103) <= 4) {
          uint64_t v164 = 4;
        }
        else {
          uint64_t v164 = (2 * v103);
        }
        size_t v165 = v164 + v103;
        if (v106) {
          BOOL v166 = (unint64_t)&v106[v164 + v103] > v107;
        }
        else {
          BOOL v166 = 1;
        }
        unint64_t v104 = (char *)v105[1];
        if (v166)
        {
          unint64_t v167 = 2 * v105[4];
          if (v167 <= v165 + 1) {
            unint64_t v167 = v165 + 1;
          }
          v105[4] = v167;
          unint64_t v168 = v167 + 8;
          this = (uint64_t *)malloc_type_malloc(v167 + 8, 0xD0263BC5uLL);
          int v169 = (char *)this + v168;
          *this = v105[3];
          unint64_t v104 = (char *)(this + 1);
          v105[2] = v169;
          v105[3] = this;
        }
        v105[1] = &v104[v165];
        if (v103) {
          this = (uint64_t *)memcpy(v104, *v293, v103);
        }
        *(void *)(v5 + 12728) = v104;
        LODWORD(v103) = *(_DWORD *)(v5 + 12740);
        unsigned int v102 = *(_DWORD *)(v5 + 12736);
LABEL_287:
        *(_DWORD *)(v5 + 12740) = v103 + v164;
LABEL_288:
        *(_DWORD *)(v5 + 12736) = v102 + 1;
        v104[v102] = 122;
LABEL_289:
        int v170 = *((unsigned __int8 *)v4 + 18);
        int v171 = (swift::Demangle::__runtime::Node **)v4;
        if ((v170 - 1) >= 2) {
          int v171 = *(swift::Demangle::__runtime::Node ***)v4;
        }
        unint64_t v172 = *v171;
        uint64_t v173 = *((void *)v172 + 1);
        int v174 = *(int **)v172;
        switch(v173)
        {
          case 4:
            if (*v174 != 1953853248) {
              goto LABEL_477;
            }
            char v151 = 114;
            goto LABEL_426;
          case 6:
            int v175 = *v174;
            int v176 = *((unsigned __int16 *)v174 + 2);
            if (v175 != 1853321024 || v176 != 25701) {
              goto LABEL_477;
            }
            char v151 = 111;
            goto LABEL_426;
          case 8:
            if (*(void *)v174 != 0x64656E776F6E7540) {
              goto LABEL_477;
            }
            char v151 = 100;
            goto LABEL_426;
          case 9:
            uint64_t v178 = *(void *)v174;
            int v179 = *((unsigned __int8 *)v174 + 8);
            if (v178 != 0x756F5F6B63617040 || v179 != 116) {
              goto LABEL_477;
            }
            char v151 = 107;
            goto LABEL_426;
          case 13:
            uint64_t v181 = *(void *)v174;
            uint64_t v182 = *(void *)((char *)v174 + 5);
            if (v181 != 0x6C65726F74756140 || v182 != 0x64657361656C6572) {
              goto LABEL_477;
            }
            char v151 = 97;
            goto LABEL_426;
          case 22:
            uint64_t v184 = *(void *)v174;
            uint64_t v185 = *((void *)v174 + 1);
            uint64_t v186 = *(void *)((char *)v174 + 14);
            if (v184 != 0x64656E776F6E7540 || v185 != 0x705F72656E6E695FLL || v186 != 0x7265746E696F705FLL) {
              goto LABEL_477;
            }
            char v151 = 117;
            goto LABEL_426;
          default:
LABEL_477:
            if ((v170 - 1) < 2) {
              goto LABEL_481;
            }
            if (v170 == 5 && *((_DWORD *)v4 + 2))
            {
              uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_481:
              uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
            }
            else
            {
              uint64_t v4 = 0;
            }
            int v50 = 2132;
            LODWORD(v15) = 18;
            break;
        }
        goto LABEL_475;
      default:
        goto LABEL_112;
    }
    char v151 = 0;
    uint64_t v152 = *v150;
    this = *(uint64_t **)v152;
    size_t v153 = *((void *)v152 + 1);
    int v154 = 1;
    switch(v153)
    {
      case 3uLL:
        if (*(_WORD *)this != 26944 || *((unsigned char *)this + 2) != 110) {
          goto LABEL_483;
        }
        int v154 = 0;
        char v151 = 105;
        goto LABEL_391;
      case 6uLL:
        if (*(_DWORD *)this == 1869506880 && *((_WORD *)this + 2) == 29813)
        {
          int v154 = 0;
          char v151 = 108;
        }
        else
        {
          if (*(_DWORD *)this == 1853321024 && *((_WORD *)this + 2) == 25701)
          {
            char v151 = 120;
            goto LABEL_426;
          }
LABEL_247:
          char v151 = 0;
          int v154 = 1;
        }
LABEL_391:
        if (v153 == 8 && v154 != 0)
        {
          if (*this == 0x64656E776F6E7540)
          {
            char v151 = 121;
          }
          else if (((v154 ^ 1) & 1) == 0)
          {
            goto LABEL_483;
          }
          goto LABEL_426;
        }
        char v218 = v154 ^ 1;
        if (v153 == 16) {
          char v219 = v154 ^ 1;
        }
        else {
          char v219 = 1;
        }
        if ((v219 & 1) == 0)
        {
LABEL_400:
          this = (uint64_t *)memcmp(this, "@pack_guaranteed", v153);
          if (this) {
            goto LABEL_483;
          }
          char v151 = 112;
          goto LABEL_426;
        }
        if (v153 != 11) {
          char v218 = 1;
        }
        if ((v218 & 1) == 0)
        {
          if (*this == 0x776F5F6B63617040 && *(uint64_t *)((char *)this + 3) == 0x64656E776F5F6B63)
          {
            char v151 = 118;
            goto LABEL_426;
          }
          goto LABEL_418;
        }
        char v221 = v154 ^ 1;
        if (v153 != 11) {
          char v221 = 1;
        }
        if ((v221 & 1) == 0)
        {
LABEL_418:
          this = (uint64_t *)memcmp(this, "@pack_inout", v153);
          if (this) {
            goto LABEL_483;
          }
          char v151 = 109;
LABEL_426:
          unsigned int v222 = *(_DWORD *)(v5 + 12736);
          size_t v223 = *(unsigned int *)(v5 + 12740);
          uint64_t v224 = *(char **)(v5 + 12728);
          if (v222 < v223) {
            goto LABEL_442;
          }
          unint64_t v225 = *(void **)(v5 + 12744);
          int v226 = (char *)v225[1];
          if (&v224[v223] != v226)
          {
            unint64_t v227 = v225[2];
LABEL_430:
            if ((2 * v223) <= 4) {
              uint64_t v229 = 4;
            }
            else {
              uint64_t v229 = (2 * v223);
            }
            size_t v230 = v229 + v223;
            if (!v226 || (unint64_t)&v226[v230] > v227)
            {
              unint64_t v231 = 2 * v225[4];
              if (v231 <= v230 + 1) {
                unint64_t v231 = v230 + 1;
              }
              v225[4] = v231;
              unint64_t v232 = v231 + 8;
              this = (uint64_t *)malloc_type_malloc(v231 + 8, 0xD0263BC5uLL);
              unint64_t v233 = (char *)this + v232;
              *this = v225[3];
              int v226 = (char *)(this + 1);
              v225[2] = v233;
              v225[3] = this;
            }
            v225[1] = &v226[v230];
            if (v223) {
              this = (uint64_t *)memcpy(v226, *v293, v223);
            }
            *(void *)(v5 + 12728) = v226;
            LODWORD(v223) = *(_DWORD *)(v5 + 12740);
            uint64_t v224 = v226;
            unsigned int v222 = *(_DWORD *)(v5 + 12736);
            int v76 = v291;
            goto LABEL_441;
          }
          unint64_t v228 = (unint64_t)&v224[v223 + 1];
          unint64_t v227 = v225[2];
          if (v228 > v227) {
            goto LABEL_430;
          }
          v225[1] = v228;
          LODWORD(v229) = 1;
LABEL_441:
          *(_DWORD *)(v5 + 12740) = v223 + v229;
LABEL_442:
          *(_DWORD *)(v5 + 12736) = v222 + 1;
          v224[v222] = v151;
          if (*((unsigned char *)v4 + 18) == 5)
          {
            int v234 = *((_DWORD *)v4 + 2);
            if (v234 == 4)
            {
              if (*(_DWORD *)a4) {
                return this;
              }
              if (*((unsigned char *)v4 + 18) == 5 && *((_DWORD *)v4 + 2) >= 3u) {
                uint64_t v235 = *(swift::Demangle::__runtime::Node **)(*(void *)v4 + 16);
              }
              else {
                uint64_t v235 = 0;
              }
            }
            else
            {
              if (v234 != 3) {
                goto LABEL_112;
              }
            }
LABEL_452:
            if (*(_DWORD *)a4) {
              return this;
            }
          }
LABEL_112:
          if (++v74 == v76) {
            goto LABEL_455;
          }
          continue;
        }
        if (!v154) {
          goto LABEL_426;
        }
LABEL_483:
        if ((v149 - 1) < 2) {
          goto LABEL_487;
        }
        if (v149 == 5 && *((_DWORD *)v4 + 2))
        {
          uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_487:
          uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
        }
        else
        {
          uint64_t v4 = 0;
        }
        int v50 = 2103;
        LODWORD(v15) = 18;
LABEL_475:
        *(_DWORD *)a4 = v15;
        *(void *)(a4 + 8) = v4;
        *(_DWORD *)(a4 + 16) = v50;
        return this;
      case 0xBuLL:
        if (*this != 0x746E617261756740 || *(uint64_t *)((char *)this + 3) != 0x646565746E617261) {
          goto LABEL_247;
        }
        char v151 = 103;
        goto LABEL_426;
      case 0xCuLL:
        if (*this != 0x736E6F635F6E6940 || *((_DWORD *)this + 2) != 1953390964) {
          goto LABEL_483;
        }
        char v151 = 99;
        goto LABEL_426;
      case 0xDuLL:
        if (*this != 0x636F6C6C61656440 || *(uint64_t *)((char *)this + 5) != 0x676E697461636F6CLL) {
          goto LABEL_483;
        }
        char v151 = 101;
        goto LABEL_426;
      case 0xEuLL:
        if (*this != 0x726175675F6E6940 || *(uint64_t *)((char *)this + 6) != 0x646565746E617261) {
          goto LABEL_483;
        }
        char v151 = 110;
        goto LABEL_426;
      case 0x10uLL:
        if (*this != 0x615F74756F6E6940 || this[1] != 0x656C62617361696CLL) {
          goto LABEL_400;
        }
        char v151 = 98;
        goto LABEL_426;
      default:
        goto LABEL_391;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleImplicitClosure@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)v4 + 18) != 5) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v9 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 2) <= 2u) {
    goto LABEL_12;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_13:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fu", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 != 2)
  {
    if (v11 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  int v12 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleInOut@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    uint64_t v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    uint64_t v10 = (void *)*((void *)v4 + 1593);
    int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 122;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    uint64_t v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      void v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      size_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      uint64_t v9 = (char *)this + 8;
      void v10[2] = v21;
      void v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

void *anonymous namespace'::Remangler::mangleInfixOperator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "oi", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleInitializer@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fi", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleInitAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleIsolated@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yi", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSending@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yu", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableCacheVariable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleLocalDeclName@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_8:
  unsigned int v10 = *((_DWORD *)v5 + 3184);
  size_t v11 = *((unsigned int *)v5 + 3185);
  unint64_t v12 = (char *)v5[1591];
  if (v10 < v11) {
    goto LABEL_28;
  }
  int v13 = (void *)v5[1593];
  int v14 = (char *)v13[1];
  if (&v12[v11] != v14)
  {
    unint64_t v15 = v13[2];
LABEL_12:
    if ((2 * v11) <= 4) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = (2 * v11);
    }
    size_t v18 = v17 + v11;
    if (v14) {
      BOOL v19 = (unint64_t)&v14[v17 + v11] > v15;
    }
    else {
      BOOL v19 = 1;
    }
    unint64_t v12 = (char *)v13[1];
    if (v19)
    {
      unint64_t v20 = 2 * v13[4];
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      v13[4] = v20;
      unint64_t v21 = v20 + 8;
      this = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      size_t v22 = (char *)this + v21;
      *this = v13[3];
      unint64_t v12 = (char *)(this + 1);
      void v13[2] = v22;
      _OWORD v13[3] = this;
    }
    v13[1] = &v12[v18];
    if (v11) {
      this = (uint64_t *)memcpy(v12, (const void *)v5[1591], v11);
    }
    v5[1591] = (uint64_t)v12;
    LODWORD(v11) = *((_DWORD *)v5 + 3185);
    unsigned int v10 = *((_DWORD *)v5 + 3184);
    goto LABEL_27;
  }
  unint64_t v16 = (unint64_t)&v12[v11 + 1];
  unint64_t v15 = v13[2];
  if (v16 > v15) {
    goto LABEL_12;
  }
  v13[1] = v16;
  LODWORD(v17) = 1;
LABEL_27:
  *((_DWORD *)v5 + 3185) = v11 + v17;
LABEL_28:
  *((_DWORD *)v5 + 3184) = v10 + 1;
  v12[v10] = 76;
  int v23 = *((unsigned __int8 *)v4 + 18);
  if ((v23 - 1) >= 2)
  {
    if (v23 != 5 || !*((_DWORD *)v4 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  unint64_t v24 = *(swift::Demangle::__runtime::Node **)v4;
}

uint64_t *anonymous namespace'::Remangler::mangleMacro@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleMacroExpansionLoc@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_15;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  unint64_t v12 = (uint64_t *)*((void *)*a2 + 3);
  uint64_t v13 = **((void **)*a2 + 2);
  uint64_t v14 = *v12;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMX", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMacroExpansionUniqueName@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return result;
    }
    int v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5) {
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (size_t v11 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3)) == 0)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      unint64_t v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4) {
        return result;
      }
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  unint64_t v12 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_17;
  }
  if (v8 == 5) {
    goto LABEL_15;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMu", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  {
    uint64_t v13 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMaterializeForSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleMemberAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    size_t v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMm", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMemberAttributeAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  uint64_t v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  size_t v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    size_t v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMr", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMetatype@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) >= 2) {
    int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v9 = a3 + 1;
  if (*(_WORD *)(*(void *)v8 + 16) != 146)
  {
    if (v7 != 1)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        int v19 = 321;
        int v18 = 10;
        goto LABEL_41;
      }
      int v4 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    size_t v12 = *((unsigned int *)v5 + 3185);
    uint64_t v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_40:
      int v18 = 0;
      int v4 = 0;
      int v19 = 0;
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 109;
      goto LABEL_41;
    }
    uint64_t v14 = (void *)v5[1593];
    unint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v20 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v20 <= v16)
      {
        v14[1] = v20;
        LODWORD(v21) = 1;
LABEL_39:
        *((_DWORD *)v5 + 3185) = v12 + v21;
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v21 = 4;
    }
    else {
      uint64_t v21 = (2 * v12);
    }
    size_t v22 = v21 + v12;
    if (!v15 || (unint64_t)&v15[v22] > v16)
    {
      unint64_t v23 = 2 * v14[4];
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      v14[4] = v23;
      unint64_t v24 = v23 + 8;
      this = (uint64_t *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      unint64_t v25 = (char *)this + v24;
      *this = v14[3];
      unint64_t v15 = (char *)(this + 1);
      v14[2] = v25;
      void v14[3] = this;
    }
    v14[1] = &v15[v22];
    if (v12) {
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
    }
    v5[1591] = (uint64_t)v15;
    LODWORD(v12) = *((_DWORD *)v5 + 3185);
    uint64_t v13 = v15;
    unsigned int v11 = *((_DWORD *)v5 + 3184);
    goto LABEL_39;
  }
  unsigned int v10 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_19;
    }
    unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
LABEL_19:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "XM", 2uLL, (void *)v5[1593]);
  int v17 = *((unsigned __int8 *)v4 + 18);
  if ((v17 - 1) < 2) {
    goto LABEL_23;
  }
  if (v17 == 5 && *((_DWORD *)v4 + 2))
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_23:
    if (*(_DWORD *)a4) {
      return this;
    }
  }
  int v18 = 0;
  int v4 = 0;
  int v19 = 0;
LABEL_41:
  *(_DWORD *)a4 = v18;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v19;
  return this;
}

uint64_t anonymous namespace'::Remangler::mangleMetatypeRepresentation@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t result = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7 == 14)
  {
    uint64_t result = memcmp((const void *)result, "@objc_metatype", 0xEuLL);
    if (result) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v16) {
      goto LABEL_60;
    }
    int v17 = (void *)*((void *)this + 1593);
    int v18 = (char *)v17[1];
    if (&v12[v16] == v18)
    {
      unint64_t v27 = (unint64_t)&v12[v16 + 1];
      unint64_t v19 = v17[2];
      if (v27 <= v19)
      {
        v17[1] = v27;
        LODWORD(v28) = 1;
LABEL_59:
        *((_DWORD *)this + 3185) = v16 + v28;
LABEL_60:
        char v23 = 111;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v19 = v17[2];
    }
    if ((2 * v16) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v16);
    }
    size_t v29 = v28 + v16;
    if (!v18 || (unint64_t)&v18[v29] > v19)
    {
      unint64_t v30 = 2 * v17[4];
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      void v17[4] = v30;
      unint64_t v31 = v30 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      uint64_t v32 = result + v31;
      *(void *)uint64_t result = v17[3];
      int v18 = (char *)(result + 8);
      v17[2] = v32;
      void v17[3] = result;
    }
    v17[1] = &v18[v29];
    if (v16) {
      uint64_t result = (uint64_t)memcpy(v18, *((const void **)this + 1591), v16);
    }
    *((void *)this + 1591) = v18;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    size_t v12 = v18;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_59;
  }
  if (v7 != 6)
  {
    if (v7 != 5) {
      goto LABEL_17;
    }
    if (*(_DWORD *)result != 1768453184 || *(unsigned char *)(result + 4) != 110) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v11) {
      goto LABEL_65;
    }
    uint64_t v13 = (void *)*((void *)this + 1593);
    uint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v39 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v39 <= v15)
      {
        v13[1] = v39;
        LODWORD(v40) = 1;
LABEL_64:
        *((_DWORD *)this + 3185) = v11 + v40;
LABEL_65:
        char v23 = 116;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v40 = 4;
    }
    else {
      uint64_t v40 = (2 * v11);
    }
    size_t v41 = v40 + v11;
    if (!v14 || (unint64_t)&v14[v41] > v15)
    {
      unint64_t v42 = 2 * v13[4];
      if (v42 <= v41 + 1) {
        unint64_t v42 = v41 + 1;
      }
      v13[4] = v42;
      unint64_t v43 = v42 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
      uint64_t v44 = result + v43;
      *(void *)uint64_t result = v13[3];
      uint64_t v14 = (char *)(result + 8);
      void v13[2] = v44;
      _OWORD v13[3] = result;
    }
    v13[1] = &v14[v41];
    if (v11) {
      uint64_t result = (uint64_t)memcpy(v14, *((const void **)this + 1591), v11);
    }
    *((void *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    size_t v12 = v14;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_64;
  }
  uint64_t result = memcmp((const void *)result, "@thick", 6uLL);
  if (!result)
  {
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v22 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v22)
    {
      char v23 = 84;
LABEL_66:
      int v21 = 0;
      uint64_t v3 = 0;
      int v20 = 0;
      *unsigned int v9 = v10 + 1;
      v12[v10] = v23;
      goto LABEL_67;
    }
    unint64_t v24 = (void *)*((void *)this + 1593);
    unint64_t v25 = (char *)v24[1];
    if (&v12[v22] == v25)
    {
      unint64_t v33 = (unint64_t)&v12[v22 + 1];
      unint64_t v26 = v24[2];
      if (v33 <= v26)
      {
        v24[1] = v33;
        LODWORD(v34) = 1;
LABEL_62:
        *((_DWORD *)this + 3185) = v22 + v34;
        char v23 = 84;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v26 = v24[2];
    }
    if ((2 * v22) <= 4) {
      uint64_t v34 = 4;
    }
    else {
      uint64_t v34 = (2 * v22);
    }
    size_t v35 = v34 + v22;
    if (!v25 || (unint64_t)&v25[v35] > v26)
    {
      unint64_t v36 = 2 * v24[4];
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      void v24[4] = v36;
      unint64_t v37 = v36 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
      uint64_t v38 = result + v37;
      *(void *)uint64_t result = v24[3];
      unint64_t v25 = (char *)(result + 8);
      void v24[2] = v38;
      void v24[3] = result;
    }
    v24[1] = &v25[v35];
    if (v22) {
      uint64_t result = (uint64_t)memcpy(v25, *((const void **)this + 1591), v22);
    }
    *((void *)this + 1591) = v25;
    LODWORD(v22) = *((_DWORD *)this + 3185);
    size_t v12 = v25;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_62;
  }
LABEL_17:
  int v20 = 2316;
  int v21 = 20;
LABEL_67:
  *(_DWORD *)a3 = v21;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v20;
  return result;
}

{
  swift::Demangle::__runtime::Node *v3;
  uint64_t result;
  uint64_t v7;
  _DWORD *v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  void *v13;
  char *v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  char *v18;
  unint64_t v19;
  int v20;
  int v21;
  size_t v22;
  char v23;
  void *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  uint64_t v3 = a2;
  uint64_t result = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7 == 14)
  {
    uint64_t result = memcmp((const void *)result, "@objc_metatype", 0xEuLL);
    if (result) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v16) {
      goto LABEL_60;
    }
    int v17 = (void *)*((void *)this + 1593);
    int v18 = (char *)v17[1];
    if (&v12[v16] == v18)
    {
      unint64_t v27 = (unint64_t)&v12[v16 + 1];
      unint64_t v19 = v17[2];
      if (v27 <= v19)
      {
        v17[1] = v27;
        LODWORD(v28) = 1;
LABEL_59:
        *((_DWORD *)this + 3185) = v16 + v28;
LABEL_60:
        char v23 = 111;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v19 = v17[2];
    }
    if ((2 * v16) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v16);
    }
    size_t v29 = v28 + v16;
    if (!v18 || (unint64_t)&v18[v29] > v19)
    {
      unint64_t v30 = 2 * v17[4];
      if (v30 <= v29 + 1) {
        unint64_t v30 = v29 + 1;
      }
      void v17[4] = v30;
      unint64_t v31 = v30 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      uint64_t v32 = result + v31;
      *(void *)uint64_t result = v17[3];
      int v18 = (char *)(result + 8);
      v17[2] = v32;
      void v17[3] = result;
    }
    v17[1] = &v18[v29];
    if (v16) {
      uint64_t result = (uint64_t)memcpy(v18, *((const void **)this + 1591), v16);
    }
    *((void *)this + 1591) = v18;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    size_t v12 = v18;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_59;
  }
  if (v7 != 6)
  {
    if (v7 != 5) {
      goto LABEL_17;
    }
    if (*(_DWORD *)result != 1768453184 || *(unsigned char *)(result + 4) != 110) {
      goto LABEL_17;
    }
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v11) {
      goto LABEL_65;
    }
    uint64_t v13 = (void *)*((void *)this + 1593);
    uint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v39 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v39 <= v15)
      {
        v13[1] = v39;
        LODWORD(v40) = 1;
LABEL_64:
        *((_DWORD *)this + 3185) = v11 + v40;
LABEL_65:
        char v23 = 116;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v40 = 4;
    }
    else {
      uint64_t v40 = (2 * v11);
    }
    size_t v41 = v40 + v11;
    if (!v14 || (unint64_t)&v14[v41] > v15)
    {
      unint64_t v42 = 2 * v13[4];
      if (v42 <= v41 + 1) {
        unint64_t v42 = v41 + 1;
      }
      v13[4] = v42;
      unint64_t v43 = v42 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
      uint64_t v44 = result + v43;
      *(void *)uint64_t result = v13[3];
      uint64_t v14 = (char *)(result + 8);
      void v13[2] = v44;
      _OWORD v13[3] = result;
    }
    v13[1] = &v14[v41];
    if (v11) {
      uint64_t result = (uint64_t)memcpy(v14, *((const void **)this + 1591), v11);
    }
    *((void *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    size_t v12 = v14;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_64;
  }
  uint64_t result = memcmp((const void *)result, "@thick", 6uLL);
  if (!result)
  {
    unsigned int v9 = (_DWORD *)((char *)this + 12736);
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v22 = *((unsigned int *)this + 3185);
    size_t v12 = (char *)*((void *)this + 1591);
    if (v10 < v22)
    {
      char v23 = 84;
LABEL_66:
      int v21 = 0;
      uint64_t v3 = 0;
      int v20 = 0;
      *unsigned int v9 = v10 + 1;
      v12[v10] = v23;
      goto LABEL_67;
    }
    unint64_t v24 = (void *)*((void *)this + 1593);
    unint64_t v25 = (char *)v24[1];
    if (&v12[v22] == v25)
    {
      unint64_t v33 = (unint64_t)&v12[v22 + 1];
      unint64_t v26 = v24[2];
      if (v33 <= v26)
      {
        v24[1] = v33;
        LODWORD(v34) = 1;
LABEL_62:
        *((_DWORD *)this + 3185) = v22 + v34;
        char v23 = 84;
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v26 = v24[2];
    }
    if ((2 * v22) <= 4) {
      uint64_t v34 = 4;
    }
    else {
      uint64_t v34 = (2 * v22);
    }
    size_t v35 = v34 + v22;
    if (!v25 || (unint64_t)&v25[v35] > v26)
    {
      unint64_t v36 = 2 * v24[4];
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      void v24[4] = v36;
      unint64_t v37 = v36 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
      uint64_t v38 = result + v37;
      *(void *)uint64_t result = v24[3];
      unint64_t v25 = (char *)(result + 8);
      void v24[2] = v38;
      void v24[3] = result;
    }
    v24[1] = &v25[v35];
    if (v22) {
      uint64_t result = (uint64_t)memcpy(v25, *((const void **)this + 1591), v22);
    }
    *((void *)this + 1591) = v25;
    LODWORD(v22) = *((_DWORD *)this + 3185);
    size_t v12 = v25;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_62;
  }
LABEL_17:
  int v20 = 1867;
  int v21 = 20;
LABEL_67:
  *(_DWORD *)a3 = v21;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v20;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleMetaclass@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMethodLookupFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mu", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleObjCMetadataUpdateFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MU", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleObjCResilientClassStub@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ms", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleFullObjCResilientClassStub@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mt", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleModifyAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

void anonymous namespace'::Remangler::mangleModule(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(unsigned __int16 **)a2;
  uint64_t v7 = *((void *)a2 + 1);
  switch(v7)
  {
    case 3:
      int v17 = *v6;
      int v18 = *((unsigned __int8 *)v6 + 2);
      if (v17 != 24415 || v18 != 67) {
        break;
      }
      int v20 = (char **)((char *)this + 12728);
      int v21 = (void *)*((void *)this + 1593);
      size_t v22 = "So";
      goto LABEL_27;
    case 15:
      uint64_t v23 = *(void *)v6;
      uint64_t v24 = *(void *)((char *)v6 + 7);
      if (v23 != 0x746E79535F435F5FLL || v24 != 0x64657A6973656874) {
        break;
      }
      int v20 = (char **)((char *)this + 12728);
      int v21 = (void *)*((void *)this + 1593);
      size_t v22 = "SC";
LABEL_27:
      swift::Demangle::__runtime::CharVector::append(v20, v22, 2uLL, v21);
      goto LABEL_43;
    case 5:
      int v8 = *(_DWORD *)v6;
      int v9 = *((unsigned __int8 *)v6 + 4);
      if (v8 == 1718187859 && v9 == 116)
      {
        unsigned int v11 = *((_DWORD *)this + 3184);
        size_t v12 = *((unsigned int *)this + 3185);
        uint64_t v13 = (char *)*((void *)this + 1591);
        if (v11 < v12)
        {
LABEL_42:
          *((_DWORD *)this + 3184) = v11 + 1;
          v13[v11] = 115;
          goto LABEL_43;
        }
        uint64_t v14 = (void *)*((void *)this + 1593);
        unint64_t v15 = (char *)v14[1];
        if (&v13[v12] == v15)
        {
          unint64_t v29 = (unint64_t)&v13[v12 + 1];
          unint64_t v16 = v14[2];
          if (v29 <= v16)
          {
            v14[1] = v29;
            LODWORD(v30) = 1;
LABEL_41:
            *((_DWORD *)this + 3185) = v12 + v30;
            goto LABEL_42;
          }
        }
        else
        {
          unint64_t v16 = v14[2];
        }
        if ((2 * v12) <= 4) {
          uint64_t v30 = 4;
        }
        else {
          uint64_t v30 = (2 * v12);
        }
        size_t v31 = v30 + v12;
        if (!v15 || (unint64_t)&v15[v31] > v16)
        {
          unint64_t v32 = 2 * v14[4];
          if (v32 <= v31 + 1) {
            unint64_t v32 = v31 + 1;
          }
          v14[4] = v32;
          unint64_t v33 = v32 + 8;
          uint64_t v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
          *uint64_t v34 = v14[3];
          unint64_t v15 = (char *)(v34 + 1);
          v14[2] = (char *)v34 + v33;
          void v14[3] = v34;
        }
        v14[1] = &v15[v31];
        if (v12) {
          memcpy(v15, *((const void **)this + 1591), v12);
        }
        *((void *)this + 1591) = v15;
        LODWORD(v12) = *((_DWORD *)this + 3185);
        uint64_t v13 = v15;
        unsigned int v11 = *((_DWORD *)this + 3184);
        goto LABEL_41;
      }
      break;
  }
  long long v35 = 0uLL;
  LOBYTE(v36) = 0;
  {
    unint64_t v26 = *((void *)this + 1585);
    if (v26 > 0xF)
    {
      int v28 = *((_DWORD *)this + 3178) + 16;
      long long v37 = v35;
      uint64_t v38 = v36;
      int v39 = v28;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v37, &v37);
    }
    else
    {
      *((void *)this + 1585) = v26 + 1;
      unint64_t v27 = (char *)this + 24 * v26 + 12296;
      *(_OWORD *)unint64_t v27 = v35;
      v27[16] = v36;
    }
  }
LABEL_43:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

uint64_t *anonymous namespace'::Remangler::mangleNativeOwningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativeOwningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativePinningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleNativePinningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNominalTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mn", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNominalTypeDescriptorRecord@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Hn", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleObjCAsyncCompletionHandlerImpl@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2) {
    goto LABEL_12;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
    if (*((unsigned char *)a2 + 18) != 5) {
      goto LABEL_18;
    }
LABEL_16:
    if (*((_DWORD *)a2 + 2) == 4)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
    }
    goto LABEL_18;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 == 5) {
    goto LABEL_16;
  }
LABEL_18:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tz", 2uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  {
    size_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePredefinedObjCAsyncCompletionHandlerImpl@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleObjCBlock@<X0>(swift::Demangle::__runtime::NodeFactory **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5)
    {
LABEL_11:
      switch(v7)
      {
        case 1:
LABEL_16:
          unsigned int v10 = a3 + 1;
          uint64_t v11 = v7 - 1;
          while (1)
          {
            unint64_t v12 = *((unsigned __int8 *)v4 + 18);
            unsigned int v13 = v12 - 1;
            if (v12 != 1)
            {
              if (v12 == 5)
              {
                unint64_t v12 = *((unsigned int *)v4 + 2);
              }
              else
              {
                if (v12 != 2) {
                  goto LABEL_17;
                }
                unint64_t v12 = 2;
              }
            }
            if (v12 > v11)
            {
              uint64_t v14 = v4;
              if (v13 >= 2) {
                uint64_t v14 = *(swift::Demangle::__runtime::Node **)v4;
              }
              if (*(_DWORD *)a4) {
                return result;
              }
              goto LABEL_18;
            }
LABEL_17:
            *(_DWORD *)a4 = 0;
            *(void *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = 0;
LABEL_18:
            if (--v11 == -1) {
              goto LABEL_29;
            }
          }
        case 5:
          uint64_t v7 = *((unsigned int *)a2 + 2);
          if (v7) {
            goto LABEL_16;
          }
          break;
        case 2:
          uint64_t v7 = 2;
          goto LABEL_16;
      }
LABEL_29:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      unint64_t v16 = (char **)(this + 1591);
      int v17 = this[1593];
      int v18 = "XB";
      size_t v19 = 2;
      goto LABEL_51;
    }
    if (!*((_DWORD *)a2 + 2)) {
      goto LABEL_29;
    }
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v8 + 16) != 23) {
    goto LABEL_11;
  }
  if (v7 != 1)
  {
    if (v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
    }
    else
    {
      BOOL v9 = v7 == 2;
      uint64_t v7 = 2;
      if (!v9) {
        uint64_t v7 = 0;
      }
    }
  }
  unsigned int v20 = a3 + 1;
  uint64_t v21 = v7 - 1;
  while (v21)
  {
    unint64_t v22 = *((unsigned __int8 *)v4 + 18);
    unsigned int v23 = v22 - 1;
    if (v22 != 1)
    {
      if (v22 == 5)
      {
        unint64_t v22 = *((unsigned int *)v4 + 2);
      }
      else
      {
        if (v22 != 2) {
          goto LABEL_32;
        }
        unint64_t v22 = 2;
      }
    }
    if (v22 <= v21)
    {
LABEL_32:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      --v21;
    }
    else
    {
      uint64_t v24 = v4;
      if (v23 >= 2) {
        uint64_t v24 = *(swift::Demangle::__runtime::Node **)v4;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
    }
  }
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XzB", 3uLL, this[1593]);
  int v25 = *((unsigned __int8 *)v4 + 18);
  if ((v25 - 1) < 2) {
    goto LABEL_48;
  }
  if (v25 == 5 && *((_DWORD *)v4 + 2))
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_48:
    unint64_t v26 = *(swift::Demangle::__runtime::Node **)v4;
  }
  else
  {
    unint64_t v26 = 0;
  }
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *((void *)v26 + 1), this[1593]);
  int v18 = *(const char **)v26;
  size_t v19 = *((void *)v26 + 1);
  int v17 = this[1593];
  unint64_t v16 = (char **)(this + 1591);
LABEL_51:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v16, v18, v19, v17);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleEscapingObjCBlock@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XL", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOwningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleOwningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::manglePartialApplyForwarder@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePartialApplyObjCForwarder@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Ta", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePeerAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMp", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::manglePostfixOperator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "oP", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePreambleAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  BOOL v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    BOOL v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  unsigned int v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5) {
        goto LABEL_19;
      }
      goto LABEL_16;
    }
    unsigned int v11 = *a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) != 5) {
    goto LABEL_19;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMq", 3uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  {
    unint64_t v12 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 3);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::manglePrefixOperator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "op", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePrivateDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 != 1)
  {
    if (v7 == 5)
    {
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (!v7)
      {
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        uint64_t v14 = (char **)((char *)this + 12728);
        goto LABEL_24;
      }
    }
    else
    {
      if (v7 != 2) {
        goto LABEL_20;
      }
      uint64_t v7 = 2;
    }
  }
  unsigned int v8 = a3 + 1;
  uint64_t v9 = v7 - 1;
  do
  {
    unint64_t v10 = *((unsigned __int8 *)a2 + 18);
    unsigned int v11 = v10 - 1;
    if (v10 != 1)
    {
      if (v10 == 5)
      {
        unint64_t v10 = *((unsigned int *)a2 + 2);
      }
      else
      {
        if (v10 != 2) {
          goto LABEL_7;
        }
        unint64_t v10 = 2;
      }
    }
    if (v10 <= v9)
    {
LABEL_7:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    unint64_t v12 = a2;
    if (v11 >= 2) {
      unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
LABEL_8:
    --v9;
  }
  while (v9 != -1);
  LODWORD(v7) = *((unsigned __int8 *)a2 + 18);
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t v14 = (char **)((char *)this + 12728);
  if (v7 != 1)
  {
    if (v7 != 5)
    {
LABEL_26:
      unint64_t v15 = "LL";
      goto LABEL_27;
    }
LABEL_24:
    if (*((_DWORD *)a2 + 2) != 1) {
      goto LABEL_26;
    }
  }
  unint64_t v15 = "Ll";
LABEL_27:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v14, v15, 2uLL, *((void **)this + 1593));
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::manglePropertyDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MV", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::manglePropertyWrapperBackingInitializer@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::manglePropertyWrapperInitFromProjectedValue@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_7;
  }
  uint64_t v9 = 0;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if ((v10 - 1) < 2)
  {
LABEL_11:
    unsigned int v11 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_13;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    uint64_t v9 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_11;
  }
  unsigned int v11 = 0;
LABEL_13:
  if (*((_WORD *)v11 + 8) != 44)
  {
LABEL_27:
    uint64_t v14 = 0;
    goto LABEL_28;
  }
  int v12 = *((unsigned __int8 *)v11 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node **)v11;
  if ((v12 - 1) < 2) {
    goto LABEL_18;
  }
  if (v12 != 5)
  {
    uint64_t v14 = 0;
    if (v12 == 2)
    {
LABEL_24:
      unsigned int v11 = (swift::Demangle::__runtime::Node *)*((void *)v11 + 1);
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  if (!*((_DWORD *)v11 + 2))
  {
    unsigned int v11 = 0;
    goto LABEL_27;
  }
  unsigned int v13 = *(swift::Demangle::__runtime::Node ***)v11;
LABEL_18:
  uint64_t v14 = *v13;
  if (v12 == 2) {
    goto LABEL_24;
  }
LABEL_21:
  if (v12 == 5 && *((_DWORD *)v11 + 2) >= 2u)
  {
    unsigned int v11 = *(swift::Demangle::__runtime::Node **)v11;
    goto LABEL_24;
  }
  unsigned int v11 = 0;
LABEL_28:
  unsigned int v15 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v17 = *((unsigned __int8 *)a2 + 18);
  if (v17 == 5)
  {
    if (*((_DWORD *)a2 + 2) != 4)
    {
LABEL_36:
      if (*((_DWORD *)a2 + 2) >= 2u)
      {
        int v18 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
    int v17 = *((unsigned __int8 *)a2 + 18);
  }
  int v18 = a2;
  if (v17 == 2)
  {
LABEL_38:
    size_t v19 = (uint64_t *)*((void *)v18 + 1);
    goto LABEL_40;
  }
  if (v17 == 5) {
    goto LABEL_36;
  }
LABEL_39:
  size_t v19 = 0;
LABEL_40:
  if (*((_WORD *)v19 + 8) != 232) {
    goto LABEL_47;
  }
  int v20 = *((unsigned __int8 *)v19 + 18);
  if ((v20 - 1) < 2) {
    goto LABEL_45;
  }
  if (v20 == 5 && *((_DWORD *)v19 + 2))
  {
    size_t v19 = (uint64_t *)*v19;
LABEL_45:
    size_t v19 = (uint64_t *)*v19;
    goto LABEL_47;
  }
  size_t v19 = 0;
LABEL_47:
  if ((result & 1) == 0)
  {
    int v21 = *((unsigned __int8 *)v19 + 18);
    unint64_t v22 = (swift::Demangle::__runtime::Node **)v19;
    if ((v21 - 1) >= 2)
    {
      if (v21 == 5)
      {
        unsigned int v23 = (uint64_t *)*v19;
        unint64_t v22 = (swift::Demangle::__runtime::Node **)*v19;
LABEL_56:
        uint64_t v24 = (swift::Demangle::__runtime::Node **)&v23[*((unsigned int *)v19 + 2)];
        goto LABEL_62;
      }
      unint64_t v22 = 0;
    }
    switch(v21)
    {
      case 1:
        uint64_t v24 = (swift::Demangle::__runtime::Node **)(v19 + 1);
        goto LABEL_62;
      case 2:
        uint64_t v24 = (swift::Demangle::__runtime::Node **)(v19 + 2);
        goto LABEL_62;
      case 5:
        unsigned int v23 = (uint64_t *)*v19;
        goto LABEL_56;
    }
    uint64_t v24 = 0;
LABEL_62:
    while (v22 != v24)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v22;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInTypeModule@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      unsigned int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    unsigned int v11 = 0;
  }
  if (v10 == 1)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    unsigned int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "HP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInProtocolModule@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      unsigned int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    unsigned int v11 = 0;
  }
  if (v10 == 1)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    unsigned int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Hp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  unsigned int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolConformanceRefInOtherModule@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    int v9 = *(uint64_t **)v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*((_WORD *)v9 + 8) != 232) {
    goto LABEL_14;
  }
  int v11 = *((unsigned __int8 *)v9 + 18);
  if ((v11 - 1) < 2) {
    goto LABEL_12;
  }
  if (v11 == 5 && *((_DWORD *)v9 + 2))
  {
    int v9 = (uint64_t *)*v9;
LABEL_12:
    int v9 = (uint64_t *)*v9;
    goto LABEL_14;
  }
  int v9 = 0;
LABEL_14:
  if ((result & 1) == 0)
  {
    int v13 = *((unsigned __int8 *)v9 + 18);
    unsigned int v14 = (swift::Demangle::__runtime::Node **)v9;
    if ((v13 - 1) >= 2)
    {
      if (v13 == 5)
      {
        unsigned int v15 = (uint64_t *)*v9;
        unsigned int v14 = (swift::Demangle::__runtime::Node **)*v9;
LABEL_23:
        unint64_t v16 = (swift::Demangle::__runtime::Node **)&v15[*((unsigned int *)v9 + 2)];
        goto LABEL_29;
      }
      unsigned int v14 = 0;
    }
    switch(v13)
    {
      case 1:
        unint64_t v16 = (swift::Demangle::__runtime::Node **)(v9 + 1);
        goto LABEL_29;
      case 2:
        unint64_t v16 = (swift::Demangle::__runtime::Node **)(v9 + 2);
        goto LABEL_29;
      case 5:
        unsigned int v15 = (uint64_t *)*v9;
        goto LABEL_23;
    }
    unint64_t v16 = 0;
LABEL_29:
    while (v14 != v16)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v14;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v17 = *((unsigned __int8 *)v4 + 18);
  if (v17 != 2)
  {
    if (v17 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  int v18 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Hr", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

void *anonymous namespace'::Remangler::mangleProtocolConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleProtocolConformanceDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Hc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolListWithClass@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v5 = *((unsigned __int8 *)a2 + 18);
  int v6 = (swift::Demangle::__runtime::Node **)a2;
  if ((v5 - 1) < 2)
  {
LABEL_5:
    int v7 = *v6;
    if (v5 == 2) {
      goto LABEL_11;
    }
LABEL_8:
    if (v5 == 5 && *((_DWORD *)v4 + 2) >= 2u)
    {
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v8 = 0;
  }
  if (v5 == 5)
  {
    if (!*((_DWORD *)a2 + 2))
    {
      int v7 = 0;
      goto LABEL_13;
    }
    int v6 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }
  int v7 = 0;
  if (v5 != 2) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v8 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolListWithAnyObject@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v5 = *(swift::Demangle::__runtime::Node **)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolSelfConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v8 = *a2;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  uint64_t v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitness@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "TS", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitnessTable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v8 = *a2;
    goto LABEL_7;
  }
  int v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  int v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      int v12 = *(swift::Demangle::__runtime::Node **)v8;
      int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    int v11 = 0;
  }
  if (v10 == 1)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    int v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    int v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  int v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WP", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTableAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Wa", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleProtocolWitnessTablePattern@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Wp", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tr", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelper@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TR", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithSelf@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        int v12 = a2;
        if (v11 >= 2) {
          int v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Ty", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithGlobalActor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TU", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    uint64_t v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleReadAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleRelatedEntityDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  int v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5 || !*((_DWORD *)v4 + 2))
    {
      int v9 = 0;
      goto LABEL_14;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  int v9 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_14:
  if (*((void *)v9 + 1) == 1)
  {
    swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "L", 1uLL, *((void **)v5 + 1593));
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, *(const void **)v9, *((void *)v9 + 1), *((void **)v5 + 1593));
    int v10 = 0;
    int v9 = 0;
    int v11 = 0;
  }
  else
  {
    int v11 = 3024;
    int v10 = 21;
  }
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v11;
  return this;
}

void *anonymous namespace'::Remangler::mangleRetroactiveConformance@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = (uint64_t *)a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 == 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    int v9 = (swift::Demangle::__runtime::Node *)*((void *)v8 + 1);
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  unsigned int v11 = *((_DWORD *)this + 3184);
  size_t v12 = *((unsigned int *)this + 3185);
  int v13 = (char *)this[1591];
  if (v11 >= v12)
  {
    unsigned int v14 = this[1593];
    unsigned int v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v12 + v18;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2 * v14[4];
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      v14[4] = v20;
      unint64_t v21 = v20 + 8;
      unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      unsigned int v23 = (char *)v22 + v21;
      *unint64_t v22 = v14[3];
      unsigned int v15 = (char *)(v22 + 1);
      v14[2] = v23;
      void v14[3] = v22;
    }
    v14[1] = &v15[v19];
    if (v12) {
      memcpy(v15, this[1591], v12);
    }
    this[1591] = v15;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    int v13 = v15;
    unsigned int v11 = *((_DWORD *)this + 3184);
    goto LABEL_24;
  }
LABEL_25:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = 103;
  if (*((unsigned __int8 *)v4 + 18) - 1 >= 2) {
    int v4 = (uint64_t *)*v4;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleShared@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    int v10 = (void *)*((void *)v4 + 1593);
    unsigned int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 104;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      void v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      void v10[2] = v21;
      void v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOwned@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    int v10 = (void *)*((void *)v4 + 1593);
    unsigned int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 110;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      void v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      void v10[2] = v21;
      void v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSILBoxType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xb", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

char **anonymous namespace'::Remangler::mangleSILBoxTypeWithLayout@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  int v6 = this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if (v8 != 1)
  {
    if (v8 != 5 || (*((_DWORD *)a2 + 2) | 2) != 3)
    {
      int v12 = 3591;
      goto LABEL_13;
    }
    int v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v9 + 16) != 212)
  {
    int v12 = 3593;
    goto LABEL_13;
  }
  int v10 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      unsigned int v11 = 0;
      goto LABEL_17;
    }
    int v10 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v11 = *(uint64_t **)v10;
LABEL_17:
  this = (char **)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  int v14 = (swift::Demangle::__runtime::Node *)this;
  unsigned int v15 = *((unsigned __int8 *)v11 + 18);
  if (v15 != 1)
  {
    if (v15 == 5)
    {
      unsigned int v15 = *((_DWORD *)v11 + 2);
      if (!v15) {
        goto LABEL_60;
      }
    }
    else if (v15 != 2)
    {
LABEL_60:
      int v32 = a3 + 1;
      if (*(_DWORD *)a4) {
        return this;
      }
      if (*((unsigned char *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) == 3)
      {
        uint64_t v33 = *(void *)(*(void *)v5 + 8);
        if (*(_WORD *)(v33 + 16) != 43)
        {
          int v12 = 3621;
          goto LABEL_13;
        }
        uint64_t v34 = *(swift::Demangle::__runtime::Node **)(*(void *)v5 + 16);
        if (*((_WORD *)v34 + 8) != 235)
        {
          int v12 = 3622;
          goto LABEL_13;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
        long long v35 = "XX";
      }
      else
      {
        long long v35 = "Xx";
      }
      this = (char **)swift::Demangle::__runtime::CharVector::append(v6 + 1591, v35, 2uLL, v6[1593]);
      int v13 = 0;
      uint64_t v5 = 0;
      int v12 = 0;
      goto LABEL_14;
    }
  }
  unint64_t v16 = 0;
  uint64_t v17 = v15;
  while (1)
  {
    unint64_t v20 = *((unsigned __int8 *)v11 + 18);
    if ((v20 - 1) >= 2)
    {
      char v21 = 0;
      unint64_t v22 = (uint64_t *)*v11;
    }
    else
    {
      char v21 = 1;
      unint64_t v22 = v11;
    }
    if (*(_WORD *)(v22[v16] + 16) != 214)
    {
      unsigned int v23 = v11;
      if ((v21 & 1) == 0) {
        unsigned int v23 = (uint64_t *)*v11;
      }
      if (*(_WORD *)(v23[v16] + 16) != 213) {
        break;
      }
    }
    if (v20 == 1) {
      goto LABEL_39;
    }
    if (v20 != 5)
    {
      if (v20 != 2) {
        goto LABEL_44;
      }
      unint64_t v20 = 2;
LABEL_39:
      if (v20 <= v16) {
        goto LABEL_44;
      }
      goto LABEL_40;
    }
    if (*((unsigned int *)v11 + 2) <= v16)
    {
LABEL_44:
      int v25 = 0;
      goto LABEL_45;
    }
LABEL_40:
    uint64_t v24 = v11;
    if ((v21 & 1) == 0) {
      uint64_t v24 = (uint64_t *)*v11;
    }
    int v25 = (swift::Demangle::__runtime::Node *)v24[v16];
LABEL_45:
    int v26 = *((unsigned __int8 *)v25 + 18);
    unint64_t v27 = (unint64_t *)v25;
    if (v26 != 1)
    {
      if (v26 != 5 || *((_DWORD *)v25 + 2) != 1)
      {
LABEL_68:
        int v12 = 3604;
        int v13 = 1;
        uint64_t v5 = v25;
        goto LABEL_14;
      }
      unint64_t v27 = *(unint64_t **)v25;
    }
    if (*(_WORD *)(*v27 + 16) != 232) {
      goto LABEL_68;
    }
    int v28 = (unint64_t *)v25;
    if ((v26 - 1) < 2) {
      goto LABEL_54;
    }
    if (v26 == 5 && *((_DWORD *)v25 + 2))
    {
      int v28 = *(unint64_t **)v25;
LABEL_54:
      unint64_t v18 = *v28;
      goto LABEL_56;
    }
    unint64_t v18 = 0;
LABEL_56:
    if (*((_WORD *)v25 + 8) != 213) {
      goto LABEL_27;
    }
    unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v6, 123);
    uint64_t v30 = Node;
    int v31 = *(unsigned __int8 *)(v18 + 18);
    if ((v31 - 1) >= 2)
    {
      if (v31 != 5 || !*(_DWORD *)(v18 + 8))
      {
        unint64_t v19 = 0;
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)v18;
    }
    unint64_t v19 = *(swift::Demangle::__runtime::Node **)v18;
LABEL_26:
    swift::Demangle::__runtime::Node::addChild(Node, v19, (swift::Demangle::__runtime::NodeFactory *)*v6);
    unint64_t v18 = swift::Demangle::__runtime::NodeFactory::createNode(*v6, 232);
    swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v18, v30, (swift::Demangle::__runtime::NodeFactory *)*v6);
LABEL_27:
    this = (char **)swift::Demangle::__runtime::Node::addChild(v14, (swift::Demangle::__runtime::Node *)v18, (swift::Demangle::__runtime::NodeFactory *)*v6);
    if (v17 == ++v16) {
      goto LABEL_60;
    }
  }
  if (v20 == 1) {
    goto LABEL_77;
  }
  if (v20 != 5)
  {
    if (v20 == 2)
    {
      unint64_t v20 = 2;
      goto LABEL_77;
    }
    goto LABEL_81;
  }
  unint64_t v20 = *((unsigned int *)v11 + 2);
LABEL_77:
  if (v20 <= v16)
  {
LABEL_81:
    uint64_t v5 = 0;
  }
  else
  {
    if ((v21 & 1) == 0) {
      unsigned int v11 = (uint64_t *)*v11;
    }
    uint64_t v5 = (swift::Demangle::__runtime::Node *)v11[v16];
  }
  int v12 = 3600;
LABEL_13:
  int v13 = 1;
LABEL_14:
  *(_DWORD *)a4 = v13;
  *(void *)(a4 + 8) = v5;
  *(_DWORD *)(a4 + 16) = v12;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleSetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleIsSerialized@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      uint64_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 113;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleStatic@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4) {
      return this;
    }
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    size_t v8 = *((unsigned int *)v4 + 3185);
    int v9 = (unsigned char *)*((void *)v4 + 1591);
    if (v7 < v8) {
      goto LABEL_27;
    }
    unint64_t v10 = (void *)*((void *)v4 + 1593);
    unint64_t v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v15 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        int v14 = 0;
        a2 = 0;
        int v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 90;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v8);
    }
    size_t v17 = v16 + v8;
    if (v11) {
      BOOL v18 = (unint64_t)&v11[v16 + v8] > v12;
    }
    else {
      BOOL v18 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v18)
    {
      unint64_t v19 = 2 * v10[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      void v10[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      char v21 = (char *)this + v20;
      *(void *)this = v10[3];
      int v9 = (char *)this + 8;
      void v10[2] = v21;
      void v10[3] = this;
    }
    v10[1] = &v9[v17];
    if (v8) {
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    }
    *((void *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    unsigned int v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  int v13 = 321;
  int v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleThinFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v7 = 2;
LABEL_6:
      unsigned int v8 = a3 + 1;
      for (uint64_t i = v7 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        unint64_t v12 = a2;
        if (v11 >= 2) {
          unint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return result;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Xf", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleTuple@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    unsigned int v7 = *((_DWORD *)this + 3184);
    size_t v8 = *((unsigned int *)this + 3185);
    int v9 = this[1591];
    if (v7 < v8)
    {
LABEL_22:
      *((_DWORD *)this + 3184) = v7 + 1;
      v9[v7] = 116;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    unint64_t v10 = this[1593];
    unsigned int v11 = (unsigned char *)v10[1];
    if (&v9[v8] == v11)
    {
      unint64_t v13 = (unint64_t)&v9[v8 + 1];
      unint64_t v12 = v10[2];
      if (v13 <= v12)
      {
        v10[1] = v13;
        LODWORD(v14) = 1;
LABEL_21:
        *((_DWORD *)this + 3185) = v8 + v14;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v12 = v10[2];
    }
    if ((2 * v8) <= 4) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = (2 * v8);
    }
    size_t v15 = v14 + v8;
    if (v11) {
      BOOL v16 = (unint64_t)&v11[v14 + v8] > v12;
    }
    else {
      BOOL v16 = 1;
    }
    int v9 = (unsigned char *)v10[1];
    if (v16)
    {
      unint64_t v17 = 2 * v10[4];
      if (v17 <= v15 + 1) {
        unint64_t v17 = v15 + 1;
      }
      void v10[4] = v17;
      unint64_t v18 = v17 + 8;
      uint64_t result = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      unint64_t v19 = (char *)result + v18;
      void *result = v10[3];
      int v9 = result + 1;
      void v10[2] = v19;
      void v10[3] = result;
    }
    v10[1] = &v9[v15];
    if (v8) {
      uint64_t result = memcpy(v9, this[1591], v8);
    }
    this[1591] = v9;
    LODWORD(v8) = *((_DWORD *)this + 3185);
    unsigned int v7 = *((_DWORD *)this + 3184);
    goto LABEL_21;
  }
  return result;
}

void *anonymous namespace'::Remangler::manglePack@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleSILPackDirect@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QSd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleSILPackIndirect@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)a4)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QSi", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::manglePackExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  unsigned int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      unsigned int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    unsigned int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::manglePackElement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  unsigned int v7 = a3 + 1;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qe", 2uLL, this[1593]);
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2) {
    goto LABEL_12;
  }
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_12:
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleTypeList@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v7 = 1;
  BOOL v15 = 1;
  uint64_t v8 = *((unsigned __int8 *)a2 + 18);
  switch(v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v8 = *((unsigned int *)a2 + 2);
      if (v8) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v8 = 2;
LABEL_6:
      unint64_t v9 = 0;
      unsigned int v10 = a3 + 1;
      while (1)
      {
        unint64_t v11 = *((unsigned __int8 *)a2 + 18);
        unsigned int v12 = v11 - 1;
        if (v11 == 1) {
          goto LABEL_13;
        }
        if (v11 != 5) {
          break;
        }
        if (*((unsigned int *)a2 + 2) > v9)
        {
LABEL_16:
          unint64_t v13 = a2;
          if (v12 >= 2) {
            unint64_t v13 = *(swift::Demangle::__runtime::Node **)a2;
          }
          if (*(_DWORD *)a4) {
            return result;
          }
          goto LABEL_8;
        }
LABEL_7:
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
LABEL_8:
        if (v8 == ++v9)
        {
          BOOL v7 = v15;
          goto LABEL_21;
        }
      }
      if (v11 != 2) {
        goto LABEL_7;
      }
      unint64_t v11 = 2;
LABEL_13:
      if (v11 > v9) {
        goto LABEL_16;
      }
      goto LABEL_7;
  }
LABEL_21:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleTypeMangling@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  BOOL v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      BOOL v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    BOOL v7 = 0;
  }
  if (v6 == 1)
  {
    unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v7 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v6 == 2)
  {
    unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    if (v7 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    size_t v12 = *(unsigned int *)(v4 + 12740);
    unint64_t v13 = *(unsigned char **)(v4 + 12728);
    if (v11 < v12)
    {
LABEL_39:
      *(_DWORD *)(v4 + 12736) = v11 + 1;
      v13[v11] = 68;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    uint64_t v14 = *(void **)(v4 + 12744);
    BOOL v15 = (unsigned char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_38:
        *(_DWORD *)(v4 + 12740) = v12 + v18;
        goto LABEL_39;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (v15) {
      BOOL v20 = (unint64_t)&v15[v18 + v12] > v16;
    }
    else {
      BOOL v20 = 1;
    }
    unint64_t v13 = (unsigned char *)v14[1];
    if (v20)
    {
      unint64_t v21 = 2 * v14[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      v14[4] = v21;
      unint64_t v22 = v21 + 8;
      this = (uint64_t *)malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      unsigned int v23 = (char *)this + v22;
      *this = v14[3];
      unint64_t v13 = this + 1;
      v14[2] = v23;
      void v14[3] = this;
    }
    v14[1] = &v13[v19];
    if (v12) {
      this = (uint64_t *)memcpy(v13, *(const void **)(v4 + 12728), v12);
    }
    *(void *)(v4 + 12728) = v13;
    LODWORD(v12) = *(_DWORD *)(v4 + 12740);
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    goto LABEL_38;
  }
  if (v6 != 5)
  {
    unint64_t v9 = 0;
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)a2;
LABEL_9:
  unint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
  if (v7 == v9) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    BOOL v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "N", 1uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataAccessFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ma", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataCompletionFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mr", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MI", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mi", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleTypeMetadataSingletonInitializationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ml", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleTypeMetadataDemanglingCache@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleTypeMetadataLazyCache@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "ML", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleWeak@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xw", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleUnowned@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xo", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleUnmanaged@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xu", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleUnsafeAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleUnsafeMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleValueWitness@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    int v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
  int v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2) {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  switch(**(_DWORD **)v4)
  {
    case 0:
      char v10 = 0;
      unsigned int v11 = "al";
      break;
    case 1:
      char v10 = 0;
      unsigned int v11 = "ca";
      break;
    case 2:
      char v10 = 0;
      unsigned int v11 = "ta";
      break;
    case 3:
      char v10 = 0;
      unsigned int v11 = "de";
      break;
    case 4:
      char v10 = 0;
      unsigned int v11 = "xx";
      break;
    case 5:
      char v10 = 0;
      unsigned int v11 = "XX";
      break;
    case 6:
      char v10 = 0;
      unsigned int v11 = "Xx";
      break;
    case 7:
      char v10 = 0;
      unsigned int v11 = "CP";
      break;
    case 8:
      char v10 = 0;
      unsigned int v11 = "Cp";
      break;
    case 9:
      char v10 = 0;
      unsigned int v11 = "cp";
      break;
    case 0xA:
      char v10 = 0;
      unsigned int v11 = "Tk";
      break;
    case 0xB:
      char v10 = 0;
      unsigned int v11 = "tk";
      break;
    case 0xC:
      char v10 = 0;
      unsigned int v11 = "pr";
      break;
    case 0xD:
      char v10 = 0;
      unsigned int v11 = "TK";
      break;
    case 0xE:
      char v10 = 0;
      unsigned int v11 = "Cc";
      break;
    case 0xF:
      char v10 = 0;
      unsigned int v11 = "Tt";
      break;
    case 0x10:
      char v10 = 0;
      unsigned int v11 = "tT";
      break;
    case 0x11:
      char v10 = 0;
      unsigned int v11 = "xs";
      break;
    case 0x12:
      char v10 = 0;
      unsigned int v11 = "xg";
      break;
    case 0x13:
      char v10 = 0;
      unsigned int v11 = "ug";
      break;
    case 0x14:
      char v10 = 0;
      unsigned int v11 = "up";
      break;
    case 0x15:
      char v10 = 0;
      unsigned int v11 = "ui";
      break;
    case 0x16:
      char v10 = 0;
      unsigned int v11 = "et";
      break;
    case 0x17:
      char v10 = 0;
      unsigned int v11 = "st";
      break;
    default:
      unsigned int v11 = 0;
      char v10 = 1;
      break;
  }
  unsigned int v12 = *((_DWORD *)this + 3184);
  size_t v13 = *((unsigned int *)this + 3185);
  uint64_t v14 = (char *)this[1591];
  if (v12 < v13) {
    goto LABEL_52;
  }
  BOOL v15 = this[1593];
  unint64_t v16 = (char *)v15[1];
  if (&v14[v13] != v16)
  {
    unint64_t v17 = v15[2];
LABEL_40:
    if ((2 * v13) <= 4) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = (2 * v13);
    }
    size_t v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      unint64_t v21 = 2 * v15[4];
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      v15[4] = v21;
      unint64_t v22 = v21 + 8;
      unsigned int v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      uint64_t v24 = (char *)v23 + v22;
      *unsigned int v23 = v15[3];
      unint64_t v16 = (char *)(v23 + 1);
      v15[2] = v24;
      void v15[3] = v23;
    }
    v15[1] = &v16[v20];
    if (v13) {
      memcpy(v16, this[1591], v13);
    }
    this[1591] = v16;
    LODWORD(v13) = *((_DWORD *)this + 3185);
    uint64_t v14 = v16;
    unsigned int v12 = *((_DWORD *)this + 3184);
    goto LABEL_51;
  }
  unint64_t v18 = (unint64_t)&v14[v13 + 1];
  unint64_t v17 = v15[2];
  if (v18 > v17) {
    goto LABEL_40;
  }
  v15[1] = v18;
  LODWORD(v19) = 1;
LABEL_51:
  *((_DWORD *)this + 3185) = v13 + v19;
LABEL_52:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 119;
  if (v10) {
    size_t v25 = 0;
  }
  else {
    size_t v25 = strlen(v11);
  }
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v11, v25, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleValueWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WV", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleVTableThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TV", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleWillSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v5 = *(void *)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataBuiltinDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MB", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataFieldDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MF", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataAssocTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MA", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleReflectionMetadataSuperclassDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MC", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGenericTypeParamDecl@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCurryThunk@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Tc", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDispatchThunk@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Tj", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMethodDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Tq", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolRequirementsBaseDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v8 = *a2;
    goto LABEL_7;
  }
  int v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232) {
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2) {
    goto LABEL_12;
  }
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    int v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  int v8 = 0;
LABEL_14:
    goto LABEL_33;
  int v10 = *((unsigned __int8 *)v8 + 18);
  unsigned int v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      unsigned int v12 = *(swift::Demangle::__runtime::Node **)v8;
      unsigned int v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    unsigned int v11 = 0;
  }
  if (v10 == 1)
  {
    size_t v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    size_t v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    size_t v13 = 0;
    if (v11) {
      goto LABEL_30;
    }
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  unsigned int v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  size_t v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13) {
    goto LABEL_33;
  }
LABEL_30:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_33;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleAssociatedConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  size_t v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v13 = *a2;
LABEL_12:
    unsigned int v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unsigned int v14 = 0;
LABEL_14:
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
    BOOL v15 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else {
    BOOL v15 = 0;
  }
  if (*((_WORD *)v15 + 8) == 232)
  {
    int v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        BOOL v15 = 0;
        goto LABEL_26;
      }
      BOOL v15 = *(swift::Demangle::__runtime::Node **)v15;
    }
    BOOL v15 = *(swift::Demangle::__runtime::Node **)v15;
  }
LABEL_26:
  {
    int v17 = *((unsigned __int8 *)v15 + 18);
    unint64_t v18 = (swift::Demangle::__runtime::Node **)v15;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        uint64_t v19 = *(swift::Demangle::__runtime::Node **)v15;
        unint64_t v18 = *(swift::Demangle::__runtime::Node ***)v15;
LABEL_35:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v19 + 8 * *((unsigned int *)v15 + 2));
        goto LABEL_41;
      }
      unint64_t v18 = 0;
    }
    switch(v17)
    {
      case 1:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8);
        goto LABEL_41;
      case 2:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 16);
        goto LABEL_41;
      case 5:
        uint64_t v19 = *(swift::Demangle::__runtime::Node **)v15;
        goto LABEL_35;
    }
    size_t v20 = 0;
LABEL_41:
    while (v18 != v20)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v18;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tn", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDefaultAssociatedConformanceAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  size_t v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    size_t v13 = *a2;
LABEL_12:
    unsigned int v14 = (swift::Demangle::__runtime::Node *)*((void *)v13 + 1);
    goto LABEL_14;
  }
  unsigned int v14 = 0;
LABEL_14:
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u) {
    BOOL v15 = (swift::Demangle::__runtime::Node *)*((void *)*a2 + 2);
  }
  else {
    BOOL v15 = 0;
  }
  if (*((_WORD *)v15 + 8) == 232)
  {
    int v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        BOOL v15 = 0;
        goto LABEL_26;
      }
      BOOL v15 = *(swift::Demangle::__runtime::Node **)v15;
    }
    BOOL v15 = *(swift::Demangle::__runtime::Node **)v15;
  }
LABEL_26:
  {
    int v17 = *((unsigned __int8 *)v15 + 18);
    unint64_t v18 = (swift::Demangle::__runtime::Node **)v15;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        uint64_t v19 = *(swift::Demangle::__runtime::Node **)v15;
        unint64_t v18 = *(swift::Demangle::__runtime::Node ***)v15;
LABEL_35:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v19 + 8 * *((unsigned int *)v15 + 2));
        goto LABEL_41;
      }
      unint64_t v18 = 0;
    }
    switch(v17)
    {
      case 1:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8);
        goto LABEL_41;
      case 2:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 16);
        goto LABEL_41;
      case 5:
        uint64_t v19 = *(swift::Demangle::__runtime::Node **)v15;
        goto LABEL_35;
    }
    size_t v20 = 0;
LABEL_41:
    while (v18 != v20)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v18;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TN", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleBaseConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_12:
    size_t v13 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
    goto LABEL_14;
  }
  size_t v13 = 0;
LABEL_14:
  if (*((_WORD *)v13 + 8) == 232)
  {
    int v14 = *((unsigned __int8 *)v13 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !*((_DWORD *)v13 + 2))
      {
        size_t v13 = 0;
        goto LABEL_21;
      }
      size_t v13 = *(swift::Demangle::__runtime::Node **)v13;
    }
    size_t v13 = *(swift::Demangle::__runtime::Node **)v13;
  }
LABEL_21:
  {
    int v15 = *((unsigned __int8 *)v13 + 18);
    int v16 = (swift::Demangle::__runtime::Node **)v13;
    if ((v15 - 1) >= 2)
    {
      if (v15 == 5)
      {
        int v17 = *(swift::Demangle::__runtime::Node **)v13;
        int v16 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_30:
        unint64_t v18 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8 * *((unsigned int *)v13 + 2));
        goto LABEL_36;
      }
      int v16 = 0;
    }
    switch(v15)
    {
      case 1:
        unint64_t v18 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8);
        goto LABEL_36;
      case 2:
        unint64_t v18 = (swift::Demangle::__runtime::Node **)((char *)v13 + 16);
        goto LABEL_36;
      case 5:
        int v17 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_30;
    }
    unint64_t v18 = 0;
LABEL_36:
    while (v16 != v18)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v16;
    }
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tb", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAssociatedTypeDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleThrowsAnnotation@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 75;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleTypedThrowsAnnotation@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "YK", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleEmptyList@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 121;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleFirstElementMarker@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 95;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleVariadicMarker@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      int v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 100;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

void *anonymous namespace'::Remangler::mangleOutlinedBridgedMethod@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6 = this + 1591;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Te", 2uLL, this[1593]);
  swift::Demangle::__runtime::CharVector::append(v6, *(const void **)a2, *((void *)a2 + 1), this[1593]);
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v6, "_", 1uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOy", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedConsume@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOe", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedRetain@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOr", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedRelease@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOs", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithTake@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOb", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOc", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithTake@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOf", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedDestroy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOh", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

char *anonymous namespace'::Remangler::mangleOutlinedVariable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleOutlinedReadOnlyObject@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = (const void **)(this + 1591);
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  unsigned int v10 = this[1591];
  if (v8 >= v9)
  {
    unint64_t v11 = this[1593];
    uint64_t v12 = (char *)*((void *)v11 + 1);
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = *((void *)v11 + 2);
      if (v14 <= v13)
      {
        *((void *)v11 + 1) = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = *((void *)v11 + 2);
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)*((void *)v11 + 1);
    if (v17)
    {
      unint64_t v18 = 2 * *((void *)v11 + 4);
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      *((void *)v11 + 4) = v18;
      unint64_t v19 = v18 + 8;
      uint64_t result = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      size_t v20 = (char *)result + v19;
      void *result = *((void *)v11 + 3);
      unsigned int v10 = (char *)(result + 1);
      *((void *)v11 + 2) = v20;
      *((void *)v11 + 3) = result;
    }
    *((void *)v11 + 1) = &v10[v16];
    if (v9) {
      uint64_t result = memcpy(v10, *v6, v9);
    }
    this[1591] = v10;
    LODWORD(v9) = *((_DWORD *)this + 3185);
    unsigned int v8 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v8 + 1;
  v10[v8] = 114;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleAssocTypePath@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = (_anonymous_namespace_::Remangler *)this;
  BOOL v11 = 1;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      size_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      size_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      size_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  size_t v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleLabelList@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
LABEL_10:
      unint64_t v14 = &v4[v7];
      unsigned int v15 = a3 + 1;
      while (1)
      {
        if (*(_DWORD *)a4) {
          return this;
        }
        if (++v4 == v14) {
          goto LABEL_29;
        }
      }
    case 2:
      uint64_t v7 = 2;
      goto LABEL_10;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7)
      {
        int v4 = (swift::Demangle::__runtime::Node **)*a2;
        goto LABEL_10;
      }
      break;
  }
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  unsigned int v10 = (char *)this[1591];
  if (v8 >= v9)
  {
    BOOL v11 = (void *)this[1593];
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v16 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v16 <= v13)
      {
        v11[1] = v16;
        LODWORD(v17) = 1;
LABEL_27:
        *(_DWORD *)(v5 + 12740) = v9 + v17;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = (2 * v9);
    }
    size_t v18 = v17 + v9;
    if (!v12 || (unint64_t)&v12[v18] > v13)
    {
      unint64_t v19 = 2 * v11[4];
      if (v19 <= v18 + 1) {
        unint64_t v19 = v18 + 1;
      }
      _OWORD v11[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (uint64_t *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)this + v20;
      *this = v11[3];
      uint64_t v12 = (char *)(this + 1);
      void v11[2] = v21;
      void v11[3] = this;
    }
    v11[1] = &v12[v18];
    if (v9) {
      this = (uint64_t *)memcpy(v12, *(const void **)(v5 + 12728), v9);
    }
    *(void *)(v5 + 12728) = v12;
    LODWORD(v9) = *(_DWORD *)(v5 + 12740);
    unsigned int v10 = v12;
    unsigned int v8 = *(_DWORD *)(v5 + 12736);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 12736) = v8 + 1;
  v10[v8] = 121;
LABEL_29:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleModuleDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v7 = *a2;
    goto LABEL_7;
  }
  uint64_t v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MXM", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleExtensionDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v7 = *a2;
    goto LABEL_7;
  }
  uint64_t v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MXE", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAnonymousDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    size_t v9 = *v8;
    goto LABEL_7;
  }
  size_t v9 = 0;
LABEL_7:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 1) {
    goto LABEL_13;
  }
  if (v11 == 2) {
    goto LABEL_16;
  }
  if (v11 != 5 || (int v12 = *((_DWORD *)v4 + 2)) == 0)
  {
    uint64_t v16 = 0;
LABEL_17:
    long long v20 = 0uLL;
    LOBYTE(v21) = 0;
    {
      unint64_t v17 = *((void *)this + 1585);
      if (v17 > 0xF)
      {
        int v19 = *((_DWORD *)this + 3178) + 16;
        long long v22 = v20;
        uint64_t v23 = v21;
        int v24 = v19;
        std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v22, &v22);
      }
      else
      {
        *((void *)this + 1585) = v17 + 1;
        size_t v18 = (char *)this + 24 * v17 + 12296;
        *(_OWORD *)size_t v18 = v20;
        v18[16] = v21;
      }
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    unint64_t v13 = (char **)((char *)this + 12728);
    unint64_t v14 = (void *)*((void *)this + 1593);
    unsigned int v15 = "MXY";
    goto LABEL_22;
  }
  if (v12 != 1)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_16:
    uint64_t v16 = *((void *)v4 + 1);
    goto LABEL_17;
  }
LABEL_13:
  unint64_t v13 = (char **)((char *)this + 12728);
  unint64_t v14 = (void *)*((void *)this + 1593);
  unsigned int v15 = "MXX";
LABEL_22:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v13, v15, 3uLL, v14);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAssociatedTypeGenericParamRef@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    size_t v9 = *v8;
    goto LABEL_7;
  }
  size_t v9 = 0;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 == 1) {
    goto LABEL_11;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2) == 1)
  {
    size_t v9 = *(swift::Demangle::__runtime::Node **)v9;
LABEL_11:
    unsigned int v11 = a3 + 2;
    if (*(_DWORD *)a4) {
      return this;
    }
    int v12 = *((unsigned __int8 *)v4 + 18);
    if (v12 != 2)
    {
      if (v12 != 5 || *((_DWORD *)v4 + 2) < 2u)
      {
        uint64_t v13 = 0;
        goto LABEL_19;
      }
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
    }
    uint64_t v13 = *((void *)v4 + 1);
LABEL_19:
    BOOL v20 = 1;
    int v16 = *(unsigned __int8 *)(v13 + 18);
    unint64_t v17 = (swift::Demangle::__runtime::Node **)v13;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        size_t v18 = *(swift::Demangle::__runtime::Node **)v13;
        unint64_t v17 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_27:
        int v19 = (swift::Demangle::__runtime::Node **)((char *)v18 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_33;
      }
      unint64_t v17 = 0;
    }
    switch(v16)
    {
      case 1:
        int v19 = (swift::Demangle::__runtime::Node **)(v13 + 8);
        goto LABEL_33;
      case 2:
        int v19 = (swift::Demangle::__runtime::Node **)(v13 + 16);
        goto LABEL_33;
      case 5:
        size_t v18 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_27;
    }
    int v19 = 0;
LABEL_33:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      ++v17;
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "MXA", 3uLL, (void *)v5[1593]);
    int v15 = 0;
    size_t v9 = 0;
    int v14 = 0;
    goto LABEL_35;
  }
  int v14 = 321;
  int v15 = 10;
LABEL_35:
  *(_DWORD *)a4 = v15;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredOptional@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XSq", 3uLL, *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredArray@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XSa", 3uLL, *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleSugaredDictionary@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 != 1)
  {
    if (v10 != 5 || *((_DWORD *)v9 + 2) != 1) {
      goto LABEL_24;
    }
    int v9 = *(swift::Demangle::__runtime::Node **)v9;
  }
  unsigned int v11 = a3 + 2;
  if (*(_DWORD *)a4) {
    return this;
  }
  int v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2) {
    goto LABEL_16;
  }
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_16:
    int v9 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
    goto LABEL_18;
  }
  int v9 = 0;
LABEL_18:
  int v13 = *((unsigned __int8 *)v9 + 18);
  if (v13 != 1)
  {
    if (v13 == 5 && *((_DWORD *)v9 + 2) == 1)
    {
      int v9 = *(swift::Demangle::__runtime::Node **)v9;
      goto LABEL_22;
    }
LABEL_24:
    int v15 = 321;
    int v14 = 10;
    goto LABEL_25;
  }
LABEL_22:
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "XSD", 3uLL, (void *)v5[1593]);
  int v14 = 0;
  int v9 = 0;
  int v15 = 0;
LABEL_25:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v15;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSugaredParen@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  int v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      int v10 = 321;
      int v9 = 10;
      goto LABEL_14;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XSp", 3uLL, *((void **)v4 + 1593));
  int v9 = 0;
  int v7 = 0;
  int v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(void *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleOpaqueType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  long long v51 = 0uLL;
  LOBYTE(v52) = 0;
  if (result) {
    goto LABEL_2;
  }
  if (*((unsigned char *)v5 + 18) != 5 || *((_DWORD *)v5 + 2) <= 2u)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = 3771;
    return result;
  }
  unsigned int v9 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  if (*((unsigned char *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 3u) {
    int v10 = (uint64_t *)*((void *)*v5 + 2);
  }
  else {
    int v10 = 0;
  }
  unint64_t v11 = 0;
  int v12 = (const void **)((char *)this + 12728);
  unint64_t v49 = v10;
  while (1)
  {
    unint64_t v13 = *((unsigned __int8 *)v10 + 18);
    if (v13 != 1)
    {
      if (v13 == 5)
      {
        unint64_t v13 = *((unsigned int *)v10 + 2);
      }
      else
      {
        if (v13 != 2) {
          break;
        }
        unint64_t v13 = 2;
      }
    }
    if (v13 <= v11) {
      break;
    }
    if (v11) {
      char v14 = 95;
    }
    else {
      char v14 = 121;
    }
    unsigned int v15 = *((_DWORD *)this + 3184);
    size_t v16 = *((unsigned int *)this + 3185);
    unint64_t v17 = (char *)*((void *)this + 1591);
    if (v15 >= v16)
    {
      unint64_t v50 = v11;
      size_t v18 = (void *)*((void *)this + 1593);
      int v19 = (char *)v18[1];
      if (&v17[v16] != v19)
      {
        unint64_t v20 = v18[2];
        goto LABEL_26;
      }
      unint64_t v21 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v21 <= v20)
      {
        v18[1] = v21;
        LODWORD(v22) = 1;
      }
      else
      {
LABEL_26:
        if ((2 * v16) <= 4) {
          uint64_t v22 = 4;
        }
        else {
          uint64_t v22 = (2 * v16);
        }
        size_t v23 = v22 + v16;
        if (!v19 || (unint64_t)&v19[v23] > v20)
        {
          unint64_t v24 = 2 * v18[4];
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          void v18[4] = v24;
          size_t v48 = v12;
          unint64_t v25 = v24 + 8;
          char v26 = v14;
          unint64_t v27 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
          char v14 = v26;
          *unint64_t v27 = v18[3];
          int v19 = (char *)(v27 + 1);
          int v28 = (char *)v27 + v25;
          int v12 = v48;
          uint64_t v18[2] = v28;
          void v18[3] = v27;
        }
        v18[1] = &v19[v23];
        if (v16)
        {
          char v29 = v14;
          memcpy(v19, *v12, v16);
          char v14 = v29;
        }
        *((void *)this + 1591) = v19;
        LODWORD(v16) = *((_DWORD *)this + 3185);
        unint64_t v17 = v19;
        unsigned int v15 = *((_DWORD *)this + 3184);
        int v10 = v49;
      }
      unint64_t v11 = v50;
      *((_DWORD *)this + 3185) = v16 + v22;
    }
    *((_DWORD *)this + 3184) = v15 + 1;
    v17[v15] = v14;
    unint64_t v30 = *((unsigned __int8 *)v10 + 18);
    unsigned int v31 = v30 - 1;
    if (v30 == 1) {
      goto LABEL_42;
    }
    if (v30 != 5)
    {
      if (v30 != 2) {
        goto LABEL_47;
      }
      unint64_t v30 = 2;
LABEL_42:
      if (v30 <= v11) {
        goto LABEL_47;
      }
      goto LABEL_43;
    }
    if (*((unsigned int *)v10 + 2) <= v11)
    {
LABEL_47:
      uint64_t v33 = 0;
      goto LABEL_48;
    }
LABEL_43:
    int v32 = v10;
    if (v31 >= 2) {
      int v32 = (uint64_t *)*v10;
    }
    uint64_t v33 = v32[v11];
LABEL_48:
    int v34 = *(unsigned __int8 *)(v33 + 18);
    long long v35 = (swift::Demangle::__runtime::Node **)v33;
    if ((v34 - 1) >= 2)
    {
      if (v34 == 5)
      {
        uint64_t v36 = *(swift::Demangle::__runtime::Node **)v33;
        long long v35 = *(swift::Demangle::__runtime::Node ***)v33;
LABEL_56:
        long long v37 = (swift::Demangle::__runtime::Node **)((char *)v36 + 8 * *(unsigned int *)(v33 + 8));
        goto LABEL_62;
      }
      long long v35 = 0;
    }
    switch(v34)
    {
      case 1:
        long long v37 = (swift::Demangle::__runtime::Node **)(v33 + 8);
        goto LABEL_62;
      case 2:
        long long v37 = (swift::Demangle::__runtime::Node **)(v33 + 16);
        goto LABEL_62;
      case 5:
        uint64_t v36 = *(swift::Demangle::__runtime::Node **)v33;
        goto LABEL_56;
    }
    long long v37 = 0;
LABEL_62:
    while (v35 != v37)
    {
      if (*(_DWORD *)a4) {
        return result;
      }
      ++v35;
    }
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    ++v11;
    *(_DWORD *)(a4 + 16) = 0;
  }
  if (*((unsigned char *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 4u)
  {
    unint64_t v38 = 0;
    int v39 = (uint64_t *)*((void *)*v5 + 3);
    while (1)
    {
      unint64_t v41 = *((unsigned __int8 *)v39 + 18);
      switch(v41)
      {
        case 1:
          unint64_t v42 = *((unsigned __int8 *)v39 + 18);
          break;
        case 5:
          unint64_t v42 = *((unsigned int *)v39 + 2);
          break;
        case 2:
          unint64_t v42 = 2;
          break;
        default:
          goto LABEL_85;
      }
      if (v42 <= v38) {
        break;
      }
      unsigned int v43 = v41 - 1;
      if (v41 != 1)
      {
        if (v41 == 5) {
          unint64_t v41 = *((unsigned int *)v39 + 2);
        }
        else {
          unint64_t v41 = 2;
        }
      }
      if (v41 <= v38)
      {
        uint64_t v40 = 0;
      }
      else
      {
        uint64_t v44 = v39;
        if (v43 >= 2) {
          uint64_t v44 = (uint64_t *)*v39;
        }
        uint64_t v40 = (swift::Demangle::__runtime::Node *)v44[v38];
      }
      ++v38;
      if (*(_DWORD *)a4) {
        return result;
      }
    }
  }
LABEL_85:
  swift::Demangle::__runtime::CharVector::append((char **)v12, "Qo", 2uLL, *((void **)this + 1593));
  if (*((unsigned char *)v5 + 18) == 5) {
    uint64_t v5 = (swift::Demangle::__runtime::Node **)*v5;
  }
  unint64_t v45 = *((void *)this + 1585);
  if (v45 > 0xF)
  {
    int v47 = *((_DWORD *)this + 3178) + 16;
    long long v53 = v51;
    uint64_t v54 = v52;
    int v55 = v47;
    uint64_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v53, &v53);
  }
  else
  {
    *((void *)this + 1585) = v45 + 1;
    unsigned int v46 = (char *)this + 24 * v45 + 12296;
    *(_OWORD *)unsigned int v46 = v51;
    v46[16] = v52;
  }
LABEL_2:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MQ", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorRecord@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ho", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mg", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorImpl@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mh", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorKey@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mj", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorVar@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mk", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *anonymous namespace'::Remangler::mangleOpaqueReturnType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (uint64_t *)a2;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      goto LABEL_9;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v7 + 16) != 341)
  {
LABEL_9:
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Qr", 2uLL, this[1593]);
    goto LABEL_10;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "QR", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v3 + 18) - 1 >= 2) {
    uint64_t v3 = (uint64_t *)*v3;
  }
LABEL_10:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

{
  uint64_t *v3;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  void *result;

  uint64_t v3 = (uint64_t *)a2;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      goto LABEL_9;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v7 + 16) != 341)
  {
LABEL_9:
    uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Qu", 2uLL, this[1593]);
    goto LABEL_10;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "QU", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v3 + 18) - 1 >= 2) {
    uint64_t v3 = (uint64_t *)*v3;
  }
LABEL_10:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOpaqueReturnTypeOf@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "QO", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericMetaclass@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericTypeMetadataAccessFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mb", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 114;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mb", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleMetadataInstantiationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MK", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MN", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 114;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MN", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadataCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MJ", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 114;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MJ", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceToken@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wz", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleGlobalVariableOnceDeclList@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  unsigned int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_6;
  }
  if (v7 != 5)
  {
    if (v7 != 2) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  unsigned int v7 = *((_DWORD *)a2 + 2);
  if (v7)
  {
LABEL_6:
    unint64_t v8 = 0;
    unsigned int v9 = a3 + 1;
    uint64_t v10 = v7;
    unsigned int v27 = a3 + 1;
    while (1)
    {
      unint64_t v14 = *((unsigned __int8 *)a2 + 18);
      unsigned int v15 = v14 - 1;
      if (v14 == 1) {
        goto LABEL_14;
      }
      if (v14 != 5) {
        break;
      }
      if (*((unsigned int *)a2 + 2) <= v8)
      {
LABEL_19:
        unint64_t v17 = 0;
        goto LABEL_20;
      }
LABEL_15:
      size_t v16 = a2;
      if (v15 >= 2) {
        size_t v16 = *(swift::Demangle::__runtime::Node **)a2;
      }
      unint64_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v16 + v8);
LABEL_20:
      if (*(_DWORD *)a4) {
        return this;
      }
      unsigned int v13 = *(_DWORD *)(v5 + 12736);
      size_t v11 = *(unsigned int *)(v5 + 12740);
      int v12 = *(char **)(v5 + 12728);
      if (v13 >= v11)
      {
        size_t v18 = *(void **)(v5 + 12744);
        int v19 = (char *)v18[1];
        if (&v12[v11] != v19)
        {
          unint64_t v20 = v18[2];
          goto LABEL_25;
        }
        unint64_t v21 = (unint64_t)&v12[v11 + 1];
        unint64_t v20 = v18[2];
        if (v21 <= v20)
        {
          v18[1] = v21;
          LODWORD(v22) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v11) <= 4) {
            uint64_t v22 = 4;
          }
          else {
            uint64_t v22 = (2 * v11);
          }
          size_t v23 = v22 + v11;
          if (!v19 || (unint64_t)&v19[v23] > v20)
          {
            unint64_t v24 = 2 * v18[4];
            if (v24 <= v23 + 1) {
              unint64_t v24 = v23 + 1;
            }
            void v18[4] = v24;
            unint64_t v25 = v24 + 8;
            this = (uint64_t *)malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
            char v26 = (char *)this + v25;
            *this = v18[3];
            int v19 = (char *)(this + 1);
            uint64_t v18[2] = v26;
            void v18[3] = this;
          }
          v18[1] = &v19[v23];
          if (v11) {
            this = (uint64_t *)memcpy(v19, *(const void **)(v5 + 12728), v11);
          }
          *(void *)(v5 + 12728) = v19;
          LODWORD(v11) = *(_DWORD *)(v5 + 12740);
          int v12 = v19;
          unsigned int v13 = *(_DWORD *)(v5 + 12736);
        }
        *(_DWORD *)(v5 + 12740) = v11 + v22;
        unsigned int v9 = v27;
      }
      *(_DWORD *)(v5 + 12736) = v13 + 1;
      v12[v13] = 95;
      if (v10 == ++v8) {
        goto LABEL_36;
      }
    }
    if (v14 != 2) {
      goto LABEL_19;
    }
    unint64_t v14 = 2;
LABEL_14:
    if (v14 <= v8) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
LABEL_36:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCanonicalPrespecializedGenericTypeCachingOnceToken@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mz", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 114;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mz", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffSelfReorderingReabstractionThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      int v4 = *(swift::Demangle::__runtime::Node **)a2;
    }
    else {
      int v4 = 0;
    }
  }
  unsigned int v8 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      size_t v11 = (swift::Demangle::__runtime::Node **)((char *)v4 + 16);
      uint64_t v10 = *((void *)v4 + 2);
      if (*(_WORD *)(v10 + 16) == 43)
      {
        if (*(_DWORD *)a4) {
          return result;
        }
        size_t v11 = (swift::Demangle::__runtime::Node **)((char *)v4 + 24);
      }
      swift::Demangle::__runtime::CharVector::append(this + 1591, "TJO", 3uLL, this[1593]);
      int v12 = *v11;
    }
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffSubsetParametersThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      unsigned int v8 = (swift::Demangle::__runtime::Node **)*a2;
    }
    else {
      unsigned int v8 = 0;
    }
  }
  unsigned int v9 = a3 + 1;
  while (1)
  {
    int v10 = *((unsigned __int8 *)a2 + 18);
    if (v10 != 5) {
      break;
    }
    if (v8 == (swift::Demangle::__runtime::Node **)((char *)*a2 + 8 * *((unsigned int *)a2 + 2))) {
      goto LABEL_19;
    }
LABEL_16:
    unsigned int v13 = *v8;
    if (*((_WORD *)*v8 + 8) == 321) {
      goto LABEL_19;
    }
    ++v8;
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  if (v10 == 1) {
    size_t v11 = a2 + 1;
  }
  else {
    size_t v11 = 0;
  }
  if (v10 == 2) {
    int v12 = a2 + 2;
  }
  else {
    int v12 = v11;
  }
  if (v8 != v12) {
    goto LABEL_16;
  }
LABEL_19:
  unsigned int v15 = (const void **)(this + 1591);
  swift::Demangle::__runtime::CharVector::append(this + 1591, "TJS", 3uLL, this[1593]);
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      unsigned int v16 = *((_DWORD *)this + 3184);
      size_t v17 = *((unsigned int *)this + 3185);
      size_t v18 = this[1591];
      if (v16 >= v17)
      {
        int v19 = this[1593];
        unint64_t v20 = (char *)*((void *)v19 + 1);
        if (&v18[v17] != v20)
        {
          unint64_t v21 = *((void *)v19 + 2);
          goto LABEL_25;
        }
        unint64_t v22 = (unint64_t)&v18[v17 + 1];
        unint64_t v21 = *((void *)v19 + 2);
        if (v22 <= v21)
        {
          *((void *)v19 + 1) = v22;
          LODWORD(v23) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v17) <= 4) {
            uint64_t v23 = 4;
          }
          else {
            uint64_t v23 = (2 * v17);
          }
          size_t v24 = v23 + v17;
          if (!v20 || (unint64_t)&v20[v24] > v21)
          {
            unint64_t v25 = 2 * *((void *)v19 + 4);
            if (v25 <= v24 + 1) {
              unint64_t v25 = v24 + 1;
            }
            *((void *)v19 + 4) = v25;
            unint64_t v26 = v25 + 8;
            unsigned int v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
            int v28 = (char *)v27 + v26;
            *unsigned int v27 = *((void *)v19 + 3);
            unint64_t v20 = (char *)(v27 + 1);
            *((void *)v19 + 2) = v28;
            *((void *)v19 + 3) = v27;
          }
          *((void *)v19 + 1) = &v20[v24];
          if (v17) {
            memcpy(v20, *v15, v17);
          }
          this[1591] = v20;
          LODWORD(v17) = *((_DWORD *)this + 3185);
          size_t v18 = v20;
          unsigned int v16 = *((_DWORD *)this + 3184);
        }
        *((_DWORD *)this + 3185) = v17 + v23;
      }
      *((_DWORD *)this + 3184) = v16 + 1;
      v18[v16] = 112;
      if (!*(_DWORD *)a4)
      {
        unsigned int v29 = *((_DWORD *)this + 3184);
        size_t v30 = *((unsigned int *)this + 3185);
        unsigned int v31 = this[1591];
        if (v29 >= v30)
        {
          int v32 = this[1593];
          uint64_t v33 = (char *)*((void *)v32 + 1);
          if (&v31[v30] != v33)
          {
            unint64_t v34 = *((void *)v32 + 2);
            goto LABEL_43;
          }
          unint64_t v35 = (unint64_t)&v31[v30 + 1];
          unint64_t v34 = *((void *)v32 + 2);
          if (v35 <= v34)
          {
            *((void *)v32 + 1) = v35;
            LODWORD(v36) = 1;
          }
          else
          {
LABEL_43:
            if ((2 * v30) <= 4) {
              uint64_t v36 = 4;
            }
            else {
              uint64_t v36 = (2 * v30);
            }
            size_t v37 = v36 + v30;
            if (!v33 || (unint64_t)&v33[v37] > v34)
            {
              unint64_t v38 = 2 * *((void *)v32 + 4);
              if (v38 <= v37 + 1) {
                unint64_t v38 = v37 + 1;
              }
              *((void *)v32 + 4) = v38;
              unint64_t v39 = v38 + 8;
              uint64_t v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
              unint64_t v41 = (char *)v40 + v39;
              *uint64_t v40 = *((void *)v32 + 3);
              uint64_t v33 = (char *)(v40 + 1);
              *((void *)v32 + 2) = v41;
              *((void *)v32 + 3) = v40;
            }
            *((void *)v32 + 1) = &v33[v37];
            if (v30) {
              memcpy(v33, *v15, v30);
            }
            this[1591] = v33;
            LODWORD(v30) = *((_DWORD *)this + 3185);
            unsigned int v31 = v33;
            unsigned int v29 = *((_DWORD *)this + 3184);
          }
          *((_DWORD *)this + 3185) = v30 + v36;
        }
        *((_DWORD *)this + 3184) = v29 + 1;
        v31[v29] = 114;
        if (!*(_DWORD *)a4)
        {
          unsigned int v42 = *((_DWORD *)this + 3184);
          size_t v43 = *((unsigned int *)this + 3185);
          uint64_t v44 = this[1591];
          if (v42 >= v43)
          {
            unint64_t v45 = this[1593];
            unsigned int v46 = (char *)*((void *)v45 + 1);
            if (&v44[v43] != v46)
            {
              unint64_t v47 = *((void *)v45 + 2);
              goto LABEL_61;
            }
            unint64_t v48 = (unint64_t)&v44[v43 + 1];
            unint64_t v47 = *((void *)v45 + 2);
            if (v48 <= v47)
            {
              *((void *)v45 + 1) = v48;
              LODWORD(v49) = 1;
            }
            else
            {
LABEL_61:
              if ((2 * v43) <= 4) {
                uint64_t v49 = 4;
              }
              else {
                uint64_t v49 = (2 * v43);
              }
              size_t v50 = v49 + v43;
              if (!v46 || (unint64_t)&v46[v50] > v47)
              {
                unint64_t v51 = 2 * *((void *)v45 + 4);
                if (v51 <= v50 + 1) {
                  unint64_t v51 = v50 + 1;
                }
                *((void *)v45 + 4) = v51;
                unint64_t v52 = v51 + 8;
                uint64_t result = (uint64_t *)malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
                long long v53 = (char *)result + v52;
                uint64_t *result = *((void *)v45 + 3);
                unsigned int v46 = (char *)(result + 1);
                *((void *)v45 + 2) = v53;
                *((void *)v45 + 3) = result;
              }
              *((void *)v45 + 1) = &v46[v50];
              if (v43) {
                uint64_t result = (uint64_t *)memcpy(v46, *v15, v43);
              }
              this[1591] = v46;
              LODWORD(v43) = *((_DWORD *)this + 3185);
              uint64_t v44 = v46;
              unsigned int v42 = *((_DWORD *)this + 3184);
            }
            *((_DWORD *)this + 3185) = v43 + v49;
          }
          *((_DWORD *)this + 3184) = v42 + 1;
          v44[v42] = 80;
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleDifferentiabilityWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  unsigned int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5) {
      unsigned int v8 = *(swift::Demangle::__runtime::Node **)a2;
    }
    else {
      unsigned int v8 = 0;
    }
  }
  unsigned int v9 = (unsigned int *)((char *)a2 + 8);
  unsigned int v10 = a3 + 1;
  while (1)
  {
    int v11 = *((unsigned __int8 *)v4 + 18);
    if (v11 != 5) {
      break;
    }
    if (v8 == (swift::Demangle::__runtime::Node *)(*(void *)v4 + 8 * *((unsigned int *)v4 + 2))) {
      goto LABEL_18;
    }
LABEL_15:
    unsigned int v13 = *(swift::Demangle::__runtime::Node **)v8;
    if (*(_WORD *)(*(void *)v8 + 16) == 102) {
      goto LABEL_18;
    }
    unsigned int v8 = (swift::Demangle::__runtime::Node *)((char *)v8 + 8);
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  if (v11 == 1) {
    int v12 = (swift::Demangle::__runtime::Node *)((char *)v4 + 8);
  }
  else {
    int v12 = 0;
  }
  if (v11 == 2) {
    int v12 = (swift::Demangle::__runtime::Node *)((char *)v4 + 16);
  }
  if (v8 != v12) {
    goto LABEL_15;
  }
LABEL_18:
  if (v11 == 1)
  {
    uint64_t v15 = 0;
  }
  else
  {
    if (v11 == 5)
    {
      uint64_t v15 = *((unsigned int *)v4 + 2) - 1;
      unsigned int v16 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_24;
    }
    uint64_t v15 = 1;
  }
  unsigned int v16 = v4;
LABEL_24:
  if (*(_WORD *)(*((void *)v16 + v15) + 16) != 43) {
    goto LABEL_34;
  }
  if (v11 == 1)
  {
    uint64_t v18 = 0;
    goto LABEL_32;
  }
  if (v11 == 5)
  {
    uint64_t v19 = *v9;
    if (!v19)
    {
      size_t v17 = 0;
      goto LABEL_33;
    }
    uint64_t v18 = v19 - 1;
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_32:
    size_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v4 + v18);
    goto LABEL_33;
  }
  size_t v17 = 0;
  if (v11 == 2)
  {
    uint64_t v18 = 1;
    goto LABEL_32;
  }
LABEL_33:
  if (!*(_DWORD *)a4)
  {
LABEL_34:
    unint64_t v20 = (const void **)(this + 1591);
    swift::Demangle::__runtime::CharVector::append(this + 1591, "WJ", 2uLL, this[1593]);
    char v21 = **(unsigned char **)v8;
    unsigned int v22 = *((_DWORD *)this + 3184);
    size_t v23 = *((unsigned int *)this + 3185);
    size_t v24 = this[1591];
    if (v22 >= v23)
    {
      unint64_t v25 = this[1593];
      unint64_t v26 = (char *)*((void *)v25 + 1);
      if (&v24[v23] != v26)
      {
        unint64_t v27 = *((void *)v25 + 2);
        goto LABEL_38;
      }
      unint64_t v28 = (unint64_t)&v24[v23 + 1];
      unint64_t v27 = *((void *)v25 + 2);
      if (v28 <= v27)
      {
        *((void *)v25 + 1) = v28;
        LODWORD(v29) = 1;
        unint64_t v20 = (const void **)(this + 1591);
      }
      else
      {
LABEL_38:
        if ((2 * v23) <= 4) {
          uint64_t v29 = 4;
        }
        else {
          uint64_t v29 = (2 * v23);
        }
        size_t v30 = v29 + v23;
        if (!v26 || (unint64_t)&v26[v30] > v27)
        {
          unint64_t v31 = 2 * *((void *)v25 + 4);
          if (v31 <= v30 + 1) {
            unint64_t v31 = v30 + 1;
          }
          *((void *)v25 + 4) = v31;
          unint64_t v32 = v31 + 8;
          uint64_t v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
          unint64_t v34 = (char *)v33 + v32;
          *uint64_t v33 = *((void *)v25 + 3);
          unint64_t v26 = (char *)(v33 + 1);
          *((void *)v25 + 2) = v34;
          *((void *)v25 + 3) = v33;
        }
        *((void *)v25 + 1) = &v26[v30];
        unint64_t v20 = (const void **)(this + 1591);
        if (v23) {
          memcpy(v26, this[1591], v23);
        }
        this[1591] = v26;
        LODWORD(v23) = *((_DWORD *)this + 3185);
        size_t v24 = v26;
        unsigned int v22 = *((_DWORD *)this + 3184);
      }
      *((_DWORD *)this + 3185) = v23 + v29;
    }
    *((_DWORD *)this + 3184) = v22 + 1;
    v24[v22] = v21;
    if (!*(_DWORD *)a4)
    {
      unsigned int v35 = *((_DWORD *)this + 3184);
      size_t v36 = *((unsigned int *)this + 3185);
      size_t v37 = this[1591];
      if (v35 >= v36)
      {
        unint64_t v38 = this[1593];
        unint64_t v39 = (char *)*((void *)v38 + 1);
        if (&v37[v36] != v39)
        {
          unint64_t v40 = *((void *)v38 + 2);
          goto LABEL_56;
        }
        unint64_t v41 = (unint64_t)&v37[v36 + 1];
        unint64_t v40 = *((void *)v38 + 2);
        if (v41 <= v40)
        {
          *((void *)v38 + 1) = v41;
          LODWORD(v42) = 1;
        }
        else
        {
LABEL_56:
          if ((2 * v36) <= 4) {
            uint64_t v42 = 4;
          }
          else {
            uint64_t v42 = (2 * v36);
          }
          size_t v43 = v42 + v36;
          if (!v39 || (unint64_t)&v39[v43] > v40)
          {
            unint64_t v44 = 2 * *((void *)v38 + 4);
            if (v44 <= v43 + 1) {
              unint64_t v44 = v43 + 1;
            }
            *((void *)v38 + 4) = v44;
            unint64_t v45 = v44 + 8;
            unsigned int v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
            unint64_t v47 = (char *)v46 + v45;
            *unsigned int v46 = *((void *)v38 + 3);
            unint64_t v39 = (char *)(v46 + 1);
            *((void *)v38 + 2) = v47;
            *((void *)v38 + 3) = v46;
          }
          *((void *)v38 + 1) = &v39[v43];
          if (v36) {
            memcpy(v39, *v20, v36);
          }
          this[1591] = v39;
          LODWORD(v36) = *((_DWORD *)this + 3185);
          size_t v37 = v39;
          unsigned int v35 = *((_DWORD *)this + 3184);
        }
        *((_DWORD *)this + 3185) = v36 + v42;
      }
      *((_DWORD *)this + 3184) = v35 + 1;
      v37[v35] = 112;
      if (!*(_DWORD *)a4)
      {
        unsigned int v48 = *((_DWORD *)this + 3184);
        size_t v49 = *((unsigned int *)this + 3185);
        size_t v50 = this[1591];
        if (v48 >= v49)
        {
          unint64_t v51 = this[1593];
          unint64_t v52 = (char *)*((void *)v51 + 1);
          if (&v50[v49] != v52)
          {
            unint64_t v53 = *((void *)v51 + 2);
            goto LABEL_75;
          }
          unint64_t v54 = (unint64_t)&v50[v49 + 1];
          unint64_t v53 = *((void *)v51 + 2);
          if (v54 <= v53)
          {
            *((void *)v51 + 1) = v54;
            LODWORD(v55) = 1;
          }
          else
          {
LABEL_75:
            if ((2 * v49) <= 4) {
              uint64_t v55 = 4;
            }
            else {
              uint64_t v55 = (2 * v49);
            }
            size_t v56 = v55 + v49;
            if (!v52 || (unint64_t)&v52[v56] > v53)
            {
              unint64_t v57 = 2 * *((void *)v51 + 4);
              if (v57 <= v56 + 1) {
                unint64_t v57 = v56 + 1;
              }
              *((void *)v51 + 4) = v57;
              unint64_t v58 = v57 + 8;
              uint64_t result = (uint64_t *)malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
              size_t v59 = (char *)result + v58;
              uint64_t *result = *((void *)v51 + 3);
              unint64_t v52 = (char *)(result + 1);
              *((void *)v51 + 2) = v59;
              *((void *)v51 + 3) = result;
            }
            *((void *)v51 + 1) = &v52[v56];
            if (v49) {
              uint64_t result = (uint64_t *)memcpy(v52, *v20, v49);
            }
            this[1591] = v52;
            LODWORD(v49) = *((_DWORD *)this + 3185);
            size_t v50 = v52;
            unsigned int v48 = *((_DWORD *)this + 3184);
          }
          *((_DWORD *)this + 3185) = v49 + v55;
        }
        *((_DWORD *)this + 3184) = v48 + 1;
        v50[v48] = 114;
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
      }
    }
  }
  return result;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleNoDerivative@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yk", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAsyncAwaitResumePartialFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TQ", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

uint64_t *anonymous namespace'::Remangler::mangleAsyncSuspendResumePartialFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TY", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCompileTimeConst@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 321;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yt", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleExtendedExistentialTypeShape@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1) {
    goto LABEL_7;
  }
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 == 2) {
    goto LABEL_11;
  }
  if (v7 == 5)
  {
    int v9 = *((_DWORD *)a2 + 2);
    if (!v9)
    {
      unsigned int v10 = 0;
      goto LABEL_16;
    }
    if (v9 == 1)
    {
      a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_7:
      unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_16:
      int v12 = "Xg";
      goto LABEL_17;
    }
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_11:
    int v11 = *v8;
    if (v7 == 2) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  int v11 = 0;
LABEL_12:
  if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
  {
    unsigned int v10 = 0;
    if (!v11) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_15:
  unsigned int v10 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 1);
  if (!v11) {
    goto LABEL_16;
  }
LABEL_20:
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = "XG";
LABEL_17:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, v12, 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleUniquable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2) {
    goto LABEL_5;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v7 = *a2;
    goto LABEL_7;
  }
  int v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mq", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleSymbolicExtendedExistentialType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    int v9 = *v8;
    goto LABEL_7;
  }
  int v9 = 0;
LABEL_7:
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v12 = *((unsigned __int8 *)a2 + 18);
  unsigned int v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2) {
    goto LABEL_12;
  }
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    unsigned int v13 = *a2;
LABEL_12:
    uint64_t v14 = *((void *)v13 + 1);
    goto LABEL_14;
  }
  uint64_t v14 = 0;
LABEL_14:
  int v15 = *(unsigned __int8 *)(v14 + 18);
  unsigned int v16 = (swift::Demangle::__runtime::Node **)v14;
  if ((v15 - 1) >= 2)
  {
    if (v15 == 5)
    {
      size_t v17 = *(swift::Demangle::__runtime::Node **)v14;
      unsigned int v16 = *(swift::Demangle::__runtime::Node ***)v14;
      goto LABEL_22;
    }
    unsigned int v16 = 0;
  }
  switch(v15)
  {
    case 1:
      uint64_t v18 = (swift::Demangle::__runtime::Node **)(v14 + 8);
      if (v16 != (swift::Demangle::__runtime::Node **)(v14 + 8)) {
        goto LABEL_30;
      }
      goto LABEL_27;
    case 2:
      uint64_t v18 = (swift::Demangle::__runtime::Node **)(v14 + 16);
      if (v16 != (swift::Demangle::__runtime::Node **)(v14 + 16)) {
        goto LABEL_30;
      }
LABEL_27:
      if (v12 == 5) {
        goto LABEL_33;
      }
      goto LABEL_49;
    case 5:
      size_t v17 = *(swift::Demangle::__runtime::Node **)v14;
LABEL_22:
      uint64_t v18 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8 * *(unsigned int *)(v14 + 8));
      if (v16 != v18) {
        goto LABEL_30;
      }
      goto LABEL_27;
  }
  uint64_t v18 = 0;
  if (!v16) {
    goto LABEL_27;
  }
  do
  {
LABEL_30:
    if (*(_DWORD *)a4) {
      return result;
    }
    ++v16;
  }
  while (v16 != v18);
  if (*((unsigned char *)a2 + 18) == 5)
  {
LABEL_33:
    if (*((_DWORD *)a2 + 2) >= 3u)
    {
      uint64_t v19 = *((void *)*a2 + 2);
      int v20 = *(unsigned __int8 *)(v19 + 18);
      char v21 = (swift::Demangle::__runtime::Node **)v19;
      if ((v20 - 1) >= 2)
      {
        if (v20 == 5)
        {
          unsigned int v22 = *(swift::Demangle::__runtime::Node **)v19;
          char v21 = *(swift::Demangle::__runtime::Node ***)v19;
LABEL_42:
          size_t v23 = (swift::Demangle::__runtime::Node **)((char *)v22 + 8 * *(unsigned int *)(v19 + 8));
          goto LABEL_48;
        }
        char v21 = 0;
      }
      switch(v20)
      {
        case 1:
          size_t v23 = (swift::Demangle::__runtime::Node **)(v19 + 8);
          goto LABEL_48;
        case 2:
          size_t v23 = (swift::Demangle::__runtime::Node **)(v19 + 16);
          goto LABEL_48;
        case 5:
          unsigned int v22 = *(swift::Demangle::__runtime::Node **)v19;
          goto LABEL_42;
      }
      size_t v23 = 0;
LABEL_48:
      while (v21 != v23)
      {
        if (*(_DWORD *)a4) {
          return result;
        }
        ++v21;
      }
    }
  }
LABEL_49:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *anonymous namespace'::Remangler::mangleMetatypeParamsRemoved@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      size_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 109;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumTagStore@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 != 1)
  {
    int v9 = (swift::Demangle::__runtime::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4) {
        return result;
      }
      swift::Demangle::__runtime::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
      if (*((unsigned char *)v4 + 18) == 5) {
        int v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      uint64_t v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }
    if (v7 != 5 || (int v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      size_t v13 = 0;
      goto LABEL_14;
    }
    if (v10 == 2)
    {
      int v9 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_7;
    }
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  size_t v13 = *v8;
LABEL_14:
  unsigned int v14 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v15 = *((unsigned __int8 *)v4 + 18);
  unint64_t v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      size_t v17 = 0;
      goto LABEL_21;
    }
    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v4;
  }
  size_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4) {
    return result;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
  uint64_t v12 = (uint64_t **)(*(void *)v4 + 16);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumProjectDataForLoad@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 != 1)
  {
    int v9 = (swift::Demangle::__runtime::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4) {
        return result;
      }
      swift::Demangle::__runtime::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
      if (*((unsigned char *)v4 + 18) == 5) {
        int v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      uint64_t v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }
    if (v7 != 5 || (int v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      size_t v13 = 0;
      goto LABEL_14;
    }
    if (v10 == 2)
    {
      int v9 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_7;
    }
    int v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  size_t v13 = *v8;
LABEL_14:
  unsigned int v14 = a3 + 1;
  if (*(_DWORD *)a4) {
    return result;
  }
  int v15 = *((unsigned __int8 *)v4 + 18);
  unint64_t v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      size_t v17 = 0;
      goto LABEL_21;
    }
    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v4;
  }
  size_t v17 = (swift::Demangle::__runtime::Node *)*((void *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4) {
    return result;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
  uint64_t v12 = (uint64_t **)(*(void *)v4 + 16);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedEnumGetTag@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOg", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleAsyncRemoved@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  unsigned int v5 = this[3184];
  size_t v6 = this[3185];
  int v7 = (char *)*((void *)this + 1591);
  if (v5 >= v6)
  {
    uint64_t v8 = (void *)*((void *)this + 1593);
    int v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v11 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = (2 * v6);
    }
    size_t v13 = v12 + v6;
    if (v9) {
      BOOL v14 = (unint64_t)&v9[v12 + v6] > v10;
    }
    else {
      BOOL v14 = 1;
    }
    int v7 = (char *)v8[1];
    if (v14)
    {
      unint64_t v15 = 2 * v8[4];
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      v8[4] = v15;
      unint64_t v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      size_t v17 = (char *)this + v16;
      *(void *)this = v8[3];
      int v7 = (char *)(this + 2);
      v8[2] = v17;
      void v8[3] = this;
    }
    v8[1] = &v7[v13];
    if (v6) {
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    }
    *((void *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    unsigned int v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 97;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleParamLifetimeDependence@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_8:
  uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Yl", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v4 + 18) - 1 >= 2) {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  char v10 = **(unsigned char **)v4;
  unsigned int v11 = *((_DWORD *)this + 3184);
  size_t v12 = *((unsigned int *)this + 3185);
  size_t v13 = this[1591];
  if (v11 < v12) {
    goto LABEL_27;
  }
  BOOL v14 = this[1593];
  unint64_t v15 = (char *)*((void *)v14 + 1);
  if (&v13[v12] != v15)
  {
    unint64_t v16 = *((void *)v14 + 2);
LABEL_14:
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      unint64_t v20 = 2 * *((void *)v14 + 4);
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      *((void *)v14 + 4) = v20;
      unint64_t v21 = v20 + 8;
      uint64_t result = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      unsigned int v22 = (char *)result + v21;
      uint64_t *result = *((void *)v14 + 3);
      unint64_t v15 = (char *)(result + 1);
      *((void *)v14 + 2) = v22;
      *((void *)v14 + 3) = result;
    }
    *((void *)v14 + 1) = &v15[v19];
    if (v12) {
      uint64_t result = (uint64_t *)memcpy(v15, this[1591], v12);
    }
    this[1591] = v15;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    size_t v13 = v15;
    unsigned int v11 = *((_DWORD *)this + 3184);
    goto LABEL_26;
  }
  unint64_t v17 = (unint64_t)&v13[v12 + 1];
  unint64_t v16 = *((void *)v14 + 2);
  if (v17 > v16) {
    goto LABEL_14;
  }
  *((void *)v14 + 1) = v17;
  LODWORD(v18) = 1;
LABEL_26:
  *((_DWORD *)this + 3185) = v12 + v18;
LABEL_27:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = v10;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleSelfLifetimeDependence@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6 = (const void **)(this + 1591);
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "YL", 2uLL, this[1593]);
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  unsigned int v11 = this[1591];
  if (v9 >= v10)
  {
    size_t v12 = this[1593];
    size_t v13 = (char *)*((void *)v12 + 1);
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = *((void *)v12 + 2);
      if (v15 <= v14)
      {
        *((void *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v14 = *((void *)v12 + 2);
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    unsigned int v11 = (char *)*((void *)v12 + 1);
    if (v18)
    {
      unint64_t v19 = 2 * *((void *)v12 + 4);
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      *((void *)v12 + 4) = v19;
      unint64_t v20 = v19 + 8;
      uint64_t result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)result + v20;
      void *result = *((void *)v12 + 3);
      unsigned int v11 = (char *)(result + 1);
      *((void *)v12 + 2) = v21;
      *((void *)v12 + 3) = result;
    }
    *((void *)v12 + 1) = &v11[v17];
    if (v10) {
      uint64_t result = memcpy(v11, *v6, v10);
    }
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    unsigned int v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOC", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithTakeNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOD", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedAssignWithCopyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOF", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleOutlinedDestroyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      int v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  switch(v6)
  {
    case 1:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v8 = *(void *)a2;
LABEL_9:
      unsigned int v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOH", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    int v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleDependentGenericInverseConformanceRequirement@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 2)
  {
    uint64_t v8 = (swift::Demangle::__runtime::Node **)a2;
  }
  else
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1103;
      return this;
    }
    uint64_t v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (v11)
  {
    *(_OWORD *)a4 = v11;
    *(void *)(a4 + 16) = v12;
    return this;
  }
  unsigned int v9 = v14;
  if ((v13 & 0x80000000) == 0 && !v14)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v4;
    *(_DWORD *)(a4 + 16) = 1112;
    return this;
  }
  if (v13 == 1)
  {
    unsigned int v10 = "Rj";
LABEL_21:
    swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), v10, 2uLL, *(void **)(v5 + 12744));
    if (*((unsigned char *)v4 + 18) == 5) {
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
    }
    goto LABEL_24;
  }
  if (!v13)
  {
    unsigned int v10 = "Ri";
    goto LABEL_21;
  }
  if (v13 != -1)
  {
    unsigned int v10 = "RJ";
    goto LABEL_21;
  }
  swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), "RI", 2uLL, *(void **)(v5 + 12744));
  if (*((unsigned char *)v4 + 18) == 5) {
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
LABEL_24:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *anonymous namespace'::Remangler::mangleAnyConstructor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      uint64_t v10 = *(void *)a2;
      unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unsigned int v9 = 0;
  }
  if (v8 == 1)
  {
    long long v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v8 == 2)
  {
    long long v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "f", 1uLL, this[1593]);
    unsigned int v14 = *((_DWORD *)this + 3184);
    size_t v15 = *((unsigned int *)this + 3185);
    uint64_t v16 = this[1591];
    if (v14 < v15)
    {
LABEL_36:
      *((_DWORD *)this + 3184) = v14 + 1;
      v16[v14] = a3;
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 16) = 0;
      return result;
    }
    size_t v17 = this[1593];
    BOOL v18 = (char *)*((void *)v17 + 1);
    if (&v16[v15] == v18)
    {
      unint64_t v20 = (unint64_t)&v16[v15 + 1];
      unint64_t v19 = *((void *)v17 + 2);
      if (v20 <= v19)
      {
        *((void *)v17 + 1) = v20;
        LODWORD(v21) = 1;
LABEL_35:
        *((_DWORD *)this + 3185) = v15 + v21;
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v19 = *((void *)v17 + 2);
    }
    if ((2 * v15) <= 4) {
      uint64_t v21 = 4;
    }
    else {
      uint64_t v21 = (2 * v15);
    }
    size_t v22 = v21 + v15;
    if (!v18 || (unint64_t)&v18[v22] > v19)
    {
      unint64_t v23 = 2 * *((void *)v17 + 4);
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      *((void *)v17 + 4) = v23;
      unint64_t v24 = v23 + 8;
      uint64_t result = (uint64_t *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      unint64_t v25 = (char *)result + v24;
      uint64_t *result = *((void *)v17 + 3);
      BOOL v18 = (char *)(result + 1);
      *((void *)v17 + 2) = v25;
      *((void *)v17 + 3) = result;
    }
    *((void *)v17 + 1) = &v18[v22];
    if (v15) {
      uint64_t result = (uint64_t *)memcpy(v18, this[1591], v15);
    }
    this[1591] = v18;
    LODWORD(v15) = *((_DWORD *)this + 3185);
    uint64_t v16 = v18;
    unsigned int v14 = *((_DWORD *)this + 3184);
    goto LABEL_35;
  }
  if (v8 != 5)
  {
    long long v11 = 0;
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)a2;
LABEL_9:
  long long v11 = (swift::Demangle::__runtime::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
  if (v9 == v11) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v12 = a4 + 1;
  while (1)
  {
    if (*(_DWORD *)a5) {
      return result;
    }
    unsigned int v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
    if (v9 == v11) {
      goto LABEL_19;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleChildNodes@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      unsigned int v9 = *a2;
      int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_9:
      uint64_t v10 = (swift::Demangle::__runtime::Node **)((char *)v9 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    int v8 = 0;
  }
  switch(v7)
  {
    case 1:
      uint64_t v10 = a2 + 1;
      goto LABEL_15;
    case 2:
      uint64_t v10 = a2 + 2;
      goto LABEL_15;
    case 5:
      unsigned int v9 = *a2;
      goto LABEL_9;
  }
  uint64_t v10 = 0;
LABEL_15:
  while (v8 != v10)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    ++v8;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

{
  _anonymous_namespace_::Remangler *v5;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  swift::Demangle::__runtime::Node **v10;

  uint64_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      unsigned int v9 = *a2;
      int v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_9:
      uint64_t v10 = (swift::Demangle::__runtime::Node **)((char *)v9 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    int v8 = 0;
  }
  switch(v7)
  {
    case 1:
      uint64_t v10 = a2 + 1;
      goto LABEL_15;
    case 2:
      uint64_t v10 = a2 + 2;
      goto LABEL_15;
    case 5:
      unsigned int v9 = *a2;
      goto LABEL_9;
  }
  uint64_t v10 = 0;
LABEL_15:
  while (v8 != v10)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    ++v8;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

char **swift::Demangle::__runtime::RemanglerBuffer::operator<<(char **a1, char a2)
{
  unsigned int v4 = *((_DWORD *)a1 + 2);
  size_t v5 = *((unsigned int *)a1 + 3);
  int v6 = *a1;
  if (v4 >= v5)
  {
    int v7 = a1[2];
    int v8 = (char *)*((void *)v7 + 1);
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = *((void *)v7 + 2);
      if (v10 <= v9)
      {
        *((void *)v7 + 1) = v10;
        LODWORD(v11) = 1;
LABEL_20:
        *((_DWORD *)a1 + 3) = v5 + v11;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v9 = *((void *)v7 + 2);
    }
    if ((2 * v5) <= 4) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (char *)*((void *)v7 + 1);
    if (v13)
    {
      unint64_t v14 = 2 * *((void *)v7 + 4);
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      *((void *)v7 + 4) = v14;
      unint64_t v15 = v14 + 8;
      uint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      size_t v17 = (char *)v16 + v15;
      *uint64_t v16 = *((void *)v7 + 3);
      int v6 = (char *)(v16 + 1);
      *((void *)v7 + 2) = v17;
      *((void *)v7 + 3) = v16;
    }
    *((void *)v7 + 1) = &v6[v12];
    if (v5) {
      memcpy(v6, *a1, v5);
    }
    *a1 = v6;
    unsigned int v4 = *((_DWORD *)a1 + 2);
    LODWORD(v5) = *((_DWORD *)a1 + 3);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)a1 + 2) = v4 + 1;
  v6[v4] = a2;
  return a1;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleAnyProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = this;
  switch(*((_WORD *)a2 + 8))
  {
    case 0x1A:
      int v6 = a3 + 1;
    case 0x1B:
      int v7 = *((unsigned __int8 *)a2 + 18);
      if ((v7 - 1) < 2) {
        goto LABEL_9;
      }
      if (v7 == 5 && *((_DWORD *)a2 + 2))
      {
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
        int v8 = *(swift::Demangle::__runtime::Node **)a2;
      }
      else
      {
        int v8 = 0;
      }
      if (!*(_DWORD *)a4)
      {
        this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "HX", 2uLL, *((void **)v5 + 1593));
        goto LABEL_22;
      }
      return this;
    case 0x2F:
      int v9 = a3 + 1;
    case 0x30:
      int v10 = a3 + 1;
    case 0x31:
      int v11 = a3 + 1;
    default:
LABEL_22:
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
  }
}

unsigned int *anonymous namespace'::Remangler::mangleListSeparator(unsigned int *this, BOOL *a2)
{
  if (*a2)
  {
    uint64_t v3 = this;
    unsigned int v4 = this[3184];
    size_t v5 = this[3185];
    int v6 = (unsigned char *)*((void *)this + 1591);
    if (v4 < v5)
    {
LABEL_21:
      v3[3184] = v4 + 1;
      v6[v4] = 95;
      *a2 = 0;
      return this;
    }
    int v7 = (void *)*((void *)this + 1593);
    int v8 = (unsigned char *)v7[1];
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_20:
        v3[3185] = v5 + v11;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v9 = v7[2];
    }
    if ((2 * v5) <= 4) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (unsigned char *)v7[1];
    if (v13)
    {
      unint64_t v14 = 2 * v7[4];
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      v7[4] = v14;
      unint64_t v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      uint64_t v16 = (char *)this + v15;
      *(void *)this = v7[3];
      int v6 = this + 2;
      v7[2] = v16;
      void v7[3] = this;
    }
    v7[1] = &v6[v12];
    if (v5) {
      this = (unsigned int *)memcpy(v6, *((const void **)v3 + 1591), v5);
    }
    *((void *)v3 + 1591) = v6;
    LODWORD(v5) = v3[3185];
    unsigned int v4 = v3[3184];
    goto LABEL_20;
  }
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleEndOfList(unsigned int *this, int a2)
{
  if (a2)
  {
    uint64_t v2 = this;
    unsigned int v3 = this[3184];
    size_t v4 = this[3185];
    size_t v5 = (unsigned char *)*((void *)this + 1591);
    if (v3 < v4)
    {
LABEL_21:
      v2[3184] = v3 + 1;
      v5[v3] = 121;
      return this;
    }
    int v6 = (void *)*((void *)this + 1593);
    int v7 = (unsigned char *)v6[1];
    if (&v5[v4] == v7)
    {
      unint64_t v9 = (unint64_t)&v5[v4 + 1];
      unint64_t v8 = v6[2];
      if (v9 <= v8)
      {
        v6[1] = v9;
        LODWORD(v10) = 1;
LABEL_20:
        v2[3185] = v4 + v10;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v8 = v6[2];
    }
    if ((2 * v4) <= 4) {
      uint64_t v10 = 4;
    }
    else {
      uint64_t v10 = (2 * v4);
    }
    size_t v11 = v10 + v4;
    if (v7) {
      BOOL v12 = (unint64_t)&v7[v10 + v4] > v8;
    }
    else {
      BOOL v12 = 1;
    }
    size_t v5 = (unsigned char *)v6[1];
    if (v12)
    {
      unint64_t v13 = 2 * v6[4];
      if (v13 <= v11 + 1) {
        unint64_t v13 = v11 + 1;
      }
      v6[4] = v13;
      unint64_t v14 = v13 + 8;
      this = (unsigned int *)malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
      unint64_t v15 = (char *)this + v14;
      *(void *)this = v6[3];
      size_t v5 = this + 2;
      v6[2] = v15;
      void v6[3] = this;
    }
    v6[1] = &v5[v11];
    if (v4) {
      this = (unsigned int *)memcpy(v5, *((const void **)v2 + 1591), v4);
    }
    *((void *)v2 + 1591) = v5;
    LODWORD(v4) = v2[3185];
    unsigned int v3 = v2[3184];
    goto LABEL_20;
  }
  return this;
}

uint64_t anonymous namespace'::Remangler::trySubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::SubstitutionEntry *a3, int a4)
{
    return 1;
  swift::Demangle::__runtime::RemanglerBase::entryForNode((uint64_t *)&__s2, this, a2, a4);
  *(_OWORD *)a3 = __s2;
  *((unsigned char *)a3 + 16) = v36;
  unsigned int Substitution = swift::Demangle::__runtime::RemanglerBase::findSubstitution(this, (swift::Demangle::__runtime::Node **)a3);
  if ((Substitution & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v9 = Substitution - 26;
  if (Substitution >= 0x1A)
  {
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    BOOL v12 = (char *)*((void *)this + 1591);
    if (v10 < v11)
    {
LABEL_25:
      *((_DWORD *)this + 3184) = v10 + 1;
      v12[v10] = 65;
      return 1;
    }
    unint64_t v13 = (void *)*((void *)this + 1593);
    unint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v23 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v23 <= v15)
      {
        v13[1] = v23;
        LODWORD(v24) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v11 + v24;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v24 = 4;
    }
    else {
      uint64_t v24 = (2 * v11);
    }
    size_t v25 = v24 + v11;
    if (!v14 || (unint64_t)&v14[v25] > v15)
    {
      unint64_t v26 = 2 * v13[4];
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      v13[4] = v26;
      unint64_t v27 = v26 + 8;
      unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      void *v28 = v13[3];
      unint64_t v14 = (char *)(v28 + 1);
      void v13[2] = (char *)v28 + v27;
      _OWORD v13[3] = v28;
    }
    v13[1] = &v14[v25];
    if (v11) {
      memcpy(v14, *((const void **)this + 1591), v11);
    }
    *((void *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    BOOL v12 = v14;
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_24;
  }
  LOBYTE(__s2) = Substitution + 65;
  {
    unsigned int v17 = *((_DWORD *)this + 3184);
    size_t v18 = *((unsigned int *)this + 3185);
    unint64_t v19 = (char *)*((void *)this + 1591);
    if (v17 < v18)
    {
LABEL_41:
      *((_DWORD *)this + 3184) = v17 + 1;
      v19[v17] = 65;
      swift::Demangle::__runtime::CharVector::append((char **)this + 1591, &__s2, 1uLL, *((void **)this + 1593));
      return 1;
    }
    unint64_t v20 = (void *)*((void *)this + 1593);
    uint64_t v21 = (char *)v20[1];
    if (&v19[v18] == v21)
    {
      unint64_t v29 = (unint64_t)&v19[v18 + 1];
      unint64_t v22 = v20[2];
      if (v29 <= v22)
      {
        v20[1] = v29;
        LODWORD(v30) = 1;
LABEL_40:
        *((_DWORD *)this + 3185) = v18 + v30;
        goto LABEL_41;
      }
    }
    else
    {
      unint64_t v22 = v20[2];
    }
    if ((2 * v18) <= 4) {
      uint64_t v30 = 4;
    }
    else {
      uint64_t v30 = (2 * v18);
    }
    size_t v31 = v30 + v18;
    if (!v21 || (unint64_t)&v21[v31] > v22)
    {
      unint64_t v32 = 2 * v20[4];
      if (v32 <= v31 + 1) {
        unint64_t v32 = v31 + 1;
      }
      v20[4] = v32;
      unint64_t v33 = v32 + 8;
      unint64_t v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
      *unint64_t v34 = v20[3];
      uint64_t v21 = (char *)(v34 + 1);
      void v20[2] = (char *)v34 + v33;
      void v20[3] = v34;
    }
    v20[1] = &v21[v31];
    if (v18) {
      memcpy(v21, *((const void **)this + 1591), v18);
    }
    *((void *)this + 1591) = v21;
    LODWORD(v18) = *((_DWORD *)this + 3185);
    unint64_t v19 = v21;
    unsigned int v17 = *((_DWORD *)this + 3184);
    goto LABEL_40;
  }
  return 1;
}

BOOL anonymous namespace'::Remangler::mangleStandardSubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2)
{
  BOOL v3 = 0;
  unsigned int v4 = *((unsigned __int16 *)a2 + 8);
  if (v4 <= 0xB3)
  {
    if (v4 != 24 && v4 != 61) {
      return v3;
    }
LABEL_7:
    int v5 = *((unsigned __int8 *)a2 + 18);
    int v6 = a2;
    if ((v5 - 1) >= 2)
    {
      if (v5 != 5 || !*((_DWORD *)a2 + 2))
      {
        int v7 = 0;
LABEL_13:
        if (*((_WORD *)v7 + 8) != 153 || v7[1] != 5) {
          return 0;
        }
        unint64_t v8 = (int *)*v7;
        int v9 = *v8;
        int v10 = *((unsigned __int8 *)v8 + 4);
        if (v9 != 1718187859 || v10 != 116) {
          return 0;
        }
        if (v5 == 5)
        {
          if (*(_WORD *)(*(void *)(*(void *)a2 + 8) + 16) == 101)
          {
            a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_25:
            swift::Mangle::__runtime::getStandardTypeSubst(**((void ***)a2 + 1), *(void *)(*((void *)a2 + 1) + 8), 1, (uint64_t)&v25);
            BOOL v3 = v27 != 0;
            if (!v27
            {
              return v3;
            }
            unsigned int v13 = *((_DWORD *)this + 3184);
            size_t v14 = *((unsigned int *)this + 3185);
            unint64_t v15 = (char *)*((void *)this + 1591);
            if (v13 < v14)
            {
LABEL_44:
              *((_DWORD *)this + 3184) = v13 + 1;
              v15[v13] = 83;
              swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v25, v26, *((void **)this + 1593));
              return v3;
            }
            uint64_t v16 = (void *)*((void *)this + 1593);
            unsigned int v17 = (char *)v16[1];
            if (&v15[v14] == v17)
            {
              unint64_t v19 = (unint64_t)&v15[v14 + 1];
              unint64_t v18 = v16[2];
              if (v19 <= v18)
              {
                v16[1] = v19;
                LODWORD(v20) = 1;
LABEL_43:
                *((_DWORD *)this + 3185) = v14 + v20;
                goto LABEL_44;
              }
            }
            else
            {
              unint64_t v18 = v16[2];
            }
            if ((2 * v14) <= 4) {
              uint64_t v20 = 4;
            }
            else {
              uint64_t v20 = (2 * v14);
            }
            size_t v21 = v20 + v14;
            if (!v17 || (unint64_t)&v17[v21] > v18)
            {
              unint64_t v22 = 2 * v16[4];
              if (v22 <= v21 + 1) {
                unint64_t v22 = v21 + 1;
              }
              v16[4] = v22;
              unint64_t v23 = v22 + 8;
              uint64_t v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
              *uint64_t v24 = v16[3];
              unsigned int v17 = (char *)(v24 + 1);
              v16[2] = (char *)v24 + v23;
              void v16[3] = v24;
            }
            v16[1] = &v17[v21];
            if (v14) {
              memcpy(v17, *((const void **)this + 1591), v14);
            }
            *((void *)this + 1591) = v17;
            LODWORD(v14) = *((_DWORD *)this + 3185);
            unint64_t v15 = v17;
            unsigned int v13 = *((_DWORD *)this + 3184);
            goto LABEL_43;
          }
        }
        else if (*(_WORD *)(*((void *)a2 + 1) + 16) == 101)
        {
          goto LABEL_25;
        }
        return 0;
      }
      int v6 = *(swift::Demangle::__runtime::Node **)a2;
    }
    int v7 = *(uint64_t **)v6;
    goto LABEL_13;
  }
  if (v4 == 219 || v4 == 180) {
    goto LABEL_7;
  }
  return v3;
}

char *anonymous namespace'::Remangler::mangleIndex(char *this, uint64_t a2)
{
  uint64_t v2 = (unsigned int *)this;
  BOOL v3 = (const void **)(this + 12728);
  if (a2) {
    this = (char *)swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, a2 - 1, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  }
  unsigned int v4 = v2[3184];
  size_t v5 = v2[3185];
  int v6 = (char *)*((void *)v2 + 1591);
  if (v4 >= v5)
  {
    int v7 = (void *)*((void *)v2 + 1593);
    unint64_t v8 = (char *)v7[1];
    if (&v6[v5] == v8)
    {
      unint64_t v10 = (unint64_t)&v6[v5 + 1];
      unint64_t v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_21:
        v2[3185] = v5 + v11;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v9 = v7[2];
    }
    if ((2 * v5) <= 4) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = (2 * v5);
    }
    size_t v12 = v11 + v5;
    if (v8) {
      BOOL v13 = (unint64_t)&v8[v11 + v5] > v9;
    }
    else {
      BOOL v13 = 1;
    }
    int v6 = (char *)v7[1];
    if (v13)
    {
      unint64_t v14 = 2 * v7[4];
      if (v14 <= v12 + 1) {
        unint64_t v14 = v12 + 1;
      }
      v7[4] = v14;
      unint64_t v15 = v14 + 8;
      this = (char *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      uint64_t v16 = &this[v15];
      *(void *)this = v7[3];
      int v6 = this + 8;
      v7[2] = v16;
      void v7[3] = this;
    }
    v7[1] = &v6[v12];
    if (v5) {
      this = (char *)memcpy(v6, *v3, v5);
    }
    *((void *)v2 + 1591) = v6;
    LODWORD(v5) = v2[3185];
    unsigned int v4 = v2[3184];
    goto LABEL_21;
  }
LABEL_22:
  v2[3184] = v4 + 1;
  v6[v4] = 95;
  return this;
}

uint64_t swift::Mangle::__runtime::SubstitutionMerging::tryMergeSubst<anonymous namespace'::Remangler>(unint64_t *a1, uint64_t a2, void *__s2, size_t __n, int a5)
{
  char v5 = a5;
  unint64_t v8 = *(unsigned int *)(a2 + 12736);
  unint64_t v9 = a1[2];
  if (v9 - 1 > 0x7FE) {
    goto LABEL_24;
  }
  unint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  if (v10 + *a1 != v8 || *((unsigned __int8 *)a1 + 24) != a5) {
    goto LABEL_24;
  }
  unint64_t v14 = (unsigned int *)(a2 + 12728);
  unint64_t v15 = *(char **)(a2 + 12728);
  unint64_t v16 = v8 - v10;
  if (v8 < v8 - v10) {
    unint64_t v16 = *(unsigned int *)(a2 + 12736);
  }
  if (v8 <= v10) {
    unint64_t v16 = 0;
  }
  unint64_t v17 = v8 - v16;
  if (v8 == v16)
  {
    if (!__n) {
      goto LABEL_29;
    }
    size_t v22 = 0;
    size_t v21 = &v15[v8];
  }
  else
  {
    unint64_t v18 = 0;
    unint64_t v19 = &v15[v16];
    while (v19[v18] - 48 <= 9)
    {
      if (v17 == ++v18)
      {
        unint64_t v18 = -1;
        break;
      }
    }
    if (v17 >= v18) {
      unint64_t v20 = v18;
    }
    else {
      unint64_t v20 = v17;
    }
    size_t v21 = &v19[v20];
    size_t v22 = v17 - v20;
    if (v17 - v20 == __n)
    {
      if (v17 <= v18) {
        goto LABEL_29;
      }
      size_t v43 = (unsigned int *)(a2 + 12728);
      int v23 = memcmp(v21, __s2, __n);
      if (v23 && (v5 & 1) == 0)
      {
        size_t v22 = __n;
        unint64_t v14 = v43;
        goto LABEL_25;
      }
      unint64_t v14 = v43;
      if (!v23)
      {
LABEL_29:
        a1[2] = v9 + 1;
        *(_DWORD *)(a2 + 12736) = v11;
        size_t v31 = (char **)v14;
        swift::Demangle::__runtime::CharVector::append(v14, v9 + 1, *(swift::Demangle::__runtime::NodeFactory **)(a2 + 12744));
        swift::Demangle::__runtime::CharVector::append(v31, __s2, __n, *(void **)(a2 + 12744));
        a1[1] = *(unsigned int *)(a2 + 12736) - *a1;
        return 1;
      }
LABEL_24:
      uint64_t result = 0;
      *a1 = v8 + 1;
      a1[1] = __n;
      a1[2] = 1;
      *((unsigned char *)a1 + 24) = v5;
      return result;
    }
  }
  if (a5) {
    goto LABEL_24;
  }
LABEL_25:
  *a1 = v8;
  a1[2] = 1;
  unsigned int v25 = v8 - 1;
  *(_DWORD *)(a2 + 12736) = v8 - 1;
  char v26 = v21[v22 - 1] + 32;
  size_t v27 = *(unsigned int *)(a2 + 12740);
  if (v25 >= v27)
  {
    unint64_t v28 = *(void **)(a2 + 12744);
    unint64_t v29 = (char *)v28[1];
    if (&v15[v27] == v29)
    {
      unint64_t v32 = (unint64_t)&v15[v27 + 1];
      unint64_t v30 = v28[2];
      if (v32 <= v30)
      {
        v28[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *(_DWORD *)(a2 + 12740) = v27 + v33;
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v30 = v28[2];
    }
    if ((2 * v27) <= 4) {
      uint64_t v33 = 4;
    }
    else {
      uint64_t v33 = (2 * v27);
    }
    size_t v34 = v33 + v27;
    if (!v29 || (unint64_t)&v29[v34] > v30)
    {
      unint64_t v35 = 2 * v28[4];
      if (v35 <= v34 + 1) {
        unint64_t v35 = v34 + 1;
      }
      void v28[4] = v35;
      unint64_t v36 = v35 + 8;
      int v44 = v33;
      char v37 = v26;
      unint64_t v38 = v14;
      unint64_t v39 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      unint64_t v14 = v38;
      char v26 = v37;
      LODWORD(v33) = v44;
      unint64_t v40 = (char *)v39 + v36;
      *unint64_t v39 = v28[3];
      unint64_t v29 = (char *)(v39 + 1);
      void v28[2] = v40;
      void v28[3] = v39;
    }
    v28[1] = &v29[v34];
    if (v27)
    {
      size_t v41 = v27;
      uint64_t v42 = v14;
      memcpy(v29, *(const void **)v14, v41);
      unint64_t v14 = v42;
    }
    *(void *)(a2 + 12728) = v29;
    LODWORD(v27) = *(_DWORD *)(a2 + 12740);
    unint64_t v15 = v29;
    unsigned int v25 = *(_DWORD *)(a2 + 12736);
    goto LABEL_43;
  }
LABEL_44:
  *(_DWORD *)(a2 + 12736) = v25 + 1;
  v15[v25] = v26;
  swift::Demangle::__runtime::CharVector::append((char **)v14, __s2, __n, *(void **)(a2 + 12744));
  uint64_t result = 1;
  a1[1] = 1;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleChildNodesReversed@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = (_anonymous_namespace_::Remangler *)this;
  uint64_t v8 = *((unsigned __int8 *)a2 + 18);
  switch(v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      uint64_t v8 = *((unsigned int *)a2 + 2);
      if (v8) {
        goto LABEL_6;
      }
      break;
    case 2:
      uint64_t v8 = 2;
LABEL_6:
      for (uint64_t i = v8 - 1; i != -1; --i)
      {
        unint64_t v10 = *((unsigned __int8 *)a2 + 18);
        unsigned int v11 = v10 - 1;
        if (v10 != 1)
        {
          if (v10 == 5)
          {
            unint64_t v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if (v10 != 2) {
              goto LABEL_7;
            }
            unint64_t v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        size_t v12 = a2;
        if (v11 >= 2) {
          size_t v12 = *(swift::Demangle::__runtime::Node **)a2;
        }
        if (*(_DWORD *)a4) {
          return this;
        }
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t anonymous namespace'::Remangler::mangleAnyNominalType@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 >= 0x401)
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = a2;
    int v6 = 542;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v6;
    return this;
  }
  uint64_t v8 = this;
  this = swift::Demangle::__runtime::isSpecialized(a2, a2);
  if (!this)
  {
    unsigned int v9 = *((unsigned __int16 *)a2 + 8);
    if (v9 > 0xDA)
    {
      switch(v9)
      {
        case 0xEAu:
          unint64_t v10 = "a";
          break;
        case 0xE9u:
          unint64_t v19 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(void, void, void))(v8 + 12824))(*(void *)(v8 + 12832), 0, *(void *)a2);
        case 0xDBu:
          unint64_t v10 = "V";
          break;
        default:
          goto LABEL_37;
      }
    }
    else
    {
      switch(v9)
      {
        case 0x18u:
          unint64_t v10 = "C";
          break;
        case 0x3Du:
          unint64_t v10 = "O";
          break;
        case 0xA7u:
          unint64_t v10 = "XY";
          uint64_t v11 = a4;
          uint64_t v12 = v8;
          BOOL v13 = (swift::Demangle::__runtime::Node **)a2;
          size_t v14 = 2;
LABEL_31:
        default:
LABEL_37:
          *(_DWORD *)a4 = 5;
          *(void *)(a4 + 8) = a2;
          int v6 = 584;
          goto LABEL_3;
      }
    }
    uint64_t v11 = a4;
    uint64_t v12 = v8;
    BOOL v13 = (swift::Demangle::__runtime::Node **)a2;
    size_t v14 = 1;
    goto LABEL_31;
  }
  v28[0] = 0;
  v28[1] = 0;
  char v29 = 0;
  if (this)
  {
LABEL_7:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  this = swift::Demangle::__runtime::getUnspecialized((unint64_t)a2, *(swift::Demangle::__runtime::Node **)v8, (uint64_t)&v25);
  if (v25)
  {
    *(_OWORD *)a4 = v25;
    *(void *)(a4 + 16) = v26;
    return this;
  }
  unsigned int v15 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    char v24 = 121;
    if (!*(_DWORD *)a4)
    {
      if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) != 3) {
        goto LABEL_52;
      }
      unint64_t v16 = *(uint64_t **)(*(void *)a2 + 16);
      uint64_t v17 = *((unsigned __int8 *)v16 + 18);
      if (v17 != 1)
      {
        if (v17 != 5)
        {
          if (v17 == 2)
          {
            uint64_t v17 = 2;
            unint64_t v18 = 0;
            goto LABEL_40;
          }
          goto LABEL_52;
        }
        uint64_t v17 = *((unsigned int *)v16 + 2);
        if (!v17)
        {
LABEL_52:
          swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v8 + 12728), 71);
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)v8, (const swift::Demangle::__runtime::SubstitutionEntry *)v28);
          goto LABEL_7;
        }
      }
      unint64_t v18 = 0;
      while (1)
      {
LABEL_40:
        unint64_t v20 = *((unsigned __int8 *)v16 + 18);
        unsigned int v21 = v20 - 1;
        if (v20 != 1)
        {
          if (v20 == 5)
          {
            unint64_t v20 = *((unsigned int *)v16 + 2);
          }
          else
          {
            if (v20 != 2) {
              goto LABEL_49;
            }
            unint64_t v20 = 2;
          }
        }
        if (v20 > v18)
        {
          size_t v22 = v16;
          if (v21 >= 2) {
            size_t v22 = (uint64_t *)*v16;
          }
          int v23 = (swift::Demangle::__runtime::Node *)v22[v18];
          goto LABEL_50;
        }
LABEL_49:
        int v23 = 0;
LABEL_50:
        if (*(_DWORD *)a4) {
          return this;
        }
        if (v17 == ++v18) {
          goto LABEL_52;
        }
      }
    }
  }
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleGenericArgs@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, char *a3@<X2>, int a4@<W3>, BOOL a5@<W4>, uint64_t a6@<X8>)
{
  int v7 = 0;
  int v8 = 0;
  int v9 = *((unsigned __int16 *)a2 + 8);
  uint64_t v12 = a2;
  uint64_t v13 = (uint64_t)this;
  int v14 = 0;
  switch(*((_WORD *)a2 + 8))
  {
    case 0:
    case 0x1D:
    case 0x21:
    case 0x32:
    case 0x33:
    case 0x46:
    case 0x4C:
    case 0x62:
    case 0x75:
    case 0x7D:
    case 0x98:
    case 0xB2:
    case 0xB3:
    case 0xCC:
    case 0xD7:
    case 0xDA:
    case 0xDC:
    case 0xFA:
    case 0xFB:
    case 0xFE:
    case 0x101:
      if (!a5) {
        goto LABEL_26;
      }
      int v15 = *((unsigned __int8 *)a2 + 18);
      unint64_t v16 = (swift::Demangle::__runtime::Node **)a2;
      if ((v15 - 1) < 2) {
        goto LABEL_7;
      }
      if (v15 == 5 && *((_DWORD *)a2 + 2))
      {
        unint64_t v16 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_7:
        uint64_t v17 = *v16;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if (!*(_DWORD *)a6)
      {
        this = (unsigned int *)swift::Demangle::__runtime::nodeConsumesGenericArgs(v12, v24);
        if (this) {
          goto LABEL_38;
        }
        goto LABEL_26;
      }
      return this;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD8:
    case 0xD9:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEB:
    case 0xEC:
    case 0xED:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFC:
    case 0xFD:
    case 0xFF:
    case 0x100:
      goto LABEL_75;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      BOOL v18 = v9 == 18 || a5;
      int v19 = *((unsigned __int8 *)a2 + 18);
      unint64_t v20 = a2;
      if ((v19 - 1) < 2) {
        goto LABEL_15;
      }
      if (v19 == 5 && *((_DWORD *)a2 + 2))
      {
        unint64_t v20 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_15:
        uint64_t v21 = *(void *)v20;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if (*(_WORD *)(v21 + 16) != 232)
      {
        int v14 = 653;
        goto LABEL_35;
      }
      int v25 = *(unsigned __int8 *)(v21 + 18);
      if ((v25 - 1) < 2) {
        goto LABEL_33;
      }
      if (v25 == 5 && *(_DWORD *)(v21 + 8))
      {
        uint64_t v21 = *(void *)v21;
LABEL_33:
        uint64_t v26 = *(void *)v21;
      }
      else
      {
        uint64_t v26 = 0;
      }
      if (*(_WORD *)(v26 + 16) != 233) {
        goto LABEL_78;
      }
      uint64_t v34 = (*((uint64_t (**)(void, void, void))this + 1603))(*((void *)this + 1604), 0, *(void *)v26);
      int v35 = *(unsigned __int8 *)(v34 + 18);
      if ((v35 - 1) < 2) {
        goto LABEL_47;
      }
      if (v35 == 5 && *(_DWORD *)(v34 + 8))
      {
        uint64_t v34 = *(void *)v34;
LABEL_47:
        uint64_t v26 = *(void *)v34;
      }
      else
      {
        uint64_t v26 = 0;
      }
LABEL_78:
      int v54 = *(unsigned __int8 *)(v26 + 18);
      if ((v54 - 1) < 2) {
        goto LABEL_82;
      }
      if (v54 == 5 && *(_DWORD *)(v26 + 8))
      {
        uint64_t v26 = *(void *)v26;
LABEL_82:
        uint64_t v55 = *(swift::Demangle::__runtime::Node **)v26;
      }
      else
      {
        uint64_t v55 = 0;
      }
      unsigned int v56 = a4 + 1;
      if (*(_DWORD *)a6) {
        return this;
      }
      char v57 = *a3;
      unsigned int v58 = *(_DWORD *)(v13 + 12736);
      size_t v59 = *(unsigned int *)(v13 + 12740);
      unsigned int v60 = *(char **)(v13 + 12728);
      if (v58 < v59) {
        goto LABEL_125;
      }
      size_t v61 = *(void **)(v13 + 12744);
      uint64_t v62 = (char *)v61[1];
      if (&v60[v59] == v62)
      {
        unint64_t v71 = (unint64_t)&v60[v59 + 1];
        unint64_t v63 = v61[2];
        if (v71 <= v63)
        {
          v61[1] = v71;
          LODWORD(v72) = 1;
          goto LABEL_124;
        }
      }
      else
      {
        unint64_t v63 = v61[2];
      }
      char v96 = *a3;
      if ((2 * v59) <= 4) {
        uint64_t v72 = 4;
      }
      else {
        uint64_t v72 = (2 * v59);
      }
      size_t v73 = v72 + v59;
      if (!v62 || (unint64_t)&v62[v73] > v63)
      {
        unint64_t v74 = 2 * v61[4];
        if (v74 <= v73 + 1) {
          unint64_t v74 = v73 + 1;
        }
        v61[4] = v74;
        unint64_t v75 = v74 + 8;
        this = (unsigned int *)malloc_type_malloc(v74 + 8, 0xD0263BC5uLL);
        int v76 = (char *)this + v75;
        *(void *)this = v61[3];
        uint64_t v62 = (char *)(this + 2);
        v61[2] = v76;
        v61[3] = this;
      }
      v61[1] = &v62[v73];
      if (v59) {
        this = (unsigned int *)memcpy(v62, *(const void **)(v13 + 12728), v59);
      }
      *(void *)(v13 + 12728) = v62;
      LODWORD(v59) = *(_DWORD *)(v13 + 12740);
      unsigned int v60 = v62;
      unsigned int v58 = *(_DWORD *)(v13 + 12736);
      char v57 = v96;
LABEL_124:
      *(_DWORD *)(v13 + 12740) = v59 + v72;
LABEL_125:
      *(_DWORD *)(v13 + 12736) = v58 + 1;
      v60[v58] = v57;
      *a3 = 95;
      int v77 = *((unsigned __int8 *)v12 + 18);
      if (v77 == 2) {
        goto LABEL_129;
      }
      if (v77 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_129:
        uint64_t v78 = *((void *)v12 + 1);
      }
      else
      {
        uint64_t v78 = 0;
      }
      int v79 = *(unsigned __int8 *)(v78 + 18);
      int v80 = (swift::Demangle::__runtime::Node **)v78;
      if ((v79 - 1) < 2) {
        goto LABEL_135;
      }
      if (v79 == 5)
      {
        size_t v81 = *(swift::Demangle::__runtime::Node **)v78;
        int v80 = *(swift::Demangle::__runtime::Node ***)v78;
LABEL_139:
        char v82 = (swift::Demangle::__runtime::Node **)((char *)v81 + 8 * *(unsigned int *)(v78 + 8));
        goto LABEL_143;
      }
      int v80 = 0;
LABEL_135:
      switch(v79)
      {
        case 1:
          char v82 = (swift::Demangle::__runtime::Node **)(v78 + 8);
          break;
        case 2:
          char v82 = (swift::Demangle::__runtime::Node **)(v78 + 16);
          break;
        case 5:
          size_t v81 = *(swift::Demangle::__runtime::Node **)v78;
          goto LABEL_139;
        default:
          char v82 = 0;
          break;
      }
LABEL_143:
      if (v80 == v82) {
        goto LABEL_26;
      }
      while (1)
      {
        if (*(_DWORD *)a6) {
          return this;
        }
        int v8 = 0;
        int v7 = 0;
        int v14 = 0;
        if (++v80 == v82) {
          goto LABEL_75;
        }
      }
    case 0x13:
      int v36 = *((unsigned __int8 *)a2 + 18);
      char v37 = a2;
      if ((v36 - 1) < 2) {
        goto LABEL_52;
      }
      if (v36 == 5 && *((_DWORD *)a2 + 2))
      {
        char v37 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_52:
        unint64_t v38 = *(swift::Demangle::__runtime::Node **)v37;
      }
      else
      {
        unint64_t v38 = 0;
      }
      int v64 = *((unsigned __int16 *)v38 + 8);
      if (v64 != 76 && v64 != 29)
      {
        int v14 = 682;
LABEL_35:
        int v8 = 1;
        int v7 = a2;
        goto LABEL_75;
      }
      int v66 = *((unsigned __int8 *)v38 + 18);
      if ((v66 - 1) < 2) {
        goto LABEL_104;
      }
      if (v66 == 5 && *((_DWORD *)v38 + 2))
      {
        unint64_t v38 = *(swift::Demangle::__runtime::Node **)v38;
LABEL_104:
        uint64_t v67 = *(swift::Demangle::__runtime::Node **)v38;
      }
      else
      {
        uint64_t v67 = 0;
      }
      unsigned int v68 = a4 + 1;
      if (*(_DWORD *)a6) {
        return this;
      }
      swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v13 + 12728), *a3);
      *a3 = 95;
      int v69 = *((unsigned __int8 *)v12 + 18);
      if (v69 == 2) {
        goto LABEL_111;
      }
      if (v69 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_111:
        unint64_t v70 = (swift::Demangle::__runtime::Node **)*((void *)v12 + 1);
      }
      else
      {
        unint64_t v70 = 0;
      }
LABEL_91:
      if (*(_DWORD *)a6) {
        return this;
      }
      goto LABEL_26;
    case 0x18:
    case 0x3D:
    case 0xB4:
    case 0xDB:
    case 0xEA:
      if (v9 == 234) {
        LOBYTE(a5) = 1;
      }
      int v22 = *((unsigned __int8 *)a2 + 18);
      if ((v22 - 1) < 2) {
        goto LABEL_22;
      }
      if (v22 == 5 && *((_DWORD *)a2 + 2))
      {
        uint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_22:
        int v23 = *(swift::Demangle::__runtime::Node **)v12;
      }
      else
      {
        int v23 = 0;
      }
      if (*(_DWORD *)a6) {
        return this;
      }
LABEL_38:
      char v27 = *a3;
      unsigned int v28 = *(_DWORD *)(v13 + 12736);
      size_t v29 = *(unsigned int *)(v13 + 12740);
      unint64_t v30 = *(char **)(v13 + 12728);
      if (v28 < v29) {
        goto LABEL_74;
      }
      size_t v31 = *(void **)(v13 + 12744);
      unint64_t v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        unint64_t v48 = (unint64_t)&v30[v29 + 1];
        unint64_t v33 = v31[2];
        if (v48 <= v33)
        {
          v31[1] = v48;
          LODWORD(v49) = 1;
          goto LABEL_73;
        }
      }
      else
      {
        unint64_t v33 = v31[2];
      }
      if ((2 * v29) <= 4) {
        uint64_t v49 = 4;
      }
      else {
        uint64_t v49 = (2 * v29);
      }
      size_t v50 = v49 + v29;
      if (!v32 || (unint64_t)&v32[v50] > v33)
      {
        unint64_t v51 = 2 * v31[4];
        if (v51 <= v50 + 1) {
          unint64_t v51 = v50 + 1;
        }
        v31[4] = v51;
        unint64_t v52 = v51 + 8;
        this = (unsigned int *)malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        unint64_t v53 = (char *)this + v52;
        *(void *)this = v31[3];
        unint64_t v32 = (char *)(this + 2);
        v31[2] = v53;
        void v31[3] = this;
      }
      v31[1] = &v32[v50];
      if (v29) {
        this = (unsigned int *)memcpy(v32, *(const void **)(v13 + 12728), v29);
      }
      *(void *)(v13 + 12728) = v32;
      LODWORD(v29) = *(_DWORD *)(v13 + 12740);
      unint64_t v30 = v32;
      unsigned int v28 = *(_DWORD *)(v13 + 12736);
LABEL_73:
      *(_DWORD *)(v13 + 12740) = v29 + v49;
LABEL_74:
      int v8 = 0;
      int v7 = 0;
      int v14 = 0;
      *(_DWORD *)(v13 + 12736) = v28 + 1;
      v30[v28] = v27;
      *a3 = 95;
      goto LABEL_75;
    case 0x47:
      int v39 = *((unsigned __int8 *)a2 + 18);
      if (v39 == 2) {
        goto LABEL_57;
      }
      if (v39 == 5 && *((_DWORD *)a2 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_57:
        unint64_t v40 = (swift::Demangle::__runtime::Node *)*((void *)v12 + 1);
      }
      else
      {
        unint64_t v40 = 0;
      }
      goto LABEL_91;
    case 0x53:
      char v41 = *a3;
      unsigned int v42 = this[3184];
      size_t v43 = this[3185];
      int v44 = (char *)*((void *)this + 1591);
      if (v42 < v43) {
        goto LABEL_163;
      }
      unint64_t v45 = (void *)*((void *)this + 1593);
      unsigned int v46 = (char *)v45[1];
      if (&v44[v43] == v46)
      {
        unint64_t v83 = (unint64_t)&v44[v43 + 1];
        unint64_t v47 = v45[2];
        if (v83 <= v47)
        {
          v45[1] = v83;
          LODWORD(v84) = 1;
          goto LABEL_162;
        }
      }
      else
      {
        unint64_t v47 = v45[2];
      }
      char v97 = *a3;
      if ((2 * v43) <= 4) {
        uint64_t v84 = 4;
      }
      else {
        uint64_t v84 = (2 * v43);
      }
      size_t v85 = v84 + v43;
      if (v46) {
        BOOL v86 = (unint64_t)&v46[v84 + v43] > v47;
      }
      else {
        BOOL v86 = 1;
      }
      int v44 = (char *)v45[1];
      if (v86)
      {
        unint64_t v87 = 2 * v45[4];
        if (v87 <= v85 + 1) {
          unint64_t v87 = v85 + 1;
        }
        v45[4] = v87;
        unint64_t v88 = v87 + 8;
        this = (unsigned int *)malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
        size_t v89 = (char *)this + v88;
        *(void *)this = v45[3];
        int v44 = (char *)(this + 2);
        v45[2] = v89;
        void v45[3] = this;
      }
      v45[1] = &v44[v85];
      if (v43) {
        this = (unsigned int *)memcpy(v44, *(const void **)(v13 + 12728), v43);
      }
      *(void *)(v13 + 12728) = v44;
      LODWORD(v43) = *(_DWORD *)(v13 + 12740);
      unsigned int v42 = *(_DWORD *)(v13 + 12736);
      char v41 = v97;
LABEL_162:
      *(_DWORD *)(v13 + 12740) = v43 + v84;
LABEL_163:
      *(_DWORD *)(v13 + 12736) = v42 + 1;
      v44[v42] = v41;
      *a3 = 95;
      int v90 = *((unsigned __int8 *)v12 + 18);
      if (v90 == 2) {
        goto LABEL_167;
      }
      if (v90 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        uint64_t v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_167:
        uint64_t v91 = *((void *)v12 + 1);
      }
      else
      {
        uint64_t v91 = 0;
      }
      int v92 = *(unsigned __int8 *)(v91 + 18);
      unint64_t v93 = (swift::Demangle::__runtime::Node **)v91;
      if ((v92 - 1) < 2) {
        goto LABEL_173;
      }
      if (v92 == 5)
      {
        uint64_t v94 = *(swift::Demangle::__runtime::Node **)v91;
        unint64_t v93 = *(swift::Demangle::__runtime::Node ***)v91;
LABEL_177:
        size_t v95 = (swift::Demangle::__runtime::Node **)((char *)v94 + 8 * *(unsigned int *)(v91 + 8));
        goto LABEL_181;
      }
      unint64_t v93 = 0;
LABEL_173:
      switch(v92)
      {
        case 1:
          size_t v95 = (swift::Demangle::__runtime::Node **)(v91 + 8);
          break;
        case 2:
          size_t v95 = (swift::Demangle::__runtime::Node **)(v91 + 16);
          break;
        case 5:
          uint64_t v94 = *(swift::Demangle::__runtime::Node **)v91;
          goto LABEL_177;
        default:
          size_t v95 = 0;
          break;
      }
LABEL_181:
      if (v93 == v95)
      {
LABEL_26:
        int v8 = 0;
        int v7 = 0;
        int v14 = 0;
LABEL_75:
        *(_DWORD *)a6 = v8;
        *(void *)(a6 + 8) = v7;
        *(_DWORD *)(a6 + 16) = v14;
      }
      else
      {
        while (1)
        {
          if (*(_DWORD *)a6) {
            break;
          }
          int v8 = 0;
          int v7 = 0;
          int v14 = 0;
          if (++v93 == v95) {
            goto LABEL_75;
          }
        }
      }
      return this;
    default:
      int v14 = 0;
      goto LABEL_75;
  }
}

uint64_t anonymous namespace'::Remangler::mangleAnyGenericType@<X0>(uint64_t a1@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  long long v21 = 0uLL;
  LOBYTE(v22) = 0;
  if (result) {
    goto LABEL_23;
  }
  int v13 = *((unsigned __int8 *)a2 + 18);
  int v14 = a2;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      int v15 = *a2;
      int v14 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_10;
    }
    int v14 = 0;
  }
  if (v13 == 1)
  {
    unint64_t v16 = a2 + 1;
    if (v14 != v16) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if (v13 == 2)
  {
    unint64_t v16 = a2 + 2;
    if (v14 != v16) {
      goto LABEL_17;
    }
LABEL_20:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a3, a4, *(void **)(a1 + 12744));
    unint64_t v18 = *(void *)(a1 + 12680);
    if (v18 > 0xF)
    {
      int v20 = *(_DWORD *)(a1 + 12712) + 16;
      long long v23 = v21;
      uint64_t v24 = v22;
      int v25 = v20;
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>(a1 + 12688, (uint64_t)&v23, &v23);
    }
    else
    {
      *(void *)(a1 + 12680) = v18 + 1;
      uint64_t v19 = a1 + 24 * v18 + 12296;
      *(_OWORD *)uint64_t v19 = v21;
      *(unsigned char *)(v19 + 16) = v22;
    }
LABEL_23:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    return result;
  }
  if (v13 != 5)
  {
    unint64_t v16 = 0;
    if (!v14) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  int v15 = *a2;
LABEL_10:
  unint64_t v16 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8 * *((unsigned int *)a2 + 2));
  if (v14 == v16) {
    goto LABEL_20;
  }
LABEL_17:
  unsigned int v17 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6) {
      return result;
    }
    if (++v14 == v16) {
      goto LABEL_20;
    }
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleSingleChildNode@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 1) {
  if (v4 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 321;
  return this;
}

{
  int v4;

  int v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 1) {
  if (v4 == 5 && *((_DWORD *)a2 + 2) == 1)
  }
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 114;
  return this;
}

uint64_t __swift::__runtime::llvm::StringRef::consume_front(const void **a1, const void *a2, size_t a3)
{
  size_t v3 = (size_t)a1[1];
  if (v3 < a3) {
    return 0;
  }
  int v6 = (char *)*a1;
  if (a3)
  {
    if (memcmp(*a1, a2, a3)) {
      return 0;
    }
  }
  if (v3 >= a3) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = v3;
  }
  *a1 = &v6[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1;
}

uint64_t anonymous namespace'::Remangler::mangleConstrainedType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v5 = a2;
  int v6 = this;
  if (*((_WORD *)a2 + 8) != 232) {
    goto LABEL_8;
  }
  int v8 = *((unsigned __int8 *)a2 + 18);
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      char v5 = 0;
      goto LABEL_8;
    }
    char v5 = *(swift::Demangle::__runtime::Node **)a2;
  }
  char v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_8:
  long long v42 = 0uLL;
  LOBYTE(v43) = 0;
  if (result)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 24) = -1;
    *(void *)(a4 + 32) = 0;
    return result;
  }
  int v38 = a3;
  uint64_t v39 = a4;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  while (1)
  {
    int v14 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 45) {
      break;
    }
    int v15 = *((unsigned __int8 *)v5 + 18);
    unint64_t v16 = v5;
    if (v15 != 2)
    {
      if (v15 != 5 || *((_DWORD *)v5 + 2) < 2u)
      {
        uint64_t v17 = 0;
        if (v11 < v10) {
          goto LABEL_40;
        }
LABEL_22:
        unint64_t v18 = *(void **)v6;
        uint64_t v19 = &v12[8 * v10];
        int v20 = *(char **)(*(void *)v6 + 8);
        if (v19 != v20)
        {
          unint64_t v21 = v18[2];
          goto LABEL_25;
        }
        uint64_t v22 = v19 + 8;
        unint64_t v21 = v18[2];
        if ((unint64_t)v22 <= v21)
        {
          v18[1] = v22;
          LODWORD(v23) = 1;
        }
        else
        {
LABEL_25:
          char __src = v12;
          if (2 * v10 <= 4) {
            uint64_t v23 = 4;
          }
          else {
            uint64_t v23 = 2 * v10;
          }
          uint64_t v24 = 8 * (v23 + v10);
          int v25 = (char *)((unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8);
          v18[1] = v25;
          if (v25) {
            BOOL v26 = (unint64_t)&v25[v24] > v21;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            unint64_t v27 = 2 * v18[4];
            if (v27 <= v24 + 8) {
              unint64_t v27 = v24 + 8;
            }
            void v18[4] = v27;
            unsigned int v40 = v11;
            unsigned int v28 = v6;
            unint64_t v29 = v27 + 8;
            uint64_t result = (uint64_t)malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
            *(void *)uint64_t result = v18[3];
            int v25 = (char *)((result + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v30 = result + v29;
            int v6 = v28;
            unsigned int v11 = v40;
            uint64_t v18[2] = v30;
            void v18[3] = result;
          }
          v18[1] = &v25[v24];
          if (v10) {
            uint64_t result = (uint64_t)memcpy(v25, __src, 8 * v10);
          }
          uint64_t v12 = v25;
        }
        v10 += v23;
        int v15 = *((unsigned __int8 *)v5 + 18);
        goto LABEL_40;
      }
      unint64_t v16 = *(swift::Demangle::__runtime::Node **)v5;
    }
    uint64_t v17 = *((void *)v16 + 1);
    if (v11 >= v10) {
      goto LABEL_22;
    }
LABEL_40:
    *(void *)&v12[8 * v11] = v17;
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v5 + 2))
      {
        int v13 = 0;
        goto LABEL_46;
      }
      char v5 = *(swift::Demangle::__runtime::Node **)v5;
    }
    int v13 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_46:
    int v31 = *((unsigned __int8 *)v13 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_13:
      char v5 = *(swift::Demangle::__runtime::Node **)v13;
      ++v11;
    }
    else
    {
      if (v31 == 5 && *((_DWORD *)v13 + 2))
      {
        int v13 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_13;
      }
      char v5 = 0;
      ++v11;
    }
  }
  if (v14 != 38 && v14 != 85)
  {
    if (!v44)
    {
      if (!v11)
      {
        *(_DWORD *)uint64_t v39 = 0;
        *(void *)(v39 + 8) = 0;
        *(_DWORD *)(v39 + 16) = 0;
        *(_DWORD *)(v39 + 24) = -1;
        *(void *)(v39 + 32) = 0;
        return result;
      }
      char v5 = 0;
LABEL_53:
      if (!v44)
      {
        if (v11 == 1) {
          unint64_t v32 = "";
        }
        else {
          unint64_t v32 = "_";
        }
        uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, v32, v11 != 1, *((void **)v6 + 1593));
        if (v11 < 2)
        {
LABEL_61:
          unint64_t v35 = *((void *)v6 + 1585);
          if (v35 > 0xF)
          {
            int v37 = *((_DWORD *)v6 + 3178) + 16;
            long long v44 = v42;
            uint64_t v45 = v43;
            int v46 = v37;
            uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)v6 + 12688, (uint64_t)&v44, &v44);
          }
          else
          {
            *((void *)v6 + 1585) = v35 + 1;
            uint64_t v36 = (uint64_t)v6 + 24 * v35 + 12296;
            *(_OWORD *)uint64_t v36 = v42;
            *(unsigned char *)(v36 + 16) = v43;
          }
          goto LABEL_68;
        }
        unsigned int v33 = v11 - 2;
        unsigned int v34 = 2;
        while (1)
        {
          if (v44) {
            break;
          }
          uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, "", 0, *((void **)v6 + 1593));
          ++v34;
          --v33;
          if (v34 > v11) {
            goto LABEL_61;
          }
        }
      }
    }
    *(_OWORD *)uint64_t v39 = v44;
    *(void *)(v39 + 16) = v45;
    *(_DWORD *)(v39 + 24) = 0;
    *(void *)(v39 + 32) = 0;
    return result;
  }
  if (v11) {
    goto LABEL_53;
  }
LABEL_68:
  *(_DWORD *)uint64_t v39 = 0;
  *(void *)(v39 + 8) = 0;
  *(_DWORD *)(v39 + 16) = 0;
  *(_DWORD *)(v39 + 24) = v11;
  *(void *)(v39 + 32) = v5;
  return result;
}

char *anonymous namespace'::Remangler::mangleDependentGenericParamIndex(char *this, uint64_t **a2, const char *__s, char a4)
{
  uint64_t v4 = (uint64_t)this;
  if (*((_WORD *)a2 + 8) == 85)
  {
    unsigned int v5 = *((_DWORD *)this + 3184);
    size_t v6 = *((unsigned int *)this + 3185);
    int v7 = (unsigned char *)*((void *)this + 1591);
    if (v5 < v6)
    {
LABEL_37:
      *(_DWORD *)(v4 + 12736) = v5 + 1;
      v7[v5] = 115;
      return this;
    }
    int v8 = (void *)*((void *)this + 1593);
    int v9 = (unsigned char *)v8[1];
    if (&v7[v6] == v9)
    {
      unint64_t v27 = (unint64_t)&v7[v6 + 1];
      unint64_t v10 = v8[2];
      if (v27 <= v10)
      {
        v8[1] = v27;
        LODWORD(v28) = 1;
LABEL_36:
        *(_DWORD *)(v4 + 12740) = v6 + v28;
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v10 = v8[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v6);
    }
    size_t v29 = v28 + v6;
    if (v9) {
      BOOL v30 = (unint64_t)&v9[v28 + v6] > v10;
    }
    else {
      BOOL v30 = 1;
    }
    int v7 = (unsigned char *)v8[1];
    if (v30)
    {
      unint64_t v31 = 2 * v8[4];
      if (v31 <= v29 + 1) {
        unint64_t v31 = v29 + 1;
      }
      v8[4] = v31;
      unint64_t v32 = v31 + 8;
      this = (char *)malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      unsigned int v33 = &this[v32];
      *(void *)this = v8[3];
      int v7 = this + 8;
      v8[2] = v33;
      void v8[3] = this;
    }
    v8[1] = &v7[v29];
    if (v6) {
      this = (char *)memcpy(v7, *(const void **)(v4 + 12728), v6);
    }
    *(void *)(v4 + 12728) = v7;
    LODWORD(v6) = *(_DWORD *)(v4 + 12740);
    unsigned int v5 = *(_DWORD *)(v4 + 12736);
    goto LABEL_36;
  }
  int v13 = *((unsigned __int8 *)a2 + 18);
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5) {
      int v14 = (swift::Demangle::__runtime::Node *)*a2;
    }
    else {
      int v14 = (swift::Demangle::__runtime::Node *)a2;
    }
    a2 = (uint64_t **)*a2;
  }
  else
  {
    int v14 = (swift::Demangle::__runtime::Node *)a2;
  }
  uint64_t v15 = **a2;
  uint64_t v16 = **((void **)v14 + 1);
  if (!v15)
  {
    uint64_t v19 = (char **)(this + 12728);
    if (v16)
    {
      if (__s) {
        size_t v20 = strlen(__s);
      }
      else {
        size_t v20 = 0;
      }
      swift::Demangle::__runtime::CharVector::append(v19, __s, v20, *(void **)(v4 + 12744));
      uint64_t v48 = v16 - 1;
      unint64_t v47 = (char *)v4;
      goto LABEL_58;
    }
    unsigned int v34 = *((_DWORD *)this + 3184);
    size_t v35 = *((unsigned int *)this + 3185);
    uint64_t v36 = (char *)*((void *)this + 1591);
    if (v34 < v35)
    {
LABEL_76:
      *(_DWORD *)(v4 + 12736) = v34 + 1;
      v36[v34] = a4;
      return this;
    }
    int v37 = (void *)*((void *)this + 1593);
    int v38 = (char *)v37[1];
    if (&v36[v35] == v38)
    {
      unint64_t v49 = (unint64_t)&v36[v35 + 1];
      unint64_t v39 = v37[2];
      if (v49 <= v39)
      {
        v37[1] = v49;
        LODWORD(v50) = 1;
LABEL_75:
        *(_DWORD *)(v4 + 12740) = v35 + v50;
        goto LABEL_76;
      }
    }
    else
    {
      unint64_t v39 = v37[2];
    }
    if ((2 * v35) <= 4) {
      uint64_t v50 = 4;
    }
    else {
      uint64_t v50 = (2 * v35);
    }
    size_t v51 = v50 + v35;
    if (!v38 || (unint64_t)&v38[v51] > v39)
    {
      unint64_t v52 = 2 * v37[4];
      if (v52 <= v51 + 1) {
        unint64_t v52 = v51 + 1;
      }
      v37[4] = v52;
      unint64_t v53 = v52 + 8;
      this = (char *)malloc_type_malloc(v52 + 8, 0xD0263BC5uLL);
      int v54 = &this[v53];
      *(void *)this = v37[3];
      int v38 = this + 8;
      uint64_t v37[2] = v54;
      void v37[3] = this;
    }
    v37[1] = &v38[v51];
    if (v35) {
      this = (char *)memcpy(v38, *v19, v35);
    }
    *(void *)(v4 + 12728) = v38;
    LODWORD(v35) = *(_DWORD *)(v4 + 12740);
    uint64_t v36 = v38;
    unsigned int v34 = *(_DWORD *)(v4 + 12736);
    goto LABEL_75;
  }
  uint64_t v17 = (char **)(this + 12728);
  if (__s) {
    size_t v18 = strlen(__s);
  }
  else {
    size_t v18 = 0;
  }
  swift::Demangle::__runtime::CharVector::append(v17, __s, v18, *(void **)(v4 + 12744));
  unsigned int v21 = *(_DWORD *)(v4 + 12736);
  size_t v22 = *(unsigned int *)(v4 + 12740);
  uint64_t v23 = *(char **)(v4 + 12728);
  if (v21 < v22) {
    goto LABEL_54;
  }
  uint64_t v24 = *(void **)(v4 + 12744);
  int v25 = (char *)v24[1];
  if (&v23[v22] != v25)
  {
    unint64_t v26 = v24[2];
LABEL_42:
    if ((2 * v22) <= 4) {
      uint64_t v41 = 4;
    }
    else {
      uint64_t v41 = (2 * v22);
    }
    size_t v42 = v41 + v22;
    if (!v25 || (unint64_t)&v25[v42] > v26)
    {
      unint64_t v43 = 2 * v24[4];
      if (v43 <= v42 + 1) {
        unint64_t v43 = v42 + 1;
      }
      void v24[4] = v43;
      unint64_t v44 = v43 + 8;
      uint64_t v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
      int v46 = (char *)v45 + v44;
      *uint64_t v45 = v24[3];
      int v25 = (char *)(v45 + 1);
      void v24[2] = v46;
      void v24[3] = v45;
    }
    v24[1] = &v25[v42];
    if (v22) {
      memcpy(v25, *v17, v22);
    }
    *(void *)(v4 + 12728) = v25;
    LODWORD(v22) = *(_DWORD *)(v4 + 12740);
    uint64_t v23 = v25;
    unsigned int v21 = *(_DWORD *)(v4 + 12736);
    goto LABEL_53;
  }
  unint64_t v40 = (unint64_t)&v23[v22 + 1];
  unint64_t v26 = v24[2];
  if (v40 > v26) {
    goto LABEL_42;
  }
  v24[1] = v40;
  LODWORD(v41) = 1;
LABEL_53:
  *(_DWORD *)(v4 + 12740) = v22 + v41;
LABEL_54:
  *(_DWORD *)(v4 + 12736) = v21 + 1;
  v23[v21] = 100;
  unint64_t v47 = (char *)v4;
  uint64_t v48 = v16;
LABEL_58:
}

uint64_t *anonymous namespace'::Remangler::mangleAbstractStorage@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8 = a2;
  int v9 = result;
  int v11 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v12 = (swift::Demangle::__runtime::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      int v13 = *(swift::Demangle::__runtime::Node **)a2;
      uint64_t v12 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    uint64_t v12 = 0;
  }
  if (v11 == 1)
  {
    int v14 = (swift::Demangle::__runtime::Node **)(a2 + 8);
    if (v12 != (swift::Demangle::__runtime::Node **)(a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    int v14 = (swift::Demangle::__runtime::Node **)(a2 + 16);
    if (v12 != (swift::Demangle::__runtime::Node **)(a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    int v16 = *(unsigned __int16 *)(v8 + 16);
    if (v16 == 220)
    {
      uint64_t v17 = "i";
    }
    else
    {
      if (v16 != 254)
      {
        int v19 = 712;
        int v18 = 6;
        goto LABEL_25;
      }
      uint64_t v17 = "v";
    }
    swift::Demangle::__runtime::CharVector::append((char **)v9 + 1591, v17, 1uLL, (void *)v9[1593]);
    uint64_t result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v9 + 1591, a3, a4, (void *)v9[1593]);
    int v18 = 0;
    uint64_t v8 = 0;
    int v19 = 0;
LABEL_25:
    *(_DWORD *)a6 = v18;
    *(void *)(a6 + 8) = v8;
    *(_DWORD *)(a6 + 16) = v19;
    return result;
  }
  if (v11 != 5)
  {
    int v14 = 0;
    if (!v12) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  int v13 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
  int v14 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8 * *(unsigned int *)(a2 + 8));
  if (v12 == v14) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v15 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6) {
      return result;
    }
    if (++v12 == v14) {
      goto LABEL_19;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleGenericSpecializationNode@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, const char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  size_t v6 = a2;
  uint64_t v7 = (uint64_t)this;
  BOOL v23 = 1;
  int v9 = *((unsigned __int8 *)a2 + 18);
  unint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      unint64_t v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    unint64_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      uint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
        goto LABEL_27;
      }
      break;
    case 2:
      uint64_t v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
        goto LABEL_27;
      }
      break;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12)
      {
LABEL_27:
        int v16 = 1706;
        int v17 = 1;
        goto LABEL_28;
      }
      break;
    default:
      uint64_t v12 = 0;
      if (!v10) {
        goto LABEL_27;
      }
      break;
  }
  unsigned int v13 = a4 + 1;
  do
  {
    int v14 = *(swift::Demangle::__runtime::Node **)v10;
    if (*(_WORD *)(*(void *)v10 + 16) == 94)
    {
      int v15 = *((unsigned __int8 *)v14 + 18);
      if ((v15 - 1) >= 2)
      {
        if (v15 != 5 || !*((_DWORD *)v14 + 2))
        {
          *(_DWORD *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(_DWORD *)(a5 + 16) = 0;
LABEL_20:
          goto LABEL_21;
        }
        int v14 = *(swift::Demangle::__runtime::Node **)v14;
      }
      if (*(_DWORD *)a5) {
        return this;
      }
      goto LABEL_20;
    }
LABEL_21:
    unint64_t v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
  }
  while (v10 != v12);
  if (v23) {
    goto LABEL_27;
  }
  if (a3) {
    size_t v18 = strlen(a3);
  }
  else {
    size_t v18 = 0;
  }
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)(v7 + 12728), a3, v18, *(void **)(v7 + 12744));
  int v19 = *((unsigned __int8 *)v6 + 18);
  size_t v20 = (swift::Demangle::__runtime::Node **)v6;
  if ((v19 - 1) >= 2)
  {
    if (v19 == 5)
    {
      unsigned int v21 = *(swift::Demangle::__runtime::Node ***)v6;
      size_t v20 = *(swift::Demangle::__runtime::Node ***)v6;
LABEL_41:
      size_t v22 = &v21[*((unsigned int *)v6 + 2)];
      goto LABEL_46;
    }
    size_t v20 = 0;
  }
  switch(v19)
  {
    case 1:
      size_t v22 = (swift::Demangle::__runtime::Node **)((char *)v6 + 8);
      goto LABEL_46;
    case 2:
      size_t v22 = (swift::Demangle::__runtime::Node **)((char *)v6 + 16);
      goto LABEL_46;
    case 5:
      unsigned int v21 = *(swift::Demangle::__runtime::Node ***)v6;
      goto LABEL_41;
  }
  size_t v22 = 0;
LABEL_46:
  while (v20 != v22)
  {
    if (*((_WORD *)*v20 + 8) != 94)
    {
      if (*(_DWORD *)a5) {
        return this;
      }
    }
    ++v20;
  }
  int v17 = 0;
  size_t v6 = 0;
  int v16 = 0;
LABEL_28:
  *(_DWORD *)a5 = v17;
  *(void *)(a5 + 8) = v6;
  *(_DWORD *)(a5 + 16) = v16;
  return this;
}

void anonymous namespace'::Remangler::mangleIdentifierImpl(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  memset(&v11, 0, 17);
  {
    if (a3)
    {
      swift::Mangle::__runtime::translateOperator(*(char **)a2, *((void *)a2 + 1), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
    }
    unint64_t v8 = *((void *)this + 1585);
    if (v8 > 0xF)
    {
      int v10 = *((_DWORD *)this + 3178) + 16;
      std::string __p = v11;
      int v13 = v10;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&__p, &__p);
    }
    else
    {
      *((void *)this + 1585) = v8 + 1;
      int v9 = (char *)this + 24 * v8 + 12296;
      *(_OWORD *)int v9 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      unsigned char v9[16] = v11.__r_.__value_.__s.__data_[16];
    }
  }
}

void swift::Mangle::__runtime::mangleIdentifier<anonymous namespace'::Remangler>(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  unint64_t v6 = *(unsigned int *)(a1 + 12768);
  unint64_t v147 = v6;
  if (!*(unsigned char *)(a1 + 12752) || (int v7 = swift::Mangle::__runtime::needsPunycodeEncoding(a2, a3), v6 = v147, !v7))
  {
    unint64_t v17 = 0;
    unint64_t v150 = (void *)(v5 + 12760);
    unint64_t v145 = (const void **)(v5 + 12728);
    unint64_t v146 = v4;
    uint64_t v142 = (void *)(v5 + 12776);
    unint64_t v18 = -1;
    uint64_t v140 = (16 * v6) | 8;
    while (1)
    {
      if (v17 >= v3)
      {
        int v21 = 0;
        if (v18 == -1) {
          goto LABEL_19;
        }
      }
      else
      {
        int v21 = v4[v17];
        if (v18 == -1) {
          goto LABEL_19;
        }
      }
      if (!v21
        || v21 == 95
        || (v21 - 65) <= 0x19 && v4[v17 - 1] - 91 <= 0xFFFFFFE5)
      {
        break;
      }
LABEL_28:
      if (++v17 > v3)
      {
        if (*(_DWORD *)(v5 + 12784))
        {
          unsigned int v40 = *(_DWORD *)(v5 + 12736);
          size_t v41 = *(unsigned int *)(v5 + 12740);
          size_t v42 = *(char **)(v5 + 12728);
          if (v40 >= v41)
          {
            unint64_t v43 = *(void **)(v5 + 12744);
            unint64_t v44 = (char *)v43[1];
            if (&v42[v41] != v44)
            {
              unint64_t v45 = v43[2];
              goto LABEL_74;
            }
            unint64_t v46 = (unint64_t)&v42[v41 + 1];
            unint64_t v45 = v43[2];
            if (v46 <= v45)
            {
              v43[1] = v46;
              LODWORD(v47) = 1;
            }
            else
            {
LABEL_74:
              if ((2 * v41) <= 4) {
                uint64_t v47 = 4;
              }
              else {
                uint64_t v47 = (2 * v41);
              }
              size_t v48 = v47 + v41;
              if (!v44 || (unint64_t)&v44[v48] > v45)
              {
                unint64_t v49 = 2 * v43[4];
                if (v49 <= v48 + 1) {
                  unint64_t v49 = v48 + 1;
                }
                v43[4] = v49;
                unint64_t v50 = v49 + 8;
                size_t v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
                *size_t v51 = v43[3];
                unint64_t v44 = (char *)(v51 + 1);
                unint64_t v52 = (char *)v51 + v50;
                uint64_t v4 = v146;
                v43[2] = v52;
                void v43[3] = v51;
              }
              v43[1] = &v44[v48];
              if (v41) {
                memcpy(v44, *v145, v41);
              }
              *(void *)(v5 + 12728) = v44;
              LODWORD(v41) = *(_DWORD *)(v5 + 12740);
              size_t v42 = v44;
              unsigned int v40 = *(_DWORD *)(v5 + 12736);
            }
            *(_DWORD *)(v5 + 12740) = v41 + v47;
          }
          *(_DWORD *)(v5 + 12736) = v40 + 1;
          v42[v40] = 48;
        }
        __p.__r_.__value_.__r.__words[0] = v3;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = -1;
        swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back((uint64_t)v142, (__n128 *)&__p, *(void **)v5);
        unint64_t v53 = v147;
        uint64_t v141 = *(unsigned int *)(v5 + 12784);
        if (!v141)
        {
LABEL_195:
          *(_DWORD *)(v5 + 12784) = 0;
          return;
        }
        unint64_t v54 = 0;
        unint64_t v55 = 0;
        while (2)
        {
          uint64_t v61 = *v142 + 16 * v54;
          unint64_t v62 = *(void *)v61 - v55;
          unint64_t v144 = v54;
          if (*(void *)v61 > v55)
          {
            uint64_t v148 = *v142 + 16 * v54;
            unint64_t v63 = v53;
            swift::Demangle::__runtime::CharVector::append((unsigned int *)v145, v62, *(swift::Demangle::__runtime::NodeFactory **)(v5 + 12744));
            unint64_t v53 = v63;
            uint64_t v61 = v148;
            char v64 = 1;
            while (1)
            {
              if (v53 < *(unsigned int *)(v5 + 12768))
              {
                unsigned int v68 = (void *)(*v150 + 16 * v53);
                if (v55 == *v68)
                {
                  *unsigned int v68 = *(unsigned int *)(v5 + 12736);
                  ++v53;
                }
              }
              LODWORD(v69) = v4[v55];
              if (v64)
              {
                unsigned int v66 = *(_DWORD *)(v5 + 12736);
                if ((v69 - 48) <= 9)
                {
                  size_t v70 = *(unsigned int *)(v5 + 12740);
                  unint64_t v71 = *(char **)(v5 + 12728);
                  if (v66 < v70)
                  {
                    LOBYTE(v69) = 88;
                    goto LABEL_99;
                  }
                  size_t v85 = *(void **)(v5 + 12744);
                  BOOL v86 = (char *)v85[1];
                  if (&v71[v70] != v86)
                  {
                    unint64_t v87 = v85[2];
                    goto LABEL_129;
                  }
                  unint64_t v88 = (unint64_t)&v71[v70 + 1];
                  unint64_t v87 = v85[2];
                  if (v88 <= v87)
                  {
                    v85[1] = v88;
                    LODWORD(v69) = 1;
                    BOOL v86 = v71;
                  }
                  else
                  {
LABEL_129:
                    unint64_t v89 = v53;
                    if ((2 * v70) <= 4) {
                      uint64_t v69 = 4;
                    }
                    else {
                      uint64_t v69 = (2 * v70);
                    }
                    size_t v90 = v69 + v70;
                    if (!v86 || (unint64_t)&v86[v90] > v87)
                    {
                      unint64_t v91 = 2 * v85[4];
                      if (v91 <= v90 + 1) {
                        unint64_t v91 = v90 + 1;
                      }
                      void v85[4] = v91;
                      unint64_t v92 = v91 + 8;
                      unint64_t v93 = malloc_type_malloc(v91 + 8, 0xD0263BC5uLL);
                      *unint64_t v93 = v85[3];
                      BOOL v86 = (char *)(v93 + 1);
                      v85[2] = (char *)v93 + v92;
                      v85[3] = v93;
                    }
                    v85[1] = &v86[v90];
                    if (v70) {
                      memcpy(v86, *v145, v70);
                    }
                    uint64_t v5 = a1;
                    *(void *)(a1 + 12728) = v86;
                    LODWORD(v70) = *(_DWORD *)(a1 + 12740);
                    unsigned int v66 = *(_DWORD *)(a1 + 12736);
                    unint64_t v53 = v89;
                  }
                  int v67 = v70 + v69;
                  LOBYTE(v69) = 88;
                  unint64_t v71 = v86;
                  uint64_t v4 = v146;
                  goto LABEL_98;
                }
              }
              else
              {
                unsigned int v66 = *(_DWORD *)(v5 + 12736);
              }
              size_t v65 = *(unsigned int *)(v5 + 12740);
              unint64_t v71 = *(char **)(v5 + 12728);
              if (v66 < v65) {
                goto LABEL_99;
              }
              uint64_t v72 = *(void **)(v5 + 12744);
              size_t v73 = (char *)v72[1];
              if (&v71[v65] != v73) {
                break;
              }
              unint64_t v75 = (unint64_t)&v71[v65 + 1];
              unint64_t v74 = v72[2];
              if (v75 > v74) {
                goto LABEL_112;
              }
              v72[1] = v75;
              LODWORD(v78) = 1;
              uint64_t v5 = a1;
LABEL_97:
              int v67 = v65 + v78;
LABEL_98:
              *(_DWORD *)(v5 + 12740) = v67;
LABEL_99:
              char v64 = 0;
              *(_DWORD *)(v5 + 12736) = v66 + 1;
              v71[v66] = v69;
              if (++v55 >= *(void *)v61) {
                goto LABEL_142;
              }
            }
            unint64_t v74 = v72[2];
LABEL_112:
            unint64_t v76 = v53;
            unint64_t v77 = v3;
            if ((2 * v65) <= 4) {
              uint64_t v78 = 4;
            }
            else {
              uint64_t v78 = (2 * v65);
            }
            size_t v79 = v78 + v65;
            if (v73) {
              BOOL v80 = (unint64_t)&v73[v78 + v65] > v74;
            }
            else {
              BOOL v80 = 1;
            }
            unint64_t v71 = (char *)v72[1];
            if (v80)
            {
              unint64_t v81 = 2 * v72[4];
              if (v81 <= v79 + 1) {
                unint64_t v81 = v79 + 1;
              }
              v72[4] = v81;
              unint64_t v82 = v81 + 8;
              unint64_t v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
              void *v83 = v72[3];
              unint64_t v71 = (char *)(v83 + 1);
              uint64_t v84 = (char *)v83 + v82;
              uint64_t v4 = v146;
              v72[2] = v84;
              v72[3] = v83;
            }
            v72[1] = &v71[v79];
            if (v65) {
              memcpy(v71, *v145, v65);
            }
            uint64_t v5 = a1;
            *(void *)(a1 + 12728) = v71;
            LODWORD(v65) = *(_DWORD *)(a1 + 12740);
            unsigned int v66 = *(_DWORD *)(a1 + 12736);
            unint64_t v3 = v77;
            unint64_t v53 = v76;
            uint64_t v61 = v148;
            goto LABEL_97;
          }
LABEL_142:
          uint64_t v94 = *(unsigned int *)(v61 + 8);
          if ((v94 & 0x80000000) != 0) {
            goto LABEL_93;
          }
          v55 += *(void *)(*(void *)(v5 + 12760) + 16 * v94 + 8);
          size_t v95 = *(void **)(v5 + 12744);
          unsigned int v57 = *(_DWORD *)(v5 + 12736);
          size_t v56 = *(unsigned int *)(v5 + 12740);
          unsigned int v60 = *(char **)(v5 + 12728);
          if (v144 < v141 - 2)
          {
            char v96 = v94 + 97;
            if (v57 >= v56)
            {
              char v97 = (char *)v95[1];
              if (&v60[v56] != v97)
              {
                unint64_t v98 = v95[2];
                goto LABEL_151;
              }
              unint64_t v101 = (unint64_t)&v60[v56 + 1];
              unint64_t v98 = v95[2];
              if (v101 <= v98)
              {
                v95[1] = v101;
                int v58 = 1;
                char v97 = v60;
              }
              else
              {
LABEL_151:
                LODWORD(v102) = 2 * v56;
                if ((2 * v56) <= 4) {
                  uint64_t v102 = 4;
                }
                else {
                  uint64_t v102 = v102;
                }
                int v149 = v102;
                size_t v103 = v102 + v56;
                if (!v97 || (unint64_t)&v97[v103] > v98)
                {
                  unint64_t v104 = 2 * v95[4];
                  if (v104 <= v103 + 1) {
                    unint64_t v104 = v103 + 1;
                  }
                  v95[4] = v104;
                  unint64_t v105 = v104 + 8;
                  unint64_t v106 = v53;
                  unint64_t v107 = malloc_type_malloc(v104 + 8, 0xD0263BC5uLL);
                  unint64_t v53 = v106;
                  void *v107 = v95[3];
                  char v97 = (char *)(v107 + 1);
                  uint64_t v108 = (char *)v107 + v105;
                  uint64_t v4 = v146;
                  v95[2] = v108;
                  v95[3] = v107;
                }
                v95[1] = &v97[v103];
                if (v56)
                {
                  unint64_t v109 = v53;
                  memcpy(v97, *v145, v56);
                  unint64_t v53 = v109;
                }
                *(void *)(v5 + 12728) = v97;
                LODWORD(v56) = *(_DWORD *)(v5 + 12740);
                unsigned int v57 = *(_DWORD *)(v5 + 12736);
                int v58 = v149;
              }
              int v59 = v56 + v58;
LABEL_91:
              *(_DWORD *)(v5 + 12740) = v59;
              unsigned int v60 = v97;
            }
LABEL_92:
            *(_DWORD *)(v5 + 12736) = v57 + 1;
            v60[v57] = v96;
LABEL_93:
            unint64_t v54 = v144 + 1;
            if (v144 + 1 == v141) {
              goto LABEL_195;
            }
            continue;
          }
          break;
        }
        if (v57 >= v56)
        {
          uint64_t v99 = (char *)v95[1];
          if (&v60[v56] != v99)
          {
            unint64_t v100 = v95[2];
            goto LABEL_162;
          }
          unint64_t v110 = (unint64_t)&v60[v56 + 1];
          unint64_t v100 = v95[2];
          if (v110 <= v100)
          {
            v95[1] = v110;
            LODWORD(v112) = 1;
          }
          else
          {
LABEL_162:
            unint64_t v111 = v53;
            if ((2 * v56) <= 4) {
              uint64_t v112 = 4;
            }
            else {
              uint64_t v112 = (2 * v56);
            }
            size_t v113 = v112 + v56;
            if (!v99 || (unint64_t)&v99[v113] > v100)
            {
              unint64_t v114 = 2 * v95[4];
              if (v114 <= v113 + 1) {
                unint64_t v114 = v113 + 1;
              }
              v95[4] = v114;
              unint64_t v115 = v114 + 8;
              unint64_t v116 = malloc_type_malloc(v114 + 8, 0xD0263BC5uLL);
              *unint64_t v116 = v95[3];
              uint64_t v99 = (char *)(v116 + 1);
              int v117 = (char *)v116 + v115;
              uint64_t v4 = v146;
              v95[2] = v117;
              v95[3] = v116;
            }
            v95[1] = &v99[v113];
            if (v56) {
              memcpy(v99, *v145, v56);
            }
            *(void *)(a1 + 12728) = v99;
            LODWORD(v56) = *(_DWORD *)(a1 + 12740);
            unsigned int v60 = v99;
            unsigned int v57 = *(_DWORD *)(a1 + 12736);
            unint64_t v53 = v111;
            uint64_t v5 = a1;
          }
          *(_DWORD *)(v5 + 12740) = v56 + v112;
        }
        *(_DWORD *)(v5 + 12736) = v57 + 1;
        v60[v57] = v94 + 65;
        if (v55 != v3) {
          goto LABEL_93;
        }
        unsigned int v57 = *(_DWORD *)(v5 + 12736);
        size_t v118 = *(unsigned int *)(v5 + 12740);
        unsigned int v60 = *(char **)(v5 + 12728);
        if (v57 < v118)
        {
          char v96 = 48;
          unint64_t v55 = v3;
          goto LABEL_92;
        }
        uint64_t v119 = *(void **)(v5 + 12744);
        char v97 = (char *)v119[1];
        if (&v60[v118] != v97)
        {
          unint64_t v120 = v119[2];
          goto LABEL_182;
        }
        unint64_t v121 = (unint64_t)&v60[v118 + 1];
        unint64_t v120 = v119[2];
        if (v121 <= v120)
        {
          v119[1] = v121;
          LODWORD(v122) = 1;
          char v97 = v60;
        }
        else
        {
LABEL_182:
          if ((2 * v118) <= 4) {
            uint64_t v122 = 4;
          }
          else {
            uint64_t v122 = (2 * v118);
          }
          size_t v123 = v122 + v118;
          if (!v97 || (unint64_t)&v97[v123] > v120)
          {
            unint64_t v124 = 2 * v119[4];
            if (v124 <= v123 + 1) {
              unint64_t v124 = v123 + 1;
            }
            v119[4] = v124;
            unint64_t v125 = v124 + 8;
            unint64_t v126 = v53;
            unint64_t v127 = malloc_type_malloc(v124 + 8, 0xD0263BC5uLL);
            unint64_t v53 = v126;
            *unint64_t v127 = v119[3];
            char v97 = (char *)(v127 + 1);
            unint64_t v128 = (char *)v127 + v125;
            uint64_t v4 = v146;
            v119[2] = v128;
            v119[3] = v127;
          }
          v119[1] = &v97[v123];
          if (v118)
          {
            unint64_t v129 = v53;
            memcpy(v97, *v145, v118);
            unint64_t v53 = v129;
          }
          *(void *)(v5 + 12728) = v97;
          LODWORD(v118) = *(_DWORD *)(v5 + 12740);
          unsigned int v57 = *(_DWORD *)(v5 + 12736);
        }
        int v59 = v118 + v122;
        char v96 = 48;
        unint64_t v55 = v3;
        goto LABEL_91;
      }
    }
    std::string::size_type v22 = v18;
    if (v3 >= v18) {
      unint64_t v23 = v18;
    }
    else {
      unint64_t v23 = v3;
    }
    uint64_t v24 = &v4[v23];
    size_t v25 = v3 - v23;
    std::string::size_type v143 = v17 - v18;
    if (v25 >= v17 - v18) {
      size_t v26 = v17 - v18;
    }
    else {
      size_t v26 = v25;
    }
    if (!v6) {
      goto LABEL_54;
    }
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(a1 + 12728);
    unint64_t v29 = *(unsigned int *)(a1 + 12736);
    BOOL v30 = (unint64_t *)(*v150 + 8);
    while (1)
    {
      unint64_t v31 = *(v30 - 1);
      unint64_t v32 = *v30;
      if (v29 < v31) {
        unint64_t v31 = v29;
      }
      if (v29 - v31 < v32) {
        unint64_t v32 = v29 - v31;
      }
      if (v26 == v32)
      {
        if (!v26) {
          break;
        }
        int v33 = memcmp(v24, (const void *)(v28 + v31), v26);
        unint64_t v6 = v147;
        if (!v33) {
          break;
        }
      }
      v30 += 2;
      if (v6 == ++v27) {
        goto LABEL_54;
      }
    }
    if ((v27 & 0x80000000) == 0)
    {
      uint64_t v4 = v146;
    }
    else
    {
LABEL_54:
      uint64_t v34 = *(unsigned int *)(a1 + 12768);
      uint64_t v4 = v146;
      if (v6 >= v34) {
        goto LABEL_66;
      }
      size_t v35 = (unint64_t *)(*v150 + v140);
      unint64_t v36 = v6;
      while (1)
      {
        unint64_t v37 = *(v35 - 1);
        unint64_t v38 = *v35;
        if (v3 < v37) {
          unint64_t v37 = v3;
        }
        if (v3 - v37 < v38) {
          unint64_t v38 = v3 - v37;
        }
        if (v26 == v38)
        {
          if (!v26) {
            break;
          }
          int v39 = memcmp(v24, &v146[v37], v26);
          unint64_t v6 = v147;
          if (!v39) {
            break;
          }
        }
        v35 += 2;
        if (v34 == ++v36) {
          goto LABEL_66;
        }
      }
      if ((v36 & 0x80000000) != 0)
      {
LABEL_66:
        uint64_t v5 = a1;
        if (v143 < 2 || v34 > 0x19)
        {
LABEL_19:
          if ((v21 - 58) >= 0xFFFFFFF6 || v21 == 95 || v21 == 0) {
            unint64_t v18 = -1;
          }
          else {
            unint64_t v18 = v17;
          }
          goto LABEL_28;
        }
        __p.__r_.__value_.__r.__words[0] = v22;
        __p.__r_.__value_.__l.__size_ = v143;
        swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back((uint64_t)v150, (__n128 *)&__p, *(void **)a1);
LABEL_18:
        unint64_t v6 = v147;
        goto LABEL_19;
      }
      LODWORD(v27) = v36;
    }
    uint64_t v5 = a1;
    __p.__r_.__value_.__r.__words[0] = v22;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = v27;
    swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back((uint64_t)v142, (__n128 *)&__p, *(void **)a1);
    goto LABEL_18;
  }
  memset(&__p, 0, sizeof(__p));
  swift::Punycode::__runtime::encodePunycodeUTF8(v4, v3, &__p, 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v10 = (const void **)(v5 + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), "00", 2uLL, *(void **)(v5 + 12744));
  swift::Demangle::__runtime::CharVector::append((unsigned int *)(v5 + 12728), size, *(swift::Demangle::__runtime::NodeFactory **)(v5 + 12744));
  int v11 = p_p->__r_.__value_.__s.__data_[0];
  if (v11 != 95 && (v11 - 48) > 9) {
    goto LABEL_214;
  }
  unsigned int v13 = *(_DWORD *)(v5 + 12736);
  uint64_t v14 = v5;
  size_t v15 = *(unsigned int *)(v5 + 12740);
  int v16 = *(char **)(v14 + 12728);
  if (v13 >= v15)
  {
    unint64_t v130 = *(void **)(v14 + 12744);
    int v131 = (char *)v130[1];
    if (&v16[v15] == v131)
    {
      unint64_t v133 = (unint64_t)&v16[v15 + 1];
      unint64_t v132 = v130[2];
      if (v133 <= v132)
      {
        v130[1] = v133;
        LODWORD(v134) = 1;
        uint64_t v139 = a1;
LABEL_212:
        *(_DWORD *)(v139 + 12740) = v15 + v134;
        uint64_t v5 = v139;
        goto LABEL_213;
      }
    }
    else
    {
      unint64_t v132 = v130[2];
    }
    if ((2 * v15) <= 4) {
      uint64_t v134 = 4;
    }
    else {
      uint64_t v134 = (2 * v15);
    }
    size_t v135 = v134 + v15;
    if (!v131 || (unint64_t)&v131[v135] > v132)
    {
      unint64_t v136 = 2 * v130[4];
      if (v136 <= v135 + 1) {
        unint64_t v136 = v135 + 1;
      }
      v130[4] = v136;
      unint64_t v137 = v136 + 8;
      unint64_t v138 = malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
      *unint64_t v138 = v130[3];
      int v131 = (char *)(v138 + 1);
      v130[2] = (char *)v138 + v137;
      v130[3] = v138;
    }
    v130[1] = &v131[v135];
    if (v15) {
      memcpy(v131, *v10, v15);
    }
    uint64_t v139 = a1;
    *(void *)(a1 + 12728) = v131;
    LODWORD(v15) = *(_DWORD *)(a1 + 12740);
    int v16 = v131;
    unsigned int v13 = *(_DWORD *)(a1 + 12736);
    goto LABEL_212;
  }
  uint64_t v5 = v14;
LABEL_213:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v16[v13] = 95;
LABEL_214:
  swift::Demangle::__runtime::CharVector::append((char **)v10, p_p, size, *(void **)(v5 + 12744));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

__n128 swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back(uint64_t a1, __n128 *a2, void *a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  int v7 = *(__n128 **)a1;
  if (v5 >= v6)
  {
    int v9 = &v7[v6];
    int v10 = (char *)a3[1];
    if (v9 == (__n128 *)v10)
    {
      uint64_t v12 = (char *)&v9[1];
      unint64_t v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *(_DWORD *)(a1 + 12) = v6 + v13;
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v11 = a3[2];
    }
    if ((2 * v6) <= 4) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = (2 * v6);
    }
    uint64_t v14 = v13 + v6;
    int v7 = (__n128 *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v7;
    if (!v7 || (unint64_t)v7[v14].n128_u64 > v11)
    {
      unint64_t v15 = 2 * a3[4];
      if (v15 <= ((v14 * 16) | 8uLL)) {
        unint64_t v15 = (v14 * 16) | 8;
      }
      a3[4] = v15;
      unint64_t v16 = v15 + 8;
      unint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      unint64_t v18 = (char *)v17 + v16;
      *unint64_t v17 = a3[3];
      int v7 = (__n128 *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
      a3[2] = v18;
      a3[3] = v17;
    }
    a3[1] = &v7[v14];
    if (v6) {
      memcpy(v7, *(const void **)a1, 16 * v6);
    }
    *(void *)a1 = v7;
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
LABEL_18:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  __n128 result = *a2;
  v7[v5] = *a2;
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleKeyPathThunkHelper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v13 = (swift::Demangle::__runtime::Node **)a2;
  if ((v12 - 1) >= 2)
  {
    if (v12 == 5)
    {
      uint64_t v14 = *(swift::Demangle::__runtime::Node **)a2;
      uint64_t v13 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    uint64_t v13 = 0;
  }
  if (v12 == 1)
  {
    unint64_t v15 = (swift::Demangle::__runtime::Node **)(a2 + 8);
    if (v13 != (swift::Demangle::__runtime::Node **)(a2 + 8)) {
      goto LABEL_18;
    }
LABEL_21:
    __n128 result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a3, a4, *(void **)(a1 + 12744));
    int v17 = *(unsigned __int8 *)(a2 + 18);
    unint64_t v18 = (swift::Demangle::__runtime::Node **)a2;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        int v19 = *(swift::Demangle::__runtime::Node **)a2;
        unint64_t v18 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_29:
        size_t v20 = (swift::Demangle::__runtime::Node **)((char *)v19 + 8 * *(unsigned int *)(a2 + 8));
        if (v18 == v20) {
          goto LABEL_41;
        }
        goto LABEL_36;
      }
      unint64_t v18 = 0;
    }
    switch(v17)
    {
      case 1:
        size_t v20 = (swift::Demangle::__runtime::Node **)(a2 + 8);
        if (v18 == v20) {
          goto LABEL_41;
        }
        break;
      case 2:
        size_t v20 = (swift::Demangle::__runtime::Node **)(a2 + 16);
        if (v18 == v20) {
          goto LABEL_41;
        }
        break;
      case 5:
        int v19 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_29;
      default:
        size_t v20 = 0;
        if (!v18)
        {
LABEL_41:
          *(_DWORD *)a6 = 0;
          *(void *)(a6 + 8) = 0;
          *(_DWORD *)(a6 + 16) = 0;
          return result;
        }
        break;
    }
LABEL_36:
    unsigned int v21 = a5 + 1;
    while (1)
    {
      if (*((_WORD *)*v18 + 8) == 217)
      {
        if (*(_DWORD *)a6) {
          return result;
        }
      }
      if (++v18 == v20) {
        goto LABEL_41;
      }
    }
  }
  if (v12 == 2)
  {
    unint64_t v15 = (swift::Demangle::__runtime::Node **)(a2 + 16);
    if (v13 != (swift::Demangle::__runtime::Node **)(a2 + 16)) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  if (v12 != 5)
  {
    unint64_t v15 = 0;
    if (v13) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  uint64_t v14 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
  unint64_t v15 = (swift::Demangle::__runtime::Node **)((char *)v14 + 8 * *(unsigned int *)(a2 + 8));
  if (v13 == v15) {
    goto LABEL_21;
  }
LABEL_18:
  while (1)
  {
    if (*((_WORD *)*v13 + 8) != 217)
    {
      if (*(_DWORD *)a6) {
        return result;
      }
    }
    if (++v13 == v15) {
      goto LABEL_21;
    }
  }
}

uint64_t *anonymous namespace'::Remangler::mangleProtocolList@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, swift::Demangle::__runtime::Node *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11 = *((unsigned __int8 *)a2 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v12 = 0;
      goto LABEL_7;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v12 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_7:
  BOOL v43 = 1;
  int v13 = *((unsigned __int8 *)v12 + 18);
  uint64_t v14 = v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      unint64_t v15 = *v12;
      uint64_t v14 = (swift::Demangle::__runtime::Node **)*v12;
      goto LABEL_15;
    }
    uint64_t v14 = 0;
  }
  switch(v13)
  {
    case 1:
      unint64_t v16 = v12 + 1;
      if (v14 != v12 + 1) {
        goto LABEL_18;
      }
      goto LABEL_43;
    case 2:
      unint64_t v16 = v12 + 2;
      if (v14 != v12 + 2) {
        goto LABEL_18;
      }
      goto LABEL_43;
    case 5:
      unint64_t v15 = *v12;
LABEL_15:
      unint64_t v16 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8 * *((unsigned int *)v12 + 2));
      if (v14 != v16) {
        goto LABEL_18;
      }
      goto LABEL_43;
  }
  unint64_t v16 = 0;
  if (!v14)
  {
LABEL_43:
    BOOL v24 = 1;
    goto LABEL_44;
  }
  do
  {
LABEL_18:
    int v17 = *v14;
    if (*((_WORD *)*v14 + 8) != 232) {
      goto LABEL_25;
    }
    int v18 = *((unsigned __int8 *)v17 + 18);
    if ((v18 - 1) < 2) {
      goto LABEL_23;
    }
    if (v18 == 5 && *((_DWORD *)v17 + 2))
    {
      int v17 = *(swift::Demangle::__runtime::Node **)v17;
LABEL_23:
      int v17 = *(swift::Demangle::__runtime::Node **)v17;
      goto LABEL_25;
    }
    int v17 = 0;
LABEL_25:
    {
      int v19 = *((unsigned __int8 *)v17 + 18);
      size_t v20 = (swift::Demangle::__runtime::Node **)v17;
      if ((v19 - 1) >= 2)
      {
        if (v19 == 5)
        {
          unsigned int v21 = *(swift::Demangle::__runtime::Node **)v17;
          size_t v20 = *(swift::Demangle::__runtime::Node ***)v17;
LABEL_34:
          std::string::size_type v22 = (swift::Demangle::__runtime::Node **)((char *)v21 + 8 * *((unsigned int *)v17 + 2));
          goto LABEL_40;
        }
        size_t v20 = 0;
      }
      switch(v19)
      {
        case 1:
          std::string::size_type v22 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8);
          goto LABEL_40;
        case 2:
          std::string::size_type v22 = (swift::Demangle::__runtime::Node **)((char *)v17 + 16);
          goto LABEL_40;
        case 5:
          unsigned int v21 = *(swift::Demangle::__runtime::Node **)v17;
          goto LABEL_34;
      }
      std::string::size_type v22 = 0;
LABEL_40:
      while (v20 != v22)
      {
        if (*(_DWORD *)a6) {
          return result;
        }
        ++v20;
      }
    }
    *(_DWORD *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    ++v14;
  }
  while (v14 != v16);
  BOOL v24 = v43;
LABEL_44:
  if (!a3)
  {
    unint64_t v29 = this[1593];
    if (a4)
    {
      uint64_t v28 = "Xl";
      size_t v26 = (char **)(this + 1591);
      uint64_t v27 = this[1593];
LABEL_57:
      __n128 result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v26, v28, 2uLL, v27);
      int v30 = 0;
      a3 = 0;
      int v31 = 0;
      goto LABEL_78;
    }
    unsigned int v32 = *((_DWORD *)this + 3184);
    size_t v33 = *((unsigned int *)this + 3185);
    uint64_t v34 = (char *)this[1591];
    if (v32 < v33) {
      goto LABEL_77;
    }
    size_t v35 = (char *)v29[1];
    if (&v34[v33] == v35)
    {
      unint64_t v37 = (unint64_t)&v34[v33 + 1];
      unint64_t v36 = v29[2];
      if (v37 <= v36)
      {
        v29[1] = v37;
        LODWORD(v38) = 1;
LABEL_76:
        *((_DWORD *)this + 3185) = v33 + v38;
LABEL_77:
        int v30 = 0;
        a3 = 0;
        int v31 = 0;
        *((_DWORD *)this + 3184) = v32 + 1;
        v34[v32] = 112;
        goto LABEL_78;
      }
    }
    else
    {
      unint64_t v36 = v29[2];
    }
    if ((2 * v33) <= 4) {
      uint64_t v38 = 4;
    }
    else {
      uint64_t v38 = (2 * v33);
    }
    size_t v39 = v38 + v33;
    if (!v35 || (unint64_t)&v35[v39] > v36)
    {
      unint64_t v40 = 2 * v29[4];
      if (v40 <= v39 + 1) {
        unint64_t v40 = v39 + 1;
      }
      v29[4] = v40;
      unint64_t v41 = v40 + 8;
      __n128 result = (uint64_t *)malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
      size_t v42 = (char *)result + v41;
      uint64_t *result = v29[3];
      size_t v35 = (char *)(result + 1);
      v29[2] = v42;
      void v29[3] = result;
    }
    v29[1] = &v35[v39];
    if (v33) {
      __n128 result = (uint64_t *)memcpy(v35, this[1591], v33);
    }
    this[1591] = v35;
    LODWORD(v33) = *((_DWORD *)this + 3185);
    uint64_t v34 = v35;
    unsigned int v32 = *((_DWORD *)this + 3184);
    goto LABEL_76;
  }
  int v25 = *((unsigned __int8 *)a3 + 18);
  if (v25 == 1) {
    goto LABEL_49;
  }
  if (v25 != 5 || *((_DWORD *)a3 + 2) != 1)
  {
    int v31 = 321;
    int v30 = 10;
LABEL_78:
    *(_DWORD *)a6 = v30;
    *(void *)(a6 + 8) = a3;
    *(_DWORD *)(a6 + 16) = v31;
    return result;
  }
  a3 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_49:
  if (!*(_DWORD *)a6)
  {
    size_t v26 = (char **)(this + 1591);
    uint64_t v27 = this[1593];
    uint64_t v28 = "Xc";
    goto LABEL_57;
  }
  return result;
}

uint64_t *anonymous namespace'::Remangler::mangleAutoDiffFunctionOrSimpleThunk@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11 = *(unsigned __int8 *)(a2 + 18);
  int v12 = (swift::Demangle::__runtime::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5) {
      int v12 = *(swift::Demangle::__runtime::Node ***)a2;
    }
    else {
      int v12 = 0;
    }
  }
  unsigned int v13 = a5 + 1;
  while (1)
  {
    int v14 = *(unsigned __int8 *)(a2 + 18);
    if (v14 != 5) {
      break;
    }
    if (v12 == (swift::Demangle::__runtime::Node **)(*(void *)a2 + 8 * *(unsigned int *)(a2 + 8))) {
      goto LABEL_19;
    }
LABEL_16:
    int v17 = *v12;
    if (*((_WORD *)*v12 + 8) == 321) {
      goto LABEL_19;
    }
    ++v12;
    if (*(_DWORD *)a6) {
      return result;
    }
  }
  if (v14 == 1) {
    unint64_t v15 = (swift::Demangle::__runtime::Node **)(a2 + 8);
  }
  else {
    unint64_t v15 = 0;
  }
  if (v14 == 2) {
    unint64_t v16 = (swift::Demangle::__runtime::Node **)(a2 + 16);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v12 != v16) {
    goto LABEL_16;
  }
LABEL_19:
  int v19 = (const void **)(a1 + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a3, a4, *(void **)(a1 + 12744));
  if (!*(_DWORD *)a6)
  {
    if (!*(_DWORD *)a6)
    {
      unsigned int v20 = *(_DWORD *)(a1 + 12736);
      size_t v21 = *(unsigned int *)(a1 + 12740);
      std::string::size_type v22 = *(char **)(a1 + 12728);
      if (v20 >= v21)
      {
        unint64_t v23 = *(void **)(a1 + 12744);
        BOOL v24 = (char *)v23[1];
        if (&v22[v21] != v24)
        {
          unint64_t v25 = v23[2];
          goto LABEL_25;
        }
        unint64_t v26 = (unint64_t)&v22[v21 + 1];
        unint64_t v25 = v23[2];
        if (v26 <= v25)
        {
          v23[1] = v26;
          LODWORD(v27) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v21) <= 4) {
            uint64_t v27 = 4;
          }
          else {
            uint64_t v27 = (2 * v21);
          }
          size_t v28 = v27 + v21;
          if (!v24 || (unint64_t)&v24[v28] > v25)
          {
            unint64_t v29 = 2 * v23[4];
            if (v29 <= v28 + 1) {
              unint64_t v29 = v28 + 1;
            }
            v23[4] = v29;
            unint64_t v30 = v29 + 8;
            int v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
            unsigned int v32 = (char *)v31 + v30;
            *int v31 = v23[3];
            BOOL v24 = (char *)(v31 + 1);
            v23[2] = v32;
            void v23[3] = v31;
          }
          v23[1] = &v24[v28];
          if (v21) {
            memcpy(v24, *v19, v21);
          }
          *(void *)(a1 + 12728) = v24;
          LODWORD(v21) = *(_DWORD *)(a1 + 12740);
          std::string::size_type v22 = v24;
          unsigned int v20 = *(_DWORD *)(a1 + 12736);
        }
        *(_DWORD *)(a1 + 12740) = v21 + v27;
      }
      *(_DWORD *)(a1 + 12736) = v20 + 1;
      v22[v20] = 112;
      if (!*(_DWORD *)a6)
      {
        unsigned int v33 = *(_DWORD *)(a1 + 12736);
        size_t v34 = *(unsigned int *)(a1 + 12740);
        size_t v35 = *(char **)(a1 + 12728);
        if (v33 >= v34)
        {
          unint64_t v36 = *(void **)(a1 + 12744);
          unint64_t v37 = (char *)v36[1];
          if (&v35[v34] != v37)
          {
            unint64_t v38 = v36[2];
            goto LABEL_43;
          }
          unint64_t v39 = (unint64_t)&v35[v34 + 1];
          unint64_t v38 = v36[2];
          if (v39 <= v38)
          {
            v36[1] = v39;
            LODWORD(v40) = 1;
          }
          else
          {
LABEL_43:
            if ((2 * v34) <= 4) {
              uint64_t v40 = 4;
            }
            else {
              uint64_t v40 = (2 * v34);
            }
            size_t v41 = v40 + v34;
            if (!v37 || (unint64_t)&v37[v41] > v38)
            {
              unint64_t v42 = 2 * v36[4];
              if (v42 <= v41 + 1) {
                unint64_t v42 = v41 + 1;
              }
              v36[4] = v42;
              unint64_t v43 = v42 + 8;
              __n128 result = (uint64_t *)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
              unint64_t v44 = (char *)result + v43;
              uint64_t *result = v36[3];
              unint64_t v37 = (char *)(result + 1);
              v36[2] = v44;
              void v36[3] = result;
            }
            v36[1] = &v37[v41];
            if (v34) {
              __n128 result = (uint64_t *)memcpy(v37, *v19, v34);
            }
            *(void *)(a1 + 12728) = v37;
            LODWORD(v34) = *(_DWORD *)(a1 + 12740);
            size_t v35 = v37;
            unsigned int v33 = *(_DWORD *)(a1 + 12736);
          }
          *(_DWORD *)(a1 + 12740) = v34 + v40;
        }
        *(_DWORD *)(a1 + 12736) = v33 + 1;
        v35[v33] = 114;
        *(_DWORD *)a6 = 0;
        *(void *)(a6 + 8) = 0;
        *(_DWORD *)(a6 + 16) = 0;
      }
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::__runtime::SubstitutionEntry>(void *a1, uint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v4 >= *(void *)&v2) {
      unint64_t v7 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v4;
  }
  unint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v10 = i[1];
    if (v10 == v4)
    {
      if (i[3] == *(void *)(a2 + 8) && *((unsigned __int8 *)i + 32) == *(unsigned __int8 *)(a2 + 16))
      {
        int v11 = *(swift::Demangle::__runtime::Node **)a2;
        if (*((unsigned char *)i + 32))
        {
          if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals((swift::Demangle::__runtime::SubstitutionEntry *)i[2], *(swift::Demangle::__runtime::Node **)a2, v11))
          {
            return i;
          }
        }
        else if (swift::Demangle::__runtime::SubstitutionEntry::deepEquals((swift::Demangle::__runtime::SubstitutionEntry *)(i + 2), (swift::Demangle::__runtime::Node *)i[2], v11))
        {
          return i;
        }
      }
    }
    else
    {
      if (v6 <= 1)
      {
        v10 &= *(void *)&v2 - 1;
      }
      else if (v10 >= *(void *)&v2)
      {
        v10 %= *(void *)&v2;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = *(void *)(a2 + 8);
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v6)
          {
            if (*((void *)v12 + 3) == *(void *)(a2 + 8) && v12[32] == *(unsigned char *)(a2 + 16))
            {
              int v14 = *(swift::Demangle::__runtime::Node **)a2;
              if (v12[32])
              {
                if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals(*((swift::Demangle::__runtime::SubstitutionEntry **)v12 + 2), *(swift::Demangle::__runtime::Node **)a2, v14))
                {
                  return v12;
                }
              }
              else if (swift::Demangle::__runtime::SubstitutionEntry::deepEquals((swift::Demangle::__runtime::SubstitutionEntry *)(v12 + 16), *((swift::Demangle::__runtime::Node **)v12 + 2), v14))
              {
                return v12;
              }
            }
          }
          else
          {
            if (v10 <= 1)
            {
              v13 &= v7 - 1;
            }
            else if (v13 >= v7)
            {
              v13 %= v7;
            }
            if (v13 != v3) {
              break;
            }
          }
          int v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  int v12 = (char *)operator new(0x30uLL);
  *(void *)int v12 = 0;
  *((void *)v12 + 1) = v6;
  long long v15 = a3[1];
  *((_OWORD *)v12 + 1) = *a3;
  *((_OWORD *)v12 + 2) = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_36;
    }
    if (prime < *(void *)&v22)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v22 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_36:
      }
        std::__hash_table<swift::TargetMetadata<swift::InProcess> const*,std::hash<swift::TargetMetadata<swift::InProcess> const*>,std::equal_to<swift::TargetMetadata<swift::InProcess> const*>,std::allocator<swift::TargetMetadata<swift::InProcess> const*>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *(void *)int v12 = *v27;
LABEL_60:
    *uint64_t v27 = v12;
    goto LABEL_61;
  }
  *(void *)int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v28 = *(void *)(*(void *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7) {
        v28 %= v7;
      }
    }
    else
    {
      v28 &= v7 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_60;
  }
LABEL_61:
  ++*(void *)(a1 + 24);
  return v12;
}

uint64_t __swift::__runtime::llvm::function_ref<swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,void const*)>::callback_fn<swift::Demangle::__runtime::mangleNode(swift::Demangle::__runtime::Node *)::$_0>()
{
  return 0;
}

const char *swift::Demangle::__runtime::getNodeKindString(unsigned int a1)
{
  if (a1 > 0x162) {
    return "Demangle::Node::Kind::???";
  }
  else {
    return off_1E4FC7AE0[(__int16)a1];
  }
}

double swift::Demangle::__runtime::getNodeTreeAsString@<D0>(swift::Demangle::__runtime *this@<X0>, std::string *a2@<X8>)
{
  memset(&v5, 0, sizeof(v5));
  printNode(&v5, this, 0);
  double result = *(double *)&v5.__r_.__value_.__l.__data_;
  *a2 = v5;
  return result;
}

void printNode(std::string *a1, const swift::Demangle::__runtime::Node *a2, int a3)
{
  for (int i = 2 * a3; i; --i)
    std::string::push_back(a1, 32);
  if (a2)
  {
    std::string::append(a1, "kind=", 5uLL);
    unint64_t v7 = (char *)a2 + 16;
    NodeKindString = swift::Demangle::__runtime::getNodeKindString(*((unsigned __int16 *)a2 + 8));
    std::string::size_type v9 = strlen(NodeKindString);
    std::string::append(a1, NodeKindString, v9);
    int v10 = *((unsigned __int8 *)a2 + 18);
    if (v10 == 3)
    {
      std::string::append(a1, ", text=\"", 8uLL);
      std::string::append(a1, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      std::string::push_back(a1, 34);
      int v10 = *((unsigned __int8 *)a2 + 18);
    }
    if (v10 == 4)
    {
      std::string::append(a1, ", index=", 8uLL);
      swift::Demangle::__runtime::DemanglerPrinter::operator<<(a1, *(void *)a2);
    }
    std::string::push_back(a1, 10);
    int v11 = *((unsigned __int8 *)a2 + 18);
    int v12 = (const std::string::value_type *)a2;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        unint64_t v13 = *(const std::string::value_type **)a2;
        int v12 = *(const std::string::value_type **)a2;
        goto LABEL_19;
      }
      int v12 = 0;
    }
    switch(v11)
    {
      case 1:
        unint64_t v7 = (char *)a2 + 8;
        break;
      case 2:
        break;
      case 5:
        unint64_t v13 = *(const std::string::value_type **)a2;
LABEL_19:
        unint64_t v7 = &v13[8 * *((unsigned int *)a2 + 2)];
        if (v12 == v7) {
          return;
        }
        goto LABEL_23;
      default:
        unint64_t v7 = 0;
        if (!v12) {
          return;
        }
LABEL_23:
        unsigned int v14 = a3 + 1;
        do
        {
          long long v15 = *(const swift::Demangle::__runtime::Node **)v12;
          v12 += 8;
          printNode((swift::Demangle::__runtime::DemanglerPrinter *)a1, v15, v14);
        }
        while (v12 != v7);
        return;
    }
    if (v12 == v7) {
      return;
    }
    goto LABEL_23;
  }

  std::string::append(a1, "<<NULL>>", 8uLL);
}

void swift::Demangle::__runtime::Node::dump(swift::Demangle::__runtime::Node *this)
{
  memset(&v3, 0, sizeof(v3));
  printNode(&v3, this, 0);
  std::string __p = v3;
  if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v3.__r_.__value_.__r.__words[0];
  }
  fputs((const char *)p_p, (FILE *)*MEMORY[0x1E4F143C8]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void swift::Demangle::__runtime::fatal(swift::Demangle::__runtime *this, char *a2, const char *a3, char *a4, ...)
{
  va_start(va, a4);
  swift::Demangle::__runtime::fatalv(this, a2, va, a4);
}

void swift::Demangle::__runtime::fatalv(swift::Demangle::__runtime *this, char *__format, va_list a3, char *a4)
{
}

void demangleFatal(char *__format, va_list a2, char *a3)
{
  int v4 = vsnprintf(0, 0, __format, a2);
  if ((v4 & 0x80000000) == 0)
  {
    size_t v6 = (v4 + 1);
    unint64_t v7 = (char *)malloc_type_malloc(v6, 0xAB2EFD28uLL);
    if (v7)
    {
      unint64_t v8 = v7;
      if ((vsnprintf(v7, v6, __format, a2) & 0x80000000) == 0)
      {
        reportError(v8, v9);
        abort();
      }
      free(v8);
    }
  }
  reportError("unable to format fatal error message", v5);
  abort();
}

void reportError(const char *a1, const char *a2)
{
  std::string v3 = (FILE **)MEMORY[0x1E4F143C8];
  fputs(a1, (FILE *)*MEMORY[0x1E4F143C8]);
  fflush(*v3);
  asl_log(0, 0, 3, "%s", a1);
  std::string v5 = 0;
  std::string::size_type v9 = 0;
  for (int i = (void *)qword_1E8EBFEB0[0]; ; int i = v8)
  {
    if (v5)
    {
      free(v5);
      std::string::size_type v9 = 0;
    }
    if (i) {
      break;
    }
    unint64_t v7 = strdup(a1);
    unint64_t v8 = 0;
    std::string::size_type v9 = v7;
    atomic_compare_exchange_strong_explicit(qword_1E8EBFEB0, (unint64_t *)&v8, (unint64_t)v7, memory_order_release, memory_order_relaxed);
    if (!v8) {
      return;
    }
LABEL_3:
    std::string v5 = v9;
  }
  demangle_asprintf(&v9, v4, i, a1);
  unint64_t v8 = i;
  atomic_compare_exchange_strong_explicit(qword_1E8EBFEB0, (unint64_t *)&v8, (unint64_t)v9, memory_order_release, memory_order_relaxed);
  if (v8 != i) {
    goto LABEL_3;
  }
  if (malloc_size(i))
  {
    free(i);
  }
}

void demangle_asprintf(char **a1, const char *a2, ...)
{
  va_start(va, a2);
  int v3 = vsnprintf(0, 0, "%s%s", va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    size_t v4 = (v3 + 1);
    std::string v5 = (char *)malloc_type_malloc(v4, 0xAB2EFD28uLL);
    if (v5)
    {
      size_t v6 = v5;
      if (vsnprintf(v5, v4, "%s%s", va) < 0) {
        free(v6);
      }
      else {
        *a1 = v6;
      }
    }
  }
}

swift::Demangle::__runtime::Node *swift::Demangle::__runtime::demangleOldSymbolAsNode(_WORD *a1, size_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  int v3 = 0;
  std::string __p = 0;
  unint64_t v144 = 0;
  uint64_t v145 = 0;
  char __src = a1;
  size_t __len = a2;
  uint64_t v148 = a3;
  if (a2 < 2) {
    goto LABEL_4;
  }
  if (*a1 != 21599) {
    goto LABEL_3;
  }
  size_t v6 = a1 + 1;
  unint64_t v7 = a2 - 2;
  char __src = a1 + 1;
  size_t __len = a2 - 2;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 99);
  if (v7 < 2) {
    goto LABEL_228;
  }
  if (*v6 != 21332)
  {
    switch(*v6)
    {
      case 0x6F54:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        std::string::size_type v9 = a3;
        __int16 v10 = 164;
        break;
      case 0x4F54:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        std::string::size_type v9 = a3;
        __int16 v10 = 160;
        break;
      case 0x4454:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        std::string::size_type v9 = a3;
        __int16 v10 = 55;
        break;
      case 0x6454:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        std::string::size_type v9 = a3;
        __int16 v10 = 56;
        break;
      case 0x5654:
        char __src = v6 + 1;
        size_t __len = v7 - 2;
        std::string::size_type v9 = a3;
        __int16 v10 = 256;
        break;
      default:
        goto LABEL_228;
    }
    unint64_t v132 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v9, v10);
    swift::Demangle::__runtime::Node::addChild(Node, v132, a3);
LABEL_228:
    if (!v133) {
      goto LABEL_3;
    }
    swift::Demangle::__runtime::Node::addChild(Node, v133, v148);
    size_t v134 = __len;
    if (__len)
    {
      size_t v135 = v148;
      unint64_t v136 = __src;
      char __src = (char *)__src + __len;
      size_t __len = 0;
      unint64_t v137 = (char *)*((void *)v148 + 1);
      if (!v137 || (unint64_t v138 = &v137[v134], (unint64_t)&v137[v134] > *((void *)v148 + 2)))
      {
        unint64_t v139 = 2 * *((void *)v148 + 4);
        if (v139 <= v134 + 1) {
          unint64_t v139 = v134 + 1;
        }
        *((void *)v148 + 4) = v139;
        unint64_t v140 = v139 + 8;
        uint64_t v141 = malloc_type_malloc(v139 + 8, 0xD0263BC5uLL);
        *uint64_t v141 = *((void *)v135 + 3);
        unint64_t v137 = (char *)(v141 + 1);
        *((void *)v135 + 2) = (char *)v141 + v140;
        *((void *)v135 + 3) = v141;
        unint64_t v138 = (char *)v141 + v134 + 8;
      }
      *((void *)v135 + 1) = v138;
      memmove(v137, v136, v134);
      NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v135, 221, (uint64_t)v137, v134);
      swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, v148);
    }
    int v3 = Node;
    goto LABEL_4;
  }
  int v11 = (unsigned __int8 *)(v6 + 1);
  size_t v12 = v7 - 2;
  char __src = v6 + 1;
  size_t __len = v7 - 2;
  if (v7 == 2) {
    goto LABEL_3;
  }
  unint64_t v13 = "u16";
  while (1)
  {
    int v14 = *v11;
    switch(v14)
    {
      case 'f':
        char __src = v11 + 1;
        size_t __len = v12 - 1;
        float v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 77);
        size_t v17 = __len;
        if (__len)
        {
          BOOL v18 = (char *)__src;
          int v19 = *(unsigned __int8 *)__src;
          if (v19 == 113)
          {
            char __src = (char *)__src + 1;
            --__len;
            unint64_t v20 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 217);
            swift::Demangle::__runtime::Node::addChild(v16, v20, v148);
            size_t v17 = __len;
            size_t v21 = v148;
            if (!__len)
            {
              uint64_t v32 = 4294967294;
              goto LABEL_46;
            }
            BOOL v18 = (char *)__src;
            LOBYTE(v19) = *(unsigned char *)__src;
          }
          else
          {
            size_t v21 = v148;
          }
          char __src = v18 + 1;
          size_t __len = v17 - 1;
          uint64_t v32 = ((char)v19 - 48);
        }
        else
        {
          size_t v21 = v148;
          uint64_t v32 = 4294967294;
        }
LABEL_46:
        unsigned int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v21, 216, v32);
        while (1)
        {
          while (1)
          {
            swift::Demangle::__runtime::Node::addChild(v16, v33, v148);
            size_t v29 = __len;
            if (__len)
            {
              unint64_t v30 = (char *)__src;
              if (*(unsigned char *)__src == 95) {
                goto LABEL_217;
              }
            }
            unsigned int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 78);
            size_t v34 = __len;
            if (__len < 2)
            {
              if (!__len) {
                goto LABEL_3;
              }
              size_t v35 = (unsigned __int8 *)__src;
              goto LABEL_52;
            }
            size_t v35 = (unsigned __int8 *)__src;
            if (*(_WORD *)__src == 24430)
            {
              unint64_t v39 = (char *)__src + 2;
              size_t v40 = __len - 2;
              goto LABEL_146;
            }
            if (*(_WORD *)__src == 28771) {
              break;
            }
            switch(*(_WORD *)__src)
            {
              case 0x6C63:
                char __src = (char *)__src + 2;
                __len -= 2;
                if (!v43) {
                  goto LABEL_3;
                }
                unint64_t v44 = v43;
                unint64_t v45 = v13;
                unint64_t v46 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 5);
                swift::Demangle::__runtime::Node::addChild(v33, v46, v148);
                uint64_t v47 = v148;
                size_t v48 = *(void *)(v44 + 8);
                if (v48)
                {
                  unint64_t v49 = *(const void **)v44;
                  unint64_t v50 = (char *)*((void *)v148 + 1);
                  if (!v50 || (size_t v51 = &v50[v48], (unint64_t)&v50[v48] > *((void *)v148 + 2)))
                  {
                    unint64_t v52 = 2 * *((void *)v148 + 4);
                    if (v52 <= v48 + 1) {
                      unint64_t v52 = v48 + 1;
                    }
                    *((void *)v148 + 4) = v52;
                    unint64_t v53 = v52 + 8;
                    unint64_t v54 = malloc_type_malloc(v52 + 8, 0xD0263BC5uLL);
                    void *v54 = *((void *)v47 + 3);
                    unint64_t v50 = (char *)(v54 + 1);
                    *((void *)v47 + 2) = (char *)v54 + v53;
                    *((void *)v47 + 3) = v54;
                    size_t v51 = (char *)v54 + v48 + 8;
                  }
                  *((void *)v47 + 1) = v51;
                  memmove(v50, v49, v48);
                }
                else
                {
                  unint64_t v50 = 0;
                }
                size_t v79 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v47, 81, (uint64_t)v50, v48);
                swift::Demangle::__runtime::Node::addChild(v33, v79, v148);
                unint64_t v13 = v45;
                if (__len)
                {
LABEL_138:
                  if (*(unsigned char *)__src != 95) {
                    goto LABEL_139;
                  }
                }
                else
                {
LABEL_139:
                  while (1)
                  {
                    if (!v80) {
                      break;
                    }
                    unint64_t v81 = v80;
                    unint64_t v82 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 232);
                    swift::Demangle::__runtime::Node::addChild(v82, v81, v148);
                    if (!v82) {
                      break;
                    }
                    swift::Demangle::__runtime::Node::addChild(v33, v82, v148);
                    if (__len) {
                      goto LABEL_138;
                    }
                  }
                }
                if (!__len || *(unsigned char *)__src != 95) {
                  goto LABEL_3;
                }
                unint64_t v39 = (char *)__src + 1;
                size_t v40 = __len - 1;
LABEL_146:
                char __src = v39;
                size_t __len = v40;
                break;
              case 0x5F69:
                char __src = (char *)__src + 2;
                __len -= 2;
                unint64_t v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 6);
                if (!v38) {
                  goto LABEL_3;
                }
                goto LABEL_76;
              case 0x5F6B:
                char __src = (char *)__src + 2;
                __len -= 2;
                unint64_t v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 7);
                if (!v38) {
                  goto LABEL_3;
                }
                goto LABEL_76;
              case 0x5F72:
                char __src = (char *)__src + 2;
                __len -= 2;
                unint64_t v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 8);
                if (!v38) {
                  goto LABEL_3;
                }
                goto LABEL_76;
              default:
LABEL_52:
                int v36 = *v35;
                if (v36 == 100)
                {
                  ++v35;
                  size_t v34 = __len - 1;
                  char __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  int v36 = *v35;
                  uint64_t v37 = 64;
                }
                else
                {
                  uint64_t v37 = 0;
                }
                if (v36 == 103)
                {
                  ++v35;
                  --v34;
                  char __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  v37 |= 0x80uLL;
                  int v36 = *v35;
                }
                if (v36 == 111)
                {
                  ++v35;
                  --v34;
                  char __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  v37 |= 0x200uLL;
                  int v36 = *v35;
                }
                if (v36 == 115)
                {
                  ++v35;
                  --v34;
                  char __src = v35;
                  size_t __len = v34;
                  if (!v34) {
                    goto LABEL_3;
                  }
                  v37 |= 0x100uLL;
                  int v36 = *v35;
                }
                if (v36 != 95) {
                  goto LABEL_3;
                }
                char __src = v35 + 1;
                size_t __len = v34 - 1;
                if (!v37) {
                  goto LABEL_3;
                }
                unint64_t v38 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, v37);
                if (!v38) {
                  goto LABEL_3;
                }
LABEL_76:
                swift::Demangle::__runtime::Node::addChild(v33, v38, v148);
                break;
            }
          }
          size_t v41 = (char *)__src + 2;
          size_t v42 = __len - 2;
          char __src = (char *)__src + 2;
          __len -= 2;
          if (v34 - 2 >= 2)
          {
            if (*v41 != 29286) {
              goto LABEL_90;
            }
            if (v42 >= 2) {
              uint64_t v83 = 2;
            }
            else {
              uint64_t v83 = v42;
            }
            char __src = (char *)v41 + v83;
            size_t __len = v42 - v83;
            if (!v84 || !__len || *(unsigned char *)__src != 95) {
              goto LABEL_3;
            }
            unint64_t v57 = v84;
            int v58 = v13;
            char __src = (char *)__src + 1;
            --__len;
            int v59 = v148;
            uint64_t v60 = 0;
LABEL_154:
            size_t v85 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v59, 80, v60);
            swift::Demangle::__runtime::Node::addChild(v33, v85, v148);
            BOOL v86 = v148;
            size_t v87 = *(void *)(v57 + 8);
            if (v87)
            {
              unint64_t v88 = *(const void **)v57;
              unint64_t v89 = (char *)*((void *)v148 + 1);
              if (!v89 || (size_t v90 = &v89[v87], (unint64_t)&v89[v87] > *((void *)v148 + 2)))
              {
                unint64_t v91 = 2 * *((void *)v148 + 4);
                if (v91 <= v87 + 1) {
                  unint64_t v91 = v87 + 1;
                }
                *((void *)v148 + 4) = v91;
                unint64_t v92 = v91 + 8;
                unint64_t v93 = malloc_type_malloc(v91 + 8, 0xD0263BC5uLL);
                *unint64_t v93 = *((void *)v86 + 3);
                unint64_t v89 = (char *)(v93 + 1);
                *((void *)v86 + 2) = (char *)v93 + v92;
                *((void *)v86 + 3) = v93;
                size_t v90 = (char *)v93 + v87 + 8;
              }
              *((void *)v86 + 1) = v90;
              memmove(v89, v88, v87);
            }
            else
            {
              unint64_t v89 = 0;
            }
            uint64_t v94 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v86, 81, (uint64_t)v89, v87);
            swift::Demangle::__runtime::Node::addChild(v33, v94, v148);
            unint64_t v13 = v58;
          }
          else
          {
            if (v34 < 3) {
              goto LABEL_3;
            }
LABEL_90:
            int v55 = *(unsigned __int8 *)v41;
            if (v55 == 105)
            {
              uint64_t v61 = (unsigned __int8 *)v41 + 1;
              memset(&v149, 0, sizeof(v149));
              size_t v62 = v42 - 1;
              char __src = (char *)v41 + 1;
              size_t __len = v62;
              if (v62)
              {
                while (1)
                {
                  int v63 = *v61;
                  if (v63 == 95) {
                    break;
                  }
                  std::string::push_back(&v149, v63);
                  uint64_t v61 = (unsigned __int8 *)__src;
                  if (__len) {
                    uint64_t v61 = (unsigned __int8 *)__src + 1;
                  }
                  size_t v62 = __len - (__len != 0);
                  char __src = v61;
                  size_t __len = v62;
                  if (!v62) {
                    goto LABEL_181;
                  }
                }
                char __src = v61 + 1;
                size_t __len = v62 - 1;
                size_t v95 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 2);
                swift::Demangle::__runtime::Node::addChild(v33, v95, v148);
                char v96 = v148;
                if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v97 = &v149;
                }
                else {
                  char v97 = (std::string *)v149.__r_.__value_.__r.__words[0];
                }
                if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v149.__r_.__value_.__l.__size_;
                }
                if (size)
                {
                  uint64_t v99 = (char *)*((void *)v148 + 1);
                  if (!v99 || (unint64_t v100 = &v99[size], (unint64_t)&v99[size] > *((void *)v148 + 2)))
                  {
                    unint64_t v101 = 2 * *((void *)v148 + 4);
                    if (v101 <= size + 1) {
                      unint64_t v101 = size + 1;
                    }
                    *((void *)v148 + 4) = v101;
                    unint64_t v102 = v101 + 8;
                    size_t v103 = malloc_type_malloc(v101 + 8, 0xD0263BC5uLL);
                    *size_t v103 = *((void *)v96 + 3);
                    uint64_t v99 = (char *)(v103 + 1);
                    *((void *)v96 + 2) = (char *)v103 + v102;
                    *((void *)v96 + 3) = v103;
                    unint64_t v100 = (char *)v103 + size + 8;
                  }
                  *((void *)v96 + 1) = v100;
                  memmove(v99, v97, size);
                }
                else
                {
                  uint64_t v99 = 0;
                }
                uint64_t v108 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v96, 81, (uint64_t)v99, size);
                swift::Demangle::__runtime::Node::addChild(v33, v108, v148);
                char v107 = 1;
                unint64_t v13 = "u16";
                goto LABEL_182;
              }
            }
            else
            {
              if (v55 == 103)
              {
                char __src = (char *)v41 + 1;
                size_t __len = v42 - 1;
                if (!v56 || !__len || *(unsigned char *)__src != 95) {
                  goto LABEL_3;
                }
                unint64_t v57 = v56;
                int v58 = v13;
                char __src = (char *)__src + 1;
                --__len;
                int v59 = v148;
                uint64_t v60 = 1;
                goto LABEL_154;
              }
              if (v42 >= 2 && *v41 == 27750)
              {
                unint64_t v104 = (unsigned __int8 *)(v41 + 1);
                size_t v105 = v42 - 2;
                char __src = v104;
                size_t __len = v42 - 2;
                memset(&v149, 0, sizeof(v149));
                if (v42 >= 3)
                {
                  while (1)
                  {
                    int v106 = *v104;
                    if (v106 == 95) {
                      break;
                    }
                    std::string::push_back(&v149, v106);
                    unint64_t v104 = (unsigned __int8 *)__src;
                    if (__len) {
                      unint64_t v104 = (unsigned __int8 *)__src + 1;
                    }
                    size_t v105 = __len - (__len != 0);
                    char __src = v104;
                    size_t __len = v105;
                    if (!v105) {
                      goto LABEL_181;
                    }
                  }
                  if (v105)
                  {
                    char __src = v104 + 1;
                    size_t __len = v105 - 1;
                    unint64_t v109 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 3);
                    swift::Demangle::__runtime::Node::addChild(v33, v109, v148);
                    unint64_t v110 = v148;
                    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      unint64_t v111 = &v149;
                    }
                    else {
                      unint64_t v111 = (std::string *)v149.__r_.__value_.__r.__words[0];
                    }
                    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type v112 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type v112 = v149.__r_.__value_.__l.__size_;
                    }
                    if (v112)
                    {
                      size_t v113 = (char *)*((void *)v148 + 1);
                      if (!v113 || (unint64_t v114 = &v113[v112], (unint64_t)&v113[v112] > *((void *)v148 + 2)))
                      {
                        unint64_t v115 = 2 * *((void *)v148 + 4);
                        if (v115 <= v112 + 1) {
                          unint64_t v115 = v112 + 1;
                        }
                        *((void *)v148 + 4) = v115;
                        unint64_t v116 = v115 + 8;
                        int v117 = malloc_type_malloc(v115 + 8, 0xD0263BC5uLL);
                        *int v117 = *((void *)v110 + 3);
                        size_t v113 = (char *)(v117 + 1);
                        *((void *)v110 + 2) = (char *)v117 + v116;
                        *((void *)v110 + 3) = v117;
                        unint64_t v114 = (char *)v117 + v112 + 8;
                      }
                      *((void *)v110 + 1) = v114;
                      memmove(v113, v111, v112);
                    }
                    else
                    {
                      size_t v113 = 0;
                    }
                    size_t v118 = v110;
                    uint64_t v119 = (uint64_t)v113;
                    uint64_t v120 = v112;
                    goto LABEL_215;
                  }
                  goto LABEL_202;
                }
              }
              else
              {
                if (v55 != 115) {
                  goto LABEL_3;
                }
                char __src = (char *)v41 + 1;
                size_t __len = v42 - 1;
                if (v42 == 1) {
                  goto LABEL_3;
                }
                if (*((unsigned char *)v41 + 1) != 101) {
                  goto LABEL_3;
                }
                char __src = v41 + 1;
                size_t __len = v42 - 2;
                if (v42 == 2) {
                  goto LABEL_3;
                }
                int v64 = *((unsigned __int8 *)v41 + 2);
                if ((v64 - 50) < 0xFFFFFFFE) {
                  goto LABEL_3;
                }
                memset(&v149, 0, sizeof(v149));
                if (v64 == 48) {
                  size_t v65 = "u8";
                }
                else {
                  size_t v65 = v13;
                }
                std::string::append(&v149, v65);
                unsigned int v66 = __src;
                if (__len) {
                  unsigned int v66 = (char *)__src + 1;
                }
                size_t v67 = __len - (__len != 0);
                char __src = v66;
                size_t __len = v67;
                if (v67)
                {
                  if (*v66 == 118)
                  {
                    char __src = v66 + 1;
                    size_t __len = v67 - 1;
                    if (v68)
                    {
                      if (__len)
                      {
                        if (*(unsigned char *)__src == 95)
                        {
                          unint64_t v69 = v68;
                          char __src = (char *)__src + 1;
                          --__len;
                          size_t v70 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 80, 4);
                          swift::Demangle::__runtime::Node::addChild(v33, v70, v148);
                          unint64_t v71 = v148;
                          if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v72 = &v149;
                          }
                          else {
                            uint64_t v72 = (std::string *)v149.__r_.__value_.__r.__words[0];
                          }
                          if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            std::string::size_type v73 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
                          }
                          else {
                            std::string::size_type v73 = v149.__r_.__value_.__l.__size_;
                          }
                          if (v73)
                          {
                            unint64_t v74 = (char *)*((void *)v148 + 1);
                            if (!v74 || (unint64_t v75 = &v74[v73], (unint64_t)&v74[v73] > *((void *)v148 + 2)))
                            {
                              unint64_t v76 = 2 * *((void *)v148 + 4);
                              if (v76 <= v73 + 1) {
                                unint64_t v76 = v73 + 1;
                              }
                              *((void *)v148 + 4) = v76;
                              unint64_t v77 = v76 + 8;
                              uint64_t v78 = malloc_type_malloc(v76 + 8, 0xD0263BC5uLL);
                              *uint64_t v78 = *((void *)v71 + 3);
                              unint64_t v74 = (char *)(v78 + 1);
                              *((void *)v71 + 2) = (char *)v78 + v77;
                              *((void *)v71 + 3) = v78;
                              unint64_t v75 = (char *)v78 + v73 + 8;
                            }
                            *((void *)v71 + 1) = v75;
                            memmove(v74, v72, v73);
                          }
                          else
                          {
                            unint64_t v74 = 0;
                          }
                          unint64_t v121 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v71, 81, (uint64_t)v74, v73);
                          swift::Demangle::__runtime::Node::addChild(v33, v121, v148);
                          uint64_t v122 = v148;
                          size_t v123 = *(void *)(v69 + 8);
                          if (v123)
                          {
                            unint64_t v124 = *(const void **)v69;
                            unint64_t v125 = (char *)*((void *)v148 + 1);
                            if (!v125 || (unint64_t v126 = &v125[v123], (unint64_t)&v125[v123] > *((void *)v148 + 2)))
                            {
                              unint64_t v127 = 2 * *((void *)v148 + 4);
                              if (v127 <= v123 + 1) {
                                unint64_t v127 = v123 + 1;
                              }
                              *((void *)v148 + 4) = v127;
                              unint64_t v128 = v127 + 8;
                              unint64_t v129 = malloc_type_malloc(v127 + 8, 0xD0263BC5uLL);
                              *unint64_t v129 = *((void *)v122 + 3);
                              unint64_t v125 = (char *)(v129 + 1);
                              *((void *)v122 + 2) = (char *)v129 + v128;
                              *((void *)v122 + 3) = v129;
                              unint64_t v126 = (char *)v129 + v123 + 8;
                            }
                            *((void *)v122 + 1) = v126;
                            memmove(v125, v124, v123);
                          }
                          else
                          {
                            unint64_t v125 = 0;
                          }
                          size_t v118 = v122;
                          uint64_t v119 = (uint64_t)v125;
                          uint64_t v120 = v123;
LABEL_215:
                          unint64_t v130 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v118, 81, v119, v120);
                          swift::Demangle::__runtime::Node::addChild(v33, v130, v148);
                          char v107 = 1;
                          unint64_t v13 = "u16";
                          goto LABEL_182;
                        }
LABEL_202:
                        char v107 = 0;
                        goto LABEL_182;
                      }
                    }
                  }
                }
              }
            }
LABEL_181:
            char v107 = 0;
LABEL_182:
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v149.__r_.__value_.__l.__data_);
            }
            int v3 = 0;
            if ((v107 & 1) == 0) {
              goto LABEL_4;
            }
          }
        }
      case 'g':
        __int16 v15 = 91;
        break;
      case 'r':
        __int16 v15 = 92;
        break;
      default:
        goto LABEL_3;
    }
    char __src = v11 + 1;
    size_t __len = v12 - 1;
    float v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, v15);
    size_t v22 = __len;
    if (!__len)
    {
      uint64_t v26 = v148;
      uint64_t v27 = 4294967294;
      goto LABEL_33;
    }
    unint64_t v23 = (char *)__src;
    int v24 = *(unsigned __int8 *)__src;
    if (v24 != 113)
    {
      uint64_t v26 = v148;
      goto LABEL_32;
    }
    char __src = (char *)__src + 1;
    --__len;
    uint64_t v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 217);
    swift::Demangle::__runtime::Node::addChild(v16, v25, v148);
    size_t v22 = __len;
    uint64_t v26 = v148;
    if (__len)
    {
      unint64_t v23 = (char *)__src;
      LOBYTE(v24) = *(unsigned char *)__src;
LABEL_32:
      char __src = v23 + 1;
      size_t __len = v22 - 1;
      uint64_t v27 = ((char)v24 - 48);
      goto LABEL_33;
    }
    uint64_t v27 = 4294967294;
LABEL_33:
    unint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v26, 216, v27);
    while (1)
    {
      swift::Demangle::__runtime::Node::addChild(v16, v28, v148);
      size_t v29 = __len;
      if (__len)
      {
        unint64_t v30 = (char *)__src;
        if (*(unsigned char *)__src == 95) {
          break;
        }
      }
      unint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 94);
      if (!v3) {
        goto LABEL_4;
      }
      int v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v148, 232);
      swift::Demangle::__runtime::Node::addChild(v31, v3, v148);
      if (!v31) {
        goto LABEL_3;
      }
      while (1)
      {
        swift::Demangle::__runtime::Node::addChild(v28, v31, v148);
        if (__len)
        {
          if (*(unsigned char *)__src == 95) {
            break;
          }
        }
        int v3 = 0;
        if (!v31) {
          goto LABEL_4;
        }
      }
      char __src = (char *)__src + 1;
      --__len;
    }
LABEL_217:
    char __src = v30 + 1;
    size_t __len = v29 - 1;
    if (!v16) {
      goto LABEL_3;
    }
    swift::Demangle::__runtime::Node::addChild(Node, v16, v148);
    unint64_t v144 = __p;
    if (__len < 4) {
      break;
    }
    int v131 = __src;
    if (*(_DWORD *)__src != 1398035551) {
      goto LABEL_239;
    }
    int v3 = 0;
    int v11 = (unsigned __int8 *)__src + 4;
    size_t v12 = __len - 4;
    char __src = (char *)__src + 4;
    size_t __len = v12;
    if (!v12) {
      goto LABEL_4;
    }
  }
  if (__len >= 2)
  {
    int v131 = __src;
LABEL_239:
    if (*v131 == 21599)
    {
      char __src = v131 + 1;
      __len -= 2;
      goto LABEL_228;
    }
  }
LABEL_3:
  int v3 = 0;
LABEL_4:
  if (__p)
  {
    unint64_t v144 = __p;
    operator delete(__p);
  }
  return v3;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleGlobal(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0;
  }
  unint64_t v3 = *((void *)this + 4);
  if (!v3) {
    return 0;
  }
  std::string v5 = (unsigned char *)*((void *)this + 3);
  if (*v5 != 77)
  {
    unint64_t v8 = v3 - 2;
    if (v3 < 2 || *(_WORD *)v5 != 16720)
    {
      switch(*v5)
      {
        case 'T':
          unint64_t v9 = v3 - 1;
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v9;
          if (!v9) {
            return 0;
          }
          int v10 = v5[1];
          switch(v10)
          {
            case 'r':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = 200;
              break;
            case 'W':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 196);
              unsigned int v36 = a2 + 1;
              if (v37)
              {
                swift::Demangle::__runtime::Node::addChild(Node, v37, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (v14) {
                  goto LABEL_17;
                }
              }
              return 0;
            case 'R':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v8;
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = 201;
              break;
            default:
              return 0;
          }
          unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v11, v12);
            return 0;
          return Node;
        case 'W':
          unint64_t v22 = v3 - 1;
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v22;
          unint64_t Node = 0;
          if (v22)
          {
            switch(v5[1])
            {
              case 'G':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v23 = (void *)*((void *)this + 5);
                __int16 v24 = 88;
                goto LABEL_67;
              case 'I':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v23 = (void *)*((void *)this + 5);
                __int16 v24 = 89;
                goto LABEL_67;
              case 'L':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v38 = (void *)*((void *)this + 5);
                __int16 v39 = 136;
                goto LABEL_70;
              case 'P':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v23 = (void *)*((void *)this + 5);
                __int16 v24 = 197;
                goto LABEL_67;
              case 'T':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 9);
                unsigned int v40 = a2 + 1;
                if (!v41) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(Node, v41, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v42) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(Node, v42, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 'V':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                size_t v6 = (void *)*((void *)this + 5);
                __int16 v7 = 253;
                goto LABEL_16;
              case 'a':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v23 = (void *)*((void *)this + 5);
                __int16 v24 = 198;
LABEL_67:
                unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v23, v24);
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 'l':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v38 = (void *)*((void *)this + 5);
                __int16 v39 = 135;
LABEL_70:
                unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v38, v39);
                unsigned int v43 = a2 + 1;
                if (!v44) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(Node, v44, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 't':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 6);
                if (!v45) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(Node, v45, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v14) {
                  return 0;
                }
                goto LABEL_17;
              case 'v':
                *((void *)this + 3) = v5 + 2;
                *((void *)this + 4) = v8;
                unint64_t v46 = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 73);
                uint64_t v47 = *((void *)this + 4);
                if (!v47) {
                  return 0;
                }
                size_t v48 = (swift::Demangle::__runtime::Node *)v46;
                unint64_t v49 = (unsigned __int8 *)*((void *)this + 3);
                int v50 = *v49;
                if (v50 == 100)
                {
                  uint64_t v51 = 0;
                }
                else
                {
                  unint64_t Node = 0;
                  if (v50 != 105) {
                    return Node;
                  }
                  uint64_t v51 = 1;
                }
                *((void *)this + 3) = v49 + 1;
                *((void *)this + 4) = v47 - 1;
                unint64_t v52 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 52, v51);
                swift::Demangle::__runtime::Node::addChild(v48, v52, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v53) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(v48, v53, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                unint64_t Node = v48;
                break;
              default:
                return Node;
            }
          }
          return Node;
        case 't':
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v3 - 1;
          uint64_t v25 = (void *)*((void *)this + 5);
          __int16 v26 = 236;
LABEL_43:
          unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v25, v26);
          if (!v33) {
            return 0;
          }
          size_t v34 = v33;
          size_t v35 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
          swift::Demangle::__runtime::Node::addChild(v35, v34, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          if (!v35) {
            return 0;
          }
          float v16 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
          size_t v17 = Node;
          __int16 v15 = v35;
          goto LABEL_18;
        case 'w':
          *((void *)this + 3) = v5 + 1;
          *((void *)this + 4) = v3 - 1;
          if ((v27 & 0xFF00000000) == 0) {
            return 0;
          }
          unsigned int v28 = v27;
          unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 252);
          size_t v29 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 102, v28);
          swift::Demangle::__runtime::Node::addChild(Node, v29, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          if (!v14) {
            return 0;
          }
          goto LABEL_17;
        default:
          unsigned int v20 = a2 + 1;
      }
    }
    BOOL v18 = v5 + 2;
    *((void *)this + 3) = v18;
    *((void *)this + 4) = v3 - 2;
    if (v3 >= 3 && *v18 == 111)
    {
      *((void *)this + 3) = v18 + 1;
      *((void *)this + 4) = v3 - 3;
      __int16 v19 = 171;
    }
    else
    {
      __int16 v19 = 170;
    }
    unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v19);
    unint64_t v30 = *((void *)this + 4);
    if (v30 < 3) {
      return Node;
    }
    uint64_t v31 = *((void *)this + 3);
    if (*(_WORD *)v31 != 24415 || *(unsigned char *)(v31 + 2) != 84) {
      return Node;
    }
    *((void *)this + 3) = v31 + 3;
    *((void *)this + 4) = v30 - 3;
    if (v14) {
      goto LABEL_17;
    }
    return 0;
  }
  *((void *)this + 3) = v5 + 1;
  *((void *)this + 4) = v3 - 1;
  if (v3 != 1)
  {
    switch(v5[1])
    {
      case 'L':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 244;
        goto LABEL_16;
      case 'P':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        uint64_t v25 = (void *)*((void *)this + 5);
        __int16 v26 = 97;
        goto LABEL_43;
      case 'a':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        uint64_t v25 = (void *)*((void *)this + 5);
        __int16 v26 = 238;
        goto LABEL_43;
      case 'f':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 75;
        goto LABEL_16;
      case 'm':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 147;
        goto LABEL_16;
      case 'n':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        size_t v6 = (void *)*((void *)this + 5);
        __int16 v7 = 158;
        goto LABEL_16;
      case 'p':
        *((void *)this + 3) = v5 + 2;
        *((void *)this + 4) = v3 - 2;
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 186);
        if (!v14) {
          return 0;
        }
        goto LABEL_17;
      default:
        break;
    }
  }
  size_t v6 = (void *)*((void *)this + 5);
  __int16 v7 = 237;
LABEL_16:
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v6, v7);
  if (!v14) {
    return 0;
  }
LABEL_17:
  __int16 v15 = (swift::Demangle::__runtime::Node *)v14;
  float v16 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
  size_t v17 = Node;
LABEL_18:
  swift::Demangle::__runtime::Node::addChild(v17, v15, v16);
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleType(swift::Demangle::__runtime::NodeFactory **this, unsigned int a2)
{
  if (!v3) {
    return 0;
  }
  size_t v4 = v3;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v4, this[5]);
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleProtocolConformance(swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  unsigned int v3 = a2 + 1;
  if (!v4) {
    return 0;
  }
  std::string v5 = v4;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v5, this[5]);
  if (!Node) {
    return 0;
  }
  if (!v7) {
    return 0;
  }
  unint64_t v8 = v7;
  unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(v9, v8, this[5]);
  if (!v9) {
    return 0;
  }
  if (!v10) {
    return 0;
  }
  int v11 = v10;
  __int16 v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 182);
  swift::Demangle::__runtime::Node::addChild(v12, Node, this[5]);
  swift::Demangle::__runtime::Node::addChild(v12, v9, this[5]);
  swift::Demangle::__runtime::Node::addChild(v12, v11, this[5]);
  return v12;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleTypeImpl(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 <= 0x400)
  {
    uint64_t v3 = *((void *)this + 4);
    if (v3)
    {
      std::string v5 = (char *)*((void *)this + 3);
      int v8 = *v5;
      size_t v6 = v5 + 1;
      char v7 = *v5;
      *((void *)this + 3) = v5 + 1;
      *((void *)this + 4) = v3 - 1;
      switch(v8)
      {
        case 'B':
          unint64_t v9 = 0;
          if (v3 == 1) {
            return v9;
          }
          int v10 = v5[1];
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          switch(v10)
          {
            case 'B':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.UnsafeValueBuffer";
              goto LABEL_149;
            case 'O':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.UnknownObject";
              goto LABEL_149;
            case 'b':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.BridgeObject";
              goto LABEL_149;
            case 'f':
              unint64_t v98 = 0;
                return 0;
              int v64 = (void *)*((void *)this + 5);
              memset(&v97, 0, sizeof(v97));
              size_t v65 = "Builtin.FPIEEE";
              std::string::size_type v66 = 14;
              goto LABEL_126;
            case 'i':
              unint64_t v98 = 0;
                return 0;
              int v64 = (void *)*((void *)this + 5);
              memset(&v97, 0, sizeof(v97));
              size_t v65 = "Builtin.Int";
              std::string::size_type v66 = 11;
LABEL_126:
              std::string::append(&v97, v65, v66);
              unint64_t v67 = v98;
              unint64_t v68 = &v97;
              goto LABEL_127;
            case 'o':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.NativeObject";
              goto LABEL_149;
            case 'p':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.RawPointer";
              goto LABEL_149;
            case 't':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.SILToken";
              goto LABEL_149;
            case 'v':
              unint64_t v98 = 0;
                return 0;
              uint64_t v73 = *((void *)this + 4);
              if (!v73) {
                return 0;
              }
              unint64_t v74 = (unsigned char *)*((void *)this + 3);
              if (*v74 != 66) {
                return 0;
              }
              *((void *)this + 3) = v74 + 1;
              *((void *)this + 4) = v73 - 1;
              if (v73 == 1) {
                return 0;
              }
              int v75 = v74[1];
              if (v75 == 102)
              {
                *((void *)this + 3) = v74 + 2;
                *((void *)this + 4) = v73 - 2;
                unint64_t v96 = 0;
                unint64_t v9 = 0;
                  return v9;
                int v64 = (void *)*((void *)this + 5);
                memset(&v97, 0, sizeof(v97));
                std::string::append(&v97, "Builtin.Vec", 0xBuLL);
                unint64_t v76 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v97, v98);
                unint64_t v77 = v76;
                uint64_t v78 = "xFPIEEE";
                std::string::size_type v79 = 7;
                goto LABEL_175;
              }
              if (v75 == 112)
              {
                *((void *)this + 3) = v74 + 2;
                *((void *)this + 4) = v73 - 2;
                int v64 = (void *)*((void *)this + 5);
                memset(&v97, 0, sizeof(v97));
                std::string::append(&v97, "Builtin.Vec", 0xBuLL);
                size_t v95 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v97, v98);
                std::string::append(v95, "xRawPointer", 0xBuLL);
                size_t v70 = HIBYTE(v95->__r_.__value_.__r.__words[2]);
                BOOL v71 = (v70 & 0x80u) != 0;
                std::string::size_type size = v95->__r_.__value_.__l.__size_;
                if ((v70 & 0x80u) == 0) {
                  __int16 v19 = v95;
                }
                else {
                  __int16 v19 = (std::string *)v95->__r_.__value_.__r.__words[0];
                }
LABEL_130:
                if (v71) {
                  size_t v21 = size;
                }
                else {
                  size_t v21 = v70;
                }
                BOOL v18 = v64;
                __int16 v20 = 20;
                goto LABEL_134;
              }
              if (v75 != 105) {
                return 0;
              }
              *((void *)this + 3) = v74 + 2;
              *((void *)this + 4) = v73 - 2;
              unint64_t v96 = 0;
              unint64_t v9 = 0;
              {
                int v64 = (void *)*((void *)this + 5);
                memset(&v97, 0, sizeof(v97));
                std::string::append(&v97, "Builtin.Vec", 0xBuLL);
                unint64_t v76 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v97, v98);
                unint64_t v77 = v76;
                uint64_t v78 = "xInt";
                std::string::size_type v79 = 4;
LABEL_175:
                std::string::append(v76, v78, v79);
                unint64_t v67 = v96;
                unint64_t v68 = v77;
LABEL_127:
                unint64_t v69 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(v68, v67);
                size_t v70 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
                BOOL v71 = (v70 & 0x80u) != 0;
                std::string::size_type size = v69->__r_.__value_.__l.__size_;
                if ((v70 & 0x80u) == 0) {
                  __int16 v19 = v69;
                }
                else {
                  __int16 v19 = (std::string *)v69->__r_.__value_.__r.__words[0];
                }
                goto LABEL_130;
              }
              break;
            case 'w':
              int v11 = (void *)*((void *)this + 5);
              __int16 v12 = "Builtin.Word";
LABEL_149:
              return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
            default:
              return v9;
          }
          return v9;
        case 'D':
          if (!v9) {
            return v9;
          }
          unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
          swift::Demangle::__runtime::Node::addChild(Node, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          if (!Node) {
            return 0;
          }
          float v16 = (void *)*((void *)this + 5);
          __int16 v17 = 57;
          goto LABEL_35;
        case 'E':
          if (v3 == 1) {
            return 0;
          }
          if (*v6 != 82) {
            return 0;
          }
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (v3 == 2 || v5[2] != 82) {
            return 0;
          }
          *((void *)this + 3) = v5 + 3;
          *((void *)this + 4) = v3 - 3;
          BOOL v18 = (void *)*((void *)this + 5);
          memset(&v97, 0, sizeof(v97));
          __int16 v19 = &v97;
          __int16 v20 = 63;
          size_t v21 = 0;
LABEL_134:
          unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v18, v20, v19, v21);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          return v9;
        case 'F':
          int v22 = a2 + 1;
          __int16 v23 = 82;
          goto LABEL_60;
        case 'G':
          if (!v24) {
            return 0;
          }
        case 'K':
          int v22 = a2 + 1;
          __int16 v23 = 11;
          goto LABEL_60;
        case 'M':
          if (!v26) {
            return 0;
          }
          unint64_t Node = (swift::Demangle::__runtime::Node *)v26;
          float v16 = (void *)*((void *)this + 5);
          __int16 v17 = 145;
          goto LABEL_35;
        case 'P':
          if (v3 == 1 || *v6 != 77)
          {
LABEL_108:
            int v59 = a2 + 1;
          }
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          if (!v27) {
            return 0;
          }
          unint64_t Node = (swift::Demangle::__runtime::Node *)v27;
          float v16 = (void *)*((void *)this + 5);
          __int16 v17 = 69;
LABEL_35:
          unsigned int v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v16, v17);
          unint64_t v9 = v28;
          size_t v29 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
          unint64_t v30 = Node;
          goto LABEL_76;
        case 'Q':
          if (v3 == 1) {
            goto LABEL_83;
          }
          int v31 = *v6;
          if (v31 != 85)
          {
            if (v31 == 117)
            {
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              uint64_t v32 = (void *)*((void *)this + 5);
              return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v32, 308);
            }
            else
            {
LABEL_83:
              int v48 = a2 + 1;
            }
          }
          *((void *)this + 3) = v5 + 2;
          *((void *)this + 4) = v3 - 2;
          v97.__r_.__value_.__r.__words[0] = 0;
          unint64_t v9 = 0;
            return v9;
          unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 308);
          unint64_t v40 = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 341, (uint64_t)v97.__r_.__value_.__l.__data_);
LABEL_65:
          unint64_t v30 = (swift::Demangle::__runtime::Node *)v40;
          size_t v29 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
          unsigned int v28 = v9;
          goto LABEL_76;
        case 'R':
          unsigned int v33 = (void *)*((void *)this + 5);
          __int16 v34 = 123;
          goto LABEL_64;
        case 'S':
        case 'T':
          int v35 = a2 + 1;
          int v36 = 0;
          goto LABEL_70;
        case 'W':
          int v37 = a2 + 1;
        case 'X':
          unint64_t v9 = 0;
          if (v3 == 1) {
            return v9;
          }
          switch(*v6)
          {
            case 'B':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (v3 == 2 || v5[2] != 71)
              {
                unint64_t v38 = 0;
              }
              else
              {
                *((void *)this + 3) = v5 + 3;
                *((void *)this + 4) = v3 - 3;
                if (!v38) {
                  return 0;
                }
              }
              unint64_t v80 = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 212);
              uint64_t v81 = *((void *)this + 4);
              if (!v81) {
                return 0;
              }
              unint64_t v82 = (swift::Demangle::__runtime::Node *)v80;
              unsigned int v83 = a2 + 1;
              break;
            case 'F':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              int v49 = a2 + 1;
            case 'M':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v50) {
                return 0;
              }
              unint64_t v38 = (unsigned __int16 *)v50;
              if (!v51) {
                return 0;
              }
              unint64_t v52 = (swift::Demangle::__runtime::Node *)v51;
              unint64_t v53 = (void *)*((void *)this + 5);
              __int16 v54 = 145;
              goto LABEL_106;
            case 'P':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (v3 == 2 || v5[2] != 77) {
                goto LABEL_108;
              }
              *((void *)this + 3) = v5 + 3;
              *((void *)this + 4) = v3 - 3;
              if (!v55) {
                return 0;
              }
              unint64_t v38 = (unsigned __int16 *)v55;
              if (!v56) {
                return 0;
              }
              unint64_t v52 = (swift::Demangle::__runtime::Node *)v56;
              unint64_t v53 = (void *)*((void *)this + 5);
              __int16 v54 = 69;
LABEL_106:
              unint64_t v57 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v53, v54);
              unint64_t v9 = v57;
              int v58 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
              goto LABEL_107;
            case 'b':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v60) {
                return 0;
              }
              unint64_t Node = (swift::Demangle::__runtime::Node *)v60;
              float v16 = (void *)*((void *)this + 5);
              __int16 v17 = 210;
              goto LABEL_35;
            case 'f':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              int v22 = a2 + 1;
              __int16 v23 = 222;
              goto LABEL_60;
            case 'o':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v61) {
                return 0;
              }
              unint64_t Node = (swift::Demangle::__runtime::Node *)v61;
              float v16 = (void *)*((void *)this + 5);
              __int16 v17 = 248;
              goto LABEL_35;
            case 'u':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v62) {
                return 0;
              }
              unint64_t Node = (swift::Demangle::__runtime::Node *)v62;
              float v16 = (void *)*((void *)this + 5);
              __int16 v17 = 249;
              goto LABEL_35;
            case 'w':
              *((void *)this + 3) = v5 + 2;
              *((void *)this + 4) = v3 - 2;
              if (!v63) {
                return 0;
              }
              unint64_t Node = (swift::Demangle::__runtime::Node *)v63;
              float v16 = (void *)*((void *)this + 5);
              __int16 v17 = 247;
              goto LABEL_35;
            default:
              return v9;
          }
          while (2)
          {
            unint64_t v84 = (unsigned __int8 *)*((void *)this + 3);
            int v85 = *v84;
            if (v85 == 105)
            {
              __int16 v86 = 214;
              goto LABEL_159;
            }
            if (v85 == 109)
            {
              __int16 v86 = 213;
LABEL_159:
              *((void *)this + 3) = v84 + 1;
              *((void *)this + 4) = v81 - 1;
              if (v87)
              {
                unint64_t v88 = (swift::Demangle::__runtime::Node *)v87;
                unint64_t v89 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v89, v88, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (v89)
                {
                  size_t v90 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v86);
                  swift::Demangle::__runtime::Node::addChild(v90, v89, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                  swift::Demangle::__runtime::Node::addChild(v82, v90, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                  unint64_t v9 = 0;
                  uint64_t v81 = *((void *)this + 4);
                  if (!v81) {
                    return v9;
                  }
                  continue;
                }
              }
              return 0;
            }
            break;
          }
          if (v85 != 95) {
            return 0;
          }
          *((void *)this + 3) = v84 + 1;
          *((void *)this + 4) = v81 - 1;
          if (v38)
          {
            unint64_t v91 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 235);
            uint64_t v92 = *((void *)this + 4);
            if (!v92) {
              goto LABEL_167;
            }
LABEL_166:
            unint64_t v93 = (unsigned char *)*((void *)this + 3);
            if (*v93 != 95)
            {
LABEL_167:
              while (1)
              {
                if (!v94) {
                  return 0;
                }
                swift::Demangle::__runtime::Node::addChild(v91, v94, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                uint64_t v92 = *((void *)this + 4);
                if (v92) {
                  goto LABEL_166;
                }
              }
            }
            unint64_t v52 = v91;
            *((void *)this + 3) = v93 + 1;
            *((void *)this + 4) = v92 - 1;
          }
          else
          {
            unint64_t v52 = 0;
          }
          unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 211);
          swift::Demangle::__runtime::Node::addChild(v9, v82, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          if (v38)
          {
            int v58 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
            unint64_t v57 = v9;
LABEL_107:
            swift::Demangle::__runtime::Node::addChild(v57, (swift::Demangle::__runtime::Node *)v38, v58);
            size_t v29 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
            unsigned int v28 = v9;
            unint64_t v30 = v52;
LABEL_76:
            swift::Demangle::__runtime::Node::addChild(v28, v30, v29);
          }
          return v9;
        case 'a':
          int v39 = a2 + 1;
          __int16 v14 = 234;
          goto LABEL_92;
        case 'b':
          int v22 = a2 + 1;
          __int16 v23 = 165;
          goto LABEL_60;
        case 'c':
          int v22 = a2 + 1;
          __int16 v23 = 22;
          goto LABEL_60;
        case 'f':
          int v22 = a2 + 1;
          __int16 v23 = 245;
LABEL_60:
        case 'k':
          unsigned int v33 = (void *)*((void *)this + 5);
          __int16 v34 = 326;
LABEL_64:
          unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v33, v34);
          if (v40) {
            goto LABEL_65;
          }
          return 0;
        case 'q':
          int v41 = a2 + 1;
        case 't':
          int v35 = a2 + 1;
          int v36 = 1;
LABEL_70:
        case 'u':
          unsigned int v42 = a2 + 1;
          if (!v43) {
            return 0;
          }
          unint64_t v44 = (swift::Demangle::__runtime::Node *)v43;
          if (!v45) {
            return 0;
          }
          unint64_t v46 = (swift::Demangle::__runtime::Node *)v45;
          unint64_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 44);
          swift::Demangle::__runtime::Node::addChild(v9, v44, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          size_t v29 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
          unsigned int v28 = v9;
          unint64_t v30 = v46;
          goto LABEL_76;
        case 'w':
          int v47 = a2 + 1;
        case 'x':
        default:
          if ((v7 - 67) > 0x13 || ((1 << (v7 - 67)) & 0x81001) == 0) {
            return 0;
          }
          switch(v7)
          {
            case 'C':
              __int16 v14 = 24;
              break;
            case 'O':
              __int16 v14 = 61;
              break;
            case 'V':
              __int16 v14 = 219;
              break;
            default:
              __int16 v14 = 101;
              break;
          }
          int v39 = a2 + 1;
LABEL_92:
      }
    }
  }
  return 0;
}

uint64_t anonymous namespace'::OldDemangler::demangleBuiltinSize(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  size_t v4 = v3 + 1;
  int v5 = *v3;
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  if ((v5 - 48) > 9) {
    return 0;
  }
  uint64_t v6 = (v5 - 48);
  *a2 = v6;
  if (v2 == 1) {
    return 0;
  }
  char v7 = v3 + 2;
  uint64_t v8 = v2 - 2;
  while (1)
  {
    int v9 = *v4;
    if ((v9 - 58) < 0xFFFFFFF6) {
      break;
    }
    uint64_t v6 = (v9 - 48) + 10 * v6;
    *a2 = v6;
    ++v4;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v8;
    ++v7;
    if (--v8 == -1) {
      return 0;
    }
  }
  if (v9 != 95) {
    return 0;
  }
  *((void *)this + 3) = v7;
  *((void *)this + 4) = v8;
  return 1;
}

uint64_t anonymous namespace'::OldDemangler::demangleNatural(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  size_t v4 = v3 + 1;
  int v5 = *v3;
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  if ((v5 - 48) > 9) {
    return 0;
  }
  uint64_t v6 = (v5 - 48);
  *a2 = v6;
  if (v2 != 1)
  {
    char v7 = v3 + 2;
    uint64_t v8 = v2 - 2;
    do
    {
      int v9 = *v4;
      if ((v9 - 58) < 0xFFFFFFF6) {
        break;
      }
      uint64_t v6 = (v9 - 48) + 10 * v6;
      *a2 = v6;
      ++v4;
      *((void *)this + 3) = v7;
      *((void *)this + 4) = v8;
      ++v7;
      --v8;
    }
    while (v8 != -1);
  }
  return 1;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleDeclarationName(uint64_t a1, __int16 a2, int a3)
{
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (swift::Demangle::__runtime::Node *)v7;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), a2);
  swift::Demangle::__runtime::Node::addChild(Node, v6, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  swift::Demangle::__runtime::Node::addChild(Node, v8, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  int v11 = *(swift::Demangle::__runtime::Node ***)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v13 = *(char **)a1;
    uint64_t v14 = (uint64_t)v11 - *(void *)a1;
    uint64_t v15 = v14 >> 3;
    unint64_t v16 = (v14 >> 3) + 1;
    if (v16 >> 61) {
      abort();
    }
    uint64_t v17 = v10 - (void)v13;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      __int16 v19 = operator new(8 * v18);
    }
    else
    {
      __int16 v19 = 0;
    }
    __int16 v20 = (swift::Demangle::__runtime::Node **)&v19[8 * v15];
    size_t v21 = &v19[8 * v18];
    *__int16 v20 = Node;
    __int16 v12 = v20 + 1;
    if (v11 != (swift::Demangle::__runtime::Node **)v13)
    {
      unint64_t v22 = (char *)v11 - v13 - 8;
      if (v22 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)((char *)v11 - v19 - v14) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v25 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      __int16 v20 = (swift::Demangle::__runtime::Node **)((char *)v20 - v24);
      uint64_t v26 = &v19[8 * v15 - 16];
      uint64_t v27 = v11 - 2;
      uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *uint64_t v26 = v29;
        v26 -= 2;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      int v11 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          unint64_t v30 = *--v11;
          *--__int16 v20 = v30;
        }
        while (v11 != (swift::Demangle::__runtime::Node **)v13);
      }
      int v11 = *(swift::Demangle::__runtime::Node ***)a1;
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v21;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    void *v11 = Node;
    __int16 v12 = v11 + 1;
  }
  *(void *)(a1 + 8) = v12;
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleFunctionType(_anonymous_namespace_::OldDemangler *this, __int16 a2, int a3)
{
  uint64_t v6 = *((void *)this + 4);
  if (!v6)
  {
    BOOL v10 = 0;
    BOOL v12 = 0;
    int v13 = 0;
    unint64_t Node = 0;
    BOOL v9 = 0;
    goto LABEL_28;
  }
  unint64_t v7 = (unsigned __int8 *)*((void *)this + 3);
  int v8 = *v7;
  BOOL v9 = v8 == 122;
  if (v8 == 122)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      BOOL v10 = 0;
      BOOL v12 = 0;
      int v13 = 0;
      unint64_t Node = 0;
      BOOL v9 = 1;
      goto LABEL_28;
    }
    int v8 = *v7;
  }
  BOOL v10 = v8 == 121;
  if (v8 == 121)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      BOOL v12 = 0;
      int v13 = 0;
      unint64_t Node = 0;
      BOOL v10 = 1;
      goto LABEL_28;
    }
  }
  int v11 = *v7;
  BOOL v12 = v11 == 90;
  if (v11 == 90)
  {
    ++v7;
    --v6;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v6;
    if (!v6)
    {
      int v13 = 0;
      unint64_t Node = 0;
      BOOL v12 = 1;
      goto LABEL_28;
    }
    int v11 = *v7;
  }
  if (v11 == 68)
  {
    *((void *)this + 3) = v7 + 1;
    *((void *)this + 4) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v6 = 0;
      int v13 = 46;
      ++v7;
    }
    else
    {
      int v13 = v7[1];
      v7 += 2;
      v6 -= 2;
      *((void *)this + 3) = v7;
      *((void *)this + 4) = v6;
    }
    HIDWORD(v15) = v13;
    LODWORD(v15) = (v13 << 24) - 1677721600;
    unsigned int v16 = (v15 >> 25);
    if (v16 <= 7 && ((1 << v16) & 0x93) != 0)
    {
      if (!v6)
      {
LABEL_27:
        unint64_t Node = 0;
        goto LABEL_28;
      }
    }
    else
    {
      int v13 = 0;
      if (!v6) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v13 = 0;
  }
  if (*v7 != 89) {
    goto LABEL_27;
  }
  *((void *)this + 3) = v7 + 1;
  *((void *)this + 4) = v6 - 1;
  if (!v17) {
    return 0;
  }
  unint64_t v18 = (swift::Demangle::__runtime::Node *)v17;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(Node, v18, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (!Node) {
    return 0;
  }
LABEL_28:
  unsigned int v19 = a3 + 1;
  if (!v20) {
    return 0;
  }
  size_t v21 = (swift::Demangle::__runtime::Node *)v20;
  unint64_t v22 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(v22, v21, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (!v22) {
    return 0;
  }
  if (!v23) {
    return 0;
  }
  uint64_t v24 = (swift::Demangle::__runtime::Node *)v23;
  uint64_t v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(v25, v24, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (!v25) {
    return 0;
  }
  uint64_t v26 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), a2);
  if (v9)
  {
    uint64_t v27 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 272);
    swift::Demangle::__runtime::Node::addChild(v26, v27, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (!v12) {
      goto LABEL_34;
    }
  }
  else if (!v12)
  {
LABEL_34:
    if (v10) {
      goto LABEL_35;
    }
    goto LABEL_41;
  }
  unint64_t v30 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 271);
  swift::Demangle::__runtime::Node::addChild(v26, v30, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (v10)
  {
LABEL_35:
    uint64_t v28 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 66);
    swift::Demangle::__runtime::Node::addChild(v26, v28, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (!v13) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_41:
  if (v13)
  {
LABEL_42:
    int v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 68, (char)v13);
    swift::Demangle::__runtime::Node::addChild(v26, v31, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  }
LABEL_43:
  if (Node)
  {
    uint64_t v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 67);
    swift::Demangle::__runtime::Node::addChild(v32, Node, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    swift::Demangle::__runtime::Node::addChild(v26, v32, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  }
  unsigned int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 3);
  swift::Demangle::__runtime::Node::addChild(v26, v33, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  swift::Demangle::__runtime::Node::addChild(v33, v22, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  __int16 v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 207);
  swift::Demangle::__runtime::Node::addChild(v34, v25, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  swift::Demangle::__runtime::Node::addChild(v26, v34, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  return v26;
}

unsigned __int16 *anonymous namespace'::OldDemangler::demangleGenericSignature(_anonymous_namespace_::OldDemangler *this, int a2, int a3)
{
  int v5 = (void *)*((void *)this + 5);
  if (a3) {
    __int16 v6 = 46;
  }
  else {
    __int16 v6 = 43;
  }
  unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(v5, v6);
  uint64_t v8 = *((void *)this + 4);
  if (v8)
  {
    BOOL v9 = (swift::Demangle::__runtime::Node *)Node;
    uint64_t v10 = -1;
    while (1)
    {
      BOOL v12 = (unsigned __int8 *)*((void *)this + 3);
      int v13 = *v12;
      if (v13 == 122)
      {
        uint64_t v10 = 0;
        *((void *)this + 3) = v12 + 1;
        *((void *)this + 4) = v8 - 1;
        goto LABEL_7;
      }
      if (v13 == 82 || v13 == 114) {
        break;
      }
      uint64_t v14 = v12 + 1;
      *((void *)this + 3) = v12 + 1;
      *((void *)this + 4) = v8 - 1;
      if (v13 == 95)
      {
        uint64_t v15 = 0;
      }
      else
      {
        if ((v13 - 58) < 0xFFFFFFF6 || v8 == 1) {
          return 0;
        }
        uint64_t v17 = (v13 - 48);
        unint64_t v18 = v12 + 2;
        uint64_t v19 = v8 - 2;
        while (1)
        {
          int v20 = *v14;
          if ((v20 - 58) < 0xFFFFFFF6) {
            break;
          }
          uint64_t v17 = (v20 - 48) + 10 * v17;
          ++v14;
          *((void *)this + 3) = v18;
          *((void *)this + 4) = v19;
          ++v18;
          if (--v19 == -1) {
            return 0;
          }
        }
        if (v20 != 95) {
          return 0;
        }
        *((void *)this + 3) = v18;
        *((void *)this + 4) = v19;
        uint64_t v15 = v17 + 1;
      }
      uint64_t v10 = v15 + 1;
LABEL_7:
      int v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 37, v10);
      swift::Demangle::__runtime::Node::addChild(v9, v11, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      uint64_t v8 = *((void *)this + 4);
      if (!v8) {
        return 0;
      }
    }
    if (v10 != -1
      || (v21 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 37, 1), swift::Demangle::__runtime::Node::addChild(v9, v21, *((swift::Demangle::__runtime::NodeFactory **)this + 5)), (uint64_t v8 = *((void *)this + 4)) != 0))
    {
      unint64_t v22 = (unsigned __int8 *)*((void *)this + 3);
      int v23 = *v22;
      if (v23 == 114)
      {
LABEL_103:
        *((void *)this + 3) = v22 + 1;
        *((void *)this + 4) = v8 - 1;
        return (unsigned __int16 *)v9;
      }
      if (v23 == 82)
      {
        --v8;
        unsigned int v24 = a2 + 2;
        int v25 = a2 + 4;
        *((void *)this + 3) = v22 + 1;
        *((void *)this + 4) = v8;
        if (v8) {
          goto LABEL_29;
        }
LABEL_42:
        if (v28)
        {
          while (1)
          {
            __int16 v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
            swift::Demangle::__runtime::Node::addChild(v34, v28, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            if (!v34) {
              return 0;
            }
            uint64_t v35 = *((void *)this + 4);
            if (!v35) {
              return 0;
            }
            int v36 = (unsigned __int8 *)*((void *)this + 3);
            unsigned int v37 = *v36;
            if (v37 > 0x6B)
            {
              if (v37 == 108)
              {
                uint64_t v63 = -1;
                unint64_t v64 = -1;
                *((void *)this + 3) = v36 + 1;
                *((void *)this + 4) = v35 - 1;
                unint64_t v44 = 0;
                if (v35 != 1)
                {
                  uint64_t v45 = "U";
                  switch(v36[1])
                  {
                    case 'B':
                      uint64_t v45 = "B";
                      goto LABEL_87;
                    case 'E':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                        goto LABEL_100;
                      uint64_t v50 = *((void *)this + 4);
                      if (!v50) {
                        goto LABEL_100;
                      }
                      uint64_t v51 = (unsigned char *)*((void *)this + 3);
                      if (*v51 != 95) {
                        goto LABEL_100;
                      }
                      *((void *)this + 3) = v51 + 1;
                      *((void *)this + 4) = v50 - 1;
                      uint64_t v45 = "E";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'M':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                        goto LABEL_100;
                      uint64_t v52 = *((void *)this + 4);
                      if (!v52) {
                        goto LABEL_100;
                      }
                      unint64_t v53 = (unsigned char *)*((void *)this + 3);
                      if (*v53 != 95) {
                        goto LABEL_100;
                      }
                      *((void *)this + 3) = v53 + 1;
                      *((void *)this + 4) = v52 - 1;
                      uint64_t v45 = "M";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'N':
                      uint64_t v45 = "N";
                      goto LABEL_87;
                    case 'R':
                      uint64_t v45 = "R";
                      goto LABEL_87;
                    case 'S':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      uint64_t v45 = "S";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'T':
                      uint64_t v45 = "T";
                      goto LABEL_87;
                    case 'U':
LABEL_87:
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      goto LABEL_88;
                    case 'e':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      uint64_t v45 = "e";
                        goto LABEL_100;
                      goto LABEL_88;
                    case 'm':
                      *((void *)this + 3) = v36 + 2;
                      *((void *)this + 4) = v35 - 2;
                      uint64_t v45 = "m";
                        goto LABEL_100;
LABEL_88:
                      __int16 v54 = (void *)*((void *)this + 5);
                      unint64_t v55 = (char *)v54[1];
                      if (!v55 || (uint64_t v56 = v55 + 1, (unint64_t)(v55 + 1) > v54[2]))
                      {
                        unint64_t v57 = 2 * v54[4];
                        if (v57 <= 2) {
                          unint64_t v57 = 2;
                        }
                        v54[4] = v57;
                        unint64_t v58 = v57 + 8;
                        int v59 = malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
                        *int v59 = v54[3];
                        uint64_t v56 = (char *)v59 + 9;
                        unint64_t v55 = (char *)(v59 + 1);
                        v54[2] = (char *)v59 + v58;
                        v54[3] = v59;
                      }
                      v54[1] = v56;
                      *unint64_t v55 = *v45;
                      unint64_t NodeWithAllocatedText = swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v54, 101, (uint64_t)v55, 1);
                      if (NodeWithAllocatedText)
                      {
                        uint64_t v61 = (swift::Demangle::__runtime::Node *)NodeWithAllocatedText;
                        unint64_t v44 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 41);
                        swift::Demangle::__runtime::Node::addChild(v44, v34, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                        swift::Demangle::__runtime::Node::addChild(v44, v61, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                        if (v64 != -1)
                        {
                          uint64_t v62 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 161, v64);
                          swift::Demangle::__runtime::Node::addChild(v44, v62, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                          if (v63 != -1)
                          {
                            int v49 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 161, v63);
                            int v47 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
                            int v48 = v44;
                            goto LABEL_68;
                          }
                        }
                      }
                      else
                      {
LABEL_100:
                        unint64_t v44 = 0;
                      }
                      break;
                    default:
                      goto LABEL_69;
                  }
                }
                goto LABEL_69;
              }
              if (v37 == 122)
              {
                *((void *)this + 3) = v36 + 1;
                *((void *)this + 4) = v35 - 1;
                if (!result) {
                  return result;
                }
                int v41 = (swift::Demangle::__runtime::Node *)result;
                unint64_t v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v40, v41, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v40) {
                  return 0;
                }
                unsigned int v42 = (void *)*((void *)this + 5);
                __int16 v43 = 39;
                goto LABEL_67;
              }
            }
            else
            {
              if (v37 == 67)
              {
                if (!result) {
                  return result;
                }
                goto LABEL_65;
              }
              if (v37 == 83)
              {
                *((void *)this + 3) = v36 + 1;
                *((void *)this + 4) = v35 - 1;
                if (!result) {
                  return result;
                }
                unint64_t v38 = (swift::Demangle::__runtime::Node *)result;
                int v39 = result[8];
                if (v39 != 24 && v39 != 180)
                {
                  if (v39 != 153) {
                    return 0;
                  }
                  unint64_t v38 = (swift::Demangle::__runtime::Node *)result;
                  if (!result) {
                    return result;
                  }
                }
                unint64_t v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v40, v38, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                goto LABEL_66;
              }
            }
            if (!result) {
              return result;
            }
LABEL_65:
            unint64_t v46 = (swift::Demangle::__runtime::Node *)result;
            unint64_t v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
            swift::Demangle::__runtime::Node::addChild(v40, v46, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            if (!v40) {
              return 0;
            }
LABEL_66:
            unsigned int v42 = (void *)*((void *)this + 5);
            __int16 v43 = 36;
LABEL_67:
            unint64_t v44 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v42, v43);
            swift::Demangle::__runtime::Node::addChild(v44, v34, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            int v47 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
            int v48 = v44;
            int v49 = v40;
LABEL_68:
            swift::Demangle::__runtime::Node::addChild(v48, v49, v47);
LABEL_69:
            if (!v44) {
              return 0;
            }
            swift::Demangle::__runtime::Node::addChild(v9, v44, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            uint64_t v8 = *((void *)this + 4);
            if (!v8) {
              goto LABEL_42;
            }
LABEL_29:
            unint64_t v22 = (unsigned __int8 *)*((void *)this + 3);
            int v26 = *v22;
            switch(v26)
            {
              case 'W':
                *((void *)this + 3) = v22 + 1;
                *((void *)this + 4) = v8 - 1;
                if (!result) {
                  return result;
                }
                uint64_t v28 = (swift::Demangle::__runtime::Node *)result;
                while (1)
                {
                  uint64_t v30 = *((void *)this + 4);
                  if (v30)
                  {
                    int v31 = (unsigned char *)*((void *)this + 3);
                    if (*v31 == 95) {
                      break;
                    }
                  }
                  long long v29 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                  swift::Demangle::__runtime::Node::addChild(v29, v28, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                  double result = 0;
                  if (!v28) {
                    return result;
                  }
                }
                *((void *)this + 3) = v31 + 1;
                *((void *)this + 4) = v30 - 1;
                break;
              case 'w':
                *((void *)this + 3) = v22 + 1;
                *((void *)this + 4) = v8 - 1;
                if (!result) {
                  return result;
                }
                uint64_t v32 = (swift::Demangle::__runtime::Node *)result;
                unsigned int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v33, v32, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
                if (!v28) {
                  return 0;
                }
                break;
              case 'r':
                goto LABEL_103;
              default:
                goto LABEL_42;
            }
          }
        }
      }
    }
  }
  return 0;
}

unint64_t anonymous namespace'::OldDemangler::demangleMetatypeRepresentation(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 3);
  int v3 = *v2;
  if (v3 == 116)
  {
    size_t v4 = "@thin";
    goto LABEL_9;
  }
  if (v3 == 111)
  {
    size_t v4 = "@objc_metatype";
    goto LABEL_9;
  }
  if (v3 != 84) {
    return 0;
  }
  size_t v4 = "@thick";
LABEL_9:
  *((void *)this + 3) = v2 + 1;
  *((void *)this + 4) = v1 - 1;
  return swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 146, v4);
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleProtocolList(_anonymous_namespace_::OldDemangler *this, int a2)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 190);
  int v5 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 235);
  swift::Demangle::__runtime::Node::addChild(Node, v5, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  unsigned int v6 = a2 + 1;
  uint64_t v7 = *((void *)this + 4);
  if (v7)
  {
LABEL_2:
    uint64_t v8 = (unsigned char *)*((void *)this + 3);
    if (*v8 != 95) {
      goto LABEL_3;
    }
    *((void *)this + 3) = v8 + 1;
    *((void *)this + 4) = v7 - 1;
  }
  else
  {
LABEL_3:
    while (1)
    {
      if (!v9) {
        return 0;
      }
      uint64_t v10 = v9;
      int v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
      swift::Demangle::__runtime::Node::addChild(v11, v10, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      if (!v11) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild(v5, v11, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      uint64_t v7 = *((void *)this + 4);
      if (v7) {
        goto LABEL_2;
      }
    }
  }
  return Node;
}

uint64_t anonymous namespace'::OldDemangler::demangleIndex(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    int v3 = (unsigned __int8 *)*((void *)this + 3);
    size_t v4 = v3 + 1;
    int v5 = *v3;
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    if (v5 == 95)
    {
      unint64_t v6 = 0;
LABEL_4:
      *a2 = v6;
      return 1;
    }
    if ((v5 - 48) <= 9)
    {
      uint64_t v8 = (v5 - 48);
      *a2 = v8;
      if (v2 != 1)
      {
        BOOL v9 = v3 + 2;
        uint64_t v10 = v2 - 2;
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 58) < 0xFFFFFFF6) {
            break;
          }
          uint64_t v8 = (v11 - 48) + 10 * v8;
          *a2 = v8;
          ++v4;
          *((void *)this + 3) = v9;
          *((void *)this + 4) = v10;
          ++v9;
          if (--v10 == -1) {
            return 0;
          }
        }
        if (v11 == 95)
        {
          *((void *)this + 3) = v9;
          *((void *)this + 4) = v10;
          unint64_t v6 = v8 + 1;
          goto LABEL_4;
        }
      }
    }
  }
  return 0;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleArchetypeType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  int v14 = a2;
  v13[0] = this;
  v13[1] = &v14;
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return 0;
  }
  int v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = *v3;
  if (v4 == 115)
  {
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    unint64_t v6 = (void *)*((void *)this + 5);
    uint64_t v7 = v6[1];
    uint64_t v8 = (char *)(v7 + 5);
    if (v7) {
      BOOL v9 = (unint64_t)v8 > v6[2];
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = 2 * v6[4];
      if (v10 <= 6) {
        unint64_t v10 = 6;
      }
      v6[4] = v10;
      unint64_t v11 = v10 + 8;
      BOOL v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
      void *v12 = v6[3];
      uint64_t v8 = (char *)v12 + 13;
      uint64_t v7 = (uint64_t)(v12 + 1);
      v6[2] = (char *)v12 + v11;
      void v6[3] = v12;
    }
    v6[1] = v8;
    *(unsigned char *)(v7 + 4) = 116;
    *(_DWORD *)uint64_t v7 = 1718187859;
    double result = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v6, 153, v7, 5);
  }
  if (v4 != 83)
  {
    if (v4 == 81)
    {
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      if (!result) {
        return result;
      }
    }
    return 0;
  }
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  if (result) {
  return result;
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleDependentType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  if (!*((void *)this + 4)) {
    return 0;
  }
  int v3 = **((unsigned __int8 **)this + 3);
  if (v3 == 95 || v3 == 100 || (v3 - 48) < 0xA)
  {
  }
  int v5 = a2 + 1;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (swift::Demangle::__runtime::Node *)v6;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(Node, v7, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (!Node) {
    return 0;
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::getDependentGenericParamType(_anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime *a2, unsigned int a3)
{
  memset(&v13, 0, sizeof(v13));
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  swift::Demangle::__runtime::genericParameterName((swift::Demangle::__runtime *)a2, a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v13, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 38);
  BOOL v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 102, v4);
  swift::Demangle::__runtime::Node::addChild(Node, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  unint64_t v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 102, v5);
  swift::Demangle::__runtime::Node::addChild(Node, v10, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleAssociatedTypeSimple(swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  if (result)
  {
    uint64_t v5 = result;
    unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
    swift::Demangle::__runtime::Node::addChild(Node, v5, this[5]);
  }
  return result;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleAssociatedTypeCompound(swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  if (v4)
  {
    int v5 = a2 + 1;
    while (1)
    {
      uint64_t v7 = this[4];
      if (v7)
      {
        uint64_t v8 = this[3];
        if (*(unsigned char *)v8 == 95) {
          break;
        }
      }
      unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
      swift::Demangle::__runtime::Node::addChild(Node, v4, this[5]);
      if (!v4) {
        return v4;
      }
    }
    this[3] = (swift::Demangle::__runtime::NodeFactory *)((char *)v8 + 1);
    this[4] = (swift::Demangle::__runtime::NodeFactory *)((char *)v7 - 1);
  }
  return v4;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleSubstitutionIndex(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  int v3 = (unsigned char *)*((void *)this + 3);
  switch(*v3)
  {
    case 'C':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      uint64_t v4 = (void *)*((void *)this + 5);
      int v5 = (unsigned char *)v4[1];
      uint64_t v6 = v5 + 15;
      if (v5) {
        BOOL v7 = (unint64_t)v6 > v4[2];
      }
      else {
        BOOL v7 = 1;
      }
      if (v7)
      {
        unint64_t v8 = 2 * v4[4];
        if (v8 <= 0x10) {
          unint64_t v8 = 16;
        }
        v4[4] = v8;
        unint64_t v9 = v8 + 8;
        unint64_t v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
        int v5 = v10 + 1;
        *unint64_t v10 = v4[3];
        uint64_t v6 = (char *)v10 + 23;
        v4[2] = (char *)v10 + v9;
        v4[3] = v10;
      }
      v4[1] = v6;
      qmemcpy(v5, "__C_Synthesized", 15);
      unint64_t v11 = v4;
      uint64_t v12 = 15;
      goto LABEL_27;
    case 'P':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafePointer";
      goto LABEL_41;
    case 'Q':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "ImplicitlyUnwrappedOptional";
      __int16 v14 = 61;
      size_t v15 = 27;
      goto LABEL_49;
    case 'R':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeBufferPointer";
      __int16 v14 = 219;
      size_t v15 = 19;
      goto LABEL_49;
    case 'S':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "String";
      goto LABEL_43;
    case 'V':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeRawPointer";
      __int16 v14 = 219;
      size_t v15 = 16;
      goto LABEL_49;
    case 'a':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Array";
      goto LABEL_38;
    case 'b':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Bool";
      goto LABEL_47;
    case 'c':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnicodeScalar";
LABEL_41:
      __int16 v14 = 219;
      size_t v15 = 13;
      goto LABEL_49;
    case 'd':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Double";
LABEL_43:
      __int16 v14 = 219;
      size_t v15 = 6;
      goto LABEL_49;
    case 'f':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Float";
LABEL_38:
      __int16 v14 = 219;
      size_t v15 = 5;
      goto LABEL_49;
    case 'i':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Int";
      __int16 v14 = 219;
      size_t v15 = 3;
      goto LABEL_49;
    case 'o':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      unsigned int v16 = (void *)*((void *)this + 5);
      int v5 = (unsigned char *)v16[1];
      uint64_t v17 = v5 + 3;
      if (v5) {
        BOOL v18 = (unint64_t)v17 > v16[2];
      }
      else {
        BOOL v18 = 1;
      }
      if (v18)
      {
        unint64_t v19 = 2 * v16[4];
        if (v19 <= 4) {
          unint64_t v19 = 4;
        }
        v16[4] = v19;
        unint64_t v20 = v19 + 8;
        size_t v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        int v5 = v21 + 1;
        *size_t v21 = v16[3];
        uint64_t v17 = (char *)v21 + 11;
        v16[2] = (char *)v21 + v20;
        void v16[3] = v21;
      }
      v16[1] = v17;
      v5[2] = 67;
      *(_WORD *)int v5 = 24415;
      unint64_t v11 = v16;
      uint64_t v12 = 3;
LABEL_27:
      return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v11, 153, (uint64_t)v5, v12);
    case 'p':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeMutablePointer";
      __int16 v14 = 219;
      size_t v15 = 20;
      goto LABEL_49;
    case 'q':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "Optional";
      __int16 v14 = 61;
      size_t v15 = 8;
      goto LABEL_49;
    case 'r':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeMutableBufferPointer";
      __int16 v14 = 219;
      size_t v15 = 26;
      goto LABEL_49;
    case 'u':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UInt";
LABEL_47:
      __int16 v14 = 219;
      size_t v15 = 4;
      goto LABEL_49;
    case 'v':
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v1 - 1;
      std::string v13 = "UnsafeMutableRawPointer";
      __int16 v14 = 219;
      size_t v15 = 23;
LABEL_49:
    default:
      unint64_t v24 = 0;
      double result = 0;
      if (!v23) {
        return result;
      }
      if (v24 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) {
        return 0;
      }
      double result = *(swift::Demangle::__runtime::Node **)(*(void *)this + 8 * v24);
      break;
  }
  return result;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleTuple(uint64_t a1, int a2, int a3)
{
  unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 223);
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    return 0;
  }
  unint64_t v9 = (swift::Demangle::__runtime::Node *)Node;
  unint64_t v10 = *(unsigned char **)(a1 + 24);
  if (*v10 != 95)
  {
    unsigned int v13 = a3 + 1;
    while (1)
    {
      unint64_t v11 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 224);
      if (!*(void *)(a1 + 32)) {
        break;
      }
      int v14 = **(unsigned __int8 **)(a1 + 24);
      if (v14 != 111) {
        goto LABEL_12;
      }
LABEL_13:
      unint64_t v3 = v3 & 0xFFFFFFFF00000000 | 0x100E1;
      if (!v15) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild(v11, v15, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
LABEL_15:
      if (!v16) {
        return 0;
      }
      uint64_t v17 = (swift::Demangle::__runtime::Node *)v16;
      BOOL v18 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 232);
      swift::Demangle::__runtime::Node::addChild(v18, v17, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
      if (!v18) {
        return 0;
      }
      swift::Demangle::__runtime::Node::addChild(v11, v18, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
      swift::Demangle::__runtime::Node::addChild(v9, v11, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
      uint64_t v8 = *(void *)(a1 + 32);
      if (!v8) {
        return 0;
      }
      unint64_t v10 = *(unsigned char **)(a1 + 24);
      if (*v10 == 95) {
        goto LABEL_4;
      }
    }
    int v14 = 46;
LABEL_12:
    if ((v14 - 48) > 9) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  unint64_t v11 = 0;
LABEL_4:
  *(void *)(a1 + 24) = v10 + 1;
  *(void *)(a1 + 32) = v8 - 1;
  if (a2 == 1 && v11)
  {
    swift::Demangle::__runtime::Node::reverseChildren((int8x16_t *)v11, 0);
    uint64_t v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 276);
    swift::Demangle::__runtime::Node::addChild(v11, v12, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
    swift::Demangle::__runtime::Node::reverseChildren((int8x16_t *)v11, 0);
  }
  return v9;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleImplFunctionType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 115);
  uint64_t v5 = *((void *)this + 4);
  if (v5 && (uint64_t v6 = (unsigned char *)*((void *)this + 3), *v6 == 116))
  {
    *((void *)this + 3) = v6 + 1;
    *((void *)this + 4) = v5 - 1;
    BOOL v7 = "@convention(thin)";
    size_t v8 = 17;
  }
  else
  {
    if (!v10) {
      return 0;
    }
    BOOL v7 = v9;
    size_t v8 = v10;
  }
  unint64_t v11 = (void *)*((void *)this + 5);
  uint64_t v12 = (char *)v11[1];
  unsigned int v13 = &v12[v8];
  if (v12) {
    BOOL v14 = (unint64_t)v13 > v11[2];
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    unint64_t v15 = 2 * v11[4];
    if (v15 <= v8 + 1) {
      unint64_t v15 = v8 + 1;
    }
    _OWORD v11[4] = v15;
    unint64_t v16 = v15 + 8;
    uint64_t v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    BOOL v18 = (char *)v17 + v16;
    *uint64_t v17 = v11[3];
    uint64_t v12 = (char *)(v17 + 1);
    void v11[2] = v18;
    void v11[3] = v17;
    unsigned int v13 = (char *)v17 + v8 + 8;
  }
  v11[1] = v13;
  memmove(v12, v7, v8);
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v11, 106, (uint64_t)v12, v8);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
  uint64_t v20 = *((void *)this + 4);
  if (!v20) {
    return 0;
  }
  size_t v21 = (unsigned char *)*((void *)this + 3);
  if (*v21 == 67)
  {
    *((void *)this + 3) = v21 + 1;
    *((void *)this + 4) = v20 - 1;
    double result = 0;
    if (v20 != 1)
    {
      int v23 = "block";
      size_t v24 = 5;
      switch(v21[1])
      {
        case 'O':
          int v23 = "objc_method";
          size_t v24 = 11;
          goto LABEL_22;
        case 'b':
          goto LABEL_22;
        case 'c':
          int v23 = "c";
          size_t v24 = 1;
          goto LABEL_22;
        case 'm':
          int v23 = "method";
          size_t v24 = 6;
          goto LABEL_22;
        case 'w':
          int v23 = "witness_method";
          size_t v24 = 14;
LABEL_22:
          *((void *)this + 3) = v21 + 2;
          *((void *)this + 4) = v20 - 2;
          int v25 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 113);
          int v26 = (void *)*((void *)this + 5);
          uint64_t v27 = (char *)v26[1];
          if (!v27 || (uint64_t v28 = &v27[v24], (unint64_t)&v27[v24] > v26[2]))
          {
            unint64_t v29 = 2 * v26[4];
            if (v29 <= v24 + 1) {
              unint64_t v29 = v24 + 1;
            }
            v26[4] = v29;
            unint64_t v30 = v29 + 8;
            int v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
            uint64_t v32 = (char *)v31 + v30;
            *int v31 = v26[3];
            uint64_t v27 = (char *)(v31 + 1);
            v26[2] = v32;
            void v26[3] = v31;
            uint64_t v28 = (char *)v31 + v24 + 8;
          }
          v26[1] = v28;
          memmove(v27, v23, v24);
          unsigned int v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v26, 114, (uint64_t)v27, v24);
          swift::Demangle::__runtime::Node::addChild(v25, v33, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          swift::Demangle::__runtime::Node::addChild(Node, v25, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
          uint64_t v20 = *((void *)this + 4);
          if (v20) {
            goto LABEL_28;
          }
          return 0;
        default:
          return result;
      }
    }
    return result;
  }
LABEL_28:
  __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
  int v35 = *v34;
  if (v35 == 104)
  {
    *((void *)this + 3) = v34 + 1;
    *((void *)this + 4) = v20 - 1;
    int v36 = (void *)*((void *)this + 5);
    uint64_t v37 = v36[1];
    if (!v37 || (unint64_t v38 = (char *)(v37 + 9), (unint64_t)(v37 + 9) > v36[2]))
    {
      unint64_t v39 = 2 * v36[4];
      if (v39 <= 0xA) {
        unint64_t v39 = 10;
      }
      v36[4] = v39;
      unint64_t v40 = v39 + 8;
      int v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      uint64_t v37 = (uint64_t)(v41 + 1);
      *int v41 = v36[3];
      unint64_t v38 = (char *)v41 + 17;
      v36[2] = (char *)v41 + v40;
      void v36[3] = v41;
    }
    v36[1] = v38;
    *(void *)uint64_t v37 = *(void *)"@Sendable";
    *(unsigned char *)(v37 + 8) = 101;
    unsigned int v42 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v36, 112, v37, 9);
    swift::Demangle::__runtime::Node::addChild(Node, v42, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    uint64_t v20 = *((void *)this + 4);
    if (!v20) {
      return 0;
    }
    __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
    int v35 = *v34;
  }
  if (v35 == 72)
  {
    *((void *)this + 3) = v34 + 1;
    *((void *)this + 4) = v20 - 1;
    __int16 v43 = (void *)*((void *)this + 5);
    uint64_t v44 = v43[1];
    if (!v44 || (uint64_t v45 = (char *)(v44 + 6), (unint64_t)(v44 + 6) > v43[2]))
    {
      unint64_t v46 = 2 * v43[4];
      if (v46 <= 7) {
        unint64_t v46 = 7;
      }
      v43[4] = v46;
      unint64_t v47 = v46 + 8;
      int v48 = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
      uint64_t v44 = (uint64_t)(v48 + 1);
      void *v48 = v43[3];
      uint64_t v45 = (char *)v48 + 14;
      v43[2] = (char *)v48 + v47;
      void v43[3] = v48;
    }
    v43[1] = v45;
    *(_WORD *)(v44 + 4) = 25454;
    *(_DWORD *)uint64_t v44 = 2037604672;
    int v49 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v43, 112, v44, 6);
    swift::Demangle::__runtime::Node::addChild(Node, v49, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    uint64_t v20 = *((void *)this + 4);
    if (!v20) {
      return 0;
    }
    __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
    int v35 = *v34;
  }
  if ((v35 | 0x20) == 0x67)
  {
    *((void *)this + 3) = v34 + 1;
    *((void *)this + 4) = v20 - 1;
    if (!result) {
      return result;
    }
    swift::Demangle::__runtime::Node::addChild(Node, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    uint64_t v20 = *((void *)this + 4);
    if (!v20) {
      return 0;
    }
    __int16 v34 = (unsigned __int8 *)*((void *)this + 3);
    int v35 = *v34;
  }
  if (v35 != 95) {
    return 0;
  }
  uint64_t v50 = v20 - 1;
  *((void *)this + 3) = v34 + 1;
  *((void *)this + 4) = v50;
  int v51 = a2 + 2;
  if (!v50) {
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v52 = (unsigned char *)*((void *)this + 3);
  if (*v52 == 95)
  {
    uint64_t v53 = v50 - 1;
    *((void *)this + 3) = v52 + 1;
    *((void *)this + 4) = v53;
    if (!v53) {
      goto LABEL_58;
    }
LABEL_57:
    __int16 v54 = (unsigned char *)*((void *)this + 3);
    if (*v54 == 95)
    {
      *((void *)this + 3) = v54 + 1;
      *((void *)this + 4) = v53 - 1;
      return Node;
    }
    else
    {
LABEL_58:
      while (1)
      {
        if (!result) {
          break;
        }
        swift::Demangle::__runtime::Node::addChild(Node, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
        uint64_t v53 = *((void *)this + 4);
        if (v53) {
          goto LABEL_57;
        }
      }
    }
  }
  else
  {
LABEL_51:
    while (1)
    {
      if (!result) {
        break;
      }
      swift::Demangle::__runtime::Node::addChild(Node, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      uint64_t v50 = *((void *)this + 4);
      if (v50) {
        goto LABEL_50;
      }
    }
  }
  return result;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleContext(_anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v5 = (unsigned char *)*((void *)this + 3);
    switch(*v5)
    {
      case 'E':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 71);
        unsigned int v7 = a2 + 1;
        if (!v8) {
          return 0;
        }
        unint64_t v9 = (swift::Demangle::__runtime::Node *)v8;
        if (!v10) {
          return 0;
        }
        unint64_t v11 = (swift::Demangle::__runtime::Node *)v10;
        swift::Demangle::__runtime::Node::addChild(Node, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
        uint64_t v12 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
        unsigned int v13 = Node;
        BOOL v14 = v11;
        goto LABEL_24;
      case 'G':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        if (!v20) {
          return 0;
        }
      case 'S':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
      case 'e':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 71);
        unsigned int v21 = a2 + 1;
        if (!v22) {
          return 0;
        }
        int v23 = (swift::Demangle::__runtime::Node *)v22;
        if (!v24) {
          return 0;
        }
        int v25 = v24;
        if (!v26) {
          return 0;
        }
        uint64_t v27 = (swift::Demangle::__runtime::Node *)v26;
        swift::Demangle::__runtime::Node::addChild(Node, v23, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
        swift::Demangle::__runtime::Node::addChild(Node, v27, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
        uint64_t v12 = (swift::Demangle::__runtime::NodeFactory *)*((void *)this + 5);
        unsigned int v13 = Node;
        BOOL v14 = (swift::Demangle::__runtime::Node *)v25;
LABEL_24:
        swift::Demangle::__runtime::Node::addChild(v13, v14, v12);
        return Node;
      case 's':
        *((void *)this + 3) = v5 + 1;
        *((void *)this + 4) = v2 - 1;
        uint64_t v28 = (void *)*((void *)this + 5);
        uint64_t v29 = v28[1];
        unint64_t v30 = (char *)(v29 + 5);
        if (v29) {
          BOOL v31 = (unint64_t)v30 > v28[2];
        }
        else {
          BOOL v31 = 1;
        }
        if (v31)
        {
          unint64_t v32 = 2 * v28[4];
          if (v32 <= 6) {
            unint64_t v32 = 6;
          }
          void v28[4] = v32;
          unint64_t v33 = v32 + 8;
          __int16 v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
          uint64_t v29 = (uint64_t)(v34 + 1);
          *__int16 v34 = v28[3];
          unint64_t v30 = (char *)v34 + 13;
          void v28[2] = (char *)v34 + v33;
          void v28[3] = v34;
        }
        v28[1] = v30;
        *(unsigned char *)(v29 + 4) = 116;
        *(_DWORD *)uint64_t v29 = 1718187859;
        return (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v28, 153, v29, 5);
      default:
        unsigned int v15 = (char)*v5 - 67;
        BOOL v31 = v15 > 0x33;
        uint64_t v16 = (1 << v15) & 0x9000000883049;
        unsigned int v17 = a2 + 1;
        if (v31 || v16 == 0)
        {
        }
        else
        {
        }
    }
  }
  return 0;
}

unint64_t anonymous namespace'::OldDemangler::demangleDeclName(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    unint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
    int v4 = *v3;
    if (v4 == 80)
    {
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      if (v15)
      {
        unint64_t v9 = (swift::Demangle::__runtime::Node *)v15;
        if (v16)
        {
          unint64_t v11 = (swift::Demangle::__runtime::Node *)v16;
          uint64_t v12 = (void *)*((void *)this + 5);
          __int16 v13 = 176;
          goto LABEL_16;
        }
      }
      return 0;
    }
    if (v4 == 76)
    {
      *((void *)this + 3) = v3 + 1;
      *((void *)this + 4) = v2 - 1;
      if (v2 != 1)
      {
        int v5 = v3[1];
        uint64_t v6 = v3 + 2;
        *((void *)this + 3) = v3 + 2;
        *((void *)this + 4) = v2 - 2;
        if (v5 == 95)
        {
          uint64_t v7 = 0;
        }
        else
        {
          unsigned int v17 = 0;
          if (v2 == 2 || (v5 - 58) < 0xFFFFFFF6) {
            return (unint64_t)v17;
          }
          uint64_t v18 = (v5 - 48);
          unint64_t v19 = v3 + 3;
          uint64_t v20 = v2 - 3;
          while (1)
          {
            int v21 = *v6;
            if ((v21 - 58) < 0xFFFFFFF6) {
              break;
            }
            uint64_t v18 = (v21 - 48) + 10 * v18;
            ++v6;
            *((void *)this + 3) = v19;
            *((void *)this + 4) = v20;
            ++v19;
            if (--v20 == -1) {
              return 0;
            }
          }
          if (v21 != 95) {
            return 0;
          }
          *((void *)this + 3) = v19;
          *((void *)this + 4) = v20;
          uint64_t v7 = v18 + 1;
        }
        unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 161, v7);
        if (Node)
        {
          unint64_t v9 = (swift::Demangle::__runtime::Node *)Node;
          if (v10)
          {
            unint64_t v11 = (swift::Demangle::__runtime::Node *)v10;
            uint64_t v12 = (void *)*((void *)this + 5);
            __int16 v13 = 137;
LABEL_16:
            unsigned int v17 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v12, v13);
            swift::Demangle::__runtime::Node::addChild(v17, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            swift::Demangle::__runtime::Node::addChild(v17, v11, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            return (unint64_t)v17;
          }
        }
      }
      return 0;
    }
  }
}

unint64_t anonymous namespace'::OldDemangler::demangleModule(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    goto LABEL_15;
  }
  unint64_t v3 = (unsigned __int8 *)*((void *)this + 3);
  int v4 = *v3;
  if (v4 == 83)
  {
    *((void *)this + 3) = v3 + 1;
    *((void *)this + 4) = v2 - 1;
    if (!v18) {
      return 0;
    }
    if (*((_WORD *)v18 + 8) == 153) {
      return (unint64_t)v18;
    }
    return 0;
  }
  if (v4 != 115)
  {
LABEL_15:
    unint64_t v14 = v13;
    if (v13)
    {
      unint64_t v16 = (unint64_t *)*((void *)this + 1);
      unint64_t v15 = *((void *)this + 2);
      if ((unint64_t)v16 >= v15)
      {
        unint64_t v19 = *(unint64_t **)this;
        uint64_t v20 = (uint64_t)v16 - *(void *)this;
        uint64_t v21 = v20 >> 3;
        unint64_t v22 = (v20 >> 3) + 1;
        if (v22 >> 61) {
          abort();
        }
        uint64_t v23 = v15 - (void)v19;
        if (v23 >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          if (v24 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v25 = operator new(8 * v24);
        }
        else
        {
          int v25 = 0;
        }
        uint64_t v26 = (unint64_t *)&v25[8 * v21];
        uint64_t v27 = &v25[8 * v24];
        *uint64_t v26 = v14;
        unsigned int v17 = v26 + 1;
        if (v16 != v19)
        {
          unint64_t v28 = (char *)v16 - (char *)v19 - 8;
          if (v28 < 0x58) {
            goto LABEL_49;
          }
          if ((unint64_t)((char *)v16 - v25 - v20) < 0x20) {
            goto LABEL_49;
          }
          uint64_t v29 = (v28 >> 3) + 1;
          uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v31 = &v16[v30 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v26 = (unint64_t *)((char *)v26 - v30);
          unint64_t v32 = &v25[8 * v21 - 16];
          unint64_t v33 = v16 - 2;
          uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *unint64_t v32 = v35;
            v32 -= 2;
            v33 -= 4;
            v34 -= 4;
          }
          while (v34);
          unint64_t v16 = v31;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            do
            {
              unint64_t v36 = *--v16;
              *--uint64_t v26 = v36;
            }
            while (v16 != v19);
          }
          unint64_t v16 = *(unint64_t **)this;
        }
        *(void *)this = v26;
        *((void *)this + 1) = v17;
        *((void *)this + 2) = v27;
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *unint64_t v16 = v13;
        unsigned int v17 = v16 + 1;
      }
      *((void *)this + 1) = v17;
    }
    return v14;
  }
  *((void *)this + 3) = v3 + 1;
  *((void *)this + 4) = v2 - 1;
  int v5 = (void *)*((void *)this + 5);
  uint64_t v6 = v5[1];
  uint64_t v7 = (char *)(v6 + 5);
  if (v6) {
    BOOL v8 = (unint64_t)v7 > v5[2];
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    unint64_t v9 = 2 * v5[4];
    if (v9 <= 6) {
      unint64_t v9 = 6;
    }
    v5[4] = v9;
    unint64_t v10 = v9 + 8;
    unint64_t v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    uint64_t v6 = (uint64_t)(v11 + 1);
    void *v11 = v5[3];
    uint64_t v7 = (char *)v11 + 13;
    v5[2] = (char *)v11 + v10;
    void v5[3] = v11;
  }
  v5[1] = v7;
  *(unsigned char *)(v6 + 4) = 116;
  *(_DWORD *)uint64_t v6 = 1718187859;

  return swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v5, 153, v6, 5);
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleEntity(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 4);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned char *)*((void *)this + 3);
  int v7 = *v6;
  if (v7 != 90)
  {
    if (v7 != 70) {
      goto LABEL_8;
    }
LABEL_16:
    int v9 = 0;
    __int16 v10 = 76;
    goto LABEL_19;
  }
  ++v6;
  --v5;
  *((void *)this + 3) = v6;
  *((void *)this + 4) = v5;
  if (!v5) {
    goto LABEL_12;
  }
  if (*v6 == 70) {
    goto LABEL_16;
  }
LABEL_8:
  int v8 = *v6;
  switch(v8)
  {
    case 'I':
      __int16 v10 = 125;
      int v9 = 1;
      goto LABEL_19;
    case 'i':
      int v9 = 0;
      __int16 v10 = 220;
LABEL_19:
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      unsigned int v11 = a2 + 1;
      if (v12)
      {
        unint64_t v13 = (swift::Demangle::__runtime::Node *)v12;
        uint64_t v14 = *((void *)this + 4);
        if (v14)
        {
          unint64_t v15 = (unsigned __int8 *)*((void *)this + 3);
          int v16 = *v15;
          int v17 = 0;
          __int16 v18 = 31;
          switch(*v15)
          {
            case 'C':
              __int16 v18 = 0;
              int v17 = 1;
              goto LABEL_46;
            case 'D':
              goto LABEL_46;
            case 'E':
              int v17 = 0;
              __int16 v18 = 104;
              goto LABEL_46;
            case 'G':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v22) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v22;
              __int16 v24 = 100;
              goto LABEL_74;
            case 'M':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v25) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v25;
              __int16 v24 = 152;
              goto LABEL_74;
            case 'U':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v26) {
                return 0;
              }
              uint64_t v20 = (swift::Demangle::__runtime::Node *)v26;
              __int16 v10 = 70;
              int v17 = 1;
              goto LABEL_47;
            case 'W':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v27) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v27;
              __int16 v24 = 51;
              goto LABEL_74;
            case 'a':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              unint64_t Node = 0;
              if (v14 != 1)
              {
                __int16 v24 = 169;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_73;
                  case 'o':
                    __int16 v24 = 155;
                    goto LABEL_73;
                  case 'p':
                    __int16 v24 = 157;
                    goto LABEL_73;
                  case 'u':
                    __int16 v24 = 251;
                    goto LABEL_73;
                  default:
                    return Node;
                }
              }
              return Node;
            case 'c':
              __int16 v18 = 29;
              int v17 = 1;
              goto LABEL_46;
            case 'd':
              int v17 = 0;
              __int16 v18 = 50;
              goto LABEL_46;
            case 'e':
              int v17 = 0;
              __int16 v18 = 103;
              goto LABEL_46;
            case 'g':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v35) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v35;
              __int16 v24 = 98;
              goto LABEL_74;
            case 'l':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              unint64_t Node = 0;
              if (v14 != 1)
              {
                __int16 v24 = 168;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_73;
                  case 'o':
                    __int16 v24 = 154;
                    goto LABEL_73;
                  case 'p':
                    __int16 v24 = 156;
                    goto LABEL_73;
                  case 'u':
                    __int16 v24 = 250;
LABEL_73:
                    *((void *)this + 3) = v15 + 2;
                    *((void *)this + 4) = v14 - 2;
                    if (v23) {
                      goto LABEL_74;
                    }
                    return 0;
                  default:
                    return Node;
                }
              }
              return Node;
            case 'm':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v36) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v36;
              __int16 v24 = 141;
              goto LABEL_74;
            case 'r':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v37) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v37;
              __int16 v24 = 204;
              goto LABEL_74;
            case 's':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v38) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v38;
              __int16 v24 = 215;
              goto LABEL_74;
            case 'u':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v39) {
                return 0;
              }
              uint64_t v20 = (swift::Demangle::__runtime::Node *)v39;
              __int16 v10 = 117;
              int v17 = 1;
              goto LABEL_47;
            case 'w':
              *((void *)this + 3) = v15 + 1;
              *((void *)this + 4) = v14 - 1;
              if (!v40) {
                return 0;
              }
              uint64_t v23 = (_DWORD *)v40;
              __int16 v24 = 257;
LABEL_74:
              unint64_t v28 = (swift::Demangle::__runtime::NodeFactory **)((char *)this + 40);
              unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v24);
              int v41 = *((unsigned __int16 *)v23 + 8);
              if (v41 != 176)
              {
                if (v41 != 101 || *((void *)v23 + 1) != 9) {
                  goto LABEL_92;
                }
                if (**(void **)v23 != 0x7069726373627573 || *(unsigned char *)(*(void *)v23 + 8) != 116) {
                  goto LABEL_92;
                }
                uint64_t v23 = 0;
                goto LABEL_109;
              }
              int v43 = *((unsigned __int8 *)v23 + 18);
              uint64_t v44 = v23;
              if (v43 != 2)
              {
                if (v43 != 5 || v23[2] < 2u)
                {
LABEL_92:
                  uint64_t v50 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 254);
                  swift::Demangle::__runtime::Node::addChild(v50, v13, *v28);
                  swift::Demangle::__runtime::Node::addChild(v50, (swift::Demangle::__runtime::Node *)v23, *v28);
                  char v51 = 0;
                  goto LABEL_93;
                }
                uint64_t v44 = *(_DWORD **)v23;
              }
              uint64_t v45 = (uint64_t **)*((void *)v44 + 1);
              if (v45[1] != (uint64_t *)9) {
                goto LABEL_92;
              }
              unint64_t v46 = *v45;
              uint64_t v47 = *v46;
              int v48 = *((unsigned __int8 *)v46 + 8);
              if (v47 != 0x7069726373627573 || v48 != 116) {
                goto LABEL_92;
              }
              if (v43 == 2) {
                goto LABEL_106;
              }
              if (v23[2])
              {
                uint64_t v23 = *(_DWORD **)v23;
LABEL_106:
                unint64_t v57 = *(swift::Demangle::__runtime::Node **)v23;
              }
              else
              {
                unint64_t v57 = 0;
              }
              uint64_t v23 = (_DWORD *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 176);
              swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v23, v57, *v28);
LABEL_109:
              uint64_t v50 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 220);
              swift::Demangle::__runtime::Node::addChild(v50, v13, *v28);
              char v51 = 1;
LABEL_93:
              if (!v52) {
                return 0;
              }
              uint64_t v53 = (swift::Demangle::__runtime::Node *)v52;
              __int16 v54 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 232);
              swift::Demangle::__runtime::Node::addChild(v54, v53, *v28);
              if (!v54) {
                return 0;
              }
              swift::Demangle::__runtime::Node::addChild(v50, v54, *v28);
              char v55 = v51 ^ 1;
              if (!v23) {
                char v55 = 1;
              }
              if ((v55 & 1) == 0) {
                swift::Demangle::__runtime::Node::addChild(v50, (swift::Demangle::__runtime::Node *)v23, *v28);
              }
              unint64_t v32 = *v28;
              unint64_t v33 = Node;
              uint64_t v34 = v50;
              goto LABEL_100;
            default:
              if (!v9) {
                goto LABEL_24;
              }
              if (v16 == 105)
              {
                int v17 = 0;
                __int16 v18 = 125;
LABEL_46:
                uint64_t v20 = 0;
                *((void *)this + 3) = v15 + 1;
                *((void *)this + 4) = v14 - 1;
                __int16 v10 = v18;
                goto LABEL_47;
              }
              if (v16 == 65)
              {
                *((void *)this + 3) = v15 + 1;
                *((void *)this + 4) = v14 - 1;
                if (v21)
                {
                  uint64_t v20 = (swift::Demangle::__runtime::Node *)v21;
                  int v17 = 0;
                  __int16 v10 = 33;
                  goto LABEL_47;
                }
              }
              return 0;
          }
        }
        if ((v9 & 1) == 0)
        {
LABEL_24:
          if (v19)
          {
            uint64_t v20 = (swift::Demangle::__runtime::Node *)v19;
            int v17 = 1;
LABEL_47:
            unint64_t v28 = (swift::Demangle::__runtime::NodeFactory **)((char *)this + 40);
            unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), v10);
            swift::Demangle::__runtime::Node::addChild(Node, v13, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
            if (v20) {
              swift::Demangle::__runtime::Node::addChild(Node, v20, *v28);
            }
            if (!v17) {
              goto LABEL_101;
            }
            if (v29)
            {
              uint64_t v30 = (swift::Demangle::__runtime::Node *)v29;
              BOOL v31 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 232);
              swift::Demangle::__runtime::Node::addChild(v31, v30, *v28);
              if (v31)
              {
                unint64_t v32 = *v28;
                unint64_t v33 = Node;
                uint64_t v34 = v31;
LABEL_100:
                swift::Demangle::__runtime::Node::addChild(v33, v34, v32);
LABEL_101:
                if (v7 == 90)
                {
                  uint64_t v56 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 218);
                  swift::Demangle::__runtime::Node::addChild(v56, Node, *v28);
                  return v56;
                }
                return Node;
              }
            }
          }
        }
      }
      return 0;
    case 'v':
      int v9 = 0;
      __int16 v10 = 254;
      goto LABEL_19;
  }
LABEL_12:
}

unint64_t anonymous namespace'::OldDemangler::demangleIdentifier(void *a1, int a2)
{
  uint64_t v2 = a1[4];
  if (!v2) {
    return 0;
  }
  int v4 = (unsigned __int8 *)a1[3];
  int v5 = *v4;
  if (v5 == 88)
  {
    ++v4;
    std::string __p = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    --v2;
    a1[3] = v4;
    a1[4] = v2;
    if (!v2)
    {
LABEL_14:
      char v9 = 0;
      if (BYTE2(a2)) {
        __int16 v8 = a2;
      }
      else {
        __int16 v8 = 101;
      }
      if (!v2) {
        goto LABEL_39;
      }
      goto LABEL_22;
    }
  }
  else
  {
    std::string __p = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  if (*v4 != 111) {
    goto LABEL_14;
  }
  unint64_t NodeWithAllocatedText = 0;
  a1[3] = v4 + 1;
  a1[4] = v2 - 1;
  if (!BYTE2(a2) && v2 != 1)
  {
    int v7 = (char)v4[1];
    v4 += 2;
    v2 -= 2;
    a1[3] = v4;
    a1[4] = v2;
    switch(v7)
    {
      case 'p':
        __int16 v8 = 175;
        break;
      case 'i':
        __int16 v8 = 124;
        break;
      case 'P':
        __int16 v8 = 173;
        break;
      default:
        goto LABEL_39;
    }
    char v9 = 1;
    if (!v2) {
      goto LABEL_39;
    }
LABEL_22:
    p_p = (std::string *)(v4 + 1);
    int v10 = *v4;
    unint64_t v12 = v2 - 1;
    a1[3] = v4 + 1;
    a1[4] = v12;
    if ((v10 - 48) > 9) {
      goto LABEL_39;
    }
    unint64_t size = (v10 - 48);
    if (v12)
    {
      uint64_t v14 = v4 + 2;
      do
      {
        int v15 = p_p->__r_.__value_.__s.__data_[0];
        if ((v15 - 58) < 0xFFFFFFF6) {
          break;
        }
        unint64_t size = (v15 - 48) + 10 * size;
        p_p = (std::string *)((char *)p_p + 1);
        --v12;
        a1[3] = v14;
        a1[4] = v12;
        ++v14;
      }
      while (v12);
    }
    if (v12 < size) {
      goto LABEL_39;
    }
    a1[3] = (char *)p_p + size;
    a1[4] = v12 - size;
    if (v5 != 88)
    {
LABEL_36:
      if (size)
      {
        memset(&v25, 0, sizeof(v25));
        if (v9)
        {
          std::string::reserve(&v25, size);
          do
          {
            uint64_t v17 = p_p->__r_.__value_.__s.__data_[0];
            if ((v17 & 0x8000000000000000) == 0)
            {
              if ((v17 - 123) < 0xE6u
                || (uint64_t v17 = (v17 - 97), ((0x17007A2uLL >> v17) & 1) != 0))
              {
                unint64_t NodeWithAllocatedText = 0;
                if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_40;
                }
                goto LABEL_68;
              }
            }
            std::string::push_back(&v25, v17);
            p_p = (std::string *)((char *)p_p + 1);
            --size;
          }
          while (size);
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &v25;
          }
          else {
            p_p = (std::string *)v25.__r_.__value_.__r.__words[0];
          }
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
          }
          else {
            unint64_t size = v25.__r_.__value_.__l.__size_;
          }
          __int16 v18 = (void *)a1[5];
          if (!size)
          {
            unint64_t v19 = 0;
            goto LABEL_67;
          }
        }
        else
        {
          __int16 v18 = (void *)a1[5];
        }
        unint64_t v19 = (char *)v18[1];
        uint64_t v20 = &v19[size];
        if (v19) {
          BOOL v21 = (unint64_t)v20 > v18[2];
        }
        else {
          BOOL v21 = 1;
        }
        if (v21)
        {
          unint64_t v22 = 2 * v18[4];
          if (v22 <= size + 1) {
            unint64_t v22 = size + 1;
          }
          void v18[4] = v22;
          unint64_t v23 = v22 + 8;
          __int16 v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
          *__int16 v24 = v18[3];
          unint64_t v19 = (char *)(v24 + 1);
          uint64_t v18[2] = (char *)v24 + v23;
          void v18[3] = v24;
          uint64_t v20 = (char *)v24 + size + 8;
        }
        v18[1] = v20;
        memmove(v19, p_p, size);
LABEL_67:
        unint64_t NodeWithAllocatedText = swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v18, v8, (uint64_t)v19, size);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
LABEL_68:
        }
          operator delete(v25.__r_.__value_.__l.__data_);
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (swift::Punycode::__runtime::decodePunycodeUTF8((unsigned __int8 *)p_p, size, (uint64_t)&__p))
    {
      if (v28 >= 0) {
        p_p = (std::string *)&__p;
      }
      else {
        p_p = (std::string *)__p;
      }
      if (v28 >= 0) {
        unint64_t size = HIBYTE(v28);
      }
      else {
        unint64_t size = v27;
      }
      goto LABEL_36;
    }
LABEL_39:
    unint64_t NodeWithAllocatedText = 0;
  }
LABEL_40:
  if (SHIBYTE(v28) < 0) {
    operator delete(__p);
  }
  return NodeWithAllocatedText;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleNominalType(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned char *)*((void *)this + 3);
  switch(*v2)
  {
    case 'C':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
      goto LABEL_4;
    case 'O':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
      goto LABEL_4;
    case 'P':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
      goto LABEL_4;
    case 'S':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
    case 'V':
      *((void *)this + 3) = v2 + 1;
      *((void *)this + 4) = v1 - 1;
LABEL_4:
      break;
    default:
      return 0;
  }
  return result;
}

unint64_t anonymous namespace'::OldDemangler::demangleIndexAsNode(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(unsigned __int8 **)(a1 + 24);
    unint64_t v3 = v2 + 1;
    int v4 = *v2;
    *(void *)(a1 + 24) = v2 + 1;
    *(void *)(a1 + 32) = v1 - 1;
    if (v4 == 95)
    {
      uint64_t v5 = 0;
      return swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 161, v5);
    }
    if ((v4 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      uint64_t v8 = (v4 - 48);
      char v9 = v2 + 2;
      uint64_t v10 = v1 - 2;
      while (1)
      {
        int v11 = *v3;
        if ((v11 - 58) < 0xFFFFFFF6) {
          break;
        }
        uint64_t v8 = (v11 - 48) + 10 * v8;
        ++v3;
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = v10;
        ++v9;
        if (--v10 == -1) {
          return 0;
        }
      }
      if (v11 == 95)
      {
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = v10;
        uint64_t v5 = v8 + 1;
        return swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 161, v5);
      }
    }
  }
  return 0;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleBoundGenericArgs(swift::Demangle::__runtime::NodeFactory **this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v4 = a2;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2)) {
      return 0;
    }
    int v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v8 = *(swift::Demangle::__runtime::Node **)v7;
  int v9 = *(unsigned __int16 *)(*(void *)v7 + 16);
  if (v9 == 71 || v9 == 76 || v9 == 153) {
    goto LABEL_30;
  }
  if (!v10) {
    return 0;
  }
  int v11 = (swift::Demangle::__runtime::Node *)v10;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], *((_WORD *)v4 + 8));
  swift::Demangle::__runtime::Node::addChild(Node, v11, this[5]);
  for (unint64_t i = 1; ; ++i)
  {
    unint64_t v15 = *((unsigned __int8 *)v4 + 18);
    if (v15 == 1)
    {
      if (v15 <= i) {
        goto LABEL_29;
      }
      goto LABEL_20;
    }
    if (v15 != 5) {
      break;
    }
    if (*((unsigned int *)v4 + 2) <= i) {
      goto LABEL_29;
    }
LABEL_20:
    unsigned int v16 = v15 - 1;
    if (v15 == 1) {
      goto LABEL_23;
    }
    if (v15 != 5)
    {
      unint64_t v15 = 2;
LABEL_23:
      if (v15 <= i) {
        goto LABEL_10;
      }
      goto LABEL_26;
    }
    if (*((unsigned int *)v4 + 2) <= i)
    {
LABEL_10:
      uint64_t v14 = 0;
      goto LABEL_11;
    }
LABEL_26:
    uint64_t v17 = v4;
    if (v16 >= 2) {
      uint64_t v17 = *(swift::Demangle::__runtime::Node **)v4;
    }
    uint64_t v14 = (swift::Demangle::__runtime::Node *)*((void *)v17 + i);
LABEL_11:
    swift::Demangle::__runtime::Node::addChild(Node, v14, this[5]);
  }
  if (v15 == 2 && i < 2) {
    goto LABEL_20;
  }
LABEL_29:
  int v4 = Node;
LABEL_30:
  unint64_t v18 = swift::Demangle::__runtime::NodeFactory::createNode(this[5], 235);
  unsigned int v19 = a3 + 1;
  uint64_t v20 = this[4];
  while (1)
  {
    if (v20)
    {
      BOOL v21 = this[3];
      if (*(unsigned char *)v21 == 95) {
        break;
      }
    }
    if (v22)
    {
      unint64_t v23 = (swift::Demangle::__runtime::Node *)v22;
      __int16 v24 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
      swift::Demangle::__runtime::Node::addChild(v24, v23, this[5]);
      if (v24)
      {
        swift::Demangle::__runtime::Node::addChild((swift::Demangle::__runtime::Node *)v18, v24, this[5]);
        uint64_t v20 = this[4];
        if (v20) {
          continue;
        }
      }
    }
    return 0;
  }
  this[3] = (swift::Demangle::__runtime::NodeFactory *)((char *)v21 + 1);
  this[4] = (swift::Demangle::__runtime::NodeFactory *)((char *)v20 - 1);
  int v26 = *(unsigned __int8 *)(v18 + 18);
  if ((v26 - 1) < 2 || v26 == 5 && *(_DWORD *)(v18 + 8))
  {
    unint64_t v27 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
    swift::Demangle::__runtime::Node::addChild(v27, v4, this[5]);
    int v28 = *((unsigned __int16 *)v4 + 8);
    switch(v28)
    {
      case 24:
        __int16 v29 = 13;
        break;
      case 61:
        __int16 v29 = 14;
        break;
      case 219:
        __int16 v29 = 15;
        break;
      default:
        return 0;
    }
    int v4 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], v29);
    swift::Demangle::__runtime::Node::addChild(v4, v27, this[5]);
    swift::Demangle::__runtime::Node::addChild(v4, (swift::Demangle::__runtime::Node *)v18, this[5]);
  }
  return v4;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleProtocolNameGivenContext(swift::Demangle::__runtime::NodeFactory **this, swift::Demangle::__runtime::Node *a2)
{
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (swift::Demangle::__runtime::Node *)v4;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 180);
  swift::Demangle::__runtime::Node::addChild(Node, a2, this[5]);
  swift::Demangle::__runtime::Node::addChild(Node, v5, this[5]);
  uint64_t v8 = (char *)this[1];
  int v7 = this[2];
  if (v8 >= (char *)v7)
  {
    uint64_t v10 = *this;
    uint64_t v11 = v8 - (char *)*this;
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      abort();
    }
    uint64_t v14 = v7 - v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v16 = operator new(8 * v15);
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v17 = (swift::Demangle::__runtime::Node **)&v16[8 * v12];
    unint64_t v18 = (swift::Demangle::__runtime::NodeFactory *)&v16[8 * v15];
    *uint64_t v17 = Node;
    int v9 = (swift::Demangle::__runtime::NodeFactory *)(v17 + 1);
    if (v8 != (char *)v10)
    {
      unint64_t v19 = v8 - (char *)v10 - 8;
      if (v19 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v8 - v16 - v11) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v20 = (v19 >> 3) + 1;
      uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &v8[-v21];
      uint64_t v17 = (swift::Demangle::__runtime::Node **)((char *)v17 - v21);
      unint64_t v23 = &v16[8 * v12 - 16];
      __int16 v24 = v8 - 16;
      uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *unint64_t v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      uint64_t v8 = v22;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          unint64_t v27 = (swift::Demangle::__runtime::Node *)*((void *)v8 - 1);
          v8 -= 8;
          *--uint64_t v17 = v27;
        }
        while (v8 != (char *)v10);
      }
      uint64_t v8 = (char *)*this;
    }
    *this = (swift::Demangle::__runtime::NodeFactory *)v17;
    this[1] = v9;
    this[2] = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v8 = Node;
    int v9 = (swift::Demangle::__runtime::NodeFactory *)(v8 + 8);
  }
  this[1] = v9;
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleProtocolName(swift::Demangle::__runtime::NodeFactory **this, unsigned int a2)
{
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v4, this[5]);
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleGenericParamIndex(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 3);
  int v3 = *v2;
  if (v3 == 120)
  {
    uint64_t v8 = 0;
    unsigned int v11 = 0;
    *((void *)this + 3) = v2 + 1;
    *((void *)this + 4) = v1 - 1;
  }
  unint64_t v4 = v2 + 1;
  if (v3 == 100)
  {
    *((void *)this + 3) = v4;
    *((void *)this + 4) = v1 - 1;
    if (v1 != 1)
    {
      int v5 = v2[1];
      unint64_t i = v2 + 2;
      uint64_t v7 = v1 - 2;
      *((void *)this + 3) = v2 + 2;
      *((void *)this + 4) = v1 - 2;
      if (v5 == 95)
      {
        uint64_t v8 = 1;
        if (v1 == 2) {
          return 0;
        }
      }
      else
      {
        if ((v5 - 58) < 0xFFFFFFF6 || v1 == 2) {
          return 0;
        }
        int v19 = v5 - 48;
        uint64_t v20 = v2 + 3;
        uint64_t v7 = v1 - 3;
        for (unint64_t i = v20; ; ++i)
        {
          int v21 = *(i - 1);
          if ((v21 - 58) < 0xFFFFFFF6) {
            break;
          }
          int v19 = v21 + 10 * v19 - 48;
          *((void *)this + 3) = v20;
          *((void *)this + 4) = v7;
          ++v20;
          if (--v7 == -1) {
            return 0;
          }
        }
        if (v21 != 95) {
          return 0;
        }
        *((void *)this + 3) = v20;
        *((void *)this + 4) = v7;
        uint64_t v8 = (v19 + 2);
        if (!v7) {
          return 0;
        }
      }
      int v9 = i + 1;
      int v10 = *i;
      *((void *)this + 3) = i + 1;
      *((void *)this + 4) = v7 - 1;
      if (v10 == 95)
      {
        unsigned int v11 = 0;
      }
      if ((v10 - 58) >= 0xFFFFFFF6 && v7 != 1)
      {
        int v23 = v10 - 48;
        __int16 v24 = i + 2;
        uint64_t v25 = v7 - 2;
        while (1)
        {
          int v26 = *v9;
          if ((v26 - 58) < 0xFFFFFFF6) {
            break;
          }
          int v23 = v26 + 10 * v23 - 48;
          ++v9;
          *((void *)this + 3) = v24;
          *((void *)this + 4) = v25;
          ++v24;
          if (--v25 == -1) {
            return 0;
          }
        }
        if (v26 == 95)
        {
          *((void *)this + 3) = v24;
          *((void *)this + 4) = v25;
          unsigned int v11 = v23 + 1;
        }
      }
    }
  }
  else
  {
    *((void *)this + 3) = v4;
    *((void *)this + 4) = v1 - 1;
    if (v3 == 95)
    {
      uint64_t v8 = 0;
      unsigned int v11 = 1;
    }
    if ((v3 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      int v14 = v3 - 48;
      unint64_t v15 = v2 + 2;
      uint64_t v16 = v1 - 2;
      while (1)
      {
        int v17 = *v4;
        if ((v17 - 58) < 0xFFFFFFF6) {
          break;
        }
        int v14 = v17 + 10 * v14 - 48;
        ++v4;
        *((void *)this + 3) = v15;
        *((void *)this + 4) = v16;
        ++v15;
        if (--v16 == -1) {
          return 0;
        }
      }
      if (v17 == 95)
      {
        uint64_t v8 = 0;
        *((void *)this + 3) = v15;
        *((void *)this + 4) = v16;
        unsigned int v11 = v14 + 2;
      }
    }
  }
  return 0;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleProtocolNameImpl(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  if (a2 > 0x400) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    int v6 = (unsigned __int8 *)*((void *)this + 3);
    int v7 = *v6;
    if (v7 == 115)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      int v10 = (void *)*((void *)this + 5);
      uint64_t v11 = v10[1];
      uint64_t v12 = (char *)(v11 + 5);
      if (v11) {
        BOOL v13 = (unint64_t)v12 > v10[2];
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        unint64_t v14 = 2 * v10[4];
        if (v14 <= 6) {
          unint64_t v14 = 6;
        }
        void v10[4] = v14;
        unint64_t v15 = v14 + 8;
        uint64_t v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
        uint64_t v11 = (uint64_t)(v16 + 1);
        *uint64_t v16 = v10[3];
        uint64_t v12 = (char *)v16 + 13;
        void v10[2] = (char *)v16 + v15;
        void v10[3] = v16;
      }
      v10[1] = v12;
      *(unsigned char *)(v11 + 4) = 116;
      *(_DWORD *)uint64_t v11 = 1718187859;
      unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v10, 153, v11, 5);
LABEL_23:
    }
    if (v7 == 83)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      unint64_t NodeWithAllocatedText = v8;
      if (!v8) {
        return NodeWithAllocatedText;
      }
      int v9 = *((unsigned __int16 *)v8 + 8);
      if (v9 == 180) {
        return NodeWithAllocatedText;
      }
      if (v9 != 153) {
        return 0;
      }
      goto LABEL_23;
    }
  }
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleArchetypeType(unsigned int)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()(void **a1, swift::Demangle::__runtime::Node *a2)
{
  uint64_t v3 = (uint64_t)*a1;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (swift::Demangle::__runtime::Node *)v4;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(v3 + 40), 5);
  swift::Demangle::__runtime::Node::addChild(Node, a2, *(swift::Demangle::__runtime::NodeFactory **)(v3 + 40));
  swift::Demangle::__runtime::Node::addChild(Node, v5, *(swift::Demangle::__runtime::NodeFactory **)(v3 + 40));
  uint64_t v8 = *(char **)(v3 + 8);
  unint64_t v7 = *(void *)(v3 + 16);
  if ((unint64_t)v8 >= v7)
  {
    int v10 = *(char **)v3;
    uint64_t v11 = (uint64_t)&v8[-*(void *)v3];
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      abort();
    }
    uint64_t v14 = v7 - (void)v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v16 = operator new(8 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    int v17 = (swift::Demangle::__runtime::Node **)&v16[8 * v12];
    unint64_t v18 = &v16[8 * v15];
    *int v17 = Node;
    int v9 = v17 + 1;
    if (v8 != v10)
    {
      unint64_t v19 = v8 - v10 - 8;
      if (v19 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v8 - &v16[v11]) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v20 = (v19 >> 3) + 1;
      uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &v8[-v21];
      int v17 = (swift::Demangle::__runtime::Node **)((char *)v17 - v21);
      int v23 = &v16[8 * v12 - 16];
      __int16 v24 = v8 - 16;
      uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *int v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      uint64_t v8 = v22;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          unint64_t v27 = (swift::Demangle::__runtime::Node *)*((void *)v8 - 1);
          v8 -= 8;
          *--int v17 = v27;
        }
        while (v8 != v10);
      }
      uint64_t v8 = *(char **)v3;
    }
    *(void *)uint64_t v3 = v17;
    *(void *)(v3 + 8) = v9;
    *(void *)(v3 + 16) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v8 = Node;
    int v9 = v8 + 8;
  }
  *(void *)(v3 + 8) = v9;
  return Node;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleDependentMemberTypeName(_anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v5 = *((void *)this + 4);
  if (!v5)
  {
LABEL_7:
    int v10 = 0;
LABEL_8:
    if (!v11) {
      return 0;
    }
    uint64_t v12 = (swift::Demangle::__runtime::Node *)v11;
    unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 35);
    if (!Node) {
      return 0;
    }
    int v9 = Node;
    swift::Demangle::__runtime::Node::addChild(Node, v12, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (v10) {
      swift::Demangle::__runtime::Node::addChild(v9, v10, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    }
    unint64_t v15 = (swift::Demangle::__runtime::Node **)*((void *)this + 1);
    unint64_t v14 = *((void *)this + 2);
    if ((unint64_t)v15 >= v14)
    {
      unint64_t v19 = *(char **)this;
      uint64_t v20 = (uint64_t)v15 - *(void *)this;
      uint64_t v21 = v20 >> 3;
      unint64_t v22 = (v20 >> 3) + 1;
      if (v22 >> 61) {
        abort();
      }
      uint64_t v23 = v14 - (void)v19;
      if (v23 >> 2 > v22) {
        unint64_t v22 = v23 >> 2;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v25 = operator new(8 * v24);
      }
      else
      {
        uint64_t v25 = 0;
      }
      long long v26 = (swift::Demangle::__runtime::Node **)&v25[8 * v21];
      unint64_t v27 = &v25[8 * v24];
      *long long v26 = v9;
      uint64_t v16 = v26 + 1;
      if (v15 != (swift::Demangle::__runtime::Node **)v19)
      {
        unint64_t v28 = (char *)v15 - v19 - 8;
        if (v28 < 0x58) {
          goto LABEL_45;
        }
        if ((unint64_t)((char *)v15 - v25 - v20) < 0x20) {
          goto LABEL_45;
        }
        uint64_t v29 = (v28 >> 3) + 1;
        uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        BOOL v31 = &v15[v30 / 0xFFFFFFFFFFFFFFF8];
        long long v26 = (swift::Demangle::__runtime::Node **)((char *)v26 - v30);
        unint64_t v32 = &v25[8 * v21 - 16];
        unint64_t v33 = v15 - 2;
        uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *unint64_t v32 = v35;
          v32 -= 2;
          v33 -= 4;
          v34 -= 4;
        }
        while (v34);
        unint64_t v15 = v31;
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          do
          {
            unint64_t v36 = *--v15;
            *--long long v26 = v36;
          }
          while (v15 != (swift::Demangle::__runtime::Node **)v19);
        }
        unint64_t v15 = *(swift::Demangle::__runtime::Node ***)this;
      }
      *(void *)this = v26;
      *((void *)this + 1) = v16;
      *((void *)this + 2) = v27;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *unint64_t v15 = v9;
      uint64_t v16 = v15 + 1;
    }
    *((void *)this + 1) = v16;
    goto LABEL_39;
  }
  int v6 = (unsigned __int8 *)*((void *)this + 3);
  int v7 = *v6;
  if (v7 != 80)
  {
    if (v7 == 83)
    {
      *((void *)this + 3) = v6 + 1;
      *((void *)this + 4) = v5 - 1;
      if (!v8) {
        return 0;
      }
      int v9 = v8;
      if (*((_WORD *)v8 + 8) != 35) {
        return 0;
      }
LABEL_39:
      int v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 45);
      swift::Demangle::__runtime::Node::addChild(v10, a2, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      swift::Demangle::__runtime::Node::addChild(v10, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      return v10;
    }
    goto LABEL_7;
  }
  *((void *)this + 3) = v6 + 1;
  *((void *)this + 4) = v5 - 1;
  if (v17)
  {
    unint64_t v18 = v17;
    int v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild(v10, v18, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (!v10) {
      return v10;
    }
    goto LABEL_8;
  }
  return 0;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::createSwiftType(uint64_t a1, __int16 a2, const void *a3, size_t a4)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), a2);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = v8[1];
  int v10 = (char *)(v9 + 5);
  if (v9) {
    BOOL v11 = (unint64_t)v10 > v8[2];
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    unint64_t v12 = 2 * v8[4];
    if (v12 <= 6) {
      unint64_t v12 = 6;
    }
    v8[4] = v12;
    unint64_t v13 = v12 + 8;
    unint64_t v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    uint64_t v9 = (uint64_t)(v14 + 1);
    *unint64_t v14 = v8[3];
    int v10 = (char *)v14 + 13;
    v8[2] = (char *)v14 + v13;
    void v8[3] = v14;
  }
  v8[1] = v10;
  *(unsigned char *)(v9 + 4) = 116;
  *(_DWORD *)uint64_t v9 = 1718187859;
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v8, 153, v9, 5);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  uint64_t v16 = *(void **)(a1 + 40);
  if (a4)
  {
    int v17 = (char *)v16[1];
    unint64_t v18 = &v17[a4];
    if (v17) {
      BOOL v19 = (unint64_t)v18 > v16[2];
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      unint64_t v20 = 2 * v16[4];
      if (v20 <= a4 + 1) {
        unint64_t v20 = a4 + 1;
      }
      v16[4] = v20;
      unint64_t v21 = v20 + 8;
      unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      uint64_t v23 = (char *)v22 + v21;
      *unint64_t v22 = v16[3];
      int v17 = (char *)(v22 + 1);
      v16[2] = v23;
      void v16[3] = v22;
      unint64_t v18 = (char *)v22 + a4 + 8;
    }
    v16[1] = v18;
    memmove(v17, a3, a4);
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v24 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v16, 101, (uint64_t)v17, a4);
  swift::Demangle::__runtime::Node::addChild(Node, v24, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  return Node;
}

const char *anonymous namespace'::OldDemangler::demangleImplConvention(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return 0;
  }
  double result = 0;
  uint64_t v5 = *(unsigned char **)(a1 + 24);
  switch(*v5)
  {
    case 'D':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 == 2) {
        return "@unowned_inner_pointer";
      }
      else {
        return 0;
      }
    case 'a':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      int v6 = "@autoreleased";
      BOOL v7 = a2 == 2;
      goto LABEL_19;
    case 'd':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 >= 3) {
        return 0;
      }
      return off_1E4FC85F8[a2];
    case 'e':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      int v6 = "@deallocating";
      BOOL v7 = a2 == 1;
LABEL_19:
      if (v7) {
        return v6;
      }
      else {
        return 0;
      }
    case 'g':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      uint64_t v8 = "@guaranteed";
      uint64_t v9 = "@callee_guaranteed";
      if (a2) {
        uint64_t v9 = 0;
      }
      BOOL v10 = a2 == 1;
      goto LABEL_25;
    case 'i':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      uint64_t v8 = "@out";
      uint64_t v9 = "@in";
      if (a2 != 1) {
        uint64_t v9 = 0;
      }
      BOOL v10 = a2 == 2;
LABEL_25:
      if (v10) {
        double result = v8;
      }
      else {
        double result = v9;
      }
      break;
    case 'l':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 == 1) {
        double result = "@inout";
      }
      else {
        double result = 0;
      }
      break;
    case 'o':
      *(void *)(a1 + 24) = v5 + 1;
      *(void *)(a1 + 32) = v2 - 1;
      if (a2 >= 3) {
        return 0;
      }
      double result = off_1E4FC8610[a2];
      break;
    default:
      return result;
  }
  return result;
}

swift::Demangle::__runtime::Node *anonymous namespace'::OldDemangler::demangleImplParameterOrResult(uint64_t a1, int a2, int a3)
{
  __int16 v4 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6 || (BOOL v7 = *(unsigned char **)(a1 + 24), *v7 != 122))
  {
    if (a2 == 118)
    {
      unsigned int v8 = 1;
      goto LABEL_9;
    }
    if ((a2 & 0xFFFFFFFD) == 0x78)
    {
      unsigned int v8 = 2;
      goto LABEL_9;
    }
    return 0;
  }
  *(void *)(a1 + 24) = v7 + 1;
  *(void *)(a1 + 32) = v6 - 1;
  if (a2 != 120) {
    return 0;
  }
  unsigned int v8 = 2;
  __int16 v4 = 122;
LABEL_9:
  if (!v10) {
    return 0;
  }
  BOOL v11 = v9;
  size_t v12 = v10;
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (swift::Demangle::__runtime::Node *)v13;
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), 232);
  swift::Demangle::__runtime::Node::addChild(Node, v14, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  if (!Node) {
    return 0;
  }
  uint64_t v16 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 40), v4);
  int v17 = *(void **)(a1 + 40);
  unint64_t v18 = (char *)v17[1];
  if (!v18 || (BOOL v19 = &v18[v12], (unint64_t)&v18[v12] > v17[2]))
  {
    unint64_t v20 = 2 * v17[4];
    if (v20 <= v12 + 1) {
      unint64_t v20 = v12 + 1;
    }
    void v17[4] = v20;
    unint64_t v21 = v20 + 8;
    unint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
    uint64_t v23 = (char *)v22 + v21;
    *unint64_t v22 = v17[3];
    unint64_t v18 = (char *)(v22 + 1);
    v17[2] = v23;
    void v17[3] = v22;
    BOOL v19 = (char *)v22 + v12 + 8;
  }
  v17[1] = v19;
  memmove(v18, v11, v12);
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v17, 106, (uint64_t)v18, v12);
  swift::Demangle::__runtime::Node::addChild(v16, NodeWithAllocatedText, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  swift::Demangle::__runtime::Node::addChild(v16, Node, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40));
  return v16;
}

unint64_t anonymous namespace'::OldDemangler::demangleValueWitnessKind(_anonymous_namespace_::OldDemangler *this)
{
  unint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = (unsigned char *)*((void *)this + 3);
    LOBYTE(v6) = *v2;
    *((void *)this + 3) = v2 + 1;
    *((void *)this + 4) = v1 - 1;
    if (v1 == 1)
    {
      unint64_t v1 = 0;
      uint64_t v4 = 0;
    }
    else
    {
      char v3 = v2[1];
      *((void *)this + 3) = v2 + 2;
      *((void *)this + 4) = v1 - 2;
      HIBYTE(v6) = v3;
      switch(v6)
      {
        case 27745:
          uint64_t v4 = 0;
          unint64_t v1 = 0x100000000;
          break;
        case 24931:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 1;
          break;
        case 24948:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 2;
          break;
        case 25956:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 3;
          break;
        case 30840:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 4;
          break;
        case 22616:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 5;
          break;
        case 30808:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 6;
          break;
        case 20547:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 7;
          break;
        case 28739:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 8;
          break;
        case 28771:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 9;
          break;
        case 27476:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 10;
          break;
        case 27508:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 11;
          break;
        case 29296:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 12;
          break;
        case 19284:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 13;
          break;
        case 25411:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 14;
          break;
        case 29780:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 15;
          break;
        case 21620:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 16;
          break;
        case 29560:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 17;
          break;
        case 26488:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 18;
          break;
        case 26485:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 19;
          break;
        case 28789:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 20;
          break;
        case 26997:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 21;
          break;
        case 29797:
          unint64_t v1 = 0x100000000;
          uint64_t v4 = 22;
          break;
        default:
          unint64_t v1 = (unint64_t)(v6 == 29811) << 32;
          uint64_t v4 = 23;
          if (v6 != 29811) {
            uint64_t v4 = 0;
          }
          break;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4 | v1;
}

uint64_t anonymous namespace'::OldDemangler::demangleReabstractSignature(_anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    BOOL v7 = (unsigned char *)*((void *)this + 3);
    if (*v7 == 71)
    {
      *((void *)this + 3) = v7 + 1;
      *((void *)this + 4) = v6 - 1;
      if (!result) {
        return result;
      }
      swift::Demangle::__runtime::Node::addChild(a2, (swift::Demangle::__runtime::Node *)result, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    }
  }
  unsigned int v9 = a3 + 1;
  if (result)
  {
    size_t v10 = (swift::Demangle::__runtime::Node *)result;
    unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild(Node, v10, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (!Node) {
      return 0;
    }
    swift::Demangle::__runtime::Node::addChild(a2, Node, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (!result) {
      return result;
    }
    size_t v12 = (swift::Demangle::__runtime::Node *)result;
    uint64_t v13 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((void **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild(v13, v12, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
    if (v13)
    {
      swift::Demangle::__runtime::Node::addChild(a2, v13, *((swift::Demangle::__runtime::NodeFactory **)this + 5));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void anonymous namespace'::Remangler::mangle(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 < 0x401)
  {
    switch(*((_WORD *)a2 + 8))
    {
      case 0:
        return;
      case 1:
        return;
      case 2:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 529;
        goto LABEL_3;
      case 3:
      case 0x20:
      case 0xCF:
      case 0xE8:
        unsigned int v6 = a3 + 1;
        return;
      case 4:
        return;
      case 5:
        return;
      case 6:
        return;
      case 7:
        size_t v10 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<default-associated-type-metadata-accessor>";
        goto LABEL_604;
      case 8:
        return;
      case 9:
        return;
      case 0xA:
        BOOL v11 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<base-witness-table-accessor>";
        goto LABEL_606;
      case 0xB:
        goto LABEL_38;
      case 0xC:
        return;
      case 0xD:
        goto LABEL_44;
      case 0xE:
        goto LABEL_44;
      case 0xF:
        goto LABEL_44;
      case 0x10:
        goto LABEL_44;
      case 0x11:
        goto LABEL_44;
      case 0x12:
        goto LABEL_44;
      case 0x13:
        goto LABEL_44;
      case 0x14:
        return;
      case 0x15:
        *(_DWORD *)a4 = 9;
        *(void *)(a4 + 8) = a2;
        int v5 = 1560;
        goto LABEL_3;
      case 0x16:
        return;
      case 0x17:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1708;
        goto LABEL_3;
      case 0x18:
        goto LABEL_44;
      case 0x19:
        return;
      case 0x1A:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 517;
        goto LABEL_3;
      case 0x1B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 523;
        goto LABEL_3;
      case 0x1C:
        return;
      case 0x1D:
        return;
      case 0x1E:
        return;
      case 0x1F:
        return;
      case 0x21:
        return;
      case 0x22:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 535;
        goto LABEL_3;
      case 0x23:
        return;
      case 0x24:
        return;
      case 0x25:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2049;
        goto LABEL_3;
      case 0x26:
        return;
      case 0x27:
        return;
      case 0x28:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2079;
        goto LABEL_3;
      case 0x29:
        return;
      case 0x2A:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2006;
        goto LABEL_3;
      case 0x2B:
        goto LABEL_120;
      case 0x2C:
        return;
      case 0x2D:
        return;
      case 0x2E:
        ++a3;
LABEL_120:
        return;
      case 0x2F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 541;
        goto LABEL_3;
      case 0x30:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 548;
        goto LABEL_3;
      case 0x31:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 555;
        goto LABEL_3;
      case 0x32:
        return;
      case 0x33:
        return;
      case 0x34:
        return;
      case 0x35:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "TE";
        goto LABEL_712;
      case 0x36:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "TF";
        goto LABEL_712;
      case 0x37:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "TD";
        goto LABEL_712;
      case 0x38:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "Td";
        goto LABEL_712;
      case 0x39:
        return;
      case 0x3A:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "TI";
        goto LABEL_712;
      case 0x3B:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "Tx";
        goto LABEL_712;
      case 0x3C:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "TX";
        goto LABEL_712;
      case 0x3D:
        goto LABEL_44;
      case 0x3E:
        return;
      case 0x3F:
        uint64_t v13 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "ERR";
        goto LABEL_725;
      case 0x40:
LABEL_38:
        return;
      case 0x41:
        goto LABEL_157;
      case 0x42:
        BOOL v7 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "y";
        goto LABEL_736;
      case 0x43:
        return;
      case 0x44:
        return;
      case 0x45:
        return;
      case 0x46:
        return;
      case 0x47:
        return;
      case 0x48:
        return;
      case 0x49:
        return;
      case 0x4A:
        return;
      case 0x4B:
        return;
      case 0x4C:
        return;
      case 0x4D:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 436;
        goto LABEL_3;
      case 0x4E:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 468;
        goto LABEL_3;
      case 0x4F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 462;
        goto LABEL_3;
      case 0x50:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 484;
        goto LABEL_3;
      case 0x51:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 476;
        goto LABEL_3;
      case 0x52:
LABEL_157:
        return;
      case 0x53:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2908;
        goto LABEL_3;
      case 0x54:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2913;
        goto LABEL_3;
      case 0x55:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2917;
        goto LABEL_3;
      case 0x56:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 420;
        goto LABEL_3;
      case 0x57:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 426;
        goto LABEL_3;
      case 0x58:
        return;
      case 0x59:
        return;
      case 0x5A:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 899;
        goto LABEL_3;
      case 0x5B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 394;
        goto LABEL_3;
      case 0x5C:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 405;
        goto LABEL_3;
      case 0x5D:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 410;
        goto LABEL_3;
      case 0x5E:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 431;
        goto LABEL_3;
      case 0x5F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 400;
        goto LABEL_3;
      case 0x60:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 415;
        goto LABEL_3;
      case 0x61:
        return;
      case 0x62:
        return;
      case 0x63:
        return;
      case 0x64:
        return;
      case 0x65:
        goto LABEL_229;
      case 0x66:
      case 0xA1:
        goto LABEL_738;
      case 0x67:
        return;
      case 0x68:
        return;
      case 0x69:
      case 0x6C:
      case 0x6D:
      case 0x74:
      case 0x77:
      case 0x114:
        goto LABEL_738;
      case 0x6A:
        return;
      case 0x6B:
        return;
      case 0x6E:
        return;
      case 0x6F:
        return;
      case 0x70:
        return;
      case 0x71:
        return;
      case 0x72:
        return;
      case 0x73:
        return;
      case 0x75:
        return;
      case 0x76:
        return;
      case 0x78:
        return;
      case 0x79:
        return;
      case 0x7A:
        return;
      case 0x7B:
        return;
      case 0x7C:
        unint64_t v14 = *((void *)a2 + 1);
        unint64_t v15 = *(char **)a2;
        int v16 = 3;
        goto LABEL_397;
      case 0x7D:
        return;
      case 0x7E:
        return;
      case 0x7F:
        return;
      case 0x80:
        return;
      case 0x81:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "YA";
        goto LABEL_712;
      case 0x82:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "YT";
        goto LABEL_712;
      case 0x83:
        return;
      case 0x84:
        return;
      case 0x85:
        return;
      case 0x86:
        return;
      case 0x87:
        return;
      case 0x88:
        return;
      case 0x89:
        return;
      case 0x8A:
        return;
      case 0x8B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1120;
        goto LABEL_3;
      case 0x8C:
        return;
      case 0x8D:
        return;
      case 0x8E:
        return;
      case 0x8F:
        return;
      case 0x90:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "Tm";
        goto LABEL_712;
      case 0x91:
        return;
      case 0x92:
        return;
      case 0x93:
        return;
      case 0x94:
        int v17 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<method-lookup-function>";
        goto LABEL_697;
      case 0x95:
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<objc-metadata-update-function>";
        unint64_t v18 = (char **)((char *)this + 12728);
        size_t v19 = 31;
        goto LABEL_737;
      case 0x96:
        unint64_t v20 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<objc-resilient-class-stub>";
        goto LABEL_704;
      case 0x97:
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<full-objc-resilient-class-stub>";
        unint64_t v18 = (char **)((char *)this + 12728);
        size_t v19 = 32;
        goto LABEL_737;
      case 0x98:
        return;
      case 0x99:
        v28[0] = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v29 = 0;
        return;
      case 0x9A:
        return;
      case 0x9B:
        return;
      case 0x9C:
        return;
      case 0x9D:
        return;
      case 0x9E:
        return;
      case 0x9F:
        return;
      case 0xA0:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "TO";
        goto LABEL_712;
      case 0xA2:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2904;
        goto LABEL_3;
      case 0xA3:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2900;
        goto LABEL_3;
      case 0xA4:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "To";
        goto LABEL_712;
      case 0xA5:
        return;
      case 0xA6:
        unint64_t v21 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<escaping block type>";
        goto LABEL_461;
      case 0xA7:
        goto LABEL_44;
      case 0xA8:
        return;
      case 0xA9:
        return;
      case 0xAA:
        return;
      case 0xAB:
        return;
      case 0xAC:
        return;
      case 0xAD:
        unint64_t v14 = *((void *)a2 + 1);
        unint64_t v15 = *(char **)a2;
        int v16 = 2;
        goto LABEL_397;
      case 0xAE:
        return;
      case 0xAF:
        unint64_t v14 = *((void *)a2 + 1);
        unint64_t v15 = *(char **)a2;
        int v16 = 1;
LABEL_397:
        return;
      case 0xB0:
        return;
      case 0xB1:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 666;
        goto LABEL_3;
      case 0xB2:
        return;
      case 0xB3:
        return;
      case 0xB4:
        return;
      case 0xB5:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2803;
        goto LABEL_3;
      case 0xB6:
        return;
      case 0xB7:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 497;
        goto LABEL_3;
      case 0xB8:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 504;
        goto LABEL_3;
      case 0xB9:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 511;
        goto LABEL_3;
      case 0xBA:
        return;
      case 0xBB:
        return;
      case 0xBC:
        return;
      case 0xBD:
        return;
      case 0xBE:
        return;
      case 0xBF:
        return;
      case 0xC0:
        return;
      case 0xC1:
        return;
      case 0xC2:
        return;
      case 0xC3:
        return;
      case 0xC4:
        return;
      case 0xC5:
        return;
      case 0xC6:
        return;
      case 0xC7:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 701;
        goto LABEL_3;
      case 0xC8:
        unint64_t v21 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<reabstraction-thunk>";
LABEL_461:
        unint64_t v18 = v21;
        size_t v19 = 21;
        goto LABEL_737;
      case 0xC9:
        unint64_t v22 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<reabstraction-thunk-helper>";
        goto LABEL_608;
      case 0xCA:
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<reabstraction-thunk-helper-with-self>";
        unint64_t v18 = (char **)((char *)this + 12728);
        size_t v19 = 38;
        goto LABEL_737;
      case 0xCB:
        uint64_t v23 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<reabstraction-thunk-helper-with-global-actor>";
        goto LABEL_699;
      case 0xCC:
        return;
      case 0xCD:
        return;
      case 0xCE:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 490;
        goto LABEL_3;
      case 0xD0:
        return;
      case 0xD1:
        return;
      case 0xD2:
        return;
      case 0xD3:
        return;
      case 0xD4:
        return;
      case 0xD5:
        return;
      case 0xD6:
        return;
      case 0xD7:
        return;
      case 0xD8:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 441;
        goto LABEL_3;
      case 0xD9:
        BOOL v7 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "q";
        goto LABEL_736;
      case 0xDA:
        return;
      case 0xDB:
        goto LABEL_44;
      case 0xDC:
        return;
      case 0xDD:
        size_t v19 = *((void *)a2 + 1);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unint64_t v18 = (char **)((char *)this + 12728);
        unsigned int v9 = *(const char **)a2;
        goto LABEL_737;
      case 0xDE:
        return;
      case 0xDF:
        return;
      case 0xE0:
        unsigned int v24 = a3 + 1;
        return;
      case 0xE1:
LABEL_229:
        return;
      case 0xE2:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1970;
        goto LABEL_3;
      case 0xE3:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1974;
        goto LABEL_3;
      case 0xE4:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1978;
        goto LABEL_3;
      case 0xE5:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1982;
        goto LABEL_3;
      case 0xE6:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1986;
        goto LABEL_3;
      case 0xE7:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1990;
        goto LABEL_3;
      case 0xE9:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2797;
        goto LABEL_3;
      case 0xEA:
LABEL_44:
        return;
      case 0xEB:
        return;
      case 0xEC:
        return;
      case 0xED:
        return;
      case 0xEE:
        return;
      case 0xEF:
        return;
      case 0xF0:
        return;
      case 0xF1:
        return;
      case 0xF2:
        return;
      case 0xF3:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 632;
        goto LABEL_3;
      case 0xF4:
        return;
      case 0xF5:
        return;
      case 0xF6:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2270;
        goto LABEL_3;
      case 0xF7:
        return;
      case 0xF8:
        return;
      case 0xF9:
        return;
      case 0xFA:
        return;
      case 0xFB:
        return;
      case 0xFC:
        return;
      case 0xFD:
        return;
      case 0xFE:
        return;
      case 0xFF:
        return;
      case 0x100:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "TV";
        goto LABEL_712;
      case 0x101:
        return;
      case 0x102:
        uint64_t v13 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "MRb";
        goto LABEL_725;
      case 0x103:
        uint64_t v13 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "MRf";
        goto LABEL_725;
      case 0x104:
        uint64_t v13 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "MRa";
        goto LABEL_725;
      case 0x105:
        uint64_t v13 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "MRc";
        goto LABEL_725;
      case 0x106:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2502;
        goto LABEL_3;
      case 0x107:
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<curry-thunk>";
        unint64_t v18 = (char **)((char *)this + 12728);
        size_t v19 = 13;
        goto LABEL_737;
      case 0x108:
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<dispatch-thunk>";
        unint64_t v18 = (char **)((char *)this + 12728);
        size_t v19 = 16;
        goto LABEL_737;
      case 0x109:
        uint64_t v25 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<method-descriptor>";
        goto LABEL_695;
      case 0x10A:
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<protocol-requirements-base-descriptor>";
        unint64_t v18 = (char **)((char *)this + 12728);
        size_t v19 = 39;
        goto LABEL_737;
      case 0x10B:
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<associated-conformance-descriptor>";
        unint64_t v18 = (char **)((char *)this + 12728);
        size_t v19 = 35;
        goto LABEL_737;
      case 0x10C:
        size_t v10 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<default-associated-conformance-descriptor>";
LABEL_604:
        unint64_t v18 = v10;
        size_t v19 = 43;
        goto LABEL_737;
      case 0x10D:
        BOOL v11 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<base-conformance-descriptor>";
LABEL_606:
        unint64_t v18 = v11;
        size_t v19 = 29;
        goto LABEL_737;
      case 0x10E:
        unint64_t v22 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<associated-type-descriptor>";
LABEL_608:
        unint64_t v18 = v22;
        size_t v19 = 28;
        goto LABEL_737;
      case 0x10F:
        BOOL v7 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "Z";
        goto LABEL_736;
      case 0x110:
      case 0x111:
        BOOL v7 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "z";
        goto LABEL_736;
      case 0x112:
        long long v26 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<empty>";
        goto LABEL_612;
      case 0x113:
        long long v26 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<first>";
LABEL_612:
        unint64_t v18 = v26;
        size_t v19 = 7;
        goto LABEL_737;
      case 0x115:
        return;
      case 0x116:
        return;
      case 0x117:
        return;
      case 0x118:
        return;
      case 0x119:
        return;
      case 0x11A:
        return;
      case 0x11B:
        return;
      case 0x11C:
        return;
      case 0x11D:
        return;
      case 0x11E:
        return;
      case 0x11F:
        return;
      case 0x120:
        return;
      case 0x121:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2774;
        goto LABEL_3;
      case 0x122:
        return;
      case 0x123:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2778;
        goto LABEL_3;
      case 0x124:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2782;
        goto LABEL_3;
      case 0x125:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2786;
        goto LABEL_3;
      case 0x126:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2791;
        goto LABEL_3;
      case 0x127:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2813;
        goto LABEL_3;
      case 0x128:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2817;
        goto LABEL_3;
      case 0x129:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2821;
        goto LABEL_3;
      case 0x12A:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2825;
        goto LABEL_3;
      case 0x12B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2879;
        goto LABEL_3;
      case 0x12C:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2851;
        goto LABEL_3;
      case 0x12D:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2809;
        goto LABEL_3;
      case 0x12E:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2855;
        goto LABEL_3;
      case 0x12F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2859;
        goto LABEL_3;
      case 0x130:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2863;
        goto LABEL_3;
      case 0x131:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2867;
        goto LABEL_3;
      case 0x132:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2871;
        goto LABEL_3;
      case 0x133:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2875;
        goto LABEL_3;
      case 0x134:
        return;
      case 0x135:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2848;
        goto LABEL_3;
      case 0x136:
        return;
      case 0x137:
        return;
      case 0x138:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2883;
        goto LABEL_3;
      case 0x139:
        return;
      case 0x13A:
        return;
      case 0x13B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2891;
        goto LABEL_3;
      case 0x13C:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2887;
        goto LABEL_3;
      case 0x13D:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2895;
        goto LABEL_3;
      case 0x13E:
        return;
      case 0x13F:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "Tu";
        goto LABEL_712;
      case 0x140:
        uint64_t v25 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<autodiff-function>";
LABEL_695:
        unint64_t v18 = v25;
        size_t v19 = 19;
        goto LABEL_737;
      case 0x141:
        int v17 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<autodiff-function-kind>";
LABEL_697:
        unint64_t v18 = v17;
        size_t v19 = 24;
        goto LABEL_737;
      case 0x142:
        uint64_t v23 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<autodiff-self-reordering-reabstraction-thunk>";
LABEL_699:
        unint64_t v18 = v23;
        size_t v19 = 46;
        goto LABEL_737;
      case 0x143:
        unint64_t v27 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<autodiff-subset-parameters-thunk>";
        goto LABEL_702;
      case 0x144:
        unint64_t v27 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<autodiff-derivative-vtable-thunk>";
LABEL_702:
        unint64_t v18 = v27;
        size_t v19 = 34;
        goto LABEL_737;
      case 0x145:
        unint64_t v20 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<differentiability-witness>";
LABEL_704:
        unint64_t v18 = v20;
        size_t v19 = 27;
        goto LABEL_737;
      case 0x146:
        return;
      case 0x147:
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "<index-subset>";
        unint64_t v18 = (char **)((char *)this + 12728);
        size_t v19 = 14;
        goto LABEL_737;
      case 0x148:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 781;
        goto LABEL_3;
      case 0x149:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 785;
        goto LABEL_3;
      case 0x14A:
        size_t v12 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "HF";
LABEL_712:
        unint64_t v18 = v12;
        size_t v19 = 2;
        goto LABEL_737;
      case 0x14B:
        return;
      case 0x14C:
        uint64_t v13 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "Twb";
        goto LABEL_725;
      case 0x14D:
        uint64_t v13 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "TwB";
        goto LABEL_725;
      case 0x14E:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2924;
        goto LABEL_3;
      case 0x14F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2920;
        goto LABEL_3;
      case 0x150:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2933;
        goto LABEL_3;
      case 0x151:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2938;
        goto LABEL_3;
      case 0x152:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2928;
        goto LABEL_3;
      case 0x153:
        BOOL v7 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "m";
        goto LABEL_736;
      case 0x154:
        uint64_t v13 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "TwS";
LABEL_725:
        unint64_t v18 = v13;
        size_t v19 = 3;
        goto LABEL_737;
      case 0x155:
      case 0x156:
        *(_DWORD *)a4 = 11;
        goto LABEL_739;
      case 0x157:
        return;
      case 0x158:
        return;
      case 0x159:
        return;
      case 0x15A:
        BOOL v7 = (char **)((char *)this + 12728);
        unsigned int v8 = (void *)*((void *)this + 1593);
        unsigned int v9 = "a";
LABEL_736:
        unint64_t v18 = v7;
        size_t v19 = 1;
LABEL_737:
        swift::Demangle::__runtime::CharVector::append(v18, v9, v19, v8);
LABEL_738:
        *(_DWORD *)a4 = 0;
LABEL_739:
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        break;
      case 0x15B:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2943;
        goto LABEL_3;
      case 0x15C:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1939;
        goto LABEL_3;
      case 0x15D:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 1944;
        goto LABEL_3;
      case 0x15E:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2612;
        goto LABEL_3;
      case 0x15F:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2617;
        goto LABEL_3;
      case 0x160:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2622;
        goto LABEL_3;
      case 0x161:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 2626;
        goto LABEL_3;
      case 0x162:
        *(_DWORD *)a4 = 7;
        *(void *)(a4 + 8) = a2;
        int v5 = 3051;
        goto LABEL_3;
      default:
        *(_DWORD *)a4 = 4;
        *(void *)(a4 + 8) = a2;
        int v5 = 83;
        goto LABEL_3;
    }
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = a2;
    int v5 = 74;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v5;
  }
}

void swift::Demangle::__runtime::mangleNodeOld(swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this);
  uint64_t v6 = v5;
  if (!v3)
  {
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(_DWORD *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    return;
  }
  BOOL v7 = v4;
  unsigned int v8 = (swift::Demangle::__runtime::Node *)v3;
  char v23 = 0;
  v22[1540] = 0;
  unint64_t v21 = v4;
  v22[1539] = 0;
  char v26 = 0;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  char v29 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  char v32 = 0;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  char v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  char v38 = 0;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  char v41 = 0;
  uint64_t v40 = 0;
  uint64_t v39 = 0;
  char v44 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  char v47 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  char v53 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  char v56 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  char v59 = 0;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  char v62 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  char v65 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v68 = 0;
  bzero(v22, 0x3011uLL);
  int v69 = 1065353216;
  uint64_t v72 = v7;
  unsigned int v9 = (void *)v7[1];
  if (!v9 || (unint64_t)(v9 + 4) > v7[2])
  {
    unint64_t v10 = 2 * v7[4];
    if (v10 <= 0x21) {
      unint64_t v10 = 33;
    }
    v7[4] = v10;
    unint64_t v11 = v10 + 8;
    size_t v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    void *v12 = v7[3];
    unsigned int v9 = v12 + 1;
    v7[2] = (char *)v12 + v11;
    void v7[3] = v12;
  }
  v7[1] = v9 + 4;
  size_t v70 = v9;
  uint64_t v71 = 0x2000000000;
  if (v19)
  {
    *(_OWORD *)uint64_t v6 = v19;
    uint64_t v13 = v20;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 16) = v13;
    unint64_t v14 = (void *)*((void *)&v67 + 1);
    if (*((void *)&v67 + 1)) {
      goto LABEL_9;
    }
  }
  else
  {
    int v17 = v70;
    uint64_t v18 = v71;
    *(_DWORD *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = v17;
    *(void *)(v6 + 32) = v18;
    unint64_t v14 = (void *)*((void *)&v67 + 1);
    if (*((void *)&v67 + 1))
    {
      do
      {
LABEL_9:
        unint64_t v15 = (void *)*v14;
        operator delete(v14);
        unint64_t v14 = v15;
      }
      while (v15);
    }
  }
  int v16 = (void *)*((void *)&v66 + 1);
  *((void *)&v66 + 1) = 0;
  if (v16) {
    operator delete(v16);
  }
}

void swift::Demangle::__runtime::mangleNodeAsObjcCString(swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this);
  uint64_t v6 = v5;
  if (!v3)
  {
    *(_DWORD *)uint64_t v5 = 1;
    *(void *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 3014;
    return;
  }
  BOOL v7 = v4;
  unsigned int v8 = (swift::Demangle::__runtime::Node *)v3;
  char v21 = 0;
  v20[1540] = 0;
  long long v19 = v4;
  v20[1539] = 0;
  char v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  char v27 = 0;
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  char v30 = 0;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  char v33 = 0;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  char v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  char v39 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  char v42 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  char v45 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  char v48 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  char v51 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  char v54 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  char v57 = 0;
  uint64_t v56 = 0;
  uint64_t v55 = 0;
  char v60 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  char v63 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v66 = 0;
  bzero(v20, 0x3011uLL);
  int v67 = 1065353216;
  int v69 = v7;
  unsigned int v9 = (char *)v7[1];
  if (!v9 || (unint64_t)(v9 + 32) > v7[2])
  {
    unint64_t v10 = 2 * v7[4];
    if (v10 <= 0x21) {
      unint64_t v10 = 33;
    }
    v7[4] = v10;
    unint64_t v11 = v10 + 8;
    size_t v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
    void *v12 = v7[3];
    unsigned int v9 = (char *)(v12 + 1);
    v7[2] = (char *)v12 + v11;
    void v7[3] = v12;
  }
  v7[1] = v9 + 32;
  v68[0] = v9;
  v68[1] = (char *)0x2000000000;
  swift::Demangle::__runtime::CharVector::append(v68, "_Tt", 3uLL, v7);
  if (v17)
  {
    *(_OWORD *)uint64_t v6 = v17;
    *(void *)(v6 + 16) = v18;
    uint64_t v13 = (void *)*((void *)&v65 + 1);
    if (*((void *)&v65 + 1)) {
      goto LABEL_9;
    }
  }
  else
  {
    swift::Demangle::__runtime::CharVector::append(v68, "_", 2uLL, v69);
    int v16 = v68[0];
    *(_DWORD *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = v16;
    uint64_t v13 = (void *)*((void *)&v65 + 1);
    if (*((void *)&v65 + 1))
    {
      do
      {
LABEL_9:
        unint64_t v14 = (void *)*v13;
        operator delete(v13);
        uint64_t v13 = v14;
      }
      while (v14);
    }
  }
  unint64_t v15 = (void *)*((void *)&v64 + 1);
  *((void *)&v64 + 1) = 0;
  if (v15) {
    operator delete(v15);
  }
}

void anonymous namespace'::Remangler::mangleAllocator(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleAnonymousContext(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleAssociatedType(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 == 2) {
      goto LABEL_13;
    }
    if (v6 == 5)
    {
      int v7 = *((_DWORD *)a2 + 2);
      if (v7)
      {
        if (v7 == 1)
        {
          a2 = *(swift::Demangle::__runtime::Node **)a2;
          goto LABEL_7;
        }
LABEL_13:
        *(_DWORD *)a4 = 1;
        *(void *)(a4 + 8) = a2;
        *(_DWORD *)(a4 + 16) = 2116;
        return;
      }
    }
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    size_t v12 = (unsigned char *)*((void *)this + 1591);
    if (v10 < v11)
    {
LABEL_31:
      *((_DWORD *)this + 3184) = v10 + 1;
      v12[v10] = 95;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return;
    }
    uint64_t v13 = (void *)*((void *)this + 1593);
    unint64_t v14 = (unsigned char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v16 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v16 <= v15)
      {
        v13[1] = v16;
        LODWORD(v17) = 1;
LABEL_30:
        *((_DWORD *)this + 3185) = v11 + v17;
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = (2 * v11);
    }
    size_t v18 = v17 + v11;
    if (v14) {
      BOOL v19 = (unint64_t)&v14[v17 + v11] > v15;
    }
    else {
      BOOL v19 = 1;
    }
    size_t v12 = (unsigned char *)v13[1];
    if (v19)
    {
      unint64_t v20 = 2 * v13[4];
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      v13[4] = v20;
      unint64_t v21 = v20 + 8;
      uint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      uint64_t v23 = (char *)v22 + v21;
      *uint64_t v22 = v13[3];
      size_t v12 = v22 + 1;
      void v13[2] = v23;
      _OWORD v13[3] = v22;
    }
    v13[1] = &v12[v18];
    if (v11) {
      memcpy(v12, *((const void **)this + 1591), v11);
    }
    *((void *)this + 1591) = v12;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_30;
  }
LABEL_7:
  unsigned int v8 = *(swift::Demangle::__runtime::Node **)a2;
  int v9 = a3 + 1;
}

char *anonymous namespace'::Remangler::mangleAssociatedTypeRef@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v15[0] = 0;
  v15[1] = 0;
  char v16 = 0;
  if (result)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    int v9 = (_DWORD *)(a4 + 16);
LABEL_22:
    *int v9 = 0;
    return result;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Q", 1uLL, this[1593]);
  int v10 = *((unsigned __int8 *)a2 + 18);
  size_t v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      uint64_t v12 = *(void *)a2;
      size_t v11 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_11;
    }
    size_t v11 = 0;
  }
  switch(v10)
  {
    case 1:
      uint64_t v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v11 == v13) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 2:
      uint64_t v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v11 == v13) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 5:
      uint64_t v12 = *(void *)a2;
LABEL_11:
      uint64_t v13 = (swift::Demangle::__runtime::Node **)(v12 + 8 * *((unsigned int *)a2 + 2));
      if (v11 == v13) {
        goto LABEL_21;
      }
      goto LABEL_18;
  }
  uint64_t v13 = 0;
  if (!v11)
  {
LABEL_21:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    int v9 = (_DWORD *)(a4 + 16);
    uint64_t result = swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)this, (const swift::Demangle::__runtime::SubstitutionEntry *)v15);
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    goto LABEL_22;
  }
LABEL_18:
  unsigned int v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v11 == v13) {
      goto LABEL_21;
    }
  }
}

void *anonymous namespace'::Remangler::mangleAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wt", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      size_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      uint64_t v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      size_t v11 = *a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

char *anonymous namespace'::Remangler::mangleAccessorAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMa", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void anonymous namespace'::Remangler::mangleAssociatedTypeWitnessTableAccessor(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "WT", 2uLL, this[1593]);
  if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) != 3)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v12 = 970;
LABEL_15:
    *(_DWORD *)(a4 + 16) = v12;
    return;
  }
  unsigned int v8 = a3 + 1;
  if (*(_DWORD *)a4) {
    return;
  }
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if (v9 == 2) {
    goto LABEL_8;
  }
  if (v9 != 5 || *((_DWORD *)a2 + 2) <= 1u)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v12 = 119;
    goto LABEL_15;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_8:
  if (!*(_DWORD *)a4)
  {
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
      a2 = *(swift::Demangle::__runtime::Node **)a2;
    }
    uint64_t v11 = (swift::Demangle::__runtime::Node *)*((void *)a2 + 2);
  }
}

unsigned int *anonymous namespace'::Remangler::mangleAutoClosureType@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    uint64_t v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      unint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 75;
  int v21 = *((unsigned __int8 *)a2 + 18);
  uint64_t v22 = a2;
  if ((v21 - 1) >= 2)
  {
    if (v21 == 5)
    {
      uint64_t v23 = *a2;
      uint64_t v22 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_29;
    }
    uint64_t v22 = 0;
  }
  switch(v21)
  {
    case 1:
      char v24 = a2 + 1;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 2:
      char v24 = a2 + 2;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 5:
      uint64_t v23 = *a2;
LABEL_29:
      char v24 = (swift::Demangle::__runtime::Node **)((char *)v23 + 8 * *((unsigned int *)a2 + 2));
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
  }
  char v24 = 0;
  if (!v22)
  {
LABEL_39:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_36:
  unsigned int v25 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v22 == v24) {
      goto LABEL_39;
    }
  }
}

char *anonymous namespace'::Remangler::mangleBodyAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMb", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void anonymous namespace'::Remangler::mangleBoundGenericClass(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

unsigned int *anonymous namespace'::Remangler::mangleCFunctionPointer@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    uint64_t v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      unint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 99;
  int v21 = *((unsigned __int8 *)a2 + 18);
  uint64_t v22 = a2;
  if ((v21 - 1) >= 2)
  {
    if (v21 == 5)
    {
      uint64_t v23 = *a2;
      uint64_t v22 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_29;
    }
    uint64_t v22 = 0;
  }
  switch(v21)
  {
    case 1:
      char v24 = a2 + 1;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 2:
      char v24 = a2 + 2;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 5:
      uint64_t v23 = *a2;
LABEL_29:
      char v24 = (swift::Demangle::__runtime::Node **)((char *)v23 + 8 * *((unsigned int *)a2 + 2));
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
  }
  char v24 = 0;
  if (!v22)
  {
LABEL_39:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_36:
  unsigned int v25 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v22 == v24) {
      goto LABEL_39;
    }
  }
}

void *anonymous namespace'::Remangler::mangleClassMetadataBaseOffset@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mo", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

char *anonymous namespace'::Remangler::mangleConformanceAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMc", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void anonymous namespace'::Remangler::mangleConstructor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleCoroutineContinuationPrototype@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TC", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void anonymous namespace'::Remangler::mangleDeallocator(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleDefaultArgumentInitializer(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleDependentAssociatedTypeRef(_anonymous_namespace_::Remangler *this@<X0>, const void **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  v29[0] = 0;
  v29[1] = 0;
  char v30 = 0;
  {
    int v9 = *((unsigned __int8 *)v5 + 18);
    if (v9 != 2)
    {
      if (v9 != 5) {
        goto LABEL_34;
      }
      if (*((_DWORD *)v5 + 2) < 2u) {
        goto LABEL_35;
      }
    }
    unsigned int v10 = *((_DWORD *)this + 3184);
    size_t v11 = *((unsigned int *)this + 3185);
    int v12 = (unsigned char *)*((void *)this + 1591);
    if (v10 < v11)
    {
LABEL_26:
      *((_DWORD *)this + 3184) = v10 + 1;
      v12[v10] = 80;
      int v23 = *((unsigned __int8 *)v5 + 18);
      char v24 = v5;
      if (v23 != 2)
      {
        if (v23 != 5 || *((_DWORD *)v5 + 2) < 2u)
        {
          unsigned int v25 = 0;
          goto LABEL_32;
        }
        char v24 = (const void **)*v5;
      }
      unsigned int v25 = (swift::Demangle::__runtime::Node *)v24[1];
LABEL_32:
      if (*(_DWORD *)a4) {
        return;
      }
      int v9 = *((unsigned __int8 *)v5 + 18);
LABEL_34:
      if ((v9 - 1) < 2)
      {
LABEL_36:
        uint64_t v26 = *v5;
        char v27 = *(const void **)*v5;
        unint64_t v28 = v26[1];
        swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, v28, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
        swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v27, v28, *((void **)this + 1593));
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        unsigned int v8 = (_DWORD *)(a4 + 16);
        swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)this, (const swift::Demangle::__runtime::SubstitutionEntry *)v29);
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        goto LABEL_37;
      }
LABEL_35:
      uint64_t v5 = (const void **)*v5;
      goto LABEL_36;
    }
    unsigned int v13 = (void *)*((void *)this + 1593);
    unint64_t v14 = (unsigned char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v16 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v16 <= v15)
      {
        v13[1] = v16;
        LODWORD(v17) = 1;
LABEL_25:
        *((_DWORD *)this + 3185) = v11 + v17;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = (2 * v11);
    }
    size_t v18 = v17 + v11;
    if (v14) {
      BOOL v19 = (unint64_t)&v14[v17 + v11] > v15;
    }
    else {
      BOOL v19 = 1;
    }
    int v12 = (unsigned char *)v13[1];
    if (v19)
    {
      unint64_t v20 = 2 * v13[4];
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      v13[4] = v20;
      unint64_t v21 = v20 + 8;
      uint64_t v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      *uint64_t v22 = v13[3];
      int v12 = v22 + 1;
      void v13[2] = (char *)v22 + v21;
      _OWORD v13[3] = v22;
    }
    v13[1] = &v12[v18];
    if (v11) {
      memcpy(v12, *((const void **)this + 1591), v11);
    }
    *((void *)this + 1591) = v12;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_25;
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  unsigned int v8 = (_DWORD *)(a4 + 16);
LABEL_37:
  *unsigned int v8 = 0;
}

void anonymous namespace'::Remangler::mangleDependentGenericConformanceRequirement(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    unsigned int v10 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_7;
  }
  unsigned int v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  int v12 = v10;
  if ((v11 - 1) >= 2) {
    int v12 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_WORD *)(*(void *)v12 + 16) != 38)
  {
    if (*a4) {
      return;
    }
    goto LABEL_19;
  }
  if ((v11 - 1) < 2) {
    goto LABEL_14;
  }
  if (v11 == 5 && *((_DWORD *)v10 + 2))
  {
    unsigned int v10 = *(swift::Demangle::__runtime::Node **)v10;
LABEL_14:
    unsigned int v13 = *(swift::Demangle::__runtime::Node **)v10;
    goto LABEL_18;
  }
  unsigned int v13 = 0;
LABEL_18:
  if (*a4) {
    return;
  }
LABEL_19:
  unsigned int v14 = a3 + 1;
  int v15 = *((unsigned __int8 *)v5 + 18);
  unint64_t v16 = v5;
  if (v15 != 2)
  {
    if (v15 != 5) {
      goto LABEL_49;
    }
    unsigned int v17 = *((_DWORD *)v5 + 2);
    if (v17 != 2)
    {
LABEL_46:
      if (v17 >= 2)
      {
        uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
        goto LABEL_48;
      }
LABEL_49:
      char v24 = 0;
      goto LABEL_50;
    }
    unint64_t v16 = *(swift::Demangle::__runtime::Node **)v5;
  }
  if (*(_WORD *)(*((void *)v16 + 1) + 16) == 232)
  {
    size_t v18 = v5;
    if (v15 != 2)
    {
      if (*((_DWORD *)v5 + 2) < 2u)
      {
        uint64_t v19 = 0;
        goto LABEL_29;
      }
      size_t v18 = *(swift::Demangle::__runtime::Node **)v5;
    }
    uint64_t v19 = *((void *)v18 + 1);
LABEL_29:
    int v20 = *(unsigned __int8 *)(v19 + 18);
    if (v20 != 1 && (v20 != 5 || *(_DWORD *)(v19 + 8) != 1)) {
      goto LABEL_44;
    }
    unint64_t v21 = v5;
    if (v15 != 2)
    {
      if (*((_DWORD *)v5 + 2) < 2u)
      {
        uint64_t v22 = 0;
LABEL_37:
        if (v22[18] - 1 >= 2) {
          uint64_t v22 = *(unsigned __int8 **)v22;
        }
        if (*(_WORD *)(*(void *)v22 + 16) == 180)
        {
          if (v15 != 2)
          {
            if (*((_DWORD *)v5 + 2) < 2u)
            {
              int v23 = 0;
LABEL_54:
              int v25 = *((unsigned __int8 *)v23 + 18);
              if ((v25 - 1) >= 2)
              {
                if (v25 != 5 || !*((_DWORD *)v23 + 2))
                {
                  uint64_t v26 = 0;
                  goto LABEL_60;
                }
                int v23 = *(swift::Demangle::__runtime::Node **)v23;
              }
              uint64_t v26 = *(swift::Demangle::__runtime::Node **)v23;
LABEL_60:
              return;
            }
            uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
          }
          int v23 = (swift::Demangle::__runtime::Node *)*((void *)v5 + 1);
          goto LABEL_54;
        }
        goto LABEL_44;
      }
      unint64_t v21 = *(swift::Demangle::__runtime::Node **)v5;
    }
    uint64_t v22 = (unsigned __int8 *)*((void *)v21 + 1);
    goto LABEL_37;
  }
LABEL_44:
  if (v15 != 2)
  {
    unsigned int v17 = *((_DWORD *)v5 + 2);
    goto LABEL_46;
  }
LABEL_48:
  char v24 = (swift::Demangle::__runtime::Node *)*((void *)v5 + 1);
LABEL_50:
}

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericParamType@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2) {
    uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (!**(void **)v7)
  {
    int v8 = a2;
    if (v6 == 5) {
      int v8 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (!**((void **)v8 + 1))
    {
      unsigned int v23 = this[3184];
      size_t v24 = this[3185];
      int v25 = (char *)*((void *)this + 1591);
      if (v23 < v24)
      {
LABEL_47:
        *(_DWORD *)(v4 + 12736) = v23 + 1;
        v25[v23] = 120;
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 16) = 0;
        return this;
      }
      uint64_t v26 = (void *)*((void *)this + 1593);
      char v27 = (char *)v26[1];
      if (&v25[v24] == v27)
      {
        unint64_t v29 = (unint64_t)&v25[v24 + 1];
        unint64_t v28 = v26[2];
        if (v29 <= v28)
        {
          v26[1] = v29;
          LODWORD(v30) = 1;
LABEL_46:
          *(_DWORD *)(v4 + 12740) = v24 + v30;
          goto LABEL_47;
        }
      }
      else
      {
        unint64_t v28 = v26[2];
      }
      if ((2 * v24) <= 4) {
        uint64_t v30 = 4;
      }
      else {
        uint64_t v30 = (2 * v24);
      }
      size_t v31 = v30 + v24;
      if (!v27 || (unint64_t)&v27[v31] > v28)
      {
        unint64_t v32 = 2 * v26[4];
        if (v32 <= v31 + 1) {
          unint64_t v32 = v31 + 1;
        }
        v26[4] = v32;
        unint64_t v33 = v32 + 8;
        this = (unsigned int *)malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
        uint64_t v34 = (char *)this + v33;
        *(void *)this = v26[3];
        char v27 = (char *)(this + 2);
        v26[2] = v34;
        void v26[3] = this;
      }
      v26[1] = &v27[v31];
      if (v24) {
        this = (unsigned int *)memcpy(v27, *(const void **)(v4 + 12728), v24);
      }
      *(void *)(v4 + 12728) = v27;
      LODWORD(v24) = *(_DWORD *)(v4 + 12740);
      int v25 = v27;
      unsigned int v23 = *(_DWORD *)(v4 + 12736);
      goto LABEL_46;
    }
  }
  unsigned int v9 = this[3184];
  size_t v10 = this[3185];
  int v11 = (char *)*((void *)this + 1591);
  if (v9 >= v10)
  {
    int v12 = (void *)*((void *)this + 1593);
    unsigned int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_25:
        *(_DWORD *)(v4 + 12740) = v10 + v16;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    int v11 = (char *)v12[1];
    if (v18)
    {
      unint64_t v19 = 2 * v12[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v12[4] = v19;
      unint64_t v20 = v19 + 8;
      unint64_t v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      uint64_t v22 = (char *)v21 + v20;
      *unint64_t v21 = v12[3];
      int v11 = (char *)(v21 + 1);
      v12[2] = v22;
      void v12[3] = v21;
    }
    v12[1] = &v11[v17];
    if (v10) {
      memcpy(v11, *(const void **)(v4 + 12728), v10);
    }
    *(void *)(v4 + 12728) = v11;
    LODWORD(v10) = *(_DWORD *)(v4 + 12740);
    unsigned int v9 = *(_DWORD *)(v4 + 12736);
    goto LABEL_25;
  }
LABEL_26:
  *(_DWORD *)(v4 + 12736) = v9 + 1;
  v11[v9] = 113;
}

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericSameTypeRequirement@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  uint64_t v5 = a2;
  int v8 = *((unsigned __int8 *)a2 + 18);
  unsigned int v9 = a2;
  if ((v8 - 1) < 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    size_t v10 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_7;
  }
  size_t v10 = 0;
LABEL_7:
  int v11 = *((unsigned __int8 *)v10 + 18);
  int v12 = v10;
  if ((v11 - 1) >= 2) {
    int v12 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_WORD *)(*(void *)v12 + 16) != 38)
  {
    if (*a4) {
      return result;
    }
    goto LABEL_19;
  }
  if ((v11 - 1) < 2) {
    goto LABEL_14;
  }
  if (v11 == 5 && *((_DWORD *)v10 + 2))
  {
    size_t v10 = *(swift::Demangle::__runtime::Node **)v10;
LABEL_14:
    unsigned int v13 = *(swift::Demangle::__runtime::Node **)v10;
    goto LABEL_18;
  }
  unsigned int v13 = 0;
LABEL_18:
  if (*a4) {
    return result;
  }
LABEL_19:
  unsigned int v15 = a3 + 1;
  unsigned int v16 = *((_DWORD *)this + 3184);
  size_t v17 = *((unsigned int *)this + 3185);
  BOOL v18 = (char *)this[1591];
  if (v16 < v17) {
    goto LABEL_36;
  }
  unint64_t v19 = this[1593];
  unint64_t v20 = (char *)v19[1];
  if (&v18[v17] != v20)
  {
    unint64_t v21 = v19[2];
LABEL_23:
    if ((2 * v17) <= 4) {
      uint64_t v23 = 4;
    }
    else {
      uint64_t v23 = (2 * v17);
    }
    size_t v24 = v23 + v17;
    if (!v20 || (unint64_t)&v20[v24] > v21)
    {
      unint64_t v25 = 2 * v19[4];
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      v19[4] = v25;
      unint64_t v26 = v25 + 8;
      char v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      unint64_t v28 = (char *)v27 + v26;
      *char v27 = v19[3];
      unint64_t v20 = (char *)(v27 + 1);
      void v19[2] = v28;
      uint64_t v19[3] = v27;
    }
    v19[1] = &v20[v24];
    if (v17) {
      memcpy(v20, this[1591], v17);
    }
    this[1591] = v20;
    LODWORD(v17) = *((_DWORD *)this + 3185);
    BOOL v18 = v20;
    unsigned int v16 = *((_DWORD *)this + 3184);
    goto LABEL_35;
  }
  unint64_t v22 = (unint64_t)&v18[v17 + 1];
  unint64_t v21 = v19[2];
  if (v22 > v21) {
    goto LABEL_23;
  }
  v19[1] = v22;
  LODWORD(v23) = 1;
LABEL_35:
  *((_DWORD *)this + 3185) = v17 + v23;
LABEL_36:
  *((_DWORD *)this + 3184) = v16 + 1;
  v18[v16] = 122;
  int v29 = *((unsigned __int8 *)v5 + 18);
  if (v29 != 2)
  {
    if (v29 != 5 || *((_DWORD *)v5 + 2) < 2u)
    {
      uint64_t v30 = 0;
      goto LABEL_42;
    }
    uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
  }
  uint64_t v30 = (swift::Demangle::__runtime::Node *)*((void *)v5 + 1);
LABEL_42:
}

void *anonymous namespace'::Remangler::mangleDependentGenericLayoutRequirement@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = *((unsigned __int8 *)a2 + 18);
  int v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    int v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_7;
  }
  unsigned int v9 = 0;
LABEL_7:
  int v10 = *((unsigned __int8 *)v9 + 18);
  int v11 = v9;
  if ((v10 - 1) >= 2) {
    int v11 = *(swift::Demangle::__runtime::Node **)v9;
  }
  if (*(_WORD *)(*(void *)v11 + 16) != 38)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    goto LABEL_19;
  }
  if ((v10 - 1) < 2) {
    goto LABEL_14;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    unsigned int v9 = *(swift::Demangle::__runtime::Node **)v9;
LABEL_14:
    int v12 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_18;
  }
  int v12 = 0;
LABEL_18:
  if (*(_DWORD *)a4) {
    return result;
  }
LABEL_19:
  unsigned int v14 = *((_DWORD *)this + 3184);
  size_t v15 = *((unsigned int *)this + 3185);
  unsigned int v16 = (char *)*((void *)this + 1591);
  if (v14 < v15) {
    goto LABEL_36;
  }
  size_t v17 = (void *)*((void *)this + 1593);
  BOOL v18 = (char *)v17[1];
  if (&v16[v15] != v18)
  {
    unint64_t v19 = v17[2];
LABEL_23:
    if ((2 * v15) <= 4) {
      uint64_t v21 = 4;
    }
    else {
      uint64_t v21 = (2 * v15);
    }
    size_t v22 = v21 + v15;
    if (!v18 || (unint64_t)&v18[v22] > v19)
    {
      unint64_t v23 = 2 * v17[4];
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      void v17[4] = v23;
      unint64_t v24 = v23 + 8;
      unint64_t v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      unint64_t v26 = (char *)v25 + v24;
      *unint64_t v25 = v17[3];
      BOOL v18 = (char *)(v25 + 1);
      v17[2] = v26;
      void v17[3] = v25;
    }
    v17[1] = &v18[v22];
    if (v15) {
      memcpy(v18, *((const void **)this + 1591), v15);
    }
    *((void *)this + 1591) = v18;
    LODWORD(v15) = *((_DWORD *)this + 3185);
    unsigned int v16 = v18;
    unsigned int v14 = *((_DWORD *)this + 3184);
    goto LABEL_35;
  }
  unint64_t v20 = (unint64_t)&v16[v15 + 1];
  unint64_t v19 = v17[2];
  if (v20 > v19) {
    goto LABEL_23;
  }
  v17[1] = v20;
  LODWORD(v21) = 1;
LABEL_35:
  *((_DWORD *)this + 3185) = v15 + v21;
LABEL_36:
  *((_DWORD *)this + 3184) = v14 + 1;
  v16[v14] = 108;
  if (*((unsigned char *)a2 + 18) == 5)
  {
    unsigned int v27 = *((_DWORD *)a2 + 2);
    uint64_t v28 = *(void *)a2;
    uint64_t v29 = *(void *)(*(void *)a2 + 8);
    uint64_t v30 = *(const void **)v29;
    size_t v31 = *(void *)(v29 + 8);
    if (v27 > 2)
    {
      unsigned int v32 = **(_DWORD **)(v28 + 16);
      if (v27 == 3) {
        unsigned int v33 = -1;
      }
      else {
        unsigned int v33 = **(_DWORD **)(v28 + 24);
      }
      uint64_t result = swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v30, v31, *((void **)this + 1593));
      if ((v32 & 0x80000000) == 0) {
        uint64_t result = swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, v32, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
      }
      if ((v33 & 0x80000000) == 0)
      {
        swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "_", 1uLL, *((void **)this + 1593));
        uint64_t result = swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, v33, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
      }
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v34 = *((void *)a2 + 1);
    uint64_t v30 = *(const void **)v34;
    size_t v31 = *(void *)(v34 + 8);
  }
  uint64_t result = swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v30, v31, *((void **)this + 1593));
LABEL_42:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleDependentGenericSignature@<X0>(void *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  int v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      int v8 = *a2;
      int v7 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    int v7 = 0;
  }
  if (v6 == 1)
  {
    int v10 = a2 + 1;
LABEL_13:
    int v8 = (swift::Demangle::__runtime::Node *)a2;
    goto LABEL_14;
  }
  if (v6 == 2)
  {
    int v10 = a2 + 2;
    goto LABEL_13;
  }
  if (v6 != 5)
  {
    int v10 = 0;
    goto LABEL_29;
  }
  int v8 = *a2;
LABEL_9:
  uint64_t v9 = *((unsigned int *)a2 + 2);
  int v10 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8 * v9);
  if (!v9) {
    goto LABEL_29;
  }
LABEL_14:
  if (*(_WORD *)(*(void *)v8 + 16) == 37)
  {
    int v11 = (swift::Demangle::__runtime::Node *)a2;
    if ((v6 - 1) >= 2) {
      int v11 = *a2;
    }
    if (**(void **)v11 == 1)
    {
      if (v6 != 1)
      {
        if (v6 != 2)
        {
          if (*((_DWORD *)a2 + 2) == 1) {
            goto LABEL_23;
          }
          a2 = (swift::Demangle::__runtime::Node **)*a2;
        }
        if (*((_WORD *)a2[1] + 8) == 37) {
          goto LABEL_29;
        }
      }
LABEL_23:
      ++v7;
LABEL_24:
      if (v7 == v10) {
        goto LABEL_56;
      }
      unsigned int v12 = *(_DWORD *)(v4 + 12736);
      size_t v13 = *(unsigned int *)(v4 + 12740);
      unsigned int v14 = *(unsigned char **)(v4 + 12728);
      if (v12 < v13)
      {
LABEL_95:
        *(_DWORD *)(v4 + 12736) = v12 + 1;
        v14[v12] = 82;
        do
        {
          if (*(_DWORD *)a4) {
            return this;
          }
          ++v7;
        }
        while (v7 != v10);
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        char v45 = (_DWORD *)(a4 + 16);
        unsigned int v54 = *(_DWORD *)(v4 + 12736);
        size_t v55 = *(unsigned int *)(v4 + 12740);
        uint64_t v56 = *(unsigned char **)(v4 + 12728);
        if (v54 < v55)
        {
LABEL_119:
          *(_DWORD *)(v4 + 12736) = v54 + 1;
          v56[v54] = 114;
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          goto LABEL_76;
        }
        char v57 = *(void **)(v4 + 12744);
        uint64_t v58 = (unsigned char *)v57[1];
        if (&v56[v55] == v58)
        {
          unint64_t v60 = (unint64_t)&v56[v55 + 1];
          unint64_t v59 = v57[2];
          if (v60 <= v59)
          {
            v57[1] = v60;
            LODWORD(v61) = 1;
LABEL_118:
            *(_DWORD *)(v4 + 12740) = v55 + v61;
            goto LABEL_119;
          }
        }
        else
        {
          unint64_t v59 = v57[2];
        }
        if ((2 * v55) <= 4) {
          uint64_t v61 = 4;
        }
        else {
          uint64_t v61 = (2 * v55);
        }
        size_t v62 = v61 + v55;
        if (v58) {
          BOOL v63 = (unint64_t)&v58[v61 + v55] > v59;
        }
        else {
          BOOL v63 = 1;
        }
        uint64_t v56 = (unsigned char *)v57[1];
        if (v63)
        {
          unint64_t v64 = 2 * v57[4];
          if (v64 <= v62 + 1) {
            unint64_t v64 = v62 + 1;
          }
          v57[4] = v64;
          unint64_t v65 = v64 + 8;
          this = malloc_type_malloc(v64 + 8, 0xD0263BC5uLL);
          uint64_t v66 = (char *)this + v65;
          *this = v57[3];
          uint64_t v56 = this + 1;
          v57[2] = v66;
          v57[3] = this;
        }
        v57[1] = &v56[v62];
        if (v55) {
          this = memcpy(v56, *(const void **)(v4 + 12728), v55);
        }
        *(void *)(v4 + 12728) = v56;
        LODWORD(v55) = *(_DWORD *)(v4 + 12740);
        unsigned int v54 = *(_DWORD *)(v4 + 12736);
        goto LABEL_118;
      }
      size_t v15 = *(void **)(v4 + 12744);
      unsigned int v16 = (unsigned char *)v15[1];
      if (&v14[v13] == v16)
      {
        unint64_t v46 = (unint64_t)&v14[v13 + 1];
        unint64_t v17 = v15[2];
        if (v46 <= v17)
        {
          v15[1] = v46;
          LODWORD(v47) = 1;
LABEL_94:
          *(_DWORD *)(v4 + 12740) = v13 + v47;
          goto LABEL_95;
        }
      }
      else
      {
        unint64_t v17 = v15[2];
      }
      if ((2 * v13) <= 4) {
        uint64_t v47 = 4;
      }
      else {
        uint64_t v47 = (2 * v13);
      }
      size_t v48 = v47 + v13;
      if (v16) {
        BOOL v49 = (unint64_t)&v16[v47 + v13] > v17;
      }
      else {
        BOOL v49 = 1;
      }
      unsigned int v14 = (unsigned char *)v15[1];
      if (v49)
      {
        unint64_t v50 = 2 * v15[4];
        if (v50 <= v48 + 1) {
          unint64_t v50 = v48 + 1;
        }
        v15[4] = v50;
        unint64_t v51 = v50 + 8;
        uint64_t v52 = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
        uint64_t v53 = (char *)v52 + v51;
        void *v52 = v15[3];
        unsigned int v14 = v52 + 1;
        void v15[2] = v53;
        void v15[3] = v52;
      }
      v15[1] = &v14[v48];
      if (v13) {
        memcpy(v14, *(const void **)(v4 + 12728), v13);
      }
      *(void *)(v4 + 12728) = v14;
      LODWORD(v13) = *(_DWORD *)(v4 + 12740);
      unsigned int v12 = *(_DWORD *)(v4 + 12736);
      goto LABEL_94;
    }
  }
LABEL_29:
  if (v7 != v10)
  {
    while (1)
    {
      if (*((_WORD *)*v7 + 8) != 37) {
        goto LABEL_24;
      }
      uint64_t v18 = *(void *)*v7;
      if (!v18) {
        break;
      }
LABEL_32:
      if (++v7 == v10) {
        goto LABEL_56;
      }
    }
    unsigned int v19 = *(_DWORD *)(v4 + 12736);
    size_t v20 = *(unsigned int *)(v4 + 12740);
    uint64_t v21 = *(unsigned char **)(v4 + 12728);
    if (v19 < v20)
    {
LABEL_54:
      *(_DWORD *)(v4 + 12736) = v19 + 1;
      v21[v19] = 122;
      goto LABEL_32;
    }
    size_t v22 = *(void **)(v4 + 12744);
    unint64_t v23 = (unsigned char *)v22[1];
    if (&v21[v20] == v23)
    {
      unint64_t v25 = (unint64_t)&v21[v20 + 1];
      unint64_t v24 = v22[2];
      if (v25 <= v24)
      {
        v22[1] = v25;
        LODWORD(v26) = 1;
LABEL_53:
        *(_DWORD *)(v4 + 12740) = v20 + v26;
        goto LABEL_54;
      }
    }
    else
    {
      unint64_t v24 = v22[2];
    }
    if ((2 * v20) <= 4) {
      uint64_t v26 = 4;
    }
    else {
      uint64_t v26 = (2 * v20);
    }
    size_t v27 = v26 + v20;
    if (v23) {
      BOOL v28 = (unint64_t)&v23[v26 + v20] > v24;
    }
    else {
      BOOL v28 = 1;
    }
    uint64_t v21 = (unsigned char *)v22[1];
    if (v28)
    {
      unint64_t v29 = 2 * v22[4];
      if (v29 <= v27 + 1) {
        unint64_t v29 = v27 + 1;
      }
      v22[4] = v29;
      unint64_t v30 = v29 + 8;
      this = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
      size_t v31 = (char *)this + v30;
      *this = v22[3];
      uint64_t v21 = this + 1;
      void v22[2] = v31;
      void v22[3] = this;
    }
    v22[1] = &v21[v27];
    if (v20) {
      this = memcpy(v21, *(const void **)(v4 + 12728), v20);
    }
    *(void *)(v4 + 12728) = v21;
    LODWORD(v20) = *(_DWORD *)(v4 + 12740);
    unsigned int v19 = *(_DWORD *)(v4 + 12736);
    goto LABEL_53;
  }
LABEL_56:
  unsigned int v32 = *(_DWORD *)(v4 + 12736);
  size_t v33 = *(unsigned int *)(v4 + 12740);
  uint64_t v34 = *(char **)(v4 + 12728);
  if (v32 < v33) {
    goto LABEL_75;
  }
  uint64_t v35 = *(void **)(v4 + 12744);
  char v36 = (char *)v35[1];
  if (&v34[v33] != v36)
  {
    unint64_t v37 = v35[2];
LABEL_60:
    if ((2 * v33) <= 4) {
      uint64_t v39 = 4;
    }
    else {
      uint64_t v39 = (2 * v33);
    }
    size_t v40 = v39 + v33;
    if (v36) {
      BOOL v41 = (unint64_t)&v36[v39 + v33] > v37;
    }
    else {
      BOOL v41 = 1;
    }
    uint64_t v34 = (char *)v35[1];
    if (v41)
    {
      unint64_t v42 = 2 * v35[4];
      if (v42 <= v40 + 1) {
        unint64_t v42 = v40 + 1;
      }
      v35[4] = v42;
      unint64_t v43 = v42 + 8;
      this = malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
      uint64_t v44 = (char *)this + v43;
      *this = v35[3];
      uint64_t v34 = (char *)(this + 1);
      void v35[2] = v44;
      v35[3] = this;
    }
    v35[1] = &v34[v40];
    if (v33) {
      this = memcpy(v34, *(const void **)(v4 + 12728), v33);
    }
    *(void *)(v4 + 12728) = v34;
    LODWORD(v33) = *(_DWORD *)(v4 + 12740);
    unsigned int v32 = *(_DWORD *)(v4 + 12736);
    goto LABEL_74;
  }
  unint64_t v38 = (unint64_t)&v34[v33 + 1];
  unint64_t v37 = v35[2];
  if (v38 > v37) {
    goto LABEL_60;
  }
  v35[1] = v38;
  LODWORD(v39) = 1;
LABEL_74:
  *(_DWORD *)(v4 + 12740) = v33 + v39;
LABEL_75:
  *(_DWORD *)(v4 + 12736) = v32 + 1;
  v34[v32] = 114;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  char v45 = (_DWORD *)(a4 + 16);
LABEL_76:
  *char v45 = 0;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericType@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    unsigned int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      size_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 117;
  int v21 = *((unsigned __int8 *)a2 + 18);
  size_t v22 = a2;
  if ((v21 - 1) >= 2)
  {
    if (v21 == 5)
    {
      unint64_t v23 = *a2;
      size_t v22 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_29;
    }
    size_t v22 = 0;
  }
  switch(v21)
  {
    case 1:
      unint64_t v24 = a2 + 1;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 2:
      unint64_t v24 = a2 + 2;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 5:
      unint64_t v23 = *a2;
LABEL_29:
      unint64_t v24 = (swift::Demangle::__runtime::Node **)((char *)v23 + 8 * *((unsigned int *)a2 + 2));
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
  }
  unint64_t v24 = 0;
  if (!v22)
  {
LABEL_39:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_36:
  unsigned int v25 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v22 == v24) {
      goto LABEL_39;
    }
  }
}

void *anonymous namespace'::Remangler::mangleDependentMemberType@<X0>(void *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)this;
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  unsigned int v8 = 0;
  do
  {
    if (v7 < v8) {
      goto LABEL_25;
    }
    int v11 = *(void **)v5;
    unsigned int v12 = &v6[8 * v8];
    unint64_t v13 = *(char **)(*(void *)v5 + 8);
    if (v12 != v13)
    {
      unint64_t v14 = v11[2];
LABEL_10:
      if (2 * v8 <= 4) {
        uint64_t v16 = 4;
      }
      else {
        uint64_t v16 = 2 * v8;
      }
      uint64_t v17 = 8 * (v16 + v8);
      unint64_t v18 = (char *)((unint64_t)(v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      v11[1] = v18;
      if (v18) {
        BOOL v19 = (unint64_t)&v18[v17] > v14;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        unint64_t v20 = 2 * v11[4];
        if (v20 <= v17 + 8) {
          unint64_t v20 = v17 + 8;
        }
        _OWORD v11[4] = v20;
        unint64_t v21 = v20 + 8;
        this = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
        size_t v22 = (char *)this + v21;
        *this = v11[3];
        unint64_t v18 = (char *)(((unint64_t)this + 15) & 0xFFFFFFFFFFFFFFF8);
        void v11[2] = v22;
        void v11[3] = this;
      }
      v11[1] = &v18[v17];
      if (v8) {
        this = memcpy(v18, v6, 8 * v8);
      }
      uint64_t v6 = v18;
      goto LABEL_24;
    }
    uint64_t v15 = v12 + 8;
    unint64_t v14 = v11[2];
    if ((unint64_t)v15 > v14) {
      goto LABEL_10;
    }
    v11[1] = v15;
    LODWORD(v16) = 1;
LABEL_24:
    v8 += v16;
LABEL_25:
    *(void *)&v6[8 * v7] = v4;
    int v23 = *((unsigned __int8 *)v4 + 18);
    if ((v23 - 1) < 2) {
      goto LABEL_29;
    }
    if (v23 == 5 && *((_DWORD *)v4 + 2))
    {
      uint64_t v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_29:
      size_t v9 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_31;
    }
    size_t v9 = 0;
LABEL_31:
    int v24 = *((unsigned __int8 *)v9 + 18);
    if ((v24 - 1) < 2) {
      goto LABEL_4;
    }
    if (v24 == 5 && *((_DWORD *)v9 + 2))
    {
      size_t v9 = *(swift::Demangle::__runtime::Node **)v9;
LABEL_4:
      uint64_t v4 = *(swift::Demangle::__runtime::Node **)v9;
      goto LABEL_5;
    }
    uint64_t v4 = 0;
LABEL_5:
    int v10 = *((unsigned __int16 *)v4 + 8);
    ++v7;
  }
  while (v10 == 45);
  if (v10 != 38)
  {
    int v33 = 2194;
    int v34 = 1;
    uint64_t v26 = (uint64_t)a4;
    goto LABEL_111;
  }
  unsigned int v25 = v7 - 1;
  uint64_t v26 = (uint64_t)a4;
  if (!v7)
  {
    int v33 = 2195;
    int v34 = 1;
    uint64_t v4 = a2;
    goto LABEL_111;
  }
  if (v7 == 1)
  {
    unsigned int v27 = *(_DWORD *)(v5 + 12736);
    size_t v28 = *(unsigned int *)(v5 + 12740);
    unint64_t v29 = *(char **)(v5 + 12728);
    if (v27 >= v28)
    {
      unint64_t v30 = *(void **)(v5 + 12744);
      size_t v31 = (char *)v30[1];
      if (&v29[v28] != v31)
      {
        unint64_t v32 = v30[2];
        goto LABEL_47;
      }
      unint64_t v41 = (unint64_t)&v29[v28 + 1];
      unint64_t v32 = v30[2];
      if (v41 <= v32)
      {
        v30[1] = v41;
        LODWORD(v42) = 1;
      }
      else
      {
LABEL_47:
        if ((2 * v28) <= 4) {
          uint64_t v42 = 4;
        }
        else {
          uint64_t v42 = (2 * v28);
        }
        size_t v43 = v42 + v28;
        if (!v31 || (unint64_t)&v31[v43] > v32)
        {
          unint64_t v44 = 2 * v30[4];
          if (v44 <= v43 + 1) {
            unint64_t v44 = v43 + 1;
          }
          v30[4] = v44;
          unint64_t v45 = v44 + 8;
          unint64_t v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
          uint64_t v47 = (char *)v46 + v45;
          *unint64_t v46 = v30[3];
          size_t v31 = (char *)(v46 + 1);
          v30[2] = v47;
          uint64_t v30[3] = v46;
        }
        v30[1] = &v31[v43];
        if (v28) {
          memcpy(v31, *(const void **)(v5 + 12728), v28);
        }
        *(void *)(v5 + 12728) = v31;
        LODWORD(v28) = *(_DWORD *)(v5 + 12740);
        unint64_t v29 = v31;
        unsigned int v27 = *(_DWORD *)(v5 + 12736);
      }
      *(_DWORD *)(v5 + 12740) = v28 + v42;
    }
    *(_DWORD *)(v5 + 12736) = v27 + 1;
    v29[v27] = 119;
    if (*a4) {
      return this;
    }
    size_t v48 = *(void **)v6;
    int v49 = *(unsigned __int8 *)(*(void *)v6 + 18);
    if (v49 == 2)
    {
LABEL_64:
      unint64_t v50 = (swift::Demangle::__runtime::Node *)v48[1];
    }
    else
    {
      if (v49 == 5 && *((_DWORD *)v48 + 2) >= 2u)
      {
        size_t v48 = (void *)*v48;
        goto LABEL_64;
      }
      unint64_t v50 = 0;
    }
    if (!*a4)
    {
      int v34 = 0;
      uint64_t v4 = 0;
      int v33 = 0;
      goto LABEL_111;
    }
    return this;
  }
  unsigned int v35 = *(_DWORD *)(v5 + 12736);
  size_t v36 = *(unsigned int *)(v5 + 12740);
  unint64_t v37 = *(char **)(v5 + 12728);
  if (v35 >= v36)
  {
    unint64_t v38 = *(void **)(v5 + 12744);
    uint64_t v39 = (char *)v38[1];
    if (&v37[v36] != v39)
    {
      unint64_t v40 = v38[2];
      goto LABEL_66;
    }
    unint64_t v51 = (unint64_t)&v37[v36 + 1];
    unint64_t v40 = v38[2];
    if (v51 <= v40)
    {
      v38[1] = v51;
      LODWORD(v52) = 1;
    }
    else
    {
LABEL_66:
      if ((2 * v36) <= 4) {
        uint64_t v52 = 4;
      }
      else {
        uint64_t v52 = (2 * v36);
      }
      size_t v53 = v52 + v36;
      if (!v39 || (unint64_t)&v39[v53] > v40)
      {
        unint64_t v54 = 2 * v38[4];
        if (v54 <= v53 + 1) {
          unint64_t v54 = v53 + 1;
        }
        v38[4] = v54;
        unint64_t v55 = v54 + 8;
        uint64_t v56 = malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
        char v57 = (char *)v56 + v55;
        *uint64_t v56 = v38[3];
        uint64_t v39 = (char *)(v56 + 1);
        v38[2] = v57;
        v38[3] = v56;
      }
      v38[1] = &v39[v53];
      if (v36) {
        memcpy(v39, *(const void **)(v5 + 12728), v36);
      }
      *(void *)(v5 + 12728) = v39;
      LODWORD(v36) = *(_DWORD *)(v5 + 12740);
      unint64_t v37 = v39;
      unsigned int v35 = *(_DWORD *)(v5 + 12736);
      uint64_t v26 = (uint64_t)a4;
    }
    *(_DWORD *)(v5 + 12740) = v36 + v52;
  }
  *(_DWORD *)(v5 + 12736) = v35 + 1;
  v37[v35] = 87;
  if (*(_DWORD *)v26) {
    return this;
  }
  unsigned int v58 = 1;
  while (2)
  {
    unint64_t v59 = *(uint64_t **)&v6[8 * v25];
    int v60 = *((unsigned __int8 *)v59 + 18);
    if (v60 == 2)
    {
LABEL_84:
      uint64_t v61 = (swift::Demangle::__runtime::Node *)v59[1];
    }
    else
    {
      if (v60 == 5 && *((_DWORD *)v59 + 2) >= 2u)
      {
        unint64_t v59 = (uint64_t *)*v59;
        goto LABEL_84;
      }
      uint64_t v61 = 0;
    }
    if (*(_DWORD *)v26) {
      return this;
    }
    ++v58;
    --v25;
    if (v58 <= v7) {
      continue;
    }
    break;
  }
  unsigned int v62 = *(_DWORD *)(v5 + 12736);
  size_t v63 = *(unsigned int *)(v5 + 12740);
  unint64_t v64 = *(char **)(v5 + 12728);
  if (v62 >= v63)
  {
    unint64_t v65 = *(void **)(v5 + 12744);
    uint64_t v66 = (char *)v65[1];
    if (&v64[v63] != v66)
    {
      unint64_t v67 = v65[2];
      goto LABEL_97;
    }
    unint64_t v68 = (unint64_t)&v64[v63 + 1];
    unint64_t v67 = v65[2];
    if (v68 <= v67)
    {
      v65[1] = v68;
      LODWORD(v69) = 1;
    }
    else
    {
LABEL_97:
      if ((2 * v63) <= 4) {
        uint64_t v69 = 4;
      }
      else {
        uint64_t v69 = (2 * v63);
      }
      size_t v70 = v69 + v63;
      if (!v66 || (unint64_t)&v66[v70] > v67)
      {
        unint64_t v71 = 2 * v65[4];
        if (v71 <= v70 + 1) {
          unint64_t v71 = v70 + 1;
        }
        v65[4] = v71;
        unint64_t v72 = v71 + 8;
        this = malloc_type_malloc(v71 + 8, 0xD0263BC5uLL);
        uint64_t v73 = (char *)this + v72;
        *this = v65[3];
        uint64_t v66 = (char *)(this + 1);
        v65[2] = v73;
        v65[3] = this;
      }
      v65[1] = &v66[v70];
      if (v63) {
        this = memcpy(v66, *(const void **)(v5 + 12728), v63);
      }
      *(void *)(v5 + 12728) = v66;
      LODWORD(v63) = *(_DWORD *)(v5 + 12740);
      unint64_t v64 = v66;
      unsigned int v62 = *(_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v63 + v69;
  }
  int v34 = 0;
  uint64_t v4 = 0;
  int v33 = 0;
  *(_DWORD *)(v5 + 12736) = v62 + 1;
  v64[v62] = 95;
LABEL_111:
  *(_DWORD *)uint64_t v26 = v34;
  *(void *)(v26 + 8) = v4;
  *(_DWORD *)(v26 + 16) = v33;
  return this;
}

void anonymous namespace'::Remangler::mangleDestructor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleDidSet(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v5 = *a2;
    goto LABEL_6;
  }
  uint64_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

unsigned int *anonymous namespace'::Remangler::mangleDynamicSelf@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    unsigned int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      unint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 68;
  int v21 = *((unsigned __int8 *)a2 + 18);
  if (v21 != 1)
  {
    if (v21 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return this;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  size_t v22 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleEnumCase@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WC", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleNoEscapeFunctionType@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    unsigned int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      unint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 70;
  int v21 = *((unsigned __int8 *)a2 + 18);
  size_t v22 = a2;
  if ((v21 - 1) >= 2)
  {
    if (v21 == 5)
    {
      int v23 = *a2;
      size_t v22 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_29;
    }
    size_t v22 = 0;
  }
  switch(v21)
  {
    case 1:
      int v24 = a2 + 1;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 2:
      int v24 = a2 + 2;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 5:
      int v23 = *a2;
LABEL_29:
      int v24 = (swift::Demangle::__runtime::Node **)((char *)v23 + 8 * *((unsigned int *)a2 + 2));
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
  }
  int v24 = 0;
  if (!v22)
  {
LABEL_39:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_36:
  unsigned int v25 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v22 == v24) {
      goto LABEL_39;
    }
  }
}

void *anonymous namespace'::Remangler::mangleGlobalActorFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (const void **)(this + 1591);
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Y", 1uLL, this[1593]);
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *((_DWORD *)this + 3184);
  size_t v10 = *((unsigned int *)this + 3185);
  int v11 = this[1591];
  if (v9 >= v10)
  {
    unsigned int v12 = this[1593];
    unint64_t v13 = (char *)*((void *)v12 + 1);
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = *((void *)v12 + 2);
      if (v15 <= v14)
      {
        *((void *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v14 = *((void *)v12 + 2);
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    int v11 = (char *)*((void *)v12 + 1);
    if (v18)
    {
      unint64_t v19 = 2 * *((void *)v12 + 4);
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      *((void *)v12 + 4) = v19;
      unint64_t v20 = v19 + 8;
      uint64_t result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      int v21 = (char *)result + v20;
      void *result = *((void *)v12 + 3);
      int v11 = (char *)(result + 1);
      *((void *)v12 + 2) = v21;
      *((void *)v12 + 3) = result;
    }
    *((void *)v12 + 1) = &v11[v17];
    if (v10) {
      uint64_t result = memcpy(v11, *v6, v10);
    }
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    unsigned int v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleDifferentiableFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "D", 1uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      unsigned int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unsigned int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      unsigned int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unsigned int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

char **anonymous namespace'::Remangler::mangleExistentialMetatype@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = (_anonymous_namespace_::Remangler *)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 == 1) {
    goto LABEL_6;
  }
  if (v8 == 2) {
    goto LABEL_13;
  }
  if (v8 != 5)
  {
LABEL_16:
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1851;
    return this;
  }
  int v9 = *((_DWORD *)a2 + 2);
  if (v9 == 2)
  {
LABEL_13:
    this = (char **)swift::Demangle::__runtime::CharVector::append(this + 1591, "XPM", 3uLL, this[1593]);
    int v12 = *((unsigned __int8 *)v5 + 18);
    unsigned int v13 = (swift::Demangle::__runtime::Node **)v5;
    if ((v12 - 1) >= 2)
    {
      if (v12 == 5)
      {
        unint64_t v14 = *(swift::Demangle::__runtime::Node ***)v5;
        unsigned int v13 = *(swift::Demangle::__runtime::Node ***)v5;
        goto LABEL_23;
      }
      unsigned int v13 = 0;
    }
    if (v12 == 1)
    {
      unint64_t v15 = (swift::Demangle::__runtime::Node **)((char *)v5 + 8);
      if (v13 == v15) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    if (v12 == 2)
    {
      unint64_t v15 = (swift::Demangle::__runtime::Node **)((char *)v5 + 16);
      if (v13 == v15) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    if (v12 != 5)
    {
      unint64_t v15 = 0;
      if (!v13)
      {
LABEL_33:
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        return this;
      }
LABEL_30:
      unsigned int v16 = a3 + 1;
      while (1)
      {
        if (*(_DWORD *)a4) {
          return this;
        }
        if (++v13 == v15) {
          goto LABEL_33;
        }
      }
    }
    unint64_t v14 = *(swift::Demangle::__runtime::Node ***)v5;
LABEL_23:
    unint64_t v15 = &v14[*((unsigned int *)v5 + 2)];
    if (v13 == v15) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v9 != 1) {
    goto LABEL_16;
  }
LABEL_6:
  this = (char **)swift::Demangle::__runtime::CharVector::append(this + 1591, "PM", 2uLL, this[1593]);
  int v10 = *((unsigned __int8 *)v5 + 18);
  if (v10 != 1)
  {
    if (v10 != 5 || *((_DWORD *)v5 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = v5;
      *(_DWORD *)(a4 + 16) = 114;
      return this;
    }
    uint64_t v5 = *(swift::Demangle::__runtime::Node **)v5;
  }
  int v11 = *(swift::Demangle::__runtime::Node **)v5;
}

void anonymous namespace'::Remangler::mangleExplicitClosure(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleExtension(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

char *anonymous namespace'::Remangler::mangleExtensionAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMe", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleFieldOffset@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wv", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

char *anonymous namespace'::Remangler::mangleFreestandingMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMf", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleFullTypeMetadata@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mf", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void anonymous namespace'::Remangler::mangleFunction(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WG", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleGenericProtocolWitnessTableInstantiationFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WI", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleGenericTypeMetadataPattern@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "MP", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void anonymous namespace'::Remangler::mangleGetter(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v5 = *a2;
    goto LABEL_6;
  }
  uint64_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleGlobal@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "_T", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void anonymous namespace'::Remangler::mangleGlobalGetter(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v5 = *a2;
    goto LABEL_6;
  }
  uint64_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleIdentifier@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(const void **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = (char **)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, v6, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v7, v5, v6, *((void **)this + 1593));
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void anonymous namespace'::Remangler::mangleIVarInitializer(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleIVarDestroyer(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

uint64_t anonymous namespace'::Remangler::mangleImplConvention@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (const void **)a2;
  if (*((_WORD *)a2 + 8) != 106)
  {
    int v6 = 1768;
    int v7 = 1;
    goto LABEL_33;
  }
  size_t v5 = *((void *)a2 + 1);
  int v6 = 1789;
  int v7 = 18;
  uint64_t v8 = this;
  uint64_t v9 = *(char **)a2;
  switch(v5)
  {
    case 3uLL:
      int v10 = "@in";
      goto LABEL_6;
    case 4uLL:
      int v10 = "@out";
LABEL_6:
      this = memcmp(*v3, v10, v5);
      if (this) {
        goto LABEL_30;
      }
      uint64_t v11 = (char **)(v8 + 12728);
      char v12 = 105;
      goto LABEL_32;
    case 6uLL:
      this = memcmp(*(const void **)a2, "@inout", v5);
      if (!this)
      {
        uint64_t v11 = (char **)(v8 + 12728);
        char v12 = 108;
        goto LABEL_32;
      }
      if (*(_DWORD *)v9 == 1853321024 && *((_WORD *)v9 + 2) == 25701)
      {
        uint64_t v11 = (char **)(v8 + 12728);
        char v12 = 111;
        goto LABEL_32;
      }
      goto LABEL_30;
    case 8uLL:
      this = memcmp(*(const void **)a2, "@unowned", v5);
      if (this) {
        goto LABEL_30;
      }
      unsigned int v14 = *(_DWORD *)(v8 + 12736);
      size_t v15 = *(unsigned int *)(v8 + 12740);
      unsigned int v16 = *(char **)(v8 + 12728);
      if (v14 < v15) {
        goto LABEL_90;
      }
      size_t v17 = *(void **)(v8 + 12744);
      BOOL v18 = (char *)v17[1];
      if (&v16[v15] == v18)
      {
        unint64_t v39 = (unint64_t)&v16[v15 + 1];
        unint64_t v19 = v17[2];
        if (v39 <= v19)
        {
          v17[1] = v39;
          LODWORD(v40) = 1;
          goto LABEL_89;
        }
      }
      else
      {
        unint64_t v19 = v17[2];
      }
      if ((2 * v15) <= 4) {
        uint64_t v40 = 4;
      }
      else {
        uint64_t v40 = (2 * v15);
      }
      size_t v41 = v40 + v15;
      if (!v18 || (unint64_t)&v18[v41] > v19)
      {
        unint64_t v42 = 2 * v17[4];
        if (v42 <= v41 + 1) {
          unint64_t v42 = v41 + 1;
        }
        void v17[4] = v42;
        unint64_t v43 = v42 + 8;
        this = (uint64_t)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        uint64_t v44 = this + v43;
        *(void *)this = v17[3];
        BOOL v18 = (char *)(this + 8);
        v17[2] = v44;
        void v17[3] = this;
      }
      v17[1] = &v18[v41];
      if (v15) {
        this = (uint64_t)memcpy(v18, *(const void **)(v8 + 12728), v15);
      }
      *(void *)(v8 + 12728) = v18;
      LODWORD(v15) = *(_DWORD *)(v8 + 12740);
      unsigned int v16 = v18;
      unsigned int v14 = *(_DWORD *)(v8 + 12736);
LABEL_89:
      *(_DWORD *)(v8 + 12740) = v15 + v40;
LABEL_90:
      int v7 = 0;
      uint64_t v3 = 0;
      int v6 = 0;
      *(_DWORD *)(v8 + 12736) = v14 + 1;
      v16[v14] = 100;
      goto LABEL_33;
    case 0xBuLL:
      this = memcmp(*(const void **)a2, "@guaranteed", v5);
      if (this) {
        goto LABEL_30;
      }
      unsigned int v20 = *(_DWORD *)(v8 + 12736);
      size_t v21 = *(unsigned int *)(v8 + 12740);
      size_t v22 = *(char **)(v8 + 12728);
      if (v20 < v21) {
        goto LABEL_99;
      }
      int v23 = *(void **)(v8 + 12744);
      int v24 = (char *)v23[1];
      if (&v22[v21] == v24)
      {
        unint64_t v57 = (unint64_t)&v22[v21 + 1];
        unint64_t v25 = v23[2];
        if (v57 <= v25)
        {
          v23[1] = v57;
          LODWORD(v58) = 1;
          goto LABEL_98;
        }
      }
      else
      {
        unint64_t v25 = v23[2];
      }
      if ((2 * v21) <= 4) {
        uint64_t v58 = 4;
      }
      else {
        uint64_t v58 = (2 * v21);
      }
      size_t v59 = v58 + v21;
      if (!v24 || (unint64_t)&v24[v59] > v25)
      {
        unint64_t v60 = 2 * v23[4];
        if (v60 <= v59 + 1) {
          unint64_t v60 = v59 + 1;
        }
        v23[4] = v60;
        unint64_t v61 = v60 + 8;
        this = (uint64_t)malloc_type_malloc(v60 + 8, 0xD0263BC5uLL);
        uint64_t v62 = this + v61;
        *(void *)this = v23[3];
        int v24 = (char *)(this + 8);
        v23[2] = v62;
        void v23[3] = this;
      }
      v23[1] = &v24[v59];
      if (v21) {
        this = (uint64_t)memcpy(v24, *(const void **)(v8 + 12728), v21);
      }
      *(void *)(v8 + 12728) = v24;
      LODWORD(v21) = *(_DWORD *)(v8 + 12740);
      size_t v22 = v24;
      unsigned int v20 = *(_DWORD *)(v8 + 12736);
LABEL_98:
      *(_DWORD *)(v8 + 12740) = v21 + v58;
LABEL_99:
      int v7 = 0;
      uint64_t v3 = 0;
      int v6 = 0;
      *(_DWORD *)(v8 + 12736) = v20 + 1;
      v22[v20] = 103;
      goto LABEL_33;
    case 0xDuLL:
      if (*(void *)v9 == 0x6C65726F74756140 && *(void *)(v9 + 5) == 0x64657361656C6572)
      {
        unsigned int v27 = *(_DWORD *)(this + 12736);
        size_t v28 = *(unsigned int *)(this + 12740);
        unint64_t v29 = *(char **)(this + 12728);
        if (v27 < v28)
        {
LABEL_93:
          int v7 = 0;
          uint64_t v3 = 0;
          int v6 = 0;
          *(_DWORD *)(v8 + 12736) = v27 + 1;
          v29[v27] = 97;
          goto LABEL_33;
        }
        unint64_t v30 = *(void **)(this + 12744);
        size_t v31 = (char *)v30[1];
        if (&v29[v28] == v31)
        {
          unint64_t v45 = (unint64_t)&v29[v28 + 1];
          unint64_t v32 = v30[2];
          if (v45 <= v32)
          {
            v30[1] = v45;
            LODWORD(v46) = 1;
LABEL_92:
            *(_DWORD *)(v8 + 12740) = v28 + v46;
            goto LABEL_93;
          }
        }
        else
        {
          unint64_t v32 = v30[2];
        }
        if ((2 * v28) <= 4) {
          uint64_t v46 = 4;
        }
        else {
          uint64_t v46 = (2 * v28);
        }
        size_t v47 = v46 + v28;
        if (!v31 || (unint64_t)&v31[v47] > v32)
        {
          unint64_t v48 = 2 * v30[4];
          if (v48 <= v47 + 1) {
            unint64_t v48 = v47 + 1;
          }
          v30[4] = v48;
          unint64_t v49 = v48 + 8;
          this = (uint64_t)malloc_type_malloc(v48 + 8, 0xD0263BC5uLL);
          uint64_t v50 = this + v49;
          *(void *)this = v30[3];
          size_t v31 = (char *)(this + 8);
          v30[2] = v50;
          uint64_t v30[3] = this;
        }
        v30[1] = &v31[v47];
        if (v28) {
          this = (uint64_t)memcpy(v31, *(const void **)(v8 + 12728), v28);
        }
        *(void *)(v8 + 12728) = v31;
        LODWORD(v28) = *(_DWORD *)(v8 + 12740);
        unint64_t v29 = v31;
        unsigned int v27 = *(_DWORD *)(v8 + 12736);
        goto LABEL_92;
      }
      this = memcmp(*(const void **)a2, "@deallocating", v5);
      if (this)
      {
LABEL_30:
        int v6 = 1789;
        int v7 = 18;
      }
      else
      {
        uint64_t v11 = (char **)(v8 + 12728);
        char v12 = 101;
LABEL_32:
        this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<(v11, v12);
        int v7 = 0;
        uint64_t v3 = 0;
        int v6 = 0;
      }
LABEL_33:
      *(_DWORD *)a3 = v7;
      *(void *)(a3 + 8) = v3;
      *(_DWORD *)(a3 + 16) = v6;
      return this;
    case 0x16uLL:
      this = memcmp(*(const void **)a2, "@unowned_inner_pointer", v5);
      if (this) {
        goto LABEL_30;
      }
      unsigned int v33 = *(_DWORD *)(v8 + 12736);
      size_t v34 = *(unsigned int *)(v8 + 12740);
      unsigned int v35 = *(char **)(v8 + 12728);
      if (v33 < v34) {
        goto LABEL_96;
      }
      size_t v36 = *(void **)(v8 + 12744);
      unint64_t v37 = (char *)v36[1];
      if (&v35[v34] == v37)
      {
        unint64_t v51 = (unint64_t)&v35[v34 + 1];
        unint64_t v38 = v36[2];
        if (v51 <= v38)
        {
          v36[1] = v51;
          LODWORD(v52) = 1;
          goto LABEL_95;
        }
      }
      else
      {
        unint64_t v38 = v36[2];
      }
      if ((2 * v34) <= 4) {
        uint64_t v52 = 4;
      }
      else {
        uint64_t v52 = (2 * v34);
      }
      size_t v53 = v52 + v34;
      if (!v37 || (unint64_t)&v37[v53] > v38)
      {
        unint64_t v54 = 2 * v36[4];
        if (v54 <= v53 + 1) {
          unint64_t v54 = v53 + 1;
        }
        v36[4] = v54;
        unint64_t v55 = v54 + 8;
        this = (uint64_t)malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
        uint64_t v56 = this + v55;
        *(void *)this = v36[3];
        unint64_t v37 = (char *)(this + 8);
        v36[2] = v56;
        void v36[3] = this;
      }
      v36[1] = &v37[v53];
      if (v34) {
        this = (uint64_t)memcpy(v37, *(const void **)(v8 + 12728), v34);
      }
      *(void *)(v8 + 12728) = v37;
      LODWORD(v34) = *(_DWORD *)(v8 + 12740);
      unsigned int v35 = v37;
      unsigned int v33 = *(_DWORD *)(v8 + 12736);
LABEL_95:
      *(_DWORD *)(v8 + 12740) = v34 + v52;
LABEL_96:
      int v7 = 0;
      uint64_t v3 = 0;
      int v6 = 0;
      *(_DWORD *)(v8 + 12736) = v33 + 1;
      v35[v33] = 68;
      goto LABEL_33;
    default:
      goto LABEL_33;
  }
}

uint64_t anonymous namespace'::Remangler::mangleImplFunctionAttribute@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t result = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  switch(v7)
  {
    case 6:
      uint64_t result = memcmp((const void *)result, "@async", 6uLL);
      if (!result)
      {
        int v10 = "H";
        goto LABEL_20;
      }
      break;
    case 9:
      uint64_t result = memcmp((const void *)result, "@Sendable", 9uLL);
      if (!result)
      {
        int v10 = "h";
        goto LABEL_20;
      }
      break;
    case 11:
      if (*(void *)result == 0x6F5F646C65697940 && *(void *)(result + 3) == 0x65636E6F5F646C65)
      {
        int v10 = "A";
      }
      else
      {
        if (*(void *)result != 0x6D5F646C65697940 || *(void *)(result + 3) != 0x796E616D5F646C65) {
          break;
        }
        int v10 = "G";
      }
LABEL_20:
      uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append(this + 1591, v10, 1uLL, this[1593]);
      int v12 = 0;
      uint64_t v3 = 0;
      int v11 = 0;
      goto LABEL_21;
  }
  int v11 = 1678;
  int v12 = 17;
LABEL_21:
  *(_DWORD *)a3 = v12;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

uint64_t anonymous namespace'::Remangler::mangleImplFunctionConvention(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v3 = *((unsigned __int8 *)a2 + 18);
  if ((v3 - 1) >= 2)
  {
    if (v3 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v4 = 0;
      unsigned int v5 = a3 + 1;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v4 = *(swift::Demangle::__runtime::Node **)a2;
  unsigned int v5 = a3 + 1;
}

uint64_t anonymous namespace'::Remangler::mangleImplFunctionConventionName@<X0>(char **this@<X0>, size_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (swift::Demangle::__runtime::Node *)a2;
  size_t v5 = a2[1];
  int v6 = 1702;
  int v7 = 15;
  uint64_t result = *a2;
  switch(v5)
  {
    case 1uLL:
      uint64_t result = memcmp((const void *)result, "c", v5);
      if (result) {
        goto LABEL_15;
      }
      int v10 = "Cc";
      goto LABEL_17;
    case 5uLL:
      if (*(_DWORD *)result != 1668246626 || *(unsigned char *)(result + 4) != 107) {
        goto LABEL_15;
      }
      int v10 = "Cb";
      goto LABEL_17;
    case 6uLL:
      uint64_t result = memcmp((const void *)result, "method", v5);
      if (result) {
        goto LABEL_15;
      }
      int v10 = "Cm";
      goto LABEL_17;
    case 0xBuLL:
      uint64_t result = memcmp((const void *)result, "objc_method", v5);
      if (result) {
        goto LABEL_15;
      }
      int v10 = "CO";
      goto LABEL_17;
    case 0xEuLL:
      uint64_t result = memcmp((const void *)result, "witness_method", v5);
      if (result)
      {
LABEL_15:
        int v6 = 1702;
        int v7 = 15;
      }
      else
      {
        int v10 = "Cw";
LABEL_17:
        uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append(this + 1591, v10, 2uLL, this[1593]);
        int v7 = 0;
        int v3 = 0;
        int v6 = 0;
      }
LABEL_18:
      *(_DWORD *)a3 = v7;
      *(void *)(a3 + 8) = v3;
      *(_DWORD *)(a3 + 16) = v6;
      return result;
    default:
      goto LABEL_18;
  }
}

uint64_t anonymous namespace'::Remangler::mangleImplFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = (const void **)(this + 1591);
  uint64_t result = (uint64_t)swift::Demangle::__runtime::CharVector::append(this + 1591, "XF", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  if (v9 == 1)
  {
    int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    if (v10 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
  if (v9 == 2)
  {
    int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
    if (v10 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
      goto LABEL_16;
    }
LABEL_27:
    unsigned int v16 = this + 1592;
    unsigned int v17 = *((_DWORD *)this + 3184);
    size_t v21 = *((unsigned int *)this + 3185);
    unint64_t v19 = this[1591];
    if (v17 < v21)
    {
      char v20 = 116;
      goto LABEL_44;
    }
    size_t v22 = this[1593];
    int v23 = (char *)*((void *)v22 + 1);
    int v24 = v7;
    if (&v19[v21] == v23)
    {
      unint64_t v26 = (unint64_t)&v19[v21 + 1];
      unint64_t v25 = *((void *)v22 + 2);
      if (v26 <= v25)
      {
        *((void *)v22 + 1) = v26;
        LODWORD(v27) = 1;
LABEL_43:
        *((_DWORD *)this + 3185) = v21 + v27;
        char v20 = 116;
        int v7 = v24;
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v25 = *((void *)v22 + 2);
    }
    if ((2 * v21) <= 4) {
      uint64_t v27 = 4;
    }
    else {
      uint64_t v27 = (2 * v21);
    }
    size_t v28 = v27 + v21;
    if (!v23 || (unint64_t)&v23[v28] > v25)
    {
      unint64_t v29 = 2 * *((void *)v22 + 4);
      if (v29 <= v28 + 1) {
        unint64_t v29 = v28 + 1;
      }
      *((void *)v22 + 4) = v29;
      unint64_t v30 = v29 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
      uint64_t v31 = result + v30;
      *(void *)uint64_t result = *((void *)v22 + 3);
      int v23 = (char *)(result + 8);
      *((void *)v22 + 2) = v31;
      *((void *)v22 + 3) = result;
    }
    *((void *)v22 + 1) = &v23[v28];
    if (v21) {
      uint64_t result = (uint64_t)memcpy(v23, *v24, v21);
    }
    this[1591] = v23;
    LODWORD(v21) = *((_DWORD *)this + 3185);
    unint64_t v19 = v23;
    unsigned int v17 = *((_DWORD *)this + 3184);
    unsigned int v16 = this + 1592;
    goto LABEL_43;
  }
  if (v9 != 5)
  {
    int v12 = 0;
    if (!v10) {
      goto LABEL_27;
    }
    goto LABEL_16;
  }
  uint64_t v11 = *(void *)a2;
LABEL_9:
  int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
  if (v10 == (swift::Demangle::__runtime::Node *)v12) {
    goto LABEL_27;
  }
LABEL_16:
  unsigned int v13 = *(uint64_t **)v10;
  if (*(_WORD *)(*(void *)v10 + 16) != 106) {
    goto LABEL_27;
  }
  uint64_t result = *v13;
  uint64_t v14 = v13[1];
  int v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
  if (v14 == 13)
  {
    uint64_t result = memcmp((const void *)result, "@callee_owned", 0xDuLL);
    if (result)
    {
LABEL_63:
      unint64_t v43 = *(uint64_t **)v10;
      *(_DWORD *)a4 = 15;
      *(void *)(a4 + 8) = v43;
      *(_DWORD *)(a4 + 16) = 1639;
      return result;
    }
    unsigned int v16 = this + 1592;
    unsigned int v17 = *((_DWORD *)this + 3184);
    size_t v42 = *((unsigned int *)this + 3185);
    unint64_t v19 = this[1591];
    if (v17 < v42)
    {
      char v20 = 111;
      goto LABEL_44;
    }
    uint64_t v99 = this[1593];
    unint64_t v100 = (char *)*((void *)v99 + 1);
    unint64_t v125 = v7;
    if (&v19[v42] == v100)
    {
      unint64_t v105 = (unint64_t)&v19[v42 + 1];
      unint64_t v101 = *((void *)v99 + 2);
      if (v105 <= v101)
      {
        *((void *)v99 + 1) = v105;
        LODWORD(v106) = 1;
LABEL_200:
        *((_DWORD *)this + 3185) = v42 + v106;
        char v20 = 111;
        int v7 = v125;
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v101 = *((void *)v99 + 2);
    }
    if ((2 * v42) <= 4) {
      uint64_t v106 = 4;
    }
    else {
      uint64_t v106 = (2 * v42);
    }
    size_t v107 = v106 + v42;
    if (!v100 || (unint64_t)&v100[v107] > v101)
    {
      unint64_t v108 = 2 * *((void *)v99 + 4);
      if (v108 <= v107 + 1) {
        unint64_t v108 = v107 + 1;
      }
      *((void *)v99 + 4) = v108;
      unint64_t v109 = v108 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v108 + 8, 0xD0263BC5uLL);
      uint64_t v110 = result + v109;
      *(void *)uint64_t result = *((void *)v99 + 3);
      unint64_t v100 = (char *)(result + 8);
      *((void *)v99 + 2) = v110;
      *((void *)v99 + 3) = result;
    }
    *((void *)v99 + 1) = &v100[v107];
    if (v42) {
      uint64_t result = (uint64_t)memcpy(v100, *v125, v42);
    }
    this[1591] = v100;
    LODWORD(v42) = *((_DWORD *)this + 3185);
    unint64_t v19 = v100;
    unsigned int v17 = *((_DWORD *)this + 3184);
    unsigned int v16 = this + 1592;
    goto LABEL_200;
  }
  if (v14 == 18)
  {
    uint64_t result = memcmp((const void *)result, "@callee_guaranteed", 0x12uLL);
    if (result) {
      goto LABEL_63;
    }
    unsigned int v16 = this + 1592;
    unsigned int v17 = *((_DWORD *)this + 3184);
    size_t v69 = *((unsigned int *)this + 3185);
    unint64_t v19 = this[1591];
    if (v17 < v69)
    {
      char v20 = 103;
      goto LABEL_44;
    }
    unint64_t v102 = this[1593];
    size_t v103 = (char *)*((void *)v102 + 1);
    unint64_t v126 = v7;
    if (&v19[v69] == v103)
    {
      unint64_t v111 = (unint64_t)&v19[v69 + 1];
      unint64_t v104 = *((void *)v102 + 2);
      if (v111 <= v104)
      {
        *((void *)v102 + 1) = v111;
        LODWORD(v112) = 1;
LABEL_202:
        *((_DWORD *)this + 3185) = v69 + v112;
        char v20 = 103;
        int v7 = v126;
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v104 = *((void *)v102 + 2);
    }
    if ((2 * v69) <= 4) {
      uint64_t v112 = 4;
    }
    else {
      uint64_t v112 = (2 * v69);
    }
    size_t v113 = v112 + v69;
    if (!v103 || (unint64_t)&v103[v113] > v104)
    {
      unint64_t v114 = 2 * *((void *)v102 + 4);
      if (v114 <= v113 + 1) {
        unint64_t v114 = v113 + 1;
      }
      *((void *)v102 + 4) = v114;
      unint64_t v115 = v114 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v114 + 8, 0xD0263BC5uLL);
      uint64_t v116 = result + v115;
      *(void *)uint64_t result = *((void *)v102 + 3);
      size_t v103 = (char *)(result + 8);
      *((void *)v102 + 2) = v116;
      *((void *)v102 + 3) = result;
    }
    *((void *)v102 + 1) = &v103[v113];
    if (v69) {
      uint64_t result = (uint64_t)memcpy(v103, *v126, v69);
    }
    this[1591] = v103;
    LODWORD(v69) = *((_DWORD *)this + 3185);
    unint64_t v19 = v103;
    unsigned int v17 = *((_DWORD *)this + 3184);
    unsigned int v16 = this + 1592;
    goto LABEL_202;
  }
  if (v14 != 15) {
    goto LABEL_63;
  }
  if (*(void *)result != 0x5F65656C6C616340 || *(void *)(result + 7) != 0x64656E776F6E755FLL) {
    goto LABEL_63;
  }
  unsigned int v16 = this + 1592;
  unsigned int v17 = *((_DWORD *)this + 3184);
  size_t v18 = *((unsigned int *)this + 3185);
  unint64_t v19 = this[1591];
  if (v17 < v18)
  {
    char v20 = 100;
    goto LABEL_44;
  }
  unint64_t v96 = this[1593];
  std::string v97 = (char *)*((void *)v96 + 1);
  unint64_t v124 = v7;
  if (&v19[v18] != v97)
  {
    unint64_t v98 = *((void *)v96 + 2);
LABEL_188:
    if ((2 * v18) <= 4) {
      uint64_t v118 = 4;
    }
    else {
      uint64_t v118 = (2 * v18);
    }
    size_t v119 = v118 + v18;
    if (!v97 || (unint64_t)&v97[v119] > v98)
    {
      unint64_t v120 = 2 * *((void *)v96 + 4);
      if (v120 <= v119 + 1) {
        unint64_t v120 = v119 + 1;
      }
      *((void *)v96 + 4) = v120;
      unint64_t v121 = v120 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v120 + 8, 0xD0263BC5uLL);
      uint64_t v122 = result + v121;
      *(void *)uint64_t result = *((void *)v96 + 3);
      std::string v97 = (char *)(result + 8);
      *((void *)v96 + 2) = v122;
      *((void *)v96 + 3) = result;
    }
    *((void *)v96 + 1) = &v97[v119];
    if (v18) {
      uint64_t result = (uint64_t)memcpy(v97, *v124, v18);
    }
    this[1591] = v97;
    LODWORD(v18) = *((_DWORD *)this + 3185);
    unint64_t v19 = v97;
    unsigned int v17 = *((_DWORD *)this + 3184);
    unsigned int v16 = this + 1592;
    goto LABEL_204;
  }
  unint64_t v117 = (unint64_t)&v19[v18 + 1];
  unint64_t v98 = *((void *)v96 + 2);
  if (v117 > v98) {
    goto LABEL_188;
  }
  *((void *)v96 + 1) = v117;
  LODWORD(v118) = 1;
LABEL_204:
  *((_DWORD *)this + 3185) = v18 + v118;
  char v20 = 100;
  int v7 = v124;
LABEL_44:
  *unsigned int v16 = v17 + 1;
  v19[v17] = v20;
  unint64_t v32 = v12;
  if (v10 == (swift::Demangle::__runtime::Node *)v12) {
    goto LABEL_80;
  }
  unsigned int v33 = a3 + 1;
  while (1)
  {
    int v34 = *(unsigned __int16 *)(*(void *)v10 + 16);
    if (v34 != 112) {
      break;
    }
    if (*(_DWORD *)a4) {
      return result;
    }
    int v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
    if (v10 == (swift::Demangle::__runtime::Node *)v12)
    {
      unint64_t v32 = v12;
      goto LABEL_80;
    }
  }
  if (v34 != 43 && v34 != 46)
  {
    unint64_t v32 = (swift::Demangle::__runtime::Node **)v10;
    goto LABEL_80;
  }
  if (v34 == 43) {
    char v35 = 71;
  }
  else {
    char v35 = 103;
  }
  unsigned int v36 = *((_DWORD *)this + 3184);
  size_t v37 = *((unsigned int *)this + 3185);
  unint64_t v38 = this[1591];
  if (v36 >= v37)
  {
    unint64_t v39 = this[1593];
    uint64_t v40 = (char *)*((void *)v39 + 1);
    if (&v38[v37] == v40)
    {
      unint64_t v44 = (unint64_t)&v38[v37 + 1];
      unint64_t v41 = *((void *)v39 + 2);
      if (v44 <= v41)
      {
        *((void *)v39 + 1) = v44;
        LODWORD(v45) = 1;
LABEL_77:
        *((_DWORD *)this + 3185) = v37 + v45;
        goto LABEL_78;
      }
    }
    else
    {
      unint64_t v41 = *((void *)v39 + 2);
    }
    size_t v123 = v7;
    if ((2 * v37) <= 4) {
      uint64_t v45 = 4;
    }
    else {
      uint64_t v45 = (2 * v37);
    }
    size_t v46 = v45 + v37;
    if (!v40 || (unint64_t)&v40[v46] > v41)
    {
      unint64_t v47 = 2 * *((void *)v39 + 4);
      if (v47 <= v46 + 1) {
        unint64_t v47 = v46 + 1;
      }
      *((void *)v39 + 4) = v47;
      unint64_t v48 = v47 + 8;
      int v127 = v45;
      char v49 = v35;
      uint64_t v50 = malloc_type_malloc(v47 + 8, 0xD0263BC5uLL);
      char v35 = v49;
      LODWORD(v45) = v127;
      unint64_t v51 = (char *)v50 + v48;
      *uint64_t v50 = *((void *)v39 + 3);
      uint64_t v40 = (char *)(v50 + 1);
      *((void *)v39 + 2) = v51;
      *((void *)v39 + 3) = v50;
    }
    *((void *)v39 + 1) = &v40[v46];
    int v7 = v123;
    if (v37)
    {
      char v52 = v35;
      memcpy(v40, *v123, v37);
      char v35 = v52;
    }
    this[1591] = v40;
    LODWORD(v37) = *((_DWORD *)this + 3185);
    unint64_t v38 = v40;
    unsigned int v36 = *((_DWORD *)this + 3184);
    goto LABEL_77;
  }
LABEL_78:
  *((_DWORD *)this + 3184) = v36 + 1;
  v38[v36] = v35;
  if (*(_DWORD *)a4) {
    return result;
  }
  unint64_t v32 = (swift::Demangle::__runtime::Node **)((char *)v10 + 8);
LABEL_80:
  unsigned int v53 = *((_DWORD *)this + 3184);
  size_t v54 = *((unsigned int *)this + 3185);
  unint64_t v55 = this[1591];
  if (v53 < v54) {
    goto LABEL_96;
  }
  uint64_t v56 = this[1593];
  unint64_t v57 = (char *)*((void *)v56 + 1);
  if (&v55[v54] != v57)
  {
    unint64_t v58 = *((void *)v56 + 2);
LABEL_84:
    if ((2 * v54) <= 4) {
      uint64_t v60 = 4;
    }
    else {
      uint64_t v60 = (2 * v54);
    }
    size_t v61 = v60 + v54;
    if (!v57 || (unint64_t)&v57[v61] > v58)
    {
      unint64_t v62 = 2 * *((void *)v56 + 4);
      if (v62 <= v61 + 1) {
        unint64_t v62 = v61 + 1;
      }
      *((void *)v56 + 4) = v62;
      unint64_t v63 = v62 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v62 + 8, 0xD0263BC5uLL);
      uint64_t v64 = result + v63;
      *(void *)uint64_t result = *((void *)v56 + 3);
      unint64_t v57 = (char *)(result + 8);
      *((void *)v56 + 2) = v64;
      *((void *)v56 + 3) = result;
    }
    *((void *)v56 + 1) = &v57[v61];
    if (v54) {
      uint64_t result = (uint64_t)memcpy(v57, *v7, v54);
    }
    this[1591] = v57;
    LODWORD(v54) = *((_DWORD *)this + 3185);
    unint64_t v55 = v57;
    unsigned int v53 = *((_DWORD *)this + 3184);
    goto LABEL_95;
  }
  unint64_t v59 = (unint64_t)&v55[v54 + 1];
  unint64_t v58 = *((void *)v56 + 2);
  if (v59 > v58) {
    goto LABEL_84;
  }
  *((void *)v56 + 1) = v59;
  LODWORD(v60) = 1;
LABEL_95:
  *((_DWORD *)this + 3185) = v54 + v60;
LABEL_96:
  *((_DWORD *)this + 3184) = v53 + 1;
  v55[v53] = 95;
  unint64_t v65 = v12;
  if (v32 == v12) {
    goto LABEL_110;
  }
LABEL_97:
  uint64_t v66 = *v32;
  unint64_t v67 = (swift::Demangle::__runtime::Node *)((char *)*v32 + 16);
  if (*(_WORD *)v67 != 118)
  {
    unint64_t v65 = v32;
LABEL_110:
    unsigned int v70 = *((_DWORD *)this + 3184);
    size_t v71 = *((unsigned int *)this + 3185);
    unint64_t v72 = this[1591];
    if (v70 < v71) {
      goto LABEL_129;
    }
    uint64_t v73 = this[1593];
    unint64_t v74 = (char *)*((void *)v73 + 1);
    if (&v72[v71] == v74)
    {
      unint64_t v76 = (unint64_t)&v72[v71 + 1];
      unint64_t v75 = *((void *)v73 + 2);
      if (v76 <= v75)
      {
        *((void *)v73 + 1) = v76;
        LODWORD(v77) = 1;
LABEL_128:
        *((_DWORD *)this + 3185) = v71 + v77;
LABEL_129:
        *((_DWORD *)this + 3184) = v70 + 1;
        for (v72[v70] = 95; v65 != v12; ++v65)
        {
          if (*(_DWORD *)a4) {
            return result;
          }
        }
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        unsigned int v83 = *((_DWORD *)this + 3184);
        size_t v84 = *((unsigned int *)this + 3185);
        int v85 = this[1591];
        if (v83 < v84)
        {
LABEL_151:
          *((_DWORD *)this + 3184) = v83 + 1;
          v85[v83] = 95;
          *(_DWORD *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          return result;
        }
        __int16 v86 = this[1593];
        uint64_t v87 = (char *)*((void *)v86 + 1);
        if (&v85[v84] == v87)
        {
          unint64_t v89 = (unint64_t)&v85[v84 + 1];
          unint64_t v88 = *((void *)v86 + 2);
          if (v89 <= v88)
          {
            *((void *)v86 + 1) = v89;
            LODWORD(v90) = 1;
LABEL_150:
            *((_DWORD *)this + 3185) = v84 + v90;
            goto LABEL_151;
          }
        }
        else
        {
          unint64_t v88 = *((void *)v86 + 2);
        }
        if ((2 * v84) <= 4) {
          uint64_t v90 = 4;
        }
        else {
          uint64_t v90 = (2 * v84);
        }
        size_t v91 = v90 + v84;
        if (v87) {
          BOOL v92 = (unint64_t)&v87[v90 + v84] > v88;
        }
        else {
          BOOL v92 = 1;
        }
        int v85 = (char *)*((void *)v86 + 1);
        if (v92)
        {
          unint64_t v93 = 2 * *((void *)v86 + 4);
          if (v93 <= v91 + 1) {
            unint64_t v93 = v91 + 1;
          }
          *((void *)v86 + 4) = v93;
          unint64_t v94 = v93 + 8;
          uint64_t result = (uint64_t)malloc_type_malloc(v93 + 8, 0xD0263BC5uLL);
          uint64_t v95 = result + v94;
          *(void *)uint64_t result = *((void *)v86 + 3);
          int v85 = (char *)(result + 8);
          *((void *)v86 + 2) = v95;
          *((void *)v86 + 3) = result;
        }
        *((void *)v86 + 1) = &v85[v91];
        if (v84) {
          uint64_t result = (uint64_t)memcpy(v85, *v7, v84);
        }
        this[1591] = v85;
        LODWORD(v84) = *((_DWORD *)this + 3185);
        unsigned int v83 = *((_DWORD *)this + 3184);
        goto LABEL_150;
      }
    }
    else
    {
      unint64_t v75 = *((void *)v73 + 2);
    }
    if ((2 * v71) <= 4) {
      uint64_t v77 = 4;
    }
    else {
      uint64_t v77 = (2 * v71);
    }
    size_t v78 = v77 + v71;
    if (v74) {
      BOOL v79 = (unint64_t)&v74[v77 + v71] > v75;
    }
    else {
      BOOL v79 = 1;
    }
    unint64_t v72 = (char *)*((void *)v73 + 1);
    if (v79)
    {
      unint64_t v80 = 2 * *((void *)v73 + 4);
      if (v80 <= v78 + 1) {
        unint64_t v80 = v78 + 1;
      }
      *((void *)v73 + 4) = v80;
      unint64_t v81 = v80 + 8;
      uint64_t result = (uint64_t)malloc_type_malloc(v80 + 8, 0xD0263BC5uLL);
      uint64_t v82 = result + v81;
      *(void *)uint64_t result = *((void *)v73 + 3);
      unint64_t v72 = (char *)(result + 8);
      *((void *)v73 + 2) = v82;
      *((void *)v73 + 3) = result;
    }
    *((void *)v73 + 1) = &v72[v78];
    if (v71) {
      uint64_t result = (uint64_t)memcpy(v72, *v7, v71);
    }
    this[1591] = v72;
    LODWORD(v71) = *((_DWORD *)this + 3185);
    unsigned int v70 = *((_DWORD *)this + 3184);
    goto LABEL_128;
  }
  int v68 = *((unsigned __int8 *)v66 + 18);
  if (v68 == 2) {
    goto LABEL_102;
  }
  if (v68 == 5 && *((_DWORD *)v66 + 2) == 2)
  {
    uint64_t v66 = *(swift::Demangle::__runtime::Node **)v66;
    unint64_t v67 = (swift::Demangle::__runtime::Node *)((char *)v66 + 16);
LABEL_102:
    while (1)
    {
      if (*(_DWORD *)a4) {
        break;
      }
      uint64_t v66 = (swift::Demangle::__runtime::Node *)((char *)v66 + 8);
      if (v66 == v67)
      {
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (++v32 != v12) {
          goto LABEL_97;
        }
        unint64_t v65 = v12;
        goto LABEL_110;
      }
    }
  }
  else
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v66;
    *(_DWORD *)(a4 + 16) = 1712;
  }
  return result;
}

void anonymous namespace'::Remangler::mangleImplicitClosure(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleImplParameter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  size_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 2)
  {
LABEL_5:
    uint64_t v8 = v4 + 2;
    unsigned int v9 = a3 + 1;
    while (1)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      if (++v4 == v8)
      {
        int v10 = 0;
        int v4 = 0;
        int v11 = 0;
        goto LABEL_10;
      }
    }
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2) == 2)
  {
    int v4 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }
  int v11 = 1712;
  int v10 = 1;
LABEL_10:
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v11;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleImplResult@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  size_t v5 = this;
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 2)
  {
LABEL_5:
    uint64_t v8 = v4 + 2;
    unsigned int v9 = a3 + 1;
    while (1)
    {
      if (*(_DWORD *)a4) {
        return this;
      }
      if (++v4 == v8)
      {
        int v10 = 0;
        int v4 = 0;
        int v11 = 0;
        goto LABEL_10;
      }
    }
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2) == 2)
  {
    int v4 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }
  int v11 = 1723;
  int v10 = 1;
LABEL_10:
  *(_DWORD *)a4 = v10;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v11;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleImplYield@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = a2;
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 != 2 && (v8 != 5 || *((_DWORD *)a2 + 2) != 2))
  {
    int v15 = 1728;
    int v16 = 1;
LABEL_43:
    *(_DWORD *)a4 = v16;
    *(void *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = v15;
    return this;
  }
  unsigned int v9 = this[3184];
  size_t v10 = this[3185];
  int v11 = (char *)*((void *)this + 1591);
  if (v9 >= v10)
  {
    int v12 = (void *)*((void *)this + 1593);
    unsigned int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v17 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v17 <= v14)
      {
        v12[1] = v17;
        LODWORD(v18) = 1;
LABEL_24:
        *(_DWORD *)(v6 + 12740) = v10 + v18;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v10);
    }
    size_t v19 = v18 + v10;
    if (v13) {
      BOOL v20 = (unint64_t)&v13[v18 + v10] > v14;
    }
    else {
      BOOL v20 = 1;
    }
    int v11 = (char *)v12[1];
    if (v20)
    {
      unint64_t v21 = 2 * v12[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      _OWORD v12[4] = v21;
      unint64_t v22 = v21 + 8;
      this = (unsigned int *)malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      int v23 = (char *)this + v22;
      *(void *)this = v12[3];
      int v11 = (char *)(this + 2);
      v12[2] = v23;
      void v12[3] = this;
    }
    v12[1] = &v11[v19];
    if (v10) {
      this = (unsigned int *)memcpy(v11, *(const void **)(v6 + 12728), v10);
    }
    *(void *)(v6 + 12728) = v11;
    LODWORD(v10) = *(_DWORD *)(v6 + 12740);
    unsigned int v9 = *(_DWORD *)(v6 + 12736);
    goto LABEL_24;
  }
LABEL_25:
  *(_DWORD *)(v6 + 12736) = v9 + 1;
  v11[v9] = 89;
  int v24 = *((unsigned __int8 *)v5 + 18);
  unint64_t v25 = (swift::Demangle::__runtime::Node **)v5;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      unint64_t v26 = *(swift::Demangle::__runtime::Node ***)v5;
      unint64_t v25 = *(swift::Demangle::__runtime::Node ***)v5;
      goto LABEL_33;
    }
    unint64_t v25 = 0;
  }
  switch(v24)
  {
    case 1:
      uint64_t v27 = (swift::Demangle::__runtime::Node **)((char *)v5 + 8);
      if (v25 != (swift::Demangle::__runtime::Node **)((char *)v5 + 8)) {
        goto LABEL_40;
      }
      goto LABEL_42;
    case 2:
      uint64_t v27 = (swift::Demangle::__runtime::Node **)((char *)v5 + 16);
      if (v25 != (swift::Demangle::__runtime::Node **)((char *)v5 + 16)) {
        goto LABEL_40;
      }
      goto LABEL_42;
    case 5:
      unint64_t v26 = *(swift::Demangle::__runtime::Node ***)v5;
LABEL_33:
      uint64_t v27 = &v26[*((unsigned int *)v5 + 2)];
      if (v25 != v27) {
        goto LABEL_40;
      }
      goto LABEL_42;
  }
  uint64_t v27 = 0;
  if (!v25)
  {
LABEL_42:
    int v16 = 0;
    size_t v5 = 0;
    int v15 = 0;
    goto LABEL_43;
  }
LABEL_40:
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v25 == v27) {
      goto LABEL_42;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleImplErrorResult@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = a2;
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 != 2 && (v8 != 5 || *((_DWORD *)a2 + 2) != 2))
  {
    int v15 = 1717;
    int v16 = 1;
LABEL_43:
    *(_DWORD *)a4 = v16;
    *(void *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = v15;
    return this;
  }
  unsigned int v9 = this[3184];
  size_t v10 = this[3185];
  int v11 = (char *)*((void *)this + 1591);
  if (v9 >= v10)
  {
    int v12 = (void *)*((void *)this + 1593);
    unsigned int v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v17 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v17 <= v14)
      {
        v12[1] = v17;
        LODWORD(v18) = 1;
LABEL_24:
        *(_DWORD *)(v6 + 12740) = v10 + v18;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v10);
    }
    size_t v19 = v18 + v10;
    if (v13) {
      BOOL v20 = (unint64_t)&v13[v18 + v10] > v14;
    }
    else {
      BOOL v20 = 1;
    }
    int v11 = (char *)v12[1];
    if (v20)
    {
      unint64_t v21 = 2 * v12[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      _OWORD v12[4] = v21;
      unint64_t v22 = v21 + 8;
      this = (unsigned int *)malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      int v23 = (char *)this + v22;
      *(void *)this = v12[3];
      int v11 = (char *)(this + 2);
      v12[2] = v23;
      void v12[3] = this;
    }
    v12[1] = &v11[v19];
    if (v10) {
      this = (unsigned int *)memcpy(v11, *(const void **)(v6 + 12728), v10);
    }
    *(void *)(v6 + 12728) = v11;
    LODWORD(v10) = *(_DWORD *)(v6 + 12740);
    unsigned int v9 = *(_DWORD *)(v6 + 12736);
    goto LABEL_24;
  }
LABEL_25:
  *(_DWORD *)(v6 + 12736) = v9 + 1;
  v11[v9] = 122;
  int v24 = *((unsigned __int8 *)v5 + 18);
  unint64_t v25 = (swift::Demangle::__runtime::Node **)v5;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      unint64_t v26 = *(swift::Demangle::__runtime::Node ***)v5;
      unint64_t v25 = *(swift::Demangle::__runtime::Node ***)v5;
      goto LABEL_33;
    }
    unint64_t v25 = 0;
  }
  switch(v24)
  {
    case 1:
      uint64_t v27 = (swift::Demangle::__runtime::Node **)((char *)v5 + 8);
      if (v25 != (swift::Demangle::__runtime::Node **)((char *)v5 + 8)) {
        goto LABEL_40;
      }
      goto LABEL_42;
    case 2:
      uint64_t v27 = (swift::Demangle::__runtime::Node **)((char *)v5 + 16);
      if (v25 != (swift::Demangle::__runtime::Node **)((char *)v5 + 16)) {
        goto LABEL_40;
      }
      goto LABEL_42;
    case 5:
      unint64_t v26 = *(swift::Demangle::__runtime::Node ***)v5;
LABEL_33:
      uint64_t v27 = &v26[*((unsigned int *)v5 + 2)];
      if (v25 != v27) {
        goto LABEL_40;
      }
      goto LABEL_42;
  }
  uint64_t v27 = 0;
  if (!v25)
  {
LABEL_42:
    int v16 = 0;
    size_t v5 = 0;
    int v15 = 0;
    goto LABEL_43;
  }
LABEL_40:
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v25 == v27) {
      goto LABEL_42;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleInOut@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  size_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    size_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      size_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 82;
  int v21 = *((unsigned __int8 *)a2 + 18);
  if (v21 != 1)
  {
    if (v21 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return this;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unint64_t v22 = *(swift::Demangle::__runtime::Node **)a2;
}

void anonymous namespace'::Remangler::mangleInitializer(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleInitAccessor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleIsolated@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Yi", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  size_t v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleSending@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Yu", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  size_t v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleKeyPathGetterThunkHelper@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TK", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleKeyPathSetterThunkHelper@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Tk", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleKeyPathEqualsThunkHelper@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TH", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleKeyPathHashThunkHelper@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Th", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wl", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableCacheVariable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WL", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleLocalDeclName@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  size_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    size_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      size_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 76;
  int v21 = *((unsigned __int8 *)a2 + 18);
  unint64_t v22 = a2;
  if ((v21 - 1) >= 2)
  {
    if (v21 == 5)
    {
      int v23 = *a2;
      unint64_t v22 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_29;
    }
    unint64_t v22 = 0;
  }
  switch(v21)
  {
    case 1:
      int v24 = a2 + 1;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 2:
      int v24 = a2 + 2;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 5:
      int v23 = *a2;
LABEL_29:
      int v24 = (swift::Demangle::__runtime::Node **)((char *)v23 + 8 * *((unsigned int *)a2 + 2));
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
  }
  int v24 = 0;
  if (!v22)
  {
LABEL_39:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_36:
  unsigned int v25 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v22 == v24) {
      goto LABEL_39;
    }
  }
}

void *anonymous namespace'::Remangler::mangleMacro@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fm", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      size_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

char *anonymous namespace'::Remangler::mangleMacroExpansionUniqueName@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMu", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      size_t v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void anonymous namespace'::Remangler::mangleMaterializeForSet(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

char *anonymous namespace'::Remangler::mangleMemberAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMm", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      size_t v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

char *anonymous namespace'::Remangler::mangleMemberAttributeAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMr", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  size_t v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      size_t v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    size_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleMetatype@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = a2;
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 == 1)
  {
LABEL_6:
    unsigned int v10 = this[3184];
    size_t v11 = this[3185];
    int v12 = (unsigned char *)*((void *)this + 1591);
    if (v10 < v11)
    {
LABEL_46:
      *(_DWORD *)(v6 + 12736) = v10 + 1;
      v12[v10] = 77;
      int v29 = *((unsigned __int8 *)v5 + 18);
      if (v29 == 1)
      {
LABEL_50:
        unint64_t v30 = *(swift::Demangle::__runtime::Node **)v5;
      }
      if (v29 == 5 && *((_DWORD *)v5 + 2) == 1)
      {
        size_t v5 = *(swift::Demangle::__runtime::Node **)v5;
        goto LABEL_50;
      }
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = v5;
      int v19 = 114;
LABEL_54:
      *(_DWORD *)(a4 + 16) = v19;
      return this;
    }
    unsigned int v13 = (void *)*((void *)this + 1593);
    unint64_t v14 = (unsigned char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v22 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v22 <= v15)
      {
        v13[1] = v22;
        LODWORD(v23) = 1;
LABEL_45:
        *(_DWORD *)(v6 + 12740) = v11 + v23;
        goto LABEL_46;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v23 = 4;
    }
    else {
      uint64_t v23 = (2 * v11);
    }
    size_t v24 = v23 + v11;
    if (v14) {
      BOOL v25 = (unint64_t)&v14[v23 + v11] > v15;
    }
    else {
      BOOL v25 = 1;
    }
    int v12 = (unsigned char *)v13[1];
    if (v25)
    {
      unint64_t v26 = 2 * v13[4];
      if (v26 <= v24 + 1) {
        unint64_t v26 = v24 + 1;
      }
      v13[4] = v26;
      unint64_t v27 = v26 + 8;
      this = (unsigned int *)malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      size_t v28 = (char *)this + v27;
      *(void *)this = v13[3];
      int v12 = this + 2;
      void v13[2] = v28;
      _OWORD v13[3] = this;
    }
    v13[1] = &v12[v24];
    if (v11) {
      this = (unsigned int *)memcpy(v12, *(const void **)(v6 + 12728), v11);
    }
    *(void *)(v6 + 12728) = v12;
    LODWORD(v11) = *(_DWORD *)(v6 + 12740);
    unsigned int v10 = *(_DWORD *)(v6 + 12736);
    goto LABEL_45;
  }
  if (v8 != 2)
  {
    if (v8 != 5) {
      goto LABEL_12;
    }
    int v9 = *((_DWORD *)a2 + 2);
    if (v9 != 2)
    {
      if (v9 == 1) {
        goto LABEL_6;
      }
LABEL_12:
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      int v19 = 1840;
      goto LABEL_54;
    }
  }
  this = (unsigned int *)swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XM", 2uLL, *((void **)this + 1593));
  int v16 = *((unsigned __int8 *)v5 + 18);
  BOOL v17 = (swift::Demangle::__runtime::Node **)v5;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      unint64_t v18 = *(swift::Demangle::__runtime::Node **)v5;
      BOOL v17 = *(swift::Demangle::__runtime::Node ***)v5;
      goto LABEL_18;
    }
    BOOL v17 = 0;
  }
  switch(v16)
  {
    case 1:
      BOOL v20 = (swift::Demangle::__runtime::Node **)((char *)v5 + 8);
      if (v17 == v20) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 2:
      BOOL v20 = (swift::Demangle::__runtime::Node **)((char *)v5 + 16);
      if (v17 == v20) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v18 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_18:
      BOOL v20 = (swift::Demangle::__runtime::Node **)((char *)v18 + 8 * *((unsigned int *)v5 + 2));
      if (v17 == v20) {
        goto LABEL_28;
      }
      goto LABEL_25;
  }
  BOOL v20 = 0;
  if (!v17)
  {
LABEL_28:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_25:
  unsigned int v21 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v17 == v20) {
      goto LABEL_28;
    }
  }
}

void *anonymous namespace'::Remangler::mangleMetaclass@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mm", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void anonymous namespace'::Remangler::mangleModifyAccessor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleNativeOwningAddressor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleNativeOwningMutableAddressor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleNativePinningAddressor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleNativePinningMutableAddressor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleNominalTypeDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mn", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleNominalTypeDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Hn", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleObjCBlock@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    size_t v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unsigned int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 98;
  int v21 = *((unsigned __int8 *)a2 + 18);
  unint64_t v22 = a2;
  if ((v21 - 1) >= 2)
  {
    if (v21 == 5)
    {
      uint64_t v23 = *a2;
      unint64_t v22 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_29;
    }
    unint64_t v22 = 0;
  }
  switch(v21)
  {
    case 1:
      size_t v24 = a2 + 1;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 2:
      size_t v24 = a2 + 2;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 5:
      uint64_t v23 = *a2;
LABEL_29:
      size_t v24 = (swift::Demangle::__runtime::Node **)((char *)v23 + 8 * *((unsigned int *)a2 + 2));
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
  }
  size_t v24 = 0;
  if (!v22)
  {
LABEL_39:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_36:
  unsigned int v25 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v22 == v24) {
      goto LABEL_39;
    }
  }
}

void anonymous namespace'::Remangler::mangleOwningAddressor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleOwningMutableAddressor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::manglePartialApplyForwarder@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = this + 1591;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "PA", 2uLL, this[1593]);
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 1 || v10 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(v8, "__T", 3uLL, this[1593]);
    int v11 = *((unsigned __int8 *)a2 + 18);
    if (v11 != 1)
    {
      if (v11 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        int v13 = 114;
        int v12 = 10;
        goto LABEL_13;
      }
      a2 = *(swift::Demangle::__runtime::Node **)a2;
    }
    int v12 = *(_DWORD *)a4;
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  else
  {
    int v12 = 0;
  }
  a2 = 0;
  int v13 = 0;
LABEL_13:
  *(_DWORD *)a4 = v12;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return result;
}

void *anonymous namespace'::Remangler::manglePartialApplyObjCForwarder@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = this + 1591;
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "PAo", 3uLL, this[1593]);
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 1 || v10 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    uint64_t result = swift::Demangle::__runtime::CharVector::append(v8, "__T", 3uLL, this[1593]);
    int v11 = *((unsigned __int8 *)a2 + 18);
    if (v11 != 1)
    {
      if (v11 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        int v13 = 114;
        int v12 = 10;
        goto LABEL_13;
      }
      a2 = *(swift::Demangle::__runtime::Node **)a2;
    }
    int v12 = *(_DWORD *)a4;
    if (*(_DWORD *)a4) {
      return result;
    }
  }
  else
  {
    int v12 = 0;
  }
  a2 = 0;
  int v13 = 0;
LABEL_13:
  *(_DWORD *)a4 = v12;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return result;
}

char *anonymous namespace'::Remangler::manglePeerAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMp", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

char *anonymous namespace'::Remangler::manglePreambleAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMq", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      uint64_t v11 = *(void *)a2;
      int v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      int v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      uint64_t v11 = *(void *)a2;
LABEL_9:
      int v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  int v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::manglePrivateDeclName@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    uint64_t v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 80;
  int v21 = *((unsigned __int8 *)a2 + 18);
  unint64_t v22 = a2;
  if ((v21 - 1) >= 2)
  {
    if (v21 == 5)
    {
      uint64_t v23 = *a2;
      unint64_t v22 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_29;
    }
    unint64_t v22 = 0;
  }
  switch(v21)
  {
    case 1:
      size_t v24 = a2 + 1;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 2:
      size_t v24 = a2 + 2;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 5:
      uint64_t v23 = *a2;
LABEL_29:
      size_t v24 = (swift::Demangle::__runtime::Node **)((char *)v23 + 8 * *((unsigned int *)a2 + 2));
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
  }
  size_t v24 = 0;
  if (!v22)
  {
LABEL_39:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_36:
  unsigned int v25 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v22 == v24) {
      goto LABEL_39;
    }
  }
}

void anonymous namespace'::Remangler::manglePropertyWrapperBackingInitializer(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::manglePropertyWrapperInitFromProjectedValue(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleProtocol(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = (uint64_t *)a2;
  v9[0] = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  v13[0] = 0;
  v13[1] = 0;
  char v14 = 0;
  if (*((_WORD *)a2 + 8) == 232)
  {
    int v8 = *((unsigned __int8 *)a2 + 18);
    if ((v8 - 1) < 2)
    {
LABEL_6:
      size_t v5 = (uint64_t *)*v5;
      goto LABEL_8;
    }
    if (v8 == 5 && *((_DWORD *)a2 + 2))
    {
      size_t v5 = *(uint64_t **)a2;
      goto LABEL_6;
    }
    size_t v5 = 0;
  }
LABEL_8:
  {
    if (*(_DWORD *)a4) {
      goto LABEL_12;
    }
    swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)this, (const swift::Demangle::__runtime::SubstitutionEntry *)v13);
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_12:
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleProtocolConformance(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (*((unsigned char *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) != 3)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v10 = 560;
    goto LABEL_13;
  }
  unsigned int v7 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    int v8 = a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
      int v8 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (!*(_DWORD *)a4)
    {
      if (*((unsigned char *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u)
      {
        size_t v9 = *(swift::Demangle::__runtime::Node **)(*(void *)a2 + 16);
        return;
      }
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      int v10 = 119;
LABEL_13:
      *(_DWORD *)(a4 + 16) = v10;
    }
  }
}

void anonymous namespace'::Remangler::mangleProtocolDescriptor(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Mp", 2uLL, this[1593]);
  if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
  }
  int v8 = (swift::Demangle::__runtime::Node **)*a2;
}

void anonymous namespace'::Remangler::mangleProtocolDescriptorRecord(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Hr", 2uLL, this[1593]);
  if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
  }
  int v8 = (swift::Demangle::__runtime::Node **)*a2;
}

void anonymous namespace'::Remangler::mangleProtocolConformanceDescriptor(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Mc", 2uLL, this[1593]);
  if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
  }
  int v8 = (swift::Demangle::__runtime::Node **)*a2;
}

void anonymous namespace'::Remangler::mangleProtocolConformanceDescriptorRecord(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Hc", 2uLL, this[1593]);
  if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
  }
  int v8 = (swift::Demangle::__runtime::Node **)*a2;
}

void anonymous namespace'::Remangler::mangleProtocolList(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    uint64_t v11 = (void *)*((void *)this + 1593);
    uint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      BOOL v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      int v21 = (char *)v20 + v19;
      *BOOL v20 = v11[3];
      int v10 = (char *)(v20 + 1);
      void v11[2] = v21;
      void v11[3] = v20;
    }
    v11[1] = &v10[v16];
    if (v9) {
      memcpy(v10, *((const void **)this + 1591), v9);
    }
    *((void *)this + 1591) = v10;
    LODWORD(v9) = *((_DWORD *)this + 3185);
    unsigned int v8 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v8 + 1;
  v10[v8] = 80;
}

void anonymous namespace'::Remangler::mangleProtocolListWithClass(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Xc", 2uLL, this[1593]);
  int v8 = *((unsigned __int8 *)a2 + 18);
  size_t v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) <= 1u)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 119;
      return;
    }
    size_t v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = a3 + 1;
  if (*(_DWORD *)a4) {
    return;
  }
  int v11 = *((unsigned __int8 *)a2 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 != 5 || !*((_DWORD *)a2 + 2))
    {
      uint64_t v12 = 0;
      goto LABEL_14;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  uint64_t v12 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_14:
}

void anonymous namespace'::Remangler::mangleProtocolListWithAnyObject(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)this, 180);
  size_t v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)this, 153, "Swift");
  swift::Demangle::__runtime::Node::addChild(Node, v9, *(swift::Demangle::__runtime::NodeFactory **)this);
  unsigned int v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)this, 101, "AnyObject");
  swift::Demangle::__runtime::Node::addChild(Node, v10, *(swift::Demangle::__runtime::NodeFactory **)this);
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "P", 1uLL, *((void **)this + 1593));
  int v11 = *((unsigned __int8 *)a2 + 18);
  if ((v11 - 1) < 2) {
    goto LABEL_5;
  }
  if (v11 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    uint64_t v12 = *a2;
    goto LABEL_7;
  }
  uint64_t v12 = 0;
LABEL_7:
}

void anonymous namespace'::Remangler::mangleProtocolSelfConformanceDescriptor(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::CharVector::append(this + 1591, "MS", 2uLL, this[1593]);
  if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
  }
  int v8 = (swift::Demangle::__runtime::Node **)*a2;
  v10[0] = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::string __p = 0;
  char v15 = 0;
  v14[0] = 0;
  v14[1] = 0;
  if (*((_WORD *)v8 + 8) == 232)
  {
    int v9 = *((unsigned __int8 *)v8 + 18);
    if ((v9 - 1) < 2)
    {
LABEL_8:
      int v8 = (swift::Demangle::__runtime::Node **)*v8;
      goto LABEL_10;
    }
    if (v9 == 5 && *((_DWORD *)v8 + 2))
    {
      int v8 = (swift::Demangle::__runtime::Node **)*v8;
      goto LABEL_8;
    }
    int v8 = 0;
  }
LABEL_10:
  {
    if (*(_DWORD *)a4) {
      goto LABEL_14;
    }
    swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)this, (const swift::Demangle::__runtime::SubstitutionEntry *)v14);
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_14:
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TS", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitnessTable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WS", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleProtocolWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TW", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  unsigned int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      int v11 = *a2;
      unsigned int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    unsigned int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      uint64_t v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      uint64_t v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      int v11 = *a2;
LABEL_9:
      uint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  uint64_t v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleProtocolWitnessTable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WP", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleProtocolWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wa", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void anonymous namespace'::Remangler::mangleReadAccessor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleRelatedEntityDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  int v7 = *((unsigned __int8 *)a2 + 18);
  uint64_t v8 = a2;
  if ((v7 - 1) < 2) {
    goto LABEL_5;
  }
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    uint64_t v9 = *(void *)v8;
    goto LABEL_7;
  }
  uint64_t v9 = 0;
LABEL_7:
  unsigned int v10 = (const void **)((char *)this + 12728);
  unsigned int v11 = *((_DWORD *)this + 3184);
  size_t v12 = *((unsigned int *)this + 3185);
  unsigned int v13 = (char *)*((void *)this + 1591);
  if (v11 < v12) {
    goto LABEL_27;
  }
  unint64_t v14 = (void *)*((void *)this + 1593);
  char v15 = (char *)v14[1];
  if (&v13[v12] != v15)
  {
    unint64_t v16 = v14[2];
LABEL_11:
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (v15) {
      BOOL v20 = (unint64_t)&v15[v18 + v12] > v16;
    }
    else {
      BOOL v20 = 1;
    }
    unsigned int v13 = (char *)v14[1];
    if (v20)
    {
      unint64_t v21 = 2 * v14[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      v14[4] = v21;
      unint64_t v22 = v21 + 8;
      uint64_t v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      size_t v24 = (char *)v23 + v22;
      *uint64_t v23 = v14[3];
      unsigned int v13 = (char *)(v23 + 1);
      void v14[2] = v24;
      void v14[3] = v23;
    }
    v14[1] = &v13[v19];
    if (v12) {
      memcpy(v13, *v10, v12);
    }
    *((void *)this + 1591) = v13;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    unsigned int v11 = *((_DWORD *)this + 3184);
    goto LABEL_26;
  }
  unint64_t v17 = (unint64_t)&v13[v12 + 1];
  unint64_t v16 = v14[2];
  if (v17 > v16) {
    goto LABEL_11;
  }
  v14[1] = v17;
  LODWORD(v18) = 1;
LABEL_26:
  *((_DWORD *)this + 3185) = v12 + v18;
LABEL_27:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = 80;
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *(void *)(v9 + 8) + 1, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  unsigned int v25 = *((_DWORD *)this + 3184);
  size_t v26 = *((unsigned int *)this + 3185);
  unint64_t v27 = (char *)*((void *)this + 1591);
  if (v25 < v26) {
    goto LABEL_44;
  }
  size_t v28 = (void *)*((void *)this + 1593);
  int v29 = (char *)v28[1];
  if (&v27[v26] != v29)
  {
    unint64_t v30 = v28[2];
LABEL_31:
    if ((2 * v26) <= 4) {
      uint64_t v32 = 4;
    }
    else {
      uint64_t v32 = (2 * v26);
    }
    size_t v33 = v32 + v26;
    if (!v29 || (unint64_t)&v29[v33] > v30)
    {
      unint64_t v34 = 2 * v28[4];
      if (v34 <= v33 + 1) {
        unint64_t v34 = v33 + 1;
      }
      void v28[4] = v34;
      unint64_t v35 = v34 + 8;
      unsigned int v36 = malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
      size_t v37 = (char *)v36 + v35;
      *unsigned int v36 = v28[3];
      int v29 = (char *)(v36 + 1);
      void v28[2] = v37;
      void v28[3] = v36;
    }
    v28[1] = &v29[v33];
    if (v26) {
      memcpy(v29, *v10, v26);
    }
    *((void *)this + 1591) = v29;
    LODWORD(v26) = *((_DWORD *)this + 3185);
    unint64_t v27 = v29;
    unsigned int v25 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  unint64_t v31 = (unint64_t)&v27[v26 + 1];
  unint64_t v30 = v28[2];
  if (v31 > v30) {
    goto LABEL_31;
  }
  v28[1] = v31;
  LODWORD(v32) = 1;
LABEL_43:
  *((_DWORD *)this + 3185) = v26 + v32;
LABEL_44:
  *((_DWORD *)this + 3184) = v25 + 1;
  v27[v25] = 36;
  uint64_t result = swift::Demangle::__runtime::CharVector::append((char **)this + 1591, *(const void **)v9, *(void *)(v9 + 8), *((void **)this + 1593));
  int v39 = *((unsigned __int8 *)v4 + 18);
  if (v39 != 2)
  {
    if (v39 != 5 || *((_DWORD *)v4 + 2) <= 1u)
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = v4;
      *(_DWORD *)(a4 + 16) = 119;
      return result;
    }
    int v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  uint64_t v40 = (swift::Demangle::__runtime::Node *)*((void *)v4 + 1);
}

unsigned int *anonymous namespace'::Remangler::mangleShared@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unsigned int v11 = (void *)*((void *)this + 1593);
    size_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unsigned int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 104;
  int v21 = *((unsigned __int8 *)a2 + 18);
  if (v21 != 1)
  {
    if (v21 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return this;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unint64_t v22 = *(swift::Demangle::__runtime::Node **)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleOwned@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unsigned int v11 = (void *)*((void *)this + 1593);
    size_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unsigned int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 110;
  int v21 = *((unsigned __int8 *)a2 + 18);
  if (v21 != 1)
  {
    if (v21 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return this;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unint64_t v22 = *(swift::Demangle::__runtime::Node **)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleSILBoxType@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unsigned int v11 = (void *)*((void *)this + 1593);
    size_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unsigned int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 88;
  unsigned int v21 = *(_DWORD *)(v6 + 12736);
  size_t v22 = *(unsigned int *)(v6 + 12740);
  uint64_t v23 = *(char **)(v6 + 12728);
  if (v21 < v22) {
    goto LABEL_41;
  }
  size_t v24 = *(void **)(v6 + 12744);
  unsigned int v25 = (char *)v24[1];
  if (&v23[v22] != v25)
  {
    unint64_t v26 = v24[2];
LABEL_25:
    if ((2 * v22) <= 4) {
      uint64_t v28 = 4;
    }
    else {
      uint64_t v28 = (2 * v22);
    }
    size_t v29 = v28 + v22;
    if (v25) {
      BOOL v30 = (unint64_t)&v25[v28 + v22] > v26;
    }
    else {
      BOOL v30 = 1;
    }
    uint64_t v23 = (char *)v24[1];
    if (v30)
    {
      unint64_t v31 = 2 * v24[4];
      if (v31 <= v29 + 1) {
        unint64_t v31 = v29 + 1;
      }
      void v24[4] = v31;
      unint64_t v32 = v31 + 8;
      this = (unsigned int *)malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      size_t v33 = (char *)this + v32;
      *(void *)this = v24[3];
      uint64_t v23 = (char *)(this + 2);
      void v24[2] = v33;
      void v24[3] = this;
    }
    v24[1] = &v23[v29];
    if (v22) {
      this = (unsigned int *)memcpy(v23, *(const void **)(v6 + 12728), v22);
    }
    *(void *)(v6 + 12728) = v23;
    LODWORD(v22) = *(_DWORD *)(v6 + 12740);
    unsigned int v21 = *(_DWORD *)(v6 + 12736);
    goto LABEL_40;
  }
  unint64_t v27 = (unint64_t)&v23[v22 + 1];
  unint64_t v26 = v24[2];
  if (v27 > v26) {
    goto LABEL_25;
  }
  v24[1] = v27;
  LODWORD(v28) = 1;
LABEL_40:
  *(_DWORD *)(v6 + 12740) = v22 + v28;
LABEL_41:
  *(_DWORD *)(v6 + 12736) = v21 + 1;
  v23[v21] = 98;
  int v34 = *((unsigned __int8 *)a2 + 18);
  if (v34 != 1)
  {
    if (v34 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return this;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unint64_t v35 = *(swift::Demangle::__runtime::Node **)a2;
}

char *anonymous namespace'::Remangler::mangleSILBoxTypeWithLayout@<X0>(char *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  if (*((_WORD *)a2 + 8) != 211)
  {
    int v13 = 2711;
    unsigned int v14 = 1;
    goto LABEL_49;
  }
  uint64_t v7 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  if (v8 != 1 && (v8 != 5 || (*((_DWORD *)a2 + 2) | 2) != 3))
  {
    int v13 = 2713;
    unsigned int v14 = 1;
    goto LABEL_49;
  }
  size_t v9 = (const void **)(this + 12728);
  this = (char *)swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XB", 2uLL, *((void **)this + 1593));
  int v10 = *((unsigned __int8 *)v4 + 18);
  unsigned int v11 = v4;
  if ((v10 - 1) < 2) {
    goto LABEL_9;
  }
  if (v10 != 5)
  {
    size_t v12 = 0;
LABEL_13:
    if (*((_WORD *)v12 + 8) == 212)
    {
      if (v10 != 5) {
        goto LABEL_21;
      }
      goto LABEL_15;
    }
LABEL_48:
    int v13 = 2716;
    unsigned int v14 = 1;
    int v4 = v12;
    goto LABEL_49;
  }
  if (*((_DWORD *)v4 + 2))
  {
    unsigned int v11 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_9:
    size_t v12 = *(swift::Demangle::__runtime::Node **)v11;
    goto LABEL_13;
  }
  size_t v12 = 0;
  if (MEMORY[0x10] != 212) {
    goto LABEL_48;
  }
LABEL_15:
  if (*((_DWORD *)v4 + 2) == 3)
  {
    uint64_t v15 = *(swift::Demangle::__runtime::Node **)v4;
    int v4 = *(swift::Demangle::__runtime::Node **)(*(void *)v4 + 8);
    if (*((_WORD *)v4 + 8) != 43)
    {
      int v13 = 2722;
      unsigned int v14 = 1;
      goto LABEL_49;
    }
    size_t v16 = (swift::Demangle::__runtime::Node *)*((void *)v15 + 2);
    if (*((_WORD *)v16 + 8) != 235)
    {
      int v13 = 2725;
LABEL_58:
      unsigned int v14 = 1;
      int v4 = v16;
      goto LABEL_49;
    }
    unsigned int v17 = *(_DWORD *)(v7 + 12736);
    size_t v18 = *(unsigned int *)(v7 + 12740);
    unint64_t v19 = *(char **)(v7 + 12728);
    if (v17 < v18)
    {
LABEL_73:
      *(_DWORD *)(v7 + 12736) = v17 + 1;
      v19[v17] = 71;
      if (*(_DWORD *)a4) {
        return this;
      }
      goto LABEL_22;
    }
    BOOL v20 = *(void **)(v7 + 12744);
    unsigned int v21 = (char *)v20[1];
    if (&v19[v18] == v21)
    {
      unint64_t v36 = (unint64_t)&v19[v18 + 1];
      unint64_t v22 = v20[2];
      if (v36 <= v22)
      {
        v20[1] = v36;
        int v43 = 1;
LABEL_72:
        *(_DWORD *)(v7 + 12740) = v18 + v43;
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v22 = v20[2];
    }
    LODWORD(v37) = 2 * v18;
    if ((2 * v18) <= 4) {
      uint64_t v37 = 4;
    }
    else {
      uint64_t v37 = v37;
    }
    int v51 = v37;
    size_t v38 = v37 + v18;
    if (!v21 || (unint64_t)&v21[v38] > v22)
    {
      unint64_t v39 = 2 * v20[4];
      if (v39 <= v38 + 1) {
        unint64_t v39 = v38 + 1;
      }
      v20[4] = v39;
      unint64_t v40 = v39 + 8;
      size_t v50 = v38;
      unint64_t v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      size_t v38 = v50;
      size_t v42 = (char *)v41 + v40;
      *unint64_t v41 = v20[3];
      unsigned int v21 = (char *)(v41 + 1);
      void v20[2] = v42;
      void v20[3] = v41;
    }
    v20[1] = &v21[v38];
    if (v18) {
      memcpy(v21, *v9, v18);
    }
    *(void *)(v7 + 12728) = v21;
    LODWORD(v18) = *(_DWORD *)(v7 + 12740);
    unint64_t v19 = v21;
    unsigned int v17 = *(_DWORD *)(v7 + 12736);
    int v43 = v51;
    goto LABEL_72;
  }
LABEL_21:
  size_t v16 = 0;
LABEL_22:
  if (*(_DWORD *)a4) {
    return this;
  }
  unsigned int v14 = 0;
  if (!v16)
  {
    int v4 = 0;
    int v13 = 0;
    goto LABEL_49;
  }
  unsigned int v23 = a3 + 2;
  while (1)
  {
    unint64_t v24 = *((unsigned __int8 *)v16 + 18);
    switch(v24)
    {
      case 1:
        unint64_t v25 = *((unsigned __int8 *)v16 + 18);
        break;
      case 5:
        unint64_t v25 = *((unsigned int *)v16 + 2);
        break;
      case 2:
        unint64_t v25 = 2;
        break;
      default:
        goto LABEL_54;
    }
    unint64_t v26 = v14;
    if (v25 <= v14) {
      break;
    }
    unsigned int v27 = v24 - 1;
    if (v24 == 1) {
      goto LABEL_36;
    }
    if (v24 != 5)
    {
      unint64_t v24 = 2;
LABEL_36:
      if (v24 <= v26) {
        goto LABEL_41;
      }
      goto LABEL_37;
    }
    if (*((unsigned int *)v16 + 2) <= v26)
    {
LABEL_41:
      int v4 = 0;
      goto LABEL_42;
    }
LABEL_37:
    uint64_t v28 = v16;
    if (v27 >= 2) {
      uint64_t v28 = *(swift::Demangle::__runtime::Node **)v16;
    }
    int v4 = (swift::Demangle::__runtime::Node *)*((void *)v28 + v26);
LABEL_42:
    if (*((_WORD *)v16 + 8) != 232)
    {
      int v13 = 2734;
      goto LABEL_58;
    }
    int v29 = *((unsigned __int8 *)v4 + 18);
    if (v29 != 1)
    {
      if (v29 != 5 || *((_DWORD *)v4 + 2) != 1)
      {
        int v13 = 114;
        unsigned int v14 = 10;
        goto LABEL_49;
      }
      int v4 = *(swift::Demangle::__runtime::Node **)v4;
    }
    unsigned int v14 = v26 + 1;
    if (*(_DWORD *)a4) {
      return this;
    }
  }
LABEL_54:
  unsigned int v30 = *(_DWORD *)(v7 + 12736);
  size_t v31 = *(unsigned int *)(v7 + 12740);
  unint64_t v32 = *(char **)(v7 + 12728);
  if (v30 >= v31)
  {
    size_t v33 = *(void **)(v7 + 12744);
    int v34 = (char *)v33[1];
    if (&v32[v31] != v34)
    {
      unint64_t v35 = v33[2];
      goto LABEL_76;
    }
    unint64_t v44 = (unint64_t)&v32[v31 + 1];
    unint64_t v35 = v33[2];
    if (v44 <= v35)
    {
      v33[1] = v44;
      LODWORD(v45) = 1;
    }
    else
    {
LABEL_76:
      if ((2 * v31) <= 4) {
        uint64_t v45 = 4;
      }
      else {
        uint64_t v45 = (2 * v31);
      }
      size_t v46 = v45 + v31;
      if (!v34 || (unint64_t)&v34[v46] > v35)
      {
        unint64_t v47 = 2 * v33[4];
        if (v47 <= v46 + 1) {
          unint64_t v47 = v46 + 1;
        }
        _WORD v33[4] = v47;
        unint64_t v48 = v47 + 8;
        this = (char *)malloc_type_malloc(v47 + 8, 0xD0263BC5uLL);
        char v49 = &this[v48];
        *(void *)this = v33[3];
        int v34 = this + 8;
        void v33[2] = v49;
        void v33[3] = this;
      }
      v33[1] = &v34[v46];
      if (v31) {
        this = (char *)memcpy(v34, *v9, v31);
      }
      *(void *)(v7 + 12728) = v34;
      LODWORD(v31) = *(_DWORD *)(v7 + 12740);
      unint64_t v32 = v34;
      unsigned int v30 = *(_DWORD *)(v7 + 12736);
    }
    *(_DWORD *)(v7 + 12740) = v31 + v45;
  }
  unsigned int v14 = 0;
  int v4 = 0;
  int v13 = 0;
  *(_DWORD *)(v7 + 12736) = v30 + 1;
  v32[v30] = 95;
LABEL_49:
  *(_DWORD *)a4 = v14;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

void *anonymous namespace'::Remangler::mangleSILBoxLayout@<X0>(void *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  if (*((_WORD *)a2 + 8) != 212)
  {
    int v15 = 2744;
    int v16 = 1;
    goto LABEL_42;
  }
  uint64_t v6 = (uint64_t)this;
  unsigned int v7 = 0;
  unsigned int v8 = a3 + 1;
  while (1)
  {
    unint64_t v10 = *((unsigned __int8 *)v4 + 18);
    switch(v10)
    {
      case 1:
        unint64_t v11 = *((unsigned __int8 *)v4 + 18);
        break;
      case 5:
        unint64_t v11 = *((unsigned int *)v4 + 2);
        break;
      case 2:
        unint64_t v11 = 2;
        break;
      default:
        goto LABEL_23;
    }
    unint64_t v12 = v7;
    if (v11 <= v7) {
      break;
    }
    if (*((unsigned __int16 *)v4 + 8) - 213 > 1)
    {
      int v15 = 2748;
      int v16 = 1;
      goto LABEL_42;
    }
    unsigned int v13 = v10 - 1;
    if (v10 == 1) {
      goto LABEL_16;
    }
    if (v10 != 5)
    {
      unint64_t v10 = 2;
LABEL_16:
      if (v10 > v12) {
        goto LABEL_19;
      }
      goto LABEL_3;
    }
    if (*((unsigned int *)v4 + 2) > v12)
    {
LABEL_19:
      unsigned int v14 = v4;
      if (v13 >= 2) {
        unsigned int v14 = *(swift::Demangle::__runtime::Node **)v4;
      }
      size_t v9 = (swift::Demangle::__runtime::Node *)*((void *)v14 + v12);
      goto LABEL_4;
    }
LABEL_3:
    size_t v9 = 0;
LABEL_4:
    unsigned int v7 = v12 + 1;
    if (*(_DWORD *)a4) {
      return this;
    }
  }
LABEL_23:
  unsigned int v17 = *(_DWORD *)(v6 + 12736);
  size_t v18 = *(unsigned int *)(v6 + 12740);
  unint64_t v19 = *(char **)(v6 + 12728);
  if (v17 >= v18)
  {
    BOOL v20 = *(void **)(v6 + 12744);
    unsigned int v21 = (char *)v20[1];
    if (&v19[v18] != v21)
    {
      unint64_t v22 = v20[2];
      goto LABEL_28;
    }
    unint64_t v23 = (unint64_t)&v19[v18 + 1];
    unint64_t v22 = v20[2];
    if (v23 <= v22)
    {
      v20[1] = v23;
      LODWORD(v24) = 1;
    }
    else
    {
LABEL_28:
      if ((2 * v18) <= 4) {
        uint64_t v24 = 4;
      }
      else {
        uint64_t v24 = (2 * v18);
      }
      size_t v25 = v24 + v18;
      if (!v21 || (unint64_t)&v21[v25] > v22)
      {
        unint64_t v26 = 2 * v20[4];
        if (v26 <= v25 + 1) {
          unint64_t v26 = v25 + 1;
        }
        v20[4] = v26;
        unint64_t v27 = v26 + 8;
        this = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
        uint64_t v28 = (char *)this + v27;
        *this = v20[3];
        unsigned int v21 = (char *)(this + 1);
        void v20[2] = v28;
        void v20[3] = this;
      }
      v20[1] = &v21[v25];
      if (v18) {
        this = memcpy(v21, *(const void **)(v6 + 12728), v18);
      }
      *(void *)(v6 + 12728) = v21;
      LODWORD(v18) = *(_DWORD *)(v6 + 12740);
      unint64_t v19 = v21;
      unsigned int v17 = *(_DWORD *)(v6 + 12736);
    }
    *(_DWORD *)(v6 + 12740) = v18 + v24;
  }
  int v16 = 0;
  int v4 = 0;
  int v15 = 0;
  *(_DWORD *)(v6 + 12736) = v17 + 1;
  v19[v17] = 95;
LABEL_42:
  *(_DWORD *)a4 = v16;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v15;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleSILBoxMutableField@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unint64_t v11 = (void *)*((void *)this + 1593);
    unint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_19:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unint64_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_19;
  }
LABEL_20:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 109;
  int v21 = *((unsigned __int8 *)a2 + 18);
  unint64_t v22 = a2;
  if (v21 != 1)
  {
    if (v21 != 5 || *((_DWORD *)a2 + 2) != 1) {
      goto LABEL_30;
    }
    unint64_t v22 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v22 + 16) != 232)
  {
LABEL_30:
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v24 = 2760;
    goto LABEL_31;
  }
  if ((v21 - 1) < 2)
  {
LABEL_29:
    unint64_t v23 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_34;
  }
  if (v21 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_29;
  }
  unint64_t v23 = 0;
LABEL_34:
  int v25 = *((unsigned __int8 *)v23 + 18);
  if (v25 != 1)
  {
    if (v25 == 5 && *((_DWORD *)v23 + 2) == 1)
    {
      unint64_t v23 = *(swift::Demangle::__runtime::Node **)v23;
      goto LABEL_38;
    }
    *(_DWORD *)a4 = 10;
    *(void *)(a4 + 8) = v23;
    int v24 = 114;
LABEL_31:
    *(_DWORD *)(a4 + 16) = v24;
    return this;
  }
LABEL_38:
  unint64_t v26 = *(swift::Demangle::__runtime::Node **)v23;
}

unsigned int *anonymous namespace'::Remangler::mangleSILBoxImmutableField@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unint64_t v11 = (void *)*((void *)this + 1593);
    unint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_19:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unint64_t v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_19;
  }
LABEL_20:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 105;
  int v21 = *((unsigned __int8 *)a2 + 18);
  unint64_t v22 = a2;
  if (v21 != 1)
  {
    if (v21 != 5 || *((_DWORD *)a2 + 2) != 1) {
      goto LABEL_30;
    }
    unint64_t v22 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(void *)v22 + 16) != 232)
  {
LABEL_30:
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v24 = 2769;
    goto LABEL_31;
  }
  if ((v21 - 1) < 2)
  {
LABEL_29:
    unint64_t v23 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_34;
  }
  if (v21 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_29;
  }
  unint64_t v23 = 0;
LABEL_34:
  int v25 = *((unsigned __int8 *)v23 + 18);
  if (v25 != 1)
  {
    if (v25 == 5 && *((_DWORD *)v23 + 2) == 1)
    {
      unint64_t v23 = *(swift::Demangle::__runtime::Node **)v23;
      goto LABEL_38;
    }
    *(_DWORD *)a4 = 10;
    *(void *)(a4 + 8) = v23;
    int v24 = 114;
LABEL_31:
    *(_DWORD *)(a4 + 16) = v24;
    return this;
  }
LABEL_38:
  unint64_t v26 = *(swift::Demangle::__runtime::Node **)v23;
}

void anonymous namespace'::Remangler::mangleSetter(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleStatic(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v23[0] = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::string __p = 0;
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  unint64_t v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unint64_t v11 = (void *)*((void *)this + 1593);
    unint64_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unint64_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      BOOL v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      *BOOL v20 = v11[3];
      unint64_t v10 = (char *)(v20 + 1);
      void v11[2] = (char *)v20 + v19;
      void v11[3] = v20;
    }
    v11[1] = &v10[v16];
    if (v9) {
      memcpy(v10, *((const void **)this + 1591), v9);
    }
    *((void *)this + 1591) = v10;
    LODWORD(v9) = *((_DWORD *)this + 3185);
    unsigned int v8 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v8 + 1;
  v10[v8] = 90;
  int v21 = *((unsigned __int8 *)a2 + 18);
  if ((v21 - 1) < 2)
  {
LABEL_25:
    unint64_t v22 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_27;
  }
  if (v21 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_25;
  }
  unint64_t v22 = 0;
LABEL_27:
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleSubscript(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleThinFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Xf", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  unint64_t v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      unint64_t v11 = *a2;
      unint64_t v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    unint64_t v10 = 0;
  }
  switch(v9)
  {
    case 1:
      unint64_t v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      unint64_t v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      unint64_t v11 = *a2;
LABEL_9:
      unint64_t v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  unint64_t v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

_DWORD *anonymous namespace'::Remangler::mangleTuple@<X0>(_DWORD *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  int v8 = *((unsigned __int8 *)a2 + 18);
  switch(v8)
  {
    case 1:
      uint64_t v9 = 0;
      unint64_t v10 = a2;
      break;
    case 5:
      uint64_t v11 = *((unsigned int *)a2 + 2);
      if (!v11) {
        goto LABEL_13;
      }
      uint64_t v9 = v11 - 1;
      unint64_t v10 = *(swift::Demangle::__runtime::Node **)a2;
      break;
    case 2:
      uint64_t v9 = 1;
      unint64_t v10 = a2;
      break;
    default:
      goto LABEL_13;
  }
  unint64_t v12 = (unsigned __int8 *)*((void *)v10 + v9);
  if (v12[18] - 1 >= 2) {
    unint64_t v12 = *(unsigned __int8 **)v12;
  }
  if (*(_WORD *)(*(void *)v12 + 16) != 276)
  {
LABEL_13:
    unsigned int v13 = this + 3184;
    unsigned int v14 = this[3184];
    size_t v18 = this[3185];
    size_t v16 = (char *)*((void *)this + 1591);
    if (v14 < v18)
    {
LABEL_31:
      char v17 = 84;
      goto LABEL_32;
    }
    unint64_t v19 = (void *)*((void *)this + 1593);
    BOOL v20 = (char *)v19[1];
    if (&v16[v18] == v20)
    {
      unint64_t v25 = (unint64_t)&v16[v18 + 1];
      unint64_t v21 = v19[2];
      if (v25 <= v21)
      {
        v19[1] = v25;
        LODWORD(v26) = 1;
LABEL_30:
        *(_DWORD *)(v6 + 12740) = v18 + v26;
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v21 = v19[2];
    }
    if ((2 * v18) <= 4) {
      uint64_t v26 = 4;
    }
    else {
      uint64_t v26 = (2 * v18);
    }
    size_t v27 = v26 + v18;
    if (!v20 || (unint64_t)&v20[v27] > v21)
    {
      unint64_t v28 = 2 * v19[4];
      if (v28 <= v27 + 1) {
        unint64_t v28 = v27 + 1;
      }
      v19[4] = v28;
      unint64_t v29 = v28 + 8;
      this = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      unsigned int v30 = (char *)this + v29;
      *(void *)this = v19[3];
      BOOL v20 = (char *)(this + 2);
      void v19[2] = v30;
      uint64_t v19[3] = this;
    }
    v19[1] = &v20[v27];
    if (v18) {
      this = memcpy(v20, *(const void **)(v6 + 12728), v18);
    }
    *(void *)(v6 + 12728) = v20;
    LODWORD(v18) = *(_DWORD *)(v6 + 12740);
    size_t v16 = v20;
    unsigned int v14 = *(_DWORD *)(v6 + 12736);
    goto LABEL_30;
  }
  unsigned int v13 = this + 3184;
  unsigned int v14 = this[3184];
  size_t v15 = this[3185];
  size_t v16 = (char *)*((void *)this + 1591);
  if (v14 < v15)
  {
    char v17 = 116;
    goto LABEL_32;
  }
  unint64_t v22 = (void *)*((void *)this + 1593);
  unint64_t v23 = (char *)v22[1];
  if (&v16[v15] != v23)
  {
    unint64_t v24 = v22[2];
LABEL_74:
    if ((2 * v15) <= 4) {
      uint64_t v50 = 4;
    }
    else {
      uint64_t v50 = (2 * v15);
    }
    size_t v51 = v50 + v15;
    if (!v23 || (unint64_t)&v23[v51] > v24)
    {
      unint64_t v52 = 2 * v22[4];
      if (v52 <= v51 + 1) {
        unint64_t v52 = v51 + 1;
      }
      v22[4] = v52;
      unint64_t v53 = v52 + 8;
      this = malloc_type_malloc(v52 + 8, 0xD0263BC5uLL);
      size_t v54 = (char *)this + v53;
      *(void *)this = v22[3];
      unint64_t v23 = (char *)(this + 2);
      void v22[2] = v54;
      void v22[3] = this;
    }
    v22[1] = &v23[v51];
    if (v15) {
      this = memcpy(v23, *(const void **)(v6 + 12728), v15);
    }
    *(void *)(v6 + 12728) = v23;
    LODWORD(v15) = *(_DWORD *)(v6 + 12740);
    size_t v16 = v23;
    unsigned int v14 = *(_DWORD *)(v6 + 12736);
    goto LABEL_85;
  }
  unint64_t v49 = (unint64_t)&v16[v15 + 1];
  unint64_t v24 = v22[2];
  if (v49 > v24) {
    goto LABEL_74;
  }
  v22[1] = v49;
  LODWORD(v50) = 1;
LABEL_85:
  *(_DWORD *)(v6 + 12740) = v15 + v50;
  char v17 = 116;
LABEL_32:
  *unsigned int v13 = v14 + 1;
  v16[v14] = v17;
  int v31 = *((unsigned __int8 *)a2 + 18);
  unint64_t v32 = (swift::Demangle::__runtime::Node **)a2;
  if ((v31 - 1) >= 2)
  {
    if (v31 == 5)
    {
      uint64_t v33 = *(void *)a2;
      unint64_t v32 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_40;
    }
    unint64_t v32 = 0;
  }
  if (v31 == 1)
  {
    int v34 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    if (v32 != v34) {
      goto LABEL_47;
    }
    goto LABEL_50;
  }
  if (v31 == 2)
  {
    int v34 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
    if (v32 != v34) {
      goto LABEL_47;
    }
LABEL_50:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    unsigned int v36 = *(_DWORD *)(v6 + 12736);
    size_t v37 = *(unsigned int *)(v6 + 12740);
    size_t v38 = *(unsigned char **)(v6 + 12728);
    if (v36 < v37)
    {
LABEL_69:
      *(_DWORD *)(v6 + 12736) = v36 + 1;
      v38[v36] = 95;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    unint64_t v39 = *(void **)(v6 + 12744);
    unint64_t v40 = (unsigned char *)v39[1];
    if (&v38[v37] == v40)
    {
      unint64_t v42 = (unint64_t)&v38[v37 + 1];
      unint64_t v41 = v39[2];
      if (v42 <= v41)
      {
        v39[1] = v42;
        LODWORD(v43) = 1;
LABEL_68:
        *(_DWORD *)(v6 + 12740) = v37 + v43;
        goto LABEL_69;
      }
    }
    else
    {
      unint64_t v41 = v39[2];
    }
    if ((2 * v37) <= 4) {
      uint64_t v43 = 4;
    }
    else {
      uint64_t v43 = (2 * v37);
    }
    size_t v44 = v43 + v37;
    if (v40) {
      BOOL v45 = (unint64_t)&v40[v43 + v37] > v41;
    }
    else {
      BOOL v45 = 1;
    }
    size_t v38 = (unsigned char *)v39[1];
    if (v45)
    {
      unint64_t v46 = 2 * v39[4];
      if (v46 <= v44 + 1) {
        unint64_t v46 = v44 + 1;
      }
      v39[4] = v46;
      unint64_t v47 = v46 + 8;
      this = malloc_type_malloc(v46 + 8, 0xD0263BC5uLL);
      unint64_t v48 = (char *)this + v47;
      *(void *)this = v39[3];
      size_t v38 = this + 2;
      v39[2] = v48;
      void v39[3] = this;
    }
    v39[1] = &v38[v44];
    if (v37) {
      this = memcpy(v38, *(const void **)(v6 + 12728), v37);
    }
    *(void *)(v6 + 12728) = v38;
    LODWORD(v37) = *(_DWORD *)(v6 + 12740);
    unsigned int v36 = *(_DWORD *)(v6 + 12736);
    goto LABEL_68;
  }
  if (v31 != 5)
  {
    int v34 = 0;
    if (!v32) {
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  uint64_t v33 = *(void *)a2;
LABEL_40:
  int v34 = (swift::Demangle::__runtime::Node **)(v33 + 8 * *((unsigned int *)a2 + 2));
  if (v32 == v34) {
    goto LABEL_50;
  }
LABEL_47:
  unsigned int v35 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v32 == v34) {
      goto LABEL_50;
    }
  }
}

void *anonymous namespace'::Remangler::mangleTypeList@<X0>(void *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = (uint64_t)this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  uint64_t v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
  }
  if (v6 == 1)
  {
    uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v7 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v6 == 2)
  {
    uint64_t v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    if (v7 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16)) {
      goto LABEL_16;
    }
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    size_t v12 = *(unsigned int *)(v4 + 12740);
    unsigned int v13 = *(unsigned char **)(v4 + 12728);
    if (v11 < v12)
    {
LABEL_39:
      *(_DWORD *)(v4 + 12736) = v11 + 1;
      v13[v11] = 95;
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    unsigned int v14 = *(void **)(v4 + 12744);
    size_t v15 = (unsigned char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v17 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_38:
        *(_DWORD *)(v4 + 12740) = v12 + v18;
        goto LABEL_39;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v12);
    }
    size_t v19 = v18 + v12;
    if (v15) {
      BOOL v20 = (unint64_t)&v15[v18 + v12] > v16;
    }
    else {
      BOOL v20 = 1;
    }
    unsigned int v13 = (unsigned char *)v14[1];
    if (v20)
    {
      unint64_t v21 = 2 * v14[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      v14[4] = v21;
      unint64_t v22 = v21 + 8;
      this = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      unint64_t v23 = (char *)this + v22;
      *this = v14[3];
      unsigned int v13 = this + 1;
      void v14[2] = v23;
      void v14[3] = this;
    }
    v14[1] = &v13[v19];
    if (v12) {
      this = memcpy(v13, *(const void **)(v4 + 12728), v12);
    }
    *(void *)(v4 + 12728) = v13;
    LODWORD(v12) = *(_DWORD *)(v4 + 12740);
    unsigned int v11 = *(_DWORD *)(v4 + 12736);
    goto LABEL_38;
  }
  if (v6 != 5)
  {
    uint64_t v9 = 0;
    if (!v7) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)a2;
LABEL_9:
  uint64_t v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
  if (v7 == v9) {
    goto LABEL_19;
  }
LABEL_16:
  unsigned int v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    uint64_t v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9) {
      goto LABEL_19;
    }
  }
}

unsigned int *anonymous namespace'::Remangler::mangleTypeMangling@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unsigned int v11 = (void *)*((void *)this + 1593);
    size_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unsigned int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 116;
  int v21 = *((unsigned __int8 *)a2 + 18);
  if (v21 != 1)
  {
    if (v21 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return this;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unint64_t v22 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleTypeMetadata@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "M", 1uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataAccessFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Ma", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataCompletionFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mr", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationCache@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "MI", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataInstantiationFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mi", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataSingletonInitializationCache@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Ml", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleTypeMetadataLazyCache@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "ML", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleUncurriedFunctionType@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    unsigned int v11 = (void *)*((void *)this + 1593);
    size_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      BOOL v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unsigned int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 102;
  int v21 = *((unsigned __int8 *)a2 + 18);
  unint64_t v22 = a2;
  if ((v21 - 1) >= 2)
  {
    if (v21 == 5)
    {
      unint64_t v23 = *a2;
      unint64_t v22 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_29;
    }
    unint64_t v22 = 0;
  }
  switch(v21)
  {
    case 1:
      unint64_t v24 = a2 + 1;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 2:
      unint64_t v24 = a2 + 2;
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
    case 5:
      unint64_t v23 = *a2;
LABEL_29:
      unint64_t v24 = (swift::Demangle::__runtime::Node **)((char *)v23 + 8 * *((unsigned int *)a2 + 2));
      if (v22 == v24) {
        goto LABEL_39;
      }
      goto LABEL_36;
  }
  unint64_t v24 = 0;
  if (!v22)
  {
LABEL_39:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_36:
  unsigned int v25 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v22 == v24) {
      goto LABEL_39;
    }
  }
}

void *anonymous namespace'::Remangler::mangleWeak@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Xw", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleUnowned@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Xo", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleUnmanaged@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Xu", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void anonymous namespace'::Remangler::mangleUnsafeAddressor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void anonymous namespace'::Remangler::mangleUnsafeMutableAddressor(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

unsigned int *anonymous namespace'::Remangler::mangleValueWitness@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  size_t v5 = a2;
  uint64_t v6 = (uint64_t)this;
  uint64_t v8 = a2;
  if (*((unsigned __int8 *)a2 + 18) - 1 >= 2) {
    uint64_t v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unint64_t v9 = **(void **)v8;
  if (v9 >= 0x18)
  {
    *(_DWORD *)a4 = 22;
    *(void *)(a4 + 8) = a2;
    int v17 = 811;
    goto LABEL_29;
  }
  unsigned int v10 = off_1E4FC8628[v9];
  unsigned int v11 = this[3184];
  size_t v12 = this[3185];
  unint64_t v13 = (char *)*((void *)this + 1591);
  if (v11 >= v12)
  {
    unint64_t v14 = (void *)*((void *)this + 1593);
    uint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v18 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v18 <= v16)
      {
        v14[1] = v18;
        LODWORD(v19) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v12 + v19;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = (2 * v12);
    }
    size_t v20 = v19 + v12;
    if (!v15 || (unint64_t)&v15[v20] > v16)
    {
      unint64_t v21 = 2 * v14[4];
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      v14[4] = v21;
      unint64_t v22 = v21 + 8;
      unint64_t v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      unint64_t v24 = (char *)v23 + v22;
      *unint64_t v23 = v14[3];
      uint64_t v15 = (char *)(v23 + 1);
      void v14[2] = v24;
      void v14[3] = v23;
    }
    v14[1] = &v15[v20];
    if (v12) {
      memcpy(v15, *(const void **)(v6 + 12728), v12);
    }
    *(void *)(v6 + 12728) = v15;
    LODWORD(v12) = *(_DWORD *)(v6 + 12740);
    unint64_t v13 = v15;
    unsigned int v11 = *(_DWORD *)(v6 + 12736);
    int v4 = a3;
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v11 + 1;
  v13[v11] = 119;
  this = (unsigned int *)swift::Demangle::__runtime::CharVector::append((char **)(v6 + 12728), v10, 2uLL, *(void **)(v6 + 12744));
  int v25 = *((unsigned __int8 *)v5 + 18);
  if (v25 != 2)
  {
    if (v25 == 5 && *((_DWORD *)v5 + 2) > 1u)
    {
      size_t v5 = *(swift::Demangle::__runtime::Node **)v5;
      goto LABEL_25;
    }
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v5;
    int v17 = 119;
LABEL_29:
    *(_DWORD *)(a4 + 16) = v17;
    return this;
  }
LABEL_25:
  uint64_t v26 = (swift::Demangle::__runtime::Node *)*((void *)v5 + 1);
}

void *anonymous namespace'::Remangler::mangleValueWitnessTable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WV", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void anonymous namespace'::Remangler::mangleVariable(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleVTableThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TV", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  unsigned int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      unsigned int v11 = *a2;
      unsigned int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    unsigned int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      size_t v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      size_t v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      unsigned int v11 = *a2;
LABEL_9:
      size_t v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  size_t v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void anonymous namespace'::Remangler::mangleWillSet(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) < 2) {
    goto LABEL_5;
  }
  size_t v5 = 0;
  if (v4 != 5) {
    goto LABEL_6;
  }
  if (*((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    size_t v5 = *a2;
    goto LABEL_6;
  }
  size_t v5 = 0;
LABEL_6:
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void *anonymous namespace'::Remangler::mangleOutlinedBridgedMethod@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = this + 1591;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Te", 2uLL, this[1593]);
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v8, *(const void **)a2, *((void *)a2 + 1), this[1593]);
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 != 1)
  {
    if (v10 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v11 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wy", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      unsigned int v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      size_t v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      size_t v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      unsigned int v11 = *a2;
LABEL_9:
      size_t v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  size_t v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleOutlinedConsume@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "We", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  int v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      unsigned int v11 = *a2;
      int v10 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_9;
    }
    int v10 = 0;
  }
  switch(v9)
  {
    case 1:
      size_t v12 = a2 + 1;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 2:
      size_t v12 = a2 + 2;
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 5:
      unsigned int v11 = *a2;
LABEL_9:
      size_t v12 = (swift::Demangle::__runtime::Node **)((char *)v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12) {
        goto LABEL_19;
      }
      goto LABEL_16;
  }
  size_t v12 = 0;
  if (!v10)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  unsigned int v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4) {
      return result;
    }
    if (++v10 == v12) {
      goto LABEL_19;
    }
  }
}

void *anonymous namespace'::Remangler::mangleOutlinedRetain@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wr", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedRelease@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Ws", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedInitializeWithTake@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wb", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wc", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedAssignWithTake@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wd", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedAssignWithCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wf", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedDestroy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wh", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleOutlinedVariable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (unsigned int *)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Tv", 2uLL, *((void **)this + 1593));
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v8, *(void *)a2, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 != 1)
  {
    if (v10 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v11 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedReadOnlyObject@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (unsigned int *)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Tv", 2uLL, *((void **)this + 1593));
  uint64_t result = swift::Demangle::__runtime::CharVector::append(v8, *(void *)a2, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  unsigned int v10 = *((_DWORD *)this + 3184);
  size_t v11 = *((unsigned int *)this + 3185);
  size_t v12 = (char *)*((void *)this + 1591);
  if (v10 >= v11)
  {
    unsigned int v13 = (void *)*((void *)this + 1593);
    unint64_t v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      unint64_t v16 = (unint64_t)&v12[v11 + 1];
      unint64_t v15 = v13[2];
      if (v16 <= v15)
      {
        v13[1] = v16;
        LODWORD(v17) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v11 + v17;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v15 = v13[2];
    }
    if ((2 * v11) <= 4) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = (2 * v11);
    }
    size_t v18 = v17 + v11;
    if (v14) {
      BOOL v19 = (unint64_t)&v14[v17 + v11] > v15;
    }
    else {
      BOOL v19 = 1;
    }
    size_t v12 = (char *)v13[1];
    if (v19)
    {
      unint64_t v20 = 2 * v13[4];
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      v13[4] = v20;
      unint64_t v21 = v20 + 8;
      uint64_t result = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      unint64_t v22 = (char *)result + v21;
      void *result = v13[3];
      size_t v12 = (char *)(result + 1);
      void v13[2] = v22;
      _OWORD v13[3] = result;
    }
    v13[1] = &v12[v18];
    if (v11) {
      uint64_t result = memcpy(v12, *(const void **)v8, v11);
    }
    *((void *)this + 1591) = v12;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    unsigned int v10 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v10 + 1;
  v12[v10] = 114;
  int v23 = *((unsigned __int8 *)a2 + 18);
  if (v23 != 1)
  {
    if (v23 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unint64_t v24 = *(swift::Demangle::__runtime::Node **)a2;
}

unsigned int *anonymous namespace'::Remangler::mangleLabelList@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v5 = (uint64_t)this;
  uint64_t v7 = *((unsigned __int8 *)a2 + 18);
  switch(v7)
  {
    case 1:
LABEL_10:
      unint64_t v14 = &v4[v7];
      unsigned int v15 = a3 + 1;
      while (1)
      {
        if (*(_DWORD *)a4) {
          return this;
        }
        if (++v4 == v14) {
          goto LABEL_29;
        }
      }
    case 2:
      uint64_t v7 = 2;
      goto LABEL_10;
    case 5:
      uint64_t v7 = *((unsigned int *)a2 + 2);
      if (v7)
      {
        int v4 = (swift::Demangle::__runtime::Node **)*a2;
        goto LABEL_10;
      }
      break;
  }
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    size_t v11 = (void *)*((void *)this + 1593);
    size_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v16 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v16 <= v13)
      {
        v11[1] = v16;
        LODWORD(v17) = 1;
LABEL_27:
        *(_DWORD *)(v5 + 12740) = v9 + v17;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v17 = 4;
    }
    else {
      uint64_t v17 = (2 * v9);
    }
    size_t v18 = v17 + v9;
    if (!v12 || (unint64_t)&v12[v18] > v13)
    {
      unint64_t v19 = 2 * v11[4];
      if (v19 <= v18 + 1) {
        unint64_t v19 = v18 + 1;
      }
      _OWORD v11[4] = v19;
      unint64_t v20 = v19 + 8;
      this = (unsigned int *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)this + v20;
      *(void *)this = v11[3];
      size_t v12 = (char *)(this + 2);
      void v11[2] = v21;
      void v11[3] = this;
    }
    v11[1] = &v12[v18];
    if (v9) {
      this = (unsigned int *)memcpy(v12, *(const void **)(v5 + 12728), v9);
    }
    *(void *)(v5 + 12728) = v12;
    LODWORD(v9) = *(_DWORD *)(v5 + 12740);
    unsigned int v10 = v12;
    unsigned int v8 = *(_DWORD *)(v5 + 12736);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 12736) = v8 + 1;
  v10[v8] = 121;
LABEL_29:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericMetaclass@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = this;
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      int v8 = 114;
      int v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4) {
    return this;
  }
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MM", 2uLL, *((void **)v4 + 1593));
  int v7 = 0;
  a2 = 0;
  int v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

unsigned int *anonymous namespace'::Remangler::mangleNoDerivative@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t)this;
  unsigned int v8 = this[3184];
  size_t v9 = this[3185];
  unsigned int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    size_t v11 = (void *)*((void *)this + 1593);
    size_t v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(v6 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    unsigned int v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      unint64_t v20 = (char *)this + v19;
      *(void *)this = v11[3];
      unsigned int v10 = (char *)(this + 2);
      void v11[2] = v20;
      void v11[3] = this;
    }
    v11[1] = &v10[v16];
    if (v9) {
      this = (unsigned int *)memcpy(v10, *(const void **)(v6 + 12728), v9);
    }
    *(void *)(v6 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(v6 + 12740);
    unsigned int v8 = *(_DWORD *)(v6 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(v6 + 12736) = v8 + 1;
  v10[v8] = 107;
  int v21 = *((unsigned __int8 *)a2 + 18);
  if (v21 != 1)
  {
    if (v21 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return this;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unint64_t v22 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleCompileTimeConst@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Yt", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedEnumTagStore@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wi", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedEnumProjectDataForLoad@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wj", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void *anonymous namespace'::Remangler::mangleOutlinedEnumGetTag@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wg", 2uLL, this[1593]);
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 != 1)
  {
    if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(void *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 114;
      return result;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  unsigned int v10 = *(swift::Demangle::__runtime::Node **)a2;
}

void anonymous namespace'::Remangler::mangleTypedEntity(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, char *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  size_t v9 = a4;
  unsigned int v10 = a3;
  uint64_t v11 = a2;
  int v14 = *(unsigned __int8 *)(a2 + 18);
  if (v14 != 2 && (v14 != 5 || (*(_DWORD *)(a2 + 8) & 0xFFFFFFFE) != 2))
  {
    int v22 = 1377;
    int v23 = 1;
LABEL_8:
    *(_DWORD *)a7 = v23;
    *(void *)(a7 + 8) = v11;
    *(_DWORD *)(a7 + 16) = v22;
    return;
  }
  uint64_t v15 = (char **)(a1 + 12728);
  unsigned int v16 = *(_DWORD *)(a1 + 12736);
  size_t v17 = *(unsigned int *)(a1 + 12740);
  unint64_t v18 = *(char **)(a1 + 12728);
  if (v16 >= v17)
  {
    size_t v37 = (const void **)(a1 + 12728);
    unint64_t v19 = *(void **)(a1 + 12744);
    unint64_t v20 = (char *)v19[1];
    if (&v18[v17] == v20)
    {
      unint64_t v24 = (unint64_t)&v18[v17 + 1];
      unint64_t v21 = v19[2];
      if (v24 <= v21)
      {
        v19[1] = v24;
        LODWORD(v25) = 1;
LABEL_25:
        *(_DWORD *)(a1 + 12740) = v17 + v25;
        unsigned int v10 = a3;
        uint64_t v15 = (char **)v37;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v21 = v19[2];
    }
    if ((2 * v17) <= 4) {
      uint64_t v25 = 4;
    }
    else {
      uint64_t v25 = (2 * v17);
    }
    size_t v26 = v25 + v17;
    if (v20) {
      BOOL v27 = (unint64_t)&v20[v25 + v17] > v21;
    }
    else {
      BOOL v27 = 1;
    }
    unint64_t v18 = (char *)v19[1];
    if (v27)
    {
      unint64_t v28 = 2 * v19[4];
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      v19[4] = v28;
      unint64_t v29 = v28 + 8;
      unsigned int v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      int v31 = (char *)v30 + v29;
      *unsigned int v30 = v19[3];
      unint64_t v18 = (char *)(v30 + 1);
      void v19[2] = v31;
      uint64_t v19[3] = v30;
    }
    v19[1] = &v18[v26];
    if (v17) {
      memcpy(v18, *v37, v17);
    }
    *(void *)(a1 + 12728) = v18;
    LODWORD(v17) = *(_DWORD *)(a1 + 12740);
    unsigned int v16 = *(_DWORD *)(a1 + 12736);
    size_t v9 = a4;
    goto LABEL_25;
  }
LABEL_26:
  *(_DWORD *)(a1 + 12736) = v16 + 1;
  v18[v16] = 70;
  unint64_t v32 = (uint64_t *)v11;
  if (*(unsigned __int8 *)(v11 + 18) - 1 >= 2) {
    unint64_t v32 = *(uint64_t **)v11;
  }
  unsigned int v33 = a6 + 1;
  if (!*(_DWORD *)a7)
  {
    swift::Demangle::__runtime::CharVector::append(v15, v10, v9, *(void **)(a1 + 12744));
    if (*(unsigned __int8 *)(v11 + 18) - 1 > 1) {
      uint64_t v11 = *(void *)v11;
    }
    int v34 = *(_WORD *)(*(void *)(v11 + 8) + 16) == 290
        ? (swift::Demangle::__runtime::Node **)applyParamLabels(*(swift::Demangle::__runtime::Node **)(v11 + 8), *(swift::Demangle::__runtime::Node **)(v11 + 16), *(swift::Demangle::__runtime::NodeFactory **)a1): *(swift::Demangle::__runtime::Node ***)(v11 + 8);
    int v22 = *(_DWORD *)a7;
    if (!*(_DWORD *)a7)
    {
      int v23 = 0;
      uint64_t v11 = 0;
      goto LABEL_8;
    }
  }
}

void anonymous namespace'::Remangler::mangleEntityContext(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v7 = *a3;
  *a3 = 1;
  unsigned int v8 = *(unsigned __int16 *)(a2 + 16);
  if (v8 > 0x12 || ((1 << v8) & 0x6E000) == 0)
  {
    switch(*(_WORD *)(a2 + 16))
    {
      case 0:
      case 0x1D:
        break;
      case 1:
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1E:
      case 0x20:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3E:
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x54:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x63:
      case 0x65:
      case 0x66:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBE:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCD:
      case 0xCE:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD8:
      case 0xD9:
      case 0xDD:
      case 0xDE:
      case 0xDF:
      case 0xE0:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xE8:
      case 0xEB:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFC:
      case 0xFD:
      case 0xFF:
      case 0x100:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13E:
      case 0x13F:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x145:
      case 0x146:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x157:
      case 0x158:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
        *(_DWORD *)a5 = 23;
        *(void *)(a5 + 8) = a2;
        int v11 = 1438;
        goto LABEL_10;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xDB:
      case 0xEA:
        unsigned int v10 = a4 + 2;
        goto LABEL_6;
      case 0x1F:
        int v12 = a4 + 2;
        unint64_t v13 = "D";
        goto LABEL_26;
      case 0x21:
        break;
      case 0x32:
        int v12 = a4 + 2;
        unint64_t v13 = "d";
        goto LABEL_26;
      case 0x33:
        break;
      case 0x46:
        int v14 = a4 + 2;
        uint64_t v15 = "U";
        goto LABEL_28;
      case 0x47:
        break;
      case 0x4C:
        int v14 = a4 + 2;
        uint64_t v15 = "";
        char v16 = 70;
        goto LABEL_54;
      case 0x62:
        break;
      case 0x64:
        break;
      case 0x67:
        int v12 = a4 + 2;
        unint64_t v13 = "e";
        goto LABEL_26;
      case 0x68:
        int v12 = a4 + 2;
        unint64_t v13 = "E";
LABEL_26:
        char v17 = 70;
        goto LABEL_43;
      case 0x75:
        int v14 = a4 + 2;
        uint64_t v15 = "u";
LABEL_28:
        char v16 = 70;
        size_t v18 = 1;
        goto LABEL_55;
      case 0x7D:
        int v12 = a4 + 2;
        unint64_t v13 = "i";
        goto LABEL_42;
      case 0x7E:
        break;
      case 0x8D:
        break;
      case 0x98:
        break;
      case 0x99:
        break;
      case 0x9A:
        break;
      case 0x9B:
        break;
      case 0x9C:
        break;
      case 0x9D:
        break;
      case 0xA8:
        break;
      case 0xA9:
        break;
      case 0xB2:
        int v12 = a4 + 2;
        unint64_t v13 = "P";
        goto LABEL_42;
      case 0xB3:
        int v12 = a4 + 2;
        unint64_t v13 = "W";
LABEL_42:
        char v17 = 73;
LABEL_43:
        break;
      case 0xB4:
        break;
      case 0xB5:
        *(_DWORD *)a5 = 7;
        *(void *)(a5 + 8) = a2;
        int v11 = 2803;
        goto LABEL_10;
      case 0xCC:
        break;
      case 0xD7:
        break;
      case 0xDA:
        break;
      case 0xDC:
        break;
      case 0xE9:
        *(_DWORD *)a5 = 7;
        *(void *)(a5 + 8) = a2;
        int v11 = 2797;
        goto LABEL_10;
      case 0xFA:
        break;
      case 0xFB:
        break;
      case 0xFE:
        int v14 = a4 + 2;
        uint64_t v15 = "";
        char v16 = 118;
LABEL_54:
        size_t v18 = 0;
LABEL_55:
        break;
      case 0x101:
        break;
      case 0x135:
        *(_DWORD *)a5 = 7;
        *(void *)(a5 + 8) = a2;
        int v11 = 2848;
        goto LABEL_10;
      case 0x140:
        swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), "<autodiff-function>", 0x13uLL, *(void **)(a1 + 12744));
        *(_DWORD *)a5 = 0;
        *(void *)(a5 + 8) = 0;
        *(_DWORD *)(a5 + 16) = 0;
        break;
      default:
        *(_DWORD *)a5 = 4;
        *(void *)(a5 + 8) = a2;
        int v11 = 1447;
LABEL_10:
        *(_DWORD *)(a5 + 16) = v11;
        break;
    }
  }
  else
  {
    unsigned int v10 = a4 + 1;
LABEL_6:
  }
  *a3 = v7;
}

void *anonymous namespace'::Remangler::mangleEntityType@<X0>(void *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (*((_WORD *)a2 + 8) != 232)
  {
LABEL_50:
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v29 = 1452;
    goto LABEL_51;
  }
  uint64_t v6 = (uint64_t)this;
LABEL_3:
  int v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 != 1)
  {
    if (v7 == 5 && *((_DWORD *)a2 + 2) == 1)
    {
      a2 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_7;
    }
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = a2;
    int v29 = 1453;
LABEL_51:
    *(_DWORD *)(a4 + 16) = v29;
    return this;
  }
LABEL_7:
  unsigned int v8 = *a2;
  int v9 = *((unsigned __int16 *)*a2 + 8);
  if (v9 != 65 && v9 != 245 && v9 != 82)
  {
    unsigned int v30 = *a2;
  }
  if (v9 == 65 || v9 == 82) {
    char v11 = 70;
  }
  else {
    char v11 = 102;
  }
  unsigned int v12 = *(_DWORD *)(v6 + 12736);
  size_t v13 = *(unsigned int *)(v6 + 12740);
  int v14 = *(char **)(v6 + 12728);
  if (v12 >= v13)
  {
    uint64_t v15 = *(void **)(v6 + 12744);
    char v16 = (char *)v15[1];
    if (&v14[v13] == v16)
    {
      unint64_t v18 = (unint64_t)&v14[v13 + 1];
      unint64_t v17 = v15[2];
      if (v18 <= v17)
      {
        v15[1] = v18;
        LODWORD(v19) = 1;
LABEL_31:
        *(_DWORD *)(v6 + 12740) = v13 + v19;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v17 = v15[2];
    }
    if ((2 * v13) <= 4) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = (2 * v13);
    }
    size_t v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      unint64_t v21 = 2 * v15[4];
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      v15[4] = v21;
      unint64_t v22 = v21 + 8;
      this = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      int v23 = (char *)this + v22;
      *this = v15[3];
      char v16 = (char *)(this + 1);
      void v15[2] = v23;
      void v15[3] = this;
    }
    v15[1] = &v16[v20];
    if (v13) {
      this = memcpy(v16, *(const void **)(v6 + 12728), v13);
    }
    *(void *)(v6 + 12728) = v16;
    LODWORD(v13) = *(_DWORD *)(v6 + 12740);
    int v14 = v16;
    unsigned int v12 = *(_DWORD *)(v6 + 12736);
    goto LABEL_31;
  }
LABEL_32:
  *(_DWORD *)(v6 + 12736) = v12 + 1;
  v14[v12] = v11;
  unsigned int v24 = *((unsigned __int8 *)v8 + 18);
  if (v24 != 2)
  {
    if (v24 != 5 || (unsigned int v24 = *((_DWORD *)v8 + 2), v24 <= 1))
    {
      *(_DWORD *)a4 = 1;
      *(void *)(a4 + 8) = v8;
      int v29 = 1465;
      goto LABEL_51;
    }
  }
  unsigned int v25 = 0;
  ++a3;
  while (1)
  {
    size_t v26 = v8;
    if (*((unsigned __int8 *)v8 + 18) - 1 >= 2) {
      size_t v26 = *(swift::Demangle::__runtime::Node **)v8;
    }
    if (*(_DWORD *)a4) {
      return this;
    }
    if (++v25 > v24 - 2)
    {
      if (*((unsigned __int8 *)v8 + 18) - 1 >= 2) {
        unsigned int v8 = *(swift::Demangle::__runtime::Node **)v8;
      }
      BOOL v27 = (swift::Demangle::__runtime::Node **)*((void *)v8 + v24 - 1);
      if (*((_WORD *)v27 + 8) != 207)
      {
        *(_DWORD *)a4 = 1;
        *(void *)(a4 + 8) = v27;
        int v29 = 1471;
        goto LABEL_51;
      }
      int v28 = *((unsigned __int8 *)v27 + 18);
      if (v28 != 1)
      {
        if (v28 != 5 || *((_DWORD *)v27 + 2) != 1)
        {
          *(_DWORD *)a4 = 1;
          *(void *)(a4 + 8) = v27;
          int v29 = 1472;
          goto LABEL_51;
        }
        BOOL v27 = (swift::Demangle::__runtime::Node **)*v27;
      }
      a2 = (swift::Demangle::__runtime::Node **)*v27;
      if (*((_WORD *)*v27 + 8) == 232) {
        goto LABEL_3;
      }
      goto LABEL_50;
    }
  }
}

swift::Demangle::__runtime::Node *applyParamLabels(swift::Demangle::__runtime::Node *a1, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  int v4 = a2;
  int v6 = *((unsigned __int8 *)a1 + 18);
  if ((v6 - 1) < 2 || v6 == 5 && *((_DWORD *)a1 + 2))
  {
    int v7 = (char *)a2 + 16;
    unint64_t Node = swift::Demangle::__runtime::NodeFactory::createNode(a3, *((_WORD *)a2 + 8));
    int v9 = (swift::Demangle::__runtime::Node *)Node;
    int v10 = *((unsigned __int8 *)v4 + 18);
    char v11 = (char *)v4;
    if ((v10 - 1) >= 2)
    {
      if (v10 == 5)
      {
        unsigned int v12 = *(char **)v4;
        char v11 = *(char **)v4;
        goto LABEL_12;
      }
      char v11 = 0;
    }
    switch(v10)
    {
      case 1:
        int v7 = (char *)v4 + 8;
        break;
      case 2:
        break;
      case 5:
        unsigned int v12 = *(char **)v4;
LABEL_12:
        int v7 = &v12[8 * *((unsigned int *)v4 + 2)];
        if (v11 == v7) {
          return v9;
        }
LABEL_16:
        size_t v44 = v7;
        BOOL v45 = (swift::Demangle::__runtime::Node *)Node;
        while (1)
        {
          unint64_t v13 = *(void *)v11;
          int v14 = *(unsigned __int16 *)(*(void *)v11 + 16);
          if (v14 == 82 || v14 == 65)
          {
            unint64_t v15 = swift::Demangle::__runtime::NodeFactory::createNode(a3, 82);
            char v16 = (swift::Demangle::__runtime::Node *)v15;
            uint64_t v17 = *(unsigned __int8 *)(v13 + 18);
            switch(v17)
            {
              case 1:
                goto LABEL_26;
              case 5:
                uint64_t v17 = *(unsigned int *)(v13 + 8);
                if (v17) {
                  goto LABEL_26;
                }
                break;
              case 2:
                uint64_t v17 = 2;
LABEL_26:
                unint64_t v46 = v11;
                unint64_t v18 = 0;
                while (2)
                {
                  unint64_t v23 = *(unsigned __int8 *)(v13 + 18);
                  unsigned int v24 = v23 - 1;
                  switch(v23)
                  {
                    case 1:
LABEL_37:
                      if (v23 <= v18) {
                        goto LABEL_42;
                      }
                      break;
                    case 5:
                      if (*(unsigned int *)(v13 + 8) <= v18) {
                        goto LABEL_42;
                      }
                      break;
                    case 2:
                      unint64_t v23 = 2;
                      goto LABEL_37;
                    default:
LABEL_42:
                      unint64_t v22 = 0;
LABEL_43:
                      if (*((_WORD *)v22 + 8) != 3) {
                        goto LABEL_32;
                      }
                      size_t v26 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 3);
                      BOOL v27 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 223);
                      v47[1] = a3;
                      unint64_t v48 = v27;
                      v47[0] = &v48;
                      int v28 = *((unsigned __int8 *)v22 + 18);
                      if ((v28 - 1) < 2) {
                        goto LABEL_48;
                      }
                      if (v28 == 5 && *((_DWORD *)v22 + 2))
                      {
                        unint64_t v22 = *(swift::Demangle::__runtime::Node **)v22;
LABEL_48:
                        uint64_t v29 = *(void *)v22;
                      }
                      else
                      {
                        uint64_t v29 = 0;
                      }
                      int v30 = *(unsigned __int8 *)(v29 + 18);
                      if ((v30 - 1) < 2)
                      {
LABEL_54:
                        uint64_t v31 = *(void *)v29;
                      }
                      else
                      {
                        if (v30 == 5 && *(_DWORD *)(v29 + 8))
                        {
                          uint64_t v29 = *(void *)v29;
                          goto LABEL_54;
                        }
                        uint64_t v31 = 0;
                      }
                      if (*(_WORD *)(v31 + 16) == 223)
                      {
                        uint64_t v32 = *(unsigned __int8 *)(v31 + 18);
                        switch(v32)
                        {
                          case 1:
                            goto LABEL_65;
                          case 5:
                            uint64_t v32 = *(unsigned int *)(v31 + 8);
                            if (v32) {
                              goto LABEL_65;
                            }
                            break;
                          case 2:
                            uint64_t v32 = 2;
LABEL_65:
                            unint64_t v34 = 0;
                            while (2)
                            {
                              unint64_t v36 = *((unsigned __int8 *)a1 + 18);
                              unsigned int v37 = v36 - 1;
                              switch(v36)
                              {
                                case 1:
LABEL_72:
                                  if (v36 <= v34) {
                                    goto LABEL_77;
                                  }
                                  break;
                                case 5:
                                  if (*((unsigned int *)a1 + 2) <= v34) {
                                    goto LABEL_77;
                                  }
                                  break;
                                case 2:
                                  unint64_t v36 = 2;
                                  goto LABEL_72;
                                default:
LABEL_77:
                                  uint64_t v39 = 0;
LABEL_78:
                                  unint64_t v40 = *(unsigned __int8 *)(v31 + 18);
                                  unsigned int v41 = v40 - 1;
                                  switch(v40)
                                  {
                                    case 1:
LABEL_82:
                                      if (v40 <= v34) {
                                        goto LABEL_66;
                                      }
                                      break;
                                    case 5:
                                      if (*(unsigned int *)(v31 + 8) <= v34) {
                                        goto LABEL_66;
                                      }
                                      break;
                                    case 2:
                                      unint64_t v40 = 2;
                                      goto LABEL_82;
                                    default:
LABEL_66:
                                      uint64_t v35 = 0;
LABEL_67:
                                      applyParamLabels(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::NodeFactory &)::$_0::operator() const(swift::Demangle::__runtime::Node *)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *)#1}::operator()((uint64_t)v47, v39, v35);
                                      if (v32 == ++v34) {
                                        goto LABEL_31;
                                      }
                                      continue;
                                  }
                                  uint64_t v42 = v31;
                                  if (v41 >= 2) {
                                    uint64_t v42 = *(void *)v31;
                                  }
                                  uint64_t v35 = *(void *)(v42 + 8 * v34);
                                  goto LABEL_67;
                              }
                              break;
                            }
                            size_t v38 = a1;
                            if (v37 >= 2) {
                              size_t v38 = *(swift::Demangle::__runtime::Node **)a1;
                            }
                            uint64_t v39 = *((void *)v38 + v34);
                            goto LABEL_78;
                        }
LABEL_31:
                        unint64_t v21 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 232);
                        swift::Demangle::__runtime::Node::addChild(v21, v48, a3);
                        swift::Demangle::__runtime::Node::addChild(v26, v21, a3);
                        unint64_t v22 = v26;
LABEL_32:
                        swift::Demangle::__runtime::Node::addChild(v16, v22, a3);
                        if (++v18 == v17)
                        {
                          unint64_t v13 = (unint64_t)v16;
                          int v9 = v45;
                          char v11 = v46;
                          int v7 = v44;
                          goto LABEL_18;
                        }
                        continue;
                      }
                      int v33 = *((unsigned __int8 *)a1 + 18);
                      uint64_t v19 = (uint64_t *)a1;
                      if ((v33 - 1) < 2)
                      {
LABEL_29:
                        uint64_t v20 = *v19;
                      }
                      else
                      {
                        if (v33 == 5 && *((_DWORD *)a1 + 2))
                        {
                          uint64_t v19 = *(uint64_t **)a1;
                          goto LABEL_29;
                        }
                        uint64_t v20 = 0;
                      }
                      applyParamLabels(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::NodeFactory &)::$_0::operator() const(swift::Demangle::__runtime::Node *)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *)#1}::operator()((uint64_t)v47, v20, v31);
                      goto LABEL_31;
                  }
                  break;
                }
                unint64_t v25 = v13;
                if (v24 >= 2) {
                  unint64_t v25 = *(void *)v13;
                }
                unint64_t v22 = *(swift::Demangle::__runtime::Node **)(v25 + 8 * v18);
                goto LABEL_43;
            }
            unint64_t v13 = v15;
          }
LABEL_18:
          swift::Demangle::__runtime::Node::addChild(v9, (swift::Demangle::__runtime::Node *)v13, a3);
          v11 += 8;
          if (v11 == v7) {
            return v9;
          }
        }
      default:
        int v7 = 0;
        if (v11) {
          goto LABEL_16;
        }
        return v9;
    }
    if (v11 != v7) {
      goto LABEL_16;
    }
    return v9;
  }
  return v4;
}

void anonymous namespace'::Remangler::mangleAnyNominalType(uint64_t a1@<X0>, swift::Demangle::__runtime *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5 = (unint64_t)a2;
  if (a4 >= 0x401)
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = a2;
    *(_DWORD *)(a5 + 16) = 2336;
    return;
  }
  if (!swift::Demangle::__runtime::isSpecialized(a2, a2))
  {
    unsigned int v16 = *(unsigned __int16 *)(v5 + 16);
    if (v16 <= 0xDA)
    {
      switch(v16)
      {
        case 0x18u:
          long long v32 = 0uLL;
          LOBYTE(v33) = 0;
          break;
        case 0x3Du:
          long long v32 = 0uLL;
          LOBYTE(v33) = 0;
          break;
        case 0xA7u:
          long long v32 = 0uLL;
          LOBYTE(v33) = 0;
          {
            int v17 = a4 + 2;
            __s = "_UnknownTypeKind";
            std::string::size_type v30 = 16;
LABEL_47:
            break;
          }
          goto LABEL_58;
        default:
          goto LABEL_54;
      }
      if (*(_DWORD *)a5) {
        return;
      }
      swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)a1, (const swift::Demangle::__runtime::SubstitutionEntry *)&v32);
      goto LABEL_58;
    }
    if (v16 == 219)
    {
      long long v32 = 0uLL;
      LOBYTE(v33) = 0;
      {
        int v17 = a4 + 2;
        __s = 0;
        std::string::size_type v30 = 0;
        goto LABEL_47;
      }
LABEL_58:
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 16) = 0;
      return;
    }
    if (v16 == 234)
    {
      long long v32 = 0uLL;
      LOBYTE(v33) = 0;
      {
        if (*(_DWORD *)a5) {
          return;
        }
        swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)a1, (const swift::Demangle::__runtime::SubstitutionEntry *)&v32);
      }
      *(_DWORD *)a5 = 0;
      goto LABEL_58;
    }
    if (v16 != 232)
    {
LABEL_54:
      *(_DWORD *)a5 = 5;
      *(void *)(a5 + 8) = v5;
      *(_DWORD *)(a5 + 16) = 2375;
      return;
    }
    int v18 = *(unsigned __int8 *)(v5 + 18);
    if ((v18 - 1) >= 2)
    {
      if (v18 != 5 || !*(_DWORD *)(v5 + 8))
      {
        unint64_t v19 = 0;
LABEL_57:
        if (*(_DWORD *)a5) {
          return;
        }
        goto LABEL_58;
      }
      unint64_t v5 = *(void *)v5;
    }
    unint64_t v19 = *(void *)v5;
    goto LABEL_57;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 12736);
  size_t v11 = *(unsigned int *)(a1 + 12740);
  unsigned int v12 = *(char **)(a1 + 12728);
  if (v10 < v11) {
    goto LABEL_37;
  }
  unint64_t v13 = *(void **)(a1 + 12744);
  int v14 = (char *)v13[1];
  if (&v12[v11] != v14)
  {
    unint64_t v15 = v13[2];
LABEL_22:
    if ((2 * v11) <= 4) {
      uint64_t v21 = 4;
    }
    else {
      uint64_t v21 = (2 * v11);
    }
    size_t v22 = v21 + v11;
    if (v14) {
      BOOL v23 = (unint64_t)&v14[v21 + v11] > v15;
    }
    else {
      BOOL v23 = 1;
    }
    unsigned int v12 = (char *)v13[1];
    if (v23)
    {
      unint64_t v24 = 2 * v13[4];
      if (v24 <= v22 + 1) {
        unint64_t v24 = v22 + 1;
      }
      v13[4] = v24;
      uint64_t v31 = a3;
      unint64_t v25 = v24 + 8;
      size_t v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      *size_t v26 = v13[3];
      unsigned int v12 = (char *)(v26 + 1);
      BOOL v27 = (char *)v26 + v25;
      a3 = v31;
      void v13[2] = v27;
      _OWORD v13[3] = v26;
    }
    v13[1] = &v12[v22];
    if (v11) {
      memcpy(v12, *(const void **)(a1 + 12728), v11);
    }
    *(void *)(a1 + 12728) = v12;
    LODWORD(v11) = *(_DWORD *)(a1 + 12740);
    unsigned int v10 = *(_DWORD *)(a1 + 12736);
    goto LABEL_36;
  }
  unint64_t v20 = (unint64_t)&v12[v11 + 1];
  unint64_t v15 = v13[2];
  if (v20 > v15) {
    goto LABEL_22;
  }
  v13[1] = v20;
  LODWORD(v21) = 1;
LABEL_36:
  *(_DWORD *)(a1 + 12740) = v11 + v21;
LABEL_37:
  *(_DWORD *)(a1 + 12736) = v10 + 1;
  v12[v10] = 71;
  swift::Demangle::__runtime::getUnspecialized(v5, *(swift::Demangle::__runtime::Node **)a1, (uint64_t)&v32);
  if (v32)
  {
    *(_OWORD *)a5 = v32;
    *(void *)(a5 + 16) = v33;
  }
  else
  {
    uint64_t v28 = a4 + 1;
    if (!*(_DWORD *)a5) {
  }
    }
}

double anonymous namespace'::Remangler::mangleAnonymousContext@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v6 = (const void **)a2;
  int v8 = *(unsigned __int8 *)(a2 + 18);
  int v9 = (void *)a2;
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 == 5 && *(_DWORD *)(a2 + 8) >= 2u)
  {
    int v9 = *(void **)a2;
LABEL_5:
    uint64_t v10 = v9[1];
    goto LABEL_7;
  }
  uint64_t v10 = 0;
LABEL_7:
  if (*(_DWORD *)a5) {
    return result;
  }
  if (*((unsigned __int8 *)v6 + 18) - 1 >= 2) {
    int v6 = (const void **)*v6;
  }
  unsigned int v12 = *(const void **)*v6;
  if (v12)
  {
    size_t v13 = *((void *)*v6 + 1);
    if (v13 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v13 >= 0x17)
    {
      uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v15 = v13 | 7;
      }
      uint64_t v16 = v15 + 1;
      p_dst = (long long *)operator new(v15 + 1);
      *((void *)&__dst + 1) = v13;
      unint64_t v19 = v16 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v19) = v13;
      p_dst = &__dst;
      if (!v13) {
        goto LABEL_20;
      }
    }
    memmove(p_dst, v12, v13);
LABEL_20:
    *((unsigned char *)p_dst + v13) = 0;
    goto LABEL_21;
  }
  long long __dst = 0uLL;
  unint64_t v19 = 0;
LABEL_21:
  int v17 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v17);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)int v17 = __dst;
  *(void *)(a3 + 24) = v19;
  *(_DWORD *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleDidSet@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleExtension@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7 = a2;
  int v8 = result;
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 2) {
    goto LABEL_7;
  }
  if (v10 != 5)
  {
LABEL_10:
    *(_DWORD *)a5 = 1;
    *(void *)(a5 + 8) = a2;
    *(_DWORD *)(a5 + 16) = 2131;
    return result;
  }
  int v11 = *((_DWORD *)a2 + 2);
  if (v11 == 2)
  {
LABEL_7:
    unsigned int v12 = result + 1592;
    unsigned int v13 = *((_DWORD *)result + 3184);
    size_t v17 = *((unsigned int *)result + 3185);
    uint64_t v15 = (char *)result[1591];
    if (v13 < v17)
    {
LABEL_27:
      char v16 = 69;
      goto LABEL_28;
    }
    int v18 = (void *)result[1593];
    unint64_t v19 = (char *)v18[1];
    if (&v15[v17] == v19)
    {
      unint64_t v21 = (unint64_t)&v15[v17 + 1];
      unint64_t v20 = v18[2];
      if (v21 <= v20)
      {
        v18[1] = v21;
        LODWORD(v22) = 1;
LABEL_26:
        *((_DWORD *)v8 + 3185) = v17 + v22;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v20 = v18[2];
    }
    size_t v44 = result + 1592;
    if ((2 * v17) <= 4) {
      uint64_t v22 = 4;
    }
    else {
      uint64_t v22 = (2 * v17);
    }
    size_t v23 = v22 + v17;
    if (v19) {
      BOOL v24 = (unint64_t)&v19[v22 + v17] > v20;
    }
    else {
      BOOL v24 = 1;
    }
    uint64_t v15 = (char *)v18[1];
    if (v24)
    {
      unint64_t v25 = 2 * v18[4];
      if (v25 <= v23 + 1) {
        unint64_t v25 = v23 + 1;
      }
      void v18[4] = v25;
      unint64_t v26 = v25 + 8;
      BOOL v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      uint64_t v28 = (char *)v27 + v26;
      *BOOL v27 = v18[3];
      uint64_t v15 = (char *)(v27 + 1);
      uint64_t v18[2] = v28;
      void v18[3] = v27;
    }
    v18[1] = &v15[v23];
    if (v17) {
      memcpy(v15, (const void *)v8[1591], v17);
    }
    v8[1591] = v15;
    LODWORD(v17) = *((_DWORD *)v8 + 3185);
    unsigned int v13 = *((_DWORD *)v8 + 3184);
    unsigned int v12 = v44;
    goto LABEL_26;
  }
  if (v11 != 3) {
    goto LABEL_10;
  }
  unsigned int v12 = result + 1592;
  unsigned int v13 = *((_DWORD *)result + 3184);
  size_t v14 = *((unsigned int *)result + 3185);
  uint64_t v15 = (char *)result[1591];
  if (v13 < v14)
  {
    char v16 = 101;
    goto LABEL_28;
  }
  uint64_t v33 = (void *)result[1593];
  unint64_t v34 = (char *)v33[1];
  if (&v15[v14] != v34)
  {
    unint64_t v35 = v33[2];
LABEL_45:
    LODWORD(v37) = 2 * v14;
    if ((2 * v14) <= 4) {
      uint64_t v37 = 4;
    }
    else {
      uint64_t v37 = v37;
    }
    int v45 = v37;
    size_t v38 = v37 + v14;
    if (!v34 || (unint64_t)&v34[v38] > v35)
    {
      unint64_t v39 = 2 * v33[4];
      if (v39 <= v38 + 1) {
        unint64_t v39 = v38 + 1;
      }
      _WORD v33[4] = v39;
      unint64_t v40 = v39 + 8;
      unsigned int v41 = malloc_type_malloc(v39 + 8, 0xD0263BC5uLL);
      uint64_t v42 = (char *)v41 + v40;
      *unsigned int v41 = v33[3];
      unint64_t v34 = (char *)(v41 + 1);
      void v33[2] = v42;
      void v33[3] = v41;
    }
    v33[1] = &v34[v38];
    if (v14) {
      memcpy(v34, (const void *)v8[1591], v14);
    }
    v8[1591] = v34;
    LODWORD(v14) = *((_DWORD *)v8 + 3185);
    uint64_t v15 = v34;
    unsigned int v13 = *((_DWORD *)v8 + 3184);
    int v43 = v45;
    goto LABEL_57;
  }
  unint64_t v36 = (unint64_t)&v15[v14 + 1];
  unint64_t v35 = v33[2];
  if (v36 > v35) {
    goto LABEL_45;
  }
  v33[1] = v36;
  int v43 = 1;
LABEL_57:
  *((_DWORD *)v8 + 3185) = v14 + v43;
  char v16 = 101;
LABEL_28:
  _DWORD *v12 = v13 + 1;
  v15[v13] = v16;
  uint64_t v29 = v7;
  if (*((unsigned __int8 *)v7 + 18) - 1 >= 2) {
    uint64_t v29 = (void *)*v7;
  }
  uint64_t v30 = (a4 + 1);
  if (!*(_DWORD *)a5)
  {
    int v31 = *((unsigned __int8 *)v7 + 18);
    if (v31 == 5)
    {
      if (*((_DWORD *)v7 + 2) != 3) {
        goto LABEL_37;
      }
      if (*(_DWORD *)a5) {
        return result;
      }
      int v31 = *((unsigned __int8 *)v7 + 18);
    }
    if ((v31 - 1) < 2)
    {
LABEL_38:
      uint64_t v32 = v7[1];
    }
LABEL_37:
    int v7 = (uint64_t *)*v7;
    goto LABEL_38;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleGetter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleGlobalGetter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleInitAccessor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleMaterializeForSet@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleModifyAccessor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

char *anonymous namespace'::Remangler::mangleModule@<X0>(uint64_t a1@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  v24[0] = 0;
  v24[1] = 0;
  char v25 = 0;
  if ((result & 1) == 0)
  {
    if (*a3)
    {
LABEL_24:
      size_t v23 = *(const void **)a2;
      unint64_t v22 = *((void *)a2 + 1);
      swift::Demangle::__runtime::CharVector::append((unsigned int *)(a1 + 12728), v22, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 12744));
      swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), v23, v22, *(void **)(a1 + 12744));
      double result = swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)a1, (const swift::Demangle::__runtime::SubstitutionEntry *)v24);
      goto LABEL_25;
    }
    unsigned int v9 = *(_DWORD *)(a1 + 12736);
    size_t v10 = *(unsigned int *)(a1 + 12740);
    int v11 = *(unsigned char **)(a1 + 12728);
    if (v9 < v10)
    {
LABEL_23:
      *(_DWORD *)(a1 + 12736) = v9 + 1;
      v11[v9] = 77;
      goto LABEL_24;
    }
    unsigned int v12 = *(void **)(a1 + 12744);
    unsigned int v13 = (unsigned char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v15 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_22:
        *(_DWORD *)(a1 + 12740) = v10 + v16;
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v10);
    }
    size_t v17 = v16 + v10;
    if (v13) {
      BOOL v18 = (unint64_t)&v13[v16 + v10] > v14;
    }
    else {
      BOOL v18 = 1;
    }
    int v11 = (unsigned char *)v12[1];
    if (v18)
    {
      unint64_t v19 = 2 * v12[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v12[4] = v19;
      unint64_t v20 = v19 + 8;
      unint64_t v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      *unint64_t v21 = v12[3];
      int v11 = v21 + 1;
      v12[2] = (char *)v21 + v20;
      void v12[3] = v21;
    }
    v12[1] = &v11[v17];
    if (v10) {
      memcpy(v11, *(const void **)(a1 + 12728), v10);
    }
    *(void *)(a1 + 12728) = v11;
    LODWORD(v10) = *(_DWORD *)(a1 + 12740);
    unsigned int v9 = *(_DWORD *)(a1 + 12736);
    goto LABEL_22;
  }
LABEL_25:
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *anonymous namespace'::Remangler::mangleNativeOwningAddressor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleNativeOwningMutableAddressor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleNativePinningAddressor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleNativePinningMutableAddressor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleOwningAddressor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleOwningMutableAddressor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleReadAccessor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleSetter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

uint64_t anonymous namespace'::Remangler::mangleStatic(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 12736);
  size_t v9 = *(unsigned int *)(a1 + 12740);
  size_t v10 = *(char **)(a1 + 12728);
  if (v8 >= v9)
  {
    int v11 = *(void **)(a1 + 12744);
    unsigned int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v14 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *(_DWORD *)(a1 + 12740) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = (2 * v9);
    }
    size_t v16 = v15 + v9;
    if (v12) {
      BOOL v17 = (unint64_t)&v12[v15 + v9] > v13;
    }
    else {
      BOOL v17 = 1;
    }
    size_t v10 = (char *)v11[1];
    if (v17)
    {
      unint64_t v18 = 2 * v11[4];
      if (v18 <= v16 + 1) {
        unint64_t v18 = v16 + 1;
      }
      _OWORD v11[4] = v18;
      unint64_t v19 = v18 + 8;
      unint64_t v20 = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      unint64_t v21 = (char *)v20 + v19;
      *unint64_t v20 = v11[3];
      size_t v10 = (char *)(v20 + 1);
      void v11[2] = v21;
      void v11[3] = v20;
    }
    v11[1] = &v10[v16];
    if (v9) {
      memcpy(v10, *(const void **)(a1 + 12728), v9);
    }
    *(void *)(a1 + 12728) = v10;
    LODWORD(v9) = *(_DWORD *)(a1 + 12740);
    unsigned int v8 = *(_DWORD *)(a1 + 12736);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(a1 + 12736) = v8 + 1;
  v10[v8] = 90;
  int v22 = *((unsigned __int8 *)a2 + 18);
  if ((v22 - 1) < 2)
  {
LABEL_25:
    size_t v23 = (uint64_t *)*a2;
    goto LABEL_27;
  }
  if (v22 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (uint64_t *)*a2;
    goto LABEL_25;
  }
  size_t v23 = 0;
LABEL_27:
}

void *anonymous namespace'::Remangler::mangleSubscript@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7 = a2;
  unsigned int v8 = result;
  int v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 != 2 && (v10 != 5 || *((_DWORD *)a2 + 2) < 2u))
  {
    int v17 = 1071;
    int v18 = 1;
    goto LABEL_8;
  }
  unsigned int v11 = *((_DWORD *)result + 3184);
  size_t v12 = *((unsigned int *)result + 3185);
  unint64_t v13 = (char *)result[1591];
  if (v11 >= v12)
  {
    unint64_t v14 = (void *)result[1593];
    uint64_t v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      unint64_t v19 = (unint64_t)&v13[v12 + 1];
      unint64_t v16 = v14[2];
      if (v19 <= v16)
      {
        v14[1] = v19;
        LODWORD(v20) = 1;
LABEL_24:
        *((_DWORD *)v8 + 3185) = v12 + v20;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v16 = v14[2];
    }
    if ((2 * v12) <= 4) {
      uint64_t v20 = 4;
    }
    else {
      uint64_t v20 = (2 * v12);
    }
    size_t v21 = v20 + v12;
    if (v15) {
      BOOL v22 = (unint64_t)&v15[v20 + v12] > v16;
    }
    else {
      BOOL v22 = 1;
    }
    unint64_t v13 = (char *)v14[1];
    if (v22)
    {
      unint64_t v23 = 2 * v14[4];
      if (v23 <= v21 + 1) {
        unint64_t v23 = v21 + 1;
      }
      v14[4] = v23;
      unint64_t v24 = v23 + 8;
      char v25 = malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      unint64_t v26 = (char *)v25 + v24;
      *char v25 = v14[3];
      unint64_t v13 = (char *)(v25 + 1);
      void v14[2] = v26;
      void v14[3] = v25;
    }
    v14[1] = &v13[v21];
    if (v12) {
      memcpy(v13, (const void *)v8[1591], v12);
    }
    v8[1591] = v13;
    LODWORD(v12) = *((_DWORD *)v8 + 3185);
    unsigned int v11 = *((_DWORD *)v8 + 3184);
    goto LABEL_24;
  }
LABEL_25:
  *((_DWORD *)v8 + 3184) = v11 + 1;
  v13[v11] = 105;
  BOOL v27 = v7;
  if (*((unsigned __int8 *)v7 + 18) - 1 >= 2) {
    BOOL v27 = (void *)*v7;
  }
  uint64_t v28 = (a4 + 1);
  if (!*(_DWORD *)a5)
  {
    int v29 = *((unsigned __int8 *)v7 + 18);
    if (v29 == 1)
    {
      uint64_t v30 = 0;
    }
    else
    {
      if (v29 == 5)
      {
        uint64_t v30 = *((unsigned int *)v7 + 2) - 1;
        int v31 = (uint64_t *)*v7;
        goto LABEL_34;
      }
      uint64_t v30 = 1;
    }
    int v31 = v7;
LABEL_34:
    if (*(_WORD *)(v31[v30] + 16) != 176)
    {
LABEL_46:
      if ((v29 - 1) >= 2
        && (v36 = *((_DWORD *)v7 + 2), int v7 = (uint64_t *)*v7, v36 >= 3)
        && (uint64_t v37 = (swift::Demangle::__runtime::Node *)v7[1], *((_WORD *)v37 + 8) == 290))
      {
        size_t v38 = (swift::Demangle::__runtime::Node **)applyParamLabels(v37, (swift::Demangle::__runtime::Node *)v7[2], (swift::Demangle::__runtime::NodeFactory *)*v8);
      }
      else
      {
        size_t v38 = (swift::Demangle::__runtime::Node **)v7[1];
      }
      int v17 = *(_DWORD *)a5;
      if (*(_DWORD *)a5) {
        return result;
      }
      int v18 = 0;
      int v7 = 0;
LABEL_8:
      *(_DWORD *)a5 = v18;
      *(void *)(a5 + 8) = v7;
      *(_DWORD *)(a5 + 16) = v17;
      return result;
    }
    if (v29 == 1)
    {
      uint64_t v33 = 0;
      unint64_t v34 = v7;
    }
    else if (v29 == 5)
    {
      uint64_t v35 = *((unsigned int *)v7 + 2);
      if (!v35)
      {
        uint64_t v32 = 0;
        goto LABEL_44;
      }
      uint64_t v33 = v35 - 1;
      unint64_t v34 = (uint64_t *)*v7;
    }
    else
    {
      uint64_t v32 = 0;
      if (v29 != 2)
      {
LABEL_44:
        if (*(_DWORD *)a5) {
          return result;
        }
        int v29 = *((unsigned __int8 *)v7 + 18);
        goto LABEL_46;
      }
      uint64_t v33 = 1;
      unint64_t v34 = v7;
    }
    uint64_t v32 = (swift::Demangle::__runtime::Node *)v34[v33];
    goto LABEL_44;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleUnsafeAddressor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleUnsafeMutableAddressor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleWillSet@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 5 || !*((_DWORD *)a2 + 2))
    {
      int v6 = 0;
    }
    a2 = (uint64_t *)*a2;
  }
  int v6 = (uint64_t *)*a2;
}

void *anonymous namespace'::Remangler::mangleGenericArgs@<X0>(void *result@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5 = a2;
  int v6 = result;
  unsigned int v8 = 0;
  int v9 = 0;
  int v10 = *((unsigned __int16 *)a2 + 8);
  int v11 = 0;
  switch(*((_WORD *)a2 + 8))
  {
    case 0xD:
    case 0xE:
    case 0xF:
      int v12 = *((unsigned __int8 *)a2 + 18);
      unint64_t v13 = (uint64_t **)a2;
      if ((v12 - 1) < 2) {
        goto LABEL_6;
      }
      if (v12 == 5 && *((_DWORD *)a2 + 2))
      {
        unint64_t v13 = (uint64_t **)*a2;
LABEL_6:
        unsigned int v8 = *v13;
      }
      else
      {
        unsigned int v8 = 0;
      }
      if (*((_WORD *)v8 + 8) != 232)
      {
        int v11 = 2311;
        int v9 = 1;
        goto LABEL_99;
      }
      int v18 = *((unsigned __int8 *)v8 + 18);
      if ((v18 - 1) < 2) {
        goto LABEL_25;
      }
      if (v18 == 5 && *((_DWORD *)v8 + 2))
      {
        unsigned int v8 = (uint64_t *)*v8;
LABEL_25:
        unint64_t v19 = (uint64_t *)*v8;
      }
      else
      {
        unint64_t v19 = 0;
      }
      int v27 = *((unsigned __int8 *)v19 + 18);
      if ((v27 - 1) < 2) {
        goto LABEL_40;
      }
      if (v27 == 5 && *((_DWORD *)v19 + 2))
      {
        unint64_t v19 = (uint64_t *)*v19;
LABEL_40:
        uint64_t v28 = (uint64_t *)*v19;
      }
      else
      {
        uint64_t v28 = 0;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
      int v29 = *((unsigned __int8 *)v5 + 18);
      if (v29 == 2) {
        goto LABEL_47;
      }
      if (v29 == 5 && *((_DWORD *)v5 + 2) >= 2u)
      {
        int v5 = (uint64_t *)*v5;
LABEL_47:
        uint64_t v30 = v5[1];
      }
      else
      {
        uint64_t v30 = 0;
      }
      int v31 = *(unsigned __int8 *)(v30 + 18);
      uint64_t v32 = (swift::Demangle::__runtime::Node **)v30;
      if ((v31 - 1) < 2) {
        goto LABEL_65;
      }
      if (v31 == 5)
      {
        uint64_t v33 = *(swift::Demangle::__runtime::Node **)v30;
        uint64_t v32 = *(swift::Demangle::__runtime::Node ***)v30;
LABEL_69:
        unint64_t v40 = (swift::Demangle::__runtime::Node **)((char *)v33 + 8 * *(unsigned int *)(v30 + 8));
        goto LABEL_73;
      }
      uint64_t v32 = 0;
LABEL_65:
      switch(v31)
      {
        case 1:
          unint64_t v40 = (swift::Demangle::__runtime::Node **)(v30 + 8);
          break;
        case 2:
          unint64_t v40 = (swift::Demangle::__runtime::Node **)(v30 + 16);
          break;
        case 5:
          uint64_t v33 = *(swift::Demangle::__runtime::Node **)v30;
          goto LABEL_69;
        default:
          unint64_t v40 = 0;
          break;
      }
LABEL_73:
      if (v32 == v40)
      {
LABEL_77:
        *(_DWORD *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        uint64_t v20 = v6 + 1592;
        unsigned int v21 = *((_DWORD *)v6 + 3184);
        size_t v42 = *((unsigned int *)v6 + 3185);
        unint64_t v23 = (char *)v6[1591];
        if (v21 < v42) {
          goto LABEL_98;
        }
        int v43 = (void *)v6[1593];
        size_t v44 = (char *)v43[1];
        if (&v23[v42] == v44)
        {
          unint64_t v46 = (unint64_t)&v23[v42 + 1];
          unint64_t v45 = v43[2];
          if (v46 <= v45)
          {
            v43[1] = v46;
            LODWORD(v47) = 1;
LABEL_96:
            int v39 = v42 + v47;
            goto LABEL_97;
          }
        }
        else
        {
          unint64_t v45 = v43[2];
        }
        if ((2 * v42) <= 4) {
          uint64_t v47 = 4;
        }
        else {
          uint64_t v47 = (2 * v42);
        }
        size_t v48 = v47 + v42;
        if (v44) {
          BOOL v49 = (unint64_t)&v44[v47 + v42] > v45;
        }
        else {
          BOOL v49 = 1;
        }
        unint64_t v23 = (char *)v43[1];
        if (v49)
        {
          unint64_t v50 = 2 * v43[4];
          if (v50 <= v48 + 1) {
            unint64_t v50 = v48 + 1;
          }
          v43[4] = v50;
          unint64_t v51 = v50 + 8;
          double result = malloc_type_malloc(v50 + 8, 0xD0263BC5uLL);
          unint64_t v52 = (char *)result + v51;
          char *result = v43[3];
          unint64_t v23 = (char *)(result + 1);
          v43[2] = v52;
          void v43[3] = result;
        }
        v43[1] = &v23[v48];
        if (v42) {
          double result = memcpy(v23, (const void *)v6[1591], v42);
        }
        v6[1591] = v23;
        LODWORD(v42) = *((_DWORD *)v6 + 3185);
        unsigned int v21 = *((_DWORD *)v6 + 3184);
        goto LABEL_96;
      }
      unsigned int v41 = a3 + 2;
      while (1)
      {
        if (*(_DWORD *)a4) {
          return result;
        }
        if (++v32 == v40) {
          goto LABEL_77;
        }
      }
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
      goto LABEL_99;
    case 0x18:
    case 0x3D:
      goto LABEL_9;
    case 0x47:
      goto LABEL_14;
    default:
      if (v10 != 1)
      {
        int v11 = 0;
        if (v10 != 219) {
          goto LABEL_99;
        }
LABEL_9:
        int v14 = *((unsigned __int8 *)a2 + 18);
        if ((v14 - 1) >= 2)
        {
          if (v14 != 5 || !*((_DWORD *)a2 + 2))
          {
            uint64_t v15 = 0;
LABEL_28:
            if (*(_DWORD *)a4) {
              return result;
            }
            uint64_t v20 = v6 + 1592;
            unsigned int v21 = *((_DWORD *)v6 + 3184);
            size_t v22 = *((unsigned int *)v6 + 3185);
            unint64_t v23 = (char *)v6[1591];
            if (v21 < v22) {
              goto LABEL_98;
            }
            unint64_t v24 = (void *)v6[1593];
            char v25 = (char *)v24[1];
            if (&v23[v22] == v25)
            {
              unint64_t v34 = (unint64_t)&v23[v22 + 1];
              unint64_t v26 = v24[2];
              if (v34 <= v26)
              {
                v24[1] = v34;
                int v39 = v22 + 1;
LABEL_97:
                *((_DWORD *)v6 + 3185) = v39;
LABEL_98:
                int v9 = 0;
                unsigned int v8 = 0;
                int v11 = 0;
                *uint64_t v20 = v21 + 1;
                v23[v21] = 95;
                goto LABEL_99;
              }
            }
            else
            {
              unint64_t v26 = v24[2];
            }
            if ((2 * v22) <= 4) {
              uint64_t v35 = 4;
            }
            else {
              uint64_t v35 = (2 * v22);
            }
            size_t v36 = v35 + v22;
            if (!v25 || (unint64_t)&v25[v36] > v26)
            {
              unint64_t v37 = 2 * v24[4];
              if (v37 <= v36 + 1) {
                unint64_t v37 = v36 + 1;
              }
              void v24[4] = v37;
              unint64_t v38 = v37 + 8;
              double result = malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
              char *result = v24[3];
              char v25 = (char *)(result + 1);
              void v24[2] = (char *)result + v38;
              void v24[3] = result;
            }
            v24[1] = &v25[v36];
            if (v22) {
              double result = memcpy(v25, (const void *)v6[1591], v22);
            }
            v6[1591] = v25;
            unint64_t v23 = v25;
            unsigned int v21 = *((_DWORD *)v6 + 3184);
            int v39 = *((_DWORD *)v6 + 3185) + v35;
            goto LABEL_97;
          }
          int v5 = (uint64_t *)*a2;
        }
        uint64_t v15 = (uint64_t *)*v5;
        goto LABEL_28;
      }
LABEL_14:
      int v16 = *((unsigned __int8 *)a2 + 18);
      if (v16 == 2) {
        goto LABEL_18;
      }
      if (v16 == 5 && *((_DWORD *)a2 + 2) >= 2u)
      {
        int v5 = (uint64_t *)*a2;
LABEL_18:
        uint64_t v17 = v5[1];
      }
      else
      {
        uint64_t v17 = 0;
      }
      if (*(_DWORD *)a4) {
        return result;
      }
      int v9 = 0;
      unsigned int v8 = 0;
      int v11 = 0;
LABEL_99:
      *(_DWORD *)a4 = v9;
      *(void *)(a4 + 8) = v8;
      *(_DWORD *)(a4 + 16) = v11;
      return result;
  }
}

void anonymous namespace'::Remangler::mangleNominalType(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, std::string::value_type *a6@<X5>, std::string::size_type a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t v13 = (uint64_t *)a2;
  v17[0] = 0;
  v17[1] = 0;
  char v18 = 0;
  if (*(_WORD *)(a2 + 16) == 232)
  {
    int v16 = *(unsigned __int8 *)(a2 + 18);
    if ((v16 - 1) < 2)
    {
LABEL_6:
      unint64_t v13 = (uint64_t *)*v13;
      goto LABEL_8;
    }
    if (v16 == 5 && *(_DWORD *)(a2 + 8))
    {
      unint64_t v13 = *(uint64_t **)a2;
      goto LABEL_6;
    }
    unint64_t v13 = 0;
  }
LABEL_8:
  {
    if (*(_DWORD *)a8) {
      return;
    }
    swift::Demangle::__runtime::RemanglerBase::addSubstitution(a1, (const swift::Demangle::__runtime::SubstitutionEntry *)v17);
  }
  *(_DWORD *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(_DWORD *)(a8 + 16) = 0;
}

uint64_t anonymous namespace'::Remangler::trySubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::SubstitutionEntry *a3)
{
    return 1;
  swift::Demangle::__runtime::RemanglerBase::entryForNode((uint64_t *)&v22, this, a2, 0);
  *(_OWORD *)a3 = v22;
  *((unsigned char *)a3 + 16) = v23;
  unsigned int Substitution = swift::Demangle::__runtime::RemanglerBase::findSubstitution(this, (swift::Demangle::__runtime::Node **)a3);
  if ((Substitution & 0x80000000) != 0) {
    return 0;
  }
  unsigned int v7 = Substitution;
  unsigned int v8 = *((_DWORD *)this + 3184);
  size_t v9 = *((unsigned int *)this + 3185);
  int v10 = (char *)*((void *)this + 1591);
  if (v8 >= v9)
  {
    int v11 = (void *)*((void *)this + 1593);
    int v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      unint64_t v15 = (unint64_t)&v10[v9 + 1];
      unint64_t v13 = v11[2];
      if (v15 <= v13)
      {
        v11[1] = v15;
        LODWORD(v16) = 1;
LABEL_22:
        *((_DWORD *)this + 3185) = v9 + v16;
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v13 = v11[2];
    }
    if ((2 * v9) <= 4) {
      uint64_t v16 = 4;
    }
    else {
      uint64_t v16 = (2 * v9);
    }
    size_t v17 = v16 + v9;
    if (v12) {
      BOOL v18 = (unint64_t)&v12[v16 + v9] > v13;
    }
    else {
      BOOL v18 = 1;
    }
    int v10 = (char *)v11[1];
    if (v18)
    {
      unint64_t v19 = 2 * v11[4];
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      _OWORD v11[4] = v19;
      unint64_t v20 = v19 + 8;
      unsigned int v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      *unsigned int v21 = v11[3];
      int v10 = (char *)(v21 + 1);
      void v11[2] = (char *)v21 + v20;
      void v11[3] = v21;
    }
    v11[1] = &v10[v17];
    if (v9) {
      memcpy(v10, *((const void **)this + 1591), v9);
    }
    *((void *)this + 1591) = v10;
    LODWORD(v9) = *((_DWORD *)this + 3185);
    unsigned int v8 = *((_DWORD *)this + 3184);
    goto LABEL_22;
  }
LABEL_23:
  *((_DWORD *)this + 3184) = v8 + 1;
  v10[v8] = 83;
  return 1;
}

void anonymous namespace'::Remangler::mangleNamedEntity(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, const void *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>, std::string::value_type *__s, std::string::size_type a10)
{
  size_t v12 = a5;
  unint64_t v13 = a4;
  char v14 = a3;
  unint64_t v15 = a2;
  int v18 = *((unsigned __int8 *)a2 + 18);
  if (v18 != 2 && (v18 != 5 || *((_DWORD *)a2 + 2) != 2))
  {
    *(_DWORD *)a8 = 1;
    *(void *)(a8 + 8) = a2;
    *(_DWORD *)(a8 + 16) = 1349;
    return;
  }
  if (a3)
  {
    unsigned int v19 = *(_DWORD *)(a1 + 12736);
    size_t v20 = *(unsigned int *)(a1 + 12740);
    unsigned int v21 = *(unsigned char **)(a1 + 12728);
    if (v19 < v20)
    {
LABEL_25:
      *(_DWORD *)(a1 + 12736) = v19 + 1;
      v21[v19] = v14;
      int v18 = *((unsigned __int8 *)v15 + 18);
      goto LABEL_26;
    }
    long long v22 = *(void **)(a1 + 12744);
    char v23 = (unsigned char *)v22[1];
    if (&v21[v20] == v23)
    {
      unint64_t v25 = (unint64_t)&v21[v20 + 1];
      unint64_t v24 = v22[2];
      if (v25 <= v24)
      {
        v22[1] = v25;
        int v32 = 1;
        unint64_t v13 = a4;
LABEL_24:
        *(_DWORD *)(a1 + 12740) = v20 + v32;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v24 = v22[2];
    }
    LODWORD(v26) = 2 * v20;
    if ((2 * v20) <= 4) {
      uint64_t v26 = 4;
    }
    else {
      uint64_t v26 = v26;
    }
    int v55 = v26;
    size_t v27 = v26 + v20;
    unint64_t v28 = (unint64_t)&v23[v26 + v20];
    if (v23) {
      BOOL v29 = v28 > v24;
    }
    else {
      BOOL v29 = 1;
    }
    unsigned int v21 = (unsigned char *)v22[1];
    if (v29)
    {
      unint64_t v30 = 2 * v22[4];
      if (v30 <= v27 + 1) {
        unint64_t v30 = v27 + 1;
      }
      v22[4] = v30;
      unint64_t v54 = v30 + 8;
      int v31 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      *int v31 = v22[3];
      unsigned int v21 = v31 + 1;
      void v22[2] = (char *)v31 + v54;
      void v22[3] = v31;
    }
    v22[1] = &v21[v27];
    if (v20) {
      memcpy(v21, *(const void **)(a1 + 12728), v20);
    }
    *(void *)(a1 + 12728) = v21;
    LODWORD(v20) = *(_DWORD *)(a1 + 12740);
    unsigned int v19 = *(_DWORD *)(a1 + 12736);
    size_t v12 = a5;
    unint64_t v13 = a4;
    int v32 = v55;
    goto LABEL_24;
  }
LABEL_26:
  unsigned int v33 = v18 - 1;
  unint64_t v34 = v15;
  if (v33 >= 2) {
    unint64_t v34 = (void *)*v15;
  }
  uint64_t v35 = (a7 + 1);
  if (!*(_DWORD *)a8)
  {
    swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), v13, v12, *(void **)(a1 + 12744));
    std::string __p = *(std::string *)(a6 + 8);
    *(void *)(a6 + 16) = 0;
    *(void *)(a6 + 24) = 0;
    *(void *)(a6 + 8) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__p.__r_.__value_.__l.__size_) {
        goto LABEL_38;
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
        goto LABEL_38;
      }
      p_p = &__p;
    }
    if (p_p->__r_.__value_.__s.__data_[0] - 48 <= 9)
    {
      std::operator+<char>();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v59;
    }
LABEL_38:
    if (a10) {
      std::string::append(&__p, __s, a10);
    }
    int v37 = *((unsigned __int8 *)v15 + 18);
    if (v37 != 2)
    {
      if (v37 != 5 || *((_DWORD *)v15 + 2) < 2u)
      {
        unint64_t v38 = 0;
LABEL_46:
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        if (!size || *((_WORD *)v38 + 8) != 101) {
          goto LABEL_75;
        }
        unsigned int v40 = *(_DWORD *)(a1 + 12736);
        size_t v41 = *(unsigned int *)(a1 + 12740);
        size_t v42 = *(char **)(a1 + 12728);
        if (v40 < v41)
        {
LABEL_68:
          *(_DWORD *)(a1 + 12736) = v40 + 1;
          v42[v40] = 80;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v52 = &__p;
          }
          else {
            unint64_t v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
          }
          swift::Demangle::__runtime::CharVector::append((unsigned int *)(a1 + 12728), v53, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 12744));
          swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), v52, v53, *(void **)(a1 + 12744));
          *(_DWORD *)a8 = 0;
          *(void *)(a8 + 8) = 0;
          *(_DWORD *)(a8 + 16) = 0;
LABEL_75:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        }
        int v43 = *(void **)(a1 + 12744);
        size_t v44 = (char *)v43[1];
        if (&v42[v41] == v44)
        {
          unint64_t v46 = (unint64_t)&v42[v41 + 1];
          unint64_t v45 = v43[2];
          if (v46 <= v45)
          {
            v43[1] = v46;
            LODWORD(v47) = 1;
LABEL_67:
            *(_DWORD *)(a1 + 12740) = v41 + v47;
            goto LABEL_68;
          }
        }
        else
        {
          unint64_t v45 = v43[2];
        }
        if ((2 * v41) <= 4) {
          uint64_t v47 = 4;
        }
        else {
          uint64_t v47 = (2 * v41);
        }
        size_t v48 = v47 + v41;
        if (!v44 || (unint64_t)&v44[v48] > v45)
        {
          unint64_t v49 = 2 * v43[4];
          if (v49 <= v48 + 1) {
            unint64_t v49 = v48 + 1;
          }
          v43[4] = v49;
          int v58 = v47;
          uint64_t v47 = v49 + 8;
          unint64_t v50 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
          *unint64_t v50 = v43[3];
          size_t v44 = (char *)(v50 + 1);
          unint64_t v51 = (char *)v50 + v47;
          LODWORD(v47) = v58;
          v43[2] = v51;
          void v43[3] = v50;
        }
        v43[1] = &v44[v48];
        if (v41) {
          memcpy(v44, *(const void **)(a1 + 12728), v41);
        }
        *(void *)(a1 + 12728) = v44;
        LODWORD(v41) = *(_DWORD *)(a1 + 12740);
        size_t v42 = v44;
        unsigned int v40 = *(_DWORD *)(a1 + 12736);
        goto LABEL_67;
      }
      unint64_t v15 = (uint64_t *)*v15;
    }
    unint64_t v38 = (swift::Demangle::__runtime::Node *)v15[1];
    goto LABEL_46;
  }
}

uint64_t anonymous namespace'::Remangler::mangleStandardSubstitution(char **this, swift::Demangle::__runtime::Node *a2)
{
  int v2 = *((unsigned __int16 *)a2 + 8);
  if (v2 == 61)
  {
    int v10 = *((unsigned __int8 *)a2 + 18);
    int v11 = a2;
    if ((v10 - 1) >= 2)
    {
      if (v10 != 5 || !*((_DWORD *)a2 + 2))
      {
        size_t v12 = 0;
        goto LABEL_24;
      }
      int v11 = *(swift::Demangle::__runtime::Node **)a2;
    }
    size_t v12 = *(uint64_t **)v11;
LABEL_24:
    if (*((_WORD *)v12 + 8) != 153 || v12[1] != 5) {
      return 0;
    }
    uint64_t v16 = (int *)*v12;
    int v17 = *v16;
    int v18 = *((unsigned __int8 *)v16 + 4);
    if (v17 != 1718187859 || v18 != 116) {
      return 0;
    }
    if (v10 == 5)
    {
      size_t v20 = *(swift::Demangle::__runtime::Node **)a2;
      if (*(_WORD *)(*(void *)(*(void *)a2 + 8) + 16) != 101) {
        return 0;
      }
    }
    else
    {
      size_t v20 = a2;
      if (*(_WORD *)(*((void *)a2 + 1) + 16) != 101) {
        return 0;
      }
    }
    uint64_t v33 = *((void *)v20 + 1);
    if (*(void *)(v33 + 8) == 8 && **(void **)v33 == 0x6C616E6F6974704FLL)
    {
      unsigned int v8 = "Sq";
    }
    else
    {
      if (v10 == 5) {
        a2 = *(swift::Demangle::__runtime::Node **)a2;
      }
      uint64_t v34 = *((void *)a2 + 1);
      if (*(void *)(v34 + 8) != 27) {
        return 0;
      }
      uint64_t v35 = *(uint64_t **)v34;
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      uint64_t v38 = v35[2];
      uint64_t v39 = *(uint64_t *)((char *)v35 + 19);
      BOOL v40 = v36 == 0x746963696C706D49 && v37 == 0x706172776E55796CLL;
      BOOL v41 = v40 && v38 == 0x6F6974704F646570;
      if (!v41 || v39 != 0x6C616E6F6974704FLL) {
        return 0;
      }
      unsigned int v8 = "SQ";
    }
    goto LABEL_57;
  }
  if (v2 == 219)
  {
    int v13 = *((unsigned __int8 *)a2 + 18);
    char v14 = a2;
    if ((v13 - 1) >= 2)
    {
      if (v13 != 5 || !*((_DWORD *)a2 + 2))
      {
        unint64_t v15 = 0;
        goto LABEL_35;
      }
      char v14 = *(swift::Demangle::__runtime::Node **)a2;
    }
    unint64_t v15 = *(uint64_t **)v14;
LABEL_35:
    if (*((_WORD *)v15 + 8) != 153 || v15[1] != 5) {
      return 0;
    }
    unsigned int v21 = (int *)*v15;
    int v22 = *v21;
    int v23 = *((unsigned __int8 *)v21 + 4);
    if (v22 != 1718187859 || v23 != 116) {
      return 0;
    }
    if (v13 == 5)
    {
      unint64_t v25 = *(swift::Demangle::__runtime::Node **)a2;
      if (*(_WORD *)(*(void *)(*(void *)a2 + 8) + 16) != 101) {
        return 0;
      }
    }
    else
    {
      unint64_t v25 = a2;
      if (*(_WORD *)(*((void *)a2 + 1) + 16) != 101) {
        return 0;
      }
    }
    int v43 = (int **)*((void *)v25 + 1);
    if (v43[1] == (int *)5
      && ((size_t v44 = *v43, v45 = *v44, v46 = *((unsigned __int8 *)v44 + 4), v45 == 1634890305)
        ? (BOOL v47 = v46 == 121)
        : (BOOL v47 = 0),
          v47))
    {
      unsigned int v8 = "Sa";
    }
    else
    {
      size_t v48 = a2;
      if (v13 == 5) {
        size_t v48 = *(swift::Demangle::__runtime::Node **)a2;
      }
      uint64_t v49 = *((void *)v48 + 1);
      if (*(void *)(v49 + 8) == 4 && **(_DWORD **)v49 == 1819242306)
      {
        unsigned int v8 = "Sb";
      }
      else
      {
        unint64_t v50 = a2;
        if (v13 == 5) {
          unint64_t v50 = *(swift::Demangle::__runtime::Node **)a2;
        }
        uint64_t v51 = *((void *)v50 + 1);
        if (*(void *)(v51 + 8) == 13
          && ((v52 = *(uint64_t **)v51, uint64_t v53 = *v52, v54 = *(uint64_t *)((char *)v52 + 5), v53 == 0x5365646F63696E55)
            ? (BOOL v55 = v54 == 0x72616C6163536564)
            : (BOOL v55 = 0),
              v55))
        {
          unsigned int v8 = "Sc";
        }
        else
        {
          uint64_t v56 = a2;
          if (v13 == 5) {
            uint64_t v56 = *(swift::Demangle::__runtime::Node **)a2;
          }
          unint64_t v57 = (int **)*((void *)v56 + 1);
          if (v57[1] == (int *)6
            && ((int v58 = *v57, v59 = *v58, v60 = *((unsigned __int16 *)v58 + 2), v59 == 1651863364)
              ? (BOOL v61 = v60 == 25964)
              : (BOOL v61 = 0),
                v61))
          {
            unsigned int v8 = "Sd";
          }
          else
          {
            unint64_t v62 = a2;
            if (v13 == 5) {
              unint64_t v62 = *(swift::Demangle::__runtime::Node **)a2;
            }
            unint64_t v63 = (int **)*((void *)v62 + 1);
            if (v63[1] == (int *)5
              && ((uint64_t v64 = *v63, v65 = *v64, v66 = *((unsigned __int8 *)v64 + 4), v65 == 1634692166)
                ? (BOOL v67 = v66 == 116)
                : (BOOL v67 = 0),
                  v67))
            {
              unsigned int v8 = "Sf";
            }
            else
            {
              int v68 = a2;
              if (v13 == 5) {
                int v68 = *(swift::Demangle::__runtime::Node **)a2;
              }
              size_t v69 = (unsigned __int16 **)*((void *)v68 + 1);
              if (v69[1] == (unsigned __int16 *)3
                && ((v70 = *v69, int v71 = *v70, v72 = *((unsigned __int8 *)v70 + 2), v71 == 28233)
                  ? (BOOL v73 = v72 == 116)
                  : (BOOL v73 = 0),
                    v73))
              {
                unsigned int v8 = "Si";
              }
              else
              {
                unint64_t v74 = a2;
                if (v13 == 5) {
                  unint64_t v74 = *(swift::Demangle::__runtime::Node **)a2;
                }
                uint64_t v75 = *((void *)v74 + 1);
                if (*(void *)(v75 + 8) == 16
                  && ((unint64_t v76 = *(uint64_t **)v75, v78 = *v76, v77 = v76[1], v78 == 0x6152656661736E55)
                    ? (BOOL v79 = v77 == 0x7265746E696F5077)
                    : (BOOL v79 = 0),
                      v79))
                {
                  unsigned int v8 = "SV";
                }
                else
                {
                  unint64_t v80 = a2;
                  if (v13 == 5) {
                    unint64_t v80 = *(swift::Demangle::__runtime::Node **)a2;
                  }
                  uint64_t v81 = *((void *)v80 + 1);
                  if (*(void *)(v81 + 8) == 23
                    && ((uint64_t v82 = *(uint64_t **)v81,
                         uint64_t v83 = *v82,
                         uint64_t v84 = v82[1],
                         uint64_t v85 = *(uint64_t *)((char *)v82 + 15),
                         v83 == 0x754D656661736E55)
                      ? (BOOL v86 = v84 == 0x776152656C626174)
                      : (BOOL v86 = 0),
                        v86 ? (BOOL v87 = v85 == 0x7265746E696F5077) : (BOOL v87 = 0),
                        v87))
                  {
                    unsigned int v8 = "Sv";
                  }
                  else
                  {
                    unint64_t v88 = a2;
                    if (v13 == 5) {
                      unint64_t v88 = *(swift::Demangle::__runtime::Node **)a2;
                    }
                    uint64_t v89 = *((void *)v88 + 1);
                    if (*(void *)(v89 + 8) == 13
                      && ((uint64_t v90 = *(uint64_t **)v89,
                           uint64_t v91 = *v90,
                           uint64_t v92 = *(uint64_t *)((char *)v90 + 5),
                           v91 == 0x6F50656661736E55)
                        ? (BOOL v93 = v92 == 0x7265746E696F5065)
                        : (BOOL v93 = 0),
                          v93))
                    {
                      unsigned int v8 = "SP";
                    }
                    else
                    {
                      unint64_t v94 = a2;
                      if (v13 == 5) {
                        unint64_t v94 = *(swift::Demangle::__runtime::Node **)a2;
                      }
                      uint64_t v95 = (uint64_t **)*((void *)v94 + 1);
                      if (v95[1] == (uint64_t *)20
                        && ((unint64_t v96 = *v95,
                             uint64_t v97 = *v96,
                             uint64_t v98 = v96[1],
                             int v99 = *((_DWORD *)v96 + 4),
                             v97 == 0x754D656661736E55)
                          ? (BOOL v100 = v98 == 0x696F50656C626174)
                          : (BOOL v100 = 0),
                            v100 ? (BOOL v101 = v99 == 1919251566) : (BOOL v101 = 0),
                            v101))
                      {
                        unsigned int v8 = "Sp";
                      }
                      else
                      {
                        unint64_t v102 = a2;
                        if (v13 == 5) {
                          unint64_t v102 = *(swift::Demangle::__runtime::Node **)a2;
                        }
                        uint64_t v103 = *((void *)v102 + 1);
                        if (*(void *)(v103 + 8) == 19
                          && ((unint64_t v104 = *(uint64_t **)v103,
                               uint64_t v105 = *v104,
                               uint64_t v106 = v104[1],
                               uint64_t v107 = *(uint64_t *)((char *)v104 + 11),
                               v105 == 0x7542656661736E55)
                            ? (BOOL v108 = v106 == 0x6E696F5072656666)
                            : (BOOL v108 = 0),
                              v108 ? (BOOL v109 = v107 == 0x7265746E696F5072) : (BOOL v109 = 0),
                              v109))
                        {
                          unsigned int v8 = "SR";
                        }
                        else
                        {
                          uint64_t v110 = a2;
                          if (v13 == 5) {
                            uint64_t v110 = *(swift::Demangle::__runtime::Node **)a2;
                          }
                          unint64_t v111 = (uint64_t **)*((void *)v110 + 1);
                          if (v111[1] != (uint64_t *)26) {
                            goto LABEL_172;
                          }
                          uint64_t v112 = *v111;
                          uint64_t v113 = *v112;
                          uint64_t v114 = v112[1];
                          uint64_t v115 = v112[2];
                          int v116 = *((unsigned __int16 *)v112 + 12);
                          BOOL v117 = v113 == 0x754D656661736E55 && v114 == 0x667542656C626174;
                          BOOL v118 = v117 && v115 == 0x746E696F50726566;
                          if (v118 && v116 == 29285)
                          {
                            unsigned int v8 = "Sr";
                          }
                          else
                          {
LABEL_172:
                            unint64_t v120 = a2;
                            if (v13 == 5) {
                              unint64_t v120 = *(swift::Demangle::__runtime::Node **)a2;
                            }
                            unint64_t v121 = (int **)*((void *)v120 + 1);
                            if (v121[1] == (int *)6
                              && ((v122 = *v121, int v123 = *v122,
                                                 int v124 = *((unsigned __int16 *)v122 + 2),
                                                 v123 == 1769108563)
                                ? (BOOL v125 = v124 == 26478)
                                : (BOOL v125 = 0),
                                  v125))
                            {
                              unsigned int v8 = "SS";
                            }
                            else
                            {
                              if (v13 == 5) {
                                a2 = *(swift::Demangle::__runtime::Node **)a2;
                              }
                              uint64_t v126 = *((void *)a2 + 1);
                              if (*(void *)(v126 + 8) != 4 || **(_DWORD **)v126 != 1953384789) {
                                return 0;
                              }
                              unsigned int v8 = "Su";
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_57:
    size_t v9 = 2;
    goto LABEL_58;
  }
  if (v2 != 153) {
    return 0;
  }
  int v3 = *(unsigned __int16 **)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4 == 3)
  {
    int v26 = *v3;
    int v27 = *((unsigned __int8 *)v3 + 2);
    if (v26 != 24415 || v27 != 67) {
      return 0;
    }
    unsigned int v8 = "So";
    goto LABEL_57;
  }
  if (v4 == 15)
  {
    uint64_t v29 = *(void *)v3;
    uint64_t v30 = *(void *)((char *)v3 + 7);
    if (v29 != 0x746E79535F435F5FLL || v30 != 0x64657A6973656874) {
      return 0;
    }
    unsigned int v8 = "SC";
    goto LABEL_57;
  }
  if (v4 != 5) {
    return 0;
  }
  int v5 = *(_DWORD *)v3;
  int v6 = *((unsigned __int8 *)v3 + 4);
  if (v5 != 1718187859 || v6 != 116) {
    return 0;
  }
  unsigned int v8 = "s";
  size_t v9 = 1;
LABEL_58:
  swift::Demangle::__runtime::CharVector::append(this + 1591, v8, v9, this[1593]);
  return 1;
}

void *anonymous namespace'::Remangler::mangleIdentifier@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  size_t v5 = a3;
  unsigned int v8 = "oi";
  switch(a4)
  {
    case 0:
      swift::Demangle::__runtime::CharVector::append((unsigned int *)(a1 + 12728), a3, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 12744));
      double result = swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a2, v5, *(void **)(a1 + 12744));
      goto LABEL_7;
    case 1:
      unsigned int v8 = "op";
      goto LABEL_5;
    case 2:
      unsigned int v8 = "oP";
      goto LABEL_5;
    case 3:
LABEL_5:
      swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), v8, 2uLL, *(void **)(a1 + 12744));
      break;
    default:
      break;
  }
  double result = swift::Demangle::__runtime::CharVector::append((unsigned int *)(a1 + 12728), v5, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 12744));
  if (v5)
  {
    while (1)
    {
      double result = (void *)swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)*a2);
      char v12 = (char)result;
      unsigned int v11 = *(_DWORD *)(a1 + 12736);
      size_t v10 = *(unsigned int *)(a1 + 12740);
      int v13 = *(unsigned char **)(a1 + 12728);
      if (v11 < v10) {
        goto LABEL_10;
      }
      char v14 = *(void **)(a1 + 12744);
      unint64_t v15 = (unsigned char *)v14[1];
      if (&v13[v10] != v15) {
        break;
      }
      unint64_t v17 = (unint64_t)&v13[v10 + 1];
      unint64_t v16 = v14[2];
      if (v17 > v16) {
        goto LABEL_15;
      }
      v14[1] = v17;
      LODWORD(v18) = 1;
LABEL_9:
      *(_DWORD *)(a1 + 12740) = v10 + v18;
LABEL_10:
      *(_DWORD *)(a1 + 12736) = v11 + 1;
      v13[v11] = v12;
      ++a2;
      if (!--v5) {
        goto LABEL_7;
      }
    }
    unint64_t v16 = v14[2];
LABEL_15:
    if ((2 * v10) <= 4) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = (2 * v10);
    }
    size_t v19 = v18 + v10;
    if (v15) {
      BOOL v20 = (unint64_t)&v15[v18 + v10] > v16;
    }
    else {
      BOOL v20 = 1;
    }
    int v13 = (unsigned char *)v14[1];
    if (v20)
    {
      unint64_t v21 = 2 * v14[4];
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      v14[4] = v21;
      unint64_t v22 = v21 + 8;
      double result = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      int v23 = (char *)result + v22;
      void *result = v14[3];
      int v13 = result + 1;
      void v14[2] = v23;
      void v14[3] = result;
    }
    v14[1] = &v13[v19];
    if (v10) {
      double result = memcpy(v13, *(const void **)(a1 + 12728), v10);
    }
    *(void *)(a1 + 12728) = v13;
    LODWORD(v10) = *(_DWORD *)(a1 + 12740);
    unsigned int v11 = *(_DWORD *)(a1 + 12736);
    goto LABEL_9;
  }
LABEL_7:
  *(_DWORD *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  return result;
}

char *anonymous namespace'::Remangler::mangleSimpleEntity@<X0>(char *result@<X0>, uint64_t *a2@<X1>, char a3@<W2>, const void *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  size_t v10 = a5;
  unsigned int v11 = a4;
  int v13 = a2;
  char v14 = result;
  int v16 = *((unsigned __int8 *)a2 + 18);
  if (v16 != 1 && (v16 != 5 || *((_DWORD *)a2 + 2) != 1))
  {
    int v23 = 1338;
    int v24 = 1;
LABEL_29:
    *(_DWORD *)a8 = v24;
    *(void *)(a8 + 8) = v13;
    *(_DWORD *)(a8 + 16) = v23;
    return result;
  }
  uint64_t v38 = (const void **)(result + 12728);
  unsigned int v17 = *((_DWORD *)result + 3184);
  size_t v18 = *((unsigned int *)result + 3185);
  size_t v19 = (char *)*((void *)result + 1591);
  if (v17 >= v18)
  {
    BOOL v20 = (void *)*((void *)result + 1593);
    unint64_t v21 = (char *)v20[1];
    if (&v19[v18] == v21)
    {
      unint64_t v25 = (unint64_t)&v19[v18 + 1];
      unint64_t v22 = v20[2];
      if (v25 <= v22)
      {
        v20[1] = v25;
        int v34 = 1;
        unsigned int v11 = a4;
LABEL_24:
        *((_DWORD *)v14 + 3185) = v18 + v34;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v22 = v20[2];
    }
    LODWORD(v26) = 2 * v18;
    if ((2 * v18) <= 4) {
      uint64_t v26 = 4;
    }
    else {
      uint64_t v26 = v26;
    }
    int v35 = v26;
    size_t v27 = v26 + v18;
    unint64_t v28 = (unint64_t)&v21[v26 + v18];
    if (v21) {
      BOOL v29 = v28 > v22;
    }
    else {
      BOOL v29 = 1;
    }
    size_t v19 = (char *)v20[1];
    if (v29)
    {
      unint64_t v30 = 2 * v20[4];
      if (v30 <= v27 + 1) {
        unint64_t v30 = v27 + 1;
      }
      v20[4] = v30;
      unint64_t v31 = v30 + 8;
      int v32 = malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      uint64_t v33 = (char *)v32 + v31;
      *int v32 = v20[3];
      size_t v19 = (char *)(v32 + 1);
      void v20[2] = v33;
      void v20[3] = v32;
    }
    v20[1] = &v19[v27];
    if (v18) {
      memcpy(v19, *v38, v18);
    }
    *((void *)v14 + 1591) = v19;
    LODWORD(v18) = *((_DWORD *)v14 + 3185);
    unsigned int v17 = *((_DWORD *)v14 + 3184);
    size_t v10 = a5;
    unsigned int v11 = a4;
    int v34 = v35;
    goto LABEL_24;
  }
LABEL_25:
  *((_DWORD *)v14 + 3184) = v17 + 1;
  v19[v17] = a3;
  if (*((unsigned __int8 *)v13 + 18) - 1 >= 2) {
    int v13 = (uint64_t *)*v13;
  }
  if (!*(_DWORD *)a8)
  {
    double result = (char *)swift::Demangle::__runtime::CharVector::append((char **)v38, v11, v10, *((void **)v14 + 1593));
    int v24 = 0;
    int v13 = 0;
    int v23 = 0;
    goto LABEL_29;
  }
  return result;
}

void *anonymous namespace'::Remangler::mangleAccessor@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  size_t v9 = a4;
  size_t v10 = a3;
  char v14 = (char **)(a1 + 12728);
  unsigned int v15 = *(_DWORD *)(a1 + 12736);
  size_t v16 = *(unsigned int *)(a1 + 12740);
  unsigned int v17 = *(char **)(a1 + 12728);
  if (v15 >= v16)
  {
    size_t v18 = *(void **)(a1 + 12744);
    size_t v19 = (char *)v18[1];
    if (&v17[v16] == v19)
    {
      unint64_t v21 = (unint64_t)&v17[v16 + 1];
      unint64_t v20 = v18[2];
      if (v21 <= v20)
      {
        v18[1] = v21;
        LODWORD(v23) = 1;
LABEL_19:
        *(_DWORD *)(a1 + 12740) = v16 + v23;
        size_t v10 = a3;
        size_t v9 = a4;
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v20 = v18[2];
    }
    uint64_t v51 = a7;
    unint64_t v22 = (const void **)(a1 + 12728);
    if ((2 * v16) <= 4) {
      uint64_t v23 = 4;
    }
    else {
      uint64_t v23 = (2 * v16);
    }
    size_t v24 = v23 + v16;
    if (v19) {
      BOOL v25 = (unint64_t)&v19[v23 + v16] > v20;
    }
    else {
      BOOL v25 = 1;
    }
    unsigned int v17 = (char *)v18[1];
    if (v25)
    {
      unint64_t v26 = 2 * v18[4];
      if (v26 <= v24 + 1) {
        unint64_t v26 = v24 + 1;
      }
      void v18[4] = v26;
      unint64_t v27 = v26 + 8;
      unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      BOOL v29 = (char *)v28 + v27;
      void *v28 = v18[3];
      unsigned int v17 = (char *)(v28 + 1);
      uint64_t v18[2] = v29;
      void v18[3] = v28;
    }
    v18[1] = &v17[v24];
    char v14 = (char **)v22;
    if (v16) {
      memcpy(v17, *v22, v16);
    }
    *(void *)(a1 + 12728) = v17;
    LODWORD(v16) = *(_DWORD *)(a1 + 12740);
    unsigned int v15 = *(_DWORD *)(a1 + 12736);
    a7 = v51;
    goto LABEL_19;
  }
LABEL_20:
  *(_DWORD *)(a1 + 12736) = v15 + 1;
  v17[v15] = 70;
  int v30 = *((unsigned __int8 *)a2 + 18);
  unint64_t v31 = a2;
  if ((v30 - 1) < 2)
  {
LABEL_24:
    uint64_t v32 = *v31;
    goto LABEL_26;
  }
  if (v30 == 5 && *((_DWORD *)a2 + 2))
  {
    unint64_t v31 = (uint64_t *)*a2;
    goto LABEL_24;
  }
  uint64_t v32 = 0;
LABEL_26:
  uint64_t v33 = (a6 + 1);
  if (*(_DWORD *)a7) {
    return result;
  }
  double result = swift::Demangle::__runtime::CharVector::append(v14, v10, v9, *(void **)(a1 + 12744));
  int v35 = *((unsigned __int16 *)a2 + 8);
  if (v35 != 220)
  {
    if (v35 == 254)
    {
      int v36 = *((unsigned __int8 *)a2 + 18);
      uint64_t v37 = a2;
      if (v36 == 2) {
        goto LABEL_33;
      }
      if (v36 == 5 && *((_DWORD *)a2 + 2) >= 2u)
      {
        uint64_t v37 = (uint64_t *)*a2;
LABEL_33:
        if (*(_DWORD *)a7) {
          return result;
        }
        if (*((unsigned char *)a2 + 18) == 5)
        {
          if (*((_DWORD *)a2 + 2) < 3u) {
            uint64_t v38 = 0;
          }
          else {
            uint64_t v38 = *(swift::Demangle::__runtime::Node **)(*a2 + 16);
          }
          unsigned int v50 = *((_DWORD *)a2 + 2);
          if (*((_WORD *)v38 + 8) == 290)
          {
            if (v50 >= 4)
            {
              size_t v48 = *(swift::Demangle::__runtime::Node **)(*a2 + 24);
              goto LABEL_73;
            }
            goto LABEL_72;
          }
          if (v50 >= 3)
          {
            uint64_t v49 = *(swift::Demangle::__runtime::Node ***)(*a2 + 16);
            goto LABEL_77;
          }
        }
LABEL_76:
        uint64_t v49 = 0;
        goto LABEL_77;
      }
      int v43 = 119;
      int v44 = 1;
    }
    else
    {
      int v43 = 1162;
      int v44 = 6;
    }
LABEL_79:
    *(_DWORD *)a7 = v44;
    *(void *)(a7 + 8) = a2;
    *(_DWORD *)(a7 + 16) = v43;
    return result;
  }
  int v39 = *((unsigned __int8 *)a2 + 18);
  if (v39 == 1)
  {
    uint64_t v41 = 0;
LABEL_46:
    size_t v42 = a2;
    goto LABEL_47;
  }
  if (v39 != 5)
  {
    uint64_t v41 = 1;
    goto LABEL_46;
  }
  uint64_t v40 = *((unsigned int *)a2 + 2);
  if (v40 >= 5)
  {
    int v43 = 1151;
    int v44 = 1;
    goto LABEL_79;
  }
  uint64_t v41 = v40 - 1;
  size_t v42 = (uint64_t *)*a2;
LABEL_47:
  int v45 = (swift::Demangle::__runtime::Node *)v42[v41];
  if (*((_WORD *)v45 + 8) != 176
        !*(_DWORD *)a7))
  {
    swift::Demangle::__runtime::CharVector::append((unsigned int *)v14, 9uLL, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 12744));
    swift::Demangle::__runtime::CharVector::append(v14, "subscript", 9uLL, *(void **)(a1 + 12744));
    *(_DWORD *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 0;
    int v46 = *((unsigned __int8 *)a2 + 18);
    BOOL v47 = a2;
    if (v46 != 2)
    {
      uint64_t v38 = 0;
      if (v46 != 5)
      {
LABEL_54:
        if (*((_WORD *)v38 + 8) == 290)
        {
          if (v46 != 5) {
            goto LABEL_72;
          }
          goto LABEL_63;
        }
        if (v46 == 2)
        {
LABEL_67:
          uint64_t v49 = (swift::Demangle::__runtime::Node **)a2[1];
LABEL_77:
          int v43 = *(_DWORD *)a7;
          if (*(_DWORD *)a7) {
            return result;
          }
          int v44 = 0;
          a2 = 0;
          goto LABEL_79;
        }
        if (v46 != 5) {
          goto LABEL_76;
        }
LABEL_65:
        if (*((_DWORD *)a2 + 2) < 2u) {
          goto LABEL_76;
        }
        a2 = (uint64_t *)*a2;
        goto LABEL_67;
      }
      if (*((_DWORD *)a2 + 2) < 2u)
      {
        if (MEMORY[0x10] == 290)
        {
          uint64_t v38 = 0;
LABEL_63:
          if (*((_DWORD *)a2 + 2) >= 3u)
          {
            size_t v48 = *(swift::Demangle::__runtime::Node **)(*a2 + 16);
LABEL_73:
            uint64_t v49 = (swift::Demangle::__runtime::Node **)applyParamLabels(v38, v48, *(swift::Demangle::__runtime::NodeFactory **)a1);
            goto LABEL_77;
          }
LABEL_72:
          size_t v48 = 0;
          goto LABEL_73;
        }
        goto LABEL_65;
      }
      BOOL v47 = (uint64_t *)*a2;
    }
    uint64_t v38 = (swift::Demangle::__runtime::Node *)v47[1];
    goto LABEL_54;
  }
  return result;
}

char *anonymous namespace'::Remangler::mangleNamedAndTypedEntity@<X0>(char *result@<X0>, uint64_t *a2@<X1>, char a3@<W2>, const void *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  unsigned int v8 = a2;
  if (*((unsigned char *)a2 + 18) != 5 || (*((_DWORD *)a2 + 2) - 3) > 1)
  {
    int v23 = 1398;
    goto LABEL_7;
  }
  size_t v12 = a5;
  int v13 = a4;
  unsigned int v15 = result;
  size_t v16 = (char **)(result + 12728);
  unsigned int v17 = *((_DWORD *)result + 3184);
  size_t v18 = *((unsigned int *)result + 3185);
  size_t v19 = (char *)*((void *)result + 1591);
  if (v17 >= v18)
  {
    uint64_t v41 = (const void **)(result + 12728);
    unint64_t v20 = (void *)*((void *)result + 1593);
    unint64_t v21 = (char *)v20[1];
    if (&v19[v18] == v21)
    {
      unint64_t v25 = (unint64_t)&v19[v18 + 1];
      unint64_t v22 = v20[2];
      if (v25 <= v22)
      {
        v20[1] = v25;
        int v32 = 1;
        int v13 = a4;
        size_t v16 = (char **)(result + 12728);
LABEL_22:
        *((_DWORD *)v15 + 3185) = v18 + v32;
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v22 = v20[2];
    }
    LODWORD(v26) = 2 * v18;
    if ((2 * v18) <= 4) {
      uint64_t v26 = 4;
    }
    else {
      uint64_t v26 = v26;
    }
    int v38 = v26;
    size_t v27 = v26 + v18;
    if (!v21 || (unint64_t)&v21[v27] > v22)
    {
      unint64_t v28 = 2 * v20[4];
      if (v28 <= v27 + 1) {
        unint64_t v28 = v27 + 1;
      }
      v20[4] = v28;
      unint64_t v29 = v28 + 8;
      int v30 = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      unint64_t v31 = (char *)v30 + v29;
      *int v30 = v20[3];
      unint64_t v21 = (char *)(v30 + 1);
      void v20[2] = v31;
      void v20[3] = v30;
    }
    v20[1] = &v21[v27];
    if (v18) {
      memcpy(v21, *v41, v18);
    }
    *((void *)v15 + 1591) = v21;
    LODWORD(v18) = *((_DWORD *)v15 + 3185);
    size_t v19 = v21;
    unsigned int v17 = *((_DWORD *)v15 + 3184);
    size_t v12 = a5;
    int v13 = a4;
    size_t v16 = (char **)v41;
    int v32 = v38;
    goto LABEL_22;
  }
LABEL_23:
  *((_DWORD *)v15 + 3184) = v17 + 1;
  v19[v17] = a3;
  uint64_t v33 = v8;
  if (*((unsigned __int8 *)v8 + 18) - 1 >= 2) {
    uint64_t v33 = (void *)*v8;
  }
  uint64_t v34 = (a7 + 1);
  if (*(_DWORD *)a8) {
    return result;
  }
  double result = (char *)swift::Demangle::__runtime::CharVector::append(v16, v13, v12, *((void **)v15 + 1593));
  int v35 = *((unsigned __int8 *)v8 + 18);
  int v36 = v8;
  if (v35 != 2)
  {
    if (v35 == 5 && *((_DWORD *)v8 + 2) >= 2u)
    {
      int v36 = (uint64_t *)*v8;
      goto LABEL_30;
    }
    int v23 = 119;
LABEL_7:
    int v24 = 1;
LABEL_8:
    *(_DWORD *)a8 = v24;
    *(void *)(a8 + 8) = v8;
    *(_DWORD *)(a8 + 16) = v23;
    return result;
  }
LABEL_30:
  if (!*(_DWORD *)a8)
  {
    if (*((unsigned __int8 *)v8 + 18) - 1 > 1) {
      unsigned int v8 = (uint64_t *)*v8;
    }
    uint64_t v37 = *(_WORD *)(v8[2] + 16) == 290
        ? (swift::Demangle::__runtime::Node **)applyParamLabels((swift::Demangle::__runtime::Node *)v8[2], (swift::Demangle::__runtime::Node *)v8[3], *(swift::Demangle::__runtime::NodeFactory **)v15): (swift::Demangle::__runtime::Node **)v8[2];
    int v23 = *(_DWORD *)a8;
    if (!*(_DWORD *)a8)
    {
      int v24 = 0;
      unsigned int v8 = 0;
      goto LABEL_8;
    }
  }
  return result;
}

void applyParamLabels(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::NodeFactory &)::$_0::operator() const(swift::Demangle::__runtime::Node *)::{lambda(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a2 + 16) == 275) {
    goto LABEL_16;
  }
  unint64_t Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(void **)(a1 + 8), 224);
  unint64_t NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(*(void **)(a1 + 8), 225, *(void *)a2, *(void *)(a2 + 8));
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 8));
  int v8 = *(unsigned __int8 *)(a3 + 18);
  size_t v9 = (swift::Demangle::__runtime::Node **)a3;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      size_t v10 = *(swift::Demangle::__runtime::Node **)a3;
      size_t v9 = *(swift::Demangle::__runtime::Node ***)a3;
LABEL_10:
      unsigned int v11 = (swift::Demangle::__runtime::Node **)((char *)v10 + 8 * *(unsigned int *)(a3 + 8));
      goto LABEL_15;
    }
    size_t v9 = 0;
  }
  switch(v8)
  {
    case 1:
      unsigned int v11 = (swift::Demangle::__runtime::Node **)(a3 + 8);
      break;
    case 2:
      unsigned int v11 = (swift::Demangle::__runtime::Node **)(a3 + 16);
      break;
    case 5:
      size_t v10 = *(swift::Demangle::__runtime::Node **)a3;
      goto LABEL_10;
    default:
      unsigned int v11 = 0;
      break;
  }
LABEL_15:
  while (v9 != v11)
  {
    size_t v12 = *v9++;
    swift::Demangle::__runtime::Node::addChild(Node, v12, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 8));
  }
LABEL_16:

  JUMPOUT(0x1815BD944);
}

void anonymous namespace'::Remangler::mangleProtocolListWithoutPrefix(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, swift::Demangle::__runtime::Node *a3@<X3>, int a4@<W2>, uint64_t a5@<X8>)
{
  if (*((_WORD *)a2 + 8) != 190)
  {
    int v14 = 1881;
    int v15 = 1;
LABEL_47:
    *(_DWORD *)a5 = v15;
    *(void *)(a5 + 8) = a2;
    *(_DWORD *)(a5 + 16) = v14;
    return;
  }
  int v9 = *((unsigned __int8 *)a2 + 18);
  if (v9 == 1) {
    goto LABEL_6;
  }
  if (v9 != 5 || *((_DWORD *)a2 + 2) != 1)
  {
    int v14 = 1882;
    int v15 = 1;
    goto LABEL_47;
  }
  a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_6:
  a2 = *(swift::Demangle::__runtime::Node **)a2;
  size_t v10 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
  if (*((_WORD *)a2 + 8) != 235)
  {
    int v14 = 1884;
    int v15 = 1;
    goto LABEL_47;
  }
  int v11 = *((unsigned __int8 *)a2 + 18);
  size_t v12 = (swift::Demangle::__runtime::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      uint64_t v13 = *(void *)a2;
      size_t v12 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_18:
      size_t v10 = (swift::Demangle::__runtime::Node **)(v13 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_21;
    }
    size_t v12 = 0;
  }
  switch(v11)
  {
    case 1:
      size_t v10 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
      break;
    case 2:
      break;
    case 5:
      uint64_t v13 = *(void *)a2;
      goto LABEL_18;
    default:
      size_t v10 = 0;
      break;
  }
LABEL_21:
  if (v12 == v10)
  {
LABEL_24:
    if (a3)
    {
      if (*(_DWORD *)a5) {
        return;
      }
    }
    unsigned int v16 = *((_DWORD *)this + 3184);
    size_t v17 = *((unsigned int *)this + 3185);
    size_t v18 = (unsigned char *)*((void *)this + 1591);
    if (v16 < v17) {
      goto LABEL_46;
    }
    size_t v19 = (void *)*((void *)this + 1593);
    unint64_t v20 = (unsigned char *)v19[1];
    if (&v18[v17] == v20)
    {
      unint64_t v22 = (unint64_t)&v18[v17 + 1];
      unint64_t v21 = v19[2];
      if (v22 <= v21)
      {
        v19[1] = v22;
        LODWORD(v23) = 1;
LABEL_45:
        *((_DWORD *)this + 3185) = v17 + v23;
LABEL_46:
        int v15 = 0;
        a2 = 0;
        int v14 = 0;
        *((_DWORD *)this + 3184) = v16 + 1;
        v18[v16] = 95;
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v21 = v19[2];
    }
    if ((2 * v17) <= 4) {
      uint64_t v23 = 4;
    }
    else {
      uint64_t v23 = (2 * v17);
    }
    size_t v24 = v23 + v17;
    if (v20) {
      BOOL v25 = (unint64_t)&v20[v23 + v17] > v21;
    }
    else {
      BOOL v25 = 1;
    }
    size_t v18 = (unsigned char *)v19[1];
    if (v25)
    {
      unint64_t v26 = 2 * v19[4];
      if (v26 <= v24 + 1) {
        unint64_t v26 = v24 + 1;
      }
      v19[4] = v26;
      unint64_t v27 = v26 + 8;
      unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      unint64_t v29 = (char *)v28 + v27;
      void *v28 = v19[3];
      size_t v18 = v28 + 1;
      void v19[2] = v29;
      uint64_t v19[3] = v28;
    }
    v19[1] = &v18[v24];
    if (v17) {
      memcpy(v18, *((const void **)this + 1591), v17);
    }
    *((void *)this + 1591) = v18;
    LODWORD(v17) = *((_DWORD *)this + 3185);
    unsigned int v16 = *((_DWORD *)this + 3184);
    goto LABEL_45;
  }
  while (1)
  {
    if (*(_DWORD *)a5) {
      break;
    }
    if (++v12 == v10) {
      goto LABEL_24;
    }
  }
}

void anonymous namespace'::Remangler::mangleProtocolWithoutPrefix(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v5 = a2;
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return;
  }
  int v8 = *((unsigned __int16 *)v5 + 8);
  if (v8 == 232)
  {
    int v9 = *((unsigned __int8 *)v5 + 18);
    if (v9 != 1)
    {
      if (v9 != 5 || *((_DWORD *)v5 + 2) != 1)
      {
        *(_DWORD *)a4 = 1;
        *(void *)(a4 + 8) = v5;
        int v10 = 2284;
        goto LABEL_18;
      }
      size_t v5 = *(swift::Demangle::__runtime::Node **)v5;
    }
    size_t v5 = *(swift::Demangle::__runtime::Node **)v5;
    int v8 = *((unsigned __int16 *)v5 + 8);
  }
  if (v8 != 180)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = v5;
    int v10 = 2288;
LABEL_18:
    *(_DWORD *)(a4 + 16) = v10;
    return;
  }
  v11[0] = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  v15[0] = 0;
  v15[1] = 0;
  char v16 = 0;
  {
    if (*(_DWORD *)a4) {
      goto LABEL_14;
    }
    swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)this, (const swift::Demangle::__runtime::SubstitutionEntry *)v15);
  }
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_14:
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
}

unsigned int *anonymous namespace'::Remangler::mangleDependentGenericParamIndex@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (uint64_t)this;
  int v5 = *((unsigned __int8 *)a2 + 18);
  if ((v5 - 1) >= 2)
  {
    if (v5 == 5) {
      int v6 = *(swift::Demangle::__runtime::Node **)a2;
    }
    else {
      int v6 = a2;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  else
  {
    int v6 = a2;
  }
  uint64_t v7 = **(void **)a2;
  uint64_t v8 = **((void **)v6 + 1);
  if (v7)
  {
    unsigned int v9 = this[3184];
    size_t v10 = this[3185];
    int v11 = (unsigned char *)*((void *)this + 1591);
    if (v9 < v10)
    {
LABEL_32:
      *(_DWORD *)(v3 + 12736) = v9 + 1;
      v11[v9] = 100;
      this = (unsigned int *)v3;
      uint64_t v15 = v8;
      goto LABEL_33;
    }
    size_t v12 = (void *)*((void *)this + 1593);
    uint64_t v13 = (unsigned char *)v12[1];
    if (&v11[v10] == v13)
    {
      unint64_t v22 = (unint64_t)&v11[v10 + 1];
      unint64_t v14 = v12[2];
      if (v22 <= v14)
      {
        v12[1] = v22;
        LODWORD(v23) = 1;
LABEL_31:
        *(_DWORD *)(v3 + 12740) = v10 + v23;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v14 = v12[2];
    }
    if ((2 * v10) <= 4) {
      uint64_t v23 = 4;
    }
    else {
      uint64_t v23 = (2 * v10);
    }
    size_t v24 = v23 + v10;
    if (v13) {
      BOOL v25 = (unint64_t)&v13[v23 + v10] > v14;
    }
    else {
      BOOL v25 = 1;
    }
    int v11 = (unsigned char *)v12[1];
    if (v25)
    {
      unint64_t v26 = 2 * v12[4];
      if (v26 <= v24 + 1) {
        unint64_t v26 = v24 + 1;
      }
      _OWORD v12[4] = v26;
      unint64_t v27 = v26 + 8;
      unint64_t v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      unint64_t v29 = (char *)v28 + v27;
      void *v28 = v12[3];
      int v11 = v28 + 1;
      v12[2] = v29;
      void v12[3] = v28;
    }
    v12[1] = &v11[v24];
    if (v10) {
      memcpy(v11, *(const void **)(v3 + 12728), v10);
    }
    *(void *)(v3 + 12728) = v11;
    LODWORD(v10) = *(_DWORD *)(v3 + 12740);
    unsigned int v9 = *(_DWORD *)(v3 + 12736);
    goto LABEL_31;
  }
  if (!v8)
  {
    unsigned int v16 = this[3184];
    size_t v17 = this[3185];
    size_t v18 = (unsigned char *)*((void *)this + 1591);
    if (v16 < v17)
    {
LABEL_53:
      *(_DWORD *)(v3 + 12736) = v16 + 1;
      v18[v16] = 120;
      goto LABEL_34;
    }
    size_t v19 = (void *)*((void *)this + 1593);
    unint64_t v20 = (unsigned char *)v19[1];
    if (&v18[v17] == v20)
    {
      unint64_t v30 = (unint64_t)&v18[v17 + 1];
      unint64_t v21 = v19[2];
      if (v30 <= v21)
      {
        v19[1] = v30;
        LODWORD(v31) = 1;
LABEL_52:
        *(_DWORD *)(v3 + 12740) = v17 + v31;
        goto LABEL_53;
      }
    }
    else
    {
      unint64_t v21 = v19[2];
    }
    if ((2 * v17) <= 4) {
      uint64_t v31 = 4;
    }
    else {
      uint64_t v31 = (2 * v17);
    }
    size_t v32 = v31 + v17;
    if (v20) {
      BOOL v33 = (unint64_t)&v20[v31 + v17] > v21;
    }
    else {
      BOOL v33 = 1;
    }
    size_t v18 = (unsigned char *)v19[1];
    if (v33)
    {
      unint64_t v34 = 2 * v19[4];
      if (v34 <= v32 + 1) {
        unint64_t v34 = v32 + 1;
      }
      v19[4] = v34;
      unint64_t v35 = v34 + 8;
      this = (unsigned int *)malloc_type_malloc(v34 + 8, 0xD0263BC5uLL);
      int v36 = (char *)this + v35;
      *(void *)this = v19[3];
      size_t v18 = this + 2;
      void v19[2] = v36;
      uint64_t v19[3] = this;
    }
    v19[1] = &v18[v32];
    if (v17) {
      this = (unsigned int *)memcpy(v18, *(const void **)(v3 + 12728), v17);
    }
    *(void *)(v3 + 12728) = v18;
    LODWORD(v17) = *(_DWORD *)(v3 + 12740);
    unsigned int v16 = *(_DWORD *)(v3 + 12736);
    goto LABEL_52;
  }
  uint64_t v15 = v8 - 1;
LABEL_33:
LABEL_34:
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

void _swift_stdlib_reportFatalErrorInFile(const char *a1, int a2, const char *a3, int a4, const char *a5, int a6, int a7, int a8)
{
  uint64_t v13 = 0;
  size_t v10 = "";
  if (a4 > 0) {
    size_t v10 = ": ";
  }
  swift_asprintf(&v13, "%.*s:%u: %.*s%s%.*s\n", a6, a5, a7, a2, a1, v10, a4, a3);
  int v11 = v13;
  swift_reportError(a8, v13);
  free(v11);
  if (_swift_shouldReportFatalErrorsToDebugger())
  {
    unint64_t v14 = 0;
    if (a4) {
      swift_asprintf(&v14, "%.*s: %.*s");
    }
    else {
      swift_asprintf(&v14, "%.*s");
    }
    size_t v12 = v14;
    _swift_reportToDebugger(1, v14, 0);
    free(v12);
  }
}

void _swift_stdlib_reportFatalError(const char *a1, int a2, const char *a3, int a4, int a5)
{
  unsigned int v9 = 0;
  swift_asprintf(&v9, "%.*s: %.*s\n", a2, a1, a4, a3);
  uint64_t v7 = v9;
  swift_reportError(a5, v9);
  free(v7);
  if (_swift_shouldReportFatalErrorsToDebugger())
  {
    size_t v10 = 0;
    if (a4) {
      swift_asprintf(&v10, "%.*s: %.*s");
    }
    else {
      swift_asprintf(&v10, "%.*s");
    }
    uint64_t v8 = v10;
    _swift_reportToDebugger(1, v10, 0);
    free(v8);
  }
}

void _swift_stdlib_reportUnimplementedInitializerInFile(const char *a1, int a2, const char *a3, int a4, const char *a5, int a6, int a7, uint64_t a8, int a9)
{
  size_t v10 = 0;
  swift_asprintf(&v10, "%.*s:%u: Fatal error: Use of unimplemented initializer '%.*s' for class '%.*s'\n", a6, a5, a7, a4, a3, a2, a1);
  unsigned int v9 = v10;
  swift_reportError(a9, v10);

  free(v9);
}

void _swift_stdlib_reportUnimplementedInitializer(const char *a1, int a2, const char *a3, int a4, int a5)
{
  uint64_t v7 = 0;
  swift_asprintf(&v7, "Fatal error: Use of unimplemented initializer '%.*s' for class '%.*s'\n", a4, a3, a2, a1);
  int v6 = v7;
  swift_reportError(a5, v7);

  free(v6);
}

void *_swift_instantiateInertHeapObject(void *result, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = 0;
  }
  void *result = v2;
  result[1] = 3;
  return result;
}

void _GLOBAL__sub_I_GlobalObjects_cpp()
{
  if (swift::runtime::environment::initializeToken != -1) {
    dispatch_once_f(&swift::runtime::environment::initializeToken, 0, (dispatch_function_t)swift::runtime::environment::initialize);
  }
  if (swift::runtime::environment::SWIFT_DETERMINISTIC_HASHING_variable)
  {
    _swift_stdlib_Hashing_parameters = 0;
    unk_1EB208F00 = 0;
    qword_1EB208F08 = 0;
    char v0 = 1;
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t __buf = 0;
    swift_stdlib_random(&__buf, 8uLL);
    swift_stdlib_random(&v1, 8uLL);
    char v0 = 0;
    _swift_stdlib_Hashing_parameters = __buf;
    unk_1EB208F00 = v1;
  }
  LOBYTE(qword_1EB208F08) = v0;
}

size_t _swift_stdlib_fwrite_stdout(const void *a1, size_t a2, size_t a3)
{
  return fwrite(a1, a2, a3, (FILE *)*MEMORY[0x1E4F143D8]);
}

unint64_t swift_int64ToString(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a2 <= 0x1F && a4 > 9 || a2 <= 0x40 && a4 <= 9 || !a4 || a4 >= 37)
  {
    __break(1u);
    return result;
  }
  if (a3 >= 0) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = -a3;
  }
  if (a3)
  {
    if (a4 == 10)
    {
      int v6 = (char *)result;
      do
      {
        *v6++ = (v5 % 0xA) | 0x30;
        BOOL v7 = v5 >= 0xA;
        v5 /= 0xAuLL;
      }
      while (v7);
    }
    else
    {
      if (a5) {
        char v9 = 55;
      }
      else {
        char v9 = 87;
      }
      int v6 = (char *)result;
      do
      {
        unsigned int v10 = v5 % a4;
        if (v10 >= 0xA) {
          char v11 = v9;
        }
        else {
          char v11 = 48;
        }
        *v6++ = v11 + v10;
        BOOL v14 = a4 > v5;
        v5 /= a4;
      }
      while (!v14);
    }
    if ((a3 & 0x8000000000000000) == 0) {
      goto LABEL_28;
    }
    char v8 = 45;
  }
  else
  {
    char v8 = 48;
    int v6 = (char *)result;
  }
  *v6++ = v8;
LABEL_28:
  size_t v12 = v6 - 1;
  uint64_t v13 = &v6[-result];
  if (v13) {
    BOOL v14 = (unint64_t)v12 > result;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    unint64_t v15 = result + 1;
    do
    {
      char v16 = *(unsigned char *)(v15 - 1);
      *(unsigned char *)(v15 - 1) = *v12;
      *v12-- = v16;
      BOOL v7 = v15++ >= (unint64_t)v12;
    }
    while (!v7);
  }
  return (unint64_t)v13;
}

unsigned char *swift_uint64ToString(unsigned char *result, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a2 > 31 || a4 <= 9) && (a2 > 63 || a4 > 9) && a4 && a4 < 37)
  {
    if (a3)
    {
      if (a4 == 10)
      {
        unint64_t v5 = result;
        do
        {
          *v5++ = (a3 % 0xA) | 0x30;
          BOOL v6 = a3 >= 0xA;
          a3 /= 0xAuLL;
        }
        while (v6);
      }
      else
      {
        if (a5) {
          char v7 = 55;
        }
        else {
          char v7 = 87;
        }
        unint64_t v5 = result;
        do
        {
          unsigned int v8 = a3 % a4;
          if (v8 >= 0xA) {
            char v9 = v7;
          }
          else {
            char v9 = 48;
          }
          *v5++ = v9 + v8;
          BOOL v12 = a4 > a3;
          a3 /= a4;
        }
        while (!v12);
      }
    }
    else
    {
      void *result = 48;
      unint64_t v5 = result + 1;
    }
    unsigned int v10 = v5 - 1;
    uint64_t v11 = v5 - result;
    if (v11) {
      BOOL v12 = v10 > result;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12)
    {
      uint64_t v13 = result + 1;
      do
      {
        char v14 = *(v13 - 1);
        *(v13 - 1) = *v10;
        *v10-- = v14;
        BOOL v6 = v13++ >= v10;
      }
      while (!v6);
    }
    return (unsigned char *)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t swift_float16ToString(unsigned char *a1, unint64_t a2, __n128 a3)
{
  unsigned __int16 v4 = a3.n128_u16[0];
  return swift_dtoa_optimal_binary16_p(&v4, a1, a2);
}

uint64_t swift_stdlib_readLine_stdin(char **__linep)
{
  size_t __linecapp = 0;
  uint64_t v2 = (FILE **)MEMORY[0x1E4F143D0];
  do
    int v3 = getline(__linep, &__linecapp, *v2);
  while (v3 < 0 && *__error() == 4);
  return v3;
}

char *_swift_stdlib_strtold_clocale(char *__s, long double *a2)
{
  int v4 = *__s;
  if (v4 == 45 || (unint64_t v5 = (unsigned __int8 *)__s, v4 == 43))
  {
    unint64_t v5 = (unsigned __int8 *)(__s + 1);
    int v4 = __s[1];
  }
  if ((v4 | 0x20) == 0x73 && (v5[1] | 0x20) == 0x6E && (v5[2] | 0x20) == 0x61 && (v5[3] | 0x20) == 0x6E && !v5[4])
  {
    *a2 = NAN;
    return &__s[strlen(__s)];
  }
  else
  {
    char v7 = 0;
    *__error() = 0;
    *a2 = strtold_l(__s, &v7, 0);
    return v7;
  }
}

char *_swift_stdlib_strtod_clocale(char *__s, double *a2)
{
  int v4 = *__s;
  if (v4 == 45 || (unint64_t v5 = (unsigned __int8 *)__s, v4 == 43))
  {
    unint64_t v5 = (unsigned __int8 *)(__s + 1);
    int v4 = __s[1];
  }
  if ((v4 | 0x20) == 0x73 && (v5[1] | 0x20) == 0x6E && (v5[2] | 0x20) == 0x61 && (v5[3] | 0x20) == 0x6E && !v5[4])
  {
    *a2 = NAN;
    return &__s[strlen(__s)];
  }
  else
  {
    char v7 = 0;
    *__error() = 0;
    *a2 = strtod_l(__s, &v7, 0);
    return v7;
  }
}

char *_swift_stdlib_strtof_clocale(char *__s, float *a2)
{
  int v4 = *__s;
  if (v4 == 45 || (unint64_t v5 = (unsigned __int8 *)__s, v4 == 43))
  {
    unint64_t v5 = (unsigned __int8 *)(__s + 1);
    int v4 = __s[1];
  }
  if ((v4 | 0x20) == 0x73 && (v5[1] | 0x20) == 0x6E && (v5[2] | 0x20) == 0x61 && (v5[3] | 0x20) == 0x6E && !v5[4])
  {
    *a2 = NAN;
    return &__s[strlen(__s)];
  }
  else
  {
    char v7 = 0;
    *__error() = 0;
    *a2 = strtof_l(__s, &v7, 0);
    return v7;
  }
}

__int16 _swift_stdlib_strtof16_clocale@<H0>(char *a1@<X0>, _WORD *a2@<X1>)
{
  int v9 = 0;
  _swift_stdlib_strtof_clocale(a1, (float *)&v9);
  _S0 = v9;
  __asm { FCVT            H0, S0 }
  *a2 = result;
  return result;
}

void _swift_stdlib_flockfile_stdout()
{
}

void _swift_stdlib_funlockfile_stdout()
{
}

uint64_t _swift_stdlib_putc_stderr(int a1)
{
  return putc(a1, (FILE *)*MEMORY[0x1E4F143C8]);
}

uint64_t _swift_stdlib_getHardwareConcurrency()
{
  return std::thread::hardware_concurrency();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return 0;
}

uint64_t _swift_stdlib_getCurrentStackBounds(void *a1, void *a2)
{
  int v4 = pthread_self();
  stackaddr_np = (char *)pthread_get_stackaddr_np(v4);
  *a1 = &stackaddr_np[-pthread_get_stacksize_np(v4)];
  *a2 = stackaddr_np;
  return 1;
}

uint64_t _swift_stdlib_getMphIdx(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 461845907 * ((380141568 * a1) | ((-862048943 * a1) >> 17));
  while (1)
  {
    uint64_t v7 = *(void *)(a3 + 8 * v5);
    unsigned int v8 = *(unsigned __int16 *)(a5 + 2 * v5);
    HIDWORD(v9) = v6 ^ v5;
    LODWORD(v9) = v6 ^ v5;
    HIDWORD(v9) = (461845907 * ((380141568 * v8) | ((-862048943 * v8) >> 17))) ^ (5 * (v9 >> 19) - 430675100);
    LODWORD(v9) = HIDWORD(v9);
    unsigned int v10 = -2048144789 * ((5 * (v9 >> 19) - 430675100) ^ ((5 * (v9 >> 19) - 430675100) >> 16) ^ 8);
    unint64_t v11 = ((-1028477387 * (v10 ^ (v10 >> 13))) ^ ((-1028477387 * (v10 ^ (v10 >> 13))) >> 16)) % v8;
    unint64_t v12 = *(void *)(v7 + 8 * (v11 >> 6));
    if ((v12 >> v11)) {
      break;
    }
    if (a2 == ++v5) {
      return 0;
    }
  }
  unsigned __int16 v14 = *(_WORD *)(*(void *)(a4 + 8 * v5) + ((v11 >> 8) & 0xFFFFFE));
  for (uint64_t i = (v11 >> 6) & 0x3F8; i != v11 >> 6; ++i)
    v14 += vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)(v7 + 8 * i)));
  unsigned __int16 v16 = v14 + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v12 << -(v11 & 0x3F))));
  if ((v11 & 0x3F) == 0) {
    return v14;
  }
  return v16;
}

uint64_t _swift_stdlib_getScalarBitArrayIdx(unsigned int a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1 / 0x4400uLL;
  uint64_t v4 = *a2;
  if (*a2 - 1 < v3) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v5 = (a1 / 0x110uLL) & 0x3F;
  unint64_t v6 = a2[(v3 + 1)];
  if (((v6 >> v5) & 1) == 0) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned __int16 v7 = *(_WORD *)(a3 + 2 * v3);
  if (v5) {
    v7 += vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v6 << -(char)v5)));
  }
  uint64_t v8 = 5 * v7;
  uint64_t v9 = (uint64_t)&a2[5 * v7 + 1 + v4];
  uint64_t v10 = (a1 % 0x110) >> 6;
  unint64_t v11 = *(void *)(v9 + 8 * v10);
  if (((v11 >> (a1 % 0x110)) & 1) == 0) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v12 = (a1 % 0x110) & 0x3F;
  unsigned __int16 v13 = *(_WORD *)(a3 + 2 * (v4 + v10 + v8));
  unsigned __int16 v14 = v13 + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v11 << -(char)v12)));
  if (v12) {
    unsigned __int16 v13 = v14;
  }
  return (*(void *)(v9 + 32) >> 16) + v13;
}

uint64_t _swift_stdlib_getGraphemeBreakProperty(unsigned int a1)
{
  for (int i = 1; i < 638; int i = (2 * i) | 1)
  {
    while (1)
    {
      unsigned int v2 = _swift_stdlib_graphemeBreakProperties[i];
      if ((v2 & 0x1FFFFF) <= a1) {
        break;
      }
      i *= 2;
      if (i >= 638) {
        return 255;
      }
    }
    uint64_t v3 = v2 >> 29;
    if (v3 == 5) {
      __int16 v4 = 511;
    }
    else {
      __int16 v4 = 255;
    }
    if ((*(_DWORD *)&v4 & (v2 >> 21)) + (v2 & 0x1FFFFF) >= a1) {
      return v3;
    }
  }
  return 255;
}

BOOL _swift_stdlib_isLinkingConsonant(unsigned int a1)
{
  return _swift_stdlib_getScalarBitArrayIdx(a1, _swift_stdlib_linkingConsonant, (uint64_t)&_swift_stdlib_linkingConsonant_ranks) != 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _swift_stdlib_getNormData(unsigned int a1)
{
  if (a1 < 0xC0) {
    return 0;
  }
  uint64_t ScalarBitArrayIdx = _swift_stdlib_getScalarBitArrayIdx(a1, _swift_stdlib_normData, (uint64_t)&_swift_stdlib_normData_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  else {
    return _swift_stdlib_normData_data[_swift_stdlib_normData_data_indices[ScalarBitArrayIdx]];
  }
}

uint64_t _swift_stdlib_getDecompositionEntry(int a1)
{
  return _swift_stdlib_nfd_decomp_indices[_swift_stdlib_getMphIdx(a1, 11, (uint64_t)&_swift_stdlib_nfd_decomp_keys, (uint64_t)&_swift_stdlib_nfd_decomp_ranks, (uint64_t)&_swift_stdlib_nfd_decomp_sizes)];
}

uint64_t _swift_stdlib_getComposition(unsigned int a1, int a2)
{
  __int16 v4 = *(&_swift_stdlib_nfc_comp_indices
       + _swift_stdlib_getMphIdx(a2, 3, (uint64_t)&_swift_stdlib_nfc_comp_keys, (uint64_t)&_swift_stdlib_nfc_comp_ranks, (uint64_t)L"@@@"));
  if ((*v4 & 0x1FFFFF) != a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = (*v4 >> 21) - 1;
  if (*v4 >> 21 == 1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v6 = 1;
  while (1)
  {
    unsigned int v7 = v6 + ((v5 - v6) >> 1);
    int v8 = v4[v7];
    unsigned int v9 = v8 & 0x1FFFF;
    if ((v8 & 0x1FFFF) == a1) {
      break;
    }
    unsigned int v10 = v7 - 1;
    if (v9 <= a1) {
      unsigned int v10 = v5;
    }
    if (v9 >= a1) {
      unsigned int v5 = v10;
    }
    else {
      unsigned int v6 = v7 + 1;
    }
    if (v5 < v6) {
      return 0xFFFFFFFFLL;
    }
  }
  int v12 = (v8 >> 17) & 0x3FFF;
  if (v8 < 0) {
    int v12 = -v12;
  }
  return v12 + a1;
}

uint64_t _swift_stdlib_getBinaryProperties(unsigned int a1)
{
  int v1 = 0;
  int v2 = 4920;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    int v5 = v4;
    unsigned int v6 = v4 == 4920 ? 1114111 : (_swift_stdlib_scalar_binProps[v4 + 1] & 0x1FFFFF) - 1;
    unint64_t v7 = _swift_stdlib_scalar_binProps[v4];
    unsigned int v8 = v7 & 0x1FFFFF;
    if ((v7 & 0x1FFFFF) <= a1 && v6 >= a1) {
      break;
    }
    int v10 = v5 - 1;
    if (v8 <= a1) {
      int v10 = v2;
    }
    if (v6 < a1) {
      int v1 = v5 + 1;
    }
    else {
      int v2 = v10;
    }
    if (v2 < v1) {
      return 0;
    }
  }
  return *(void *)((char *)&_swift_stdlib_scalar_binProps_data + ((v7 >> 18) & 0x3FF8));
}

uint64_t _swift_stdlib_getNumericType(unsigned int a1)
{
  int v1 = 0;
  int v2 = 235;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    unsigned int v5 = _swift_stdlib_numeric_type[v4];
    unsigned int v6 = v5 & 0x1FFFFF;
    unsigned int v7 = (v5 & 0x1FFFFF) + (v5 >> 21);
    if ((v5 & 0x1FFFFF) <= a1 && v7 >= a1) {
      break;
    }
    int v9 = v4 - 1;
    if (v6 <= a1) {
      int v9 = v2;
    }
    if (v7 < a1) {
      int v1 = v4 + 1;
    }
    else {
      int v2 = v9;
    }
    if (v2 < v1) {
      return 255;
    }
  }
  return v5 >> 29;
}

double _swift_stdlib_getNumericValue(int a1)
{
  return _swift_stdlib_numeric_values[_swift_stdlib_numeric_values_indices[_swift_stdlib_getMphIdx(a1, 12, (uint64_t)&_swift_stdlib_numeric_values_keys, (uint64_t)&_swift_stdlib_numeric_values_ranks, (uint64_t)&_swift_stdlib_numeric_values_sizes)]];
}

char *_swift_stdlib_getNameAlias(unsigned int a1)
{
  uint64_t ScalarBitArrayIdx = _swift_stdlib_getScalarBitArrayIdx(a1, _swift_stdlib_nameAlias, (uint64_t)&_swift_stdlib_nameAlias_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  else {
    return _swift_stdlib_nameAlias_data[ScalarBitArrayIdx];
  }
}

uint64_t _swift_stdlib_getMapping(unsigned int a1, int a2)
{
  uint64_t ScalarBitArrayIdx = _swift_stdlib_getScalarBitArrayIdx(a1, _swift_stdlib_mappings, (uint64_t)&_swift_stdlib_mappings_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  unsigned int v4 = _swift_stdlib_mappings_data_indices[ScalarBitArrayIdx];
  if (a2)
  {
    if (a2 == 2)
    {
      v4 >>= 16;
    }
    else
    {
      if (a2 != 1) {
        return 0;
      }
      v4 >>= 8;
    }
  }
  if (v4 == 255) {
    return 0;
  }
  return _swift_stdlib_mappings_data[v4];
}

uint64_t _swift_stdlib_getSpecialMapping(unsigned int a1, int a2, void *a3)
{
  uint64_t ScalarBitArrayIdx = _swift_stdlib_getScalarBitArrayIdx(a1, _swift_stdlib_special_mappings, (uint64_t)&_swift_stdlib_special_mappings_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  unsigned int v6 = (unsigned __int8 *)&_swift_stdlib_special_mappings_data
     + _swift_stdlib_special_mappings_data_indices[ScalarBitArrayIdx];
  unsigned int v9 = *v6;
  uint64_t result = (uint64_t)(v6 + 1);
  uint64_t v8 = v9;
  int v10 = (unsigned __int8 *)(result + v9);
  unsigned int v13 = *v10;
  unint64_t v11 = v10 + 1;
  uint64_t v12 = v13;
  if (a2 == 2)
  {
    uint64_t result = (uint64_t)&v11[v12 + 1];
    uint64_t v8 = v11[v12];
LABEL_7:
    *a3 = v8;
    return result;
  }
  if (a2 != 1)
  {
    if (a2) {
      return 0;
    }
    goto LABEL_7;
  }
  *a3 = v12;
  return (uint64_t)v11;
}

uint64_t _swift_stdlib_getScalarName(unsigned int a1, uint64_t a2, uint64_t a3)
{
  int v3 = _swift_stdlib_names_scalar_sets[a1 >> 7];
  if (v3 == 0xFFFF) {
    return 0;
  }
  uint64_t v4 = a1 & 0x7F | (v3 << 7);
  int v5 = _swift_stdlib_names_scalars[v4];
  if (a1 != 32 && !v5) {
    return 0;
  }
  if (v4 == 39551)
  {
    int v7 = 218144;
  }
  else
  {
    uint64_t v8 = &_swift_stdlib_names_scalars[v4 + 1];
    do
    {
      int v9 = *v8++;
      int v7 = v9;
    }
    while (!v9);
  }
  unsigned int v10 = v7 - v5;
  if (!v10) {
    return -1;
  }
  int v11 = 0;
  for (int i = 0; ; i += 2)
  {
    unint64_t v13 = _swift_stdlib_names[v11 + v5];
    if (v13 == 255)
    {
      uint64_t v14 = _swift_stdlib_names[v5 + 1 + v11];
      v11 += 2;
      unint64_t v13 = v14 | ((unint64_t)_swift_stdlib_names[v11 + v5] << 8);
    }
    uint64_t v15 = _swift_stdlib_word_indices[v13];
    int v16 = _swift_stdlib_words[v15];
    if ((v16 & 0x80000000) == 0) {
      break;
    }
LABEL_21:
    uint64_t result = i;
    if (i >= a3) {
      return result;
    }
    *(unsigned char *)(a2 + i) = v16 & 0x7F;
    if (i + 1 >= a3) {
      return i + 1;
    }
    *(unsigned char *)(a2 + result + 1) = 32;
    if (++v11 >= v10) {
      return (int)result + 1;
    }
  }
  if (a3 <= i) {
    uint64_t result = i;
  }
  else {
    uint64_t result = a3;
  }
  uint64_t v17 = result - i;
  size_t v18 = (unsigned char *)(a2 + i);
  size_t v19 = &_swift_stdlib_words[v15 + 1];
  while (v17)
  {
    *v18++ = v16;
    int v20 = *v19++;
    LOBYTE(v16) = v20;
    --v17;
    ++i;
    if (v20 < 0) {
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t _swift_stdlib_getAge(unsigned int a1)
{
  int v1 = 0;
  int v2 = 1690;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    unint64_t v5 = _swift_stdlib_ages[v4];
    unint64_t v6 = v5 & 0x1FFFFF;
    unint64_t v7 = (v5 & 0x1FFFFF) + HIDWORD(v5);
    if ((v5 & 0x1FFFFF) <= a1 && v7 >= a1) {
      break;
    }
    int v9 = v4 - 1;
    if (v6 <= a1) {
      int v9 = v2;
    }
    if (v7 < a1) {
      int v1 = v4 + 1;
    }
    else {
      int v2 = v9;
    }
    if (v2 < v1) {
      return 0xFFFFLL;
    }
  }
  return _swift_stdlib_ages_data[(v5 >> 21)];
}

uint64_t _swift_stdlib_getGeneralCategory(unsigned int a1)
{
  int v1 = 0;
  int v2 = 4006;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    unint64_t v5 = _swift_stdlib_generalCategory[v4];
    unint64_t v6 = v5 & 0x1FFFFF;
    unint64_t v7 = (v5 & 0x1FFFFF) + HIDWORD(v5);
    if ((v5 & 0x1FFFFF) <= a1 && v7 >= a1) {
      break;
    }
    int v9 = v4 - 1;
    if (v6 <= a1) {
      int v9 = v2;
    }
    if (v7 < a1) {
      int v1 = v4 + 1;
    }
    else {
      int v2 = v9;
    }
    if (v2 < v1) {
      return 255;
    }
  }
  return (v5 >> 21);
}

uint64_t _swift_stdlib_getScript(unsigned int a1)
{
  int v1 = 0;
  int v2 = 1657;
  while (1)
  {
    int v3 = v2 - v1;
    if (v2 < v1) {
      ++v3;
    }
    int v4 = v1 + (v3 >> 1);
    int v5 = v4;
    unsigned int v6 = v4 == 1657 ? 1114111 : (_swift_stdlib_scripts[v4 + 1] & 0x1FFFFF) - 1;
    unsigned int v7 = _swift_stdlib_scripts[v4];
    if ((v7 & 0x1FFFFF) <= a1 && v6 >= a1) {
      break;
    }
    if ((v7 & 0x1FFFFF) <= a1) {
      int v9 = v2;
    }
    else {
      int v9 = v4 - 1;
    }
    if (v6 < a1) {
      int v1 = v5 + 1;
    }
    else {
      int v2 = v9;
    }
    if (v2 < v1) {
      return 255;
    }
  }
  return (v7 >> 21);
}

char *_swift_stdlib_getScriptExtensions(unsigned int a1, unsigned char *a2)
{
  uint64_t ScalarBitArrayIdx = _swift_stdlib_getScalarBitArrayIdx(a1, _swift_stdlib_script_extensions, (uint64_t)&_swift_stdlib_script_extensions_ranks);
  if (ScalarBitArrayIdx == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  unsigned int v5 = _swift_stdlib_script_extensions_data_indices[ScalarBitArrayIdx];
  *a2 = v5 >> 11;
  return (char *)&_swift_stdlib_script_extensions_data + (v5 & 0x7FF);
}

uint64_t _swift_stdlib_getCaseMapping(int a1, int *a2)
{
  int v3 = a1;
  uint64_t result = _swift_stdlib_getMphIdx(a1, 11, (uint64_t)&_swift_stdlib_case_keys, (uint64_t)&_swift_stdlib_case_ranks, (uint64_t)&_swift_stdlib_case_sizes);
  unint64_t v5 = _swift_stdlib_case[result];
  if ((_swift_stdlib_case[result] & 0x1FFFFF) != v3) {
    goto LABEL_4;
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    v3 -= v5 >> 21;
LABEL_4:
    *a2 = v3;
    return result;
  }
  uint64_t result = _swift_stdlib_getMphIdx(v3, 5, (uint64_t)&_swift_stdlib_case_full_keys, (uint64_t)&_swift_stdlib_case_full_ranks, (uint64_t)L"hF@@@");
  unint64_t v6 = _swift_stdlib_case_full[result];
  unint64_t v7 = v6 >> 62;
  do
  {
    int v8 = (unsigned __int16)v6;
    if ((v6 & 0x10000) == 0) {
      int v8 = -(unsigned __int16)v6;
    }
    v6 >>= 17;
    *a2++ = v8 + v3;
    --v7;
  }
  while (v7);
  return result;
}

uint64_t _swift_stdlib_getWordBreakProperty(unsigned int a1)
{
  int v1 = 1;
  while (1)
  {
    while (1)
    {
      uint64_t v2 = v1;
      unsigned int v3 = _swift_stdlib_words[v1];
      if ((v3 & 0x1FFFFF) <= a1) {
        break;
      }
      int v1 = 2 * v2;
      if (2 * (int)v2 >= 1123) {
        return 255;
      }
    }
    if ((v3 & 0x1FFFFF) + (v3 >> 21) - 1 >= a1) {
      break;
    }
    int v1 = (2 * v2) | 1;
    if (v1 >= 1123) {
      return 255;
    }
  }
  return _swift_stdlib_words_data[v2];
}

void _swift_stdlib_operatingSystemVersion(void *a1@<X8>)
{
  if (qword_1E8ECFBD8 != -1) {
    dispatch_once_f(&qword_1E8ECFBD8, &_swift_stdlib_operatingSystemVersion::$_0::operator() const(void)::TheLazy, (dispatch_function_t)_swift_stdlib_operatingSystemVersion::$_0::operator() const(void)::{lambda(void *)#1}::__invoke);
  }
  uint64_t v2 = dword_1E8ECFBD0;
  uint64_t v3 = _swift_stdlib_operatingSystemVersion::$_0::operator() const(void)::TheLazy >> 32;
  *a1 = (int)_swift_stdlib_operatingSystemVersion::$_0::operator() const(void)::TheLazy;
  a1[1] = v3;
  a1[2] = v2;
}

uint64_t _swift_stdlib_operatingSystemVersion::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t result = os_system_version_get_current_version();
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

BOOL _swift_stdlib_isNSString()
{
  swift_once(&initializeBridgingFuncsOnce, (dispatch_function_t)_initializeBridgingFunctionsImpl, 0);
  return CFGetTypeID_delayInitStub(v0) == _CFStringTypeID;
}

uint64_t _swift_stdlib_CFStringHashNSString()
{
  swift_once(&initializeBridgingFuncsOnce, (dispatch_function_t)_initializeBridgingFunctionsImpl, 0);

  return CFStringHashNSString_delayInitStub(v0);
}

uint64_t _swift_stdlib_CFStringHashCString()
{
  swift_once(&initializeBridgingFuncsOnce, (dispatch_function_t)_initializeBridgingFunctionsImpl, 0);

  return CFStringHashCString_delayInitStub(v0);
}

uint64_t _swift_stdlib_NSStringCStringUsingEncodingTrampoline(void *a1, uint64_t a2)
{
  IMP MethodImplementation = class_getMethodImplementation((Class)[a1 superclass], sel_cStringUsingEncoding_);

  return ((uint64_t (*)(void *, char *, uint64_t))MethodImplementation)(a1, sel_cStringUsingEncoding_, a2);
}

uint64_t _swift_stdlib_NSStringGetCStringTrampoline(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  IMP MethodImplementation = class_getMethodImplementation((Class)[a1 superclass], sel_getCString_maxLength_encoding_);

  return ((uint64_t (*)(void *, char *, uint64_t, uint64_t, uint64_t))MethodImplementation)(a1, sel_getCString_maxLength_encoding_, a2, a3, a4);
}

uint64_t _swift_stdlib_dyld_is_objc_constant_string()
{
  if (MEMORY[0x1E4F144D0]) {
    return _dyld_is_objc_constant();
  }
  else {
    return 0;
  }
}

uint64_t _initializeBridgingFunctionsImpl(void *a1, double a2)
{
  uint64_t result = CFStringGetTypeID_delayInitStub(a2);
  _CFStringTypeID = result;
  return result;
}

__SwiftNull *_swift_Foundation_getOptionalNilSentinelObject(unint64_t *a1)
{
  if (*a1 != 514) {
    goto LABEL_12;
  }
  LODWORD(v1) = 0;
  do
  {
    a1 = (unint64_t *)*swift::TargetMetadata<swift::InProcess>::getGenericArgs(a1);
    unint64_t v1 = (v1 + 1);
  }
  while (*a1 == 514);
  if (v1)
  {
    if (qword_1E8ECFC00 != -1) {
    unint64_t v2 = (v1 - 1);
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1E8ECFBF8);
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E8ECFBF8);
      os_unfair_lock_lock((os_unfair_lock_t)&unk_1E8ECFBF8);
      if (v5 <= v2)
      {
        if (v1 <= v5)
        {
          if (v1 < v5) {
        }
          }
        else
        {
        }
      }
      uint64_t v3 = *(__SwiftNull **)(v4 + 8 * v2);
      if (!v3)
      {
        uint64_t v3 = objc_alloc_init(__SwiftNull);
        v3->depth = v1 + 1;
        *(void *)(v4 + 8 * v2) = v3;
      }
    }
    int v8 = v3;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E8ECFBF8);
    unint64_t v6 = v8;
  }
  else
  {
LABEL_12:
    if (qword_1EB208E90 != -1) {
  }
    }

  return v6;
}

void sub_181627870(_Unwind_Exception *a1)
{
}

double swift::Lazy<anonymous namespace'::SwiftNullSentinelCache>::defaultInitCallback(_OWORD *a1)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t anonymous namespace'::getSentinelForDepth(unsigned int)::$_0::operator() const(void)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t result = [(objc_class *)objc_getClass("NSNull") null];
  *a1 = result;
  return result;
}

void std::vector<objc_object *>::__append(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v13 = operator new(8 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    int v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v6 = &v5[-v20];
      v14 -= v20;
      unint64_t v21 = &v13[8 * v9 - 16];
      unint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *unint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      unint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

uint64_t _swift_stdlib_NSObject_isKindOfClass(int a1, char *name)
{
  objc_lookUpClass(name);

  return objc_opt_isKindOfClass();
}

uint64_t swift_stdlib_NSStringHashValue(void *a1, char a2)
{
  if (a2)
  {
    return [a1 hash];
  }
  else
  {
    uint64_t v4 = [a1 decomposedStringWithCanonicalMapping];
    uint64_t v5 = [v4 hash];

    return v5;
  }
}

uint64_t swift_stdlib_NSStringHashValuePointer(void *a1, char a2)
{
  if (a2)
  {
    return [a1 hash];
  }
  else
  {
    uint64_t v4 = [a1 decomposedStringWithCanonicalMapping];
    uint64_t v5 = [v4 hash];

    return v5;
  }
}

uint64_t swift_stdlib_NSObject_isEqual(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return [a1 isEqual:a2 v2 v3];
  }
}

objc_class *swift_stdlib_connectNSBaseClasses()
{
  uint64_t result = objc_lookUpClass("NSArray");
  if (result)
  {
    unint64_t v1 = result;
    uint64_t result = objc_lookUpClass("__SwiftNativeNSArrayBase");
    if (result)
    {
      class_setSuperclass(result, v1);
      uint64_t result = objc_lookUpClass("NSMutableArray");
      if (result)
      {
        uint64_t v2 = result;
        uint64_t result = objc_lookUpClass("__SwiftNativeNSMutableArrayBase");
        if (result)
        {
          class_setSuperclass(result, v2);
          uint64_t result = objc_lookUpClass("NSDictionary");
          if (result)
          {
            uint64_t v3 = result;
            uint64_t result = objc_lookUpClass("__SwiftNativeNSDictionaryBase");
            if (result)
            {
              class_setSuperclass(result, v3);
              uint64_t result = objc_lookUpClass("NSSet");
              if (result)
              {
                uint64_t v4 = result;
                uint64_t result = objc_lookUpClass("__SwiftNativeNSSetBase");
                if (result)
                {
                  class_setSuperclass(result, v4);
                  uint64_t result = objc_lookUpClass("NSString");
                  if (result)
                  {
                    uint64_t v5 = result;
                    uint64_t result = objc_lookUpClass("__SwiftNativeNSStringBase");
                    if (result)
                    {
                      class_setSuperclass(result, v5);
                      uint64_t result = objc_lookUpClass("NSEnumerator");
                      if (result)
                      {
                        unint64_t v6 = result;
                        uint64_t result = objc_lookUpClass("__SwiftNativeNSEnumeratorBase");
                        if (result)
                        {
                          class_setSuperclass(result, v6);
                          return (objc_class *)1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _swift_stdlib_overrideUnsafeArgvArgc(uint64_t result, int a2)
{
  _swift_stdlib_ProcessOverrideUnsafeArgv = result;
  _swift_stdlib_ProcessOverrideUnsafeArgc = a2;
  return result;
}

char **_swift_stdlib_getUnsafeArgvArgc(int *a1)
{
  uint64_t result = (char **)_swift_stdlib_ProcessOverrideUnsafeArgv;
  if (_swift_stdlib_ProcessOverrideUnsafeArgv)
  {
    int v3 = _swift_stdlib_ProcessOverrideUnsafeArgc;
  }
  else
  {
    *a1 = *_NSGetArgc();
    uint64_t result = *_NSGetArgv();
    if (result) {
      return result;
    }
    int v3 = 0;
    uint64_t result = (char **)&_swift_stdlib_getUnsafeArgvArgc::emptyArgv;
  }
  *a1 = v3;
  return result;
}

uint64_t compatibilityInitializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(1);
}

uint64_t __isPlatformVersionAtLeast(uint64_t a1, int a2, int a3, int a4)
{
  if (qword_1EB208EB0 == -1)
  {
    if (qword_1EB208EB8) {
      return _availability_version_check();
    }
  }
  else
  {
    dispatch_once_f(&qword_1EB208EB0, 0, (dispatch_function_t)initializeAvailabilityCheck);
    if (qword_1EB208EB8) {
      return _availability_version_check();
    }
  }
  if (qword_1EB208EA8 == -1)
  {
    BOOL v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2) {
      return 1;
    }
  }
  else
  {
    dispatch_once_f(&qword_1EB208EA8, 0, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    BOOL v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2) {
      return 1;
    }
  }
  if (v8) {
    return 0;
  }
  if (dword_1EB208E9C > a3) {
    return 1;
  }
  return dword_1EB208E9C >= a3 && dword_1EB208EA0 >= a4;
}

uint64_t initializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(0);
}

uint64_t _initializeAvailabilityCheck(uint64_t result)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = qword_1EB208EB8;
  if (qword_1EB208EB8) {
    BOOL v2 = result == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    if (MEMORY[0x1E4F143E8])
    {
      uint64_t v1 = MEMORY[0x1F4188798];
      qword_1EB208EB8 = MEMORY[0x1F4188798];
    }
    if (!v1 || result != 0)
    {
      uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        uint64_t v4 = *(unsigned __int8 **)result;
        uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          uint64_t v5 = (uint64_t (*)(void))result;
          unint64_t v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            unint64_t v7 = (uint64_t (*)(void, uint64_t, void, void))result;
            uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              BOOL v8 = (uint64_t (*)(void, const char *, uint64_t, unsigned __int8 *))result;
              uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  unint64_t v10 = (uint64_t (*)(uint64_t))result;
                  uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    uint64_t v11 = (uint64_t (*)(void))result;
                    uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    unint64_t v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        unint64_t v12 = (FILE *)result;
                        uint64_t result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          unint64_t v13 = (FILE *)result;
                          unint64_t v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          uint64_t v14 = MEMORY[0x1852FF490](v13);
                          if (v14 < 0)
                          {
                            int v16 = 0;
                          }
                          else
                          {
                            size_t v15 = v14;
                            rewind(v13);
                            int v16 = malloc(v15);
                            if (v16)
                            {
                              unint64_t v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                uint64_t v17 = v5(0);
                                if (v17)
                                {
                                  uint64_t v18 = v17;
                                  uint64_t v19 = v13;
                                  if (v6) {
                                    uint64_t v20 = ((uint64_t (*)(void, uint64_t, void, void, void))v6)(0, v17, 0, 0, 0);
                                  }
                                  else {
                                    uint64_t v20 = v7(0, v17, 0, 0);
                                  }
                                  uint64_t v21 = v20;
                                  if (v20)
                                  {
                                    uint64_t v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      uint64_t v23 = v22;
                                      uint64_t v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        uint64_t v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984)) {
                                            sscanf(v29, "%d.%d.%d", &_MergedGlobals, &dword_1EB208E9C, &dword_1EB208EA0);
                                          }
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    uint64_t v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  uint64_t v19 = v13;
                                }
                                int v16 = v26;
                              }
                              else
                              {
                                int v16 = v26;
                                uint64_t v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          uint64_t v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void swift::hashable_support::findHashableBaseTypeOfHashableType()
{
  qword_1E8EBFEB0 = (uint64_t)"Could not allocate memory.";
  __break(1u);
}

void _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)()
{
  qword_1E8EBFEB0 = (uint64_t)"value type is not bridged to Objective-C";
  __break(1u);
}

void swift_reflectionMirror_normalizedType_cold_1()
{
  qword_1E8EBFEB0 = (uint64_t)"Swift mirror lookup failure";
  __break(1u);
}

void swift_reflectionMirror_recursiveChildOffset_cold_1()
{
  qword_1E8EBFEB0 = (uint64_t)"Swift mirror subscript bounds check failure";
  __break(1u);
}

void anonymous namespace'::ClassImpl::recursiveCount()
{
  qword_1E8EBFEB0 = (uint64_t)"No superclass mirror found";
  __break(1u);
}

void _ZZN12_GLOBAL__N_14callIZ45swift_reflectionMirror_recursiveChildMetadataE3__0EEDTclfp2_LDnEEEPN5swift11OpaqueValueEPKNS3_14TargetMetadataINS3_9InProcessEEESA_RKT_ENKUlvE_clEv_cold_1(const void *aBlock, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v4 = *(uint64_t **)v2;
  int v3 = *(void **)(v2 + 8);
  uint64_t v5 = *v4;
  *(void *)aBos_unfair_lock_t lock = &unk_1ECA075A8;
  *((void *)aBlock + 1) = v5;
  *((void *)aBlock + 2) = *v3;
  qword_1E8EBFEB0 = (uint64_t)"Cannot get children of Objective-C objects.";
  __break(1u);
  _Block_copy(aBlock);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_release(const void *aBlock)
{
}

int *_NSGetArgc(void)
{
  return (int *)MEMORY[0x1F40C9AD0]();
}

char ***_NSGetArgv(void)
{
  return (char ***)MEMORY[0x1F40C9AD8]();
}

mach_header_64 *_NSGetMachExecuteHeader(void)
{
  return (mach_header_64 *)MEMORY[0x1F40C9AF0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x1F417ED08]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x1F417EF58](lpmangled, lpout, lpoutlen, lpstatus);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

uint64_t __divti3()
{
  return MEMORY[0x1F40C9B78]();
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

uint64_t __modti3()
{
  return MEMORY[0x1F40C9C48]();
}

uint64_t __udivti3()
{
  return MEMORY[0x1F40C9D08]();
}

uint64_t __umodti3()
{
  return MEMORY[0x1F40C9D20]();
}

uint64_t _availability_version_check()
{
  return MEMORY[0x1F40C9D48]();
}

uint64_t _dyld_find_foreign_type_protocol_conformance()
{
  return MEMORY[0x1F40C9DB8]();
}

uint64_t _dyld_find_foreign_type_protocol_conformance_on_disk()
{
  return MEMORY[0x1F40C9DC0]();
}

uint64_t _dyld_find_pointer_hash_table_entry()
{
  return MEMORY[0x1F40C9DC8]();
}

uint64_t _dyld_find_protocol_conformance()
{
  return MEMORY[0x1F40C9DD0]();
}

uint64_t _dyld_find_protocol_conformance_on_disk()
{
  return MEMORY[0x1F40C9DD8]();
}

uint64_t _dyld_get_shared_cache_range()
{
  return MEMORY[0x1F40C9E40]();
}

uint64_t _dyld_get_swift_prespecialized_data()
{
  return MEMORY[0x1F40C9E50]();
}

uint64_t _dyld_has_preoptimized_swift_protocol_conformances()
{
  return MEMORY[0x1F40C9E58]();
}

uint64_t _dyld_is_objc_constant()
{
  return MEMORY[0x1F40C9E78]();
}

uint64_t _dyld_is_preoptimized_objc_image_loaded()
{
  return MEMORY[0x1F40C9E80]();
}

uint64_t _dyld_lookup_section_info()
{
  return MEMORY[0x1F40C9E88]();
}

uint64_t _dyld_swift_optimizations_version()
{
  return MEMORY[0x1F40C9F28]();
}

Class _objc_realizeClassFromSwift(Class cls, void *previously)
{
  return (Class)MEMORY[0x1F4181430](cls, previously);
}

uint64_t _os_feature_enabled_simple_impl()
{
  return MEMORY[0x1F40C9FB8]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_trace_lazy_init_completed_4swift()
{
  return MEMORY[0x1F40CA0B8]();
}

void abort(void)
{
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x1F40CA408](client, msg, *(void *)&level, format);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1F40CA4F8](a1, *(void *)&a2);
}

void bzero(void *a1, size_t a2)
{
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1F41814E0](cls, protocol);
}

Ivar *__cdecl class_copyIvarList(Class cls, unsigned int *outCount)
{
  return (Ivar *)MEMORY[0x1F41814E8](cls, outCount);
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x1F4181510](cls, extraBytes);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1F4181530](cls);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1F4181540](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1F4181548](cls);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1F4181558](cls);
}

BOOL class_isMetaClass(Class cls)
{
  return MEMORY[0x1F4181568](cls);
}

BOOL class_respondsToSelector(Class cls, SEL sel)
{
  return MEMORY[0x1F4181580](cls, sel);
}

Class class_setSuperclass(Class cls, Class newSuper)
{
  return (Class)MEMORY[0x1F4181588](cls, newSuper);
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x1F40CB8B0](a1);
  return result;
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1F40CBDA0](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t dyld_image_path_containing_address()
{
  return MEMORY[0x1F40CBE70]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1F40CBEC8]();
}

uint64_t dyld_shared_cache_some_image_overridden()
{
  return MEMORY[0x1F40CBF10]();
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

float exp2f(float a1)
{
  MEMORY[0x1F40CBFF0](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

void flockfile(FILE *a1)
{
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x1F40CC1A8](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1F40CC290](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1F40CC2E0](a1);
}

void funlockfile(FILE *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return MEMORY[0x1F40CC428](__linep, __linecapp, __stream);
}

uint8_t *__cdecl getsectiondata(const mach_header_64 *mhp, const char *segname, const char *sectname, unint64_t *size)
{
  return (uint8_t *)MEMORY[0x1F40CC528](mhp, segname, sectname, size);
}

int issetugid(void)
{
  return MEMORY[0x1F40CC6C0]();
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x1F41815C0](v);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x1F40CC888](a1);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x1F40CC8B0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB30]();
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1F40CCB58](size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1F40CCBA0](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

malloc_zone_t *__cdecl malloc_zone_from_ptr(const void *ptr)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCC10](ptr);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x1F4181690](cls, bytes);
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void *__cdecl objc_destructInstance(id obj)
{
  return (void *)MEMORY[0x1F41816D8](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

Protocol *__cdecl objc_getProtocol(const char *name)
{
  return (Protocol *)MEMORY[0x1F4181750](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

Class objc_lookUpClass(const char *name)
{
  return (Class)MEMORY[0x1F4181788](name);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_setHook_getClass(objc_hook_getClass newValue, objc_hook_getClass *outOldValue)
{
}

void objc_setHook_getImageName(objc_hook_getImageName newValue, objc_hook_getImageName *outOldValue)
{
}

void objc_setHook_lazyClassNamer(objc_hook_lazyClassNamer newValue, objc_hook_lazyClassNamer *oldOutValue)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

id object_dispose(id a1)
{
  return (id)MEMORY[0x1F4181A50](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

Class object_setClass(id a1, Class a2)
{
  return (Class)MEMORY[0x1F4181A90](a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

uint64_t os_system_version_get_current_version()
{
  return MEMORY[0x1F40CD580]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

BOOL protocol_conformsToProtocol(Protocol *proto, Protocol *other)
{
  return MEMORY[0x1F4181AE0](proto, other);
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x1F4181B10](p);
}

void *__cdecl pthread_get_stackaddr_np(pthread_t a1)
{
  return (void *)MEMORY[0x1F40CDA00](a1);
}

size_t pthread_get_stacksize_np(pthread_t a1)
{
  return MEMORY[0x1F40CDA08](a1);
}

uint64_t pthread_key_init_np()
{
  return MEMORY[0x1F40CDA50]();
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int putc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CDBA0](*(void *)&a1, a2);
}

long double remainder(long double __x, long double __y)
{
  MEMORY[0x1F40CDD00](__x, __y);
  return result;
}

float remainderf(float a1, float a2)
{
  MEMORY[0x1F40CDD08](a1, a2);
  return result;
}

void rewind(FILE *a1)
{
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  MEMORY[0x1F40CE268](a1, a2, a3);
  return result;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  MEMORY[0x1F40CE278](a1, a2, a3);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

long double strtold_l(const char *a1, char **a2, locale_t a3)
{
  MEMORY[0x1F40CE2B8](a1, a2, a3);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2C0](__str, __endptr, *(void *)&__base);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE690](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

uint64_t _s10Foundation24_getErrorDefaultUserInfoyyXlSgxs0C0RzlF_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_Foundation)) {
    dlopenHelper_Foundation(a1);
  }
  return MEMORY[0x1F40E46B0]();
}

uint64_t _s10Foundation21_bridgeNSErrorToError_3outSbSo0C0C_SpyxGtAA021_ObjectiveCBridgeableE0RzlF_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_Foundation)) {
    dlopenHelper_Foundation(a1);
  }
  return MEMORY[0x1F40E4508]();
}

uint64_t CFGetTypeID_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_CoreFoundation)) {
    dlopenHelper_CoreFoundation(a1);
  }
  return MEMORY[0x1F40D7B80]();
}

uint64_t CFStringHashNSString_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_CoreFoundation)) {
    dlopenHelper_CoreFoundation(a1);
  }
  return MEMORY[0x1F40D8628]();
}

uint64_t CFStringHashCString_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_CoreFoundation)) {
    dlopenHelper_CoreFoundation(a1);
  }
  return MEMORY[0x1F40D8610]();
}

uint64_t CFStringGetTypeID_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_CoreFoundation)) {
    dlopenHelper_CoreFoundation(a1);
  }
  return MEMORY[0x1F40D85F0]();
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_CoreFoundation(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_Foundation(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_libswiftObjectiveC_dylib(double a1)
{
  return a1;
}

void gotLoadHelper_x19___sSo8NSObjectCSH10ObjectiveCMc(double a1)
{
  if (!atomic_load((unsigned int *)&dlopenHelperFlag_libswiftObjectiveC_dylib)) {
    dlopenHelper_libswiftObjectiveC_dylib(a1);
  }
}

void gotLoadHelper_x20___sSo10CFErrorRefas5Error10FoundationMc(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_Foundation)) {
    dlopenHelper_Foundation(a1);
  }
}

double gotLoadHelper_x16___s10Foundation26_ObjectiveCBridgeableErrorMp(double result)
{
  if (!atomic_load(&dlopenHelperFlag_Foundation)) {
    return dlopenHelper_Foundation(result);
  }
  return result;
}