const char *flatbuffers::FLATBUFFERS_VERSION(flatbuffers *this)
{
  return "1.12.0";
}

char *flatbuffers::TypeName(int a1)
{
  return (&off_26412AC50)[a1 + 4];
}

uint64_t flatbuffers::SizeOf(int a1)
{
  return byte_20DC7CEF8[a1 + 4];
}

void flatbuffers::MakeCamel(char *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  char v4 = a1[23];
  BOOL v5 = v4 < 0;
  BOOL v6 = v5;
  unint64_t v7 = v4 & 0x7F;
  if (v5) {
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (v7)
  {
    unint64_t v10 = 0;
    do
    {
      if (v6) {
        v11 = *(char **)a1;
      }
      else {
        v11 = a1;
      }
      if (v10 || !a2)
      {
        unint64_t v13 = v10 + 1;
        if (v11[v10] != 95 || v13 >= v7)
        {
          std::string::value_type v12 = v11[v10];
        }
        else
        {
          std::string::value_type v12 = __toupper(v11[v13]);
          ++v10;
        }
      }
      else
      {
        std::string::value_type v12 = __toupper(*v11);
        unint64_t v10 = 0;
      }
      std::string::push_back(a3, v12);
      ++v10;
      char v15 = a1[23];
      BOOL v5 = v15 < 0;
      BOOL v6 = v5;
      unint64_t v7 = v15 & 0x7F;
      if (v5) {
        unint64_t v7 = *((void *)a1 + 1);
      }
    }
    while (v10 < v7);
  }
}

void flatbuffers::MakeScreamingCamel(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  char v3 = *((unsigned char *)a1 + 23);
  BOOL v4 = v3 < 0;
  BOOL v5 = v4;
  uint64_t v6 = v3 & 0x7F;
  if (v4) {
    uint64_t v6 = a1[1];
  }
  if (v6)
  {
    unint64_t v8 = 0;
    do
    {
      if (v5) {
        v9 = (uint64_t *)*a1;
      }
      else {
        v9 = a1;
      }
      __darwin_ct_rune_t v10 = *((char *)v9 + v8);
      if (v10 == 95) {
        std::string::value_type v11 = 95;
      }
      else {
        std::string::value_type v11 = __toupper(v10);
      }
      std::string::push_back(a2, v11);
      ++v8;
      char v12 = *((unsigned char *)a1 + 23);
      BOOL v4 = v12 < 0;
      BOOL v5 = v4;
      unint64_t v13 = v12 & 0x7F;
      if (v4) {
        unint64_t v13 = a1[1];
      }
    }
    while (v8 < v13);
  }
}

void flatbuffers::DeserializeDoc(int64x2_t *a1, _DWORD *a2)
{
  if (a2)
  {
    uint64_t v14 = v2;
    uint64_t v15 = v3;
    if (*a2)
    {
      unint64_t v5 = 0;
      uint64_t v6 = a2 + 1;
      unint64_t v7 = (const std::string::value_type *)(a2 + 2);
      do
      {
        unint64_t v8 = a2;
        std::string::__init(&v13, &v7[*((unsigned int *)v7 - 1)], *(unsigned int *)((char *)&v6[v5] + *((unsigned int *)v7 - 1)));
        unint64_t v9 = a1->u64[1];
        if (v9 >= a1[1].i64[0])
        {
          std::string::value_type v11 = sub_20DC58690(a1, (uint64_t)&v13);
          int v12 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
          a1->i64[1] = (uint64_t)v11;
          if (v12 < 0) {
            operator delete(v13.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v10 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
          *(void *)(v9 + 16) = *((void *)&v13.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v9 = v10;
          a1->i64[1] = v9 + 24;
        }
        ++v5;
        a2 = v8;
        v7 += 4;
      }
      while (v5 < *v8);
    }
  }
}

uint64_t sub_20DC3C4E4()
{
  sub_20DC50E1C((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x263F8C2B8];
  uint64_t v0 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x263F8C318] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x210568AB0](&v4);
}

uint64_t sub_20DC3C654()
{
  sub_20DC50E1C((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x263F8C2B8];
  uint64_t v0 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x263F8C318] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x210568AB0](&v4);
}

unint64_t sub_20DC3C7C4(std::string *this, int a2)
{
  uint64_t v2 = this;
  if (a2 > 255)
  {
    uint64_t v4 = off_26412AE08[a2 - 256];
    unint64_t result = strlen(v4);
    if (result >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v5 = result;
    if (result >= 0x17)
    {
      uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((result | 7) != 0x17) {
        uint64_t v6 = result | 7;
      }
      uint64_t v7 = v6 + 1;
      unint64_t v8 = (std::string *)operator new(v6 + 1);
      v2->__r_.__value_.__l.__size_ = v5;
      v2->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
      v2->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      uint64_t v2 = v8;
    }
    else
    {
      *((unsigned char *)&v2->__r_.__value_.__s + 23) = result;
      if (!result) {
        goto LABEL_13;
      }
    }
    unint64_t result = (unint64_t)memmove(v2, v4, v5);
LABEL_13:
    v2->__r_.__value_.__s.__data_[v5] = 0;
    return result;
  }
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;

  return (unint64_t)std::string::append(this, 1uLL, a2);
}

void flatbuffers::Parser::Next(flatbuffers::Parser *this@<X0>, uint64_t a2@<X8>)
{
  v104[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 7);
  for (uint64_t i = *((void *)this + 8); i != v3; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  *((void *)this + 8) = v3;
  BOOL v5 = *(void *)this == *((void *)this + 143);
  if (*((char *)this + 55) < 0)
  {
    **((unsigned char **)this + 4) = 0;
    *((void *)this + 5) = 0;
  }
  else
  {
    *((unsigned char *)this + 32) = 0;
    *((unsigned char *)this + 55) = 0;
  }
  *((unsigned char *)this + 24) = 1;
LABEL_10:
  uint64_t v6 = *(char **)this;
LABEL_11:
  while (2)
  {
    while (1)
    {
      uint64_t v7 = v6++;
      *(void *)this = v6;
      int v8 = *v7;
      unsigned int v9 = *v7;
      *((_DWORD *)this + 5) = v8;
      if (v8 > 31) {
        break;
      }
      if (v8 > 9)
      {
        if (v8 != 13)
        {
          if (v8 != 10) {
            goto LABEL_144;
          }
          *((void *)this + 1) = v6;
          ++*((_DWORD *)this + 4);
LABEL_41:
          BOOL v5 = 1;
          goto LABEL_10;
        }
      }
      else if (v8 != 9)
      {
        if (!v8)
        {
          *(void *)this = v7;
          int v54 = 256;
          goto LABEL_246;
        }
        goto LABEL_144;
      }
    }
    if (v8 > 57)
    {
      BOOL v30 = (v8 - 58) > 0x23 || ((1 << (v8 - 58)) & 0xA0000000BLL) == 0;
      if (!v30 || v8 == 123 || v8 == 125) {
        goto LABEL_247;
      }
LABEL_144:
      BOOL v56 = v9 != 43 && v9 != 45;
      if (v9 == 95 || (v8 & 0xFFFFFFDF) - 65 <= 0x19)
      {
        int v58 = *v6;
        unsigned int v59 = (*v6 & 0xFFFFFFDF) - 65;
LABEL_163:
        if (v59 < 0x1A || v58 == 95 || ((char)v58 - 48) <= 9)
        {
          v60 = v7 + 2;
          do
          {
            *(void *)this = v60;
            int v61 = *v60++;
            unsigned int v62 = (v61 & 0xFFFFFFDF) - 65;
            unsigned int v63 = v61 - 48;
            BOOL v64 = v61 != 95 && v62 >= 0x1A;
          }
          while (!v64 || v63 < 0xA);
          uint64_t v6 = v60 - 1;
        }
        sub_20DC3D6A4((std::string *)((char *)this + 32), v7, v6);
        if (v56) {
          int v54 = 260;
        }
        else {
          int v54 = 257;
        }
        goto LABEL_246;
      }
      switch(v9)
      {
        case '+':
          goto LABEL_155;
        case '.':
          if ((*v6 - 48) >= 0xA) {
            goto LABEL_247;
          }
          int v72 = 0;
LABEL_194:
          if ((*v6 - 48) > 9)
          {
            int v75 = 0;
            goto LABEL_201;
          }
          v73 = v7 + 2;
          *(void *)this = v7 + 2;
          unsigned int v9 = v7[1];
          v74 = (unsigned __int8 *)v6;
          goto LABEL_196;
        case '-':
LABEL_155:
          int v57 = *v6;
          int v58 = *v6;
          unsigned int v59 = (v57 & 0xFFFFFFDF) - 65;
          if (v57 == 95 || v59 <= 0x19) {
            goto LABEL_163;
          }
          break;
        default:
          if ((v8 - 48) < 0xA)
          {
            int v72 = 1;
            v73 = v6;
            v74 = (unsigned __int8 *)v7;
LABEL_196:
            int v75 = 0;
            if (v72 && v9 == 48)
            {
              if ((*v73 & 0xDF) == 0x58)
              {
                uint64_t v6 = v73 + 1;
                *(void *)this = v73 + 1;
                int v75 = 1;
LABEL_201:
                v74 = (unsigned __int8 *)v6;
                goto LABEL_205;
              }
              int v75 = 0;
            }
            uint64_t v6 = v73;
LABEL_205:
            while (1)
            {
              int v76 = v72;
              int v77 = *v6;
              int v78 = *v6;
              unsigned int v79 = v77 - 48;
              if ((v75 & 1) == 0) {
                break;
              }
              unsigned int v80 = (v77 & 0xFFFFFFDF) - 65;
              if (v79 < 0xA || v80 <= 5)
              {
                v82 = v6 + 1;
                do
                {
                  *(void *)this = v82;
                  int v83 = *v82++;
                  LOBYTE(v78) = v83;
                  unsigned int v84 = (v83 & 0xFFFFFFDF) - 65;
                }
                while ((v83 - 48) < 0xA || v84 < 6);
LABEL_220:
                int v78 = v78;
                uint64_t v6 = v82 - 1;
              }
LABEL_221:
              if (v78 != 46)
              {
                if (v6 <= (char *)v74) {
                  goto LABEL_242;
                }
                if ((v75 & (v76 == 0)) != 0) {
                  v74 = (unsigned __int8 *)v6;
                }
                unsigned int v87 = v78 & 0xFFFFFFDF;
                if (v87 != 80) {
                  int v75 = 0;
                }
                if (v87 != 69 && v75 == 0) {
                  goto LABEL_242;
                }
                v74 = (unsigned __int8 *)(v6 + 1);
                *(void *)this = v6 + 1;
                int v89 = v6[1];
                if (v89 == 45 || v89 == 43)
                {
                  v74 = (unsigned __int8 *)(v6 + 2);
                  *(void *)this = v6 + 2;
                  int v89 = v6[2];
                }
                uint64_t v6 = (char *)v74;
                if (((char)v89 - 48) <= 9)
                {
                  v90 = (char *)(v74 + 1);
                  do
                  {
                    *(void *)this = v90;
                    int v91 = *v90++;
                    LOBYTE(v89) = v91;
                  }
                  while ((v91 - 48) < 0xA);
                  int v89 = v89;
                  uint64_t v6 = v90 - 1;
                }
                if (v89 == 46)
                {
                  *(void *)this = ++v6;
                }
                else
                {
                  int v76 = 0;
LABEL_242:
                  if (v6 > (char *)v74)
                  {
                    sub_20DC3D6A4((std::string *)((char *)this + 32), v7, v6);
                    if (v76) {
                      int v54 = 258;
                    }
                    else {
                      int v54 = 259;
                    }
                    goto LABEL_246;
                  }
                }
LABEL_251:
                sub_20DC58860(&__p, v7, v6, v6 - v7);
                v92 = std::string::insert(&__p, 0, "invalid number: ");
                std::string::size_type v93 = v92->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__c.__r_.__value_.__l.__data_ = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
                __c.__r_.__value_.__r.__words[2] = v93;
                v92->__r_.__value_.__l.__size_ = 0;
                v92->__r_.__value_.__r.__words[2] = 0;
                v92->__r_.__value_.__r.__words[0] = 0;
                flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
                if (SHIBYTE(__c.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__c.__r_.__value_.__l.__data_);
                }
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  return;
                }
                v32 = (void *)__p.__r_.__value_.__r.__words[0];
                goto LABEL_74;
              }
              int v72 = 0;
              *(void *)this = ++v6;
              if (!v76) {
                goto LABEL_251;
              }
            }
            if (v79 > 9) {
              goto LABEL_221;
            }
            v82 = v6 + 1;
            do
            {
              *(void *)this = v82;
              int v86 = *v82++;
              LOBYTE(v78) = v86;
            }
            while ((v86 - 48) < 0xA);
            goto LABEL_220;
          }
          break;
      }
      if (v9 > 0x2E || ((1 << v9) & 0x680000000000) == 0)
      {
        memset(&__c, 0, sizeof(__c));
        std::string::operator=(&__c, v9);
        if ((v8 - 32) >= 0x5F)
        {
          sub_20DC3C4E4();
          v94 = std::string::insert(&__p, 0, "code: ");
          std::string::size_type v95 = v94->__r_.__value_.__r.__words[0];
          v104[0] = v94->__r_.__value_.__l.__size_;
          *(void *)((char *)v104 + 7) = *(std::string::size_type *)((char *)&v94->__r_.__value_.__r.__words[1] + 7);
          char v96 = HIBYTE(v94->__r_.__value_.__r.__words[2]);
          v94->__r_.__value_.__l.__size_ = 0;
          v94->__r_.__value_.__r.__words[2] = 0;
          v94->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__c.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__c.__r_.__value_.__l.__data_);
          }
          __c.__r_.__value_.__r.__words[0] = v95;
          __c.__r_.__value_.__l.__size_ = v104[0];
          *(std::string::size_type *)((char *)&__c.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v104 + 7);
          *((unsigned char *)&__c.__r_.__value_.__s + 23) = v96;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        std::operator+<char>();
        flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_72;
      }
      int v72 = 1;
      goto LABEL_194;
    }
    switch(v8)
    {
      case ' ':
        continue;
      case '""':
      case '\'':
        int v33 = *v6;
        if (v33 == v9) {
          goto LABEL_159;
        }
        int v34 = -1;
        break;
      case '(':
      case ')':
      case ',':
        goto LABEL_247;
      case '/':
        int v10 = *v6;
        if (v10 != 47)
        {
          if (v10 != 42) {
            goto LABEL_144;
          }
          std::string::value_type v11 = (unsigned __int8 *)(v7 + 2);
          while (1)
          {
            *(void *)this = v11;
            int v12 = *v11;
            if (v12 == 10)
            {
              *((void *)this + 1) = v11;
              ++*((_DWORD *)this + 4);
              int v12 = *v11;
            }
            else if (v12 == 42)
            {
              if (v11[1] == 47)
              {
                uint64_t v6 = (char *)(v11 + 2);
                *(void *)this = v11 + 2;
                goto LABEL_11;
              }
              int v12 = 42;
            }
            ++v11;
            if (!v12)
            {
              v31 = "end of file in comment";
LABEL_70:
              *(_OWORD *)&__c.__r_.__value_.__l.__data_ = *(_OWORD *)v31;
              *(std::string::size_type *)((char *)&__c.__r_.__value_.__r.__words[1] + 6) = *(void *)(v31 + 14);
              HIWORD(__c.__r_.__value_.__r.__words[2]) = 5632;
LABEL_71:
              flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
LABEL_72:
              if ((SHIBYTE(__c.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return;
              }
              v32 = (void *)__c.__r_.__value_.__r.__words[0];
LABEL_74:
              operator delete(v32);
              return;
            }
          }
        }
        for (uint64_t j = 2; ; ++j)
        {
          uint64_t v6 = &v7[j];
          *(void *)this = &v7[j];
          unsigned int v14 = v7[j];
          BOOL v67 = v14 > 0xD;
          int v15 = (1 << v14) & 0x2401;
          if (!v67 && v15 != 0) {
            break;
          }
        }
        if (v7[2] != 47) {
          continue;
        }
        if (!v5)
        {
          __c.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
          *(_OWORD *)&__c.__r_.__value_.__r.__words[1] = xmmword_20DC7CC40;
          strcpy(__c.__r_.__value_.__l.__data_, "a documentation comment should be on a line on its own");
          goto LABEL_71;
        }
        sub_20DC58860(&__p, v7 + 3, &v7[j], j - 3);
        v18 = (std::string *)*((void *)this + 8);
        unint64_t v17 = *((void *)this + 9);
        if ((unint64_t)v18 >= v17)
        {
          v19 = (std::string *)*((void *)this + 7);
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v19) >> 3);
          unint64_t v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((uint64_t)(v17 - (void)v19) >> 3) > v21) {
            unint64_t v21 = 0x5555555555555556 * ((uint64_t)(v17 - (void)v19) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v19) >> 3) >= 0x555555555555555) {
            unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v22 = v21;
          }
          v103 = (char *)this + 72;
          if (v22)
          {
            unint64_t v98 = v17;
            if (v22 > 0xAAAAAAAAAAAAAAALL) {
              sub_20DC4F504();
            }
            unint64_t v97 = v22;
            v23 = (char *)operator new(24 * v22);
            unint64_t v22 = v97;
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v19) >> 3);
            unint64_t v17 = v98;
          }
          else
          {
            v23 = 0;
          }
          v24 = (std::string *)&v23[24 * v20];
          std::string *v24 = __p;
          memset(&__p, 0, sizeof(__p));
          if (v18 == v19)
          {
            char v28 = 0;
            int64x2_t v27 = vdupq_n_s64((unint64_t)v18);
            v25 = &v23[24 * v20];
          }
          else
          {
            v25 = &v23[24 * v20];
            do
            {
              long long v26 = *(_OWORD *)&v18[-1].__r_.__value_.__l.__data_;
              *((void *)v25 - 1) = *((void *)&v18[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v25 - 24) = v26;
              v25 -= 24;
              v18[-1].__r_.__value_.__l.__size_ = 0;
              v18[-1].__r_.__value_.__r.__words[2] = 0;
              v18[-1].__r_.__value_.__r.__words[0] = 0;
              --v18;
            }
            while (v18 != v19);
            int64x2_t v27 = *(int64x2_t *)((char *)this + 56);
            unint64_t v17 = *((void *)this + 9);
            char v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          v29 = v24 + 1;
          *((void *)this + 7) = v25;
          *((void *)this + 8) = v24 + 1;
          *(int64x2_t *)&__c.__r_.__value_.__r.__words[1] = v27;
          *((void *)this + 9) = &v23[24 * v22];
          unint64_t v102 = v17;
          __c.__r_.__value_.__r.__words[0] = v27.i64[0];
          sub_20DC587E8((uint64_t)&__c);
          *((void *)this + 8) = v29;
          if (v28 < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string *v18 = __p;
          *((void *)this + 8) = v18 + 1;
        }
        goto LABEL_41;
      default:
        goto LABEL_144;
    }
    break;
  }
  do
  {
    if (v33 <= 0x1Fu)
    {
      __c.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&__c.__r_.__value_.__r.__words[1] = xmmword_20DC7CC90;
      strcpy(__c.__r_.__value_.__l.__data_, "illegal character in string constant");
      goto LABEL_71;
    }
    if (v33 == 92)
    {
      *((unsigned char *)this + 24) = 0;
      *(void *)this = v6 + 1;
      int v35 = v6[1];
      if (v34 == -1)
      {
        if (v35 > 97)
        {
          switch(v6[1])
          {
            case 'n':
              v36 = (std::string *)((char *)this + 32);
              std::string::value_type v37 = 10;
              break;
            case 'o':
            case 'p':
            case 'q':
            case 's':
            case 'v':
            case 'w':
              goto LABEL_262;
            case 'r':
              v36 = (std::string *)((char *)this + 32);
              std::string::value_type v37 = 13;
              break;
            case 't':
              v36 = (std::string *)((char *)this + 32);
              std::string::value_type v37 = 9;
              break;
            case 'u':
              goto LABEL_111;
            case 'x':
              *(void *)this = v6 + 2;
              __c.__r_.__value_.__r.__words[0] = 0;
              flatbuffers::Parser::ParseHexNum((char **)this, (unint64_t *)&__c, 2, (_WORD *)a2);
              *(unsigned char *)(a2 + 1) = 1;
              if (*(unsigned char *)a2) {
                return;
              }
              std::string::push_back((std::string *)((char *)this + 32), __c.__r_.__value_.__s.__data_[0]);
              goto LABEL_107;
            default:
              if (v35 == 98)
              {
                v36 = (std::string *)((char *)this + 32);
                std::string::value_type v37 = 8;
              }
              else
              {
                if (v35 != 102)
                {
LABEL_262:
                  __c.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                  *(_OWORD *)&__c.__r_.__value_.__r.__words[1] = xmmword_20DC7CC80;
                  strcpy(__c.__r_.__value_.__l.__data_, "unknown escape code in string constant");
                  goto LABEL_71;
                }
                v36 = (std::string *)((char *)this + 32);
                std::string::value_type v37 = 12;
              }
              break;
          }
        }
        else if (v35 > 46)
        {
          if (v35 == 47)
          {
            v36 = (std::string *)((char *)this + 32);
            std::string::value_type v37 = 47;
          }
          else
          {
            if (v35 != 92) {
              goto LABEL_262;
            }
            v36 = (std::string *)((char *)this + 32);
            std::string::value_type v37 = 92;
          }
        }
        else if (v35 == 34)
        {
          v36 = (std::string *)((char *)this + 32);
          std::string::value_type v37 = 34;
        }
        else
        {
          if (v35 != 39) {
            goto LABEL_262;
          }
          v36 = (std::string *)((char *)this + 32);
          std::string::value_type v37 = 39;
        }
        std::string::push_back(v36, v37);
        ++*(void *)this;
        goto LABEL_107;
      }
      if (v35 != 117) {
        goto LABEL_202;
      }
LABEL_111:
      *(void *)this = v6 + 2;
      __p.__r_.__value_.__r.__words[0] = 0;
      flatbuffers::Parser::ParseHexNum((char **)this, (unint64_t *)&__p, 4, (_WORD *)a2);
      *(unsigned char *)(a2 + 1) = 1;
      if (*(unsigned char *)a2) {
        return;
      }
      unsigned int data = __p.__r_.__value_.__l.__data_;
      if ((__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFC00) == 0xDC00)
      {
        if (v34 == -1)
        {
          __c.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
          *(_OWORD *)&__c.__r_.__value_.__r.__words[1] = xmmword_20DC7CC60;
          strcpy(__c.__r_.__value_.__l.__data_, "illegal Unicode sequence (unpaired low surrogate)");
          goto LABEL_71;
        }
        int v41 = 0;
        unsigned int v42 = ((uint64_t)__p.__r_.__value_.__l.__data_ & 0x3FF | ((v34 & 0x3FF) << 10)) + 0x10000;
        char v43 = 6;
        int v44 = 1;
        int v45 = -6;
        int v46 = -6;
        while (1)
        {
          char v47 = v41 ? v43 : v43 + 1;
          if (!(v42 >> v47)) {
            break;
          }
          v41 += 6;
          v43 += 5;
          ++v44;
          v45 += 6;
          BOOL v64 = __CFADD__(v46++, 1);
          if (v64) {
            goto LABEL_107;
          }
        }
        std::string::push_back((std::string *)((char *)this + 32), (254 << ((v41 == 0) - v46)) | (v42 >> v41));
        if (v41)
        {
          do
          {
            std::string::push_back((std::string *)((char *)this + 32), (v42 >> v45) & 0x3F | 0x80);
            --v44;
            v45 -= 6;
          }
          while (v44 > 1);
        }
        goto LABEL_107;
      }
      if ((__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFC00) != 0xD800)
      {
        if (v34 != -1) {
          goto LABEL_202;
        }
        int v48 = 0;
        char v49 = 6;
        int v50 = 1;
        int v51 = -6;
        int v52 = -6;
        while (1)
        {
          char v53 = v48 ? v49 : v49 + 1;
          if (!(LODWORD(__p.__r_.__value_.__l.__data_) >> v53)) {
            break;
          }
          v48 += 6;
          v49 += 5;
          ++v50;
          v51 += 6;
          BOOL v64 = __CFADD__(v52++, 1);
          if (v64) {
            goto LABEL_107;
          }
        }
        std::string::push_back((std::string *)((char *)this + 32), (254 << ((v48 == 0) - v52)) | (LODWORD(__p.__r_.__value_.__l.__data_) >> v48));
        if (v48)
        {
          do
          {
            std::string::push_back((std::string *)((char *)this + 32), (data >> v51) & 0x3F | 0x80);
            --v50;
            v51 -= 6;
          }
          while (v50 > 1);
        }
LABEL_107:
        int v34 = -1;
        goto LABEL_108;
      }
      if (v34 != -1)
      {
        __c.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&__c.__r_.__value_.__r.__words[1] = xmmword_20DC7CC70;
        strcpy(__c.__r_.__value_.__l.__data_, "illegal Unicode sequence (multiple high surrogates)");
        goto LABEL_71;
      }
      int v34 = (int)__p.__r_.__value_.__l.__data_;
    }
    else
    {
      if (v34 != -1) {
        goto LABEL_202;
      }
      BOOL v39 = ((char)v33 - 32) < 0x5F && *((unsigned char *)this + 24) != 0;
      *((unsigned char *)this + 24) = v39;
      *(void *)this = v6 + 1;
      std::string::push_back((std::string *)((char *)this + 32), *v6);
    }
LABEL_108:
    uint64_t v6 = *(char **)this;
    int v33 = **(unsigned __int8 **)this;
  }
  while (v33 != v9);
  if (v34 != -1)
  {
LABEL_202:
    __c.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__c.__r_.__value_.__r.__words[1] = xmmword_20DC7CC50;
    strcpy(__c.__r_.__value_.__l.__data_, "illegal Unicode sequence (unpaired high surrogate)");
    goto LABEL_71;
  }
LABEL_159:
  *(void *)this = v6 + 1;
  if (!*((unsigned char *)this + 24) && !*((unsigned char *)this + 865))
  {
    char v66 = *((unsigned char *)this + 55);
    BOOL v67 = v66 < 0;
    v68 = (char *)*((void *)this + 4);
    uint64_t v69 = *((void *)this + 5);
    if (v66 >= 0) {
      v68 = (char *)this + 32;
    }
    __c.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
    uint64_t v70 = v66 & 0x7F;
    if (v67) {
      uint64_t v70 = v69;
    }
    std::string::size_type v71 = (std::string::size_type)&v68[v70];
    while (__c.__r_.__value_.__r.__words[0] < v71)
    {
      if ((sub_20DC73DBC(&__c.__r_.__value_.__l.__data_) & 0x80000000) != 0)
      {
        v31 = "illegal UTF-8 sequence";
        goto LABEL_70;
      }
    }
  }
  int v54 = 257;
LABEL_246:
  *((_DWORD *)this + 5) = v54;
LABEL_247:
  *(_WORD *)a2 = 0;
}

std::string *sub_20DC3D6A4(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v7 = a3 - a2;
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    int v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    unint64_t v7 = a3 - a2;
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    int v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    unsigned int v14 = this;
    if ((v6 & 0x80) != 0) {
      unsigned int v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    int v15 = (char *)v14 + size;
    do
    {
      char v16 = *v4++;
      *v15++ = v16;
    }
    while (v4 != a3);
    *int v15 = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_20DC58860(__p, v4, a3, v7);
    if (v20 >= 0) {
      int v12 = __p;
    }
    else {
      int v12 = (void **)__p[0];
    }
    if (v20 >= 0) {
      std::string::size_type v13 = v20 & 0x7F;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

BOOL flatbuffers::Parser::Is(flatbuffers::Parser *this, int a2)
{
  return *((_DWORD *)this + 5) == a2;
}

BOOL flatbuffers::Parser::IsIdent(flatbuffers::Parser *this, const char *__s)
{
  if (*((_DWORD *)this + 5) != 260) {
    return 0;
  }
  size_t v4 = strlen(__s);
  size_t v5 = *((unsigned __int8 *)this + 55);
  size_t v6 = (v5 & 0x80u) == 0 ? v5 & 0x7F : *((void *)this + 5);
  if (v4 != v6) {
    return 0;
  }
  size_t v7 = v4;
  int v8 = (void *)((char *)this + 32);
  if ((v5 & 0x80) != 0)
  {
    if (v7 != -1)
    {
      int v8 = (void *)*v8;
      size_t v5 = *((void *)this + 5);
      goto LABEL_8;
    }
LABEL_17:
    abort();
  }
  if (v7 == -1) {
    goto LABEL_17;
  }
LABEL_8:
  if (v5 >= v7) {
    size_t v9 = v7;
  }
  else {
    size_t v9 = v5;
  }
  BOOL v10 = memcmp(v8, __s, v9) == 0;
  return v5 == v7 && v10;
}

BOOL sub_20DC3D8C0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  size_t v5 = *((unsigned __int8 *)a1 + 23);
  size_t v6 = a1[1];
  if ((v5 & 0x80u) == 0) {
    size_t v7 = v5 & 0x7F;
  }
  else {
    size_t v7 = a1[1];
  }
  if (v4 != v7) {
    return 0;
  }
  size_t v8 = v4;
  if ((v5 & 0x80) != 0)
  {
    if (v4 != -1)
    {
      a1 = (void *)*a1;
      size_t v5 = v6;
      goto LABEL_7;
    }
LABEL_16:
    abort();
  }
  if (v4 == -1) {
    goto LABEL_16;
  }
LABEL_7:
  if (v5 >= v4) {
    size_t v9 = v4;
  }
  else {
    size_t v9 = v5;
  }
  BOOL v10 = memcmp(a1, __s, v9) == 0;
  return v5 == v8 && v10;
}

uint64_t flatbuffers::Parser::LookupEnum(uint64_t a1, uint64_t a2)
{
  if (((-1431655765 * ((uint64_t)(*(void *)(*(void *)(a1 + 296) + 8) - **(void **)(a1 + 296)) >> 3)) & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v4 = a1 + 176;
  uint64_t v5 = a1 + 184;
  int64_t v6 = -1431655765 * ((uint64_t)(*(void *)(*(void *)(a1 + 296) + 8) - **(void **)(a1 + 296)) >> 3);
  while (1)
  {
    flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 296), a2, v6, &__p);
    uint64_t v7 = sub_20DC58904(v4, (uint64_t)&__p);
    uint64_t v8 = v5 == v7 ? 0 : *(void *)(v7 + 56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      break;
    }
    if (v6-- < 1) {
      return 0;
    }
  }
  return v8;
}

uint64_t flatbuffers::Parser::LookupStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_20DC58A14(a1 + 128, a2);
  if (a1 + 136 == v3) {
    return 0;
  }
  uint64_t result = *(void *)(v3 + 56);
  if (result) {
    ++*(_DWORD *)(result + 144);
  }
  return result;
}

uint64_t flatbuffers::Parser::LookupCreateStruct(uint64_t a1, uint64_t a2, int a3, int a4)
{
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 296), a2, 0x3E8uLL, &v18);
  uint64_t v8 = sub_20DC58A14(a1 + 128, a2);
  uint64_t v9 = a1 + 136;
  if (a1 + 136 != v8)
  {
    uint64_t v10 = *(void *)(v8 + 56);
    if (v10)
    {
      ++*(_DWORD *)(v10 + 144);
      if (*(unsigned char *)(v10 + 201))
      {
        if (a4)
        {
          *(void *)(v10 + 128) = *(void *)(a1 + 296);
          sub_20DC6FECC((uint64_t **)(a1 + 128), a2, (const void **)&v18.__r_.__value_.__l.__data_);
        }
        goto LABEL_29;
      }
    }
  }
  uint64_t v11 = sub_20DC58A14(a1 + 128, (uint64_t)&v18);
  if (v9 == v11)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(v11 + 56);
    if (v10)
    {
      ++*(_DWORD *)(v10 + 144);
      if (*(unsigned char *)(v10 + 201))
      {
        if (a4) {
          *(void *)(v10 + 128) = *(void *)(a1 + 296);
        }
        goto LABEL_29;
      }
    }
  }
  if ((a4 & 1) == 0 && !v10)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 296) + 8) - **(void **)(a1 + 296);
    if (v12)
    {
      unint64_t v13 = v12 / 24 - 1;
      do
      {
        flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 296), a2, v13, &__p);
        uint64_t v14 = sub_20DC58A14(a1 + 128, (uint64_t)&__p);
        if (v9 == v14)
        {
          uint64_t v10 = 0;
        }
        else
        {
          uint64_t v10 = *(void *)(v14 + 56);
          if (v10) {
            ++*(_DWORD *)(v10 + 144);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        BOOL v15 = v13-- != 0;
      }
      while (v15 && !v10);
    }
  }
  if (!v10 && a3) {
    operator new();
  }
LABEL_29:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v10;
}

uint64_t sub_20DC3DDE4(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v7 = a1[4];
  unint64_t v6 = (unint64_t)a1[5];
  if ((unint64_t)v7 >= v6)
  {
    char v53 = a1[3];
    uint64_t v54 = v7 - v53;
    unint64_t v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61) {
      abort();
    }
    uint64_t v56 = v6 - (void)v53;
    if (v56 >> 2 > v55) {
      unint64_t v55 = v56 >> 2;
    }
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v57 = v55;
    }
    if (v57)
    {
      if (v57 >> 61) {
        sub_20DC4F504();
      }
      int v58 = (char *)operator new(8 * v57);
    }
    else
    {
      int v58 = 0;
    }
    unsigned int v59 = &v58[8 * v54];
    v60 = &v58[8 * v57];
    *(void *)unsigned int v59 = a3;
    uint64_t v8 = (uint64_t *)(v59 + 8);
    if (v7 != v53)
    {
      do
      {
        uint64_t v61 = *--v7;
        *((void *)v59 - 1) = v61;
        v59 -= 8;
      }
      while (v7 != v53);
      uint64_t v7 = a1[3];
    }
    a1[3] = (uint64_t *)v59;
    a1[4] = v8;
    a1[5] = (uint64_t *)v60;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *uint64_t v7 = a3;
    uint64_t v8 = v7 + 1;
  }
  uint64_t v9 = a1 + 1;
  uint64_t v10 = (uint64_t **)a1[1];
  a1[4] = v8;
  size_t v11 = *((unsigned __int8 *)a2 + 23);
  unsigned int v62 = a2;
  if (!v10)
  {
    v36 = a1 + 1;
LABEL_66:
    char v47 = operator new(0x40uLL);
    int v48 = v47 + 4;
    if ((v11 & 0x80) != 0)
    {
      sub_20DC55634((uint64_t)v48, *v62, (unint64_t)v62[1]);
    }
    else
    {
      *int v48 = *(_OWORD *)v62;
      v47[6] = v62[2];
    }
    uint64_t v49 = a3;
    v47[7] = 0;
    *char v47 = 0;
    v47[1] = 0;
    v47[2] = v36;
    uint64_t *v9 = v47;
    int v50 = (uint64_t *)**a1;
    int v51 = v47;
    if (v50)
    {
      *a1 = v50;
      int v51 = *v9;
    }
    sub_20DC5007C(a1[1], v51);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_71:
    uint64_t result = 0;
    v47[7] = v49;
    return result;
  }
  uint64_t v12 = a2[1];
  if ((v11 & 0x80u) == 0) {
    unint64_t v13 = a2;
  }
  else {
    unint64_t v13 = *a2;
  }
  if ((v11 & 0x80u) == 0) {
    size_t v14 = v11 & 0x7F;
  }
  else {
    size_t v14 = (size_t)a2[1];
  }
  BOOL v15 = v10;
  char v16 = a1 + 1;
  do
  {
    if (*((char *)v15 + 55) < 0)
    {
      std::string::size_type v17 = v15[4];
      size_t v18 = (size_t)v15[5];
    }
    else
    {
      std::string::size_type v17 = (uint64_t *)(v15 + 4);
      size_t v18 = *((unsigned __int8 *)v15 + 55);
    }
    if (v14 >= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v14;
    }
    int v20 = memcmp(v17, v13, v19);
    BOOL v21 = v18 < v14;
    if (v20) {
      BOOL v21 = v20 < 0;
    }
    BOOL v22 = !v21;
    if (v21) {
      v23 = v15 + 1;
    }
    else {
      v23 = v15;
    }
    if (v22) {
      char v16 = v15;
    }
    BOOL v15 = (uint64_t **)*v23;
  }
  while (*v23);
  if (v16 == v9)
  {
    if ((v11 & 0x80u) == 0) {
      size_t v32 = v11;
    }
    else {
      size_t v32 = (size_t)v12;
    }
    goto LABEL_43;
  }
  long long v26 = v16[4];
  v25 = v16 + 4;
  v24 = v26;
  char v27 = *((unsigned char *)v25 + 23);
  int v28 = v27;
  if (v27 >= 0) {
    v29 = v25;
  }
  else {
    v29 = v24;
  }
  size_t v30 = v27 & 0x7F;
  if (v28 >= 0) {
    size_t v31 = v30;
  }
  else {
    size_t v31 = v25[1];
  }
  if ((v11 & 0x80u) == 0) {
    size_t v32 = v11;
  }
  else {
    size_t v32 = (size_t)v12;
  }
  if (v31 >= v32) {
    size_t v33 = v32;
  }
  else {
    size_t v33 = v31;
  }
  int v34 = memcmp(v13, v29, v33);
  BOOL v35 = v32 < v31;
  if (v34) {
    BOOL v35 = v34 < 0;
  }
  if (v35)
  {
    while (1)
    {
      while (1)
      {
LABEL_43:
        v36 = v10;
        size_t v37 = *((unsigned __int8 *)v10 + 55);
        if ((v37 & 0x80u) == 0) {
          v38 = (uint64_t *)(v10 + 4);
        }
        else {
          v38 = v10[4];
        }
        size_t v39 = (size_t)v10[5];
        if ((v37 & 0x80u) == 0) {
          size_t v40 = v37 & 0x7F;
        }
        else {
          size_t v40 = (size_t)v10[5];
        }
        if (v40 >= v32) {
          size_t v41 = v32;
        }
        else {
          size_t v41 = v40;
        }
        int v42 = memcmp(v13, v38, v41);
        BOOL v43 = v32 < v40;
        if (v42) {
          BOOL v43 = v42 < 0;
        }
        if (!v43) {
          break;
        }
        uint64_t v10 = (uint64_t **)*v10;
        uint64_t v9 = v36;
        if (!*v36) {
          goto LABEL_66;
        }
      }
      if ((v37 & 0x80u) != 0) {
        size_t v37 = v39;
      }
      if (v32 >= v37) {
        size_t v44 = v37;
      }
      else {
        size_t v44 = v32;
      }
      int v45 = memcmp(v38, v13, v44);
      BOOL v46 = v37 < v32;
      if (v45) {
        BOOL v46 = v45 < 0;
      }
      if (!v46) {
        break;
      }
      uint64_t v10 = (uint64_t **)v10[1];
      if (!v10)
      {
        uint64_t v9 = v36 + 1;
        goto LABEL_66;
      }
    }
    char v47 = v10;
    uint64_t v49 = a3;
    goto LABEL_71;
  }
  return 1;
}

void flatbuffers::Parser::ParseField(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20DC55634((uint64_t)&v22, *(const void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    long long v22 = *(_OWORD *)(a1 + 32);
    uint64_t v23 = *(void *)(a1 + 48);
  }
  if (!flatbuffers::Parser::LookupCreateStruct(a1, (uint64_t)&v22, 0, 0))
  {
    memset(v21, 0, sizeof(v21));
    sub_20DC58508(v21, *(void *)(a1 + 56), *(void *)(a1 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3));
    flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 260, a3);
    *(unsigned char *)(a3 + 1) = 1;
    if (*(unsigned char *)a3) {
      goto LABEL_6;
    }
    flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 58, a3);
    *(unsigned char *)(a3 + 1) = 1;
    if (*(unsigned char *)a3) {
      goto LABEL_6;
    }
    std::string __p = 0;
    long long v19 = 0uLL;
    __int16 v20 = 0;
    flatbuffers::Parser::ParseType(a1, (uint64_t)&__p, a3);
    *(unsigned char *)(a3 + 1) = 1;
    if (*(unsigned char *)a3) {
      goto LABEL_6;
    }
    if (!*(unsigned char *)(a2 + 200))
    {
      if (__p == 17)
      {
        v15[0] = (char *)operator new(0x38uLL);
        *(_OWORD *)&v15[1] = xmmword_20DC7CCB0;
        strcpy(v15[0], "fixed-length array in table must be wrapped in struct");
        goto LABEL_52;
      }
      uint64_t v17 = 0;
      if (__p == 16)
      {
        if (v23 >= 0) {
          size_t v6 = HIBYTE(v23) & 0x7F;
        }
        else {
          size_t v6 = *((void *)&v22 + 1);
        }
        uint64_t v7 = v15;
        sub_20DC58B3C((uint64_t)v15, v6 + 5);
        if (SHIBYTE(v15[2]) < 0) {
          uint64_t v7 = (char **)v15[0];
        }
        if (v6)
        {
          if (v23 >= 0) {
            uint64_t v8 = &v22;
          }
          else {
            uint64_t v8 = (long long *)v22;
          }
          memmove(v7, v8, v6);
        }
        strcpy((char *)v7 + v6, "_type");
        flatbuffers::Parser::AddField();
      }
      if (__p == (void *)0x100000000ELL)
      {
        uint64_t v9 = *(void *)(a1 + 1120);
        if (v9 && (v9 & 0xFFFFFFFFFFFE7CA4) == 0)
        {
          v15[1] = 0;
          v15[2] = *((char **)&v19 + 1);
          __int16 v16 = 0;
          int v10 = *(_DWORD *)(*((void *)&v19 + 1) + 152);
          LODWORD(v15[0]) = 14;
          HIDWORD(v15[0]) = v10;
          if (v23 >= 0) {
            size_t v11 = HIBYTE(v23) & 0x7F;
          }
          else {
            size_t v11 = *((void *)&v22 + 1);
          }
          uint64_t v12 = &v14;
          sub_20DC58B3C((uint64_t)&v14, v11 + 5);
          if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
          }
          if (v11)
          {
            if (v23 >= 0) {
              unint64_t v13 = &v22;
            }
            else {
              unint64_t v13 = (long long *)v22;
            }
            memmove(v12, v13, v11);
          }
          strcpy((char *)v12 + v11, "_type");
          flatbuffers::Parser::AddField();
        }
        v15[0] = (char *)operator new(0x58uLL);
        strcpy(v15[0], "Vectors of unions are not yet supported in all the specified programming languages.");
        flatbuffers::Parser::Error(a1, (_WORD *)a3);
        goto LABEL_53;
      }
LABEL_35:
      flatbuffers::Parser::AddField();
    }
    if (__p <= 0xFFFFFFFB && (__p - 1) > 0xB)
    {
      if (__p == 17)
      {
        if ((*(void *)(a1 + 1120) & 0xFFFFFFFFFFFFFA54) != 0)
        {
          v15[0] = (char *)operator new(0x50uLL);
          *(_OWORD *)&v15[1] = xmmword_20DC7CCD0;
          strcpy(v15[0], "Arrays are not yet supported in all the specified programming languages.");
LABEL_52:
          flatbuffers::Parser::Error(a1, (_WORD *)a3);
          if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
          {
LABEL_6:
            std::string __p = v21;
            sub_20DC5847C((void ***)&__p);
            goto LABEL_8;
          }
LABEL_53:
          operator delete(v15[0]);
          goto LABEL_6;
        }
      }
      else if (__p != 15 || !*(unsigned char *)(v19 + 200))
      {
        v15[0] = (char *)operator new(0x38uLL);
        *(_OWORD *)&v15[1] = xmmword_20DC7CC60;
        strcpy(v15[0], "structs_ may contain only scalar or struct fields");
        goto LABEL_52;
      }
    }
    uint64_t v17 = 0;
    goto LABEL_35;
  }
  std::string __p = operator new(0x38uLL);
  long long v19 = xmmword_20DC7CC70;
  strcpy((char *)__p, "field name can not be the same as table/struct name");
  flatbuffers::Parser::Error(a1, (_WORD *)a3);
  operator delete(__p);
LABEL_8:
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
}

BOOL flatbuffers::Parser::SupportsAdvancedArrayFeatures(flatbuffers::Parser *this)
{
  return (*((void *)this + 140) & 0xFFFFFFFFFFFFFA54) == 0;
}

uint64_t sub_20DC3F684(void **a1, const void **a2, char *__s)
{
  char v6 = *((unsigned char *)a2 + 23);
  int v7 = v6;
  size_t v8 = v6 & 0x7F;
  if (v7 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  size_t v10 = strlen(__s);
  uint64_t result = sub_20DC58B3C((uint64_t)a1, v9 + v10);
  if (*((char *)a1 + 23) < 0) {
    a1 = (void **)*a1;
  }
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a1, v12, v9);
  }
  if (v10) {
    uint64_t result = (uint64_t)memmove((char *)a1 + v9, __s, v10);
  }
  *((unsigned char *)a1 + v9 + v10) = 0;
  return result;
}

BOOL flatbuffers::Parser::SupportsAdvancedUnionFeatures(flatbuffers::Parser *this)
{
  uint64_t v1 = *((void *)this + 140);
  return (v1 & 0xFFFFFFFFFFFE7CA4) == 0 && v1 != 0;
}

uint64_t sub_20DC3F7A4()
{
  sub_20DC50E1C((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x263F8C2B8];
  uint64_t v0 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x263F8C318] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x210568AB0](&v4);
}

void flatbuffers::Parser::ParseComma(flatbuffers::Parser *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 954) || (flatbuffers::Parser::Expect(this, 44, a2), *(unsigned char *)(a2 + 1) = 1, !*(unsigned char *)a2)) {
    *(_WORD *)a2 = 0;
  }
}

BOOL sub_20DC3F9B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  signed __int8 v2 = a1[23];
  if (v2 >= 0) {
    uint64_t v3 = v2 & 0x7F;
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  signed __int8 v4 = a2[23];
  int v5 = v4;
  uint64_t v6 = v4 & 0x7F;
  if (v5 < 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v3 != v6) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((a1[23] & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if ((v2 & 0x7F) == 0) {
    return 1;
  }
  uint64_t v7 = (v2 & 0x7F) - 1;
  do
  {
    int v9 = *a1++;
    int v8 = v9;
    int v11 = *a2++;
    int v10 = v11;
    BOOL v13 = v7-- != 0;
    BOOL v14 = v8 == v10;
    BOOL v15 = v8 == v10;
  }
  while (v14 && v13);
  return v15;
}

uint64_t flatbuffers::EnumDef::ReverseLookup(flatbuffers::EnumDef *this, uint64_t a2, unsigned int a3)
{
  if (*((unsigned char *)this + 148)) {
    unsigned int v3 = a3;
  }
  else {
    unsigned int v3 = 0;
  }
  uint64_t v4 = *((void *)this + 27);
  for (uint64_t i = *((void *)this + 26) + 8 * v3; i != v4; i += 8)
  {
    uint64_t result = *(void *)i;
    if (*(void *)(*(void *)i + 136) == a2) {
      return result;
    }
  }
  return 0;
}

void flatbuffers::Parser::ParseTable(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  int v10 = *(_DWORD *)(a1 + 20);
  if (v10 == 91)
  {
    flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v230);
    HIBYTE(v230) = 1;
    if ((_BYTE)v230) {
      goto LABEL_3;
    }
    uint64_t v225 = a5;
    v227 = a4;
    int v11 = 93;
  }
  else
  {
    flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 123, (uint64_t)&v230);
    HIBYTE(v230) = 1;
    if ((_BYTE)v230) {
      goto LABEL_3;
    }
    uint64_t v225 = a5;
    v227 = a4;
    int v11 = 125;
  }
  unint64_t v12 = 0;
  v229 = (uint64_t *)(a1 + 336);
  BOOL v13 = (uint64_t *)(a1 + 384);
  do
  {
    while (1)
    {
      if (*(unsigned char *)(a1 + 729)) {
        BOOL v14 = v12 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14 && *(_DWORD *)(a1 + 20) == v11)
      {
        a5 = v225;
        int v45 = v227;
        goto LABEL_133;
      }
      memset(&__s1, 0, sizeof(__s1));
      if (v10 == 91)
      {
        uint64_t v17 = *(void *)(a2 + 176);
        if (v12 < (*(void *)(a2 + 184) - v17) >> 3)
        {
          std::string::operator=(&__s1, *(const std::string **)(v17 + 8 * v12));
LABEL_30:
          std::string::size_type v19 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = *((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            std::string::size_type size = __s1.__r_.__value_.__l.__size_;
          }
          if (size == 7)
          {
            if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              std::string::size_type v19 = __s1.__r_.__value_.__l.__size_;
              p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            }
            else
            {
              p_s1 = &__s1;
            }
            size_t v22 = v19 >= 7 ? 7 : v19;
            if (!memcmp(p_s1, "$schema", v22) && v19 == 7)
            {
              flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 257, (uint64_t)&v230);
LABEL_42:
              if ((_BYTE)v230) {
                goto LABEL_61;
              }
LABEL_115:
              __int16 v230 = 256;
LABEL_116:
              if (*(_DWORD *)(a1 + 20) == v11)
              {
                int v16 = 2;
              }
              else
              {
                if (*(unsigned char *)(a1 + 954)
                  || (flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, (uint64_t)&v230), !(_BYTE)v230))
                {
                  int v16 = 0;
                  LOBYTE(v230) = 0;
                }
                else
                {
                  int v16 = 1;
                }
                HIBYTE(v230) = 1;
              }
              goto LABEL_17;
            }
          }
          uint64_t v23 = sub_20DC7572C(a2 + 152, &__s1);
          if (a2 + 160 == v23 || (uint64_t v24 = *(void *)(v23 + 56)) == 0)
          {
            if (*(unsigned char *)(a1 + 750))
            {
              flatbuffers::Parser::SkipAnyJsonValue((flatbuffers::Parser *)a1, (uint64_t)&v230);
              goto LABEL_42;
            }
            std::operator+<char>();
            flatbuffers::Parser::Error(a1, &v230);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            goto LABEL_121;
          }
          uint64_t v222 = a3;
          if (*(_DWORD *)(a1 + 20) == 260)
          {
            unint64_t v25 = *(unsigned __int8 *)(a1 + 55);
            unint64_t v26 = (v25 & 0x80u) == 0 ? v25 & 0x7F : *(void *)(a1 + 40);
            if (v26 == 4)
            {
              char v27 = (const void *)(a1 + 32);
              if ((v25 & 0x80) != 0)
              {
                char v27 = *(const void **)(a1 + 32);
                unint64_t v25 = *(void *)(a1 + 40);
              }
              size_t v28 = v25 >= 4 ? 4 : v25;
              if (!memcmp(v27, "null", v28) && v25 == 4)
              {
                unsigned int v29 = *(_DWORD *)(v24 + 152);
                if (v29 <= 0xFFFFFFFB && v29 - 1 >= 0xC)
                {
                  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v230);
                  a3 = v222;
                  if ((_BYTE)v230)
                  {
LABEL_61:
                    int v16 = 1;
                    HIBYTE(v230) = 1;
                    goto LABEL_17;
                  }
                  goto LABEL_115;
                }
              }
            }
          }
          long long v30 = *(_OWORD *)(v24 + 168);
          *(_OWORD *)v239 = *(_OWORD *)(v24 + 152);
          *(_OWORD *)&v239[16] = v30;
          if (*(char *)(v24 + 207) < 0) {
            sub_20DC55634((uint64_t)&v240, *(const void **)(v24 + 184), *(void *)(v24 + 192));
          }
          else {
            std::string v240 = *(std::string *)(v24 + 184);
          }
          __int16 v241 = *(_WORD *)(v24 + 208);
          if (!*(unsigned char *)(v24 + 221))
          {
            if (*(void *)(v24 + 224))
            {
              flatbuffers::Parser::ParseNestedFlatbuffer((flatbuffers::Parser *)a1, (uint64_t)v239, v24, v12, a2, (uint64_t)&v230);
              HIBYTE(v230) = 1;
              a3 = v222;
              if ((_BYTE)v230) {
                goto LABEL_103;
              }
            }
            else
            {
              int v31 = *(_DWORD *)(a1 + 1204);
              if (v31 < 64)
              {
                *(_DWORD *)(a1 + 1204) = v31 + 1;
                flatbuffers::Parser::ParseAnyValue(a1, (uint64_t)v239, v24, v12, a2, 0, 0, (uint64_t)&v230);
                --*(_DWORD *)(a1 + 1204);
              }
              else
              {
                flatbuffers::Parser::RecurseError((flatbuffers::Parser *)a1, &v230);
              }
              a3 = v222;
              HIBYTE(v230) = 1;
              if ((_BYTE)v230)
              {
LABEL_103:
                char v44 = 0;
LABEL_112:
                if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v240.__r_.__value_.__l.__data_);
                }
                if (v44) {
                  goto LABEL_115;
                }
LABEL_121:
                int v16 = 1;
                HIBYTE(v230) = 1;
                if ((_BYTE)v230) {
                  goto LABEL_17;
                }
                goto LABEL_116;
              }
            }
LABEL_91:
            uint64_t v39 = *(void *)(a1 + 1184);
            uint64_t v40 = v39 - 72 * (v12 & 0x1FFFFFFFFFFFFFFFLL);
            uint64_t v41 = v39 + 72;
            uint64_t v42 = -72 * v12;
            while (1)
            {
              if (!v42)
              {
                uint64_t v41 = v40;
LABEL_105:
                *(_OWORD *)std::string __p = *(_OWORD *)v239;
                *(_OWORD *)&__p[16] = *(_OWORD *)&v239[16];
                if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_20DC55634((uint64_t)&v234, v240.__r_.__value_.__l.__data_, v240.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v234 = *(_OWORD *)&v240.__r_.__value_.__l.__data_;
                  *(void *)v235 = *((void *)&v240.__r_.__value_.__l + 2);
                }
                *(_WORD *)&v235[8] = v241;
                v236 = (void *)v24;
                sub_20DC78DC4((uint64_t *)(a1 + 1176), v41, (uint64_t)__p);
                if ((v235[7] & 0x80000000) != 0) {
                  operator delete((void *)v234);
                }
                ++v12;
                char v44 = 1;
                goto LABEL_111;
              }
              uint64_t v43 = *(void *)(v41 - 80);
              if (v43 == v24) {
                break;
              }
              v41 -= 72;
              v42 += 72;
              if (*(unsigned __int16 *)(v43 + 208) < *(unsigned __int16 *)(v24 + 208)) {
                goto LABEL_105;
              }
            }
            std::operator+<char>();
            flatbuffers::Parser::Error(a1, &v230);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
LABEL_100:
            char v44 = 0;
LABEL_111:
            a3 = v222;
            goto LABEL_112;
          }
          size_t v32 = (char *)operator new(0x400uLL);
          *(void *)std::string __p = v32;
          *(void *)&__p[16] = v32 + 1024;
          bzero(v32, 0x400uLL);
          *(void *)&__p[24] = 0;
          long long v234 = 0uLL;
          v235[0] = 0;
          *(void *)&v235[4] = 7;
          v237[0] = 0;
          v237[1] = 0;
          v236 = v237;
          v238[0] = 0;
          v238[1] = 0;
          v238[2] = __p;
          v237[2] = __p;
          v237[3] = v238;
          *(void *)&__p[8] = v32;
          flatbuffers::Parser::ParseFlexBufferValue(a1, (uint64_t *)__p, (uint64_t)&v230);
          HIBYTE(v230) = 1;
          if ((_BYTE)v230)
          {
            unint64_t v15 = sub_20DC754E0((uint64_t)__p);
            goto LABEL_100;
          }
          sub_20DC722EC((uint64_t)__p);
          if (*(void *)(a1 + 408) <= 7uLL) {
            *(void *)(a1 + 408) = 8;
          }
          int v34 = *(unsigned char **)__p;
          size_t v33 = *(unsigned char **)&__p[8];
          uint64_t v35 = *(void *)(a1 + 384);
          unint64_t v36 = (__p[0] + (_BYTE)v35 - (*(unsigned char *)(a1 + 368) + __p[8] + *(_DWORD *)(a1 + 376))) & 7;
          if (v35 - *(void *)(a1 + 392) >= v36)
          {
            *BOOL v13 = v35 - v36;
            if (v36)
            {
LABEL_82:
              uint64_t v37 = 0;
              do
                *(unsigned char *)(*v13 + v37++) = 0;
              while (v36 != v37);
              int v34 = *(unsigned char **)__p;
              size_t v33 = *(unsigned char **)&__p[8];
            }
            if (v34 == v33) {
              v38 = &flatbuffers::data<unsigned char,std::allocator<unsigned char>>(std::vector<unsigned char> const&)::t;
            }
            else {
              v38 = v34;
            }
            sub_20DC43E58((uint64_t)v229, v38, v33 - v34);
            sub_20DC3F7A4();
            if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v240.__r_.__value_.__l.__data_);
            }
            std::string v240 = v232;
            sub_20DC754E0((uint64_t)__p);
            goto LABEL_91;
          }
          sub_20DC4F8B0(v229, (__p[0] + (_BYTE)v35 - (*(unsigned char *)(a1 + 368) + __p[8] + *(_DWORD *)(a1 + 376))) & 7);
          *v13 -= v36;
          goto LABEL_82;
        }
        *(void *)std::string __p = operator new(0x28uLL);
        *(_OWORD *)&__p[8] = xmmword_20DC7CDA0;
        strcpy(*(char **)__p, "too many unnamed fields in nested array");
        flatbuffers::Parser::Error(a1, &v230);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        int v16 = 1;
      }
      else
      {
        std::string::operator=(&__s1, (const std::string *)(a1 + 32));
        if (*(_DWORD *)(a1 + 20) == 257)
        {
          flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v230);
        }
        else
        {
          if (*(unsigned char *)(a1 + 729)) {
            int v18 = 257;
          }
          else {
            int v18 = 260;
          }
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, v18, (uint64_t)&v230);
        }
        int v16 = 1;
        HIBYTE(v230) = 1;
        if (!(_BYTE)v230)
        {
          if (*(unsigned char *)(a1 + 954) && (*(_DWORD *)(a1 + 20) | 0x20) == 0x7B) {
            goto LABEL_30;
          }
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 58, (uint64_t)&v230);
          HIBYTE(v230) = 1;
          if (!(_BYTE)v230) {
            goto LABEL_30;
          }
        }
      }
LABEL_17:
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v16) {
        goto LABEL_129;
      }
    }
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  while (!v16);
LABEL_129:
  a5 = v225;
  int v45 = v227;
  if (v16 != 2)
  {
LABEL_130:
    int v46 = v230;
    *(unsigned char *)a5 = v230;
    HIBYTE(v230) = 1;
    *(unsigned char *)(a5 + 1) = 1;
    if (v46) {
      return;
    }
    goto LABEL_137;
  }
LABEL_133:
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v230);
  HIBYTE(v230) = 1;
  if ((_BYTE)v230)
  {
LABEL_3:
    *(_WORD *)a5 = 257;
    return;
  }
  if (v10 == 91 && v12 != (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 3)
  {
    *(void *)std::string __p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_20DC7CDB0;
    strcpy(*(char **)__p, "wrong number of unnamed fields in table vector");
    flatbuffers::Parser::Error(a1, &v230);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_130;
  }
  LOBYTE(v230) = 0;
  *(_WORD *)a5 = 256;
LABEL_137:
  uint64_t v47 = *(void *)(a2 + 176);
  uint64_t v48 = *(void *)(a2 + 184);
  if (v47 != v48)
  {
    for (uint64_t i = *(void *)(a2 + 176); i != v48; i += 8)
    {
      if (*(unsigned char *)(*(void *)i + 217))
      {
        if (!(-72 * v12))
        {
LABEL_158:
          std::operator+<char>();
          int v58 = std::string::append(&v232, " in ");
          std::string::size_type v59 = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)v239 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          *(void *)&v239[16] = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          char v60 = *(unsigned char *)(a2 + 23);
          BOOL v61 = v60 < 0;
          if (v60 >= 0) {
            unsigned int v62 = (const std::string::value_type *)a2;
          }
          else {
            unsigned int v62 = *(const std::string::value_type **)a2;
          }
          std::string::size_type v63 = v60 & 0x7F;
          if (v61) {
            std::string::size_type v64 = *(void *)(a2 + 8);
          }
          else {
            std::string::size_type v64 = v63;
          }
          v65 = std::string::append((std::string *)v239, v62, v64);
          std::string::size_type v66 = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          flatbuffers::Parser::Error(a1, (_WORD *)a5);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if ((v239[23] & 0x80000000) != 0) {
            operator delete(*(void **)v239);
          }
          if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
          {
            BOOL v67 = (void *)v232.__r_.__value_.__r.__words[0];
            goto LABEL_170;
          }
          return;
        }
        uint64_t v50 = -72 * v12;
        while (*(void *)(*(void *)(a1 + 1184) + 64 + v50) != *(void *)i)
        {
          v50 += 72;
          if (!v50) {
            goto LABEL_158;
          }
        }
      }
    }
  }
  v228 = v45;
  if (!*(unsigned char *)(a2 + 200))
  {
    *(unsigned char *)(a1 + 406) = 1;
    uint64_t v52 = *(void *)(a1 + 368) - *(void *)(a1 + 384) + *(void *)(a1 + 376);
    goto LABEL_172;
  }
  if (v12 == (v48 - v47) >> 3)
  {
    unint64_t v51 = *(void *)(a2 + 208);
    if (*(void *)(a1 + 408) < v51) {
      *(void *)(a1 + 408) = v51;
    }
    uint64_t v52 = *(void *)(a1 + 368);
    uint64_t v53 = *(void *)(a1 + 376);
    uint64_t v54 = *(void *)(a1 + 384);
    unint64_t v55 = (v51 - 1) & -(uint64_t)(v52 - v54 + v53);
    if (v54 - *(void *)(a1 + 392) < v55)
    {
      unint64_t v15 = sub_20DC4F8B0(v229, v55);
      *v13 -= v55;
      goto LABEL_152;
    }
    LOWORD(v56) = v54 - v55;
    *BOOL v13 = v54 - v55;
    if (v55)
    {
LABEL_152:
      uint64_t v57 = 0;
      do
        *(unsigned char *)(*v13 + v57++) = 0;
      while (v55 != v57);
      uint64_t v53 = *(void *)(a1 + 376);
      uint64_t v56 = *(void *)(a1 + 384);
      uint64_t v52 = *(void *)(a1 + 368);
    }
    LOWORD(v52) = v53 - v56 + v52;
LABEL_172:
    uint64_t v223 = a3;
    __int16 v224 = v52;
    if (*(unsigned char *)(a2 + 202)) {
      unint64_t v68 = 8;
    }
    else {
      unint64_t v68 = 1;
    }
    uint64_t v69 = *(void *)(a1 + 1184);
    uint64_t v70 = -72 * v12;
    do
    {
      if (v70)
      {
        do
        {
          uint64_t v71 = v69;
          uint64_t v73 = *(int *)(v69 - 72);
          v69 -= 72;
          uint64_t v72 = v73;
          uint64_t v74 = *(void *)(v69 + 64);
          if (!*(unsigned char *)(a2 + 202) || v68 == byte_20DC7CEF8[v72 + 4])
          {
            switch((int)v72)
            {
              case -4:
                unint64_t v90 = *(void *)(v74 + 232);
                uint64_t v91 = *(void *)(a1 + 384);
                if (v91 - *(void *)(a1 + 392) >= v90)
                {
                  *BOOL v13 = v91 - v90;
                  if (!v90) {
                    goto LABEL_250;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v90;
                }
                uint64_t v126 = 0;
                do
                  *(unsigned char *)(*v13 + v126++) = 0;
                while (v90 != v126);
LABEL_250:
                if (!*(unsigned char *)(a2 + 200))
                {
                  v127 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v127 = *(char **)v127;
                  }
                  sub_20DC6DE70((_WORD *)a5, v127, a1, (flatbuffers::ClassicLocale *)__p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  v128 = (char *)(v74 + 184);
                  if (*(char *)(v74 + 207) < 0) {
                    v128 = *(char **)v128;
                  }
                  sub_20DC6DE70((_WORD *)a5, v128, a1, (flatbuffers::ClassicLocale *)v239);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  sub_20DC6E128((uint64_t)v229, *(unsigned __int16 *)(v71 - 16), *(__int16 *)__p, *(__int16 *)v239);
                  break;
                }
                v195 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v195 = *(char **)v195;
                }
                sub_20DC6DE70((_WORD *)a5, v195, a1, (flatbuffers::ClassicLocale *)__p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                goto LABEL_498;
              case -3:
                unint64_t v92 = *(void *)(v74 + 232);
                uint64_t v93 = *(void *)(a1 + 384);
                if (v93 - *(void *)(a1 + 392) >= v92)
                {
                  *BOOL v13 = v93 - v92;
                  if (!v92) {
                    goto LABEL_418;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v92;
                }
                uint64_t v129 = 0;
                do
                  *(unsigned char *)(*v13 + v129++) = 0;
                while (v92 != v129);
                goto LABEL_418;
              case -2:
                unint64_t v94 = *(void *)(v74 + 232);
                uint64_t v95 = *(void *)(a1 + 384);
                if (v95 - *(void *)(a1 + 392) >= v94)
                {
                  *BOOL v13 = v95 - v94;
                  if (!v94) {
                    goto LABEL_265;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v94;
                }
                uint64_t v130 = 0;
                do
                  *(unsigned char *)(*v13 + v130++) = 0;
                while (v94 != v130);
LABEL_265:
                if (*(unsigned char *)(a2 + 200))
                {
                  *(_DWORD *)std::string __p = 0;
                  v196 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v196 = *(char **)v196;
                  }
                  sub_20DC6C9AC((_WORD *)a5, v196, a1, __p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  uint64_t v197 = a5;
                  if (*(void *)(a1 + 408) <= 3uLL) {
                    *(void *)(a1 + 408) = 4;
                  }
                  int v198 = *(_DWORD *)__p;
                  uint64_t v199 = *(void *)(a1 + 384);
                  uint64_t v200 = *(void *)(a1 + 392);
                  unint64_t v201 = ((_BYTE)v199 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
                  if (v199 - v200 < v201)
                  {
                    unint64_t v15 = sub_20DC4F8B0(v229, ((_BYTE)v199- (*(_DWORD *)(a1 + 368)+ *(_DWORD *)(a1 + 376))) & 3);
                    *v13 -= v201;
                  }
                  else
                  {
                    uint64_t v202 = v199 - v201;
                    *BOOL v13 = v202;
                    if (!v201) {
                      goto LABEL_513;
                    }
                  }
                  uint64_t v203 = 0;
                  do
                    *(unsigned char *)(*v13 + v203++) = 0;
                  while (v201 != v203);
                  goto LABEL_512;
                }
                *(_DWORD *)std::string __p = 0;
                *(_DWORD *)v239 = 0;
                v131 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v131 = *(char **)v131;
                }
                sub_20DC6C9AC((_WORD *)a5, v131, a1, __p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                v132 = (char *)(v74 + 184);
                if (*(char *)(v74 + 207) < 0) {
                  v132 = *(char **)v132;
                }
                sub_20DC6C9AC((_WORD *)a5, v132, a1, v239);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                uint64_t v226 = a5;
                uint64_t v133 = *(unsigned __int16 *)(v71 - 16);
                int v134 = *(_DWORD *)__p;
                if (*(_DWORD *)__p == *(_DWORD *)v239 && !*(unsigned char *)(a1 + 416)) {
                  goto LABEL_401;
                }
                if (*(void *)(a1 + 408) <= 3uLL) {
                  *(void *)(a1 + 408) = 4;
                }
                uint64_t v136 = *(void *)(a1 + 384);
                v135 = *(unint64_t **)(a1 + 392);
                unint64_t v137 = ((_BYTE)v136 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
                if (v136 - (uint64_t)v135 < v137)
                {
                  unint64_t v15 = sub_20DC4F8B0(v229, ((_BYTE)v136- (*(_DWORD *)(a1 + 368)+ *(_DWORD *)(a1 + 376))) & 3);
                  *v13 -= v137;
                }
                else
                {
                  uint64_t v138 = v136 - v137;
                  *BOOL v13 = v136 - v137;
                  if (!v137) {
                    goto LABEL_393;
                  }
                }
                uint64_t v139 = 0;
                do
                  *(unsigned char *)(*v13 + v139++) = 0;
                while (v137 != v139);
                goto LABEL_392;
              case -1:
                unint64_t v96 = *(void *)(v74 + 232);
                uint64_t v97 = *(void *)(a1 + 384);
                if (v97 - *(void *)(a1 + 392) >= v96)
                {
                  *BOOL v13 = v97 - v96;
                  if (!v96) {
                    goto LABEL_347;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v96;
                }
                uint64_t v140 = 0;
                do
                  *(unsigned char *)(*v13 + v140++) = 0;
                while (v96 != v140);
                goto LABEL_347;
              case 0:
                unint64_t v98 = *(void *)(v74 + 232);
                uint64_t v99 = *(void *)(a1 + 384);
                if (v99 - *(void *)(a1 + 392) >= v98)
                {
                  *BOOL v13 = v99 - v98;
                  if (!v98) {
                    goto LABEL_317;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v98;
                }
                uint64_t v141 = 0;
                do
                  *(unsigned char *)(*v13 + v141++) = 0;
                while (v98 != v141);
                goto LABEL_317;
              case 1:
                unint64_t v100 = *(void *)(v74 + 232);
                uint64_t v101 = *(void *)(a1 + 384);
                if (v101 - *(void *)(a1 + 392) >= v100)
                {
                  *BOOL v13 = v101 - v100;
                  if (!v100) {
                    goto LABEL_317;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v100;
                }
                uint64_t v142 = 0;
                do
                  *(unsigned char *)(*v13 + v142++) = 0;
                while (v100 != v142);
                goto LABEL_317;
              case 2:
                unint64_t v102 = *(void *)(v74 + 232);
                uint64_t v103 = *(void *)(a1 + 384);
                if (v103 - *(void *)(a1 + 392) >= v102)
                {
                  *BOOL v13 = v103 - v102;
                  if (!v102) {
                    goto LABEL_317;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v102;
                }
                uint64_t v143 = 0;
                do
                  *(unsigned char *)(*v13 + v143++) = 0;
                while (v102 != v143);
                goto LABEL_317;
              case 3:
                unint64_t v104 = *(void *)(v74 + 232);
                uint64_t v105 = *(void *)(a1 + 384);
                if (v105 - *(void *)(a1 + 392) >= v104)
                {
                  *BOOL v13 = v105 - v104;
                  if (!v104) {
                    goto LABEL_300;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v104;
                }
                uint64_t v144 = 0;
                do
                  *(unsigned char *)(*v13 + v144++) = 0;
                while (v104 != v144);
LABEL_300:
                if (*(unsigned char *)(a2 + 200))
                {
                  __p[0] = 0;
                  v204 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v204 = *(char **)v204;
                  }
                  sub_20DC6E1C4((_WORD *)a5, v204, a1, __p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  uint64_t v205 = a5;
                  if (!*(void *)(a1 + 408)) {
                    *(void *)(a1 + 408) = 1;
                  }
                  char v206 = __p[0];
                  uint64_t v207 = *(void *)(a1 + 384);
                  if (v207 == *(void *)(a1 + 392))
                  {
                    unint64_t v15 = sub_20DC4F8B0(v229, 1uLL);
                    uint64_t v207 = *v13;
                  }
                  *BOOL v13 = v207 - 1;
                  *(unsigned char *)(v207 - 1) = v206;
                  a5 = v205;
                  break;
                }
                __p[0] = 0;
                v239[0] = 0;
                v145 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v145 = *(char **)v145;
                }
                sub_20DC6E1C4((_WORD *)a5, v145, a1, __p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                v146 = (char *)(v74 + 184);
                if (*(char *)(v74 + 207) < 0) {
                  v146 = *(char **)v146;
                }
                sub_20DC6E1C4((_WORD *)a5, v146, a1, v239);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                uint64_t v226 = a5;
                uint64_t v133 = *(unsigned __int16 *)(v71 - 16);
                char v147 = __p[0];
                if (__p[0] != v239[0] || *(unsigned char *)(a1 + 416))
                {
                  if (!*(void *)(a1 + 408)) {
                    *(void *)(a1 + 408) = 1;
                  }
                  uint64_t v148 = *(void *)(a1 + 384);
                  if (v148 == *(void *)(a1 + 392))
                  {
                    unint64_t v15 = sub_20DC4F8B0(v229, 1uLL);
                    uint64_t v148 = *v13;
                  }
                  *(void *)(a1 + 384) = v148 - 1;
                  *(unsigned char *)(v148 - 1) = v147;
                  uint64_t v149 = *(void *)(a1 + 368);
                  uint64_t v150 = *(void *)(a1 + 376);
                  uint64_t v151 = *(void *)(a1 + 384);
                  v135 = *(unint64_t **)(a1 + 392);
                  goto LABEL_396;
                }
                goto LABEL_401;
              case 4:
                unint64_t v106 = *(void *)(v74 + 232);
                uint64_t v107 = *(void *)(a1 + 384);
                if (v107 - *(void *)(a1 + 392) >= v106)
                {
                  *BOOL v13 = v107 - v106;
                  if (!v106) {
                    goto LABEL_317;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v106;
                }
                uint64_t v152 = 0;
                do
                  *(unsigned char *)(*v13 + v152++) = 0;
                while (v106 != v152);
LABEL_317:
                if (*(unsigned char *)(a2 + 200))
                {
                  __p[0] = 0;
                  v157 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v157 = *(char **)v157;
                  }
                  sub_20DC6D020((_WORD *)a5, v157, a1, __p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  unint64_t v15 = sub_20DC43698((uint64_t)v229, __p[0]);
                  break;
                }
                __p[0] = 0;
                v239[0] = 0;
                v153 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v153 = *(char **)v153;
                }
                sub_20DC6D020((_WORD *)a5, v153, a1, __p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                v154 = (char *)(v74 + 184);
                if (*(char *)(v74 + 207) < 0) {
                  v154 = *(char **)v154;
                }
                sub_20DC6D020((_WORD *)a5, v154, a1, v239);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                uint64_t v155 = a5;
                uint64_t v156 = *(unsigned __int16 *)(v71 - 16);
                if (__p[0] != v239[0] || *(unsigned char *)(a1 + 416))
                {
                  unint64_t v15 = sub_20DC43698((uint64_t)v229, __p[0]);
                  goto LABEL_428;
                }
                goto LABEL_433;
              case 5:
                unint64_t v108 = *(void *)(v74 + 232);
                uint64_t v109 = *(void *)(a1 + 384);
                if (v109 - *(void *)(a1 + 392) >= v108)
                {
                  *BOOL v13 = v109 - v108;
                  if (!v108) {
                    goto LABEL_334;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v108;
                }
                uint64_t v158 = 0;
                do
                  *(unsigned char *)(*v13 + v158++) = 0;
                while (v108 != v158);
LABEL_334:
                if (*(unsigned char *)(a2 + 200))
                {
                  *(_WORD *)std::string __p = 0;
                  v208 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v208 = *(char **)v208;
                  }
                  sub_20DC6E444((_WORD *)a5, v208, a1, (__int16 *)__p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
LABEL_498:
                  unint64_t v15 = sub_20DC6E0C4((uint64_t)v229, *(__int16 *)__p);
                  break;
                }
                *(_WORD *)std::string __p = 0;
                *(_WORD *)v239 = 0;
                v159 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v159 = *(char **)v159;
                }
                sub_20DC6E444((_WORD *)a5, v159, a1, (__int16 *)__p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                v160 = (char *)(v74 + 184);
                if (*(char *)(v74 + 207) < 0) {
                  v160 = *(char **)v160;
                }
                sub_20DC6E444((_WORD *)a5, v160, a1, (__int16 *)v239);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                uint64_t v155 = a5;
                uint64_t v156 = *(unsigned __int16 *)(v71 - 16);
                if (*(unsigned __int16 *)__p != *(unsigned __int16 *)v239 || *(unsigned char *)(a1 + 416))
                {
LABEL_343:
                  unint64_t v15 = sub_20DC6E0C4((uint64_t)v229, *(__int16 *)__p);
                  goto LABEL_428;
                }
                goto LABEL_433;
              case 6:
                unint64_t v110 = *(void *)(v74 + 232);
                uint64_t v111 = *(void *)(a1 + 384);
                if (v111 - *(void *)(a1 + 392) >= v110)
                {
                  *BOOL v13 = v111 - v110;
                  if (!v110) {
                    goto LABEL_347;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v110;
                }
                uint64_t v161 = 0;
                do
                  *(unsigned char *)(*v13 + v161++) = 0;
                while (v110 != v161);
LABEL_347:
                if (*(unsigned char *)(a2 + 200))
                {
                  *(_WORD *)std::string __p = 0;
                  v164 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v164 = *(char **)v164;
                  }
                  sub_20DC6D290((_WORD *)a5, v164, a1, __p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  goto LABEL_498;
                }
                *(_WORD *)std::string __p = 0;
                *(_WORD *)v239 = 0;
                v162 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v162 = *(char **)v162;
                }
                sub_20DC6D290((_WORD *)a5, v162, a1, __p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                v163 = (char *)(v74 + 184);
                if (*(char *)(v74 + 207) < 0) {
                  v163 = *(char **)v163;
                }
                sub_20DC6D290((_WORD *)a5, v163, a1, v239);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                uint64_t v155 = a5;
                uint64_t v156 = *(unsigned __int16 *)(v71 - 16);
                if (*(unsigned __int16 *)__p == *(unsigned __int16 *)v239 && !*(unsigned char *)(a1 + 416)) {
                  goto LABEL_433;
                }
                goto LABEL_343;
              case 7:
                unint64_t v112 = *(void *)(v74 + 232);
                uint64_t v113 = *(void *)(a1 + 384);
                if (v113 - *(void *)(a1 + 392) >= v112)
                {
                  *BOOL v13 = v113 - v112;
                  if (!v112) {
                    goto LABEL_364;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v112;
                }
                uint64_t v165 = 0;
                do
                  *(unsigned char *)(*v13 + v165++) = 0;
                while (v112 != v165);
LABEL_364:
                if (*(unsigned char *)(a2 + 200))
                {
                  *(_DWORD *)std::string __p = 0;
                  v209 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v209 = *(char **)v209;
                  }
                  sub_20DC6E6C4((_WORD *)a5, v209, a1, (unsigned int *)__p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  unint64_t v15 = sub_20DC435AC((uint64_t)v229, *(int *)__p);
                  break;
                }
                *(_DWORD *)std::string __p = 0;
                *(_DWORD *)v239 = 0;
                v166 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v166 = *(char **)v166;
                }
                sub_20DC6E6C4((_WORD *)a5, v166, a1, (unsigned int *)__p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                v167 = (char *)(v74 + 184);
                if (*(char *)(v74 + 207) < 0) {
                  v167 = *(char **)v167;
                }
                sub_20DC6E6C4((_WORD *)a5, v167, a1, (unsigned int *)v239);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                uint64_t v155 = a5;
                uint64_t v156 = *(unsigned __int16 *)(v71 - 16);
                if (*(_DWORD *)__p != *(_DWORD *)v239 || *(unsigned char *)(a1 + 416))
                {
                  unint64_t v15 = sub_20DC435AC((uint64_t)v229, *(int *)__p);
                  goto LABEL_428;
                }
                goto LABEL_433;
              case 8:
                unint64_t v114 = *(void *)(v74 + 232);
                uint64_t v115 = *(void *)(a1 + 384);
                if (v115 - *(void *)(a1 + 392) >= v114)
                {
                  *BOOL v13 = v115 - v114;
                  if (!v114) {
                    goto LABEL_377;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v114;
                }
                uint64_t v168 = 0;
                do
                  *(unsigned char *)(*v13 + v168++) = 0;
                while (v114 != v168);
LABEL_377:
                if (!*(unsigned char *)(a2 + 200))
                {
                  *(_DWORD *)std::string __p = 0;
                  *(_DWORD *)v239 = 0;
                  v169 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v169 = *(char **)v169;
                  }
                  sub_20DC6C9AC((_WORD *)a5, v169, a1, __p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  v170 = (char *)(v74 + 184);
                  if (*(char *)(v74 + 207) < 0) {
                    v170 = *(char **)v170;
                  }
                  sub_20DC6C9AC((_WORD *)a5, v170, a1, v239);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  uint64_t v226 = a5;
                  uint64_t v133 = *(unsigned __int16 *)(v71 - 16);
                  int v134 = *(_DWORD *)__p;
                  if (*(_DWORD *)__p != *(_DWORD *)v239 || *(unsigned char *)(a1 + 416))
                  {
                    if (*(void *)(a1 + 408) <= 3uLL) {
                      *(void *)(a1 + 408) = 4;
                    }
                    uint64_t v171 = *(void *)(a1 + 384);
                    v135 = *(unint64_t **)(a1 + 392);
                    unint64_t v172 = ((_BYTE)v171
                          - (*(_DWORD *)(a1 + 368)
                           + *(_DWORD *)(a1 + 376))) & 3;
                    if (v171 - (uint64_t)v135 < v172)
                    {
                      unint64_t v15 = sub_20DC4F8B0(v229, ((_BYTE)v171- (*(_DWORD *)(a1 + 368)+ *(_DWORD *)(a1 + 376))) & 3);
                      *v13 -= v172;
LABEL_390:
                      uint64_t v173 = 0;
                      do
                        *(unsigned char *)(*v13 + v173++) = 0;
                      while (v172 != v173);
LABEL_392:
                      uint64_t v138 = *(void *)(a1 + 384);
                      v135 = *(unint64_t **)(a1 + 392);
                    }
                    else
                    {
                      uint64_t v138 = v171 - v172;
                      *BOOL v13 = v171 - v172;
                      if (v172) {
                        goto LABEL_390;
                      }
                    }
LABEL_393:
                    if ((unint64_t)(v138 - (void)v135) <= 3)
                    {
                      unint64_t v15 = sub_20DC4F8B0(v229, 4uLL);
                      uint64_t v138 = *(void *)(a1 + 384);
                      v135 = *(unint64_t **)(a1 + 392);
                    }
                    *(_DWORD *)(v138 - 4) = v134;
                    uint64_t v151 = v138 - 4;
                    *(void *)(a1 + 384) = v151;
                    uint64_t v149 = *(void *)(a1 + 368);
                    uint64_t v150 = *(void *)(a1 + 376);
LABEL_396:
                    if ((unint64_t)(v151 - (void)v135) <= 7)
                    {
                      unint64_t v15 = sub_20DC4F8B0(v229, 8uLL);
                      v135 = *(unint64_t **)(a1 + 392);
                    }
                    unint64_t *v135 = (v149 - v151 + v150) | (unint64_t)(v133 << 32);
                    *(void *)(a1 + 392) += 8;
                    ++*(_DWORD *)(a1 + 400);
                    unsigned int v174 = *(unsigned __int16 *)(a1 + 404);
                    if (v174 <= v133) {
                      LOWORD(v174) = v133;
                    }
                    *(_WORD *)(a1 + 404) = v174;
                  }
LABEL_401:
                  a5 = v226;
                  break;
                }
                *(_DWORD *)std::string __p = 0;
                v210 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v210 = *(char **)v210;
                }
                sub_20DC6C9AC((_WORD *)a5, v210, a1, __p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                uint64_t v197 = a5;
                if (*(void *)(a1 + 408) <= 3uLL) {
                  *(void *)(a1 + 408) = 4;
                }
                int v198 = *(_DWORD *)__p;
                uint64_t v211 = *(void *)(a1 + 384);
                uint64_t v200 = *(void *)(a1 + 392);
                unint64_t v212 = ((_BYTE)v211 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
                if (v211 - v200 < v212)
                {
                  unint64_t v15 = sub_20DC4F8B0(v229, ((_BYTE)v211- (*(_DWORD *)(a1 + 368)+ *(_DWORD *)(a1 + 376))) & 3);
                  *v13 -= v212;
                }
                else
                {
                  uint64_t v202 = v211 - v212;
                  *BOOL v13 = v202;
                  if (!v212) {
                    goto LABEL_513;
                  }
                }
                uint64_t v213 = 0;
                do
                  *(unsigned char *)(*v13 + v213++) = 0;
                while (v212 != v213);
LABEL_512:
                uint64_t v202 = *(void *)(a1 + 384);
                uint64_t v200 = *(void *)(a1 + 392);
LABEL_513:
                if ((unint64_t)(v202 - v200) <= 3)
                {
                  unint64_t v15 = sub_20DC4F8B0(v229, 4uLL);
                  uint64_t v202 = *v13;
                }
                *(_DWORD *)(v202 - 4) = v198;
                *BOOL v13 = v202 - 4;
                a5 = v197;
                break;
              case 9:
                unint64_t v116 = *(void *)(v74 + 232);
                uint64_t v117 = *(void *)(a1 + 384);
                if (v117 - *(void *)(a1 + 392) >= v116)
                {
                  *BOOL v13 = v117 - v116;
                  if (!v116) {
                    goto LABEL_405;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v116;
                }
                uint64_t v175 = 0;
                do
                  *(unsigned char *)(*v13 + v175++) = 0;
                while (v116 != v175);
LABEL_405:
                if (*(unsigned char *)(a2 + 200))
                {
                  *(void *)std::string __p = 0;
                  v214 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v214 = *(char **)v214;
                  }
                  sub_20DC6E944((_WORD *)a5, v214, a1, (flatbuffers::ClassicLocale *)__p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  unint64_t v15 = sub_20DC6EB9C((uint64_t)v229, *(uint64_t *)__p);
                  break;
                }
                *(void *)std::string __p = 0;
                *(void *)v239 = 0;
                v176 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v176 = *(char **)v176;
                }
                sub_20DC6E944((_WORD *)a5, v176, a1, (flatbuffers::ClassicLocale *)__p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                v177 = (char *)(v74 + 184);
                if (*(char *)(v74 + 207) < 0) {
                  v177 = *(char **)v177;
                }
                sub_20DC6E944((_WORD *)a5, v177, a1, (flatbuffers::ClassicLocale *)v239);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                uint64_t v155 = a5;
                uint64_t v156 = *(unsigned __int16 *)(v71 - 16);
                if (*(void *)__p != *(void *)v239 || *(unsigned char *)(a1 + 416))
                {
                  unint64_t v15 = sub_20DC6EB9C((uint64_t)v229, *(uint64_t *)__p);
                  goto LABEL_428;
                }
                goto LABEL_433;
              case 10:
                unint64_t v118 = *(void *)(v74 + 232);
                uint64_t v119 = *(void *)(a1 + 384);
                if (v119 - *(void *)(a1 + 392) >= v118)
                {
                  *BOOL v13 = v119 - v118;
                  if (!v118) {
                    goto LABEL_418;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v118;
                }
                uint64_t v178 = 0;
                do
                  *(unsigned char *)(*v13 + v178++) = 0;
                while (v118 != v178);
LABEL_418:
                if (*(unsigned char *)(a2 + 200))
                {
                  *(void *)std::string __p = 0;
                  v184 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v184 = *(char **)v184;
                  }
                  sub_20DC6D500((_WORD *)a5, v184, a1, (flatbuffers::ClassicLocale *)__p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  unint64_t v15 = sub_20DC434C0((uint64_t)v229, *(uint64_t *)__p);
                  break;
                }
                *(void *)std::string __p = 0;
                *(void *)v239 = 0;
                v179 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v179 = *(char **)v179;
                }
                sub_20DC6D500((_WORD *)a5, v179, a1, (flatbuffers::ClassicLocale *)__p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                v180 = (char *)(v74 + 184);
                if (*(char *)(v74 + 207) < 0) {
                  v180 = *(char **)v180;
                }
                sub_20DC6D500((_WORD *)a5, v180, a1, (flatbuffers::ClassicLocale *)v239);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                uint64_t v155 = a5;
                uint64_t v156 = *(unsigned __int16 *)(v71 - 16);
                if (*(void *)__p != *(void *)v239 || *(unsigned char *)(a1 + 416))
                {
                  unint64_t v15 = sub_20DC434C0((uint64_t)v229, *(uint64_t *)__p);
                  goto LABEL_428;
                }
                goto LABEL_433;
              case 11:
                unint64_t v120 = *(void *)(v74 + 232);
                uint64_t v121 = *(void *)(a1 + 384);
                if (v121 - *(void *)(a1 + 392) >= v120)
                {
                  *BOOL v13 = v121 - v120;
                  if (!v120) {
                    goto LABEL_441;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v120;
                }
                uint64_t v185 = 0;
                do
                  *(unsigned char *)(*v13 + v185++) = 0;
                while (v120 != v185);
LABEL_441:
                if (*(unsigned char *)(a2 + 200))
                {
                  *(_DWORD *)std::string __p = 0;
                  v215 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v215 = *(char **)v215;
                  }
                  sub_20DC6EC00((_WORD *)a5, v215, a1, (flatbuffers::ClassicLocale *)__p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  unint64_t v15 = sub_20DC6EE50((uint64_t)v229, *(float *)__p);
                  break;
                }
                *(_DWORD *)std::string __p = 0;
                *(_DWORD *)v239 = 0;
                v186 = (char *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v186 = *(char **)v186;
                }
                sub_20DC6EC00((_WORD *)a5, v186, a1, (flatbuffers::ClassicLocale *)__p);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                v187 = (char *)(v74 + 184);
                if (*(char *)(v74 + 207) < 0) {
                  v187 = *(char **)v187;
                }
                sub_20DC6EC00((_WORD *)a5, v187, a1, (flatbuffers::ClassicLocale *)v239);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                uint64_t v155 = a5;
                uint64_t v156 = *(unsigned __int16 *)(v71 - 16);
                if (*(float *)__p != *(float *)v239 || *(unsigned char *)(a1 + 416))
                {
                  unint64_t v15 = sub_20DC6EE50((uint64_t)v229, *(float *)__p);
                  goto LABEL_428;
                }
                goto LABEL_433;
              case 12:
                unint64_t v122 = *(void *)(v74 + 232);
                uint64_t v123 = *(void *)(a1 + 384);
                if (v123 - *(void *)(a1 + 392) >= v122)
                {
                  *BOOL v13 = v123 - v122;
                  if (!v122) {
                    goto LABEL_454;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v122;
                }
                uint64_t v188 = 0;
                do
                  *(unsigned char *)(*v13 + v188++) = 0;
                while (v122 != v188);
LABEL_454:
                if (*(unsigned char *)(a2 + 200))
                {
                  *(void *)std::string __p = 0;
                  v216 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v216 = *(char **)v216;
                  }
                  sub_20DC6EEBC((_WORD *)a5, v216, a1, (flatbuffers::ClassicLocale *)__p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  unint64_t v15 = sub_20DC6F10C((uint64_t)v229, *(double *)__p);
                }
                else
                {
                  *(void *)std::string __p = 0;
                  *(void *)v239 = 0;
                  v189 = (char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v189 = *(char **)v189;
                  }
                  sub_20DC6EEBC((_WORD *)a5, v189, a1, (flatbuffers::ClassicLocale *)__p);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  v190 = (char *)(v74 + 184);
                  if (*(char *)(v74 + 207) < 0) {
                    v190 = *(char **)v190;
                  }
                  sub_20DC6EEBC((_WORD *)a5, v190, a1, (flatbuffers::ClassicLocale *)v239);
                  *(unsigned char *)(a5 + 1) = 1;
                  if (*(unsigned char *)a5) {
                    return;
                  }
                  uint64_t v155 = a5;
                  uint64_t v156 = *(unsigned __int16 *)(v71 - 16);
                  if (*(double *)__p != *(double *)v239 || *(unsigned char *)(a1 + 416))
                  {
                    unint64_t v15 = sub_20DC6F10C((uint64_t)v229, *(double *)__p);
LABEL_428:
                    unsigned int v181 = v15;
                    v182 = *(unint64_t **)(a1 + 392);
                    if (*(void *)(a1 + 384) - (void)v182 <= 7uLL)
                    {
                      unint64_t v15 = sub_20DC4F8B0(v229, 8uLL);
                      v182 = *(unint64_t **)(a1 + 392);
                    }
                    unint64_t *v182 = v181 | (unint64_t)(v156 << 32);
                    *(void *)(a1 + 392) += 8;
                    ++*(_DWORD *)(a1 + 400);
                    unsigned int v183 = *(unsigned __int16 *)(a1 + 404);
                    if (v183 <= v156) {
                      LOWORD(v183) = v156;
                    }
                    *(_WORD *)(a1 + 404) = v183;
                  }
LABEL_433:
                  a5 = v155;
                }
                break;
              case 13:
                unint64_t v75 = *(void *)(v74 + 232);
                uint64_t v76 = *(void *)(a1 + 384);
                if (v76 - *(void *)(a1 + 392) >= v75)
                {
                  *BOOL v13 = v76 - v75;
                  if (!v75) {
                    goto LABEL_203;
                  }
                }
                else
                {
                  unint64_t v15 = sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v75;
                }
                uint64_t v83 = 0;
                do
                  *(unsigned char *)(*v13 + v83++) = 0;
                while (v75 != v83);
                goto LABEL_203;
              case 14:
                unint64_t v77 = *(void *)(v74 + 232);
                uint64_t v78 = *(void *)(a1 + 384);
                if (v78 - *(void *)(a1 + 392) >= v77)
                {
                  *BOOL v13 = v78 - v77;
                  if (!v77) {
                    goto LABEL_203;
                  }
                }
                else
                {
                  unint64_t v15 = sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v77;
                }
                uint64_t v84 = 0;
                do
                  *(unsigned char *)(*v13 + v84++) = 0;
                while (v77 != v84);
                goto LABEL_203;
              case 15:
                unint64_t v79 = *(void *)(v74 + 232);
                uint64_t v80 = *(void *)(a1 + 384);
                if (v80 - *(void *)(a1 + 392) >= v79)
                {
                  *BOOL v13 = v80 - v79;
                  if (!v79) {
                    goto LABEL_203;
                  }
                }
                else
                {
                  unint64_t v15 = sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v79;
                }
                uint64_t v85 = 0;
                do
                  *(unsigned char *)(*v13 + v85++) = 0;
                while (v79 != v85);
                goto LABEL_203;
              case 16:
                unint64_t v81 = *(void *)(v74 + 232);
                uint64_t v82 = *(void *)(a1 + 384);
                if (v82 - *(void *)(a1 + 392) >= v81)
                {
                  *BOOL v13 = v82 - v81;
                  if (!v81) {
                    goto LABEL_203;
                  }
                }
                else
                {
                  unint64_t v15 = sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v81;
                }
                uint64_t v86 = 0;
                do
                  *(unsigned char *)(*v13 + v86++) = 0;
                while (v81 != v86);
LABEL_203:
                if (*(_DWORD *)(v74 + 152) == 15 && (uint64_t v87 = *(void *)(v74 + 160), *(unsigned char *)(v87 + 200)))
                {
                  unint64_t v15 = (unint64_t)flatbuffers::Parser::SerializeStruct(v15, (uint64_t)v229, v87, v69);
                }
                else
                {
                  v88 = (const char *)(v71 - 40);
                  if (*(char *)(v71 - 17) < 0) {
                    v88 = *(const char **)v88;
                  }
                  int v89 = atoi(v88);
                  *(_WORD *)a5 = 256;
                  unint64_t v15 = (unint64_t)sub_20DC43774(v229, *(unsigned __int16 *)(v71 - 16), v89);
                }
                break;
              case 17:
                unint64_t v124 = *(void *)(v74 + 232);
                uint64_t v125 = *(void *)(a1 + 384);
                if (v125 - *(void *)(a1 + 392) >= v124)
                {
                  *BOOL v13 = v125 - v124;
                  if (!v124) {
                    goto LABEL_467;
                  }
                }
                else
                {
                  sub_20DC4F8B0(v229, *(void *)(v74 + 232));
                  *v13 -= v124;
                }
                uint64_t v191 = 0;
                do
                  *(unsigned char *)(*v13 + v191++) = 0;
                while (v124 != v191);
LABEL_467:
                v192 = (void *)(v71 - 40);
                if (*(char *)(v71 - 17) < 0) {
                  v192 = (void *)*v192;
                }
                unint64_t v15 = sub_20DC6A9EC((int *)v69);
                if (v15)
                {
                  size_t v193 = v15;
                  uint64_t v194 = *(void *)(a1 + 384);
                  if (v194 - *(void *)(a1 + 392) < v15)
                  {
                    sub_20DC4F8B0(v229, v15);
                    uint64_t v194 = *v13;
                  }
                  *BOOL v13 = v194 - v193;
                  unint64_t v15 = (unint64_t)memcpy((void *)(v194 - v193), v192, v193);
                }
                break;
              default:
                break;
            }
          }
        }
        while (v69 != *(void *)(a1 + 1184) - 72 * v12);
        uint64_t v69 = *(void *)(a1 + 1184);
        a3 = v223;
        uint64_t v70 = -72 * v12;
      }
      BOOL v217 = v68 >= 2;
      v68 >>= 1;
    }
    while (v217);
    v218 = (_WORD *)a5;
    if (v12)
    {
      uint64_t v219 = v69 - 72;
      do
      {
        if (*(char *)(v219 + 55) < 0) {
          operator delete(*(void **)(v219 + 32));
        }
        *(void *)(a1 + 1184) = v219;
        v219 -= 72;
        --v12;
      }
      while (v12);
    }
    if (*(unsigned char *)(a2 + 200))
    {
      uint64_t v220 = *(void *)(a1 + 384);
      *(void *)(a1 + 392) -= 8 * *(unsigned int *)(a1 + 400);
      *(_DWORD *)(a1 + 400) = 0;
      *(_WORD *)(a1 + 404) = 0;
      MEMORY[0x210568890](a3, v220, *(void *)(a2 + 216));
      *(void *)(a1 + 384) += *(void *)(a2 + 216);
    }
    else
    {
      int v221 = sub_20DC43968((uint64_t)v229, v224);
      if (v228) {
        _DWORD *v228 = v221;
      }
      if (a3)
      {
        sub_20DC3F7A4();
        if (*(char *)(a3 + 23) < 0) {
          operator delete(*(void **)a3);
        }
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(void *)(a3 + 16) = *(void *)&__p[16];
      }
    }
    _WORD *v218 = 0;
    return;
  }
  std::operator+<char>();
  flatbuffers::Parser::Error(a1, (_WORD *)a5);
  if ((__p[23] & 0x80000000) != 0)
  {
    BOOL v67 = *(void **)__p;
LABEL_170:
    operator delete(v67);
  }
}

uint64_t *flatbuffers::Parser::SerializeStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return flatbuffers::Parser::SerializeStruct(a1, a1 + 336, a2, a3);
}

void flatbuffers::Parser::ParseVector(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v161[2] = *MEMORY[0x263EF8340];
  flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 91, (uint64_t)&v147);
  HIBYTE(v147) = 1;
  if ((_BYTE)v147) {
    goto LABEL_43;
  }
  unint64_t v12 = 0;
  uint64_t v141 = (int64x2_t *)(a1 + 1176);
  while (1)
  {
    BOOL v13 = !*(unsigned char *)(a1 + 729) || v12 == 0;
    if (v13 && *(_DWORD *)(a1 + 20) == 93) {
      break;
    }
    HIBYTE(v155) = 1;
    LOWORD(v154) = 48;
    __int16 v156 = -1;
    *(_OWORD *)v153 = *(_OWORD *)a2;
    *(_OWORD *)&v153[10] = *(_OWORD *)(a2 + 10);
    int v14 = *(_DWORD *)(a1 + 1204);
    if (v14 < 64)
    {
      *(_DWORD *)(a1 + 1204) = v14 + 1;
      flatbuffers::Parser::ParseAnyValue(&v147, a1, v153, a4, a5, 0, v12, 1);
      --*(_DWORD *)(a1 + 1204);
    }
    else
    {
      flatbuffers::Parser::RecurseError((flatbuffers::Parser *)a1, &v147);
    }
    int v15 = 1;
    HIBYTE(v147) = 1;
    if (!(_BYTE)v147)
    {
      uint64_t v142 = a4;
      uint64_t v143 = a5;
      *(_OWORD *)uint64_t v148 = *(_OWORD *)v153;
      long long v149 = *(_OWORD *)&v153[16];
      v145 = a3;
      int v144 = v12;
      uint64_t v16 = a2;
      if (SHIBYTE(v155) < 0)
      {
        sub_20DC55634((uint64_t)__p, (const void *)v154, *((unint64_t *)&v154 + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = v154;
        __p[2] = v155;
      }
      __int16 v17 = v156;
      __int16 v151 = v156;
      uint64_t v152 = 0;
      int v18 = __p[0];
      v161[0] = __p[1];
      *(void **)((char *)v161 + 7) = *(void **)((char *)&__p[1] + 7);
      char v19 = HIBYTE(__p[2]);
      memset(__p, 0, sizeof(__p));
      unint64_t v12 = *(void *)(a1 + 1184);
      unint64_t v20 = *(void *)(a1 + 1192);
      if (v12 >= v20)
      {
        uint64_t v140 = a6;
        uint64_t v24 = v141->i64[0];
        unint64_t v25 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - v141->i64[0]) >> 3) + 1;
        if (v25 > 0x38E38E38E38E38ELL) {
          abort();
        }
        unint64_t v139 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - v141->i64[0]) >> 3);
        if (0x1C71C71C71C71C72 * ((uint64_t)(v20 - v24) >> 3) > v25) {
          unint64_t v25 = 0x1C71C71C71C71C72 * ((uint64_t)(v20 - v24) >> 3);
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v20 - v24) >> 3) >= 0x1C71C71C71C71C7) {
          unint64_t v26 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v26 = v25;
        }
        uint64_t v160 = a1 + 1192;
        if (v26 > 0x38E38E38E38E38ELL) {
          sub_20DC4F504();
        }
        unint64_t v138 = v26;
        char v27 = (char *)operator new(72 * v26);
        long long v28 = v149;
        unsigned int v29 = &v27[72 * v139];
        *(_OWORD *)unsigned int v29 = *(_OWORD *)v148;
        *((_OWORD *)v29 + 1) = v28;
        uint64_t v30 = v161[0];
        *((void *)v29 + 4) = v18;
        *((void *)v29 + 5) = v30;
        *(void *)(v29 + 47) = *(void *)((char *)v161 + 7);
        v29[55] = v19;
        v161[0] = 0;
        *(void *)((char *)v161 + 7) = 0;
        *((_WORD *)v29 + 28) = v17;
        *((void *)v29 + 8) = 0;
        if (v12 == v24)
        {
          int64x2_t v31 = vdupq_n_s64(v12);
          size_t v32 = &v27[72 * v139];
          a2 = v16;
          a3 = v145;
        }
        else
        {
          size_t v32 = &v27[72 * v139];
          a2 = v16;
          a3 = v145;
          do
          {
            long long v33 = *(_OWORD *)(v12 - 72);
            *(_OWORD *)(v32 - 56) = *(_OWORD *)(v12 - 56);
            *(_OWORD *)(v32 - 72) = v33;
            long long v34 = *(_OWORD *)(v12 - 40);
            *((void *)v32 - 3) = *(void *)(v12 - 24);
            *(_OWORD *)(v32 - 40) = v34;
            *(void *)(v12 - 32) = 0;
            *(void *)(v12 - 24) = 0;
            *(void *)(v12 - 40) = 0;
            *((_WORD *)v32 - 8) = *(_WORD *)(v12 - 16);
            *((void *)v32 - 1) = *(void *)(v12 - 8);
            v32 -= 72;
            v12 -= 72;
          }
          while (v12 != v24);
          int64x2_t v31 = *v141;
          unint64_t v20 = *(void *)(a1 + 1192);
        }
        a4 = v142;
        unint64_t v23 = (unint64_t)(v29 + 72);
        *(void *)(a1 + 1176) = v32;
        *(void *)(a1 + 1184) = v29 + 72;
        int64x2_t v158 = v31;
        *(void *)(a1 + 1192) = &v27[72 * v138];
        unint64_t v159 = v20;
        uint64_t v157 = v31.i64[0];
        sub_20DC79304((uint64_t)&v157);
        a6 = v140;
        LODWORD(v12) = v144;
      }
      else
      {
        long long v21 = v149;
        *(_OWORD *)unint64_t v12 = *(_OWORD *)v148;
        *(_OWORD *)(v12 + 16) = v21;
        uint64_t v22 = v161[0];
        *(void *)(v12 + 32) = v18;
        *(void *)(v12 + 40) = v22;
        *(void *)(v12 + 47) = *(void *)((char *)v161 + 7);
        *(unsigned char *)(v12 + 55) = v19;
        *(_WORD *)(v12 + 56) = v17;
        unint64_t v23 = v12 + 72;
        *(void *)(v12 + 64) = 0;
        a2 = v16;
        a3 = v145;
        LODWORD(v12) = v144;
        a4 = v142;
      }
      a5 = v143;
      *(void *)(a1 + 1184) = v23;
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      int v15 = 0;
      __int16 v147 = 0;
    }
    if (SHIBYTE(v155) < 0)
    {
      operator delete((void *)v154);
      int v15 = v147;
    }
    HIBYTE(v147) = 1;
    if (v15) {
      goto LABEL_43;
    }
    unint64_t v12 = (v12 + 1);
    if (*(_DWORD *)(a1 + 20) == 93) {
      break;
    }
    if (!*(unsigned char *)(a1 + 954))
    {
      flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, (uint64_t)&v147);
      if ((_BYTE)v147) {
        goto LABEL_43;
      }
    }
    __int16 v147 = 256;
  }
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v147);
  if ((_BYTE)v147)
  {
LABEL_43:
    *(_WORD *)a6 = 257;
    return;
  }
  __int16 v147 = 256;
  *(_WORD *)a6 = 256;
  BYTE7(v149) = 11;
  strcpy((char *)v148, "force_align");
  uint64_t v35 = sub_20DC58BC0(a4 + 72, (const void **)v148);
  if ((uint64_t *)(a4 + 80) == v35) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = v35[7];
  }
  if (SBYTE7(v149) < 0) {
    operator delete(v148[0]);
  }
  if (v36)
  {
    uint64_t v39 = (const char *)(v36 + 32);
    unsigned int v37 = v12;
    if (*(char *)(v36 + 55) < 0) {
      uint64_t v39 = *(const char **)v39;
    }
    unint64_t v38 = atoi(v39);
  }
  else
  {
    unsigned int v37 = v12;
    unint64_t v38 = 1;
  }
  unint64_t v40 = sub_20DC6A9EC((int *)a2) * v37;
  unint64_t v41 = sub_20DC6AA70(a2);
  unint64_t v42 = v41;
  v146 = a3;
  unint64_t v43 = v40 / v41 * v41;
  if (v38 <= 1)
  {
    unsigned int v46 = v37;
  }
  else
  {
    if (*(void *)(a1 + 408) < v38) {
      *(void *)(a1 + 408) = v38;
    }
    uint64_t v44 = *(void *)(a1 + 384);
    unint64_t v45 = (v38 - 1) & (-(uint64_t)(*(_DWORD *)(a1 + 368) - v44 + *(_DWORD *)(a1 + 376)) - v43);
    if (v44 - *(void *)(a1 + 392) < v45)
    {
      unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), (v38 - 1) & (-(uint64_t)(*(_DWORD *)(a1 + 368) - v44 + *(_DWORD *)(a1 + 376)) - v43));
      *(void *)(a1 + 384) -= v45;
      unsigned int v46 = v37;
    }
    else
    {
      *(void *)(a1 + 384) = v44 - v45;
      unsigned int v46 = v37;
      if (!v45) {
        goto LABEL_64;
      }
    }
    uint64_t v47 = 0;
    do
      *(unsigned char *)(*(void *)(a1 + 384) + v47++) = 0;
    while (v45 != v47);
  }
LABEL_64:
  *(unsigned char *)(a1 + 406) = 1;
  unint64_t v48 = *(void *)(a1 + 408);
  if (v48 <= 3)
  {
    unint64_t v48 = 4;
    *(void *)(a1 + 408) = 4;
  }
  uint64_t v49 = *(void *)(a1 + 384);
  unint64_t v50 = ((_BYTE)v49 - *(_DWORD *)(a1 + 376) - (*(unsigned char *)(a1 + 368) + (_BYTE)v43)) & 3;
  if (v49 - *(void *)(a1 + 392) < v50)
  {
    unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), ((_BYTE)v49 - *(_DWORD *)(a1 + 376) - (*(unsigned char *)(a1 + 368) + (_BYTE)v43)) & 3);
    *(void *)(a1 + 384) -= v50;
  }
  else
  {
    *(void *)(a1 + 384) = v49 - v50;
    if (!v50) {
      goto LABEL_71;
    }
  }
  uint64_t v51 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 384) + v51++) = 0;
  while (v50 != v51);
  unint64_t v48 = *(void *)(a1 + 408);
LABEL_71:
  if (v48 < v42) {
    *(void *)(a1 + 408) = v42;
  }
  uint64_t v52 = *(void *)(a1 + 384);
  unint64_t v53 = (v42 - 1) & -(uint64_t)(v43 + (*(_DWORD *)(a1 + 368) - v52 + *(_DWORD *)(a1 + 376)));
  if (v52 - *(void *)(a1 + 392) < v53)
  {
    unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), v53);
    *(void *)(a1 + 384) -= v53;
  }
  else
  {
    *(void *)(a1 + 384) = v52 - v53;
    if (!v53) {
      goto LABEL_77;
    }
  }
  uint64_t v54 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 384) + v54++) = 0;
  while (v53 != v54);
LABEL_77:
  if (v46)
  {
    int v55 = 0;
    uint64_t v56 = *(void *)(a1 + 1184);
    while (2)
    {
      switch(*(_DWORD *)(v56 - 72))
      {
        case 0xFFFFFFFC:
          v88 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            v88 = *(char **)v88;
          }
          sub_20DC6DE70((_WORD *)a6, v88, a1, (flatbuffers::ClassicLocale *)v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (!*(unsigned char *)a6) {
            goto LABEL_150;
          }
          return;
        case 0xFFFFFFFD:
        case 0xA:
          v148[0] = 0;
          uint64_t v85 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            uint64_t v85 = *(char **)v85;
          }
          sub_20DC6D500((_WORD *)a6, v85, a1, (flatbuffers::ClassicLocale *)v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (!*(unsigned char *)a6)
          {
            unint64_t v41 = sub_20DC434C0(a1 + 336, (uint64_t)v148[0]);
            goto LABEL_224;
          }
          return;
        case 0xFFFFFFFE:
          LODWORD(v148[0]) = 0;
          int v89 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            int v89 = *(char **)v89;
          }
          sub_20DC6C9AC((_WORD *)a6, v89, a1, v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (!*(unsigned char *)a6)
          {
            if (*(void *)(a1 + 408) <= 3uLL) {
              *(void *)(a1 + 408) = 4;
            }
            int v90 = (int)v148[0];
            uint64_t v91 = *(void *)(a1 + 384);
            uint64_t v92 = *(void *)(a1 + 392);
            unint64_t v93 = ((_BYTE)v91 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
            if (v91 - v92 < v93)
            {
              unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), ((_BYTE)v91 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3);
              *(void *)(a1 + 384) -= v93;
            }
            else
            {
              uint64_t v94 = v91 - v93;
              *(void *)(a1 + 384) = v94;
              if (!v93) {
                goto LABEL_161;
              }
            }
            uint64_t v95 = 0;
            do
              *(unsigned char *)(*(void *)(a1 + 384) + v95++) = 0;
            while (v93 != v95);
            goto LABEL_160;
          }
          return;
        case 0xFFFFFFFF:
        case 6:
          LOWORD(v148[0]) = 0;
          uint64_t v86 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            uint64_t v86 = *(char **)v86;
          }
          sub_20DC6D290((_WORD *)a6, v86, a1, v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (!*(unsigned char *)a6) {
            goto LABEL_150;
          }
          return;
        case 0:
        case 1:
        case 2:
        case 4:
          LOBYTE(v148[0]) = 0;
          uint64_t v84 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            uint64_t v84 = *(char **)v84;
          }
          sub_20DC6D020((_WORD *)a6, v84, a1, v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (!*(unsigned char *)a6)
          {
            unint64_t v41 = sub_20DC43698(a1 + 336, (char)v148[0]);
            goto LABEL_224;
          }
          return;
        case 3:
          LOBYTE(v148[0]) = 0;
          unint64_t v96 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            unint64_t v96 = *(char **)v96;
          }
          sub_20DC6E1C4((_WORD *)a6, v96, a1, (char *)v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (!*(unsigned char *)a6)
          {
            if (!*(void *)(a1 + 408)) {
              *(void *)(a1 + 408) = 1;
            }
            char v97 = (char)v148[0];
            uint64_t v98 = *(void *)(a1 + 384);
            if (v98 == *(void *)(a1 + 392))
            {
              unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), 1uLL);
              uint64_t v98 = *(void *)(a1 + 384);
            }
            *(void *)(a1 + 384) = v98 - 1;
            *(unsigned char *)(v98 - 1) = v97;
            goto LABEL_224;
          }
          return;
        case 5:
          LOWORD(v148[0]) = 0;
          uint64_t v99 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            uint64_t v99 = *(char **)v99;
          }
          sub_20DC6E444((_WORD *)a6, v99, a1, (__int16 *)v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (!*(unsigned char *)a6)
          {
LABEL_150:
            unint64_t v41 = sub_20DC6E0C4(a1 + 336, (__int16)v148[0]);
            goto LABEL_224;
          }
          return;
        case 7:
        case 0x11:
          LODWORD(v148[0]) = 0;
          uint64_t v87 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            uint64_t v87 = *(char **)v87;
          }
          sub_20DC6E6C4((_WORD *)a6, v87, a1, (unsigned int *)v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (!*(unsigned char *)a6)
          {
            unint64_t v41 = sub_20DC435AC(a1 + 336, (int)v148[0]);
            goto LABEL_224;
          }
          return;
        case 8:
          LODWORD(v148[0]) = 0;
          unint64_t v100 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            unint64_t v100 = *(char **)v100;
          }
          sub_20DC6C9AC((_WORD *)a6, v100, a1, v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (*(unsigned char *)a6) {
            return;
          }
          if (*(void *)(a1 + 408) <= 3uLL) {
            *(void *)(a1 + 408) = 4;
          }
          int v90 = (int)v148[0];
          uint64_t v101 = *(void *)(a1 + 384);
          uint64_t v92 = *(void *)(a1 + 392);
          unint64_t v102 = ((_BYTE)v101 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
          if (v101 - v92 < v102)
          {
            unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), ((_BYTE)v101 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3);
            *(void *)(a1 + 384) -= v102;
          }
          else
          {
            uint64_t v94 = v101 - v102;
            *(void *)(a1 + 384) = v94;
            if (!v102)
            {
LABEL_161:
              if ((unint64_t)(v94 - v92) <= 3)
              {
                unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), 4uLL);
                uint64_t v94 = *(void *)(a1 + 384);
              }
              *(_DWORD *)(v94 - 4) = v90;
              uint64_t v104 = v94 - 4;
              goto LABEL_223;
            }
          }
          uint64_t v103 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 384) + v103++) = 0;
          while (v102 != v103);
LABEL_160:
          uint64_t v94 = *(void *)(a1 + 384);
          uint64_t v92 = *(void *)(a1 + 392);
          goto LABEL_161;
        case 9:
          v148[0] = 0;
          uint64_t v105 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            uint64_t v105 = *(char **)v105;
          }
          sub_20DC6E944((_WORD *)a6, v105, a1, (flatbuffers::ClassicLocale *)v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (*(unsigned char *)a6) {
            return;
          }
          unint64_t v41 = sub_20DC6EB9C(a1 + 336, (uint64_t)v148[0]);
          goto LABEL_224;
        case 0xB:
          LODWORD(v148[0]) = 0;
          unint64_t v106 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            unint64_t v106 = *(char **)v106;
          }
          sub_20DC6EC00((_WORD *)a6, v106, a1, (flatbuffers::ClassicLocale *)v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (*(unsigned char *)a6) {
            return;
          }
          unint64_t v41 = sub_20DC6EE50(a1 + 336, *(float *)v148);
          goto LABEL_224;
        case 0xC:
          v148[0] = 0;
          uint64_t v107 = (char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            uint64_t v107 = *(char **)v107;
          }
          sub_20DC6EEBC((_WORD *)a6, v107, a1, (flatbuffers::ClassicLocale *)v148);
          *(unsigned char *)(a6 + 1) = 1;
          if (*(unsigned char *)a6) {
            return;
          }
          unint64_t v41 = sub_20DC6F10C(a1 + 336, *(double *)v148);
          goto LABEL_224;
        case 0xD:
          uint64_t v57 = (const char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            uint64_t v57 = *(const char **)v57;
          }
          unint64_t v41 = atoi(v57);
          int v58 = v41;
          *(_WORD *)a6 = 256;
          if (*(void *)(a1 + 408) <= 3uLL) {
            *(void *)(a1 + 408) = 4;
          }
          uint64_t v59 = *(void *)(a1 + 368);
          uint64_t v60 = *(void *)(a1 + 376);
          uint64_t v61 = *(void *)(a1 + 384);
          unint64_t v62 = ((int)v61 - ((int)v59 + (int)v60)) & 3;
          if (v61 - *(void *)(a1 + 392) < v62)
          {
            unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), ((int)v61 - ((int)v59 + (int)v60)) & 3);
            *(void *)(a1 + 384) -= v62;
          }
          else
          {
            uint64_t v63 = v61 - v62;
            *(void *)(a1 + 384) = v63;
            if (!v62)
            {
              int v64 = v59 + v60 - v63;
              goto LABEL_182;
            }
          }
          uint64_t v108 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 384) + v108++) = 0;
          while (v62 != v108);
          uint64_t v60 = *(void *)(a1 + 376);
          uint64_t v63 = *(void *)(a1 + 384);
          uint64_t v59 = *(void *)(a1 + 368);
          int v64 = v59 - v63 + v60;
          if (*(void *)(a1 + 408) <= 3uLL) {
            *(void *)(a1 + 408) = 4;
          }
LABEL_182:
          unint64_t v109 = ((_BYTE)v63 - ((_BYTE)v59 + (_BYTE)v60)) & 3;
          uint64_t v110 = *(void *)(a1 + 392);
          if (v63 - v110 < v109)
          {
            unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), v109);
            *(void *)(a1 + 384) -= v109;
          }
          else
          {
            uint64_t v111 = v63 - v109;
            *(void *)(a1 + 384) = v63 - v109;
            if (!v109) {
              goto LABEL_220;
            }
          }
          uint64_t v112 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 384) + v112++) = 0;
          while (v109 != v112);
          goto LABEL_219;
        case 0xE:
          v65 = (const char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            v65 = *(const char **)v65;
          }
          unint64_t v41 = atoi(v65);
          int v58 = v41;
          *(_WORD *)a6 = 256;
          if (*(void *)(a1 + 408) <= 3uLL) {
            *(void *)(a1 + 408) = 4;
          }
          uint64_t v66 = *(void *)(a1 + 368);
          uint64_t v67 = *(void *)(a1 + 376);
          uint64_t v68 = *(void *)(a1 + 384);
          unint64_t v69 = ((int)v68 - ((int)v66 + (int)v67)) & 3;
          if (v68 - *(void *)(a1 + 392) < v69)
          {
            unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), ((int)v68 - ((int)v66 + (int)v67)) & 3);
            *(void *)(a1 + 384) -= v69;
          }
          else
          {
            uint64_t v70 = v68 - v69;
            *(void *)(a1 + 384) = v70;
            if (!v69)
            {
              int v64 = v66 + v67 - v70;
              goto LABEL_192;
            }
          }
          uint64_t v113 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 384) + v113++) = 0;
          while (v69 != v113);
          uint64_t v67 = *(void *)(a1 + 376);
          uint64_t v70 = *(void *)(a1 + 384);
          uint64_t v66 = *(void *)(a1 + 368);
          int v64 = v66 - v70 + v67;
          if (*(void *)(a1 + 408) <= 3uLL) {
            *(void *)(a1 + 408) = 4;
          }
LABEL_192:
          unint64_t v114 = ((_BYTE)v70 - ((_BYTE)v66 + (_BYTE)v67)) & 3;
          uint64_t v110 = *(void *)(a1 + 392);
          if (v70 - v110 < v114)
          {
            unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), v114);
            *(void *)(a1 + 384) -= v114;
          }
          else
          {
            uint64_t v111 = v70 - v114;
            *(void *)(a1 + 384) = v70 - v114;
            if (!v114) {
              goto LABEL_220;
            }
          }
          uint64_t v115 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 384) + v115++) = 0;
          while (v114 != v115);
          goto LABEL_219;
        case 0xF:
          uint64_t v71 = *(void *)(v56 - 64);
          if (*(unsigned char *)(v71 + 200))
          {
            unint64_t v41 = (unint64_t)flatbuffers::Parser::SerializeStruct(v41, a1 + 336, v71, v56 - 72);
            goto LABEL_224;
          }
          uint64_t v72 = (const char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            uint64_t v72 = *(const char **)v72;
          }
          unint64_t v41 = atoi(v72);
          int v58 = v41;
          *(_WORD *)a6 = 256;
          if (*(void *)(a1 + 408) <= 3uLL) {
            *(void *)(a1 + 408) = 4;
          }
          uint64_t v73 = *(void *)(a1 + 368);
          uint64_t v74 = *(void *)(a1 + 376);
          uint64_t v75 = *(void *)(a1 + 384);
          unint64_t v76 = ((int)v75 - ((int)v73 + (int)v74)) & 3;
          if (v75 - *(void *)(a1 + 392) < v76)
          {
            unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), ((int)v75 - ((int)v73 + (int)v74)) & 3);
            *(void *)(a1 + 384) -= v76;
          }
          else
          {
            uint64_t v77 = v75 - v76;
            *(void *)(a1 + 384) = v77;
            if (!v76)
            {
              int v64 = v73 + v74 - v77;
              goto LABEL_215;
            }
          }
          uint64_t v119 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 384) + v119++) = 0;
          while (v76 != v119);
          uint64_t v74 = *(void *)(a1 + 376);
          uint64_t v77 = *(void *)(a1 + 384);
          uint64_t v73 = *(void *)(a1 + 368);
          int v64 = v73 - v77 + v74;
          if (*(void *)(a1 + 408) <= 3uLL) {
            *(void *)(a1 + 408) = 4;
          }
LABEL_215:
          unint64_t v120 = ((_BYTE)v77 - ((_BYTE)v73 + (_BYTE)v74)) & 3;
          uint64_t v110 = *(void *)(a1 + 392);
          if (v77 - v110 < v120)
          {
            unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), v120);
            *(void *)(a1 + 384) -= v120;
          }
          else
          {
            uint64_t v111 = v77 - v120;
            *(void *)(a1 + 384) = v77 - v120;
            if (!v120) {
              goto LABEL_220;
            }
          }
          uint64_t v121 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 384) + v121++) = 0;
          while (v120 != v121);
          goto LABEL_219;
        case 0x10:
          uint64_t v78 = (const char *)(v56 - 40);
          if (*(char *)(v56 - 17) < 0) {
            uint64_t v78 = *(const char **)v78;
          }
          unint64_t v41 = atoi(v78);
          int v58 = v41;
          *(_WORD *)a6 = 256;
          if (*(void *)(a1 + 408) <= 3uLL) {
            *(void *)(a1 + 408) = 4;
          }
          uint64_t v79 = *(void *)(a1 + 368);
          uint64_t v80 = *(void *)(a1 + 376);
          uint64_t v81 = *(void *)(a1 + 384);
          unint64_t v82 = ((int)v81 - ((int)v79 + (int)v80)) & 3;
          if (v81 - *(void *)(a1 + 392) < v82)
          {
            unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), ((int)v81 - ((int)v79 + (int)v80)) & 3);
            *(void *)(a1 + 384) -= v82;
          }
          else
          {
            uint64_t v83 = v81 - v82;
            *(void *)(a1 + 384) = v83;
            if (!v82)
            {
              int v64 = v79 + v80 - v83;
              goto LABEL_202;
            }
          }
          uint64_t v116 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 384) + v116++) = 0;
          while (v82 != v116);
          uint64_t v80 = *(void *)(a1 + 376);
          uint64_t v83 = *(void *)(a1 + 384);
          uint64_t v79 = *(void *)(a1 + 368);
          int v64 = v79 - v83 + v80;
          if (*(void *)(a1 + 408) <= 3uLL) {
            *(void *)(a1 + 408) = 4;
          }
LABEL_202:
          unint64_t v117 = ((_BYTE)v83 - ((_BYTE)v79 + (_BYTE)v80)) & 3;
          uint64_t v110 = *(void *)(a1 + 392);
          if (v83 - v110 < v117)
          {
            unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), v117);
            *(void *)(a1 + 384) -= v117;
          }
          else
          {
            uint64_t v111 = v83 - v117;
            *(void *)(a1 + 384) = v83 - v117;
            if (!v117) {
              goto LABEL_220;
            }
          }
          uint64_t v118 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 384) + v118++) = 0;
          while (v117 != v118);
LABEL_219:
          uint64_t v111 = *(void *)(a1 + 384);
          uint64_t v110 = *(void *)(a1 + 392);
LABEL_220:
          if ((unint64_t)(v111 - v110) <= 3)
          {
            unint64_t v41 = sub_20DC4F8B0((uint64_t *)(a1 + 336), 4uLL);
            uint64_t v111 = *(void *)(a1 + 384);
          }
          *(_DWORD *)(v111 - 4) = v64 - v58 + 4;
          uint64_t v104 = v111 - 4;
LABEL_223:
          *(void *)(a1 + 384) = v104;
LABEL_224:
          uint64_t v122 = *(void *)(a1 + 1184);
          if (*(char *)(v122 - 17) < 0) {
            operator delete(*(void **)(v122 - 40));
          }
          uint64_t v56 = v122 - 72;
          *(void *)(a1 + 1184) = v122 - 72;
          if (++v55 == v46) {
            break;
          }
          continue;
        default:
          goto LABEL_224;
      }
      break;
    }
  }
  uint64_t v123 = *(void *)(a1 + 392) - 8 * *(unsigned int *)(a1 + 400);
  *(void *)(a1 + 392) = v123;
  *(_DWORD *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 404) = 0;
  *(unsigned char *)(a1 + 406) = 0;
  if (*(void *)(a1 + 408) <= 3uLL) {
    *(void *)(a1 + 408) = 4;
  }
  uint64_t v124 = *(void *)(a1 + 384);
  unint64_t v125 = ((_BYTE)v124 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3;
  if (v124 - v123 < v125)
  {
    sub_20DC4F8B0((uint64_t *)(a1 + 336), ((_BYTE)v124 - (*(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 376))) & 3);
    *(void *)(a1 + 384) -= v125;
LABEL_235:
    uint64_t v127 = 0;
    do
      *(unsigned char *)(*(void *)(a1 + 384) + v127++) = 0;
    while (v125 != v127);
    uint64_t v126 = *(void *)(a1 + 384);
    uint64_t v123 = *(void *)(a1 + 392);
    goto LABEL_238;
  }
  uint64_t v126 = v124 - v125;
  *(void *)(a1 + 384) = v126;
  if (v125) {
    goto LABEL_235;
  }
LABEL_238:
  if ((unint64_t)(v126 - v123) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)(a1 + 336), 4uLL);
    uint64_t v126 = *(void *)(a1 + 384);
  }
  *(_DWORD *)(v126 - 4) = v46;
  uint64_t v128 = v126 - 4;
  *(void *)(a1 + 384) = v128;
  _DWORD *v146 = *(_DWORD *)(a1 + 368) - v128 + *(_DWORD *)(a1 + 376);
  if (*(_DWORD *)a2 == 15)
  {
    uint64_t v129 = *(void *)(a2 + 8);
    if (*(unsigned char *)(v129 + 203))
    {
      uint64_t v130 = *(uint64_t **)(v129 + 176);
      v131 = *(uint64_t **)(v129 + 184);
      while (v130 != v131)
      {
        uint64_t v132 = *v130;
        if (*(unsigned char *)(*v130 + 218)) {
          goto LABEL_247;
        }
        ++v130;
      }
      uint64_t v132 = 0;
LABEL_247:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26772D538, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26772D538))
      {
        word_26772D530 = *(_WORD *)(v132 + 208);
        __cxa_guard_release(&qword_26772D538);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26772D540, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26772D540))
      {
        dword_26772D534 = *(_DWORD *)(v132 + 152);
        __cxa_guard_release(&qword_26772D540);
      }
      uint64_t v133 = *(void *)(a2 + 8);
      int v134 = *(unsigned int **)(a1 + 384);
      unsigned int v137 = *v134;
      uint64_t v135 = (uint64_t)(v134 + 1);
      uint64_t v136 = v137;
      if (*(unsigned char *)(v133 + 200)) {
        sub_20DC43BCC(v135, v135 + *(void *)(v133 + 216) * v136, *(void *)(v133 + 216), a2);
      }
      else {
        sub_20DC43CF4(v135, v135 + 4 * v136);
      }
    }
  }
  *(_WORD *)a6 = 0;
}

void flatbuffers::Parser::ParseHash(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  HIBYTE(v48) = 4;
  strcpy((char *)__p, "hash");
  int v8 = sub_20DC58BC0(a3 + 72, (const void **)__p);
  if ((uint64_t *)(a3 + 80) == v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8[7];
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  switch(*(_DWORD *)a2)
  {
    case 5:
      uint64_t v35 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0) {
        uint64_t v35 = *(const char **)v35;
      }
      uint64_t v36 = 0;
      char v37 = 1;
      while (1)
      {
        char v38 = v37;
        if (!strcmp(v35, (&off_26C24CAA0)[2 * v36])) {
          break;
        }
        char v37 = 0;
        uint64_t v36 = 1;
        if ((v38 & 1) == 0)
        {
          uint64_t v39 = 0;
LABEL_66:
          unint64_t v45 = a1 + 32;
          if (a1[55] < 0) {
            unint64_t v45 = *(unsigned char **)v45;
          }
          ((void (*)(unsigned char *))v39)(v45);
          sub_20DC6FA50();
          goto LABEL_47;
        }
      }
      uint64_t v39 = (&off_26C24CAA0)[2 * v36 + 1];
      goto LABEL_66;
    case 6:
      unint64_t v40 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0) {
        unint64_t v40 = *(const char **)v40;
      }
      uint64_t v41 = 0;
      char v42 = 1;
      while (1)
      {
        char v43 = v42;
        if (!strcmp(v40, (&off_26C24CAA0)[2 * v41])) {
          break;
        }
        char v42 = 0;
        uint64_t v41 = 1;
        if ((v43 & 1) == 0)
        {
          uint64_t v44 = 0;
          goto LABEL_70;
        }
      }
      uint64_t v44 = (&off_26C24CAA0)[2 * v41 + 1];
LABEL_70:
      unsigned int v46 = a1 + 32;
      if (a1[55] < 0) {
        unsigned int v46 = *(unsigned char **)v46;
      }
      ((void (*)(unsigned char *))v44)(v46);
      sub_20DC6FAC0();
      goto LABEL_47;
    case 7:
      int v10 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0) {
        int v10 = *(const char **)v10;
      }
      uint64_t v11 = 0;
      char v12 = 1;
      while (1)
      {
        char v13 = v12;
        if (!strcmp(v10, (&off_26C24CAC0)[2 * v11])) {
          break;
        }
        char v12 = 0;
        uint64_t v11 = 1;
        if ((v13 & 1) == 0)
        {
          int v14 = 0;
          goto LABEL_32;
        }
      }
      int v14 = (&off_26C24CAC0)[2 * v11 + 1];
LABEL_32:
      uint64_t v30 = a1 + 32;
      if (a1[55] < 0) {
        uint64_t v30 = *(unsigned char **)v30;
      }
      ((void (*)(unsigned char *))v14)(v30);
      sub_20DC3C4E4();
      goto LABEL_47;
    case 8:
      int v15 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0) {
        int v15 = *(const char **)v15;
      }
      uint64_t v16 = 0;
      char v17 = 1;
      while (1)
      {
        char v18 = v17;
        if (!strcmp(v15, (&off_26C24CAC0)[2 * v16])) {
          break;
        }
        char v17 = 0;
        uint64_t v16 = 1;
        if ((v18 & 1) == 0)
        {
          char v19 = 0;
          goto LABEL_36;
        }
      }
      char v19 = (&off_26C24CAC0)[2 * v16 + 1];
LABEL_36:
      int64x2_t v31 = a1 + 32;
      if (a1[55] < 0) {
        int64x2_t v31 = *(unsigned char **)v31;
      }
      ((void (*)(unsigned char *))v19)(v31);
      sub_20DC3F7A4();
      goto LABEL_47;
    case 9:
      unint64_t v20 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0) {
        unint64_t v20 = *(const char **)v20;
      }
      uint64_t v21 = 0;
      char v22 = 1;
      while (1)
      {
        char v23 = v22;
        if (!strcmp(v20, (&off_26C24CAE0)[2 * v21])) {
          break;
        }
        char v22 = 0;
        uint64_t v21 = 1;
        if ((v23 & 1) == 0)
        {
          uint64_t v24 = 0;
          goto LABEL_40;
        }
      }
      uint64_t v24 = (&off_26C24CAE0)[2 * v21 + 1];
LABEL_40:
      size_t v32 = a1 + 32;
      if (a1[55] < 0) {
        size_t v32 = *(unsigned char **)v32;
      }
      ((void (*)(unsigned char *))v24)(v32);
      sub_20DC3C654();
      goto LABEL_47;
    case 0xA:
      unint64_t v25 = (const char *)(v9 + 32);
      if (*(char *)(v9 + 55) < 0) {
        unint64_t v25 = *(const char **)v25;
      }
      uint64_t v26 = 0;
      char v27 = 1;
      break;
    default:
      goto LABEL_50;
  }
  while (1)
  {
    char v28 = v27;
    if (!strcmp(v25, (&off_26C24CAE0)[2 * v26])) {
      break;
    }
    char v27 = 0;
    uint64_t v26 = 1;
    if ((v28 & 1) == 0)
    {
      unsigned int v29 = 0;
      goto LABEL_44;
    }
  }
  unsigned int v29 = (&off_26C24CAE0)[2 * v26 + 1];
LABEL_44:
  long long v33 = a1 + 32;
  if (a1[55] < 0) {
    long long v33 = *(unsigned char **)v33;
  }
  ((void (*)(unsigned char *))v29)(v33);
  sub_20DC444C8();
LABEL_47:
  long long v34 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*v34);
  }
  *(_OWORD *)long long v34 = *(_OWORD *)__p;
  *(void *)(a2 + 48) = v48;
LABEL_50:
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a4);
  *(unsigned char *)(a4 + 1) = 1;
  if (!*(unsigned char *)a4) {
    *(_WORD *)a4 = 0;
  }
}

uint64_t sub_20DC43420(uint64_t result, unint64_t a2)
{
  if (*(void *)(result + 72) < a2) {
    *(void *)(result + 72) = a2;
  }
  uint64_t v2 = *(void *)(result + 48);
  unint64_t v3 = (a2 - 1) & -(uint64_t)(*(_DWORD *)(result + 32) - v2 + *(_DWORD *)(result + 40));
  if (v2 - *(void *)(result + 56) < v3)
  {
    uint64_t v5 = (a2 - 1) & -(uint64_t)(*(_DWORD *)(result + 32) - v2 + *(_DWORD *)(result + 40));
    uint64_t v6 = result;
    sub_20DC4F8B0((uint64_t *)result, v3);
    unint64_t v3 = v5;
    uint64_t result = v6;
    *(void *)(v6 + 48) -= v5;
  }
  else
  {
    *(void *)(result + 48) = v2 - v3;
    if (!v3) {
      return result;
    }
  }
  uint64_t v4 = 0;
  do
    *(unsigned char *)(*(void *)(result + 48) + v4++) = 0;
  while (v3 != v4);
  return result;
}

uint64_t sub_20DC434C0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 72) <= 7uLL) {
    *(void *)(a1 + 72) = 8;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 7;
  if (v4 - v5 < v6)
  {
    unint64_t v11 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 7;
    sub_20DC4F8B0((uint64_t *)a1, v6);
    unint64_t v6 = v11;
    *(void *)(a1 + 48) -= v11;
  }
  else
  {
    uint64_t v7 = v4 - v6;
    *(void *)(a1 + 48) = v7;
    if (!v6) {
      goto LABEL_5;
    }
  }
  uint64_t v10 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v10++) = 0;
  while (v6 != v10);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
LABEL_5:
  if ((unint64_t)(v7 - v5) <= 7)
  {
    sub_20DC4F8B0((uint64_t *)a1, 8uLL);
    uint64_t v7 = *(void *)(a1 + 48);
  }
  *(void *)(v7 - 8) = a2;
  uint64_t v8 = v7 - 8;
  *(void *)(a1 + 48) = v8;
  return (*(_DWORD *)(a1 + 32) - v8 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_20DC435AC(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v4 - v5 < v6)
  {
    unint64_t v11 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
    sub_20DC4F8B0((uint64_t *)a1, v6);
    unint64_t v6 = v11;
    *(void *)(a1 + 48) -= v11;
  }
  else
  {
    uint64_t v7 = v4 - v6;
    *(void *)(a1 + 48) = v7;
    if (!v6) {
      goto LABEL_5;
    }
  }
  uint64_t v10 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v10++) = 0;
  while (v6 != v10);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
LABEL_5:
  if ((unint64_t)(v7 - v5) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)a1, 4uLL);
    uint64_t v7 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v7 - 4) = a2;
  uint64_t v8 = v7 - 4;
  *(void *)(a1 + 48) = v8;
  return (*(_DWORD *)(a1 + 32) - v8 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_20DC43698(uint64_t a1, char a2)
{
  if (!*(void *)(a1 + 72)) {
    *(void *)(a1 + 72) = 1;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 == *(void *)(a1 + 56))
  {
    sub_20DC4F8B0((uint64_t *)a1, 1uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 1;
  *(unsigned char *)(v4 - 1) = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t *sub_20DC43710(uint64_t *result, char a2)
{
  unint64_t v3 = result;
  if (!result[9]) {
    result[9] = 1;
  }
  uint64_t v4 = result[6];
  if (v4 == result[7])
  {
    uint64_t result = (uint64_t *)sub_20DC4F8B0(result, 1uLL);
    uint64_t v4 = v3[6];
  }
  v3[6] = v4 - 1;
  *(unsigned char *)(v4 - 1) = a2;
  return result;
}

uint64_t *sub_20DC43774(uint64_t *result, uint64_t a2, int a3)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = result;
  if ((unint64_t)result[9] <= 3) {
    result[9] = 4;
  }
  uint64_t v5 = result[4];
  uint64_t v6 = result[5];
  uint64_t v7 = result[6];
  unint64_t v8 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  if (v7 - result[7] < v8)
  {
    unint64_t v21 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
    int v18 = a3;
    uint64_t result = (uint64_t *)sub_20DC4F8B0(result, v21);
    unint64_t v8 = v21;
    a3 = v18;
    v4[6] -= v21;
  }
  else
  {
    uint64_t v9 = v7 - v8;
    result[6] = v9;
    if (!v8) {
      goto LABEL_6;
    }
  }
  uint64_t v19 = 0;
  do
    *(unsigned char *)(v4[6] + v19++) = 0;
  while (v8 != v19);
  uint64_t v6 = v4[5];
  uint64_t v9 = v4[6];
  uint64_t v5 = v4[4];
LABEL_6:
  int v10 = v6 - v9 + v5 - a3;
  int v11 = v10 + 4;
  if (v10 == -4 && !*((unsigned char *)v4 + 80)) {
    return result;
  }
  if ((unint64_t)v4[9] <= 3) {
    v4[9] = 4;
  }
  unint64_t v12 = ((_BYTE)v9 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  char v13 = (unint64_t *)v4[7];
  if (v9 - (uint64_t)v13 < v12)
  {
    unint64_t v22 = v12;
    uint64_t result = (uint64_t *)sub_20DC4F8B0(v4, v12);
    unint64_t v12 = v22;
    v4[6] -= v22;
LABEL_24:
    uint64_t v20 = 0;
    do
      *(unsigned char *)(v4[6] + v20++) = 0;
    while (v12 != v20);
    unint64_t v14 = v4[6];
    char v13 = (unint64_t *)v4[7];
    goto LABEL_11;
  }
  unint64_t v14 = v9 - v12;
  v4[6] = v9 - v12;
  if (v12) {
    goto LABEL_24;
  }
LABEL_11:
  if (v14 - (unint64_t)v13 <= 3)
  {
    uint64_t result = (uint64_t *)sub_20DC4F8B0(v4, 4uLL);
    unint64_t v14 = v4[6];
    char v13 = (unint64_t *)v4[7];
  }
  *(_DWORD *)(v14 - 4) = v11;
  uint64_t v15 = v14 - 4;
  v4[6] = v15;
  uint64_t v16 = v4[4] - v15 + v4[5];
  if ((unint64_t)(v15 - (void)v13) <= 7)
  {
    uint64_t result = (uint64_t *)sub_20DC4F8B0(v4, 8uLL);
    char v13 = (unint64_t *)v4[7];
  }
  *char v13 = v16 | (unint64_t)(a2 << 32);
  v4[7] += 8;
  ++*((_DWORD *)v4 + 16);
  unsigned int v17 = *((unsigned __int16 *)v4 + 34);
  if (v17 <= a2) {
    LOWORD(v17) = a2;
  }
  *((_WORD *)v4 + 34) = v17;
  return result;
}

uint64_t sub_20DC43968(uint64_t a1, __int16 a2)
{
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v4 - v5 < v6)
  {
    sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v6;
  }
  else
  {
    uint64_t v7 = v4 - v6;
    *(void *)(a1 + 48) = v7;
    if (!v6) {
      goto LABEL_5;
    }
  }
  uint64_t v24 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v24++) = 0;
  while (v6 != v24);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
LABEL_5:
  if ((unint64_t)(v7 - v5) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)a1, 4uLL);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
  }
  *(_DWORD *)(v7 - 4) = 0;
  uint64_t v8 = v7 - 4;
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = *(void *)(a1 + 32) - v8 + *(void *)(a1 + 40);
  if ((unsigned __int16)(*(_WORD *)(a1 + 68) + 2) <= 4u) {
    unint64_t v10 = 4;
  }
  else {
    unint64_t v10 = (unsigned __int16)(*(_WORD *)(a1 + 68) + 2);
  }
  *(_WORD *)(a1 + 68) = v10;
  if (v8 - v5 < v10)
  {
    sub_20DC4F8B0((uint64_t *)a1, v10);
    uint64_t v8 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v8 - v10;
  bzero((void *)(v8 - v10), v10);
  unsigned __int16 v11 = v9 - a2;
  char v13 = *(unsigned __int16 **)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  v13[1] = v11;
  *char v13 = *(_WORD *)(a1 + 68);
  uint64_t v14 = *(unsigned int *)(a1 + 64);
  uint64_t v15 = (char *)(v12 - 8 * v14);
  if (v14)
  {
    uint64_t v16 = (_WORD *)(v12 - 8 * v14);
    do
    {
      *(unsigned __int16 *)((char *)v13 + (unsigned __int16)v16[2]) = v9 - *v16;
      v16 += 4;
    }
    while ((unint64_t)v16 < v12);
  }
  *(void *)(a1 + 56) = v15;
  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 68) = 0;
  uint64_t v18 = *(void *)(a1 + 32);
  unint64_t v17 = *(void *)(a1 + 40);
  LODWORD(v19) = v17 - v13 + v18;
  if (*(unsigned char *)(a1 + 81) && v17 < (unint64_t)v15)
  {
    size_t v20 = *v13;
    uint64_t v21 = v17 + v18;
    unint64_t v22 = *(unsigned int **)(a1 + 40);
    while (1)
    {
      uint64_t v19 = *v22;
      if (v20 == *(unsigned __int16 *)(v21 - v19) && !memcmp((const void *)(v21 - v19), v13, v20)) {
        break;
      }
      if (++v22 >= (unsigned int *)v15)
      {
        LODWORD(v19) = v17 - v13 + v18;
        goto LABEL_23;
      }
    }
    char v13 = (unsigned __int16 *)((char *)v13 + (v17 - v13 + v18 - v9));
    *(void *)(a1 + 48) = v13;
  }
LABEL_23:
  if (v19 == v18 + v17 - v13)
  {
    if ((unint64_t)((char *)v13 - v15) <= 3)
    {
      sub_20DC4F8B0((uint64_t *)a1, 4uLL);
      uint64_t v15 = *(char **)(a1 + 56);
      uint64_t v18 = *(void *)(a1 + 32);
      unint64_t v17 = *(void *)(a1 + 40);
    }
    *(_DWORD *)uint64_t v15 = v19;
    *(void *)(a1 + 56) = v15 + 4;
  }
  *(_DWORD *)(v17 + v18 - v9) = v19 - v9;
  *(unsigned char *)(a1 + 70) = 0;
  return v9;
}

uint64_t sub_20DC43BCC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((uint64_t)(a2 - result) > a3)
  {
    uint64_t v7 = result;
    uint64_t v8 = -a3;
    do
    {
      unint64_t v9 = v7 + a3;
      unint64_t v10 = a2;
      while (v9 < v10)
      {
        if (sub_20DC59058((__int16 *)(v7 + (unsigned __int16)word_26772D530), (__int16 *)(v9 + (unsigned __int16)word_26772D530), dword_26772D534))
        {
          v10 += v8;
          if (*(void *)(*(void *)(a4 + 8) + 216))
          {
            unint64_t v11 = 0;
            do
            {
              char v12 = *(unsigned char *)(v9 + v11);
              *(unsigned char *)(v9 + v11) = *(unsigned char *)(v10 + v11);
              *(unsigned char *)(v10 + v11++) = v12;
            }
            while (v11 < *(void *)(*(void *)(a4 + 8) + 216));
          }
        }
        else
        {
          ++v9;
        }
      }
      unint64_t v13 = v9 + v8;
      if (*(void *)(*(void *)(a4 + 8) + 216))
      {
        unint64_t v14 = 0;
        do
        {
          char v15 = *(unsigned char *)(v7 + v14);
          *(unsigned char *)(v7 + v14) = *(unsigned char *)(v13 + v14);
          *(unsigned char *)(v13 + v14++) = v15;
        }
        while (v14 < *(void *)(*(void *)(a4 + 8) + 216));
      }
      uint64_t result = sub_20DC43BCC(v7, v13, a3, a4);
      uint64_t v7 = v10;
    }
    while ((uint64_t)(a2 - v10) > a3);
  }
  return result;
}

uint64_t sub_20DC43CF4(uint64_t result, unint64_t a2)
{
  if ((uint64_t)(a2 - result) >= 8)
  {
    unint64_t v3 = (int *)result;
    while (1)
    {
      uint64_t v4 = v3 + 1;
      uint64_t v5 = (int *)a2;
      if ((unint64_t)(v3 + 1) < a2) {
        break;
      }
LABEL_21:
      int v18 = v4 - 4 - v3;
      *v3 -= v18;
      int v19 = *(v4 - 1) + v18;
      *(v4 - 1) = v19;
      int v20 = *v3;
      *unint64_t v3 = v19;
      *(v4 - 1) = v20;
      uint64_t result = sub_20DC43CF4(v3);
      unint64_t v3 = v5;
      if ((uint64_t)(a2 - (void)v5) <= 7) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v6 = (int *)((char *)v3 + *v3);
      uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
      unsigned int v8 = *v7 <= (unsigned __int16)word_26772D530
         ? 0
         : *(unsigned __int16 *)((char *)v7 + (unsigned __int16)word_26772D530);
      unint64_t v9 = (int *)((char *)v4 + *v4);
      unint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 <= (unsigned __int16)word_26772D530) {
        break;
      }
      unint64_t v11 = (__int16 *)((char *)v6 + v8);
      if (v8) {
        char v12 = v11;
      }
      else {
        char v12 = 0;
      }
      if (!*(unsigned __int16 *)((char *)v10 + (unsigned __int16)word_26772D530)) {
        goto LABEL_16;
      }
      unint64_t v13 = (__int16 *)((char *)v9 + *(unsigned __int16 *)((char *)v10 + (unsigned __int16)word_26772D530));
LABEL_17:
      if (sub_20DC59058(v12, v13, dword_26772D534))
      {
        int v15 = v5 - 4 - v4;
        *v4 -= v15;
        int v16 = *(v5 - 1) + v15;
        *(v5 - 1) = v16;
        int v17 = *v4;
        *uint64_t v4 = v16;
        *--uint64_t v5 = v17;
      }
      else
      {
        ++v4;
      }
      if (v4 >= v5) {
        goto LABEL_21;
      }
    }
    unint64_t v14 = (__int16 *)((char *)v6 + v8);
    if (v8) {
      char v12 = v14;
    }
    else {
      char v12 = 0;
    }
LABEL_16:
    unint64_t v13 = 0;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_20DC43E58(uint64_t a1, void *__src, size_t __n)
{
  *(unsigned char *)(a1 + 70) = 1;
  unint64_t v6 = *(void *)(a1 + 72);
  if (v6 <= 3)
  {
    unint64_t v6 = 4;
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  unint64_t v8 = ((_BYTE)v7 - *(_DWORD *)(a1 + 40) - (*(unsigned char *)(a1 + 32) + (_BYTE)__n)) & 3;
  if (v7 - *(void *)(a1 + 56) < v8)
  {
    sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v7 - *(_DWORD *)(a1 + 40) - (*(unsigned char *)(a1 + 32) + (_BYTE)__n)) & 3);
    *(void *)(a1 + 48) -= v8;
  }
  else
  {
    *(void *)(a1 + 48) = v7 - v8;
    if (!v8) {
      goto LABEL_5;
    }
  }
  uint64_t v16 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v16++) = 0;
  while (v8 != v16);
  unint64_t v6 = *(void *)(a1 + 72);
  if (!v6)
  {
    unint64_t v6 = 1;
    *(void *)(a1 + 72) = 1;
  }
LABEL_5:
  if (__n)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    if (v9 - *(void *)(a1 + 56) < __n)
    {
      sub_20DC4F8B0((uint64_t *)a1, __n);
      uint64_t v9 = *(void *)(a1 + 48);
    }
    *(void *)(a1 + 48) = v9 - __n;
    memcpy((void *)(v9 - __n), __src, __n);
    unint64_t v6 = *(void *)(a1 + 72);
  }
  *(unsigned char *)(a1 + 70) = 0;
  if (v6 <= 3) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unint64_t v12 = ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v10 - v11 < v12)
  {
    sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v12;
  }
  else
  {
    uint64_t v13 = v10 - v12;
    *(void *)(a1 + 48) = v13;
    if (!v12) {
      goto LABEL_13;
    }
  }
  uint64_t v17 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v17++) = 0;
  while (v12 != v17);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
LABEL_13:
  if ((unint64_t)(v13 - v11) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)a1, 4uLL);
    uint64_t v13 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v13 - 4) = __n;
  uint64_t v14 = v13 - 4;
  *(void *)(a1 + 48) = v14;
  return (*(_DWORD *)(a1 + 32) - v14 + *(_DWORD *)(a1 + 40));
}

void flatbuffers::Parser::TryTypedValue(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, int *a5@<X4>, int a6@<W5>, unsigned char *a7@<X6>, uint64_t a8@<X8>)
{
  if (*(_DWORD *)(a1 + 20) != a3)
  {
LABEL_44:
    *(_WORD *)a8 = 0;
    return;
  }
  *a7 = 1;
  int v15 = (const std::string::value_type *)(a5 + 8);
  std::string::operator=((std::string *)(a5 + 8), (const std::string *)(a1 + 32));
  if ((a4 & 1) == 0)
  {
    int v16 = *a5;
    if (*a5)
    {
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = xmmword_20DC7CDD0;
      strcpy(v59.__r_.__value_.__l.__data_, "type mismatch: expecting: ");
      long long v33 = std::string::append(&v59, (&off_26412AC50)[v16 + 4]);
      std::string::size_type v34 = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      uint64_t v35 = std::string::append(&v60, ", found: ");
      std::string::size_type v36 = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      char v37 = std::string::append(&v61, (&off_26412AC50)[a6 + 4]);
      std::string::size_type v38 = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      uint64_t v39 = std::string::append(&v62, ", name: ");
      std::string::size_type v40 = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      if (a2)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          sub_20DC55634((uint64_t)__p, *(const void **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)a2;
          uint64_t v58 = *(void *)(a2 + 16);
        }
      }
      else
      {
        HIBYTE(v58) = 0;
        LOBYTE(__p[0]) = 0;
      }
      if (v58 >= 0) {
        uint64_t v41 = __p;
      }
      else {
        uint64_t v41 = (void **)__p[0];
      }
      if (v58 >= 0) {
        std::string::size_type v42 = HIBYTE(v58) & 0x7F;
      }
      else {
        std::string::size_type v42 = (std::string::size_type)__p[1];
      }
      char v43 = std::string::append(&v63, (const std::string::value_type *)v41, v42);
      std::string::size_type v44 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      unint64_t v45 = std::string::append(&v64, ", value: ");
      std::string::size_type v46 = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      char v47 = *((unsigned char *)a5 + 55);
      BOOL v48 = v47 < 0;
      if (v47 >= 0) {
        uint64_t v49 = v15;
      }
      else {
        uint64_t v49 = (const std::string::value_type *)*((void *)a5 + 4);
      }
      std::string::size_type v50 = v47 & 0x7F;
      if (v48) {
        std::string::size_type v51 = *((void *)a5 + 5);
      }
      else {
        std::string::size_type v51 = v50;
      }
      uint64_t v52 = std::string::append(&v65, v49, v51);
      std::string::size_type v53 = v52->__r_.__value_.__r.__words[2];
      long long v66 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      std::string::size_type v67 = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      flatbuffers::Parser::Error(a1, (_WORD *)a8);
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)v66);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v54 = (void *)v59.__r_.__value_.__r.__words[0];
LABEL_77:
        operator delete(v54);
      }
      return;
    }
    *a5 = a6;
  }
  if (a3 == 259) {
    goto LABEL_43;
  }
  unsigned int v17 = *a5 + 4;
  BOOL v18 = v17 > 0x10;
  int v19 = (1 << v17) & 0x18001;
  BOOL v20 = v18 || v19 == 0;
  if (v20
    || ((char v21 = *((unsigned char *)a5 + 55), v22 = *((void *)a5 + 5), v21 >= 0)
      ? (char v23 = (unsigned __int8 *)v15)
      : (char v23 = (unsigned __int8 *)*((void *)a5 + 4)),
        v21 >= 0 ? (unint64_t v24 = *((unsigned __int8 *)a5 + 55)) : (unint64_t v24 = *((void *)a5 + 5)),
        !v24))
  {
LABEL_43:
    flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a8);
    *(unsigned char *)(a8 + 1) = 1;
    if (*(unsigned char *)a8) {
      return;
    }
    goto LABEL_44;
  }
  unint64_t v25 = &v23[v24];
  uint64_t v26 = v23;
LABEL_18:
  uint64_t v27 = 0;
  while (*v26 != a0123456789[v27])
  {
    if (++v27 == 11)
    {
      if (++v26 != v25) {
        goto LABEL_18;
      }
      goto LABEL_43;
    }
  }
  if (v26 == v25) {
    goto LABEL_43;
  }
  char v28 = (unsigned __int8 *)(v26 - v23);
  if (v28 == (unsigned __int8 *)-1) {
    goto LABEL_43;
  }
  int v29 = v21;
  unint64_t v30 = v21 & 0x7F;
  if (v29 >= 0) {
    unint64_t v22 = v30;
  }
  if (v22 <= (unint64_t)(v28 + 1) || v28[(void)v23] != 48 || (v28[(void)v23 + 1] & 0xDF) != 0x58) {
    goto LABEL_43;
  }
  if (v24 > (unint64_t)(v28 + 2))
  {
    int64x2_t v31 = &v28[(void)v23 + 2];
LABEL_32:
    uint64_t v32 = 0;
    while (*v31 != aPp[v32])
    {
      if (++v32 == 2)
      {
        if (++v31 != v25) {
          goto LABEL_32;
        }
        goto LABEL_78;
      }
    }
    if (v31 == v25 || v31 - v23 == -1) {
      goto LABEL_78;
    }
    goto LABEL_43;
  }
LABEL_78:
  std::operator+<char>();
  int v55 = std::string::append(&v65, "\"");
  std::string::size_type v56 = v55->__r_.__value_.__r.__words[2];
  long long v66 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  std::string::size_type v67 = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a1, (_WORD *)a8);
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v54 = (void *)v65.__r_.__value_.__r.__words[0];
    goto LABEL_77;
  }
}

uint64_t sub_20DC444C8()
{
  sub_20DC50E1C((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x263F8C2B8];
  uint64_t v0 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x263F8C318] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x210568AB0](&v4);
}

BOOL sub_20DC44638(uint64_t a1, const void **a2, uint64_t *a3)
{
  unint64_t v6 = *(uint64_t ***)(a1 + 32);
  if ((unint64_t)v6 >= *(void *)(a1 + 40))
  {
    uint64_t v7 = sub_20DC585B8((void **)(a1 + 24), (uint64_t)a3);
  }
  else
  {
    *unint64_t v6 = a3;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = sub_20DC5B558(a1, (uint64_t)a2);
  if (a1 + 8 == v8) {
    sub_20DC593C8((uint64_t **)a1, a2, (uint64_t)a2)[7] = a3;
  }
  return a1 + 8 != v8;
}

uint64_t *sub_20DC446D0(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    JUMPOUT(0x210568AF0);
  }
  return result;
}

uint64_t flatbuffers::EnumDef::MinValue(flatbuffers::EnumDef *this)
{
  uint64_t v1 = *((void *)this + 26);
  if (v1 == *((void *)this + 27)) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t flatbuffers::EnumDef::MaxValue(flatbuffers::EnumDef *this)
{
  uint64_t v1 = *((void *)this + 27);
  if (*((void *)this + 26) == v1) {
    return 0;
  }
  else {
    return *(void *)(v1 - 8);
  }
}

uint64_t flatbuffers::EnumDef::Distance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 152);
  if (v3 == 10 || v3 == -3)
  {
    unint64_t v5 = *(void *)(a2 + 136);
    unint64_t v6 = *(void *)(a3 + 136);
    if (v5 <= v6) {
      uint64_t v7 = *(void *)(a3 + 136);
    }
    else {
      uint64_t v7 = *(void *)(a2 + 136);
    }
    if (v5 >= v6) {
      unint64_t v5 = *(void *)(a3 + 136);
    }
  }
  else
  {
    unint64_t v5 = *(void *)(a2 + 136);
    uint64_t v8 = *(void *)(a3 + 136);
    if ((uint64_t)v5 <= v8) {
      uint64_t v7 = *(void *)(a3 + 136);
    }
    else {
      uint64_t v7 = *(void *)(a2 + 136);
    }
    if ((uint64_t)v5 >= v8) {
      unint64_t v5 = *(void *)(a3 + 136);
    }
  }
  return v7 - v5;
}

uint64_t flatbuffers::EnumDef::AllFlags(flatbuffers::EnumDef *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 26);
  uint64_t v2 = (uint64_t *)*((void *)this + 27);
  if (v1 != v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *v1++;
      v3 |= *(void *)(v4 + 136);
    }
    while (v1 != v2);
  }
  int v5 = *((_DWORD *)this + 38);
  if (v5 == -3 || v5 == 10) {
    return sub_20DC444C8();
  }
  else {
    return sub_20DC3C654();
  }
}

uint64_t flatbuffers::EnumDef::Count(flatbuffers::EnumDef *this)
{
  int v1 = *((_DWORD *)this + 38);
  if (v1 == 10 || v1 == -3) {
    return sub_20DC444C8();
  }
  else {
    return sub_20DC3C654();
  }
}

BOOL sub_20DC4482C(char *a1, flatbuffers::ClassicLocale *a2)
{
  BOOL result = sub_20DC4F514(a2, a1, 0, 1);
  if (result)
  {
    if (!*(void *)a2) {
      return 1;
    }
    int v5 = a1 - 1;
    do
    {
      int v6 = *++v5;
      unsigned int v7 = v6 - 48;
      if (v6) {
        BOOL v8 = v7 > 9;
      }
      else {
        BOOL v8 = 0;
      }
    }
    while (v8);
    if (*(unsigned char *)((__PAIR128__((unint64_t)v5, (unint64_t)a1) - (unint64_t)v5) >> 64) == 45)
    {
      BOOL result = 0;
      *(void *)a2 = -1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void flatbuffers::Parser::ParseEnum(flatbuffers::Parser *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *((void *)this + 7);
  memset(v9, 0, sizeof(v9));
  sub_20DC58508(v9, v5, *((void *)this + 8), 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v5) >> 3));
  flatbuffers::Parser::Next(this, (uint64_t)a2);
  a2[1] = 1;
  if (!*a2)
  {
    if (*((char *)this + 55) < 0)
    {
      sub_20DC55634((uint64_t)__p, *((const void **)this + 4), *((void *)this + 5));
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)this + 2);
      uint64_t v8 = *((void *)this + 6);
    }
    flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
    a2[1] = 1;
    if (!*a2)
    {
      v6[5] = 0;
      flatbuffers::Parser::StartEnum();
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  v6[0] = v9;
  sub_20DC5847C((void ***)v6);
}

void sub_20DC45904(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  unint64_t v2 = (unint64_t)(*(void *)(*(void *)(a1 + 8) + 216) - v1) >> 3;
  if (!v2) {
    goto LABEL_12;
  }
  int v3 = v2 - 1;
  do
  {
    if (*(_DWORD *)(a1 + 32) == v3)
    {
      int v4 = -1;
    }
    else if (v3 == *(_DWORD *)(a1 + 36))
    {
      int v4 = -1;
    }
    else
    {
      int v4 = v3;
    }
    BOOL v5 = v3-- != 0;
  }
  while (v5 && v4 == -1);
  if (v4 != -1) {
    uint64_t v6 = *(void *)(v1 + 8 * v4);
  }
  else {
LABEL_12:
  }
    uint64_t v6 = 0;
  *(unsigned char *)(a1 + 25) = v6 == 0;
  *(_WORD *)(a1 + 26) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  operator new();
}

uint64_t sub_20DC459D4(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1[4];
  if (v6 >= a1[5])
  {
    unsigned int v7 = sub_20DC585B8((void **)a1 + 3, a3);
  }
  else
  {
    *uint64_t v6 = a3;
    unsigned int v7 = v6 + 1;
  }
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1[1];
  a1[4] = v7;
  if (!v9)
  {
    unint64_t v24 = a1 + 1;
    goto LABEL_57;
  }
  char v10 = *((unsigned char *)a2 + 23);
  BOOL v11 = v10 < 0;
  if (v10 >= 0) {
    unint64_t v12 = a2;
  }
  else {
    unint64_t v12 = *a2;
  }
  size_t v13 = v10 & 0x7F;
  if (v11) {
    size_t v14 = (size_t)a2[1];
  }
  else {
    size_t v14 = v13;
  }
  int v15 = v9;
  int v16 = a1 + 1;
  do
  {
    if (*((char *)v15 + 55) < 0)
    {
      unsigned int v17 = (const void *)v15[4];
      size_t v18 = v15[5];
    }
    else
    {
      unsigned int v17 = v15 + 4;
      size_t v18 = *((unsigned __int8 *)v15 + 55);
    }
    if (v14 >= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v14;
    }
    int v20 = memcmp(v17, v12, v19);
    BOOL v21 = v18 < v14;
    if (v20) {
      BOOL v21 = v20 < 0;
    }
    BOOL v22 = !v21;
    if (v21) {
      char v23 = (uint64_t **)(v15 + 1);
    }
    else {
      char v23 = (uint64_t **)v15;
    }
    if (v22) {
      int v16 = (uint64_t **)v15;
    }
    int v15 = *v23;
  }
  while (*v23);
  if (v16 == v8)
  {
LABEL_28:
    unint64_t v24 = a1 + 1;
    if (v9)
    {
      int v25 = *((char *)a2 + 23);
      if (v25 >= 0) {
        size_t v26 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v26 = (size_t)a2[1];
      }
      if (v25 >= 0) {
        uint64_t v27 = a2;
      }
      else {
        uint64_t v27 = *a2;
      }
      while (1)
      {
        while (1)
        {
          unint64_t v24 = (uint64_t **)v9;
          char v28 = v9 + 4;
          int v29 = (const void *)v9[4];
          size_t v30 = *((unsigned __int8 *)v9 + 55);
          if ((v30 & 0x80u) == 0) {
            int64x2_t v31 = v28;
          }
          else {
            int64x2_t v31 = v29;
          }
          size_t v32 = v28[1];
          if ((v30 & 0x80u) == 0) {
            size_t v33 = v30 & 0x7F;
          }
          else {
            size_t v33 = v28[1];
          }
          if (v33 >= v26) {
            size_t v34 = v26;
          }
          else {
            size_t v34 = v33;
          }
          int v35 = memcmp(v27, v31, v34);
          BOOL v36 = v26 < v33;
          if (v35) {
            BOOL v36 = v35 < 0;
          }
          if (!v36) {
            break;
          }
          uint64_t v9 = *v24;
          uint64_t v8 = v24;
          if (!*v24) {
            goto LABEL_57;
          }
        }
        if ((v30 & 0x80u) != 0) {
          size_t v30 = v32;
        }
        if (v26 >= v30) {
          size_t v37 = v30;
        }
        else {
          size_t v37 = v26;
        }
        int v38 = memcmp(v31, v27, v37);
        BOOL v39 = v30 < v26;
        if (v38) {
          BOOL v39 = v38 < 0;
        }
        if (!v39) {
          break;
        }
        uint64_t v9 = v24[1];
        if (!v9)
        {
          uint64_t v8 = v24 + 1;
          goto LABEL_57;
        }
      }
      std::string::size_type v40 = v24;
      goto LABEL_62;
    }
LABEL_57:
    std::string::size_type v40 = operator new(0x40uLL);
    uint64_t v41 = v40 + 4;
    if (*((char *)a2 + 23) < 0)
    {
      sub_20DC55634((uint64_t)v41, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *uint64_t v41 = *(_OWORD *)a2;
      v40[6] = a2[2];
    }
    v40[7] = 0;
    *std::string::size_type v40 = 0;
    v40[1] = 0;
    v40[2] = v24;
    *uint64_t v8 = v40;
    std::string::size_type v42 = (uint64_t *)**a1;
    char v43 = v40;
    if (v42)
    {
      *a1 = v42;
      char v43 = *v8;
    }
    sub_20DC5007C(a1[1], v43);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_62:
    uint64_t result = 0;
    v40[7] = a3;
    return result;
  }
  char v47 = v16[4];
  std::string::size_type v46 = v16 + 4;
  unint64_t v45 = v47;
  char v48 = *((unsigned char *)v46 + 23);
  int v49 = v48;
  if (v48 >= 0) {
    unint64_t v45 = v46;
  }
  uint64_t v50 = v48 & 0x7F;
  if (v49 < 0) {
    uint64_t v50 = v46[1];
  }
  v51[0] = v45;
  v51[1] = v50;
  if ((sub_20DC50018(a2, (uint64_t)v51) & 0x80000000) != 0)
  {
    uint64_t v9 = *v8;
    goto LABEL_28;
  }
  return 1;
}

void **flatbuffers::Parser::UniqueNamespace(uint64_t a1, void **a2)
{
  unint64_t v2 = a2;
  BOOL v5 = *(void ****)(a1 + 272);
  int v4 = *(void ****)(a1 + 280);
  if (v5 != v4)
  {
    unsigned int v7 = (unsigned __int8 *)*a2;
    uint64_t v6 = (unsigned __int8 *)a2[1];
    int64_t v8 = v6 - (unsigned char *)*a2;
    do
    {
      uint64_t v9 = (unsigned __int8 **)**v5;
      if (v8 == (unsigned char *)(*v5)[1] - (unsigned char *)v9)
      {
        if (v7 == v6)
        {
LABEL_27:
          BOOL v21 = v2;
          sub_20DC5847C(&v21);
          MEMORY[0x210568AF0](v2, 0x1020C4016EE4530);
          return *v5;
        }
        char v10 = v7;
        while (1)
        {
          unsigned __int8 v11 = v10[23];
          uint64_t v12 = v11 & 0x7F;
          if ((v11 & 0x80u) == 0) {
            size_t v13 = (unsigned __int8 *)(v11 & 0x7F);
          }
          else {
            size_t v13 = (unsigned __int8 *)*((void *)v10 + 1);
          }
          char v14 = *((unsigned char *)v9 + 23);
          int v15 = v14;
          int v16 = (unsigned __int8 *)(v14 & 0x7F);
          if (v15 < 0) {
            int v16 = v9[1];
          }
          if (v13 != v16) {
            break;
          }
          if (v15 >= 0) {
            unsigned int v17 = (unsigned __int8 *)v9;
          }
          else {
            unsigned int v17 = *v9;
          }
          if ((v10[23] & 0x80) != 0)
          {
            if (memcmp(*(const void **)v10, v17, *((void *)v10 + 1))) {
              break;
            }
          }
          else if ((v11 & 0x7F) != 0)
          {
            uint64_t v18 = 0;
            while (v10[v18] == v17[v18])
            {
              if (v12 == ++v18) {
                goto LABEL_22;
              }
            }
            break;
          }
LABEL_22:
          v10 += 24;
          v9 += 3;
          if (v10 == v6) {
            goto LABEL_27;
          }
        }
      }
      ++v5;
    }
    while (v5 != v4);
  }
  if ((unint64_t)v4 >= *(void *)(a1 + 288))
  {
    size_t v19 = sub_20DC585B8((void **)(a1 + 272), (uint64_t)v2);
  }
  else
  {
    *int v4 = v2;
    size_t v19 = v4 + 1;
  }
  *(void *)(a1 + 280) = v19;
  return v2;
}

void flatbuffers::Parser::UnqualifiedName()
{
}

BOOL sub_20DC46058(uint64_t a1, uint64_t a2)
{
  char v11 = 2;
  strcpy((char *)__p, "id");
  uint64_t v3 = sub_20DC58BC0(a1 + 72, (const void **)__p)[7];
  int v4 = (const char *)(v3 + 32);
  if (*(char *)(v3 + 55) < 0) {
    int v4 = *(const char **)v4;
  }
  int v5 = atoi(v4);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  char v11 = 2;
  strcpy((char *)__p, "id");
  uint64_t v6 = sub_20DC58BC0(a2 + 72, (const void **)__p)[7];
  unsigned int v7 = (const char *)(v6 + 32);
  if (*(char *)(v6 + 55) < 0) {
    unsigned int v7 = *(const char **)v7;
  }
  int v8 = atoi(v7);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return v5 < v8;
}

void *flatbuffers::Parser::MarkGenerated(void *this)
{
  uint64_t v1 = (uint64_t *)this[25];
  for (uint64_t i = (uint64_t *)this[26]; v1 != i; *(unsigned char *)(v3 + 120) = 1)
    uint64_t v3 = *v1++;
  uint64_t v4 = this[19];
  for (uint64_t j = this[20]; v4 != j; v4 += 8)
  {
    if (!*(unsigned char *)(*(void *)v4 + 201)) {
      *(unsigned char *)(*(void *)v4 + 120) = 1;
    }
  }
  uint64_t v6 = (uint64_t *)this[31];
  for (k = (uint64_t *)this[32]; v6 != k; *(unsigned char *)(v8 + 120) = 1)
    uint64_t v8 = *v6++;
  return this;
}

uint64_t sub_20DC46190(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_20DC5B3DC(a1, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20DC55634(a1[1], *(const void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    uint64_t result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

void flatbuffers::Parser::ParseProtoDecl(flatbuffers::Parser *this@<X0>, unsigned __int8 *a2@<X8>)
{
  int v4 = *((_DWORD *)this + 5);
  if (v4 != 260) {
    goto LABEL_91;
  }
  int v5 = (char *)this + 32;
  unint64_t v6 = *((unsigned __int8 *)this + 55);
  unint64_t v7 = *((void *)this + 5);
  if ((v6 & 0x80u) == 0) {
    unint64_t v8 = v6 & 0x7F;
  }
  else {
    unint64_t v8 = *((void *)this + 5);
  }
  if (v8 == 4)
  {
    if ((v6 & 0x80) != 0) {
      int v5 = *(char **)v5;
    }
    else {
      unint64_t v7 = *((unsigned __int8 *)this + 55);
    }
    if (v7 >= 4) {
      size_t v13 = 4;
    }
    else {
      size_t v13 = v7;
    }
    if (!memcmp(v5, "enum", v13) && v7 == 4)
    {
      __p[0] = 0;
      flatbuffers::Parser::ParseEnum(this, a2);
      a2[1] = 1;
      if (*a2) {
        return;
      }
      if (*((_DWORD *)this + 5) == 59)
      {
        flatbuffers::Parser::Next(this, (uint64_t)a2);
        a2[1] = 1;
        if (*a2) {
          return;
        }
      }
      flatbuffers::EnumDef::RemoveDuplicates((void *)__p[0]);
LABEL_78:
      *(_WORD *)a2 = 0;
      return;
    }
    goto LABEL_91;
  }
  if (v8 != 7)
  {
    if (v8 == 6)
    {
      unint64_t v9 = *((unsigned __int8 *)this + 55);
      char v10 = (char *)this + 32;
      if ((v6 & 0x80) != 0)
      {
        char v10 = *(char **)v5;
        unint64_t v9 = *((void *)this + 5);
      }
      if (v9 >= 6) {
        size_t v11 = 6;
      }
      else {
        size_t v11 = v9;
      }
      if (!memcmp(v10, "extend", v11) && v9 == 6)
      {
        int v12 = 1;
        goto LABEL_47;
      }
      unint64_t v22 = v6;
      char v23 = (char *)this + 32;
      if ((v6 & 0x80) != 0)
      {
        char v23 = *(char **)v5;
        unint64_t v22 = v7;
      }
      if (v22 >= 6) {
        size_t v24 = 6;
      }
      else {
        size_t v24 = v22;
      }
      if (!memcmp(v23, "syntax", v24) && v22 == 6)
      {
        flatbuffers::Parser::Next(this, (uint64_t)a2);
        a2[1] = 1;
        if (*a2) {
          return;
        }
        flatbuffers::Parser::Expect(this, 61, (uint64_t)a2);
        a2[1] = 1;
        if (*a2) {
          return;
        }
        flatbuffers::Parser::Expect(this, 257, (uint64_t)a2);
        goto LABEL_89;
      }
      if ((v6 & 0x80) != 0) {
        int v5 = *(char **)v5;
      }
      else {
        unint64_t v7 = v6;
      }
      if (v7 >= 6) {
        size_t v26 = 6;
      }
      else {
        size_t v26 = v7;
      }
      if (!memcmp(v5, "option", v26) && v7 == 6)
      {
        flatbuffers::Parser::ParseProtoOption(this, a2);
LABEL_89:
        a2[1] = 1;
        if (*a2) {
          return;
        }
        flatbuffers::Parser::Expect(this, 59, (uint64_t)a2);
        a2[1] = 1;
        goto LABEL_77;
      }
    }
LABEL_91:
    flatbuffers::Parser::TokenToStringId((char *)this, v4, &v34);
    uint64_t v27 = std::string::insert(&v34, 0, "don't know how to parse .proto declaration starting with ");
    std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    std::string::size_type v37 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error((uint64_t)this, a2);
    if (SHIBYTE(v37) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    return;
  }
  unint64_t v15 = *((unsigned __int8 *)this + 55);
  int v16 = (char *)this + 32;
  if ((v6 & 0x80) != 0)
  {
    int v16 = *(char **)v5;
    unint64_t v15 = *((void *)this + 5);
  }
  if (v15 >= 7) {
    size_t v17 = 7;
  }
  else {
    size_t v17 = v15;
  }
  if (!memcmp(v16, "package", v17) && v15 == 7)
  {
    flatbuffers::Parser::ParseNamespace(this, a2);
    goto LABEL_76;
  }
  unint64_t v19 = v6;
  int v20 = (char *)this + 32;
  if ((v6 & 0x80) != 0)
  {
    int v20 = *(char **)v5;
    unint64_t v19 = v7;
  }
  if (v19 >= 7) {
    size_t v21 = 7;
  }
  else {
    size_t v21 = v19;
  }
  if (memcmp(v20, "message", v21) || v19 != 7)
  {
    if ((v6 & 0x80) != 0) {
      int v5 = *(char **)v5;
    }
    else {
      unint64_t v7 = v6;
    }
    if (v7 >= 7) {
      size_t v25 = 7;
    }
    else {
      size_t v25 = v7;
    }
    if (memcmp(v5, "service", v25) || v7 != 7) {
      goto LABEL_91;
    }
    flatbuffers::Parser::Next(this, (uint64_t)a2);
    a2[1] = 1;
    if (*a2) {
      return;
    }
    flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
    a2[1] = 1;
    if (*a2) {
      return;
    }
    flatbuffers::Parser::ParseProtoCurliesOrIdent(this, a2);
LABEL_76:
    a2[1] = 1;
LABEL_77:
    if (*a2) {
      return;
    }
    goto LABEL_78;
  }
  int v12 = 0;
LABEL_47:
  __p[0] = 0;
  __p[1] = 0;
  std::string::size_type v37 = 0;
  sub_20DC58508(__p, *((void *)this + 7), *((void *)this + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3));
  flatbuffers::Parser::Next(this, (uint64_t)a2);
  a2[1] = 1;
  if (*a2)
  {
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
LABEL_73:
    sub_20DC5847C((void ***)&v34);
    return;
  }
  int v35 = 0;
  if (!v12)
  {
    if (*((char *)this + 55) < 0)
    {
      sub_20DC55634((uint64_t)&v34, *((const void **)this + 4), *((void *)this + 5));
    }
    else
    {
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v34.__r_.__value_.__r.__words[2] = *((void *)this + 6);
    }
    flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
    a2[1] = 1;
    if (!*a2)
    {
      flatbuffers::Parser::StartStruct((const std::string *)this, &v34, &v35, a2);
      a2[1] = 1;
      if (!*a2) {
        operator new();
      }
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    goto LABEL_72;
  }
  if (*((_DWORD *)this + 5) == 46)
  {
    flatbuffers::Parser::Next(this, (uint64_t)a2);
    a2[1] = 1;
    if (*a2)
    {
LABEL_72:
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      goto LABEL_73;
    }
  }
  if (*((char *)this + 55) < 0)
  {
    sub_20DC55634((uint64_t)&v34, *((const void **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    v34.__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
  flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
  a2[1] = 1;
  if (*a2 || (flatbuffers::Parser::ParseNamespacing(this, &v34, 0, a2), a2[1] = 1, *a2))
  {
LABEL_99:
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    goto LABEL_72;
  }
  Struct = (std::string *)flatbuffers::Parser::LookupCreateStruct((uint64_t)this, (uint64_t)&v34, 0, 0);
  int v35 = Struct;
  if (!Struct)
  {
    std::operator+<char>();
    flatbuffers::Parser::Error((uint64_t)this, a2);
    if (v33 < 0) {
      operator delete(v32);
    }
    goto LABEL_99;
  }
  uint64_t v31 = (uint64_t)Struct;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if ((void **)(v31 + 48) != __p) {
    sub_20DC58CA8(v31 + 48, (std::string *)__p[0], (std::string *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
  }
  flatbuffers::Parser::ParseProtoFields((uint64_t)this, v31, v12, 0, a2);
  a2[1] = 1;
  if (*a2) {
    goto LABEL_72;
  }
  if (*((_DWORD *)this + 5) != 59)
  {
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    sub_20DC5847C((void ***)&v34);
    goto LABEL_78;
  }
  flatbuffers::Parser::Next(this, (uint64_t)a2);
  a2[1] = 1;
  int v29 = *a2;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  sub_20DC5847C((void ***)&v34);
  if (!v29) {
    goto LABEL_78;
  }
}

void flatbuffers::Parser::ParseProtoFields(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, unsigned __int8 *a5@<X8>)
{
  flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 123, (uint64_t)a5);
  a5[1] = 1;
  if (*a5) {
    return;
  }
  char v10 = (const void **)(a1 + 32);
  int v93 = a3;
  while (1)
  {
    while (1)
    {
      int v11 = *(_DWORD *)(a1 + 20);
      if (v11 != 260) {
        break;
      }
      unint64_t v26 = *(unsigned __int8 *)(a1 + 55);
      unint64_t v27 = *(void *)(a1 + 40);
      if ((v26 & 0x80u) == 0) {
        unint64_t v28 = v26 & 0x7F;
      }
      else {
        unint64_t v28 = *(void *)(a1 + 40);
      }
      switch(v28)
      {
        case 4uLL:
          int v29 = (const void *)(a1 + 32);
          if ((v26 & 0x80) != 0)
          {
            int v29 = *v10;
            unint64_t v26 = *(void *)(a1 + 40);
          }
          if (v26 >= 4) {
            size_t v30 = 4;
          }
          else {
            size_t v30 = v26;
          }
          if (memcmp(v29, "enum", v30) || v26 != 4) {
            goto LABEL_5;
          }
          goto LABEL_99;
        case 6uLL:
          unint64_t v39 = *(unsigned __int8 *)(a1 + 55);
          std::string::size_type v40 = (const void *)(a1 + 32);
          if ((v26 & 0x80) != 0)
          {
            std::string::size_type v40 = *v10;
            unint64_t v39 = *(void *)(a1 + 40);
          }
          if (v39 >= 6) {
            size_t v41 = 6;
          }
          else {
            size_t v41 = v39;
          }
          if (!memcmp(v40, "extend", v41) && v39 == 6) {
            goto LABEL_99;
          }
          char v43 = (const void *)(a1 + 32);
          if ((v26 & 0x80) != 0)
          {
            char v43 = *v10;
            unint64_t v26 = v27;
          }
          if (v26 >= 6) {
            size_t v44 = 6;
          }
          else {
            size_t v44 = v26;
          }
          if (memcmp(v43, "option", v44) || v26 != 6) {
            goto LABEL_5;
          }
          flatbuffers::Parser::ParseProtoOption((flatbuffers::Parser *)a1, a5);
          goto LABEL_132;
        case 7uLL:
          BOOL v36 = (const void *)(a1 + 32);
          if ((v26 & 0x80) != 0)
          {
            BOOL v36 = *v10;
            unint64_t v26 = *(void *)(a1 + 40);
          }
          if (v26 >= 7) {
            size_t v37 = 7;
          }
          else {
            size_t v37 = v26;
          }
          if (memcmp(v36, "message", v37) || v26 != 7) {
            goto LABEL_5;
          }
LABEL_99:
          flatbuffers::Parser::ParseProtoDecl((flatbuffers::Parser *)a1);
          goto LABEL_100;
        case 8uLL:
          std::string::size_type v46 = (const void *)(a1 + 32);
          if ((v26 & 0x80) != 0)
          {
            std::string::size_type v46 = *v10;
            unint64_t v26 = *(void *)(a1 + 40);
          }
          if (v26 >= 8) {
            size_t v47 = 8;
          }
          else {
            size_t v47 = v26;
          }
          if (memcmp(v46, "reserved", v47) || v26 != 8) {
            goto LABEL_5;
          }
          flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
          a5[1] = 1;
          int v45 = *a5;
          break;
        case 0xAuLL:
          uint64_t v50 = (const void *)(a1 + 32);
          if ((v26 & 0x80) != 0)
          {
            uint64_t v50 = *v10;
            unint64_t v26 = *(void *)(a1 + 40);
          }
          if (v26 >= 0xA) {
            size_t v51 = 10;
          }
          else {
            size_t v51 = v26;
          }
          if (memcmp(v50, "extensions", v51) || v26 != 10) {
            goto LABEL_5;
          }
          flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
          a5[1] = 1;
          if (*a5) {
            return;
          }
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 258, (uint64_t)a5);
          a5[1] = 1;
          if (*a5) {
            return;
          }
          if (*(_DWORD *)(a1 + 20) == 260)
          {
            flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
            a5[1] = 1;
            if (*a5) {
              return;
            }
            flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
LABEL_132:
            a5[1] = 1;
            if (*a5) {
              return;
            }
          }
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 59, (uint64_t)a5);
LABEL_100:
          a5[1] = 1;
          int v45 = *a5;
          goto LABEL_101;
        default:
          goto LABEL_5;
      }
      do
      {
        if (v45) {
          return;
        }
        int v49 = *(_DWORD *)(a1 + 20);
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        a5[1] = 1;
        int v45 = *a5;
      }
      while (v49 != 59);
LABEL_101:
      if (v45) {
        return;
      }
    }
    if (v11 == 125) {
      break;
    }
LABEL_5:
    v131 = 0;
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    sub_20DC58508(&v131, *(void *)(a1 + 56), *(void *)(a1 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3));
    if ((a4 & 1) != 0 || *(_DWORD *)(a1 + 20) != 260) {
      goto LABEL_20;
    }
    unint64_t v12 = *(unsigned __int8 *)(a1 + 55);
    unint64_t v13 = *(void *)(a1 + 40);
    if ((v12 & 0x80u) == 0) {
      unint64_t v14 = v12 & 0x7F;
    }
    else {
      unint64_t v14 = *(void *)(a1 + 40);
    }
    if (v14 == 5)
    {
      std::string::size_type v53 = (const void *)(a1 + 32);
      if ((v12 & 0x80) != 0)
      {
        std::string::size_type v53 = *v10;
        unint64_t v12 = *(void *)(a1 + 40);
      }
      if (v12 >= 5) {
        size_t v54 = 5;
      }
      else {
        size_t v54 = v12;
      }
      char v18 = 0;
      if (memcmp(v53, "oneof", v54)) {
        goto LABEL_172;
      }
      int v19 = 0;
      uint64_t v20 = 0;
      if (v12 == 5)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        uint64_t v20 = 1;
        a5[1] = 1;
        if (*a5) {
          goto LABEL_291;
        }
        char v18 = 0;
        int v19 = 0;
      }
    }
    else
    {
      if (v14 != 8) {
        goto LABEL_20;
      }
      unint64_t v15 = *(unsigned __int8 *)(a1 + 55);
      int v16 = (const void *)(a1 + 32);
      if ((v12 & 0x80) != 0)
      {
        int v16 = *v10;
        unint64_t v15 = *(void *)(a1 + 40);
      }
      if (v15 >= 8) {
        size_t v17 = 8;
      }
      else {
        size_t v17 = v15;
      }
      if (!memcmp(v16, "optional", v17) && v15 == 8)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        a5[1] = 1;
        if (*a5) {
          goto LABEL_291;
        }
LABEL_20:
        char v18 = 0;
LABEL_21:
        int v19 = 0;
LABEL_22:
        uint64_t v20 = 0;
        goto LABEL_23;
      }
      unint64_t v57 = v12;
      uint64_t v58 = (const void *)(a1 + 32);
      if ((v12 & 0x80) != 0)
      {
        uint64_t v58 = *v10;
        unint64_t v57 = v13;
      }
      if (v57 >= 8) {
        size_t v59 = 8;
      }
      else {
        size_t v59 = v57;
      }
      if (!memcmp(v58, "required", v59) && v57 == 8)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        char v18 = 1;
        a5[1] = 1;
        if (*a5) {
          goto LABEL_291;
        }
        goto LABEL_21;
      }
      std::string v62 = (const void *)(a1 + 32);
      if ((v12 & 0x80) != 0)
      {
        std::string v62 = *v10;
        unint64_t v12 = v13;
      }
      if (v12 >= 8) {
        size_t v63 = 8;
      }
      else {
        size_t v63 = v12;
      }
      char v18 = 0;
      if (memcmp(v62, "repeated", v63))
      {
LABEL_172:
        int v19 = 0;
        uint64_t v20 = 0;
        goto LABEL_23;
      }
      int v19 = 0;
      uint64_t v20 = 0;
      if (v12 == 8)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        int v19 = 1;
        a5[1] = 1;
        if (*a5) {
          goto LABEL_291;
        }
        char v18 = 0;
        goto LABEL_22;
      }
    }
LABEL_23:
    BOOL v21 = 0;
    unint64_t v129 = 0;
    uint64_t v130 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    __int16 v128 = 0;
    uint64_t v127 = 0;
    if (*(_DWORD *)(a1 + 20) == 260)
    {
      unint64_t v22 = *(unsigned __int8 *)(a1 + 55);
      if ((v22 & 0x80u) == 0) {
        unint64_t v23 = v22 & 0x7F;
      }
      else {
        unint64_t v23 = *(void *)(a1 + 40);
      }
      if (v23 == 5)
      {
        size_t v24 = (const void *)(a1 + 32);
        if ((v22 & 0x80) != 0)
        {
          size_t v24 = *v10;
          unint64_t v22 = *(void *)(a1 + 40);
        }
        if (v22 >= 5) {
          size_t v25 = 5;
        }
        else {
          size_t v25 = v22;
        }
        BOOL v21 = memcmp(v24, "group", v25) == 0;
        if (v22 != 5) {
          BOOL v21 = 0;
        }
      }
      else
      {
        BOOL v21 = 0;
      }
    }
    if ((v20 | v21) == 1)
    {
      if (v20)
      {
        if (*(unsigned char *)(a1 + 748))
        {
          flatbuffers::MakeCamel((char *)(a1 + 32), 1, &__str);
          int v55 = std::string::append(&__str, "Union");
          std::string::size_type v56 = (void *)v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v102[0] = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          flatbuffers::Parser::StartEnum();
        }
      }
      else
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        a5[1] = 1;
        if (*a5) {
          goto LABEL_291;
        }
      }
      ++*(_DWORD *)(a1 + 1200);
      sub_20DC3C4E4();
      size_t v32 = std::string::insert(&__str, 0, "Anonymous");
      char v33 = (void *)v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v102[0] = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      flatbuffers::Parser::StartStruct((const std::string *)a1, (const std::string *)__p, &v130, a5);
      a5[1] = 1;
      if (*a5)
      {
        if (SHIBYTE(v102[0]) < 0) {
          operator delete(__p[0]);
        }
LABEL_291:
        __p[0] = &v131;
        sub_20DC5847C((void ***)__p);
        return;
      }
      uint64_t v125 = 15;
      uint64_t v126 = v130;
      uint64_t v127 = 0;
      __int16 v128 = 0;
      if (SHIBYTE(v102[0]) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      flatbuffers::Parser::ParseTypeFromProtoType((_DWORD *)a1, &v125, a5);
      a5[1] = 1;
      if (*a5) {
        goto LABEL_291;
      }
    }
    if (v19)
    {
      int v34 = v125;
      LODWORD(v125) = 14;
      HIDWORD(v125) = v34;
      if (v34 == 14) {
        HIDWORD(v125) = 13;
      }
    }
    if (*(char *)(a1 + 55) < 0)
    {
      sub_20DC55634((uint64_t)&v123, *(const void **)(a1 + 32), *(void *)(a1 + 40));
    }
    else
    {
      long long v123 = *(_OWORD *)v10;
      uint64_t v124 = *(void *)(a1 + 48);
    }
    flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 260, (uint64_t)a5);
    int v35 = 1;
    a5[1] = 1;
    if (!*a5)
    {
      if ((v20 & 1) != 0
        || (flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 61, (uint64_t)a5), a5[1] = 1, !*a5)
        && (flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 258, (uint64_t)a5), a5[1] = 1, !*a5))
      {
        uint64_t v122 = 0;
        if (!v93) {
          goto LABEL_177;
        }
        uint64_t v60 = sub_20DC7572C(a2 + 152, &v123);
        if (a2 + 160 == v60)
        {
          uint64_t v122 = 0;
LABEL_177:
          flatbuffers::Parser::AddField();
        }
        uint64_t v61 = *(void *)(v60 + 56);
        uint64_t v122 = v61;
        if (!v61) {
          goto LABEL_177;
        }
        if ((std::string **)(v61 + 48) != &v131) {
          sub_20DC58CA8(v61 + 48, v131, v132, 0xAAAAAAAAAAAAAAABLL * (((char *)v132 - (char *)v131) >> 3));
        }
        if (v125 <= 0xFFFFFFFB && (v125 - 1) >= 0xC) {
          *(unsigned char *)(v61 + 217) = v18;
        }
        if (*(_DWORD *)(a1 + 20) != 91) {
          goto LABEL_250;
        }
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
        a5[1] = 1;
        if (!*a5)
        {
          std::string v64 = (std::string *)(v61 + 184);
          do
          {
            if (*(char *)(a1 + 55) < 0)
            {
              sub_20DC55634((uint64_t)__p, *(const void **)(a1 + 32), *(void *)(a1 + 40));
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)v10;
              v102[0] = *(void **)(a1 + 48);
            }
            flatbuffers::Parser::ParseProtoKey((flatbuffers::Parser *)a1, a5);
            int v35 = 1;
            a5[1] = 1;
            if (!*a5)
            {
              flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 61, (uint64_t)a5);
              a5[1] = 1;
              if (!*a5)
              {
                uint64_t v92 = v64;
                uint64_t v65 = v61;
                if (*(char *)(a1 + 55) < 0)
                {
                  sub_20DC55634((uint64_t)&__str, *(const void **)(a1 + 32), *(void *)(a1 + 40));
                }
                else
                {
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
                  __str.__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
                }
                flatbuffers::Parser::ParseProtoCurliesOrIdent((flatbuffers::Parser *)a1, a5);
                a5[1] = 1;
                if (!*a5)
                {
                  unint64_t v66 = HIBYTE(v102[0]);
                  if (SHIBYTE(v102[0]) >= 0) {
                    std::string::size_type v67 = (void *)(HIBYTE(v102[0]) & 0x7F);
                  }
                  else {
                    std::string::size_type v67 = __p[1];
                  }
                  if (v67 == (void *)10)
                  {
                    if ((HIBYTE(v102[0]) & 0x80) != 0)
                    {
                      uint64_t v71 = (void **)__p[0];
                      unint64_t v66 = (unint64_t)__p[1];
                    }
                    else
                    {
                      uint64_t v71 = __p;
                    }
                    if (v66 >= 0xA) {
                      size_t v72 = 10;
                    }
                    else {
                      size_t v72 = v66;
                    }
                    if (!memcmp(v71, "deprecated", v72) && v66 == 10)
                    {
                      std::string::size_type v73 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type size = *((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x7F;
                      }
                      else {
                        std::string::size_type size = __str.__r_.__value_.__l.__size_;
                      }
                      if (size == 4)
                      {
                        if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
                        {
                          std::string::size_type v73 = __str.__r_.__value_.__l.__size_;
                          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                        }
                        else
                        {
                          p_str = &__str;
                        }
                        if (v73 >= 4) {
                          size_t v76 = 4;
                        }
                        else {
                          size_t v76 = v73;
                        }
                        BOOL v77 = memcmp(p_str, "true", v76) == 0;
                        if (v73 != 4) {
                          BOOL v77 = 0;
                        }
                      }
                      else
                      {
                        BOOL v77 = 0;
                      }
                      *(unsigned char *)(v65 + 216) = v77;
                    }
                  }
                  else if (v67 == (void *)7)
                  {
                    if ((HIBYTE(v102[0]) & 0x80) != 0)
                    {
                      uint64_t v68 = (void **)__p[0];
                      unint64_t v66 = (unint64_t)__p[1];
                    }
                    else
                    {
                      uint64_t v68 = __p;
                    }
                    size_t v69 = v66 >= 7 ? 7 : v66;
                    if (!memcmp(v68, "default", v69)
                      && v66 == 7
                      && (v125 > 0xFFFFFFFB || (v125 - 1) <= 0xB))
                    {
                      uint64_t v70 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                          ? &__str
                          : (std::string *)__str.__r_.__value_.__r.__words[0];
                      if (strpbrk((char *)v70, "0123456789-+.") == (char *)v70) {
                        std::string::operator=(v92, &__str);
                      }
                    }
                  }
                  if (*(_DWORD *)(a1 + 20) == 44)
                  {
                    flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
                    a5[1] = 1;
                    int v35 = *a5;
                  }
                  else
                  {
                    int v35 = 6;
                  }
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                uint64_t v61 = v65;
                std::string v64 = v92;
              }
            }
            if (SHIBYTE(v102[0]) < 0) {
              operator delete(__p[0]);
            }
          }
          while (!v35);
          if (v35 == 6)
          {
            flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 93, (uint64_t)a5);
            int v35 = 1;
            a5[1] = 1;
            if (!*a5)
            {
LABEL_250:
              if (v130)
              {
                flatbuffers::Parser::ParseProtoFields(a1, v130, 0, v20);
                a5[1] = 1;
                if (*a5) {
                  goto LABEL_67;
                }
                if (*(_DWORD *)(a1 + 20) != 59) {
                  goto LABEL_263;
                }
                flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
              }
              else
              {
                if (v129)
                {
                  long long v103 = 0u;
                  long long v104 = 0u;
                  *(_OWORD *)std::string __p = 0u;
                  *(_OWORD *)unint64_t v102 = 0u;
                  memset(v107, 0, 41);
                  uint64_t v105 = 0;
                  unint64_t v106 = v107;
                  uint64_t v108 = 0;
                  unint64_t v109 = 0xFFFFFFFF00000000;
                  int v110 = 1;
                  v112[0] = 0;
                  v112[1] = 0;
                  uint64_t v111 = v112;
                  uint64_t v113 = 0;
                  unint64_t v114 = 0;
                  char v116 = 0;
                  uint64_t v115 = 0;
                  __int16 v117 = 257;
                  char v118 = 0;
                  uint64_t v119 = 1;
                  uint64_t v120 = 0;
                  uint64_t v121 = 0;
                  flatbuffers::Parser::ParseProtoFields(a1, __p, 0, v20);
                  char v78 = 0;
                  a5[1] = 1;
                  if (*a5) {
                    goto LABEL_258;
                  }
                  if (*(_DWORD *)(a1 + 20) == 59
                    && (flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5), a5[1] = 1, *a5))
                  {
LABEL_267:
                    char v78 = 0;
                  }
                  else
                  {
                    if (v113 != v114)
                    {
                      uint64_t v79 = *v113;
                      if (*(_DWORD *)(*v113 + 152) == 15)
                      {
                        uint64_t v80 = *(void *)(v79 + 160);
                        if (v80)
                        {
                          if (!*(unsigned char *)(v80 + 200))
                          {
                            __str.__r_.__value_.__r.__words[0] = a1;
                            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v129;
                            char v95 = 1;
                            int v96 = 0;
                            uint64_t v97 = -1;
                            sub_20DC45904((uint64_t)&__str);
                          }
                        }
                      }
                      std::operator+<char>();
                      uint64_t v81 = std::string::append(&v98, "' cannot be mapped to a union because member '");
                      std::string::size_type v82 = v81->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
                      v99.__r_.__value_.__r.__words[2] = v82;
                      v81->__r_.__value_.__l.__size_ = 0;
                      v81->__r_.__value_.__r.__words[2] = 0;
                      v81->__r_.__value_.__r.__words[0] = 0;
                      char v83 = *(unsigned char *)(v79 + 23);
                      BOOL v84 = v83 < 0;
                      if (v83 >= 0) {
                        uint64_t v85 = (const std::string::value_type *)v79;
                      }
                      else {
                        uint64_t v85 = *(const std::string::value_type **)v79;
                      }
                      std::string::size_type v86 = v83 & 0x7F;
                      if (v84) {
                        std::string::size_type v87 = *(void *)(v79 + 8);
                      }
                      else {
                        std::string::size_type v87 = v86;
                      }
                      v88 = std::string::append(&v99, v85, v87);
                      std::string::size_type v89 = v88->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
                      v100.__r_.__value_.__r.__words[2] = v89;
                      v88->__r_.__value_.__l.__size_ = 0;
                      v88->__r_.__value_.__r.__words[2] = 0;
                      v88->__r_.__value_.__r.__words[0] = 0;
                      int v90 = std::string::append(&v100, "' is not a table type.");
                      std::string::size_type v91 = v90->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
                      __str.__r_.__value_.__r.__words[2] = v91;
                      v90->__r_.__value_.__l.__size_ = 0;
                      v90->__r_.__value_.__r.__words[2] = 0;
                      v90->__r_.__value_.__r.__words[0] = 0;
                      flatbuffers::Parser::Error(a1, a5);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v100.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v99.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v98.__r_.__value_.__l.__data_);
                      }
                      goto LABEL_267;
                    }
                    char v78 = 1;
                  }
LABEL_258:
                  sub_20DC446D0(&v121, 0);
                  sub_20DC515A0((uint64_t)&v111);
                  sub_20DC507CC((uint64_t)&v106);
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
                  sub_20DC5847C((void ***)&__str);
                  if (SHIBYTE(v103) < 0) {
                    operator delete(v102[1]);
                  }
                  if (SHIBYTE(v102[0]) < 0) {
                    operator delete(__p[0]);
                  }
                  if ((v78 & 1) == 0)
                  {
                    int v35 = 1;
                    goto LABEL_67;
                  }
LABEL_263:
                  int v35 = 0;
                  goto LABEL_67;
                }
                flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 59, (uint64_t)a5);
              }
              a5[1] = 1;
              if (!*a5) {
                goto LABEL_263;
              }
            }
          }
        }
      }
    }
LABEL_67:
    if (SHIBYTE(v124) < 0) {
      operator delete((void *)v123);
    }
    __p[0] = &v131;
    sub_20DC5847C((void ***)__p);
    if (v35) {
      return;
    }
  }
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a5);
  a5[1] = 1;
  if (!*a5) {
    *(_WORD *)a5 = 0;
  }
}

void flatbuffers::Parser::ParseFlexBufferValue(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 20);
  if (v6 == 260)
  {
    unint64_t v7 = (void *)(a1 + 32);
    unint64_t v8 = *(unsigned __int8 *)(a1 + 55);
    unint64_t v9 = *(void *)(a1 + 40);
    if ((v8 & 0x80u) == 0) {
      unint64_t v10 = v8 & 0x7F;
    }
    else {
      unint64_t v10 = *(void *)(a1 + 40);
    }
    if (v10 == 5)
    {
      if ((v8 & 0x80) != 0) {
        unint64_t v7 = (void *)*v7;
      }
      else {
        unint64_t v9 = *(unsigned __int8 *)(a1 + 55);
      }
      if (v9 >= 5) {
        size_t v19 = 5;
      }
      else {
        size_t v19 = v9;
      }
      if (memcmp(v7, "false", v19) || v9 != 5) {
        goto LABEL_104;
      }
      size_t v17 = (char *)a2[4];
      unint64_t v21 = a2[5];
      if ((unint64_t)v17 >= v21)
      {
        size_t v32 = (char *)a2[3];
        uint64_t v33 = (v17 - v32) >> 4;
        unint64_t v34 = v33 + 1;
        if (!((unint64_t)(v33 + 1) >> 60))
        {
          uint64_t v35 = v21 - (void)v32;
          if (v35 >> 3 > v34) {
            unint64_t v34 = v35 >> 3;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            if (v36 >> 60) {
              goto LABEL_201;
            }
            size_t v37 = (char *)operator new(16 * v36);
          }
          else
          {
            size_t v37 = 0;
          }
          uint64_t v60 = &v37[16 * v33];
          uint64_t v61 = &v37[16 * v36];
          *(void *)uint64_t v60 = 0;
          *((void *)v60 + 1) = 26;
          char v18 = v60 + 16;
          if (v17 == v32) {
            goto LABEL_164;
          }
          do
          {
            *((_OWORD *)v60 - 1) = *((_OWORD *)v17 - 1);
            v60 -= 16;
            v17 -= 16;
          }
          while (v17 != v32);
          goto LABEL_163;
        }
        goto LABEL_200;
      }
      *(void *)size_t v17 = 0;
    }
    else
    {
      if (v10 != 4) {
        goto LABEL_104;
      }
      unint64_t v11 = *(unsigned __int8 *)(a1 + 55);
      unint64_t v12 = (void *)(a1 + 32);
      if ((v8 & 0x80) != 0)
      {
        unint64_t v12 = (void *)*v7;
        unint64_t v11 = *(void *)(a1 + 40);
      }
      if (v11 >= 4) {
        size_t v13 = 4;
      }
      else {
        size_t v13 = v11;
      }
      if (memcmp(v12, "true", v13) || v11 != 4)
      {
        if ((v8 & 0x80) != 0) {
          unint64_t v7 = (void *)*v7;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 >= 4) {
          size_t v15 = 4;
        }
        else {
          size_t v15 = v9;
        }
        if (!memcmp(v7, "null", v15) && v9 == 4)
        {
          size_t v17 = (char *)a2[4];
          unint64_t v16 = a2[5];
          if ((unint64_t)v17 < v16)
          {
            char v18 = v17 + 16;
            *(void *)size_t v17 = 0;
            *((void *)v17 + 1) = 0;
LABEL_166:
            a2[4] = (uint64_t)v18;
            flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
LABEL_167:
            *(unsigned char *)(a3 + 1) = 1;
            goto LABEL_168;
          }
          size_t v54 = (char *)a2[3];
          uint64_t v55 = (v17 - v54) >> 4;
          unint64_t v56 = v55 + 1;
          if (!((unint64_t)(v55 + 1) >> 60))
          {
            uint64_t v57 = v16 - (void)v54;
            if (v57 >> 3 > v56) {
              unint64_t v56 = v57 >> 3;
            }
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v56;
            }
            if (!v58)
            {
              size_t v59 = 0;
              goto LABEL_161;
            }
            if (!(v58 >> 60))
            {
              size_t v59 = (char *)operator new(16 * v58);
LABEL_161:
              uint64_t v60 = &v59[16 * v55];
              uint64_t v61 = &v59[16 * v58];
              char v18 = v60 + 16;
              *(void *)uint64_t v60 = 0;
              *((void *)v60 + 1) = 0;
              if (v17 == v54) {
                goto LABEL_164;
              }
              do
              {
                *((_OWORD *)v60 - 1) = *((_OWORD *)v17 - 1);
                v60 -= 16;
                v17 -= 16;
              }
              while (v17 != v54);
LABEL_163:
              size_t v17 = (char *)a2[3];
LABEL_164:
              a2[3] = (uint64_t)v60;
              a2[4] = (uint64_t)v18;
              a2[5] = (uint64_t)v61;
              if (v17) {
                operator delete(v17);
              }
              goto LABEL_166;
            }
LABEL_201:
            sub_20DC4F504();
          }
LABEL_200:
          abort();
        }
LABEL_104:
        flatbuffers::Parser::TokenError((flatbuffers::Parser *)a1, (_WORD *)a3);
        return;
      }
      size_t v17 = (char *)a2[4];
      unint64_t v31 = a2[5];
      if ((unint64_t)v17 >= v31)
      {
        char v48 = (char *)a2[3];
        uint64_t v49 = (v17 - v48) >> 4;
        unint64_t v50 = v49 + 1;
        if (!((unint64_t)(v49 + 1) >> 60))
        {
          uint64_t v51 = v31 - (void)v48;
          if (v51 >> 3 > v50) {
            unint64_t v50 = v51 >> 3;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            if (v52 >> 60) {
              goto LABEL_201;
            }
            std::string::size_type v53 = (char *)operator new(16 * v52);
          }
          else
          {
            std::string::size_type v53 = 0;
          }
          uint64_t v60 = &v53[16 * v49];
          uint64_t v61 = &v53[16 * v52];
          *(void *)uint64_t v60 = 1;
          *((void *)v60 + 1) = 26;
          char v18 = v60 + 16;
          if (v17 == v48) {
            goto LABEL_164;
          }
          do
          {
            *((_OWORD *)v60 - 1) = *((_OWORD *)v17 - 1);
            v60 -= 16;
            v17 -= 16;
          }
          while (v17 != v48);
          goto LABEL_163;
        }
        goto LABEL_200;
      }
      *(void *)size_t v17 = 1;
    }
    *((void *)v17 + 1) = 26;
    char v18 = v17 + 16;
    goto LABEL_166;
  }
  if (v6 > 256)
  {
    switch(v6)
    {
      case 257:
        char v62 = *(unsigned char *)(a1 + 55);
        int v63 = v62;
        if (v62 >= 0) {
          std::string v64 = (char *)(a1 + 32);
        }
        else {
          std::string v64 = *(char **)(a1 + 32);
        }
        unint64_t v65 = v62 & 0x7F;
        if (v63 >= 0) {
          unint64_t v66 = v65;
        }
        else {
          unint64_t v66 = *(void *)(a1 + 40);
        }
        sub_20DC77B94((uint64_t)a2, v64, v66);
        uint64_t v67 = a3;
        uint64_t v68 = (flatbuffers::Parser *)a1;
        int v69 = 257;
        break;
      case 258:
        uint64_t v70 = (char *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          uint64_t v70 = *(char **)v70;
        }
        v85.__r_.__value_.__r.__words[0] = 0;
        if (sub_20DC50648((flatbuffers::ClassicLocale *)&v85, v70, 10, 1)) {
          uint64_t v71 = v85.__r_.__value_.__r.__words[0];
        }
        else {
          uint64_t v71 = 0;
        }
        sub_20DC720E8((uint64_t)a2, v71);
        flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 258, a3);
        *(unsigned char *)(a3 + 1) = 1;
LABEL_168:
        if (!*(unsigned char *)a3) {
          goto LABEL_169;
        }
        return;
      case 259:
        unint64_t v22 = (const char *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          unint64_t v22 = *(const char **)v22;
        }
        v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        unint64_t v23 = (_xlocale *)flatbuffers::ClassicLocale::Get((flatbuffers::ClassicLocale *)a1);
        double v24 = strtod_l(v22, &v85.__r_.__value_.__l.__data_, v23);
        if (v85.__r_.__value_.__l.__data_ == v22 || (double v25 = v24, *v85.__r_.__value_.__l.__data_)) {
          double v25 = 0.0;
        }
        float v26 = v25;
        if (v25 == v26) {
          int v27 = 2;
        }
        else {
          int v27 = 3;
        }
        int v29 = (double *)a2[4];
        unint64_t v28 = a2[5];
        if ((unint64_t)v29 >= v28)
        {
          BOOL v77 = (double *)a2[3];
          uint64_t v78 = ((char *)v29 - (char *)v77) >> 4;
          unint64_t v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 60) {
            goto LABEL_200;
          }
          uint64_t v80 = v28 - (void)v77;
          if (v80 >> 3 > v79) {
            unint64_t v79 = v80 >> 3;
          }
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v79;
          }
          if (v81)
          {
            if (v81 >> 60) {
              goto LABEL_201;
            }
            std::string::size_type v82 = (char *)operator new(16 * v81);
          }
          else
          {
            std::string::size_type v82 = 0;
          }
          char v83 = &v82[16 * v78];
          *(double *)char v83 = v25;
          *((_DWORD *)v83 + 2) = 3;
          *((_DWORD *)v83 + 3) = v27;
          size_t v30 = (double *)(v83 + 16);
          if (v29 != v77)
          {
            do
            {
              *((_OWORD *)v83 - 1) = *((_OWORD *)v29 - 1);
              v83 -= 16;
              v29 -= 2;
            }
            while (v29 != v77);
            int v29 = (double *)a2[3];
          }
          a2[3] = (uint64_t)v83;
          a2[4] = (uint64_t)v30;
          a2[5] = (uint64_t)&v82[16 * v81];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          double *v29 = v25;
          size_t v30 = v29 + 2;
          *((_DWORD *)v29 + 2) = 3;
          *((_DWORD *)v29 + 3) = v27;
        }
        a2[4] = (uint64_t)v30;
        uint64_t v67 = a3;
        uint64_t v68 = (flatbuffers::Parser *)a1;
        int v69 = 259;
        break;
      default:
        goto LABEL_104;
    }
    flatbuffers::Parser::Expect(v68, v69, v67);
    goto LABEL_167;
  }
  if (v6 == 91)
  {
    uint64_t v73 = a2[3];
    uint64_t v72 = a2[4];
    flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 91, a3);
    *(unsigned char *)(a3 + 1) = 1;
    if (!*(unsigned char *)a3)
    {
      int v74 = 0;
      unint64_t v75 = (v72 - v73) >> 4;
      while (1)
      {
        BOOL v76 = !*(unsigned char *)(a1 + 729) || v74 == 0;
        if (v76 && *(_DWORD *)(a1 + 20) == 93) {
          break;
        }
        flatbuffers::Parser::ParseFlexBufferValue(a1, a2);
        *(unsigned char *)(a3 + 1) = 1;
        if (*(unsigned char *)a3) {
          goto LABEL_192;
        }
        if (*(_DWORD *)(a1 + 20) == 93) {
          break;
        }
        if (!*(unsigned char *)(a1 + 954))
        {
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, a3);
          *(unsigned char *)(a3 + 1) = 1;
          if (*(unsigned char *)a3) {
            goto LABEL_192;
          }
        }
        *(_WORD *)a3 = 256;
        --v74;
      }
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
      *(unsigned char *)(a3 + 1) = 1;
      if (!*(unsigned char *)a3)
      {
        sub_20DC72020(a2, v75);
        goto LABEL_169;
      }
    }
LABEL_192:
    *(unsigned char *)(a3 + 1) = 1;
    return;
  }
  if (v6 != 123) {
    goto LABEL_104;
  }
  uint64_t v39 = a2[3];
  uint64_t v38 = a2[4];
  flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 123, (uint64_t)&v84);
  HIBYTE(v84) = 1;
  if ((_BYTE)v84)
  {
LABEL_181:
    *(_WORD *)a3 = 257;
    return;
  }
  uint64_t v40 = 0;
  unint64_t v41 = (v38 - v39) >> 4;
  do
  {
    while (1)
    {
      if (*(unsigned char *)(a1 + 729)) {
        BOOL v42 = v40 == 0;
      }
      else {
        BOOL v42 = 1;
      }
      if (v42 && *(_DWORD *)(a1 + 20) == 125) {
        goto LABEL_180;
      }
      memset(&v85, 0, sizeof(v85));
      std::string::operator=(&v85, (const std::string *)(a1 + 32));
      if (*(_DWORD *)(a1 + 20) == 257)
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v84);
      }
      else
      {
        if (*(unsigned char *)(a1 + 729)) {
          int v45 = 257;
        }
        else {
          int v45 = 260;
        }
        flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, v45, (uint64_t)&v84);
      }
      int v43 = 1;
      HIBYTE(v84) = 1;
      if ((_BYTE)v84
        || (!*(unsigned char *)(a1 + 954) || (*(_DWORD *)(a1 + 20) | 0x20) != 0x7B)
        && (flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 58, (uint64_t)&v84), HIBYTE(v84) = 1, (_BYTE)v84))
      {
        int v44 = 1;
        goto LABEL_77;
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v46 = &v85;
      }
      else {
        std::string::size_type v46 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t size = *((unsigned char *)&v85.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        uint64_t size = v85.__r_.__value_.__l.__size_;
      }
      sub_20DC79B6C((uint64_t)a2, (char *)v46, size);
      flatbuffers::Parser::ParseFlexBufferValue(a1, a2);
      if (!(_BYTE)v84)
      {
        ++v40;
        __int16 v84 = 256;
        if (*(_DWORD *)(a1 + 20) == 125)
        {
          int v43 = 0;
          int v44 = 2;
          goto LABEL_77;
        }
        if (*(unsigned char *)(a1 + 954)
          || (flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, (uint64_t)&v84), !(_BYTE)v84))
        {
          int v43 = 0;
          LOBYTE(v84) = 0;
        }
      }
      HIBYTE(v84) = 1;
      int v44 = v43;
LABEL_77:
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v44) {
        goto LABEL_179;
      }
    }
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  while (!v44);
LABEL_179:
  if (v44 == 2)
  {
LABEL_180:
    flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v84);
    if ((_BYTE)v84) {
      goto LABEL_181;
    }
    *(unsigned char *)a3 = 0;
    goto LABEL_197;
  }
  *(unsigned char *)a3 = v43;
  *(unsigned char *)(a3 + 1) = 1;
  if (v43) {
    return;
  }
LABEL_197:
  sub_20DC71EF8(a2, v41);
LABEL_169:
  *(_WORD *)a3 = 0;
}

void flatbuffers::Parser::GetIncludedFilesRecursive(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0;
  int v4 = a3 + 1;
  a3[2] = 0;
  *a3 = a3 + 1;
  uint64_t v18 = (uint64_t)&v18;
  size_t v19 = &v18;
  uint64_t v20 = 0;
  char v5 = *(unsigned char *)(a2 + 23);
  int v6 = v5;
  uint64_t v7 = v5 & 0x7F;
  if (v6 < 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7)
  {
    sub_20DC48314(&v18, a2);
    if (v20)
    {
      uint64_t v9 = a1 + 656;
      do
      {
        if (*((char *)v19 + 39) < 0)
        {
          sub_20DC55634((uint64_t)__p, (const void *)v19[2], v19[3]);
        }
        else
        {
          *(_OWORD *)std::string __p = *((_OWORD *)v19 + 1);
          uint64_t v17 = v19[4];
        }
        sub_20DC48394((uint64_t)&v18);
        sub_20DC7A0D8((uint64_t)a3, (const void **)__p, (uint64_t)__p);
        unint64_t v21 = __p;
        unint64_t v10 = sub_20DC5BBEC(v9, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
        unint64_t v11 = (uint64_t *)v10[7];
        unint64_t v12 = v10 + 8;
        if (v11 != v10 + 8)
        {
          do
          {
            if (v4 == (void *)sub_20DC5BD28((uint64_t)a3, (uint64_t)(v11 + 4))) {
              sub_20DC48314(&v18, (uint64_t)(v11 + 4));
            }
            size_t v13 = (uint64_t *)v11[1];
            if (v13)
            {
              do
              {
                unint64_t v14 = v13;
                size_t v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                unint64_t v14 = (uint64_t *)v11[2];
                BOOL v15 = *v14 == (void)v11;
                unint64_t v11 = v14;
              }
              while (!v15);
            }
            unint64_t v11 = v14;
          }
          while (v14 != v12);
        }
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
      }
      while (v20);
    }
  }
  sub_20DC52E18((char *)&v18);
}

_OWORD *sub_20DC48314(uint64_t *a1, uint64_t a2)
{
  int v4 = operator new(0x28uLL);
  uint64_t result = v4 + 2;
  *int v4 = 0;
  v4[1] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_20DC55634((uint64_t)result, *(const void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *uint64_t result = *(_OWORD *)a2;
    v4[4] = *(void *)(a2 + 16);
  }
  uint64_t v6 = *a1;
  *int v4 = *a1;
  v4[1] = a1;
  *(void *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void sub_20DC48394(uint64_t a1)
{
  unint64_t v2 = *(char **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)v2;
  *(void *)(v3 + 8) = *((void *)v2 + 1);
  **((void **)v2 + 1) = v3;
  *(void *)(a1 + 16) = v1 - 1;
  if (v2[39] < 0) {
    operator delete(*((void **)v2 + 2));
  }

  operator delete(v2);
}

void flatbuffers::Parser::Serialize(flatbuffers::Parser *this)
{
  uint64_t v226 = (uint64_t (*)())((char *)this + 336);
  sub_20DC73708((uint64_t)this + 336);
  uint64_t v3 = (unsigned char *)*((void *)this + 19);
  unint64_t v2 = (unsigned char *)*((void *)this + 20);
  int64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    uint64_t v6 = 0;
    char v5 = 0;
  }
  else
  {
    if (v4 < 0) {
      goto LABEL_342;
    }
    char v5 = (char *)operator new(v2 - v3);
    memcpy(v5, v3, v4);
    uint64_t v6 = &v5[8 * (v4 >> 3)];
  }
  unint64_t v7 = (v6 - v5) >> 3;
  unint64_t v8 = 126 - 2 * __clz(v7);
  unint64_t v9 = v6 - v5;
  v227 = flatbuffers::compareName<flatbuffers::StructDef>;
  if (v6 == v5) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v8;
  }
  sub_20DC5BF30((uint64_t)v5, v6, (uint64_t (**)(void))&v227, v10, 1);
  if ((int)v7 < 1)
  {
    if (!v5) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      *(_DWORD *)(*(void *)&v5[8 * v11] + 140) = v11;
      ++v11;
    }
    while ((v9 >> 3) != v11);
  }
  operator delete(v5);
LABEL_14:
  size_t v13 = (unsigned char *)*((void *)this + 25);
  unint64_t v12 = (unsigned char *)*((void *)this + 26);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      BOOL v15 = (char *)operator new(v12 - v13);
      memcpy(v15, v13, v14);
      unint64_t v16 = &v15[8 * (v14 >> 3)];
      goto LABEL_18;
    }
LABEL_342:
    abort();
  }
  unint64_t v16 = 0;
  BOOL v15 = 0;
LABEL_18:
  unint64_t v17 = (v16 - v15) >> 3;
  unint64_t v18 = 126 - 2 * __clz(v17);
  unint64_t v19 = v16 - v15;
  v227 = flatbuffers::compareName<flatbuffers::EnumDef>;
  if (v16 == v15) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v18;
  }
  sub_20DC5C980((uint64_t)v15, v16, (uint64_t (**)(void))&v227, v20, 1);
  if ((int)v17 < 1)
  {
    if (!v15) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v21 = 0;
    do
    {
      *(_DWORD *)(*(void *)&v15[8 * v21] + 140) = v21;
      ++v21;
    }
    while ((v19 >> 3) != v21);
  }
  operator delete(v15);
LABEL_27:
  unint64_t v22 = (uint64_t *)*((void *)this + 19);
  if (v22 == *((uint64_t **)this + 20))
  {
    unint64_t v23 = 0;
    int v29 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    double v24 = 0;
    double v25 = 0;
    float v26 = 0;
    do
    {
      int v27 = flatbuffers::StructDef::Serialize(*v22, (uint64_t)v226, (uint64_t)this);
      int v28 = v27;
      if (v24 >= v25)
      {
        uint64_t v30 = (v24 - v26) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          goto LABEL_342;
        }
        if ((v25 - v26) >> 1 > v31) {
          unint64_t v31 = (v25 - v26) >> 1;
        }
        if ((unint64_t)(v25 - v26) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32)
        {
          if (v32 >> 62) {
LABEL_343:
          }
            sub_20DC4F504();
          uint64_t v33 = (char *)operator new(4 * v32);
        }
        else
        {
          uint64_t v33 = 0;
        }
        unint64_t v23 = &v33[4 * v30];
        *(_DWORD *)unint64_t v23 = v28;
        int v29 = v23 + 4;
        while (v24 != v26)
        {
          int v34 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v23 - 1) = v34;
          v23 -= 4;
        }
        double v25 = &v33[4 * v32];
        if (v26) {
          operator delete(v26);
        }
        float v26 = v23;
      }
      else
      {
        *(_DWORD *)double v24 = v27;
        int v29 = v24 + 4;
      }
      uint64_t v35 = *v22++;
      *(_DWORD *)(v35 + 136) = v28;
      double v24 = v29;
    }
    while (v22 != *((uint64_t **)this + 20));
  }
  unint64_t v36 = (uint64_t *)*((void *)this + 25);
  if (v36 == *((uint64_t **)this + 26))
  {
    size_t v37 = 0;
    int v43 = 0;
  }
  else
  {
    size_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    do
    {
      int v41 = flatbuffers::EnumDef::Serialize(*v36, (uint64_t)v226, (uint64_t)this);
      int v42 = v41;
      if (v38 >= v39)
      {
        uint64_t v44 = (v38 - v40) >> 2;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62) {
          goto LABEL_342;
        }
        if ((v39 - v40) >> 1 > v45) {
          unint64_t v45 = (v39 - v40) >> 1;
        }
        if ((unint64_t)(v39 - v40) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          if (v46 >> 62) {
            goto LABEL_343;
          }
          size_t v47 = (char *)operator new(4 * v46);
        }
        else
        {
          size_t v47 = 0;
        }
        size_t v37 = &v47[4 * v44];
        *(_DWORD *)size_t v37 = v42;
        int v43 = v37 + 4;
        while (v38 != v40)
        {
          int v48 = *((_DWORD *)v38 - 1);
          v38 -= 4;
          *((_DWORD *)v37 - 1) = v48;
          v37 -= 4;
        }
        uint64_t v39 = &v47[4 * v46];
        if (v40)
        {
          uint64_t v49 = v40;
          unint64_t v50 = v43;
          operator delete(v49);
          int v43 = v50;
        }
        uint64_t v40 = v37;
      }
      else
      {
        *(_DWORD *)uint64_t v38 = v41;
        int v43 = v38 + 4;
      }
      uint64_t v51 = *v36++;
      *(_DWORD *)(v51 + 136) = v42;
      uint64_t v38 = (char *)v43;
    }
    while (v36 != *((uint64_t **)this + 26));
  }
  uint64_t v220 = (char *)v43;
  unint64_t v52 = (uint64_t *)*((void *)this + 31);
  if (v52 == *((uint64_t **)this + 32))
  {
    std::string::size_type v53 = 0;
    size_t v59 = 0;
  }
  else
  {
    std::string::size_type v53 = 0;
    size_t v54 = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    do
    {
      int v57 = flatbuffers::ServiceDef::Serialize(*v52, (uint64_t)v226, (uint64_t)this);
      int v58 = v57;
      if (v54 >= v55)
      {
        uint64_t v60 = (v54 - v56) >> 2;
        unint64_t v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 62) {
          goto LABEL_342;
        }
        if ((v55 - v56) >> 1 > v61) {
          unint64_t v61 = (v55 - v56) >> 1;
        }
        if ((unint64_t)(v55 - v56) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v61;
        }
        if (v62)
        {
          if (v62 >> 62) {
            goto LABEL_343;
          }
          int v63 = (char *)operator new(4 * v62);
        }
        else
        {
          int v63 = 0;
        }
        std::string::size_type v53 = &v63[4 * v60];
        *(_DWORD *)std::string::size_type v53 = v58;
        size_t v59 = v53 + 4;
        while (v54 != v56)
        {
          int v64 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *((_DWORD *)v53 - 1) = v64;
          v53 -= 4;
        }
        uint64_t v55 = &v63[4 * v62];
        if (v56)
        {
          unint64_t v65 = v56;
          unint64_t v66 = v59;
          operator delete(v65);
          size_t v59 = v66;
        }
        unint64_t v56 = v53;
      }
      else
      {
        *(_DWORD *)size_t v54 = v57;
        size_t v59 = v54 + 4;
      }
      uint64_t v67 = *v52++;
      *(_DWORD *)(v67 + 136) = v58;
      size_t v54 = (char *)v59;
    }
    while (v52 != *((uint64_t **)this + 32));
  }
  __int16 v224 = (char *)v59;
  unint64_t v68 = (v29 - v23) >> 2;
  unint64_t v69 = 126 - 2 * __clz(v68);
  unint64_t v70 = v29 - v23;
  if (v29 == v23) {
    uint64_t v71 = &flatbuffers::data<flatbuffers::Offset<reflection::Object>,std::allocator<flatbuffers::Offset<reflection::Object>>>(std::vector<flatbuffers::Offset<reflection::Object>> &)::t;
  }
  else {
    uint64_t v71 = v23;
  }
  v227 = v226;
  if (v29 == v23) {
    uint64_t v72 = 0;
  }
  else {
    uint64_t v72 = v69;
  }
  sub_20DC561A4((uint64_t)v71, (_DWORD *)((char *)v71 + v70), (uint64_t)&v227, v72, 1);
  *((unsigned char *)this + 406) = 1;
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
  uint64_t v73 = *((void *)this + 48);
  unint64_t v74 = ((_BYTE)v73 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v73 - *((void *)this + 49) < v74)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v73 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((void *)this + 48) -= v74;
  }
  else
  {
    *((void *)this + 48) = v73 - v74;
    if (!v74) {
      goto LABEL_106;
    }
  }
  uint64_t v210 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v210++) = 0;
  while (v74 != v210);
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
LABEL_106:
  uint64_t v75 = *((void *)this + 48);
  unint64_t v76 = ((_BYTE)v75 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v75 - *((void *)this + 49) < v76)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v75 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((void *)this + 48) -= v76;
  }
  else
  {
    *((void *)this + 48) = v75 - v76;
    if (!v76) {
      goto LABEL_110;
    }
  }
  uint64_t v77 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v77++) = 0;
  while (v76 != v77);
LABEL_110:
  if (v23 != v29)
  {
    do
    {
      int v78 = v71[--v68];
      if (*((void *)this + 51) <= 3uLL) {
        *((void *)this + 51) = 4;
      }
      uint64_t v79 = *((void *)this + 46);
      uint64_t v80 = *((void *)this + 47);
      uint64_t v81 = *((void *)this + 48);
      unint64_t v82 = ((int)v81 - ((int)v79 + (int)v80)) & 3;
      if (v81 - *((void *)this + 49) < v82)
      {
        sub_20DC4F8B0((uint64_t *)v226, ((int)v81 - ((int)v79 + (int)v80)) & 3);
        *((void *)this + 48) -= v82;
      }
      else
      {
        uint64_t v83 = v81 - v82;
        *((void *)this + 48) = v83;
        if (!v82)
        {
          int v84 = v79 + v80 - v83;
          goto LABEL_121;
        }
      }
      uint64_t v85 = 0;
      do
        *(unsigned char *)(*((void *)this + 48) + v85++) = 0;
      while (v82 != v85);
      uint64_t v80 = *((void *)this + 47);
      uint64_t v83 = *((void *)this + 48);
      uint64_t v79 = *((void *)this + 46);
      int v84 = v79 - v83 + v80;
      if (*((void *)this + 51) <= 3uLL) {
        *((void *)this + 51) = 4;
      }
LABEL_121:
      unint64_t v86 = ((_BYTE)v83 - ((_BYTE)v79 + (_BYTE)v80)) & 3;
      uint64_t v87 = *((void *)this + 49);
      if (v83 - v87 < v86)
      {
        sub_20DC4F8B0((uint64_t *)v226, v86);
        *((void *)this + 48) -= v86;
LABEL_123:
        uint64_t v89 = 0;
        do
          *(unsigned char *)(*((void *)this + 48) + v89++) = 0;
        while (v86 != v89);
        uint64_t v88 = *((void *)this + 48);
        uint64_t v87 = *((void *)this + 49);
        goto LABEL_126;
      }
      uint64_t v88 = v83 - v86;
      *((void *)this + 48) = v83 - v86;
      if (v86) {
        goto LABEL_123;
      }
LABEL_126:
      if ((unint64_t)(v88 - v87) <= 3)
      {
        sub_20DC4F8B0((uint64_t *)v226, 4uLL);
        uint64_t v88 = *((void *)this + 48);
      }
      *(_DWORD *)(v88 - 4) = v84 - v78 + 4;
      *((void *)this + 48) = v88 - 4;
    }
    while (v68);
  }
  *((unsigned char *)this + 406) = 0;
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
  uint64_t v91 = *((void *)this + 48);
  uint64_t v90 = *((void *)this + 49);
  unint64_t v92 = ((_BYTE)v91 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v91 - v90 < v92)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v91 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((void *)this + 48) -= v92;
  }
  else
  {
    uint64_t v93 = v91 - v92;
    *((void *)this + 48) = v91 - v92;
    if (!v92) {
      goto LABEL_138;
    }
  }
  uint64_t v94 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v94++) = 0;
  while (v92 != v94);
  uint64_t v93 = *((void *)this + 48);
  uint64_t v90 = *((void *)this + 49);
LABEL_138:
  if ((unint64_t)(v93 - v90) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)v226, 4uLL);
    uint64_t v93 = *((void *)this + 48);
  }
  unint64_t v95 = (v220 - v37) >> 2;
  unint64_t v96 = 126 - 2 * __clz(v95);
  *(_DWORD *)(v93 - 4) = v70 >> 2;
  int v219 = v93 - 4;
  *((void *)this + 48) = v93 - 4;
  int v217 = *((_DWORD *)this + 92);
  int v218 = *((_DWORD *)this + 94);
  if (v220 == v37) {
    uint64_t v97 = &flatbuffers::data<flatbuffers::Offset<reflection::Enum>,std::allocator<flatbuffers::Offset<reflection::Enum>>>(std::vector<flatbuffers::Offset<reflection::Enum>> &)::t;
  }
  else {
    uint64_t v97 = v37;
  }
  if (v220 == v37) {
    uint64_t v98 = 0;
  }
  else {
    uint64_t v98 = v96;
  }
  v227 = v226;
  sub_20DC56C78((uint64_t)v97, (_DWORD *)((char *)v97 + v220 - v37), (uint64_t)&v227, v98, 1);
  *((unsigned char *)this + 406) = 1;
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
  uint64_t v99 = *((void *)this + 48);
  unint64_t v100 = ((_BYTE)v99 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v99 - *((void *)this + 49) < v100)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v99 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((void *)this + 48) -= v100;
  }
  else
  {
    *((void *)this + 48) = v99 - v100;
    if (!v100) {
      goto LABEL_150;
    }
  }
  uint64_t v211 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v211++) = 0;
  while (v100 != v211);
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
LABEL_150:
  uint64_t v101 = *((void *)this + 48);
  unint64_t v102 = ((_BYTE)v101 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v101 - *((void *)this + 49) < v102)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v101 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((void *)this + 48) -= v102;
  }
  else
  {
    *((void *)this + 48) = v101 - v102;
    if (!v102) {
      goto LABEL_154;
    }
  }
  uint64_t v103 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v103++) = 0;
  while (v102 != v103);
LABEL_154:
  if (v37 != v220)
  {
    do
    {
      int v104 = v97[--v95];
      if (*((void *)this + 51) <= 3uLL) {
        *((void *)this + 51) = 4;
      }
      uint64_t v105 = *((void *)this + 46);
      uint64_t v106 = *((void *)this + 47);
      uint64_t v107 = *((void *)this + 48);
      unint64_t v108 = ((int)v107 - ((int)v105 + (int)v106)) & 3;
      if (v107 - *((void *)this + 49) < v108)
      {
        sub_20DC4F8B0((uint64_t *)v226, ((int)v107 - ((int)v105 + (int)v106)) & 3);
        *((void *)this + 48) -= v108;
      }
      else
      {
        uint64_t v109 = v107 - v108;
        *((void *)this + 48) = v109;
        if (!v108)
        {
          int v110 = v105 + v106 - v109;
          goto LABEL_165;
        }
      }
      uint64_t v111 = 0;
      do
        *(unsigned char *)(*((void *)this + 48) + v111++) = 0;
      while (v108 != v111);
      uint64_t v106 = *((void *)this + 47);
      uint64_t v109 = *((void *)this + 48);
      uint64_t v105 = *((void *)this + 46);
      int v110 = v105 - v109 + v106;
      if (*((void *)this + 51) <= 3uLL) {
        *((void *)this + 51) = 4;
      }
LABEL_165:
      unint64_t v112 = ((_BYTE)v109 - ((_BYTE)v105 + (_BYTE)v106)) & 3;
      uint64_t v113 = *((void *)this + 49);
      if (v109 - v113 < v112)
      {
        sub_20DC4F8B0((uint64_t *)v226, v112);
        *((void *)this + 48) -= v112;
LABEL_167:
        uint64_t v115 = 0;
        do
          *(unsigned char *)(*((void *)this + 48) + v115++) = 0;
        while (v112 != v115);
        uint64_t v114 = *((void *)this + 48);
        uint64_t v113 = *((void *)this + 49);
        goto LABEL_170;
      }
      uint64_t v114 = v109 - v112;
      *((void *)this + 48) = v109 - v112;
      if (v112) {
        goto LABEL_167;
      }
LABEL_170:
      if ((unint64_t)(v114 - v113) <= 3)
      {
        sub_20DC4F8B0((uint64_t *)v226, 4uLL);
        uint64_t v114 = *((void *)this + 48);
      }
      *(_DWORD *)(v114 - 4) = v110 - v104 + 4;
      *((void *)this + 48) = v114 - 4;
    }
    while (v95);
  }
  *((unsigned char *)this + 406) = 0;
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
  uint64_t v117 = *((void *)this + 48);
  uint64_t v116 = *((void *)this + 49);
  unint64_t v118 = ((_BYTE)v117 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v117 - v116 < v118)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v117 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((void *)this + 48) -= v118;
    uint64_t v120 = v224;
  }
  else
  {
    uint64_t v119 = v117 - v118;
    *((void *)this + 48) = v117 - v118;
    uint64_t v120 = v224;
    if (!v118) {
      goto LABEL_182;
    }
  }
  uint64_t v121 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v121++) = 0;
  while (v118 != v121);
  uint64_t v119 = *((void *)this + 48);
  uint64_t v116 = *((void *)this + 49);
LABEL_182:
  if ((unint64_t)(v119 - v116) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)v226, 4uLL);
    uint64_t v120 = v224;
    uint64_t v119 = *((void *)this + 48);
  }
  unint64_t v122 = (v120 - v53) >> 2;
  unint64_t v123 = 126 - 2 * __clz(v122);
  int64_t v124 = v120 - v53;
  *(_DWORD *)(v119 - 4) = (unint64_t)(v220 - v37) >> 2;
  uint64_t v125 = v119 - 4;
  *((void *)this + 48) = v125;
  int v213 = *((_DWORD *)this + 92);
  int v215 = *((_DWORD *)this + 94);
  if (v120 == v53) {
    uint64_t v126 = &flatbuffers::data<flatbuffers::Offset<reflection::Service>,std::allocator<flatbuffers::Offset<reflection::Service>>>(std::vector<flatbuffers::Offset<reflection::Service>> &)::t;
  }
  else {
    uint64_t v126 = v53;
  }
  if (v120 == v53) {
    uint64_t v127 = 0;
  }
  else {
    uint64_t v127 = v123;
  }
  char v128 = *((unsigned char *)this + 607);
  int v129 = v128;
  if (v128 >= 0) {
    uint64_t v130 = (char *)this + 584;
  }
  else {
    uint64_t v130 = (char *)*((void *)this + 73);
  }
  size_t v131 = v128 & 0x7F;
  if (v129 >= 0) {
    size_t v132 = v131;
  }
  else {
    size_t v132 = *((void *)this + 74);
  }
  int v216 = sub_20DC4F638((uint64_t)v226, v130, v132);
  char v133 = *((unsigned char *)this + 631);
  int v134 = v133;
  if (v133 >= 0) {
    uint64_t v135 = (char *)this + 608;
  }
  else {
    uint64_t v135 = (char *)*((void *)this + 76);
  }
  size_t v136 = v133 & 0x7F;
  if (v134 >= 0) {
    size_t v137 = v136;
  }
  else {
    size_t v137 = *((void *)this + 77);
  }
  int v214 = sub_20DC4F638((uint64_t)v226, v135, v137);
  unint64_t v221 = v124;
  v227 = v226;
  sub_20DC5774C((uint64_t)v126, (_DWORD *)((char *)v126 + v124), (uint64_t)&v227, v127, 1);
  *((unsigned char *)this + 406) = 1;
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
  uint64_t v138 = *((void *)this + 48);
  unint64_t v139 = ((_BYTE)v138 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v138 - *((void *)this + 49) < v139)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v138 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((void *)this + 48) -= v139;
  }
  else
  {
    *((void *)this + 48) = v138 - v139;
    if (!v139) {
      goto LABEL_206;
    }
  }
  uint64_t v212 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v212++) = 0;
  while (v139 != v212);
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
LABEL_206:
  uint64_t v140 = *((void *)this + 48);
  unint64_t v141 = ((_BYTE)v140 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v140 - *((void *)this + 49) < v141)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v140 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((void *)this + 48) -= v141;
  }
  else
  {
    *((void *)this + 48) = v140 - v141;
    if (!v141) {
      goto LABEL_210;
    }
  }
  uint64_t v142 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v142++) = 0;
  while (v141 != v142);
LABEL_210:
  if (v53 != v224)
  {
    do
    {
      int v143 = v126[--v122];
      if (*((void *)this + 51) <= 3uLL) {
        *((void *)this + 51) = 4;
      }
      uint64_t v144 = *((void *)this + 46);
      uint64_t v145 = *((void *)this + 47);
      uint64_t v146 = *((void *)this + 48);
      unint64_t v147 = ((int)v146 - ((int)v144 + (int)v145)) & 3;
      if (v146 - *((void *)this + 49) < v147)
      {
        sub_20DC4F8B0((uint64_t *)v226, ((int)v146 - ((int)v144 + (int)v145)) & 3);
        *((void *)this + 48) -= v147;
      }
      else
      {
        uint64_t v148 = v146 - v147;
        *((void *)this + 48) = v148;
        if (!v147)
        {
          int v149 = v144 + v145 - v148;
          goto LABEL_221;
        }
      }
      uint64_t v150 = 0;
      do
        *(unsigned char *)(*((void *)this + 48) + v150++) = 0;
      while (v147 != v150);
      uint64_t v145 = *((void *)this + 47);
      uint64_t v148 = *((void *)this + 48);
      uint64_t v144 = *((void *)this + 46);
      int v149 = v144 - v148 + v145;
      if (*((void *)this + 51) <= 3uLL) {
        *((void *)this + 51) = 4;
      }
LABEL_221:
      unint64_t v151 = ((_BYTE)v148 - ((_BYTE)v144 + (_BYTE)v145)) & 3;
      uint64_t v152 = *((void *)this + 49);
      if (v148 - v152 < v151)
      {
        sub_20DC4F8B0((uint64_t *)v226, v151);
        *((void *)this + 48) -= v151;
LABEL_223:
        uint64_t v154 = 0;
        do
          *(unsigned char *)(*((void *)this + 48) + v154++) = 0;
        while (v151 != v154);
        uint64_t v153 = *((void *)this + 48);
        uint64_t v152 = *((void *)this + 49);
        goto LABEL_226;
      }
      uint64_t v153 = v148 - v151;
      *((void *)this + 48) = v148 - v151;
      if (v151) {
        goto LABEL_223;
      }
LABEL_226:
      if ((unint64_t)(v153 - v152) <= 3)
      {
        sub_20DC4F8B0((uint64_t *)v226, 4uLL);
        uint64_t v153 = *((void *)this + 48);
      }
      *(_DWORD *)(v153 - 4) = v149 - v143 + 4;
      *((void *)this + 48) = v153 - 4;
    }
    while (v122);
  }
  *((unsigned char *)this + 406) = 0;
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
  uint64_t v156 = *((void *)this + 48);
  uint64_t v155 = *((void *)this + 49);
  unint64_t v157 = ((_BYTE)v156 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3;
  if (v156 - v155 < v157)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v156 - (*((_DWORD *)this + 92) + *((_DWORD *)this + 94))) & 3);
    *((void *)this + 48) -= v157;
  }
  else
  {
    uint64_t v158 = v156 - v157;
    *((void *)this + 48) = v156 - v157;
    if (!v157) {
      goto LABEL_238;
    }
  }
  uint64_t v159 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v159++) = 0;
  while (v157 != v159);
  uint64_t v158 = *((void *)this + 48);
  uint64_t v155 = *((void *)this + 49);
LABEL_238:
  if ((unint64_t)(v158 - v155) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)v226, 4uLL);
    uint64_t v158 = *((void *)this + 48);
  }
  int v160 = v213 - v125 + v215;
  *(_DWORD *)(v158 - 4) = v221 >> 2;
  uint64_t v161 = v158 - 4;
  *((void *)this + 48) = v161;
  uint64_t v162 = *((void *)this + 46);
  uint64_t v163 = *((void *)this + 47);
  int v164 = v162 - v161 + v163;
  uint64_t v165 = *((void *)this + 72);
  if (v165) {
    int v166 = *(_DWORD *)(v165 + 136);
  }
  else {
    int v166 = 0;
  }
  int v225 = v217 - v219 + v218;
  *((unsigned char *)this + 406) = 1;
  if (v164)
  {
    if (*((void *)this + 51) <= 3uLL) {
      *((void *)this + 51) = 4;
    }
    unint64_t v167 = ((_BYTE)v161 - ((_BYTE)v162 + (_BYTE)v163)) & 3;
    if (v161 - *((void *)this + 49) < v167)
    {
      unint64_t v222 = ((_BYTE)v161 - ((_BYTE)v162 + (_BYTE)v163)) & 3;
      sub_20DC4F8B0((uint64_t *)v226, v222);
      unint64_t v167 = v222;
      *((void *)this + 48) -= v222;
    }
    else
    {
      uint64_t v168 = v161 - v167;
      *((void *)this + 48) = v168;
      if (!v167) {
        goto LABEL_251;
      }
    }
    uint64_t v169 = 0;
    do
      *(unsigned char *)(*((void *)this + 48) + v169++) = 0;
    while (v167 != v169);
    uint64_t v163 = *((void *)this + 47);
    uint64_t v168 = *((void *)this + 48);
    uint64_t v162 = *((void *)this + 46);
LABEL_251:
    int v170 = v163 - v168 + v162 - v164;
    int v171 = v170 + 4;
    if (v170 == -4 && !*((unsigned char *)this + 416)) {
      goto LABEL_267;
    }
    if (*((void *)this + 51) <= 3uLL) {
      *((void *)this + 51) = 4;
    }
    unint64_t v172 = ((_BYTE)v168 - ((_BYTE)v162 + (_BYTE)v163)) & 3;
    uint64_t v173 = (uint64_t *)*((void *)this + 49);
    if (v168 - (uint64_t)v173 < v172)
    {
      unint64_t v223 = v172;
      sub_20DC4F8B0((uint64_t *)v226, v172);
      unint64_t v172 = v223;
      *((void *)this + 48) -= v223;
    }
    else
    {
      uint64_t v174 = v168 - v172;
      *((void *)this + 48) = v168 - v172;
      if (!v172)
      {
LABEL_260:
        if ((unint64_t)(v174 - (void)v173) <= 3)
        {
          sub_20DC4F8B0((uint64_t *)v226, 4uLL);
          uint64_t v174 = *((void *)this + 48);
          uint64_t v173 = (uint64_t *)*((void *)this + 49);
        }
        *(_DWORD *)(v174 - 4) = v171;
        uint64_t v176 = v174 - 4;
        *((void *)this + 48) = v176;
        uint64_t v177 = *((void *)this + 46) - v176 + *((void *)this + 47);
        if ((unint64_t)(v176 - (void)v173) <= 7)
        {
          sub_20DC4F8B0((uint64_t *)v226, 8uLL);
          uint64_t v173 = (uint64_t *)*((void *)this + 49);
        }
        *uint64_t v173 = v177 | 0xE00000000;
        *((void *)this + 49) += 8;
        ++*((_DWORD *)this + 100);
        unsigned int v178 = *((unsigned __int16 *)this + 202);
        if (v178 <= 0xE) {
          LOWORD(v178) = 14;
        }
        *((_WORD *)this + 202) = v178;
        goto LABEL_267;
      }
    }
    uint64_t v175 = 0;
    do
      *(unsigned char *)(*((void *)this + 48) + v175++) = 0;
    while (v172 != v175);
    uint64_t v174 = *((void *)this + 48);
    uint64_t v173 = (uint64_t *)*((void *)this + 49);
    goto LABEL_260;
  }
LABEL_267:
  sub_20DC52E9C((uint64_t *)v226, 12, v166);
  sub_20DC43774((uint64_t *)v226, 10, v214);
  sub_20DC43774((uint64_t *)v226, 8, v216);
  if (!v160) {
    goto LABEL_291;
  }
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
  uint64_t v179 = *((void *)this + 46);
  uint64_t v180 = *((void *)this + 47);
  uint64_t v181 = *((void *)this + 48);
  unint64_t v182 = ((_BYTE)v181 - ((_BYTE)v179 + (_BYTE)v180)) & 3;
  if (v181 - *((void *)this + 49) < v182)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v181 - ((_BYTE)v179 + (_BYTE)v180)) & 3);
    *((void *)this + 48) -= v182;
  }
  else
  {
    uint64_t v183 = v181 - v182;
    *((void *)this + 48) = v183;
    if (!v182) {
      goto LABEL_275;
    }
  }
  uint64_t v184 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v184++) = 0;
  while (v182 != v184);
  uint64_t v180 = *((void *)this + 47);
  uint64_t v183 = *((void *)this + 48);
  uint64_t v179 = *((void *)this + 46);
LABEL_275:
  int v185 = v180 - v183 + v179 - v160;
  int v186 = v185 + 4;
  if (v185 == -4 && !*((unsigned char *)this + 416)) {
    goto LABEL_291;
  }
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
  unint64_t v187 = ((_BYTE)v183 - ((_BYTE)v179 + (_BYTE)v180)) & 3;
  uint64_t v188 = (uint64_t *)*((void *)this + 49);
  if (v183 - (uint64_t)v188 < v187)
  {
    sub_20DC4F8B0((uint64_t *)v226, v187);
    *((void *)this + 48) -= v187;
LABEL_281:
    uint64_t v190 = 0;
    do
      *(unsigned char *)(*((void *)this + 48) + v190++) = 0;
    while (v187 != v190);
    uint64_t v189 = *((void *)this + 48);
    uint64_t v188 = (uint64_t *)*((void *)this + 49);
    goto LABEL_284;
  }
  uint64_t v189 = v183 - v187;
  *((void *)this + 48) = v183 - v187;
  if (v187) {
    goto LABEL_281;
  }
LABEL_284:
  if ((unint64_t)(v189 - (void)v188) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)v226, 4uLL);
    uint64_t v189 = *((void *)this + 48);
    uint64_t v188 = (uint64_t *)*((void *)this + 49);
  }
  *(_DWORD *)(v189 - 4) = v186;
  uint64_t v191 = v189 - 4;
  *((void *)this + 48) = v191;
  uint64_t v192 = *((void *)this + 46) - v191 + *((void *)this + 47);
  if ((unint64_t)(v191 - (void)v188) <= 7)
  {
    sub_20DC4F8B0((uint64_t *)v226, 8uLL);
    uint64_t v188 = (uint64_t *)*((void *)this + 49);
  }
  *uint64_t v188 = v192 | 0x600000000;
  *((void *)this + 49) += 8;
  ++*((_DWORD *)this + 100);
  unsigned int v193 = *((unsigned __int16 *)this + 202);
  if (v193 <= 6) {
    LOWORD(v193) = 6;
  }
  *((_WORD *)this + 202) = v193;
LABEL_291:
  if (!v225) {
    goto LABEL_315;
  }
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
  uint64_t v194 = *((void *)this + 46);
  uint64_t v195 = *((void *)this + 47);
  uint64_t v196 = *((void *)this + 48);
  unint64_t v197 = ((_BYTE)v196 - ((_BYTE)v194 + (_BYTE)v195)) & 3;
  if (v196 - *((void *)this + 49) < v197)
  {
    sub_20DC4F8B0((uint64_t *)v226, ((_BYTE)v196 - ((_BYTE)v194 + (_BYTE)v195)) & 3);
    *((void *)this + 48) -= v197;
  }
  else
  {
    uint64_t v198 = v196 - v197;
    *((void *)this + 48) = v198;
    if (!v197) {
      goto LABEL_299;
    }
  }
  uint64_t v199 = 0;
  do
    *(unsigned char *)(*((void *)this + 48) + v199++) = 0;
  while (v197 != v199);
  uint64_t v195 = *((void *)this + 47);
  uint64_t v198 = *((void *)this + 48);
  uint64_t v194 = *((void *)this + 46);
LABEL_299:
  int v200 = v195 - v198 + v194 - v225;
  int v201 = v200 + 4;
  if (v200 == -4 && !*((unsigned char *)this + 416)) {
    goto LABEL_315;
  }
  if (*((void *)this + 51) <= 3uLL) {
    *((void *)this + 51) = 4;
  }
  unint64_t v202 = ((_BYTE)v198 - ((_BYTE)v194 + (_BYTE)v195)) & 3;
  uint64_t v203 = (uint64_t *)*((void *)this + 49);
  if (v198 - (uint64_t)v203 < v202)
  {
    sub_20DC4F8B0((uint64_t *)v226, v202);
    *((void *)this + 48) -= v202;
LABEL_305:
    uint64_t v205 = 0;
    do
      *(unsigned char *)(*((void *)this + 48) + v205++) = 0;
    while (v202 != v205);
    uint64_t v204 = *((void *)this + 48);
    uint64_t v203 = (uint64_t *)*((void *)this + 49);
    goto LABEL_308;
  }
  uint64_t v204 = v198 - v202;
  *((void *)this + 48) = v198 - v202;
  if (v202) {
    goto LABEL_305;
  }
LABEL_308:
  if ((unint64_t)(v204 - (void)v203) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)v226, 4uLL);
    uint64_t v204 = *((void *)this + 48);
    uint64_t v203 = (uint64_t *)*((void *)this + 49);
  }
  *(_DWORD *)(v204 - 4) = v201;
  uint64_t v206 = v204 - 4;
  *((void *)this + 48) = v206;
  uint64_t v207 = *((void *)this + 46) - v206 + *((void *)this + 47);
  if ((unint64_t)(v206 - (void)v203) <= 7)
  {
    sub_20DC4F8B0((uint64_t *)v226, 8uLL);
    uint64_t v203 = (uint64_t *)*((void *)this + 49);
  }
  *uint64_t v203 = v207 | 0x400000000;
  *((void *)this + 49) += 8;
  ++*((_DWORD *)this + 100);
  unsigned int v208 = *((unsigned __int16 *)this + 202);
  if (v208 <= 4) {
    LOWORD(v208) = 4;
  }
  *((_WORD *)this + 202) = v208;
LABEL_315:
  int v209 = sub_20DC43968((uint64_t)v226, v164);
  sub_20DC58220((uint64_t)v226, v209, "BFBS", *((unsigned __int8 *)this + 955));
  if (v53) {
    operator delete(v53);
  }
  if (v37) {
    operator delete(v37);
  }
  if (v23)
  {
    operator delete(v23);
  }
}

uint64_t flatbuffers::StructDef::Serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void ****)(a1 + 176);
  if (v6 == *(void ****)(a1 + 184))
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      int v12 = flatbuffers::FieldDef::Serialize(*v6, a2, (unsigned __int16)((v6 - *(_DWORD *)(a1 + 176)) >> 3), a3);
      int v13 = v12;
      if (v9 >= v10)
      {
        uint64_t v14 = (v9 - v11) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          abort();
        }
        if ((v10 - v11) >> 1 > v15) {
          unint64_t v15 = (v10 - v11) >> 1;
        }
        if ((unint64_t)(v10 - v11) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          if (v16 >> 62) {
            sub_20DC4F504();
          }
          unint64_t v17 = (char *)operator new(4 * v16);
        }
        else
        {
          unint64_t v17 = 0;
        }
        unint64_t v7 = &v17[4 * v14];
        *(_DWORD *)unint64_t v7 = v13;
        unint64_t v8 = v7 + 4;
        while (v9 != v11)
        {
          int v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v7 - 1) = v18;
          v7 -= 4;
        }
        uint64_t v10 = &v17[4 * v16];
        if (v11) {
          operator delete(v11);
        }
        uint64_t v11 = v7;
      }
      else
      {
        *(_DWORD *)unint64_t v9 = v12;
        unint64_t v8 = v9 + 4;
      }
      ++v6;
      unint64_t v9 = v8;
    }
    while (v6 != *(void ****)(a1 + 184));
  }
  unint64_t v19 = (v8 - v7) >> 2;
  unint64_t v20 = 126 - 2 * __clz(v19);
  if (v8 == v7) {
    uint64_t v21 = &flatbuffers::data<flatbuffers::Offset<reflection::Field>,std::allocator<flatbuffers::Offset<reflection::Field>>>(std::vector<flatbuffers::Offset<reflection::Field>> &)::t;
  }
  else {
    uint64_t v21 = v7;
  }
  if (v8 == v7) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v20;
  }
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 128), a1, 0x3E8uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  int v88 = sub_20DC4F638(a2, p_p, size);
  unint64_t v86 = v8 - v7;
  uint64_t v90 = a2;
  sub_20DC556D0((uint64_t)v21, (_DWORD *)((char *)v21 + v8 - v7), (uint64_t)&v90, v22, 1);
  *(unsigned char *)(a2 + 70) = 1;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v25 = *(void *)(a2 + 48);
  unint64_t v26 = ((_BYTE)v25 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v25 - *(void *)(a2 + 56) < v26)
  {
    sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v25 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v26;
  }
  else
  {
    *(void *)(a2 + 48) = v25 - v26;
    if (!v26) {
      goto LABEL_39;
    }
  }
  uint64_t v85 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v85++) = 0;
  while (v26 != v85);
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
LABEL_39:
  uint64_t v27 = *(void *)(a2 + 48);
  unint64_t v28 = ((_BYTE)v27 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v27 - *(void *)(a2 + 56) < v28)
  {
    sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v27 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v28;
  }
  else
  {
    *(void *)(a2 + 48) = v27 - v28;
    if (!v28) {
      goto LABEL_43;
    }
  }
  uint64_t v29 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v29++) = 0;
  while (v28 != v29);
LABEL_43:
  if (v7 != v8)
  {
    do
    {
      int v40 = v21[--v19];
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v41 = *(void *)(a2 + 32);
      uint64_t v42 = *(void *)(a2 + 40);
      uint64_t v43 = *(void *)(a2 + 48);
      unint64_t v44 = ((int)v43 - ((int)v41 + (int)v42)) & 3;
      if (v43 - *(void *)(a2 + 56) < v44)
      {
        sub_20DC4F8B0((uint64_t *)a2, ((int)v43 - ((int)v41 + (int)v42)) & 3);
        *(void *)(a2 + 48) -= v44;
      }
      else
      {
        uint64_t v45 = v43 - v44;
        *(void *)(a2 + 48) = v45;
        if (!v44)
        {
          int v46 = v41 + v42 - v45;
          goto LABEL_65;
        }
      }
      uint64_t v47 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v47++) = 0;
      while (v44 != v47);
      uint64_t v42 = *(void *)(a2 + 40);
      uint64_t v45 = *(void *)(a2 + 48);
      uint64_t v41 = *(void *)(a2 + 32);
      int v46 = v41 - v45 + v42;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
LABEL_65:
      unint64_t v48 = ((_BYTE)v45 - ((_BYTE)v41 + (_BYTE)v42)) & 3;
      uint64_t v49 = *(void *)(a2 + 56);
      if (v45 - v49 < v48)
      {
        sub_20DC4F8B0((uint64_t *)a2, v48);
        *(void *)(a2 + 48) -= v48;
LABEL_67:
        uint64_t v51 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v51++) = 0;
        while (v48 != v51);
        uint64_t v50 = *(void *)(a2 + 48);
        uint64_t v49 = *(void *)(a2 + 56);
        goto LABEL_70;
      }
      uint64_t v50 = v45 - v48;
      *(void *)(a2 + 48) = v45 - v48;
      if (v48) {
        goto LABEL_67;
      }
LABEL_70:
      if ((unint64_t)(v50 - v49) <= 3)
      {
        sub_20DC4F8B0((uint64_t *)a2, 4uLL);
        uint64_t v50 = *(void *)(a2 + 48);
      }
      *(_DWORD *)(v50 - 4) = v46 - v40 + 4;
      *(void *)(a2 + 48) = v50 - 4;
    }
    while (v19);
  }
  *(unsigned char *)(a2 + 70) = 0;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v30 = *(void *)(a2 + 48);
  uint64_t v31 = *(void *)(a2 + 56);
  unint64_t v32 = ((_BYTE)v30 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v30 - v31 < v32)
  {
    sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v30 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v32;
  }
  else
  {
    uint64_t v33 = v30 - v32;
    *(void *)(a2 + 48) = v33;
    if (!v32) {
      goto LABEL_51;
    }
  }
  uint64_t v34 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v34++) = 0;
  while (v32 != v34);
  uint64_t v33 = *(void *)(a2 + 48);
  uint64_t v31 = *(void *)(a2 + 56);
LABEL_51:
  if ((unint64_t)(v33 - v31) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)a2, 4uLL);
    uint64_t v33 = *(void *)(a2 + 48);
  }
  *(_DWORD *)(v33 - 4) = v86 >> 2;
  uint64_t v35 = v33 - 4;
  *(void *)(a2 + 48) = v35;
  int v36 = *(_DWORD *)(a2 + 40);
  int v37 = *(_DWORD *)(a2 + 32) - v35;
  int v38 = sub_20DC4D314(a2, (void *)(a1 + 72), a3);
  if (*(unsigned char *)(a3 + 897)) {
    int v39 = sub_20DC4B6F8(a2, (uint64_t *)(a1 + 48));
  }
  else {
    int v39 = 0;
  }
  int v52 = v37 + v36;
  int v53 = *(unsigned __int8 *)(a1 + 200);
  int v54 = *(_DWORD *)(a1 + 208);
  int v55 = *(_DWORD *)(a1 + 216);
  BOOL v56 = 1;
  *(unsigned char *)(a2 + 70) = 1;
  uint64_t v57 = *(void *)(a2 + 48);
  uint64_t v58 = *(void *)(a2 + 32);
  uint64_t v87 = *(void *)(a2 + 40);
  sub_20DC781E4((uint64_t *)a2, 16, v39);
  sub_20DC52E9C((uint64_t *)a2, 14, v38);
  if (v55 || *(unsigned char *)(a2 + 80))
  {
    unsigned int v59 = sub_20DC435AC(a2, v55);
    uint64_t v60 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v60 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      uint64_t v60 = *(uint64_t **)(a2 + 56);
    }
    uint64_t *v60 = v59 | 0xC00000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v61 = *(unsigned __int16 *)(a2 + 68);
    if (v61 <= 0xC) {
      LOWORD(v61) = 12;
    }
    *(_WORD *)(a2 + 68) = v61;
    BOOL v56 = *(unsigned char *)(a2 + 80) == 0;
  }
  if (v54 || !v56)
  {
    unsigned int v62 = sub_20DC435AC(a2, v54);
    int v63 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v63 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      int v63 = *(uint64_t **)(a2 + 56);
    }
    *int v63 = v62 | 0xA00000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v64 = *(unsigned __int16 *)(a2 + 68);
    if (v64 <= 0xA) {
      LOWORD(v64) = 10;
    }
    *(_WORD *)(a2 + 68) = v64;
  }
  if (v52)
  {
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    uint64_t v65 = *(void *)(a2 + 32);
    uint64_t v66 = *(void *)(a2 + 40);
    uint64_t v67 = *(void *)(a2 + 48);
    unint64_t v68 = ((_BYTE)v67 - ((_BYTE)v65 + (_BYTE)v66)) & 3;
    if (v67 - *(void *)(a2 + 56) < v68)
    {
      sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v67 - ((_BYTE)v65 + (_BYTE)v66)) & 3);
      *(void *)(a2 + 48) -= v68;
    }
    else
    {
      uint64_t v69 = v67 - v68;
      *(void *)(a2 + 48) = v69;
      if (!v68)
      {
LABEL_98:
        int v71 = v66 - v69 + v65 - v52 + 4;
        if (v66 - v69 + v65 - v52 == -4 && *(unsigned char *)(a2 + 80) == 0) {
          goto LABEL_116;
        }
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        unint64_t v73 = ((_BYTE)v69 - ((_BYTE)v65 + (_BYTE)v66)) & 3;
        unint64_t v74 = *(uint64_t **)(a2 + 56);
        if (v69 - (uint64_t)v74 < v73)
        {
          sub_20DC4F8B0((uint64_t *)a2, v73);
          *(void *)(a2 + 48) -= v73;
        }
        else
        {
          uint64_t v75 = v69 - v73;
          *(void *)(a2 + 48) = v69 - v73;
          if (!v73)
          {
LABEL_109:
            if ((unint64_t)(v75 - (void)v74) <= 3)
            {
              sub_20DC4F8B0((uint64_t *)a2, 4uLL);
              uint64_t v75 = *(void *)(a2 + 48);
              unint64_t v74 = *(uint64_t **)(a2 + 56);
            }
            *(_DWORD *)(v75 - 4) = v71;
            uint64_t v77 = v75 - 4;
            *(void *)(a2 + 48) = v77;
            uint64_t v78 = *(void *)(a2 + 32) - v77 + *(void *)(a2 + 40);
            if ((unint64_t)(v77 - (void)v74) <= 7)
            {
              sub_20DC4F8B0((uint64_t *)a2, 8uLL);
              unint64_t v74 = *(uint64_t **)(a2 + 56);
            }
            uint64_t *v74 = v78 | 0x600000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v79 = *(unsigned __int16 *)(a2 + 68);
            if (v79 <= 6) {
              LOWORD(v79) = 6;
            }
            *(_WORD *)(a2 + 68) = v79;
            goto LABEL_116;
          }
        }
        uint64_t v76 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v76++) = 0;
        while (v73 != v76);
        uint64_t v75 = *(void *)(a2 + 48);
        unint64_t v74 = *(uint64_t **)(a2 + 56);
        goto LABEL_109;
      }
    }
    uint64_t v70 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v70++) = 0;
    while (v68 != v70);
    uint64_t v66 = *(void *)(a2 + 40);
    uint64_t v69 = *(void *)(a2 + 48);
    uint64_t v65 = *(void *)(a2 + 32);
    goto LABEL_98;
  }
LABEL_116:
  sub_20DC43774((uint64_t *)a2, 4, v88);
  if (v53 | *(unsigned __int8 *)(a2 + 80))
  {
    unsigned int v80 = sub_20DC43698(a2, v53);
    uint64_t v81 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v81 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      uint64_t v81 = *(uint64_t **)(a2 + 56);
    }
    *uint64_t v81 = v80 | 0x800000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v82 = *(unsigned __int16 *)(a2 + 68);
    if (v82 <= 8) {
      LOWORD(v82) = 8;
    }
    *(_WORD *)(a2 + 68) = v82;
  }
  uint64_t v83 = sub_20DC43968(a2, (unsigned __int16)v58 - (unsigned __int16)v57 + (unsigned __int16)v87);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7) {
    operator delete(v7);
  }
  return v83;
}

uint64_t flatbuffers::EnumDef::Serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  char v5 = *(void ****)(a1 + 208);
  if (v5 == *(void ****)(a1 + 216))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v7 = 0;
    unint64_t v9 = 0;
    do
    {
      int v10 = flatbuffers::EnumVal::Serialize(*v5, a2, a3);
      int v11 = v10;
      if (v9 >= v8)
      {
        uint64_t v12 = (v9 - v7) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          abort();
        }
        if ((v8 - v7) >> 1 > v13) {
          unint64_t v13 = (v8 - v7) >> 1;
        }
        if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          if (v14 >> 62) {
            sub_20DC4F504();
          }
          unint64_t v15 = (char *)operator new(4 * v14);
        }
        else
        {
          unint64_t v15 = 0;
        }
        unint64_t v16 = &v15[4 * v12];
        *(_DWORD *)unint64_t v16 = v11;
        uint64_t v6 = v16 + 4;
        while (v9 != v7)
        {
          int v17 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        unint64_t v8 = &v15[4 * v14];
        if (v7) {
          operator delete(v7);
        }
        unint64_t v7 = v16;
        uint64_t v4 = a1;
      }
      else
      {
        *(_DWORD *)unint64_t v9 = v10;
        uint64_t v6 = v9 + 4;
      }
      ++v5;
      unint64_t v9 = v6;
    }
    while (v5 != *(void ****)(v4 + 216));
  }
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(v4 + 128), v4, 0x3E8uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  int v20 = sub_20DC4F638(a2, p_p, size);
  uint64_t v80 = v6 - v7;
  if (v6 == v7) {
    uint64_t v21 = (char *)&flatbuffers::data<flatbuffers::Offset<reflection::EnumVal>,std::allocator<flatbuffers::Offset<reflection::EnumVal>>>(std::vector<flatbuffers::Offset<reflection::EnumVal>> const&)::t;
  }
  else {
    uint64_t v21 = v7;
  }
  *(unsigned char *)(a2 + 70) = 1;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v22 = *(void *)(a2 + 48);
  unint64_t v23 = ((_BYTE)v22 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v22 - *(void *)(a2 + 56) < v23)
  {
    sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v22 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v23;
  }
  else
  {
    *(void *)(a2 + 48) = v22 - v23;
    if (!v23) {
      goto LABEL_36;
    }
  }
  uint64_t v79 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v79++) = 0;
  while (v23 != v79);
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
LABEL_36:
  uint64_t v24 = *(void *)(a2 + 48);
  unint64_t v25 = ((_BYTE)v24 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v24 - *(void *)(a2 + 56) < v25)
  {
    sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v24 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v25;
  }
  else
  {
    *(void *)(a2 + 48) = v24 - v25;
    if (!v25) {
      goto LABEL_40;
    }
  }
  uint64_t v26 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v26++) = 0;
  while (v25 != v26);
LABEL_40:
  if (v7 != v6)
  {
    uint64_t v40 = v80 >> 2;
    do
    {
      --v40;
      int v41 = *(_DWORD *)&v21[4 * v40];
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v42 = *(void *)(a2 + 32);
      uint64_t v43 = *(void *)(a2 + 40);
      uint64_t v44 = *(void *)(a2 + 48);
      unint64_t v45 = ((int)v44 - ((int)v42 + (int)v43)) & 3;
      if (v44 - *(void *)(a2 + 56) < v45)
      {
        sub_20DC4F8B0((uint64_t *)a2, ((int)v44 - ((int)v42 + (int)v43)) & 3);
        *(void *)(a2 + 48) -= v45;
      }
      else
      {
        uint64_t v46 = v44 - v45;
        *(void *)(a2 + 48) = v46;
        if (!v45)
        {
          int v47 = v42 + v43 - v46;
          goto LABEL_67;
        }
      }
      uint64_t v48 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v48++) = 0;
      while (v45 != v48);
      uint64_t v43 = *(void *)(a2 + 40);
      uint64_t v46 = *(void *)(a2 + 48);
      uint64_t v42 = *(void *)(a2 + 32);
      int v47 = v42 - v46 + v43;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
LABEL_67:
      unint64_t v49 = ((_BYTE)v46 - ((_BYTE)v42 + (_BYTE)v43)) & 3;
      uint64_t v50 = *(void *)(a2 + 56);
      if (v46 - v50 < v49)
      {
        sub_20DC4F8B0((uint64_t *)a2, v49);
        *(void *)(a2 + 48) -= v49;
LABEL_69:
        uint64_t v52 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v52++) = 0;
        while (v49 != v52);
        uint64_t v51 = *(void *)(a2 + 48);
        uint64_t v50 = *(void *)(a2 + 56);
        goto LABEL_72;
      }
      uint64_t v51 = v46 - v49;
      *(void *)(a2 + 48) = v46 - v49;
      if (v49) {
        goto LABEL_69;
      }
LABEL_72:
      if ((unint64_t)(v51 - v50) <= 3)
      {
        sub_20DC4F8B0((uint64_t *)a2, 4uLL);
        uint64_t v51 = *(void *)(a2 + 48);
      }
      *(_DWORD *)(v51 - 4) = v47 - v41 + 4;
      *(void *)(a2 + 48) = v51 - 4;
    }
    while (v40);
  }
  *(unsigned char *)(a2 + 70) = 0;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v27 = *(void *)(a2 + 48);
  uint64_t v28 = *(void *)(a2 + 56);
  unint64_t v29 = ((_BYTE)v27 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v27 - v28 < v29)
  {
    sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v27 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v29;
    int v31 = v20;
  }
  else
  {
    uint64_t v30 = v27 - v29;
    *(void *)(a2 + 48) = v30;
    int v31 = v20;
    if (!v29) {
      goto LABEL_48;
    }
  }
  uint64_t v32 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v32++) = 0;
  while (v29 != v32);
  uint64_t v30 = *(void *)(a2 + 48);
  uint64_t v28 = *(void *)(a2 + 56);
LABEL_48:
  if ((unint64_t)(v30 - v28) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)a2, 4uLL);
    uint64_t v30 = *(void *)(a2 + 48);
  }
  *(_DWORD *)(v30 - 4) = (unint64_t)v80 >> 2;
  uint64_t v33 = v30 - 4;
  *(void *)(a2 + 48) = v33;
  int v34 = *(_DWORD *)(a2 + 32) - v33 + *(_DWORD *)(a2 + 40);
  uint64_t v35 = *(void *)(a1 + 160);
  if (v35 || (uint64_t v35 = *(void *)(a1 + 168)) != 0) {
    int v36 = *(_DWORD *)(v35 + 140);
  }
  else {
    int v36 = -1;
  }
  int v37 = sub_20DC4DC54(a2, *(_DWORD *)(a1 + 152), *(_DWORD *)(a1 + 156), v36, *(unsigned __int16 *)(a1 + 176));
  int v38 = sub_20DC4D314(a2, (void *)(a1 + 72), a3);
  if (*(unsigned char *)(a3 + 897)) {
    int v39 = sub_20DC4B6F8(a2, (uint64_t *)(a1 + 48));
  }
  else {
    int v39 = 0;
  }
  int v53 = *(unsigned __int8 *)(a1 + 148);
  int v54 = v31;
  int v55 = v37;
  *(unsigned char *)(a2 + 70) = 1;
  uint64_t v56 = *(void *)(a2 + 40);
  uint64_t v57 = *(void *)(a2 + 48);
  uint64_t v58 = *(void *)(a2 + 32);
  sub_20DC781E4((uint64_t *)a2, 14, v39);
  sub_20DC52E9C((uint64_t *)a2, 12, v38);
  sub_20DC52E9C((uint64_t *)a2, 10, v55);
  if (v34)
  {
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    uint64_t v59 = *(void *)(a2 + 32);
    uint64_t v60 = *(void *)(a2 + 40);
    uint64_t v61 = *(void *)(a2 + 48);
    unint64_t v62 = ((_BYTE)v61 - ((_BYTE)v59 + (_BYTE)v60)) & 3;
    if (v61 - *(void *)(a2 + 56) < v62)
    {
      sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v61 - ((_BYTE)v59 + (_BYTE)v60)) & 3);
      *(void *)(a2 + 48) -= v62;
    }
    else
    {
      uint64_t v63 = v61 - v62;
      *(void *)(a2 + 48) = v63;
      if (!v62)
      {
LABEL_86:
        int v65 = v60 - v63 + v59 - v34 + 4;
        if (v60 - v63 + v59 - v34 == -4 && *(unsigned char *)(a2 + 80) == 0) {
          goto LABEL_104;
        }
        if (*(void *)(a2 + 72) <= 3uLL) {
          *(void *)(a2 + 72) = 4;
        }
        unint64_t v67 = ((_BYTE)v63 - ((_BYTE)v59 + (_BYTE)v60)) & 3;
        unint64_t v68 = *(uint64_t **)(a2 + 56);
        if (v63 - (uint64_t)v68 < v67)
        {
          sub_20DC4F8B0((uint64_t *)a2, v67);
          *(void *)(a2 + 48) -= v67;
        }
        else
        {
          uint64_t v69 = v63 - v67;
          *(void *)(a2 + 48) = v63 - v67;
          if (!v67)
          {
LABEL_97:
            if ((unint64_t)(v69 - (void)v68) <= 3)
            {
              sub_20DC4F8B0((uint64_t *)a2, 4uLL);
              uint64_t v69 = *(void *)(a2 + 48);
              unint64_t v68 = *(uint64_t **)(a2 + 56);
            }
            *(_DWORD *)(v69 - 4) = v65;
            uint64_t v71 = v69 - 4;
            *(void *)(a2 + 48) = v71;
            uint64_t v72 = *(void *)(a2 + 32) - v71 + *(void *)(a2 + 40);
            if ((unint64_t)(v71 - (void)v68) <= 7)
            {
              sub_20DC4F8B0((uint64_t *)a2, 8uLL);
              unint64_t v68 = *(uint64_t **)(a2 + 56);
            }
            uint64_t *v68 = v72 | 0x600000000;
            *(void *)(a2 + 56) += 8;
            ++*(_DWORD *)(a2 + 64);
            unsigned int v73 = *(unsigned __int16 *)(a2 + 68);
            if (v73 <= 6) {
              LOWORD(v73) = 6;
            }
            *(_WORD *)(a2 + 68) = v73;
            goto LABEL_104;
          }
        }
        uint64_t v70 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v70++) = 0;
        while (v67 != v70);
        uint64_t v69 = *(void *)(a2 + 48);
        unint64_t v68 = *(uint64_t **)(a2 + 56);
        goto LABEL_97;
      }
    }
    uint64_t v64 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v64++) = 0;
    while (v62 != v64);
    uint64_t v60 = *(void *)(a2 + 40);
    uint64_t v63 = *(void *)(a2 + 48);
    uint64_t v59 = *(void *)(a2 + 32);
    goto LABEL_86;
  }
LABEL_104:
  sub_20DC43774((uint64_t *)a2, 4, v54);
  if (v53 | *(unsigned __int8 *)(a2 + 80))
  {
    unsigned int v74 = sub_20DC43698(a2, v53);
    uint64_t v75 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v75 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      uint64_t v75 = *(uint64_t **)(a2 + 56);
    }
    *uint64_t v75 = v74 | 0x800000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v76 = *(unsigned __int16 *)(a2 + 68);
    if (v76 <= 8) {
      LOWORD(v76) = 8;
    }
    *(_WORD *)(a2 + 68) = v76;
  }
  uint64_t v77 = sub_20DC43968(a2, (unsigned __int16)v58 - (unsigned __int16)v57 + (unsigned __int16)v56);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7) {
    operator delete(v7);
  }
  return v77;
}

uint64_t flatbuffers::ServiceDef::Serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  char v5 = *(void ****)(a1 + 176);
  if (v5 == *(void ****)(a1 + 184))
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    unint64_t v8 = 0;
    int v10 = 0;
    do
    {
      int v11 = flatbuffers::RPCCall::Serialize(*v5, a2, a3);
      int v12 = v11;
      if (v10 >= v9)
      {
        uint64_t v13 = (v10 - v8) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          abort();
        }
        if ((v9 - v8) >> 1 > v14) {
          unint64_t v14 = (v9 - v8) >> 1;
        }
        if ((unint64_t)(v9 - v8) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          if (v15 >> 62) {
            sub_20DC4F504();
          }
          unint64_t v16 = (char *)operator new(4 * v15);
        }
        else
        {
          unint64_t v16 = 0;
        }
        int v17 = &v16[4 * v13];
        *(_DWORD *)int v17 = v12;
        unint64_t v7 = v17 + 4;
        while (v10 != v8)
        {
          int v18 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        unint64_t v9 = &v16[4 * v15];
        if (v8) {
          operator delete(v8);
        }
        unint64_t v8 = v17;
        uint64_t v4 = a1;
      }
      else
      {
        *(_DWORD *)int v10 = v11;
        unint64_t v7 = v10 + 4;
      }
      ++v5;
      int v10 = v7;
    }
    while (v5 != *(void ****)(v4 + 184));
  }
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(v4 + 128), v4, 0x3E8uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  int v70 = sub_20DC4F638(a2, p_p, size);
  uint64_t v21 = v7 - v8;
  if (v7 == v8) {
    uint64_t v22 = (char *)&flatbuffers::data<flatbuffers::Offset<reflection::RPCCall>,std::allocator<flatbuffers::Offset<reflection::RPCCall>>>(std::vector<flatbuffers::Offset<reflection::RPCCall>> const&)::t;
  }
  else {
    uint64_t v22 = v8;
  }
  *(unsigned char *)(a2 + 70) = 1;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v23 = *(void *)(a2 + 48);
  unint64_t v24 = ((_BYTE)v23 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v23 - *(void *)(a2 + 56) < v24)
  {
    sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v23 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v24;
    uint64_t v25 = a1;
  }
  else
  {
    *(void *)(a2 + 48) = v23 - v24;
    uint64_t v25 = a1;
    if (!v24) {
      goto LABEL_36;
    }
  }
  uint64_t v69 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v69++) = 0;
  while (v24 != v69);
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
LABEL_36:
  uint64_t v26 = *(void *)(a2 + 48);
  unint64_t v27 = ((_BYTE)v26 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v26 - *(void *)(a2 + 56) < v27)
  {
    sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v26 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v27;
  }
  else
  {
    *(void *)(a2 + 48) = v26 - v27;
    if (!v27) {
      goto LABEL_40;
    }
  }
  uint64_t v28 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v28++) = 0;
  while (v27 != v28);
LABEL_40:
  if (v8 != v7)
  {
    uint64_t v38 = v21 >> 2;
    do
    {
      --v38;
      int v39 = *(_DWORD *)&v22[4 * v38];
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
      uint64_t v40 = *(void *)(a2 + 32);
      uint64_t v41 = *(void *)(a2 + 40);
      uint64_t v42 = *(void *)(a2 + 48);
      unint64_t v43 = ((int)v42 - ((int)v40 + (int)v41)) & 3;
      if (v42 - *(void *)(a2 + 56) < v43)
      {
        sub_20DC4F8B0((uint64_t *)a2, ((int)v42 - ((int)v40 + (int)v41)) & 3);
        *(void *)(a2 + 48) -= v43;
      }
      else
      {
        uint64_t v44 = v42 - v43;
        *(void *)(a2 + 48) = v44;
        if (!v43)
        {
          int v45 = v40 + v41 - v44;
          goto LABEL_63;
        }
      }
      uint64_t v46 = 0;
      do
        *(unsigned char *)(*(void *)(a2 + 48) + v46++) = 0;
      while (v43 != v46);
      uint64_t v41 = *(void *)(a2 + 40);
      uint64_t v44 = *(void *)(a2 + 48);
      uint64_t v40 = *(void *)(a2 + 32);
      int v45 = v40 - v44 + v41;
      if (*(void *)(a2 + 72) <= 3uLL) {
        *(void *)(a2 + 72) = 4;
      }
LABEL_63:
      unint64_t v47 = ((_BYTE)v44 - ((_BYTE)v40 + (_BYTE)v41)) & 3;
      uint64_t v48 = *(void *)(a2 + 56);
      if (v44 - v48 < v47)
      {
        sub_20DC4F8B0((uint64_t *)a2, v47);
        *(void *)(a2 + 48) -= v47;
LABEL_65:
        uint64_t v50 = 0;
        do
          *(unsigned char *)(*(void *)(a2 + 48) + v50++) = 0;
        while (v47 != v50);
        uint64_t v49 = *(void *)(a2 + 48);
        uint64_t v48 = *(void *)(a2 + 56);
        goto LABEL_68;
      }
      uint64_t v49 = v44 - v47;
      *(void *)(a2 + 48) = v44 - v47;
      if (v47) {
        goto LABEL_65;
      }
LABEL_68:
      if ((unint64_t)(v49 - v48) <= 3)
      {
        sub_20DC4F8B0((uint64_t *)a2, 4uLL);
        uint64_t v49 = *(void *)(a2 + 48);
      }
      *(_DWORD *)(v49 - 4) = v45 - v39 + 4;
      *(void *)(a2 + 48) = v49 - 4;
    }
    while (v38);
  }
  *(unsigned char *)(a2 + 70) = 0;
  if (*(void *)(a2 + 72) <= 3uLL) {
    *(void *)(a2 + 72) = 4;
  }
  uint64_t v29 = *(void *)(a2 + 48);
  uint64_t v30 = *(void *)(a2 + 56);
  unint64_t v31 = ((_BYTE)v29 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v29 - v30 < v31)
  {
    sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v29 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(void *)(a2 + 48) -= v31;
  }
  else
  {
    uint64_t v32 = v29 - v31;
    *(void *)(a2 + 48) = v32;
    if (!v31) {
      goto LABEL_48;
    }
  }
  uint64_t v33 = 0;
  do
    *(unsigned char *)(*(void *)(a2 + 48) + v33++) = 0;
  while (v31 != v33);
  uint64_t v32 = *(void *)(a2 + 48);
  uint64_t v30 = *(void *)(a2 + 56);
LABEL_48:
  if ((unint64_t)(v32 - v30) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)a2, 4uLL);
    uint64_t v32 = *(void *)(a2 + 48);
  }
  *(_DWORD *)(v32 - 4) = (unint64_t)v21 >> 2;
  uint64_t v34 = v32 - 4;
  *(void *)(a2 + 48) = v34;
  int v35 = *(_DWORD *)(a2 + 32) - v34 + *(_DWORD *)(a2 + 40);
  int v36 = sub_20DC4D314(a2, (void *)(v25 + 72), a3);
  if (*(unsigned char *)(a3 + 897)) {
    int v37 = sub_20DC4B6F8(a2, (uint64_t *)(v25 + 48));
  }
  else {
    int v37 = 0;
  }
  *(unsigned char *)(a2 + 70) = 1;
  int v51 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  sub_20DC781E4((uint64_t *)a2, 10, v37);
  sub_20DC52E9C((uint64_t *)a2, 8, v36);
  if (v35)
  {
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    uint64_t v52 = *(void *)(a2 + 32);
    uint64_t v53 = *(void *)(a2 + 40);
    uint64_t v54 = *(void *)(a2 + 48);
    unint64_t v55 = ((_BYTE)v54 - ((_BYTE)v52 + (_BYTE)v53)) & 3;
    if (v54 - *(void *)(a2 + 56) < v55)
    {
      sub_20DC4F8B0((uint64_t *)a2, ((_BYTE)v54 - ((_BYTE)v52 + (_BYTE)v53)) & 3);
      *(void *)(a2 + 48) -= v55;
    }
    else
    {
      uint64_t v56 = v54 - v55;
      *(void *)(a2 + 48) = v56;
      if (!v55) {
        goto LABEL_82;
      }
    }
    uint64_t v57 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v57++) = 0;
    while (v55 != v57);
    uint64_t v53 = *(void *)(a2 + 40);
    uint64_t v56 = *(void *)(a2 + 48);
    uint64_t v52 = *(void *)(a2 + 32);
LABEL_82:
    int v58 = v53 - v56 + v52 - v35;
    int v59 = v58 + 4;
    if (v58 == -4 && !*(unsigned char *)(a2 + 80)) {
      goto LABEL_98;
    }
    if (*(void *)(a2 + 72) <= 3uLL) {
      *(void *)(a2 + 72) = 4;
    }
    unint64_t v60 = ((_BYTE)v56 - ((_BYTE)v52 + (_BYTE)v53)) & 3;
    uint64_t v61 = *(uint64_t **)(a2 + 56);
    if (v56 - (uint64_t)v61 < v60)
    {
      sub_20DC4F8B0((uint64_t *)a2, v60);
      *(void *)(a2 + 48) -= v60;
    }
    else
    {
      uint64_t v62 = v56 - v60;
      *(void *)(a2 + 48) = v56 - v60;
      if (!v60)
      {
LABEL_91:
        if ((unint64_t)(v62 - (void)v61) <= 3)
        {
          sub_20DC4F8B0((uint64_t *)a2, 4uLL);
          uint64_t v62 = *(void *)(a2 + 48);
          uint64_t v61 = *(uint64_t **)(a2 + 56);
        }
        *(_DWORD *)(v62 - 4) = v59;
        uint64_t v64 = v62 - 4;
        *(void *)(a2 + 48) = v64;
        uint64_t v65 = *(void *)(a2 + 32) - v64 + *(void *)(a2 + 40);
        if ((unint64_t)(v64 - (void)v61) <= 7)
        {
          sub_20DC4F8B0((uint64_t *)a2, 8uLL);
          uint64_t v61 = *(uint64_t **)(a2 + 56);
        }
        *uint64_t v61 = v65 | 0x600000000;
        *(void *)(a2 + 56) += 8;
        ++*(_DWORD *)(a2 + 64);
        unsigned int v66 = *(unsigned __int16 *)(a2 + 68);
        if (v66 <= 6) {
          LOWORD(v66) = 6;
        }
        *(_WORD *)(a2 + 68) = v66;
        goto LABEL_98;
      }
    }
    uint64_t v63 = 0;
    do
      *(unsigned char *)(*(void *)(a2 + 48) + v63++) = 0;
    while (v60 != v63);
    uint64_t v62 = *(void *)(a2 + 48);
    uint64_t v61 = *(uint64_t **)(a2 + 56);
    goto LABEL_91;
  }
LABEL_98:
  sub_20DC43774((uint64_t *)a2, 4, v70);
  uint64_t v67 = sub_20DC43968(a2, v51);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8) {
    operator delete(v8);
  }
  return v67;
}

uint64_t flatbuffers::FieldDef::Serialize(void **a1, uint64_t a2, int a3, uint64_t a4)
{
  char v8 = *((unsigned char *)a1 + 23);
  BOOL v9 = v8 < 0;
  if (v8 >= 0) {
    int v10 = a1;
  }
  else {
    int v10 = *a1;
  }
  size_t v11 = v8 & 0x7F;
  if (v9) {
    size_t v12 = (size_t)a1[1];
  }
  else {
    size_t v12 = v11;
  }
  int v13 = sub_20DC4F638(a2, v10, v12);
  unint64_t v14 = a1[20];
  if (v14 || (unint64_t v14 = a1[21]) != 0) {
    int v15 = v14[35];
  }
  else {
    int v15 = -1;
  }
  int v16 = sub_20DC4DC54(a2, *((_DWORD *)a1 + 38), *((_DWORD *)a1 + 39), v15, *((unsigned __int16 *)a1 + 88));
  int v17 = (flatbuffers::ClassicLocale *)sub_20DC4D314(a2, a1 + 9, a4);
  int v18 = (int)v17;
  if (*(unsigned char *)(a4 + 897))
  {
    int v17 = (flatbuffers::ClassicLocale *)sub_20DC4B6F8(a2, (uint64_t *)a1 + 6);
    int v63 = (int)v17;
  }
  else
  {
    int v63 = 0;
  }
  unint64_t v19 = (char *)(a1 + 23);
  int v20 = (char *)(a1 + 23);
  if (*((char *)a1 + 207) < 0) {
    int v20 = *(char **)v19;
  }
  uint64_t v69 = v20;
  uint64_t v21 = (_xlocale *)flatbuffers::ClassicLocale::Get(v17);
  double v22 = strtod_l(v20, &v69, v21);
  if (v69 == v20 || (double v23 = v22, *v69)) {
    double v23 = 0.0;
  }
  int v67 = a3;
  int v68 = *((unsigned __int16 *)a1 + 104);
  unsigned int v24 = *((_DWORD *)a1 + 38);
  if (v24 > 0xFFFFFFFC || v24 - 1 <= 9)
  {
    if (*((char *)a1 + 207) < 0) {
      unint64_t v19 = *(char **)v19;
    }
    uint64_t v69 = 0;
    if (sub_20DC50648((flatbuffers::ClassicLocale *)&v69, v19, 10, 1)) {
      uint64_t v25 = v69;
    }
    else {
      uint64_t v25 = 0;
    }
    unsigned int v24 = *((_DWORD *)a1 + 38);
  }
  else
  {
    uint64_t v25 = 0;
  }
  BOOL v26 = v24 - 11 < 2 || v24 == -4;
  double v27 = 0.0;
  if (v26) {
    double v27 = v23;
  }
  int v28 = *((unsigned __int8 *)a1 + 216);
  int v65 = *((unsigned __int8 *)a1 + 218);
  int v66 = *((unsigned __int8 *)a1 + 217);
  int v64 = *((unsigned __int8 *)a1 + 222);
  BOOL v29 = 1;
  *(unsigned char *)(a2 + 70) = 1;
  uint64_t v30 = *(void *)(a2 + 40);
  uint64_t v31 = *(void *)(a2 + 48);
  uint64_t v32 = *(void *)(a2 + 32);
  if (v27 != 0.0 || *(unsigned char *)(a2 + 80) != 0)
  {
    uint64_t v34 = *(void *)(a2 + 32);
    uint64_t v32 = *(void *)(a2 + 48);
    uint64_t v31 = *(void *)(a2 + 40);
    unsigned int v35 = sub_20DC6F10C(a2, v27);
    int v36 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v36 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      int v36 = *(uint64_t **)(a2 + 56);
    }
    uint64_t *v36 = v35 | 0xE00000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v37 = *(unsigned __int16 *)(a2 + 68);
    if (v37 <= 0xE) {
      LOWORD(v37) = 14;
    }
    *(_WORD *)(a2 + 68) = v37;
    BOOL v29 = *(unsigned char *)(a2 + 80) == 0;
    LOWORD(v30) = v31;
    LOWORD(v31) = v32;
    LOWORD(v32) = v34;
  }
  if (v25 || !v29)
  {
    unsigned int v38 = sub_20DC6EB9C(a2, (uint64_t)v25);
    int v39 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v39 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      int v39 = *(uint64_t **)(a2 + 56);
    }
    *int v39 = v38 | 0xC00000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v40 = *(unsigned __int16 *)(a2 + 68);
    if (v40 <= 0xC) {
      LOWORD(v40) = 12;
    }
    *(_WORD *)(a2 + 68) = v40;
  }
  sub_20DC781E4((uint64_t *)a2, 24, v63);
  sub_20DC52E9C((uint64_t *)a2, 22, v18);
  sub_20DC52E9C((uint64_t *)a2, 6, v16);
  sub_20DC43774((uint64_t *)a2, 4, v13);
  if (v68 || *(unsigned char *)(a2 + 80))
  {
    unsigned int v57 = sub_20DC6E0C4(a2, v68);
    int v58 = *(uint64_t **)(a2 + 56);
    int v42 = v28;
    if (*(void *)(a2 + 48) - (void)v58 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      int v58 = *(uint64_t **)(a2 + 56);
    }
    *int v58 = v57 | 0xA00000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v59 = *(unsigned __int16 *)(a2 + 68);
    if (v59 <= 0xA) {
      LOWORD(v59) = 10;
    }
    *(_WORD *)(a2 + 68) = v59;
    BOOL v41 = *(unsigned char *)(a2 + 80) == 0;
  }
  else
  {
    BOOL v41 = 1;
    int v42 = v28;
  }
  if (v67 || !v41)
  {
    unsigned int v60 = sub_20DC6E0C4(a2, v67);
    uint64_t v61 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v61 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      uint64_t v61 = *(uint64_t **)(a2 + 56);
    }
    *uint64_t v61 = v60 | 0x800000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v62 = *(unsigned __int16 *)(a2 + 68);
    if (v62 <= 8) {
      LOWORD(v62) = 8;
    }
    *(_WORD *)(a2 + 68) = v62;
    BOOL v43 = *(unsigned char *)(a2 + 80) != 0;
  }
  else
  {
    BOOL v43 = 0;
  }
  if (v64 || v43)
  {
    unsigned int v44 = sub_20DC43698(a2, v64);
    int v45 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v45 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      int v45 = *(uint64_t **)(a2 + 56);
    }
    *int v45 = v44 | 0x1A00000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v46 = *(unsigned __int16 *)(a2 + 68);
    if (v46 <= 0x1A) {
      LOWORD(v46) = 26;
    }
    *(_WORD *)(a2 + 68) = v46;
    BOOL v43 = *(unsigned char *)(a2 + 80) != 0;
  }
  if (v65 || v43)
  {
    unsigned int v47 = sub_20DC43698(a2, v65);
    uint64_t v48 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v48 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      uint64_t v48 = *(uint64_t **)(a2 + 56);
    }
    *uint64_t v48 = v47 | 0x1400000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v49 = *(unsigned __int16 *)(a2 + 68);
    if (v49 <= 0x14) {
      LOWORD(v49) = 20;
    }
    *(_WORD *)(a2 + 68) = v49;
    BOOL v43 = *(unsigned char *)(a2 + 80) != 0;
  }
  if (v66 || v43)
  {
    unsigned int v50 = sub_20DC43698(a2, v66);
    int v51 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v51 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      int v51 = *(uint64_t **)(a2 + 56);
    }
    *int v51 = v50 | 0x1200000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v52 = *(unsigned __int16 *)(a2 + 68);
    if (v52 <= 0x12) {
      LOWORD(v52) = 18;
    }
    *(_WORD *)(a2 + 68) = v52;
    BOOL v43 = *(unsigned char *)(a2 + 80) != 0;
  }
  if (v42 || v43)
  {
    unsigned int v53 = sub_20DC43698(a2, v42);
    uint64_t v54 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v54 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      uint64_t v54 = *(uint64_t **)(a2 + 56);
    }
    *uint64_t v54 = v53 | 0x1000000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v55 = *(unsigned __int16 *)(a2 + 68);
    if (v55 <= 0x10) {
      LOWORD(v55) = 16;
    }
    *(_WORD *)(a2 + 68) = v55;
  }
  return sub_20DC43968(a2, (unsigned __int16)v32 - (unsigned __int16)v31 + (unsigned __int16)v30);
}

uint64_t flatbuffers::Definition::SerializeAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20DC4D314(a2, (void *)(a1 + 72), a3);
}

uint64_t sub_20DC4B6F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1] - *a2;
  if (v4)
  {
    unint64_t v6 = v4 / 24;
    if (v6 >> 62) {
      abort();
    }
    size_t v8 = 4 * v6;
    char v5 = (char *)operator new(4 * v6);
    bzero(v5, v8);
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      char v11 = *(unsigned char *)(v3 + v9 + 23);
      if (v11 >= 0) {
        size_t v12 = (void *)(v3 + v9);
      }
      else {
        size_t v12 = *(void **)(v3 + v9);
      }
      if (v11 >= 0) {
        size_t v13 = v11 & 0x7F;
      }
      else {
        size_t v13 = *(void *)(v3 + v9 + 8);
      }
      *(_DWORD *)&v5[4 * v10++] = sub_20DC4F638(a1, v12, v13);
      uint64_t v3 = *a2;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    uint64_t v4 = (uint64_t)&v5[v8];
  }
  else
  {
    char v5 = 0;
  }
  uint64_t v14 = v4 - (void)v5;
  if (v14) {
    int v15 = v5;
  }
  else {
    int v15 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  uint64_t v16 = sub_20DC7811C(a1, (uint64_t)v15, v14 >> 2);
  if (v5) {
    operator delete(v5);
  }
  return v16;
}

uint64_t flatbuffers::StructDef::Deserialize(int64x2_t *a1, uint64_t a2, int *a3)
{
  char v5 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v5 >= 0xFu && (uint64_t v6 = v5[7]) != 0) {
    unint64_t v7 = (int *)((char *)a3 + v6 + *(unsigned int *)((char *)a3 + v6));
  }
  else {
    unint64_t v7 = 0;
  }
  if (sub_20DC4D8A4((uint64_t)&a1[4].i64[1], a2, v7))
  {
    size_t v8 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v8 >= 0x11u && (uint64_t v9 = v8[8]) != 0) {
      unint64_t v10 = (int *)((char *)a3 + v9 + *(unsigned int *)((char *)a3 + v9));
    }
    else {
      unint64_t v10 = 0;
    }
    flatbuffers::DeserializeDoc(a1 + 3, v10);
    uint64_t v11 = *a3;
    if (*(unsigned __int16 *)((char *)a3 - v11) < 5u)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = *(unsigned __int16 *)((char *)a3 - v11 + 4);
      LODWORD(v11) = *(int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v11 + 4));
    }
    size_t v13 = (unsigned int *)((char *)a3 + v12 + v11);
    unsigned int v16 = *v13;
    int v15 = v13 + 1;
    size_t v14 = v16;
    if (v16 >= 0x17)
    {
      if ((v14 | 7) == 0x17) {
        uint64_t v18 = (v14 & 0xFFFFFFF8) + 8;
      }
      else {
        uint64_t v18 = v14 | 7;
      }
      int v17 = operator new(v18 + 1);
      __dst[1] = v14;
      uint64_t v21 = v18 - 0x7FFFFFFFFFFFFFFFLL;
      __dst[0] = v17;
    }
    else
    {
      HIBYTE(v21) = v14;
      int v17 = __dst;
      if (!v14)
      {
LABEL_22:
        *((unsigned char *)v17 + v14) = 0;
        flatbuffers::Parser::UnqualifiedName();
      }
    }
    memcpy(v17, v15, v14);
    goto LABEL_22;
  }
  return 0;
}

uint64_t flatbuffers::Definition::DeserializeAttributes(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return sub_20DC4D8A4(a1 + 72, a2, a3);
}

uint64_t flatbuffers::FieldDef::Deserialize(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *a3;
  if (*(unsigned __int16 *)((char *)a3 - v6) < 5u)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = *(unsigned __int16 *)((char *)a3 - v6 + 4);
    LODWORD(v6) = *(int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v6 + 4));
  }
  size_t v8 = (unsigned int *)((char *)a3 + v7 + v6);
  unsigned int v11 = *v8;
  unint64_t v10 = v8 + 1;
  std::string::size_type v9 = v11;
  if (v11 >= 0x17)
  {
    if ((v9 | 7) == 0x17) {
      uint64_t v13 = (v9 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v13 = v9 | 7;
    }
    p_p = (std::string *)operator new(v13 + 1);
    __p.__r_.__value_.__l.__size_ = v9;
    __p.__r_.__value_.__r.__words[2] = v13 - 0x7FFFFFFFFFFFFFFFLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_10;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v9;
  p_p = &__p;
  if (v9) {
LABEL_10:
  }
    memcpy(p_p, v10, v9);
  p_p->__r_.__value_.__s.__data_[v9] = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = __p;
  *(void *)(a1 + 128) = *(void *)(a2 + 296);
  size_t v14 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v14 >= 7u && (uint64_t v15 = v14[3]) != 0) {
    unsigned int v16 = (int *)((char *)a3 + v15 + *(unsigned int *)((char *)a3 + v15));
  }
  else {
    unsigned int v16 = 0;
  }
  uint64_t result = flatbuffers::Type::Deserialize(a1 + 152, (void *)a2, v16);
  if (result)
  {
    uint64_t v18 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v18 < 0xBu)
    {
      LOWORD(v19) = 0;
    }
    else
    {
      uint64_t v19 = v18[5];
      if (v18[5]) {
        LOWORD(v19) = *(_WORD *)((char *)a3 + v19);
      }
    }
    *(_WORD *)(a1 + 208) = v19;
    unsigned int v20 = *(_DWORD *)(a1 + 152);
    if (v20 <= 0xFFFFFFFC && v20 - 1 > 9)
    {
      unsigned int v33 = v20 + 4;
      if (v33 <= 0x10 && ((1 << v33) & 0x18001) != 0)
      {
        double v34 = 0.0;
        if (*v18 >= 0xFu)
        {
          uint64_t v35 = v18[7];
          if (v35) {
            double v34 = *(double *)((char *)a3 + v35);
          }
        }
        sub_20DC4C328(16, &__p, v34);
        int v36 = (void **)(a1 + 184);
        if (*(char *)(a1 + 207) < 0) {
          operator delete(*v36);
        }
        *(_OWORD *)int v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(a1 + 200) = *((void *)&__p.__r_.__value_.__l + 2);
        if (*(char *)(a1 + 207) < 0)
        {
          uint64_t v38 = *(void *)(a1 + 184);
          std::string::size_type v37 = *(void *)(a1 + 192);
        }
        else
        {
          std::string::size_type v37 = *(unsigned __int8 *)(a1 + 207);
          uint64_t v38 = a1 + 184;
        }
        uint64_t v39 = v38 - 1;
        while (v37)
        {
          int v40 = *(unsigned __int8 *)(v39 + v37--);
          if (v40 != 48)
          {
            if (v37 - 1 <= 0xFFFFFFFFFFFFFFFDLL) {
              std::string::erase((std::string *)(a1 + 184), v37, 0xFFFFFFFFFFFFFFFFLL);
            }
            break;
          }
        }
      }
    }
    else
    {
      sub_20DC3C654();
      uint64_t v21 = (void **)(a1 + 184);
      if (*(char *)(a1 + 207) < 0) {
        operator delete(*v21);
      }
      *(_OWORD *)uint64_t v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(a1 + 200) = *((void *)&__p.__r_.__value_.__l + 2);
    }
    double v22 = (unsigned __int16 *)((char *)a3 - *a3);
    unsigned int v23 = *v22;
    if (v23 > 0x10)
    {
      uint64_t v41 = v22[8];
      if (v22[8]) {
        LOBYTE(v41) = *((unsigned char *)a3 + v41) != 0;
      }
      *(unsigned char *)(a1 + 216) = v41;
      if (v23 > 0x12)
      {
        uint64_t v42 = v22[9];
        if (v22[9]) {
          LOBYTE(v42) = *((unsigned char *)a3 + v42) != 0;
        }
        *(unsigned char *)(a1 + 217) = v42;
        if (v23 > 0x14)
        {
          uint64_t v43 = v22[10];
          if (v22[10]) {
            LOBYTE(v43) = *((unsigned char *)a3 + v43) != 0;
          }
          *(unsigned char *)(a1 + 218) = v43;
          if (v23 >= 0x17 && (uint64_t v44 = v22[11]) != 0) {
            unsigned int v24 = (int *)((char *)a3 + v44 + *(unsigned int *)((char *)a3 + v44));
          }
          else {
            unsigned int v24 = 0;
          }
LABEL_29:
          uint64_t result = sub_20DC4D8A4(a1 + 72, a2, v24);
          if (!result) {
            return result;
          }
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
          strcpy((char *)&__p, "flexbuffer");
          uint64_t v25 = sub_20DC58BC0(a1 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
          BOOL v26 = (uint64_t *)(a1 + 80) == v25 || v25[7] == 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (!v26)
          {
            *(unsigned char *)(a1 + 221) = 1;
            *(unsigned char *)(a2 + 1136) = 1;
            if (*(_DWORD *)(a1 + 152) != 14 || *(_DWORD *)(a1 + 156) != 4) {
              return 0;
            }
          }
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
          strcpy((char *)&__p, "nested_flatbuffer");
          double v27 = sub_20DC58BC0(a1 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
          if ((uint64_t *)(a1 + 80) == v27) {
            uint64_t v28 = 0;
          }
          else {
            uint64_t v28 = v27[7];
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (!v28) {
            goto LABEL_40;
          }
          flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a2 + 296), v28 + 32, 0x3E8uLL, &__p);
          uint64_t v45 = sub_20DC58A14(a2 + 128, (uint64_t)&__p);
          if (a2 + 136 == v45)
          {
            uint64_t v46 = 0;
          }
          else
          {
            uint64_t v46 = *(void *)(v45 + 56);
            if (v46)
            {
              char v47 = 0;
              ++*(_DWORD *)(v46 + 144);
              goto LABEL_88;
            }
          }
          char v47 = 1;
LABEL_88:
          *(void *)(a1 + 224) = v46;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v47) {
            return 0;
          }
LABEL_40:
          BOOL v29 = (unsigned __int16 *)((char *)a3 - *a3);
          if (*v29 >= 0x19u && (uint64_t v48 = v29[12]) != 0) {
            uint64_t v30 = (int *)((char *)a3 + v48 + *(unsigned int *)((char *)a3 + v48));
          }
          else {
            uint64_t v30 = 0;
          }
          flatbuffers::DeserializeDoc((int64x2_t *)(a1 + 48), v30);
          uint64_t v31 = (unsigned __int16 *)((char *)a3 - *a3);
          if (*v31 >= 0x1Bu)
          {
            uint64_t v32 = v31[13];
            if (v32) {
              LOBYTE(v32) = *((unsigned char *)a3 + v32) != 0;
            }
          }
          else
          {
            LOBYTE(v32) = 0;
          }
          *(unsigned char *)(a1 + 222) = v32;
          return 1;
        }
LABEL_28:
        unsigned int v24 = 0;
        *(unsigned char *)(a1 + 218) = 0;
        goto LABEL_29;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 216) = 0;
    }
    *(unsigned char *)(a1 + 217) = 0;
    goto LABEL_28;
  }
  return result;
}

uint64_t flatbuffers::Type::Serialize(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 || (uint64_t v2 = *(void *)(a1 + 16)) != 0) {
    int v3 = *(_DWORD *)(v2 + 140);
  }
  else {
    int v3 = -1;
  }
  return sub_20DC4DC54(a2, *(_DWORD *)a1, *(_DWORD *)(a1 + 4), v3, *(unsigned __int16 *)(a1 + 24));
}

uint64_t flatbuffers::Type::Deserialize(uint64_t a1, void *a2, int *a3)
{
  if (!a3) {
    return 1;
  }
  int v3 = (unsigned __int16 *)((char *)a3 - *a3);
  unsigned int v4 = *v3;
  if (v4 > 4)
  {
    uint64_t v7 = v3[2];
    if (v3[2]) {
      LODWORD(v7) = *((char *)a3 + v7);
    }
    *(_DWORD *)a1 = v7;
    if (v4 > 6)
    {
      uint64_t v8 = v3[3];
      if (v3[3]) {
        LODWORD(v8) = *((char *)a3 + v8);
      }
      *(_DWORD *)(a1 + 4) = v8;
      if (v4 >= 0xB)
      {
        uint64_t v5 = v3[5];
        if (v3[5]) {
          LOWORD(v5) = *(_WORD *)((char *)a3 + v5);
        }
      }
      else
      {
        LOWORD(v5) = 0;
      }
      goto LABEL_5;
    }
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
  LOWORD(v5) = 0;
  *(_DWORD *)(a1 + 4) = 0;
LABEL_5:
  *(_WORD *)(a1 + 24) = v5;
  if (*v3 < 9u) {
    return 1;
  }
  if (!v3[4]) {
    return 1;
  }
  unint64_t v9 = *(unsigned int *)((char *)a3 + v3[4]);
  if ((v9 & 0x80000000) != 0) {
    return 1;
  }
  if (!v3[2]) {
    goto LABEL_20;
  }
  int v10 = *((unsigned __int8 *)a3 + v3[2]);
  if (v10 != 14)
  {
    if (v10 == 15) {
      goto LABEL_24;
    }
    if (v10 != 17) {
      goto LABEL_20;
    }
  }
  uint64_t v12 = v3[3];
  if (!v12 || *((unsigned char *)a3 + v12) != 15)
  {
LABEL_20:
    uint64_t v11 = a2[25];
    if (v9 < (a2[26] - v11) >> 3)
    {
      *(void *)(a1 + 16) = *(void *)(v11 + 8 * v9);
      return 1;
    }
    return 0;
  }
LABEL_24:
  uint64_t v13 = a2[19];
  if (v9 < (a2[20] - v13) >> 3)
  {
    uint64_t v14 = *(void *)(v13 + 8 * v9);
    *(void *)(a1 + 8) = v14;
    ++*(_DWORD *)(v14 + 144);
    return 1;
  }
  return 0;
}

uint64_t sub_20DC4C328@<X0>(int a1@<W0>, std::string *a2@<X8>, double a3@<D0>)
{
  sub_20DC50E1C((uint64_t)v28);
  uint64_t v6 = v29[0];
  *(_DWORD *)((char *)&v29[1] + *(void *)(v29[0] - 24)) = *(_DWORD *)((unsigned char *)&v29[1] + *(void *)(v29[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v29[2] + *(void *)(v6 - 24)) = a1;
  std::ostream::operator<<();
  uint64_t v7 = (flatbuffers::ClassicLocale *)std::stringbuf::str();
  char v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v9 = v8 < 0;
  int v10 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v8 >= 0) {
    int v10 = a2;
  }
  std::string::size_type size = v8 & 0x7F;
  if (v9) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  while (size)
  {
    int v12 = *((unsigned __int8 *)&v10[-1].__r_.__value_.__r.__words[2] + size-- + 7);
    if (v12 != 48)
    {
      if (size != -1)
      {
        BOOL v13 = v10->__r_.__value_.__s.__data_[size] == 46;
        uint64_t v14 = 1;
        if (v13) {
          uint64_t v14 = 2;
        }
        std::string::resize(a2, v14 + size, 0);
      }
      break;
    }
  }
  uint64_t v15 = MEMORY[0x263F8C2B8];
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v16 = (char *)a2;
  }
  else {
    unsigned int v16 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  v24[0] = v16;
  int v17 = (_xlocale *)flatbuffers::ClassicLocale::Get(v7);
  double v18 = strtod_l(v16, v24, v17);
  if (v24[0] == v16 || *v24[0]) {
    double v18 = 0.0;
  }
  if (v18 != a3)
  {
    sub_20DC50E1C((uint64_t)v24);
    *(_DWORD *)((char *)&v25[1] + *(void *)(v25[0] - 24)) |= 0x104u;
    std::ostream::operator<<();
    std::stringbuf::str();
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(a2->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v22;
    a2->__r_.__value_.__r.__words[2] = v23;
    v24[0] = *(char **)v15;
    uint64_t v19 = *(void *)(v15 + 72);
    *(char **)((char *)v24 + *((void *)v24[0] - 3)) = *(char **)(v15 + 64);
    v25[0] = v19;
    v25[1] = MEMORY[0x263F8C318] + 16;
    if (v26 < 0) {
      operator delete((void *)v25[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x210568AB0](&v27);
  }
  v28[0] = *(void *)v15;
  uint64_t v20 = *(void *)(v15 + 72);
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(v15 + 64);
  v29[0] = v20;
  v29[1] = MEMORY[0x263F8C318] + 16;
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x210568AB0](&v31);
}

uint64_t flatbuffers::RPCCall::Serialize(void **a1, uint64_t a2, uint64_t a3)
{
  char v6 = *((unsigned char *)a1 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    char v8 = a1;
  }
  else {
    char v8 = *a1;
  }
  size_t v9 = v6 & 0x7F;
  if (v7) {
    size_t v10 = (size_t)a1[1];
  }
  else {
    size_t v10 = v9;
  }
  int v11 = sub_20DC4F638(a2, v8, v10);
  int v12 = sub_20DC4D314(a2, a1 + 9, a3);
  if (*(unsigned char *)(a3 + 897)) {
    int v13 = sub_20DC4B6F8(a2, (uint64_t *)a1 + 6);
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = a1[20];
  int v15 = *((_DWORD *)a1[19] + 34);
  int v16 = v14[34];
  *(unsigned char *)(a2 + 70) = 1;
  int v17 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  sub_20DC781E4((uint64_t *)a2, 12, v13);
  sub_20DC52E9C((uint64_t *)a2, 10, v12);
  sub_20DC52E9C((uint64_t *)a2, 8, v16);
  sub_20DC52E9C((uint64_t *)a2, 6, v15);
  sub_20DC43774((uint64_t *)a2, 4, v11);

  return sub_20DC43968(a2, v17);
}

uint64_t flatbuffers::EnumVal::Serialize(void **a1, uint64_t a2, uint64_t a3)
{
  char v6 = *((unsigned char *)a1 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    char v8 = a1;
  }
  else {
    char v8 = *a1;
  }
  size_t v9 = v6 & 0x7F;
  if (v7) {
    size_t v10 = (size_t)a1[1];
  }
  else {
    size_t v10 = v9;
  }
  int v11 = sub_20DC4F638(a2, v8, v10);
  int v12 = a1[7];
  if (v12 || (int v12 = a1[8]) != 0) {
    int v13 = v12[35];
  }
  else {
    int v13 = -1;
  }
  int v14 = sub_20DC4DC54(a2, *((_DWORD *)a1 + 12), *((_DWORD *)a1 + 13), v13, *((unsigned __int16 *)a1 + 36));
  if (*(unsigned char *)(a3 + 897)) {
    int v15 = sub_20DC4B6F8(a2, (uint64_t *)a1 + 3);
  }
  else {
    int v15 = 0;
  }
  int v16 = sub_20DC4D314(a2, a1 + 11, a3);
  uint64_t v17 = (uint64_t)a1[17];
  double v18 = a1[7];
  if (v18) {
    int v19 = v18[34];
  }
  else {
    int v19 = 0;
  }
  int v20 = *((unsigned __int8 *)a1 + 80);
  *(unsigned char *)(a2 + 70) = 1;
  uint64_t v21 = *(void *)(a2 + 40);
  uint64_t v22 = *(void *)(a2 + 48);
  uint64_t v23 = *(void *)(a2 + 32);
  int v24 = v16;
  if (v17 || *(unsigned char *)(a2 + 80))
  {
    uint64_t v32 = *(void *)(a2 + 32);
    uint64_t v23 = *(void *)(a2 + 48);
    uint64_t v22 = *(void *)(a2 + 40);
    unsigned int v25 = sub_20DC6EB9C(a2, v17);
    char v26 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v26 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      char v26 = *(uint64_t **)(a2 + 56);
    }
    *char v26 = v25 | 0x600000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v27 = *(unsigned __int16 *)(a2 + 68);
    if (v27 <= 6) {
      LOWORD(v27) = 6;
    }
    *(_WORD *)(a2 + 68) = v27;
    LOWORD(v21) = v22;
    LOWORD(v22) = v23;
    LOWORD(v23) = v32;
  }
  sub_20DC52E9C((uint64_t *)a2, 14, v24);
  sub_20DC781E4((uint64_t *)a2, 12, v15);
  sub_20DC52E9C((uint64_t *)a2, 10, v14);
  sub_20DC52E9C((uint64_t *)a2, 8, v19);
  sub_20DC43774((uint64_t *)a2, 4, v11);
  if (v20 | *(unsigned __int8 *)(a2 + 80))
  {
    unsigned int v28 = sub_20DC43698(a2, v20);
    BOOL v29 = *(uint64_t **)(a2 + 56);
    if (*(void *)(a2 + 48) - (void)v29 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a2, 8uLL);
      BOOL v29 = *(uint64_t **)(a2 + 56);
    }
    uint64_t *v29 = v28 | 0x1000000000;
    *(void *)(a2 + 56) += 8;
    ++*(_DWORD *)(a2 + 64);
    unsigned int v30 = *(unsigned __int16 *)(a2 + 68);
    if (v30 <= 0x10) {
      LOWORD(v30) = 16;
    }
    *(_WORD *)(a2 + 68) = v30;
  }

  return sub_20DC43968(a2, (unsigned __int16)v23 - (unsigned __int16)v22 + (unsigned __int16)v21);
}

void flatbuffers::EnumDef::Deserialize(uint64_t a1, uint64_t a2, const std::string::value_type *a3)
{
  uint64_t v3 = *(int *)a3;
  if (*(unsigned __int16 *)&a3[-v3] < 5u)
  {
    int v4 = 0;
  }
  else
  {
    int v4 = *(unsigned __int16 *)&a3[-v3 + 4];
    LODWORD(v3) = *(_DWORD *)&a3[*(unsigned __int16 *)&a3[-v3 + 4]];
  }
  std::string::__init(&__p, &a3[v4 + 4 + v3], *(unsigned int *)&a3[v4 + v3]);
  flatbuffers::Parser::UnqualifiedName();
}

uint64_t flatbuffers::EnumVal::Deserialize(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *a3;
  if (*(unsigned __int16 *)((char *)a3 - v6) < 5u)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = *(unsigned __int16 *)((char *)a3 - v6 + 4);
    LODWORD(v6) = *(int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v6 + 4));
  }
  char v8 = (unsigned int *)((char *)a3 + v7 + v6);
  unsigned int v11 = *v8;
  size_t v10 = v8 + 1;
  size_t v9 = v11;
  if (v11 >= 0x17)
  {
    if ((v9 | 7) == 0x17) {
      uint64_t v13 = (v9 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v13 = v9 | 7;
    }
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v9;
    uint64_t v29 = v13 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&long long __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v29) = v9;
  p_dst = &__dst;
  if (v9) {
LABEL_10:
  }
    memcpy(p_dst, v10, v9);
  *((unsigned char *)p_dst + v9) = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v29;
  int v14 = (unsigned __int16 *)((char *)a3 - *a3);
  unsigned int v15 = *v14;
  if (v15 <= 6)
  {
    double v18 = 0;
    *(void *)(a1 + 136) = 0;
  }
  else
  {
    uint64_t v16 = v14[3];
    if (v14[3]) {
      uint64_t v16 = *(void *)((char *)a3 + v16);
    }
    *(void *)(a1 + 136) = v16;
    if (v15 >= 0xB && (uint64_t v17 = v14[5]) != 0) {
      double v18 = (int *)((char *)a3 + v17 + *(unsigned int *)((char *)a3 + v17));
    }
    else {
      double v18 = 0;
    }
  }
  uint64_t result = flatbuffers::Type::Deserialize(a1 + 48, a2, v18);
  if (result)
  {
    int v20 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v20 >= 0xDu && (uint64_t v26 = v20[6]) != 0) {
      uint64_t v21 = (int *)((char *)a3 + v26 + *(unsigned int *)((char *)a3 + v26));
    }
    else {
      uint64_t v21 = 0;
    }
    flatbuffers::DeserializeDoc((int64x2_t *)(a1 + 24), v21);
    uint64_t v22 = (unsigned __int16 *)((char *)a3 - *a3);
    if (*v22 >= 0xFu && (uint64_t v27 = v22[7]) != 0) {
      uint64_t v23 = (int *)((char *)a3 + v27 + *(unsigned int *)((char *)a3 + v27));
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t result = sub_20DC4D8A4(a1 + 88, (uint64_t)a2, v23);
    if (result)
    {
      int v24 = (unsigned __int16 *)((char *)a3 - *a3);
      if (*v24 >= 0x11u)
      {
        uint64_t v25 = v24[8];
        if (v25) {
          LOBYTE(v25) = *((unsigned char *)a3 + v25) != 0;
        }
      }
      else
      {
        LOBYTE(v25) = 0;
      }
      *(unsigned char *)(a1 + 80) = v25;
      return 1;
    }
  }
  return result;
}

uint64_t sub_20DC4CFB8(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v7 = a1[4];
  unint64_t v6 = (unint64_t)a1[5];
  if ((unint64_t)v7 >= v6)
  {
    unsigned int v53 = a1[3];
    uint64_t v54 = v7 - v53;
    unint64_t v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61) {
      abort();
    }
    uint64_t v56 = v6 - (void)v53;
    if (v56 >> 2 > v55) {
      unint64_t v55 = v56 >> 2;
    }
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v57 = v55;
    }
    if (v57)
    {
      if (v57 >> 61) {
        sub_20DC4F504();
      }
      int v58 = (char *)operator new(8 * v57);
    }
    else
    {
      int v58 = 0;
    }
    unsigned int v59 = &v58[8 * v54];
    unsigned int v60 = &v58[8 * v57];
    *(void *)unsigned int v59 = a3;
    char v8 = (uint64_t *)(v59 + 8);
    if (v7 != v53)
    {
      do
      {
        uint64_t v61 = *--v7;
        *((void *)v59 - 1) = v61;
        v59 -= 8;
      }
      while (v7 != v53);
      int v7 = a1[3];
    }
    a1[3] = (uint64_t *)v59;
    a1[4] = v8;
    a1[5] = (uint64_t *)v60;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *int v7 = a3;
    char v8 = v7 + 1;
  }
  size_t v9 = a1 + 1;
  size_t v10 = (uint64_t **)a1[1];
  a1[4] = v8;
  size_t v11 = *((unsigned __int8 *)a2 + 23);
  unsigned int v62 = a2;
  if (!v10)
  {
    int v36 = a1 + 1;
LABEL_66:
    char v47 = operator new(0x40uLL);
    uint64_t v48 = v47 + 4;
    if ((v11 & 0x80) != 0)
    {
      sub_20DC55634((uint64_t)v48, *v62, (unint64_t)v62[1]);
    }
    else
    {
      *uint64_t v48 = *(_OWORD *)v62;
      v47[6] = v62[2];
    }
    uint64_t v49 = a3;
    v47[7] = 0;
    *char v47 = 0;
    v47[1] = 0;
    v47[2] = v36;
    char *v9 = v47;
    unsigned int v50 = (uint64_t *)**a1;
    int v51 = v47;
    if (v50)
    {
      *a1 = v50;
      int v51 = *v9;
    }
    sub_20DC5007C(a1[1], v51);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_71:
    uint64_t result = 0;
    v47[7] = v49;
    return result;
  }
  int v12 = a2[1];
  if ((v11 & 0x80u) == 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = *a2;
  }
  if ((v11 & 0x80u) == 0) {
    size_t v14 = v11 & 0x7F;
  }
  else {
    size_t v14 = (size_t)a2[1];
  }
  unsigned int v15 = v10;
  uint64_t v16 = a1 + 1;
  do
  {
    if (*((char *)v15 + 55) < 0)
    {
      uint64_t v17 = v15[4];
      size_t v18 = (size_t)v15[5];
    }
    else
    {
      uint64_t v17 = (uint64_t *)(v15 + 4);
      size_t v18 = *((unsigned __int8 *)v15 + 55);
    }
    if (v14 >= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v14;
    }
    int v20 = memcmp(v17, v13, v19);
    BOOL v21 = v18 < v14;
    if (v20) {
      BOOL v21 = v20 < 0;
    }
    BOOL v22 = !v21;
    if (v21) {
      uint64_t v23 = v15 + 1;
    }
    else {
      uint64_t v23 = v15;
    }
    if (v22) {
      uint64_t v16 = v15;
    }
    unsigned int v15 = (uint64_t **)*v23;
  }
  while (*v23);
  if (v16 == v9)
  {
    if ((v11 & 0x80u) == 0) {
      size_t v32 = v11;
    }
    else {
      size_t v32 = (size_t)v12;
    }
    goto LABEL_43;
  }
  uint64_t v26 = v16[4];
  uint64_t v25 = v16 + 4;
  int v24 = v26;
  char v27 = *((unsigned char *)v25 + 23);
  int v28 = v27;
  if (v27 >= 0) {
    uint64_t v29 = v25;
  }
  else {
    uint64_t v29 = v24;
  }
  size_t v30 = v27 & 0x7F;
  if (v28 >= 0) {
    size_t v31 = v30;
  }
  else {
    size_t v31 = v25[1];
  }
  if ((v11 & 0x80u) == 0) {
    size_t v32 = v11;
  }
  else {
    size_t v32 = (size_t)v12;
  }
  if (v31 >= v32) {
    size_t v33 = v32;
  }
  else {
    size_t v33 = v31;
  }
  int v34 = memcmp(v13, v29, v33);
  BOOL v35 = v32 < v31;
  if (v34) {
    BOOL v35 = v34 < 0;
  }
  if (v35)
  {
    while (1)
    {
      while (1)
      {
LABEL_43:
        int v36 = v10;
        size_t v37 = *((unsigned __int8 *)v10 + 55);
        if ((v37 & 0x80u) == 0) {
          uint64_t v38 = (uint64_t *)(v10 + 4);
        }
        else {
          uint64_t v38 = v10[4];
        }
        size_t v39 = (size_t)v10[5];
        if ((v37 & 0x80u) == 0) {
          size_t v40 = v37 & 0x7F;
        }
        else {
          size_t v40 = (size_t)v10[5];
        }
        if (v40 >= v32) {
          size_t v41 = v32;
        }
        else {
          size_t v41 = v40;
        }
        int v42 = memcmp(v13, v38, v41);
        BOOL v43 = v32 < v40;
        if (v42) {
          BOOL v43 = v42 < 0;
        }
        if (!v43) {
          break;
        }
        size_t v10 = (uint64_t **)*v10;
        size_t v9 = v36;
        if (!*v36) {
          goto LABEL_66;
        }
      }
      if ((v37 & 0x80u) != 0) {
        size_t v37 = v39;
      }
      if (v32 >= v37) {
        size_t v44 = v37;
      }
      else {
        size_t v44 = v32;
      }
      int v45 = memcmp(v38, v13, v44);
      BOOL v46 = v37 < v32;
      if (v45) {
        BOOL v46 = v45 < 0;
      }
      if (!v46) {
        break;
      }
      size_t v10 = (uint64_t **)v10[1];
      if (!v10)
      {
        size_t v9 = v36 + 1;
        goto LABEL_66;
      }
    }
    char v47 = v10;
    uint64_t v49 = a3;
    goto LABEL_71;
  }
  return 1;
}

uint64_t sub_20DC4D314(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2 + 1;
  int v4 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0;
  }
  int v7 = 0;
  char v8 = 0;
  size_t v9 = 0;
  size_t v10 = 0;
  size_t v11 = 0;
  uint64_t v70 = a3 + 704;
  do
  {
    uint64_t v12 = sub_20DC7572C(v70, v4 + 4);
    if (*(unsigned char *)(a3 + 898) || !*(unsigned char *)(v12 + 56))
    {
      char v13 = *((unsigned char *)v4 + 55);
      BOOL v14 = v13 < 0;
      if (v13 >= 0) {
        unsigned int v15 = v4 + 4;
      }
      else {
        unsigned int v15 = (void *)v4[4];
      }
      size_t v16 = v13 & 0x7F;
      if (v14) {
        size_t v17 = v4[5];
      }
      else {
        size_t v17 = v16;
      }
      int v18 = sub_20DC4F638(a1, v15, v17);
      uint64_t v19 = v4[7];
      BOOL v22 = *(void **)(v19 + 32);
      uint64_t v20 = v19 + 32;
      BOOL v21 = v22;
      char v23 = *(unsigned char *)(v20 + 23);
      if (v23 >= 0) {
        int v24 = (void *)v20;
      }
      else {
        int v24 = v21;
      }
      size_t v25 = *(void *)(v20 + 8);
      if (v23 >= 0) {
        size_t v26 = v23 & 0x7F;
      }
      else {
        size_t v26 = v25;
      }
      int v27 = sub_20DC4F638(a1, v24, v26);
      *(unsigned char *)(a1 + 70) = 1;
      int v28 = *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40);
      sub_20DC43774((uint64_t *)a1, 6, v27);
      sub_20DC43774((uint64_t *)a1, 4, v18);
      int v29 = sub_20DC43968(a1, v28);
      int v30 = v29;
      if (v9 >= v10)
      {
        uint64_t v31 = (v9 - v11) >> 2;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62) {
          abort();
        }
        if ((v10 - v11) >> 1 > v32) {
          unint64_t v32 = (v10 - v11) >> 1;
        }
        if ((unint64_t)(v10 - v11) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          if (v33 >> 62) {
            sub_20DC4F504();
          }
          int v34 = (char *)operator new(4 * v33);
        }
        else
        {
          int v34 = 0;
        }
        int v7 = &v34[4 * v31];
        *(_DWORD *)int v7 = v30;
        char v8 = v7 + 4;
        while (v9 != v11)
        {
          int v35 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v7 - 1) = v35;
          v7 -= 4;
        }
        size_t v10 = &v34[4 * v33];
        if (v11) {
          operator delete(v11);
        }
        size_t v9 = v8;
        size_t v11 = v7;
      }
      else
      {
        *(_DWORD *)size_t v9 = v29;
        v9 += 4;
        char v8 = v9;
      }
    }
    int v36 = (void *)v4[1];
    if (v36)
    {
      do
      {
        size_t v37 = v36;
        int v36 = (void *)*v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        size_t v37 = (void *)v4[2];
        BOOL v38 = *v37 == (void)v4;
        int v4 = v37;
      }
      while (!v38);
    }
    int v4 = v37;
  }
  while (v37 != v3);
  if (v9 == v11)
  {
    uint64_t v67 = 0;
    int v7 = v9;
    if (!v9) {
      return v67;
    }
LABEL_91:
    operator delete(v7);
    return v67;
  }
  unint64_t v39 = (v8 - v7) >> 2;
  unint64_t v40 = 126 - 2 * __clz(v39);
  unint64_t v41 = v8 - v7;
  if (v8 == v7) {
    int v42 = &flatbuffers::data<flatbuffers::Offset<reflection::KeyValue>,std::allocator<flatbuffers::Offset<reflection::KeyValue>>>(std::vector<flatbuffers::Offset<reflection::KeyValue>> &)::t;
  }
  else {
    int v42 = v7;
  }
  uint64_t v71 = a1;
  if (v8 == v7) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = v40;
  }
  sub_20DC5308C((uint64_t)v42, (_DWORD *)((char *)v42 + v41), (uint64_t)&v71, v43, 1);
  *(unsigned char *)(a1 + 70) = 1;
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v44 = *(void *)(a1 + 48);
  unint64_t v45 = ((_BYTE)v44 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v44 - *(void *)(a1 + 56) < v45)
  {
    sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v44 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v45;
  }
  else
  {
    *(void *)(a1 + 48) = v44 - v45;
    if (!v45) {
      goto LABEL_53;
    }
  }
  uint64_t v69 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v69++) = 0;
  while (v45 != v69);
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
LABEL_53:
  uint64_t v46 = *(void *)(a1 + 48);
  unint64_t v47 = ((_BYTE)v46 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v46 - *(void *)(a1 + 56) < v47)
  {
    sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v46 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v47;
  }
  else
  {
    *(void *)(a1 + 48) = v46 - v47;
    if (!v47) {
      goto LABEL_57;
    }
  }
  uint64_t v48 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v48++) = 0;
  while (v47 != v48);
LABEL_57:
  if (v7 != v8)
  {
    do
    {
      int v49 = v42[--v39];
      if (*(void *)(a1 + 72) <= 3uLL) {
        *(void *)(a1 + 72) = 4;
      }
      uint64_t v50 = *(void *)(a1 + 32);
      uint64_t v51 = *(void *)(a1 + 40);
      uint64_t v52 = *(void *)(a1 + 48);
      unint64_t v53 = ((int)v52 - ((int)v50 + (int)v51)) & 3;
      if (v52 - *(void *)(a1 + 56) < v53)
      {
        sub_20DC4F8B0((uint64_t *)a1, ((int)v52 - ((int)v50 + (int)v51)) & 3);
        *(void *)(a1 + 48) -= v53;
      }
      else
      {
        uint64_t v54 = v52 - v53;
        *(void *)(a1 + 48) = v54;
        if (!v53)
        {
          int v55 = v50 + v51 - v54;
          goto LABEL_68;
        }
      }
      uint64_t v56 = 0;
      do
        *(unsigned char *)(*(void *)(a1 + 48) + v56++) = 0;
      while (v53 != v56);
      uint64_t v51 = *(void *)(a1 + 40);
      uint64_t v54 = *(void *)(a1 + 48);
      uint64_t v50 = *(void *)(a1 + 32);
      int v55 = v50 - v54 + v51;
      if (*(void *)(a1 + 72) <= 3uLL) {
        *(void *)(a1 + 72) = 4;
      }
LABEL_68:
      unint64_t v57 = ((_BYTE)v54 - ((_BYTE)v50 + (_BYTE)v51)) & 3;
      uint64_t v58 = *(void *)(a1 + 56);
      if (v54 - v58 < v57)
      {
        sub_20DC4F8B0((uint64_t *)a1, v57);
        *(void *)(a1 + 48) -= v57;
LABEL_70:
        uint64_t v60 = 0;
        do
          *(unsigned char *)(*(void *)(a1 + 48) + v60++) = 0;
        while (v57 != v60);
        uint64_t v59 = *(void *)(a1 + 48);
        uint64_t v58 = *(void *)(a1 + 56);
        goto LABEL_73;
      }
      uint64_t v59 = v54 - v57;
      *(void *)(a1 + 48) = v54 - v57;
      if (v57) {
        goto LABEL_70;
      }
LABEL_73:
      if ((unint64_t)(v59 - v58) <= 3)
      {
        sub_20DC4F8B0((uint64_t *)a1, 4uLL);
        uint64_t v59 = *(void *)(a1 + 48);
      }
      *(_DWORD *)(v59 - 4) = v55 - v49 + 4;
      *(void *)(a1 + 48) = v59 - 4;
    }
    while (v39);
  }
  *(unsigned char *)(a1 + 70) = 0;
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v61 = *(void *)(a1 + 48);
  uint64_t v62 = *(void *)(a1 + 56);
  unint64_t v63 = ((_BYTE)v61 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v61 - v62 < v63)
  {
    sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v61 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v63;
  }
  else
  {
    uint64_t v64 = v61 - v63;
    *(void *)(a1 + 48) = v64;
    if (!v63) {
      goto LABEL_85;
    }
  }
  uint64_t v65 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v65++) = 0;
  while (v63 != v65);
  uint64_t v64 = *(void *)(a1 + 48);
  uint64_t v62 = *(void *)(a1 + 56);
LABEL_85:
  if ((unint64_t)(v64 - v62) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)a1, 4uLL);
    uint64_t v64 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v64 - 4) = v41 >> 2;
  uint64_t v66 = v64 - 4;
  *(void *)(a1 + 48) = v66;
  uint64_t v67 = (*(_DWORD *)(a1 + 32) - v66 + *(_DWORD *)(a1 + 40));
  if (v7) {
    goto LABEL_91;
  }
  return v67;
}

uint64_t sub_20DC4D8A4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a3 && *a3) {
    operator new();
  }
  return 1;
}

uint64_t sub_20DC4DC54(uint64_t a1, char a2, char a3, int a4, int a5)
{
  BOOL v9 = 1;
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 32);
  if (a4 != -1 || *(unsigned char *)(a1 + 80))
  {
    unsigned int v13 = sub_20DC435AC(a1, a4);
    BOOL v14 = *(uint64_t **)(a1 + 56);
    if (*(void *)(a1 + 48) - (void)v14 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a1, 8uLL);
      BOOL v14 = *(uint64_t **)(a1 + 56);
    }
    *BOOL v14 = v13 | 0x800000000;
    *(void *)(a1 + 56) += 8;
    ++*(_DWORD *)(a1 + 64);
    unsigned int v15 = *(unsigned __int16 *)(a1 + 68);
    if (v15 <= 8) {
      LOWORD(v15) = 8;
    }
    *(_WORD *)(a1 + 68) = v15;
    BOOL v9 = *(unsigned char *)(a1 + 80) == 0;
  }
  if (a5 || !v9)
  {
    unsigned int v29 = sub_20DC6E0C4(a1, a5);
    int v30 = *(uint64_t **)(a1 + 56);
    if (*(void *)(a1 + 48) - (void)v30 <= 7uLL)
    {
      sub_20DC4F8B0((uint64_t *)a1, 8uLL);
      int v30 = *(uint64_t **)(a1 + 56);
    }
    *int v30 = v29 | 0xA00000000;
    *(void *)(a1 + 56) += 8;
    ++*(_DWORD *)(a1 + 64);
    unsigned int v31 = *(unsigned __int16 *)(a1 + 68);
    if (v31 <= 0xA) {
      LOWORD(v31) = 10;
    }
    *(_WORD *)(a1 + 68) = v31;
    BOOL v16 = *(unsigned char *)(a1 + 80) == 0;
  }
  else
  {
    BOOL v16 = 1;
  }
  if (a3 || !v16)
  {
    if (!*(void *)(a1 + 72)) {
      *(void *)(a1 + 72) = 1;
    }
    uint64_t v18 = *(void *)(a1 + 48);
    if (v18 == *(void *)(a1 + 56))
    {
      sub_20DC4F8B0((uint64_t *)a1, 1uLL);
      uint64_t v18 = *(void *)(a1 + 48);
    }
    *(void *)(a1 + 48) = v18 - 1;
    *(unsigned char *)(v18 - 1) = a3;
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v19 = *(uint64_t **)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 32) - v20 + *(void *)(a1 + 40);
    if ((unint64_t)(v20 - (void)v19) <= 7)
    {
      sub_20DC4F8B0((uint64_t *)a1, 8uLL);
      uint64_t v19 = *(uint64_t **)(a1 + 56);
    }
    uint64_t *v19 = v21 | 0x600000000;
    *(void *)(a1 + 56) += 8;
    ++*(_DWORD *)(a1 + 64);
    unsigned int v22 = *(unsigned __int16 *)(a1 + 68);
    if (v22 <= 6) {
      LOWORD(v22) = 6;
    }
    *(_WORD *)(a1 + 68) = v22;
    BOOL v17 = *(unsigned char *)(a1 + 80) == 0;
  }
  else
  {
    BOOL v17 = 1;
  }
  if (a2 || !v17)
  {
    if (!*(void *)(a1 + 72)) {
      *(void *)(a1 + 72) = 1;
    }
    uint64_t v23 = *(void *)(a1 + 48);
    if (v23 == *(void *)(a1 + 56))
    {
      sub_20DC4F8B0((uint64_t *)a1, 1uLL);
      uint64_t v23 = *(void *)(a1 + 48);
    }
    *(void *)(a1 + 48) = v23 - 1;
    *(unsigned char *)(v23 - 1) = a2;
    uint64_t v25 = *(void *)(a1 + 48);
    int v24 = *(uint64_t **)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 32) - v25 + *(void *)(a1 + 40);
    if ((unint64_t)(v25 - (void)v24) <= 7)
    {
      sub_20DC4F8B0((uint64_t *)a1, 8uLL);
      int v24 = *(uint64_t **)(a1 + 56);
    }
    uint64_t *v24 = v26 | 0x400000000;
    *(void *)(a1 + 56) += 8;
    ++*(_DWORD *)(a1 + 64);
    unsigned int v27 = *(unsigned __int16 *)(a1 + 68);
    if (v27 <= 4) {
      LOWORD(v27) = 4;
    }
    *(_WORD *)(a1 + 68) = v27;
  }

  return sub_20DC43968(a1, (unsigned __int16)v12 - (unsigned __int16)v11 + (unsigned __int16)v10);
}

uint64_t flatbuffers::Parser::Deserialize(uint64_t a1, const std::string::value_type *a2)
{
  int v4 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v4 >= 9u && (uint64_t v5 = *((unsigned __int16 *)v4 + 4)) != 0)
  {
    std::string::__init(&v65, &a2[v5 + 4 + *(unsigned int *)&a2[v5]], *(unsigned int *)&a2[v5 + *(unsigned int *)&a2[v5]]);
  }
  else
  {
    *((unsigned char *)&v65.__r_.__value_.__s + 23) = 0;
    v65.__r_.__value_.__s.__data_[0] = 0;
  }
  unint64_t v6 = (void **)(a1 + 584);
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unint64_t v6 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
  *(void *)(a1 + 600) = *((void *)&v65.__r_.__value_.__l + 2);
  int v7 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v7 >= 0xBu && (uint64_t v8 = *((unsigned __int16 *)v7 + 5)) != 0)
  {
    std::string::__init(&v65, &a2[v8 + 4 + *(unsigned int *)&a2[v8]], *(unsigned int *)&a2[v8 + *(unsigned int *)&a2[v8]]);
  }
  else
  {
    *((unsigned char *)&v65.__r_.__value_.__s + 23) = 0;
    v65.__r_.__value_.__s.__data_[0] = 0;
  }
  BOOL v9 = (void **)(a1 + 608);
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)BOOL v9 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
  *(void *)(a1 + 624) = *((void *)&v65.__r_.__value_.__l + 2);
  *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0uLL;
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65.__r_.__value_.__l.__size_;
  uint64_t v10 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v10 < 5u)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = *((unsigned __int16 *)v10 + 2);
    if (v11) {
      v11 += (uint64_t)&a2[*(unsigned int *)&a2[v11]];
    }
  }
  uint64_t v12 = v11 + 8;
  uint64_t v13 = *(int *)a2;
  BOOL v14 = &a2[-v13];
  unsigned int v15 = *(unsigned __int16 *)&a2[-v13];
  if (v15 < 5)
  {
    int v16 = 0;
  }
  else
  {
    int v16 = *((unsigned __int16 *)v14 + 2);
    LODWORD(v13) = *(_DWORD *)&a2[*((unsigned __int16 *)v14 + 2)];
  }
  if ((const std::string::value_type *)(v12 - 4) != &a2[4 * *(unsigned int *)&a2[v16 + v13]
                                                       + 4
                                                       + v16
                                                       + v13])
    operator new();
  if (v15 < 7)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = *((unsigned __int16 *)v14 + 3);
    if (v17) {
      v17 += (uint64_t)&a2[*(unsigned int *)&a2[v17]];
    }
  }
  uint64_t v18 = (int *)(v17 + 4);
  uint64_t v19 = *(int *)a2;
  uint64_t v20 = &a2[-v19];
  unsigned int v21 = *(unsigned __int16 *)&a2[-v19];
  if (v21 < 7)
  {
    int v22 = 0;
    int v23 = *(_DWORD *)a2;
  }
  else
  {
    int v22 = *((unsigned __int16 *)v20 + 3);
    int v23 = *(_DWORD *)&a2[*((unsigned __int16 *)v20 + 3)];
  }
  if (v18 != (int *)&a2[4 * *(unsigned int *)&a2[v22 + v23] + 4 + v22 + v23]) {
    operator new();
  }
  if (v21 < 5)
  {
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = *((unsigned __int16 *)v20 + 2);
    if (v24) {
      v24 += (uint64_t)&a2[*(unsigned int *)&a2[v24]];
    }
  }
  for (uint64_t i = (const std::string::value_type *)(v24 + 4); ; i += 4)
  {
    uint64_t v26 = &a2[-(int)v19];
    unsigned int v27 = *(unsigned __int16 *)v26;
    if (v27 < 5)
    {
      int v28 = 0;
    }
    else
    {
      int v28 = *((unsigned __int16 *)v26 + 2);
      LODWORD(v19) = *(_DWORD *)&a2[*((unsigned __int16 *)v26 + 2)];
    }
    if (i == &a2[4 * *(unsigned int *)&a2[v28 + v19] + 4 + v28 + v19]) {
      break;
    }
    uint64_t v29 = *(unsigned int *)i;
    unsigned int v30 = *(_DWORD *)&i[v29];
    if (*(unsigned __int16 *)&i[v29 - (int)v30] < 5u)
    {
      LODWORD(v31) = 0;
    }
    else
    {
      uint64_t v31 = *(unsigned __int16 *)&i[v29 - (int)v30 + 4];
      unsigned int v30 = *(_DWORD *)&i[v29 + v31];
    }
    unint64_t v32 = v31 + (unint64_t)v30;
    unint64_t v33 = (char *)&i[v29];
    int v35 = &v33[v32 + 4];
    std::string::size_type v34 = *(unsigned int *)&v33[v32];
    if (v34 >= 0x17)
    {
      if ((v34 | 7) == 0x17) {
        uint64_t v37 = (v34 & 0xFFFFFFF8) + 8;
      }
      else {
        uint64_t v37 = v34 | 7;
      }
      p_dst = (std::string *)operator new(v37 + 1);
      __dst.__r_.__value_.__l.__size_ = v34;
      __dst.__r_.__value_.__r.__words[2] = v37 - 0x7FFFFFFFFFFFFFFFLL;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_41:
      memmove(p_dst, v35, v34);
      goto LABEL_42;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(_DWORD *)&v33[v32];
    p_dst = &__dst;
    if (v34) {
      goto LABEL_41;
    }
LABEL_42:
    p_dst->__r_.__value_.__s.__data_[v34] = 0;
    uint64_t v38 = sub_20DC58A14(a1 + 128, (uint64_t)&__dst);
    if (a1 + 136 == v38) {
      unint64_t v39 = 0;
    }
    else {
      unint64_t v39 = *(int64x2_t **)(v38 + 56);
    }
    v39[8].i64[0] = (uint64_t)sub_20DC4EB58((uint64_t)&__dst, a1 + 272, (uint64_t)&v65);
    if (!flatbuffers::StructDef::Deserialize(v39, a1, (int *)&i[*(unsigned int *)i]))
    {
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v57 = 0;
      goto LABEL_69;
    }
    uint64_t v19 = *(int *)a2;
    if (*(unsigned __int16 *)&a2[-v19] >= 0xDu
      && *(_WORD *)&a2[-v19 + 12]
      && &i[*(unsigned int *)i] == &a2[*(unsigned __int16 *)&a2[-v19 + 12]
                                     + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[-v19 + 12]]])
    {
      *(void *)(a1 + 576) = v39;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      LODWORD(v19) = *(_DWORD *)a2;
    }
  }
  if (v27 < 7)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = *((unsigned __int16 *)v26 + 3);
    if (*((_WORD *)v26 + 3)) {
      v40 += (uint64_t)&a2[*(unsigned int *)&a2[v40]];
    }
  }
  unint64_t v41 = (const std::string::value_type *)(v40 + 4);
  uint64_t v42 = *(int *)a2;
  uint64_t v43 = &a2[-v42];
  unsigned int v44 = *(unsigned __int16 *)&a2[-v42];
  if (v44 < 7)
  {
    int v45 = 0;
    int v46 = *(_DWORD *)a2;
  }
  else
  {
    int v45 = *((unsigned __int16 *)v43 + 3);
    int v46 = *(_DWORD *)&a2[*((unsigned __int16 *)v43 + 3)];
  }
  if (v41 != &a2[4 * *(unsigned int *)&a2[v45 + v46] + 4 + v45 + v46])
  {
    uint64_t v47 = *(unsigned int *)v41;
    unsigned int v48 = *(_DWORD *)&v41[v47];
    if (*(unsigned __int16 *)&v41[v47 - (int)v48] < 5u)
    {
      LODWORD(v49) = 0;
    }
    else
    {
      uint64_t v49 = *(unsigned __int16 *)&v41[v47 - (int)v48 + 4];
      unsigned int v48 = *(_DWORD *)&v41[v47 + v49];
    }
    std::string::__init(&__dst, &v41[v47 + 4 + v49 + v48], *(unsigned int *)&v41[v47 + v49 + v48]);
    uint64_t v50 = sub_20DC58904(a1 + 176, (uint64_t)&__dst);
    if (a1 + 184 == v50) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = *(void *)(v50 + 56);
    }
    *(void *)(v51 + 128) = sub_20DC4EB58((uint64_t)&__dst, a1 + 272, (uint64_t)&v65);
    flatbuffers::EnumDef::Deserialize(v51, a1, &v41[*(unsigned int *)v41]);
  }
  if (v44 >= 0xF)
  {
    uint64_t v52 = *((unsigned __int16 *)v43 + 7);
    if (v52)
    {
      uint64_t v53 = v52 + *(unsigned int *)&a2[v52];
      uint64_t v54 = &a2[-(int)v42];
      if (*(unsigned __int16 *)v54 < 0xFu)
      {
        int v55 = 0;
      }
      else
      {
        int v55 = *((unsigned __int16 *)v54 + 7);
        LODWORD(v42) = *(_DWORD *)&a2[v55];
      }
      uint64_t v56 = &a2[v53 + 4];
      if (v56 != &a2[4 * *(unsigned int *)&a2[v55 + v42] + 4 + v55 + v42])
      {
        uint64_t v59 = *(unsigned int *)v56;
        uint64_t v60 = &a2[v53];
        unsigned int v61 = *(_DWORD *)&a2[v53 + 4 + v59];
        if (*(unsigned __int16 *)&a2[v53 + 4 + v59 - (int)v61] < 5u)
        {
          LODWORD(v62) = 0;
        }
        else
        {
          uint64_t v62 = *(unsigned __int16 *)&v60[v59 - (int)v61 + 8];
          unsigned int v61 = *(_DWORD *)&a2[v59 + 4 + v53 + v62];
        }
        unint64_t v63 = (char *)&v60[v62 + (unint64_t)v61 + v59];
        std::string::__init(&__dst, v63 + 8, *((unsigned int *)v63 + 1));
        operator new();
      }
    }
  }
  uint64_t v57 = 1;
LABEL_69:
  sub_20DC5043C((char *)v65.__r_.__value_.__l.__size_);
  return v57;
}

uint64_t *sub_20DC4EB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5 = std::string::rfind((const std::string *)a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v5 == -1)
  {
    HIBYTE(v35) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_15;
  }
  size_t v6 = v5;
  if (*(char *)(a1 + 23) >= 0) {
    int v7 = (const void *)a1;
  }
  else {
    int v7 = *(const void **)a1;
  }
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size_t v34 = v6;
    int64_t v35 = v10 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v5;
    p_dst = (void **)&__dst;
    if (!v5) {
      goto LABEL_14;
    }
  }
  memmove(p_dst, v7, v6);
LABEL_14:
  *((unsigned char *)p_dst + v6) = 0;
LABEL_15:
  uint64_t v12 = (uint64_t **)(a3 + 8);
  uint64_t v11 = *(uint64_t **)(a3 + 8);
  if (v11)
  {
    if (v35 >= 0) {
      size_t v13 = HIBYTE(v35);
    }
    else {
      size_t v13 = v34;
    }
    if (v35 >= 0) {
      BOOL v14 = (void **)&__dst;
    }
    else {
      BOOL v14 = __dst;
    }
    while (1)
    {
      while (1)
      {
        unsigned int v15 = (uint64_t **)v11;
        uint64_t v18 = (const void *)v11[4];
        int v16 = v11 + 4;
        uint64_t v17 = v18;
        size_t v19 = *((unsigned __int8 *)v16 + 23);
        if ((v19 & 0x80u) == 0) {
          uint64_t v20 = v16;
        }
        else {
          uint64_t v20 = v17;
        }
        size_t v21 = v16[1];
        if ((v19 & 0x80u) == 0) {
          size_t v22 = v19 & 0x7F;
        }
        else {
          size_t v22 = v16[1];
        }
        if (v22 >= v13) {
          size_t v23 = v13;
        }
        else {
          size_t v23 = v22;
        }
        int v24 = memcmp(v14, v20, v23);
        BOOL v25 = v13 < v22;
        if (v24) {
          BOOL v25 = v24 < 0;
        }
        if (!v25) {
          break;
        }
        uint64_t v11 = *v15;
        uint64_t v12 = v15;
        if (!*v15) {
          goto LABEL_47;
        }
      }
      if ((v19 & 0x80u) != 0) {
        size_t v19 = v21;
      }
      if (v13 >= v19) {
        size_t v26 = v19;
      }
      else {
        size_t v26 = v13;
      }
      int v27 = memcmp(v20, v14, v26);
      BOOL v28 = v19 < v13;
      if (v27) {
        BOOL v28 = v27 < 0;
      }
      if (!v28) {
        break;
      }
      uint64_t v11 = v15[1];
      if (!v11)
      {
        uint64_t v12 = v15 + 1;
        goto LABEL_47;
      }
    }
  }
  else
  {
    unsigned int v15 = (uint64_t **)(a3 + 8);
LABEL_47:
    sub_20DC78AD4((uint64_t)&v36, a3, (uint64_t)&__dst);
    uint64_t v29 = v36;
    uint64_t *v36 = 0;
    v29[1] = 0;
    v29[2] = (uint64_t)v15;
    *uint64_t v12 = v29;
    uint64_t v30 = **(void **)a3;
    if (v30)
    {
      *(void *)a3 = v30;
      uint64_t v29 = *v12;
    }
    sub_20DC5007C(*(uint64_t **)(a3 + 8), v29);
    ++*(void *)(a3 + 16);
    unsigned int v15 = (uint64_t **)v36;
  }
  uint64_t v31 = v15[7];
  if (!v31) {
    operator new();
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(__dst);
  }
  return v31;
}

void flatbuffers::Parser::ConformTo(flatbuffers::Parser *this@<X0>, const flatbuffers::Parser *a2@<X1>, unsigned char *a3@<X8>)
{
  std::string::size_type v5 = (uint64_t *)*((void *)this + 19);
  if (v5 == *((uint64_t **)this + 20)) {
    goto LABEL_43;
  }
  size_t v6 = (char *)a2 + 136;
  while (2)
  {
    uint64_t v7 = *v5;
    flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(*v5 + 128), *v5, 0x3E8uLL, &__p);
    uint64_t v8 = sub_20DC58A14((uint64_t)a2 + 128, (uint64_t)&__p);
    if (v6 == (char *)v8 || (uint64_t v9 = *(void *)(v8 + 56)) == 0)
    {
      int v24 = 4;
      goto LABEL_34;
    }
    ++*(_DWORD *)(v9 + 144);
    uint64_t v10 = *(void ***)(v7 + 176);
    if (v10 == *(void ***)(v7 + 184))
    {
      int v24 = 0;
      goto LABEL_34;
    }
    while (1)
    {
      uint64_t v11 = (uint64_t)*v10;
      uint64_t v12 = sub_20DC7572C(v9 + 152, *v10);
      if (v9 + 160 != v12)
      {
        uint64_t v13 = *(void *)(v12 + 56);
        if (v13) {
          break;
        }
      }
      uint64_t v22 = *(void *)(v9 + 176);
      uint64_t v23 = *(void *)(v9 + 184);
      if (v22 != v23)
      {
        while (*(unsigned __int16 *)(v11 + 208) != *(unsigned __int16 *)(*(void *)v22 + 208))
        {
          v22 += 8;
          if (v22 == v23) {
            goto LABEL_31;
          }
        }
        if (!sub_20DC4F390(v11 + 152, *(void *)v22 + 152)) {
          goto LABEL_40;
        }
      }
LABEL_31:
      int v24 = 0;
      if (++v10 == *(void ***)(v7 + 184)) {
        goto LABEL_34;
      }
    }
    if (*(unsigned __int16 *)(v11 + 208) != *(unsigned __int16 *)(v13 + 208)) {
      goto LABEL_40;
    }
    char v14 = *(unsigned char *)(v11 + 207);
    uint64_t v15 = v14 & 0x7F;
    if (v14 >= 0) {
      uint64_t v16 = v14 & 0x7F;
    }
    else {
      uint64_t v16 = *(void *)(v11 + 192);
    }
    char v17 = *(unsigned char *)(v13 + 207);
    int v18 = v17;
    uint64_t v19 = v17 & 0x7F;
    if (v18 < 0) {
      uint64_t v19 = *(void *)(v13 + 192);
    }
    if (v16 != v19) {
      goto LABEL_40;
    }
    uint64_t v20 = (const void **)(v11 + 184);
    if (v18 >= 0) {
      size_t v21 = (unsigned __int8 *)(v13 + 184);
    }
    else {
      size_t v21 = *(unsigned __int8 **)(v13 + 184);
    }
    if ((*(unsigned char *)(v11 + 207) & 0x80) != 0)
    {
      if (memcmp(*v20, v21, *(void *)(v11 + 192))) {
        goto LABEL_40;
      }
LABEL_30:
      if (!sub_20DC4F390(v11 + 152, v13 + 152)) {
        goto LABEL_40;
      }
      goto LABEL_31;
    }
    if ((v14 & 0x7F) == 0) {
      goto LABEL_30;
    }
    while (*(unsigned __int8 *)v20 == *v21)
    {
      uint64_t v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v15) {
        goto LABEL_30;
      }
    }
LABEL_40:
    std::operator+<char>();
    int v24 = 1;
LABEL_34:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v24 | 4) == 4)
    {
      if (++v5 == *((uint64_t **)this + 20))
      {
LABEL_43:
        BOOL v25 = (uint64_t *)*((void *)this + 25);
        if (v25 == *((uint64_t **)this + 26))
        {
LABEL_62:
          a3[23] = 0;
          *a3 = 0;
        }
        else
        {
          while (1)
          {
            uint64_t v26 = *v25;
            flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(*v25 + 128), *v25, 0x3E8uLL, &__p);
            int v27 = (void *)sub_20DC58904((uint64_t)a2 + 176, (uint64_t)&__p);
            if ((void *)((char *)a2 + 184) == v27 || (uint64_t v28 = v27[7]) == 0)
            {
              int v35 = 13;
            }
            else
            {
              uint64_t v29 = *(void ***)(v26 + 208);
              if (v29 == *(void ***)(v26 + 216))
              {
                int v35 = 0;
              }
              else
              {
                uint64_t v30 = v28 + 184;
                uint64_t v31 = v28 + 192;
                while (1)
                {
                  uint64_t v32 = (uint64_t)*v29;
                  uint64_t v33 = sub_20DC7572C(v30, *v29);
                  if (v31 != v33)
                  {
                    uint64_t v34 = *(void *)(v33 + 56);
                    if (v34)
                    {
                      if (*(void *)(v32 + 136) != *(void *)(v34 + 136)) {
                        break;
                      }
                    }
                  }
                  int v35 = 0;
                  if (++v29 == *(void ***)(v26 + 216)) {
                    goto LABEL_54;
                  }
                }
                std::operator+<char>();
                int v35 = 1;
              }
            }
LABEL_54:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v35 != 13 && v35) {
              break;
            }
            if (++v25 == *((uint64_t **)this + 26)) {
              goto LABEL_62;
            }
          }
        }
        return;
      }
      continue;
    }
    break;
  }
}

BOOL sub_20DC4F390(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  int v4 = *(unsigned __int8 **)(a1 + 8);
  std::string::size_type v5 = *(unsigned __int8 **)(a2 + 8);
  if (v4 != v5)
  {
    signed __int8 v6 = v4[23];
    uint64_t v7 = v6 & 0x7F;
    if (v6 >= 0) {
      uint64_t v8 = (unsigned __int8 *)(v6 & 0x7F);
    }
    else {
      uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    unsigned __int8 v9 = v5[23];
    int v10 = (char)v9;
    uint64_t v11 = (unsigned __int8 *)(v9 & 0x7F);
    if (v10 < 0) {
      uint64_t v11 = (unsigned __int8 *)*((void *)v5 + 1);
    }
    if (v8 != v11) {
      return 0;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      uint64_t v12 = *(unsigned __int8 **)v5;
    }
    if ((v4[23] & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v12, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if ((v6 & 0x7F) != 0)
    {
      while (*v4 == *v12)
      {
        ++v4;
        ++v12;
        if (!--v7) {
          goto LABEL_19;
        }
      }
      return 0;
    }
  }
LABEL_19:
  uint64_t v13 = *(unsigned __int8 **)(a1 + 16);
  char v14 = *(unsigned __int8 **)(a2 + 16);
  if (v13 == v14) {
    return 1;
  }
  signed __int8 v15 = v13[23];
  if (v15 >= 0) {
    uint64_t v16 = (unsigned __int8 *)(v15 & 0x7F);
  }
  else {
    uint64_t v16 = (unsigned __int8 *)*((void *)v13 + 1);
  }
  unsigned __int8 v17 = v14[23];
  int v18 = (char)v17;
  uint64_t v19 = (unsigned __int8 *)(v17 & 0x7F);
  if (v18 < 0) {
    uint64_t v19 = (unsigned __int8 *)*((void *)v14 + 1);
  }
  if (v16 != v19) {
    return 0;
  }
  if (v18 >= 0) {
    uint64_t v20 = *(unsigned __int8 **)(a2 + 16);
  }
  else {
    uint64_t v20 = *(unsigned __int8 **)v14;
  }
  if ((v13[23] & 0x80) != 0) {
    return memcmp(*(const void **)v13, v20, *((void *)v13 + 1)) == 0;
  }
  if ((v15 & 0x7F) == 0) {
    return 1;
  }
  uint64_t v21 = (v15 & 0x7F) - 1;
  do
  {
    int v23 = *v13++;
    int v22 = v23;
    int v25 = *v20++;
    int v24 = v25;
    BOOL v27 = v21-- != 0;
    BOOL result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void sub_20DC4F504()
{
}

BOOL sub_20DC4F514(flatbuffers::ClassicLocale *a1, char *a2, int a3, int a4)
{
  uint64_t v7 = a1;
  do
  {
    if (a3 > 0)
    {
      if (a4)
      {
        a1 = (flatbuffers::ClassicLocale *)__error();
        *(_DWORD *)a1 = 0;
      }
      unsigned __int8 v17 = a2;
      signed __int8 v15 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
      *uint64_t v7 = strtoull_l(a2, &v17, a3, v15);
      if (v17 == a2 || *v17 != 0) {
        goto LABEL_14;
      }
      return !a4 || !*__error();
    }
    uint64_t v8 = a2;
    do
    {
      int v10 = *v8++;
      char v9 = v10;
      unsigned int v11 = v10 - 48;
      if (v10) {
        BOOL v12 = v11 > 9;
      }
      else {
        BOOL v12 = 0;
      }
    }
    while (v12);
    if (v9 != 48) {
      break;
    }
    a3 = 16;
  }
  while ((*v8 & 0xDF) == 0x58);
  if (a4)
  {
    a1 = (flatbuffers::ClassicLocale *)__error();
    *(_DWORD *)a1 = 0;
  }
  unsigned __int8 v17 = a2;
  uint64_t v13 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
  *uint64_t v7 = strtoull_l(a2, &v17, 10, v13);
  if (v17 == a2 || *v17)
  {
LABEL_14:
    BOOL result = 0;
    *uint64_t v7 = 0;
    return result;
  }
  return !a4 || !*__error();
}

uint64_t sub_20DC4F638(uint64_t a1, void *__src, size_t __n)
{
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t v8 = (~(_BYTE)__n + (_BYTE)v7 - (*(unsigned char *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v7 - v6 < v8)
  {
    sub_20DC4F8B0((uint64_t *)a1, v8);
    *(void *)(a1 + 48) -= v8;
  }
  else
  {
    uint64_t v9 = v7 - v8;
    *(void *)(a1 + 48) = v7 - v8;
    if (!v8) {
      goto LABEL_5;
    }
  }
  uint64_t v17 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v17++) = 0;
  while (v8 != v17);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
LABEL_5:
  if (v9 == v6)
  {
    sub_20DC4F8B0((uint64_t *)a1, 1uLL);
    uint64_t v9 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v9 - 1;
  *(unsigned char *)(v9 - 1) = 0;
  if (__n)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10 - *(void *)(a1 + 56) < __n)
    {
      sub_20DC4F8B0((uint64_t *)a1, __n);
      uint64_t v10 = *(void *)(a1 + 48);
    }
    *(void *)(a1 + 48) = v10 - __n;
    memcpy((void *)(v10 - __n), __src, __n);
  }
  if (*(void *)(a1 + 72) <= 3uLL) {
    *(void *)(a1 + 72) = 4;
  }
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  unint64_t v13 = ((_BYTE)v11 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v11 - v12 < v13)
  {
    sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v11 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(void *)(a1 + 48) -= v13;
  }
  else
  {
    uint64_t v14 = v11 - v13;
    *(void *)(a1 + 48) = v14;
    if (!v13) {
      goto LABEL_15;
    }
  }
  uint64_t v18 = 0;
  do
    *(unsigned char *)(*(void *)(a1 + 48) + v18++) = 0;
  while (v13 != v18);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
LABEL_15:
  if ((unint64_t)(v14 - v12) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)a1, 4uLL);
    uint64_t v14 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v14 - 4) = __n;
  uint64_t v15 = v14 - 4;
  *(void *)(a1 + 48) = v15;
  return (*(_DWORD *)(a1 + 32) - v15 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_20DC4F80C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  if (*(void *)(result + 72) < a3) {
    *(void *)(result + 72) = a3;
  }
  uint64_t v4 = *(void *)(result + 48);
  unint64_t v5 = (a3 - 1) & (-a2 - (*(_DWORD *)(result + 32) - v4 + *(_DWORD *)(result + 40)));
  if (v4 - *(void *)(result + 56) < v5)
  {
    BOOL result = sub_20DC4F8B0((uint64_t *)result, (a3 - 1) & (-a2 - (*(_DWORD *)(result + 32) - v4 + *(_DWORD *)(result + 40))));
    *(void *)(v3 + 48) -= v5;
  }
  else
  {
    *(void *)(result + 48) = v4 - v5;
    if (!v5) {
      return result;
    }
  }
  uint64_t v6 = 0;
  do
    *(unsigned char *)(*(void *)(v3 + 48) + v6++) = 0;
  while (v5 != v6);
  return result;
}

uint64_t sub_20DC4F8B0(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = v4 - a1[6] + v3;
  uint64_t v6 = a1[7] - v4;
  if (v3) {
    unint64_t v7 = v3 >> 1;
  }
  else {
    unint64_t v7 = a1[2];
  }
  if (v7 <= a2) {
    unint64_t v7 = a2;
  }
  uint64_t v8 = (v3 + a1[3] + v7 - 1) & -a1[3];
  a1[4] = v8;
  uint64_t v9 = *a1;
  if (v4)
  {
    if (!v9)
    {
      uint64_t v12 = &unk_26C24CB10;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void))(*(void *)v9 + 32))(v9, v4, v3, v8, v5, v6);
  }
  else
  {
    if (!v9)
    {
      uint64_t v12 = &unk_26C24CB10;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
  }
  uint64_t v11 = result + a1[4] - v5;
  a1[5] = result;
  a1[6] = v11;
  a1[7] = result + v6;
  return result;
}

char *sub_20DC4FAAC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, size_t a5, size_t a6)
{
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a1 + 24))(a1, a2, a3);
  return v12;
}

void sub_20DC4FB84()
{
}

void sub_20DC4FB98()
{
}

void sub_20DC4FBB0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x210568AD0);
  }
}

uint64_t *sub_20DC4FBD0(uint64_t *result, uint64_t a2, unsigned int a3)
{
  unint64_t v5 = result;
  uint64_t v6 = (unint64_t *)result[7];
  if ((unint64_t)(result[6] - (void)v6) <= 7)
  {
    uint64_t result = (uint64_t *)sub_20DC4F8B0(result, 8uLL);
    uint64_t v6 = (unint64_t *)v5[7];
  }
  *uint64_t v6 = a3 | (unint64_t)(a2 << 32);
  v5[7] += 8;
  ++*((_DWORD *)v5 + 16);
  unsigned int v7 = *((unsigned __int16 *)v5 + 34);
  if (v7 <= a2) {
    LOWORD(v7) = a2;
  }
  *((_WORD *)v5 + 34) = v7;
  return result;
}

void *sub_20DC4FC58(void *a1)
{
  uint64_t v2 = a1[11];
  if (v2)
  {
    sub_20DC4FD64(*(void **)(v2 + 8));
    MEMORY[0x210568AF0](v2, 0x1060C40C2B13FB5);
  }
  uint64_t v3 = a1[5];
  if (v3)
  {
    if (*a1) {
      (*(void (**)(void))(*(void *)*a1 + 24))(*a1);
    }
    else {
      MEMORY[0x210568AD0](v3, 0x1000C8077774924);
    }
  }
  a1[5] = 0;
  if (*((unsigned char *)a1 + 8) && *a1) {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  *a1 = 0;
  *((unsigned char *)a1 + 8) = 0;
  return a1;
}

void sub_20DC4FD64(void *a1)
{
  if (a1)
  {
    sub_20DC4FD64(*a1);
    sub_20DC4FD64(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_20DC4FDB0(uint64_t a1, size_t __sz)
{
  uint64_t v4 = (char *)operator new(__sz);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = &v4[__sz];
  bzero(v4, __sz);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 52) = 7;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 8) = v4;
  return a1;
}

_OWORD *sub_20DC4FE3C(uint64_t a1, const void **a2, _OWORD **a3)
{
  unint64_t v5 = (void **)sub_20DC4FEF8(a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = v5;
    uint64_t v6 = operator new(0x40uLL);
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((unsigned char *)v6 + 56) = 0;
    uint64_t v10 = v14;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v10;
    *unsigned int v7 = v6;
    uint64_t v11 = **(void **)a1;
    uint64_t v12 = (uint64_t *)v6;
    if (v11)
    {
      *(void *)a1 = v11;
      uint64_t v12 = (uint64_t *)*v7;
    }
    sub_20DC5007C(*(uint64_t **)(a1 + 8), v12);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

void *sub_20DC4FEF8(uint64_t a1, void *a2, const void **a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    int v6 = *((char *)a3 + 23);
    if (v6 >= 0) {
      size_t v7 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v7 = (size_t)a3[1];
    }
    if (v6 >= 0) {
      uint64_t v8 = a3;
    }
    else {
      uint64_t v8 = *a3;
    }
    do
    {
      while (1)
      {
        uint64_t v9 = v4;
        uint64_t v12 = (const void *)v4[4];
        uint64_t v10 = v4 + 4;
        uint64_t v11 = v12;
        size_t v13 = *((unsigned __int8 *)v10 + 23);
        if ((v13 & 0x80u) == 0) {
          uint64_t v14 = v10;
        }
        else {
          uint64_t v14 = v11;
        }
        size_t v15 = v10[1];
        if ((v13 & 0x80u) == 0) {
          size_t v16 = v13 & 0x7F;
        }
        else {
          size_t v16 = v10[1];
        }
        if (v16 >= v7) {
          size_t v17 = v7;
        }
        else {
          size_t v17 = v16;
        }
        int v18 = memcmp(v8, v14, v17);
        BOOL v19 = v7 < v16;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v4 = (void *)*v9;
        unint64_t v5 = v9;
        if (!*v9) {
          goto LABEL_31;
        }
      }
      if ((v13 & 0x80u) != 0) {
        size_t v13 = v15;
      }
      if (v7 >= v13) {
        size_t v20 = v13;
      }
      else {
        size_t v20 = v7;
      }
      int v21 = memcmp(v14, v8, v20);
      BOOL v22 = v13 < v7;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      unint64_t v5 = v9 + 1;
      uint64_t v4 = (void *)v9[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v9 = (void *)(a1 + 8);
  }
LABEL_31:
  *a2 = v9;
  return v5;
}

uint64_t sub_20DC50018(const void **a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  size_t v4 = *(void *)(a2 + 8);
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v9 = a1;
    a1 = (const void **)*a1;
    size_t v5 = (size_t)v9[1];
  }
  else
  {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  if (v4 >= v5) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = *(void *)(a2 + 8);
  }
  LODWORD(result) = memcmp(a1, v3, v6);
  if (v5 < v4) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = v4 < v5;
  }
  if (result) {
    return result;
  }
  else {
    return v8;
  }
}

uint64_t *sub_20DC5007C(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), size_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *size_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_20DC50214(char *a1)
{
  if (a1)
  {
    sub_20DC50214(*(void *)a1);
    sub_20DC50214(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void *sub_20DC50270(void *result, char *__src, char *a3, unint64_t a4)
{
  int v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61) {
LABEL_23:
    }
      abort();
    uint64_t result = operator new(8 * v11);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v11];
    size_t v12 = a3 - v6;
    if (v12) {
      uint64_t result = memcpy(result, v6, v12);
    }
    uint64_t v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v13 = (void **)(result + 1);
  uint64_t v14 = (unsigned char *)result[1];
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
  {
    size_t v12 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v17 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  size_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v12 = a3 - v16;
  if (v12)
  {
    size_t v17 = v9;
    __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v13 = &v9[v12];
  return result;
}

void sub_20DC503B0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    size_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0) {
          operator delete(*(v4 - 5));
        }
        v4 -= 9;
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20DC5043C(char *a1)
{
  if (a1)
  {
    sub_20DC5043C(*(void *)a1);
    sub_20DC5043C(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void sub_20DC5049C(void *a1)
{
  if (a1)
  {
    sub_20DC5049C(*a1);
    sub_20DC5049C(a1[1]);
    sub_20DC7549C((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_20DC504F4(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        sub_20DC446D0((uint64_t *)(v4 + 224), 0);
        sub_20DC515A0(v4 + 152);
        sub_20DC507CC(v4 + 72);
        int v6 = (void **)(v4 + 48);
        sub_20DC5847C(&v6);
        if (*(char *)(v4 + 47) < 0) {
          operator delete(*(void **)(v4 + 24));
        }
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x210568AF0](v4, 0x10B2C4058EA06FBLL);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_20DC50214(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20DC505D0(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        MEMORY[0x210568AF0](*v3, 0x1020C4001A1C0B8);
        uint64_t v2 = *(void **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(void **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_20DC50214(*(char **)(a1 + 8));
  return a1;
}

BOOL sub_20DC50648(flatbuffers::ClassicLocale *a1, char *a2, int a3, int a4)
{
  uint64_t v7 = a1;
  do
  {
    if (a3 > 0)
    {
      if (a4)
      {
        a1 = (flatbuffers::ClassicLocale *)__error();
        *(_DWORD *)a1 = 0;
      }
      size_t v17 = a2;
      unint64_t v15 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
      *uint64_t v7 = strtoll_l(a2, &v17, a3, v15);
      if (v17 == a2 || *v17 != 0) {
        goto LABEL_14;
      }
      return !a4 || !*__error();
    }
    uint64_t v8 = a2;
    do
    {
      int v10 = *v8++;
      char v9 = v10;
      unsigned int v11 = v10 - 48;
      if (v10) {
        BOOL v12 = v11 > 9;
      }
      else {
        BOOL v12 = 0;
      }
    }
    while (v12);
    if (v9 != 48) {
      break;
    }
    a3 = 16;
  }
  while ((*v8 & 0xDF) == 0x58);
  if (a4)
  {
    a1 = (flatbuffers::ClassicLocale *)__error();
    *(_DWORD *)a1 = 0;
  }
  size_t v17 = a2;
  uint64_t v13 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
  *uint64_t v7 = strtoll_l(a2, &v17, 10, v13);
  if (v17 == a2 || *v17)
  {
LABEL_14:
    BOOL result = 0;
    *uint64_t v7 = 0;
    return result;
  }
  return !a4 || !*__error();
}

uint64_t sub_20DC50774(uint64_t a1)
{
  sub_20DC507CC(a1 + 88);
  uint64_t v3 = (void **)(a1 + 24);
  sub_20DC5847C(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20DC507CC(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v5 = *v3;
      if (*v3)
      {
        if (*(char *)(v5 + 55) < 0) {
          operator delete(*(void **)(v5 + 32));
        }
        MEMORY[0x210568AF0](v5, 0x1032C40E9BF265ALL);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_20DC7562C(*(char **)(a1 + 8));
  return a1;
}

void sub_20DC508A8(std::string *a1)
{
  sub_20DC509FC(6, &v12, 0.0);
  uint64_t v2 = std::string::insert(&v12, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v13, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC509FC(6, &__p, 0.0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v15, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_20DC509FC@<X0>(int a1@<W0>, std::string *a2@<X8>, float a3@<S0>)
{
  sub_20DC50E1C((uint64_t)v28);
  uint64_t v6 = v29[0];
  *(_DWORD *)((char *)&v29[1] + *(void *)(v29[0] - 24)) = *(_DWORD *)((unsigned char *)&v29[1] + *(void *)(v29[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v29[2] + *(void *)(v6 - 24)) = a1;
  std::ostream::operator<<();
  uint64_t v7 = (flatbuffers::ClassicLocale *)std::stringbuf::str();
  char v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v9 = v8 < 0;
  int v10 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v8 >= 0) {
    int v10 = a2;
  }
  std::string::size_type size = v8 & 0x7F;
  if (v9) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  while (size)
  {
    int v12 = *((unsigned __int8 *)&v10[-1].__r_.__value_.__r.__words[2] + size-- + 7);
    if (v12 != 48)
    {
      if (size != -1)
      {
        BOOL v13 = v10->__r_.__value_.__s.__data_[size] == 46;
        uint64_t v14 = 1;
        if (v13) {
          uint64_t v14 = 2;
        }
        std::string::resize(a2, v14 + size, 0);
      }
      break;
    }
  }
  uint64_t v15 = MEMORY[0x263F8C2B8];
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v16 = (char *)a2;
  }
  else {
    size_t v16 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  v24[0] = v16;
  size_t v17 = (_xlocale *)flatbuffers::ClassicLocale::Get(v7);
  float v18 = strtof_l(v16, v24, v17);
  if (v24[0] == v16 || *v24[0]) {
    float v18 = 0.0;
  }
  if (v18 != a3)
  {
    sub_20DC50E1C((uint64_t)v24);
    *(_DWORD *)((char *)&v25[1] + *(void *)(v25[0] - 24)) |= 0x104u;
    std::ostream::operator<<();
    std::stringbuf::str();
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(a2->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v22;
    a2->__r_.__value_.__r.__words[2] = v23;
    v24[0] = *(char **)v15;
    uint64_t v19 = *(void *)(v15 + 72);
    *(char **)((char *)v24 + *((void *)v24[0] - 3)) = *(char **)(v15 + 64);
    v25[0] = v19;
    v25[1] = MEMORY[0x263F8C318] + 16;
    if (v26 < 0) {
      operator delete((void *)v25[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x210568AB0](&v27);
  }
  v28[0] = *(void *)v15;
  uint64_t v20 = *(void *)(v15 + 72);
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(v15 + 64);
  v29[0] = v20;
  v29[1] = MEMORY[0x263F8C318] + 16;
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x210568AB0](&v31);
}

uint64_t sub_20DC50E1C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 24;
  uint64_t v3 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v6 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v8;
  *(void *)(a1 + *(void *)(v8 - 24)) = v7;
  *(void *)(a1 + 8) = 0;
  BOOL v9 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v9, (void *)(a1 + 24));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v10 = v6[5];
  uint64_t v11 = v6[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v4 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v6[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v6[6];
  *(void *)a1 = v2;
  *(void *)(a1 + 128) = v3;
  *(void *)(a1 + 16) = v5;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

uint64_t sub_20DC510CC(flatbuffers::ClassicLocale *a1, char *a2)
{
  uint64_t v6 = a2;
  uint64_t v4 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
  *(float *)a1 = strtof_l(a2, &v6, v4);
  if (v6 != a2 && !*v6) {
    return 1;
  }
  uint64_t result = 0;
  *(_DWORD *)a1 = 0;
  return result;
}

uint64_t sub_20DC51148(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v2 - 24)) = a2[8];
  *(void *)(a1 + 16) = a2[9];
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();

  return std::iostream::~basic_iostream();
}

void sub_20DC51280(std::string *a1)
{
  sub_20DC509FC(6, &v12, -3.4028e38);
  uint64_t v2 = std::string::insert(&v12, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v13, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC509FC(6, &__p, 3.4028e38);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v15, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_20DC513DC(std::string *a1)
{
  sub_20DC4C328(12, &v12, -1.79769313e308);
  uint64_t v2 = std::string::insert(&v12, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v13, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC4C328(12, &__p, 1.79769313e308);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v15, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_20DC51538(uint64_t a1)
{
  sub_20DC507CC(a1 + 72);
  std::string::size_type v3 = (void **)(a1 + 48);
  sub_20DC5847C(&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20DC515A0(uint64_t a1)
{
  std::string::size_type v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 207) < 0) {
          operator delete(*(void **)(v4 + 184));
        }
        sub_20DC507CC(v4 + 72);
        uint64_t v6 = (void **)(v4 + 48);
        sub_20DC5847C(&v6);
        if (*(char *)(v4 + 47) < 0) {
          operator delete(*(void **)(v4 + 24));
        }
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x210568AF0](v4, 0x10B2C40559199D4);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    std::string::size_type v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_20DC50214(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20DC5167C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if (HIDWORD(a3)) {
    int v10 = 3;
  }
  else {
    int v10 = 2;
  }
  if (a3 >= 0x10000) {
    int v11 = v10;
  }
  else {
    int v11 = 1;
  }
  if (a3 < 0x100) {
    int v11 = 0;
  }
  if (*(_DWORD *)(a1 + 56) <= v11) {
    int v12 = v11;
  }
  else {
    int v12 = *(_DWORD *)(a1 + 56);
  }
  if (a6)
  {
    int v14 = sub_20DC52A3C(a6, *(void *)(a1 + 8) - *(void *)a1, 0);
    if (v12 <= v14) {
      int v12 = v14;
    }
    uint64_t v13 = 3;
  }
  else
  {
    uint64_t v13 = 1;
  }
  int v55 = (char **)a1;
  uint64_t v15 = *(void *)(a1 + 24);
  unint64_t v16 = (*(void *)(a1 + 32) - v15) >> 4;
  uint64_t v17 = 16 * a4;
  uint64_t v50 = *(char **)a1;
  uint64_t v51 = *(char **)(a1 + 8);
  if (v16 > a2)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(a1 + 8) - *(void *)a1;
    uint64_t v20 = v15 + 16 * a2;
    unint64_t v21 = v13 + a2;
    do
    {
      int v22 = sub_20DC52A3C(v20, v19, v21 + v18);
      if (v12 <= v22) {
        int v12 = v22;
      }
      v18 += a4;
      v20 += v17;
    }
    while (a2 + v18 < v16);
  }
  LOBYTE(__src) = 0;
  uint64_t v23 = (uint64_t)v55;
  sub_20DC777DC(v55, v51, (v50 - v51) & ((1 << v12) - 1), (char *)&__src);
  if (a6)
  {
    int v24 = v55[1];
    int64_t v25 = (1 << v12);
    uint64_t __src = v24 - &(*v55)[*(void *)a6];
    sub_20DC52ACC((uint64_t)v55, v24, (char *)&__src, (char *)&__src + v25, v25);
    uint64_t v23 = (uint64_t)v55;
    uint64_t __src = 1 << *(_DWORD *)(a6 + 12);
    sub_20DC52ACC((uint64_t)v55, v55[1], (char *)&__src, (char *)&__src + v25, v25);
  }
  else
  {
    int64_t v25 = (1 << v12);
  }
  uint64_t __src = a3;
  sub_20DC52ACC(v23, *(char **)(v23 + 8), (char *)&__src, (char *)&__src + v25, v25);
  uint64_t v26 = *(void *)(v23 + 24);
  uint64_t v27 = *(void *)(v23 + 32);
  unint64_t v52 = *(void *)v23;
  uint64_t v54 = *(void *)(v23 + 8);
  if (a2 < (v27 - v26) >> 4)
  {
    uint64_t v28 = 16 * a2;
    uint64_t v29 = v23;
    unint64_t v30 = a2;
    do
    {
      sub_20DC77738(v29, v26 + v28, (1 << v12));
      v30 += a4;
      uint64_t v26 = *(void *)(v29 + 24);
      uint64_t v27 = *(void *)(v29 + 32);
      v28 += v17;
    }
    while (v30 < (v27 - v26) >> 4);
    uint64_t v23 = v29;
  }
  if ((a5 & 1) == 0 && a2 < (v27 - v26) >> 4)
  {
    do
    {
      LODWORD(__src) = v12;
      uint64_t v31 = v26 + 16 * a2;
      int v32 = *(_DWORD *)(v31 + 8);
      p_src = (uint64_t *)(v31 + 12);
      BOOL v34 = v32 < 4 || v32 == 26;
      if (v34 && *(_DWORD *)p_src < v12) {
        p_src = &__src;
      }
      int v35 = *(_DWORD *)p_src | (4 * v32);
      uint64_t v37 = *(char **)(v23 + 8);
      unint64_t v36 = *(void *)(v23 + 16);
      if ((unint64_t)v37 >= v36)
      {
        unint64_t v39 = *(void *)v23;
        uint64_t v40 = &v37[-v39];
        uint64_t v41 = (uint64_t)&v37[-v39 + 1];
        if (v41 < 0) {
          abort();
        }
        unint64_t v42 = v36 - v39;
        if (2 * v42 > v41) {
          uint64_t v41 = 2 * v42;
        }
        if (v42 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v43 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v43 = v41;
        }
        if (v43) {
          unsigned int v44 = (char *)operator new(v43);
        }
        else {
          unsigned int v44 = 0;
        }
        int v45 = &v40[(void)v44];
        int v46 = &v40[(void)v44];
        *int v46 = v35;
        uint64_t v38 = v46 + 1;
        if (v37 == (char *)v39)
        {
          uint64_t v23 = (uint64_t)v55;
        }
        else
        {
          uint64_t v47 = &v37[~v39];
          do
          {
            char v48 = *--v37;
            (v47--)[(void)v44] = v48;
          }
          while (v37 != (char *)v39);
          uint64_t v23 = (uint64_t)v55;
          uint64_t v37 = *v55;
          int v45 = v44;
        }
        *(void *)uint64_t v23 = v45;
        *(void *)(v23 + 8) = v38;
        *(void *)(v23 + 16) = &v44[v43];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *uint64_t v37 = v35;
        uint64_t v38 = v37 + 1;
      }
      *(void *)(v23 + 8) = v38;
      a2 += a4;
      uint64_t v26 = *(void *)(v23 + 24);
    }
    while (a2 < (*(void *)(v23 + 32) - v26) >> 4);
  }
  return v54 - v52;
}

uint64_t sub_20DC51A40(uint64_t result, uint64_t a2, uint64_t **a3)
{
  if (result != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 32;
    if (result + 32 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = result;
      do
      {
        uint64_t v9 = v5;
        if (**a3 == (*a3)[1]) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = **a3;
        }
        uint64_t v11 = *(void *)(v8 + 32);
        uint64_t result = strcmp((const char *)(v10 + v11), (const char *)(v10 + *(void *)v8));
        if ((result & 0x80000000) != 0)
        {
          long long v17 = *(_OWORD *)(v8 + 40);
          uint64_t v18 = *(void *)(v8 + 56);
          uint64_t v12 = v7;
          while (1)
          {
            uint64_t v13 = v4 + v12;
            long long v14 = *(_OWORD *)(v4 + v12 + 16);
            *(_OWORD *)(v13 + 32) = *(_OWORD *)(v4 + v12);
            *(_OWORD *)(v13 + 48) = v14;
            if (!v12) {
              break;
            }
            if (**a3 == (*a3)[1]) {
              uint64_t v15 = 0;
            }
            else {
              uint64_t v15 = **a3;
            }
            uint64_t result = strcmp((const char *)(v15 + v11), (const char *)(v15 + *(void *)(v13 - 32)));
            v12 -= 32;
            if ((result & 0x80000000) == 0)
            {
              uint64_t v16 = v4 + v12 + 32;
              goto LABEL_16;
            }
          }
          uint64_t v16 = v4;
LABEL_16:
          *(void *)uint64_t v16 = v11;
          *(_OWORD *)(v16 + 8) = v17;
          *(void *)(v16 + 24) = v18;
        }
        uint64_t v5 = v9 + 32;
        v7 += 32;
        uint64_t v8 = v9;
      }
      while (v9 + 32 != a2);
    }
  }
  return result;
}

uint64_t sub_20DC51B80(uint64_t result, _OWORD *a2, uint64_t **a3)
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v4 = (_OWORD *)result;
    uint64_t v5 = (_OWORD *)(result + 32);
    if ((_OWORD *)(result + 32) != a2)
    {
      do
      {
        uint64_t v7 = v5;
        if (**a3 == (*a3)[1]) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = **a3;
        }
        uint64_t v9 = *((void *)v4 + 4);
        uint64_t result = strcmp((const char *)(v8 + v9), (const char *)(v8 + *(void *)v4));
        if ((result & 0x80000000) != 0)
        {
          long long v14 = *(_OWORD *)((char *)v4 + 40);
          uint64_t v15 = *((void *)v4 + 7);
          uint64_t v10 = v7;
          do
          {
            uint64_t v11 = v10 - 2;
            long long v12 = *(v10 - 1);
            *uint64_t v10 = *(v10 - 2);
            v10[1] = v12;
            if (**a3 == (*a3)[1]) {
              uint64_t v13 = 0;
            }
            else {
              uint64_t v13 = **a3;
            }
            uint64_t result = strcmp((const char *)(v13 + v9), (const char *)(v13 + *((void *)v10 - 8)));
            uint64_t v10 = v11;
          }
          while ((result & 0x80000000) != 0);
          *(void *)uint64_t v11 = v9;
          *(_OWORD *)((char *)v11 + 8) = v14;
          *((void *)v11 + 3) = v15;
        }
        uint64_t v5 = v7 + 2;
        uint64_t v4 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_20DC51C98(long long *a1, long long *a2, long long *a3, uint64_t **a4)
{
  if (**a4 == (*a4)[1]) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = **a4;
  }
  uint64_t v9 = (const char *)(v8 + *(void *)a2);
  int v10 = strcmp(v9, (const char *)(v8 + *(void *)a1));
  uint64_t result = strcmp((const char *)(v8 + *(void *)a3), v9);
  if (v10 < 0)
  {
    if ((result & 0x80000000) != 0)
    {
      long long v13 = *a1;
      long long v12 = a1[1];
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
LABEL_18:
      *a3 = v13;
      a3[1] = v12;
      return result;
    }
    long long v23 = *a1;
    long long v22 = a1[1];
    long long v24 = a2[1];
    *a1 = *a2;
    a1[1] = v24;
    *a2 = v23;
    a2[1] = v22;
    if (**a4 == (*a4)[1]) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = **a4;
    }
    uint64_t result = strcmp((const char *)(v25 + *(void *)a3), (const char *)(v25 + *(void *)a2));
    if ((result & 0x80000000) != 0)
    {
      long long v13 = *a2;
      long long v12 = a2[1];
      long long v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      goto LABEL_18;
    }
  }
  else if ((result & 0x80000000) != 0)
  {
    long long v16 = *a2;
    long long v15 = a2[1];
    long long v17 = a3[1];
    *a2 = *a3;
    a2[1] = v17;
    *a3 = v16;
    a3[1] = v15;
    uint64_t v18 = **a4 == (*a4)[1] ? 0 : **a4;
    uint64_t result = strcmp((const char *)(v18 + *(void *)a2), (const char *)(v18 + *(void *)a1));
    if ((result & 0x80000000) != 0)
    {
      long long v20 = *a1;
      long long v19 = a1[1];
      long long v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      *a2 = v20;
      a2[1] = v19;
    }
  }
  return result;
}

unint64_t sub_20DC51DD0(unint64_t a1, _OWORD *a2, uint64_t **a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)a1;
  long long v20 = *(_OWORD *)(a1 + 8);
  uint64_t v21 = *(void *)(a1 + 24);
  if (**a3 == (*a3)[1]) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = **a3;
  }
  if (strcmp((const char *)(v7 + v6), (const char *)(v7 + *((void *)a2 - 4))) < 0)
  {
    unint64_t v8 = a1;
    do
    {
      uint64_t v9 = *(void *)(v8 + 32);
      v8 += 32;
    }
    while ((strcmp((const char *)(v7 + v6), (const char *)(v7 + v9)) & 0x80000000) == 0);
  }
  else
  {
    unint64_t v10 = a1 + 32;
    do
    {
      unint64_t v8 = v10;
      if (v10 >= (unint64_t)v4) {
        break;
      }
      v10 += 32;
    }
    while ((strcmp((const char *)(v7 + v6), (const char *)(v7 + *(void *)v8)) & 0x80000000) == 0);
  }
  if (v8 < (unint64_t)v4)
  {
    do
    {
      uint64_t v11 = *((void *)v4 - 4);
      v4 -= 2;
    }
    while (strcmp((const char *)(v7 + v6), (const char *)(v7 + v11)) < 0);
  }
  while (v8 < (unint64_t)v4)
  {
    long long v18 = *(_OWORD *)v8;
    long long v19 = *(_OWORD *)(v8 + 16);
    long long v12 = v4[1];
    *(_OWORD *)unint64_t v8 = *v4;
    *(_OWORD *)(v8 + 16) = v12;
    *uint64_t v4 = v18;
    v4[1] = v19;
    if (**a3 == (*a3)[1]) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = **a3;
    }
    do
    {
      uint64_t v14 = *(void *)(v8 + 32);
      v8 += 32;
    }
    while ((strcmp((const char *)(v13 + v6), (const char *)(v13 + v14)) & 0x80000000) == 0);
    do
    {
      uint64_t v15 = *((void *)v4 - 4);
      v4 -= 2;
    }
    while (strcmp((const char *)(v13 + v6), (const char *)(v13 + v15)) < 0);
  }
  if (v8 - 32 != a1)
  {
    long long v16 = *(_OWORD *)(v8 - 16);
    *(_OWORD *)a1 = *(_OWORD *)(v8 - 32);
    *(_OWORD *)(a1 + 16) = v16;
  }
  *(void *)(v8 - 32) = v6;
  *(void *)(v8 - 8) = v21;
  *(_OWORD *)(v8 - 24) = v20;
  return v8;
}

__n128 sub_20DC51F6C(uint64_t *a1, _OWORD *a2, uint64_t **a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  __n128 v23 = *(__n128 *)(a1 + 1);
  uint64_t v24 = a1[3];
  if (**a3 == (*a3)[1]) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = **a3;
  }
  do
  {
    int v9 = strcmp((const char *)(v8 + a1[v6 + 4]), (const char *)(v8 + v7));
    v6 += 4;
  }
  while (v9 < 0);
  unint64_t v10 = (unint64_t)&a1[v6];
  if (v6 == 4)
  {
    do
    {
      if (v10 >= (unint64_t)a2) {
        break;
      }
      uint64_t v12 = *((void *)a2 - 4);
      a2 -= 2;
    }
    while ((strcmp((const char *)(v8 + v12), (const char *)(v8 + v7)) & 0x80000000) == 0);
  }
  else
  {
    do
    {
      uint64_t v11 = *((void *)a2 - 4);
      a2 -= 2;
    }
    while ((strcmp((const char *)(v8 + v11), (const char *)(v8 + v7)) & 0x80000000) == 0);
  }
  unint64_t v13 = (unint64_t)&a1[v6];
  if (v10 < (unint64_t)a2)
  {
    uint64_t v14 = a2;
    do
    {
      long long v15 = *(_OWORD *)v13;
      long long v22 = *(_OWORD *)(v13 + 16);
      long long v16 = v14[1];
      *(_OWORD *)unint64_t v13 = *v14;
      *(_OWORD *)(v13 + 16) = v16;
      *uint64_t v14 = v15;
      v14[1] = v22;
      if (**a3 == (*a3)[1]) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = **a3;
      }
      do
      {
        uint64_t v18 = *(void *)(v13 + 32);
        v13 += 32;
      }
      while (strcmp((const char *)(v17 + v18), (const char *)(v17 + v7)) < 0);
      do
      {
        uint64_t v19 = *((void *)v14 - 4);
        v14 -= 2;
      }
      while ((strcmp((const char *)(v17 + v19), (const char *)(v17 + v7)) & 0x80000000) == 0);
    }
    while (v13 < (unint64_t)v14);
  }
  if ((uint64_t *)(v13 - 32) != a1)
  {
    long long v20 = *(_OWORD *)(v13 - 16);
    *(_OWORD *)a1 = *(_OWORD *)(v13 - 32);
    *((_OWORD *)a1 + 1) = v20;
  }
  *(void *)(v13 - 32) = v7;
  __n128 result = v23;
  *(void *)(v13 - 8) = v24;
  *(__n128 *)(v13 - 24) = v23;
  return result;
}

BOOL sub_20DC52108(long long *a1, long long *a2, uint64_t **a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 2;
      if (**a3 == (*a3)[1]) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = **a3;
      }
      if (strcmp((const char *)(v9 + *((void *)a2 - 4)), (const char *)(v9 + *(void *)a1)) < 0)
      {
        long long v11 = *a1;
        long long v10 = a1[1];
        long long v12 = v8[1];
        *a1 = *v8;
        a1[1] = v12;
        *uint64_t v8 = v11;
        v8[1] = v10;
      }
      return 1;
    case 3:
      sub_20DC51C98(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_20DC52358((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_20DC52450((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      unint64_t v13 = a1 + 4;
      sub_20DC51C98(a1, a1 + 2, a1 + 4, a3);
      uint64_t v14 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    uint64_t v17 = **a3 == (*a3)[1] ? 0 : **a3;
    uint64_t v18 = *(void *)v14;
    if (strcmp((const char *)(v17 + *(void *)v14), (const char *)(v17 + *(void *)v13)) < 0)
    {
      long long v24 = *(long long *)((char *)v14 + 8);
      uint64_t v25 = *((void *)v14 + 3);
      uint64_t v19 = v15;
      while (1)
      {
        long long v20 = (char *)a1 + v19;
        long long v21 = *(long long *)((char *)a1 + v19 + 80);
        *((_OWORD *)v20 + 6) = *(long long *)((char *)a1 + v19 + 64);
        *((_OWORD *)v20 + 7) = v21;
        if (v19 == -64) {
          break;
        }
        if (**a3 == (*a3)[1]) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = **a3;
        }
        v19 -= 32;
        if ((strcmp((const char *)(v22 + v18), (const char *)(v22 + *((void *)v20 + 4))) & 0x80000000) == 0)
        {
          uint64_t v23 = (uint64_t)a1 + v19 + 96;
          goto LABEL_21;
        }
      }
      uint64_t v23 = (uint64_t)a1;
LABEL_21:
      *(void *)uint64_t v23 = v18;
      *(_OWORD *)(v23 + 8) = v24;
      *(void *)(v23 + 24) = v25;
      if (++v16 == 8) {
        return v14 + 2 == a2;
      }
    }
    unint64_t v13 = v14;
    v15 += 32;
    v14 += 2;
    if (v14 == a2) {
      return 1;
    }
  }
}

__n128 sub_20DC52358(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t **a5)
{
  sub_20DC51C98((long long *)a1, a2, a3, a5);
  if (**a5 == (*a5)[1]) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = **a5;
  }
  if (strcmp((const char *)(v10 + *(void *)a4), (const char *)(v10 + *(void *)a3)) < 0)
  {
    long long v13 = *a3;
    long long v12 = a3[1];
    long long v14 = a4[1];
    *a3 = *a4;
    a3[1] = v14;
    *a4 = v13;
    a4[1] = v12;
    uint64_t v15 = **a5 == (*a5)[1] ? 0 : **a5;
    if (strcmp((const char *)(v15 + *(void *)a3), (const char *)(v15 + *(void *)a2)) < 0)
    {
      long long v17 = *a2;
      long long v16 = a2[1];
      long long v18 = a3[1];
      *a2 = *a3;
      a2[1] = v18;
      *a3 = v17;
      a3[1] = v16;
      if (**a5 == (*a5)[1]) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = **a5;
      }
      if (strcmp((const char *)(v19 + *(void *)a2), (const char *)(v19 + *(void *)a1)) < 0)
      {
        long long v20 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        long long v21 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v21;
        *a2 = v20;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 sub_20DC52450(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t **a6)
{
  sub_20DC52358(a1, a2, a3, a4, a6);
  if (**a6 == (*a6)[1]) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = **a6;
  }
  if (strcmp((const char *)(v12 + *(void *)a5), (const char *)(v12 + *(void *)a4)) < 0)
  {
    long long v15 = *a4;
    long long v14 = a4[1];
    long long v16 = a5[1];
    *a4 = *a5;
    a4[1] = v16;
    *a5 = v15;
    a5[1] = v14;
    uint64_t v17 = **a6 == (*a6)[1] ? 0 : **a6;
    if (strcmp((const char *)(v17 + *(void *)a4), (const char *)(v17 + *(void *)a3)) < 0)
    {
      long long v19 = *a3;
      long long v18 = a3[1];
      long long v20 = a4[1];
      *a3 = *a4;
      a3[1] = v20;
      *a4 = v19;
      a4[1] = v18;
      uint64_t v21 = **a6 == (*a6)[1] ? 0 : **a6;
      if (strcmp((const char *)(v21 + *(void *)a3), (const char *)(v21 + *(void *)a2)) < 0)
      {
        long long v23 = *a2;
        long long v22 = a2[1];
        long long v24 = a3[1];
        *a2 = *a3;
        a2[1] = v24;
        *a3 = v23;
        a3[1] = v22;
        if (**a6 == (*a6)[1]) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = **a6;
        }
        if (strcmp((const char *)(v25 + *(void *)a2), (const char *)(v25 + *(void *)a1)) < 0)
        {
          long long v26 = *(_OWORD *)a1;
          __n128 result = *(__n128 *)(a1 + 16);
          long long v27 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v27;
          *a2 = v26;
          a2[1] = (__int128)result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20DC52584(uint64_t result, _OWORD *a2, _OWORD *a3, uint64_t **a4)
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = result;
    uint64_t v8 = (uint64_t)a2 - result;
    uint64_t v9 = ((uint64_t)a2 - result) >> 5;
    if ((uint64_t)a2 - result >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(result + 32 * v10);
      do
      {
        __n128 result = sub_20DC52834(v7, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      long long v13 = v6;
      do
      {
        if (**a4 == (*a4)[1]) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = **a4;
        }
        __n128 result = strcmp((const char *)(v14 + *(void *)v13), (const char *)(v14 + *(void *)v7));
        if ((result & 0x80000000) != 0)
        {
          long long v16 = *v13;
          long long v15 = v13[1];
          long long v17 = *(_OWORD *)(v7 + 16);
          *long long v13 = *(_OWORD *)v7;
          v13[1] = v17;
          *(_OWORD *)uint64_t v7 = v16;
          *(_OWORD *)(v7 + 16) = v15;
          __n128 result = sub_20DC52834(v7, a4, v9, (uint64_t *)v7);
        }
        v13 += 2;
      }
      while (v13 != a3);
    }
    if (v8 >= 33)
    {
      do
      {
        uint64_t v18 = 0;
        long long v38 = *(_OWORD *)v7;
        long long v39 = *(_OWORD *)(v7 + 16);
        uint64_t v19 = v9 - 2;
        if (v9 < 2) {
          uint64_t v19 = v9 - 1;
        }
        uint64_t v20 = v19 >> 1;
        uint64_t v21 = (_OWORD *)v7;
        do
        {
          uint64_t v22 = (uint64_t)&v21[2 * v18 + 2];
          uint64_t v23 = (2 * v18) | 1;
          uint64_t v24 = 2 * v18 + 2;
          if (v24 < v9)
          {
            uint64_t v25 = **a4 == (*a4)[1] ? 0 : **a4;
            __n128 result = strcmp((const char *)(v25 + *(void *)v22), (const char *)(v25 + *(void *)(v22 + 32)));
            if ((int)result < 0)
            {
              v22 += 32;
              uint64_t v23 = v24;
            }
          }
          long long v26 = *(_OWORD *)(v22 + 16);
          *uint64_t v21 = *(_OWORD *)v22;
          v21[1] = v26;
          uint64_t v21 = (_OWORD *)v22;
          uint64_t v18 = v23;
        }
        while (v23 <= v20);
        v6 -= 2;
        if ((_OWORD *)v22 == v6)
        {
          *(_OWORD *)uint64_t v22 = v38;
          *(_OWORD *)(v22 + 16) = v39;
          uint64_t v29 = v9 - 1;
        }
        else
        {
          long long v27 = v6[1];
          *(_OWORD *)uint64_t v22 = *v6;
          *(_OWORD *)(v22 + 16) = v27;
          *uint64_t v6 = v38;
          v6[1] = v39;
          uint64_t v28 = v22 - v7 + 32;
          uint64_t v29 = v9 - 1;
          if (v28 >= 33)
          {
            unint64_t v30 = (((unint64_t)v28 >> 5) - 2) >> 1;
            uint64_t v31 = v7 + 32 * v30;
            uint64_t v32 = **a4 == (*a4)[1] ? 0 : **a4;
            uint64_t v33 = *(void *)v22;
            __n128 result = strcmp((const char *)(v32 + *(void *)v31), (const char *)(v32 + *(void *)v22));
            if ((result & 0x80000000) != 0)
            {
              uint64_t v41 = *(void *)(v22 + 24);
              long long v40 = *(_OWORD *)(v22 + 8);
              do
              {
                BOOL v34 = (_OWORD *)v22;
                uint64_t v22 = v31;
                long long v35 = *(_OWORD *)(v31 + 16);
                *BOOL v34 = *(_OWORD *)v31;
                v34[1] = v35;
                if (!v30) {
                  break;
                }
                unint64_t v30 = (v30 - 1) >> 1;
                uint64_t v31 = v7 + 32 * v30;
                uint64_t v36 = **a4 == (*a4)[1] ? 0 : **a4;
                __n128 result = strcmp((const char *)(v36 + *(void *)v31), (const char *)(v36 + v33));
              }
              while ((result & 0x80000000) != 0);
              *(void *)uint64_t v22 = v33;
              *(_OWORD *)(v22 + 8) = v40;
              *(void *)(v22 + 24) = v41;
            }
          }
        }
        BOOL v37 = v9 <= 2;
        uint64_t v9 = v29;
      }
      while (!v37);
    }
  }
  return result;
}

uint64_t sub_20DC52834(uint64_t result, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = a4;
    uint64_t v5 = result;
    if ((uint64_t)((unint64_t)(a3 - 2) >> 1) >= ((uint64_t)a4 - result) >> 5)
    {
      uint64_t v6 = a3;
      uint64_t v7 = a2;
      unint64_t v37 = (unint64_t)(a3 - 2) >> 1;
      uint64_t v8 = ((uint64_t)a4 - result) >> 4;
      uint64_t v9 = v8 + 1;
      unint64_t v10 = (uint64_t *)(result + 32 * (v8 + 1));
      uint64_t v11 = v8 + 2;
      uint64_t v12 = *a2;
      uint64_t v13 = **a2;
      if (v11 >= a3)
      {
        uint64_t v17 = v12[1];
        uint64_t v18 = *v10;
      }
      else
      {
        uint64_t v38 = v12[1];
        if (v13 == v38) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = **a2;
        }
        uint64_t v34 = *v10;
        uint64_t v15 = v10[4];
        int v16 = strcmp((const char *)(v14 + *v10), (const char *)(v14 + v15));
        uint64_t v17 = v38;
        uint64_t v18 = v34;
        if (v16 < 0)
        {
          uint64_t v18 = v15;
          v10 += 4;
          uint64_t v9 = v11;
        }
      }
      if (v13 == v17) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v13;
      }
      uint64_t v39 = *v4;
      __n128 result = strcmp((const char *)(v19 + v18), (const char *)(v19 + *v4));
      int64_t v20 = v37;
      if ((result & 0x80000000) == 0)
      {
        long long v40 = *(_OWORD *)(v4 + 1);
        uint64_t v41 = v4[3];
        uint64_t v35 = v5;
        uint64_t v36 = v6;
        do
        {
          uint64_t v21 = v4;
          uint64_t v4 = v10;
          long long v22 = *((_OWORD *)v10 + 1);
          *uint64_t v21 = *(_OWORD *)v10;
          v21[1] = v22;
          if (v20 < v9) {
            break;
          }
          uint64_t v23 = (2 * v9) | 1;
          unint64_t v10 = (uint64_t *)(v5 + 32 * v23);
          uint64_t v9 = 2 * v9 + 2;
          uint64_t v24 = *v7;
          uint64_t v25 = **v7;
          if (v9 >= v6)
          {
            uint64_t v26 = v24[1];
            uint64_t v32 = *v10;
            uint64_t v9 = v23;
          }
          else
          {
            uint64_t v26 = v24[1];
            if (v25 == v26) {
              uint64_t v27 = 0;
            }
            else {
              uint64_t v27 = **v7;
            }
            uint64_t v28 = v7;
            uint64_t v29 = *v10;
            uint64_t v30 = v10[4];
            int v31 = strcmp((const char *)(v27 + *v10), (const char *)(v27 + v30));
            if (v31 >= 0) {
              uint64_t v32 = v29;
            }
            else {
              uint64_t v32 = v30;
            }
            uint64_t v7 = v28;
            uint64_t v6 = v36;
            int64_t v20 = v37;
            if (v31 < 0) {
              v10 += 4;
            }
            uint64_t v5 = v35;
            if (v31 >= 0) {
              uint64_t v9 = v23;
            }
          }
          uint64_t v33 = v25 == v26 ? 0 : v25;
          __n128 result = strcmp((const char *)(v33 + v32), (const char *)(v33 + v39));
        }
        while ((result & 0x80000000) == 0);
        *uint64_t v4 = v39;
        v4[3] = v41;
        *(_OWORD *)(v4 + 1) = v40;
      }
    }
  }
  return result;
}

uint64_t sub_20DC52A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 8);
  BOOL v4 = v3 < 4 || v3 == 26;
  if (v4) {
    return *(unsigned int *)(a1 + 12);
  }
  uint64_t v6 = a2 - *(void *)a1;
  for (unint64_t i = 1; ; i *= 2)
  {
    unint64_t v8 = v6 + i * a3 + ((i - 1) & -a2);
    if (v8 >= 0x100)
    {
      if (v8 >= 0x10000) {
        uint64_t result = HIDWORD(v8) ? 3 : 2;
      }
      else {
        uint64_t result = 1;
      }
    }
    else
    {
      uint64_t result = 0;
    }
    if (1 << result == i) {
      break;
    }
    BOOL v9 = i >= 4;
    BOOL v4 = i == 4;
    if (!v4 && v9) {
      return 3;
    }
  }
  return result;
}

char *sub_20DC52ACC(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      abort();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      uint64_t v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      uint64_t v17 = 0;
    }
    uint64_t v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    uint64_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      unint64_t v10 = *(char **)(a1 + 8);
      uint64_t v28 = v17;
    }
    uint64_t v30 = &v27[a5];
    int v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    uint64_t v19 = &__src[a5];
    uint64_t v21 = *(char **)(a1 + 8);
LABEL_17:
    long long v22 = &v5[a5];
    uint64_t v23 = &v21[-a5];
    uint64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      uint64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  uint64_t v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  uint64_t v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

_OWORD *sub_20DC52CB4(void **a1, _OWORD *a2)
{
  int v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = (v2 - (unsigned char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_20DC4F504();
    }
    unint64_t v10 = (char *)operator new(16 * v9);
  }
  else
  {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[16 * v4];
  *(_OWORD *)uint64_t v11 = *a2;
  uint64_t v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      *((_OWORD *)v11 - 1) = *((_OWORD *)v2 - 1);
      v11 -= 16;
      v2 -= 16;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

uint64_t sub_20DC52D9C(flatbuffers::ClassicLocale *a1, char *a2)
{
  uint64_t v6 = a2;
  uint64_t v4 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
  *(double *)a1 = strtod_l(a2, &v6, v4);
  if (v6 != a2 && !*v6) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)a1 = 0;
  return result;
}

void sub_20DC52E18(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    int v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (char *)*((void *)v3 + 1);
        if (v3[39] < 0) {
          operator delete(*((void **)v3 + 2));
        }
        operator delete(v3);
        int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t *sub_20DC52E9C(uint64_t *result, uint64_t a2, int a3)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = result;
  if ((unint64_t)result[9] <= 3) {
    result[9] = 4;
  }
  uint64_t v5 = result[4];
  uint64_t v6 = result[5];
  uint64_t v7 = result[6];
  unint64_t v8 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  if (v7 - result[7] < v8)
  {
    unint64_t v21 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
    int v20 = a3;
    uint64_t result = (uint64_t *)sub_20DC4F8B0(result, v21);
    unint64_t v8 = v21;
    a3 = v20;
    v4[6] -= v21;
  }
  else
  {
    uint64_t v9 = v7 - v8;
    result[6] = v9;
    if (!v8) {
      goto LABEL_9;
    }
  }
  uint64_t v10 = 0;
  do
    *(unsigned char *)(v4[6] + v10++) = 0;
  while (v8 != v10);
  uint64_t v6 = v4[5];
  uint64_t v9 = v4[6];
  uint64_t v5 = v4[4];
LABEL_9:
  int v11 = v6 - v9 + v5 - a3;
  int v12 = v11 + 4;
  if (v11 == -4 && !*((unsigned char *)v4 + 80)) {
    return result;
  }
  if ((unint64_t)v4[9] <= 3) {
    v4[9] = 4;
  }
  unint64_t v13 = ((_BYTE)v9 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  unint64_t v14 = (unint64_t *)v4[7];
  if (v9 - (uint64_t)v14 < v13)
  {
    unint64_t v22 = v13;
    uint64_t result = (uint64_t *)sub_20DC4F8B0(v4, v13);
    unint64_t v13 = v22;
    v4[6] -= v22;
LABEL_15:
    uint64_t v16 = 0;
    do
      *(unsigned char *)(v4[6] + v16++) = 0;
    while (v13 != v16);
    unint64_t v15 = v4[6];
    unint64_t v14 = (unint64_t *)v4[7];
    goto LABEL_18;
  }
  unint64_t v15 = v9 - v13;
  v4[6] = v9 - v13;
  if (v13) {
    goto LABEL_15;
  }
LABEL_18:
  if (v15 - (unint64_t)v14 <= 3)
  {
    uint64_t result = (uint64_t *)sub_20DC4F8B0(v4, 4uLL);
    unint64_t v15 = v4[6];
    unint64_t v14 = (unint64_t *)v4[7];
  }
  *(_DWORD *)(v15 - 4) = v12;
  uint64_t v17 = v15 - 4;
  v4[6] = v17;
  uint64_t v18 = v4[4] - v17 + v4[5];
  if ((unint64_t)(v17 - (void)v14) <= 7)
  {
    uint64_t result = (uint64_t *)sub_20DC4F8B0(v4, 8uLL);
    unint64_t v14 = (unint64_t *)v4[7];
  }
  *unint64_t v14 = v18 | (unint64_t)(a2 << 32);
  v4[7] += 8;
  ++*((_DWORD *)v4 + 16);
  unsigned int v19 = *((unsigned __int16 *)v4 + 34);
  if (v19 <= a2) {
    LOWORD(v19) = a2;
  }
  *((_WORD *)v4 + 34) = v19;
  return result;
}

uint64_t sub_20DC5308C(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = (unsigned int *)result;
  while (2)
  {
    uint64_t v113 = a2 - 2;
    uint64_t v116 = a2 - 1;
    unint64_t v112 = a2 - 3;
    uint64_t v10 = v9;
    uint64_t v11 = a3;
    uint64_t v121 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v12 = (char *)a2 - (char *)v10;
          uint64_t v13 = a2 - v10;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v51 = *(a2 - 1);
                uint64_t v52 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                uint64_t v53 = *v9;
                uint64_t result = sub_20DC53C40((int *)(v52 - v51), (int *)(v52 - v53));
                if (result)
                {
                  unsigned int *v9 = v51;
                  *(a2 - 1) = v53;
                }
                break;
              case 3:
                uint64_t v54 = *(void *)(*(void *)a3 + 32);
                uint64_t v55 = *(void *)(*(void *)a3 + 40);
                uint64_t result = sub_20DC53978(v9, v9 + 1, v116, v54, v55);
                break;
              case 4:
                uint64_t result = sub_20DC53CE0(v9, v9 + 1, v9 + 2, v116, a3);
                break;
              case 5:
                uint64_t result = sub_20DC53DA0(v9, v9 + 1, v9 + 2, v9 + 3, v116, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            uint64_t v56 = v9 + 1;
            BOOL v58 = v9 == a2 || v56 == a2;
            if (a5)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                uint64_t v60 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                unsigned int v61 = v9;
                do
                {
                  uint64_t v62 = v9;
                  uint64_t v64 = *v61;
                  uint64_t v63 = v61[1];
                  unsigned int v61 = v56;
                  uint64_t result = sub_20DC53C40((int *)(v60 - v63), (int *)(v60 - v64));
                  if (result)
                  {
                    uint64_t v65 = v59;
                    while (1)
                    {
                      *(unsigned int *)((char *)v62 + v65 + 4) = v64;
                      if (!v65) {
                        break;
                      }
                      uint64_t v64 = *(unsigned int *)((char *)v62 + v65 - 4);
                      uint64_t result = sub_20DC53C40((int *)(v60 - v63), (int *)(v60 - v64));
                      v65 -= 4;
                      if ((result & 1) == 0)
                      {
                        uint64_t v66 = (unsigned int *)((char *)v62 + v65 + 4);
                        goto LABEL_83;
                      }
                    }
                    uint64_t v66 = v62;
LABEL_83:
                    *uint64_t v66 = v63;
                  }
                  uint64_t v56 = v61 + 1;
                  v59 += 4;
                  uint64_t v9 = v62;
                }
                while (v61 + 1 != a2);
              }
            }
            else if (!v58)
            {
              uint64_t v108 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
              do
              {
                uint64_t v110 = *v9;
                uint64_t v109 = v9[1];
                uint64_t v9 = v56;
                uint64_t result = sub_20DC53C40((int *)(v108 - v109), (int *)(v108 - v110));
                if (result)
                {
                  uint64_t v111 = v9;
                  do
                  {
                    *uint64_t v111 = v110;
                    uint64_t v110 = *(v111 - 2);
                    uint64_t result = sub_20DC53C40((int *)(v108 - v109), (int *)(v108 - v110));
                    --v111;
                  }
                  while ((result & 1) != 0);
                  *uint64_t v111 = v109;
                }
                uint64_t v56 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v9 != a2)
            {
              int64_t v124 = v9;
              int64_t v67 = (unint64_t)(v13 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = *(void *)a3;
                  int64_t v117 = v69;
                  uint64_t v71 = (2 * v69) | 1;
                  uint64_t v72 = &v124[v71];
                  uint64_t v73 = 2 * v69 + 2;
                  if (v73 < v13)
                  {
                    uint64_t v114 = *v72;
                    uint64_t v77 = *(void *)(v70 + 32);
                    uint64_t v76 = *(void *)(v70 + 40);
                    uint64_t v75 = v72[1];
                    BOOL v74 = sub_20DC53C40((int *)(v76 + v77 - v114), (int *)(v76 + v77 - v75));
                    if (v74) {
                      ++v72;
                    }
                    else {
                      LODWORD(v75) = v114;
                    }
                    if (v74) {
                      uint64_t v71 = v73;
                    }
                  }
                  else
                  {
                    LODWORD(v75) = *v72;
                    uint64_t v77 = *(void *)(v70 + 32);
                    uint64_t v76 = *(void *)(v70 + 40);
                  }
                  int64_t v69 = v117;
                  uint64_t v78 = &v124[v117];
                  uint64_t v79 = v76 + v77;
                  uint64_t v115 = *v78;
                  uint64_t v80 = (int *)(v79 - v115);
                  uint64_t result = sub_20DC53C40((int *)(v79 - v75), (int *)(v79 - v115));
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      *uint64_t v78 = v75;
                      uint64_t v78 = v72;
                      if (v67 < v71) {
                        break;
                      }
                      uint64_t v81 = (2 * v71) | 1;
                      uint64_t v72 = &v124[v81];
                      uint64_t v71 = 2 * v71 + 2;
                      if (v71 < v13)
                      {
                        uint64_t v75 = *v72;
                        unsigned int v82 = (int *)(v79 - v75);
                        uint64_t v83 = v80;
                        uint64_t v84 = v79;
                        uint64_t v85 = v72[1];
                        BOOL v86 = sub_20DC53C40(v82, (int *)(v84 - v85));
                        if (v86) {
                          LODWORD(v75) = v85;
                        }
                        uint64_t v79 = v84;
                        uint64_t v80 = v83;
                        if (v86) {
                          ++v72;
                        }
                        int64_t v67 = (unint64_t)(v13 - 2) >> 1;
                        a2 = v121;
                        if (!v86) {
                          uint64_t v71 = v81;
                        }
                      }
                      else
                      {
                        LODWORD(v75) = *v72;
                        uint64_t v71 = v81;
                      }
                      uint64_t result = sub_20DC53C40((int *)(v79 - v75), v80);
                    }
                    while (!result);
                    int64_t v69 = v117;
                    *uint64_t v78 = v115;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              uint64_t v87 = v124;
              do
              {
                unint64_t v122 = a2;
                uint64_t v88 = 0;
                unsigned int v118 = *v87;
                uint64_t v89 = *(void *)a3;
                uint64_t v90 = v13 - 2;
                if (v13 < 2) {
                  uint64_t v90 = v13 - 1;
                }
                uint64_t v91 = v90 >> 1;
                do
                {
                  unint64_t v92 = &v87[v88 + 1];
                  uint64_t v93 = (2 * v88) | 1;
                  uint64_t v94 = 2 * v88 + 2;
                  if (v94 < v13)
                  {
                    uint64_t v95 = *v92;
                    uint64_t v96 = *(void *)(v89 + 40) + *(void *)(v89 + 32);
                    uint64_t v97 = v92[1];
                    uint64_t result = sub_20DC53C40((int *)(v96 - v95), (int *)(v96 - v97));
                    if (result) {
                      unsigned int v98 = v97;
                    }
                    else {
                      unsigned int v98 = v95;
                    }
                    if (result)
                    {
                      ++v92;
                      uint64_t v88 = v94;
                    }
                    else
                    {
                      uint64_t v88 = v93;
                    }
                  }
                  else
                  {
                    unsigned int v98 = *v92;
                    uint64_t v88 = (2 * v88) | 1;
                  }
                  *uint64_t v87 = v98;
                  uint64_t v87 = v92;
                }
                while (v88 <= v91);
                uint64_t v99 = v122 - 1;
                if (v92 == v122 - 1)
                {
                  uint64_t v106 = v122 - 1;
                  unsigned int *v92 = v118;
                }
                else
                {
                  unsigned int *v92 = *v99;
                  uint64_t v106 = v122 - 1;
                  *uint64_t v99 = v118;
                  uint64_t v100 = (char *)v92 - (char *)v124 + 4;
                  if (v100 >= 5)
                  {
                    unint64_t v101 = (((unint64_t)v100 >> 2) - 2) >> 1;
                    unint64_t v102 = &v124[v101];
                    uint64_t v103 = *v102;
                    uint64_t v104 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                    uint64_t v105 = *v92;
                    uint64_t result = sub_20DC53C40((int *)(v104 - v103), (int *)(v104 - v105));
                    if (result)
                    {
                      do
                      {
                        unsigned int *v92 = v103;
                        unint64_t v92 = v102;
                        if (!v101) {
                          break;
                        }
                        unint64_t v101 = (v101 - 1) >> 1;
                        unint64_t v102 = &v124[v101];
                        uint64_t v103 = *v102;
                        uint64_t result = sub_20DC53C40((int *)(v104 - v103), (int *)(v104 - v105));
                      }
                      while ((result & 1) != 0);
                      unsigned int *v92 = v105;
                    }
                  }
                }
                BOOL v107 = v13-- <= 2;
                a2 = v106;
                uint64_t v87 = v124;
              }
              while (!v107);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          unint64_t v15 = &v9[(unint64_t)v13 >> 1];
          uint64_t v16 = *(void *)(*(void *)v11 + 32);
          uint64_t v17 = *(void *)(*(void *)v11 + 40);
          if ((unint64_t)v12 < 0x201)
          {
            sub_20DC53978(v15, v9, v116, v16, v17);
          }
          else
          {
            sub_20DC53978(v9, v15, v116, v16, v17);
            sub_20DC53978(v9 + 1, v15 - 1, v113, *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            sub_20DC53978(v9 + 2, &v9[v14 + 1], v112, *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            sub_20DC53978(v15 - 1, v15, &v9[v14 + 1], *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            unsigned int v18 = *v9;
            unsigned int *v9 = *v15;
            *unint64_t v15 = v18;
          }
          --a4;
          uint64_t v19 = *(void *)v11;
          int v20 = (unsigned int *)*v9;
          uint64_t v123 = a4;
          if (a5) {
            break;
          }
          uint64_t v22 = *(void *)(v19 + 32);
          uint64_t v21 = *(void *)(v19 + 40);
          uint64_t v23 = v21 + v22;
          uint64_t v24 = (int *)(v21 + v22 - (void)v20);
          if (sub_20DC53C40((int *)(v21 + v22 - *(v9 - 1)), v24)) {
            goto LABEL_13;
          }
          uint64_t result = sub_20DC53C40((int *)(v21 + v22 - (void)v20), (int *)(v23 - *v116));
          if (result)
          {
            uint64_t v10 = v9;
            do
            {
              unsigned int v42 = v10[1];
              ++v10;
              uint64_t result = sub_20DC53C40((int *)(v21 + v22 - (void)v20), (int *)(v23 - v42));
            }
            while ((result & 1) == 0);
          }
          else
          {
            size_t v43 = v9 + 1;
            do
            {
              uint64_t v10 = v43;
              if (v43 >= a2) {
                break;
              }
              ++v43;
              uint64_t result = sub_20DC53C40(v24, (int *)(v23 - *v10));
            }
            while (!result);
          }
          unsigned int v44 = a2;
          if (v10 < a2)
          {
            unsigned int v44 = a2;
            do
            {
              unsigned int v45 = *--v44;
              uint64_t result = sub_20DC53C40(v24, (int *)(v23 - v45));
            }
            while ((result & 1) != 0);
          }
          if (v10 < v44)
          {
            unsigned int v46 = *v10;
            unsigned int v47 = *v44;
            do
            {
              *uint64_t v10 = v47;
              *unsigned int v44 = v46;
              do
              {
                unsigned int v48 = v10[1];
                ++v10;
                unsigned int v46 = v48;
              }
              while (!sub_20DC53C40(v24, (int *)(v23 - v48)));
              do
              {
                unsigned int v49 = *--v44;
                unsigned int v47 = v49;
                uint64_t result = sub_20DC53C40(v24, (int *)(v23 - v49));
              }
              while ((result & 1) != 0);
            }
            while (v10 < v44);
          }
          uint64_t v50 = v10 - 1;
          BOOL v5 = v10 - 1 >= v9;
          BOOL v6 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            unsigned int *v9 = *v50;
          }
          a5 = 0;
          *uint64_t v50 = v20;
          uint64_t v11 = a3;
        }
        uint64_t v22 = *(void *)(v19 + 32);
        uint64_t v21 = *(void *)(v19 + 40);
LABEL_13:
        uint64_t v25 = 0;
        uint64_t v26 = v21 + v22;
        uint64_t v27 = (int *)(v21 + v22 - (void)v20);
        do
          uint64_t v28 = v9[++v25];
        while (sub_20DC53C40((int *)(v26 - v28), v27));
        size_t v29 = &v9[v25];
        uint64_t v30 = v121;
        if (v25 == 1)
        {
          uint64_t v30 = v121;
          do
          {
            if (v29 >= v30) {
              break;
            }
            unsigned int v32 = *--v30;
          }
          while (!sub_20DC53C40((int *)(v26 - v32), v27));
        }
        else
        {
          do
            unsigned int v31 = *--v30;
          while (!sub_20DC53C40((int *)(v26 - v31), v27));
        }
        if (v29 >= v30)
        {
          long long v40 = v29 - 1;
          a4 = v123;
        }
        else
        {
          int v33 = (int)v20;
          int v20 = v9;
          unsigned int v34 = *v30;
          unsigned int v35 = v28;
          uint64_t v36 = v29;
          unint64_t v37 = v30;
          do
          {
            unsigned int *v36 = v34;
            *unint64_t v37 = v35;
            do
            {
              unsigned int v38 = v36[1];
              ++v36;
              unsigned int v35 = v38;
            }
            while (sub_20DC53C40((int *)(v26 - v38), v27));
            do
            {
              unsigned int v39 = *--v37;
              unsigned int v34 = v39;
            }
            while (!sub_20DC53C40((int *)(v26 - v39), v27));
          }
          while (v36 < v37);
          long long v40 = v36 - 1;
          uint64_t v9 = v20;
          a4 = v123;
          LODWORD(v20) = v33;
        }
        uint64_t v11 = a3;
        a2 = v121;
        if (v40 != v9) {
          unsigned int *v9 = *v40;
        }
        *long long v40 = v20;
        if (v29 >= v30) {
          break;
        }
LABEL_34:
        uint64_t result = sub_20DC5308C(v9, v40, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v10 = v40 + 1;
      }
      BOOL v41 = sub_20DC53A58(v9, v40, a3);
      uint64_t v10 = v40 + 1;
      uint64_t result = sub_20DC53A58(v40 + 1, v121, a3);
      if (result) {
        break;
      }
      if (!v41) {
        goto LABEL_34;
      }
    }
    a2 = v40;
    if (!v41) {
      continue;
    }
    return result;
  }
}

BOOL sub_20DC53978(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a5 + a4;
  uint64_t v10 = (int *)(a5 + a4 - v8);
  uint64_t v11 = *a1;
  uint64_t v12 = (int *)(a5 + a4 - v11);
  BOOL v13 = sub_20DC53C40(v10, v12);
  uint64_t v14 = *a3;
  BOOL result = sub_20DC53C40((int *)(v9 - v14), v10);
  if (v13)
  {
    if (result)
    {
      *a1 = v14;
    }
    else
    {
      *a1 = v8;
      *a2 = v11;
      uint64_t v18 = *a3;
      BOOL result = sub_20DC53C40((int *)(v9 - v18), v12);
      if (!result) {
        return result;
      }
      *a2 = v18;
    }
    *a3 = v11;
  }
  else if (result)
  {
    *a2 = v14;
    *a3 = v8;
    uint64_t v16 = *a2;
    uint64_t v17 = *a1;
    BOOL result = sub_20DC53C40((int *)(v9 - v16), (int *)(v9 - v17));
    if (result)
    {
      *a1 = v16;
      *a2 = v17;
    }
  }
  return result;
}

BOOL sub_20DC53A58(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      uint64_t v10 = *a1;
      if (sub_20DC53C40((int *)(v9 - v8), (int *)(v9 - v10)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_20DC53978(a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a3 + 40));
      return 1;
    case 4:
      sub_20DC53CE0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20DC53DA0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      sub_20DC53978(a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a3 + 40));
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      uint64_t v15 = 12;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v12;
    uint64_t v17 = *v11;
    if (sub_20DC53C40((int *)(v14 - v16), (int *)(v14 - v17)))
    {
      uint64_t v18 = v15;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v17;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v17 = *(unsigned int *)((char *)a1 + v18 - 8);
        BOOL v20 = sub_20DC53C40((int *)(v14 - v16), (int *)(v14 - v17));
        uint64_t v18 = v19;
        if (!v20)
        {
          uint64_t v21 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      *uint64_t v21 = v16;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    uint64_t v11 = v12;
    v15 += 4;
    if (++v12 == a2) {
      return 1;
    }
  }
}

BOOL sub_20DC53C40(int *a1, int *a2)
{
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 5u && (uint64_t v3 = v2[2]) != 0) {
    uint64_t v4 = (unsigned int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *a2;
  if (*(unsigned __int16 *)((char *)a2 - v5) < 5u)
  {
    int v6 = 0;
  }
  else
  {
    int v6 = *(unsigned __int16 *)((char *)a2 - v5 + 4);
    LODWORD(v5) = *(int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - v5 + 4));
  }
  uint64_t v7 = (unsigned int *)((char *)a2 + v6 + v5);
  unsigned int v10 = *v4;
  uint64_t v8 = v4 + 1;
  unsigned int v9 = v10;
  unsigned int v13 = *v7;
  uint64_t v11 = v7 + 1;
  unsigned int v12 = v13;
  if (v13 >= v9) {
    size_t v14 = v9;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v8, v11, v14);
  if (v15) {
    return v15 < 0;
  }
  else {
    return v9 < v12;
  }
}

BOOL sub_20DC53CE0(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  sub_20DC53978(a1, a2, a3, *(void *)(*(void *)a5 + 32), *(void *)(*(void *)a5 + 40));
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*(void *)a5 + 40) + *(void *)(*(void *)a5 + 32);
  uint64_t v12 = *a3;
  BOOL result = sub_20DC53C40((int *)(v11 - v10), (int *)(v11 - v12));
  if (result)
  {
    *a3 = v10;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    BOOL result = sub_20DC53C40((int *)(v11 - v14), (int *)(v11 - v15));
    if (result)
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      BOOL result = sub_20DC53C40((int *)(v11 - v16), (int *)(v11 - v17));
      if (result)
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

BOOL sub_20DC53DA0(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  sub_20DC53CE0(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v13 = *(void *)(*(void *)a6 + 40) + *(void *)(*(void *)a6 + 32);
  uint64_t v14 = *a4;
  BOOL result = sub_20DC53C40((int *)(v13 - v12), (int *)(v13 - v14));
  if (result)
  {
    *a4 = v12;
    *a5 = v14;
    uint64_t v16 = *a4;
    uint64_t v17 = *a3;
    BOOL result = sub_20DC53C40((int *)(v13 - v16), (int *)(v13 - v17));
    if (result)
    {
      *a3 = v16;
      *a4 = v17;
      uint64_t v18 = *a3;
      uint64_t v19 = *a2;
      BOOL result = sub_20DC53C40((int *)(v13 - v18), (int *)(v13 - v19));
      if (result)
      {
        *a2 = v18;
        *a3 = v19;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        BOOL result = sub_20DC53C40((int *)(v13 - v20), (int *)(v13 - v21));
        if (result)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20DC53E80(uint64_t a1, unint64_t a2)
{
  if ((a2 & 3) != 0 && *(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 < 5 || v2 - 4 < a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)a1 + a2);
  if ((int)v4 < 1) {
    return 0;
  }
  if (v2 - 1 >= v4 + a2) {
    return v4;
  }
  return 0;
}

uint64_t sub_20DC53ED0(int *a1, uint64_t a2)
{
  uint64_t result = sub_20DC54320((uint64_t *)a2, a1);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  int v6 = (char *)a1 - v5;
  unsigned int v7 = *(unsigned __int16 *)((char *)a1 - v5);
  if (v7 < 5) {
    return 0;
  }
  uint64_t v8 = *((unsigned __int16 *)v6 + 2);
  if (!*((_WORD *)v6 + 2)) {
    return 0;
  }
  uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v8 - *(void *)a2);
  if (!result) {
    return result;
  }
  unsigned int v9 = (unsigned int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
  uint64_t result = sub_20DC78310(a2, v9);
  if (!result) {
    return result;
  }
  if (*v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = v9 + 1;
    while ((sub_20DC543DC((int *)((char *)v11 + *v11), a2) & 1) != 0)
    {
      ++v10;
      ++v11;
      if (v10 >= *v9)
      {
        uint64_t v5 = *a1;
        uint64_t v12 = -v5;
        unsigned int v7 = *(unsigned __int16 *)((char *)a1 - v5);
        goto LABEL_11;
      }
    }
    return 0;
  }
  uint64_t v12 = -v5;
LABEL_11:
  if (v7 < 7) {
    return 0;
  }
  uint64_t v13 = *(unsigned __int16 *)((char *)a1 + v12 + 6);
  if (!v13) {
    return 0;
  }
  uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v13 - *(void *)a2);
  if (!result) {
    return result;
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - (int)v5);
  unsigned int v15 = *v14;
  if (v15 < 7)
  {
    BOOL v36 = sub_20DC78310(a2, 0);
    uint64_t v21 = 0;
    if (!v36) {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = -(uint64_t)(int)v5;
    uint64_t v17 = v14[3];
    if (v17)
    {
      uint64_t v18 = (unsigned int *)((char *)a1 + v17 + *(unsigned int *)((char *)a1 + v17));
      if (!sub_20DC78310(a2, v18)) {
        return 0;
      }
      if (*v18)
      {
        unint64_t v19 = 0;
        uint64_t v20 = v18 + 1;
        while ((sub_20DC54E18((int *)((char *)v20 + *v20), a2) & 1) != 0)
        {
          ++v19;
          ++v20;
          if (v19 >= *v18)
          {
            uint64_t v5 = *a1;
            uint64_t v16 = -v5;
            unsigned int v15 = *(unsigned __int16 *)((char *)a1 - v5);
            goto LABEL_22;
          }
        }
        return 0;
      }
    }
    else if (!sub_20DC78310(a2, 0))
    {
      return 0;
    }
LABEL_22:
    if (v15 < 9)
    {
LABEL_55:
      uint64_t v21 = 0;
      goto LABEL_29;
    }
    if (!*(_WORD *)((char *)a1 + v16 + 8))
    {
LABEL_27:
      if (*(_WORD *)((char *)a1 + v16 + 8))
      {
        uint64_t v21 = (unsigned int *)((char *)a1
                             + *(unsigned __int16 *)((char *)a1 + v16 + 8)
                             + *(unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v16 + 8)));
        goto LABEL_29;
      }
      goto LABEL_55;
    }
    uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v16 + 8) - *(void *)a2);
    if (!result) {
      return result;
    }
    uint64_t v21 = 0;
    if (*(unsigned __int16 *)((char *)a1 - (int)v5) >= 9u)
    {
      uint64_t v16 = -(uint64_t)(int)v5;
      goto LABEL_27;
    }
  }
LABEL_29:
  uint64_t result = sub_20DC542A0(a2, v21);
  if (!result) {
    return result;
  }
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v22 >= 0xBu && (uint64_t v23 = v22[5]) != 0)
  {
    uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v23 - *(void *)a2);
    if (!result) {
      return result;
    }
    uint64_t v24 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t result = sub_20DC542A0(a2, v24);
  if (result)
  {
    uint64_t v25 = *a1;
    uint64_t v26 = (char *)a1 - v25;
    unsigned int v27 = *(unsigned __int16 *)((char *)a1 - v25);
    if (v27 < 0xD) {
      goto LABEL_54;
    }
    uint64_t v28 = *((unsigned __int16 *)v26 + 6);
    if (!*((_WORD *)v26 + 6))
    {
      uint64_t v29 = -v25;
      goto LABEL_40;
    }
    uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v28 - *(void *)a2);
    if (result)
    {
      uint64_t result = sub_20DC543DC((int *)((char *)a1 + v28 + *(unsigned int *)((char *)a1 + v28)), a2);
      if (result)
      {
        uint64_t v25 = *a1;
        uint64_t v29 = -v25;
        unsigned int v27 = *(unsigned __int16 *)((char *)a1 - v25);
LABEL_40:
        if (v27 >= 0xF)
        {
          if (*(_WORD *)((char *)a1 + v29 + 14))
          {
            uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v29 + 14) - *(void *)a2);
            if (!result) {
              return result;
            }
            uint64_t v30 = 0;
            if (*(unsigned __int16 *)((char *)a1 - (int)v25) < 0xFu) {
              goto LABEL_47;
            }
            uint64_t v29 = -(uint64_t)(int)v25;
          }
          uint64_t v31 = *(unsigned __int16 *)((char *)a1 + v29 + 14);
          if (v31)
          {
            uint64_t v30 = (unsigned int *)((char *)a1 + v31 + *(unsigned int *)((char *)a1 + v31));
LABEL_47:
            uint64_t result = sub_20DC78310(a2, v30);
            if (!result) {
              return result;
            }
            unsigned int v32 = (unsigned __int16 *)((char *)a1 - (int)v25);
            if (*v32 < 0xFu
              || (uint64_t v33 = v32[7]) == 0
              || (unsigned int v34 = (char *)a1 + v33, v35 = *(unsigned int *)((char *)a1 + v33), !*(int *)((char *)a1 + v33 + v35)))
            {
LABEL_51:
              --*(_DWORD *)(a2 + 16);
              return 1;
            }
            unint64_t v37 = 0;
            unsigned int v38 = (unsigned int *)((char *)a1 + v35 + v33 + 4);
            while ((sub_20DC7846C((int *)((char *)v38 + *v38), a2) & 1) != 0)
            {
              ++v37;
              ++v38;
              if (v37 >= *(unsigned int *)&v34[v35]) {
                goto LABEL_51;
              }
            }
            return 0;
          }
        }
LABEL_54:
        uint64_t v30 = 0;
        goto LABEL_47;
      }
    }
  }
  return result;
}

BOOL sub_20DC542A0(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if (((v2 & 3) == 0 || !*(unsigned char *)(a1 + 40))
    && ((v3 = *(void *)(a1 + 8), v3 >= 5) ? (BOOL v4 = v3 - 4 >= v2) : (BOOL v4 = 0),
        v4
     && (uint64_t v5 = *a2, v5 <= 0x7FFFFFFE)
     && ((unint64_t v6 = v5 + 4, v7 = v5 + 4 + v2, v3 - 1 >= v7) ? (v8 = v3 > v6) : (v8 = 0),
         v8 ? (BOOL v9 = v3 - v6 >= v2) : (BOOL v9 = 0),
         v9)))
  {
    return *(unsigned char *)(*(void *)a1 + v7) == 0;
  }
  else
  {
    return 0;
  }
}

BOOL sub_20DC54320(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (unint64_t)a2 - *a1;
  if ((v3 & 3) != 0 && *((unsigned char *)a1 + 40)) {
    return 0;
  }
  unint64_t v4 = a1[1];
  BOOL v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *a2;
  unsigned int v7 = *((_DWORD *)a1 + 5);
  unsigned int v8 = *((_DWORD *)a1 + 4) + 1;
  *((_DWORD *)a1 + 4) = v8;
  unsigned int v9 = *((_DWORD *)a1 + 6) + 1;
  *((_DWORD *)a1 + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)a1 + 7)) {
    return 0;
  }
  unint64_t v10 = v3 - v6;
  if (v10)
  {
    uint64_t v14 = 0;
    if (*((unsigned char *)a1 + 40) || v4 - 2 < v10) {
      return v14;
    }
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  unint64_t v11 = *(unsigned __int16 *)(v2 + v10);
  if ((v11 & 1) != 0 && *((unsigned char *)a1 + 40)) {
    return 0;
  }
  BOOL v5 = v4 >= v11;
  unint64_t v12 = v4 - v11;
  return v12 != 0 && v5 && v12 >= v10;
}

uint64_t sub_20DC543DC(int *a1, uint64_t a2)
{
  uint64_t result = sub_20DC54320((uint64_t *)a2, a1);
  if (result)
  {
    BOOL v5 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v5 < 5u) {
      return 0;
    }
    uint64_t v6 = v5[2];
    if (!v5[2]) {
      return 0;
    }
    uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v6 - *(void *)a2);
    if (result)
    {
      uint64_t result = sub_20DC542A0(a2, (unsigned int *)((char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6)));
      if (result)
      {
        uint64_t v7 = *a1;
        unsigned int v8 = (char *)a1 - v7;
        unsigned int v9 = *(unsigned __int16 *)((char *)a1 - v7);
        if (v9 < 7) {
          return 0;
        }
        uint64_t v10 = *((unsigned __int16 *)v8 + 3);
        if (!*((_WORD *)v8 + 3)) {
          return 0;
        }
        uint64_t v11 = *(void *)a2;
        uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v10 - *(void *)a2);
        if (result)
        {
          uint64_t v90 = a1;
          uint64_t v12 = *(unsigned int *)((char *)a1 + v10);
          uint64_t v13 = (unsigned int *)((char *)a1 + v10 + v12);
          unint64_t v14 = (unint64_t)v13 - v11;
          if ((((unint64_t)v13 - v11) & 3) != 0 && *(unsigned char *)(a2 + 40)) {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v15 = *(void *)(a2 + 8);
          if (v15 >= 5 && v15 - 4 >= v14)
          {
            uint64_t v16 = *v13;
            if (v16 > 0x1FFFFFFE) {
              return 0;
            }
            unint64_t v17 = 4 * v16 + 4;
            BOOL v18 = v15 > v17;
            unint64_t v19 = v15 - v17;
            if (!v18 || v19 < v14) {
              return 0;
            }
            if (v16)
            {
              unint64_t v21 = 0;
              uint64_t v22 = (uint64_t)v90 + v12 + v10 + 8;
              while (1)
              {
                uint64_t v23 = &v13[v21 + 1];
                uint64_t v24 = *v23;
                uint64_t v25 = (int *)((char *)v23 + v24);
                uint64_t result = sub_20DC54320((uint64_t *)a2, (int *)((char *)v23 + v24));
                if (!result) {
                  return result;
                }
                uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
                if (*v26 < 5u) {
                  return 0;
                }
                uint64_t v27 = v26[2];
                if (!v26[2]) {
                  return 0;
                }
                uint64_t result = sub_20DC53E80(a2, (unint64_t)v25 + v27 - *(void *)a2);
                if (!result) {
                  return result;
                }
                uint64_t result = sub_20DC542A0(a2, (unsigned int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27)));
                if (!result) {
                  return result;
                }
                uint64_t v28 = (unsigned __int16 *)((char *)v25 - *v25);
                if (*v28 < 7u) {
                  return 0;
                }
                uint64_t v29 = v28[3];
                if (!v28[3]) {
                  return 0;
                }
                uint64_t result = sub_20DC53E80(a2, (unint64_t)v25 + v29 - *(void *)a2);
                if (!result) {
                  return result;
                }
                uint64_t result = sub_20DC54CE0((int *)((char *)v25 + v29 + *(unsigned int *)((char *)v25 + v29)), a2);
                if (!result) {
                  return result;
                }
                uint64_t v30 = *v25;
                uint64_t v31 = (unsigned __int16 *)((char *)v25 - v30);
                unsigned int v32 = *(unsigned __int16 *)((char *)v25 - v30);
                if (v32 < 9) {
                  goto LABEL_38;
                }
                if (v31[4])
                {
                  uint64_t result = 0;
                  unint64_t v33 = *(void *)(a2 + 8);
                  if (v33 < 3 || v33 - 2 < (unint64_t)v25 + v31[4] - *(void *)a2) {
                    return result;
                  }
                }
                if (v32 < 0xB) {
                  goto LABEL_38;
                }
                if (v31[5])
                {
                  uint64_t result = 0;
                  unint64_t v34 = *(void *)(a2 + 8);
                  if (v34 < 3 || v34 - 2 < (unint64_t)v25 + v31[5] - *(void *)a2) {
                    return result;
                  }
                }
                if (v32 < 0xD) {
                  goto LABEL_38;
                }
                if (v31[6])
                {
                  uint64_t result = 0;
                  unint64_t v61 = *(void *)(a2 + 8);
                  if (v61 < 9 || v61 - 8 < (unint64_t)v25 + v31[6] - *(void *)a2) {
                    return result;
                  }
                }
                if (v32 < 0xF) {
                  goto LABEL_38;
                }
                if (v31[7])
                {
                  uint64_t result = 0;
                  unint64_t v62 = *(void *)(a2 + 8);
                  if (v62 < 9 || v62 - 8 < (unint64_t)v25 + v31[7] - *(void *)a2) {
                    return result;
                  }
                }
                if (v32 < 0x11) {
                  goto LABEL_38;
                }
                if (v31[8])
                {
                  uint64_t result = 0;
                  unint64_t v63 = *(void *)(a2 + 8);
                  if (v63 < 2 || v63 - 1 < (unint64_t)v25 + v31[8] - *(void *)a2) {
                    return result;
                  }
                }
                if (v32 < 0x13) {
                  goto LABEL_38;
                }
                if (v31[9])
                {
                  uint64_t result = 0;
                  unint64_t v64 = *(void *)(a2 + 8);
                  if (v64 < 2 || v64 - 1 < (unint64_t)v25 + v31[9] - *(void *)a2) {
                    return result;
                  }
                }
                if (v32 < 0x15) {
                  goto LABEL_38;
                }
                if (v31[10])
                {
                  uint64_t result = 0;
                  unint64_t v65 = *(void *)(a2 + 8);
                  if (v65 < 2 || v65 - 1 < (unint64_t)v25 + v31[10] - *(void *)a2) {
                    return result;
                  }
                }
                if (v32 < 0x17)
                {
LABEL_38:
                  int v35 = 0;
                  BOOL v36 = 0;
                }
                else
                {
                  uint64_t v66 = v31[11];
                  if (v31[11])
                  {
                    uint64_t result = sub_20DC53E80(a2, (unint64_t)v25 + v66 - *(void *)a2);
                    if (!result) {
                      return result;
                    }
                    BOOL v36 = (unsigned int *)((char *)v25 + v66 + *(unsigned int *)((char *)v25 + v66));
                  }
                  else
                  {
                    BOOL v36 = 0;
                  }
                  int v35 = 1;
                }
                uint64_t result = sub_20DC54C78(a2, v36);
                if (!result) {
                  return result;
                }
                uint64_t v37 = -v30;
                if (v35)
                {
                  uint64_t v53 = v31[11];
                  if (v31[11])
                  {
                    uint64_t v54 = (char *)v25 + v53;
                    uint64_t v55 = *(unsigned int *)((char *)v25 + v53);
                    if (*(int *)((char *)v25 + v53 + v55))
                    {
                      unint64_t v56 = 0;
                      uint64_t v57 = (unsigned int *)(v22 + v24 + v55 + v53);
                      while ((sub_20DC78378((int *)((char *)v57 + *v57), a2) & 1) != 0)
                      {
                        ++v56;
                        ++v57;
                        if (v56 >= *(unsigned int *)&v54[v55])
                        {
                          uint64_t v30 = *v25;
                          uint64_t v37 = -v30;
                          unsigned int v32 = *(unsigned __int16 *)((char *)v25 - v30);
                          goto LABEL_41;
                        }
                      }
                      return 0;
                    }
                  }
                }
                if (v32 < 0x19) {
                  goto LABEL_42;
                }
                uint64_t v58 = *(unsigned __int16 *)((char *)v25 + v37 + 24);
                if (!v58) {
                  goto LABEL_42;
                }
LABEL_41:
                uint64_t result = sub_20DC53E80(a2, (unint64_t)v25 + v58 - *(void *)a2);
                if (!result) {
                  return result;
                }
                uint64_t v59 = (unsigned __int16 *)((char *)v25 - (int)v30);
                if (*v59 >= 0x19u && (uint64_t v60 = v59[12]) != 0) {
                  unsigned int v38 = (unsigned int *)((char *)v25 + v60 + *(unsigned int *)((char *)v25 + v60));
                }
                else {
LABEL_42:
                }
                  unsigned int v38 = 0;
                uint64_t result = sub_20DC54C78(a2, v38);
                if (!result) {
                  return result;
                }
                uint64_t v39 = *v25;
                long long v40 = (char *)v25 - v39;
                unsigned int v41 = *(unsigned __int16 *)((char *)v25 - v39);
                if (v41 >= 0x19)
                {
                  uint64_t v67 = -v39;
                  uint64_t v68 = *((unsigned __int16 *)v40 + 12);
                  if (v68)
                  {
                    uint64_t v71 = (char *)v25 + v68;
                    uint64_t v72 = *(unsigned int *)((char *)v25 + v68);
                    if (*(int *)((char *)v25 + v68 + v72))
                    {
                      unint64_t v73 = 0;
                      BOOL v74 = (unsigned int *)(v22 + v24 + v72 + v68);
                      while (sub_20DC542A0(a2, (unsigned int *)((char *)v74 + *v74)))
                      {
                        ++v73;
                        ++v74;
                        if (v73 >= *(unsigned int *)&v71[v72])
                        {
                          uint64_t v75 = *v25;
                          uint64_t v67 = -v75;
                          unsigned int v41 = *(unsigned __int16 *)((char *)v25 - v75);
                          goto LABEL_96;
                        }
                      }
                      return 0;
                    }
                  }
LABEL_96:
                  if (v41 >= 0x1B)
                  {
                    uint64_t v69 = *(unsigned __int16 *)((char *)v25 + v67 + 26);
                    if (v69)
                    {
                      uint64_t result = 0;
                      unint64_t v70 = *(void *)(a2 + 8);
                      if (v70 < 2 || v70 - 1 < (unint64_t)v25 + v69 - *(void *)a2) {
                        return result;
                      }
                    }
                  }
                }
                --*(_DWORD *)(a2 + 16);
                ++v21;
                v22 += 4;
                if (v21 >= *v13)
                {
                  unsigned int v42 = v90;
                  uint64_t v7 = *v90;
                  uint64_t v43 = -v7;
                  unsigned int v9 = *(unsigned __int16 *)((char *)v90 - v7);
                  goto LABEL_47;
                }
              }
            }
            uint64_t v43 = -v7;
            unsigned int v42 = v90;
LABEL_47:
            if (v9 >= 9)
            {
              unsigned int v44 = (unsigned __int16 *)((char *)v42 + v43);
              uint64_t v45 = *(unsigned __int16 *)((char *)v42 + v43 + 8);
              if (v45)
              {
                uint64_t result = 0;
                unint64_t v76 = *(void *)(a2 + 8);
                if (v76 < 2 || v76 - 1 < (unint64_t)v90 + v45 - *(void *)a2) {
                  return result;
                }
              }
              if (v9 >= 0xB)
              {
                if (v44[5])
                {
                  uint64_t result = 0;
                  unint64_t v46 = *(void *)(a2 + 8);
                  if (v46 < 5 || v46 - 4 < (unint64_t)v90 + v44[5] - *(void *)a2) {
                    return result;
                  }
                }
                if (v9 >= 0xD)
                {
                  if (v44[6])
                  {
                    uint64_t result = 0;
                    unint64_t v89 = *(void *)(a2 + 8);
                    if (v89 < 5 || v89 - 4 < (unint64_t)v90 + v44[6] - *(void *)a2) {
                      return result;
                    }
                  }
                  if (v9 >= 0xF)
                  {
                    uint64_t v77 = v44[7];
                    if (v77)
                    {
                      uint64_t result = sub_20DC53E80(a2, (unint64_t)v90 + v77 - *(void *)a2);
                      if (!result) {
                        return result;
                      }
                      unsigned int v47 = 0;
                      if (*(unsigned __int16 *)((char *)v90 - (int)v7) < 0xFu)
                      {
LABEL_55:
                        uint64_t result = sub_20DC54C78(a2, v47);
                        unsigned int v48 = v90;
                        if (!result) {
                          return result;
                        }
                        unsigned int v49 = 0;
                        uint64_t v50 = (unsigned __int16 *)((char *)v90 - (int)v7);
                        unsigned int v51 = *v50;
                        if (v51 >= 0xF)
                        {
                          uint64_t v79 = -(uint64_t)(int)v7;
                          uint64_t v80 = v50[7];
                          if (v80)
                          {
                            uint64_t v81 = (int *)((char *)v90 + v80 + *(unsigned int *)((char *)v90 + v80));
                            if (*v81)
                            {
                              unint64_t v82 = 0;
                              uint64_t v83 = v81 + 1;
                              while ((sub_20DC78378((int *)((char *)v83 + *v83), a2) & 1) != 0)
                              {
                                ++v82;
                                ++v83;
                                if (v82 >= *v81)
                                {
                                  uint64_t v7 = *v90;
                                  uint64_t v79 = -v7;
                                  unsigned int v51 = *(unsigned __int16 *)((char *)v90 - v7);
                                  goto LABEL_122;
                                }
                              }
                              return 0;
                            }
                          }
                          if (v51 < 0x11) {
                            goto LABEL_125;
                          }
LABEL_122:
                          if (*(_WORD *)((char *)v90 + v79 + 16))
                          {
                            uint64_t result = sub_20DC53E80(a2, (unint64_t)v90+ *(unsigned __int16 *)((char *)v90 + v79 + 16)- *(void *)a2);
                            if (!result) {
                              return result;
                            }
                            unsigned int v49 = 0;
                            unsigned int v48 = v90;
                            if (*(unsigned __int16 *)((char *)v90 - (int)v7) < 0x11u) {
                              goto LABEL_57;
                            }
                            uint64_t v79 = -(uint64_t)(int)v7;
                          }
                          uint64_t v84 = *(unsigned __int16 *)((char *)v90 + v79 + 16);
                          if (v84)
                          {
                            unsigned int v48 = v90;
                            unsigned int v49 = (unsigned int *)((char *)v90 + v84 + *(unsigned int *)((char *)v90 + v84));
                          }
                          else
                          {
LABEL_125:
                            unsigned int v49 = 0;
                            unsigned int v48 = v90;
                          }
                        }
LABEL_57:
                        uint64_t result = sub_20DC54C78(a2, v49);
                        if (result)
                        {
                          uint64_t v52 = (unsigned __int16 *)((char *)v48 - *v48);
                          if (*v52 >= 0x11u)
                          {
                            uint64_t v85 = v52[8];
                            if (v85)
                            {
                              BOOL v86 = (int *)((char *)v48 + v85 + *(unsigned int *)((char *)v48 + v85));
                              if (*v86)
                              {
                                unint64_t v87 = 0;
                                uint64_t v88 = v86 + 1;
                                while (sub_20DC542A0(a2, (unsigned int *)((char *)v88 + *v88)))
                                {
                                  ++v87;
                                  ++v88;
                                  if (v87 >= *v86) {
                                    goto LABEL_59;
                                  }
                                }
                                return 0;
                              }
                            }
                          }
LABEL_59:
                          --*(_DWORD *)(a2 + 16);
                          return 1;
                        }
                        return result;
                      }
                      uint64_t v43 = -(uint64_t)(int)v7;
                    }
                    uint64_t v78 = *(unsigned __int16 *)((char *)v90 + v43 + 14);
                    if (v78)
                    {
                      unsigned int v47 = (unsigned int *)((char *)v90 + v78 + *(unsigned int *)((char *)v90 + v78));
                      goto LABEL_55;
                    }
                  }
                }
              }
            }
            unsigned int v47 = 0;
            goto LABEL_55;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_20DC54C78(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v3 = (unint64_t)a2 - *(void *)a1;
  if ((v3 & 3) != 0 && *(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 5 || v4 - 4 < v3) {
    return 0;
  }
  uint64_t v6 = *a2;
  if (v6 > 0x1FFFFFFE) {
    return 0;
  }
  unint64_t v7 = 4 * v6 + 4;
  BOOL v8 = v4 > v7;
  unint64_t v9 = v4 - v7;
  return v8 && v9 >= v3;
}

BOOL sub_20DC54CE0(int *a1, uint64_t a2)
{
  BOOL result = sub_20DC54320((uint64_t *)a2, a1);
  if (result)
  {
    BOOL v5 = (unsigned __int16 *)((char *)a1 - *a1);
    unsigned int v6 = *v5;
    if (v6 < 5) {
      goto LABEL_7;
    }
    if (!v5[2]
      || (result = 0, unint64_t v7 = *(void *)(a2 + 8), v7 >= 2) && v7 - 1 >= (unint64_t)a1 + v5[2] - *(void *)a2)
    {
      if (v6 < 7
        || (!v5[3]
         || (result = 0, unint64_t v11 = *(void *)(a2 + 8), v11 >= 2)
         && v11 - 1 >= (unint64_t)a1 + v5[3] - *(void *)a2)
        && (v6 < 9
         || (!v5[4]
          || (result = 0, unint64_t v8 = *(void *)(a2 + 8), v8 >= 5) && v8 - 4 >= (unint64_t)a1 + v5[4] - *(void *)a2)
         && (v6 < 0xB
          || (uint64_t v9 = v5[5]) == 0
          || (result = 0, unint64_t v10 = *(void *)(a2 + 8), v10 >= 3) && v10 - 2 >= (unint64_t)a1 + v9 - *(void *)a2)))
      {
LABEL_7:
        --*(_DWORD *)(a2 + 16);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_20DC54E18(int *a1, uint64_t a2)
{
  uint64_t result = sub_20DC54320((uint64_t *)a2, a1);
  if (!result) {
    return result;
  }
  BOOL v5 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v5 < 5u) {
    return 0;
  }
  uint64_t v6 = v5[2];
  if (!v5[2]) {
    return 0;
  }
  uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v6 - *(void *)a2);
  if (!result) {
    return result;
  }
  uint64_t result = sub_20DC542A0(a2, (unsigned int *)((char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6)));
  if (!result) {
    return result;
  }
  uint64_t v7 = *a1;
  unint64_t v8 = (char *)a1 - v7;
  unsigned int v9 = *(unsigned __int16 *)((char *)a1 - v7);
  if (v9 < 7) {
    return 0;
  }
  uint64_t v10 = *((unsigned __int16 *)v8 + 3);
  if (!*((_WORD *)v8 + 3)) {
    return 0;
  }
  uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v10 - *(void *)a2);
  if (!result) {
    return result;
  }
  uint64_t v11 = *(unsigned int *)((char *)a1 + v10);
  uint64_t v12 = (unsigned int *)((char *)a1 + v10 + v11);
  uint64_t result = sub_20DC78310(a2, v12);
  if (!result) {
    return result;
  }
  if (*v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = (uint64_t)a1 + v11 + v10 + 8;
    while (1)
    {
      unint64_t v15 = &v12[v13 + 1];
      uint64_t v16 = *v15;
      unint64_t v17 = (int *)((char *)v15 + v16);
      uint64_t result = sub_20DC54320((uint64_t *)a2, (int *)((char *)v15 + v16));
      if (!result) {
        return result;
      }
      BOOL v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 < 5u) {
        return 0;
      }
      uint64_t v19 = v18[2];
      if (!v18[2]) {
        return 0;
      }
      uint64_t result = sub_20DC53E80(a2, (unint64_t)v17 + v19 - *(void *)a2);
      if (!result) {
        return result;
      }
      uint64_t result = sub_20DC542A0(a2, (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19)));
      if (!result) {
        return result;
      }
      uint64_t v20 = *v17;
      unint64_t v21 = (char *)v17 - v20;
      unsigned int v22 = *(unsigned __int16 *)((char *)v17 - v20);
      if (v22 < 7) {
        goto LABEL_32;
      }
      if (*((_WORD *)v21 + 3))
      {
        uint64_t result = 0;
        unint64_t v23 = *(void *)(a2 + 8);
        if (v23 < 9 || v23 - 8 < (unint64_t)v17 + *((unsigned __int16 *)v21 + 3) - *(void *)a2) {
          return result;
        }
      }
      if (v22 < 9) {
        goto LABEL_32;
      }
      uint64_t v24 = *((unsigned __int16 *)v21 + 4);
      if (*((_WORD *)v21 + 4))
      {
        uint64_t result = sub_20DC53E80(a2, (unint64_t)v17 + v24 - *(void *)a2);
        if (!result) {
          return result;
        }
        uint64_t result = sub_20DC543DC((int *)((char *)v17 + v24 + *(unsigned int *)((char *)v17 + v24)), a2);
        if (!result) {
          return result;
        }
        uint64_t v20 = *v17;
        uint64_t v25 = -v20;
        unsigned int v22 = *(unsigned __int16 *)((char *)v17 - v20);
      }
      else
      {
        uint64_t v25 = -v20;
      }
      if (v22 < 0xB) {
        goto LABEL_32;
      }
      if (*(_WORD *)((char *)v17 + v25 + 10))
      {
        uint64_t result = sub_20DC53E80(a2, (unint64_t)v17 + *(unsigned __int16 *)((char *)v17 + v25 + 10) - *(void *)a2);
        if (!result) {
          return result;
        }
        uint64_t v26 = 0;
        uint64_t v27 = (unsigned __int16 *)((char *)v17 - (int)v20);
        unsigned int v22 = *v27;
        if (v22 < 0xB) {
          goto LABEL_33;
        }
        uint64_t v28 = v27[5];
        if (v28)
        {
          uint64_t result = sub_20DC54CE0((int *)((char *)v17 + v28 + *(unsigned int *)((char *)v17 + v28)), a2);
          if (!result) {
            return result;
          }
          uint64_t v20 = *v17;
          uint64_t v25 = -v20;
          unsigned int v22 = *(unsigned __int16 *)((char *)v17 - v20);
        }
        else
        {
          uint64_t v25 = -(uint64_t)(int)v20;
        }
      }
      if (v22 < 0xD || !*(_WORD *)((char *)v17 + v25 + 12)) {
        goto LABEL_32;
      }
      uint64_t result = sub_20DC53E80(a2, (unint64_t)v17 + *(unsigned __int16 *)((char *)v17 + v25 + 12) - *(void *)a2);
      if (!result) {
        return result;
      }
      unint64_t v46 = (unsigned __int16 *)((char *)v17 - (int)v20);
      if (*v46 >= 0xDu && (uint64_t v47 = v46[6]) != 0) {
        uint64_t v26 = (unsigned int *)((char *)v17 + v47 + *(unsigned int *)((char *)v17 + v47));
      }
      else {
LABEL_32:
      }
        uint64_t v26 = 0;
LABEL_33:
      uint64_t result = sub_20DC54C78(a2, v26);
      if (!result) {
        return result;
      }
      uint64_t v29 = *v17;
      unsigned int v30 = *(unsigned __int16 *)((char *)v17 - v29);
      if (v30 < 0xD) {
        goto LABEL_35;
      }
      uint64_t v48 = -v29;
      uint64_t v49 = *(unsigned __int16 *)((char *)v17 - v29 + 12);
      if (*(_WORD *)((char *)v17 - v29 + 12))
      {
        uint64_t v77 = (char *)v17 + v49;
        uint64_t v79 = *(unsigned int *)((char *)v17 + v49);
        if (*(int *)((char *)v17 + v49 + v79))
        {
          unint64_t v61 = 0;
          unint64_t v62 = (unsigned int *)(v14 + v16 + v79 + v49);
          while (sub_20DC542A0(a2, (unsigned int *)((char *)v62 + *v62)))
          {
            ++v61;
            ++v62;
            if (v61 >= *(unsigned int *)&v77[v79])
            {
              uint64_t v29 = *v17;
              uint64_t v48 = -v29;
              unsigned int v30 = *(unsigned __int16 *)((char *)v17 - v29);
              goto LABEL_68;
            }
          }
          return 0;
        }
      }
      if (v30 < 0xF) {
        goto LABEL_35;
      }
      uint64_t v50 = *(unsigned __int16 *)((char *)v17 + v48 + 14);
      if (!v50) {
        goto LABEL_35;
      }
LABEL_68:
      uint64_t result = sub_20DC53E80(a2, (unint64_t)v17 + v50 - *(void *)a2);
      if (!result) {
        return result;
      }
      unsigned int v51 = (unsigned __int16 *)((char *)v17 - (int)v29);
      if (*v51 >= 0xFu && (uint64_t v52 = v51[7]) != 0) {
        uint64_t v31 = (unsigned int *)((char *)v17 + v52 + *(unsigned int *)((char *)v17 + v52));
      }
      else {
LABEL_35:
      }
        uint64_t v31 = 0;
      uint64_t result = sub_20DC54C78(a2, v31);
      if (!result) {
        return result;
      }
      unsigned int v32 = (unsigned __int16 *)((char *)v17 - (int)v29);
      unsigned int v33 = *v32;
      if (v33 >= 0xF)
      {
        uint64_t v53 = -(uint64_t)(int)v29;
        uint64_t v54 = v32[7];
        if (v54)
        {
          uint64_t v55 = (char *)v17 + v54;
          uint64_t v78 = *(unsigned int *)((char *)v17 + v54);
          if (*(int *)((char *)v17 + v54 + v78))
          {
            unint64_t v56 = 0;
            uint64_t v57 = (unsigned int *)(v14 + v16 + v78 + v54);
            while ((sub_20DC78378((int *)((char *)v57 + *v57), a2) & 1) != 0)
            {
              ++v56;
              ++v57;
              if (v56 >= *(unsigned int *)&v55[v78])
              {
                uint64_t v58 = *v17;
                uint64_t v53 = -v58;
                unsigned int v33 = *(unsigned __int16 *)((char *)v17 - v58);
                goto LABEL_80;
              }
            }
            return 0;
          }
        }
LABEL_80:
        if (v33 >= 0x11)
        {
          uint64_t v59 = *(unsigned __int16 *)((char *)v17 + v53 + 16);
          if (v59)
          {
            uint64_t result = 0;
            unint64_t v60 = *(void *)(a2 + 8);
            if (v60 < 2 || v60 - 1 < (unint64_t)v17 + v59 - *(void *)a2) {
              return result;
            }
          }
        }
      }
      --*(_DWORD *)(a2 + 16);
      ++v13;
      v14 += 4;
      if (v13 >= *v12)
      {
        uint64_t v7 = *a1;
        uint64_t v34 = -v7;
        unsigned int v9 = *(unsigned __int16 *)((char *)a1 - v7);
        goto LABEL_40;
      }
    }
  }
  uint64_t v34 = -v7;
LABEL_40:
  if (v9 < 9) {
    return 0;
  }
  int v35 = (char *)a1 + v34;
  if (!*((_WORD *)v35 + 4))
  {
    if (v9 >= 0xB) {
      goto LABEL_43;
    }
    return 0;
  }
  unint64_t v63 = *(void *)(a2 + 8);
  if (v9 < 0xB || v63 < 2 || v63 - 1 < (unint64_t)a1 + *((unsigned __int16 *)v35 + 4) - *(void *)a2) {
    return 0;
  }
LABEL_43:
  uint64_t v36 = *((unsigned __int16 *)v35 + 5);
  if (!v36) {
    return 0;
  }
  uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v36 - *(void *)a2);
  if (!result) {
    return result;
  }
  uint64_t v37 = 0;
  unsigned int v38 = (unsigned __int16 *)((char *)a1 - (int)v7);
  unsigned int v39 = *v38;
  if (v39 < 0xB) {
    goto LABEL_51;
  }
  uint64_t v40 = v38[5];
  if (v40)
  {
    uint64_t result = sub_20DC54CE0((int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40)), a2);
    if (!result) {
      return result;
    }
    uint64_t v7 = *a1;
    uint64_t v41 = -v7;
    unsigned int v39 = *(unsigned __int16 *)((char *)a1 - v7);
  }
  else
  {
    uint64_t v41 = -(uint64_t)(int)v7;
  }
  if (v39 < 0xD) {
    goto LABEL_50;
  }
  if (*(_WORD *)((char *)a1 + v41 + 12))
  {
    uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v41 + 12) - *(void *)a2);
    if (!result) {
      return result;
    }
    uint64_t v37 = 0;
    if (*(unsigned __int16 *)((char *)a1 - (int)v7) < 0xDu) {
      goto LABEL_51;
    }
    uint64_t v41 = -(uint64_t)(int)v7;
  }
  uint64_t v66 = *(unsigned __int16 *)((char *)a1 + v41 + 12);
  if (!v66)
  {
LABEL_50:
    uint64_t v37 = 0;
    goto LABEL_51;
  }
  uint64_t v37 = (unsigned int *)((char *)a1 + v66 + *(unsigned int *)((char *)a1 + v66));
LABEL_51:
  uint64_t result = sub_20DC54C78(a2, v37);
  if (!result) {
    return result;
  }
  unsigned int v42 = 0;
  uint64_t v43 = (unsigned __int16 *)((char *)a1 - (int)v7);
  unsigned int v44 = *v43;
  if (v44 >= 0xD)
  {
    uint64_t v67 = -(uint64_t)(int)v7;
    uint64_t v68 = v43[6];
    if (v68)
    {
      uint64_t v69 = (int *)((char *)a1 + v68 + *(unsigned int *)((char *)a1 + v68));
      if (*v69)
      {
        unint64_t v70 = 0;
        uint64_t v71 = v69 + 1;
        while ((sub_20DC78378((int *)((char *)v71 + *v71), a2) & 1) != 0)
        {
          ++v70;
          ++v71;
          if (v70 >= *v69)
          {
            uint64_t v7 = *a1;
            uint64_t v67 = -v7;
            unsigned int v44 = *(unsigned __int16 *)((char *)a1 - v7);
            goto LABEL_108;
          }
        }
        return 0;
      }
    }
    if (v44 < 0xF) {
      goto LABEL_111;
    }
LABEL_108:
    if (*(_WORD *)((char *)a1 + v67 + 14))
    {
      uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v67 + 14) - *(void *)a2);
      if (!result) {
        return result;
      }
      unsigned int v42 = 0;
      if (*(unsigned __int16 *)((char *)a1 - (int)v7) < 0xFu) {
        goto LABEL_53;
      }
      uint64_t v67 = -(uint64_t)(int)v7;
    }
    uint64_t v72 = *(unsigned __int16 *)((char *)a1 + v67 + 14);
    if (v72) {
      unsigned int v42 = (unsigned int *)((char *)a1 + v72 + *(unsigned int *)((char *)a1 + v72));
    }
    else {
LABEL_111:
    }
      unsigned int v42 = 0;
  }
LABEL_53:
  uint64_t result = sub_20DC54C78(a2, v42);
  if (result)
  {
    uint64_t v45 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v45 >= 0xFu)
    {
      uint64_t v73 = v45[7];
      if (v73)
      {
        BOOL v74 = (int *)((char *)a1 + v73 + *(unsigned int *)((char *)a1 + v73));
        if (*v74)
        {
          unint64_t v75 = 0;
          unint64_t v76 = v74 + 1;
          while (sub_20DC542A0(a2, (unsigned int *)((char *)v76 + *v76)))
          {
            ++v75;
            ++v76;
            if (v75 >= *v74) {
              goto LABEL_55;
            }
          }
          return 0;
        }
      }
    }
LABEL_55:
    --*(_DWORD *)(a2 + 16);
    return 1;
  }
  return result;
}

uint64_t sub_20DC55578(uint64_t a1)
{
  unint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        sub_20DC507CC(v4 + 88);
        uint64_t v6 = (void **)(v4 + 24);
        sub_20DC5847C(&v6);
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x210568AF0](v4, 0x10B2C4072A4B994);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    unint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_20DC5043C(*(char **)(a1 + 8));
  return a1;
}

void *sub_20DC55634(uint64_t a1, const void *a2, unint64_t a3)
{
  BOOL v5 = (void *)a1;
  if (a3 <= 0x16)
  {
    *(unsigned char *)(a1 + 23) = a3;
  }
  else
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *BOOL v5 = v8;
    BOOL v5 = v8;
  }

  return memmove(v5, a2, a3 + 1);
}

uint64_t sub_20DC556D0(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v9 = (unsigned int *)result;
  while (2)
  {
    uint64_t v113 = a2 - 2;
    uint64_t v116 = a2 - 1;
    unint64_t v112 = a2 - 3;
    uint64_t v10 = v9;
    uint64_t v11 = a3;
    uint64_t v121 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v9 = v10;
          uint64_t v12 = (char *)a2 - (char *)v10;
          uint64_t v13 = a2 - v10;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v51 = *(a2 - 1);
                uint64_t v52 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                uint64_t v53 = *v9;
                uint64_t result = sub_20DC53C40((int *)(v52 - v51), (int *)(v52 - v53));
                if (result)
                {
                  unsigned int *v9 = v51;
                  *(a2 - 1) = v53;
                }
                break;
              case 3:
                uint64_t v54 = *(void *)(*(void *)a3 + 32);
                uint64_t v55 = *(void *)(*(void *)a3 + 40);
                uint64_t result = sub_20DC53978(v9, v9 + 1, v116, v54, v55);
                break;
              case 4:
                uint64_t result = sub_20DC53CE0(v9, v9 + 1, v9 + 2, v116, a3);
                break;
              case 5:
                uint64_t result = sub_20DC53DA0(v9, v9 + 1, v9 + 2, v9 + 3, v116, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            unint64_t v56 = v9 + 1;
            BOOL v58 = v9 == a2 || v56 == a2;
            if (a5)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                uint64_t v60 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                unint64_t v61 = v9;
                do
                {
                  unint64_t v62 = v9;
                  uint64_t v64 = *v61;
                  uint64_t v63 = v61[1];
                  unint64_t v61 = v56;
                  uint64_t result = sub_20DC53C40((int *)(v60 - v63), (int *)(v60 - v64));
                  if (result)
                  {
                    uint64_t v65 = v59;
                    while (1)
                    {
                      *(unsigned int *)((char *)v62 + v65 + 4) = v64;
                      if (!v65) {
                        break;
                      }
                      uint64_t v64 = *(unsigned int *)((char *)v62 + v65 - 4);
                      uint64_t result = sub_20DC53C40((int *)(v60 - v63), (int *)(v60 - v64));
                      v65 -= 4;
                      if ((result & 1) == 0)
                      {
                        uint64_t v66 = (unsigned int *)((char *)v62 + v65 + 4);
                        goto LABEL_83;
                      }
                    }
                    uint64_t v66 = v62;
LABEL_83:
                    *uint64_t v66 = v63;
                  }
                  unint64_t v56 = v61 + 1;
                  v59 += 4;
                  unsigned int v9 = v62;
                }
                while (v61 + 1 != a2);
              }
            }
            else if (!v58)
            {
              uint64_t v108 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
              do
              {
                uint64_t v110 = *v9;
                uint64_t v109 = v9[1];
                unsigned int v9 = v56;
                uint64_t result = sub_20DC53C40((int *)(v108 - v109), (int *)(v108 - v110));
                if (result)
                {
                  uint64_t v111 = v9;
                  do
                  {
                    *uint64_t v111 = v110;
                    uint64_t v110 = *(v111 - 2);
                    uint64_t result = sub_20DC53C40((int *)(v108 - v109), (int *)(v108 - v110));
                    --v111;
                  }
                  while ((result & 1) != 0);
                  *uint64_t v111 = v109;
                }
                unint64_t v56 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v9 != a2)
            {
              int64_t v124 = v9;
              int64_t v67 = (unint64_t)(v13 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = *(void *)a3;
                  int64_t v117 = v69;
                  uint64_t v71 = (2 * v69) | 1;
                  uint64_t v72 = &v124[v71];
                  uint64_t v73 = 2 * v69 + 2;
                  if (v73 < v13)
                  {
                    uint64_t v114 = *v72;
                    uint64_t v77 = *(void *)(v70 + 32);
                    uint64_t v76 = *(void *)(v70 + 40);
                    uint64_t v75 = v72[1];
                    BOOL v74 = sub_20DC53C40((int *)(v76 + v77 - v114), (int *)(v76 + v77 - v75));
                    if (v74) {
                      ++v72;
                    }
                    else {
                      LODWORD(v75) = v114;
                    }
                    if (v74) {
                      uint64_t v71 = v73;
                    }
                  }
                  else
                  {
                    LODWORD(v75) = *v72;
                    uint64_t v77 = *(void *)(v70 + 32);
                    uint64_t v76 = *(void *)(v70 + 40);
                  }
                  int64_t v69 = v117;
                  uint64_t v78 = &v124[v117];
                  uint64_t v79 = v76 + v77;
                  uint64_t v115 = *v78;
                  uint64_t v80 = (int *)(v79 - v115);
                  uint64_t result = sub_20DC53C40((int *)(v79 - v75), (int *)(v79 - v115));
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      *uint64_t v78 = v75;
                      uint64_t v78 = v72;
                      if (v67 < v71) {
                        break;
                      }
                      uint64_t v81 = (2 * v71) | 1;
                      uint64_t v72 = &v124[v81];
                      uint64_t v71 = 2 * v71 + 2;
                      if (v71 < v13)
                      {
                        uint64_t v75 = *v72;
                        unint64_t v82 = (int *)(v79 - v75);
                        uint64_t v83 = v80;
                        uint64_t v84 = v79;
                        uint64_t v85 = v72[1];
                        BOOL v86 = sub_20DC53C40(v82, (int *)(v84 - v85));
                        if (v86) {
                          LODWORD(v75) = v85;
                        }
                        uint64_t v79 = v84;
                        uint64_t v80 = v83;
                        if (v86) {
                          ++v72;
                        }
                        int64_t v67 = (unint64_t)(v13 - 2) >> 1;
                        a2 = v121;
                        if (!v86) {
                          uint64_t v71 = v81;
                        }
                      }
                      else
                      {
                        LODWORD(v75) = *v72;
                        uint64_t v71 = v81;
                      }
                      uint64_t result = sub_20DC53C40((int *)(v79 - v75), v80);
                    }
                    while (!result);
                    int64_t v69 = v117;
                    *uint64_t v78 = v115;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              unint64_t v87 = v124;
              do
              {
                unint64_t v122 = a2;
                uint64_t v88 = 0;
                unsigned int v118 = *v87;
                uint64_t v89 = *(void *)a3;
                uint64_t v90 = v13 - 2;
                if (v13 < 2) {
                  uint64_t v90 = v13 - 1;
                }
                uint64_t v91 = v90 >> 1;
                do
                {
                  unint64_t v92 = &v87[v88 + 1];
                  uint64_t v93 = (2 * v88) | 1;
                  uint64_t v94 = 2 * v88 + 2;
                  if (v94 < v13)
                  {
                    uint64_t v95 = *v92;
                    uint64_t v96 = *(void *)(v89 + 40) + *(void *)(v89 + 32);
                    uint64_t v97 = v92[1];
                    uint64_t result = sub_20DC53C40((int *)(v96 - v95), (int *)(v96 - v97));
                    if (result) {
                      unsigned int v98 = v97;
                    }
                    else {
                      unsigned int v98 = v95;
                    }
                    if (result)
                    {
                      ++v92;
                      uint64_t v88 = v94;
                    }
                    else
                    {
                      uint64_t v88 = v93;
                    }
                  }
                  else
                  {
                    unsigned int v98 = *v92;
                    uint64_t v88 = (2 * v88) | 1;
                  }
                  *unint64_t v87 = v98;
                  unint64_t v87 = v92;
                }
                while (v88 <= v91);
                uint64_t v99 = v122 - 1;
                if (v92 == v122 - 1)
                {
                  uint64_t v106 = v122 - 1;
                  unsigned int *v92 = v118;
                }
                else
                {
                  unsigned int *v92 = *v99;
                  uint64_t v106 = v122 - 1;
                  *uint64_t v99 = v118;
                  uint64_t v100 = (char *)v92 - (char *)v124 + 4;
                  if (v100 >= 5)
                  {
                    unint64_t v101 = (((unint64_t)v100 >> 2) - 2) >> 1;
                    unint64_t v102 = &v124[v101];
                    uint64_t v103 = *v102;
                    uint64_t v104 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                    uint64_t v105 = *v92;
                    uint64_t result = sub_20DC53C40((int *)(v104 - v103), (int *)(v104 - v105));
                    if (result)
                    {
                      do
                      {
                        unsigned int *v92 = v103;
                        unint64_t v92 = v102;
                        if (!v101) {
                          break;
                        }
                        unint64_t v101 = (v101 - 1) >> 1;
                        unint64_t v102 = &v124[v101];
                        uint64_t v103 = *v102;
                        uint64_t result = sub_20DC53C40((int *)(v104 - v103), (int *)(v104 - v105));
                      }
                      while ((result & 1) != 0);
                      unsigned int *v92 = v105;
                    }
                  }
                }
                BOOL v107 = v13-- <= 2;
                a2 = v106;
                unint64_t v87 = v124;
              }
              while (!v107);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          unint64_t v15 = &v9[(unint64_t)v13 >> 1];
          uint64_t v16 = *(void *)(*(void *)v11 + 32);
          uint64_t v17 = *(void *)(*(void *)v11 + 40);
          if ((unint64_t)v12 < 0x201)
          {
            sub_20DC53978(v15, v9, v116, v16, v17);
          }
          else
          {
            sub_20DC53978(v9, v15, v116, v16, v17);
            sub_20DC53978(v9 + 1, v15 - 1, v113, *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            sub_20DC53978(v9 + 2, &v9[v14 + 1], v112, *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            sub_20DC53978(v15 - 1, v15, &v9[v14 + 1], *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            unsigned int v18 = *v9;
            unsigned int *v9 = *v15;
            *unint64_t v15 = v18;
          }
          --a4;
          uint64_t v19 = *(void *)v11;
          uint64_t v20 = (unsigned int *)*v9;
          uint64_t v123 = a4;
          if (a5) {
            break;
          }
          uint64_t v22 = *(void *)(v19 + 32);
          uint64_t v21 = *(void *)(v19 + 40);
          uint64_t v23 = v21 + v22;
          uint64_t v24 = (int *)(v21 + v22 - (void)v20);
          if (sub_20DC53C40((int *)(v21 + v22 - *(v9 - 1)), v24)) {
            goto LABEL_13;
          }
          uint64_t result = sub_20DC53C40((int *)(v21 + v22 - (void)v20), (int *)(v23 - *v116));
          if (result)
          {
            uint64_t v10 = v9;
            do
            {
              unsigned int v42 = v10[1];
              ++v10;
              uint64_t result = sub_20DC53C40((int *)(v21 + v22 - (void)v20), (int *)(v23 - v42));
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v43 = v9 + 1;
            do
            {
              uint64_t v10 = v43;
              if (v43 >= a2) {
                break;
              }
              ++v43;
              uint64_t result = sub_20DC53C40(v24, (int *)(v23 - *v10));
            }
            while (!result);
          }
          unsigned int v44 = a2;
          if (v10 < a2)
          {
            unsigned int v44 = a2;
            do
            {
              unsigned int v45 = *--v44;
              uint64_t result = sub_20DC53C40(v24, (int *)(v23 - v45));
            }
            while ((result & 1) != 0);
          }
          if (v10 < v44)
          {
            unsigned int v46 = *v10;
            unsigned int v47 = *v44;
            do
            {
              *uint64_t v10 = v47;
              *unsigned int v44 = v46;
              do
              {
                unsigned int v48 = v10[1];
                ++v10;
                unsigned int v46 = v48;
              }
              while (!sub_20DC53C40(v24, (int *)(v23 - v48)));
              do
              {
                unsigned int v49 = *--v44;
                unsigned int v47 = v49;
                uint64_t result = sub_20DC53C40(v24, (int *)(v23 - v49));
              }
              while ((result & 1) != 0);
            }
            while (v10 < v44);
          }
          uint64_t v50 = v10 - 1;
          BOOL v5 = v10 - 1 >= v9;
          BOOL v6 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            unsigned int *v9 = *v50;
          }
          a5 = 0;
          *uint64_t v50 = v20;
          uint64_t v11 = a3;
        }
        uint64_t v22 = *(void *)(v19 + 32);
        uint64_t v21 = *(void *)(v19 + 40);
LABEL_13:
        uint64_t v25 = 0;
        uint64_t v26 = v21 + v22;
        uint64_t v27 = (int *)(v21 + v22 - (void)v20);
        do
          uint64_t v28 = v9[++v25];
        while (sub_20DC53C40((int *)(v26 - v28), v27));
        uint64_t v29 = &v9[v25];
        unsigned int v30 = v121;
        if (v25 == 1)
        {
          unsigned int v30 = v121;
          do
          {
            if (v29 >= v30) {
              break;
            }
            unsigned int v32 = *--v30;
          }
          while (!sub_20DC53C40((int *)(v26 - v32), v27));
        }
        else
        {
          do
            unsigned int v31 = *--v30;
          while (!sub_20DC53C40((int *)(v26 - v31), v27));
        }
        if (v29 >= v30)
        {
          uint64_t v40 = v29 - 1;
          a4 = v123;
        }
        else
        {
          int v33 = (int)v20;
          uint64_t v20 = v9;
          unsigned int v34 = *v30;
          unsigned int v35 = v28;
          uint64_t v36 = v29;
          uint64_t v37 = v30;
          do
          {
            unsigned int *v36 = v34;
            *uint64_t v37 = v35;
            do
            {
              unsigned int v38 = v36[1];
              ++v36;
              unsigned int v35 = v38;
            }
            while (sub_20DC53C40((int *)(v26 - v38), v27));
            do
            {
              unsigned int v39 = *--v37;
              unsigned int v34 = v39;
            }
            while (!sub_20DC53C40((int *)(v26 - v39), v27));
          }
          while (v36 < v37);
          uint64_t v40 = v36 - 1;
          unsigned int v9 = v20;
          a4 = v123;
          LODWORD(v20) = v33;
        }
        uint64_t v11 = a3;
        a2 = v121;
        if (v40 != v9) {
          unsigned int *v9 = *v40;
        }
        *uint64_t v40 = v20;
        if (v29 >= v30) {
          break;
        }
LABEL_34:
        uint64_t result = sub_20DC556D0(v9, v40, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v10 = v40 + 1;
      }
      BOOL v41 = sub_20DC55FBC(v9, v40, a3);
      uint64_t v10 = v40 + 1;
      uint64_t result = sub_20DC55FBC(v40 + 1, v121, a3);
      if (result) {
        break;
      }
      if (!v41) {
        goto LABEL_34;
      }
    }
    a2 = v40;
    if (!v41) {
      continue;
    }
    return result;
  }
}

BOOL sub_20DC55FBC(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      uint64_t v10 = *a1;
      if (sub_20DC53C40((int *)(v9 - v8), (int *)(v9 - v10)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_20DC53978(a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a3 + 40));
      return 1;
    case 4:
      sub_20DC53CE0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20DC53DA0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      sub_20DC53978(a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a3 + 40));
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      uint64_t v15 = 12;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v12;
    uint64_t v17 = *v11;
    if (sub_20DC53C40((int *)(v14 - v16), (int *)(v14 - v17)))
    {
      uint64_t v18 = v15;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v17;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v17 = *(unsigned int *)((char *)a1 + v18 - 8);
        BOOL v20 = sub_20DC53C40((int *)(v14 - v16), (int *)(v14 - v17));
        uint64_t v18 = v19;
        if (!v20)
        {
          uint64_t v21 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      *uint64_t v21 = v16;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    uint64_t v11 = v12;
    v15 += 4;
    if (++v12 == a2) {
      return 1;
    }
  }
}

uint64_t sub_20DC561A4(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = (unsigned int *)result;
  while (2)
  {
    uint64_t v113 = a2 - 2;
    uint64_t v116 = a2 - 1;
    unint64_t v112 = a2 - 3;
    uint64_t v10 = v9;
    uint64_t v11 = a3;
    uint64_t v121 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v12 = (char *)a2 - (char *)v10;
          uint64_t v13 = a2 - v10;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v51 = *(a2 - 1);
                uint64_t v52 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                uint64_t v53 = *v9;
                BOOL result = sub_20DC53C40((int *)(v52 - v51), (int *)(v52 - v53));
                if (result)
                {
                  unsigned int *v9 = v51;
                  *(a2 - 1) = v53;
                }
                break;
              case 3:
                uint64_t v54 = *(void *)(*(void *)a3 + 32);
                uint64_t v55 = *(void *)(*(void *)a3 + 40);
                BOOL result = sub_20DC53978(v9, v9 + 1, v116, v54, v55);
                break;
              case 4:
                BOOL result = sub_20DC53CE0(v9, v9 + 1, v9 + 2, v116, a3);
                break;
              case 5:
                BOOL result = sub_20DC53DA0(v9, v9 + 1, v9 + 2, v9 + 3, v116, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            unint64_t v56 = v9 + 1;
            BOOL v58 = v9 == a2 || v56 == a2;
            if (a5)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                uint64_t v60 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                unint64_t v61 = v9;
                do
                {
                  unint64_t v62 = v9;
                  uint64_t v64 = *v61;
                  uint64_t v63 = v61[1];
                  unint64_t v61 = v56;
                  BOOL result = sub_20DC53C40((int *)(v60 - v63), (int *)(v60 - v64));
                  if (result)
                  {
                    uint64_t v65 = v59;
                    while (1)
                    {
                      *(unsigned int *)((char *)v62 + v65 + 4) = v64;
                      if (!v65) {
                        break;
                      }
                      uint64_t v64 = *(unsigned int *)((char *)v62 + v65 - 4);
                      BOOL result = sub_20DC53C40((int *)(v60 - v63), (int *)(v60 - v64));
                      v65 -= 4;
                      if ((result & 1) == 0)
                      {
                        uint64_t v66 = (unsigned int *)((char *)v62 + v65 + 4);
                        goto LABEL_83;
                      }
                    }
                    uint64_t v66 = v62;
LABEL_83:
                    *uint64_t v66 = v63;
                  }
                  unint64_t v56 = v61 + 1;
                  v59 += 4;
                  uint64_t v9 = v62;
                }
                while (v61 + 1 != a2);
              }
            }
            else if (!v58)
            {
              uint64_t v108 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
              do
              {
                uint64_t v110 = *v9;
                uint64_t v109 = v9[1];
                uint64_t v9 = v56;
                BOOL result = sub_20DC53C40((int *)(v108 - v109), (int *)(v108 - v110));
                if (result)
                {
                  uint64_t v111 = v9;
                  do
                  {
                    *uint64_t v111 = v110;
                    uint64_t v110 = *(v111 - 2);
                    BOOL result = sub_20DC53C40((int *)(v108 - v109), (int *)(v108 - v110));
                    --v111;
                  }
                  while ((result & 1) != 0);
                  *uint64_t v111 = v109;
                }
                unint64_t v56 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v9 != a2)
            {
              int64_t v124 = v9;
              int64_t v67 = (unint64_t)(v13 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = *(void *)a3;
                  int64_t v117 = v69;
                  uint64_t v71 = (2 * v69) | 1;
                  uint64_t v72 = &v124[v71];
                  uint64_t v73 = 2 * v69 + 2;
                  if (v73 < v13)
                  {
                    uint64_t v114 = *v72;
                    uint64_t v77 = *(void *)(v70 + 32);
                    uint64_t v76 = *(void *)(v70 + 40);
                    uint64_t v75 = v72[1];
                    BOOL v74 = sub_20DC53C40((int *)(v76 + v77 - v114), (int *)(v76 + v77 - v75));
                    if (v74) {
                      ++v72;
                    }
                    else {
                      LODWORD(v75) = v114;
                    }
                    if (v74) {
                      uint64_t v71 = v73;
                    }
                  }
                  else
                  {
                    LODWORD(v75) = *v72;
                    uint64_t v77 = *(void *)(v70 + 32);
                    uint64_t v76 = *(void *)(v70 + 40);
                  }
                  int64_t v69 = v117;
                  uint64_t v78 = &v124[v117];
                  uint64_t v79 = v76 + v77;
                  uint64_t v115 = *v78;
                  uint64_t v80 = (int *)(v79 - v115);
                  BOOL result = sub_20DC53C40((int *)(v79 - v75), (int *)(v79 - v115));
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      *uint64_t v78 = v75;
                      uint64_t v78 = v72;
                      if (v67 < v71) {
                        break;
                      }
                      uint64_t v81 = (2 * v71) | 1;
                      uint64_t v72 = &v124[v81];
                      uint64_t v71 = 2 * v71 + 2;
                      if (v71 < v13)
                      {
                        uint64_t v75 = *v72;
                        unint64_t v82 = (int *)(v79 - v75);
                        uint64_t v83 = v80;
                        uint64_t v84 = v79;
                        uint64_t v85 = v72[1];
                        BOOL v86 = sub_20DC53C40(v82, (int *)(v84 - v85));
                        if (v86) {
                          LODWORD(v75) = v85;
                        }
                        uint64_t v79 = v84;
                        uint64_t v80 = v83;
                        if (v86) {
                          ++v72;
                        }
                        int64_t v67 = (unint64_t)(v13 - 2) >> 1;
                        a2 = v121;
                        if (!v86) {
                          uint64_t v71 = v81;
                        }
                      }
                      else
                      {
                        LODWORD(v75) = *v72;
                        uint64_t v71 = v81;
                      }
                      BOOL result = sub_20DC53C40((int *)(v79 - v75), v80);
                    }
                    while (!result);
                    int64_t v69 = v117;
                    *uint64_t v78 = v115;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              unint64_t v87 = v124;
              do
              {
                unint64_t v122 = a2;
                uint64_t v88 = 0;
                unsigned int v118 = *v87;
                uint64_t v89 = *(void *)a3;
                uint64_t v90 = v13 - 2;
                if (v13 < 2) {
                  uint64_t v90 = v13 - 1;
                }
                uint64_t v91 = v90 >> 1;
                do
                {
                  unint64_t v92 = &v87[v88 + 1];
                  uint64_t v93 = (2 * v88) | 1;
                  uint64_t v94 = 2 * v88 + 2;
                  if (v94 < v13)
                  {
                    uint64_t v95 = *v92;
                    uint64_t v96 = *(void *)(v89 + 40) + *(void *)(v89 + 32);
                    uint64_t v97 = v92[1];
                    BOOL result = sub_20DC53C40((int *)(v96 - v95), (int *)(v96 - v97));
                    if (result) {
                      unsigned int v98 = v97;
                    }
                    else {
                      unsigned int v98 = v95;
                    }
                    if (result)
                    {
                      ++v92;
                      uint64_t v88 = v94;
                    }
                    else
                    {
                      uint64_t v88 = v93;
                    }
                  }
                  else
                  {
                    unsigned int v98 = *v92;
                    uint64_t v88 = (2 * v88) | 1;
                  }
                  *unint64_t v87 = v98;
                  unint64_t v87 = v92;
                }
                while (v88 <= v91);
                uint64_t v99 = v122 - 1;
                if (v92 == v122 - 1)
                {
                  uint64_t v106 = v122 - 1;
                  unsigned int *v92 = v118;
                }
                else
                {
                  unsigned int *v92 = *v99;
                  uint64_t v106 = v122 - 1;
                  *uint64_t v99 = v118;
                  uint64_t v100 = (char *)v92 - (char *)v124 + 4;
                  if (v100 >= 5)
                  {
                    unint64_t v101 = (((unint64_t)v100 >> 2) - 2) >> 1;
                    unint64_t v102 = &v124[v101];
                    uint64_t v103 = *v102;
                    uint64_t v104 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                    uint64_t v105 = *v92;
                    BOOL result = sub_20DC53C40((int *)(v104 - v103), (int *)(v104 - v105));
                    if (result)
                    {
                      do
                      {
                        unsigned int *v92 = v103;
                        unint64_t v92 = v102;
                        if (!v101) {
                          break;
                        }
                        unint64_t v101 = (v101 - 1) >> 1;
                        unint64_t v102 = &v124[v101];
                        uint64_t v103 = *v102;
                        BOOL result = sub_20DC53C40((int *)(v104 - v103), (int *)(v104 - v105));
                      }
                      while ((result & 1) != 0);
                      unsigned int *v92 = v105;
                    }
                  }
                }
                BOOL v107 = v13-- <= 2;
                a2 = v106;
                unint64_t v87 = v124;
              }
              while (!v107);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = &v9[(unint64_t)v13 >> 1];
          uint64_t v16 = *(void *)(*(void *)v11 + 32);
          uint64_t v17 = *(void *)(*(void *)v11 + 40);
          if ((unint64_t)v12 < 0x201)
          {
            sub_20DC53978(v15, v9, v116, v16, v17);
          }
          else
          {
            sub_20DC53978(v9, v15, v116, v16, v17);
            sub_20DC53978(v9 + 1, v15 - 1, v113, *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            sub_20DC53978(v9 + 2, &v9[v14 + 1], v112, *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            sub_20DC53978(v15 - 1, v15, &v9[v14 + 1], *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            unsigned int v18 = *v9;
            unsigned int *v9 = *v15;
            *uint64_t v15 = v18;
          }
          --a4;
          uint64_t v19 = *(void *)v11;
          BOOL v20 = (unsigned int *)*v9;
          uint64_t v123 = a4;
          if (a5) {
            break;
          }
          uint64_t v22 = *(void *)(v19 + 32);
          uint64_t v21 = *(void *)(v19 + 40);
          uint64_t v23 = v21 + v22;
          uint64_t v24 = (int *)(v21 + v22 - (void)v20);
          if (sub_20DC53C40((int *)(v21 + v22 - *(v9 - 1)), v24)) {
            goto LABEL_13;
          }
          BOOL result = sub_20DC53C40((int *)(v21 + v22 - (void)v20), (int *)(v23 - *v116));
          if (result)
          {
            uint64_t v10 = v9;
            do
            {
              unsigned int v42 = v10[1];
              ++v10;
              BOOL result = sub_20DC53C40((int *)(v21 + v22 - (void)v20), (int *)(v23 - v42));
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v43 = v9 + 1;
            do
            {
              uint64_t v10 = v43;
              if (v43 >= a2) {
                break;
              }
              ++v43;
              BOOL result = sub_20DC53C40(v24, (int *)(v23 - *v10));
            }
            while (!result);
          }
          unsigned int v44 = a2;
          if (v10 < a2)
          {
            unsigned int v44 = a2;
            do
            {
              unsigned int v45 = *--v44;
              BOOL result = sub_20DC53C40(v24, (int *)(v23 - v45));
            }
            while ((result & 1) != 0);
          }
          if (v10 < v44)
          {
            unsigned int v46 = *v10;
            unsigned int v47 = *v44;
            do
            {
              *uint64_t v10 = v47;
              *unsigned int v44 = v46;
              do
              {
                unsigned int v48 = v10[1];
                ++v10;
                unsigned int v46 = v48;
              }
              while (!sub_20DC53C40(v24, (int *)(v23 - v48)));
              do
              {
                unsigned int v49 = *--v44;
                unsigned int v47 = v49;
                BOOL result = sub_20DC53C40(v24, (int *)(v23 - v49));
              }
              while ((result & 1) != 0);
            }
            while (v10 < v44);
          }
          uint64_t v50 = v10 - 1;
          BOOL v5 = v10 - 1 >= v9;
          BOOL v6 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            unsigned int *v9 = *v50;
          }
          a5 = 0;
          *uint64_t v50 = v20;
          uint64_t v11 = a3;
        }
        uint64_t v22 = *(void *)(v19 + 32);
        uint64_t v21 = *(void *)(v19 + 40);
LABEL_13:
        uint64_t v25 = 0;
        uint64_t v26 = v21 + v22;
        uint64_t v27 = (int *)(v21 + v22 - (void)v20);
        do
          uint64_t v28 = v9[++v25];
        while (sub_20DC53C40((int *)(v26 - v28), v27));
        uint64_t v29 = &v9[v25];
        unsigned int v30 = v121;
        if (v25 == 1)
        {
          unsigned int v30 = v121;
          do
          {
            if (v29 >= v30) {
              break;
            }
            unsigned int v32 = *--v30;
          }
          while (!sub_20DC53C40((int *)(v26 - v32), v27));
        }
        else
        {
          do
            unsigned int v31 = *--v30;
          while (!sub_20DC53C40((int *)(v26 - v31), v27));
        }
        if (v29 >= v30)
        {
          uint64_t v40 = v29 - 1;
          a4 = v123;
        }
        else
        {
          int v33 = (int)v20;
          BOOL v20 = v9;
          unsigned int v34 = *v30;
          unsigned int v35 = v28;
          uint64_t v36 = v29;
          uint64_t v37 = v30;
          do
          {
            unsigned int *v36 = v34;
            *uint64_t v37 = v35;
            do
            {
              unsigned int v38 = v36[1];
              ++v36;
              unsigned int v35 = v38;
            }
            while (sub_20DC53C40((int *)(v26 - v38), v27));
            do
            {
              unsigned int v39 = *--v37;
              unsigned int v34 = v39;
            }
            while (!sub_20DC53C40((int *)(v26 - v39), v27));
          }
          while (v36 < v37);
          uint64_t v40 = v36 - 1;
          uint64_t v9 = v20;
          a4 = v123;
          LODWORD(v20) = v33;
        }
        uint64_t v11 = a3;
        a2 = v121;
        if (v40 != v9) {
          unsigned int *v9 = *v40;
        }
        *uint64_t v40 = v20;
        if (v29 >= v30) {
          break;
        }
LABEL_34:
        BOOL result = sub_20DC561A4(v9, v40, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v10 = v40 + 1;
      }
      BOOL v41 = sub_20DC56A90(v9, v40, a3);
      uint64_t v10 = v40 + 1;
      BOOL result = sub_20DC56A90(v40 + 1, v121, a3);
      if (result) {
        break;
      }
      if (!v41) {
        goto LABEL_34;
      }
    }
    a2 = v40;
    if (!v41) {
      continue;
    }
    return result;
  }
}

BOOL sub_20DC56A90(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      uint64_t v10 = *a1;
      if (sub_20DC53C40((int *)(v9 - v8), (int *)(v9 - v10)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_20DC53978(a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a3 + 40));
      return 1;
    case 4:
      sub_20DC53CE0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20DC53DA0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      sub_20DC53978(a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a3 + 40));
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      uint64_t v15 = 12;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v12;
    uint64_t v17 = *v11;
    if (sub_20DC53C40((int *)(v14 - v16), (int *)(v14 - v17)))
    {
      uint64_t v18 = v15;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v17;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v17 = *(unsigned int *)((char *)a1 + v18 - 8);
        BOOL v20 = sub_20DC53C40((int *)(v14 - v16), (int *)(v14 - v17));
        uint64_t v18 = v19;
        if (!v20)
        {
          uint64_t v21 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      *uint64_t v21 = v16;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    uint64_t v11 = v12;
    v15 += 4;
    if (++v12 == a2) {
      return 1;
    }
  }
}

uint64_t sub_20DC56C78(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = (unsigned int *)result;
  while (2)
  {
    uint64_t v113 = a2 - 2;
    uint64_t v116 = a2 - 1;
    unint64_t v112 = a2 - 3;
    uint64_t v10 = v9;
    uint64_t v11 = a3;
    uint64_t v121 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v12 = (char *)a2 - (char *)v10;
          uint64_t v13 = a2 - v10;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v51 = *(a2 - 1);
                uint64_t v52 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                uint64_t v53 = *v9;
                BOOL result = sub_20DC53C40((int *)(v52 - v51), (int *)(v52 - v53));
                if (result)
                {
                  unsigned int *v9 = v51;
                  *(a2 - 1) = v53;
                }
                break;
              case 3:
                uint64_t v54 = *(void *)(*(void *)a3 + 32);
                uint64_t v55 = *(void *)(*(void *)a3 + 40);
                BOOL result = sub_20DC53978(v9, v9 + 1, v116, v54, v55);
                break;
              case 4:
                BOOL result = sub_20DC53CE0(v9, v9 + 1, v9 + 2, v116, a3);
                break;
              case 5:
                BOOL result = sub_20DC53DA0(v9, v9 + 1, v9 + 2, v9 + 3, v116, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            unint64_t v56 = v9 + 1;
            BOOL v58 = v9 == a2 || v56 == a2;
            if (a5)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                uint64_t v60 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                unint64_t v61 = v9;
                do
                {
                  unint64_t v62 = v9;
                  uint64_t v64 = *v61;
                  uint64_t v63 = v61[1];
                  unint64_t v61 = v56;
                  BOOL result = sub_20DC53C40((int *)(v60 - v63), (int *)(v60 - v64));
                  if (result)
                  {
                    uint64_t v65 = v59;
                    while (1)
                    {
                      *(unsigned int *)((char *)v62 + v65 + 4) = v64;
                      if (!v65) {
                        break;
                      }
                      uint64_t v64 = *(unsigned int *)((char *)v62 + v65 - 4);
                      BOOL result = sub_20DC53C40((int *)(v60 - v63), (int *)(v60 - v64));
                      v65 -= 4;
                      if ((result & 1) == 0)
                      {
                        uint64_t v66 = (unsigned int *)((char *)v62 + v65 + 4);
                        goto LABEL_83;
                      }
                    }
                    uint64_t v66 = v62;
LABEL_83:
                    *uint64_t v66 = v63;
                  }
                  unint64_t v56 = v61 + 1;
                  v59 += 4;
                  uint64_t v9 = v62;
                }
                while (v61 + 1 != a2);
              }
            }
            else if (!v58)
            {
              uint64_t v108 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
              do
              {
                uint64_t v110 = *v9;
                uint64_t v109 = v9[1];
                uint64_t v9 = v56;
                BOOL result = sub_20DC53C40((int *)(v108 - v109), (int *)(v108 - v110));
                if (result)
                {
                  uint64_t v111 = v9;
                  do
                  {
                    *uint64_t v111 = v110;
                    uint64_t v110 = *(v111 - 2);
                    BOOL result = sub_20DC53C40((int *)(v108 - v109), (int *)(v108 - v110));
                    --v111;
                  }
                  while ((result & 1) != 0);
                  *uint64_t v111 = v109;
                }
                unint64_t v56 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v9 != a2)
            {
              int64_t v124 = v9;
              int64_t v67 = (unint64_t)(v13 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = *(void *)a3;
                  int64_t v117 = v69;
                  uint64_t v71 = (2 * v69) | 1;
                  uint64_t v72 = &v124[v71];
                  uint64_t v73 = 2 * v69 + 2;
                  if (v73 < v13)
                  {
                    uint64_t v114 = *v72;
                    uint64_t v77 = *(void *)(v70 + 32);
                    uint64_t v76 = *(void *)(v70 + 40);
                    uint64_t v75 = v72[1];
                    BOOL v74 = sub_20DC53C40((int *)(v76 + v77 - v114), (int *)(v76 + v77 - v75));
                    if (v74) {
                      ++v72;
                    }
                    else {
                      LODWORD(v75) = v114;
                    }
                    if (v74) {
                      uint64_t v71 = v73;
                    }
                  }
                  else
                  {
                    LODWORD(v75) = *v72;
                    uint64_t v77 = *(void *)(v70 + 32);
                    uint64_t v76 = *(void *)(v70 + 40);
                  }
                  int64_t v69 = v117;
                  uint64_t v78 = &v124[v117];
                  uint64_t v79 = v76 + v77;
                  uint64_t v115 = *v78;
                  uint64_t v80 = (int *)(v79 - v115);
                  BOOL result = sub_20DC53C40((int *)(v79 - v75), (int *)(v79 - v115));
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      *uint64_t v78 = v75;
                      uint64_t v78 = v72;
                      if (v67 < v71) {
                        break;
                      }
                      uint64_t v81 = (2 * v71) | 1;
                      uint64_t v72 = &v124[v81];
                      uint64_t v71 = 2 * v71 + 2;
                      if (v71 < v13)
                      {
                        uint64_t v75 = *v72;
                        unint64_t v82 = (int *)(v79 - v75);
                        uint64_t v83 = v80;
                        uint64_t v84 = v79;
                        uint64_t v85 = v72[1];
                        BOOL v86 = sub_20DC53C40(v82, (int *)(v84 - v85));
                        if (v86) {
                          LODWORD(v75) = v85;
                        }
                        uint64_t v79 = v84;
                        uint64_t v80 = v83;
                        if (v86) {
                          ++v72;
                        }
                        int64_t v67 = (unint64_t)(v13 - 2) >> 1;
                        a2 = v121;
                        if (!v86) {
                          uint64_t v71 = v81;
                        }
                      }
                      else
                      {
                        LODWORD(v75) = *v72;
                        uint64_t v71 = v81;
                      }
                      BOOL result = sub_20DC53C40((int *)(v79 - v75), v80);
                    }
                    while (!result);
                    int64_t v69 = v117;
                    *uint64_t v78 = v115;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              unint64_t v87 = v124;
              do
              {
                unint64_t v122 = a2;
                uint64_t v88 = 0;
                unsigned int v118 = *v87;
                uint64_t v89 = *(void *)a3;
                uint64_t v90 = v13 - 2;
                if (v13 < 2) {
                  uint64_t v90 = v13 - 1;
                }
                uint64_t v91 = v90 >> 1;
                do
                {
                  unint64_t v92 = &v87[v88 + 1];
                  uint64_t v93 = (2 * v88) | 1;
                  uint64_t v94 = 2 * v88 + 2;
                  if (v94 < v13)
                  {
                    uint64_t v95 = *v92;
                    uint64_t v96 = *(void *)(v89 + 40) + *(void *)(v89 + 32);
                    uint64_t v97 = v92[1];
                    BOOL result = sub_20DC53C40((int *)(v96 - v95), (int *)(v96 - v97));
                    if (result) {
                      unsigned int v98 = v97;
                    }
                    else {
                      unsigned int v98 = v95;
                    }
                    if (result)
                    {
                      ++v92;
                      uint64_t v88 = v94;
                    }
                    else
                    {
                      uint64_t v88 = v93;
                    }
                  }
                  else
                  {
                    unsigned int v98 = *v92;
                    uint64_t v88 = (2 * v88) | 1;
                  }
                  *unint64_t v87 = v98;
                  unint64_t v87 = v92;
                }
                while (v88 <= v91);
                uint64_t v99 = v122 - 1;
                if (v92 == v122 - 1)
                {
                  uint64_t v106 = v122 - 1;
                  unsigned int *v92 = v118;
                }
                else
                {
                  unsigned int *v92 = *v99;
                  uint64_t v106 = v122 - 1;
                  *uint64_t v99 = v118;
                  uint64_t v100 = (char *)v92 - (char *)v124 + 4;
                  if (v100 >= 5)
                  {
                    unint64_t v101 = (((unint64_t)v100 >> 2) - 2) >> 1;
                    unint64_t v102 = &v124[v101];
                    uint64_t v103 = *v102;
                    uint64_t v104 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                    uint64_t v105 = *v92;
                    BOOL result = sub_20DC53C40((int *)(v104 - v103), (int *)(v104 - v105));
                    if (result)
                    {
                      do
                      {
                        unsigned int *v92 = v103;
                        unint64_t v92 = v102;
                        if (!v101) {
                          break;
                        }
                        unint64_t v101 = (v101 - 1) >> 1;
                        unint64_t v102 = &v124[v101];
                        uint64_t v103 = *v102;
                        BOOL result = sub_20DC53C40((int *)(v104 - v103), (int *)(v104 - v105));
                      }
                      while ((result & 1) != 0);
                      unsigned int *v92 = v105;
                    }
                  }
                }
                BOOL v107 = v13-- <= 2;
                a2 = v106;
                unint64_t v87 = v124;
              }
              while (!v107);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = &v9[(unint64_t)v13 >> 1];
          uint64_t v16 = *(void *)(*(void *)v11 + 32);
          uint64_t v17 = *(void *)(*(void *)v11 + 40);
          if ((unint64_t)v12 < 0x201)
          {
            sub_20DC53978(v15, v9, v116, v16, v17);
          }
          else
          {
            sub_20DC53978(v9, v15, v116, v16, v17);
            sub_20DC53978(v9 + 1, v15 - 1, v113, *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            sub_20DC53978(v9 + 2, &v9[v14 + 1], v112, *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            sub_20DC53978(v15 - 1, v15, &v9[v14 + 1], *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            unsigned int v18 = *v9;
            unsigned int *v9 = *v15;
            *uint64_t v15 = v18;
          }
          --a4;
          uint64_t v19 = *(void *)v11;
          BOOL v20 = (unsigned int *)*v9;
          uint64_t v123 = a4;
          if (a5) {
            break;
          }
          uint64_t v22 = *(void *)(v19 + 32);
          uint64_t v21 = *(void *)(v19 + 40);
          uint64_t v23 = v21 + v22;
          uint64_t v24 = (int *)(v21 + v22 - (void)v20);
          if (sub_20DC53C40((int *)(v21 + v22 - *(v9 - 1)), v24)) {
            goto LABEL_13;
          }
          BOOL result = sub_20DC53C40((int *)(v21 + v22 - (void)v20), (int *)(v23 - *v116));
          if (result)
          {
            uint64_t v10 = v9;
            do
            {
              unsigned int v42 = v10[1];
              ++v10;
              BOOL result = sub_20DC53C40((int *)(v21 + v22 - (void)v20), (int *)(v23 - v42));
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v43 = v9 + 1;
            do
            {
              uint64_t v10 = v43;
              if (v43 >= a2) {
                break;
              }
              ++v43;
              BOOL result = sub_20DC53C40(v24, (int *)(v23 - *v10));
            }
            while (!result);
          }
          unsigned int v44 = a2;
          if (v10 < a2)
          {
            unsigned int v44 = a2;
            do
            {
              unsigned int v45 = *--v44;
              BOOL result = sub_20DC53C40(v24, (int *)(v23 - v45));
            }
            while ((result & 1) != 0);
          }
          if (v10 < v44)
          {
            unsigned int v46 = *v10;
            unsigned int v47 = *v44;
            do
            {
              *uint64_t v10 = v47;
              *unsigned int v44 = v46;
              do
              {
                unsigned int v48 = v10[1];
                ++v10;
                unsigned int v46 = v48;
              }
              while (!sub_20DC53C40(v24, (int *)(v23 - v48)));
              do
              {
                unsigned int v49 = *--v44;
                unsigned int v47 = v49;
                BOOL result = sub_20DC53C40(v24, (int *)(v23 - v49));
              }
              while ((result & 1) != 0);
            }
            while (v10 < v44);
          }
          uint64_t v50 = v10 - 1;
          BOOL v5 = v10 - 1 >= v9;
          BOOL v6 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            unsigned int *v9 = *v50;
          }
          a5 = 0;
          *uint64_t v50 = v20;
          uint64_t v11 = a3;
        }
        uint64_t v22 = *(void *)(v19 + 32);
        uint64_t v21 = *(void *)(v19 + 40);
LABEL_13:
        uint64_t v25 = 0;
        uint64_t v26 = v21 + v22;
        uint64_t v27 = (int *)(v21 + v22 - (void)v20);
        do
          uint64_t v28 = v9[++v25];
        while (sub_20DC53C40((int *)(v26 - v28), v27));
        uint64_t v29 = &v9[v25];
        unsigned int v30 = v121;
        if (v25 == 1)
        {
          unsigned int v30 = v121;
          do
          {
            if (v29 >= v30) {
              break;
            }
            unsigned int v32 = *--v30;
          }
          while (!sub_20DC53C40((int *)(v26 - v32), v27));
        }
        else
        {
          do
            unsigned int v31 = *--v30;
          while (!sub_20DC53C40((int *)(v26 - v31), v27));
        }
        if (v29 >= v30)
        {
          uint64_t v40 = v29 - 1;
          a4 = v123;
        }
        else
        {
          int v33 = (int)v20;
          BOOL v20 = v9;
          unsigned int v34 = *v30;
          unsigned int v35 = v28;
          uint64_t v36 = v29;
          uint64_t v37 = v30;
          do
          {
            unsigned int *v36 = v34;
            *uint64_t v37 = v35;
            do
            {
              unsigned int v38 = v36[1];
              ++v36;
              unsigned int v35 = v38;
            }
            while (sub_20DC53C40((int *)(v26 - v38), v27));
            do
            {
              unsigned int v39 = *--v37;
              unsigned int v34 = v39;
            }
            while (!sub_20DC53C40((int *)(v26 - v39), v27));
          }
          while (v36 < v37);
          uint64_t v40 = v36 - 1;
          uint64_t v9 = v20;
          a4 = v123;
          LODWORD(v20) = v33;
        }
        uint64_t v11 = a3;
        a2 = v121;
        if (v40 != v9) {
          unsigned int *v9 = *v40;
        }
        *uint64_t v40 = v20;
        if (v29 >= v30) {
          break;
        }
LABEL_34:
        BOOL result = sub_20DC56C78(v9, v40, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v10 = v40 + 1;
      }
      BOOL v41 = sub_20DC57564(v9, v40, a3);
      uint64_t v10 = v40 + 1;
      BOOL result = sub_20DC57564(v40 + 1, v121, a3);
      if (result) {
        break;
      }
      if (!v41) {
        goto LABEL_34;
      }
    }
    a2 = v40;
    if (!v41) {
      continue;
    }
    return result;
  }
}

BOOL sub_20DC57564(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      uint64_t v10 = *a1;
      if (sub_20DC53C40((int *)(v9 - v8), (int *)(v9 - v10)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_20DC53978(a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a3 + 40));
      return 1;
    case 4:
      sub_20DC53CE0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20DC53DA0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      sub_20DC53978(a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a3 + 40));
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      uint64_t v15 = 12;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v12;
    uint64_t v17 = *v11;
    if (sub_20DC53C40((int *)(v14 - v16), (int *)(v14 - v17)))
    {
      uint64_t v18 = v15;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v17;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v17 = *(unsigned int *)((char *)a1 + v18 - 8);
        BOOL v20 = sub_20DC53C40((int *)(v14 - v16), (int *)(v14 - v17));
        uint64_t v18 = v19;
        if (!v20)
        {
          uint64_t v21 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      *uint64_t v21 = v16;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    uint64_t v11 = v12;
    v15 += 4;
    if (++v12 == a2) {
      return 1;
    }
  }
}

uint64_t sub_20DC5774C(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = (unsigned int *)result;
  while (2)
  {
    uint64_t v113 = a2 - 2;
    uint64_t v116 = a2 - 1;
    unint64_t v112 = a2 - 3;
    uint64_t v10 = v9;
    uint64_t v11 = a3;
    uint64_t v121 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v12 = (char *)a2 - (char *)v10;
          uint64_t v13 = a2 - v10;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v51 = *(a2 - 1);
                uint64_t v52 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                uint64_t v53 = *v9;
                BOOL result = sub_20DC53C40((int *)(v52 - v51), (int *)(v52 - v53));
                if (result)
                {
                  unsigned int *v9 = v51;
                  *(a2 - 1) = v53;
                }
                break;
              case 3:
                uint64_t v54 = *(void *)(*(void *)a3 + 32);
                uint64_t v55 = *(void *)(*(void *)a3 + 40);
                BOOL result = sub_20DC53978(v9, v9 + 1, v116, v54, v55);
                break;
              case 4:
                BOOL result = sub_20DC53CE0(v9, v9 + 1, v9 + 2, v116, a3);
                break;
              case 5:
                BOOL result = sub_20DC53DA0(v9, v9 + 1, v9 + 2, v9 + 3, v116, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            unint64_t v56 = v9 + 1;
            BOOL v58 = v9 == a2 || v56 == a2;
            if (a5)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                uint64_t v60 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                unint64_t v61 = v9;
                do
                {
                  unint64_t v62 = v9;
                  uint64_t v64 = *v61;
                  uint64_t v63 = v61[1];
                  unint64_t v61 = v56;
                  BOOL result = sub_20DC53C40((int *)(v60 - v63), (int *)(v60 - v64));
                  if (result)
                  {
                    uint64_t v65 = v59;
                    while (1)
                    {
                      *(unsigned int *)((char *)v62 + v65 + 4) = v64;
                      if (!v65) {
                        break;
                      }
                      uint64_t v64 = *(unsigned int *)((char *)v62 + v65 - 4);
                      BOOL result = sub_20DC53C40((int *)(v60 - v63), (int *)(v60 - v64));
                      v65 -= 4;
                      if ((result & 1) == 0)
                      {
                        uint64_t v66 = (unsigned int *)((char *)v62 + v65 + 4);
                        goto LABEL_83;
                      }
                    }
                    uint64_t v66 = v62;
LABEL_83:
                    *uint64_t v66 = v63;
                  }
                  unint64_t v56 = v61 + 1;
                  v59 += 4;
                  uint64_t v9 = v62;
                }
                while (v61 + 1 != a2);
              }
            }
            else if (!v58)
            {
              uint64_t v108 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
              do
              {
                uint64_t v110 = *v9;
                uint64_t v109 = v9[1];
                uint64_t v9 = v56;
                BOOL result = sub_20DC53C40((int *)(v108 - v109), (int *)(v108 - v110));
                if (result)
                {
                  uint64_t v111 = v9;
                  do
                  {
                    *uint64_t v111 = v110;
                    uint64_t v110 = *(v111 - 2);
                    BOOL result = sub_20DC53C40((int *)(v108 - v109), (int *)(v108 - v110));
                    --v111;
                  }
                  while ((result & 1) != 0);
                  *uint64_t v111 = v109;
                }
                unint64_t v56 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v9 != a2)
            {
              int64_t v124 = v9;
              int64_t v67 = (unint64_t)(v13 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = *(void *)a3;
                  int64_t v117 = v69;
                  uint64_t v71 = (2 * v69) | 1;
                  uint64_t v72 = &v124[v71];
                  uint64_t v73 = 2 * v69 + 2;
                  if (v73 < v13)
                  {
                    uint64_t v114 = *v72;
                    uint64_t v77 = *(void *)(v70 + 32);
                    uint64_t v76 = *(void *)(v70 + 40);
                    uint64_t v75 = v72[1];
                    BOOL v74 = sub_20DC53C40((int *)(v76 + v77 - v114), (int *)(v76 + v77 - v75));
                    if (v74) {
                      ++v72;
                    }
                    else {
                      LODWORD(v75) = v114;
                    }
                    if (v74) {
                      uint64_t v71 = v73;
                    }
                  }
                  else
                  {
                    LODWORD(v75) = *v72;
                    uint64_t v77 = *(void *)(v70 + 32);
                    uint64_t v76 = *(void *)(v70 + 40);
                  }
                  int64_t v69 = v117;
                  uint64_t v78 = &v124[v117];
                  uint64_t v79 = v76 + v77;
                  uint64_t v115 = *v78;
                  uint64_t v80 = (int *)(v79 - v115);
                  BOOL result = sub_20DC53C40((int *)(v79 - v75), (int *)(v79 - v115));
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      *uint64_t v78 = v75;
                      uint64_t v78 = v72;
                      if (v67 < v71) {
                        break;
                      }
                      uint64_t v81 = (2 * v71) | 1;
                      uint64_t v72 = &v124[v81];
                      uint64_t v71 = 2 * v71 + 2;
                      if (v71 < v13)
                      {
                        uint64_t v75 = *v72;
                        unint64_t v82 = (int *)(v79 - v75);
                        uint64_t v83 = v80;
                        uint64_t v84 = v79;
                        uint64_t v85 = v72[1];
                        BOOL v86 = sub_20DC53C40(v82, (int *)(v84 - v85));
                        if (v86) {
                          LODWORD(v75) = v85;
                        }
                        uint64_t v79 = v84;
                        uint64_t v80 = v83;
                        if (v86) {
                          ++v72;
                        }
                        int64_t v67 = (unint64_t)(v13 - 2) >> 1;
                        a2 = v121;
                        if (!v86) {
                          uint64_t v71 = v81;
                        }
                      }
                      else
                      {
                        LODWORD(v75) = *v72;
                        uint64_t v71 = v81;
                      }
                      BOOL result = sub_20DC53C40((int *)(v79 - v75), v80);
                    }
                    while (!result);
                    int64_t v69 = v117;
                    *uint64_t v78 = v115;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              unint64_t v87 = v124;
              do
              {
                unint64_t v122 = a2;
                uint64_t v88 = 0;
                unsigned int v118 = *v87;
                uint64_t v89 = *(void *)a3;
                uint64_t v90 = v13 - 2;
                if (v13 < 2) {
                  uint64_t v90 = v13 - 1;
                }
                uint64_t v91 = v90 >> 1;
                do
                {
                  unint64_t v92 = &v87[v88 + 1];
                  uint64_t v93 = (2 * v88) | 1;
                  uint64_t v94 = 2 * v88 + 2;
                  if (v94 < v13)
                  {
                    uint64_t v95 = *v92;
                    uint64_t v96 = *(void *)(v89 + 40) + *(void *)(v89 + 32);
                    uint64_t v97 = v92[1];
                    BOOL result = sub_20DC53C40((int *)(v96 - v95), (int *)(v96 - v97));
                    if (result) {
                      unsigned int v98 = v97;
                    }
                    else {
                      unsigned int v98 = v95;
                    }
                    if (result)
                    {
                      ++v92;
                      uint64_t v88 = v94;
                    }
                    else
                    {
                      uint64_t v88 = v93;
                    }
                  }
                  else
                  {
                    unsigned int v98 = *v92;
                    uint64_t v88 = (2 * v88) | 1;
                  }
                  *unint64_t v87 = v98;
                  unint64_t v87 = v92;
                }
                while (v88 <= v91);
                uint64_t v99 = v122 - 1;
                if (v92 == v122 - 1)
                {
                  uint64_t v106 = v122 - 1;
                  unsigned int *v92 = v118;
                }
                else
                {
                  unsigned int *v92 = *v99;
                  uint64_t v106 = v122 - 1;
                  *uint64_t v99 = v118;
                  uint64_t v100 = (char *)v92 - (char *)v124 + 4;
                  if (v100 >= 5)
                  {
                    unint64_t v101 = (((unint64_t)v100 >> 2) - 2) >> 1;
                    unint64_t v102 = &v124[v101];
                    uint64_t v103 = *v102;
                    uint64_t v104 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
                    uint64_t v105 = *v92;
                    BOOL result = sub_20DC53C40((int *)(v104 - v103), (int *)(v104 - v105));
                    if (result)
                    {
                      do
                      {
                        unsigned int *v92 = v103;
                        unint64_t v92 = v102;
                        if (!v101) {
                          break;
                        }
                        unint64_t v101 = (v101 - 1) >> 1;
                        unint64_t v102 = &v124[v101];
                        uint64_t v103 = *v102;
                        BOOL result = sub_20DC53C40((int *)(v104 - v103), (int *)(v104 - v105));
                      }
                      while ((result & 1) != 0);
                      unsigned int *v92 = v105;
                    }
                  }
                }
                BOOL v107 = v13-- <= 2;
                a2 = v106;
                unint64_t v87 = v124;
              }
              while (!v107);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = &v9[(unint64_t)v13 >> 1];
          uint64_t v16 = *(void *)(*(void *)v11 + 32);
          uint64_t v17 = *(void *)(*(void *)v11 + 40);
          if ((unint64_t)v12 < 0x201)
          {
            sub_20DC53978(v15, v9, v116, v16, v17);
          }
          else
          {
            sub_20DC53978(v9, v15, v116, v16, v17);
            sub_20DC53978(v9 + 1, v15 - 1, v113, *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            sub_20DC53978(v9 + 2, &v9[v14 + 1], v112, *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            sub_20DC53978(v15 - 1, v15, &v9[v14 + 1], *(void *)(*(void *)v11 + 32), *(void *)(*(void *)v11 + 40));
            unsigned int v18 = *v9;
            unsigned int *v9 = *v15;
            *uint64_t v15 = v18;
          }
          --a4;
          uint64_t v19 = *(void *)v11;
          BOOL v20 = (unsigned int *)*v9;
          uint64_t v123 = a4;
          if (a5) {
            break;
          }
          uint64_t v22 = *(void *)(v19 + 32);
          uint64_t v21 = *(void *)(v19 + 40);
          uint64_t v23 = v21 + v22;
          uint64_t v24 = (int *)(v21 + v22 - (void)v20);
          if (sub_20DC53C40((int *)(v21 + v22 - *(v9 - 1)), v24)) {
            goto LABEL_13;
          }
          BOOL result = sub_20DC53C40((int *)(v21 + v22 - (void)v20), (int *)(v23 - *v116));
          if (result)
          {
            uint64_t v10 = v9;
            do
            {
              unsigned int v42 = v10[1];
              ++v10;
              BOOL result = sub_20DC53C40((int *)(v21 + v22 - (void)v20), (int *)(v23 - v42));
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v43 = v9 + 1;
            do
            {
              uint64_t v10 = v43;
              if (v43 >= a2) {
                break;
              }
              ++v43;
              BOOL result = sub_20DC53C40(v24, (int *)(v23 - *v10));
            }
            while (!result);
          }
          unsigned int v44 = a2;
          if (v10 < a2)
          {
            unsigned int v44 = a2;
            do
            {
              unsigned int v45 = *--v44;
              BOOL result = sub_20DC53C40(v24, (int *)(v23 - v45));
            }
            while ((result & 1) != 0);
          }
          if (v10 < v44)
          {
            unsigned int v46 = *v10;
            unsigned int v47 = *v44;
            do
            {
              *uint64_t v10 = v47;
              *unsigned int v44 = v46;
              do
              {
                unsigned int v48 = v10[1];
                ++v10;
                unsigned int v46 = v48;
              }
              while (!sub_20DC53C40(v24, (int *)(v23 - v48)));
              do
              {
                unsigned int v49 = *--v44;
                unsigned int v47 = v49;
                BOOL result = sub_20DC53C40(v24, (int *)(v23 - v49));
              }
              while ((result & 1) != 0);
            }
            while (v10 < v44);
          }
          uint64_t v50 = v10 - 1;
          BOOL v5 = v10 - 1 >= v9;
          BOOL v6 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            unsigned int *v9 = *v50;
          }
          a5 = 0;
          *uint64_t v50 = v20;
          uint64_t v11 = a3;
        }
        uint64_t v22 = *(void *)(v19 + 32);
        uint64_t v21 = *(void *)(v19 + 40);
LABEL_13:
        uint64_t v25 = 0;
        uint64_t v26 = v21 + v22;
        uint64_t v27 = (int *)(v21 + v22 - (void)v20);
        do
          uint64_t v28 = v9[++v25];
        while (sub_20DC53C40((int *)(v26 - v28), v27));
        uint64_t v29 = &v9[v25];
        unsigned int v30 = v121;
        if (v25 == 1)
        {
          unsigned int v30 = v121;
          do
          {
            if (v29 >= v30) {
              break;
            }
            unsigned int v32 = *--v30;
          }
          while (!sub_20DC53C40((int *)(v26 - v32), v27));
        }
        else
        {
          do
            unsigned int v31 = *--v30;
          while (!sub_20DC53C40((int *)(v26 - v31), v27));
        }
        if (v29 >= v30)
        {
          uint64_t v40 = v29 - 1;
          a4 = v123;
        }
        else
        {
          int v33 = (int)v20;
          BOOL v20 = v9;
          unsigned int v34 = *v30;
          unsigned int v35 = v28;
          uint64_t v36 = v29;
          uint64_t v37 = v30;
          do
          {
            unsigned int *v36 = v34;
            *uint64_t v37 = v35;
            do
            {
              unsigned int v38 = v36[1];
              ++v36;
              unsigned int v35 = v38;
            }
            while (sub_20DC53C40((int *)(v26 - v38), v27));
            do
            {
              unsigned int v39 = *--v37;
              unsigned int v34 = v39;
            }
            while (!sub_20DC53C40((int *)(v26 - v39), v27));
          }
          while (v36 < v37);
          uint64_t v40 = v36 - 1;
          uint64_t v9 = v20;
          a4 = v123;
          LODWORD(v20) = v33;
        }
        uint64_t v11 = a3;
        a2 = v121;
        if (v40 != v9) {
          unsigned int *v9 = *v40;
        }
        *uint64_t v40 = v20;
        if (v29 >= v30) {
          break;
        }
LABEL_34:
        BOOL result = sub_20DC5774C(v9, v40, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v10 = v40 + 1;
      }
      BOOL v41 = sub_20DC58038(v9, v40, a3);
      uint64_t v10 = v40 + 1;
      BOOL result = sub_20DC58038(v40 + 1, v121, a3);
      if (result) {
        break;
      }
      if (!v41) {
        goto LABEL_34;
      }
    }
    a2 = v40;
    if (!v41) {
      continue;
    }
    return result;
  }
}

BOOL sub_20DC58038(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      uint64_t v10 = *a1;
      if (sub_20DC53C40((int *)(v9 - v8), (int *)(v9 - v10)))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_20DC53978(a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a3 + 40));
      return 1;
    case 4:
      sub_20DC53CE0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20DC53DA0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      sub_20DC53978(a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a3 + 40));
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = *(void *)(*(void *)a3 + 40) + *(void *)(*(void *)a3 + 32);
      uint64_t v15 = 12;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v12;
    uint64_t v17 = *v11;
    if (sub_20DC53C40((int *)(v14 - v16), (int *)(v14 - v17)))
    {
      uint64_t v18 = v15;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v17;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v17 = *(unsigned int *)((char *)a1 + v18 - 8);
        BOOL v20 = sub_20DC53C40((int *)(v14 - v16), (int *)(v14 - v17));
        uint64_t v18 = v19;
        if (!v20)
        {
          uint64_t v21 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      *uint64_t v21 = v16;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    uint64_t v11 = v12;
    v15 += 4;
    if (++v12 == a2) {
      return 1;
    }
  }
}

uint64_t sub_20DC58220(uint64_t result, int a2, _DWORD *a3, int a4)
{
  uint64_t v7 = result;
  uint64_t v9 = *(void *)(result + 40);
  uint64_t v8 = *(void *)(result + 48);
  *(void *)(result + 56) = v9;
  uint64_t v10 = -4;
  uint64_t v11 = -8;
  if (!a4) {
    uint64_t v11 = -4;
  }
  if (!a3) {
    uint64_t v10 = 0;
  }
  unint64_t v12 = (v11 + v10 - (*(_DWORD *)(result + 32) + v9 - v8)) & (*(void *)(result + 72) - 1);
  if (v8 - v9 < v12)
  {
    BOOL result = sub_20DC4F8B0((uint64_t *)result, v12);
    *(void *)(v7 + 48) -= v12;
  }
  else
  {
    *(void *)(result + 48) = v8 - v12;
    if (!v12) {
      goto LABEL_7;
    }
  }
  uint64_t v24 = 0;
  do
    *(unsigned char *)(*(void *)(v7 + 48) + v24++) = 0;
  while (v12 != v24);
LABEL_7:
  if (a3)
  {
    uint64_t v25 = *(void *)(v7 + 48);
    if ((unint64_t)(v25 - *(void *)(v7 + 56)) <= 3)
    {
      BOOL result = sub_20DC4F8B0((uint64_t *)v7, 4uLL);
      uint64_t v25 = *(void *)(v7 + 48);
    }
    *(void *)(v7 + 48) = v25 - 4;
    *(_DWORD *)(v25 - 4) = *a3;
  }
  if (*(void *)(v7 + 72) <= 3uLL) {
    *(void *)(v7 + 72) = 4;
  }
  uint64_t v13 = *(void *)(v7 + 32);
  uint64_t v14 = *(void *)(v7 + 40);
  uint64_t v15 = *(void *)(v7 + 48);
  unint64_t v16 = ((int)v15 - ((int)v13 + (int)v14)) & 3;
  if (v15 - *(void *)(v7 + 56) < v16)
  {
    BOOL result = sub_20DC4F8B0((uint64_t *)v7, ((int)v15 - ((int)v13 + (int)v14)) & 3);
    *(void *)(v7 + 48) -= v16;
  }
  else
  {
    uint64_t v17 = v15 - v16;
    *(void *)(v7 + 48) = v17;
    if (!v16)
    {
      int v18 = v13 + v14 - v17;
      goto LABEL_13;
    }
  }
  uint64_t v26 = 0;
  do
    *(unsigned char *)(*(void *)(v7 + 48) + v26++) = 0;
  while (v16 != v26);
  uint64_t v14 = *(void *)(v7 + 40);
  uint64_t v17 = *(void *)(v7 + 48);
  uint64_t v13 = *(void *)(v7 + 32);
  int v18 = v13 - v17 + v14;
  if (*(void *)(v7 + 72) <= 3uLL) {
    *(void *)(v7 + 72) = 4;
  }
LABEL_13:
  int v19 = v18 - a2 + 4;
  unint64_t v20 = ((_BYTE)v17 - ((_BYTE)v13 + (_BYTE)v14)) & 3;
  uint64_t v21 = *(void *)(v7 + 56);
  if (v17 - v21 < v20)
  {
    BOOL result = sub_20DC4F8B0((uint64_t *)v7, v20);
    *(void *)(v7 + 48) -= v20;
  }
  else
  {
    uint64_t v22 = v17 - v20;
    *(void *)(v7 + 48) = v17 - v20;
    if (!v20) {
      goto LABEL_15;
    }
  }
  uint64_t v27 = 0;
  do
    *(unsigned char *)(*(void *)(v7 + 48) + v27++) = 0;
  while (v20 != v27);
  uint64_t v22 = *(void *)(v7 + 48);
  uint64_t v21 = *(void *)(v7 + 56);
LABEL_15:
  if ((unint64_t)(v22 - v21) <= 3)
  {
    BOOL result = sub_20DC4F8B0((uint64_t *)v7, 4uLL);
    uint64_t v22 = *(void *)(v7 + 48);
  }
  *(_DWORD *)(v22 - 4) = v19;
  uint64_t v23 = v22 - 4;
  *(void *)(v7 + 48) = v23;
  if (a4) {
    BOOL result = sub_20DC435AC(v7, *(_DWORD *)(v7 + 40) - (int)v23 + *(_DWORD *)(v7 + 32));
  }
  *(unsigned char *)(v7 + 71) = 1;
  return result;
}

void sub_20DC5847C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_20DC58508(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t v7 = 3 * a4;
    BOOL result = operator new(24 * a4);
    uint64_t v8 = (uint64_t)result;
    *uint64_t v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        BOOL result = sub_20DC55634(v8, *(const void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
        *(void *)(v8 + 16) = *(void *)(a2 + 16);
      }
      a2 += 24;
      v8 += 24;
    }
    v6[1] = v8;
  }
  return result;
}

void *sub_20DC585B8(void **a1, uint64_t a2)
{
  unint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = (v2 - (unsigned char *)*a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    abort();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 61) {
      sub_20DC4F504();
    }
    uint64_t v10 = (char *)operator new(8 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[8 * v4];
  *(void *)uint64_t v11 = a2;
  unint64_t v12 = v11 + 8;
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *((void *)v2 - 1);
      v2 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[8 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

char *sub_20DC58690(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  unint64_t v20 = a1 + 1;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_20DC4F504();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v2];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v10 = a1->i64[0];
  unint64_t v9 = a1->u64[1];
  if (v9 == a1->i64[0])
  {
    int64x2_t v13 = vdupq_n_s64(v9);
    uint64_t v11 = &v7[24 * v2];
  }
  else
  {
    uint64_t v11 = &v7[24 * v2];
    do
    {
      long long v12 = *(_OWORD *)(v9 - 24);
      *((void *)v11 - 1) = *(void *)(v9 - 8);
      *(_OWORD *)(v11 - 24) = v12;
      v11 -= 24;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *(void *)(v9 - 24) = 0;
      v9 -= 24;
    }
    while (v9 != v10);
    int64x2_t v13 = *a1;
  }
  uint64_t v14 = v8 + 24;
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)(v8 + 24);
  int64x2_t v18 = v13;
  uint64_t v15 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[24 * v6];
  uint64_t v19 = v15;
  uint64_t v17 = v13.i64[0];
  sub_20DC587E8((uint64_t)&v17);
  return v14;
}

uint64_t sub_20DC587E8(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = v3 - 3;
      *(void *)(a1 + 16) = v3 - 3;
      if (*((char *)v3 - 1) < 0)
      {
        unint64_t v6 = v2;
        operator delete(*v4);
        unint64_t v2 = v6;
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      unint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_20DC58860(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    BOOL result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *uint64_t v7 = result;
    uint64_t v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v7 = v10;
    uint64_t v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)uint64_t v7 = 0;
  return result;
}

uint64_t sub_20DC58904(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  char v5 = *(unsigned char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  uint64_t v7 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v8 = v5 & 0x7F;
  size_t v9 = v6 ? *(void *)(a2 + 8) : v8;
  uint64_t v10 = a1 + 8;
  do
  {
    if (*(char *)(v3 + 55) < 0)
    {
      uint64_t v11 = *(const void **)(v3 + 32);
      size_t v12 = *(void *)(v3 + 40);
    }
    else
    {
      uint64_t v11 = (const void *)(v3 + 32);
      size_t v12 = *(unsigned __int8 *)(v3 + 55);
    }
    if (v9 >= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v9;
    }
    int v14 = memcmp(v11, v7, v13);
    BOOL v15 = v12 < v9;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    BOOL v16 = !v15;
    if (v15) {
      uint64_t v17 = (uint64_t *)(v3 + 8);
    }
    else {
      uint64_t v17 = (uint64_t *)v3;
    }
    if (v16) {
      uint64_t v10 = v3;
    }
    uint64_t v3 = *v17;
  }
  while (*v17);
  if (v10 == v2) {
    return v2;
  }
  uint64_t v18 = *(void *)(v10 + 32);
  char v19 = *(unsigned char *)(v10 + 55);
  int v20 = v19;
  if (v19 >= 0) {
    uint64_t v18 = v10 + 32;
  }
  uint64_t v21 = *(void *)(v10 + 40);
  uint64_t v22 = v19 & 0x7F;
  if (v20 >= 0) {
    uint64_t v21 = v22;
  }
  v24[0] = v18;
  v24[1] = v21;
  if ((sub_20DC50018((const void **)a2, (uint64_t)v24) & 0x80000000) != 0) {
    return v2;
  }
  return v10;
}

uint64_t sub_20DC58A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  unint64_t v5 = *(void *)(a2 + 8);
  BOOL v6 = (v4 & 0x80u) == 0 ? (const void *)a2 : *(const void **)a2;
  size_t v7 = (v4 & 0x80u) == 0 ? v4 & 0x7F : *(void *)(a2 + 8);
  uint64_t v8 = a1 + 8;
  do
  {
    if (*(char *)(v3 + 55) < 0)
    {
      size_t v9 = *(const void **)(v3 + 32);
      size_t v10 = *(void *)(v3 + 40);
    }
    else
    {
      size_t v9 = (const void *)(v3 + 32);
      size_t v10 = *(unsigned __int8 *)(v3 + 55);
    }
    if (v7 >= v10) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v7;
    }
    int v12 = memcmp(v9, v6, v11);
    BOOL v13 = v10 < v7;
    if (v12) {
      BOOL v13 = v12 < 0;
    }
    BOOL v14 = !v13;
    if (v13) {
      BOOL v15 = (uint64_t *)(v3 + 8);
    }
    else {
      BOOL v15 = (uint64_t *)v3;
    }
    if (v14) {
      uint64_t v8 = v3;
    }
    uint64_t v3 = *v15;
  }
  while (*v15);
  if (v8 == v2) {
    return v2;
  }
  char v16 = *(unsigned char *)(v8 + 55);
  if (v16 >= 0) {
    uint64_t v17 = (const void *)(v8 + 32);
  }
  else {
    uint64_t v17 = *(const void **)(v8 + 32);
  }
  if (v16 >= 0) {
    unint64_t v18 = v16 & 0x7F;
  }
  else {
    unint64_t v18 = *(void *)(v8 + 40);
  }
  if ((v4 & 0x80u) != 0) {
    unint64_t v4 = v5;
  }
  size_t v19 = v18 >= v4 ? v4 : v18;
  int v20 = memcmp(v6, v17, v19);
  BOOL v21 = v4 < v18;
  if (v20) {
    BOOL v21 = v20 < 0;
  }
  if (v21) {
    return v2;
  }
  return v8;
}

uint64_t sub_20DC58B3C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    BOOL v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_20DC58BC0(uint64_t a1, const void **a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v20 = (uint64_t *)(a1 + 8);
  uint64_t v22 = (uint64_t *)(a1 + 8);
  do
  {
    uint64_t v5 = (uint64_t *)v3;
    BOOL v6 = (const void **)(v3 + 32);
    size_t v7 = a2;
    char v8 = *((unsigned char *)a2 + 23);
    BOOL v9 = v8 < 0;
    if (v8 < 0) {
      size_t v7 = *a2;
    }
    size_t v10 = (const void *)(v8 & 0x7F);
    if (v9) {
      size_t v10 = a2[1];
    }
    uint64_t v23 = v7;
    uint64_t v24 = v10;
    int v11 = sub_20DC50018(v6, (uint64_t)&v23);
    if (v11 >= 0) {
      int v12 = v5;
    }
    else {
      int v12 = v5 + 1;
    }
    BOOL v13 = v22;
    if (v11 >= 0) {
      BOOL v13 = v5;
    }
    uint64_t v22 = v13;
    uint64_t v3 = *v12;
  }
  while (v3);
  uint64_t v2 = v20;
  if (v22 == v20) {
    return v2;
  }
  BOOL v14 = (const void *)v22[4];
  char v15 = *((unsigned char *)v22 + 55);
  int v16 = v15;
  if (v15 >= 0) {
    BOOL v14 = v22 + 4;
  }
  uint64_t v17 = (const void *)v22[5];
  unint64_t v18 = (const void *)(v15 & 0x7F);
  if (v16 >= 0) {
    uint64_t v17 = v18;
  }
  uint64_t v23 = v14;
  uint64_t v24 = v17;
  int v19 = sub_20DC50018(a2, (uint64_t)&v23);
  BOOL result = v22;
  uint64_t v2 = v20;
  if (v19 < 0) {
    return v2;
  }
  return result;
}

void sub_20DC58CA8(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v5 = __str;
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - *(void *)a1) >> 3) >= a4)
  {
    BOOL v14 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v8) >> 3) >= a4)
    {
      if (__str == a3)
      {
        int v20 = *(std::string **)a1;
      }
      else
      {
        int v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v8++, v5++);
          ++v20;
        }
        while (v5 != a3);
        BOOL v14 = *(std::string **)(a1 + 8);
      }
      while (v14 != v20)
      {
        if (SHIBYTE(v14[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14[-1].__r_.__value_.__l.__data_);
        }
        --v14;
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      char v15 = (std::string *)((char *)__str + 8 * (((char *)v14 - (char *)v8) >> 3));
      if (v14 != v8)
      {
        uint64_t v16 = 8 * (((char *)v14 - (char *)v8) >> 3);
        do
        {
          std::string::operator=(v8++, v5++);
          v16 -= 24;
        }
        while (v16);
        char v8 = *(std::string **)(a1 + 8);
      }
      uint64_t v17 = v8;
      if (v15 != a3)
      {
        uint64_t v17 = v8;
        uint64_t v18 = (uint64_t)v8;
        do
        {
          if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0)
          {
            sub_20DC55634(v18, v15->__r_.__value_.__l.__data_, v15->__r_.__value_.__l.__size_);
          }
          else
          {
            long long v19 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
            *(void *)(v18 + 16) = *((void *)&v15->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v18 = v19;
          }
          ++v15;
          v18 += 24;
          ++v17;
        }
        while (v15 != a3);
      }
      *(void *)(a1 + 8) = v17;
    }
  }
  else
  {
    if (v8)
    {
      unint64_t v21 = a4;
      uint64_t v22 = *(std::string **)(a1 + 8);
      uint64_t v23 = *(std::string **)a1;
      if (v22 != v8)
      {
        do
        {
          if (SHIBYTE(v22[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22[-1].__r_.__value_.__l.__data_);
          }
          --v22;
        }
        while (v22 != v8);
        uint64_t v23 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v8;
      operator delete(v23);
      uint64_t v7 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      a4 = v21;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_39;
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = v9 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v10;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
LABEL_39:
    }
      abort();
    uint64_t v12 = 3 * v11;
    BOOL v13 = operator new(24 * v11);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = &v13[v12];
    while (v5 != a3)
    {
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20DC55634((uint64_t)v13, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)BOOL v13 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v13[2] = *((void *)&v5->__r_.__value_.__l + 2);
      }
      ++v5;
      v13 += 3;
    }
    *(void *)(a1 + 8) = v13;
  }
}

__n128 sub_20DC58F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a2 + v6;
      uint64_t v8 = a3 + v6;
      long long v9 = *(_OWORD *)(a2 + v6 - 72);
      *(_OWORD *)(v8 - 62) = *(_OWORD *)(a2 + v6 - 62);
      *(_OWORD *)(v8 - 72) = v9;
      uint64_t v10 = (void **)(a3 + v6 - 40);
      if (*(char *)(a3 + v6 - 17) < 0) {
        operator delete(*v10);
      }
      __n128 result = *(__n128 *)(v7 - 40);
      *(void *)(a3 + v6 - 24) = *(void *)(v7 - 24);
      *(__n128 *)uint64_t v10 = result;
      *(unsigned char *)(v7 - 17) = 0;
      *(unsigned char *)(v7 - 40) = 0;
      *(_WORD *)(v8 - 16) = *(_WORD *)(v7 - 16);
      *(void *)(v8 - 8) = *(void *)(v7 - 8);
      v6 -= 72;
    }
    while (a2 + v6 != a1);
  }
  return result;
}

uint64_t sub_20DC58FC0(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *v5;
      *(_OWORD *)(a3 + 10) = *(long long *)((char *)v5 + 10);
      *(_OWORD *)a3 = v6;
      uint64_t v7 = (void **)(a3 + 32);
      if (*(char *)(a3 + 55) < 0) {
        operator delete(*v7);
      }
      long long v8 = v5[2];
      *(void *)(a3 + 48) = *((void *)v5 + 6);
      *(_OWORD *)uint64_t v7 = v8;
      *((unsigned char *)v5 + 55) = 0;
      *((unsigned char *)v5 + 32) = 0;
      *(_WORD *)(a3 + 56) = *((_WORD *)v5 + 28);
      *(void *)(a3 + 64) = *((void *)v5 + 8);
      a3 += 72;
      uint64_t v5 = (long long *)((char *)v5 + 72);
    }
    while (v5 != a2);
  }
  return a3;
}

BOOL sub_20DC59058(__int16 *a1, __int16 *a2, int a3)
{
  switch(a3)
  {
    case -4:
      __int16 v21 = *a2;
      float v22 = sub_20DC76888(*a1);
      BOOL v10 = v22 < sub_20DC76888(v21);
      goto LABEL_21;
    case -3:
    case 10:
      BOOL v5 = *(void *)a1 >= *(void *)a2;
      return !v5;
    case -2:
    case 8:
      unsigned int v3 = *(_DWORD *)a1;
      unsigned int v4 = *(_DWORD *)a2;
      goto LABEL_6;
    case -1:
    case 6:
      unsigned int v3 = (unsigned __int16)*a1;
      unsigned int v4 = (unsigned __int16)*a2;
      goto LABEL_6;
    case 0:
    case 1:
    case 2:
    case 4:
      unsigned int v3 = *(unsigned __int8 *)a1;
      unsigned int v4 = *(unsigned __int8 *)a2;
LABEL_6:
      BOOL v5 = v3 >= v4;
      return !v5;
    case 3:
      int v7 = *(char *)a1;
      int v8 = *(char *)a2;
      return v7 < v8;
    case 5:
      int v7 = *a1;
      int v8 = *a2;
      return v7 < v8;
    case 7:
      int v7 = *(_DWORD *)a1;
      int v8 = *(_DWORD *)a2;
      return v7 < v8;
    case 9:
      return *(void *)a1 < *(void *)a2;
    case 11:
      BOOL v10 = *(float *)a1 < *(float *)a2;
      goto LABEL_21;
    case 12:
      BOOL v10 = *(double *)a1 < *(double *)a2;
LABEL_21:
      BOOL result = v10;
      break;
    case 13:
      unint64_t v11 = (unsigned int *)((char *)a1 + *(unsigned int *)a1);
      uint64_t v12 = (unsigned int *)((char *)a2 + *(unsigned int *)a2);
      unsigned int v15 = *v11;
      BOOL v13 = v11 + 1;
      unsigned int v14 = v15;
      unsigned int v18 = *v12;
      uint64_t v16 = v12 + 1;
      unsigned int v17 = v18;
      if (v18 >= v14) {
        size_t v19 = v14;
      }
      else {
        size_t v19 = v17;
      }
      int v20 = memcmp(v13, v16, v19);
      if (v20) {
        BOOL result = v20 < 0;
      }
      else {
        BOOL result = v14 < v17;
      }
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void sub_20DC591F0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unsigned int v4 = (void **)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 8;
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_20DC5927C(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1->i64[1] - a1->i64[0]) >> 6;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58) {
    abort();
  }
  uint64_t v5 = a1[1].i64[0] - a1->i64[0];
  if (v5 >> 5 > v3) {
    unint64_t v3 = v5 >> 5;
  }
  if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v6 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v26 = a1 + 1;
  if (v6 >> 58) {
    sub_20DC4F504();
  }
  int v8 = (char *)operator new(v6 << 6);
  long long v9 = *(_OWORD *)(a2 + 16);
  BOOL v10 = &v8[64 * v2];
  *(_OWORD *)BOOL v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v9;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v10 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((_WORD *)v10 + 28) = *(_WORD *)(a2 + 56);
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v13 = vdupq_n_s64(v11);
    unsigned int v14 = &v8[64 * v2];
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = &v10[v15];
      uint64_t v17 = v11 + v15;
      long long v18 = *(_OWORD *)(v11 + v15 - 48);
      *((_OWORD *)v16 - 4) = *(_OWORD *)(v11 + v15 - 64);
      *((_OWORD *)v16 - 3) = v18;
      long long v19 = *(_OWORD *)(v11 + v15 - 32);
      *((void *)v16 - 2) = *(void *)(v11 + v15 - 16);
      *((_OWORD *)v16 - 2) = v19;
      *(void *)(v17 - 24) = 0;
      *(void *)(v17 - 16) = 0;
      *(void *)(v17 - 32) = 0;
      *((_WORD *)v16 - 4) = *(_WORD *)(v11 + v15 - 8);
      v15 -= 64;
    }
    while (v11 + v15 != v12);
    int64x2_t v13 = *a1;
    unsigned int v14 = &v10[v15];
  }
  int v20 = v10 + 64;
  a1->i64[0] = (uint64_t)v14;
  a1->i64[1] = (uint64_t)(v10 + 64);
  int64x2_t v24 = v13;
  uint64_t v21 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v8[64 * v6];
  uint64_t v25 = v21;
  uint64_t v23 = v13.i64[0];
  sub_20DC794C8((uint64_t)&v23);
  return v20;
}

uint64_t **sub_20DC593C8(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      long long v9 = a2;
    }
    else {
      long long v9 = *a2;
    }
    while (1)
    {
      while (1)
      {
        BOOL v10 = (uint64_t **)v5;
        int64x2_t v13 = (const void *)v5[4];
        unint64_t v11 = v5 + 4;
        uint64_t v12 = v13;
        size_t v14 = *((unsigned __int8 *)v11 + 23);
        if ((v14 & 0x80u) == 0) {
          uint64_t v15 = v11;
        }
        else {
          uint64_t v15 = v12;
        }
        size_t v16 = v11[1];
        if ((v14 & 0x80u) == 0) {
          size_t v17 = v14 & 0x7F;
        }
        else {
          size_t v17 = v11[1];
        }
        if (v17 >= v8) {
          size_t v18 = v8;
        }
        else {
          size_t v18 = v17;
        }
        int v19 = memcmp(v9, v15, v18);
        BOOL v20 = v8 < v17;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v5 = *v10;
        unint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_30;
        }
      }
      if ((v14 & 0x80u) != 0) {
        size_t v14 = v16;
      }
      if (v8 >= v14) {
        size_t v21 = v14;
      }
      else {
        size_t v21 = v8;
      }
      int v22 = memcmp(v15, v9, v21);
      BOOL v23 = v14 < v8;
      if (v22) {
        BOOL v23 = v22 < 0;
      }
      if (!v23) {
        return v10;
      }
      uint64_t v5 = v10[1];
      if (!v5)
      {
        unint64_t v6 = v10 + 1;
        goto LABEL_30;
      }
    }
  }
  else
  {
    BOOL v10 = a1 + 1;
LABEL_30:
    int64x2_t v24 = operator new(0x40uLL);
    uint64_t v25 = v24 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_20DC55634((uint64_t)v25, *(const void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      _OWORD *v25 = *(_OWORD *)a3;
      v24[6] = *(void *)(a3 + 16);
    }
    v24[7] = 0;
    void *v24 = 0;
    v24[1] = 0;
    void v24[2] = v10;
    *unint64_t v6 = v24;
    uint64_t v26 = (uint64_t *)**a1;
    uint64_t v27 = v24;
    if (v26)
    {
      *a1 = v26;
      uint64_t v27 = *v6;
    }
    sub_20DC5007C(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v24;
}

uint64_t *sub_20DC59564(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  long long v9 = result;
  while (2)
  {
    BOOL v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          long long v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(void *)(v39 + 136) < *(void *)(*v10 + 136))
                {
                  *BOOL v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                BOOL result = sub_20DC59C90(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                BOOL result = sub_20DC59F24(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                BOOL v41 = v10 + 1;
                unsigned int v42 = v10 + 2;
                uint64_t v43 = v10 + 3;
                BOOL result = sub_20DC59F24(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(void *)(v44 + 136) < *(void *)(v45 + 136))
                {
                  *uint64_t v43 = v44;
                  *(a2 - 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  unint64_t v48 = *(void *)(*v43 + 136);
                  if (v48 < *(void *)(*v42 + 136))
                  {
                    *unsigned int v42 = v46;
                    *uint64_t v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 < *(void *)(*v41 + 136))
                    {
                      v10[1] = v46;
                      v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 < *(void *)(*v10 + 136))
                      {
                        *BOOL v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                uint64_t v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  uint64_t v55 = v51;
                  unint64_t v58 = *(void *)(v56 + 136);
                  if (v58 < *(void *)(v57 + 136))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        unint64_t v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 < *(void *)(v57 + 136));
                    unint64_t v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    *unint64_t v61 = v56;
                  }
                  uint64_t v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                long long v9 = v51;
                unint64_t v92 = *(void *)(v90 + 136);
                if (v92 < *(void *)(v91 + 136))
                {
                  do
                  {
                    *uint64_t v51 = v91;
                    uint64_t v91 = *(v51 - 2);
                    --v51;
                  }
                  while (v92 < *(void *)(v91 + 136));
                  *uint64_t v51 = v90;
                }
                uint64_t v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  uint64_t v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12 && *(void *)(v67 + 136) < *(void *)(v66[1] + 136))
                  {
                    uint64_t v67 = v66[1];
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  BOOL result = &v10[v64];
                  uint64_t v68 = *result;
                  unint64_t v69 = *(void *)(*result + 136);
                  if (*(void *)(v67 + 136) >= v69)
                  {
                    do
                    {
                      uint64_t v70 = v66;
                      *BOOL result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      uint64_t v66 = &v10[v71];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < v12 && *(void *)(v67 + 136) < *(void *)(v66[1] + 136))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t v71 = v72;
                      }
                      BOOL result = v70;
                      uint64_t v65 = v71;
                    }
                    while (*(void *)(v67 + 136) >= v69);
                    *uint64_t v70 = v68;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                uint64_t v75 = v10;
                do
                {
                  uint64_t v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  uint64_t v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v81 = 2 * v73 + 2;
                  if (v81 < v12)
                  {
                    BOOL result = *(uint64_t **)(v78 + 136);
                    if ((unint64_t)result < *(void *)(v77[1] + 136))
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  *uint64_t v75 = v78;
                  uint64_t v75 = v77;
                  uint64_t v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  *uint64_t v77 = v74;
                }
                else
                {
                  *uint64_t v77 = *a2;
                  *a2 = v74;
                  uint64_t v82 = (char *)v77 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    uint64_t v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v77;
                    unint64_t v87 = *(void *)(*v77 + 136);
                    if (*(void *)(*v84 + 136) < v87)
                    {
                      do
                      {
                        uint64_t v88 = v84;
                        *uint64_t v77 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        uint64_t v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        uint64_t v77 = v88;
                      }
                      while (*(void *)(*v84 + 136) < v87);
                      uint64_t *v88 = v86;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          size_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_20DC59C90(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_20DC59C90(v9 + 1, v14 - 1, a2 - 2);
            sub_20DC59C90(v9 + 2, &v9[v13 + 1], a2 - 3);
            BOOL result = sub_20DC59C90(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            uint64_t *v9 = *v14;
            *size_t v14 = v15;
          }
          else
          {
            BOOL result = sub_20DC59C90(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unint64_t v17 = *(void *)(v16 + 136);
          if (*(void *)(*(v9 - 1) + 136) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(void *)(*(a2 - 1) + 136))
          {
            unsigned int v31 = v9 + 1;
            do
            {
              BOOL v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 >= *(void *)(*v10 + 136));
          }
          else
          {
            BOOL v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 >= *(void *)(v30 + 136));
          }
          unsigned int v32 = a2;
          if (v10 < a2)
          {
            unsigned int v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 < *(void *)(v33 + 136));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              *BOOL v10 = v35;
              uint64_t *v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 >= *(void *)(v36 + 136));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 < *(void *)(v37 + 136));
            }
            while (v10 < v32);
          }
          unsigned int v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            uint64_t *v9 = *v38;
          }
          a4 = 0;
          uint64_t *v38 = v16;
        }
        unint64_t v17 = *(void *)(v16 + 136);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(void *)(v19 + 136) < v17);
        BOOL v20 = &v9[v18];
        size_t v21 = a2;
        if (v18 == 1)
        {
          size_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(void *)(v23 + 136) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(void *)(v22 + 136) >= v17);
        }
        if (v20 >= v21)
        {
          BOOL v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          BOOL v10 = &v9[v18];
          uint64_t v25 = v21;
          do
          {
            *BOOL v10 = v24;
            uint64_t *v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(void *)(v26 + 136) < v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(void *)(v27 + 136) >= v17);
          }
          while (v10 < v25);
        }
        uint64_t v28 = v10 - 1;
        if (v10 - 1 != v9) {
          uint64_t *v9 = *v28;
        }
        *uint64_t v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        BOOL result = (uint64_t *)sub_20DC59564(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_20DC59D18(v9, v10 - 1);
      BOOL result = (uint64_t *)sub_20DC59D18(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_20DC59C90(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unint64_t v5 = *(void *)(*a2 + 136);
  unint64_t v6 = *(void *)(*result + 136);
  uint64_t v7 = *a3;
  unint64_t v8 = *(void *)(*a3 + 136);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(void *)(*a2 + 136) < *(void *)(*result + 136))
      {
        *BOOL result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *BOOL result = v3;
      *a2 = v4;
      if (*(void *)(*a3 + 136) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *BOOL result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_20DC59D18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(void *)(v6 + 136) < *(void *)(*a1 + 136))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_20DC59C90(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_20DC59F24(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      BOOL v20 = a1 + 3;
      sub_20DC59F24(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(void *)(v21 + 136) < *(void *)(v22 + 136))
      {
        *BOOL v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unint64_t v25 = *(void *)(*v20 + 136);
        if (v25 < *(void *)(*v19 + 136))
        {
          uint64_t *v19 = v23;
          *BOOL v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(void *)(*v18 + 136))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(void *)(*a1 + 136))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      sub_20DC59C90(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unint64_t v14 = *(void *)(*v9 + 136);
    if (v14 < *(void *)(*v8 + 136))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(void *)(v13 + 136))
        {
          unint64_t v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unint64_t v17 = a1;
LABEL_13:
      *unint64_t v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_20DC59F24(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_20DC59C90(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(void *)(*a4 + 136) < *(void *)(*a3 + 136))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(void *)(*a3 + 136) < *(void *)(*a2 + 136))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(void *)(*a2 + 136) < *(void *)(*a1 + 136))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t *sub_20DC59FBC(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(void *)(v39 + 136) < *(void *)(*v10 + 136))
                {
                  *uint64_t v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                BOOL result = sub_20DC5A6E8(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                BOOL result = sub_20DC5A97C(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                BOOL v41 = v10 + 1;
                unsigned int v42 = v10 + 2;
                uint64_t v43 = v10 + 3;
                BOOL result = sub_20DC5A97C(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(void *)(v44 + 136) < *(void *)(v45 + 136))
                {
                  *uint64_t v43 = v44;
                  *(a2 - 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  uint64_t v48 = *(void *)(*v43 + 136);
                  if (v48 < *(void *)(*v42 + 136))
                  {
                    *unsigned int v42 = v46;
                    *uint64_t v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 < *(void *)(*v41 + 136))
                    {
                      v10[1] = v46;
                      v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 < *(void *)(*v10 + 136))
                      {
                        *uint64_t v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                uint64_t v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  uint64_t v55 = v51;
                  uint64_t v58 = *(void *)(v56 + 136);
                  if (v58 < *(void *)(v57 + 136))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        unint64_t v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 < *(void *)(v57 + 136));
                    unint64_t v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    *unint64_t v61 = v56;
                  }
                  uint64_t v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                uint64_t v9 = v51;
                uint64_t v92 = *(void *)(v90 + 136);
                if (v92 < *(void *)(v91 + 136))
                {
                  do
                  {
                    *uint64_t v51 = v91;
                    uint64_t v91 = *(v51 - 2);
                    --v51;
                  }
                  while (v92 < *(void *)(v91 + 136));
                  *uint64_t v51 = v90;
                }
                uint64_t v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  uint64_t v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12 && *(void *)(v67 + 136) < *(void *)(v66[1] + 136))
                  {
                    uint64_t v67 = v66[1];
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  BOOL result = &v10[v64];
                  uint64_t v68 = *result;
                  uint64_t v69 = *(void *)(*result + 136);
                  if (*(void *)(v67 + 136) >= v69)
                  {
                    do
                    {
                      uint64_t v70 = v66;
                      *BOOL result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      uint64_t v66 = &v10[v71];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < v12 && *(void *)(v67 + 136) < *(void *)(v66[1] + 136))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t v71 = v72;
                      }
                      BOOL result = v70;
                      uint64_t v65 = v71;
                    }
                    while (*(void *)(v67 + 136) >= v69);
                    *uint64_t v70 = v68;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                uint64_t v75 = v10;
                do
                {
                  uint64_t v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  uint64_t v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v81 = 2 * v73 + 2;
                  if (v81 < v12)
                  {
                    BOOL result = *(uint64_t **)(v78 + 136);
                    if ((uint64_t)result < *(void *)(v77[1] + 136))
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  *uint64_t v75 = v78;
                  uint64_t v75 = v77;
                  uint64_t v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  *uint64_t v77 = v74;
                }
                else
                {
                  *uint64_t v77 = *a2;
                  *a2 = v74;
                  uint64_t v82 = (char *)v77 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    uint64_t v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v77;
                    uint64_t v87 = *(void *)(*v77 + 136);
                    if (*(void *)(*v84 + 136) < v87)
                    {
                      do
                      {
                        uint64_t v88 = v84;
                        *uint64_t v77 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        uint64_t v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        uint64_t v77 = v88;
                      }
                      while (*(void *)(*v84 + 136) < v87);
                      uint64_t *v88 = v86;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_20DC5A6E8(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_20DC5A6E8(v9 + 1, v14 - 1, a2 - 2);
            sub_20DC5A6E8(v9 + 2, &v9[v13 + 1], a2 - 3);
            BOOL result = sub_20DC5A6E8(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            uint64_t *v9 = *v14;
            *unint64_t v14 = v15;
          }
          else
          {
            BOOL result = sub_20DC5A6E8(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          uint64_t v17 = *(void *)(v16 + 136);
          if (*(void *)(*(v9 - 1) + 136) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(void *)(*(a2 - 1) + 136))
          {
            unsigned int v31 = v9 + 1;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 >= *(void *)(*v10 + 136));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 >= *(void *)(v30 + 136));
          }
          unsigned int v32 = a2;
          if (v10 < a2)
          {
            unsigned int v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 < *(void *)(v33 + 136));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              *uint64_t v10 = v35;
              uint64_t *v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 >= *(void *)(v36 + 136));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 < *(void *)(v37 + 136));
            }
            while (v10 < v32);
          }
          unsigned int v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            uint64_t *v9 = *v38;
          }
          a4 = 0;
          uint64_t *v38 = v16;
        }
        uint64_t v17 = *(void *)(v16 + 136);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(void *)(v19 + 136) < v17);
        BOOL v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(void *)(v23 + 136) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(void *)(v22 + 136) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v10 = &v9[v18];
          unint64_t v25 = v21;
          do
          {
            *uint64_t v10 = v24;
            uint64_t *v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(void *)(v26 + 136) < v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(void *)(v27 + 136) >= v17);
          }
          while (v10 < v25);
        }
        uint64_t v28 = v10 - 1;
        if (v10 - 1 != v9) {
          uint64_t *v9 = *v28;
        }
        *uint64_t v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        BOOL result = (uint64_t *)sub_20DC59FBC(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_20DC5A770(v9, v10 - 1);
      BOOL result = (uint64_t *)sub_20DC5A770(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_20DC5A6E8(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  uint64_t v5 = *(void *)(*a2 + 136);
  uint64_t v6 = *(void *)(*result + 136);
  uint64_t v7 = *a3;
  uint64_t v8 = *(void *)(*a3 + 136);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(void *)(*a2 + 136) < *(void *)(*result + 136))
      {
        *BOOL result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *BOOL result = v3;
      *a2 = v4;
      if (*(void *)(*a3 + 136) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *BOOL result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_20DC5A770(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(void *)(v6 + 136) < *(void *)(*a1 + 136))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_20DC5A6E8(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_20DC5A97C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      BOOL v20 = a1 + 3;
      sub_20DC5A97C(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(void *)(v21 + 136) < *(void *)(v22 + 136))
      {
        *BOOL v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        uint64_t v25 = *(void *)(*v20 + 136);
        if (v25 < *(void *)(*v19 + 136))
        {
          uint64_t *v19 = v23;
          *BOOL v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(void *)(*v18 + 136))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(void *)(*a1 + 136))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_20DC5A6E8(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    uint64_t v14 = *(void *)(*v9 + 136);
    if (v14 < *(void *)(*v8 + 136))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(void *)(v13 + 136))
        {
          uint64_t v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *uint64_t v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_20DC5A97C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_20DC5A6E8(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(void *)(*a4 + 136) < *(void *)(*a3 + 136))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(void *)(*a3 + 136) < *(void *)(*a2 + 136))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(void *)(*a2 + 136) < *(void *)(*a1 + 136))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_20DC5AA2C(void *a1, void *a2, void *a3, uint64_t (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t result = (*a4)(*a3);
      if (result)
      {
        uint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
    if (result)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

uint64_t *sub_20DC5AB10(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  if ((*a3)(*a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 1;
    do
    {
      uint64_t v7 = v9;
      if (v9 >= v4) {
        break;
      }
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    uint64_t v11 = *v7;
    *uint64_t v7 = *v4;
    *uint64_t v4 = v11;
    do
    {
      uint64_t v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      uint64_t v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_20DC5AC20(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    char v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      uint64_t v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = &a1[v6];
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = *v13;
      *uint64_t v13 = *v14;
      *uint64_t v14 = v15;
      do
      {
        uint64_t v16 = v13[1];
        ++v13;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        uint64_t v17 = *--v14;
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    uint64_t v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *uint64_t v10 = v7;
  return v10;
}

BOOL sub_20DC5AD3C(void *a1, void *a2, uint64_t (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_20DC5AA2C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20DC5AF04(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20DC5AFB8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      sub_20DC5AA2C(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          uint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_20DC5AF04(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(void))
{
  sub_20DC5AA2C(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_20DC5AFB8(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t (**a6)(void))
{
  sub_20DC5AF04(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20DC5B094(uint64_t result, void *a2, void *a3, unsigned int (**a4)(void, void))
{
  if ((void *)result != a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (void *)result;
    uint64_t v8 = (uint64_t)a2 - result;
    uint64_t v9 = ((uint64_t)a2 - result) >> 3;
    if ((uint64_t)a2 - result >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)(result + 8 * v10);
      do
      {
        uint64_t result = sub_20DC5B2B4((uint64_t)v7, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      uint64_t v13 = v6;
      do
      {
        uint64_t result = ((uint64_t (*)(void, void))*a4)(*v13, *v7);
        if (result)
        {
          uint64_t v14 = *v13;
          *uint64_t v13 = *v7;
          *uint64_t v7 = v14;
          uint64_t result = sub_20DC5B2B4((uint64_t)v7, a4, v9, v7);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 9)
    {
      do
      {
        uint64_t v15 = v6;
        uint64_t v16 = 0;
        uint64_t v28 = *v7;
        uint64_t v17 = v7;
        do
        {
          uint64_t v18 = &v17[v16 + 1];
          uint64_t v19 = (2 * v16) | 1;
          uint64_t v20 = 2 * v16 + 2;
          if (v20 < v9)
          {
            uint64_t result = ((uint64_t (*)(void, void))*a4)(v17[v16 + 1], v17[v16 + 2]);
            if (result)
            {
              ++v18;
              uint64_t v19 = v20;
            }
          }
          *uint64_t v17 = *v18;
          uint64_t v17 = v18;
          uint64_t v16 = v19;
        }
        while (v19 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        uint64_t v6 = v15 - 1;
        if (v18 == v15 - 1)
        {
          void *v18 = v28;
        }
        else
        {
          void *v18 = *v6;
          *uint64_t v6 = v28;
          uint64_t v21 = (char *)v18 - (char *)v7 + 8;
          if (v21 >= 9)
          {
            unint64_t v22 = (((unint64_t)v21 >> 3) - 2) >> 1;
            uint64_t v23 = &v7[v22];
            uint64_t result = ((uint64_t (*)(void, void))*a4)(*v23, *v18);
            if (result)
            {
              uint64_t v24 = v15 - 1;
              uint64_t v25 = *v18;
              do
              {
                uint64_t v26 = v23;
                void *v18 = *v23;
                if (!v22) {
                  break;
                }
                unint64_t v22 = (v22 - 1) >> 1;
                uint64_t v23 = &v7[v22];
                uint64_t result = ((uint64_t (*)(void, uint64_t))*a4)(*v23, v25);
                uint64_t v18 = v26;
              }
              while ((result & 1) != 0);
              *uint64_t v26 = v25;
              uint64_t v6 = v24;
            }
          }
        }
      }
      while (v9-- > 2);
    }
  }
  return result;
}

uint64_t sub_20DC5B2B4(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = ((uint64_t (*)(void, void))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          uint64_t v15 = v12;
          *uint64_t v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (void *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              uint64_t v16 = 2 * v11 + 2;
            }
          }
          uint64_t result = ((uint64_t (*)(void, uint64_t))*a2)(*v12, v14);
          uint64_t v5 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        *uint64_t v15 = v14;
      }
    }
  }
  return result;
}

uint64_t sub_20DC5B3DC(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((uint64_t)(a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v5;
  }
  uint64_t v20 = a1 + 2;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_20DC4F504();
    }
    uint64_t v9 = operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (uint64_t)v9 + 24 * v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20DC55634(v10, *(const void **)a2, *(void *)(a2 + 8));
    unint64_t v3 = *a1;
    unint64_t v2 = a1[1];
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    *(void *)(v10 + 16) = *(void *)(a2 + 16);
  }
  if (v2 == v3)
  {
    int64x2_t v13 = vdupq_n_s64(v3);
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = v10;
    do
    {
      long long v12 = *(_OWORD *)(v2 - 24);
      *(void *)(v11 - 8) = *(void *)(v2 - 8);
      *(_OWORD *)(v11 - 24) = v12;
      v11 -= 24;
      *(void *)(v2 - 16) = 0;
      *(void *)(v2 - 8) = 0;
      *(void *)(v2 - 24) = 0;
      v2 -= 24;
    }
    while (v2 != v3);
    int64x2_t v13 = *(int64x2_t *)a1;
  }
  uint64_t v14 = v10 + 24;
  *a1 = v11;
  a1[1] = v14;
  int64x2_t v18 = v13;
  unint64_t v15 = a1[2];
  a1[2] = (unint64_t)v9 + 24 * v8;
  unint64_t v19 = v15;
  uint64_t v17 = v13.i64[0];
  sub_20DC587E8((uint64_t)&v17);
  return v14;
}

uint64_t sub_20DC5B558(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  char v5 = *(unsigned char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  int64_t v7 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v8 = v5 & 0x7F;
  size_t v9 = v6 ? *(void *)(a2 + 8) : v8;
  uint64_t v10 = a1 + 8;
  do
  {
    if (*(char *)(v3 + 55) < 0)
    {
      unint64_t v11 = *(const void **)(v3 + 32);
      size_t v12 = *(void *)(v3 + 40);
    }
    else
    {
      unint64_t v11 = (const void *)(v3 + 32);
      size_t v12 = *(unsigned __int8 *)(v3 + 55);
    }
    if (v9 >= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v9;
    }
    int v14 = memcmp(v11, v7, v13);
    BOOL v15 = v12 < v9;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    BOOL v16 = !v15;
    if (v15) {
      uint64_t v17 = (uint64_t *)(v3 + 8);
    }
    else {
      uint64_t v17 = (uint64_t *)v3;
    }
    if (v16) {
      uint64_t v10 = v3;
    }
    uint64_t v3 = *v17;
  }
  while (*v17);
  if (v10 == v2) {
    return v2;
  }
  uint64_t v19 = *(void *)(v10 + 32);
  char v20 = *(unsigned char *)(v10 + 55);
  int v21 = v20;
  if (v20 >= 0) {
    uint64_t v19 = v10 + 32;
  }
  uint64_t v22 = *(void *)(v10 + 40);
  uint64_t v23 = v20 & 0x7F;
  if (v21 >= 0) {
    uint64_t v22 = v23;
  }
  v24[0] = v19;
  v24[1] = v22;
  if ((sub_20DC50018((const void **)a2, (uint64_t)v24) & 0x80000000) != 0) {
    return v2;
  }
  return v10;
}

void *sub_20DC5B668(uint64_t a1, void *a2, const void **a3)
{
  char v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    int v6 = *((char *)a3 + 23);
    if (v6 >= 0) {
      size_t v7 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v7 = (size_t)a3[1];
    }
    if (v6 >= 0) {
      uint64_t v8 = a3;
    }
    else {
      uint64_t v8 = *a3;
    }
    do
    {
      while (1)
      {
        size_t v9 = v4;
        size_t v12 = (const void *)v4[4];
        uint64_t v10 = v4 + 4;
        unint64_t v11 = v12;
        size_t v13 = *((unsigned __int8 *)v10 + 23);
        if ((v13 & 0x80u) == 0) {
          int v14 = v10;
        }
        else {
          int v14 = v11;
        }
        size_t v15 = v10[1];
        if ((v13 & 0x80u) == 0) {
          size_t v16 = v13 & 0x7F;
        }
        else {
          size_t v16 = v10[1];
        }
        if (v16 >= v7) {
          size_t v17 = v7;
        }
        else {
          size_t v17 = v16;
        }
        int v18 = memcmp(v8, v14, v17);
        BOOL v19 = v7 < v16;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        unint64_t v4 = (void *)*v9;
        char v5 = v9;
        if (!*v9) {
          goto LABEL_29;
        }
      }
      if ((v13 & 0x80u) != 0) {
        size_t v13 = v15;
      }
      if (v7 >= v13) {
        size_t v20 = v13;
      }
      else {
        size_t v20 = v7;
      }
      int v21 = memcmp(v14, v8, v20);
      BOOL v22 = v13 < v7;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      char v5 = v9 + 1;
      unint64_t v4 = (void *)v9[1];
    }
    while (v4);
  }
  else
  {
    size_t v9 = (void *)(a1 + 8);
  }
LABEL_29:
  *a2 = v9;
  return v5;
}

uint64_t *sub_20DC5B788(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    unint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  size_t v7 = *v6;
  if (*v6 == v3)
  {
    *int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      size_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      size_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    size_t v12 = (uint64_t *)v7[2];
    if ((uint64_t *)*v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v12 + 24) = 0;
      int v18 = (uint64_t *)v7[1];
      *size_t v12 = (uint64_t)v18;
      if (v18) {
        v18[2] = (uint64_t)v12;
      }
      v7[2] = v12[2];
      BOOL v19 = (uint64_t **)v12[2];
      if (*v19 == v12)
      {
        uint64_t *v19 = v7;
        int v18 = (uint64_t *)*v12;
      }
      else
      {
        v19[1] = v7;
      }
      v7[1] = (uint64_t)v12;
      v12[2] = (uint64_t)v7;
      if (result == v12) {
        uint64_t result = v7;
      }
      size_t v7 = v18;
    }
    size_t v20 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v20 + 24)) {
      goto LABEL_71;
    }
    int v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v20 && !*((unsigned char *)v20 + 24))
      {
LABEL_71:
        int v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v27 = *v21;
        v7[1] = *v21;
        if (v27) {
          *(void *)(v27 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        *int v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        size_t v20 = v7;
      }
      uint64_t v24 = v21[2];
      *((unsigned char *)v21 + 24) = *(unsigned char *)(v24 + 24);
      *(unsigned char *)(v24 + 24) = 1;
      *((unsigned char *)v20 + 24) = 1;
      uint64_t v25 = *(uint64_t **)v24;
      uint64_t v28 = *(void *)(*(void *)v24 + 8);
      *(void *)uint64_t v24 = v28;
      if (v28) {
        *(void *)(v28 + 16) = v24;
      }
      v25[2] = *(void *)(v24 + 16);
      *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
      v25[1] = v24;
      goto LABEL_75;
    }
    *((unsigned char *)v7 + 24) = 0;
    size_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v22 = v17 == result;
    }
    else {
      BOOL v22 = 1;
    }
    if (v22) {
      goto LABEL_56;
    }
LABEL_52:
    size_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v12 + 24) = 0;
    size_t v13 = (uint64_t *)v12[1];
    uint64_t v14 = *v13;
    v12[1] = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = v12[2];
    *(void *)(v12[2] + 8 * (*(void *)v12[2] != (void)v12)) = v13;
    *size_t v13 = (uint64_t)v12;
    v12[2] = (uint64_t)v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    size_t v7 = *(uint64_t **)(*v7 + 8);
  }
  size_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    size_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_62;
    }
    *((unsigned char *)v7 + 24) = 0;
    size_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      size_t v17 = result;
LABEL_56:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_56;
    }
    goto LABEL_52;
  }
  size_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_62:
    size_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    *size_t v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    size_t v16 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  uint64_t *v25 = v24;
LABEL_75:
  *(void *)(v24 + 16) = v25;
  return result;
}

void sub_20DC5BB18(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_20DC5BB18(a1, *(void *)a2);
    sub_20DC5BB18(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void *sub_20DC5BB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_20DC55634((uint64_t)result, *(const void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_20DC5BBEC(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  int v6 = (uint64_t **)sub_20DC78C70(a1, &v12, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_20DC5BCAC(a1, a4, (uint64_t)&v11);
    uint64_t v8 = v12;
    uint64_t v9 = v11;
    uint64_t *v11 = 0;
    v9[1] = 0;
    v9[2] = v8;
    *int v6 = v9;
    uint64_t v10 = **(void **)a1;
    if (v10)
    {
      *(void *)a1 = v10;
      uint64_t v9 = *v6;
    }
    sub_20DC5007C(*(uint64_t **)(a1 + 8), v9);
    ++*(void *)(a1 + 16);
    return v11;
  }
  return result;
}

_OWORD *sub_20DC5BCAC@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_20DC55634((uint64_t)result, *(const void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *uint64_t result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_20DC5BD28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  unint64_t v5 = *(void *)(a2 + 8);
  int v6 = (v4 & 0x80u) == 0 ? (const void *)a2 : *(const void **)a2;
  size_t v7 = (v4 & 0x80u) == 0 ? v4 & 0x7F : *(void *)(a2 + 8);
  uint64_t v8 = a1 + 8;
  do
  {
    if (*(char *)(v3 + 55) < 0)
    {
      long long v9 = *(const void **)(v3 + 32);
      size_t v10 = *(void *)(v3 + 40);
    }
    else
    {
      long long v9 = (const void *)(v3 + 32);
      size_t v10 = *(unsigned __int8 *)(v3 + 55);
    }
    if (v7 >= v10) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v7;
    }
    int v12 = memcmp(v9, v6, v11);
    BOOL v13 = v10 < v7;
    if (v12) {
      BOOL v13 = v12 < 0;
    }
    BOOL v14 = !v13;
    if (v13) {
      size_t v15 = (uint64_t *)(v3 + 8);
    }
    else {
      size_t v15 = (uint64_t *)v3;
    }
    if (v14) {
      uint64_t v8 = v3;
    }
    uint64_t v3 = *v15;
  }
  while (*v15);
  if (v8 == v2) {
    return v2;
  }
  char v16 = *(unsigned char *)(v8 + 55);
  if (v16 >= 0) {
    size_t v17 = (const void *)(v8 + 32);
  }
  else {
    size_t v17 = *(const void **)(v8 + 32);
  }
  if (v16 >= 0) {
    unint64_t v18 = v16 & 0x7F;
  }
  else {
    unint64_t v18 = *(void *)(v8 + 40);
  }
  if ((v4 & 0x80u) != 0) {
    unint64_t v4 = v5;
  }
  size_t v19 = v18 >= v4 ? v4 : v18;
  int v20 = memcmp(v6, v17, v19);
  BOOL v21 = v4 < v18;
  if (v20) {
    BOOL v21 = v20 < 0;
  }
  if (v21) {
    return v2;
  }
  return v8;
}

BOOL flatbuffers::compareName<flatbuffers::StructDef>(uint64_t a1, uint64_t a2)
{
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 128), a1, 0x3E8uLL, &__p);
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a2 + 128), a2, 0x3E8uLL, &v13);
  int v3 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  unint64_t v4 = (void *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &v13;
  }
  else {
    unint64_t v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size >= v8) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = size;
  }
  int v11 = memcmp(p_p, v5, v10);
  if (v3 < 0)
  {
    operator delete(v4);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_18:
  if (v11) {
    return v11 < 0;
  }
  else {
    return v8 < size;
  }
}

uint64_t sub_20DC5BF30(uint64_t result, char *a2, uint64_t (**a3)(void), uint64_t a4, char a5)
{
  int v11 = (char *)result;
  while (2)
  {
    uint64_t v82 = a2 - 16;
    unint64_t v83 = a2 - 8;
    uint64_t v81 = a2 - 24;
    int v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v11 = v12;
          uint64_t v13 = a2 - v12;
          uint64_t v14 = (a2 - v12) >> 3;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t result = ((uint64_t (*)(void, void))*a3)(*((void *)a2 - 1), *(void *)v11);
                if (result)
                {
                  uint64_t v41 = *(void *)v11;
                  *(void *)int v11 = *((void *)a2 - 1);
                  *((void *)a2 - 1) = v41;
                }
                break;
              case 3:
                uint64_t result = sub_20DC5AA2C(v11, (void *)v11 + 1, v83, a3);
                break;
              case 4:
                uint64_t result = sub_20DC5AF04(v11, (void *)v11 + 1, (void *)v11 + 2, v83, a3);
                break;
              case 5:
                uint64_t result = sub_20DC5AFB8(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, v83, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            unsigned int v42 = v11 + 8;
            BOOL v44 = v11 == a2 || v42 == a2;
            if (a5)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                uint64_t v46 = v11;
                do
                {
                  uint64_t v48 = *(void *)v46;
                  uint64_t v47 = *((void *)v46 + 1);
                  uint64_t v46 = v42;
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v47, v48);
                  if (result)
                  {
                    uint64_t v49 = *(void *)v46;
                    uint64_t v50 = v45;
                    while (1)
                    {
                      *(void *)&v11[v50 + 8] = *(void *)&v11[v50];
                      if (!v50) {
                        break;
                      }
                      uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v49, *(void *)&v11[v50 - 8]);
                      v50 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = &v11[v50 + 8];
                        goto LABEL_81;
                      }
                    }
                    uint64_t v51 = v11;
LABEL_81:
                    *(void *)uint64_t v51 = v49;
                  }
                  unsigned int v42 = v46 + 8;
                  v45 += 8;
                }
                while (v46 + 8 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                uint64_t v75 = *(void *)v11;
                uint64_t v74 = *((void *)v11 + 1);
                int v11 = v42;
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v74, v75);
                if (result)
                {
                  uint64_t v76 = *(void *)v11;
                  uint64_t v77 = v11;
                  do
                  {
                    uint64_t v78 = v77;
                    uint64_t v79 = *((void *)v77 - 1);
                    v77 -= 8;
                    *(void *)uint64_t v78 = v79;
                    uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v76, *((void *)v78 - 2));
                  }
                  while ((result & 1) != 0);
                  *(void *)uint64_t v77 = v76;
                }
                unsigned int v42 = v11 + 8;
              }
              while (v11 + 8 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v52 = (unint64_t)(v14 - 2) >> 1;
              int64_t v84 = v52;
              uint64_t v80 = a2;
              do
              {
                int64_t v53 = v52;
                if (v84 >= v52)
                {
                  uint64_t v54 = (2 * v52) | 1;
                  uint64_t v55 = &v11[8 * v54];
                  if (2 * v52 + 2 < v14
                    && ((unsigned int (*)(void, void))*a3)(*(void *)v55, *((void *)v55 + 1)))
                  {
                    v55 += 8;
                    uint64_t v54 = 2 * v53 + 2;
                  }
                  uint64_t v56 = &v11[8 * v53];
                  uint64_t result = ((uint64_t (*)(void, void))*a3)(*(void *)v55, *(void *)v56);
                  if ((result & 1) == 0)
                  {
                    uint64_t v57 = *(void *)v56;
                    do
                    {
                      uint64_t v58 = v55;
                      *(void *)uint64_t v56 = *(void *)v55;
                      if (v84 < v54) {
                        break;
                      }
                      uint64_t v59 = (2 * v54) | 1;
                      uint64_t v55 = &v11[8 * v59];
                      uint64_t v60 = 2 * v54 + 2;
                      if (v60 < v14
                        && ((unsigned int (*)(void, void))*a3)(*(void *)v55, *((void *)v55 + 1)))
                      {
                        v55 += 8;
                        uint64_t v59 = v60;
                      }
                      uint64_t result = ((uint64_t (*)(void, uint64_t))*a3)(*(void *)v55, v57);
                      uint64_t v56 = v58;
                      uint64_t v54 = v59;
                    }
                    while (!result);
                    *(void *)uint64_t v58 = v57;
                    a2 = v80;
                  }
                }
                int64_t v52 = v53 - 1;
              }
              while (v53);
              do
              {
                unint64_t v61 = a2;
                uint64_t v62 = 0;
                uint64_t v85 = *(void *)v11;
                int64_t v63 = v11;
                do
                {
                  int64_t v64 = &v63[8 * v62 + 8];
                  uint64_t v65 = (2 * v62) | 1;
                  uint64_t v66 = 2 * v62 + 2;
                  if (v66 < v14)
                  {
                    uint64_t result = ((uint64_t (*)(void, void))*a3)(*(void *)&v63[8 * v62 + 8], *(void *)&v63[8 * v62 + 16]);
                    if (result)
                    {
                      v64 += 8;
                      uint64_t v65 = v66;
                    }
                  }
                  *(void *)int64_t v63 = *(void *)v64;
                  int64_t v63 = v64;
                  uint64_t v62 = v65;
                }
                while (v65 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                a2 = v61 - 8;
                if (v64 == v61 - 8)
                {
                  *(void *)int64_t v64 = v85;
                }
                else
                {
                  *(void *)int64_t v64 = *(void *)a2;
                  *(void *)a2 = v85;
                  uint64_t v67 = v64 - v11 + 8;
                  if (v67 >= 9)
                  {
                    unint64_t v68 = (((unint64_t)v67 >> 3) - 2) >> 1;
                    uint64_t v69 = &v11[8 * v68];
                    uint64_t result = ((uint64_t (*)(void, void))*a3)(*(void *)v69, *(void *)v64);
                    if (result)
                    {
                      uint64_t v70 = v61 - 8;
                      uint64_t v71 = *(void *)v64;
                      do
                      {
                        uint64_t v72 = v69;
                        *(void *)int64_t v64 = *(void *)v69;
                        if (!v68) {
                          break;
                        }
                        unint64_t v68 = (v68 - 1) >> 1;
                        uint64_t v69 = &v11[8 * v68];
                        uint64_t result = ((uint64_t (*)(void, uint64_t))*a3)(*(void *)v69, v71);
                        int64_t v64 = v72;
                      }
                      while ((result & 1) != 0);
                      *(void *)uint64_t v72 = v71;
                      a2 = v70;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          char v16 = &v11[8 * ((unint64_t)v14 >> 1)];
          if ((unint64_t)v13 < 0x401)
          {
            sub_20DC5AA2C(v16, v11, v83, a3);
          }
          else
          {
            sub_20DC5AA2C(v11, v16, v83, a3);
            sub_20DC5AA2C((void *)v11 + 1, (void *)v16 - 1, v82, a3);
            sub_20DC5AA2C((void *)v11 + 2, &v11[8 * v15 + 8], v81, a3);
            sub_20DC5AA2C((void *)v16 - 1, v16, &v11[8 * v15 + 8], a3);
            uint64_t v17 = *(void *)v11;
            *(void *)int v11 = *(void *)v16;
            *(void *)char v16 = v17;
          }
          --a4;
          if ((a5 & 1) != 0
            || (((uint64_t (*)(void, void))*a3)(*((void *)v11 - 1), *(void *)v11) & 1) != 0)
          {
            break;
          }
          uint64_t v32 = *(void *)v11;
          uint64_t result = ((uint64_t (*)(void, void))*a3)(*(void *)v11, *(void *)v83);
          if (result)
          {
            int v12 = v11;
            do
            {
              uint64_t v33 = *((void *)v12 + 1);
              v12 += 8;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v32, v33);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v34 = v11 + 8;
            do
            {
              int v12 = v34;
              if (v34 >= a2) {
                break;
              }
              v34 += 8;
              uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v32, *(void *)v12);
            }
            while (!result);
          }
          uint64_t v35 = a2;
          if (v12 < a2)
          {
            uint64_t v35 = a2;
            do
            {
              uint64_t v36 = *((void *)v35 - 1);
              v35 -= 8;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v32, v36);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v35)
          {
            uint64_t v37 = *(void *)v12;
            *(void *)int v12 = *(void *)v35;
            *(void *)uint64_t v35 = v37;
            do
            {
              uint64_t v38 = *((void *)v12 + 1);
              v12 += 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v32, v38));
            do
            {
              uint64_t v39 = *((void *)v35 - 1);
              v35 -= 8;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v32, v39);
            }
            while ((result & 1) != 0);
          }
          uint64_t v40 = v12 - 8;
          BOOL v5 = v12 - 8 >= v11;
          BOOL v6 = v12 - 8 == v11;
          if (v12 - 8 != v11) {
            *(void *)int v11 = *(void *)v40;
          }
          a5 = 0;
          *(void *)uint64_t v40 = v32;
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)v11;
        do
        {
          char v20 = ((uint64_t (*)(void, uint64_t))*a3)(*(void *)&v11[v18 + 8], v19);
          v18 += 8;
        }
        while ((v20 & 1) != 0);
        BOOL v21 = &v11[v18];
        BOOL v22 = a2;
        if (v18 == 8)
        {
          do
          {
            if (v21 >= a2) {
              break;
            }
            uint64_t v24 = *((void *)a2 - 1);
            a2 -= 8;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v24, v19) & 1) == 0);
        }
        else
        {
          do
          {
            uint64_t v23 = *((void *)a2 - 1);
            a2 -= 8;
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v23, v19));
        }
        if (v21 >= a2)
        {
          uint64_t v30 = v21 - 8;
        }
        else
        {
          uint64_t v25 = &v11[v18];
          uint64_t v26 = a2;
          do
          {
            uint64_t v27 = *(void *)v25;
            *(void *)uint64_t v25 = *(void *)v26;
            *(void *)uint64_t v26 = v27;
            do
            {
              uint64_t v28 = *((void *)v25 + 1);
              v25 += 8;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v28, v19) & 1) != 0);
            do
            {
              uint64_t v29 = *((void *)v26 - 1);
              v26 -= 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v29, v19));
          }
          while (v25 < v26);
          uint64_t v30 = v25 - 8;
        }
        if (v30 != v11) {
          *(void *)int v11 = *(void *)v30;
        }
        *(void *)uint64_t v30 = v19;
        BOOL v5 = v21 >= a2;
        a2 = v22;
        if (v5) {
          break;
        }
LABEL_33:
        uint64_t result = sub_20DC5BF30(v11, v30, a3, a4, a5 & 1);
        a5 = 0;
        int v12 = v30 + 8;
      }
      BOOL v31 = sub_20DC5C6D4(v11, v30, a3);
      int v12 = v30 + 8;
      uint64_t result = sub_20DC5C6D4((void *)v30 + 1, v22, a3);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = v30;
    if (!v31) {
      continue;
    }
    return result;
  }
}

BOOL sub_20DC5C6D4(void *a1, void *a2, uint64_t (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_20DC5AA2C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20DC5AF04(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20DC5AFB8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      long long v9 = a1 + 2;
      sub_20DC5AA2C(a1, a1 + 1, a1 + 2, a3);
      size_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        unint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          char v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      char v16 = a1;
LABEL_12:
      *char v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    long long v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

BOOL flatbuffers::compareName<flatbuffers::EnumDef>(uint64_t a1, uint64_t a2)
{
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a1 + 128), a1, 0x3E8uLL, &__p);
  flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(a2 + 128), a2, 0x3E8uLL, &v13);
  int v3 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  unint64_t v4 = (void *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v5 = &v13;
  }
  else {
    BOOL v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size >= v8) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = size;
  }
  int v11 = memcmp(p_p, v5, v10);
  if (v3 < 0)
  {
    operator delete(v4);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_18:
  if (v11) {
    return v11 < 0;
  }
  else {
    return v8 < size;
  }
}

uint64_t sub_20DC5C980(uint64_t result, char *a2, uint64_t (**a3)(void), uint64_t a4, char a5)
{
  int v11 = (char *)result;
  while (2)
  {
    uint64_t v82 = a2 - 16;
    unint64_t v83 = a2 - 8;
    uint64_t v81 = a2 - 24;
    int v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v11 = v12;
          uint64_t v13 = a2 - v12;
          uint64_t v14 = (a2 - v12) >> 3;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                BOOL result = ((uint64_t (*)(void, void))*a3)(*((void *)a2 - 1), *(void *)v11);
                if (result)
                {
                  uint64_t v41 = *(void *)v11;
                  *(void *)int v11 = *((void *)a2 - 1);
                  *((void *)a2 - 1) = v41;
                }
                break;
              case 3:
                BOOL result = sub_20DC5AA2C(v11, (void *)v11 + 1, v83, a3);
                break;
              case 4:
                BOOL result = sub_20DC5AF04(v11, (void *)v11 + 1, (void *)v11 + 2, v83, a3);
                break;
              case 5:
                BOOL result = sub_20DC5AFB8(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, v83, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            unsigned int v42 = v11 + 8;
            BOOL v44 = v11 == a2 || v42 == a2;
            if (a5)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                uint64_t v46 = v11;
                do
                {
                  uint64_t v48 = *(void *)v46;
                  uint64_t v47 = *((void *)v46 + 1);
                  uint64_t v46 = v42;
                  BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v47, v48);
                  if (result)
                  {
                    uint64_t v49 = *(void *)v46;
                    uint64_t v50 = v45;
                    while (1)
                    {
                      *(void *)&v11[v50 + 8] = *(void *)&v11[v50];
                      if (!v50) {
                        break;
                      }
                      BOOL result = ((uint64_t (*)(uint64_t, void))*a3)(v49, *(void *)&v11[v50 - 8]);
                      v50 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = &v11[v50 + 8];
                        goto LABEL_81;
                      }
                    }
                    uint64_t v51 = v11;
LABEL_81:
                    *(void *)uint64_t v51 = v49;
                  }
                  unsigned int v42 = v46 + 8;
                  v45 += 8;
                }
                while (v46 + 8 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                uint64_t v75 = *(void *)v11;
                uint64_t v74 = *((void *)v11 + 1);
                int v11 = v42;
                BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v74, v75);
                if (result)
                {
                  uint64_t v76 = *(void *)v11;
                  uint64_t v77 = v11;
                  do
                  {
                    uint64_t v78 = v77;
                    uint64_t v79 = *((void *)v77 - 1);
                    v77 -= 8;
                    *(void *)uint64_t v78 = v79;
                    BOOL result = ((uint64_t (*)(uint64_t, void))*a3)(v76, *((void *)v78 - 2));
                  }
                  while ((result & 1) != 0);
                  *(void *)uint64_t v77 = v76;
                }
                unsigned int v42 = v11 + 8;
              }
              while (v11 + 8 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v52 = (unint64_t)(v14 - 2) >> 1;
              int64_t v84 = v52;
              uint64_t v80 = a2;
              do
              {
                int64_t v53 = v52;
                if (v84 >= v52)
                {
                  uint64_t v54 = (2 * v52) | 1;
                  uint64_t v55 = &v11[8 * v54];
                  if (2 * v52 + 2 < v14
                    && ((unsigned int (*)(void, void))*a3)(*(void *)v55, *((void *)v55 + 1)))
                  {
                    v55 += 8;
                    uint64_t v54 = 2 * v53 + 2;
                  }
                  uint64_t v56 = &v11[8 * v53];
                  BOOL result = ((uint64_t (*)(void, void))*a3)(*(void *)v55, *(void *)v56);
                  if ((result & 1) == 0)
                  {
                    uint64_t v57 = *(void *)v56;
                    do
                    {
                      uint64_t v58 = v55;
                      *(void *)uint64_t v56 = *(void *)v55;
                      if (v84 < v54) {
                        break;
                      }
                      uint64_t v59 = (2 * v54) | 1;
                      uint64_t v55 = &v11[8 * v59];
                      uint64_t v60 = 2 * v54 + 2;
                      if (v60 < v14
                        && ((unsigned int (*)(void, void))*a3)(*(void *)v55, *((void *)v55 + 1)))
                      {
                        v55 += 8;
                        uint64_t v59 = v60;
                      }
                      BOOL result = ((uint64_t (*)(void, uint64_t))*a3)(*(void *)v55, v57);
                      uint64_t v56 = v58;
                      uint64_t v54 = v59;
                    }
                    while (!result);
                    *(void *)uint64_t v58 = v57;
                    a2 = v80;
                  }
                }
                int64_t v52 = v53 - 1;
              }
              while (v53);
              do
              {
                unint64_t v61 = a2;
                uint64_t v62 = 0;
                uint64_t v85 = *(void *)v11;
                int64_t v63 = v11;
                do
                {
                  int64_t v64 = &v63[8 * v62 + 8];
                  uint64_t v65 = (2 * v62) | 1;
                  uint64_t v66 = 2 * v62 + 2;
                  if (v66 < v14)
                  {
                    BOOL result = ((uint64_t (*)(void, void))*a3)(*(void *)&v63[8 * v62 + 8], *(void *)&v63[8 * v62 + 16]);
                    if (result)
                    {
                      v64 += 8;
                      uint64_t v65 = v66;
                    }
                  }
                  *(void *)int64_t v63 = *(void *)v64;
                  int64_t v63 = v64;
                  uint64_t v62 = v65;
                }
                while (v65 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                a2 = v61 - 8;
                if (v64 == v61 - 8)
                {
                  *(void *)int64_t v64 = v85;
                }
                else
                {
                  *(void *)int64_t v64 = *(void *)a2;
                  *(void *)a2 = v85;
                  uint64_t v67 = v64 - v11 + 8;
                  if (v67 >= 9)
                  {
                    unint64_t v68 = (((unint64_t)v67 >> 3) - 2) >> 1;
                    uint64_t v69 = &v11[8 * v68];
                    BOOL result = ((uint64_t (*)(void, void))*a3)(*(void *)v69, *(void *)v64);
                    if (result)
                    {
                      uint64_t v70 = v61 - 8;
                      uint64_t v71 = *(void *)v64;
                      do
                      {
                        uint64_t v72 = v69;
                        *(void *)int64_t v64 = *(void *)v69;
                        if (!v68) {
                          break;
                        }
                        unint64_t v68 = (v68 - 1) >> 1;
                        uint64_t v69 = &v11[8 * v68];
                        BOOL result = ((uint64_t (*)(void, uint64_t))*a3)(*(void *)v69, v71);
                        int64_t v64 = v72;
                      }
                      while ((result & 1) != 0);
                      *(void *)uint64_t v72 = v71;
                      a2 = v70;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          char v16 = &v11[8 * ((unint64_t)v14 >> 1)];
          if ((unint64_t)v13 < 0x401)
          {
            sub_20DC5AA2C(v16, v11, v83, a3);
          }
          else
          {
            sub_20DC5AA2C(v11, v16, v83, a3);
            sub_20DC5AA2C((void *)v11 + 1, (void *)v16 - 1, v82, a3);
            sub_20DC5AA2C((void *)v11 + 2, &v11[8 * v15 + 8], v81, a3);
            sub_20DC5AA2C((void *)v16 - 1, v16, &v11[8 * v15 + 8], a3);
            uint64_t v17 = *(void *)v11;
            *(void *)int v11 = *(void *)v16;
            *(void *)char v16 = v17;
          }
          --a4;
          if ((a5 & 1) != 0
            || (((uint64_t (*)(void, void))*a3)(*((void *)v11 - 1), *(void *)v11) & 1) != 0)
          {
            break;
          }
          uint64_t v32 = *(void *)v11;
          BOOL result = ((uint64_t (*)(void, void))*a3)(*(void *)v11, *(void *)v83);
          if (result)
          {
            int v12 = v11;
            do
            {
              uint64_t v33 = *((void *)v12 + 1);
              v12 += 8;
              BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v32, v33);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v34 = v11 + 8;
            do
            {
              int v12 = v34;
              if (v34 >= a2) {
                break;
              }
              v34 += 8;
              BOOL result = ((uint64_t (*)(uint64_t, void))*a3)(v32, *(void *)v12);
            }
            while (!result);
          }
          uint64_t v35 = a2;
          if (v12 < a2)
          {
            uint64_t v35 = a2;
            do
            {
              uint64_t v36 = *((void *)v35 - 1);
              v35 -= 8;
              BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v32, v36);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v35)
          {
            uint64_t v37 = *(void *)v12;
            *(void *)int v12 = *(void *)v35;
            *(void *)uint64_t v35 = v37;
            do
            {
              uint64_t v38 = *((void *)v12 + 1);
              v12 += 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v32, v38));
            do
            {
              uint64_t v39 = *((void *)v35 - 1);
              v35 -= 8;
              BOOL result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v32, v39);
            }
            while ((result & 1) != 0);
          }
          uint64_t v40 = v12 - 8;
          BOOL v5 = v12 - 8 >= v11;
          BOOL v6 = v12 - 8 == v11;
          if (v12 - 8 != v11) {
            *(void *)int v11 = *(void *)v40;
          }
          a5 = 0;
          *(void *)uint64_t v40 = v32;
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)v11;
        do
        {
          char v20 = ((uint64_t (*)(void, uint64_t))*a3)(*(void *)&v11[v18 + 8], v19);
          v18 += 8;
        }
        while ((v20 & 1) != 0);
        BOOL v21 = &v11[v18];
        BOOL v22 = a2;
        if (v18 == 8)
        {
          do
          {
            if (v21 >= a2) {
              break;
            }
            uint64_t v24 = *((void *)a2 - 1);
            a2 -= 8;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v24, v19) & 1) == 0);
        }
        else
        {
          do
          {
            uint64_t v23 = *((void *)a2 - 1);
            a2 -= 8;
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v23, v19));
        }
        if (v21 >= a2)
        {
          uint64_t v30 = v21 - 8;
        }
        else
        {
          uint64_t v25 = &v11[v18];
          uint64_t v26 = a2;
          do
          {
            uint64_t v27 = *(void *)v25;
            *(void *)uint64_t v25 = *(void *)v26;
            *(void *)uint64_t v26 = v27;
            do
            {
              uint64_t v28 = *((void *)v25 + 1);
              v25 += 8;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v28, v19) & 1) != 0);
            do
            {
              uint64_t v29 = *((void *)v26 - 1);
              v26 -= 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v29, v19));
          }
          while (v25 < v26);
          uint64_t v30 = v25 - 8;
        }
        if (v30 != v11) {
          *(void *)int v11 = *(void *)v30;
        }
        *(void *)uint64_t v30 = v19;
        BOOL v5 = v21 >= a2;
        a2 = v22;
        if (v5) {
          break;
        }
LABEL_33:
        BOOL result = sub_20DC5C980(v11, v30, a3, a4, a5 & 1);
        a5 = 0;
        int v12 = v30 + 8;
      }
      BOOL v31 = sub_20DC5D124(v11, v30, a3);
      int v12 = v30 + 8;
      BOOL result = sub_20DC5D124((void *)v30 + 1, v22, a3);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = v30;
    if (!v31) {
      continue;
    }
    return result;
  }
}

BOOL sub_20DC5D124(void *a1, void *a2, uint64_t (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_20DC5AA2C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20DC5AF04(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20DC5AFB8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      long long v9 = a1 + 2;
      sub_20DC5AA2C(a1, a1 + 1, a1 + 2, a3);
      size_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        unint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          char v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      char v16 = a1;
LABEL_12:
      *char v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    long long v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t flatbuffers::GenerateTextFromTable(uint64_t a1, int *a2, uint64_t a3, std::string *a4)
{
  uint64_t v7 = sub_20DC58A14(a1 + 128, a3);
  if (a1 + 136 == v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(v7 + 56);
  if (!v8) {
    return 0;
  }
  ++*(_DWORD *)(v8 + 144);

  return sub_20DC5D378(a1, a2, v8, a4);
}

uint64_t sub_20DC5D378(uint64_t a1, int *a2, uint64_t a3, std::string *this)
{
  v10[0] = (std::string *)(a1 + 728);
  v10[1] = this;
  std::string::reserve(this, 0x400uLL);
  uint64_t v8 = sub_20DC5D908(v10, a3, a2, 0);
  if (v8 && (*(_DWORD *)(a1 + 736) & 0x80000000) == 0) {
    std::string::push_back(this, 10);
  }
  return v8;
}

uint64_t flatbuffers::GenerateText(uint64_t a1, unsigned int *a2, std::string *this)
{
  if (*(unsigned char *)(a1 + 955)) {
    int v3 = a2 + 1;
  }
  else {
    int v3 = a2;
  }
  return sub_20DC5D378(a1, (int *)((char *)v3 + *v3), *(void *)(a1 + 576), this);
}

uint64_t flatbuffers::GenerateTextFile(uint64_t a1, const void **a2, const void **a3)
{
  if (*(unsigned char *)(a1 + 728))
  {
    memset(&v16, 0, sizeof(v16));
    sub_20DC7A3DC(a1 + 560, *(unsigned __int8 *)(a1 + 729), &v16);
    sub_20DC5D5FC(&__p, a2, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = (flatbuffers *)&__p;
    }
    else {
      p_p = (flatbuffers *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v12 = &v16;
    }
    else {
      int v12 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&v16.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = v16.__r_.__value_.__l.__size_;
    }
LABEL_29:
    BOOL v8 = flatbuffers::SaveFile(p_p, (const char *)v12, (const char *)size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_31;
  }
  uint64_t v5 = *(void *)(a1 + 384);
  uint64_t v6 = *(void *)(a1 + 576);
  if (*(_DWORD *)(a1 + 368) - v5 + *(_DWORD *)(a1 + 376)) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 1;
  }
  memset(&v16, 0, sizeof(v16));
  long long v9 = (unsigned int *)(v5 + 4 * *(unsigned __int8 *)(a1 + 955));
  if (sub_20DC5D378(a1, (int *)((char *)v9 + *v9), v6, &v16))
  {
    sub_20DC5D5FC(&__p, a2, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = (flatbuffers *)&__p;
    }
    else {
      p_p = (flatbuffers *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v12 = &v16;
    }
    else {
      int v12 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&v16.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = v16.__r_.__value_.__l.__size_;
    }
    goto LABEL_29;
  }
  BOOL v8 = 0;
LABEL_31:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_20DC5D5FC(std::string *a1, const void **a2, const void **a3)
{
  char v6 = *((unsigned char *)a2 + 23);
  int v7 = v6;
  size_t v8 = v6 & 0x7F;
  if (v7 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  char v10 = *((unsigned char *)a3 + 23);
  int v11 = v10;
  size_t v12 = v10 & 0x7F;
  if (v11 >= 0) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = (size_t)a3[1];
  }
  p_p = &__p;
  sub_20DC58B3C((uint64_t)&__p, v13 + v9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v15 = a2;
    }
    else {
      unint64_t v15 = *a2;
    }
    memmove(p_p, v15, v9);
  }
  if (v13)
  {
    if (*((char *)a3 + 23) >= 0) {
      std::string v16 = a3;
    }
    else {
      std::string v16 = *a3;
    }
    memmove((char *)p_p + v9, v16, v13);
  }
  p_p->__r_.__value_.__s.__data_[v9 + v13] = 0;
  uint64_t v17 = std::string::append(&__p, ".json");
  *a1 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void flatbuffers::TextMakeRule(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(_DWORD *)(a1 + 368) - *(_DWORD *)(a1 + 384) + *(_DWORD *)(a1 + 376) && *(void *)(a1 + 576))
  {
    flatbuffers::StripExtension(a3, &__p);
    flatbuffers::StripPath(&__p, &v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_20DC5D5FC(&v23, a2, (const void **)&v25.__r_.__value_.__l.__data_);
    size_t v8 = std::string::append(&v23, ": ");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    char v10 = *(unsigned char *)(a3 + 23);
    BOOL v11 = v10 < 0;
    if (v10 >= 0) {
      size_t v12 = (const std::string::value_type *)a3;
    }
    else {
      size_t v12 = *(const std::string::value_type **)a3;
    }
    std::string::size_type v13 = v10 & 0x7F;
    if (v11) {
      std::string::size_type v14 = *(void *)(a3 + 8);
    }
    else {
      std::string::size_type v14 = v13;
    }
    unint64_t v15 = std::string::append(&__p, v12, v14);
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)a4 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    flatbuffers::Parser::GetIncludedFilesRecursive(a1, *(void *)(a1 + 576) + 24, &__p);
    std::string::size_type v17 = __p.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
    {
      do
      {
        std::operator+<char>();
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v23;
        }
        else {
          uint64_t v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
        }
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = *((unsigned char *)&v23.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type size = v23.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a4, (const std::string::value_type *)v18, size);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        char v20 = *(std::string **)(v17 + 8);
        if (v20)
        {
          do
          {
            BOOL v21 = v20;
            char v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
          }
          while (v20);
        }
        else
        {
          do
          {
            BOOL v21 = *(std::string **)(v17 + 16);
            BOOL v22 = v21->__r_.__value_.__r.__words[0] == v17;
            std::string::size_type v17 = (std::string::size_type)v21;
          }
          while (!v22);
        }
        std::string::size_type v17 = (std::string::size_type)v21;
      }
      while (v21 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
    }
    sub_20DC5BB18((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(unsigned char *)(a4 + 23) = 0;
    *(unsigned char *)a4 = 0;
  }
}

uint64_t sub_20DC5D908(std::string **a1, uint64_t a2, int *a3, uint64_t a4)
{
  std::string::push_back(a1[1], 123);
  int v8 = (*a1)->__r_.__value_.__r.__words[1];
  std::string::size_type v9 = *(uint64_t **)(a2 + 176);
  if (v9 == *(uint64_t **)(a2 + 184)) {
    goto LABEL_121;
  }
  int v10 = 0;
  BOOL v11 = 0;
  uint64_t v12 = (v8 & ~(v8 >> 31)) + a4;
  std::string::size_type v13 = (int)v12;
  int v14 = *(unsigned __int8 *)(a2 + 200);
  do
  {
    uint64_t v15 = *v9;
    if (v14)
    {
      BOOL v16 = 1;
    }
    else
    {
      uint64_t v17 = *(unsigned __int16 *)(v15 + 208);
      uint64_t v18 = (unsigned __int16 *)((char *)a3 - *a3);
      BOOL v16 = *v18 > v17 && *(unsigned __int16 *)((char *)v18 + v17) != 0;
    }
    if (!*(unsigned char *)(v15 + 221) && !*(void *)(v15 + 224))
    {
      BOOL v37 = *(_DWORD *)(v15 + 152) == 14 && v16;
      if (!v14 && v37)
      {
        if ((*a1)->__r_.__value_.__s.__data_[6])
        {
          BOOL v16 = 1;
        }
        else
        {
          uint64_t v55 = *(unsigned __int16 *)(v15 + 208);
          uint64_t v56 = *a3;
          if (*(unsigned __int16 *)((char *)a3 - v56) <= v55)
          {
            unsigned int v57 = 0;
          }
          else
          {
            unsigned int v57 = *(unsigned __int16 *)((char *)a3 + v55 - v56);
            LODWORD(v56) = *(int *)((char *)a3 + v57);
          }
          BOOL v16 = *(int *)((char *)a3 + v57 + v56) != 0;
        }
      }
    }
    uint64_t v19 = *a1;
    int v20 = (*a1)->__r_.__value_.__s.__data_[5];
    if ((*a1)->__r_.__value_.__s.__data_[5])
    {
      unsigned int v21 = *(_DWORD *)(v15 + 152);
      int v20 = (v21 > 0xFFFFFFFB || v21 - 1 <= 0xB) && *(unsigned char *)(v15 + 216) == 0;
    }
    if ((v16 | v20) == 1)
    {
      if (v10 && !v19[9].__r_.__value_.__s.__data_[10])
      {
        std::string::push_back(a1[1], 44);
        uint64_t v19 = *a1;
      }
      if ((v19->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
        std::string::push_back(a1[1], 10);
      }
      std::string::append(a1[1], v13, 32);
      if ((*a1)->__r_.__value_.__s.__data_[1]) {
        std::string::push_back(a1[1], 34);
      }
      char v23 = *(unsigned char *)(v15 + 23);
      BOOL v24 = v23 < 0;
      if (v23 >= 0) {
        std::string v25 = (const std::string::value_type *)v15;
      }
      else {
        std::string v25 = *(const std::string::value_type **)v15;
      }
      std::string::size_type v26 = v23 & 0x7F;
      if (v24) {
        std::string::size_type v27 = *(void *)(v15 + 8);
      }
      else {
        std::string::size_type v27 = v26;
      }
      std::string::append(a1[1], v25, v27);
      uint64_t v28 = *a1;
      if ((*a1)->__r_.__value_.__s.__data_[1])
      {
        std::string::push_back(a1[1], 34);
        uint64_t v28 = *a1;
      }
      if (!v28[9].__r_.__value_.__s.__data_[10] || (*(_DWORD *)(v15 + 152) & 0xFFFFFFFE) != 0xE) {
        std::string::push_back(a1[1], 58);
      }
      std::string::push_back(a1[1], 32);
      int v31 = *(_DWORD *)(v15 + 152);
      switch(v31)
      {
        case -4:
          sub_20DC7A958(a1, v15, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_81;
        case -3:
        case 10:
          sub_20DC5E028(a1, v15, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_81;
        case -2:
        case 8:
          sub_20DC5E120((flatbuffers::ClassicLocale *)a1, v15, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_81;
        case -1:
        case 6:
          sub_20DC7A9F8(a1, v15, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_81;
        case 0:
        case 1:
        case 2:
        case 4:
          sub_20DC5E258((flatbuffers::ClassicLocale *)a1, v15, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_81;
        case 3:
          uint64_t v73 = v12;
          uint64_t v38 = a4;
          uint64_t v39 = *(unsigned __int16 *)(v15 + 208);
          if (*(unsigned char *)(a2 + 200))
          {
            uint64_t v51 = (char *)a3 + v39;
            a4 = v38;
            uint64_t v12 = v73;
LABEL_79:
            char v71 = *v51;
            goto LABEL_80;
          }
          if (*(char *)(v15 + 207) >= 0) {
            uint64_t v40 = (char *)(v15 + 184);
          }
          else {
            uint64_t v40 = *(char **)(v15 + 184);
          }
          uint64_t v41 = v40;
          do
          {
            int v43 = *v41++;
            char v42 = v43;
            unsigned int v44 = v43 - 48;
            if (v43) {
              BOOL v45 = v44 > 9;
            }
            else {
              BOOL v45 = 0;
            }
          }
          while (v45);
          if (v42 == 48 && (*v41 & 0xDF) == 0x58)
          {
            v74[0] = v40;
            uint64_t v70 = (_xlocale *)flatbuffers::ClassicLocale::Get(v29);
            uint64_t v47 = strtoll_l(v40, v74, 16, v70);
            char v71 = 0;
            if (v74[0] == v40 || *v74[0]) {
              goto LABEL_76;
            }
          }
          else
          {
            v74[0] = v40;
            uint64_t v46 = (_xlocale *)flatbuffers::ClassicLocale::Get(v29);
            uint64_t v47 = strtoll_l(v40, v74, 10, v46);
            if (v74[0] == v40 || *v74[0] != 0)
            {
              char v71 = 0;
              goto LABEL_76;
            }
          }
          char v71 = 0x80;
          if (v47 > -128) {
            char v71 = v47;
          }
          if (v47 > 127) {
            char v71 = 127;
          }
LABEL_76:
          uint64_t v49 = (unsigned __int16 *)((char *)a3 - *a3);
          if (*v49 > v39)
          {
            uint64_t v50 = *(unsigned __int16 *)((char *)v49 + v39);
            a4 = v38;
            uint64_t v12 = v73;
            if (!v50) {
              goto LABEL_80;
            }
            uint64_t v51 = (char *)a3 + v50;
            goto LABEL_79;
          }
          a4 = v38;
          uint64_t v12 = v73;
LABEL_80:
          sub_20DC5F7DC(a1, v71, *(_DWORD *)(v15 + 152), *(void *)(v15 + 168));
LABEL_81:
          ++v10;
          uint64_t v52 = *(unsigned __int16 *)(v15 + 208);
          if (*(unsigned char *)(a2 + 200))
          {
            BOOL v11 = (unsigned int *)((char *)a3 + v52);
            int v14 = 1;
          }
          else
          {
            int64_t v53 = (unsigned __int16 *)((char *)a3 - *a3);
            if (*v53 > v52 && (unsigned __int16 v54 = *(unsigned __int16 *)((char *)v53 + v52)) != 0)
            {
              int v14 = 0;
              BOOL v11 = (unsigned int *)((char *)a3 + v54);
            }
            else
            {
              int v14 = 0;
              BOOL v11 = 0;
            }
          }
          break;
        case 5:
          sub_20DC7AAB4(a1, v15, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_81;
        case 7:
          sub_20DC7AB7C(a1, v15, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_81;
        case 9:
          sub_20DC7AC40(a1, v15, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_81;
        case 11:
          sub_20DC7ACE8(a1, v15, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_81;
        case 12:
          sub_20DC7AD88(a1, v15, a3, *(unsigned __int8 *)(a2 + 200));
          goto LABEL_81;
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
          if (*(unsigned char *)(a2 + 200))
          {
            uint64_t v36 = (unsigned int *)((char *)a3 + *(unsigned __int16 *)(v15 + 208));
          }
          else
          {
            if (*(unsigned char *)(v15 + 221))
            {
              uint64_t v61 = *(unsigned __int16 *)(v15 + 208);
              uint64_t v62 = *a3;
              if (*(unsigned __int16 *)((char *)a3 - v62) <= v61)
              {
                unsigned int v63 = 0;
              }
              else
              {
                unsigned int v63 = *(unsigned __int16 *)((char *)a3 + v61 - v62);
                LODWORD(v62) = *(int *)((char *)a3 + v63);
              }
              uint64_t v67 = (char *)a3 + v63 + v62 + *(int *)((char *)a3 + v63 + v62);
              unsigned int v68 = v67[2];
              v67 += 2;
              uint64_t v69 = v67[1];
              v74[0] = &v67[-v69];
              v74[1] = (char *)(((unint64_t)(v68 >> 2) << 32) | ((unint64_t)(1 << (v68 & 3)) << 8) | v69);
              sub_20DC7A3DC((uint64_t)v74, (*a1)->__r_.__value_.__s.__data_[1], a1[1]);
              goto LABEL_81;
            }
            uint64_t v32 = *(void *)(v15 + 224);
            if (v32)
            {
              uint64_t v64 = *(unsigned __int16 *)(v15 + 208);
              uint64_t v65 = (unsigned __int16 *)((char *)a3 - *a3);
              if (*v65 <= v64)
              {
                uint64_t v66 = 0;
              }
              else
              {
                uint64_t v66 = *(unsigned __int16 *)((char *)v65 + v64);
                if (v66) {
                  v66 += (uint64_t)a3 + *(unsigned int *)((char *)a3 + v66);
                }
              }
              uint64_t result = sub_20DC5D908(a1, v32, v66 + 4 + *(unsigned int *)(v66 + 4), v12, v30);
              if (!result) {
                return result;
              }
              goto LABEL_81;
            }
            if (v31 == 15 && *(unsigned char *)(*(void *)(v15 + 160) + 200))
            {
              uint64_t v58 = *(unsigned __int16 *)(v15 + 208);
              uint64_t v59 = (unsigned __int16 *)((char *)a3 - *a3);
              if (*v59 > v58)
              {
                unsigned __int16 v60 = *(unsigned __int16 *)((char *)v59 + v58);
                if (v60)
                {
                  uint64_t v36 = (unsigned int *)((char *)a3 + v60);
                  goto LABEL_44;
                }
              }
            }
            else
            {
              uint64_t v33 = *(unsigned __int16 *)(v15 + 208);
              uint64_t v34 = (unsigned __int16 *)((char *)a3 - *a3);
              if (*v34 > v33)
              {
                uint64_t v35 = *(unsigned __int16 *)((char *)v34 + v33);
                if (v35)
                {
                  uint64_t v36 = (unsigned int *)((char *)a3 + v35 + *(unsigned int *)((char *)a3 + v35));
                  goto LABEL_44;
                }
              }
            }
            uint64_t v36 = 0;
          }
LABEL_44:
          if ((sub_20DC60BF0(a1, v36, v15 + 152, v12, v11, 0xFFFFFFFF) & 1) == 0) {
            return 0;
          }
          goto LABEL_81;
        default:
          goto LABEL_81;
      }
    }
    ++v9;
  }
  while (v9 != *(uint64_t **)(a2 + 184));
  int v8 = (*a1)->__r_.__value_.__r.__words[1];
LABEL_121:
  if ((v8 & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], (int)a4, 32);
  std::string::push_back(a1[1], 125);
  return 1;
}

void sub_20DC5E028(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    int v14 = (uint64_t *)((char *)a3 + v7);
    goto LABEL_14;
  }
  uint64_t v19 = 0;
  if (*(char *)(a2 + 207) >= 0) {
    int v8 = (char *)(a2 + 184);
  }
  else {
    int v8 = *(char **)(a2 + 184);
  }
  BOOL v9 = sub_20DC4F514((flatbuffers::ClassicLocale *)&v19, v8, 0, 1);
  uint64_t v10 = v19;
  if (v9 && v19 != 0)
  {
    uint64_t v15 = v8 - 1;
    do
    {
      int v16 = *++v15;
      unsigned int v17 = v16 - 48;
      if (v16) {
        BOOL v18 = v17 > 9;
      }
      else {
        BOOL v18 = 0;
      }
    }
    while (v18);
    if (*(unsigned char *)((__PAIR128__((unint64_t)v15, (unint64_t)v8) - (unint64_t)v15) >> 64) == 45) {
      uint64_t v10 = -1;
    }
  }
  uint64_t v12 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v12 > v7)
  {
    uint64_t v13 = *(unsigned __int16 *)((char *)v12 + v7);
    if (v13)
    {
      int v14 = (uint64_t *)((char *)a3 + v13);
LABEL_14:
      uint64_t v10 = *v14;
    }
  }
  sub_20DC5E7E8(a1, v10, *(_DWORD *)(a2 + 152), *(void *)(a2 + 168));
}

void sub_20DC5E120(flatbuffers::ClassicLocale *a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    BOOL v22 = (unsigned int *)((char *)a3 + v7);
    goto LABEL_24;
  }
  if (*(char *)(a2 + 207) >= 0) {
    int v8 = (char *)(a2 + 184);
  }
  else {
    int v8 = *(char **)(a2 + 184);
  }
  BOOL v9 = v8;
  do
  {
    int v11 = *v9++;
    char v10 = v11;
    unsigned int v12 = v11 - 48;
    if (v11) {
      BOOL v13 = v12 > 9;
    }
    else {
      BOOL v13 = 0;
    }
  }
  while (v13);
  if (v10 == 48 && (*v9 & 0xDF) == 0x58)
  {
    char v23 = v8;
    int v14 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
    uint64_t v15 = v8;
    int v16 = 16;
  }
  else
  {
    char v23 = v8;
    int v14 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
    uint64_t v15 = v8;
    int v16 = 10;
  }
  uint64_t v17 = strtoll_l(v15, &v23, v16, v14);
  if (v23 != v8 && *v23 == 0) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = 0;
  }
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  if (v23 != v8 && *v23 == 0) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = 0;
  }
  int v20 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v20 > v7)
  {
    uint64_t v21 = *(unsigned __int16 *)((char *)v20 + v7);
    if (v21)
    {
      BOOL v22 = (unsigned int *)((char *)a3 + v21);
LABEL_24:
      unsigned int v19 = *v22;
    }
  }
  sub_20DC5EBE0((std::string **)a1, v19, *(_DWORD *)(a2 + 152), *(void *)(a2 + 168));
}

void sub_20DC5E258(flatbuffers::ClassicLocale *a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    BOOL v22 = (unsigned __int8 *)a3 + v7;
    goto LABEL_25;
  }
  if (*(char *)(a2 + 207) >= 0) {
    int v8 = (char *)(a2 + 184);
  }
  else {
    int v8 = *(char **)(a2 + 184);
  }
  BOOL v9 = v8;
  do
  {
    int v11 = *v9++;
    char v10 = v11;
    unsigned int v12 = v11 - 48;
    if (v11) {
      BOOL v13 = v12 > 9;
    }
    else {
      BOOL v13 = 0;
    }
  }
  while (v13);
  if (v10 == 48 && (*v9 & 0xDF) == 0x58)
  {
    char v23 = v8;
    int v14 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
    uint64_t v15 = v8;
    int v16 = 16;
  }
  else
  {
    char v23 = v8;
    int v14 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
    uint64_t v15 = v8;
    int v16 = 10;
  }
  uint64_t v17 = strtoll_l(v15, &v23, v16, v14);
  if (v23 != v8 && *v23 == 0) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = 0;
  }
  if (v18 >= 0xFF) {
    LOBYTE(v18) = -1;
  }
  if (v23 != v8 && *v23 == 0) {
    unsigned __int8 v19 = v18;
  }
  else {
    unsigned __int8 v19 = 0;
  }
  int v20 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v20 > v7)
  {
    uint64_t v21 = *(unsigned __int16 *)((char *)v20 + v7);
    if (v21)
    {
      BOOL v22 = (unsigned __int8 *)a3 + v21;
LABEL_25:
      unsigned __int8 v19 = *v22;
    }
  }
  sub_20DC5F3DC((std::string **)a1, v19, *(_DWORD *)(a2 + 152), *(void *)(a2 + 168));
}

void sub_20DC5E398(std::string **a1, __int16 a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    if (sub_20DC76888(a2) == 0.0) {
      char v6 = "false";
    }
    else {
      char v6 = "true";
    }
    uint64_t v7 = a1[1];
    std::string::append(v7, v6);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12]) {
    BOOL v9 = a4 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
LABEL_13:
    float v10 = sub_20DC76888(a2);
    sub_20DC509FC(6, &__p, v10);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1[1], (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  float v13 = sub_20DC76888(a2);
  int v14 = *(uint64_t **)(a4 + 208);
  uint64_t v15 = *(uint64_t **)(a4 + 216);
  if (v14 == v15)
  {
LABEL_25:
    if (sub_20DC76888(a2) != 0.0)
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&__p, "bit_flags");
      uint64_t v17 = sub_20DC58BC0(a4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      BOOL v18 = (uint64_t *)(a4 + 80) == v17 || v17[7] == 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v18)
      {
        uint64_t v30 = a1[1];
        if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v31 = v30->__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v31 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
        }
        std::string::size_type __n = v31;
        float v32 = sub_20DC76888(a2);
        std::string::push_back(a1[1], 34);
        uint64_t v33 = *(const std::string::value_type ****)(a4 + 208);
        uint64_t v34 = *(const std::string::value_type ****)(a4 + 216);
        if (v33 != v34)
        {
          unint64_t v54 = (unint64_t)v32;
          uint64_t v55 = 0;
          do
          {
            uint64_t v35 = *v33;
            uint64_t v36 = (uint64_t)(*v33 + 11);
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
            strcpy((char *)&__p, "bit_flags_all");
            BOOL v37 = sub_20DC58BC0(v36, (const void **)&__p.__r_.__value_.__l.__data_);
            if (v35 + 12 == (const std::string::value_type **)v37 || !v37[7])
            {
              char v57 = 14;
              strcpy((char *)v56, "bit_flags_none");
              uint64_t v39 = sub_20DC58BC0(v36, v56);
              if (v35 + 12 == (const std::string::value_type **)v39) {
                uint64_t v40 = 0;
              }
              else {
                uint64_t v40 = v39[7];
              }
              BOOL v38 = v40 != 0;
              if (v57 < 0) {
                operator delete((void *)v56[0]);
              }
            }
            else
            {
              BOOL v38 = 1;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (!v38)
            {
              uint64_t v41 = v35[17];
              if (((unint64_t)v41 & v54) != 0)
              {
                if ((*a1)->__r_.__value_.__s.__data_[15])
                {
                  char v42 = *(unsigned char *)(a4 + 23);
                  BOOL v43 = v42 < 0;
                  if (v42 >= 0) {
                    unsigned int v44 = (const std::string::value_type *)a4;
                  }
                  else {
                    unsigned int v44 = *(const std::string::value_type **)a4;
                  }
                  std::string::size_type v45 = v42 & 0x7F;
                  if (v43) {
                    std::string::size_type v46 = *(void *)(a4 + 8);
                  }
                  else {
                    std::string::size_type v46 = v45;
                  }
                  std::string::append(a1[1], v44, v46);
                }
                v55 |= (unint64_t)v41;
                char v47 = *((unsigned char *)*v33 + 23);
                if (v47 >= 0) {
                  uint64_t v48 = (const std::string::value_type *)*v33;
                }
                else {
                  uint64_t v48 = **v33;
                }
                if (v47 >= 0) {
                  std::string::size_type v49 = v47 & 0x7F;
                }
                else {
                  std::string::size_type v49 = (std::string::size_type)(*v33)[1];
                }
                std::string::append(a1[1], v48, v49);
                std::string::push_back(a1[1], 32);
              }
            }
            ++v33;
          }
          while (v33 != v34);
          if (v55 && v55 == v54)
          {
            uint64_t v50 = a1[1];
            if (SHIBYTE(v50->__r_.__value_.__r.__words[2]) < 0) {
              std::string::size_type v51 = v50->__r_.__value_.__l.__size_;
            }
            else {
              std::string::size_type v51 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
            }
            std::string::size_type v52 = v51 - 1;
            if ((*((unsigned char *)&v50->__r_.__value_.__s + 23) & 0x80) != 0) {
              uint64_t v50 = (std::string *)v50->__r_.__value_.__r.__words[0];
            }
            v50->__r_.__value_.__s.__data_[v52] = 34;
            return;
          }
        }
        std::string::resize(a1[1], __n, 0);
      }
    }
    goto LABEL_13;
  }
  while (1)
  {
    uint64_t v16 = *v14;
    if (*(void *)(*v14 + 136) == (uint64_t)v13) {
      break;
    }
    if (++v14 == v15) {
      goto LABEL_25;
    }
  }
  std::string::push_back(a1[1], 34);
  if ((*a1)->__r_.__value_.__s.__data_[15])
  {
    char v19 = *(unsigned char *)(a4 + 23);
    BOOL v20 = v19 < 0;
    if (v19 >= 0) {
      uint64_t v21 = (const std::string::value_type *)a4;
    }
    else {
      uint64_t v21 = *(const std::string::value_type **)a4;
    }
    std::string::size_type v22 = v19 & 0x7F;
    if (v20) {
      std::string::size_type v23 = *(void *)(a4 + 8);
    }
    else {
      std::string::size_type v23 = v22;
    }
    std::string::append(a1[1], v21, v23);
  }
  char v24 = *(unsigned char *)(v16 + 23);
  BOOL v25 = v24 < 0;
  if (v24 >= 0) {
    std::string::size_type v26 = (const std::string::value_type *)v16;
  }
  else {
    std::string::size_type v26 = *(const std::string::value_type **)v16;
  }
  std::string::size_type v27 = v24 & 0x7F;
  if (v25) {
    std::string::size_type v28 = *(void *)(v16 + 8);
  }
  else {
    std::string::size_type v28 = v27;
  }
  std::string::append(a1[1], v26, v28);
  uint64_t v29 = a1[1];

  std::string::push_back(v29, 34);
}

void sub_20DC5E7E8(std::string **a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    if (a2) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    char v6 = a1[1];
    std::string::append(v6, v5);
  }
  else
  {
    if ((*a1)->__r_.__value_.__s.__data_[12]) {
      BOOL v8 = a4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_13;
    }
    for (unint64_t i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
    {
      uint64_t v12 = *i;
      if (*(void *)(*i + 136) == a2)
      {
        std::string::push_back(a1[1], 34);
        if ((*a1)->__r_.__value_.__s.__data_[15])
        {
          char v13 = *(unsigned char *)(a4 + 23);
          BOOL v14 = v13 < 0;
          if (v13 >= 0) {
            uint64_t v15 = (const std::string::value_type *)a4;
          }
          else {
            uint64_t v15 = *(const std::string::value_type **)a4;
          }
          std::string::size_type v16 = v13 & 0x7F;
          if (v14) {
            std::string::size_type v17 = *(void *)(a4 + 8);
          }
          else {
            std::string::size_type v17 = v16;
          }
          std::string::append(a1[1], v15, v17);
        }
        char v18 = *(unsigned char *)(v12 + 23);
        BOOL v19 = v18 < 0;
        if (v18 >= 0) {
          BOOL v20 = (const std::string::value_type *)v12;
        }
        else {
          BOOL v20 = *(const std::string::value_type **)v12;
        }
        std::string::size_type v21 = v18 & 0x7F;
        if (v19) {
          std::string::size_type v22 = *(void *)(v12 + 8);
        }
        else {
          std::string::size_type v22 = v21;
        }
        std::string::append(a1[1], v20, v22);
        std::string::size_type v23 = a1[1];
        std::string::push_back(v23, 34);
        return;
      }
    }
    if (!a2) {
      goto LABEL_13;
    }
    char v54 = 9;
    strcpy((char *)__p, "bit_flags");
    char v24 = sub_20DC58BC0(a4 + 72, (const void **)__p);
    BOOL v25 = (uint64_t *)(a4 + 80) == v24 || v24[7] == 0;
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (v25)
    {
LABEL_13:
      sub_20DC444C8();
      if (v54 >= 0) {
        BOOL v9 = __p;
      }
      else {
        BOOL v9 = (void **)__p[0];
      }
      if (v54 >= 0) {
        std::string::size_type v10 = v54 & 0x7F;
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(a1[1], (const std::string::value_type *)v9, v10);
      if (v54 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::string::size_type v26 = a1[1];
      if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = v26->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE(v26->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type __n = size;
      std::string::push_back(v26, 34);
      std::string::size_type v28 = *(const std::string::value_type ****)(a4 + 208);
      uint64_t v29 = *(const std::string::value_type ****)(a4 + 216);
      if (v28 == v29) {
        goto LABEL_86;
      }
      uint64_t v30 = 0;
      do
      {
        std::string::size_type v31 = *v28;
        uint64_t v32 = (uint64_t)(*v28 + 11);
        char v54 = 13;
        strcpy((char *)__p, "bit_flags_all");
        uint64_t v33 = sub_20DC58BC0(v32, (const void **)__p);
        if (v31 + 12 == (const std::string::value_type **)v33 || !v33[7])
        {
          char v52 = 14;
          strcpy((char *)v51, "bit_flags_none");
          uint64_t v35 = sub_20DC58BC0(v32, v51);
          if (v31 + 12 == (const std::string::value_type **)v35) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v35[7];
          }
          BOOL v34 = v36 != 0;
          if (v52 < 0) {
            operator delete((void *)v51[0]);
          }
        }
        else
        {
          BOOL v34 = 1;
        }
        if (v54 < 0) {
          operator delete(__p[0]);
        }
        if (!v34)
        {
          BOOL v37 = v31[17];
          if (((unint64_t)v37 & a2) != 0)
          {
            if ((*a1)->__r_.__value_.__s.__data_[15])
            {
              char v38 = *(unsigned char *)(a4 + 23);
              BOOL v39 = v38 < 0;
              if (v38 >= 0) {
                uint64_t v40 = (const std::string::value_type *)a4;
              }
              else {
                uint64_t v40 = *(const std::string::value_type **)a4;
              }
              std::string::size_type v41 = v38 & 0x7F;
              if (v39) {
                std::string::size_type v42 = *(void *)(a4 + 8);
              }
              else {
                std::string::size_type v42 = v41;
              }
              std::string::append(a1[1], v40, v42);
            }
            v30 |= (unint64_t)v37;
            char v43 = *((unsigned char *)*v28 + 23);
            if (v43 >= 0) {
              unsigned int v44 = (const std::string::value_type *)*v28;
            }
            else {
              unsigned int v44 = **v28;
            }
            if (v43 >= 0) {
              std::string::size_type v45 = v43 & 0x7F;
            }
            else {
              std::string::size_type v45 = (std::string::size_type)(*v28)[1];
            }
            std::string::append(a1[1], v44, v45);
            std::string::push_back(a1[1], 32);
          }
        }
        ++v28;
      }
      while (v28 != v29);
      if (!v30 || v30 != a2)
      {
LABEL_86:
        std::string::resize(a1[1], __n, 0);
        goto LABEL_13;
      }
      std::string::size_type v46 = a1[1];
      if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v47 = v46->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v47 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v48 = v47 - 1;
      if ((*((unsigned char *)&v46->__r_.__value_.__s + 23) & 0x80) != 0) {
        std::string::size_type v46 = (std::string *)v46->__r_.__value_.__r.__words[0];
      }
      v46->__r_.__value_.__s.__data_[v48] = 34;
    }
  }
}

void sub_20DC5EBE0(std::string **a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    if (a2) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    char v6 = a1[1];
    std::string::append(v6, v5);
  }
  else
  {
    if ((*a1)->__r_.__value_.__s.__data_[12]) {
      BOOL v8 = a4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_13;
    }
    for (unint64_t i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
    {
      uint64_t v12 = *i;
      if (*(void *)(*i + 136) == a2)
      {
        std::string::push_back(a1[1], 34);
        if ((*a1)->__r_.__value_.__s.__data_[15])
        {
          char v13 = *(unsigned char *)(a4 + 23);
          BOOL v14 = v13 < 0;
          if (v13 >= 0) {
            uint64_t v15 = (const std::string::value_type *)a4;
          }
          else {
            uint64_t v15 = *(const std::string::value_type **)a4;
          }
          std::string::size_type v16 = v13 & 0x7F;
          if (v14) {
            std::string::size_type v17 = *(void *)(a4 + 8);
          }
          else {
            std::string::size_type v17 = v16;
          }
          std::string::append(a1[1], v15, v17);
        }
        char v18 = *(unsigned char *)(v12 + 23);
        BOOL v19 = v18 < 0;
        if (v18 >= 0) {
          BOOL v20 = (const std::string::value_type *)v12;
        }
        else {
          BOOL v20 = *(const std::string::value_type **)v12;
        }
        std::string::size_type v21 = v18 & 0x7F;
        if (v19) {
          std::string::size_type v22 = *(void *)(v12 + 8);
        }
        else {
          std::string::size_type v22 = v21;
        }
        std::string::append(a1[1], v20, v22);
        std::string::size_type v23 = a1[1];
        std::string::push_back(v23, 34);
        return;
      }
    }
    uint64_t v50 = a2;
    if (!a2) {
      goto LABEL_13;
    }
    char v54 = 9;
    strcpy((char *)__p, "bit_flags");
    char v24 = sub_20DC58BC0(a4 + 72, (const void **)__p);
    BOOL v25 = (uint64_t *)(a4 + 80) == v24 || v24[7] == 0;
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (v25)
    {
LABEL_13:
      sub_20DC3F7A4();
      if (v54 >= 0) {
        BOOL v9 = __p;
      }
      else {
        BOOL v9 = (void **)__p[0];
      }
      if (v54 >= 0) {
        std::string::size_type v10 = v54 & 0x7F;
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(a1[1], (const std::string::value_type *)v9, v10);
      if (v54 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::string::size_type v26 = a1[1];
      if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = v26->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE(v26->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type __n = size;
      std::string::push_back(v26, 34);
      std::string::size_type v28 = *(const std::string::value_type ****)(a4 + 208);
      uint64_t v29 = *(const std::string::value_type ****)(a4 + 216);
      if (v28 == v29) {
        goto LABEL_86;
      }
      uint64_t v30 = 0;
      do
      {
        std::string::size_type v31 = *v28;
        uint64_t v32 = (uint64_t)(*v28 + 11);
        char v54 = 13;
        strcpy((char *)__p, "bit_flags_all");
        uint64_t v33 = sub_20DC58BC0(v32, (const void **)__p);
        if (v31 + 12 == (const std::string::value_type **)v33 || !v33[7])
        {
          char v52 = 14;
          strcpy((char *)v51, "bit_flags_none");
          uint64_t v35 = sub_20DC58BC0(v32, v51);
          if (v31 + 12 == (const std::string::value_type **)v35) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v35[7];
          }
          BOOL v34 = v36 != 0;
          if (v52 < 0) {
            operator delete((void *)v51[0]);
          }
        }
        else
        {
          BOOL v34 = 1;
        }
        if (v54 < 0) {
          operator delete(__p[0]);
        }
        if (!v34)
        {
          BOOL v37 = v31[17];
          if (((unint64_t)v37 & v50) != 0)
          {
            if ((*a1)->__r_.__value_.__s.__data_[15])
            {
              char v38 = *(unsigned char *)(a4 + 23);
              BOOL v39 = v38 < 0;
              if (v38 >= 0) {
                uint64_t v40 = (const std::string::value_type *)a4;
              }
              else {
                uint64_t v40 = *(const std::string::value_type **)a4;
              }
              std::string::size_type v41 = v38 & 0x7F;
              if (v39) {
                std::string::size_type v42 = *(void *)(a4 + 8);
              }
              else {
                std::string::size_type v42 = v41;
              }
              std::string::append(a1[1], v40, v42);
            }
            v30 |= (unint64_t)v37;
            char v43 = *((unsigned char *)*v28 + 23);
            if (v43 >= 0) {
              unsigned int v44 = (const std::string::value_type *)*v28;
            }
            else {
              unsigned int v44 = **v28;
            }
            if (v43 >= 0) {
              std::string::size_type v45 = v43 & 0x7F;
            }
            else {
              std::string::size_type v45 = (std::string::size_type)(*v28)[1];
            }
            std::string::append(a1[1], v44, v45);
            std::string::push_back(a1[1], 32);
          }
        }
        ++v28;
      }
      while (v28 != v29);
      if (!v30 || v30 != v50)
      {
LABEL_86:
        std::string::resize(a1[1], __n, 0);
        goto LABEL_13;
      }
      std::string::size_type v46 = a1[1];
      if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v47 = v46->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v47 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v48 = v47 - 1;
      if ((*((unsigned char *)&v46->__r_.__value_.__s + 23) & 0x80) != 0) {
        std::string::size_type v46 = (std::string *)v46->__r_.__value_.__r.__words[0];
      }
      v46->__r_.__value_.__s.__data_[v48] = 34;
    }
  }
}

void sub_20DC5EFE0(std::string **a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    if (a2) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    char v6 = a1[1];
    std::string::append(v6, v5);
  }
  else
  {
    if ((*a1)->__r_.__value_.__s.__data_[12]) {
      BOOL v8 = a4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_82;
    }
    for (unint64_t i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
    {
      uint64_t v10 = *i;
      if (*(void *)(*i + 136) == a2)
      {
        std::string::push_back(a1[1], 34);
        if ((*a1)->__r_.__value_.__s.__data_[15])
        {
          char v11 = *(unsigned char *)(a4 + 23);
          BOOL v12 = v11 < 0;
          if (v11 >= 0) {
            char v13 = (const std::string::value_type *)a4;
          }
          else {
            char v13 = *(const std::string::value_type **)a4;
          }
          std::string::size_type v14 = v11 & 0x7F;
          if (v12) {
            std::string::size_type v15 = *(void *)(a4 + 8);
          }
          else {
            std::string::size_type v15 = v14;
          }
          std::string::append(a1[1], v13, v15);
        }
        char v16 = *(unsigned char *)(v10 + 23);
        BOOL v17 = v16 < 0;
        if (v16 >= 0) {
          char v18 = (const std::string::value_type *)v10;
        }
        else {
          char v18 = *(const std::string::value_type **)v10;
        }
        std::string::size_type v19 = v16 & 0x7F;
        if (v17) {
          std::string::size_type v20 = *(void *)(v10 + 8);
        }
        else {
          std::string::size_type v20 = v19;
        }
        std::string::append(a1[1], v18, v20);
        std::string::size_type v21 = a1[1];
        std::string::push_back(v21, 34);
        return;
      }
    }
    uint64_t v50 = a2;
    if (!a2) {
      goto LABEL_82;
    }
    char v54 = 9;
    strcpy((char *)__p, "bit_flags");
    std::string::size_type v22 = sub_20DC58BC0(a4 + 72, (const void **)__p);
    BOOL v23 = (uint64_t *)(a4 + 80) == v22 || v22[7] == 0;
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (v23)
    {
LABEL_82:
      sub_20DC6FAC0();
      if (v54 >= 0) {
        std::string::size_type v47 = __p;
      }
      else {
        std::string::size_type v47 = (void **)__p[0];
      }
      if (v54 >= 0) {
        std::string::size_type v48 = v54 & 0x7F;
      }
      else {
        std::string::size_type v48 = (std::string::size_type)__p[1];
      }
      std::string::append(a1[1], (const std::string::value_type *)v47, v48);
      if (v54 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      char v24 = a1[1];
      if (SHIBYTE(v24->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = v24->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE(v24->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type __n = size;
      std::string::push_back(v24, 34);
      std::string::size_type v26 = *(const std::string::value_type ****)(a4 + 208);
      std::string::size_type v27 = *(const std::string::value_type ****)(a4 + 216);
      if (v26 == v27) {
        goto LABEL_81;
      }
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = *v26;
        uint64_t v30 = (uint64_t)(*v26 + 11);
        char v54 = 13;
        strcpy((char *)__p, "bit_flags_all");
        std::string::size_type v31 = sub_20DC58BC0(v30, (const void **)__p);
        if (v29 + 12 == (const std::string::value_type **)v31 || !v31[7])
        {
          char v52 = 14;
          strcpy((char *)v51, "bit_flags_none");
          uint64_t v33 = sub_20DC58BC0(v30, v51);
          if (v29 + 12 == (const std::string::value_type **)v33) {
            uint64_t v34 = 0;
          }
          else {
            uint64_t v34 = v33[7];
          }
          BOOL v32 = v34 != 0;
          if (v52 < 0) {
            operator delete((void *)v51[0]);
          }
        }
        else
        {
          BOOL v32 = 1;
        }
        if (v54 < 0) {
          operator delete(__p[0]);
        }
        if (!v32)
        {
          uint64_t v35 = v29[17];
          if (((unint64_t)v35 & v50) != 0)
          {
            if ((*a1)->__r_.__value_.__s.__data_[15])
            {
              char v36 = *(unsigned char *)(a4 + 23);
              BOOL v37 = v36 < 0;
              if (v36 >= 0) {
                char v38 = (const std::string::value_type *)a4;
              }
              else {
                char v38 = *(const std::string::value_type **)a4;
              }
              std::string::size_type v39 = v36 & 0x7F;
              if (v37) {
                std::string::size_type v40 = *(void *)(a4 + 8);
              }
              else {
                std::string::size_type v40 = v39;
              }
              std::string::append(a1[1], v38, v40);
            }
            v28 |= (unint64_t)v35;
            char v41 = *((unsigned char *)*v26 + 23);
            if (v41 >= 0) {
              std::string::size_type v42 = (const std::string::value_type *)*v26;
            }
            else {
              std::string::size_type v42 = **v26;
            }
            if (v41 >= 0) {
              std::string::size_type v43 = v41 & 0x7F;
            }
            else {
              std::string::size_type v43 = (std::string::size_type)(*v26)[1];
            }
            std::string::append(a1[1], v42, v43);
            std::string::push_back(a1[1], 32);
          }
        }
        ++v26;
      }
      while (v26 != v27);
      if (!v28 || v28 != v50)
      {
LABEL_81:
        std::string::resize(a1[1], __n, 0);
        goto LABEL_82;
      }
      unsigned int v44 = a1[1];
      if (SHIBYTE(v44->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v45 = v44->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v45 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v46 = v45 - 1;
      if ((*((unsigned char *)&v44->__r_.__value_.__s + 23) & 0x80) != 0) {
        unsigned int v44 = (std::string *)v44->__r_.__value_.__r.__words[0];
      }
      v44->__r_.__value_.__s.__data_[v46] = 34;
    }
  }
}

void sub_20DC5F3DC(std::string **a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    if (a2) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    char v6 = a1[1];
    std::string::append(v6, v5);
  }
  else
  {
    if ((*a1)->__r_.__value_.__s.__data_[12]) {
      BOOL v8 = a4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_13;
    }
    for (unint64_t i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
    {
      uint64_t v12 = *i;
      if (*(void *)(*i + 136) == a2)
      {
        std::string::push_back(a1[1], 34);
        if ((*a1)->__r_.__value_.__s.__data_[15])
        {
          char v13 = *(unsigned char *)(a4 + 23);
          BOOL v14 = v13 < 0;
          if (v13 >= 0) {
            std::string::size_type v15 = (const std::string::value_type *)a4;
          }
          else {
            std::string::size_type v15 = *(const std::string::value_type **)a4;
          }
          std::string::size_type v16 = v13 & 0x7F;
          if (v14) {
            std::string::size_type v17 = *(void *)(a4 + 8);
          }
          else {
            std::string::size_type v17 = v16;
          }
          std::string::append(a1[1], v15, v17);
        }
        char v18 = *(unsigned char *)(v12 + 23);
        BOOL v19 = v18 < 0;
        if (v18 >= 0) {
          std::string::size_type v20 = (const std::string::value_type *)v12;
        }
        else {
          std::string::size_type v20 = *(const std::string::value_type **)v12;
        }
        std::string::size_type v21 = v18 & 0x7F;
        if (v19) {
          std::string::size_type v22 = *(void *)(v12 + 8);
        }
        else {
          std::string::size_type v22 = v21;
        }
        std::string::append(a1[1], v20, v22);
        BOOL v23 = a1[1];
        std::string::push_back(v23, 34);
        return;
      }
    }
    uint64_t v50 = a2;
    if (!a2) {
      goto LABEL_13;
    }
    char v54 = 9;
    strcpy((char *)__p, "bit_flags");
    char v24 = sub_20DC58BC0(a4 + 72, (const void **)__p);
    BOOL v25 = (uint64_t *)(a4 + 80) == v24 || v24[7] == 0;
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (v25)
    {
LABEL_13:
      sub_20DC3C4E4();
      if (v54 >= 0) {
        BOOL v9 = __p;
      }
      else {
        BOOL v9 = (void **)__p[0];
      }
      if (v54 >= 0) {
        std::string::size_type v10 = v54 & 0x7F;
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(a1[1], (const std::string::value_type *)v9, v10);
      if (v54 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::string::size_type v26 = a1[1];
      if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = v26->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE(v26->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type __n = size;
      std::string::push_back(v26, 34);
      uint64_t v28 = *(const std::string::value_type ****)(a4 + 208);
      uint64_t v29 = *(const std::string::value_type ****)(a4 + 216);
      if (v28 == v29) {
        goto LABEL_86;
      }
      uint64_t v30 = 0;
      do
      {
        std::string::size_type v31 = *v28;
        uint64_t v32 = (uint64_t)(*v28 + 11);
        char v54 = 13;
        strcpy((char *)__p, "bit_flags_all");
        uint64_t v33 = sub_20DC58BC0(v32, (const void **)__p);
        if (v31 + 12 == (const std::string::value_type **)v33 || !v33[7])
        {
          char v52 = 14;
          strcpy((char *)v51, "bit_flags_none");
          uint64_t v35 = sub_20DC58BC0(v32, v51);
          if (v31 + 12 == (const std::string::value_type **)v35) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v35[7];
          }
          BOOL v34 = v36 != 0;
          if (v52 < 0) {
            operator delete((void *)v51[0]);
          }
        }
        else
        {
          BOOL v34 = 1;
        }
        if (v54 < 0) {
          operator delete(__p[0]);
        }
        if (!v34)
        {
          BOOL v37 = v31[17];
          if (((unint64_t)v37 & v50) != 0)
          {
            if ((*a1)->__r_.__value_.__s.__data_[15])
            {
              char v38 = *(unsigned char *)(a4 + 23);
              BOOL v39 = v38 < 0;
              if (v38 >= 0) {
                std::string::size_type v40 = (const std::string::value_type *)a4;
              }
              else {
                std::string::size_type v40 = *(const std::string::value_type **)a4;
              }
              std::string::size_type v41 = v38 & 0x7F;
              if (v39) {
                std::string::size_type v42 = *(void *)(a4 + 8);
              }
              else {
                std::string::size_type v42 = v41;
              }
              std::string::append(a1[1], v40, v42);
            }
            v30 |= (unint64_t)v37;
            char v43 = *((unsigned char *)*v28 + 23);
            if (v43 >= 0) {
              unsigned int v44 = (const std::string::value_type *)*v28;
            }
            else {
              unsigned int v44 = **v28;
            }
            if (v43 >= 0) {
              std::string::size_type v45 = v43 & 0x7F;
            }
            else {
              std::string::size_type v45 = (std::string::size_type)(*v28)[1];
            }
            std::string::append(a1[1], v44, v45);
            std::string::push_back(a1[1], 32);
          }
        }
        ++v28;
      }
      while (v28 != v29);
      if (!v30 || v30 != v50)
      {
LABEL_86:
        std::string::resize(a1[1], __n, 0);
        goto LABEL_13;
      }
      std::string::size_type v46 = a1[1];
      if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v47 = v46->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v47 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v48 = v47 - 1;
      if ((*((unsigned char *)&v46->__r_.__value_.__s + 23) & 0x80) != 0) {
        std::string::size_type v46 = (std::string *)v46->__r_.__value_.__r.__words[0];
      }
      v46->__r_.__value_.__s.__data_[v48] = 34;
    }
  }
}

void sub_20DC5F7DC(std::string **a1, int a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    if (a2) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    char v6 = a1[1];
    std::string::append(v6, v5);
  }
  else
  {
    if ((*a1)->__r_.__value_.__s.__data_[12]) {
      BOOL v8 = a4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_13;
    }
    for (unint64_t i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
    {
      uint64_t v12 = *i;
      if (*(void *)(*i + 136) == a2)
      {
        std::string::push_back(a1[1], 34);
        if ((*a1)->__r_.__value_.__s.__data_[15])
        {
          char v13 = *(unsigned char *)(a4 + 23);
          BOOL v14 = v13 < 0;
          if (v13 >= 0) {
            std::string::size_type v15 = (const std::string::value_type *)a4;
          }
          else {
            std::string::size_type v15 = *(const std::string::value_type **)a4;
          }
          std::string::size_type v16 = v13 & 0x7F;
          if (v14) {
            std::string::size_type v17 = *(void *)(a4 + 8);
          }
          else {
            std::string::size_type v17 = v16;
          }
          std::string::append(a1[1], v15, v17);
        }
        char v18 = *(unsigned char *)(v12 + 23);
        BOOL v19 = v18 < 0;
        if (v18 >= 0) {
          std::string::size_type v20 = (const std::string::value_type *)v12;
        }
        else {
          std::string::size_type v20 = *(const std::string::value_type **)v12;
        }
        std::string::size_type v21 = v18 & 0x7F;
        if (v19) {
          std::string::size_type v22 = *(void *)(v12 + 8);
        }
        else {
          std::string::size_type v22 = v21;
        }
        std::string::append(a1[1], v20, v22);
        BOOL v23 = a1[1];
        std::string::push_back(v23, 34);
        return;
      }
    }
    uint64_t v50 = a2;
    if (!a2) {
      goto LABEL_13;
    }
    char v54 = 9;
    strcpy((char *)__p, "bit_flags");
    char v24 = sub_20DC58BC0(a4 + 72, (const void **)__p);
    BOOL v25 = (uint64_t *)(a4 + 80) == v24 || v24[7] == 0;
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (v25)
    {
LABEL_13:
      sub_20DC3C4E4();
      if (v54 >= 0) {
        BOOL v9 = __p;
      }
      else {
        BOOL v9 = (void **)__p[0];
      }
      if (v54 >= 0) {
        std::string::size_type v10 = v54 & 0x7F;
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(a1[1], (const std::string::value_type *)v9, v10);
      if (v54 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::string::size_type v26 = a1[1];
      if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = v26->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE(v26->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type __n = size;
      std::string::push_back(v26, 34);
      uint64_t v28 = *(const std::string::value_type ****)(a4 + 208);
      uint64_t v29 = *(const std::string::value_type ****)(a4 + 216);
      if (v28 == v29) {
        goto LABEL_86;
      }
      uint64_t v30 = 0;
      do
      {
        std::string::size_type v31 = *v28;
        uint64_t v32 = (uint64_t)(*v28 + 11);
        char v54 = 13;
        strcpy((char *)__p, "bit_flags_all");
        uint64_t v33 = sub_20DC58BC0(v32, (const void **)__p);
        if (v31 + 12 == (const std::string::value_type **)v33 || !v33[7])
        {
          char v52 = 14;
          strcpy((char *)v51, "bit_flags_none");
          uint64_t v35 = sub_20DC58BC0(v32, v51);
          if (v31 + 12 == (const std::string::value_type **)v35) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v35[7];
          }
          BOOL v34 = v36 != 0;
          if (v52 < 0) {
            operator delete((void *)v51[0]);
          }
        }
        else
        {
          BOOL v34 = 1;
        }
        if (v54 < 0) {
          operator delete(__p[0]);
        }
        if (!v34)
        {
          BOOL v37 = v31[17];
          if (((unint64_t)v37 & v50) != 0)
          {
            if ((*a1)->__r_.__value_.__s.__data_[15])
            {
              char v38 = *(unsigned char *)(a4 + 23);
              BOOL v39 = v38 < 0;
              if (v38 >= 0) {
                std::string::size_type v40 = (const std::string::value_type *)a4;
              }
              else {
                std::string::size_type v40 = *(const std::string::value_type **)a4;
              }
              std::string::size_type v41 = v38 & 0x7F;
              if (v39) {
                std::string::size_type v42 = *(void *)(a4 + 8);
              }
              else {
                std::string::size_type v42 = v41;
              }
              std::string::append(a1[1], v40, v42);
            }
            v30 |= (unint64_t)v37;
            char v43 = *((unsigned char *)*v28 + 23);
            if (v43 >= 0) {
              unsigned int v44 = (const std::string::value_type *)*v28;
            }
            else {
              unsigned int v44 = **v28;
            }
            if (v43 >= 0) {
              std::string::size_type v45 = v43 & 0x7F;
            }
            else {
              std::string::size_type v45 = (std::string::size_type)(*v28)[1];
            }
            std::string::append(a1[1], v44, v45);
            std::string::push_back(a1[1], 32);
          }
        }
        ++v28;
      }
      while (v28 != v29);
      if (!v30 || v30 != v50)
      {
LABEL_86:
        std::string::resize(a1[1], __n, 0);
        goto LABEL_13;
      }
      std::string::size_type v46 = a1[1];
      if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v47 = v46->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v47 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v48 = v47 - 1;
      if ((*((unsigned char *)&v46->__r_.__value_.__s + 23) & 0x80) != 0) {
        std::string::size_type v46 = (std::string *)v46->__r_.__value_.__r.__words[0];
      }
      v46->__r_.__value_.__s.__data_[v48] = 34;
    }
  }
}

void sub_20DC5FBDC(std::string **a1, int a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    if (a2) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    char v6 = a1[1];
    std::string::append(v6, v5);
  }
  else
  {
    if ((*a1)->__r_.__value_.__s.__data_[12]) {
      BOOL v8 = a4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_82;
    }
    for (unint64_t i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
    {
      uint64_t v10 = *i;
      if (*(void *)(*i + 136) == a2)
      {
        std::string::push_back(a1[1], 34);
        if ((*a1)->__r_.__value_.__s.__data_[15])
        {
          char v11 = *(unsigned char *)(a4 + 23);
          BOOL v12 = v11 < 0;
          if (v11 >= 0) {
            char v13 = (const std::string::value_type *)a4;
          }
          else {
            char v13 = *(const std::string::value_type **)a4;
          }
          std::string::size_type v14 = v11 & 0x7F;
          if (v12) {
            std::string::size_type v15 = *(void *)(a4 + 8);
          }
          else {
            std::string::size_type v15 = v14;
          }
          std::string::append(a1[1], v13, v15);
        }
        char v16 = *(unsigned char *)(v10 + 23);
        BOOL v17 = v16 < 0;
        if (v16 >= 0) {
          char v18 = (const std::string::value_type *)v10;
        }
        else {
          char v18 = *(const std::string::value_type **)v10;
        }
        std::string::size_type v19 = v16 & 0x7F;
        if (v17) {
          std::string::size_type v20 = *(void *)(v10 + 8);
        }
        else {
          std::string::size_type v20 = v19;
        }
        std::string::append(a1[1], v18, v20);
        std::string::size_type v21 = a1[1];
        std::string::push_back(v21, 34);
        return;
      }
    }
    uint64_t v50 = a2;
    if (!a2) {
      goto LABEL_82;
    }
    char v54 = 9;
    strcpy((char *)__p, "bit_flags");
    std::string::size_type v22 = sub_20DC58BC0(a4 + 72, (const void **)__p);
    BOOL v23 = (uint64_t *)(a4 + 80) == v22 || v22[7] == 0;
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (v23)
    {
LABEL_82:
      sub_20DC6FA50();
      if (v54 >= 0) {
        std::string::size_type v47 = __p;
      }
      else {
        std::string::size_type v47 = (void **)__p[0];
      }
      if (v54 >= 0) {
        std::string::size_type v48 = v54 & 0x7F;
      }
      else {
        std::string::size_type v48 = (std::string::size_type)__p[1];
      }
      std::string::append(a1[1], (const std::string::value_type *)v47, v48);
      if (v54 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      char v24 = a1[1];
      if (SHIBYTE(v24->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = v24->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE(v24->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type __n = size;
      std::string::push_back(v24, 34);
      std::string::size_type v26 = *(const std::string::value_type ****)(a4 + 208);
      std::string::size_type v27 = *(const std::string::value_type ****)(a4 + 216);
      if (v26 == v27) {
        goto LABEL_81;
      }
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = *v26;
        uint64_t v30 = (uint64_t)(*v26 + 11);
        char v54 = 13;
        strcpy((char *)__p, "bit_flags_all");
        std::string::size_type v31 = sub_20DC58BC0(v30, (const void **)__p);
        if (v29 + 12 == (const std::string::value_type **)v31 || !v31[7])
        {
          char v52 = 14;
          strcpy((char *)v51, "bit_flags_none");
          uint64_t v33 = sub_20DC58BC0(v30, v51);
          if (v29 + 12 == (const std::string::value_type **)v33) {
            uint64_t v34 = 0;
          }
          else {
            uint64_t v34 = v33[7];
          }
          BOOL v32 = v34 != 0;
          if (v52 < 0) {
            operator delete((void *)v51[0]);
          }
        }
        else
        {
          BOOL v32 = 1;
        }
        if (v54 < 0) {
          operator delete(__p[0]);
        }
        if (!v32)
        {
          uint64_t v35 = v29[17];
          if (((unint64_t)v35 & v50) != 0)
          {
            if ((*a1)->__r_.__value_.__s.__data_[15])
            {
              char v36 = *(unsigned char *)(a4 + 23);
              BOOL v37 = v36 < 0;
              if (v36 >= 0) {
                char v38 = (const std::string::value_type *)a4;
              }
              else {
                char v38 = *(const std::string::value_type **)a4;
              }
              std::string::size_type v39 = v36 & 0x7F;
              if (v37) {
                std::string::size_type v40 = *(void *)(a4 + 8);
              }
              else {
                std::string::size_type v40 = v39;
              }
              std::string::append(a1[1], v38, v40);
            }
            v28 |= (unint64_t)v35;
            char v41 = *((unsigned char *)*v26 + 23);
            if (v41 >= 0) {
              std::string::size_type v42 = (const std::string::value_type *)*v26;
            }
            else {
              std::string::size_type v42 = **v26;
            }
            if (v41 >= 0) {
              std::string::size_type v43 = v41 & 0x7F;
            }
            else {
              std::string::size_type v43 = (std::string::size_type)(*v26)[1];
            }
            std::string::append(a1[1], v42, v43);
            std::string::push_back(a1[1], 32);
          }
        }
        ++v26;
      }
      while (v26 != v27);
      if (!v28 || v28 != v50)
      {
LABEL_81:
        std::string::resize(a1[1], __n, 0);
        goto LABEL_82;
      }
      unsigned int v44 = a1[1];
      if (SHIBYTE(v44->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v45 = v44->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v45 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v46 = v45 - 1;
      if ((*((unsigned char *)&v44->__r_.__value_.__s + 23) & 0x80) != 0) {
        unsigned int v44 = (std::string *)v44->__r_.__value_.__r.__words[0];
      }
      v44->__r_.__value_.__s.__data_[v46] = 34;
    }
  }
}

void sub_20DC5FFD8(std::string **a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    if (a2) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    char v6 = a1[1];
    std::string::append(v6, v5);
  }
  else
  {
    if ((*a1)->__r_.__value_.__s.__data_[12]) {
      BOOL v8 = a4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_13;
    }
    for (unint64_t i = *(uint64_t **)(a4 + 208); i != *(uint64_t **)(a4 + 216); ++i)
    {
      uint64_t v12 = *i;
      if (*(void *)(*i + 136) == a2)
      {
        std::string::push_back(a1[1], 34);
        if ((*a1)->__r_.__value_.__s.__data_[15])
        {
          char v13 = *(unsigned char *)(a4 + 23);
          BOOL v14 = v13 < 0;
          if (v13 >= 0) {
            std::string::size_type v15 = (const std::string::value_type *)a4;
          }
          else {
            std::string::size_type v15 = *(const std::string::value_type **)a4;
          }
          std::string::size_type v16 = v13 & 0x7F;
          if (v14) {
            std::string::size_type v17 = *(void *)(a4 + 8);
          }
          else {
            std::string::size_type v17 = v16;
          }
          std::string::append(a1[1], v15, v17);
        }
        char v18 = *(unsigned char *)(v12 + 23);
        BOOL v19 = v18 < 0;
        if (v18 >= 0) {
          std::string::size_type v20 = (const std::string::value_type *)v12;
        }
        else {
          std::string::size_type v20 = *(const std::string::value_type **)v12;
        }
        std::string::size_type v21 = v18 & 0x7F;
        if (v19) {
          std::string::size_type v22 = *(void *)(v12 + 8);
        }
        else {
          std::string::size_type v22 = v21;
        }
        std::string::append(a1[1], v20, v22);
        BOOL v23 = a1[1];
        std::string::push_back(v23, 34);
        return;
      }
    }
    if (!a2) {
      goto LABEL_13;
    }
    char v54 = 9;
    strcpy((char *)__p, "bit_flags");
    char v24 = sub_20DC58BC0(a4 + 72, (const void **)__p);
    BOOL v25 = (uint64_t *)(a4 + 80) == v24 || v24[7] == 0;
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (v25)
    {
LABEL_13:
      sub_20DC3C654();
      if (v54 >= 0) {
        BOOL v9 = __p;
      }
      else {
        BOOL v9 = (void **)__p[0];
      }
      if (v54 >= 0) {
        std::string::size_type v10 = v54 & 0x7F;
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(a1[1], (const std::string::value_type *)v9, v10);
      if (v54 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::string::size_type v26 = a1[1];
      if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = v26->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE(v26->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type __n = size;
      std::string::push_back(v26, 34);
      uint64_t v28 = *(const std::string::value_type ****)(a4 + 208);
      uint64_t v29 = *(const std::string::value_type ****)(a4 + 216);
      if (v28 == v29) {
        goto LABEL_86;
      }
      uint64_t v30 = 0;
      do
      {
        std::string::size_type v31 = *v28;
        uint64_t v32 = (uint64_t)(*v28 + 11);
        char v54 = 13;
        strcpy((char *)__p, "bit_flags_all");
        uint64_t v33 = sub_20DC58BC0(v32, (const void **)__p);
        if (v31 + 12 == (const std::string::value_type **)v33 || !v33[7])
        {
          char v52 = 14;
          strcpy((char *)v51, "bit_flags_none");
          uint64_t v35 = sub_20DC58BC0(v32, v51);
          if (v31 + 12 == (const std::string::value_type **)v35) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v35[7];
          }
          BOOL v34 = v36 != 0;
          if (v52 < 0) {
            operator delete((void *)v51[0]);
          }
        }
        else
        {
          BOOL v34 = 1;
        }
        if (v54 < 0) {
          operator delete(__p[0]);
        }
        if (!v34)
        {
          BOOL v37 = v31[17];
          if (((unint64_t)v37 & a2) != 0)
          {
            if ((*a1)->__r_.__value_.__s.__data_[15])
            {
              char v38 = *(unsigned char *)(a4 + 23);
              BOOL v39 = v38 < 0;
              if (v38 >= 0) {
                std::string::size_type v40 = (const std::string::value_type *)a4;
              }
              else {
                std::string::size_type v40 = *(const std::string::value_type **)a4;
              }
              std::string::size_type v41 = v38 & 0x7F;
              if (v39) {
                std::string::size_type v42 = *(void *)(a4 + 8);
              }
              else {
                std::string::size_type v42 = v41;
              }
              std::string::append(a1[1], v40, v42);
            }
            v30 |= (unint64_t)v37;
            char v43 = *((unsigned char *)*v28 + 23);
            if (v43 >= 0) {
              unsigned int v44 = (const std::string::value_type *)*v28;
            }
            else {
              unsigned int v44 = **v28;
            }
            if (v43 >= 0) {
              std::string::size_type v45 = v43 & 0x7F;
            }
            else {
              std::string::size_type v45 = (std::string::size_type)(*v28)[1];
            }
            std::string::append(a1[1], v44, v45);
            std::string::push_back(a1[1], 32);
          }
        }
        ++v28;
      }
      while (v28 != v29);
      if (!v30 || v30 != a2)
      {
LABEL_86:
        std::string::resize(a1[1], __n, 0);
        goto LABEL_13;
      }
      std::string::size_type v46 = a1[1];
      if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v47 = v46->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v47 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v48 = v47 - 1;
      if ((*((unsigned char *)&v46->__r_.__value_.__s + 23) & 0x80) != 0) {
        std::string::size_type v46 = (std::string *)v46->__r_.__value_.__r.__words[0];
      }
      v46->__r_.__value_.__s.__data_[v48] = 34;
    }
  }
}

void sub_20DC603D0(std::string **a1, int a2, uint64_t a3, float a4)
{
  if (a2 == 2)
  {
    if (a4 == 0.0) {
      uint64_t v5 = "false";
    }
    else {
      uint64_t v5 = "true";
    }
    char v6 = a1[1];
    std::string::append(v6, v5);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12]) {
    BOOL v8 = a3 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
LABEL_13:
    sub_20DC509FC(6, &__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1[1], (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  char v11 = *(uint64_t **)(a3 + 208);
  uint64_t v12 = *(uint64_t **)(a3 + 216);
  if (v11 == v12)
  {
LABEL_25:
    if (a4 != 0.0)
    {
      float v51 = a4;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&__p, "bit_flags");
      BOOL v14 = sub_20DC58BC0(a3 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      BOOL v15 = (uint64_t *)(a3 + 80) == v14 || v14[7] == 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a4 = v51;
      if (!v15)
      {
        std::string::size_type v27 = a1[1];
        if (SHIBYTE(v27->__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v28 = v27->__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v28 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
        }
        std::string::size_type __n = v28;
        std::string::push_back(v27, 34);
        uint64_t v29 = *(const std::string::value_type ****)(a3 + 208);
        uint64_t v30 = *(const std::string::value_type ****)(a3 + 216);
        if (v29 != v30)
        {
          uint64_t v31 = 0;
          unint64_t v52 = (unint64_t)v51;
          do
          {
            uint64_t v32 = *v29;
            uint64_t v33 = (uint64_t)(*v29 + 11);
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
            strcpy((char *)&__p, "bit_flags_all");
            BOOL v34 = sub_20DC58BC0(v33, (const void **)&__p.__r_.__value_.__l.__data_);
            if (v32 + 12 == (const std::string::value_type **)v34 || !v34[7])
            {
              char v54 = 14;
              strcpy((char *)v53, "bit_flags_none");
              uint64_t v36 = sub_20DC58BC0(v33, v53);
              if (v32 + 12 == (const std::string::value_type **)v36) {
                uint64_t v37 = 0;
              }
              else {
                uint64_t v37 = v36[7];
              }
              BOOL v35 = v37 != 0;
              if (v54 < 0) {
                operator delete((void *)v53[0]);
              }
            }
            else
            {
              BOOL v35 = 1;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (!v35)
            {
              char v38 = v32[17];
              if (((unint64_t)v38 & v52) != 0)
              {
                if ((*a1)->__r_.__value_.__s.__data_[15])
                {
                  char v39 = *(unsigned char *)(a3 + 23);
                  BOOL v40 = v39 < 0;
                  if (v39 >= 0) {
                    std::string::size_type v41 = (const std::string::value_type *)a3;
                  }
                  else {
                    std::string::size_type v41 = *(const std::string::value_type **)a3;
                  }
                  std::string::size_type v42 = v39 & 0x7F;
                  if (v40) {
                    std::string::size_type v43 = *(void *)(a3 + 8);
                  }
                  else {
                    std::string::size_type v43 = v42;
                  }
                  std::string::append(a1[1], v41, v43);
                }
                v31 |= (unint64_t)v38;
                char v44 = *((unsigned char *)*v29 + 23);
                if (v44 >= 0) {
                  std::string::size_type v45 = (const std::string::value_type *)*v29;
                }
                else {
                  std::string::size_type v45 = **v29;
                }
                if (v44 >= 0) {
                  std::string::size_type v46 = v44 & 0x7F;
                }
                else {
                  std::string::size_type v46 = (std::string::size_type)(*v29)[1];
                }
                std::string::append(a1[1], v45, v46);
                std::string::push_back(a1[1], 32);
              }
            }
            ++v29;
          }
          while (v29 != v30);
          if (v31 && v31 == v52)
          {
            std::string::size_type v47 = a1[1];
            if (SHIBYTE(v47->__r_.__value_.__r.__words[2]) < 0) {
              std::string::size_type v48 = v47->__r_.__value_.__l.__size_;
            }
            else {
              std::string::size_type v48 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
            }
            std::string::size_type v49 = v48 - 1;
            if ((*((unsigned char *)&v47->__r_.__value_.__s + 23) & 0x80) != 0) {
              std::string::size_type v47 = (std::string *)v47->__r_.__value_.__r.__words[0];
            }
            v47->__r_.__value_.__s.__data_[v49] = 34;
            return;
          }
        }
        std::string::resize(a1[1], __n, 0);
        a4 = v51;
      }
    }
    goto LABEL_13;
  }
  while (1)
  {
    uint64_t v13 = *v11;
    if (*(void *)(*v11 + 136) == (uint64_t)a4) {
      break;
    }
    if (++v11 == v12) {
      goto LABEL_25;
    }
  }
  std::string::push_back(a1[1], 34);
  if ((*a1)->__r_.__value_.__s.__data_[15])
  {
    char v16 = *(unsigned char *)(a3 + 23);
    BOOL v17 = v16 < 0;
    if (v16 >= 0) {
      char v18 = (const std::string::value_type *)a3;
    }
    else {
      char v18 = *(const std::string::value_type **)a3;
    }
    std::string::size_type v19 = v16 & 0x7F;
    if (v17) {
      std::string::size_type v20 = *(void *)(a3 + 8);
    }
    else {
      std::string::size_type v20 = v19;
    }
    std::string::append(a1[1], v18, v20);
  }
  char v21 = *(unsigned char *)(v13 + 23);
  BOOL v22 = v21 < 0;
  if (v21 >= 0) {
    BOOL v23 = (const std::string::value_type *)v13;
  }
  else {
    BOOL v23 = *(const std::string::value_type **)v13;
  }
  std::string::size_type v24 = v21 & 0x7F;
  if (v22) {
    std::string::size_type v25 = *(void *)(v13 + 8);
  }
  else {
    std::string::size_type v25 = v24;
  }
  std::string::append(a1[1], v23, v25);
  std::string::size_type v26 = a1[1];

  std::string::push_back(v26, 34);
}

void sub_20DC607E0(std::string **a1, int a2, uint64_t a3, double a4)
{
  if (a2 == 2)
  {
    if (a4 == 0.0) {
      uint64_t v5 = "false";
    }
    else {
      uint64_t v5 = "true";
    }
    char v6 = a1[1];
    std::string::append(v6, v5);
    return;
  }
  if ((*a1)->__r_.__value_.__s.__data_[12]) {
    BOOL v8 = a3 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
LABEL_13:
    sub_20DC4C328(12, &__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1[1], (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  char v11 = *(uint64_t **)(a3 + 208);
  uint64_t v12 = *(uint64_t **)(a3 + 216);
  if (v11 == v12)
  {
LABEL_25:
    if (a4 != 0.0)
    {
      double v51 = a4;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&__p, "bit_flags");
      BOOL v14 = sub_20DC58BC0(a3 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      BOOL v15 = (uint64_t *)(a3 + 80) == v14 || v14[7] == 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a4 = v51;
      if (!v15)
      {
        std::string::size_type v27 = a1[1];
        if (SHIBYTE(v27->__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v28 = v27->__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v28 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
        }
        std::string::size_type __n = v28;
        std::string::push_back(v27, 34);
        uint64_t v29 = *(const std::string::value_type ****)(a3 + 208);
        uint64_t v30 = *(const std::string::value_type ****)(a3 + 216);
        if (v29 != v30)
        {
          uint64_t v31 = 0;
          unint64_t v52 = (unint64_t)v51;
          do
          {
            uint64_t v32 = *v29;
            uint64_t v33 = (uint64_t)(*v29 + 11);
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
            strcpy((char *)&__p, "bit_flags_all");
            BOOL v34 = sub_20DC58BC0(v33, (const void **)&__p.__r_.__value_.__l.__data_);
            if (v32 + 12 == (const std::string::value_type **)v34 || !v34[7])
            {
              char v54 = 14;
              strcpy((char *)v53, "bit_flags_none");
              uint64_t v36 = sub_20DC58BC0(v33, v53);
              if (v32 + 12 == (const std::string::value_type **)v36) {
                uint64_t v37 = 0;
              }
              else {
                uint64_t v37 = v36[7];
              }
              BOOL v35 = v37 != 0;
              if (v54 < 0) {
                operator delete((void *)v53[0]);
              }
            }
            else
            {
              BOOL v35 = 1;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (!v35)
            {
              char v38 = v32[17];
              if (((unint64_t)v38 & v52) != 0)
              {
                if ((*a1)->__r_.__value_.__s.__data_[15])
                {
                  char v39 = *(unsigned char *)(a3 + 23);
                  BOOL v40 = v39 < 0;
                  if (v39 >= 0) {
                    std::string::size_type v41 = (const std::string::value_type *)a3;
                  }
                  else {
                    std::string::size_type v41 = *(const std::string::value_type **)a3;
                  }
                  std::string::size_type v42 = v39 & 0x7F;
                  if (v40) {
                    std::string::size_type v43 = *(void *)(a3 + 8);
                  }
                  else {
                    std::string::size_type v43 = v42;
                  }
                  std::string::append(a1[1], v41, v43);
                }
                v31 |= (unint64_t)v38;
                char v44 = *((unsigned char *)*v29 + 23);
                if (v44 >= 0) {
                  std::string::size_type v45 = (const std::string::value_type *)*v29;
                }
                else {
                  std::string::size_type v45 = **v29;
                }
                if (v44 >= 0) {
                  std::string::size_type v46 = v44 & 0x7F;
                }
                else {
                  std::string::size_type v46 = (std::string::size_type)(*v29)[1];
                }
                std::string::append(a1[1], v45, v46);
                std::string::push_back(a1[1], 32);
              }
            }
            ++v29;
          }
          while (v29 != v30);
          if (v31 && v31 == v52)
          {
            std::string::size_type v47 = a1[1];
            if (SHIBYTE(v47->__r_.__value_.__r.__words[2]) < 0) {
              std::string::size_type v48 = v47->__r_.__value_.__l.__size_;
            }
            else {
              std::string::size_type v48 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
            }
            std::string::size_type v49 = v48 - 1;
            if ((*((unsigned char *)&v47->__r_.__value_.__s + 23) & 0x80) != 0) {
              std::string::size_type v47 = (std::string *)v47->__r_.__value_.__r.__words[0];
            }
            v47->__r_.__value_.__s.__data_[v49] = 34;
            return;
          }
        }
        std::string::resize(a1[1], __n, 0);
        a4 = v51;
      }
    }
    goto LABEL_13;
  }
  while (1)
  {
    uint64_t v13 = *v11;
    if (*(void *)(*v11 + 136) == (uint64_t)a4) {
      break;
    }
    if (++v11 == v12) {
      goto LABEL_25;
    }
  }
  std::string::push_back(a1[1], 34);
  if ((*a1)->__r_.__value_.__s.__data_[15])
  {
    char v16 = *(unsigned char *)(a3 + 23);
    BOOL v17 = v16 < 0;
    if (v16 >= 0) {
      char v18 = (const std::string::value_type *)a3;
    }
    else {
      char v18 = *(const std::string::value_type **)a3;
    }
    std::string::size_type v19 = v16 & 0x7F;
    if (v17) {
      std::string::size_type v20 = *(void *)(a3 + 8);
    }
    else {
      std::string::size_type v20 = v19;
    }
    std::string::append(a1[1], v18, v20);
  }
  char v21 = *(unsigned char *)(v13 + 23);
  BOOL v22 = v21 < 0;
  if (v21 >= 0) {
    BOOL v23 = (const std::string::value_type *)v13;
  }
  else {
    BOOL v23 = *(const std::string::value_type **)v13;
  }
  std::string::size_type v24 = v21 & 0x7F;
  if (v22) {
    std::string::size_type v25 = *(void *)(v13 + 8);
  }
  else {
    std::string::size_type v25 = v24;
  }
  std::string::append(a1[1], v23, v25);
  std::string::size_type v26 = a1[1];

  std::string::push_back(v26, 34);
}

uint64_t sub_20DC60BF0(std::string **a1, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int a6)
{
  uint64_t v9 = a6;
LABEL_2:
  switch(*(_DWORD *)a3)
  {
    case 0xD:
      uint64_t v16 = (uint64_t)(a2 + 1);
      unint64_t v15 = *a2;
      BOOL v17 = a1[1];
      int v18 = (*a1)[5].__r_.__value_.__s.__data_[17];
      int v19 = (*a1)[5].__r_.__value_.__s.__data_[18];
      return sub_20DC610D8(v16, v15, v17, v18, v19);
    case 0xE:
      int v12 = *(_DWORD *)(a3 + 4);
      __int16 v13 = *(_WORD *)(a3 + 24);
      int v25 = v12;
      int v26 = 0;
      long long v27 = *(_OWORD *)(a3 + 8);
      __int16 v28 = v13;
      if (v12 != 15)
      {
        switch(v12)
        {
          case -4:
            sub_20DC616AC(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case -3:
          case 10:
            sub_20DC61860(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case -2:
          case 8:
            sub_20DC61A14(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case -1:
          case 6:
            sub_20DC61BC8(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case 0:
          case 1:
          case 2:
          case 4:
            sub_20DC61D7C(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case 3:
            sub_20DC61F30(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case 5:
            sub_20DC620E4(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case 7:
          case 17:
            sub_20DC62298(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case 9:
            sub_20DC6244C(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case 11:
            sub_20DC62600(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case 12:
            sub_20DC627B4(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4);
            return 1;
          case 13:
          case 14:
          case 16:
            break;
          default:
            return 1;
        }
      }
      return (sub_20DC62968(a1, (uint64_t)a2, *a2, (uint64_t)&v25, a4) & 1) != 0;
    case 0xF:
      uint64_t v10 = *(void *)(a3 + 8);
      return sub_20DC5D908(a1, v10, a2, a4, a4);
    case 0x10:
      uint64_t v20 = *(void *)(a3 + 16);
      switch(*(_DWORD *)(v20 + 152))
      {
        case 0xFFFFFFFD:
          if ((v9 & 0x80000000) != 0) {
            uint64_t v21 = *(void *)a5;
          }
          else {
            uint64_t v21 = *(void *)((char *)&a5[2 * v9 + 1] + *a5);
          }
          break;
        case 0xFFFFFFFE:
          uint64_t v21 = *a5;
          if ((v9 & 0x80000000) == 0) {
            uint64_t v21 = *(unsigned int *)((char *)&a5[v9 + 1] + v21);
          }
          break;
        case 0xFFFFFFFF:
          if ((v9 & 0x80000000) != 0) {
            uint64_t v21 = *(unsigned __int16 *)a5;
          }
          else {
            uint64_t v21 = *(unsigned __int16 *)((char *)a5 + 2 * v9 + *a5 + 4);
          }
          break;
        case 1:
          if ((v9 & 0x80000000) != 0) {
            uint64_t v21 = *(unsigned __int8 *)a5;
          }
          else {
            uint64_t v21 = *((unsigned __int8 *)a5 + v9 + *a5 + 4);
          }
          break;
        default:
          abort();
      }
      uint64_t v23 = *(void *)(v20 + 216);
      uint64_t v24 = *(void *)(v20 + 208) + 8 * *(unsigned __int8 *)(v20 + 148);
      if (v24 == v23) {
        return 0;
      }
      break;
    case 0x11:
      unint64_t v22 = *(unsigned __int16 *)(a3 + 24);
      int v25 = *(_DWORD *)(a3 + 4);
      int v26 = 0;
      long long v27 = *(_OWORD *)(a3 + 8);
      __int16 v28 = v22;
      switch(v25)
      {
        case -4:
          sub_20DC62AFC(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case -3:
        case 10:
          sub_20DC62CAC(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case -2:
        case 8:
          sub_20DC62E5C(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case -1:
        case 6:
          sub_20DC6300C(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case 0:
        case 1:
        case 2:
        case 4:
          sub_20DC631BC(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case 3:
          sub_20DC6336C(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case 5:
          sub_20DC6351C(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case 7:
          sub_20DC636CC(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case 9:
          sub_20DC6387C(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case 11:
          sub_20DC63A2C(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case 12:
          sub_20DC63BDC(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4);
          return 1;
        case 13:
        case 14:
        case 15:
          return (sub_20DC7AE28(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4) & 1) != 0;
        case 16:
          return sub_20DC7AE28(a1, (uint64_t)a2, v22, (uint64_t)&v25, a4) != 0;
        default:
          return 1;
      }
    default:
      return 0;
  }
  do
  {
    if (*(void *)(*(void *)v24 + 136) == v21)
    {
      a5 = 0;
      a3 = *(void *)v24 + 48;
      uint64_t v9 = 0xFFFFFFFFLL;
      goto LABEL_2;
    }
    uint64_t v14 = 0;
    v24 += 8;
  }
  while (v24 != v23);
  return v14;
}

uint64_t sub_20DC610D8(uint64_t a1, unint64_t a2, std::string *this, int a4, int a5)
{
  std::string::append(this, "\"");
  if (!a2)
  {
LABEL_14:
    std::string::append(this, "\"");
    return 1;
  }
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  while (1)
  {
    int v14 = *(char *)(a1 + v12);
    if (v11 || !v10)
    {
      switch(*(unsigned char *)(a1 + v12))
      {
        case 8:
          int v19 = "\\b";
          goto LABEL_24;
        case 9:
          int v19 = "\\t";
          goto LABEL_24;
        case 0xA:
          int v19 = "\\n";
          goto LABEL_24;
        case 0xB:
          goto LABEL_10;
        case 0xC:
          int v19 = "\\f";
          goto LABEL_24;
        case 0xD:
          int v19 = "\\r";
          goto LABEL_24;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 == 34)
    {
      int v19 = "\\\"";
LABEL_24:
      std::string::append(this, v19);
      goto LABEL_13;
    }
    if (v14 == 92)
    {
      int v19 = "\\\\"";
      goto LABEL_24;
    }
LABEL_10:
    int v15 = *(unsigned __int8 *)(a1 + v12);
    if ((v15 - 32) > 0x5E) {
      break;
    }
    std::string::push_back(this, v15);
LABEL_13:
    uint64_t v12 = ++v13;
    BOOL v10 = v13 >= a2;
    BOOL v11 = v13 == a2;
    if (v13 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v32 = v13;
  uint64_t v17 = *(unsigned __int8 *)(a1 + v12);
  uint64_t v36 = (char *)(a1 + v12);
  uint64_t v18 = sub_20DC73DBC(&v36);
  if ((v18 & 0x80000000) == 0)
  {
    if (a5)
    {
      std::string::append(this, (const std::string::value_type *)(a1 + v12), (std::string::size_type)&v36[-v12 - a1]);
LABEL_18:
      unsigned int v13 = v36 + ~a1;
      goto LABEL_13;
    }
    uint64_t v22 = v18;
    if (WORD1(v18))
    {
      if (WORD1(v18) > 0x10u) {
        goto LABEL_18;
      }
      uint64_t v29 = ((v18 - 0x10000) >> 10) + 55296;
      std::string::append(this, "\\u");
      sub_20DC61410(v29, 4);
      if (v35 >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (v35 >= 0) {
        std::string::size_type v31 = v35 & 0x7F;
      }
      else {
        std::string::size_type v31 = v34;
      }
      std::string::append(this, p_p, v31);
      if (v35 < 0) {
        operator delete(__p);
      }
      std::string::append(this, "\\u");
      sub_20DC61410(v22 & 0x3FF | 0xDC00, 4);
      char v23 = v35;
      BOOL v24 = v35 < 0;
      std::string::size_type v25 = v34;
      if (v35 >= 0) {
        int v26 = (const std::string::value_type *)&__p;
      }
      else {
        int v26 = (const std::string::value_type *)__p;
      }
    }
    else
    {
      std::string::append(this, "\\u");
      sub_20DC61410(v22, 4);
      char v23 = v35;
      BOOL v24 = v35 < 0;
      std::string::size_type v25 = v34;
      if (v35 >= 0) {
        int v26 = (const std::string::value_type *)&__p;
      }
      else {
        int v26 = (const std::string::value_type *)__p;
      }
    }
    std::string::size_type v27 = v23 & 0x7F;
    if (v24) {
      std::string::size_type v28 = v25;
    }
    else {
      std::string::size_type v28 = v27;
    }
    std::string::append(this, v26, v28);
    if (v35 < 0) {
      operator delete(__p);
    }
    goto LABEL_18;
  }
  if (a4)
  {
    std::string::append(this, "\\x");
    sub_20DC61410(v17, 2);
    if (v35 >= 0) {
      uint64_t v20 = (const std::string::value_type *)&__p;
    }
    else {
      uint64_t v20 = (const std::string::value_type *)__p;
    }
    if (v35 >= 0) {
      std::string::size_type v21 = v35 & 0x7F;
    }
    else {
      std::string::size_type v21 = v34;
    }
    std::string::append(this, v20, v21);
    if (v35 < 0) {
      operator delete(__p);
    }
    unsigned int v13 = v32;
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_20DC61410(uint64_t a1, int a2)
{
  sub_20DC50E1C((uint64_t)v9);
  uint64_t v3 = v10[0];
  uint64_t v4 = v10[0];
  *(void *)((char *)&v10[3] + *(void *)(v10[0] - 24)) = a2;
  uint64_t v5 = (const std::ios_base *)((char *)v10 + *(void *)(v4 - 24));
  if (v5[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v5);
    char v6 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 32);
    std::locale::~locale(&v13);
    uint64_t v3 = v10[0];
  }
  v5[1].__fmtflags_ = 48;
  *(_DWORD *)((char *)&v10[1] + *(void *)(v3 - 24)) = *(_DWORD *)((unsigned char *)&v10[1] + *(void *)(v3 - 24)) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)&v10[1] + *(void *)(v3 - 24)) |= 0x4000u;
  std::ostream::operator<<();
  std::stringbuf::str();
  v9[0] = *MEMORY[0x263F8C2B8];
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x210568AB0](&v12);
}

void sub_20DC616AC(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5E398(a1, *(_WORD *)(v16 + 2 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

void sub_20DC61860(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5E7E8(a1, *(void *)(v16 + 8 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

void sub_20DC61A14(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5EBE0(a1, *(_DWORD *)(v16 + 4 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

void sub_20DC61BC8(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5EFE0(a1, *(unsigned __int16 *)(v16 + 2 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

void sub_20DC61D7C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5F3DC(a1, *(unsigned __int8 *)(v16 + v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

void sub_20DC61F30(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5F7DC(a1, *(char *)(v16 + v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

void sub_20DC620E4(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5FBDC(a1, *(__int16 *)(v16 + 2 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

void sub_20DC62298(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5F7DC(a1, *(_DWORD *)(v16 + 4 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

void sub_20DC6244C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5FFD8(a1, *(void *)(v16 + 8 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

void sub_20DC62600(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC603D0(a1, *(_DWORD *)a4, *(void *)(a4 + 16), *(float *)(v16 + 4 * v12));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

void sub_20DC627B4(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v21 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    uint64_t v16 = a2 + 4;
    unsigned int v17 = 1;
    do
    {
      if (v17 == 1)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v18 = v13 % 0xC;
        if (v21 >= 0xFFFFFFFE && v18) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v18) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC607E0(a1, *(_DWORD *)a4, *(void *)(a4 + 16), *(double *)(v16 + 8 * v12));
      ++v13;
      unint64_t v12 = v17++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  int v19 = a1[1];

  std::string::push_back(v19, 93);
}

uint64_t sub_20DC62968(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  BOOL v10 = *(_DWORD *)a4 == 15 && *(unsigned char *)(*(void *)(a4 + 8) + 200) != 0;
  int v11 = (*a1)->__r_.__value_.__r.__words[1];
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v12 = (v11 & ~(v11 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    uint64_t v15 = a2 + 4;
    while (1)
    {
      if (v14)
      {
        uint64_t v16 = *a1;
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
        {
          std::string::push_back(a1[1], 44);
          uint64_t v16 = *a1;
        }
        if ((v16->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      std::string::append(a1[1], v12, 32);
      if (v10) {
        uint64_t v17 = v15 + *(void *)(*(void *)(a4 + 8) + 216) * v13;
      }
      else {
        LODWORD(v17) = v15 + 4 * v13 + *(_DWORD *)(v15 + 4 * v13);
      }
      if ((sub_20DC60BF0((int)a1, v17) & 1) == 0) {
        return 0;
      }
      uint64_t v13 = ++v14;
      if (v14 >= a3) {
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    std::string::append(a1[1], a5, 32);
    std::string::push_back(a1[1], 93);
    return 1;
  }
}

void sub_20DC62AFC(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5E398(a1, *(_WORD *)(a2 + 2 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

void sub_20DC62CAC(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5E7E8(a1, *(void *)(a2 + 8 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

void sub_20DC62E5C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5EBE0(a1, *(_DWORD *)(a2 + 4 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

void sub_20DC6300C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5EFE0(a1, *(unsigned __int16 *)(a2 + 2 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

void sub_20DC631BC(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5F3DC(a1, *(unsigned __int8 *)(a2 + v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

void sub_20DC6336C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5F7DC(a1, *(char *)(a2 + v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

void sub_20DC6351C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5FBDC(a1, *(__int16 *)(a2 + 2 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

void sub_20DC636CC(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5F7DC(a1, *(_DWORD *)(a2 + 4 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

void sub_20DC6387C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC5FFD8(a1, *(void *)(a2 + 8 * v12), *(_DWORD *)a4, *(void *)(a4 + 16));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

void sub_20DC63A2C(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC603D0(a1, *(_DWORD *)a4, *(void *)(a4 + 16), *(float *)(a2 + 4 * v12));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

void sub_20DC63BDC(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*a1)->__r_.__value_.__r.__words[1];
  int v10 = *(_DWORD *)a4;
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v11 = (v9 & ~(v9 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v20 = v10 - 5;
    unsigned int v14 = v10 - 3;
    std::string::size_type v15 = v11;
    unsigned int v16 = 1;
    do
    {
      if (v16 == 1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        if (!(*a1)[9].__r_.__value_.__s.__data_[10]) {
          std::string::push_back(a1[1], 44);
        }
        unsigned int v17 = v13 % 0xC;
        if (v20 >= 0xFFFFFFFE && v17) {
          goto LABEL_16;
        }
        if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      if (v14 <= 1 && !v17) {
        std::string::append(a1[1], v15, 32);
      }
LABEL_16:
      std::string::append(a1[1], v15, 32);
      sub_20DC607E0(a1, *(_DWORD *)a4, *(void *)(a4 + 16), *(double *)(a2 + 8 * v12));
      ++v13;
      unint64_t v12 = v16++;
    }
    while (v12 < a3);
  }
  if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
    std::string::push_back(a1[1], 10);
  }
  std::string::append(a1[1], a5, 32);
  unsigned int v18 = a1[1];

  std::string::push_back(v18, 93);
}

uint64_t flatbuffers::GetAnyValueI(int a1, char *a2)
{
  uint64_t v7 = v2;
  uint64_t v8 = v3;
  switch(a1)
  {
    case 1:
    case 2:
    case 4:
      uint64_t result = *a2;
      break;
    case 3:
      uint64_t result = *a2;
      break;
    case 5:
      uint64_t result = *(__int16 *)a2;
      break;
    case 6:
      uint64_t result = *(unsigned __int16 *)a2;
      break;
    case 7:
      uint64_t result = *(int *)a2;
      break;
    case 8:
      uint64_t result = *(unsigned int *)a2;
      break;
    case 9:
    case 10:
      uint64_t result = *(void *)a2;
      break;
    case 11:
      uint64_t result = (uint64_t)*(float *)a2;
      break;
    case 12:
      uint64_t result = (uint64_t)*(double *)a2;
      break;
    case 13:
      uint64_t v5 = &a2[*(unsigned int *)a2 + 4];
      uint64_t v6 = 0;
      if (sub_20DC50648((flatbuffers::ClassicLocale *)&v6, v5, 10, 1)) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

double flatbuffers::GetAnyValueF(flatbuffers::ClassicLocale *a1, char *a2)
{
  switch(a1)
  {
    case 0xD:
      uint64_t v5 = &a2[*(unsigned int *)a2 + 4];
      uint64_t v3 = v5;
      uint64_t v4 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
      double result = strtod_l(v5, &v5, v4);
      if (v5 == v3 || *v5) {
        return 0.0;
      }
      break;
    case 0xC:
      return *(double *)a2;
    case 0xB:
      return *(float *)a2;
    default:
      return (double)flatbuffers::GetAnyValueI((int)a1, a2);
  }
  return result;
}

unint64_t flatbuffers::GetAnyValueS@<X0>(unint64_t result@<X0>, char *a2@<X1>, int *a3@<X2>, unsigned int a4@<W3>, char *a5@<X8>)
{
  uint64_t v6 = a5;
  switch((int)result)
  {
    case 11:
    case 12:
      double AnyValueF = flatbuffers::GetAnyValueF((flatbuffers::ClassicLocale *)result, a2);
      return sub_20DC4C328(12, (std::string *)v6, AnyValueF);
    case 13:
      uint64_t v8 = &a2[*(unsigned int *)a2 + 4];
      double result = strlen(v8);
      if (result >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      size_t v9 = result;
      if (result >= 0x17)
      {
        uint64_t v16 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17) {
          uint64_t v16 = result | 7;
        }
        uint64_t v17 = v16 + 1;
        unsigned int v18 = (char *)operator new(v16 + 1);
        *((void *)v6 + 1) = v9;
        *((void *)v6 + 2) = v17 | 0x8000000000000000;
        *(void *)uint64_t v6 = v18;
        uint64_t v6 = v18;
      }
      else
      {
        v6[23] = result;
        if (!result) {
          goto LABEL_22;
        }
      }
      double result = (unint64_t)memcpy(v6, v8, v9);
LABEL_22:
      v6[v9] = 0;
      return result;
    case 14:
      a5[23] = 12;
      strcpy(a5, "[(elements)]");
      return result;
    case 15:
      if (!a3)
      {
        a5[23] = 7;
        *(_DWORD *)a5 = 1650553896;
        int v15 = 694512738;
        goto LABEL_27;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)a3 - *a3);
      if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0) {
        unsigned int v14 = (char *)a3 + v13 + *(unsigned int *)((char *)a3 + v13);
      }
      else {
        unsigned int v14 = 0;
      }
      int v19 = &v14[4 * a4];
      uint64_t v20 = *((unsigned int *)v19 + 1);
      unsigned int v21 = &v19[v20 + 4];
      uint64_t v22 = *(int *)v21;
      if (*(unsigned __int16 *)&v21[-v22] < 5u)
      {
        int v23 = 0;
      }
      else
      {
        int v23 = *(unsigned __int16 *)&v21[-v22 + 4];
        LODWORD(v22) = *(_DWORD *)&v21[*(unsigned __int16 *)&v21[-v22 + 4]];
      }
      BOOL v24 = (unsigned int *)&v21[v23 + v22];
      unsigned int v27 = *v24;
      int v26 = v24 + 1;
      size_t v25 = v27;
      uint64_t v75 = v14;
      if (v27 >= 0x17)
      {
        if ((v25 | 7) == 0x17) {
          uint64_t v29 = (v25 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v29 = v25 | 7;
        }
        std::string::size_type v28 = operator new(v29 + 1);
        *((void *)v6 + 1) = v25;
        *((void *)v6 + 2) = v29 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)uint64_t v6 = v28;
      }
      else
      {
        v6[23] = v25;
        std::string::size_type v28 = v6;
        if (!v25) {
          goto LABEL_37;
        }
      }
      memmove(v28, v26, v25);
LABEL_37:
      *((unsigned char *)v28 + v25) = 0;
      uint64_t v30 = &v21[-*(int *)v21];
      if (*(unsigned __int16 *)v30 < 9u || (uint64_t v31 = *((unsigned __int16 *)v30 + 4)) == 0 || !v21[v31])
      {
        uint64_t v32 = *(unsigned int *)a2;
        std::string::append((std::string *)v6, " { ");
        uint64_t v33 = *(unsigned __int16 *)&v21[-*(int *)v21 + 6];
        uint64_t v34 = *(unsigned int *)&v21[v33];
        uint64_t v76 = &v21[v33 + v34];
        uint64_t v35 = *(unsigned int *)v76;
        if (!v35) {
          return (unint64_t)std::string::append((std::string *)v6, "}");
        }
        uint64_t v36 = &a2[v32];
        for (uint64_t i = (uint64_t)&v75[4 * a4 + 12 + v33 + v20 + v34]; ; i += 4)
        {
          uint64_t v38 = *(unsigned int *)(i - 4);
          uint64_t v39 = i + v38;
          uint64_t v40 = v38 - *(int *)(i + v38 - 4);
          unsigned int v41 = *(unsigned __int16 *)(i + v40 - 4);
          if (v41 >= 0xB && *(_WORD *)(i + v40 + 6)) {
            unsigned int v42 = *(unsigned __int16 *)(i + v38 + *(unsigned __int16 *)(i + v40 + 6) - 4);
          }
          else {
            unsigned int v42 = 0;
          }
          std::string::size_type v43 = &v36[-*(int *)v36];
          uint64_t v44 = *(unsigned __int16 *)v43;
          if (v44 > v42)
          {
            if (*(_WORD *)&v43[v42]) {
              break;
            }
          }
LABEL_119:
          if (i == (void)&v76[4 * v35 + 4]) {
            return (unint64_t)std::string::append((std::string *)v6, "}");
          }
        }
        if (v41 < 0xB)
        {
          std::string::size_type v47 = &v36[v44];
          if (v41 < 7)
          {
            int v48 = 0;
            std::string::size_type v49 = 0;
            goto LABEL_64;
          }
        }
        else if (*(_WORD *)(i + v40 + 6))
        {
          uint64_t v45 = *(unsigned __int16 *)(i + v38 + *(unsigned __int16 *)(i + v40 + 6) - 4);
          if (v44 <= v45 || (uint64_t v46 = *(unsigned __int16 *)&v43[v45]) == 0)
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
            __dst.__r_.__value_.__s.__data_[0] = 0;
            goto LABEL_76;
          }
          std::string::size_type v47 = &v36[v46];
        }
        else
        {
          std::string::size_type v47 = &v36[v44];
        }
        if (*(_WORD *)(i + v40 + 2)) {
          std::string::size_type v49 = (int *)(i
        }
                      + v38
                      + *(unsigned __int16 *)(i + v40 + 2)
                      + *(unsigned int *)(i + v38 + *(unsigned __int16 *)(i + v40 + 2) - 4)
                      - 4);
        else {
          std::string::size_type v49 = 0;
        }
        int v48 = 1;
LABEL_64:
        uint64_t v50 = (unsigned __int16 *)((char *)v49 - *v49);
        if (*v50 >= 5u && (uint64_t v51 = v50[2]) != 0)
        {
          uint64_t v52 = *((char *)v49 + v51);
          if (!v48)
          {
LABEL_67:
            uint64_t v53 = 0;
LABEL_71:
            char v54 = (unsigned __int16 *)(v53 - *(int *)v53);
            if (*v54 >= 9u && (uint64_t v55 = v54[4]) != 0) {
              uint64_t v56 = *(unsigned int *)(v53 + v55);
            }
            else {
              uint64_t v56 = 0xFFFFFFFFLL;
            }
            flatbuffers::GetAnyValueS(&__dst, v52, v47, a3, v56);
LABEL_76:
            LODWORD(v57) = *(_DWORD *)(v39 - 4);
            unsigned int v58 = *(unsigned __int16 *)(i + v38 - (int)v57 - 4);
            uint64_t v59 = 0;
            if (v58 >= 7)
            {
              uint64_t v59 = *(unsigned __int16 *)(i + v38 - (int)v57 + 2);
              if (*(_WORD *)(i + v38 - (int)v57 + 2)) {
                uint64_t v59 = i + v38 + v59 + *(unsigned int *)(i + v38 + v59 - 4) - 4;
              }
            }
            uint64_t v60 = -(uint64_t)(int)v57;
            uint64_t v61 = (unsigned __int16 *)(v59 - *(int *)v59);
            if (*v61 >= 5u)
            {
              uint64_t v62 = v61[2];
              if (v62)
              {
                if (*(unsigned char *)(v59 + v62) == 13)
                {
                  memset(&__str, 0, sizeof(__str));
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    p_dst = &__dst;
                  }
                  else {
                    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  }
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    unint64_t size = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
                  }
                  else {
                    unint64_t size = __dst.__r_.__value_.__l.__size_;
                  }
                  sub_20DC610D8((uint64_t)p_dst, size, &__str, 1, 0);
                  std::string::operator=(&__dst, &__str);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  uint64_t v57 = *(int *)(v39 - 4);
                  uint64_t v60 = -v57;
                  unsigned int v58 = *(unsigned __int16 *)(i + v38 - v57 - 4);
                }
              }
            }
            if (v58 < 5)
            {
              LODWORD(v65) = 0;
            }
            else
            {
              uint64_t v65 = *(unsigned __int16 *)(i + v60 + v38);
              LODWORD(v57) = *(_DWORD *)(i + v38 + v65 - 4);
            }
            uint64_t v66 = (_DWORD *)(i + v38 + v65 + (unint64_t)v57);
            std::string::size_type v67 = *(v66 - 1);
            if (v67 >= 0x17)
            {
              if ((v67 | 7) == 0x17) {
                uint64_t v69 = (v67 & 0xFFFFFFF8) + 8;
              }
              else {
                uint64_t v69 = v67 | 7;
              }
              p_str = operator new(v69 + 1);
              __str.__r_.__value_.__l.__size_ = v67;
              __str.__r_.__value_.__r.__words[2] = v69 - 0x7FFFFFFFFFFFFFFFLL;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
            }
            else
            {
              *((unsigned char *)&__str.__r_.__value_.__s + 23) = *(v66 - 1);
              p_str = &__str;
              if (!v67) {
                goto LABEL_102;
              }
            }
            memmove(p_str, v66, v67);
LABEL_102:
            *((unsigned char *)p_str + v67) = 0;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v70 = &__str;
            }
            else {
              uint64_t v70 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v71 = *((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x7F;
            }
            else {
              std::string::size_type v71 = __str.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)v6, (const std::string::value_type *)v70, v71);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::string::append((std::string *)v6, ": ");
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v72 = &__dst;
            }
            else {
              uint64_t v72 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v73 = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
            }
            else {
              std::string::size_type v73 = __dst.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)v6, (const std::string::value_type *)v72, v73);
            std::string::append((std::string *)v6, ", ");
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            uint64_t v35 = *(unsigned int *)v76;
            goto LABEL_119;
          }
        }
        else
        {
          uint64_t v52 = 0;
          if (!v48) {
            goto LABEL_67;
          }
        }
        uint64_t v53 = *(unsigned __int16 *)(i + v40 + 2);
        if (v53) {
          uint64_t v53 = i + v38 + v53 + *(unsigned int *)(i + v38 + v53 - 4) - 4;
        }
        goto LABEL_71;
      }
      return (unint64_t)std::string::append((std::string *)v6, "(struct)");
    case 16:
      a5[23] = 7;
      *(_DWORD *)a5 = 1768846632;
      int v15 = 695103337;
LABEL_27:
      *(_DWORD *)(v6 + 3) = v15;
      v6[7] = 0;
      return result;
    default:
      flatbuffers::GetAnyValueI(result, a2);
      return sub_20DC3C654();
  }
}

double flatbuffers::SetAnyValueI(int a1, unsigned char *a2, uint64_t a3)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      *a2 = a3;
      break;
    case 5:
    case 6:
      *(_WORD *)a2 = a3;
      break;
    case 7:
    case 8:
      *(_DWORD *)a2 = a3;
      break;
    case 9:
    case 10:
      *(void *)a2 = a3;
      break;
    case 11:
      *(float *)&double result = (float)a3;
      *(float *)a2 = (float)a3;
      break;
    case 12:
      double result = (double)a3;
      *(double *)a2 = (double)a3;
      break;
    default:
      return result;
  }
  return result;
}

double flatbuffers::SetAnyValueF(int a1, double *a2, double result)
{
  if (a1 == 12)
  {
    *a2 = result;
  }
  else if (a1 == 11)
  {
    *(float *)&double result = result;
    *(_DWORD *)a2 = LODWORD(result);
  }
  else
  {
    return flatbuffers::SetAnyValueI(a1, a2, (uint64_t)result);
  }
  return result;
}

double flatbuffers::SetAnyValueS(flatbuffers::ClassicLocale *a1, double *a2, char *a3)
{
  int v5 = (int)a1;
  if ((a1 - 11) > 1)
  {
    size_t v9 = 0;
    if (sub_20DC50648((flatbuffers::ClassicLocale *)&v9, a3, 10, 1)) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    size_t v9 = a3;
    uint64_t v6 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
    double result = strtod_l(a3, &v9, v6);
    if (v9 == a3 || *v9) {
      double result = 0.0;
    }
    if (v5 == 12)
    {
      *a2 = result;
      return result;
    }
    if (v5 == 11)
    {
      *(float *)&double result = result;
      *(_DWORD *)a2 = LODWORD(result);
      return result;
    }
    uint64_t v8 = (char *)(uint64_t)result;
  }
  return flatbuffers::SetAnyValueI(v5, a2, (uint64_t)v8);
}

void *flatbuffers::SetString(int *a1, const void **a2, unsigned int *a3, uint64_t *a4, int *a5)
{
  char v6 = *((unsigned char *)a2 + 23);
  char v7 = v6;
  uint64_t v8 = a2[1];
  size_t v9 = (const void *)(v6 & 0x7F);
  if (v6 >= 0) {
    int v10 = v6 & 0x7F;
  }
  else {
    int v10 = a2[1];
  }
  size_t v11 = *a3;
  uint64_t v12 = *a4;
  if (*a4 == a4[1]) {
    uint64_t v12 = 0;
  }
  unsigned int v13 = a3 - v12;
  uint64_t v14 = (a3 - v12 + 4);
  if (v10 != v11)
  {
    int v18 = v10 - v11;
    bzero((void *)(v12 + v14), v11);
    sub_20DC68074((uint64_t)v25, a1, v14, v18, a4, a5);
    if (__p)
    {
      unsigned int v27 = __p;
      operator delete(__p);
    }
    uint64_t v12 = *a4;
    if (*a4 == a4[1]) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *a4;
    }
    LODWORD(v20) = *((unsigned char *)a2 + 23) & 0x7F;
    if (*((char *)a2 + 23) < 0) {
      uint64_t v20 = a2[1];
    }
    *(_DWORD *)(v19 + v13) = v20;
    char v7 = *((unsigned char *)a2 + 23);
    uint64_t v8 = a2[1];
    size_t v9 = (const void *)(v7 & 0x7F);
  }
  unsigned int v21 = (void *)(v12 + v14);
  if (v7 >= 0) {
    uint64_t v22 = a2;
  }
  else {
    uint64_t v22 = *a2;
  }
  if (v7 >= 0) {
    int v23 = v9;
  }
  else {
    int v23 = v8;
  }
  return memcpy(v21, v22, (size_t)v23 + 1);
}

uint64_t flatbuffers::ResizeAnyVector(int *a1, int a2, uint64_t a3, int a4, int a5, uint64_t *a6, int *a7)
{
  int v7 = a2 - a4;
  size_t v8 = ((a2 - a4) * a5);
  uint64_t v9 = *a6;
  uint64_t v10 = a6[1];
  if (*a6 == v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *a6;
  }
  uint64_t v12 = a3 - v11;
  unsigned int v13 = a3 - v11 + a5 * a4 + 4;
  if (v8)
  {
    if (v7 < 0) {
      bzero((void *)(v11 + v13 - -(int)v8), -(int)v8);
    }
    sub_20DC68074((uint64_t)v20, a1, v13, v8, a6, a7);
    if (__p)
    {
      uint64_t v22 = __p;
      operator delete(__p);
    }
    uint64_t v9 = *a6;
    uint64_t v10 = a6[1];
    if (*a6 == v10) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = *a6;
    }
    *(_DWORD *)(v18 + v12) = a2;
    if (v7 >= 1)
    {
      bzero((void *)(v18 + v13), v8);
      uint64_t v9 = *a6;
      uint64_t v10 = a6[1];
    }
  }
  if (v9 == v10) {
    uint64_t v9 = 0;
  }
  return v9 + v13;
}

char *flatbuffers::AddFlatBuffer(void *a1, char *a2, uint64_t a3)
{
  int v7 = (char *)*a1;
  char v6 = (char *)a1[1];
  for (uint64_t i = &v6[-*a1]; (i & 7) != 4; uint64_t i = &v6[-*a1])
  {
    unint64_t v9 = a1[2];
    if ((unint64_t)v6 >= v9)
    {
      unint64_t v10 = (unint64_t)(i + 1);
      if ((uint64_t)(i + 1) < 0) {
        abort();
      }
      unint64_t v11 = v9 - (void)v7;
      if (2 * v11 > v10) {
        unint64_t v10 = 2 * v11;
      }
      if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v12 = v10;
      }
      if (v12) {
        unsigned int v13 = (char *)operator new(v12);
      }
      else {
        unsigned int v13 = 0;
      }
      uint64_t v14 = &i[(void)v13];
      i[(void)v13] = 0;
      uint64_t v15 = (uint64_t)&i[(void)v13 + 1];
      if (v6 != v7)
      {
        uint64_t v16 = i - 1;
        do
        {
          char v17 = *--v6;
          (v16--)[(void)v13] = v17;
        }
        while (v6 != v7);
        int v7 = (char *)*a1;
        uint64_t v14 = v13;
      }
      *a1 = v14;
      a1[1] = v15;
      a1[2] = &v13[v12];
      if (v7) {
        operator delete(v7);
      }
      char v6 = (char *)v15;
    }
    else
    {
      *v6++ = 0;
    }
    a1[1] = v6;
    int v7 = (char *)*a1;
  }
  sub_20DC52ACC((uint64_t)a1, v6, a2 + 4, &a2[a3], a3 - 4);
  uint64_t v18 = (char *)*a1;
  if (*a1 == a1[1]) {
    uint64_t v18 = 0;
  }
  return &v18[i - 4 + *(unsigned int *)a2];
}

uint64_t flatbuffers::CopyInline(uint64_t result, int *a2, int *a3, unint64_t a4, size_t __n)
{
  uint64_t v7 = result;
  if (*(void *)(result + 72) < a4) {
    *(void *)(result + 72) = a4;
  }
  uint64_t v8 = *(void *)(result + 48);
  unint64_t v9 = (a4 - 1) & -(uint64_t)(*(_DWORD *)(result + 32) - v8 + *(_DWORD *)(result + 40));
  if (v8 - *(void *)(result + 56) < v9)
  {
    int v26 = a3;
    double result = sub_20DC4F8B0((uint64_t *)result, (a4 - 1) & -(uint64_t)(*(_DWORD *)(result + 32) - v8 + *(_DWORD *)(result + 40)));
    a3 = v26;
    *(void *)(v7 + 48) -= v9;
  }
  else
  {
    *(void *)(result + 48) = v8 - v9;
    if (!v9) {
      goto LABEL_7;
    }
  }
  uint64_t v10 = 0;
  do
    *(unsigned char *)(*(void *)(v7 + 48) + v10++) = 0;
  while (v9 != v10);
LABEL_7:
  uint64_t v11 = *a2;
  unsigned int v12 = *(unsigned __int16 *)((char *)a2 - v11);
  if (v12 < 0xB)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = *(unsigned __int16 *)((char *)a2 - v11 + 10);
    if (*(_WORD *)((char *)a2 - v11 + 10)) {
      LODWORD(v13) = *(unsigned __int16 *)((char *)a2 + v13);
    }
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v14 > v13 && (unsigned __int16 v15 = *(unsigned __int16 *)((char *)v14 + v13)) != 0)
  {
    uint64_t v16 = (char *)a3 + v15;
    if (!__n)
    {
LABEL_14:
      uint64_t v17 = -v11;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v16 = 0;
    if (!__n) {
      goto LABEL_14;
    }
  }
  uint64_t v18 = *(void *)(v7 + 48);
  if (v18 - *(void *)(v7 + 56) < __n)
  {
    sub_20DC4F8B0((uint64_t *)v7, __n);
    uint64_t v18 = *(void *)(v7 + 48);
  }
  *(void *)(v7 + 48) = v18 - __n;
  double result = (uint64_t)memcpy((void *)(v18 - __n), v16, __n);
  uint64_t v19 = *a2;
  uint64_t v17 = -v19;
  unsigned int v12 = *(unsigned __int16 *)((char *)a2 - v19);
LABEL_19:
  if (v12 >= 0xB && *(_WORD *)((char *)a2 + v17 + 10)) {
    uint64_t v20 = *(unsigned __int16 *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v17 + 10));
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void *)(v7 + 32);
  uint64_t v22 = *(void *)(v7 + 40);
  uint64_t v24 = *(void *)(v7 + 48);
  int v23 = *(unint64_t **)(v7 + 56);
  if ((unint64_t)(v24 - (void)v23) <= 7)
  {
    double result = sub_20DC4F8B0((uint64_t *)v7, 8uLL);
    int v23 = *(unint64_t **)(v7 + 56);
  }
  unint64_t *v23 = (v21 - v24 + v22) | (unint64_t)(v20 << 32);
  *(void *)(v7 + 56) += 8;
  ++*(_DWORD *)(v7 + 64);
  unsigned int v25 = *(unsigned __int16 *)(v7 + 68);
  if (v25 <= v20) {
    LOWORD(v25) = v20;
  }
  *(_WORD *)(v7 + 68) = v25;
  return result;
}

uint64_t flatbuffers::CopyTable(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  char v6 = a3;
  uint64_t v8 = 0;
  uint64_t v9 = *a3;
  unsigned int v10 = *(unsigned __int16 *)((char *)a3 - v9);
  if (v10 >= 7)
  {
    if (*(_WORD *)((char *)a3 - v9 + 6)) {
      uint64_t v8 = (int *)((char *)a3
    }
                 + *(unsigned __int16 *)((char *)a3 - v9 + 6)
                 + *(unsigned int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - v9 + 6)));
    else {
      uint64_t v8 = 0;
    }
  }
  uint64_t v11 = v8 + 1;
  if (!*v8)
  {
    std::string __p = 0;
    uint64_t v183 = -v9;
    goto LABEL_271;
  }
  std::string __p = 0;
  unsigned int v12 = 0;
  v253 = 0;
  uint64_t v13 = v8 + 1;
  while (2)
  {
    uint64_t v14 = (int *)((char *)v13 + *v13);
    unsigned __int16 v15 = (unsigned __int16 *)((char *)v14 - *v14);
    unsigned int v16 = *v15;
    if (v16 >= 0xB && v15[5]) {
      unsigned int v17 = *(unsigned __int16 *)((char *)v14 + v15[5]);
    }
    else {
      unsigned int v17 = 0;
    }
    uint64_t v18 = *a4;
    uint64_t v19 = (char *)a4 - v18;
    uint64_t v20 = *(unsigned __int16 *)((char *)a4 - v18);
    if (v20 <= v17 || !*(_WORD *)&v19[v17]) {
      goto LABEL_62;
    }
    if (v16 < 7)
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = (int *)v15[3];
      if (v15[3]) {
        uint64_t v21 = (int *)((char *)v21 + (void)v14 + *(unsigned int *)((char *)v21 + (void)v14));
      }
    }
    uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
    if (*v22 < 5u || (uint64_t v23 = v22[2]) == 0)
    {
LABEL_62:
      int v48 = v12;
      goto LABEL_63;
    }
    switch(*((unsigned char *)v21 + v23))
    {
      case 0xD:
        if (a5)
        {
          if (v16 >= 0xB)
          {
            uint64_t v24 = v15[5];
            if (v24)
            {
              uint64_t v25 = *(unsigned __int16 *)((char *)v14 + v24);
              if (v20 <= v25)
              {
                LODWORD(v20) = 0;
                goto LABEL_26;
              }
              LODWORD(v20) = *(unsigned __int16 *)&v19[v25];
            }
          }
          LODWORD(v18) = *(int *)((char *)a4 + v20);
LABEL_26:
          int v26 = sub_20DC68700((void *)a1, (char *)a4 + v20 + v18 + 4, *(unsigned int *)((char *)a4 + v20 + v18));
          goto LABEL_73;
        }
        if (v16 >= 0xB)
        {
          uint64_t v46 = v15[5];
          if (v46)
          {
            uint64_t v47 = *(unsigned __int16 *)((char *)v14 + v46);
            if (v20 <= v47) {
              goto LABEL_62;
            }
            LODWORD(v20) = *(unsigned __int16 *)&v19[v47];
            if (!*(_WORD *)&v19[v47]) {
              goto LABEL_62;
            }
          }
        }
        int v26 = sub_20DC4F638(a1, (char *)a4 + v20 + *(int *)((char *)a4 + v20) + 4, *(unsigned int *)((char *)a4 + v20 + *(int *)((char *)a4 + v20)));
LABEL_73:
        int v52 = v26;
        goto LABEL_113;
      case 0xE:
        if (v16 < 0xB)
        {
          uint64_t v30 = (unsigned int *)((char *)a4 + v20 + *(unsigned int *)((char *)a4 + v20));
          if (v16 <= 6)
          {
            std::string::size_type v49 = 0;
            goto LABEL_77;
          }
        }
        else if (v15[5] {
               && ((uint64_t v29 = *(unsigned __int16 *)((char *)v14 + v15[5]), v20 <= v29)
        }
                || (LODWORD(v20) = *(unsigned __int16 *)&v19[v29], !*(_WORD *)&v19[v29])))
        {
          uint64_t v30 = 0;
        }
        else
        {
          uint64_t v30 = (unsigned int *)((char *)a4 + v20 + *(int *)((char *)a4 + v20));
        }
        std::string::size_type v49 = (int *)v15[3];
        if (v15[3]) {
          std::string::size_type v49 = (int *)((char *)v49 + (void)v14 + *(unsigned int *)((char *)v49 + (void)v14));
        }
LABEL_77:
        uint64_t v53 = (unsigned __int16 *)((char *)v49 - *v49);
        if (*v53 < 7u || (uint64_t v54 = v53[3]) == 0)
        {
          int v55 = 0;
LABEL_85:
          unint64_t v58 = qword_20DC7CF38[v55 + 3];
LABEL_86:
          uint64_t v59 = *v30;
          *(unsigned char *)(a1 + 70) = 1;
          unint64_t v60 = *(void *)(a1 + 72);
          if (v60 <= 3)
          {
            *(void *)(a1 + 72) = 4;
            unint64_t v60 = 4;
          }
          unint64_t v61 = v58 * v59;
          uint64_t v62 = *(void *)(a1 + 48);
          unint64_t v63 = ((_BYTE)v62
               - (*(_DWORD *)(a1 + 32)
                + *(_DWORD *)(a1 + 40))
               - (_BYTE)v61) & 3;
          if (v62 - *(void *)(a1 + 56) < v63)
          {
            sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v62 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40)) - (_BYTE)v61) & 3);
            *(void *)(a1 + 48) -= v63;
            goto LABEL_90;
          }
          *(void *)(a1 + 48) = v62 - v63;
          if (v63)
          {
LABEL_90:
            uint64_t v64 = 0;
            do
              *(unsigned char *)(*(void *)(a1 + 48) + v64++) = 0;
            while (v63 != v64);
            unint64_t v60 = *(void *)(a1 + 72);
          }
          if (v60 < v58) {
            *(void *)(a1 + 72) = v58;
          }
          uint64_t v65 = *(void *)(a1 + 48);
          unint64_t v66 = (v58 - 1) & -(uint64_t)(v61 + (*(_DWORD *)(a1 + 32) - v65 + *(_DWORD *)(a1 + 40)));
          if (v65 - *(void *)(a1 + 56) < v66)
          {
            sub_20DC4F8B0((uint64_t *)a1, (v58 - 1) & -(uint64_t)(v61 + (*(_DWORD *)(a1 + 32) - v65 + *(_DWORD *)(a1 + 40))));
            *(void *)(a1 + 48) -= v66;
            goto LABEL_97;
          }
          *(void *)(a1 + 48) = v65 - v66;
          if (v66)
          {
LABEL_97:
            uint64_t v67 = 0;
            do
              *(unsigned char *)(*(void *)(a1 + 48) + v67++) = 0;
            while (v66 != v67);
          }
          uint64_t v68 = *v30;
          unint64_t v69 = v58 * v68;
          if (v69)
          {
            uint64_t v70 = *(void *)(a1 + 48);
            if (v70 - *(void *)(a1 + 56) < v69)
            {
              sub_20DC4F8B0((uint64_t *)a1, v69);
              uint64_t v70 = *(void *)(a1 + 48);
            }
            *(void *)(a1 + 48) = v70 - v69;
            memcpy((void *)(v70 - v69), v30 + 1, v69);
            LODWORD(v68) = *v30;
          }
          *(unsigned char *)(a1 + 70) = 0;
          if (*(void *)(a1 + 72) <= 3uLL) {
            *(void *)(a1 + 72) = 4;
          }
          uint64_t v71 = *(void *)(a1 + 48);
          uint64_t v72 = *(void *)(a1 + 56);
          unint64_t v73 = ((_BYTE)v71 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
          if (v71 - v72 >= v73)
          {
            uint64_t v74 = v71 - v73;
            *(void *)(a1 + 48) = v74;
            if (v73)
            {
LABEL_107:
              uint64_t v75 = 0;
              do
                *(unsigned char *)(*(void *)(a1 + 48) + v75++) = 0;
              while (v73 != v75);
              uint64_t v74 = *(void *)(a1 + 48);
              uint64_t v72 = *(void *)(a1 + 56);
            }
            if ((unint64_t)(v74 - v72) <= 3)
            {
              sub_20DC4F8B0((uint64_t *)a1, 4uLL);
              uint64_t v74 = *(void *)(a1 + 48);
            }
            *(_DWORD *)(v74 - 4) = v68;
            uint64_t v76 = v74 - 4;
            *(void *)(a1 + 48) = v76;
            int v52 = *(_DWORD *)(a1 + 32) - v76 + *(_DWORD *)(a1 + 40);
            goto LABEL_113;
          }
          sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v71 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
          *(void *)(a1 + 48) -= v73;
          goto LABEL_107;
        }
        int v55 = *((char *)v49 + v54);
        std::string v240 = v30;
        if (v55 == 13)
        {
          uint64_t v83 = *v30;
          if (v83)
          {
            int64_t v84 = (char *)operator new(4 * v83);
            bzero(v84, 4 * v83);
            uint64_t v85 = v84;
            uint64_t v86 = &v84[4 * v83];
            if (*v30)
            {
              std::string v232 = &v84[4 * v83];
              unint64_t v87 = 0;
              uint64_t v88 = v30 + 1;
              uint64_t v89 = v30 + 2;
              do
              {
                uint64_t v90 = v85;
                uint64_t v91 = *(v89 - 1);
                uint64_t v92 = (char *)v89 + v91;
                size_t v93 = *(unsigned int *)((char *)&v88[v87] + v91);
                if (a5) {
                  int v94 = sub_20DC68700((void *)a1, v92, v93);
                }
                else {
                  int v94 = sub_20DC4F638(a1, v92, v93);
                }
                *(_DWORD *)&v90[4 * v87] = v94;
                uint64_t v85 = v90;
                ++v87;
                ++v89;
              }
              while (v87 < *v240);
              uint64_t v86 = v232;
            }
          }
          else
          {
            uint64_t v85 = 0;
            uint64_t v86 = 0;
          }
          uint64_t v112 = v86 - v85;
          if (v86 == v85) {
            uint64_t v113 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::String const*>,std::allocator<flatbuffers::Offset<flatbuffers::String const*>>>(std::vector<flatbuffers::Offset<flatbuffers::String const*>> const&)::t;
          }
          else {
            uint64_t v113 = v85;
          }
          *(unsigned char *)(a1 + 70) = 1;
          if (*(void *)(a1 + 72) <= 3uLL) {
            *(void *)(a1 + 72) = 4;
          }
          uint64_t v114 = *(void *)(a1 + 48);
          unint64_t v115 = ((_BYTE)v114 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
          if (v114 - *(void *)(a1 + 56) < v115)
          {
            v247 = v85;
            int v164 = v86;
            uint64_t v165 = v86 - v85;
            int v166 = v113;
            sub_20DC4F8B0((uint64_t *)a1, v115);
            uint64_t v86 = v164;
            uint64_t v113 = v166;
            uint64_t v112 = v165;
            uint64_t v85 = v247;
            *(void *)(a1 + 48) -= v115;
          }
          else
          {
            *(void *)(a1 + 48) = v114 - v115;
            if (!v115) {
              goto LABEL_173;
            }
          }
          uint64_t v167 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 48) + v167++) = 0;
          while (v115 != v167);
          if (*(void *)(a1 + 72) <= 3uLL) {
            *(void *)(a1 + 72) = 4;
          }
LABEL_173:
          uint64_t v116 = *(void *)(a1 + 48);
          unint64_t v117 = ((_BYTE)v116 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
          if (v116 - *(void *)(a1 + 56) < v117)
          {
            v248 = v85;
            uint64_t v168 = v86;
            uint64_t v169 = v112;
            int v170 = v113;
            sub_20DC4F8B0((uint64_t *)a1, v117);
            uint64_t v86 = v168;
            uint64_t v113 = v170;
            uint64_t v112 = v169;
            uint64_t v85 = v248;
            *(void *)(a1 + 48) -= v117;
          }
          else
          {
            *(void *)(a1 + 48) = v116 - v117;
            if (!v117)
            {
LABEL_177:
              if (v85 == v86)
              {
LABEL_199:
                *(unsigned char *)(a1 + 70) = 0;
                if (*(void *)(a1 + 72) <= 3uLL) {
                  *(void *)(a1 + 72) = 4;
                }
                uint64_t v134 = *(void *)(a1 + 48);
                uint64_t v135 = *(void *)(a1 + 56);
                unint64_t v136 = ((_BYTE)v134 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
                if (v134 - v135 >= v136)
                {
                  uint64_t v137 = v134 - v136;
                  *(void *)(a1 + 48) = v137;
                  if (v136) {
                    goto LABEL_203;
                  }
                  goto LABEL_247;
                }
                unsigned int v178 = v85;
                uint64_t v179 = v112;
                sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v134 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
                uint64_t v112 = v179;
                uint64_t v85 = v178;
                *(void *)(a1 + 48) -= v136;
LABEL_203:
                uint64_t v138 = 0;
                do
                  *(unsigned char *)(*(void *)(a1 + 48) + v138++) = 0;
                while (v136 != v138);
LABEL_246:
                uint64_t v137 = *(void *)(a1 + 48);
                uint64_t v135 = *(void *)(a1 + 56);
                goto LABEL_247;
              }
              uint64_t v119 = v112 >> 2;
              while (1)
              {
                if (*(void *)(a1 + 72) <= 3uLL) {
                  *(void *)(a1 + 72) = 4;
                }
                --v119;
                int v120 = *(_DWORD *)&v113[4 * v119];
                uint64_t v121 = *(void *)(a1 + 32);
                uint64_t v122 = *(void *)(a1 + 40);
                uint64_t v123 = *(void *)(a1 + 48);
                unint64_t v124 = ((int)v123 - ((int)v121 + (int)v122)) & 3;
                if (v123 - *(void *)(a1 + 56) < v124)
                {
                  long long v234 = v113;
                  __int16 v241 = v85;
                  uint64_t v127 = v112;
                  sub_20DC4F8B0((uint64_t *)a1, ((int)v123 - ((int)v121 + (int)v122)) & 3);
                  uint64_t v113 = v234;
                  uint64_t v85 = v241;
                  uint64_t v112 = v127;
                  *(void *)(a1 + 48) -= v124;
                }
                else
                {
                  uint64_t v125 = v123 - v124;
                  *(void *)(a1 + 48) = v125;
                  if (!v124)
                  {
                    int v126 = v121 + v122 - v125;
                    goto LABEL_189;
                  }
                }
                uint64_t v128 = 0;
                do
                  *(unsigned char *)(*(void *)(a1 + 48) + v128++) = 0;
                while (v124 != v128);
                uint64_t v122 = *(void *)(a1 + 40);
                uint64_t v125 = *(void *)(a1 + 48);
                uint64_t v121 = *(void *)(a1 + 32);
                int v126 = v121 - v125 + v122;
                if (*(void *)(a1 + 72) <= 3uLL) {
                  *(void *)(a1 + 72) = 4;
                }
LABEL_189:
                unint64_t v129 = ((_BYTE)v125 - ((_BYTE)v121 + (_BYTE)v122)) & 3;
                uint64_t v130 = *(void *)(a1 + 56);
                if (v125 - v130 < v129)
                {
                  v236 = v113;
                  v243 = v85;
                  uint64_t v230 = v112;
                  sub_20DC4F8B0((uint64_t *)a1, v129);
                  uint64_t v112 = v230;
                  uint64_t v113 = v236;
                  uint64_t v85 = v243;
                  *(void *)(a1 + 48) -= v129;
LABEL_191:
                  uint64_t v132 = 0;
                  do
                    *(unsigned char *)(*(void *)(a1 + 48) + v132++) = 0;
                  while (v129 != v132);
                  uint64_t v131 = *(void *)(a1 + 48);
                  uint64_t v130 = *(void *)(a1 + 56);
                  goto LABEL_194;
                }
                uint64_t v131 = v125 - v129;
                *(void *)(a1 + 48) = v125 - v129;
                if (v129) {
                  goto LABEL_191;
                }
LABEL_194:
                if ((unint64_t)(v131 - v130) <= 3)
                {
                  v235 = v113;
                  v242 = v85;
                  uint64_t v133 = v112;
                  sub_20DC4F8B0((uint64_t *)a1, 4uLL);
                  uint64_t v113 = v235;
                  uint64_t v85 = v242;
                  uint64_t v112 = v133;
                  uint64_t v131 = *(void *)(a1 + 48);
                }
                *(_DWORD *)(v131 - 4) = v126 - v120 + 4;
                *(void *)(a1 + 48) = v131 - 4;
                if (!v119) {
                  goto LABEL_199;
                }
              }
            }
          }
          uint64_t v118 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 48) + v118++) = 0;
          while (v117 != v118);
          goto LABEL_177;
        }
        if (v55 != 15) {
          goto LABEL_85;
        }
        uint64_t v56 = (unsigned __int16 *)((char *)a2 - *a2);
        if (*v56 < 5u)
        {
          uint64_t v57 = 0;
        }
        else
        {
          uint64_t v57 = v56[2];
          if (v57) {
            v57 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v57);
          }
        }
        if (v16 < 7)
        {
          uint64_t v95 = 0;
        }
        else
        {
          uint64_t v95 = (int *)v15[3];
          if (v95) {
            uint64_t v95 = (int *)((char *)v95 + (void)v14 + *(unsigned int *)((char *)v95 + (void)v14));
          }
        }
        uint64_t v96 = (unsigned __int16 *)((char *)v95 - *v95);
        if (*v96 >= 9u && (uint64_t v97 = v96[4]) != 0) {
          uint64_t v98 = *(unsigned int *)((char *)v95 + v97);
        }
        else {
          uint64_t v98 = 0xFFFFFFFFLL;
        }
        uint64_t v99 = (int *)(v57 + 4 * v98 + 4 + *(unsigned int *)(v57 + 4 * v98 + 4));
        uint64_t v100 = (unsigned __int16 *)((char *)v99 - *v99);
        unsigned int v101 = *v100;
        if (v101 > 8 && v100[4] && *((unsigned char *)v99 + v100[4]))
        {
          if (v101 < 0xD)
          {
            LODWORD(v102) = 0;
          }
          else
          {
            uint64_t v102 = v100[6];
            if (v102) {
              LODWORD(v102) = *(int *)((char *)v99 + v102);
            }
          }
          unint64_t v58 = (int)v102;
          goto LABEL_86;
        }
        uint64_t v103 = *v30;
        if (v103)
        {
          uint64_t v104 = (char *)operator new(4 * v103);
          bzero(v104, 4 * v103);
          uint64_t v85 = v104;
          uint64_t v105 = &v104[4 * v103];
          if (*v240)
          {
            v233 = v105;
            unint64_t v106 = 0;
            BOOL v107 = v240 + 1;
            uint64_t v108 = v240 + 1;
            uint64_t v109 = v99;
            do
            {
              unsigned int v110 = *v108++;
              uint64_t v111 = v85;
              *(_DWORD *)&v85[4 * v106] = flatbuffers::CopyTable(a1, a2, v109, (char *)v107 + v110, 0);
              uint64_t v85 = v111;
              ++v106;
              BOOL v107 = v108;
            }
            while (v106 < *v240);
            uint64_t v105 = v233;
          }
        }
        else
        {
          uint64_t v85 = 0;
          uint64_t v105 = 0;
        }
        uint64_t v112 = v105 - v85;
        if (v105 == v85) {
          unint64_t v139 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::Table const*>,std::allocator<flatbuffers::Offset<flatbuffers::Table const*>>>(std::vector<flatbuffers::Offset<flatbuffers::Table const*>> const&)::t;
        }
        else {
          unint64_t v139 = v85;
        }
        *(unsigned char *)(a1 + 70) = 1;
        if (*(void *)(a1 + 72) <= 3uLL) {
          *(void *)(a1 + 72) = 4;
        }
        uint64_t v140 = *(void *)(a1 + 48);
        unint64_t v141 = ((_BYTE)v140 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
        if (v140 - *(void *)(a1 + 56) < v141)
        {
          v249 = v85;
          uint64_t v171 = v105 - v85;
          unint64_t v172 = v139;
          sub_20DC4F8B0((uint64_t *)a1, v141);
          unint64_t v139 = v172;
          uint64_t v112 = v171;
          uint64_t v85 = v249;
          *(void *)(a1 + 48) -= v141;
        }
        else
        {
          *(void *)(a1 + 48) = v140 - v141;
          if (!v141) {
            goto LABEL_214;
          }
        }
        uint64_t v173 = 0;
        do
          *(unsigned char *)(*(void *)(a1 + 48) + v173++) = 0;
        while (v141 != v173);
        if (*(void *)(a1 + 72) <= 3uLL) {
          *(void *)(a1 + 72) = 4;
        }
LABEL_214:
        uint64_t v142 = *(void *)(a1 + 48);
        unint64_t v143 = ((_BYTE)v142 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
        if (v142 - *(void *)(a1 + 56) < v143)
        {
          v250 = v85;
          uint64_t v174 = v112;
          uint64_t v175 = v139;
          sub_20DC4F8B0((uint64_t *)a1, v143);
          unint64_t v139 = v175;
          uint64_t v112 = v174;
          uint64_t v85 = v250;
          *(void *)(a1 + 48) -= v143;
        }
        else
        {
          *(void *)(a1 + 48) = v142 - v143;
          if (!v143) {
            goto LABEL_218;
          }
        }
        uint64_t v144 = 0;
        do
          *(unsigned char *)(*(void *)(a1 + 48) + v144++) = 0;
        while (v143 != v144);
LABEL_218:
        if (v85 != v105)
        {
          uint64_t v145 = v112 >> 2;
          do
          {
            if (*(void *)(a1 + 72) <= 3uLL) {
              *(void *)(a1 + 72) = 4;
            }
            --v145;
            int v146 = *(_DWORD *)&v139[4 * v145];
            uint64_t v147 = *(void *)(a1 + 32);
            uint64_t v148 = *(void *)(a1 + 40);
            uint64_t v149 = *(void *)(a1 + 48);
            unint64_t v150 = ((int)v149 - ((int)v147 + (int)v148)) & 3;
            if (v149 - *(void *)(a1 + 56) < v150)
            {
              v237 = v139;
              v244 = v85;
              uint64_t v153 = v112;
              sub_20DC4F8B0((uint64_t *)a1, ((int)v149 - ((int)v147 + (int)v148)) & 3);
              unint64_t v139 = v237;
              uint64_t v85 = v244;
              uint64_t v112 = v153;
              *(void *)(a1 + 48) -= v150;
            }
            else
            {
              uint64_t v151 = v149 - v150;
              *(void *)(a1 + 48) = v151;
              if (!v150)
              {
                int v152 = v147 + v148 - v151;
                goto LABEL_230;
              }
            }
            uint64_t v154 = 0;
            do
              *(unsigned char *)(*(void *)(a1 + 48) + v154++) = 0;
            while (v150 != v154);
            uint64_t v148 = *(void *)(a1 + 40);
            uint64_t v151 = *(void *)(a1 + 48);
            uint64_t v147 = *(void *)(a1 + 32);
            int v152 = v147 - v151 + v148;
            if (*(void *)(a1 + 72) <= 3uLL) {
              *(void *)(a1 + 72) = 4;
            }
LABEL_230:
            unint64_t v155 = ((_BYTE)v151 - ((_BYTE)v147 + (_BYTE)v148)) & 3;
            uint64_t v156 = *(void *)(a1 + 56);
            if (v151 - v156 < v155)
            {
              v239 = v139;
              v246 = v85;
              uint64_t v231 = v112;
              sub_20DC4F8B0((uint64_t *)a1, v155);
              uint64_t v112 = v231;
              unint64_t v139 = v239;
              uint64_t v85 = v246;
              *(void *)(a1 + 48) -= v155;
LABEL_232:
              uint64_t v158 = 0;
              do
                *(unsigned char *)(*(void *)(a1 + 48) + v158++) = 0;
              while (v155 != v158);
              uint64_t v157 = *(void *)(a1 + 48);
              uint64_t v156 = *(void *)(a1 + 56);
              goto LABEL_235;
            }
            uint64_t v157 = v151 - v155;
            *(void *)(a1 + 48) = v151 - v155;
            if (v155) {
              goto LABEL_232;
            }
LABEL_235:
            if ((unint64_t)(v157 - v156) <= 3)
            {
              v238 = v139;
              v245 = v85;
              uint64_t v159 = v112;
              sub_20DC4F8B0((uint64_t *)a1, 4uLL);
              unint64_t v139 = v238;
              uint64_t v85 = v245;
              uint64_t v112 = v159;
              uint64_t v157 = *(void *)(a1 + 48);
            }
            *(_DWORD *)(v157 - 4) = v152 - v146 + 4;
            *(void *)(a1 + 48) = v157 - 4;
          }
          while (v145);
        }
        *(unsigned char *)(a1 + 70) = 0;
        if (*(void *)(a1 + 72) <= 3uLL) {
          *(void *)(a1 + 72) = 4;
        }
        uint64_t v160 = *(void *)(a1 + 48);
        uint64_t v135 = *(void *)(a1 + 56);
        unint64_t v161 = ((_BYTE)v160 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
        if (v160 - v135 < v161)
        {
          uint64_t v180 = v85;
          uint64_t v181 = v112;
          sub_20DC4F8B0((uint64_t *)a1, ((_BYTE)v160 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
          uint64_t v112 = v181;
          uint64_t v85 = v180;
          *(void *)(a1 + 48) -= v161;
LABEL_244:
          uint64_t v162 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 48) + v162++) = 0;
          while (v161 != v162);
          goto LABEL_246;
        }
        uint64_t v137 = v160 - v161;
        *(void *)(a1 + 48) = v137;
        if (v161) {
          goto LABEL_244;
        }
LABEL_247:
        if ((unint64_t)(v137 - v135) <= 3)
        {
          uint64_t v176 = v85;
          uint64_t v177 = v112;
          sub_20DC4F8B0((uint64_t *)a1, 4uLL);
          uint64_t v112 = v177;
          uint64_t v85 = v176;
          uint64_t v137 = *(void *)(a1 + 48);
        }
        *(_DWORD *)(v137 - 4) = (unint64_t)v112 >> 2;
        uint64_t v163 = v137 - 4;
        *(void *)(a1 + 48) = v163;
        int v52 = *(_DWORD *)(a1 + 32) - v163 + *(_DWORD *)(a1 + 40);
        if (v85) {
          operator delete(v85);
        }
LABEL_113:
        if (!v52) {
          goto LABEL_116;
        }
        if (v12 < v253)
        {
          *(_DWORD *)unsigned int v12 = v52;
          v12 += 4;
LABEL_116:
          int v48 = v12;
          char v6 = a3;
          goto LABEL_63;
        }
        uint64_t v77 = (v12 - __p) >> 2;
        unint64_t v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 62) {
          abort();
        }
        if ((v253 - __p) >> 1 > v78) {
          unint64_t v78 = (v253 - __p) >> 1;
        }
        if ((unint64_t)(v253 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v79 = v78;
        }
        if (v79)
        {
          if (v79 >> 62) {
            sub_20DC4F504();
          }
          uint64_t v80 = (char *)operator new(4 * v79);
        }
        else
        {
          uint64_t v80 = 0;
        }
        uint64_t v81 = &v80[4 * v77];
        *(_DWORD *)uint64_t v81 = v52;
        int v48 = v81 + 4;
        if (v12 == __p)
        {
          char v6 = a3;
        }
        else
        {
          char v6 = a3;
          do
          {
            int v82 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v81 - 1) = v82;
            v81 -= 4;
          }
          while (v12 != __p);
        }
        v253 = &v80[4 * v79];
        if (__p) {
          operator delete(__p);
        }
        std::string __p = v81;
LABEL_63:
        ++v13;
        unsigned int v12 = v48;
        if (v13 != &v11[*v8]) {
          continue;
        }
        uint64_t v182 = *v6;
        uint64_t v183 = -v182;
        unsigned int v10 = *(unsigned __int16 *)((char *)v6 - v182);
LABEL_271:
        if (v10 < 9
          || (uint64_t v184 = (char *)v6 + v183, !*((_WORD *)v184 + 4))
          || !*((unsigned char *)v6 + *((unsigned __int16 *)v184 + 4)))
        {
          *(unsigned char *)(a1 + 70) = 1;
          uint64_t v186 = *(void *)(a1 + 32) - *(void *)(a1 + 48) + *(void *)(a1 + 40);
          goto LABEL_279;
        }
        if (v10 >= 0xB && *((_WORD *)v184 + 5))
        {
          unint64_t v185 = *(int *)((char *)v6 + *((unsigned __int16 *)v184 + 5));
          if (*(void *)(a1 + 72) < v185) {
            *(void *)(a1 + 72) = v185;
          }
        }
        else
        {
          unint64_t v185 = 0;
        }
        uint64_t v224 = *(void *)(a1 + 32);
        uint64_t v225 = *(void *)(a1 + 40);
        uint64_t v226 = *(void *)(a1 + 48);
        unint64_t v227 = (v185 - 1) & -(uint64_t)(v224 - v226 + v225);
        if (v226 - *(void *)(a1 + 56) < v227)
        {
          sub_20DC4F8B0((uint64_t *)a1, v227);
          *(void *)(a1 + 48) -= v227;
LABEL_344:
          uint64_t v229 = 0;
          do
            *(unsigned char *)(*(void *)(a1 + 48) + v229++) = 0;
          while (v227 != v229);
          uint64_t v225 = *(void *)(a1 + 40);
          uint64_t v228 = *(void *)(a1 + 48);
          uint64_t v224 = *(void *)(a1 + 32);
          goto LABEL_347;
        }
        LOWORD(v228) = v226 - v227;
        *(void *)(a1 + 48) = v226 - v227;
        if (v227) {
          goto LABEL_344;
        }
LABEL_347:
        LOWORD(v186) = v225 - v228 + v224;
LABEL_279:
        if (*v8)
        {
          uint64_t v187 = 0;
          uint64_t v188 = 0;
          do
          {
            uint64_t v189 = v8[v187 + 1];
            uint64_t v190 = (char *)&v8[v187] + v189;
            uint64_t v191 = v189 - *((int *)v190 + 1);
            uint64_t v192 = (char *)&v8[v187] + v191;
            unsigned int v193 = *((unsigned __int16 *)v192 + 2);
            if (v193 < 0xB)
            {
              LODWORD(v194) = 0;
            }
            else
            {
              uint64_t v194 = *((unsigned __int16 *)v192 + 7);
              if (v194) {
                LODWORD(v194) = *(unsigned __int16 *)((char *)&v8[v187 + 1] + v189 + v194);
              }
            }
            uint64_t v195 = (unsigned __int16 *)((char *)a4 - *a4);
            if (*v195 <= v194 || !*(unsigned __int16 *)((char *)v195 + v194)) {
              goto LABEL_306;
            }
            if (v193 >= 7 && *(_WORD *)((char *)&v8[v187 + 2] + v191 + 2))
            {
              uint64_t v196 = v189 + *(unsigned __int16 *)((char *)&v8[v187 + 2] + v191 + 2);
              unint64_t v197 = (_DWORD *)((char *)&v8[v187 + 1] + v196 + *(unsigned int *)((char *)&v8[v187 + 1] + v196));
            }
            else
            {
              unint64_t v197 = 0;
            }
            uint64_t v198 = (int *)(v190 + 4);
            uint64_t v199 = (unsigned __int16 *)((char *)v197 - *v197);
            if (*v199 < 5u)
            {
              LODWORD(v200) = 0;
            }
            else
            {
              uint64_t v200 = v199[2];
              if (v200)
              {
                LODWORD(v200) = *((char *)v197 + v200);
                if ((v200 - 13) < 2 || v200 == 16) {
                  goto LABEL_298;
                }
                if (v200 == 15)
                {
                  unsigned int v208 = (unsigned __int16 *)((char *)a2 - *a2);
                  if (*v208 < 5u)
                  {
                    uint64_t v209 = 0;
                  }
                  else
                  {
                    uint64_t v209 = v208[2];
                    if (v209) {
                      v209 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v209);
                    }
                  }
                  if (v193 >= 7 && *(_WORD *)((char *)&v8[v187 + 2] + v191 + 2))
                  {
                    uint64_t v210 = v189 + *(unsigned __int16 *)((char *)&v8[v187 + 2] + v191 + 2);
                    uint64_t v211 = (_DWORD *)((char *)&v8[v187 + 1] + v210 + *(unsigned int *)((char *)&v8[v187 + 1] + v210));
                  }
                  else
                  {
                    uint64_t v211 = 0;
                  }
                  uint64_t v212 = (unsigned __int16 *)((char *)v211 - *v211);
                  if (*v212 >= 9u && (uint64_t v213 = v212[4]) != 0) {
                    uint64_t v214 = *(unsigned int *)((char *)v211 + v213);
                  }
                  else {
                    uint64_t v214 = 0xFFFFFFFFLL;
                  }
                  int v215 = (int *)(v209 + 4 * v214 + 4 + *(unsigned int *)(v209 + 4 * v214 + 4));
                  int v216 = (unsigned __int16 *)((char *)v215 - *v215);
                  unsigned int v217 = *v216;
                  if (v217 < 9 || !v216[4] || !*((unsigned char *)v215 + v216[4]))
                  {
LABEL_298:
                    if (v193 >= 0xB && (uint64_t v202 = *(unsigned __int16 *)((char *)&v8[v187 + 3] + v191 + 2)) != 0) {
                      uint64_t v203 = *(unsigned __int16 *)((char *)&v8[v187 + 1] + v189 + v202);
                    }
                    else {
                      uint64_t v203 = 0;
                    }
                    sub_20DC43774((uint64_t *)a1, v203, *(_DWORD *)&__p[4 * v188++]);
                    goto LABEL_306;
                  }
                  if (v217 < 0xB)
                  {
                    unint64_t v204 = 0;
                  }
                  else
                  {
                    uint64_t v218 = v216[5];
                    if (v216[5]) {
                      LODWORD(v218) = *(int *)((char *)v215 + v218);
                    }
                    unint64_t v204 = (int)v218;
                    if (v217 >= 0xD)
                    {
                      uint64_t v219 = v216[6];
                      if (v216[6]) {
                        LODWORD(v219) = *(int *)((char *)v215 + v219);
                      }
                      goto LABEL_332;
                    }
                  }
                  LODWORD(v219) = 0;
LABEL_332:
                  size_t v207 = (int)v219;
                  uint64_t v205 = a1;
                  uint64_t v206 = a4;
                  goto LABEL_303;
                }
              }
            }
            unint64_t v204 = qword_20DC7CF38[(int)v200 + 3];
            uint64_t v205 = a1;
            uint64_t v206 = a4;
            size_t v207 = v204;
LABEL_303:
            flatbuffers::CopyInline(v205, v198, v206, v204, v207);
LABEL_306:
            ++v187;
          }
          while (&v8[v187 + 1] != &v11[*v8]);
        }
        uint64_t v220 = (unsigned __int16 *)((char *)v6 - *v6);
        if (*v220 >= 9u && (uint64_t v221 = v220[4]) != 0 && *((unsigned char *)v6 + v221))
        {
          *(void *)(a1 + 56) -= 8 * *(unsigned int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = 0;
          *(_WORD *)(a1 + 68) = 0;
          uint64_t v222 = (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
        }
        else
        {
          uint64_t v222 = sub_20DC43968(a1, v186);
        }
        if (__p) {
          operator delete(__p);
        }
        return v222;
      case 0xF:
        unsigned int v27 = (unsigned __int16 *)((char *)a2 - *a2);
        if (*v27 < 5u)
        {
          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v28 = v27[2];
          if (v28) {
            v28 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v28);
          }
        }
        if (v16 < 7)
        {
          uint64_t v37 = 0;
        }
        else
        {
          uint64_t v37 = (int *)v15[3];
          if (v15[3]) {
            uint64_t v37 = (int *)((char *)v37 + (void)v14 + *(unsigned int *)((char *)v37 + (void)v14));
          }
        }
        uint64_t v38 = (unsigned __int16 *)((char *)v37 - *v37);
        if (*v38 >= 9u && (uint64_t v39 = v38[4]) != 0) {
          uint64_t v40 = *(unsigned int *)((char *)v37 + v39);
        }
        else {
          uint64_t v40 = 0xFFFFFFFFLL;
        }
        uint64_t v31 = (char *)(v28 + 4 * v40 + 4 + *(unsigned int *)(v28 + 4 * v40 + 4));
        unsigned int v41 = &v31[-*(int *)v31];
        if (*(unsigned __int16 *)v41 >= 9u)
        {
          uint64_t v42 = *((unsigned __int16 *)v41 + 4);
          if (v42)
          {
            if (v31[v42]) {
              goto LABEL_62;
            }
          }
        }
        if (v16 < 0xB)
        {
          uint64_t v44 = a2;
          goto LABEL_70;
        }
        uint64_t v43 = v15[5];
        uint64_t v44 = a2;
        if (!v43) {
          goto LABEL_70;
        }
        uint64_t v45 = *(unsigned __int16 *)((char *)v14 + v43);
        if (v20 > v45)
        {
          LODWORD(v20) = *(unsigned __int16 *)&v19[v45];
LABEL_70:
          LODWORD(v18) = *(int *)((char *)a4 + v20);
          goto LABEL_71;
        }
        LODWORD(v20) = 0;
LABEL_71:
        uint64_t v50 = (char *)a4 + v20 + v18;
        uint64_t v51 = a1;
LABEL_72:
        int v26 = flatbuffers::CopyTable(v51, v44, v31, v50, 0);
        goto LABEL_73;
      case 0x10:
        uint64_t v31 = sub_20DC661EC(a2, v6, (int *)((char *)v13 + *v13), a4);
        uint64_t v32 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v32 >= 0xBu && (uint64_t v33 = v32[5]) != 0) {
          unsigned int v34 = *(unsigned __int16 *)((char *)v14 + v33);
        }
        else {
          unsigned int v34 = 0;
        }
        uint64_t v35 = *a4;
        if (*(unsigned __int16 *)((char *)a4 - v35) <= v34)
        {
          unsigned int v36 = 0;
        }
        else
        {
          unsigned int v36 = *(unsigned __int16 *)((char *)a4 + v34 - v35);
          LODWORD(v35) = *(int *)((char *)a4 + v36);
        }
        uint64_t v50 = (char *)a4 + v36 + v35;
        uint64_t v51 = a1;
        uint64_t v44 = a2;
        goto LABEL_72;
      default:
        goto LABEL_62;
    }
  }
}

char *sub_20DC661EC(int *a1, int *a2, int *a3, int *a4)
{
  int v5 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v5 >= 7u && (uint64_t v6 = v5[3]) != 0) {
    uint64_t v7 = (char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *a3;
  uint64_t v9 = (char *)a3 - v8;
  unsigned int v10 = *(unsigned __int16 *)((char *)a3 - v8);
  if (v10 < 7)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = (int *)*((unsigned __int16 *)v9 + 3);
    if (*((_WORD *)v9 + 3)) {
      uint64_t v11 = (int *)((char *)v11 + (void)a3 + *(unsigned int *)((char *)v11 + (void)a3));
    }
  }
  unsigned int v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 9u && (uint64_t v13 = v12[4]) != 0) {
    uint64_t v14 = 4 * *(unsigned int *)((char *)v11 + v13);
  }
  else {
    uint64_t v14 = 0x3FFFFFFFCLL;
  }
  unsigned __int16 v15 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v15 >= 7u && (uint64_t v16 = v15[3]) != 0) {
    unsigned int v17 = (unsigned int *)((char *)a2 + v16 + *(unsigned int *)((char *)a2 + v16));
  }
  else {
    unsigned int v17 = 0;
  }
  uint64_t v18 = &v7[v14];
  if (v10 < 5)
  {
    int v19 = 0;
  }
  else
  {
    int v19 = *((unsigned __int16 *)v9 + 2);
    LODWORD(v8) = *(int *)((char *)a3 + *((unsigned __int16 *)v9 + 2));
  }
  unsigned int v22 = *((_DWORD *)v18 + 1);
  uint64_t v20 = v18 + 4;
  uint64_t v21 = v22;
  uint64_t v23 = (unsigned int *)((char *)a3 + v19 + v8);
  unsigned int v26 = *v23;
  uint64_t v25 = v23 + 1;
  std::string::size_type v24 = v26;
  if (v26 >= 0x17)
  {
    if ((v24 | 7) == 0x17) {
      uint64_t v28 = (v24 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v28 = v24 | 7;
    }
    p_dst = (std::string *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v24;
    __dst.__r_.__value_.__r.__words[2] = v28 - 0x7FFFFFFFFFFFFFFFLL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v24;
  p_dst = &__dst;
  if (v24) {
LABEL_27:
  }
    memcpy(p_dst, v25, v24);
  p_dst->__r_.__value_.__s.__data_[v24] = 0;
  uint64_t v29 = std::string::append(&__dst, "_type");
  std::string::size_type v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  uint64_t v50 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  uint64_t v31 = __p;
  if (v50 < 0) {
    uint64_t v31 = (void **)__p[0];
  }
  __key = v31;
  uint64_t v32 = (unsigned int *)bsearch(&__key, v17 + 1, *v17, 4uLL, (int (__cdecl *)(const void *, const void *))sub_20DC6898C);
  if (v32) {
    uint64_t v33 = (int *)((char *)v32 + *v32);
  }
  else {
    uint64_t v33 = 0;
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  unsigned int v34 = &v20[v21];
  uint64_t v35 = (unsigned __int16 *)((char *)v33 - *v33);
  unsigned int v36 = *v35;
  if (v36 < 0xB)
  {
    LODWORD(v37) = 0;
LABEL_44:
    LOBYTE(v38) = 0;
    goto LABEL_45;
  }
  uint64_t v37 = v35[5];
  if (v35[5]) {
    LODWORD(v37) = *(unsigned __int16 *)((char *)v33 + v37);
  }
  if (v36 < 0xD) {
    goto LABEL_44;
  }
  uint64_t v38 = v35[6];
  if (v38) {
    LOBYTE(v38) = *((unsigned char *)v33 + v38);
  }
LABEL_45:
  uint64_t v39 = (unsigned __int16 *)((char *)a4 - *a4);
  if (*v39 > v37)
  {
    uint64_t v40 = *(unsigned __int16 *)((char *)v39 + v37);
    if (v40) {
      LOBYTE(v38) = *((unsigned char *)a4 + v40);
    }
  }
  uint64_t v41 = *(int *)v34;
  if (*(unsigned __int16 *)&v34[-v41] < 7u)
  {
    int v42 = 0;
  }
  else
  {
    int v42 = *(unsigned __int16 *)&v34[-v41 + 6];
    LODWORD(v41) = *(_DWORD *)&v34[*(unsigned __int16 *)&v34[-v41 + 6]];
  }
  LOBYTE(__p[0]) = v38;
  uint64_t v43 = (unsigned int *)bsearch(__p, &v34[v42 + 4 + v41], *(unsigned int *)&v34[v42 + v41], 4uLL, (int (__cdecl *)(const void *, const void *))sub_20DC689E8);
  if (v43) {
    uint64_t v44 = (int *)((char *)v43 + *v43);
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = (unsigned __int16 *)((char *)v44 - *v44);
  if (*v45 >= 9u && (uint64_t v46 = v45[4]) != 0) {
    return (char *)v44 + v46 + *(unsigned int *)((char *)v44 + v46);
  }
  else {
    return 0;
  }
}

uint64_t flatbuffers::VerifyStruct(void *a1, int *a2, unsigned int a3, int *a4, int a5)
{
  int v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 <= a3) {
    return a5 ^ 1u;
  }
  uint64_t v6 = *(unsigned __int16 *)((char *)v5 + a3);
  if (v6) {
    int v7 = 0;
  }
  else {
    int v7 = a5;
  }
  if (!v6) {
    return v7 ^ 1u;
  }
  uint64_t v8 = (unsigned __int16 *)((char *)a4 - *a4);
  if (*v8 < 0xDu)
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = v8[6];
    if (v9) {
      unint64_t v9 = *(int *)((char *)a4 + v9);
    }
  }
  unint64_t v11 = a1[1];
  unsigned int v12 = (char *)a2 + v6 - *a1;
  BOOL v14 = v11 >= v9;
  unint64_t v13 = v11 - v9;
  return v13 != 0 && v14 && v13 >= (unint64_t)v12;
}

uint64_t flatbuffers::VerifyVectorOfStructs(uint64_t a1, int *a2, unsigned int a3, int *a4, int a5)
{
  int v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 <= a3) {
    return a5 ^ 1u;
  }
  uint64_t v6 = *(unsigned __int16 *)((char *)v5 + a3);
  if (!v6) {
    return a5 ^ 1u;
  }
  int v7 = (unsigned int *)((char *)a2 + v6 + *(unsigned int *)((char *)a2 + v6));
  uint64_t v8 = (unsigned __int16 *)((char *)a4 - *a4);
  if (*v8 >= 0xDu && (uint64_t v9 = v8[6]) != 0) {
    unint64_t v10 = *(int *)((char *)a4 + v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v12 = (unint64_t)v7 - *(void *)a1;
  if ((v12 & 3) != 0 && *(unsigned char *)(a1 + 40) != 0) {
    return 0;
  }
  uint64_t v11 = 0;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14 >= 5 && v14 - 4 >= v12)
  {
    unint64_t v15 = *v7;
    if (0x7FFFFFFF / v10 <= v15) {
      return 0;
    }
    unint64_t v16 = v10 * v15 + 4;
    BOOL v18 = v14 >= v16;
    unint64_t v17 = v14 - v16;
    return v17 != 0 && v18 && v17 >= v12;
  }
  return v11;
}

uint64_t flatbuffers::VerifyUnion(void *a1, int *a2, uint64_t a3, unsigned int *a4, int *a5)
{
  if (!a3) {
    return 1;
  }
  int v5 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v6 = *v5;
  if (v6 < 7)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v5[3];
    if (v5[3]) {
      v7 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v7);
    }
  }
  uint64_t v9 = (unsigned __int16 *)((char *)a5 - *a5);
  if (*v9 < 7u)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = (int *)v9[3];
    if (v10) {
      unint64_t v10 = (int *)((char *)v10 + (void)a5 + *(unsigned int *)((char *)v10 + (void)a5));
    }
  }
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 9u && (uint64_t v12 = v11[4]) != 0) {
    uint64_t v13 = 4 * *(unsigned int *)((char *)v10 + v12);
  }
  else {
    uint64_t v13 = 0x3FFFFFFFCLL;
  }
  unint64_t v14 = (int *)(v7 + v13 + 4 + *(unsigned int *)(v7 + v13 + 4));
  uint64_t v15 = *v14;
  unint64_t v16 = (char *)v14 - v15;
  unsigned int v17 = *(unsigned __int16 *)((char *)v14 - v15);
  if (v17 < 7)
  {
    LODWORD(v18) = 0;
    uint64_t v21 = 4;
    LODWORD(v19) = *v14;
  }
  else
  {
    uint64_t v18 = *((unsigned __int16 *)v16 + 3);
    if (*((_WORD *)v16 + 3))
    {
      uint64_t v19 = *(unsigned int *)((char *)v14 + v18);
      uint64_t v20 = (char *)v14 + v18 + v19;
    }
    else
    {
      uint64_t v20 = 0;
      LODWORD(v19) = *v14;
    }
    uint64_t v21 = (uint64_t)(v20 + 4);
  }
  uint64_t v22 = (uint64_t)&v14[*(int *)((char *)v14 + v18 + v19) + 1]
      + v18
      + v19;
  if (v21 != v22)
  {
    while (1)
    {
      uint64_t v23 = *(unsigned int *)v21;
      uint64_t v24 = v23 - *(int *)(v21 + v23);
      if (*(unsigned __int16 *)(v21 + v24) >= 7u && (uint64_t v25 = *(unsigned __int16 *)(v21 + v24 + 6)) != 0) {
        uint64_t v26 = *(void *)(v21 + v23 + v25);
      }
      else {
        uint64_t v26 = 0;
      }
      if (v26 == a3) {
        break;
      }
      v21 += 4;
      if (v21 == v22)
      {
        uint64_t v21 = v22;
        break;
      }
    }
  }
  if (v17 < 7)
  {
    unsigned int v27 = 0;
  }
  else
  {
    unsigned int v27 = *((unsigned __int16 *)v16 + 3);
    LODWORD(v15) = *(int *)((char *)v14 + v27);
  }
  if ((int *)v21 == (int *)((char *)&v14[*(int *)((char *)v14 + v27 + v15) + 1] + v27 + v15)) {
    return 0;
  }
  uint64_t v28 = (int *)(v21 + *(unsigned int *)v21);
  uint64_t v29 = (unsigned __int16 *)((char *)v28 - *v28);
  if (*v29 >= 0xBu && (uint64_t v30 = v29[5]) != 0) {
    uint64_t v31 = (int *)((char *)v28 + v30 + *(unsigned int *)((char *)v28 + v30));
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
  unsigned int v33 = *v32;
  if (v33 < 5 || !v32[2]) {
    return 0;
  }
  int v34 = *((char *)v31 + v32[2]);
  if (v34 == 13) {
    return sub_20DC542A0((uint64_t)a1, a4);
  }
  if (v34 != 15) {
    return 0;
  }
  if (v6 < 5)
  {
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v35 = v5[2];
    if (v35) {
      v35 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v35);
    }
  }
  if (v33 >= 9 && v32[4]) {
    uint64_t v36 = 4 * *(unsigned int *)((char *)v31 + v32[4]);
  }
  else {
    uint64_t v36 = 0x3FFFFFFFCLL;
  }
  uint64_t v37 = (int *)(v35 + v36 + 4 + *(unsigned int *)(v35 + v36 + 4));
  uint64_t v38 = (unsigned __int16 *)((char *)v37 - *v37);
  unsigned int v39 = *v38;
  if (v39 < 9 || !v38[4] || !*((unsigned char *)v37 + v38[4])) {
    return flatbuffers::VerifyObject();
  }
  if (v39 < 0xD)
  {
    unint64_t v40 = 0;
  }
  else
  {
    unint64_t v40 = v38[6];
    if (v40) {
      unint64_t v40 = *(int *)((char *)v37 + v40);
    }
  }
  unint64_t v41 = a1[1];
  BOOL v43 = v41 >= v40;
  unint64_t v42 = v41 - v40;
  return v42 != 0 && v43 && v42 >= (unint64_t)a4 - *a1;
}

uint64_t flatbuffers::VerifyObject(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  if (!a4) {
    return a5 ^ 1u;
  }
  uint64_t result = sub_20DC54320((uint64_t *)a1, a4);
  if (!result) {
    return result;
  }
  uint64_t v10 = *(unsigned __int16 *)((char *)a3 - *a3 + 6);
  uint64_t v11 = *(unsigned int *)((char *)a3 + v10);
  if (*(int *)((char *)a3 + v10 + v11))
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = v10;
      uint64_t v15 = v11 + v10;
      uint64_t v16 = *(unsigned int *)((char *)&a3[v12 + 1] + v15);
      uint64_t v17 = v15 + v16;
      uint64_t v18 = (int *)((char *)&a3[v12] + v15 + v16);
      uint64_t v19 = v18[1];
      unsigned int v20 = *(unsigned __int16 *)((char *)&a3[v12 + 1] + v17 - v19);
      if (v20 < 7)
      {
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v21 = v14 + v11 + v16;
        uint64_t v22 = (int *)*(unsigned __int16 *)((char *)&a3[v12 + 2] + v21 - v19 + 2);
        if (*(_WORD *)((char *)&a3[v12 + 2] + v21 - v19 + 2)) {
          uint64_t v22 = (int *)((char *)v22
        }
                      + v21
                      + v12 * 4
                      + (void)a3
                      + *(unsigned int *)((char *)&a3[v12 + 1] + (void)v22 + v21)
                      + 4);
      }
      uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
      if (*v23 < 5u) {
        goto LABEL_45;
      }
      uint64_t v24 = v23[2];
      if (!v24) {
        goto LABEL_45;
      }
      uint64_t v25 = v18 + 1;
      switch(*((unsigned char *)v22 + v24))
      {
        case 0xFD:
        case 9:
        case 0xA:
        case 0xC:
          if (v20 >= 0xB && (uint64_t v26 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v26 - v19 + 2))) {
            unsigned int v27 = *(unsigned __int16 *)((char *)a3
          }
                                      + v26
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v26 - v19 + 2)
                                      + 4);
          else {
            unsigned int v27 = 0;
          }
          int v34 = (unsigned __int16 *)((char *)a4 - *a4);
          if (*v34 <= v27) {
            goto LABEL_45;
          }
          uint64_t v35 = *(unsigned __int16 *)((char *)v34 + v27);
          if (!v35) {
            goto LABEL_45;
          }
          uint64_t result = 0;
          unint64_t v36 = *(void *)(a1 + 8);
          if (v36 < 9) {
            return result;
          }
          uint64_t v37 = (char *)a4 + v35 - *(void *)a1;
          unint64_t v38 = v36 - 8;
          goto LABEL_44;
        case 0xFE:
        case 7:
        case 8:
        case 0xB:
          if (v20 >= 0xB && (uint64_t v28 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v28 - v19 + 2))) {
            unsigned int v29 = *(unsigned __int16 *)((char *)a3
          }
                                      + v28
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v28 - v19 + 2)
                                      + 4);
          else {
            unsigned int v29 = 0;
          }
          unsigned int v39 = (unsigned __int16 *)((char *)a4 - *a4);
          if (*v39 <= v29) {
            goto LABEL_45;
          }
          uint64_t v40 = *(unsigned __int16 *)((char *)v39 + v29);
          if (!v40) {
            goto LABEL_45;
          }
          uint64_t result = 0;
          unint64_t v41 = *(void *)(a1 + 8);
          if (v41 < 5) {
            return result;
          }
          uint64_t v37 = (char *)a4 + v40 - *(void *)a1;
          unint64_t v38 = v41 - 4;
          goto LABEL_44;
        case 0xFF:
        case 5:
        case 6:
          if (v20 >= 0xB && (uint64_t v32 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v32 - v19 + 2))) {
            unsigned int v33 = *(unsigned __int16 *)((char *)a3
          }
                                      + v32
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v32 - v19 + 2)
                                      + 4);
          else {
            unsigned int v33 = 0;
          }
          uint64_t v45 = (unsigned __int16 *)((char *)a4 - *a4);
          if (*v45 <= v33) {
            goto LABEL_45;
          }
          uint64_t v46 = *(unsigned __int16 *)((char *)v45 + v33);
          if (!v46) {
            goto LABEL_45;
          }
          uint64_t result = 0;
          unint64_t v47 = *(void *)(a1 + 8);
          if (v47 < 3) {
            return result;
          }
          uint64_t v37 = (char *)a4 + v46 - *(void *)a1;
          unint64_t v38 = v47 - 2;
          goto LABEL_44;
        case 1:
        case 2:
        case 3:
        case 4:
          if (v20 >= 0xB && (uint64_t v30 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v30 - v19 + 2))) {
            unsigned int v31 = *(unsigned __int16 *)((char *)a3
          }
                                      + v30
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v30 - v19 + 2)
                                      + 4);
          else {
            unsigned int v31 = 0;
          }
          unint64_t v42 = (unsigned __int16 *)((char *)a4 - *a4);
          if (*v42 <= v31) {
            goto LABEL_45;
          }
          uint64_t v43 = *(unsigned __int16 *)((char *)v42 + v31);
          if (!v43) {
            goto LABEL_45;
          }
          uint64_t result = 0;
          unint64_t v44 = *(void *)(a1 + 8);
          if (v44 < 2) {
            return result;
          }
          uint64_t v37 = (char *)a4 + v43 - *(void *)a1;
          unint64_t v38 = v44 - 1;
LABEL_44:
          if (v38 >= (unint64_t)v37) {
            goto LABEL_45;
          }
          return result;
        case 0xD:
          if (v20 >= 0xB && (uint64_t v48 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v48 - v19 + 2))) {
            unsigned int v49 = *(unsigned __int16 *)((char *)a3
          }
                                      + v48
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v48 - v19 + 2)
                                      + 4);
          else {
            unsigned int v49 = 0;
          }
          uint64_t v54 = (unsigned __int16 *)((char *)a4 - *a4);
          unsigned int v55 = *v54;
          if (v55 > v49)
          {
            uint64_t v56 = *(unsigned __int16 *)((char *)v54 + v49);
            if (v56)
            {
              uint64_t result = 0;
              unint64_t v57 = *(void *)(a1 + 8);
              if (v57 < 5 || v57 - 4 < (unint64_t)a4 + v56 - *(void *)a1) {
                return result;
              }
            }
          }
          if (v20 >= 0xB
            && (uint64_t v58 = v14 + v11 + v16, (v59 = *(unsigned __int16 *)((char *)&a3[v12 + 3] + v58 - v19 + 2)) != 0))
          {
            unsigned int v60 = *(unsigned __int16 *)((char *)a3 + v58 + v12 * 4 + v59 + 4);
          }
          else
          {
            unsigned int v60 = 0;
          }
          if (v55 > v60 && (uint64_t v63 = *(unsigned __int16 *)((char *)v54 + v60)) != 0) {
            uint64_t v64 = (unsigned int *)((char *)a4 + v63 + *(unsigned int *)((char *)a4 + v63));
          }
          else {
            uint64_t v64 = 0;
          }
          if (!sub_20DC542A0(a1, v64)) {
            return 0;
          }
          goto LABEL_45;
        case 0xE:
          if (flatbuffers::VerifyVector(a1, a2, a4, v18 + 1)) {
            goto LABEL_45;
          }
          return 0;
        case 0xF:
          uint64_t v50 = (unsigned __int16 *)((char *)a2 - *a2);
          if (*v50 < 5u)
          {
            uint64_t v51 = 0;
          }
          else
          {
            uint64_t v51 = v50[2];
            if (v51) {
              v51 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v51);
            }
          }
          if (v20 >= 7 && (uint64_t v65 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 2] + v65 - v19 + 2)))
          {
            uint64_t v66 = v65 + *(unsigned __int16 *)((char *)&a3[v12 + 2] + v65 - v19 + 2);
            uint64_t v67 = (int *)((char *)&a3[v12 + 1] + v66 + *(unsigned int *)((char *)&a3[v12 + 1] + v66));
          }
          else
          {
            uint64_t v67 = 0;
          }
          uint64_t v68 = (unsigned __int16 *)((char *)v67 - *v67);
          if (*v68 >= 9u && (uint64_t v69 = v68[4]) != 0) {
            uint64_t v70 = *(unsigned int *)((char *)v67 + v69);
          }
          else {
            uint64_t v70 = 0xFFFFFFFFLL;
          }
          uint64_t v71 = (int *)(v51 + 4 * v70 + 4 + *(unsigned int *)(v51 + 4 * v70 + 4));
          uint64_t v72 = (unsigned __int16 *)((char *)v71 - *v71);
          if (*v72 >= 9u)
          {
            uint64_t v73 = v72[4];
            if (v73)
            {
              if (*((unsigned char *)v71 + v73))
              {
                if (v20 < 0xB)
                {
                  unsigned int v75 = 0;
                }
                else
                {
                  uint64_t v74 = v14 + v11 + v16;
                  if (*(_WORD *)((char *)&a3[v12 + 3] + v74 - v19 + 2)) {
                    unsigned int v75 = *(unsigned __int16 *)((char *)a3
                  }
                                              + v74
                                              + v12 * 4
                                              + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v74 - v19 + 2)
                                              + 4);
                  else {
                    unsigned int v75 = 0;
                  }
                  if (v20 >= 0x13)
                  {
                    uint64_t v110 = v14 + v11 + v16;
                    uint64_t v111 = *(unsigned __int16 *)((char *)&a3[v12 + 5] + v110 - v19 + 2);
                    if (v111)
                    {
                      BOOL v112 = *((unsigned __int8 *)a3 + v110 + v12 * 4 + v111 + 4) != 0;
                      goto LABEL_151;
                    }
                  }
                }
                BOOL v112 = 0;
LABEL_151:
                if ((flatbuffers::VerifyStruct((void *)a1, a4, v75, v71, v112) & 1) == 0) {
                  return 0;
                }
                goto LABEL_45;
              }
            }
          }
          if (v20 >= 0xB && (uint64_t v76 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v76 - v19 + 2))) {
            unsigned int v77 = *(unsigned __int16 *)((char *)a3
          }
                                      + v76
                                      + v12 * 4
                                      + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v76 - v19 + 2)
                                      + 4);
          else {
            unsigned int v77 = 0;
          }
          unint64_t v78 = (unsigned __int16 *)((char *)a4 - *a4);
          if (*v78 > v77 && (uint64_t v79 = *(unsigned __int16 *)((char *)v78 + v77)) != 0) {
            uint64_t v80 = (char *)a4 + v79 + *(unsigned int *)((char *)a4 + v79);
          }
          else {
            uint64_t v80 = 0;
          }
          BOOL v83 = v20 >= 0x13
             && (uint64_t v81 = v14 + v11 + v16, (v82 = *(unsigned __int16 *)((char *)&a3[v12 + 5] + v81 - v19 + 2)) != 0)
             && *((unsigned __int8 *)a3 + v81 + v12 * 4 + v82 + 4) != 0;
          if ((flatbuffers::VerifyObject(a1, a2, v71, v80, v83) & 1) == 0) {
            return 0;
          }
LABEL_45:
          ++v13;
          uint64_t v10 = *(unsigned __int16 *)((char *)a3 - *a3 + 6);
          uint64_t v11 = *(unsigned int *)((char *)a3 + v10);
          ++v12;
          if (v13 >= *(unsigned int *)((char *)a3 + v10 + v11)) {
            goto LABEL_154;
          }
          break;
        case 0x10:
          if (v20 >= 0xB && (uint64_t v52 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 3] + v52 - v19 + 2))) {
            __int16 v53 = *(_WORD *)((char *)a3 + v52
          }
                                        + v12 * 4
                                        + *(unsigned __int16 *)((char *)&a3[v12 + 3] + v52 - v19 + 2)
                                        + 4);
          else {
            __int16 v53 = 0;
          }
          unint64_t v61 = (unsigned __int16 *)((char *)a2 - *a2);
          if (*v61 < 7u)
          {
            uint64_t v62 = 0;
          }
          else
          {
            uint64_t v62 = v61[3];
            if (v62) {
              v62 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v62);
            }
          }
          if (v20 >= 7 && (uint64_t v84 = v14 + v11 + v16, *(_WORD *)((char *)&a3[v12 + 2] + v84 - v19 + 2)))
          {
            uint64_t v85 = v84 + *(unsigned __int16 *)((char *)&a3[v12 + 2] + v84 - v19 + 2);
            uint64_t v86 = (int *)((char *)&a3[v12 + 1] + v85 + *(unsigned int *)((char *)&a3[v12 + 1] + v85));
          }
          else
          {
            uint64_t v86 = 0;
          }
          unint64_t v87 = (unsigned __int16 *)((char *)v86 - *v86);
          if (*v87 >= 9u && (uint64_t v88 = v87[4]) != 0) {
            uint64_t v89 = *(unsigned int *)((char *)v86 + v88);
          }
          else {
            uint64_t v89 = 0xFFFFFFFFLL;
          }
          uint64_t v90 = (int *)(v62 + 4 * v89 + 4 + *(unsigned int *)(v62 + 4 * v89 + 4));
          uint64_t v91 = (unsigned __int16 *)((char *)v90 - *v90);
          if (*v91 >= 0xBu && (uint64_t v92 = v91[5]) != 0) {
            size_t v93 = (int *)((char *)v90 + v92 + *(unsigned int *)((char *)v90 + v92));
          }
          else {
            size_t v93 = 0;
          }
          int v94 = (unsigned __int16 *)((char *)v93 - *v93);
          if (*v94 >= 5u)
          {
            uint64_t v95 = v94[2];
            if (v95)
            {
              uint64_t result = 0;
              int v96 = *((char *)v93 + v95) + 3;
              unsigned __int16 v97 = v53 - 2;
              switch(v96)
              {
                case 0:
                  uint64_t v98 = *a4;
                  if (*(unsigned __int16 *)((char *)a4 - v98) <= v97) {
                    goto LABEL_134;
                  }
                  uint64_t v99 = *(unsigned __int16 *)((char *)a4 + v97 - v98);
                  if (!v99) {
                    goto LABEL_134;
                  }
                  uint64_t v100 = *(void *)((char *)a4 + v99);
                  goto LABEL_135;
                case 1:
                  uint64_t v98 = *a4;
                  if (*(unsigned __int16 *)((char *)a4 - v98) <= v97) {
                    goto LABEL_134;
                  }
                  uint64_t v101 = *(unsigned __int16 *)((char *)a4 + v97 - v98);
                  if (!v101) {
                    goto LABEL_134;
                  }
                  uint64_t v100 = *(unsigned int *)((char *)a4 + v101);
                  goto LABEL_135;
                case 2:
                  uint64_t v98 = *a4;
                  if (*(unsigned __int16 *)((char *)a4 - v98) <= v97) {
                    goto LABEL_134;
                  }
                  uint64_t v102 = *(unsigned __int16 *)((char *)a4 + v97 - v98);
                  if (!v102) {
                    goto LABEL_134;
                  }
                  uint64_t v100 = *(unsigned __int16 *)((char *)a4 + v102);
                  goto LABEL_135;
                case 4:
                  uint64_t v98 = *a4;
                  if (*(unsigned __int16 *)((char *)a4 - v98) > v97
                    && (uint64_t v103 = *(unsigned __int16 *)((char *)a4 + v97 - v98)) != 0)
                  {
                    uint64_t v100 = *((unsigned __int8 *)a4 + v103);
                  }
                  else
                  {
LABEL_134:
                    uint64_t v100 = 0;
                  }
LABEL_135:
                  if (v20 >= 0xB
                    && (uint64_t v104 = v14 + v11 + v16,
                        (uint64_t v105 = *(unsigned __int16 *)((char *)&a3[v12 + 3] + v104 - v19 + 2)) != 0))
                  {
                    unsigned int v106 = *(unsigned __int16 *)((char *)a3 + v104 + v12 * 4 + v105 + 4);
                  }
                  else
                  {
                    unsigned int v106 = 0;
                  }
                  BOOL v107 = (unsigned __int16 *)((char *)a4 - (int)v98);
                  if (*v107 > v106 && (uint64_t v108 = *(unsigned __int16 *)((char *)v107 + v106)) != 0) {
                    uint64_t v109 = (unsigned int *)((char *)a4 + v108 + *(unsigned int *)((char *)a4 + v108));
                  }
                  else {
                    uint64_t v109 = 0;
                  }
                  uint64_t result = flatbuffers::VerifyUnion((void *)a1, a2, v100, v109, v25);
                  if (!result) {
                    return result;
                  }
                  goto LABEL_45;
                default:
                  return result;
              }
            }
          }
          return 0;
        default:
          goto LABEL_45;
      }
    }
  }
LABEL_154:
  --*(_DWORD *)(a1 + 16);
  return 1;
}

uint64_t flatbuffers::VerifyVector(uint64_t a1, int *a2, int *a3, int *a4)
{
  uint64_t v7 = (unsigned __int16 *)((char *)a4 - *a4);
  unsigned int v8 = *v7;
  if (v8 >= 0xB && v7[5]) {
    unsigned int v9 = *(unsigned __int16 *)((char *)a4 + v7[5]);
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = (unsigned __int16 *)((char *)a3 - *a3);
  unsigned int v11 = *v10;
  if (v11 > v9)
  {
    uint64_t v12 = *(unsigned __int16 *)((char *)v10 + v9);
    if (v12)
    {
      unint64_t v13 = *(void *)(a1 + 8);
      unint64_t v14 = (unint64_t)a3 + v12 - *(void *)a1;
      BOOL v15 = v13 >= 5 && v13 - 4 >= v14;
      if (!v15) {
        return 0;
      }
    }
  }
  if (v8 < 7)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = (int *)v7[3];
    if (v7[3]) {
      uint64_t v16 = (int *)((char *)v16 + (void)a4 + *(unsigned int *)((char *)v16 + (void)a4));
    }
  }
  uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 < 7u) {
    return 0;
  }
  uint64_t v18 = v17[3];
  if (!v18) {
    return 0;
  }
  uint64_t result = 0;
  switch(*((unsigned char *)v16 + v18))
  {
    case 0xFD:
      if (v8 < 0xB)
      {
        LODWORD(v42) = 0;
      }
      else
      {
        uint64_t v42 = v7[5];
        if (v42) {
          LODWORD(v42) = *(unsigned __int16 *)((char *)a4 + v42);
        }
      }
      if (v11 > v42 && (uint64_t v55 = *(unsigned __int16 *)((char *)v10 + v42)) != 0) {
        uint64_t v56 = (unsigned int *)((char *)a3 + v55 + *(unsigned int *)((char *)a3 + v55));
      }
      else {
        uint64_t v56 = 0;
      }
      return sub_20DC67FB4(a1, v56);
    case 0xFE:
      if (v8 < 0xB)
      {
        LODWORD(v97) = 0;
      }
      else
      {
        uint64_t v97 = v7[5];
        if (v97) {
          LODWORD(v97) = *(unsigned __int16 *)((char *)a4 + v97);
        }
      }
      if (v11 > v97 && (uint64_t v98 = *(unsigned __int16 *)((char *)v10 + v97)) != 0) {
        uint64_t v99 = (unsigned int *)((char *)a3 + v98 + *(unsigned int *)((char *)a3 + v98));
      }
      else {
        uint64_t v99 = 0;
      }
      return sub_20DC7878C(a1, v99);
    case 0xFF:
      if (v8 < 0xB)
      {
        LODWORD(v43) = 0;
      }
      else
      {
        uint64_t v43 = v7[5];
        if (v43) {
          LODWORD(v43) = *(unsigned __int16 *)((char *)a4 + v43);
        }
      }
      if (v11 > v43 && (uint64_t v57 = *(unsigned __int16 *)((char *)v10 + v43)) != 0) {
        uint64_t v58 = (unsigned int *)((char *)a3 + v57 + *(unsigned int *)((char *)a3 + v57));
      }
      else {
        uint64_t v58 = 0;
      }
      return sub_20DC67F4C(a1, v58);
    case 1:
      if (v8 < 0xB)
      {
        LODWORD(v44) = 0;
      }
      else
      {
        uint64_t v44 = v7[5];
        if (v44) {
          LODWORD(v44) = *(unsigned __int16 *)((char *)a4 + v44);
        }
      }
      if (v11 > v44 && (uint64_t v59 = *(unsigned __int16 *)((char *)v10 + v44)) != 0) {
        unsigned int v60 = (unsigned int *)((char *)a3 + v59 + *(unsigned int *)((char *)a3 + v59));
      }
      else {
        unsigned int v60 = 0;
      }
      return sub_20DC67EE8(a1, v60);
    case 2:
    case 3:
    case 4:
      if (v8 < 0xB)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        uint64_t v20 = v7[5];
        if (v20) {
          LODWORD(v20) = *(unsigned __int16 *)((char *)a4 + v20);
        }
      }
      if (v11 <= v20) {
        return 1;
      }
      uint64_t v24 = *(unsigned __int16 *)((char *)v10 + v20);
      if (!v24) {
        return 1;
      }
      uint64_t v25 = (unsigned int *)((char *)a3 + v24 + *(unsigned int *)((char *)a3 + v24));
      unint64_t v26 = (unint64_t)v25 - *(void *)a1;
      if ((v26 & 3) != 0 && *(unsigned char *)(a1 + 40) != 0) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v28 = *(void *)(a1 + 8);
      if (v28 >= 5 && v28 - 4 >= v26)
      {
        uint64_t v29 = *v25;
        if (v29 <= 0x7FFFFFFE) {
          goto LABEL_97;
        }
        return 0;
      }
      return result;
    case 5:
    case 6:
      if (v8 < 0xB)
      {
        LODWORD(v23) = 0;
      }
      else
      {
        uint64_t v23 = v7[5];
        if (v23) {
          LODWORD(v23) = *(unsigned __int16 *)((char *)a4 + v23);
        }
      }
      if (v11 <= v23) {
        return 1;
      }
      uint64_t v49 = *(unsigned __int16 *)((char *)v10 + v23);
      if (!v49) {
        return 1;
      }
      uint64_t v50 = (unsigned int *)((char *)a3 + v49 + *(unsigned int *)((char *)a3 + v49));
      unint64_t v26 = (unint64_t)v50 - *(void *)a1;
      if ((v26 & 3) != 0 && *(unsigned char *)(a1 + 40) != 0) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v28 = *(void *)(a1 + 8);
      if (v28 >= 5 && v28 - 4 >= v26)
      {
        uint64_t v52 = *v50;
        if (v52 > 0x3FFFFFFE) {
          return 0;
        }
        uint64_t v29 = 2 * v52;
        goto LABEL_97;
      }
      return result;
    case 7:
    case 8:
    case 0xB:
      if (v8 < 0xB)
      {
        LODWORD(v21) = 0;
      }
      else
      {
        uint64_t v21 = v7[5];
        if (v21) {
          LODWORD(v21) = *(unsigned __int16 *)((char *)a4 + v21);
        }
      }
      if (v11 <= v21) {
        return 1;
      }
      uint64_t v30 = *(unsigned __int16 *)((char *)v10 + v21);
      if (!v30) {
        return 1;
      }
      unsigned int v31 = (unsigned int *)((char *)a3 + v30 + *(unsigned int *)((char *)a3 + v30));
      unint64_t v26 = (unint64_t)v31 - *(void *)a1;
      if ((v26 & 3) != 0 && *(unsigned char *)(a1 + 40) != 0) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v28 = *(void *)(a1 + 8);
      if (v28 >= 5 && v28 - 4 >= v26)
      {
        uint64_t v33 = *v31;
        if (v33 > 0x1FFFFFFE) {
          return 0;
        }
        uint64_t v29 = 4 * v33;
LABEL_97:
        unint64_t v53 = v29 + 4;
        BOOL v15 = v28 >= v53;
        unint64_t v41 = v28 - v53;
        BOOL v40 = v41 != 0 && v15;
        return v40 && v41 >= v26;
      }
      return result;
    case 9:
    case 0xA:
    case 0xC:
      if (v8 < 0xB)
      {
        LODWORD(v22) = 0;
      }
      else
      {
        uint64_t v22 = v7[5];
        if (v22) {
          LODWORD(v22) = *(unsigned __int16 *)((char *)a4 + v22);
        }
      }
      if (v11 <= v22) {
        return 1;
      }
      uint64_t v34 = *(unsigned __int16 *)((char *)v10 + v22);
      if (!v34) {
        return 1;
      }
      uint64_t v35 = (unsigned int *)((char *)a3 + v34 + *(unsigned int *)((char *)a3 + v34));
      unint64_t v26 = (unint64_t)v35 - *(void *)a1;
      if ((v26 & 3) != 0 && *(unsigned char *)(a1 + 40) != 0) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v37 = *(void *)(a1 + 8);
      if (v37 >= 5 && v37 - 4 >= v26)
      {
        uint64_t v38 = *v35;
        if (v38 > 0xFFFFFFE) {
          return 0;
        }
        unint64_t v39 = (8 * v38) | 4;
        BOOL v15 = v37 >= v39;
        unint64_t v41 = v37 - v39;
        BOOL v40 = v41 != 0 && v15;
        return v40 && v41 >= v26;
      }
      return result;
    case 0xD:
      if (v8 < 0xB)
      {
        LODWORD(v45) = 0;
      }
      else
      {
        uint64_t v45 = v7[5];
        if (v45) {
          LODWORD(v45) = *(unsigned __int16 *)((char *)a4 + v45);
        }
      }
      if (v11 > v45 && (uint64_t v61 = *(unsigned __int16 *)((char *)v10 + v45)) != 0) {
        uint64_t v62 = (unsigned int *)((char *)a3 + v61 + *(unsigned int *)((char *)a3 + v61));
      }
      else {
        uint64_t v62 = 0;
      }
      uint64_t result = sub_20DC54C78(a1, v62);
      if (result)
      {
        if (!v62 || !*v62) {
          return 1;
        }
        unint64_t v63 = 0;
        uint64_t v64 = v62 + 1;
        do
        {
          uint64_t result = sub_20DC542A0(a1, (unsigned int *)((char *)v64 + *v64));
          if ((result & 1) == 0) {
            break;
          }
          ++v63;
          ++v64;
        }
        while (v63 < *v62);
      }
      return result;
    case 0xF:
      uint64_t v46 = (unsigned __int16 *)((char *)a2 - *a2);
      if (*v46 < 5u)
      {
        uint64_t v47 = 0;
      }
      else
      {
        uint64_t v47 = v46[2];
        if (v47) {
          v47 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v47);
        }
      }
      if (v8 < 7)
      {
        uint64_t v65 = 0;
      }
      else
      {
        uint64_t v65 = (int *)v7[3];
        if (v7[3]) {
          uint64_t v65 = (int *)((char *)v65 + (void)a4 + *(unsigned int *)((char *)v65 + (void)a4));
        }
      }
      unsigned int v77 = (unsigned __int16 *)((char *)v65 - *v65);
      if (*v77 >= 9u && (uint64_t v78 = v77[4]) != 0) {
        uint64_t v79 = 4 * *(unsigned int *)((char *)v65 + v78);
      }
      else {
        uint64_t v79 = 0x3FFFFFFFCLL;
      }
      uint64_t v80 = (int *)(v47 + v79 + 4 + *(unsigned int *)(v47 + v79 + 4));
      uint64_t v81 = (unsigned __int16 *)((char *)v80 - *v80);
      if (*v81 >= 9u)
      {
        uint64_t v82 = v81[4];
        if (v82)
        {
          if (*((unsigned char *)v80 + v82))
          {
            if (v8 < 0xB)
            {
              LODWORD(v83) = 0;
            }
            else
            {
              uint64_t v83 = v7[5];
              if (v7[5]) {
                LODWORD(v83) = *(unsigned __int16 *)((char *)a4 + v83);
              }
              if (v8 >= 0x13 && v7[9])
              {
                BOOL v84 = *((unsigned __int8 *)a4 + v7[9]) != 0;
LABEL_203:
                return flatbuffers::VerifyVectorOfStructs(a1, a3, v83, v80, v84);
              }
            }
            BOOL v84 = 0;
            goto LABEL_203;
          }
        }
      }
      if (v8 < 0xB)
      {
        LODWORD(v85) = 0;
      }
      else
      {
        uint64_t v85 = v7[5];
        if (v85) {
          LODWORD(v85) = *(unsigned __int16 *)((char *)a4 + v85);
        }
      }
      if (v11 <= v85) {
        return 1;
      }
      uint64_t v86 = *(unsigned __int16 *)((char *)v10 + v85);
      if (!v86) {
        return 1;
      }
      unint64_t v87 = (unsigned int *)((char *)a3 + v86 + *(unsigned int *)((char *)a3 + v86));
      unint64_t v88 = (unint64_t)v87 - *(void *)a1;
      if ((v88 & 3) != 0 && *(unsigned char *)(a1 + 40) != 0) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v90 = *(void *)(a1 + 8);
      if (v90 >= 5 && v90 - 4 >= v88)
      {
        uint64_t v91 = *v87;
        if (v91 > 0x1FFFFFFE) {
          return 0;
        }
        unint64_t v92 = 4 * v91 + 4;
        BOOL v40 = v90 > v92;
        unint64_t v93 = v90 - v92;
        if (!v40 || v93 < v88) {
          return 0;
        }
        if (!v91) {
          return 1;
        }
        unint64_t v95 = 0;
        int v96 = v87 + 1;
        do
        {
          uint64_t result = flatbuffers::VerifyObject(a1, a2, v80, (char *)v96 + *v96, 1);
          if ((result & 1) == 0) {
            break;
          }
          ++v95;
          ++v96;
        }
        while (v95 < *v87);
      }
      return result;
    case 0x10:
      if (v8 < 0xB)
      {
        LODWORD(v48) = 0;
      }
      else
      {
        uint64_t v48 = v7[5];
        if (v7[5]) {
          LODWORD(v48) = *(unsigned __int16 *)((char *)a4 + v48);
        }
      }
      if (v11 <= v48) {
        return 1;
      }
      uint64_t v66 = *(unsigned __int16 *)((char *)v10 + v48);
      if (!v66) {
        return 1;
      }
      uint64_t v67 = (unsigned int *)((char *)a3 + v66 + *(unsigned int *)((char *)a3 + v66));
      unint64_t v68 = (unint64_t)v67 - *(void *)a1;
      if ((v68 & 3) != 0 && *(unsigned char *)(a1 + 40) != 0) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v70 = *(void *)(a1 + 8);
      if (v70 >= 5 && v70 - 4 >= v68)
      {
        uint64_t v71 = *v67;
        if (v71 > 0x1FFFFFFE) {
          return 0;
        }
        unint64_t v72 = 4 * v71 + 4;
        BOOL v40 = v70 > v72;
        unint64_t v73 = v70 - v72;
        if (!v40 || v73 < v68) {
          return 0;
        }
        unsigned int v75 = (unsigned __int16 *)((char *)a2 - *a2);
        if (*v75 < 7u)
        {
          uint64_t v76 = 0;
        }
        else
        {
          uint64_t v76 = v75[3];
          if (v76) {
            v76 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v76);
          }
        }
        if (v8 < 7)
        {
          uint64_t v100 = 0;
        }
        else
        {
          uint64_t v100 = (int *)v7[3];
          if (v7[3]) {
            uint64_t v100 = (int *)((char *)v100 + (void)a4 + *(unsigned int *)((char *)v100 + (void)a4));
          }
        }
        uint64_t v101 = (unsigned __int16 *)((char *)v100 - *v100);
        if (*v101 >= 9u && (uint64_t v102 = v101[4]) != 0) {
          uint64_t v103 = 4 * *(unsigned int *)((char *)v100 + v102);
        }
        else {
          uint64_t v103 = 0x3FFFFFFFCLL;
        }
        uint64_t v104 = (int *)(v76 + v103 + 4 + *(unsigned int *)(v76 + v103 + 4));
        uint64_t v105 = (unsigned __int16 *)((char *)v104 - *v104);
        if (*v105 >= 0xBu && (uint64_t v106 = v105[5]) != 0) {
          BOOL v107 = (int *)((char *)v104 + v106 + *(unsigned int *)((char *)v104 + v106));
        }
        else {
          BOOL v107 = 0;
        }
        uint64_t v108 = (unsigned __int16 *)((char *)v107 - *v107);
        if (*v108 < 5u) {
          return 0;
        }
        uint64_t v109 = v108[2];
        if (!v109) {
          return 0;
        }
        int v140 = *v67;
        uint64_t result = 0;
        switch(*((unsigned char *)v107 + v109))
        {
          case 0xFD:
            if (v8 >= 0xB && (uint64_t v110 = v7[5]) != 0) {
              unsigned __int16 v111 = *(_WORD *)((char *)a4 + v110) - 2;
            }
            else {
              unsigned __int16 v111 = -2;
            }
            if (v11 > v111 && (uint64_t v116 = *(unsigned __int16 *)((char *)v10 + v111)) != 0) {
              unint64_t v117 = (unsigned int *)((char *)a3 + v116 + *(unsigned int *)((char *)a3 + v116));
            }
            else {
              unint64_t v117 = 0;
            }
            uint64_t result = sub_20DC67FB4(a1, v117);
            if (result)
            {
              if (!v140) {
                return 1;
              }
              unint64_t v122 = 0;
              uint64_t v123 = v117 + 1;
              unint64_t v124 = v67 + 1;
              do
              {
                uint64_t result = flatbuffers::VerifyUnion((void *)a1, a2, *(void *)&v123[2 * v122], (unsigned int *)((char *)v124 + *v124), a4);
                if ((result & 1) == 0) {
                  break;
                }
                ++v122;
                ++v124;
              }
              while (v122 < *v67);
            }
            break;
          case 0xFE:
            if (v8 >= 0xB && (uint64_t v133 = v7[5]) != 0) {
              unsigned __int16 v134 = *(_WORD *)((char *)a4 + v133) - 2;
            }
            else {
              unsigned __int16 v134 = -2;
            }
            if (v11 > v134 && (uint64_t v135 = *(unsigned __int16 *)((char *)v10 + v134)) != 0) {
              unint64_t v136 = (unsigned int *)((char *)a3 + v135 + *(unsigned int *)((char *)a3 + v135));
            }
            else {
              unint64_t v136 = 0;
            }
            uint64_t result = sub_20DC7878C(a1, v136);
            if (result)
            {
              if (!v140) {
                return 1;
              }
              unint64_t v137 = 0;
              uint64_t v138 = v136 + 1;
              unint64_t v139 = v67 + 1;
              do
              {
                uint64_t result = flatbuffers::VerifyUnion((void *)a1, a2, v138[v137], (unsigned int *)((char *)v139 + *v139), a4);
                if ((result & 1) == 0) {
                  break;
                }
                ++v137;
                ++v139;
              }
              while (v137 < *v67);
            }
            break;
          case 0xFF:
            if (v8 >= 0xB && (uint64_t v112 = v7[5]) != 0) {
              unsigned __int16 v113 = *(_WORD *)((char *)a4 + v112) - 2;
            }
            else {
              unsigned __int16 v113 = -2;
            }
            if (v11 > v113 && (uint64_t v118 = *(unsigned __int16 *)((char *)v10 + v113)) != 0) {
              uint64_t v119 = (unsigned int *)((char *)a3 + v118 + *(unsigned int *)((char *)a3 + v118));
            }
            else {
              uint64_t v119 = 0;
            }
            uint64_t result = sub_20DC67F4C(a1, v119);
            if (result)
            {
              if (!v140) {
                return 1;
              }
              uint64_t v125 = 0;
              int v126 = v119 + 1;
              uint64_t v127 = v67 + 1;
              do
              {
                uint64_t v128 = v125;
                uint64_t result = flatbuffers::VerifyUnion((void *)a1, a2, *((unsigned __int16 *)v126 + v125), (unsigned int *)((char *)v127 + *v127), a4);
                if ((result & 1) == 0) {
                  break;
                }
                ++v127;
                uint64_t v125 = v128 + 1;
              }
              while (v128 + 1 < (unint64_t)*v67);
            }
            break;
          case 1:
            if (v8 >= 0xB && (uint64_t v114 = v7[5]) != 0) {
              unsigned __int16 v115 = *(_WORD *)((char *)a4 + v114) - 2;
            }
            else {
              unsigned __int16 v115 = -2;
            }
            if (v11 > v115 && (uint64_t v120 = *(unsigned __int16 *)((char *)v10 + v115)) != 0) {
              uint64_t v121 = (unsigned int *)((char *)a3 + v120 + *(unsigned int *)((char *)a3 + v120));
            }
            else {
              uint64_t v121 = 0;
            }
            uint64_t result = sub_20DC67EE8(a1, v121);
            if (result)
            {
              if (!v140) {
                return 1;
              }
              uint64_t v129 = 0;
              uint64_t v130 = v121 + 1;
              uint64_t v131 = v67 + 1;
              do
              {
                uint64_t v132 = v129;
                uint64_t result = flatbuffers::VerifyUnion((void *)a1, a2, *((unsigned __int8 *)v130 + v129), (unsigned int *)((char *)v131 + *v131), a4);
                if ((result & 1) == 0) {
                  break;
                }
                ++v131;
                uint64_t v129 = v132 + 1;
              }
              while (v132 + 1 < (unint64_t)*v67);
            }
            break;
          default:
            return result;
        }
      }
      return result;
    default:
      return result;
  }
}

uint64_t sub_20DC67EE8(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v6 = *a2;
  BOOL v7 = v3 > v6 + 4;
  unint64_t v8 = v3 - (v6 + 4);
  unsigned int v10 = v7 && v8 >= v2;
  if (v6 <= 0x7FFFFFFE) {
    return v10;
  }
  else {
    return 0;
  }
}

BOOL sub_20DC67F4C(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0x3FFFFFFE) {
    return 0;
  }
  unint64_t v6 = 2 * v5 + 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

BOOL sub_20DC67FB4(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0xFFFFFFE) {
    return 0;
  }
  unint64_t v6 = (8 * v5) | 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

uint64_t flatbuffers::Verify(int *a1, int *a2, unsigned int *a3, uint64_t a4)
{
  v5[0] = a3;
  v5[1] = a4;
  long long v6 = xmmword_20DC7CE90;
  uint64_t v7 = 0;
  char v8 = 1;
  return flatbuffers::VerifyObject((uint64_t)v5, a1, a2, (int *)((char *)a3 + *a3), 1);
}

uint64_t sub_20DC68074(uint64_t a1, int *a2, unsigned int a3, int a4, void *a5, int *a6)
{
  uint64_t v12 = 0;
  *(void *)a1 = a2;
  unint64_t v13 = (_DWORD *)*a5;
  BOOL v14 = *a5 == a5[1];
  *(void *)(a1 + 24) = a5;
  unint64_t v15 = a5[1] - *a5;
  if (v14) {
    unint64_t v13 = 0;
  }
  unint64_t v16 = (unint64_t)v13 + a3;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if (v15 >= 4)
  {
    size_t v17 = v15 >> 2;
    uint64_t v12 = operator new(v15 >> 2);
    *(void *)(a1 + 32) = v12;
    uint64_t v18 = &v12[v15 >> 2];
    *(void *)(a1 + 48) = v18;
    bzero(v12, v17);
    *(void *)(a1 + 40) = v18;
  }
  unsigned int v19 = (a4 + 7) & 0xFFFFFFF8;
  *(_DWORD *)(a1 + 16) = v19;
  if (v19)
  {
    uint64_t v20 = (_DWORD *)*a5;
    if (*a5 == a5[1]) {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *v20;
    uint64_t v22 = (_DWORD *)((char *)v20 + v21);
    if (v16 >= (unint64_t)v20 && v16 <= (unint64_t)v22)
    {
      *uint64_t v20 = v21 + v19;
      *uint64_t v12 = 1;
    }
    if (!a6)
    {
      uint64_t v24 = *a2;
      if (*(unsigned __int16 *)((char *)a2 - v24) < 0xDu)
      {
        int v25 = 0;
      }
      else
      {
        int v25 = *(unsigned __int16 *)((char *)a2 - v24 + 12);
        LODWORD(v24) = *(int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - v24 + 12));
      }
      a6 = (int *)((char *)a2 + v25 + v24);
    }
    sub_20DC6820C(a1, a6, v22);
    unint64_t v26 = *(unsigned int *)(a1 + 16);
    unsigned int v27 = *(char ***)(a1 + 24);
    unint64_t v28 = &(*v27)[a3];
    if ((int)v26 >= 1)
    {
      char v33 = 0;
      sub_20DC777DC(v27, v28, v26, &v33);
    }
    else if (v26)
    {
      uint64_t v29 = &v28[-(int)v26];
      uint64_t v30 = v27[1];
      int64_t v31 = v30 - v29;
      if (v30 != v29) {
        memmove(&(*v27)[a3], v29, v30 - v29);
      }
      v27[1] = &v28[v31];
    }
  }
  return a1;
}

uint64_t sub_20DC6820C(uint64_t result, int *a2, int *a3)
{
  unint64_t v3 = *(uint64_t **)(result + 24);
  if (*v3 == v3[1]) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *v3;
  }
  uint64_t v5 = (unsigned char *)(*(void *)(result + 32) + (((uint64_t)a3 - v4) >> 2));
  if (!*v5)
  {
    uint64_t v7 = (int **)result;
    uint64_t v8 = *a3;
    unsigned int v9 = (int *)((char *)a3 - v8);
    unsigned int v10 = *(int **)(result + 8);
    if (v10 <= a3)
    {
      if (v10 < v9) {
        return result;
      }
      *a3 = v8 - *(_DWORD *)(result + 16);
      goto LABEL_101;
    }
    uint64_t v12 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 6));
    unint64_t v13 = (unsigned int *)((char *)v12 + *v12);
    if (*v13)
    {
      BOOL v14 = a3 + 1;
      unint64_t v15 = v13 + 1;
      while (1)
      {
        unint64_t v16 = (int *)((char *)v15 + *v15);
        size_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
        unsigned int v18 = *v17;
        if (v18 < 7)
        {
          unsigned int v19 = 0;
        }
        else
        {
          unsigned int v19 = (int *)v17[3];
          if (v17[3]) {
            unsigned int v19 = (int *)((char *)v19 + (void)v16 + *(unsigned int *)((char *)v19 + (void)v16));
          }
        }
        uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
        if (*v20 < 5u) {
          goto LABEL_55;
        }
        uint64_t v21 = v20[2];
        if (!v21) {
          goto LABEL_55;
        }
        int v22 = *((char *)v19 + v21);
        if (v22 < 13) {
          goto LABEL_55;
        }
        if (v18 < 0xB)
        {
          LODWORD(v23) = 0;
        }
        else
        {
          uint64_t v23 = v17[5];
          if (v17[5]) {
            LODWORD(v23) = *(unsigned __int16 *)((char *)v16 + v23);
          }
        }
        uint64_t v24 = (unsigned __int16 *)((char *)a3 - *a3);
        if (*v24 <= v23) {
          goto LABEL_55;
        }
        uint64_t v25 = *(unsigned __int16 *)((char *)v24 + v23);
        if (!v25) {
          goto LABEL_55;
        }
        if (v22 == 15)
        {
          unint64_t v26 = (unsigned __int16 *)((char *)*v7 - **v7);
          if (*v26 >= 5u && (uint64_t v27 = v26[2]) != 0) {
            unint64_t v28 = (char *)*v7 + v27 + *(unsigned int *)((char *)*v7 + v27);
          }
          else {
            unint64_t v28 = 0;
          }
          if (v18 < 7)
          {
            uint64_t v30 = 0;
          }
          else
          {
            uint64_t v30 = (int *)v17[3];
            if (v30) {
              uint64_t v30 = (int *)((char *)v30 + (void)v16 + *(unsigned int *)((char *)v30 + (void)v16));
            }
          }
          int64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
          if (*v31 >= 9u && (uint64_t v32 = v31[4]) != 0) {
            uint64_t v33 = *(unsigned int *)((char *)v30 + v32);
          }
          else {
            uint64_t v33 = 0xFFFFFFFFLL;
          }
          uint64_t v29 = &v28[4 * v33 + 4 + *(unsigned int *)&v28[4 * v33 + 4]];
          uint64_t v34 = &v29[-*(int *)v29];
          if (*(unsigned __int16 *)v34 >= 9u)
          {
            uint64_t v35 = *((unsigned __int16 *)v34 + 4);
            if (v35)
            {
              if (v29[v35]) {
                goto LABEL_55;
              }
            }
          }
        }
        else
        {
          uint64_t v29 = 0;
        }
        unint64_t v36 = (int *)((char *)a3 + v25);
        uint64_t v38 = v7[3];
        unint64_t v37 = v7[4];
        if (*(void *)v38 == *((void *)v38 + 1)) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = *(void *)v38;
        }
        uint64_t v40 = ((uint64_t)v36 - v39) >> 2;
        if (!*((unsigned char *)v37 + v40))
        {
          uint64_t v41 = *v36;
          uint64_t v42 = (int *)((char *)v36 + v41);
          uint64_t v43 = v7[1];
          if (v43 >= v36 && v43 <= v42)
          {
            int *v36 = *((_DWORD *)v7 + 4) + v41;
            *((unsigned char *)v37 + v40) = 1;
          }
          if (v22 == 16)
          {
            uint64_t v48 = v14;
            uint64_t v49 = (int *)((char *)v36 + v41);
            uint64_t v50 = sub_20DC661EC(*v7, a2, v16, a3);
            uint64_t v42 = v49;
            BOOL v14 = v48;
            uint64_t v29 = v50;
LABEL_54:
            uint64_t v51 = v14;
            uint64_t result = sub_20DC6820C(v7, v29, v42);
            BOOL v14 = v51;
            goto LABEL_55;
          }
          if (v22 == 15) {
            goto LABEL_54;
          }
          if (v22 != 14) {
            goto LABEL_55;
          }
          uint64_t v45 = (unsigned __int16 *)((char *)v16 - *v16);
          unsigned int v46 = *v45;
          if (v46 < 7)
          {
            uint64_t v47 = 0;
          }
          else
          {
            uint64_t v47 = (int *)v45[3];
            if (v45[3]) {
              uint64_t v47 = (int *)((char *)v47 + (void)v16 + *(unsigned int *)((char *)v47 + (void)v16));
            }
          }
          uint64_t v52 = (unsigned __int16 *)((char *)v47 - *v47);
          if (*v52 < 7u) {
            goto LABEL_55;
          }
          uint64_t v53 = v52[3];
          if (!v53) {
            goto LABEL_55;
          }
          uint64_t result = *((unsigned __int8 *)v47 + v53);
          if ((result & 0xFFFFFFFD) != 0xD) {
            goto LABEL_55;
          }
          if (result == 15)
          {
            uint64_t v54 = (unsigned __int16 *)((char *)*v7 - **v7);
            if (*v54 >= 5u && (uint64_t v55 = v54[2]) != 0) {
              uint64_t v56 = (char *)*v7 + v55 + *(unsigned int *)((char *)*v7 + v55);
            }
            else {
              uint64_t v56 = 0;
            }
            if (v46 < 7)
            {
              uint64_t v57 = 0;
            }
            else
            {
              uint64_t v57 = (int *)v45[3];
              if (v57) {
                uint64_t v57 = (int *)((char *)v57 + (void)v16 + *(unsigned int *)((char *)v57 + (void)v16));
              }
            }
            uint64_t v58 = (unsigned __int16 *)((char *)v57 - *v57);
            if (*v58 >= 9u && (uint64_t v59 = v58[4]) != 0) {
              uint64_t v60 = *(unsigned int *)((char *)v57 + v59);
            }
            else {
              uint64_t v60 = 0xFFFFFFFFLL;
            }
            uint64_t v80 = &v56[4 * v60 + 4 + *(unsigned int *)&v56[4 * v60 + 4]];
            uint64_t v61 = &v80[-*(int *)v80];
            if (*(unsigned __int16 *)v61 >= 9u)
            {
              uint64_t v62 = *((unsigned __int16 *)v61 + 4);
              if (v62)
              {
                if (v80[v62]) {
                  goto LABEL_55;
                }
              }
            }
          }
          else
          {
            uint64_t v80 = 0;
          }
          if (*v42)
          {
            unint64_t v63 = 0;
            uint64_t v64 = (char *)v14 + v25;
            uint64_t v65 = (char *)v14 + v25;
            uint64_t v78 = v42;
            uint64_t v79 = v14;
            uint64_t v77 = v41;
            unsigned int v76 = result;
            do
            {
              uint64_t v67 = v7[3];
              uint64_t v66 = v7[4];
              if (*(void *)v67 == *((void *)v67 + 1)) {
                uint64_t v68 = 0;
              }
              else {
                uint64_t v68 = *(void *)v67;
              }
              uint64_t v69 = (uint64_t)&v64[v41 - v68] >> 2;
              if (!*((unsigned char *)v66 + v69))
              {
                uint64_t v70 = *(unsigned int *)&v65[v41];
                unint64_t v71 = (unint64_t)&v65[v41 + v70];
                unint64_t v72 = v7[1];
                if (v72 >= (int *)&v65[v41] && (unint64_t)v72 <= v71)
                {
                  *(_DWORD *)&v65[v41] = *((_DWORD *)v7 + 4) + v70;
                  *((unsigned char *)v66 + v69) = 1;
                }
                if (result == 15)
                {
                  sub_20DC6820C(v7, v80, v71);
                  uint64_t result = v76;
                  uint64_t v41 = v77;
                  uint64_t v42 = v78;
                  BOOL v14 = v79;
                }
              }
              ++v63;
              v65 += 4;
              v64 += 4;
            }
            while (v63 < *v42);
          }
        }
LABEL_55:
        if (++v15 == &v13[*v13 + 1])
        {
          unsigned int v10 = v7[1];
          break;
        }
      }
    }
    if (v10 >= a3 && v10 <= v9)
    {
      *a3 -= *((_DWORD *)v7 + 4);
      uint64_t v74 = v7[3];
      if (*(void *)v74 == *((void *)v74 + 1)) {
        uint64_t v75 = 0;
      }
      else {
        uint64_t v75 = *(void *)v74;
      }
      uint64_t v5 = (char *)v7[4] + (((uint64_t)a3 - v75) >> 2);
LABEL_101:
      *uint64_t v5 = 1;
    }
  }
  return result;
}

uint64_t sub_20DC68700(void *a1, void *__src, size_t __n)
{
  if (!a1[11]) {
    operator new();
  }
  uint64_t v5 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v6 = a1[4];
  uint64_t v7 = sub_20DC4F638((uint64_t)a1, __src, __n);
  uint64_t v8 = v7;
  unsigned int v9 = (uint64_t **)a1[11];
  unsigned int v10 = v9 + 1;
  unsigned int v11 = v9[1];
  if (v11)
  {
    int v43 = v5;
    int v44 = v6;
    int v45 = v4;
    uint64_t v12 = v9[3][5] + v9[3][4];
    unsigned int v46 = v7;
    unint64_t v13 = (unsigned int *)(v12 - v7);
    unsigned int v16 = *v13;
    BOOL v14 = v13 + 1;
    unsigned int v15 = v16;
    size_t v17 = v9 + 1;
    unsigned int v18 = v9[1];
    do
    {
      uint64_t v19 = *((unsigned int *)v18 + 7);
      unsigned int v20 = *(_DWORD *)(v12 - v19);
      if (v15 >= v20) {
        size_t v21 = v20;
      }
      else {
        size_t v21 = v15;
      }
      int v22 = memcmp((const void *)(v12 - v19 + 4), v14, v21);
      BOOL v23 = v20 < v15;
      if (v22) {
        BOOL v23 = v22 < 0;
      }
      BOOL v24 = !v23;
      if (v23) {
        uint64_t v25 = (uint64_t **)(v18 + 1);
      }
      else {
        uint64_t v25 = (uint64_t **)v18;
      }
      if (v24) {
        size_t v17 = (uint64_t **)v18;
      }
      unsigned int v18 = *v25;
    }
    while (*v25);
    if (v10 == v17)
    {
      uint64_t v8 = v46;
      goto LABEL_23;
    }
    uint64_t v26 = *((unsigned int *)v17 + 7);
    unsigned int v27 = *(_DWORD *)(v12 - v26);
    if (v27 >= v15) {
      size_t v28 = v15;
    }
    else {
      size_t v28 = v27;
    }
    int v29 = memcmp(v14, (const void *)(v12 - v26 + 4), v28);
    BOOL v30 = v15 < v27;
    if (v29) {
      BOOL v30 = v29 < 0;
    }
    uint64_t v8 = v46;
    if (v30)
    {
      while (1)
      {
        while (1)
        {
LABEL_23:
          int64_t v31 = v11;
          uint64_t v32 = *((unsigned int *)v11 + 7);
          uint64_t v33 = (const void *)(v12 - v32 + 4);
          unsigned int v34 = *(_DWORD *)(v12 - v32);
          if (v34 >= v15) {
            size_t v35 = v15;
          }
          else {
            size_t v35 = v34;
          }
          int v36 = memcmp(v14, (const void *)(v12 - v32 + 4), v35);
          BOOL v37 = v15 < v34;
          if (v36) {
            BOOL v37 = v36 < 0;
          }
          if (!v37) {
            break;
          }
          unsigned int v11 = (uint64_t *)*v11;
          unsigned int v10 = (uint64_t **)v31;
          if (!*v31) {
            goto LABEL_35;
          }
        }
        int v38 = memcmp(v33, v14, v35);
        BOOL v39 = v34 < v15;
        if (v38) {
          BOOL v39 = v38 < 0;
        }
        if (!v39) {
          break;
        }
        unsigned int v11 = (uint64_t *)v11[1];
        if (!v11)
        {
          unsigned int v10 = (uint64_t **)(v31 + 1);
          goto LABEL_35;
        }
      }
    }
    else
    {
      a1[6] += *((_DWORD *)a1 + 8) + v45 - (v44 + v43 + a1[6]) + *((_DWORD *)a1 + 10);
      return v26;
    }
  }
  else
  {
    int64_t v31 = (uint64_t *)(v9 + 1);
LABEL_35:
    uint64_t v40 = operator new(0x20uLL);
    v40[7] = v8;
    *(void *)uint64_t v40 = 0;
    *((void *)v40 + 1) = 0;
    *((void *)v40 + 2) = v31;
    *unsigned int v10 = (uint64_t *)v40;
    uint64_t v41 = (uint64_t *)**v9;
    if (v41)
    {
      int *v9 = v41;
      uint64_t v40 = *v10;
    }
    sub_20DC5007C(v9[1], (uint64_t *)v40);
    void v9[2] = (uint64_t *)((char *)v9[2] + 1);
  }
  return v8;
}

uint64_t sub_20DC6898C(const char **a1, unsigned int *a2)
{
  unint64_t v2 = (int *)((char *)a2 + *a2);
  unint64_t v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 >= 5u && (uint64_t v4 = v3[2]) != 0) {
    uint64_t v5 = (char *)v2 + v4 + *(unsigned int *)((char *)v2 + v4);
  }
  else {
    uint64_t v5 = 0;
  }
  return -strcmp(v5 + 4, *a1);
}

uint64_t sub_20DC689E8(unsigned __int8 *a1, unsigned int *a2)
{
  unint64_t v2 = (int *)((char *)a2 + *a2);
  uint64_t v3 = *a1;
  uint64_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 >= 7u && (uint64_t v5 = v4[3]) != 0) {
    uint64_t v6 = *(void *)((char *)v2 + v5);
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v7 = v6 < v3;
  BOOL v8 = v6 > v3;
  int v9 = v7;
  return (v9 - v8);
}

void *sub_20DC68A30(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x210568940](a1 + 2);
  std::istream::~istream();
  MEMORY[0x210568AB0](a1 + 53);
  return a1;
}

uint64_t flatbuffers::DirExists(flatbuffers *this, const char *a2)
{
  if (stat((const char *)this, &v3)) {
    return 0;
  }
  else {
    return (v3.st_mode >> 14) & 1;
  }
}

uint64_t sub_20DC68B30(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 24;
  uint64_t v3 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(void *)a1 = v2;
  *(void *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

uint64_t (*flatbuffers::SetLoadFileFunction(uint64_t (*a1)(void)))(void)
{
  uint64_t v1 = off_26B496488;
  if (a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = (uint64_t (*)(void))flatbuffers::LoadFileRaw;
  }
  off_26B496488 = v2;
  return v1;
}

uint64_t (*flatbuffers::SetFileExistsFunction(flatbuffers *this, BOOL (*a2)(const char *)))(flatbuffers *__hidden this, const char *)
{
  uint64_t v2 = off_26B496490;
  if (this) {
    uint64_t v3 = (uint64_t (*)(flatbuffers *__hidden, const char *))this;
  }
  else {
    uint64_t v3 = (uint64_t (*)(flatbuffers *__hidden, const char *))flatbuffers::FileExistsRaw;
  }
  off_26B496490 = v3;
  return v2;
}

BOOL flatbuffers::SaveFile(flatbuffers *this, const char *a2, const char *a3)
{
  v12[19] = *MEMORY[0x263EF8340];
  uint64_t v3 = MEMORY[0x263F8C310] + 24;
  uint64_t v4 = MEMORY[0x263F8C310] + 64;
  v12[0] = MEMORY[0x263F8C310] + 64;
  uint64_t v5 = (uint64_t *)MEMORY[0x263F8C2B0];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *(void *)((char *)&v11[-1] + *(void *)(v10 - 24)) = v6;
  BOOL v7 = (std::ios_base *)((char *)&v11[-1] + *(void *)(v10 - 24));
  std::ios_base::init(v7, v11);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v10 = v3;
  v12[0] = v4;
  MEMORY[0x210568930](v11);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)&v11[-1] + *(void *)(v10 - 24)), *(_DWORD *)((char *)&v11[3] + *(void *)(v10 - 24)) | 4);
  }
  if (v11[15])
  {
    std::ostream::write();
    BOOL v8 = (*((unsigned char *)&v11[3] + *(void *)(v10 - 24)) & 1) == 0;
  }
  else
  {
    BOOL v8 = 0;
  }
  uint64_t v10 = *v5;
  *(void *)((char *)&v11[-1] + *(void *)(v10 - 24)) = v5[3];
  MEMORY[0x210568940](v11);
  std::ostream::~ostream();
  MEMORY[0x210568AB0](v12);
  return v8;
}

std::string *flatbuffers::StripExtension@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t result = (std::string *)std::string::rfind((const std::string *)a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (result != (std::string *)-1) {
    return std::string::basic_string(a2, (const std::string *)a1, 0, (std::string::size_type)result, (std::allocator<char> *)&v7);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v5 = *(const void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    return (std::string *)sub_20DC55634((uint64_t)a2, v5, v6);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return result;
}

std::string *flatbuffers::GetExtension@<X0>(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (std::string *)std::string::rfind(a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (result != (std::string *)-1) {
    return std::string::basic_string((std::string *)a2, a1, (std::string::size_type)result->__r_.__value_.__r.__words + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v5);
  }
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  return result;
}

std::string *flatbuffers::StripPath@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  int v2 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  uint64_t v3 = (const void *)__str->__r_.__value_.__r.__words[0];
  unint64_t size = __str->__r_.__value_.__l.__size_;
  if (v2 >= 0) {
    char v5 = __str;
  }
  else {
    char v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v2 < 0) {
    std::string::size_type v6 = __str->__r_.__value_.__l.__size_;
  }
  char v7 = (char *)&v5[-1].__r_.__value_.__r.__words[2] + 7;
  while (v6)
  {
    int v8 = v7[v6--];
    if (v8 == 92 || v8 == 47)
    {
      if (v6 != -1) {
        return std::string::basic_string(a2, __str, v6 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v9);
      }
      break;
    }
  }
  if (v2 < 0)
  {
    return (std::string *)sub_20DC55634((uint64_t)a2, v3, size);
  }
  else
  {
    *a2 = *__str;
  }
  return __str;
}

std::string *flatbuffers::StripFileName@<X0>(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  int v2 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    int v2 = __str;
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  uint64_t v4 = (char *)&v2[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    int v5 = v4[size--];
    if (v5 == 92 || v5 == 47)
    {
      if (size != -1) {
        return std::string::basic_string((std::string *)a2, __str, 0, size, (std::allocator<char> *)&v6);
      }
      break;
    }
  }
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  return __str;
}

void flatbuffers::EnsureDirExists(uint64_t a1)
{
  flatbuffers::StripFileName((std::string *)a1, (uint64_t)__p);
  int v2 = (void *)(v5 & 0x7F);
  if (v5 < 0) {
    int v2 = __p[1];
  }
  if (v2) {
    flatbuffers::EnsureDirExists(__p);
  }
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const char *)a1;
  }
  else {
    uint64_t v3 = *(const char **)a1;
  }
  mkdir(v3, 0x1E8u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

flatbuffers::ClassicLocale *flatbuffers::ClassicLocale::ClassicLocale(flatbuffers::ClassicLocale *this)
{
  *(void *)this = newlocale(0, "C", 0);
  return this;
}

{
  *(void *)this = newlocale(0, "C", 0);
  return this;
}

void flatbuffers::ClassicLocale::~ClassicLocale(locale_t *this)
{
}

{
  freelocale(*this);
}

uint64_t flatbuffers::ClassicLocale::Get(flatbuffers::ClassicLocale *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26772D550, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26772D550))
  {
    qword_26772D548 = (uint64_t)newlocale(0, "C", 0);
    __cxa_atexit((void (*)(void *))flatbuffers::ClassicLocale::~ClassicLocale, &qword_26772D548, &dword_20DC37000);
    __cxa_guard_release(&qword_26772D550);
  }
  return qword_26772D548;
}

std::string *flatbuffers::RemoveStringQuotes@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  char v2 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  uint64_t v3 = (const void *)__str->__r_.__value_.__r.__words[0];
  unint64_t size = __str->__r_.__value_.__l.__size_;
  if (v2 >= 0) {
    char v5 = __str;
  }
  else {
    char v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  unint64_t v6 = v2 & 0x7E;
  if (v2 < 0) {
    unint64_t v6 = __str->__r_.__value_.__l.__size_;
  }
  if (v6 >= 2)
  {
    int v7 = v5->__r_.__value_.__s.__data_[0];
    if (v7 == 39 || v7 == 34)
    {
      std::string::size_type v8 = v2 >= 0 ? v2 & 0x7F : __str->__r_.__value_.__l.__size_;
      if (v7 == v5->__r_.__value_.__s.__data_[v8 - 1]) {
        return std::string::basic_string(a2, __str, 1uLL, v8 - 2, (std::allocator<char> *)&v9);
      }
    }
  }
  if ((*((unsigned char *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    return (std::string *)sub_20DC55634((uint64_t)a2, v3, size);
  }
  else
  {
    *a2 = *__str;
  }
  return __str;
}

BOOL flatbuffers::SetGlobalTestLocale(char *a1, uint64_t a2)
{
  uint64_t v3 = setlocale(0, a1);
  uint64_t v4 = v3;
  if (!a2 || !v3) {
    return v4 != 0;
  }
  size_t v5 = strlen(v3);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (long long *)operator new(v8 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v12 = v9 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = v5;
    p_dst = &__dst;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(p_dst, v4, v6);
LABEL_11:
  *((unsigned char *)p_dst + v6) = 0;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v12;
  return v4 != 0;
}

BOOL flatbuffers::ReadEnvironmentVariable(const char *a1, uint64_t a2)
{
  uint64_t v3 = getenv(a1);
  uint64_t v4 = v3;
  if (!a2 || !v3) {
    return v4 != 0;
  }
  size_t v5 = strlen(v3);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (long long *)operator new(v8 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v12 = v9 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = v5;
    p_dst = &__dst;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(p_dst, v4, v6);
LABEL_11:
  *((unsigned char *)p_dst + v6) = 0;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v12;
  return v4 != 0;
}

uint64_t flatbuffers::HideAppleInternal(flatbuffers *this)
{
  return 0;
}

void flatbuffers::Parser::Message(uint64_t a1)
{
  uint64_t v3 = (std::string *)(a1 + 312);
  if (*(char *)(a1 + 335) < 0) {
    uint64_t v4 = *(void *)(a1 + 320);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 335);
  }
  if (v4) {
    std::string::append((std::string *)(a1 + 312), "\n");
  }
  if (*(char *)(a1 + 1175) < 0) {
    uint64_t v5 = *(void *)(a1 + 1160);
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 1175);
  }
  if (v5)
  {
    flatbuffers::AbsolutePath((const char *)(a1 + 1152), &v25);
    LOBYTE(v5) = *((unsigned char *)&v25.__r_.__value_.__s + 23);
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
  }
  else
  {
    *((unsigned char *)&v25.__r_.__value_.__s + 23) = 0;
    v25.__r_.__value_.__s.__data_[0] = 0;
  }
  BOOL v6 = (v5 & 0x80u) != 0;
  if ((v5 & 0x80u) == 0) {
    int v7 = &v25;
  }
  else {
    int v7 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v8 = v5 & 0x7F;
  if (v6) {
    std::string::size_type v9 = size;
  }
  else {
    std::string::size_type v9 = v8;
  }
  std::string::append(v3, (const std::string::value_type *)v7, v9);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 1175) < 0) {
    uint64_t v10 = *(void *)(a1 + 1160);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 1175);
  }
  if (v10) {
    std::string::append(v3, ":");
  }
  sub_20DC3C4E4();
  unsigned int v11 = std::string::append(&v23, ": ");
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  sub_20DC3C654();
  if (v22 >= 0) {
    unint64_t v13 = __p;
  }
  else {
    unint64_t v13 = (void **)__p[0];
  }
  if (v22 >= 0) {
    std::string::size_type v14 = v22 & 0x7F;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  unsigned int v15 = std::string::append(&v24, (const std::string::value_type *)v13, v14);
  std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v17 = &v25;
  }
  else {
    size_t v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = *((unsigned char *)&v25.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v18 = v25.__r_.__value_.__l.__size_;
  }
  std::string::append(v3, (const std::string::value_type *)v17, v18);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::operator+<char>();
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v25;
  }
  else {
    uint64_t v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = *((unsigned char *)&v25.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v20 = v25.__r_.__value_.__l.__size_;
  }
  std::string::append(v3, (const std::string::value_type *)v19, v20);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void flatbuffers::Parser::Warning(uint64_t a1)
{
  std::operator+<char>();
  flatbuffers::Parser::Message(a1);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void flatbuffers::Parser::Error(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  std::operator+<char>();
  flatbuffers::Parser::Message(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
  *a2 = 1;
}

void flatbuffers::Parser::RecurseError(flatbuffers::Parser *this@<X0>, _WORD *a2@<X8>)
{
  sub_20DC3C4E4();
  uint64_t v4 = std::string::insert(&v8, 0, "maximum parsing recursion of ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  BOOL v6 = std::string::append(&v9, " reached");
  std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
  long long v10 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type v11 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error((uint64_t)this, a2);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void flatbuffers::Namespace::GetFullyQualifiedName(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (!a3 || (uint64_t v7 = *a1, v8 = a1[1], *a1 == v8))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      uint64_t v26 = *(const void **)a2;
      unint64_t v27 = *(void *)(a2 + 8);
      sub_20DC55634((uint64_t)a4, v26, v27);
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3);
    if (v10 >= a3) {
      unint64_t v10 = a3;
    }
    if (v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        if (v12)
        {
          std::string::push_back(a4, 46);
          uint64_t v7 = *a1;
        }
        unint64_t v13 = (long long *)(v7 + v11);
        if (*((char *)v13 + 23) < 0)
        {
          sub_20DC55634((uint64_t)__p, *(const void **)v13, *((void *)v13 + 1));
        }
        else
        {
          long long v14 = *v13;
          uint64_t v29 = *((void *)v13 + 2);
          *(_OWORD *)std::string __p = v14;
        }
        if (v29 >= 0) {
          unsigned int v15 = __p;
        }
        else {
          unsigned int v15 = (void **)__p[0];
        }
        if (v29 >= 0) {
          std::string::size_type v16 = HIBYTE(v29) & 0x7F;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)__p[1];
        }
        std::string::append(a4, (const std::string::value_type *)v15, v16);
        if (SHIBYTE(v29) < 0) {
          operator delete(__p[0]);
        }
        ++v12;
        uint64_t v7 = *a1;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
        if (v17 >= a3) {
          unint64_t v17 = a3;
        }
        v11 += 24;
      }
      while (v12 < v17);
    }
    char v18 = *(unsigned char *)(a2 + 23);
    int v19 = v18;
    uint64_t v20 = v18 & 0x7F;
    if (v19 < 0) {
      uint64_t v20 = *(void *)(a2 + 8);
    }
    if (v20)
    {
      std::string::push_back(a4, 46);
      char v21 = *(unsigned char *)(a2 + 23);
      BOOL v22 = v21 < 0;
      if (v21 >= 0) {
        std::string v23 = (const std::string::value_type *)a2;
      }
      else {
        std::string v23 = *(const std::string::value_type **)a2;
      }
      std::string::size_type v24 = v21 & 0x7F;
      if (v22) {
        std::string::size_type v25 = *(void *)(a2 + 8);
      }
      else {
        std::string::size_type v25 = v24;
      }
      std::string::append(a4, v23, v25);
    }
  }
}

char *flatbuffers::Parser::TokenToStringId@<X0>(char *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (a2 != 260) {
    return (char *)sub_20DC3C7C4(a3, a2);
  }
  if (this[55] < 0) {
    return (char *)sub_20DC55634((uint64_t)a3, *((const void **)this + 4), *((void *)this + 5));
  }
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
  a3->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  return this;
}

void flatbuffers::Parser::ParseHexNum(char **this@<X0>, unint64_t *a2@<X2>, int a3@<W1>, _WORD *a4@<X8>)
{
  if (a3 < 1)
  {
LABEL_8:
    sub_20DC58860(__p, *this, &(*this)[a3], a3);
    if (v24 >= 0) {
      unint64_t v13 = (char *)__p;
    }
    else {
      unint64_t v13 = (char *)__p[0];
    }
    v22.__r_.__value_.__r.__words[0] = 0;
    BOOL v14 = sub_20DC4F514((flatbuffers::ClassicLocale *)&v22, v13, 16, 1);
    unint64_t v15 = v22.__r_.__value_.__r.__words[0];
    if (!v14) {
      unint64_t v15 = 0;
    }
    *a2 = v15;
    *this += a3;
    *a4 = 0;
    if (SHIBYTE(v24) < 0)
    {
      std::string::size_type v16 = __p[0];
LABEL_16:
      operator delete(v16);
    }
  }
  else
  {
    uint64_t v8 = a3;
    std::string v9 = *this;
    while (1)
    {
      int v10 = *v9++;
      unsigned int v11 = (v10 & 0xFFFFFFDF) - 65;
      if ((v10 - 48) >= 0xA && v11 >= 6) {
        break;
      }
      if (!--v8) {
        goto LABEL_8;
      }
    }
    sub_20DC3C4E4();
    unint64_t v17 = std::string::insert(&v21, 0, "escape code must be followed by ");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    int v19 = std::string::append(&v22, " hex digits");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    uint64_t v24 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error((uint64_t)this, a4);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v16 = (void *)v21.__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
  }
}

void flatbuffers::Parser::SkipByteOrderMark(unsigned __int8 **this@<X0>, _WORD *a2@<X8>)
{
  char v3 = *this;
  if (**this != 239) {
    goto LABEL_5;
  }
  *this = v3 + 1;
  if (v3[1] == 187)
  {
    *this = v3 + 2;
    if (v3[2] == 191)
    {
      *this = v3 + 3;
LABEL_5:
      *a2 = 0;
      return;
    }
  }
  std::string __p = (char *)operator new(0x20uLL);
  strcpy(__p, "invalid utf-8 byte order mark");
  flatbuffers::Parser::Error((uint64_t)this, a2);
  operator delete(__p);
}

void flatbuffers::Parser::Expect(flatbuffers::Parser *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*((_DWORD *)this + 5) == a2)
  {
    flatbuffers::Parser::Next(this, a3);
    *(unsigned char *)(a3 + 1) = 1;
    if (!*(unsigned char *)a3) {
      *(_WORD *)a3 = 0;
    }
  }
  else
  {
    sub_20DC3C7C4(&v14, a2);
    std::string::size_type v5 = std::string::insert(&v14, 0, "expecting: ");
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v15, " instead got: ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::TokenToStringId((char *)this, *((_DWORD *)this + 5), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    unsigned int v11 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v17 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a3);
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)v17);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
}

void flatbuffers::Parser::ParseNamespacing(flatbuffers::Parser *this@<X0>, std::string *a2@<X1>, std::string *a3@<X2>, unsigned char *a4@<X8>)
{
  std::string::size_type v8 = (const std::string *)((char *)this + 32);
  while (*((_DWORD *)this + 5) == 46)
  {
    flatbuffers::Parser::Next(this, (uint64_t)a4);
    a4[1] = 1;
    if (!*a4)
    {
      std::string::append(a2, ".");
      char v9 = *((unsigned char *)this + 55);
      BOOL v10 = v9 < 0;
      unsigned int v11 = v9 >= 0 ? (const std::string::value_type *)v8 : (const std::string::value_type *)*((void *)this + 4);
      uint64_t v12 = v9 & 0x7F;
      std::string::size_type v13 = v10 ? *((void *)this + 5) : v12;
      std::string::append(a2, v11, v13);
      if (a3) {
        std::string::operator=(a3, v8);
      }
      flatbuffers::Parser::Expect(this, 260, (uint64_t)a4);
      a4[1] = 1;
      if (!*a4) {
        continue;
      }
    }
    return;
  }
  *(_WORD *)a4 = 0;
}

void flatbuffers::Parser::ParseTypeIdent(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (*(char *)(a1 + 55) < 0) {
    sub_20DC55634((uint64_t)&__p, *(const void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string __p = *(std::string *)(a1 + 32);
  }
  flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 260, (uint64_t)a3);
  a3[1] = 1;
  if (!*a3)
  {
    flatbuffers::Parser::ParseNamespacing((flatbuffers::Parser *)a1, &__p, 0, a3);
    a3[1] = 1;
    if (!*a3)
    {
      uint64_t v6 = flatbuffers::Parser::LookupEnum(a1, (uint64_t)&__p);
      if (v6)
      {
        long long v7 = *(_OWORD *)(v6 + 152);
        *(_OWORD *)(a2 + 10) = *(_OWORD *)(v6 + 162);
        *(_OWORD *)a2 = v7;
        if (*(unsigned char *)(v6 + 148)) {
          *(_DWORD *)a2 = 16;
        }
      }
      else
      {
        *(_DWORD *)a2 = 15;
        *(void *)(a2 + 8) = flatbuffers::Parser::LookupCreateStruct(a1, (uint64_t)&__p, 1, 0);
      }
      *(_WORD *)a3 = 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void flatbuffers::Parser::ParseType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 20);
  if (v6 != 91)
  {
    if (v6 != 260)
    {
      HIBYTE(__p[2]) = 19;
      strcpy((char *)__p, "illegal type syntax");
      flatbuffers::Parser::Error(a1, (_WORD *)a3);
      return;
    }
    if (sub_20DC3D8C0((void *)(a1 + 32), "BOOL"))
    {
      int v7 = 2;
LABEL_5:
      *(_DWORD *)a2 = v7;
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
      goto LABEL_6;
    }
    if (*(_DWORD *)(a1 + 20) == 260)
    {
      if (sub_20DC3D8C0((void *)(a1 + 32), "byte"))
      {
LABEL_12:
        int v7 = 3;
        goto LABEL_5;
      }
      if (*(_DWORD *)(a1 + 20) == 260)
      {
        if (sub_20DC3D8C0((void *)(a1 + 32), "int8")) {
          goto LABEL_12;
        }
        if (*(_DWORD *)(a1 + 20) == 260)
        {
          if (sub_20DC3D8C0((void *)(a1 + 32), "ubyte"))
          {
LABEL_17:
            int v7 = 4;
            goto LABEL_5;
          }
          if (*(_DWORD *)(a1 + 20) == 260)
          {
            if (sub_20DC3D8C0((void *)(a1 + 32), "uint8")) {
              goto LABEL_17;
            }
            if (*(_DWORD *)(a1 + 20) == 260)
            {
              if (sub_20DC3D8C0((void *)(a1 + 32), "short"))
              {
LABEL_25:
                int v7 = 5;
                goto LABEL_5;
              }
              if (*(_DWORD *)(a1 + 20) == 260)
              {
                if (sub_20DC3D8C0((void *)(a1 + 32), "int16")) {
                  goto LABEL_25;
                }
                if (*(_DWORD *)(a1 + 20) == 260)
                {
                  if (sub_20DC3D8C0((void *)(a1 + 32), "ushort"))
                  {
LABEL_46:
                    int v7 = 6;
                    goto LABEL_5;
                  }
                  if (*(_DWORD *)(a1 + 20) == 260)
                  {
                    if (sub_20DC3D8C0((void *)(a1 + 32), "uint16")) {
                      goto LABEL_46;
                    }
                    if (*(_DWORD *)(a1 + 20) == 260)
                    {
                      if (sub_20DC3D8C0((void *)(a1 + 32), "int"))
                      {
LABEL_51:
                        int v7 = 7;
                        goto LABEL_5;
                      }
                      if (*(_DWORD *)(a1 + 20) == 260)
                      {
                        if (sub_20DC3D8C0((void *)(a1 + 32), "int32")) {
                          goto LABEL_51;
                        }
                        if (*(_DWORD *)(a1 + 20) == 260)
                        {
                          if (sub_20DC3D8C0((void *)(a1 + 32), "uint"))
                          {
LABEL_61:
                            int v7 = 8;
                            goto LABEL_5;
                          }
                          if (*(_DWORD *)(a1 + 20) == 260)
                          {
                            if (sub_20DC3D8C0((void *)(a1 + 32), "uint32")) {
                              goto LABEL_61;
                            }
                            if (*(_DWORD *)(a1 + 20) == 260)
                            {
                              if (sub_20DC3D8C0((void *)(a1 + 32), "long"))
                              {
LABEL_68:
                                int v7 = 9;
                                goto LABEL_5;
                              }
                              if (*(_DWORD *)(a1 + 20) == 260)
                              {
                                if (sub_20DC3D8C0((void *)(a1 + 32), "int64")) {
                                  goto LABEL_68;
                                }
                                if (*(_DWORD *)(a1 + 20) == 260)
                                {
                                  if (sub_20DC3D8C0((void *)(a1 + 32), "ulong"))
                                  {
LABEL_73:
                                    int v7 = 10;
                                    goto LABEL_5;
                                  }
                                  if (*(_DWORD *)(a1 + 20) == 260)
                                  {
                                    if (sub_20DC3D8C0((void *)(a1 + 32), "uint64")) {
                                      goto LABEL_73;
                                    }
                                    if (*(_DWORD *)(a1 + 20) == 260)
                                    {
                                      if (sub_20DC3D8C0((void *)(a1 + 32), "half"))
                                      {
LABEL_78:
                                        int v7 = -4;
                                        goto LABEL_5;
                                      }
                                      if (*(_DWORD *)(a1 + 20) == 260)
                                      {
                                        if (sub_20DC3D8C0((void *)(a1 + 32), "float16")) {
                                          goto LABEL_78;
                                        }
                                        if (*(_DWORD *)(a1 + 20) == 260)
                                        {
                                          if (sub_20DC3D8C0((void *)(a1 + 32), "float"))
                                          {
LABEL_83:
                                            int v7 = 11;
                                            goto LABEL_5;
                                          }
                                          if (*(_DWORD *)(a1 + 20) == 260)
                                          {
                                            if (sub_20DC3D8C0((void *)(a1 + 32), "float32")) {
                                              goto LABEL_83;
                                            }
                                            if (*(_DWORD *)(a1 + 20) == 260)
                                            {
                                              if (sub_20DC3D8C0((void *)(a1 + 32), "double"))
                                              {
LABEL_88:
                                                int v7 = 12;
                                                goto LABEL_5;
                                              }
                                              if (*(_DWORD *)(a1 + 20) == 260)
                                              {
                                                if (sub_20DC3D8C0((void *)(a1 + 32), "float64")) {
                                                  goto LABEL_88;
                                                }
                                                if (*(_DWORD *)(a1 + 20) == 260
                                                  && sub_20DC3D8C0((void *)(a1 + 32), "string"))
                                                {
                                                  int v7 = 13;
                                                  goto LABEL_5;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    flatbuffers::Parser::ParseTypeIdent(a1, a2, (unsigned char *)a3);
LABEL_6:
    *(unsigned char *)(a3 + 1) = 1;
    if (!*(unsigned char *)a3) {
      *(_WORD *)a3 = 0;
    }
    return;
  }
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
  *(unsigned char *)(a3 + 1) = 1;
  if (!*(unsigned char *)a3)
  {
    memset(__p, 0, sizeof(__p));
    __int16 v16 = 0;
    int v8 = *(_DWORD *)(a1 + 1204);
    if (v8 < 64)
    {
      *(_DWORD *)(a1 + 1204) = v8 + 1;
      flatbuffers::Parser::ParseType(a1, __p);
      --*(_DWORD *)(a1 + 1204);
    }
    else
    {
      flatbuffers::Parser::RecurseError((flatbuffers::Parser *)a1, (_WORD *)a3);
    }
    *(unsigned char *)(a3 + 1) = 1;
    if (!*(unsigned char *)a3)
    {
      int v9 = (int)__p[0];
      if (LODWORD(__p[0]) == 17 || LODWORD(__p[0]) == 14)
      {
        std::string::size_type v13 = (char *)operator new(0x38uLL);
        long long v14 = xmmword_20DC7CCA0;
        strcpy(v13, "nested vector types not supported (wrap in table first)");
      }
      else
      {
        if (*(_DWORD *)(a1 + 20) != 58)
        {
          *(_DWORD *)a2 = 14;
          *(_OWORD *)(a2 + 8) = *(_OWORD *)&__p[1];
          *(_WORD *)(a2 + 24) = 0;
LABEL_56:
          *(_DWORD *)(a2 + 4) = v9;
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 93, a3);
          goto LABEL_6;
        }
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
        *(unsigned char *)(a3 + 1) = 1;
        if (*(unsigned char *)a3) {
          return;
        }
        if (*(_DWORD *)(a1 + 20) == 258)
        {
          BOOL v10 = (char *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            BOOL v10 = *(char **)v10;
          }
          std::string::size_type v13 = 0;
          BOOL v11 = sub_20DC50648((flatbuffers::ClassicLocale *)&v13, v10, 0, 0);
          __int16 v12 = -1;
          if ((unint64_t)v13 < 0xFFFF) {
            __int16 v12 = (__int16)v13;
          }
          if (v11 && !((unint64_t)v13 >> 16) && v12)
          {
            *(void *)a2 = 17;
            *(_OWORD *)(a2 + 8) = *(_OWORD *)&__p[1];
            *(_WORD *)(a2 + 24) = v12;
            flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a3);
            *(unsigned char *)(a3 + 1) = 1;
            if (*(unsigned char *)a3) {
              return;
            }
            goto LABEL_56;
          }
          std::string::size_type v13 = (char *)operator new(0x48uLL);
          long long v14 = xmmword_20DC7CCC0;
          strcpy(v13, "length of fixed-length array must be positive and fit to uint16_t type");
        }
        else
        {
          std::string::size_type v13 = (char *)operator new(0x38uLL);
          long long v14 = xmmword_20DC7CCB0;
          strcpy(v13, "length of fixed-length array must be an integer value");
        }
      }
      flatbuffers::Parser::Error(a1, (_WORD *)a3);
      if (SHIBYTE(v14) < 0) {
        operator delete(v13);
      }
    }
  }
}

void flatbuffers::Parser::AddField()
{
}

uint64_t sub_20DC6A9EC(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 == 15)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (*(unsigned char *)(v2 + 200)) {
      return *(void *)(v2 + 216);
    }
  }
  else if (v1 == 17)
  {
    uint64_t v4 = *((unsigned __int16 *)a1 + 12);
    v5[0] = a1[1];
    v5[1] = 0;
    long long v6 = *(_OWORD *)(a1 + 2);
    __int16 v7 = v4;
    return sub_20DC6A9EC(v5) * v4;
  }
  return byte_20DC7CEF8[v1 + 4];
}

uint64_t sub_20DC6AA70(uint64_t a1)
{
  LODWORD(v1) = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 17)
  {
    uint64_t v1 = *(int *)(a1 + 4);
    if (v1 == 15)
    {
      uint64_t v2 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v2 + 200)) {
        return *(void *)(v2 + 208);
      }
    }
  }
  else
  {
    if (v1 == 15)
    {
      uint64_t v2 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v2 + 200)) {
        return *(void *)(v2 + 208);
      }
    }
    uint64_t v1 = (int)v1;
  }
  return byte_20DC7CEF8[v1 + 4];
}

void flatbuffers::Parser::ParseSingleValue(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v10 = *(_DWORD *)(a1 + 20);
  if (v10 == 260)
  {
    if (**(unsigned char **)a1 == 40)
    {
      if (*(char *)(a1 + 55) < 0) {
        sub_20DC55634((uint64_t)&v133, *(const void **)(a1 + 32), *(void *)(a1 + 40));
      }
      else {
        std::string v133 = *(std::string *)(a1 + 32);
      }
      unsigned int v11 = *a3 + 4;
      BOOL v117 = v11 > 0x10;
      int v12 = (1 << v11) & 0x18001;
      if (v117 || v12 == 0)
      {
        sub_20DC3F684((void **)&v125.__r_.__value_.__l.__data_, (const void **)&v133.__r_.__value_.__l.__data_, ": type of argument mismatch, expecting: ");
        int v43 = std::string::append(&v125, "double");
        std::string::size_type v44 = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v126.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v126.__r_.__value_.__r.__words[2] = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        int v45 = std::string::append(&v126, ", found: ");
        std::string::size_type v46 = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v127.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v127.__r_.__value_.__r.__words[2] = v46;
        v45->__r_.__value_.__r.__words[0] = 0;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        uint64_t v47 = std::string::append(&v127, (&off_26412AC50)[*a3 + 4]);
        std::string::size_type v48 = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v128.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v128.__r_.__value_.__r.__words[2] = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = std::string::append(&v128, ", name: ");
        std::string::size_type v50 = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v129.__r_.__value_.__l.__data_ = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v129.__r_.__value_.__r.__words[2] = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        if (a2)
        {
          if (*(char *)(a2 + 23) < 0)
          {
            sub_20DC55634((uint64_t)__p, *(const void **)a2, *(void *)(a2 + 8));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)a2;
            uint64_t v124 = *(void *)(a2 + 16);
          }
        }
        else
        {
          HIBYTE(v124) = 0;
          LOBYTE(__p[0]) = 0;
        }
        if (v124 >= 0) {
          uint64_t v51 = __p;
        }
        else {
          uint64_t v51 = (void **)__p[0];
        }
        if (v124 >= 0) {
          std::string::size_type v52 = HIBYTE(v124) & 0x7F;
        }
        else {
          std::string::size_type v52 = (std::string::size_type)__p[1];
        }
        uint64_t v53 = std::string::append(&v129, (const std::string::value_type *)v51, v52);
        std::string::size_type v54 = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v130.__r_.__value_.__r.__words[2] = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        uint64_t v55 = std::string::append(&v130, ", value: ");
        std::string::size_type v56 = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v131.__r_.__value_.__l.__data_ = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v131.__r_.__value_.__r.__words[2] = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        uint64_t v59 = (const std::string::value_type *)*((void *)a3 + 4);
        uint64_t v58 = a3 + 8;
        uint64_t v57 = v59;
        char v60 = *((unsigned char *)v58 + 23);
        int v61 = v60;
        if (v60 >= 0) {
          uint64_t v62 = (const std::string::value_type *)v58;
        }
        else {
          uint64_t v62 = v57;
        }
        std::string::size_type v63 = v60 & 0x7F;
        if (v61 >= 0) {
          std::string::size_type v64 = v63;
        }
        else {
          std::string::size_type v64 = *((void *)v58 + 1);
        }
        uint64_t v65 = std::string::append(&v131, v62, v64);
        std::string::size_type v66 = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v132.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v132.__r_.__value_.__r.__words[2] = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        flatbuffers::Parser::Error(a1, (_WORD *)a5);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v132.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v130.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v124) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v129.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v128.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v127.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v126.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v67 = (void *)v125.__r_.__value_.__r.__words[0];
LABEL_148:
          operator delete(v67);
        }
      }
      else
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a5);
        *(unsigned char *)(a5 + 1) = 1;
        if (!*(unsigned char *)a5)
        {
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 40, a5);
          *(unsigned char *)(a5 + 1) = 1;
          if (!*(unsigned char *)a5)
          {
            int v42 = *(_DWORD *)(a1 + 1204);
            if (v42 < 64)
            {
              *(_DWORD *)(a1 + 1204) = v42 + 1;
              flatbuffers::Parser::ParseSingleValue(a1, a2, a3, 0);
              --*(_DWORD *)(a1 + 1204);
            }
            else
            {
              flatbuffers::Parser::RecurseError((flatbuffers::Parser *)a1, (_WORD *)a5);
            }
            *(unsigned char *)(a5 + 1) = 1;
            if (!*(unsigned char *)a5)
            {
              flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 41, a5);
              *(unsigned char *)(a5 + 1) = 1;
              if (!*(unsigned char *)a5)
              {
                v125.__r_.__value_.__r.__words[0] = 0;
                uint64_t v101 = (void **)(a3 + 8);
                uint64_t v102 = *((char *)a3 + 55) >= 0 ? (char *)(a3 + 8) : (char *)*((void *)a3 + 4);
                sub_20DC6EEBC((_WORD *)a5, v102, a1, (flatbuffers::ClassicLocale *)&v125);
                *(unsigned char *)(a5 + 1) = 1;
                if (!*(unsigned char *)a5)
                {
                  if (sub_20DC3D8C0(&v133, "deg"))
                  {
                    double v103 = *(double *)&v125.__r_.__value_.__l.__data_ / 3.14159265 * 180.0;
LABEL_243:
                    sub_20DC4C328(12, &v132, v103);
                    if (*((char *)a3 + 55) < 0) {
                      operator delete(*v101);
                    }
                    *(_OWORD *)uint64_t v101 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
                    *((void *)a3 + 6) = *((void *)&v132.__r_.__value_.__l + 2);
                    *(_WORD *)a5 = 0;
                    goto LABEL_10;
                  }
                  if (sub_20DC3D8C0(&v133, "rad"))
                  {
                    double v103 = *(double *)&v125.__r_.__value_.__l.__data_ * 3.14159265 / 180.0;
                    goto LABEL_243;
                  }
                  if (sub_20DC3D8C0(&v133, "sin"))
                  {
                    double v103 = sin(*(long double *)&v125.__r_.__value_.__l.__data_);
                    goto LABEL_243;
                  }
                  if (sub_20DC3D8C0(&v133, "cos"))
                  {
                    double v103 = cos(*(long double *)&v125.__r_.__value_.__l.__data_);
                    goto LABEL_243;
                  }
                  if (sub_20DC3D8C0(&v133, "tan"))
                  {
                    double v103 = tan(*(long double *)&v125.__r_.__value_.__l.__data_);
                    goto LABEL_243;
                  }
                  if (sub_20DC3D8C0(&v133, "asin"))
                  {
                    double v103 = asin(*(long double *)&v125.__r_.__value_.__l.__data_);
                    goto LABEL_243;
                  }
                  if (sub_20DC3D8C0(&v133, "acos"))
                  {
                    double v103 = acos(*(long double *)&v125.__r_.__value_.__l.__data_);
                    goto LABEL_243;
                  }
                  if (sub_20DC3D8C0(&v133, "atan"))
                  {
                    double v103 = atan(*(long double *)&v125.__r_.__value_.__l.__data_);
                    goto LABEL_243;
                  }
                  v127.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                  *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = xmmword_20DC7CC30;
                  strcpy(v127.__r_.__value_.__l.__data_, "Unknown conversion function: ");
                  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v104 = &v133;
                  }
                  else {
                    uint64_t v104 = (std::string *)v133.__r_.__value_.__r.__words[0];
                  }
                  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type size = *((unsigned char *)&v133.__r_.__value_.__s + 23) & 0x7F;
                  }
                  else {
                    std::string::size_type size = v133.__r_.__value_.__l.__size_;
                  }
                  uint64_t v106 = std::string::append(&v127, (const std::string::value_type *)v104, size);
                  std::string::size_type v107 = v106->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
                  v128.__r_.__value_.__r.__words[2] = v107;
                  v106->__r_.__value_.__l.__size_ = 0;
                  v106->__r_.__value_.__r.__words[2] = 0;
                  v106->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v108 = std::string::append(&v128, ", field name: ");
                  std::string::size_type v109 = v108->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
                  v129.__r_.__value_.__r.__words[2] = v109;
                  v108->__r_.__value_.__l.__size_ = 0;
                  v108->__r_.__value_.__r.__words[2] = 0;
                  v108->__r_.__value_.__r.__words[0] = 0;
                  if (a2)
                  {
                    if (*(char *)(a2 + 23) < 0) {
                      sub_20DC55634((uint64_t)&v126, *(const void **)a2, *(void *)(a2 + 8));
                    }
                    else {
                      std::string v126 = *(std::string *)a2;
                    }
                  }
                  else
                  {
                    *((unsigned char *)&v126.__r_.__value_.__s + 23) = 0;
                    v126.__r_.__value_.__s.__data_[0] = 0;
                  }
                  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v110 = &v126;
                  }
                  else {
                    uint64_t v110 = (std::string *)v126.__r_.__value_.__r.__words[0];
                  }
                  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v111 = *((unsigned char *)&v126.__r_.__value_.__s + 23) & 0x7F;
                  }
                  else {
                    std::string::size_type v111 = v126.__r_.__value_.__l.__size_;
                  }
                  uint64_t v112 = std::string::append(&v129, (const std::string::value_type *)v110, v111);
                  std::string::size_type v113 = v112->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
                  v130.__r_.__value_.__r.__words[2] = v113;
                  v112->__r_.__value_.__l.__size_ = 0;
                  v112->__r_.__value_.__r.__words[2] = 0;
                  v112->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v114 = std::string::append(&v130, ", value: ");
                  std::string::size_type v115 = v114->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
                  v131.__r_.__value_.__r.__words[2] = v115;
                  v114->__r_.__value_.__l.__size_ = 0;
                  v114->__r_.__value_.__r.__words[2] = 0;
                  v114->__r_.__value_.__r.__words[0] = 0;
                  char v116 = *((unsigned char *)a3 + 55);
                  BOOL v117 = v116 < 0;
                  if (v116 >= 0) {
                    uint64_t v118 = (const std::string::value_type *)(a3 + 8);
                  }
                  else {
                    uint64_t v118 = (const std::string::value_type *)*((void *)a3 + 4);
                  }
                  std::string::size_type v119 = v116 & 0x7F;
                  if (v117) {
                    std::string::size_type v120 = *((void *)a3 + 5);
                  }
                  else {
                    std::string::size_type v120 = v119;
                  }
                  uint64_t v121 = std::string::append(&v131, v118, v120);
                  std::string::size_type v122 = v121->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                  v132.__r_.__value_.__r.__words[2] = v122;
                  v121->__r_.__value_.__l.__size_ = 0;
                  v121->__r_.__value_.__r.__words[2] = 0;
                  v121->__r_.__value_.__r.__words[0] = 0;
                  flatbuffers::Parser::Error(a1, (_WORD *)a5);
                  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v132.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v131.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v130.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v126.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v129.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v128.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
                  {
                    uint64_t v67 = (void *)v127.__r_.__value_.__r.__words[0];
                    goto LABEL_148;
                  }
                }
              }
            }
          }
        }
      }
LABEL_10:
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      {
        long long v14 = (void *)v133.__r_.__value_.__r.__words[0];
LABEL_12:
        operator delete(v14);
        return;
      }
      return;
    }
    v126.__r_.__value_.__s.__data_[0] = 0;
    unsigned int v15 = *a3;
  }
  else
  {
    v126.__r_.__value_.__s.__data_[0] = 0;
    unsigned int v15 = *a3;
    if (v10 != 257)
    {
      if (v15 + 4 <= 0x10 && ((1 << (v15 + 4)) & 0x18001) != 0)
      {
        flatbuffers::Parser::TryTypedValue(a1, a2, 259, 1, a3, 11, &v126, a5);
        *(unsigned char *)(a5 + 1) = 1;
        if (*(unsigned char *)a5) {
          return;
        }
        if (v126.__r_.__value_.__s.__data_[0]) {
          goto LABEL_34;
        }
      }
      char v18 = v15 > 0xFFFFFFFB || v15 - 1 < 0xC;
      flatbuffers::Parser::TryTypedValue(a1, a2, 258, v18, a3, 7, &v126, a5);
      *(unsigned char *)(a5 + 1) = 1;
      if (*(unsigned char *)a5) {
        return;
      }
      if (v126.__r_.__value_.__s.__data_[0])
      {
        if (a4)
        {
LABEL_35:
          int v20 = *a3;
          if (*a3 > 0xFFFFFFFB || (v20 - 1) <= 0xB)
          {
            switch(v20)
            {
              case -4:
                if (*((char *)a3 + 55) >= 0) {
                  unint64_t v88 = (char *)(a3 + 8);
                }
                else {
                  unint64_t v88 = (char *)*((void *)a3 + 4);
                }
                sub_20DC6DE70((_WORD *)a5, v88, a1, (flatbuffers::ClassicLocale *)&v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                sub_20DC6FBC4((uint64_t)a3, (__int16)v133.__r_.__value_.__l.__data_);
                break;
              case -3:
              case 10:
                v133.__r_.__value_.__r.__words[0] = 0;
                if (*((char *)a3 + 55) >= 0) {
                  uint64_t v85 = (char *)(a3 + 8);
                }
                else {
                  uint64_t v85 = (char *)*((void *)a3 + 4);
                }
                sub_20DC6D500((_WORD *)a5, v85, a1, (flatbuffers::ClassicLocale *)&v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                sub_20DC6FC3C((uint64_t)a3);
                break;
              case -2:
              case 8:
                LODWORD(v133.__r_.__value_.__l.__data_) = 0;
                if (*((char *)a3 + 55) >= 0) {
                  uint64_t v86 = (char *)(a3 + 8);
                }
                else {
                  uint64_t v86 = (char *)*((void *)a3 + 4);
                }
                sub_20DC6C9AC((_WORD *)a5, v86, a1, &v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                sub_20DC6FCA8((uint64_t)a3);
                break;
              case -1:
              case 6:
                LOWORD(v133.__r_.__value_.__l.__data_) = 0;
                if (*((char *)a3 + 55) >= 0) {
                  unint64_t v87 = (char *)(a3 + 8);
                }
                else {
                  unint64_t v87 = (char *)*((void *)a3 + 4);
                }
                sub_20DC6D290((_WORD *)a5, v87, a1, &v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                sub_20DC6FD14((uint64_t)a3);
                break;
              case 0:
              case 1:
              case 2:
              case 4:
                v133.__r_.__value_.__s.__data_[0] = 0;
                if (*((char *)a3 + 55) >= 0) {
                  std::string v21 = (char *)(a3 + 8);
                }
                else {
                  std::string v21 = (char *)*((void *)a3 + 4);
                }
                sub_20DC6D020((_WORD *)a5, v21, a1, &v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (!*(unsigned char *)a5) {
                  goto LABEL_215;
                }
                return;
              case 3:
                v133.__r_.__value_.__s.__data_[0] = 0;
                if (*((char *)a3 + 55) >= 0) {
                  uint64_t v89 = (char *)(a3 + 8);
                }
                else {
                  uint64_t v89 = (char *)*((void *)a3 + 4);
                }
                sub_20DC6E1C4((_WORD *)a5, v89, a1, (char *)&v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (!*(unsigned char *)a5) {
                  goto LABEL_215;
                }
                return;
              case 5:
                LOWORD(v133.__r_.__value_.__l.__data_) = 0;
                if (*((char *)a3 + 55) >= 0) {
                  unint64_t v90 = (char *)(a3 + 8);
                }
                else {
                  unint64_t v90 = (char *)*((void *)a3 + 4);
                }
                sub_20DC6E444((_WORD *)a5, v90, a1, (__int16 *)&v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                sub_20DC6FDF0((uint64_t)a3);
                break;
              case 7:
                LODWORD(v133.__r_.__value_.__l.__data_) = 0;
                if (*((char *)a3 + 55) >= 0) {
                  uint64_t v91 = (char *)(a3 + 8);
                }
                else {
                  uint64_t v91 = (char *)*((void *)a3 + 4);
                }
                sub_20DC6E6C4((_WORD *)a5, v91, a1, (unsigned int *)&v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
LABEL_215:
                sub_20DC6FD84((uint64_t)a3);
                break;
              case 9:
                v133.__r_.__value_.__r.__words[0] = 0;
                if (*((char *)a3 + 55) >= 0) {
                  unint64_t v92 = (char *)(a3 + 8);
                }
                else {
                  unint64_t v92 = (char *)*((void *)a3 + 4);
                }
                sub_20DC6E944((_WORD *)a5, v92, a1, (flatbuffers::ClassicLocale *)&v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (*(unsigned char *)a5) {
                  return;
                }
                sub_20DC6FE60((uint64_t)a3);
                break;
              case 11:
                LODWORD(v133.__r_.__value_.__l.__data_) = 0;
                unint64_t v95 = (char *)*((void *)a3 + 4);
                int v94 = (char *)(a3 + 8);
                unint64_t v93 = v95;
                if (v94[23] >= 0) {
                  int v96 = v94;
                }
                else {
                  int v96 = v93;
                }
                sub_20DC6EC00((_WORD *)a5, v96, a1, (flatbuffers::ClassicLocale *)&v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (!*(unsigned char *)a5) {
                  break;
                }
                return;
              case 12:
                v133.__r_.__value_.__r.__words[0] = 0;
                uint64_t v99 = (char *)*((void *)a3 + 4);
                uint64_t v98 = (char *)(a3 + 8);
                uint64_t v97 = v99;
                if (v98[23] >= 0) {
                  uint64_t v100 = v98;
                }
                else {
                  uint64_t v100 = v97;
                }
                sub_20DC6EEBC((_WORD *)a5, v100, a1, (flatbuffers::ClassicLocale *)&v133);
                *(unsigned char *)(a5 + 1) = 1;
                if (!*(unsigned char *)a5) {
                  break;
                }
                return;
              default:
                break;
            }
          }
        }
LABEL_225:
        *(_WORD *)a5 = 0;
        return;
      }
LABEL_68:
      memset(&v133, 0, sizeof(v133));
      flatbuffers::Parser::TokenToStringId((char *)a1, *(_DWORD *)(a1 + 20), &v128);
      std::string v23 = std::string::insert(&v128, 0, "Cannot assign token starting with '");
      std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v25 = std::string::append(&v129, "' to value of <");
      std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v130.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v27 = strlen((&off_26412AC50)[(int)v15 + 4]);
      std::string::__init(&v127, (&off_26412AC50)[(int)v15 + 4], v27);
      if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v28 = &v127;
      }
      else {
        size_t v28 = (std::string *)v127.__r_.__value_.__r.__words[0];
      }
      if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v29 = *((unsigned char *)&v127.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        std::string::size_type v29 = v127.__r_.__value_.__l.__size_;
      }
      BOOL v30 = std::string::append(&v130, (const std::string::value_type *)v28, v29);
      std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v131.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v131.__r_.__value_.__r.__words[2] = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      uint64_t v32 = std::string::append(&v131, "> type.");
      std::string::size_type v33 = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v132.__r_.__value_.__r.__words[2] = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v34 = &v132;
      }
      else {
        unsigned int v34 = (std::string *)v132.__r_.__value_.__r.__words[0];
      }
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = *((unsigned char *)&v132.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        std::string::size_type v35 = v132.__r_.__value_.__l.__size_;
      }
      std::string::append(&v133, (const std::string::value_type *)v34, v35);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v132.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v127.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v130.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v129.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      flatbuffers::Parser::Error(a1, (_WORD *)a5);
      goto LABEL_10;
    }
  }
  int v19 = v10;
  if (v15 == 13)
  {
    flatbuffers::Parser::TryTypedValue(a1, a2, 257, 1, a3, 13, &v126, a5);
    *(unsigned char *)(a5 + 1) = 1;
    if (*(unsigned char *)a5) {
      return;
    }
    if (v126.__r_.__value_.__s.__data_[0]) {
      goto LABEL_34;
    }
    int v19 = *(_DWORD *)(a1 + 20);
  }
  if (v19 != 257) {
    goto LABEL_49;
  }
  if (v15 <= 0xFFFFFFFB && v15 - 1 > 0xB) {
    goto LABEL_55;
  }
  if (*(unsigned char *)(a1 + 24))
  {
LABEL_49:
    if (v15 == 2)
    {
      if (sub_20DC3D8C0((void *)(a1 + 32), "true"))
      {
        std::string v22 = "1";
        goto LABEL_52;
      }
      if (sub_20DC3D8C0((void *)(a1 + 32), "false"))
      {
        std::string v22 = "0";
LABEL_52:
        MEMORY[0x210568880](a1 + 32, v22);
        flatbuffers::Parser::TryTypedValue(a1, a2, v10, 1, a3, 2, &v126, a5);
        *(unsigned char *)(a5 + 1) = 1;
        if (*(unsigned char *)a5) {
          return;
        }
        if (!v126.__r_.__value_.__s.__data_[0]) {
          goto LABEL_57;
        }
LABEL_34:
        if (a4) {
          goto LABEL_35;
        }
        goto LABEL_225;
      }
LABEL_57:
      if (*(_DWORD *)(a1 + 20) == 257 && (v15 > 0xFFFFFFFB || v15 - 1 <= 0xB))
      {
        if (*(char *)(a1 + 55) < 0)
        {
          uint64_t v39 = *(void *)(a1 + 32);
          uint64_t v38 = *(void *)(a1 + 40);
        }
        else
        {
          uint64_t v38 = *(unsigned __int8 *)(a1 + 55);
          uint64_t v39 = a1 + 32;
        }
        uint64_t v40 = v39 - 1;
        while (v38)
        {
          int v41 = *(unsigned __int8 *)(v40 + v38--);
          if (v41 != 32)
          {
            if (v38 != -1) {
              std::string::resize((std::string *)(a1 + 32), v38 + 1, 0);
            }
            break;
          }
        }
      }
      if (v15 + 4 <= 0x10 && ((1 << (v15 + 4)) & 0x18001) != 0)
      {
        flatbuffers::Parser::TryTypedValue(a1, a2, v10, 1, a3, 11, &v126, a5);
        *(unsigned char *)(a5 + 1) = 1;
        if (*(unsigned char *)a5) {
          return;
        }
        if (v126.__r_.__value_.__s.__data_[0]) {
          goto LABEL_35;
        }
      }
      if (v15 > 0xFFFFFFFC || v15 - 1 <= 9)
      {
        flatbuffers::Parser::TryTypedValue(a1, a2, v10, 1, a3, 7, &v126, a5);
        *(unsigned char *)(a5 + 1) = 1;
        if (*(unsigned char *)a5) {
          return;
        }
        if (v126.__r_.__value_.__s.__data_[0]) {
          goto LABEL_35;
        }
      }
      flatbuffers::Parser::TryTypedValue(a1, a2, 257, v15 == 13, a3, 13, &v126, a5);
      *(unsigned char *)(a5 + 1) = 1;
      if (*(unsigned char *)a5) {
        return;
      }
      if (v126.__r_.__value_.__s.__data_[0]) {
        goto LABEL_35;
      }
      goto LABEL_68;
    }
LABEL_55:
    if (v15 > 0xFFFFFFFC || v15 - 11 >= 0xFFFFFFF6)
    {
      int v36 = (char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        int v36 = *(char **)v36;
      }
      int v37 = *v36;
      if (v37 == 95 || (v37 & 0xFFFFFFDF) - 65 <= 0x19)
      {
        flatbuffers::Parser::ParseEnumFromString(a1, (uint64_t)a3, (uint64_t)(a3 + 8), (_WORD *)a5);
        *(unsigned char *)(a5 + 1) = 1;
        if (*(unsigned char *)a5) {
          return;
        }
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a5);
        *(unsigned char *)(a5 + 1) = 1;
        if (*(unsigned char *)a5) {
          return;
        }
        v126.__r_.__value_.__s.__data_[0] = 1;
        goto LABEL_34;
      }
    }
    goto LABEL_57;
  }
  v128.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v128.__r_.__value_.__r.__words[1] = xmmword_20DC7CD90;
  strcpy(v128.__r_.__value_.__l.__data_, "type mismatch or invalid value, an initializer of non-string field must be trivial ASCII string: type: ");
  uint64_t v68 = std::string::append(&v128, (&off_26412AC50)[v15 + 4]);
  std::string::size_type v69 = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  uint64_t v70 = std::string::append(&v129, ", name: ");
  std::string::size_type v71 = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      sub_20DC55634((uint64_t)&v127, *(const void **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v127 = *(std::string *)a2;
    }
  }
  else
  {
    *((unsigned char *)&v127.__r_.__value_.__s + 23) = 0;
    v127.__r_.__value_.__s.__data_[0] = 0;
  }
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v72 = &v127;
  }
  else {
    unint64_t v72 = (std::string *)v127.__r_.__value_.__r.__words[0];
  }
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v73 = *((unsigned char *)&v127.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v73 = v127.__r_.__value_.__l.__size_;
  }
  uint64_t v74 = std::string::append(&v130, (const std::string::value_type *)v72, v73);
  std::string::size_type v75 = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v131.__r_.__value_.__r.__words[2] = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  unsigned int v76 = std::string::append(&v131, ", value: ");
  std::string::size_type v77 = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v132.__r_.__value_.__r.__words[2] = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  char v78 = *(unsigned char *)(a1 + 55);
  int v79 = v78;
  if (v78 >= 0) {
    uint64_t v80 = (const std::string::value_type *)(a1 + 32);
  }
  else {
    uint64_t v80 = *(const std::string::value_type **)(a1 + 32);
  }
  std::string::size_type v81 = v78 & 0x7F;
  if (v79 >= 0) {
    std::string::size_type v82 = v81;
  }
  else {
    std::string::size_type v82 = *(void *)(a1 + 40);
  }
  uint64_t v83 = std::string::append(&v132, v80, v82);
  std::string::size_type v84 = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a1, (_WORD *)a5);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    long long v14 = (void *)v128.__r_.__value_.__r.__words[0];
    goto LABEL_12;
  }
}

uint64_t flatbuffers::EnumDef::FindByValue(uint64_t a1, char *a2)
{
  uint64_t v11 = 0;
  int v3 = *(_DWORD *)(a1 + 152);
  if (v3 != 10 && v3 != -3)
  {
    if (a2[23] < 0) {
      a2 = *(char **)a2;
    }
    if (!sub_20DC50648((flatbuffers::ClassicLocale *)&v11, a2, 0, 1)) {
      return 0;
    }
    uint64_t v8 = v11;
LABEL_11:
    for (uint64_t i = *(uint64_t **)(a1 + 208); i != *(uint64_t **)(a1 + 216); ++i)
    {
      uint64_t result = *i;
      if (*(void *)(*i + 136) == v8) {
        return result;
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  if (a2[23] >= 0) {
    std::string::size_type v5 = a2;
  }
  else {
    std::string::size_type v5 = *(char **)a2;
  }
  BOOL v6 = sub_20DC4482C(v5, (flatbuffers::ClassicLocale *)&v10);
  uint64_t result = 0;
  if (v6)
  {
    uint64_t v8 = v10;
    goto LABEL_11;
  }
  return result;
}

void flatbuffers::Parser::ParseMetaData(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 20) == 40)
  {
    flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a2);
    *(unsigned char *)(a2 + 1) = 1;
    if (!*(unsigned char *)a2)
    {
      if (*(char *)(a1 + 55) < 0)
      {
        sub_20DC55634((uint64_t)__p, *(const void **)(a1 + 32), *(void *)(a1 + 40));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 48);
      }
      int v4 = *(_DWORD *)(a1 + 20);
      if ((v4 == 257 || v4 == 260) && a1 + 712 != sub_20DC7572C(a1 + 704, __p))
      {
        flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a2);
        *(unsigned char *)(a2 + 1) = 1;
        if (!*(unsigned char *)a2) {
          operator new();
        }
      }
      else
      {
        std::operator+<char>();
        flatbuffers::Parser::Error(a1, (_WORD *)a2);
        if (v6 < 0) {
          operator delete(v5);
        }
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    *(_WORD *)a2 = 0;
  }
}

BOOL sub_20DC6BFBC(uint64_t a1, void *a2, uint64_t a3)
{
  char v6 = *(uint64_t **)(a1 + 32);
  if ((unint64_t)v6 >= *(void *)(a1 + 40))
  {
    __int16 v7 = sub_20DC585B8((void **)(a1 + 24), a3);
  }
  else
  {
    *char v6 = a3;
    __int16 v7 = v6 + 1;
  }
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = sub_20DC7572C(a1, a2);
  if (a1 + 8 == v8)
  {
    uint64_t v10 = a2;
    sub_20DC78BCC(a1, (uint64_t)a2, (uint64_t *)&v10)[7] = a3;
  }
  return a1 + 8 != v8;
}

void flatbuffers::Parser::ParseString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20DC55634((uint64_t)__p, *(const void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 48);
  }
  flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 257, a3);
  *(unsigned char *)(a3 + 1) = 1;
  if (!*(unsigned char *)a3)
  {
    if (v12 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    if (v12 >= 0) {
      size_t v7 = HIBYTE(v12) & 0x7F;
    }
    else {
      size_t v7 = (size_t)__p[1];
    }
    sub_20DC4F638(a1 + 336, v6, v7);
    sub_20DC3F7A4();
    uint64_t v8 = (void **)(a2 + 32);
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)uint64_t v8 = v9;
    *(void *)(a2 + 48) = v10;
    *(_WORD *)a3 = 0;
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void flatbuffers::Parser::ParseAnyValue(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  switch(*(_DWORD *)a2)
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      if (!a3) {
        goto LABEL_56;
      }
      __p[23] = 4;
      strcpy(__p, "hash");
      std::string::size_type v13 = sub_20DC58BC0(a3 + 72, (const void **)__p);
      if ((uint64_t *)(a3 + 80) == v13 || !v13[7])
      {
        BOOL v16 = 0;
      }
      else
      {
        int v14 = *(_DWORD *)(a1 + 20);
        BOOL v15 = v14 == 260 || v14 == 257;
        BOOL v16 = v15;
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (!v16) {
        goto LABEL_56;
      }
      flatbuffers::Parser::ParseHash((char *)a1, a2, a3, a8);
      goto LABEL_16;
    case 0xD:
      flatbuffers::Parser::ParseString(a1, a2, a8);
      goto LABEL_16;
    case 0xE:
      LODWORD(v55[0]) = 0;
      __int16 v17 = *(_WORD *)(a2 + 24);
      *(void *)std::string __p = *(unsigned int *)(a2 + 4);
      *(_OWORD *)&__p[8] = *(_OWORD *)(a2 + 8);
      __int16 v61 = v17;
      flatbuffers::Parser::ParseVector(a1, (uint64_t)__p, v55, a3, a4, a8);
      *(unsigned char *)(a8 + 1) = 1;
      if (*(unsigned char *)a8) {
        return;
      }
      sub_20DC3F7A4();
      char v18 = (void **)(a2 + 32);
      if (*(char *)(a2 + 55) < 0) {
        operator delete(*v18);
      }
      *(_OWORD *)char v18 = *(_OWORD *)__p;
      *(void *)(a2 + 48) = *(void *)&__p[16];
      goto LABEL_17;
    case 0xF:
      flatbuffers::Parser::ParseTable((void *)a8, a1, *(void *)(a2 + 8), a2 + 32, 0);
      goto LABEL_16;
    case 0x10:
      char v19 = a7;
      memset(&v67, 0, sizeof(v67));
      uint64_t v20 = a6;
      uint64_t v21 = -72 * a4;
      if (!(-72 * a4)) {
        goto LABEL_41;
      }
      uint64_t v22 = *(void *)(a2 + 16);
      uint64_t v23 = *(void *)(a1 + 1184) - 72 * a6 - 40;
      break;
    case 0x11:
      flatbuffers::Parser::ParseArray(a1, a2, a8);
      goto LABEL_16;
    default:
LABEL_56:
      flatbuffers::Parser::ParseSingleValue(a1, a3, (int *)a2, 0, a8);
LABEL_16:
      *(unsigned char *)(a8 + 1) = 1;
      if (!*(unsigned char *)a8) {
        goto LABEL_17;
      }
      return;
  }
  while (1)
  {
    uint64_t v24 = *(void *)(v23 + 32);
    if (*(void *)(v24 + 168) != v22) {
      goto LABEL_27;
    }
    int v25 = *(_DWORD *)(v24 + 152);
    if (!a7) {
      break;
    }
    if (v25 == 14)
    {
      unsigned int v26 = *(_DWORD *)(v24 + 156) + 3;
      if (v26 <= 4 && v26 != 3)
      {
        *(_DWORD *)std::string __p = 0;
        if (*(char *)(v23 + 23) < 0) {
          uint64_t v23 = *(void *)v23;
        }
        sub_20DC6C9AC((_WORD *)a8, (char *)v23, a1, __p);
        *(unsigned char *)(a8 + 1) = 1;
        if (!*(unsigned char *)a8)
        {
          uint64_t v29 = *(void *)(a1 + 384)
              + *(_DWORD *)(a1 + 368)
              - *(void *)(a1 + 384)
              + *(_DWORD *)(a1 + 376)
              - *(unsigned int *)__p;
          goto LABEL_42;
        }
        goto LABEL_78;
      }
    }
LABEL_27:
    v23 -= 72;
    v21 += 72;
    if (!v21) {
      goto LABEL_41;
    }
  }
  if ((v25 + 3) > 4 || v25 == 0) {
    goto LABEL_27;
  }
  std::string::operator=(&v67, (const std::string *)v23);
LABEL_41:
  uint64_t v29 = 0;
LABEL_42:
  char v30 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v67.__r_.__value_.__l.__size_;
  std::string::size_type v32 = *((unsigned char *)&v67.__r_.__value_.__s + 23) & 0x7F;
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = *((unsigned char *)&v67.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v33 = v67.__r_.__value_.__l.__size_;
  }
  if (!v33 && (v19 & 1) == 0)
  {
    sub_20DC3F684(v65, (const void **)a3, "_type");
    uint64_t v47 = sub_20DC7572C(a5 + 152, v65);
    if (a5 + 160 == v47) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)(v47 + 56);
    }
    sub_20DC74034((uint64_t)__p, (long long *)a1);
    flatbuffers::Parser::SkipAnyJsonValue((flatbuffers::Parser *)a1, a8);
    int v50 = 1;
    *(unsigned char *)(a8 + 1) = 1;
    if (!*(unsigned char *)a8)
    {
      if (*(unsigned char *)(a1 + 954) || (flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, a8), !*(unsigned char *)a8))
      {
        *(_WORD *)a8 = 256;
        if (*(char *)(a1 + 55) < 0)
        {
          sub_20DC55634((uint64_t)v58, *(const void **)(a1 + 32), *(void *)(a1 + 40));
        }
        else
        {
          *(_OWORD *)uint64_t v58 = *(_OWORD *)(a1 + 32);
          uint64_t v59 = *(void *)(a1 + 48);
        }
        if (*(_DWORD *)(a1 + 20) == 257) {
          flatbuffers::Parser::Next((flatbuffers::Parser *)a1, a8);
        }
        else {
          flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 260, a8);
        }
        *(unsigned char *)(a8 + 1) = 1;
        if (!*(unsigned char *)a8)
        {
          if (sub_20DC3F9B4((unsigned __int8 *)v58, (unsigned __int8 *)v65))
          {
            flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 58, a8);
            *(unsigned char *)(a8 + 1) = 1;
            if (!*(unsigned char *)a8)
            {
              long long v54 = *(_OWORD *)(v48 + 168);
              v55[0] = *(_OWORD *)(v48 + 152);
              v55[1] = v54;
              if (*(char *)(v48 + 207) < 0) {
                sub_20DC55634((uint64_t)&v56, *(const void **)(v48 + 184), *(void *)(v48 + 192));
              }
              else {
                std::string v56 = *(std::string *)(v48 + 184);
              }
              __int16 v57 = *(_WORD *)(v48 + 208);
              flatbuffers::Parser::ParseAnyValue((void *)a8, a1, v55, v48, 0, 0, 0, 0);
              *(unsigned char *)(a8 + 1) = 1;
              if (*(unsigned char *)a8)
              {
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v56.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                std::string::operator=(&v67, &v56);
                sub_20DC6CFB8(a1, (long long *)__p);
                if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v56.__r_.__value_.__l.__data_);
                }
                int v50 = 0;
              }
            }
          }
          else
          {
            int v50 = 0;
          }
        }
        if (SHIBYTE(v59) < 0) {
          operator delete(v58[0]);
        }
      }
      else
      {
        *(unsigned char *)(a8 + 1) = 1;
      }
    }
    *(void *)&v55[0] = &v64;
    sub_20DC5847C((void ***)v55);
    if (v63 < 0) {
      operator delete(v62);
    }
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (!v50)
    {
      char v30 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v67.__r_.__value_.__l.__size_;
      std::string::size_type v32 = *((unsigned char *)&v67.__r_.__value_.__s + 23) & 0x7F;
      goto LABEL_47;
    }
    goto LABEL_78;
  }
LABEL_47:
  if (v30 >= 0) {
    std::string::size_type size = v32;
  }
  if (size) {
    BOOL v34 = 0;
  }
  else {
    BOOL v34 = v29 == 0;
  }
  if (v34)
  {
LABEL_76:
    std::operator+<char>();
    flatbuffers::Parser::Error(a1, (_WORD *)a8);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
LABEL_78:
    int v43 = 1;
    goto LABEL_67;
  }
  if (v29)
  {
    switch(*(_DWORD *)(*(void *)(a3 + 168) + 152))
    {
      case 0xFFFFFFFD:
        uint64_t v35 = *(void *)(v29 + 8 * v20 + 4);
        goto LABEL_60;
      case 0xFFFFFFFE:
        uint64_t v35 = *(unsigned int *)(v29 + 4 * v20 + 4);
        goto LABEL_60;
      case 0xFFFFFFFF:
        uint64_t v35 = *(unsigned __int16 *)(v29 + 2 * v20 + 4);
        goto LABEL_60;
      case 1:
        uint64_t v35 = *(unsigned __int8 *)(v29 + v20 + 4);
        goto LABEL_60;
      default:
        goto LABEL_145;
    }
  }
  switch(*(_DWORD *)(*(void *)(a3 + 168) + 152))
  {
    case 0xFFFFFFFD:
      *(void *)std::string __p = 0;
      if (v30 >= 0) {
        uint64_t v49 = &v67;
      }
      else {
        uint64_t v49 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      sub_20DC6D500((_WORD *)a8, (char *)v49, a1, (flatbuffers::ClassicLocale *)__p);
      int v43 = 1;
      *(unsigned char *)(a8 + 1) = 1;
      if (*(unsigned char *)a8) {
        goto LABEL_67;
      }
      uint64_t v35 = *(void *)__p;
      break;
    case 0xFFFFFFFE:
      *(_DWORD *)std::string __p = 0;
      if (v30 >= 0) {
        uint64_t v51 = &v67;
      }
      else {
        uint64_t v51 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      sub_20DC6C9AC((_WORD *)a8, (char *)v51, a1, __p);
      int v43 = 1;
      *(unsigned char *)(a8 + 1) = 1;
      if (*(unsigned char *)a8) {
        goto LABEL_67;
      }
      uint64_t v35 = *(unsigned int *)__p;
      break;
    case 0xFFFFFFFF:
      *(_WORD *)std::string __p = 0;
      if (v30 >= 0) {
        std::string::size_type v52 = &v67;
      }
      else {
        std::string::size_type v52 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      sub_20DC6D290((_WORD *)a8, (char *)v52, a1, __p);
      int v43 = 1;
      *(unsigned char *)(a8 + 1) = 1;
      if (*(unsigned char *)a8) {
        goto LABEL_67;
      }
      uint64_t v35 = *(unsigned __int16 *)__p;
      break;
    case 1:
      __p[0] = 0;
      if (v30 >= 0) {
        uint64_t v53 = &v67;
      }
      else {
        uint64_t v53 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      sub_20DC6D020((_WORD *)a8, (char *)v53, a1, __p);
      int v43 = 1;
      *(unsigned char *)(a8 + 1) = 1;
      if (*(unsigned char *)a8) {
        goto LABEL_67;
      }
      uint64_t v35 = __p[0];
      break;
    default:
LABEL_145:
      abort();
  }
LABEL_60:
  uint64_t v36 = *(void *)(a2 + 16);
  uint64_t v37 = *(unsigned __int8 *)(v36 + 148);
  uint64_t v39 = *(void *)(v36 + 208);
  uint64_t v38 = *(uint64_t **)(v36 + 216);
  for (uint64_t i = (uint64_t *)(v39 + 8 * v37); ; ++i)
  {
    if (i == v38) {
      goto LABEL_76;
    }
    uint64_t v41 = *i;
    if (*(void *)(*i + 136) == v35) {
      break;
    }
  }
  int v42 = *(_DWORD *)(v41 + 48);
  if (v42 == 15)
  {
    std::string::size_type v44 = (void **)(a2 + 32);
    int v45 = flatbuffers::Parser::ParseTable((void *)a8, a1, *(void *)(v41 + 56), a2 + 32, 0);
    int v43 = 1;
    *(unsigned char *)(a8 + 1) = 1;
    if (!*(unsigned char *)a8)
    {
      uint64_t v46 = *(void *)(v41 + 56);
      if (*(unsigned char *)(v46 + 200))
      {
        flatbuffers::Parser::SerializeStruct((uint64_t)v45, a1 + 336, v46, a2);
        *(void *)(a1 + 392) -= 8 * *(unsigned int *)(a1 + 400);
        *(_DWORD *)(a1 + 400) = 0;
        *(_WORD *)(a1 + 404) = 0;
        sub_20DC3F7A4();
        if (*(char *)(a2 + 55) < 0) {
          operator delete(*v44);
        }
        *(_OWORD *)std::string::size_type v44 = *(_OWORD *)__p;
        *(void *)(a2 + 48) = *(void *)&__p[16];
      }
      goto LABEL_66;
    }
  }
  else
  {
    if (v42 != 13)
    {
LABEL_66:
      int v43 = 2;
      goto LABEL_67;
    }
    flatbuffers::Parser::ParseString(a1, a2, a8);
    *(unsigned char *)(a8 + 1) = 1;
    if (*(unsigned char *)a8) {
      int v43 = 1;
    }
    else {
      int v43 = 2;
    }
  }
LABEL_67:
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (v43 != 1) {
LABEL_17:
  }
    *(_WORD *)a8 = 0;
}

void sub_20DC6C9AC(_WORD *a1, char *a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&long long v30 = 0;
  if (sub_20DC50648((flatbuffers::ClassicLocale *)&v30, a2, 0, 0))
  {
    if (!DWORD1(v30))
    {
      *a4 = v30;
      *a1 = 0;
      return;
    }
    *a4 = -1;
    std::string::size_type v14 = strlen(a2);
    std::string::__init(&v26, a2, v14);
    BOOL v15 = std::string::insert(&v26, 0, "invalid number: \"");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    __int16 v17 = std::string::append(&v27, "\"");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v19 = std::string::append(&v28, ", constant does not fit ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_20DC76A38(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v23 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
    std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v13 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }
  }
  else
  {
    *a4 = 0;
    std::string::size_type v8 = strlen(a2);
    std::string::__init(&v28, a2, v8);
    long long v9 = std::string::insert(&v28, 0, "invalid number: \"");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = std::string::append(&v29, "\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v13 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_29:
      operator delete(v13);
    }
  }
}

void flatbuffers::Parser::SkipAnyJsonValue(flatbuffers::Parser *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)this + 5);
  if ((v4 - 257) < 3) {
    goto LABEL_2;
  }
  if (v4 != 260)
  {
    if (v4 == 91)
    {
      flatbuffers::Parser::Expect(this, 91, a2);
      *(unsigned char *)(a2 + 1) = 1;
      if (*(unsigned char *)a2) {
        return;
      }
      for (int i = 0; ; --i)
      {
        BOOL v11 = !*((unsigned char *)this + 729) || i == 0;
        if (v11 && *((_DWORD *)this + 5) == 93) {
          break;
        }
        int v12 = *((_DWORD *)this + 301);
        if (v12 < 64)
        {
          *((_DWORD *)this + 301) = v12 + 1;
          flatbuffers::Parser::SkipAnyJsonValue(this);
          --*((_DWORD *)this + 301);
        }
        else
        {
          flatbuffers::Parser::RecurseError(this, (_WORD *)a2);
        }
        *(unsigned char *)(a2 + 1) = 1;
        if (*(unsigned char *)a2) {
          return;
        }
        if (*((_DWORD *)this + 5) == 93) {
          goto LABEL_2;
        }
        if (!*((unsigned char *)this + 954))
        {
          flatbuffers::Parser::Expect(this, 44, a2);
          if (*(unsigned char *)a2)
          {
            *(unsigned char *)(a2 + 1) = 1;
            return;
          }
        }
        *(_WORD *)a2 = 256;
      }
      goto LABEL_2;
    }
    if (v4 != 123) {
      goto LABEL_41;
    }
    flatbuffers::Parser::Expect(this, 123, a2);
    *(unsigned char *)(a2 + 1) = 1;
    if (*(unsigned char *)a2) {
      return;
    }
    uint64_t v5 = 0;
    while (1)
    {
      if (*((unsigned char *)this + 729)) {
        BOOL v6 = v5 == 0;
      }
      else {
        BOOL v6 = 1;
      }
      if (v6 && *((_DWORD *)this + 5) == 125) {
        goto LABEL_2;
      }
      memset(&v13, 0, sizeof(v13));
      std::string::operator=(&v13, (const std::string *)((char *)this + 32));
      if (*((_DWORD *)this + 5) == 257)
      {
        flatbuffers::Parser::Next(this, a2);
      }
      else
      {
        if (*((unsigned char *)this + 729)) {
          int v8 = 257;
        }
        else {
          int v8 = 260;
        }
        flatbuffers::Parser::Expect(this, v8, a2);
      }
      int v7 = 1;
      *(unsigned char *)(a2 + 1) = 1;
      if (!*(unsigned char *)a2)
      {
        if (*((unsigned char *)this + 954) && (*((_DWORD *)this + 5) | 0x20) == 0x7B
          || (flatbuffers::Parser::Expect(this, 58, a2), *(unsigned char *)(a2 + 1) = 1, !*(unsigned char *)a2))
        {
          int v9 = *((_DWORD *)this + 301);
          if (v9 < 64)
          {
            *((_DWORD *)this + 301) = v9 + 1;
            flatbuffers::Parser::SkipAnyJsonValue(this);
            --*((_DWORD *)this + 301);
          }
          else
          {
            flatbuffers::Parser::RecurseError(this, (_WORD *)a2);
          }
          if (!*(unsigned char *)a2)
          {
            ++v5;
            *(_WORD *)a2 = 256;
            if (*((_DWORD *)this + 5) == 125)
            {
              int v7 = 2;
              goto LABEL_25;
            }
            if (*((unsigned char *)this + 954) || (flatbuffers::Parser::Expect(this, 44, a2), !*(unsigned char *)a2))
            {
              int v7 = 0;
              *(unsigned char *)a2 = 0;
            }
          }
          *(unsigned char *)(a2 + 1) = 1;
        }
      }
LABEL_25:
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v7)
      {
        if (v7 == 2) {
          goto LABEL_2;
        }
        return;
      }
    }
  }
  if (sub_20DC3D8C0((void *)this + 4, "true")
    || *((_DWORD *)this + 5) == 260
    && (sub_20DC3D8C0((void *)this + 4, "false")
     || *((_DWORD *)this + 5) == 260 && sub_20DC3D8C0((void *)this + 4, "null")))
  {
LABEL_2:
    flatbuffers::Parser::Next(this, a2);
    *(unsigned char *)(a2 + 1) = 1;
    if (!*(unsigned char *)a2) {
      *(_WORD *)a2 = 0;
    }
    return;
  }
LABEL_41:

  flatbuffers::Parser::TokenError(this, (_WORD *)a2);
}

uint64_t sub_20DC6CFB8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 2));
  if ((long long *)a1 != a2) {
    sub_20DC58CA8(a1 + 56, *((std::string **)a2 + 7), *((std::string **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  }
  return a1;
}

void sub_20DC6D020(_WORD *a1, char *a2, uint64_t a3, unsigned char *a4)
{
  *(void *)&long long v30 = 0;
  if (sub_20DC50648((flatbuffers::ClassicLocale *)&v30, a2, 0, 0))
  {
    if ((unint64_t)v30 <= 0xFF)
    {
      *a4 = v30;
      *a1 = 0;
      return;
    }
    *a4 = -1;
    std::string::size_type v14 = strlen(a2);
    std::string::__init(&v26, a2, v14);
    BOOL v15 = std::string::insert(&v26, 0, "invalid number: \"");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    __int16 v17 = std::string::append(&v27, "\"");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v19 = std::string::append(&v28, ", constant does not fit ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_20DC76CD0(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v23 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
    std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }
  }
  else
  {
    *a4 = 0;
    std::string::size_type v8 = strlen(a2);
    std::string::__init(&v28, a2, v8);
    int v9 = std::string::insert(&v28, 0, "invalid number: \"");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    BOOL v11 = std::string::append(&v29, "\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_29:
      operator delete(v13);
    }
  }
}

void sub_20DC6D290(_WORD *a1, char *a2, uint64_t a3, _WORD *a4)
{
  *(void *)&long long v30 = 0;
  if (sub_20DC50648((flatbuffers::ClassicLocale *)&v30, a2, 0, 0))
  {
    if (!((unint64_t)v30 >> 16))
    {
      *a4 = v30;
      *a1 = 0;
      return;
    }
    *a4 = -1;
    std::string::size_type v14 = strlen(a2);
    std::string::__init(&v26, a2, v14);
    BOOL v15 = std::string::insert(&v26, 0, "invalid number: \"");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    __int16 v17 = std::string::append(&v27, "\"");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v19 = std::string::append(&v28, ", constant does not fit ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_20DC76B84(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v23 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
    std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }
  }
  else
  {
    *a4 = 0;
    std::string::size_type v8 = strlen(a2);
    std::string::__init(&v28, a2, v8);
    int v9 = std::string::insert(&v28, 0, "invalid number: \"");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    BOOL v11 = std::string::append(&v29, "\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_29:
      operator delete(v13);
    }
  }
}

void sub_20DC6D500(_WORD *a1, char *a2, uint64_t a3, flatbuffers::ClassicLocale *a4)
{
  if (sub_20DC4482C(a2, a4))
  {
    *a1 = 0;
    return;
  }
  if (*(void *)a4)
  {
    std::string::size_type v14 = strlen(a2);
    std::string::__init(&v26, a2, v14);
    BOOL v15 = std::string::insert(&v26, 0, "invalid number: \"");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    __int16 v17 = std::string::append(&v27, "\"");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v19 = std::string::append(&v28, ", constant does not fit ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_20DC768EC(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v23 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
    std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }
  }
  else
  {
    std::string::size_type v8 = strlen(a2);
    std::string::__init(&v28, a2, v8);
    int v9 = std::string::insert(&v28, 0, "invalid number: \"");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    BOOL v11 = std::string::append(&v29, "\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_29:
      operator delete(v13);
    }
  }
}

void flatbuffers::Parser::ParseArray(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int64x2_t v44 = 0uLL;
  unint64_t v45 = 0;
  uint64_t v35 = 0;
  char v36 = 0;
  long long v37 = xmmword_20DC7CDC0;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v40 = 0;
  uint64_t v41 = 1;
  __int16 v42 = 256;
  uint64_t v43 = 0;
  int v4 = *(_DWORD *)(a2 + 4);
  long long v33 = *(_OWORD *)(a2 + 8);
  int v5 = *(unsigned __int16 *)(a2 + 24);
  flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 91, (uint64_t)&v34);
  HIBYTE(v34) = 1;
  if ((_BYTE)v34) {
    goto LABEL_2;
  }
  for (int i = 0; ; ++i)
  {
    BOOL v7 = !*(unsigned char *)(a1 + 729) || i == 0;
    if (v7 && *(_DWORD *)(a1 + 20) == 93) {
      break;
    }
    uint64_t v46 = 0;
    __int16 v48 = 0;
    long long v47 = 0uLL;
    HIBYTE(v50) = 1;
    LOWORD(v49) = 48;
    __int16 v51 = -1;
    uint64_t v8 = v44.i64[1];
    if (v44.i64[1] >= v45)
    {
      int v9 = sub_20DC5927C(&v44, (uint64_t)&v46);
      v44.i64[1] = (uint64_t)v9;
      if (SHIBYTE(v50) < 0)
      {
        operator delete((void *)v49);
        int v9 = (char *)v44.i64[1];
      }
    }
    else
    {
      *(void *)v44.i64[1] = 0;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(_WORD *)(v8 + 24) = 0;
      *(_OWORD *)(v8 + 32) = v49;
      *(void *)(v8 + 48) = v50;
      *(_WORD *)(v8 + 56) = -1;
      int v9 = (char *)(v8 + 64);
      v44.i64[1] = v8 + 64;
    }
    *((_DWORD *)v9 - 16) = v4;
    *((_DWORD *)v9 - 15) = 0;
    std::string::size_type v10 = v9 - 64;
    *(_OWORD *)(v10 + 8) = v33;
    *((_WORD *)v10 + 12) = v5;
    if (v4 == 15 && *(unsigned char *)(v33 + 200)) {
      flatbuffers::Parser::ParseTable(&v34, a1, v33, v9 - 32, 0);
    }
    else {
      flatbuffers::Parser::ParseSingleValue(a1, 0, (int *)v10, 0, (uint64_t)&v34);
    }
    if ((_BYTE)v34)
    {
      *(unsigned char *)a3 = v34;
      HIBYTE(v34) = 1;
      *(unsigned char *)(a3 + 1) = 1;
      goto LABEL_3;
    }
    __int16 v34 = 256;
    if (*(_DWORD *)(a1 + 20) == 93)
    {
      ++i;
      break;
    }
    if (!*(unsigned char *)(a1 + 954))
    {
      flatbuffers::Parser::Expect((flatbuffers::Parser *)a1, 44, (uint64_t)&v34);
      if ((_BYTE)v34) {
        goto LABEL_2;
      }
    }
    __int16 v34 = 256;
  }
  flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)&v34);
  if ((_BYTE)v34)
  {
LABEL_2:
    *(_WORD *)a3 = 257;
    HIBYTE(v34) = 1;
  }
  else
  {
    __int16 v34 = 256;
    *(_WORD *)a3 = 256;
    if (i == v5)
    {
      if (v44.i64[1] != v44.i64[0])
      {
        uint64_t v12 = v44.i64[1] - 32;
        while (2)
        {
          switch(*(_DWORD *)(v12 - 32))
          {
            case 0xFFFFFFFC:
              uint64_t v23 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                uint64_t v23 = *(char **)v12;
              }
              sub_20DC6DE70((_WORD *)a3, v23, a1, (flatbuffers::ClassicLocale *)&v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3) {
                goto LABEL_71;
              }
              goto LABEL_3;
            case 0xFFFFFFFD:
            case 0xA:
              uint64_t v46 = 0;
              char v19 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                char v19 = *(char **)v12;
              }
              sub_20DC6D500((_WORD *)a3, v19, a1, (flatbuffers::ClassicLocale *)&v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3)
              {
                uint64_t v11 = sub_20DC434C0((uint64_t)&v35, (uint64_t)v46);
                goto LABEL_36;
              }
              goto LABEL_3;
            case 0xFFFFFFFE:
            case 8:
              LODWORD(v46) = 0;
              std::string::size_type v20 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                std::string::size_type v20 = *(char **)v12;
              }
              sub_20DC6C9AC((_WORD *)a3, v20, a1, &v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3)
              {
                int v15 = (int)v46;
                goto LABEL_35;
              }
              goto LABEL_3;
            case 0xFFFFFFFF:
            case 6:
              LOWORD(v46) = 0;
              uint64_t v21 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                uint64_t v21 = *(char **)v12;
              }
              sub_20DC6D290((_WORD *)a3, v21, a1, &v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3) {
                goto LABEL_71;
              }
              goto LABEL_3;
            case 0:
            case 1:
            case 2:
            case 4:
              LOBYTE(v46) = 0;
              std::string::size_type v18 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                std::string::size_type v18 = *(char **)v12;
              }
              sub_20DC6D020((_WORD *)a3, v18, a1, &v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3)
              {
                uint64_t v11 = sub_20DC43698((uint64_t)&v35, (char)v46);
                goto LABEL_36;
              }
              goto LABEL_3;
            case 3:
              LOBYTE(v46) = 0;
              std::string::size_type v24 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                std::string::size_type v24 = *(char **)v12;
              }
              sub_20DC6E1C4((_WORD *)a3, v24, a1, (char *)&v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3)
              {
                uint64_t v11 = (uint64_t)sub_20DC43710((uint64_t *)&v35, (char)v46);
                goto LABEL_36;
              }
              goto LABEL_3;
            case 5:
              LOWORD(v46) = 0;
              int v25 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                int v25 = *(char **)v12;
              }
              sub_20DC6E444((_WORD *)a3, v25, a1, (__int16 *)&v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3)
              {
LABEL_71:
                uint64_t v11 = sub_20DC6E0C4((uint64_t)&v35, (__int16)v46);
                goto LABEL_36;
              }
              goto LABEL_3;
            case 7:
            case 0x11:
              LODWORD(v46) = 0;
              uint64_t v22 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                uint64_t v22 = *(char **)v12;
              }
              sub_20DC6E6C4((_WORD *)a3, v22, a1, (unsigned int *)&v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3)
              {
                uint64_t v11 = sub_20DC435AC((uint64_t)&v35, (int)v46);
                goto LABEL_36;
              }
              goto LABEL_3;
            case 9:
              uint64_t v46 = 0;
              std::string v26 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                std::string v26 = *(char **)v12;
              }
              sub_20DC6E944((_WORD *)a3, v26, a1, (flatbuffers::ClassicLocale *)&v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3)
              {
                uint64_t v11 = sub_20DC6EB9C((uint64_t)&v35, (uint64_t)v46);
                goto LABEL_36;
              }
              goto LABEL_3;
            case 0xB:
              LODWORD(v46) = 0;
              std::string v27 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                std::string v27 = *(char **)v12;
              }
              sub_20DC6EC00((_WORD *)a3, v27, a1, (flatbuffers::ClassicLocale *)&v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3)
              {
                uint64_t v11 = sub_20DC6EE50((uint64_t)&v35, *(float *)&v46);
                goto LABEL_36;
              }
              goto LABEL_3;
            case 0xC:
              uint64_t v46 = 0;
              std::string v28 = (char *)v12;
              if (*(char *)(v12 + 23) < 0) {
                std::string v28 = *(char **)v12;
              }
              sub_20DC6EEBC((_WORD *)a3, v28, a1, (flatbuffers::ClassicLocale *)&v46);
              *(unsigned char *)(a3 + 1) = 1;
              if (!*(unsigned char *)a3)
              {
                uint64_t v11 = sub_20DC6F10C((uint64_t)&v35, *(double *)&v46);
                goto LABEL_36;
              }
              goto LABEL_3;
            case 0xD:
            case 0xE:
            case 0x10:
              goto LABEL_32;
            case 0xF:
              uint64_t v17 = *(void *)(v12 - 24);
              if (*(unsigned char *)(v17 + 200))
              {
                uint64_t v11 = (uint64_t)flatbuffers::Parser::SerializeStruct(v11, (uint64_t)&v35, v17, v12 - 32);
              }
              else
              {
LABEL_32:
                std::string v13 = (const char *)v12;
                if (*(char *)(v12 + 23) < 0) {
                  std::string v13 = *(const char **)v12;
                }
                int v14 = atoi(v13);
                *(_WORD *)a3 = 256;
                sub_20DC43420((uint64_t)&v35, 4uLL);
                int v15 = v38 - v39 + DWORD2(v38) - v14 + 4;
LABEL_35:
                uint64_t v11 = sub_20DC435AC((uint64_t)&v35, v15);
              }
              goto LABEL_36;
            default:
LABEL_36:
              uint64_t v16 = v12 - 32;
              v12 -= 64;
              if (v16 == v44.i64[0]) {
                break;
              }
              continue;
          }
          break;
        }
      }
      uint64_t v29 = v39;
      uint64_t v30 = sub_20DC6A9EC((int *)a2);
      MEMORY[0x210568890](a2 + 32, v29, v30);
      *(_WORD *)a3 = 0;
    }
    else
    {
      uint64_t v46 = (char *)operator new(0x28uLL);
      long long v47 = xmmword_20DC7CD40;
      strcpy(v46, "Fixed-length array size is incorrect.");
      flatbuffers::Parser::Error(a1, (_WORD *)a3);
      if (SHIBYTE(v47) < 0) {
        operator delete(v46);
      }
    }
  }
LABEL_3:
  sub_20DC4FC58(&v35);
  uint64_t v35 = &v44;
  sub_20DC591F0((void ***)&v35);
}

uint64_t *flatbuffers::Parser::SerializeStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_20DC43420(a2, *(void *)(a3 + 208));
  if (*(char *)(a4 + 55) >= 0) {
    BOOL v7 = (const void *)(a4 + 32);
  }
  else {
    BOOL v7 = *(const void **)(a4 + 32);
  }
  unint64_t v8 = *(void *)(a3 + 216);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    if (v9 - *(void *)(a2 + 56) < v8)
    {
      sub_20DC4F8B0((uint64_t *)a2, v8);
      uint64_t v9 = *(void *)(a2 + 48);
    }
    *(void *)(a2 + 48) = v9 - v8;
    memcpy((void *)(v9 - v8), v7, v8);
  }
  uint64_t v10 = *(unsigned __int16 *)(a4 + 56);
  unsigned int v11 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);

  return sub_20DC4FBD0((uint64_t *)a2, v10, v11);
}

void sub_20DC6DE70(_WORD *a1, char *a2, uint64_t a3, flatbuffers::ClassicLocale *a4)
{
  if (sub_20DC79368(a4, a2))
  {
    *a1 = 0;
    return;
  }
  if (sub_20DC76888(*(_WORD *)a4) == 0.0)
  {
    std::string::size_type v8 = strlen(a2);
    std::string::__init(&v28, a2, v8);
    uint64_t v9 = std::string::insert(&v28, 0, "invalid number: \"");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    unsigned int v11 = std::string::append(&v29, "\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_29:
      operator delete(v13);
    }
  }
  else
  {
    std::string::size_type v14 = strlen(a2);
    std::string::__init(&v26, a2, v14);
    int v15 = std::string::insert(&v26, 0, "invalid number: \"");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    uint64_t v17 = std::string::append(&v27, "\"");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v19 = std::string::append(&v28, ", constant does not fit ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_20DC508A8(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v23 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
    std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }
  }
}

uint64_t sub_20DC6E0C4(uint64_t a1, __int16 a2)
{
  sub_20DC43420(a1, 2uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 1)
  {
    sub_20DC4F8B0((uint64_t *)a1, 2uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(_WORD *)(v4 - 2) = a2;
  uint64_t v5 = v4 - 2;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void sub_20DC6E128(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4)
{
  float v8 = sub_20DC76888(a3);
  if (v8 != sub_20DC76888(a4) || *(unsigned char *)(a1 + 80))
  {
    unsigned int v9 = sub_20DC6E0C4(a1, a3);
    sub_20DC4FBD0((uint64_t *)a1, a2, v9);
  }
}

void sub_20DC6E1C4(_WORD *a1, char *a2, uint64_t a3, char *a4)
{
  *(void *)&long long v31 = 0;
  if (sub_20DC50648((flatbuffers::ClassicLocale *)&v31, a2, 0, 0))
  {
    if ((uint64_t)v31 > 127)
    {
      char v14 = 127;
    }
    else
    {
      if ((uint64_t)v31 >= -128)
      {
        *a4 = v31;
        *a1 = 0;
        return;
      }
      char v14 = 0x80;
    }
    *a4 = v14;
    std::string::size_type v15 = strlen(a2);
    std::string::__init(&v27, a2, v15);
    std::string::size_type v16 = std::string::insert(&v27, 0, "invalid number: \"");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v18 = std::string::append(&v28, "\"");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v20 = std::string::append(&v29, ", constant does not fit ");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_20DC76E1C(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v24 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    long long v31 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    std::string::size_type v32 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v27.__r_.__value_.__r.__words[0];
      goto LABEL_32;
    }
  }
  else
  {
    *a4 = 0;
    std::string::size_type v8 = strlen(a2);
    std::string::__init(&v29, a2, v8);
    unsigned int v9 = std::string::insert(&v29, 0, "invalid number: \"");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    unsigned int v11 = std::string::append(&v30, "\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v31 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v32 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_32:
      operator delete(v13);
    }
  }
}

void sub_20DC6E444(_WORD *a1, char *a2, uint64_t a3, __int16 *a4)
{
  *(void *)&long long v31 = 0;
  if (sub_20DC50648((flatbuffers::ClassicLocale *)&v31, a2, 0, 0))
  {
    if ((uint64_t)v31 >= 0x8000)
    {
      __int16 v14 = 0x7FFF;
    }
    else
    {
      if ((uint64_t)v31 >= -32768)
      {
        *a4 = v31;
        *a1 = 0;
        return;
      }
      __int16 v14 = 0x8000;
    }
    *a4 = v14;
    std::string::size_type v15 = strlen(a2);
    std::string::__init(&v27, a2, v15);
    std::string::size_type v16 = std::string::insert(&v27, 0, "invalid number: \"");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v18 = std::string::append(&v28, "\"");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v20 = std::string::append(&v29, ", constant does not fit ");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_20DC76F68(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v24 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    long long v31 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    std::string::size_type v32 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v27.__r_.__value_.__r.__words[0];
      goto LABEL_32;
    }
  }
  else
  {
    *a4 = 0;
    std::string::size_type v8 = strlen(a2);
    std::string::__init(&v29, a2, v8);
    unsigned int v9 = std::string::insert(&v29, 0, "invalid number: \"");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    unsigned int v11 = std::string::append(&v30, "\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v31 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v32 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v13 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_32:
      operator delete(v13);
    }
  }
}

void sub_20DC6E6C4(_WORD *a1, char *a2, uint64_t a3, unsigned int *a4)
{
  *(void *)&long long v31 = 0;
  if (sub_20DC50648((flatbuffers::ClassicLocale *)&v31, a2, 0, 0))
  {
    unsigned int v8 = 0x7FFFFFFF;
    if ((uint64_t)v31 <= 0x7FFFFFFF)
    {
      if ((uint64_t)v31 >= (uint64_t)0xFFFFFFFF80000000)
      {
        *a4 = v31;
        *a1 = 0;
        return;
      }
      unsigned int v8 = 0x80000000;
    }
    *a4 = v8;
    std::string::size_type v15 = strlen(a2);
    std::string::__init(&v27, a2, v15);
    std::string::size_type v16 = std::string::insert(&v27, 0, "invalid number: \"");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v18 = std::string::append(&v28, "\"");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v20 = std::string::append(&v29, ", constant does not fit ");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_20DC770B4(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v24 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    long long v31 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    std::string::size_type v32 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      __int16 v14 = (void *)v27.__r_.__value_.__r.__words[0];
      goto LABEL_31;
    }
  }
  else
  {
    *a4 = 0;
    std::string::size_type v9 = strlen(a2);
    std::string::__init(&v29, a2, v9);
    std::string::size_type v10 = std::string::insert(&v29, 0, "invalid number: \"");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v12 = std::string::append(&v30, "\"");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    long long v31 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v32 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      __int16 v14 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_31:
      operator delete(v14);
    }
  }
}

void sub_20DC6E944(_WORD *a1, char *a2, uint64_t a3, flatbuffers::ClassicLocale *a4)
{
  if (sub_20DC50648(a4, a2, 0, 1))
  {
    *a1 = 0;
    return;
  }
  if (*(void *)a4)
  {
    std::string::size_type v14 = strlen(a2);
    std::string::__init(&v26, a2, v14);
    std::string::size_type v15 = std::string::insert(&v26, 0, "invalid number: \"");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v17 = std::string::append(&v27, "\"");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v19 = std::string::append(&v28, ", constant does not fit ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_20DC77200(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v23 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
    std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v13 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }
  }
  else
  {
    std::string::size_type v8 = strlen(a2);
    std::string::__init(&v28, a2, v8);
    std::string::size_type v9 = std::string::insert(&v28, 0, "invalid number: \"");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v11 = std::string::append(&v29, "\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v13 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_29:
      operator delete(v13);
    }
  }
}

uint64_t sub_20DC6EB9C(uint64_t a1, uint64_t a2)
{
  sub_20DC43420(a1, 8uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 7)
  {
    sub_20DC4F8B0((uint64_t *)a1, 8uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(v4 - 8) = a2;
  uint64_t v5 = v4 - 8;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void sub_20DC6EC00(_WORD *a1, char *a2, uint64_t a3, flatbuffers::ClassicLocale *a4)
{
  if (sub_20DC510CC(a4, a2))
  {
    *a1 = 0;
    return;
  }
  if (*(float *)a4 == 0.0)
  {
    std::string::size_type v8 = strlen(a2);
    std::string::__init(&v28, a2, v8);
    std::string::size_type v9 = std::string::insert(&v28, 0, "invalid number: \"");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v11 = std::string::append(&v29, "\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v13 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_29:
      operator delete(v13);
    }
  }
  else
  {
    std::string::size_type v14 = strlen(a2);
    std::string::__init(&v26, a2, v14);
    std::string::size_type v15 = std::string::insert(&v26, 0, "invalid number: \"");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v17 = std::string::append(&v27, "\"");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v19 = std::string::append(&v28, ", constant does not fit ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_20DC51280(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v23 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
    std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v13 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }
  }
}

uint64_t sub_20DC6EE50(uint64_t a1, float a2)
{
  sub_20DC43420(a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 3)
  {
    sub_20DC4F8B0((uint64_t *)a1, 4uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(float *)(v4 - 4) = a2;
  uint64_t v5 = v4 - 4;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void sub_20DC6EEBC(_WORD *a1, char *a2, uint64_t a3, flatbuffers::ClassicLocale *a4)
{
  if (sub_20DC52D9C(a4, a2))
  {
    *a1 = 0;
    return;
  }
  if (*(double *)a4 == 0.0)
  {
    std::string::size_type v8 = strlen(a2);
    std::string::__init(&v28, a2, v8);
    std::string::size_type v9 = std::string::insert(&v28, 0, "invalid number: \"");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v11 = std::string::append(&v29, "\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v13 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_29:
      operator delete(v13);
    }
  }
  else
  {
    std::string::size_type v14 = strlen(a2);
    std::string::__init(&v26, a2, v14);
    std::string::size_type v15 = std::string::insert(&v26, 0, "invalid number: \"");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v17 = std::string::append(&v27, "\"");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v19 = std::string::append(&v28, ", constant does not fit ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_20DC513DC(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v23 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
    std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
    long long v30 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(a3, a1);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v13 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }
  }
}

uint64_t sub_20DC6F10C(uint64_t a1, double a2)
{
  sub_20DC43420(a1, 8uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 7)
  {
    sub_20DC4F8B0((uint64_t *)a1, 8uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(double *)(v4 - 8) = a2;
  uint64_t v5 = v4 - 8;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void flatbuffers::Parser::ParseNestedFlatbuffer(flatbuffers::Parser *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (*((_DWORD *)this + 5) == 91)
  {
    flatbuffers::Parser::ParseAnyValue((uint64_t)this, a2, a3, a4, a5, 0, 0, a6);
    *(unsigned char *)(a6 + 1) = 1;
    if (!*(unsigned char *)a6) {
      *(_WORD *)a6 = 0;
    }
  }
  else
  {
    uint64_t v8 = *(void *)this;
    flatbuffers::Parser::SkipAnyJsonValue(this, a6);
    *(unsigned char *)(a6 + 1) = 1;
    if (!*(unsigned char *)a6)
    {
      sub_20DC58860(&v46, (char *)(v8 - 1), (char *)(*(void *)this - 1), *(void *)this - v8);
      *(_DWORD *)((char *)&v9 + 3) = 0;
      LODWORD(v9) = 0;
      *((void *)&v9 + 1) = 0x10100000002;
      v10[0] = 1;
      *(void *)&v10[1] = 0;
      v10[9] = 0;
      v11[23] = 15;
      strcpy(v11, "std::unique_ptr");
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v16 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v12 = 0;
      __int16 v19 = 84;
      int v20 = 257;
      uint64_t v22 = 0;
      v23[0] = 0;
      *(void *)((char *)v23 + 5) = 0;
      uint64_t v21 = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      int v27 = 1;
      uint64_t v29 = 0;
      v30[0] = 0;
      *(_DWORD *)((char *)v30 + 7) = 0;
      uint64_t v28 = 0;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      strcpy(v37, "\n");
      uint64_t v35 = 0;
      strcpy(v36, "_generated");
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      v37[2] = 0;
      __int16 v38 = 0;
      int v39 = 0;
      uint64_t v42 = 1;
      uint64_t v43 = 0;
      __int16 v44 = 257;
      sub_20DC740BC((uint64_t)v45, &v9);
    }
  }
}

uint64_t *sub_20DC6F474(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_20DC74EDC(a1, (void *)*a2, a2 + 1);
    sub_20DC50270(a1 + 3, (char *)a2[3], (char *)a2[4], (a2[4] - a2[3]) >> 3);
  }
  return a1;
}

uint64_t sub_20DC6F4CC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 10) = *(long long *)((char *)a2 + 10);
  *(_OWORD *)a1 = v4;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 2));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)((char *)a2 + 56));
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)((char *)a2 + 88));
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 7));
  char v5 = *((unsigned char *)a2 + 138);
  *(_WORD *)(a1 + 136) = *((_WORD *)a2 + 68);
  *(unsigned char *)(a1 + 138) = v5;
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)a2 + 6);
  char v6 = *((unsigned char *)a2 + 172);
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 42);
  *(unsigned char *)(a1 + 172) = v6;
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 11));
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)((char *)a2 + 200));
  *(_DWORD *)(a1 + 224) = *((_DWORD *)a2 + 56);
  std::string::operator=((std::string *)(a1 + 232), (const std::string *)((char *)a2 + 232));
  char v7 = *((unsigned char *)a2 + 258);
  *(_WORD *)(a1 + 256) = *((_WORD *)a2 + 128);
  *(unsigned char *)(a1 + 258) = v7;
  if ((long long *)a1 != a2) {
    sub_20DC58CA8(a1 + 264, *((std::string **)a2 + 33), *((std::string **)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 288), (const std::string *)a2 + 12);
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)a2 + 13);
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)a2 + 14);
  std::string::operator=((std::string *)(a1 + 360), (const std::string *)a2 + 15);
  __int16 v8 = *((_WORD *)a2 + 200);
  *(_OWORD *)(a1 + 384) = a2[24];
  *(_WORD *)(a1 + 400) = v8;
  return a1;
}

uint64_t flatbuffers::Parser::Parse(flatbuffers::Parser *this, const char *a2, const char **a3, const char *a4)
{
  if (*((unsigned char *)this + 728))
  {
    return flatbuffers::Parser::ParseFlexBuffer(this, a2, a4, (uint64_t *)this + 54);
  }
  else
  {
    flatbuffers::Parser::ParseRoot((uint64_t **)this, a2, a3, a4, v5);
    return v5[0] == 0;
  }
}

void flatbuffers::Parser::ParseEnumFromString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _WORD *a4@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    char v7 = (unsigned int *)(v6 + 152);
  }
  else {
    char v7 = (unsigned int *)a2;
  }
  unsigned int v8 = *v7;
  if (v8 <= 0xFFFFFFFC && v8 - 1 > 9)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    strcpy(__str.__r_.__value_.__l.__data_, "not a valid value for this field");
    flatbuffers::Parser::Error(a1, a4);
    operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
  uint64_t v12 = 0;
  std::string::size_type v13 = 0;
  while (v13 != -1)
  {
    std::string::size_type v14 = std::string::find((const std::string *)(a1 + 32), 32, v13);
    if (v14 == -1) {
      std::string::size_type v15 = -1;
    }
    else {
      std::string::size_type v15 = v14 - v13;
    }
    if (v14 == -1) {
      uint64_t v16 = -1;
    }
    else {
      uint64_t v16 = v14 + 1;
    }
    std::string::basic_string(&__str, (const std::string *)(a1 + 32), v13, v15, (std::allocator<char> *)&__p);
    uint64_t v17 = *(void *)(a2 + 16);
    if (!v17)
    {
      std::string::size_type v18 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
      if (v18 == -1)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20DC7CDF0;
        strcpy(__p.__r_.__value_.__l.__data_, "enum values need to be qualified by an enum type");
        goto LABEL_19;
      }
      std::string::size_type v22 = v18;
      std::string::basic_string(&__p, &__str, 0, v18, (std::allocator<char> *)&v30);
      uint64_t v23 = flatbuffers::Parser::LookupEnum(a1, (uint64_t)&__p);
      if (v23)
      {
        std::string::basic_string(&v30, &__str, v22 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v33);
        uint64_t v26 = sub_20DC7572C(v23 + 184, &v30);
        if (v23 + 192 == v26) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(void *)(v26 + 56);
        }
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::operator+<char>();
        flatbuffers::Parser::Error(a1, a4);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        uint64_t v21 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v23) {
        goto LABEL_21;
      }
      goto LABEL_29;
    }
    if (*(unsigned char *)(a1 + 743))
    {
      if (*(char *)(v17 + 23) < 0) {
        std::string::size_type v24 = *(void *)(v17 + 8);
      }
      else {
        std::string::size_type v24 = *(unsigned __int8 *)(v17 + 23);
      }
      std::string::basic_string(&__p, &__str, 0, v24, (std::allocator<char> *)&v30);
      BOOL v27 = sub_20DC3F9B4((unsigned __int8 *)&__p, *(unsigned __int8 **)(a2 + 16));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v27)
      {
        uint64_t v28 = *(void *)(a2 + 16);
        if (*(char *)(v28 + 23) < 0) {
          std::string::size_type v29 = *(void *)(v28 + 8);
        }
        else {
          std::string::size_type v29 = *(unsigned __int8 *)(v28 + 23);
        }
        std::string::basic_string(&__p, &__str, v29, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v30);
        uint64_t v25 = sub_20DC7572C(v28 + 184, &__p);
        if (v28 + 192 == v25) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(void *)(v25 + 56);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
LABEL_29:
        if (v21)
        {
          v12 |= *(void *)(v21 + 136);
          char v19 = 1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v20 = sub_20DC7572C(v17 + 184, &__str);
      if (v17 + 192 != v20)
      {
        uint64_t v21 = *(void *)(v20 + 56);
        goto LABEL_29;
      }
    }
    std::operator+<char>();
LABEL_19:
    flatbuffers::Parser::Error(a1, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_21:
    char v19 = 0;
LABEL_22:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string::size_type v13 = v16;
    if ((v19 & 1) == 0) {
      return;
    }
  }
  sub_20DC444C8();
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(std::string *)a3 = __str;
  *a4 = 0;
}

uint64_t sub_20DC6FA50()
{
  sub_20DC50E1C((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_20DC51148((uint64_t)v1, MEMORY[0x263F8C2B8]);
  return MEMORY[0x210568AB0](&v2);
}

uint64_t sub_20DC6FAC0()
{
  sub_20DC50E1C((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_20DC51148((uint64_t)v1, MEMORY[0x263F8C2B8]);
  return MEMORY[0x210568AB0](&v2);
}

void flatbuffers::Parser::TokenError(flatbuffers::Parser *this@<X0>, _WORD *a2@<X8>)
{
  flatbuffers::Parser::TokenToStringId((char *)this, *((_DWORD *)this + 5), &v6);
  long long v4 = std::string::insert(&v6, 0, "cannot parse value starting with: ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error((uint64_t)this, a2);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

double sub_20DC6FBC4(uint64_t a1, __int16 a2)
{
  if (*(_DWORD *)a1 > 0xFFFFFFFC || (*(_DWORD *)a1 - 1) <= 9)
  {
    float v4 = sub_20DC76888(a2);
    sub_20DC509FC(6, &v7, v4);
    std::string::size_type v5 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v7.__r_.__value_.__l.__data_;
    *(_OWORD *)std::string::size_type v5 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
    *(void *)(a1 + 48) = *((void *)&v7.__r_.__value_.__l + 2);
  }
  return result;
}

double sub_20DC6FC3C(uint64_t a1)
{
  if (*(_DWORD *)a1 > 0xFFFFFFFC || (*(_DWORD *)a1 - 1) <= 9)
  {
    sub_20DC444C8();
    int v3 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*v3);
    }
    double result = *(double *)&v5;
    *(_OWORD *)int v3 = v5;
    *(void *)(a1 + 48) = v6;
  }
  return result;
}

double sub_20DC6FCA8(uint64_t a1)
{
  if (*(_DWORD *)a1 > 0xFFFFFFFC || (*(_DWORD *)a1 - 1) <= 9)
  {
    sub_20DC3F7A4();
    int v3 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*v3);
    }
    double result = *(double *)&v5;
    *(_OWORD *)int v3 = v5;
    *(void *)(a1 + 48) = v6;
  }
  return result;
}

double sub_20DC6FD14(uint64_t a1)
{
  if (*(_DWORD *)a1 > 0xFFFFFFFC || (*(_DWORD *)a1 - 1) <= 9)
  {
    sub_20DC6FAC0();
    int v3 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*v3);
    }
    double result = *(double *)&v5;
    *(_OWORD *)int v3 = v5;
    *(void *)(a1 + 48) = v6;
  }
  return result;
}

double sub_20DC6FD84(uint64_t a1)
{
  if (*(_DWORD *)a1 > 0xFFFFFFFC || (*(_DWORD *)a1 - 1) <= 9)
  {
    sub_20DC3C4E4();
    int v3 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*v3);
    }
    double result = *(double *)&v5;
    *(_OWORD *)int v3 = v5;
    *(void *)(a1 + 48) = v6;
  }
  return result;
}

double sub_20DC6FDF0(uint64_t a1)
{
  if (*(_DWORD *)a1 > 0xFFFFFFFC || (*(_DWORD *)a1 - 1) <= 9)
  {
    sub_20DC6FA50();
    int v3 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*v3);
    }
    double result = *(double *)&v5;
    *(_OWORD *)int v3 = v5;
    *(void *)(a1 + 48) = v6;
  }
  return result;
}

double sub_20DC6FE60(uint64_t a1)
{
  if (*(_DWORD *)a1 > 0xFFFFFFFC || (*(_DWORD *)a1 - 1) <= 9)
  {
    sub_20DC3C654();
    int v3 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*v3);
    }
    double result = *(double *)&v5;
    *(_OWORD *)int v3 = v5;
    *(void *)(a1 + 48) = v6;
  }
  return result;
}

uint64_t sub_20DC6FECC(uint64_t **a1, uint64_t a2, const void **a3)
{
  uint64_t result = sub_20DC5B558((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)result)
  {
    uint64_t v6 = *(void *)(result + 56);
    sub_20DC79E48(a1, result);
    uint64_t result = (uint64_t)sub_20DC593C8(a1, a3, (uint64_t)a3);
    *(void *)(result + 56) = v6;
  }
  return result;
}

uint64_t *flatbuffers::EnumDef::SortByValue(flatbuffers::EnumDef *this)
{
  int v1 = *((_DWORD *)this + 38);
  if (v1 == 10 || v1 == -3)
  {
    float v4 = (uint64_t *)*((void *)this + 26);
    int v3 = (uint64_t *)*((void *)this + 27);
    unint64_t v5 = 126 - 2 * __clz(v3 - v4);
    if (v3 == v4) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    return sub_20DC59564(*((uint64_t **)this + 26), v3, v6, 1);
  }
  else
  {
    long long v9 = (uint64_t *)*((void *)this + 26);
    std::string::size_type v8 = (uint64_t *)*((void *)this + 27);
    unint64_t v10 = 126 - 2 * __clz(v8 - v9);
    if (v8 == v9) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    return sub_20DC59FBC(*((uint64_t **)this + 26), v8, v11, 1);
  }
}

void *flatbuffers::EnumDef::RemoveDuplicates(void *this)
{
  int v1 = (char *)this[26];
  uint64_t v2 = (char *)this[27];
  if (v1 != v2)
  {
    int v3 = this;
    float v4 = v1 + 8;
    if (v1 + 8 != v2)
    {
      unint64_t v5 = this + 24;
      do
      {
        this = *(void **)v4;
        if (*(void *)(*(void *)v1 + 136) == *(void *)(*(void *)v4 + 136))
        {
          uint64_t v6 = (void *)v3[23];
          if (v6 == v5) {
            goto LABEL_15;
          }
          do
          {
            if ((void *)v6[7] == this) {
              v6[7] = *(void *)v1;
            }
            std::string v7 = (void *)v6[1];
            if (v7)
            {
              do
              {
                std::string::size_type v8 = v7;
                std::string v7 = (void *)*v7;
              }
              while (v7);
            }
            else
            {
              do
              {
                std::string::size_type v8 = (void *)v6[2];
                BOOL v9 = *v8 == (void)v6;
                uint64_t v6 = v8;
              }
              while (!v9);
            }
            uint64_t v6 = v8;
          }
          while (v8 != v5);
          if (this)
          {
LABEL_15:
            uint64_t v10 = sub_20DC50774((uint64_t)this);
            this = (void *)MEMORY[0x210568AF0](v10, 0x10B2C4072A4B994);
          }
          *(void *)float v4 = 0;
        }
        else
        {
          *((void *)v1 + 1) = this;
          v1 += 8;
        }
        v4 += 8;
      }
      while (v4 != v2);
    }
    uint64_t v11 = v1 + 8;
    if (v11 != v2)
    {
      uint64_t v12 = v2;
      size_t v13 = v3[27] - (void)v2;
      if (v13) {
        this = memmove(v11, v12, v13);
      }
      v3[27] = &v11[v13];
    }
  }
  return this;
}

void flatbuffers::Parser::StartEnum()
{
}

void flatbuffers::Parser::ParseProtoOption(flatbuffers::Parser *this@<X0>, unsigned char *a2@<X8>)
{
  a2[1] = 1;
  if (!*a2)
  {
    flatbuffers::Parser::ParseProtoKey(this, a2);
    a2[1] = 1;
    if (!*a2)
    {
      flatbuffers::Parser::Expect(this, 61, (uint64_t)a2);
      a2[1] = 1;
      if (!*a2)
      {
        flatbuffers::Parser::ParseProtoCurliesOrIdent(this, a2);
        a2[1] = 1;
        if (!*a2) {
          *(_WORD *)a2 = 0;
        }
      }
    }
  }
}

void sub_20DC70304(_WORD *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  __p[23] = 9;
  strcpy(__p, "bit_flags");
  unint64_t v5 = sub_20DC58BC0(v4 + 72, (const void **)__p);
  BOOL v6 = (uint64_t *)(v4 + 80) == v5 || v5[7] == 0;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v6)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)std::string __p = operator new(0x48uLL);
    *(_OWORD *)&__p[8] = xmmword_20DC7CCC0;
    strcpy(*(char **)__p, "invalid bit_flags_all for enum definition: missing bit_flags attribute");
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 16);
    __p[23] = 14;
    strcpy(__p, "bit_flags_none");
    std::string::size_type v8 = sub_20DC58BC0(v7 + 88, (const void **)__p);
    BOOL v9 = (uint64_t *)(v7 + 96) == v8 || v8[7] == 0;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v9)
    {
      if (*(unsigned char *)(a2 + 26))
      {
        uint64_t v10 = *(void *)a2;
        *(void *)std::string __p = operator new(0x48uLL);
        *(_OWORD *)&__p[8] = xmmword_20DC7CE20;
        strcpy(*(char **)__p, "invalid attribute bit_flags_all on enumerator with an explicit value");
      }
      else
      {
        if ((*(_DWORD *)(a2 + 32) & 0x80000000) != 0)
        {
          *(void *)(*(void *)(a2 + 16) + 136) = -1;
          *(unsigned char *)(a2 + 27) = 1;
          *a1 = 0;
          return;
        }
        uint64_t v10 = *(void *)a2;
        *(void *)std::string __p = operator new(0x38uLL);
        *(_OWORD *)&__p[8] = xmmword_20DC7CCA0;
        strcpy(*(char **)__p, "enumerator with bit_flags_all attribute already defined");
      }
    }
    else
    {
      uint64_t v10 = *(void *)a2;
      *(void *)std::string __p = operator new(0x48uLL);
      *(_OWORD *)&__p[8] = xmmword_20DC7CE10;
      strcpy(*(char **)__p, "invalid attributes combination: bit_flags_all and bit_flags_none");
    }
  }
  flatbuffers::Parser::Error(v10, a1);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
}

void sub_20DC70558(_WORD *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  __p[23] = 9;
  strcpy(__p, "bit_flags");
  unint64_t v5 = sub_20DC58BC0(v4 + 72, (const void **)__p);
  BOOL v6 = (uint64_t *)(v4 + 80) == v5 || v5[7] == 0;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v6)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)std::string __p = operator new(0x48uLL);
    *(_OWORD *)&__p[8] = xmmword_20DC7CE40;
    strcpy(*(char **)__p, "invalid bit_flags_none for enum definition: missing bit_flags attribute");
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 16);
    __p[23] = 13;
    strcpy(__p, "bit_flags_all");
    std::string::size_type v8 = sub_20DC58BC0(v7 + 88, (const void **)__p);
    BOOL v9 = (uint64_t *)(v7 + 96) == v8 || v8[7] == 0;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v9)
    {
      if (*(unsigned char *)(a2 + 26))
      {
        uint64_t v10 = *(void *)a2;
        *(void *)std::string __p = operator new(0x48uLL);
        *(_OWORD *)&__p[8] = xmmword_20DC7CE30;
        strcpy(*(char **)__p, "invalid attribute bit_flags_none on enumerator with an explicit value");
      }
      else
      {
        if ((*(_DWORD *)(a2 + 36) & 0x80000000) != 0)
        {
          *(void *)(*(void *)(a2 + 16) + 136) = 0;
          *(unsigned char *)(a2 + 28) = 1;
          *a1 = 0;
          return;
        }
        uint64_t v10 = *(void *)a2;
        *(void *)std::string __p = operator new(0x40uLL);
        *(_OWORD *)&__p[8] = xmmword_20DC7CD80;
        strcpy(*(char **)__p, "enumerator with bit_flags_none attribute already defined");
      }
    }
    else
    {
      uint64_t v10 = *(void *)a2;
      *(void *)std::string __p = operator new(0x48uLL);
      *(_OWORD *)&__p[8] = xmmword_20DC7CE10;
      strcpy(*(char **)__p, "invalid attributes combination: bit_flags_none and bit_flags_all");
    }
  }
  flatbuffers::Parser::Error(v10, a1);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
}

void flatbuffers::Parser::StartStruct(const std::string *a1@<X0>, const std::string *a2@<X1>, std::string **a3@<X2>, _WORD *a4@<X8>)
{
  Struct = (std::string *)flatbuffers::Parser::LookupCreateStruct((uint64_t)a1, (uint64_t)a2, 1, 1);
  if (Struct[8].__r_.__value_.__s.__data_[9])
  {
    BOOL v9 = Struct;
    Struct[8].__r_.__value_.__s.__data_[9] = 0;
    std::string::operator=(Struct, a2);
    std::string::operator=(v9 + 1, a1 + 48);
    std::string::size_type size = (void *)a1[6].__r_.__value_.__l.__size_;
    uint64_t v11 = (void *)a1[6].__r_.__value_.__r.__words[2];
    if (size != v11)
    {
      while ((std::string *)*size != v9)
      {
        if (++size == v11)
        {
          std::string::size_type size = (void *)a1[6].__r_.__value_.__r.__words[2];
          break;
        }
      }
    }
    if (size != v11)
    {
      for (int i = size + 1; i != v11; ++i)
      {
        if ((std::string *)*i != v9) {
          *size++ = *i;
        }
      }
    }
    *std::string::size_type size = v9;
    *a3 = v9;
    *a4 = 0;
  }
  else
  {
    std::operator+<char>();
    flatbuffers::Parser::Error((uint64_t)a1, a4);
    if (v14 < 0) {
      operator delete(__p);
    }
  }
}

void flatbuffers::Parser::CheckClash(char *__s@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, int a5@<W4>, _WORD *a6@<X8>)
{
  size_t v12 = strlen(__s);
  size_t v13 = *(const std::string ***)a3;
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
LABEL_14:
    *a6 = 0;
    return;
  }
  std::string::size_type v14 = v12;
  while (1)
  {
    std::string::size_type v15 = *v13;
    if (SHIBYTE((*v13)->__r_.__value_.__r.__words[2]) < 0) {
      break;
    }
    std::string::size_type size = HIBYTE((*v13)->__r_.__value_.__r.__words[2]);
    if (v14 < size) {
      goto LABEL_7;
    }
LABEL_13:
    if (++v13 == *(const std::string ***)(a3 + 8)) {
      goto LABEL_14;
    }
  }
  std::string::size_type size = v15->__r_.__value_.__l.__size_;
  if (size <= v14) {
    goto LABEL_13;
  }
LABEL_7:
  if (std::string::compare(*v13, size - v14, v14, __s)) {
    goto LABEL_13;
  }
  unsigned int v17 = (*v13)[6].__r_.__value_.__r.__words[1];
  if (v17 >= 0xFFFFFFFD || v17 == 1) {
    goto LABEL_13;
  }
  if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v19 = v15->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v19 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  }
  std::string::basic_string(&v33, v15, 0, v19 - v14, (std::allocator<char> *)&v32);
  uint64_t v20 = sub_20DC7572C(a4 + 152, &v33);
  if (a4 + 160 == v20) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(void *)(v20 + 56);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (!v21 || *(_DWORD *)(v21 + 152) != a5) {
    goto LABEL_13;
  }
  std::operator+<char>();
  std::string::size_type v22 = std::string::append(&v31, " would clash with generated functions for field ");
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  char v24 = *(unsigned char *)(v21 + 23);
  BOOL v25 = v24 < 0;
  if (v24 >= 0) {
    uint64_t v26 = (const std::string::value_type *)v21;
  }
  else {
    uint64_t v26 = *(const std::string::value_type **)v21;
  }
  std::string::size_type v27 = v24 & 0x7F;
  if (v25) {
    std::string::size_type v28 = *(void *)(v21 + 8);
  }
  else {
    std::string::size_type v28 = v27;
  }
  std::string::size_type v29 = std::string::append(&v32, v26, v28);
  std::string::size_type v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error(a2, a6);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void flatbuffers::Parser::ParseDecl(flatbuffers::Parser *this@<X0>, uint64_t a2@<X8>)
{
  __int16 v48 = 0;
  long long v49 = 0;
  uint64_t v50 = 0;
  sub_20DC58508(&v48, *((void *)this + 7), *((void *)this + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3));
  if (*((_DWORD *)this + 5) != 260) {
    goto LABEL_8;
  }
  BOOL v4 = sub_20DC3D8C0((void *)this + 4, "struct");
  char v5 = 1;
  if (v4) {
    goto LABEL_3;
  }
  if (*((_DWORD *)this + 5) != 260 || !sub_20DC3D8C0((void *)this + 4, "table"))
  {
LABEL_8:
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 20;
    strcpy((char *)&__p, "declaration expected");
    flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
    goto LABEL_9;
  }
  char v5 = 0;
LABEL_3:
  flatbuffers::Parser::Next(this, a2);
  *(unsigned char *)(a2 + 1) = 1;
  if (*(unsigned char *)a2) {
    goto LABEL_4;
  }
  if (*((char *)this + 55) < 0) {
    sub_20DC55634((uint64_t)&__p, *((const void **)this + 4), *((void *)this + 5));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 32);
  }
  flatbuffers::Parser::Expect(this, 260, a2);
  *(unsigned char *)(a2 + 1) = 1;
  if (*(unsigned char *)a2) {
    goto LABEL_9;
  }
  uint64_t v46 = 0;
  flatbuffers::Parser::StartStruct((const std::string *)this, &__p, &v46, (_WORD *)a2);
  *(unsigned char *)(a2 + 1) = 1;
  if (*(unsigned char *)a2) {
    goto LABEL_9;
  }
  BOOL v6 = v46;
  if (&v46[2] != (std::string *)&v48) {
    sub_20DC58CA8((uint64_t)&v46[2], v48, v49, 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v48) >> 3));
  }
  v6[8].__r_.__value_.__s.__data_[8] = v5;
  flatbuffers::Parser::ParseMetaData((uint64_t)this, a2);
  *(unsigned char *)(a2 + 1) = 1;
  if (*(unsigned char *)a2) {
    goto LABEL_9;
  }
  *((unsigned char *)&v45.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v45, "original_order");
  uint64_t v7 = sub_20DC58BC0((uint64_t)&v6[3], (const void **)&v45.__r_.__value_.__l.__data_);
  if (&v6[3].__r_.__value_.__r.__words[1] == (std::string::size_type *)v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7[7];
  }
  BOOL v9 = v8 == 0;
  BOOL v10 = !v4;
  if (!v9) {
    BOOL v10 = 0;
  }
  v6[8].__r_.__value_.__s.__data_[10] = v10;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  flatbuffers::Parser::Expect(this, 123, a2);
  while (1)
  {
    *(unsigned char *)(a2 + 1) = 1;
    if (*(unsigned char *)a2) {
      goto LABEL_9;
    }
    if (*((_DWORD *)this + 5) == 125) {
      break;
    }
    flatbuffers::Parser::ParseField((uint64_t)this, (uint64_t)v6, a2);
  }
  *((unsigned char *)&v45.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v45, "force_align");
  uint64_t v11 = sub_20DC58BC0((uint64_t)&v6[3], (const void **)&v45.__r_.__value_.__l.__data_);
  if (&v6[3].__r_.__value_.__r.__words[1] == (std::string::size_type *)v11) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11[7];
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (!v4)
  {
    std::string::pointer data = v6[9].__r_.__value_.__l.__data_;
    goto LABEL_43;
  }
  if (!v12)
  {
LABEL_37:
    std::string::pointer data = v6[9].__r_.__value_.__l.__data_;
    if (!data)
    {
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_20DC7CDD0;
      strcpy(v45.__r_.__value_.__l.__data_, "size 0 structs not allowed");
LABEL_39:
      flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
      if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      std::string::size_type v14 = (void *)v45.__r_.__value_.__r.__words[0];
      goto LABEL_41;
    }
LABEL_43:
    p_std::string::size_type size = (uint64_t *)&v6[7].__r_.__value_.__l.__size_;
    std::string::size_type size = (char *)v6[7].__r_.__value_.__l.__size_;
    uint64_t v17 = (v6[8].__r_.__value_.__r.__words[2] - 1) & -(uint64_t)data;
    v6[9].__r_.__value_.__r.__words[0] = (std::string::size_type)&data[v17];
    std::string::size_type v18 = (char *)v6[7].__r_.__value_.__r.__words[2];
    if (v18 == size) {
      goto LABEL_45;
    }
    *(void *)(*((void *)v18 - 1) + 232) = v17;
    if (v4) {
      goto LABEL_45;
    }
    unint64_t v24 = 0;
    uint64_t v25 = -(uint64_t)size;
    do
    {
      uint64_t v26 = *(void *)size;
      uint64_t v27 = *(void *)size + 72;
      *((unsigned char *)&v45.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v45, "id");
      std::string::size_type v28 = sub_20DC58BC0(v27, (const void **)&v45.__r_.__value_.__l.__data_);
      if ((uint64_t *)(v26 + 80) == v28) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = v28[7];
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (v29) {
        ++v24;
      }
      size += 8;
      v25 -= 8;
    }
    while (size != (char *)v6[7].__r_.__value_.__r.__words[2]);
    if (!v24) {
      goto LABEL_45;
    }
    uint64_t v30 = *p_size;
    if (v24 != -(*p_size + v25) >> 3)
    {
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_20DC7CE50;
      strcpy(v45.__r_.__value_.__l.__data_, "either all fields or no fields must have an 'id' attribute");
      goto LABEL_39;
    }
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_20DC46058;
    unint64_t v31 = 126 - 2 * __clz(v24);
    uint64_t v32 = size == (char *)v30 ? 0 : v31;
    sub_20DC79634(v30, size, &v45, v32, 1);
    std::string::size_type v33 = v6[7].__r_.__value_.__l.__size_;
    if ((int)((v6[7].__r_.__value_.__r.__words[2] - v33) >> 3) < 1)
    {
LABEL_45:
      flatbuffers::Parser::CheckClash("_type", (uint64_t)this, (uint64_t)&v6[7].__r_.__value_.__l.__size_, (uint64_t)v6, 16, (_WORD *)a2);
      *(unsigned char *)(a2 + 1) = 1;
      if (!*(unsigned char *)a2)
      {
        flatbuffers::Parser::CheckClash("Type", (uint64_t)this, (uint64_t)&v6[7].__r_.__value_.__l.__size_, (uint64_t)v6, 16, (_WORD *)a2);
        *(unsigned char *)(a2 + 1) = 1;
        if (!*(unsigned char *)a2)
        {
          flatbuffers::Parser::CheckClash("_length", (uint64_t)this, (uint64_t)&v6[7].__r_.__value_.__l.__size_, (uint64_t)v6, 14, (_WORD *)a2);
          *(unsigned char *)(a2 + 1) = 1;
          if (!*(unsigned char *)a2)
          {
            flatbuffers::Parser::CheckClash("Length", (uint64_t)this, (uint64_t)&v6[7].__r_.__value_.__l.__size_, (uint64_t)v6, 14, (_WORD *)a2);
            *(unsigned char *)(a2 + 1) = 1;
            if (!*(unsigned char *)a2)
            {
              flatbuffers::Parser::CheckClash("_byte_vector", (uint64_t)this, (uint64_t)&v6[7].__r_.__value_.__l.__size_, (uint64_t)v6, 13, (_WORD *)a2);
              *(unsigned char *)(a2 + 1) = 1;
              if (!*(unsigned char *)a2)
              {
                flatbuffers::Parser::CheckClash("ByteVector", (uint64_t)this, (uint64_t)&v6[7].__r_.__value_.__l.__size_, (uint64_t)v6, 13, (_WORD *)a2);
                *(unsigned char *)(a2 + 1) = 1;
                if (!*(unsigned char *)a2)
                {
                  flatbuffers::Parser::Expect(this, 125, a2);
                  *(unsigned char *)(a2 + 1) = 1;
                  if (!*(unsigned char *)a2)
                  {
                    flatbuffers::Namespace::GetFullyQualifiedName(*((uint64_t **)this + 37), (uint64_t)v6, 0x3E8uLL, &v45);
                    operator new();
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      uint64_t v34 = 0;
      while (1)
      {
        uint64_t v35 = *(void *)(v33 + 8 * v34) + 72;
        *((unsigned char *)&v45.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v45, "id");
        uint64_t v36 = sub_20DC58BC0(v35, (const void **)&v45.__r_.__value_.__l.__data_)[7];
        long long v37 = (const char *)(v36 + 32);
        if (*(char *)(v36 + 55) < 0) {
          long long v37 = *(const char **)v37;
        }
        int v38 = atoi(v37);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v34 != v38) {
          break;
        }
        std::string::size_type v33 = v6[7].__r_.__value_.__l.__size_;
        *(_WORD *)(*(void *)(v33 + 8 * v34) + 208) = 2 * v34 + 4;
        if (++v34 >= (int)((v6[7].__r_.__value_.__r.__words[2] - v33) >> 3)) {
          goto LABEL_45;
        }
      }
      sub_20DC3C4E4();
      int v39 = std::string::insert(&v43, 0, "field id's must be consecutive from 0, id ");
      std::string::size_type v40 = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      uint64_t v41 = std::string::append(&v44, " missing or set twice");
      std::string::size_type v42 = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v14 = (void *)v43.__r_.__value_.__r.__words[0];
        goto LABEL_41;
      }
    }
    goto LABEL_9;
  }
  std::string::size_type v19 = (const char *)(v12 + 32);
  if (*(char *)(v12 + 55) < 0) {
    std::string::size_type v19 = *(const char **)v19;
  }
  int v20 = atoi(v19);
  if (*(_DWORD *)v12 == 7 && v20 <= 0x10 && v6[8].__r_.__value_.__r.__words[2] <= v20)
  {
    uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] < 2uLL)
    {
      v6[8].__r_.__value_.__r.__words[2] = v20;
      goto LABEL_37;
    }
  }
  sub_20DC3C4E4();
  std::string::size_type v22 = std::string::insert(&v44, 0, "force_align must be a power of two integer ranging from thestruct's natural alignment to ");
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a2);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v14 = (void *)v44.__r_.__value_.__r.__words[0];
LABEL_41:
    operator delete(v14);
  }
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_4:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  sub_20DC5847C((void ***)&__p);
}

void flatbuffers::Parser::ParseService(flatbuffers::Parser *this@<X0>, unsigned char *a2@<X8>)
{
  memset(v7, 0, 24);
  sub_20DC58508(v7, *((void *)this + 7), *((void *)this + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3));
  flatbuffers::Parser::Next(this, (uint64_t)a2);
  a2[1] = 1;
  if (!*a2)
  {
    if (*((char *)this + 55) < 0)
    {
      sub_20DC55634((uint64_t)__p, *((const void **)this + 4), *((void *)this + 5));
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)this + 2);
      uint64_t v6 = *((void *)this + 6);
    }
    flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
    a2[1] = 1;
    if (!*a2) {
      operator new();
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL v4 = v7;
  sub_20DC5847C((void ***)&v4);
}

BOOL flatbuffers::Parser::SetRootType(flatbuffers::Parser *this, const char *__s)
{
  std::string::size_type v4 = strlen(__s);
  std::string::__init(&v13, __s, v4);
  char v5 = (void *)sub_20DC58A14((uint64_t)this + 128, (uint64_t)&v13);
  if ((void *)((char *)this + 136) == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = v5[7];
    if (v6) {
      ++*(_DWORD *)(v6 + 144);
    }
  }
  *((void *)this + 72) = v6;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    uint64_t v6 = *((void *)this + 72);
  }
  if (!v6)
  {
    uint64_t v8 = (uint64_t *)*((void *)this + 37);
    std::string::size_type v9 = strlen(__s);
    std::string::__init(&__p, __s, v9);
    flatbuffers::Namespace::GetFullyQualifiedName(v8, (uint64_t)&__p, 0x3E8uLL, &v13);
    BOOL v10 = (void *)sub_20DC58A14((uint64_t)this + 128, (uint64_t)&v13);
    if ((void *)((char *)this + 136) == v10)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = v10[7];
      if (v11) {
        ++*(_DWORD *)(v11 + 144);
      }
    }
    *((void *)this + 72) = v11;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v6 = *((void *)this + 72);
  }
  return v6 != 0;
}

void flatbuffers::Parser::ParseNamespace(flatbuffers::Parser *this@<X0>, unsigned char *a2@<X8>)
{
  a2[1] = 1;
  if (!*a2) {
    operator new();
  }
}

void flatbuffers::Parser::ParseProtoCurliesOrIdent(flatbuffers::Parser *this@<X0>, unsigned char *a2@<X8>)
{
  int v4 = *((_DWORD *)this + 5);
  flatbuffers::Parser::Next(this, (uint64_t)a2);
  a2[1] = 1;
  if (v4 == 123)
  {
    if (*a2) {
      return;
    }
    int v5 = 1;
    while (v5)
    {
      int v6 = *((_DWORD *)this + 5);
      if (v6 == 123) {
        int v7 = v5 + 1;
      }
      else {
        int v7 = v5;
      }
      if (v6 == 125) {
        --v5;
      }
      else {
        int v5 = v7;
      }
      flatbuffers::Parser::Next(this, (uint64_t)a2);
      a2[1] = 1;
      if (*a2) {
        return;
      }
    }
  }
  else if (*a2)
  {
    return;
  }
  *(_WORD *)a2 = 0;
}

BOOL sub_20DC71B80(uint64_t a1, const void **a2, uint64_t a3)
{
  int v6 = *(uint64_t **)(a1 + 32);
  if ((unint64_t)v6 < *(void *)(a1 + 40))
  {
    *int v6 = a3;
    int v7 = v6 + 1;
  }
  else
  {
    int v7 = sub_20DC585B8((void **)(a1 + 24), a3);
  }
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = sub_20DC5B558(a1, (uint64_t)a2);
  if (a1 + 8 == v8)
  {
    BOOL v10 = a2;
    sub_20DC79A54(a1, a2, (uint64_t *)&v10)[7] = a3;
  }
  return a1 + 8 != v8;
}

void flatbuffers::Parser::ParseTypeFromProtoType(_DWORD *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  int v6 = a1 + 8;
  int v7 = "float";
  uint64_t v8 = &off_26412AD18;
  do
  {
    if (sub_20DC3D8C0(v6, v7))
    {
      *a2 = *(v8 - 1);
      flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a3);
      goto LABEL_8;
    }
    std::string::size_type v9 = *v8;
    v8 += 2;
    int v7 = v9;
  }
  while (v9);
  if (a1[5] != 46 || (flatbuffers::Parser::Next((flatbuffers::Parser *)a1, (uint64_t)a3), a3[1] = 1, !*a3))
  {
    flatbuffers::Parser::ParseTypeIdent((uint64_t)a1, (uint64_t)a2, a3);
LABEL_8:
    a3[1] = 1;
    if (!*a3) {
      *(_WORD *)a3 = 0;
    }
  }
}

void flatbuffers::Parser::ParseProtoKey(flatbuffers::Parser *this@<X0>, unsigned char *a2@<X8>)
{
  if (*((_DWORD *)this + 5) == 40)
  {
    flatbuffers::Parser::Next(this, (uint64_t)a2);
    while (1)
    {
      a2[1] = 1;
      if (*a2) {
        break;
      }
      int v4 = *((_DWORD *)this + 5);
      if (v4 != 260 && v4 != 46)
      {
        flatbuffers::Parser::Expect(this, 41, (uint64_t)a2);
        while (1)
        {
          a2[1] = 1;
          if (*a2) {
            break;
          }
          if (*((_DWORD *)this + 5) != 46) {
            goto LABEL_8;
          }
          flatbuffers::Parser::Next(this, (uint64_t)a2);
          a2[1] = 1;
          if (*a2) {
            break;
          }
          flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
        }
        return;
      }
      flatbuffers::Parser::Next(this, (uint64_t)a2);
    }
  }
  else
  {
    flatbuffers::Parser::Expect(this, 260, (uint64_t)a2);
    a2[1] = 1;
    if (!*a2) {
LABEL_8:
    }
      *(_WORD *)a2 = 0;
  }
}

void sub_20DC71DE0(uint64_t a1, uint64_t a2, const void **a3)
{
  if (*(unsigned char *)(a2 + 27)
    || *(unsigned char *)(a2 + 28)
    || (sub_20DC7587C((_WORD *)a1, (uint64_t *)a2, (uint64_t *)(*(void *)(a2 + 16) + 136), *(unsigned char *)(a2 + 25) == 0),
        *(unsigned char *)(a1 + 1) = 1,
        !*(unsigned char *)a1))
  {
    int v6 = sub_20DC4CFB8((uint64_t **)(*(void *)(a2 + 8) + 184), a3, *(void *)(a2 + 16));
    *(void *)(a2 + 16) = 0;
    if (v6)
    {
      uint64_t v7 = *(void *)a2;
      std::operator+<char>();
      flatbuffers::Parser::Error(v7, (_WORD *)a1);
      if (v9 < 0) {
        operator delete(__p);
      }
    }
    else
    {
      if (*(unsigned char *)(a2 + 27))
      {
        *(_DWORD *)(a2 + 32) = ((*(void *)(*(void *)(a2 + 8) + 216) - *(void *)(*(void *)(a2 + 8) + 208)) >> 3)
                             - 1;
      }
      else if (*(unsigned char *)(a2 + 28))
      {
        *(_DWORD *)(a2 + 36) = ((*(void *)(*(void *)(a2 + 8) + 216) - *(void *)(*(void *)(a2 + 8) + 208)) >> 3)
                             - 1;
      }
      *(_WORD *)a1 = 0;
    }
  }
}

_OWORD *sub_20DC71EF8(uint64_t *a1, unint64_t a2)
{
  int v5 = (char **)(a1 + 3);
  uint64_t v4 = a1[3];
  uint64_t v6 = (a1[4] - v4) >> 4;
  if (a1[4] == v4) {
    uint64_t v4 = 0;
  }
  unint64_t v7 = v6 - a2;
  unint64_t v8 = v7 >> 1;
  char v9 = (long long *)(v4 + 16 * a2);
  v18[0] = a1;
  unint64_t v10 = 126 - 2 * __clz(v7 >> 1);
  if (v7 >= 2) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  sub_20DC7734C(v9, &v9[2 * (v7 >> 1)], v18, v11, 1);
  v18[0] = (uint64_t *)sub_20DC5167C((uint64_t)a1, a2, v8, 2, 1, 0);
  v18[1] = v12;
  *(void *)&long long v17 = sub_20DC5167C((uint64_t)a1, a2 + 1, v8, 2, 0, (uint64_t)v18);
  *((void *)&v17 + 1) = v13;
  std::string::size_type v14 = (char *)a1[4];
  unint64_t v15 = (v14 - *v5) >> 4;
  if (a2 > v15)
  {
    sub_20DC77A54(v5, a2 - v15);
    std::string::size_type v14 = (char *)a1[4];
  }
  else if (a2 < v15)
  {
    std::string::size_type v14 = &(*v5)[16 * a2];
    a1[4] = (uint64_t)v14;
  }
  if ((unint64_t)v14 >= a1[5])
  {
    uint64_t result = sub_20DC52CB4((void **)v5, &v17);
  }
  else
  {
    *(_OWORD *)std::string::size_type v14 = v17;
    uint64_t result = v14 + 16;
  }
  a1[4] = (uint64_t)result;
  return result;
}

_OWORD *sub_20DC72020(void *a1, unint64_t a2)
{
  uint64_t v4 = (char **)(a1 + 3);
  *(void *)&long long v9 = sub_20DC5167C((uint64_t)a1, a2, ((uint64_t)(a1[4] - a1[3]) >> 4) - a2, 1, 0, 0);
  *((void *)&v9 + 1) = v5;
  uint64_t v6 = (char *)a1[4];
  unint64_t v7 = (v6 - *v4) >> 4;
  if (a2 > v7)
  {
    sub_20DC77A54(v4, a2 - v7);
    uint64_t v6 = (char *)a1[4];
  }
  else if (a2 < v7)
  {
    uint64_t v6 = &(*v4)[16 * a2];
    a1[4] = v6;
  }
  if ((unint64_t)v6 >= a1[5])
  {
    uint64_t result = sub_20DC52CB4((void **)v4, &v9);
  }
  else
  {
    *(_OWORD *)uint64_t v6 = v9;
    uint64_t result = v6 + 16;
  }
  a1[4] = result;
  return result;
}

_OWORD *sub_20DC720E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (2 * a2) ^ (a2 >> 63);
  if (HIDWORD(v3)) {
    int v4 = 3;
  }
  else {
    int v4 = 2;
  }
  if (v3 < 0x10000) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  *(void *)&long long v8 = a2;
  DWORD2(v8) = 1;
  HIDWORD(v8) = v5;
  uint64_t v6 = *(_OWORD **)(a1 + 32);
  if ((unint64_t)v6 >= *(void *)(a1 + 40))
  {
    uint64_t result = sub_20DC52CB4((void **)(a1 + 24), &v8);
  }
  else
  {
    *uint64_t v6 = v8;
    uint64_t result = v6 + 1;
  }
  *(void *)(a1 + 32) = result;
  return result;
}

uint64_t flatbuffers::Parser::ParseFlexBuffer(flatbuffers::Parser *a1, const char *a2, const char *a3, uint64_t *a4)
{
  flatbuffers::Parser::StartParseFile(a1, a2, a3, (uint64_t)v8);
  if (v8[0]) {
    return 0;
  }
  flatbuffers::Parser::ParseFlexBufferValue((uint64_t)a1, a4, (uint64_t)v7);
  if (v7[0]) {
    return 0;
  }
  sub_20DC722EC((uint64_t)a4);
  return 1;
}

void flatbuffers::Parser::StartParseFile(flatbuffers::Parser *this@<X0>, const char *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  if (a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = (const char *)&unk_20DC7CFF7;
  }
  MEMORY[0x210568880]((char *)this + 1152, v7);
  *((void *)this + 143) = a2;
  *(void *)this = a2;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = 1;
  if (*((char *)this + 335) < 0)
  {
    **((unsigned char **)this + 39) = 0;
    *((void *)this + 40) = 0;
  }
  else
  {
    *((unsigned char *)this + 312) = 0;
    *((unsigned char *)this + 335) = 0;
  }
  flatbuffers::Parser::SkipByteOrderMark((unsigned __int8 **)this, (_WORD *)a4);
  *(unsigned char *)(a4 + 1) = 1;
  if (!*(unsigned char *)a4)
  {
    flatbuffers::Parser::Next(this, a4);
    *(unsigned char *)(a4 + 1) = 1;
    if (!*(unsigned char *)a4)
    {
      if (*((_DWORD *)this + 5) == 256)
      {
        strcpy(__p, "input file is empty");
        flatbuffers::Parser::Error((uint64_t)this, (_WORD *)a4);
      }
      else
      {
        *(_WORD *)a4 = 0;
      }
    }
  }
}

char *sub_20DC722EC(uint64_t a1)
{
  unint64_t v3 = *(char **)a1;
  uint64_t v2 = *(char **)(a1 + 8);
  uint64_t v4 = (1 << sub_20DC52A3C(*(void *)(a1 + 24), (uint64_t)&v2[-*(void *)a1], 0));
  char v10 = 0;
  sub_20DC777DC((char **)a1, v2, (v4 - 1) & (v3 - v2), &v10);
  sub_20DC77738(a1, *(void *)(a1 + 24), v4);
  uint64_t v5 = *(void *)(a1 + 24);
  int v11 = 0;
  int v6 = *(_DWORD *)(v5 + 8);
  unint64_t v7 = (int *)(v5 + 12);
  BOOL v8 = v6 < 4 || v6 == 26;
  if (v8 && *v7 < 0) {
    unint64_t v7 = &v11;
  }
  char __src = *v7 | (4 * v6);
  sub_20DC52ACC(a1, *(char **)(a1 + 8), &__src, &v13, 1);
  char v13 = v4;
  uint64_t result = sub_20DC52ACC(a1, *(char **)(a1 + 8), &v13, (char *)&v14, 1);
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

void flatbuffers::Parser::ParseRoot(uint64_t **this@<X0>, const char *a2@<X1>, const char **a3@<X2>, const char *a4@<X3>, unsigned __int8 *a5@<X8>)
{
  flatbuffers::Parser::DoParse((flatbuffers::Parser *)this, a2, a3, a4, 0, a5);
  a5[1] = 1;
  if (*a5) {
    return;
  }
  BOOL v8 = this[19];
  unint64_t v7 = this[20];
  while (v8 != v7)
  {
    uint64_t v9 = *v8;
    if (*(unsigned char *)(*v8 + 201))
    {
      if (!*((unsigned char *)this + 747)) {
        goto LABEL_50;
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(v9 + 128) + 8) - **(void **)(v9 + 128)) >> 3);
      if (v10 == -1) {
        goto LABEL_50;
      }
      do
      {
        flatbuffers::Namespace::GetFullyQualifiedName(*(uint64_t **)(v9 + 128), v9, v10, &v60);
        uint64_t v11 = flatbuffers::Parser::LookupEnum((uint64_t)this, (uint64_t)&v60);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        BOOL v12 = v10-- != 0;
      }
      while (v12 && !v11);
      if (!v11)
      {
LABEL_50:
        std::operator+<char>();
        if (*(void *)(v9 + 224))
        {
          std::operator+<char>();
          uint64_t v34 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          std::string::size_type v35 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F
              : __p.__r_.__value_.__l.__size_;
          std::string::append(&v60, (const std::string::value_type *)v34, v35);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_47;
      }
      char v13 = this[19];
      uint64_t v14 = this[20];
      int v15 = *(_DWORD *)(v9 + 144);
      if (v13 != v14)
      {
        do
        {
          uint64_t v16 = *(uint64_t **)(*v13 + 176);
          long long v17 = *(uint64_t **)(*v13 + 184);
          while (v16 != v17)
          {
            uint64_t v18 = *v16;
            if (*(void *)(*v16 + 160) == v9)
            {
              *(void *)(v18 + 160) = 0;
              *(void *)(v18 + 168) = v11;
              if (*(_DWORD *)(v18 + 152) == 14) {
                uint64_t v19 = 156;
              }
              else {
                uint64_t v19 = 152;
              }
              *(_DWORD *)(v18 + v19) = *(_DWORD *)(v11 + 152);
              --*(_DWORD *)(v9 + 144);
              ++*(_DWORD *)(v11 + 144);
            }
            ++v16;
          }
          ++v13;
        }
        while (v13 != v14);
        int v15 = *(_DWORD *)(v9 + 144);
      }
      if (v15)
      {
        sub_20DC3C4E4();
        uint64_t v36 = std::string::insert(&v55, 0, "internal: ");
        std::string::size_type v37 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        int v38 = std::string::append(&v56, "/");
        std::string::size_type v39 = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        sub_20DC3C4E4();
        if (v54 >= 0) {
          std::string::size_type v40 = v53;
        }
        else {
          std::string::size_type v40 = (void **)v53[0];
        }
        if (v54 >= 0) {
          std::string::size_type v41 = v54 & 0x7F;
        }
        else {
          std::string::size_type v41 = (std::string::size_type)v53[1];
        }
        std::string::size_type v42 = std::string::append(&v57, (const std::string::value_type *)v40, v41);
        std::string::size_type v43 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        std::string v44 = std::string::append(&v58, " use(s) of pre-declaration enum not accounted for: ");
        std::string::size_type v45 = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        char v46 = *(unsigned char *)(v11 + 23);
        BOOL v47 = v46 < 0;
        if (v46 >= 0) {
          __int16 v48 = (const std::string::value_type *)v11;
        }
        else {
          __int16 v48 = *(const std::string::value_type **)v11;
        }
        std::string::size_type v49 = v46 & 0x7F;
        if (v47) {
          std::string::size_type v50 = *(void *)(v11 + 8);
        }
        else {
          std::string::size_type v50 = v49;
        }
        __int16 v51 = std::string::append(&__p, v48, v50);
        std::string::size_type v52 = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        flatbuffers::Parser::Error((uint64_t)this, a5);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if (v54 < 0) {
          operator delete(v53[0]);
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v33 = (void *)v55.__r_.__value_.__r.__words[0];
          goto LABEL_49;
        }
        return;
      }
      uint64_t v20 = sub_20DC5B558((uint64_t)(this + 16), v9);
      sub_20DC79E48(this + 16, v20);
      uint8x8_t v21 = this[20];
      int64_t v22 = (char *)v21 - (char *)(v8 + 1);
      if (v21 != v8 + 1) {
        memmove(v8, v8 + 1, (char *)v21 - (char *)(v8 + 1));
      }
      this[20] = (uint64_t *)((char *)v8 + v22);
      sub_20DC446D0((uint64_t *)(v9 + 224), 0);
      sub_20DC515A0(v9 + 152);
      uint64_t v23 = sub_20DC51538(v9);
      MEMORY[0x210568AF0](v23, 0x10B2C4058EA06FBLL);
      unint64_t v7 = this[20];
    }
    else
    {
      ++v8;
    }
  }
  unint64_t v24 = this[25];
  uint64_t v25 = this[26];
  if (v24 == v25)
  {
LABEL_45:
    *(_WORD *)a5 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v26 = *v24;
      if (*(unsigned char *)(*v24 + 148))
      {
        uint64_t v27 = *(void *)(v26 + 208);
        uint64_t v28 = *(void *)(v26 + 216);
        if (v27 != v28) {
          break;
        }
      }
LABEL_44:
      if (++v24 == v25) {
        goto LABEL_45;
      }
    }
    unint64_t v29 = (unint64_t)this[140];
    BOOL v31 = (v29 & 0xFFFFFFFFFFFE7CA4) == 0 && v29 != 0;
    while (1)
    {
      if (!v31)
      {
        uint64_t v32 = *(void *)(*(void *)v27 + 56);
        if (v32)
        {
          if (*(unsigned char *)(v32 + 200)) {
            break;
          }
        }
      }
      v27 += 8;
      if (v27 == v28) {
        goto LABEL_44;
      }
    }
    std::operator+<char>();
LABEL_47:
    flatbuffers::Parser::Error((uint64_t)this, a5);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v33 = (void *)v60.__r_.__value_.__r.__words[0];
LABEL_49:
      operator delete(v33);
    }
  }
}

void flatbuffers::Parser::DoParse(flatbuffers::Parser *this@<X0>, const char *a2@<X1>, const char **a3@<X2>, const char *a4@<X3>, const char *a5@<X4>, unsigned __int8 *a6@<X8>)
{
  if (a4)
  {
    std::string::size_type v33 = strlen(a4);
    std::string::__init(&v75, a4, v33);
    uint64_t v34 = (flatbuffers::Parser *)sub_20DC7572C((uint64_t)this + 632, &v75);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if ((flatbuffers::Parser *)((char *)this + 640) != v34) {
      goto LABEL_95;
    }
    if (a5) {
      std::string::size_type v35 = a5;
    }
    else {
      std::string::size_type v35 = (const char *)&unk_20DC7CFF7;
    }
    std::string::size_type v36 = strlen(a4);
    std::string::__init(&v75, a4, v36);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
    std::string::size_type v37 = sub_20DC79EE4((uint64_t)this + 632, (uint64_t)&v75, &__p);
    MEMORY[0x210568880]((char *)v37 + 56, v35);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    v75.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = (unint64_t)&v75.__r_.__value_.__l.__size_;
    std::string::size_type v38 = strlen(a4);
    std::string::__init(&__p, a4, v38);
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::string::size_type v39 = sub_20DC79FA4((uint64_t)this + 656, (uint64_t)&__p, &v73);
    std::string::size_type v40 = (std::string::size_type *)(v39 + 4);
    std::string::size_type v41 = (std::string::size_type **)v39 + 7;
    sub_20DC5BB18((uint64_t)v39 + 56, *((char **)v39 + 8));
    std::string::size_type size = v75.__r_.__value_.__l.__size_;
    *(v40 - 1) = v75.__r_.__value_.__r.__words[0];
    *std::string::size_type v40 = size;
    std::string::size_type v43 = v75.__r_.__value_.__r.__words[2];
    v40[1] = v75.__r_.__value_.__r.__words[2];
    if (v43)
    {
      *(void *)(size + 16) = v40;
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75.__r_.__value_.__l.__size_;
      *(_OWORD *)&v75.__r_.__value_.__r.__words[1] = 0uLL;
      std::string::size_type size = 0;
    }
    else
    {
      *std::string::size_type v41 = v40;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      std::string::size_type size = v75.__r_.__value_.__l.__size_;
    }
    sub_20DC5BB18((uint64_t)&v75, (char *)size);
  }
  if (a3) {
    BOOL v12 = a3;
  }
  else {
    BOOL v12 = (const char **)&off_26772D510;
  }
  uint64_t v13 = *((void *)this + 148);
  uint64_t v14 = *((void *)this + 147);
  while (v13 != v14)
  {
    if (*(char *)(v13 - 17) < 0) {
      operator delete(*(void **)(v13 - 40));
    }
    v13 -= 72;
  }
  *((void *)this + 148) = v14;
  int v15 = (char *)this + 336;
  sub_20DC73708((uint64_t)this + 336);
  *((void *)this + 37) = *((void *)this + 38);
  flatbuffers::Parser::StartParseFile(this, a2, a4, (uint64_t)a6);
  a6[1] = 1;
  if (*a6) {
    return;
  }
  uint64_t v16 = (flatbuffers **)((char *)this + 32);
  std::string::size_type v71 = (std::string *)((char *)this + 584);
  while (1)
  {
    while (1)
    {
      if (*((unsigned char *)this + 747)
        && (sub_20DC3D8C0((void *)this + 4, "option")
         || sub_20DC3D8C0((void *)this + 4, "syntax")
         || sub_20DC3D8C0((void *)this + 4, "package")))
      {
        flatbuffers::Parser::ParseProtoDecl(this, a6);
        goto LABEL_17;
      }
      int v22 = *((_DWORD *)this + 5);
      if (v22 != 260) {
        goto LABEL_51;
      }
      if (!sub_20DC3D8C0((void *)this + 4, "native_include")) {
        break;
      }
      flatbuffers::Parser::Next(this, (uint64_t)a6);
      a6[1] = 1;
      if (*a6) {
        return;
      }
      sub_20DC7A06C((unint64_t *)this + 85, (uint64_t)this + 32);
      flatbuffers::Parser::Expect(this, 257, (uint64_t)a6);
      a6[1] = 1;
      if (*a6) {
        return;
      }
      flatbuffers::Parser::Expect(this, 59, (uint64_t)a6);
LABEL_17:
      a6[1] = 1;
      if (*a6) {
        return;
      }
    }
    int v22 = *((_DWORD *)this + 5);
    if (v22 != 260) {
      goto LABEL_51;
    }
    if (!sub_20DC3D8C0((void *)this + 4, "include"))
    {
      int v22 = *((_DWORD *)this + 5);
      if (!*((unsigned char *)this + 747) || v22 != 260) {
        goto LABEL_51;
      }
      if (!sub_20DC3D8C0((void *)this + 4, "import")) {
        break;
      }
    }
    flatbuffers::Parser::Next(this, (uint64_t)a6);
    a6[1] = 1;
    if (*a6) {
      return;
    }
    if (*((unsigned char *)this + 747))
    {
      if (sub_20DC3D8C0((void *)this + 4, "public"))
      {
        flatbuffers::Parser::Next(this, (uint64_t)a6);
        a6[1] = 1;
        if (*a6) {
          return;
        }
      }
    }
    uint64_t v23 = (flatbuffers::Parser *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v23 = *v16;
    }
    flatbuffers::PosixPath(v23, (uint64_t)&v75);
    flatbuffers::Parser::Expect(this, 257, (uint64_t)a6);
    int v24 = 1;
    a6[1] = 1;
    if (*a6) {
      goto LABEL_43;
    }
    uint64_t v70 = v15;
    memset(&__p, 0, sizeof(__p));
    uint64_t v20 = *v12;
    if (!*v12) {
      goto LABEL_109;
    }
    uint64_t v21 = 1;
    do
    {
      std::string::size_type v17 = strlen(v20);
      std::string::__init(&v72, v20, v17);
      flatbuffers::ConCatPathFileName((uint64_t)&v72, (uint64_t)&v75, (uint64_t)&v73);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v73;
      *((unsigned char *)&v73.__r_.__value_.__s + 23) = 0;
      v73.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = (flatbuffers *)&__p;
      }
      else {
        p_p = (flatbuffers *)__p.__r_.__value_.__r.__words[0];
      }
      if (flatbuffers::FileExists(p_p, v18)) {
        break;
      }
      uint64_t v20 = v12[v21++];
    }
    while (v20);
    std::string::size_type v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v44 = __p.__r_.__value_.__l.__size_;
    }
    if (v44)
    {
      if (a4)
      {
        std::string::size_type v45 = strlen(a4);
        std::string::__init(&v73, a4, v45);
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
        char v46 = sub_20DC79FA4((uint64_t)this + 656, (uint64_t)&v73, &v72);
        sub_20DC7A0D8((uint64_t)v46 + 56, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
      }
      if ((flatbuffers::Parser *)((char *)this + 640) == (flatbuffers::Parser *)sub_20DC7572C((uint64_t)this + 632, &__p))
      {
        memset(&v73, 0, sizeof(v73));
        if (flatbuffers::LoadFile())
        {
          if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v47 = &v73;
          }
          else {
            BOOL v47 = (std::string *)v73.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v48 = &__p;
          }
          else {
            __int16 v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v49 = &v75;
          }
          else {
            std::string::size_type v49 = (std::string *)v75.__r_.__value_.__r.__words[0];
          }
          flatbuffers::Parser::DoParse(this, (const char *)v47, v12, (const char *)v48, (const char *)v49);
          a6[1] = 1;
          int v15 = v70;
          if (!*a6)
          {
            if (!*((unsigned char *)this + 749))
            {
              std::string::size_type v50 = (uint64_t *)*((void *)this + 25);
              __int16 v51 = (uint64_t *)*((void *)this + 26);
              while (v50 != v51)
              {
                uint64_t v52 = *v50++;
                *(unsigned char *)(v52 + 120) = 1;
              }
              uint64_t v59 = *((void *)this + 19);
              uint64_t v60 = *((void *)this + 20);
              while (v59 != v60)
              {
                if (!*(unsigned char *)(*(void *)v59 + 201)) {
                  *(unsigned char *)(*(void *)v59 + 120) = 1;
                }
                v59 += 8;
              }
              __int16 v61 = (uint64_t *)*((void *)this + 31);
              uint64_t v62 = (uint64_t *)*((void *)this + 32);
              while (v61 != v62)
              {
                uint64_t v63 = *v61++;
                *(unsigned char *)(v63 + 120) = 1;
              }
            }
            *((void *)this + 72) = 0;
            if (*((char *)this + 607) < 0)
            {
              **((unsigned char **)this + 73) = 0;
              *((void *)this + 74) = 0;
            }
            else
            {
              *((unsigned char *)this + 584) = 0;
              *((unsigned char *)this + 607) = 0;
            }
            if (*((char *)this + 631) < 0)
            {
              **((unsigned char **)this + 76) = 0;
              *((void *)this + 77) = 0;
            }
            else
            {
              *((unsigned char *)this + 608) = 0;
              *((unsigned char *)this + 631) = 0;
            }
            if (a4)
            {
              std::string::size_type v64 = strlen(a4);
              std::string::__init(&v72, a4, v64);
              sub_20DC7A25C((uint64_t **)this + 79, &v72);
              if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v72.__r_.__value_.__l.__data_);
              }
            }
            flatbuffers::Parser::DoParse(this, a2, v12, a4, a5);
            goto LABEL_164;
          }
        }
        else
        {
          std::operator+<char>();
          flatbuffers::Parser::Error((uint64_t)this, a6);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v72.__r_.__value_.__l.__data_);
          }
LABEL_164:
          int v15 = v70;
        }
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        int v24 = 1;
        goto LABEL_113;
      }
      flatbuffers::Parser::Expect(this, 59, (uint64_t)a6);
      a6[1] = 1;
      int v24 = *a6;
    }
    else
    {
LABEL_109:
      std::operator+<char>();
      flatbuffers::Parser::Error((uint64_t)this, a6);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      int v24 = 1;
    }
    int v15 = v70;
LABEL_113:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_43:
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (v24) {
      return;
    }
  }
  int v22 = *((_DWORD *)this + 5);
LABEL_51:
  if (v22 == 256)
  {
LABEL_95:
    *(_WORD *)a6 = 0;
    return;
  }
  while (2)
  {
    if (*((unsigned char *)this + 747))
    {
      flatbuffers::Parser::ParseProtoDecl(this, a6);
      goto LABEL_54;
    }
    if (v22 == 260)
    {
      if (!sub_20DC3D8C0((void *)this + 4, "namespace"))
      {
        int v22 = *((_DWORD *)this + 5);
        break;
      }
      flatbuffers::Parser::ParseNamespace(this, a6);
LABEL_54:
      a6[1] = 1;
LABEL_55:
      if (*a6) {
        return;
      }
LABEL_56:
      int v22 = *((_DWORD *)this + 5);
      if (v22 == 256) {
        goto LABEL_95;
      }
      continue;
    }
    break;
  }
  if (v22 != 260)
  {
    if (v22 == 123)
    {
      uint64_t v25 = *((void *)this + 72);
      if (v25)
      {
        if (!(*((_DWORD *)this + 92) - *((_DWORD *)this + 96) + *((_DWORD *)this + 94)))
        {
          LODWORD(v75.__r_.__value_.__l.__data_) = 0;
          flatbuffers::Parser::ParseTable(a6, this, v25, 0, &v75);
          a6[1] = 1;
          if (*a6) {
            return;
          }
          if (*((unsigned char *)this + 955))
          {
            if ((*((unsigned char *)this + 607) & 0x80) != 0)
            {
              if (*((void *)this + 74)) {
                char v54 = (_DWORD *)v71->__r_.__value_.__r.__words[0];
              }
              else {
                char v54 = 0;
              }
            }
            else if (*((unsigned char *)this + 607))
            {
              char v54 = (_DWORD *)((char *)this + 584);
            }
            else
            {
              char v54 = 0;
            }
            uint64_t v28 = (uint64_t)v15;
            int v29 = 1;
          }
          else
          {
            if ((*((unsigned char *)this + 607) & 0x80) != 0)
            {
              if (*((void *)this + 74)) {
                char v54 = (_DWORD *)v71->__r_.__value_.__r.__words[0];
              }
              else {
                char v54 = 0;
              }
            }
            else if (*((unsigned char *)this + 607))
            {
              char v54 = (_DWORD *)((char *)this + 584);
            }
            else
            {
              char v54 = 0;
            }
            uint64_t v28 = (uint64_t)v15;
            int v29 = 0;
          }
          sub_20DC58220(v28, (int)v75.__r_.__value_.__l.__data_, v54, v29);
          uint64_t v30 = (uint64_t)a6;
          BOOL v31 = this;
          int v32 = 256;
          goto LABEL_91;
        }
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&v75.__r_.__value_.__r.__words[1] = xmmword_20DC7CE70;
        strcpy(v75.__r_.__value_.__l.__data_, "cannot have more than one json object in a file");
      }
      else
      {
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&v75.__r_.__value_.__r.__words[1] = xmmword_20DC7CE80;
        strcpy(v75.__r_.__value_.__l.__data_, "no root type set to parse json with");
      }
LABEL_192:
      flatbuffers::Parser::Error((uint64_t)this, a6);
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      std::string v58 = (void *)v75.__r_.__value_.__r.__words[0];
      goto LABEL_194;
    }
    goto LABEL_198;
  }
  if (sub_20DC3D8C0((void *)this + 4, "enum"))
  {
    uint64_t v26 = a6;
    uint64_t v27 = this;
LABEL_72:
    flatbuffers::Parser::ParseEnum(v27, v26);
    goto LABEL_54;
  }
  if (*((_DWORD *)this + 5) != 260) {
    goto LABEL_198;
  }
  if (sub_20DC3D8C0((void *)this + 4, "union"))
  {
    uint64_t v26 = a6;
    uint64_t v27 = this;
    goto LABEL_72;
  }
  if (*((_DWORD *)this + 5) != 260) {
    goto LABEL_198;
  }
  if (sub_20DC3D8C0((void *)this + 4, "root_type"))
  {
    flatbuffers::Parser::Next(this, (uint64_t)a6);
    a6[1] = 1;
    if (*a6) {
      return;
    }
    if (*((char *)this + 55) < 0)
    {
      sub_20DC55634((uint64_t)&v75, *((const void **)this + 4), *((void *)this + 5));
    }
    else
    {
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)v16;
      v75.__r_.__value_.__r.__words[2] = *((void *)this + 6);
    }
    flatbuffers::Parser::Expect(this, 260, (uint64_t)a6);
    BOOL v55 = 1;
    a6[1] = 1;
    if (!*a6)
    {
      flatbuffers::Parser::ParseNamespacing(this, &v75, 0, a6);
      a6[1] = 1;
      if (!*a6)
      {
        if (*((char *)this + 983) < 0) {
          uint64_t v57 = *((void *)this + 121);
        }
        else {
          uint64_t v57 = *((unsigned __int8 *)this + 983);
        }
        if (v57)
        {
LABEL_233:
          flatbuffers::Parser::Expect(this, 59, (uint64_t)a6);
          a6[1] = 1;
          BOOL v55 = *a6 != 0;
        }
        else
        {
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v69 = &v75;
          }
          else {
            std::string::size_type v69 = (std::string *)v75.__r_.__value_.__r.__words[0];
          }
          if (flatbuffers::Parser::SetRootType(this, (const char *)v69))
          {
            if (!*(unsigned char *)(*((void *)this + 72) + 200)) {
              goto LABEL_233;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20DC7CE60;
            strcpy(__p.__r_.__value_.__l.__data_, "root type must be a table");
          }
          else
          {
            std::operator+<char>();
          }
          flatbuffers::Parser::Error((uint64_t)this, a6);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (v55) {
      return;
    }
    goto LABEL_56;
  }
  if (*((_DWORD *)this + 5) != 260) {
    goto LABEL_198;
  }
  if (!sub_20DC3D8C0((void *)this + 4, "file_identifier"))
  {
    if (*((_DWORD *)this + 5) != 260) {
      goto LABEL_198;
    }
    if (!sub_20DC3D8C0((void *)this + 4, "file_extension"))
    {
      if (*((_DWORD *)this + 5) == 260)
      {
        if (sub_20DC3D8C0((void *)this + 4, "include"))
        {
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
          *(_OWORD *)&v75.__r_.__value_.__r.__words[1] = xmmword_20DC7CC80;
          strcpy(v75.__r_.__value_.__l.__data_, "includes must come before declarations");
          goto LABEL_192;
        }
        if (*((_DWORD *)this + 5) == 260)
        {
          if (sub_20DC3D8C0((void *)this + 4, "attribute"))
          {
            flatbuffers::Parser::Next(this, (uint64_t)a6);
            a6[1] = 1;
            if (*a6) {
              return;
            }
            if (*((char *)this + 55) < 0)
            {
              sub_20DC55634((uint64_t)&v75, *((const void **)this + 4), *((void *)this + 5));
            }
            else
            {
              *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)v16;
              v75.__r_.__value_.__r.__words[2] = *((void *)this + 6);
            }
            if (*((_DWORD *)this + 5) == 260) {
              flatbuffers::Parser::Next(this, (uint64_t)a6);
            }
            else {
              flatbuffers::Parser::Expect(this, 257, (uint64_t)a6);
            }
            a6[1] = 1;
            if (*a6 || (flatbuffers::Parser::Expect(this, 59, (uint64_t)a6), a6[1] = 1, *a6))
            {
              char v56 = 0;
            }
            else
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
              *((unsigned char *)sub_20DC7A2C4((uint64_t)this + 704, (const void **)&v75.__r_.__value_.__l.__data_, (uint64_t *)&__p)+ 56) = 0;
              char v56 = 1;
            }
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            if ((v56 & 1) == 0) {
              return;
            }
            goto LABEL_56;
          }
          if (*((_DWORD *)this + 5) == 260 && sub_20DC3D8C0((void *)this + 4, "rpc_service"))
          {
            flatbuffers::Parser::ParseService(this, a6);
            a6[1] = 1;
            goto LABEL_55;
          }
        }
      }
LABEL_198:
      flatbuffers::Parser::ParseDecl(this, (uint64_t)a6);
      goto LABEL_54;
    }
    flatbuffers::Parser::Next(this, (uint64_t)a6);
    a6[1] = 1;
    if (*a6) {
      return;
    }
    std::string::operator=((std::string *)((char *)this + 608), (const std::string *)((char *)this + 32));
    flatbuffers::Parser::Expect(this, 257, (uint64_t)a6);
    a6[1] = 1;
    if (*a6) {
      return;
    }
LABEL_185:
    uint64_t v30 = (uint64_t)a6;
    BOOL v31 = this;
    int v32 = 59;
LABEL_91:
    flatbuffers::Parser::Expect(v31, v32, v30);
    goto LABEL_54;
  }
  flatbuffers::Parser::Next(this, (uint64_t)a6);
  a6[1] = 1;
  if (*a6) {
    return;
  }
  std::string::operator=(v71, (const std::string *)((char *)this + 32));
  flatbuffers::Parser::Expect(this, 257, (uint64_t)a6);
  a6[1] = 1;
  if (*a6) {
    return;
  }
  if (*((char *)this + 607) < 0) {
    uint64_t v53 = *((void *)this + 74);
  }
  else {
    uint64_t v53 = *((unsigned __int8 *)this + 607);
  }
  if (v53 == 4) {
    goto LABEL_185;
  }
  sub_20DC73778();
  uint64_t v65 = std::string::insert(&v73, 0, "file_identifier must be exactly ");
  std::string::size_type v66 = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  std::string v67 = std::string::append(&__p, " characters");
  std::string::size_type v68 = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  flatbuffers::Parser::Error((uint64_t)this, a6);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string v58 = (void *)v73.__r_.__value_.__r.__words[0];
LABEL_194:
    operator delete(v58);
  }
}

void sub_20DC73708(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 68) = 0;
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = v1 + *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v2 = 0;
    *(void *)(a1 + 32) = 0;
  }
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v1;
  *(_WORD *)(a1 + 70) = 0;
  *(void *)(a1 + 72) = 1;
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3)
  {
    sub_20DC4FD64(*(void **)(v3 + 8));
    *(void *)uint64_t v3 = v3 + 8;
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 8) = 0;
  }
}

uint64_t sub_20DC73778()
{
  sub_20DC50E1C((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_20DC51148((uint64_t)v1, MEMORY[0x263F8C2B8]);
  return MEMORY[0x210568AB0](&v2);
}

uint64_t flatbuffers::RPCCall::Deserialize(uint64_t a1, uint64_t a2, const std::string::value_type *a3)
{
  uint64_t v6 = *(int *)a3;
  if (*(unsigned __int16 *)&a3[-v6] < 5u)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = *(unsigned __int16 *)&a3[-v6 + 4];
    LODWORD(v6) = *(_DWORD *)&a3[*(unsigned __int16 *)&a3[-v6 + 4]];
  }
  std::string::__init(&v29, &a3[v7 + 4 + v6], *(unsigned int *)&a3[v7 + v6]);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v29;
  BOOL v8 = &a3[-*(int *)a3];
  if (*(unsigned __int16 *)v8 >= 0xBu && (uint64_t v9 = *((unsigned __int16 *)v8 + 5)) != 0) {
    unint64_t v10 = (std::string::value_type *)&a3[v9 + *(unsigned int *)&a3[v9]];
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t result = sub_20DC4D8A4(a1 + 72, a2, v10);
  if (result)
  {
    BOOL v12 = &a3[-*(int *)a3];
    if (*(unsigned __int16 *)v12 >= 0xDu && (uint64_t v13 = *((unsigned __int16 *)v12 + 6)) != 0) {
      uint64_t v14 = (std::string::value_type *)&a3[v13 + *(unsigned int *)&a3[v13]];
    }
    else {
      uint64_t v14 = 0;
    }
    flatbuffers::DeserializeDoc((int64x2_t *)(a1 + 48), v14);
    uint64_t v15 = a2 + 128;
    uint64_t v16 = &a3[-*(int *)a3];
    if (*(unsigned __int16 *)v16 < 7u)
    {
      std::string::size_type v17 = 0;
    }
    else
    {
      std::string::size_type v17 = (const std::string::value_type *)*((unsigned __int16 *)v16 + 3);
      if (v17) {
        std::string::size_type v17 = &v17[(void)a3 + *(unsigned int *)&v17[(void)a3]];
      }
    }
    uint64_t v18 = *(int *)v17;
    if (*(unsigned __int16 *)&v17[-v18] < 5u)
    {
      int v19 = 0;
    }
    else
    {
      int v19 = *(unsigned __int16 *)&v17[-v18 + 4];
      LODWORD(v18) = *(_DWORD *)&v17[*(unsigned __int16 *)&v17[-v18 + 4]];
    }
    std::string::__init(&v29, &v17[v19 + 4 + v18], *(unsigned int *)&v17[v19 + v18]);
    uint64_t v20 = sub_20DC58A14(a2 + 128, (uint64_t)&v29);
    uint64_t v21 = a2 + 136;
    if (v21 == v20) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = *(void *)(v20 + 56);
    }
    *(void *)(a1 + 152) = v22;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    uint64_t v23 = &a3[-*(int *)a3];
    if (*(unsigned __int16 *)v23 < 9u)
    {
      int v24 = 0;
    }
    else
    {
      int v24 = (const std::string::value_type *)*((unsigned __int16 *)v23 + 4);
      if (v24) {
        int v24 = &v24[(void)a3 + *(unsigned int *)&v24[(void)a3]];
      }
    }
    uint64_t v25 = *(int *)v24;
    if (*(unsigned __int16 *)&v24[-v25] < 5u)
    {
      int v26 = 0;
    }
    else
    {
      int v26 = *(unsigned __int16 *)&v24[-v25 + 4];
      LODWORD(v25) = *(_DWORD *)&v24[*(unsigned __int16 *)&v24[-v25 + 4]];
    }
    std::string::__init(&v29, &v24[v26 + 4 + v25], *(unsigned int *)&v24[v26 + v25]);
    uint64_t v27 = sub_20DC58A14(v15, (uint64_t)&v29);
    if (v21 == v27) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *(void *)(v27 + 56);
    }
    *(void *)(a1 + 160) = v28;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    return *(void *)(a1 + 152) && *(void *)(a1 + 160) != 0;
  }
  return result;
}

void flatbuffers::ServiceDef::Deserialize(uint64_t a1, uint64_t a2, const std::string::value_type *a3)
{
  uint64_t v3 = *(int *)a3;
  if (*(unsigned __int16 *)&a3[-v3] < 5u)
  {
    int v4 = 0;
  }
  else
  {
    int v4 = *(unsigned __int16 *)&a3[-v3 + 4];
    LODWORD(v3) = *(_DWORD *)&a3[*(unsigned __int16 *)&a3[-v3 + 4]];
  }
  std::string::__init(&__p, &a3[v4 + 4 + v3], *(unsigned int *)&a3[v4 + v3]);
  flatbuffers::Parser::UnqualifiedName();
}

uint64_t flatbuffers::Parser::Deserialize(flatbuffers::Parser *this, const char *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  v7[0] = a2;
  v7[1] = a3;
  long long v8 = xmmword_20DC7CE90;
  uint64_t v9 = 0;
  char v10 = 1;
  uint64_t v5 = (const unsigned __int8 *)(a2 + 4);
  if (!strncmp(a2 + 4, "BFBS", 4uLL))
  {
    if (sub_20DC7827C(v7, 0)) {
      return flatbuffers::Parser::Deserialize((uint64_t)this, &v3[*(unsigned int *)v3]);
    }
    return 0;
  }
  if (strncmp(v3 + 8, "BFBS", 4uLL)) {
    return 0;
  }
  uint64_t result = sub_20DC73D8C(v7);
  uint64_t v3 = (const char *)v5;
  if (result) {
    return flatbuffers::Parser::Deserialize((uint64_t)this, &v3[*(unsigned int *)v3]);
  }
  return result;
}

uint64_t sub_20DC73D8C(void *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >= 5 && v1 - 4 == *(_DWORD *)*a1) {
    return sub_20DC7827C(a1, 4uLL);
  }
  else {
    return 0;
  }
}

uint64_t sub_20DC73DBC(char **a1)
{
  unsigned int v2 = 0;
  uint64_t v3 = *a1;
  int v4 = **a1;
  for (unsigned int i = 128; (i & v4) != 0; i >>= 1)
  {
    if (++v2 == 6) {
      return 0xFFFFFFFFLL;
    }
  }
  if (((v4 << v2) & 0x80) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (v2)
  {
    uint64_t result = 0xFFFFFFFFLL;
    if (v2 != 1 && v2 <= 4)
    {
      int v7 = v3 + 1;
      *a1 = v3 + 1;
      int v8 = *v3 & ~(-1 << (7 - v2));
      unsigned int v9 = v2 - 1;
      while ((*v7 & 0xC0) == 0x80)
      {
        *a1 = v7 + 1;
        uint64_t result = *v7++ & 0x3F | (v8 << 6);
        int v8 = result;
        if (!--v9)
        {
          if (result >> 11 == 27) {
            return 0xFFFFFFFFLL;
          }
          if (v2 == 4)
          {
            if ((result - 1114112) < 0xFFF00000) {
              return 0xFFFFFFFFLL;
            }
          }
          else if (v2 == 3)
          {
            if ((result - 0x10000) < 0xFFFF0800) {
              return 0xFFFFFFFFLL;
            }
          }
          else if ((result - 2048) < 0xFFFFF880)
          {
            return 0xFFFFFFFFLL;
          }
          return result;
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *a1 = v3 + 1;
    return *v3;
  }
  return result;
}

uint64_t sub_20DC73EDC(unsigned char *a1)
{
  int v1 = -2128831035;
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1 + 1;
    do
    {
      int v1 = (16777619 * v1) ^ v2;
      int v4 = *v3++;
      int v2 = v4;
    }
    while (v4);
  }
  return (unsigned __int16)(v1 ^ HIWORD(v1));
}

uint64_t sub_20DC73F14(unsigned char *a1)
{
  int v1 = -2128831035;
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1 + 1;
    do
    {
      int v1 = 16777619 * (v1 ^ v2);
      int v4 = *v3++;
      int v2 = v4;
    }
    while (v4);
  }
  return (unsigned __int16)(v1 ^ HIWORD(v1));
}

uint64_t flatbuffers::HashFnv1<unsigned int>(unsigned char *a1)
{
  uint64_t result = 2166136261;
  unsigned int v3 = *a1;
  if (*a1)
  {
    int v4 = a1 + 1;
    do
    {
      uint64_t result = (16777619 * result) ^ v3;
      unsigned int v5 = *v4++;
      unsigned int v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t flatbuffers::HashFnv1a<unsigned int>(unsigned char *a1)
{
  uint64_t result = 2166136261;
  int v3 = *a1;
  if (*a1)
  {
    int v4 = a1 + 1;
    do
    {
      uint64_t result = 16777619 * (result ^ v3);
      int v5 = *v4++;
      int v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t flatbuffers::HashFnv1<unsigned long long>(unsigned char *a1)
{
  uint64_t result = 0xCBF29CE484222645;
  unsigned int v3 = *a1;
  if (*a1)
  {
    int v4 = a1 + 1;
    do
    {
      uint64_t result = (0x100000001B3 * result) ^ v3;
      unsigned int v5 = *v4++;
      unsigned int v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t flatbuffers::HashFnv1a<unsigned long long>(unsigned char *a1)
{
  uint64_t result = 0xCBF29CE484222645;
  unsigned int v3 = *a1;
  if (*a1)
  {
    int v4 = a1 + 1;
    do
    {
      uint64_t result = 0x100000001B3 * (result ^ v3);
      unsigned int v5 = *v4++;
      unsigned int v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_20DC74034(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = a1 + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_20DC55634(v5, *((const void **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v6 = a2[2];
    *(void *)(v5 + 16) = *((void *)a2 + 6);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  sub_20DC58508((void *)(a1 + 56), *((void *)a2 + 7), *((void *)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  return a1;
}

void sub_20DC740BC(uint64_t a1, long long *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v4 = a1 + 184;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = 0u;
  *(unsigned char *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 352) = xmmword_20DC7CDC0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 1;
  *(_WORD *)(a1 + 416) = 256;
  *(void *)(a1 + 424) = 0;
  sub_20DC4FDB0(a1 + 432, 0x100uLL);
  *(void *)(v4 + 376) = 0;
  *(_WORD *)(v4 + 384) = 0;
  *(_OWORD *)(v4 + 388) = 0u;
  *(_OWORD *)(v4 + 404) = 0u;
  *(_OWORD *)(v4 + 420) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(void *)(v4 + 448) = v4 + 456;
  *(void *)(v4 + 456) = 0;
  *(void *)(v4 + 480) = 0;
  *(void *)(v4 + 488) = 0;
  *(void *)(v4 + 464) = 0;
  *(void *)(v4 + 472) = v4 + 480;
  *(void *)(v4 + 504) = 0;
  *(void *)(v4 + 512) = 0;
  *(void *)(v4 + 496) = 0;
  *(void *)(v4 + 528) = 0;
  *(void *)(v4 + 520) = v4 + 528;
  *(void *)(v4 + 536) = 0;
  sub_20DC74AF4(v4 + 544, a2);
  *(unsigned char *)(v4 + 952) = 0;
  *(_OWORD *)(v4 + 960) = 0u;
  *(_OWORD *)(v4 + 976) = 0u;
  *(_OWORD *)(v4 + 992) = 0u;
  *(_OWORD *)(v4 + 1008) = 0u;
  if (*(unsigned char *)(v4 + 800)) {
    *(unsigned char *)(a1 + 416) = 1;
  }
  operator new();
}

uint64_t sub_20DC74AF4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 10) = *(long long *)((char *)a2 + 10);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = a1 + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_20DC55634(v5, *((const void **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v6 = a2[2];
    *(void *)(v5 + 16) = *((void *)a2 + 6);
    *(_OWORD *)uint64_t v5 = v6;
  }
  int v7 = (_OWORD *)(a1 + 56);
  if (*((char *)a2 + 79) < 0)
  {
    sub_20DC55634((uint64_t)v7, *((const void **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *int v7 = v8;
  }
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  unsigned int v9 = (_OWORD *)(a1 + 88);
  if (*((char *)a2 + 111) < 0)
  {
    sub_20DC55634((uint64_t)v9, *((const void **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    _OWORD *v9 = v10;
  }
  uint64_t v11 = (_OWORD *)(a1 + 112);
  if (*((char *)a2 + 135) < 0)
  {
    sub_20DC55634((uint64_t)v11, *((const void **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v12 = a2[7];
    *(void *)(a1 + 128) = *((void *)a2 + 16);
    _OWORD *v11 = v12;
  }
  __int16 v13 = *((_WORD *)a2 + 68);
  *(unsigned char *)(a1 + 138) = *((unsigned char *)a2 + 138);
  *(_WORD *)(a1 + 136) = v13;
  uint64_t v14 = (_OWORD *)(a1 + 144);
  if (*((char *)a2 + 167) < 0)
  {
    sub_20DC55634((uint64_t)v14, *((const void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v15 = a2[9];
    *(void *)(a1 + 160) = *((void *)a2 + 20);
    *uint64_t v14 = v15;
  }
  int v16 = *((_DWORD *)a2 + 42);
  *(unsigned char *)(a1 + 172) = *((unsigned char *)a2 + 172);
  *(_DWORD *)(a1 + 168) = v16;
  std::string::size_type v17 = (_OWORD *)(a1 + 176);
  if (*((char *)a2 + 199) < 0)
  {
    sub_20DC55634((uint64_t)v17, *((const void **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v18 = a2[11];
    *(void *)(a1 + 192) = *((void *)a2 + 24);
    *std::string::size_type v17 = v18;
  }
  int v19 = (_OWORD *)(a1 + 200);
  if (*((char *)a2 + 223) < 0)
  {
    sub_20DC55634((uint64_t)v19, *((const void **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v20 = *(long long *)((char *)a2 + 200);
    *(void *)(a1 + 216) = *((void *)a2 + 27);
    _OWORD *v19 = v20;
  }
  *(_DWORD *)(a1 + 224) = *((_DWORD *)a2 + 56);
  uint64_t v21 = (_OWORD *)(a1 + 232);
  if (*((char *)a2 + 255) < 0)
  {
    sub_20DC55634((uint64_t)v21, *((const void **)a2 + 29), *((void *)a2 + 30));
  }
  else
  {
    long long v22 = *(long long *)((char *)a2 + 232);
    *(void *)(a1 + 248) = *((void *)a2 + 31);
    *uint64_t v21 = v22;
  }
  __int16 v23 = *((_WORD *)a2 + 128);
  *(unsigned char *)(a1 + 258) = *((unsigned char *)a2 + 258);
  *(_WORD *)(a1 + 256) = v23;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  sub_20DC58508((void *)(a1 + 264), *((void *)a2 + 33), *((void *)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 3));
  int v24 = (_OWORD *)(a1 + 288);
  if (*((char *)a2 + 311) < 0)
  {
    sub_20DC55634((uint64_t)v24, *((const void **)a2 + 36), *((void *)a2 + 37));
  }
  else
  {
    long long v25 = a2[18];
    *(void *)(a1 + 304) = *((void *)a2 + 38);
    _OWORD *v24 = v25;
  }
  int v26 = (_OWORD *)(a1 + 312);
  if (*((char *)a2 + 335) < 0)
  {
    sub_20DC55634((uint64_t)v26, *((const void **)a2 + 39), *((void *)a2 + 40));
  }
  else
  {
    long long v27 = *(long long *)((char *)a2 + 312);
    *(void *)(a1 + 328) = *((void *)a2 + 41);
    *int v26 = v27;
  }
  uint64_t v28 = (_OWORD *)(a1 + 336);
  if (*((char *)a2 + 359) < 0)
  {
    sub_20DC55634((uint64_t)v28, *((const void **)a2 + 42), *((void *)a2 + 43));
  }
  else
  {
    long long v29 = a2[21];
    *(void *)(a1 + 352) = *((void *)a2 + 44);
    *uint64_t v28 = v29;
  }
  uint64_t v30 = (_OWORD *)(a1 + 360);
  if (*((char *)a2 + 383) < 0)
  {
    sub_20DC55634((uint64_t)v30, *((const void **)a2 + 45), *((void *)a2 + 46));
  }
  else
  {
    long long v31 = *(long long *)((char *)a2 + 360);
    *(void *)(a1 + 376) = *((void *)a2 + 47);
    *uint64_t v30 = v31;
  }
  long long v32 = a2[24];
  *(_WORD *)(a1 + 400) = *((_WORD *)a2 + 200);
  *(_OWORD *)(a1 + 384) = v32;
  return a1;
}

uint64_t sub_20DC74DB0(uint64_t a1)
{
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*(void **)(a1 + 288));
  }
  unsigned int v3 = (void **)(a1 + 264);
  sub_20DC5847C(&v3);
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_20DC74EDC(uint64_t *a1, void *a2, void *a3)
{
  if (a1[2])
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(void *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    long long v8 = *(void *)(v6 + 8) ? *(char **)(v6 + 8) : (char *)v6;
    if (v8)
    {
      long long v12 = (char *)sub_20DC75160((uint64_t)v8);
      if (a2 != a3)
      {
        __int16 v13 = a2;
        do
        {
          uint64_t v14 = (uint64_t)v8;
          long long v8 = v12;
          std::string::operator=((std::string *)(v14 + 32), (const std::string *)(v13 + 4));
          *(void *)(v14 + 56) = v13[7];
          sub_20DC75048((uint64_t)a1, v14);
          if (v12) {
            long long v12 = (char *)sub_20DC75160((uint64_t)v12);
          }
          long long v15 = (void *)v13[1];
          if (v15)
          {
            do
            {
              a2 = v15;
              long long v15 = (void *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              a2 = (void *)v13[2];
              BOOL v11 = *a2 == (void)v13;
              __int16 v13 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          __int16 v13 = a2;
        }
        while (a2 != a3);
      }
      sub_20DC50214(v8);
      if (v12)
      {
        do
        {
          int v16 = v12;
          long long v12 = (char *)*((void *)v12 + 2);
        }
        while (v12);
        sub_20DC50214(v16);
      }
    }
  }
  if (a2 != a3)
  {
    do
    {
      sub_20DC751B4((uint64_t)a1, (uint64_t)(a2 + 4));
      unsigned int v9 = (void *)a2[1];
      if (v9)
      {
        do
        {
          long long v10 = v9;
          unsigned int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v10 = (void *)a2[2];
          BOOL v11 = *v10 == (void)a2;
          a2 = v10;
        }
        while (!v11);
      }
      a2 = v10;
    }
    while (v10 != a3);
  }
}

uint64_t *sub_20DC75048(uint64_t a1, uint64_t a2)
{
  int v2 = (uint64_t *)a2;
  long long v4 = (uint64_t **)sub_20DC750BC(a1, &v8, (const void **)(a2 + 32));
  uint64_t v5 = v8;
  *int v2 = 0;
  v2[1] = 0;
  v2[2] = v5;
  *long long v4 = v2;
  uint64_t v6 = **(void **)a1;
  if (v6)
  {
    *(void *)a1 = v6;
    int v2 = *v4;
  }
  uint64_t result = sub_20DC5007C(*(uint64_t **)(a1 + 8), v2);
  ++*(void *)(a1 + 16);
  return result;
}

void *sub_20DC750BC(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v4;
        unsigned int v9 = (void *)v4[4];
        uint64_t v7 = v4 + 4;
        uint64_t v8 = v9;
        char v10 = *((unsigned char *)v7 + 23);
        int v11 = v10;
        if (v10 >= 0) {
          uint64_t v8 = v7;
        }
        uint64_t v12 = v7[1];
        uint64_t v13 = v10 & 0x7F;
        if (v11 >= 0) {
          uint64_t v12 = v13;
        }
        v15[0] = v8;
        v15[1] = v12;
        if ((sub_20DC50018(a3, (uint64_t)v15) & 0x80000000) == 0) {
          break;
        }
        long long v4 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_12;
        }
      }
      long long v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_12:
  *a2 = v5;
  return result;
}

void *sub_20DC75160(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    unsigned int v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        long long v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          long long v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; unsigned int v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          unsigned int v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t *sub_20DC751B4(uint64_t a1, uint64_t a2)
{
  sub_20DC7523C((uint64_t)v9, a1, a2);
  unsigned int v3 = (uint64_t *)v9[0];
  long long v4 = (uint64_t **)sub_20DC750BC(a1, &v8, (const void **)(v9[0] + 32));
  uint64_t v5 = v8;
  *unsigned int v3 = 0;
  v3[1] = 0;
  v3[2] = v5;
  *long long v4 = v3;
  uint64_t v6 = **(void **)a1;
  if (v6)
  {
    *(void *)a1 = v6;
    unsigned int v3 = *v4;
  }
  uint64_t result = sub_20DC5007C(*(uint64_t **)(a1 + 8), v3);
  ++*(void *)(a1 + 16);
  return result;
}

_OWORD *sub_20DC7523C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  uint64_t result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_20DC55634((uint64_t)result, *(const void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *uint64_t result = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a3 + 24);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_20DC752B4(uint64_t a1)
{
  unsigned int v3 = *(void ****)(a1 + 272);
  int v2 = *(void ****)(a1 + 280);
  while (v3 != v2)
  {
    long long v4 = *v3;
    if (*v3)
    {
      uint64_t v7 = *v3;
      sub_20DC5847C(&v7);
      MEMORY[0x210568AF0](v4, 0x1020C4016EE4530);
      int v2 = *(void ****)(a1 + 280);
    }
    ++v3;
  }
  uint64_t v7 = (void **)(a1 + 1176);
  sub_20DC503B0(&v7);
  if (*(char *)(a1 + 1175) < 0) {
    operator delete(*(void **)(a1 + 1152));
  }
  sub_20DC74DB0(a1 + 728);
  sub_20DC5043C(*(char **)(a1 + 712));
  uint64_t v7 = (void **)(a1 + 680);
  sub_20DC5847C(&v7);
  sub_20DC75420(*(char **)(a1 + 664));
  sub_20DC5049C(*(void **)(a1 + 640));
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  sub_20DC754E0(a1 + 432);
  sub_20DC4FC58((void *)(a1 + 336));
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  uint64_t v5 = *(void **)(a1 + 272);
  if (v5)
  {
    *(void *)(a1 + 280) = v5;
    operator delete(v5);
  }
  sub_20DC75588(a1 + 224);
  sub_20DC7569C(a1 + 176);
  sub_20DC504F4(a1 + 128);
  sub_20DC505D0(a1 + 80);
  uint64_t v7 = (void **)(a1 + 56);
  sub_20DC5847C(&v7);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_20DC75420(char *a1)
{
  if (a1)
  {
    sub_20DC75420(*(void *)a1);
    sub_20DC75420(*((void *)a1 + 1));
    sub_20DC5BB18((uint64_t)(a1 + 56), *((char **)a1 + 8));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t sub_20DC7549C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20DC754E0(uint64_t a1)
{
  sub_20DC75538(*(void **)(a1 + 104));
  sub_20DC75538(*(void **)(a1 + 72));
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unsigned int v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20DC75538(void *a1)
{
  if (a1)
  {
    sub_20DC75538(*a1);
    sub_20DC75538(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_20DC75588(uint64_t a1)
{
  unsigned int v3 = *(uint64_t **)(a1 + 24);
  int v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v6 = *v3;
      if (*v3)
      {
        sub_20DC78B50(v6 + 152);
        uint64_t v5 = sub_20DC51538(v6);
        MEMORY[0x210568AF0](v5, 0x10B2C401A85D49FLL);
        int v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    unsigned int v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_20DC7562C(*(char **)(a1 + 8));
  return a1;
}

void sub_20DC7562C(char *a1)
{
  if (a1)
  {
    sub_20DC7562C(*(void *)a1);
    sub_20DC7562C(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t sub_20DC7569C(uint64_t a1)
{
  unsigned int v3 = *(uint64_t **)(a1 + 24);
  int v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        sub_20DC55578(v4 + 184);
        uint64_t v5 = sub_20DC51538(v4);
        MEMORY[0x210568AF0](v5, 0x10B2C409EE52067);
        int v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    unsigned int v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_20DC50214(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20DC7572C(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    char v6 = *((unsigned char *)a2 + 23);
    BOOL v7 = v6 < 0;
    uint64_t v8 = (const void *)*a2;
    if (v6 >= 0) {
      uint64_t v8 = a2;
    }
    uint64_t v9 = v6 & 0x7F;
    if (v7) {
      uint64_t v9 = a2[1];
    }
    long long v18 = v8;
    uint64_t v19 = v9;
    int v10 = sub_20DC50018((const void **)(v3 + 32), (uint64_t)&v18);
    int v11 = (uint64_t *)(v3 + 8);
    if (v10 >= 0)
    {
      int v11 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v11;
  }
  while (*v11);
  if (v5 == v2) {
    return v2;
  }
  uint64_t v12 = *(const void **)(v5 + 32);
  char v13 = *(unsigned char *)(v5 + 55);
  int v14 = v13;
  if (v13 >= 0) {
    uint64_t v12 = (const void *)(v5 + 32);
  }
  uint64_t v15 = *(void *)(v5 + 40);
  uint64_t v16 = v13 & 0x7F;
  if (v14 >= 0) {
    uint64_t v15 = v16;
  }
  long long v18 = v12;
  uint64_t v19 = v15;
  if ((sub_20DC50018((const void **)a2, (uint64_t)&v18) & 0x80000000) != 0) {
    return v2;
  }
  return v5;
}

uint64_t sub_20DC757F8(uint64_t a1, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_20DC55634(a1, *(const void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
  }
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a3;
  return a1;
}

void sub_20DC7587C(_WORD *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  switch(*(_DWORD *)(a2[1] + 152))
  {
    case 0xFFFFFFFD:
      goto LABEL_4;
    case 0xFFFFFFFE:
      goto LABEL_7;
    case 0xFFFFFFFF:
      goto LABEL_10;
    case 1:
      goto LABEL_16;
    case 2:
      goto LABEL_16;
    case 3:
      sub_20DC761BC(a1, a2, a3, a4);
      return;
    case 4:
LABEL_16:
      sub_20DC7600C(a1, a2, a3, a4);
      break;
    case 5:
      sub_20DC76370(a1, a2, a3, a4);
      break;
    case 6:
LABEL_10:
      sub_20DC75E5C(a1, a2, a3, a4);
      break;
    case 7:
      sub_20DC76524(a1, a2, a3, a4);
      break;
    case 8:
LABEL_7:
      sub_20DC75CB0(a1, a2, (unint64_t *)a3, a4);
      break;
    case 9:
      sub_20DC766DC(a1, a2, a3, a4);
      break;
    case 0xA:
LABEL_4:
      sub_20DC75B08(a1, a2, a3, a4);
      break;
    default:
      uint64_t v5 = *a2;
      std::string __p = (char *)operator new(0x28uLL);
      strcpy(__p, "fatal: invalid enum underlying type");
      flatbuffers::Parser::Error(v5, a1);
      operator delete(__p);
      break;
  }
}

void sub_20DC75B08(_WORD *a1, uint64_t *a2, void *a3, unsigned int a4)
{
  if (__CFADD__(*a3, a4))
  {
    uint64_t v6 = *a2;
    sub_20DC444C8();
    BOOL v7 = std::string::insert(&v19, 0, "enum value does not fit, \"");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (a4) {
      uint64_t v9 = " + 1\"";
    }
    else {
      uint64_t v9 = "\"";
    }
    int v10 = std::string::append(&v20, v9);
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v21, " out of ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_20DC768EC(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v16 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    long long v23 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(v6, a1);
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)v23);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 += a4;
    *a1 = 0;
  }
}

void sub_20DC75CB0(_WORD *a1, uint64_t *a2, unint64_t *a3, unsigned int a4)
{
  unint64_t v6 = *a3;
  if ((*a3 & 0x8000000000000000) != 0 || v6 > (a4 ^ 0xFFFFFFFFuLL))
  {
    uint64_t v7 = *a2;
    sub_20DC3C654();
    std::string::size_type v8 = std::string::insert(&v20, 0, "enum value does not fit, \"");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (a4) {
      int v10 = " + 1\"";
    }
    else {
      int v10 = "\"";
    }
    std::string::size_type v11 = std::string::append(&v21, v10);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v13 = std::string::append(&v22, " out of ");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20DC76A38(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v17 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    long long v24 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(v7, a1);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 = v6 + a4;
    *a1 = 0;
  }
}

void sub_20DC75E5C(_WORD *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v6 = *a3;
  if (*a3 < 0 || v6 > 0xFFFFLL - a4)
  {
    uint64_t v7 = *a2;
    sub_20DC3C654();
    std::string::size_type v8 = std::string::insert(&v20, 0, "enum value does not fit, \"");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (a4) {
      int v10 = " + 1\"";
    }
    else {
      int v10 = "\"";
    }
    std::string::size_type v11 = std::string::append(&v21, v10);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v13 = std::string::append(&v22, " out of ");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20DC76B84(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v17 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    long long v24 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(v7, a1);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 = v6 + a4;
    *a1 = 0;
  }
}

void sub_20DC7600C(_WORD *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v6 = *a3;
  if (*a3 < 0 || v6 > 255 - a4)
  {
    uint64_t v7 = *a2;
    sub_20DC3C654();
    std::string::size_type v8 = std::string::insert(&v20, 0, "enum value does not fit, \"");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (a4) {
      int v10 = " + 1\"";
    }
    else {
      int v10 = "\"";
    }
    std::string::size_type v11 = std::string::append(&v21, v10);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v13 = std::string::append(&v22, " out of ");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20DC76CD0(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v17 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    long long v24 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(v7, a1);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 = v6 + a4;
    *a1 = 0;
  }
}

void sub_20DC761BC(_WORD *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v6 = *a3;
  if (*a3 < -128 || v6 > 127 - a4)
  {
    uint64_t v7 = *a2;
    sub_20DC3C654();
    std::string::size_type v8 = std::string::insert(&v20, 0, "enum value does not fit, \"");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (a4) {
      int v10 = " + 1\"";
    }
    else {
      int v10 = "\"";
    }
    std::string::size_type v11 = std::string::append(&v21, v10);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v13 = std::string::append(&v22, " out of ");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20DC76E1C(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v17 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    long long v24 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(v7, a1);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 = v6 + a4;
    *a1 = 0;
  }
}

void sub_20DC76370(_WORD *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v6 = *a3;
  if (*a3 < -32768 || v6 > 0x7FFFLL - a4)
  {
    uint64_t v7 = *a2;
    sub_20DC3C654();
    std::string::size_type v8 = std::string::insert(&v20, 0, "enum value does not fit, \"");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (a4) {
      int v10 = " + 1\"";
    }
    else {
      int v10 = "\"";
    }
    std::string::size_type v11 = std::string::append(&v21, v10);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v13 = std::string::append(&v22, " out of ");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20DC76F68(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v17 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    long long v24 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(v7, a1);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 = v6 + a4;
    *a1 = 0;
  }
}

void sub_20DC76524(_WORD *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v6 = *a3;
  if (*a3 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFFLL - a4)
  {
    uint64_t v7 = *a2;
    sub_20DC3C654();
    std::string::size_type v8 = std::string::insert(&v20, 0, "enum value does not fit, \"");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (a4) {
      int v10 = " + 1\"";
    }
    else {
      int v10 = "\"";
    }
    std::string::size_type v11 = std::string::append(&v21, v10);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v13 = std::string::append(&v22, " out of ");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20DC770B4(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v17 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    long long v24 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(v7, a1);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 = v6 + a4;
    *a1 = 0;
  }
}

void sub_20DC766DC(_WORD *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  if (*a3 > (a4 ^ 0x7FFFFFFFFFFFFFFFLL))
  {
    uint64_t v6 = *a2;
    sub_20DC3C654();
    uint64_t v7 = std::string::insert(&v19, 0, "enum value does not fit, \"");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (a4) {
      std::string::size_type v9 = " + 1\"";
    }
    else {
      std::string::size_type v9 = "\"";
    }
    int v10 = std::string::append(&v20, v9);
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v12 = std::string::append(&v21, " out of ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_20DC77200(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v16 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    long long v23 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    flatbuffers::Parser::Error(v6, a1);
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)v23);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 += a4;
    *a1 = 0;
  }
}

float sub_20DC76888(__int16 a1)
{
  unsigned int v1 = a1 & 0x7FFF;
  unsigned int v2 = __clz(v1);
  int v3 = (v1 << (v2 - 8)) ^ 0x800000 | (1124073472 - (v2 << 23));
  if ((a1 & 0x7FFF) == 0) {
    int v3 = 0;
  }
  if ((unsigned __int16)(a1 & 0x7FFF) >> 10 >= 0x1Fu) {
    int v4 = (v1 << 13) | 0x7F800000;
  }
  else {
    int v4 = v3;
  }
  int v5 = (v1 << 13) + 939524096;
  if (((a1 & 0x7FFFu) - 1024) >> 11 > 0xE) {
    int v5 = v4;
  }
  LODWORD(result) = v5 | ((a1 & 0x8000) << 16);
  return result;
}

void sub_20DC768EC(std::string *a1)
{
  sub_20DC444C8();
  unsigned int v2 = std::string::insert(&v13, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v14, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC444C8();
  if (v12 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v7 = v12 & 0x7F;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::size_type v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_20DC76A38(std::string *a1)
{
  sub_20DC3F7A4();
  unsigned int v2 = std::string::insert(&v13, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v14, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC3F7A4();
  if (v12 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v7 = v12 & 0x7F;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::size_type v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_20DC76B84(std::string *a1)
{
  sub_20DC6FAC0();
  unsigned int v2 = std::string::insert(&v13, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v14, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC6FAC0();
  if (v12 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v7 = v12 & 0x7F;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::size_type v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_20DC76CD0(std::string *a1)
{
  sub_20DC3C4E4();
  unsigned int v2 = std::string::insert(&v13, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v14, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC3C4E4();
  if (v12 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v7 = v12 & 0x7F;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::size_type v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_20DC76E1C(std::string *a1)
{
  sub_20DC3C4E4();
  unsigned int v2 = std::string::insert(&v13, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v14, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC3C4E4();
  if (v12 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v7 = v12 & 0x7F;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::size_type v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_20DC76F68(std::string *a1)
{
  sub_20DC6FA50();
  unsigned int v2 = std::string::insert(&v13, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v14, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC6FA50();
  if (v12 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v7 = v12 & 0x7F;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::size_type v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_20DC770B4(std::string *a1)
{
  sub_20DC3C4E4();
  unsigned int v2 = std::string::insert(&v13, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v14, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC3C4E4();
  if (v12 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v7 = v12 & 0x7F;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::size_type v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_20DC77200(std::string *a1)
{
  sub_20DC3C654();
  unsigned int v2 = std::string::insert(&v13, 0, "[");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v14, "; ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_20DC3C654();
  if (v12 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v7 = v12 & 0x7F;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::size_type v8 = std::string::append(&v15, (const std::string::value_type *)v6, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v16, "]");
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_20DC7734C(long long *a1, long long *a2, uint64_t **a3, uint64_t a4, char a5)
{
  while (2)
  {
    char v12 = a2 - 2;
LABEL_2:
    for (uint64_t i = 1 - a4; ; ++i)
    {
      uint64_t v14 = (char *)a2 - (char *)a1;
      unint64_t v15 = ((char *)a2 - (char *)a1) >> 5;
      if (!(!v6 & v5))
      {
        switch(v15)
        {
          case 0uLL:
          case 1uLL:
            return;
          case 2uLL:
            if (**a3 == (*a3)[1]) {
              uint64_t v26 = 0;
            }
            else {
              uint64_t v26 = **a3;
            }
            if (strcmp((const char *)(v26 + *(void *)v12), (const char *)(v26 + *(void *)a1)) < 0)
            {
              long long v29 = *a1;
              long long v31 = a1[1];
              long long v27 = *(a2 - 1);
              *a1 = *v12;
              a1[1] = v27;
              *char v12 = v29;
              *(a2 - 1) = v31;
            }
            break;
          case 3uLL:
            sub_20DC51C98(a1, a1 + 2, a2 - 2, a3);
            break;
          case 4uLL:
            sub_20DC52358((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2, a3);
            break;
          case 5uLL:
            sub_20DC52450((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
            break;
          default:
            JUMPOUT(0);
        }
        return;
      }
      if (v14 <= 767)
      {
        if (a5)
        {
          sub_20DC51A40((uint64_t)a1, (uint64_t)a2, a3);
        }
        else
        {
          sub_20DC51B80((uint64_t)a1, a2, a3);
        }
        return;
      }
      if (i == 1)
      {
        if (a1 != a2)
        {
          sub_20DC52584((uint64_t)a1, a2, a2, a3);
        }
        return;
      }
      unint64_t v16 = v15 >> 1;
      std::string::size_type v17 = &a1[2 * (v15 >> 1)];
      if ((unint64_t)v14 > 0x1000)
      {
        sub_20DC51C98(a1, &a1[2 * (v15 >> 1)], a2 - 2, a3);
        sub_20DC51C98(a1 + 2, v17 - 2, a2 - 4, a3);
        sub_20DC51C98(a1 + 4, &a1[2 * v16 + 2], a2 - 6, a3);
        sub_20DC51C98(v17 - 2, v17, &a1[2 * v16 + 2], a3);
        long long v28 = *a1;
        long long v30 = a1[1];
        long long v18 = v17[1];
        *a1 = *v17;
        a1[1] = v18;
        *std::string::size_type v17 = v28;
        v17[1] = v30;
      }
      else
      {
        sub_20DC51C98(&a1[2 * (v15 >> 1)], a1, a2 - 2, a3);
      }
      if ((a5 & 1) == 0)
      {
        uint64_t v19 = **a3 == (*a3)[1] ? 0 : **a3;
        if ((strcmp((const char *)(v19 + *((void *)a1 - 4)), (const char *)(v19 + *(void *)a1)) & 0x80000000) == 0)
        {
          unint64_t v25 = sub_20DC51DD0((unint64_t)a1, a2, a3);
          goto LABEL_18;
        }
      }
      __n128 v21 = sub_20DC51F6C((uint64_t *)a1, a2, a3);
      std::string v22 = v20;
      if ((v23 & 1) == 0) {
        goto LABEL_49;
      }
      BOOL v24 = sub_20DC52108(a1, v20, a3);
      unint64_t v25 = (unint64_t)(v22 + 2);
      if (sub_20DC52108(v22 + 2, a2, a3)) {
        break;
      }
      if (!v24)
      {
LABEL_49:
        a4 = -i;
        sub_20DC7734C(a1, v22, a3, -i, a5 & 1, v21);
        a5 = 0;
        a1 = v22 + 2;
        goto LABEL_2;
      }
LABEL_18:
      a1 = (long long *)v25;
    }
    a4 = -i;
    a2 = v22;
    if (!v24) {
      continue;
    }
    break;
  }
}

char *sub_20DC77738(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (v3 <= 1)
  {
    if (v3 >= 2) {
      goto LABEL_13;
    }
LABEL_11:
    int64_t v7 = a3;
    char __src = *(char **)a2;
    std::string::size_type v8 = *(char **)(a1 + 8);
    return sub_20DC52ACC(a1, v8, (char *)&__src, (char *)&__src + a3, v7);
  }
  if (v3 == 2 || v3 == 26) {
    goto LABEL_11;
  }
  if (v3 != 3)
  {
LABEL_13:
    std::string::size_type v9 = *(char **)a2;
    std::string::size_type v8 = *(char **)(a1 + 8);
    int64_t v7 = a3;
    char __src = (char *)(v8 - &v9[*(void *)a1]);
    return sub_20DC52ACC(a1, v8, (char *)&__src, (char *)&__src + a3, v7);
  }
  double v5 = *(double *)a2;

  return sub_20DC779EC((char *)a1, a3, v5);
}

char *sub_20DC777DC(char **a1, char *__src, unint64_t a3, char *a4)
{
  if (!a3) {
    return __src;
  }
  double v5 = a4;
  unint64_t v6 = a3;
  std::string::size_type v9 = a1[1];
  std::string::size_type v8 = a1[2];
  if (v8 - v9 >= a3)
  {
    unint64_t v25 = v9 - __src;
    unint64_t v26 = a3 - (v9 - __src);
    if (a3 <= v9 - __src)
    {
      long long v27 = a1[1];
      unint64_t v29 = a3;
      goto LABEL_27;
    }
    long long v27 = &__src[a3];
    long long v28 = a1[1];
    do
    {
      *v28++ = *a4;
      --v26;
    }
    while (v26);
    a1[1] = v27;
    if (v25)
    {
      unint64_t v29 = v9 - __src;
LABEL_27:
      long long v30 = &__src[a3];
      long long v31 = v27;
      if (&v27[-a3] < v9)
      {
        if (a3 <= v25) {
          unint64_t v32 = v9 - __src;
        }
        else {
          unint64_t v32 = a3;
        }
        std::string::size_type v33 = &__src[-a3];
        uint64_t v34 = __src;
        std::string::size_type v35 = __src;
        do
        {
          v34[v32] = v33[v32];
          ++v35;
          ++v33;
          ++v34;
        }
        while (&v35[v32 - (void)v9 - a3]);
        if (a3 > v25) {
          unint64_t v25 = a3;
        }
        long long v31 = &v34[v25];
      }
      a1[1] = v31;
      if (v27 != v30) {
        memmove(&__src[a3], __src, v27 - v30);
      }
      if (__src <= v5)
      {
        if (a1[1] <= v5) {
          unint64_t v36 = 0;
        }
        else {
          unint64_t v36 = v6;
        }
        v5 += v36;
      }
      std::string::size_type v37 = __src;
      do
      {
        *v37++ = *v5;
        --v29;
      }
      while (v29);
    }
    return __src;
  }
  int v10 = *a1;
  uint64_t v11 = v9 - *a1 + a3;
  if (v11 < 0) {
    abort();
  }
  char v12 = (char *)(__src - v10);
  unint64_t v13 = v8 - v10;
  if (2 * v13 > v11) {
    uint64_t v11 = 2 * v13;
  }
  if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v14 = v11;
  }
  if (v14) {
    unint64_t v15 = operator new(v14);
  }
  else {
    unint64_t v15 = 0;
  }
  unint64_t v16 = &v12[(void)v15];
  std::string::size_type v17 = &v16[v6];
  long long v18 = v16;
  do
  {
    *v18++ = *v5;
    --v6;
  }
  while (v6);
  uint64_t v19 = *a1;
  if (__src == *a1)
  {
    __n128 v21 = v16;
  }
  else
  {
    std::string v20 = __src;
    __n128 v21 = v16;
    do
    {
      char v22 = *--v20;
      *--__n128 v21 = v22;
    }
    while (v20 != v19);
    std::string::size_type v9 = a1[1];
  }
  char v23 = (char *)v15 + v14;
  if (v9 != __src) {
    memmove(v17, __src, v9 - __src);
  }
  BOOL v24 = *a1;
  *a1 = v21;
  a1[1] = &v17[v9 - __src];
  a1[2] = v23;
  if (v24) {
    operator delete(v24);
  }
  return v16;
}

char *sub_20DC779EC(char *result, int a2, double a3)
{
  if (a2 == 4)
  {
    float v7 = a3;
    *((float *)&v9 + 1) = v7;
    int v3 = (char *)*((void *)result + 1);
    int v4 = (char *)&vars0;
    double v5 = (char *)&v9 + 4;
    int64_t v6 = 4;
  }
  else
  {
    if (a2 != 8) {
      return result;
    }
    double v8 = a3;
    int v3 = (char *)*((void *)result + 1);
    int v4 = (char *)&v9;
    double v5 = (char *)&v8;
    int64_t v6 = 8;
  }
  return sub_20DC52ACC((uint64_t)result, v3, v5, v4, v6);
}

void sub_20DC77A54(char **a1, unint64_t a2)
{
  double v5 = a1[1];
  int v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      bzero(a1[1], 16 * a2);
      v5 += 16 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    int64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 4);
    if (v8 >> 60) {
      abort();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_20DC4F504();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    char v12 = &v11[16 * (v7 >> 4)];
    unint64_t v13 = &v11[16 * v10];
    bzero(v12, 16 * a2);
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v5 - 1);
        v12 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      double v5 = *a1;
    }
    *a1 = v12;
    a1[1] = &v11[16 * a2 + v7];
    a1[2] = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_20DC77B94(uint64_t a1, char *a2, unint64_t a3)
{
  unint64_t v6 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = sub_20DC77C68(a1, a2, a3);
  if ((*(unsigned char *)(a1 + 52) & 2) != 0)
  {
    uint64_t v8 = (uint64_t)v7;
    *(void *)&long long v12 = v7;
    *((void *)&v12 + 1) = a3;
    uint64_t v9 = sub_20DC77D64(a1 + 96, (uint64_t)v7, a3);
    if ((void *)(a1 + 104) == v9)
    {
      sub_20DC77FAC(a1 + 96, v8, a3, &v12);
    }
    else
    {
      unint64_t v10 = v9;
      unint64_t v11 = *(void *)(a1 + 8) - *(void *)a1;
      if (v5 - v6 > v11)
      {
        sub_20DC77E78((unint64_t *)a1, v5 - v6 - v11);
      }
      else if (v5 - v6 < v11)
      {
        *(void *)(a1 + 8) = *(void *)a1 + v5 - v6;
      }
      *(void *)(*(void *)(a1 + 32) - 16) = v10[4];
    }
  }
}

char *sub_20DC77C68(uint64_t a1, char *a2, unint64_t a3)
{
  if (HIDWORD(a3)) {
    int v6 = 3;
  }
  else {
    int v6 = 2;
  }
  if (a3 < 0x10000) {
    int v6 = 1;
  }
  if (a3 >= 0x100) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  int64_t v8 = (1 << v7);
  uint64_t v9 = *(char **)(a1 + 8);
  unint64_t v10 = (*(void *)a1 - (void)v9) & (v8 - 1);
  LOBYTE(v16) = 0;
  sub_20DC777DC((char **)a1, v9, v10, (char *)&v16);
  *(void *)&long long v16 = a3;
  sub_20DC52ACC(a1, *(char **)(a1 + 8), (char *)&v16, (char *)&v16 + v8, v8);
  unint64_t v11 = *(char **)(a1 + 8);
  long long v12 = &v11[-*(void *)a1];
  sub_20DC52ACC(a1, v11, a2, &a2[a3 + 1], a3 + 1);
  *(void *)&long long v16 = v12;
  DWORD2(v16) = 5;
  HIDWORD(v16) = v7;
  unint64_t v13 = *(_OWORD **)(a1 + 32);
  if ((unint64_t)v13 >= *(void *)(a1 + 40))
  {
    size_t v14 = sub_20DC52CB4((void **)(a1 + 24), &v16);
  }
  else
  {
    *unint64_t v13 = v16;
    size_t v14 = v13 + 1;
  }
  *(void *)(a1 + 32) = v14;
  return v12;
}

void *sub_20DC77D64(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v6 = (void *)(a1 + 8);
  int v7 = sub_20DC77DF0(a1, a2, a3, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v6 == v7) {
    return v6;
  }
  int64_t v8 = v7;
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = *v9 == v9[1] ? 0 : *v9;
  unint64_t v11 = (const char *)(v10 + a2);
  long long v12 = (const char *)(v10 + v8[4]);
  unint64_t v13 = v8[5] >= a3 ? a3 : v8[5];
  if (strncmp(v11, v12, v13 + 1) < 0) {
    return v6;
  }
  return v8;
}

void *sub_20DC77DF0(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  if (a4)
  {
    int v6 = a4;
    int64_t v8 = *(uint64_t **)(a1 + 24);
    if (*v8 == v8[1]) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *v8;
    }
    uint64_t v10 = (const char *)(v9 + a2);
    do
    {
      if (a3 >= v6[5]) {
        unint64_t v11 = v6[5];
      }
      else {
        unint64_t v11 = a3;
      }
      int v12 = strncmp((const char *)(v9 + v6[4]), v10, v11 + 1);
      unint64_t v13 = v6 + 1;
      if (v12 >= 0)
      {
        unint64_t v13 = v6;
        a5 = v6;
      }
      int v6 = (void *)*v13;
    }
    while (*v13);
  }
  return a5;
}

void sub_20DC77E78(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  int v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    int v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      abort();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    int v12 = &v7[v11];
    unint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      size_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t **sub_20DC77FAC(uint64_t a1, uint64_t a2, unint64_t a3, _OWORD *a4)
{
  float result = (uint64_t **)sub_20DC78050(a1, &v12, a2, a3);
  if (!*result)
  {
    int v7 = result;
    unint64_t v8 = operator new(0x30uLL);
    unsigned char v8[2] = *a4;
    uint64_t v9 = v12;
    *(void *)unint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v9;
    *int v7 = (uint64_t *)v8;
    uint64_t v10 = **(void **)a1;
    if (v10)
    {
      *(void *)a1 = v10;
      unint64_t v11 = *v7;
    }
    else
    {
      unint64_t v11 = (uint64_t *)v8;
    }
    float result = (uint64_t **)sub_20DC5007C(*(uint64_t **)(a1 + 8), v11);
    ++*(void *)(a1 + 16);
  }
  return result;
}

void *sub_20DC78050(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    unint64_t v8 = *(uint64_t **)(a1 + 24);
    if (*v8 == v8[1]) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *v8;
    }
    uint64_t v10 = (const char *)(v9 + a3);
    do
    {
      while (1)
      {
        unint64_t v11 = v5;
        uint64_t v12 = (const char *)(v9 + v5[4]);
        uint64_t v13 = v5[5] >= a4 ? a4 : v5[5];
        size_t v14 = v13 + 1;
        if ((strncmp(v10, v12, v13 + 1) & 0x80000000) == 0) {
          break;
        }
        uint64_t v5 = (void *)*v11;
        unint64_t v6 = v11;
        if (!*v11) {
          goto LABEL_16;
        }
      }
      if ((strncmp(v12, v10, v14) & 0x80000000) == 0) {
        break;
      }
      unint64_t v6 = v11 + 1;
      uint64_t v5 = (void *)v11[1];
    }
    while (v5);
  }
  else
  {
    unint64_t v11 = (void *)(a1 + 8);
  }
LABEL_16:
  *a2 = v11;
  return v6;
}

uint64_t sub_20DC7811C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v6 = 4 * a3;
  sub_20DC4F80C(a1, 4 * a3, 4uLL);
  sub_20DC4F80C(a1, v6, 4uLL);
  if (a3)
  {
    uint64_t v7 = a2 - 4;
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = v8 - 1;
      int v10 = *(_DWORD *)(v7 + 4 * v8);
      sub_20DC43420(a1, 4uLL);
      sub_20DC435AC(a1, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) - v10 + 4);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  *(unsigned char *)(a1 + 70) = 0;

  return sub_20DC435AC(a1, a3);
}

uint64_t *sub_20DC781E4(uint64_t *result, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = (uint64_t)result;
    float result = (uint64_t *)sub_20DC43420((uint64_t)result, 4uLL);
    int v6 = *(_DWORD *)(v5 + 32) - *(_DWORD *)(v5 + 48) + *(_DWORD *)(v5 + 40) - a3;
    if (v6 != -4 || *(unsigned char *)(v5 + 80))
    {
      unsigned int v7 = sub_20DC435AC(v5, v6 + 4);
      return sub_20DC4FBD0((uint64_t *)v5, a2, v7);
    }
  }
  return result;
}

uint64_t sub_20DC7827C(void *a1, unint64_t a2)
{
  if (a1[1] < 8uLL) {
    return 0;
  }
  unint64_t v4 = *a1 + a2;
  if (strncmp((const char *)(v4 + 4), "BFBS", 4uLL)) {
    return 0;
  }
  unsigned int v5 = sub_20DC53E80((uint64_t)a1, a2);
  if (!v5) {
    return 0;
  }
  int v6 = (int *)(v4 + v5);

  return sub_20DC53ED0(v6, (uint64_t)a1);
}

BOOL sub_20DC78310(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0x1FFFFFFE) {
    return 0;
  }
  unint64_t v6 = 4 * v5 + 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

uint64_t sub_20DC78378(int *a1, uint64_t a2)
{
  uint64_t result = sub_20DC54320((uint64_t *)a2, a1);
  if (result)
  {
    uint64_t v5 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0)
    {
      uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v6 - *(void *)a2);
      if (result)
      {
        uint64_t result = sub_20DC542A0(a2, (unsigned int *)((char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6)));
        if (result)
        {
          BOOL v7 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0)
          {
            uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v8 - *(void *)a2);
            if (!result) {
              return result;
            }
            uint64_t v9 = (unsigned int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
          }
          else
          {
            uint64_t v9 = 0;
          }
          uint64_t result = sub_20DC542A0(a2, v9);
          if (result)
          {
            --*(_DWORD *)(a2 + 16);
            return 1;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20DC7846C(int *a1, uint64_t a2)
{
  uint64_t result = sub_20DC54320((uint64_t *)a2, a1);
  if (!result) {
    return result;
  }
  uint64_t v5 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v5 < 5u) {
    return 0;
  }
  uint64_t v6 = v5[2];
  if (!v5[2]) {
    return 0;
  }
  uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v6 - *(void *)a2);
  if (!result) {
    return result;
  }
  uint64_t result = sub_20DC542A0(a2, (unsigned int *)((char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6)));
  if (!result) {
    return result;
  }
  uint64_t v7 = *a1;
  uint64_t v8 = (char *)a1 - v7;
  unsigned int v9 = *(unsigned __int16 *)((char *)a1 - v7);
  if (v9 < 7)
  {
    BOOL v15 = sub_20DC7878C(a2, 0);
    long long v16 = 0;
    if (v15) {
      goto LABEL_27;
    }
    return 0;
  }
  uint64_t v10 = -v7;
  uint64_t v11 = *((unsigned __int16 *)v8 + 3);
  if (!*((_WORD *)v8 + 3))
  {
    if (sub_20DC7878C(a2, 0)) {
      goto LABEL_19;
    }
    return 0;
  }
  uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v11 - *(void *)a2);
  if (!result) {
    return result;
  }
  uint64_t v12 = (unsigned int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
  if (!sub_20DC7878C(a2, v12)) {
    return 0;
  }
  if (*v12)
  {
    unint64_t v13 = 0;
    size_t v14 = v12 + 1;
    while ((sub_20DC787F4((int *)((char *)v14 + *v14), a2) & 1) != 0)
    {
      ++v13;
      ++v14;
      if (v13 >= *v12)
      {
        uint64_t v7 = *a1;
        uint64_t v10 = -v7;
        unsigned int v9 = *(unsigned __int16 *)((char *)a1 - v7);
        goto LABEL_19;
      }
    }
    return 0;
  }
LABEL_19:
  if (v9 < 9)
  {
LABEL_26:
    long long v16 = 0;
    goto LABEL_27;
  }
  if (!*(_WORD *)((char *)a1 + v10 + 8))
  {
LABEL_24:
    if (*(_WORD *)((char *)a1 + v10 + 8))
    {
      long long v16 = (unsigned int *)((char *)a1
                           + *(unsigned __int16 *)((char *)a1 + v10 + 8)
                           + *(unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v10 + 8)));
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v10 + 8) - *(void *)a2);
  if (!result) {
    return result;
  }
  long long v16 = 0;
  if (*(unsigned __int16 *)((char *)a1 - (int)v7) >= 9u)
  {
    uint64_t v10 = -(uint64_t)(int)v7;
    goto LABEL_24;
  }
LABEL_27:
  uint64_t result = sub_20DC54C78(a2, v16);
  if (!result) {
    return result;
  }
  std::string::size_type v17 = 0;
  long long v18 = (unsigned __int16 *)((char *)a1 - (int)v7);
  unsigned int v19 = *v18;
  if (v19 >= 9)
  {
    uint64_t v20 = -(uint64_t)(int)v7;
    uint64_t v21 = v18[4];
    if (v21)
    {
      char v22 = (int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
      if (*v22)
      {
        unint64_t v23 = 0;
        BOOL v24 = v22 + 1;
        while ((sub_20DC78378((int *)((char *)v24 + *v24), a2) & 1) != 0)
        {
          ++v23;
          ++v24;
          if (v23 >= *v22)
          {
            uint64_t v7 = *a1;
            uint64_t v20 = -v7;
            unsigned int v19 = *(unsigned __int16 *)((char *)a1 - v7);
            goto LABEL_35;
          }
        }
        return 0;
      }
    }
    if (v19 < 0xB) {
      goto LABEL_42;
    }
LABEL_35:
    if (*(_WORD *)((char *)a1 + v20 + 10))
    {
      uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v20 + 10) - *(void *)a2);
      if (!result) {
        return result;
      }
      std::string::size_type v17 = 0;
      if (*(unsigned __int16 *)((char *)a1 - (int)v7) < 0xBu) {
        goto LABEL_43;
      }
      uint64_t v20 = -(uint64_t)(int)v7;
    }
    uint64_t v25 = *(unsigned __int16 *)((char *)a1 + v20 + 10);
    if (v25) {
      std::string::size_type v17 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
    }
    else {
LABEL_42:
    }
      std::string::size_type v17 = 0;
  }
LABEL_43:
  uint64_t result = sub_20DC54C78(a2, v17);
  if (result)
  {
    unint64_t v26 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v26 < 0xBu
      || (uint64_t v27 = v26[5]) == 0
      || (long long v28 = (int *)((char *)a1 + v27 + *(unsigned int *)((char *)a1 + v27)), !*v28))
    {
LABEL_50:
      --*(_DWORD *)(a2 + 16);
      return 1;
    }
    unint64_t v29 = 0;
    long long v30 = v28 + 1;
    while (sub_20DC542A0(a2, (unsigned int *)((char *)v30 + *v30)))
    {
      ++v29;
      ++v30;
      if (v29 >= *v28) {
        goto LABEL_50;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_20DC7878C(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0x1FFFFFFE) {
    return 0;
  }
  unint64_t v6 = 4 * v5 + 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

uint64_t sub_20DC787F4(int *a1, uint64_t a2)
{
  uint64_t result = sub_20DC54320((uint64_t *)a2, a1);
  if (result)
  {
    uint64_t v5 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v5 < 5u) {
      return 0;
    }
    uint64_t v6 = v5[2];
    if (!v5[2]) {
      return 0;
    }
    uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v6 - *(void *)a2);
    if (!result) {
      return result;
    }
    uint64_t result = sub_20DC542A0(a2, (unsigned int *)((char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6)));
    if (!result) {
      return result;
    }
    BOOL v7 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v7 < 7u) {
      return 0;
    }
    uint64_t v8 = v7[3];
    if (!v7[3]) {
      return 0;
    }
    uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v8 - *(void *)a2);
    if (!result) {
      return result;
    }
    uint64_t result = sub_20DC543DC((int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8)), a2);
    if (!result) {
      return result;
    }
    unsigned int v9 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v9 < 9u) {
      return 0;
    }
    uint64_t v10 = v9[4];
    if (!v9[4]) {
      return 0;
    }
    uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v10 - *(void *)a2);
    if (result)
    {
      uint64_t result = sub_20DC543DC((int *)((char *)a1 + v10 + *(unsigned int *)((char *)a1 + v10)), a2);
      if (result)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *a1;
        uint64_t v13 = -v12;
        size_t v14 = (unsigned __int16 *)((char *)a1 - v12);
        if (*(unsigned __int16 *)((char *)a1 - v12) < 0xBu) {
          goto LABEL_19;
        }
        if (!v14[5] || (uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + v14[5] - *(void *)a2), result))
        {
          if (*(_WORD *)((char *)a1 - v12 + 10)) {
            uint64_t v11 = (unsigned int *)((char *)a1
          }
                                 + *(unsigned __int16 *)((char *)a1 - v12 + 10)
                                 + *(unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - v12 + 10)));
          else {
            uint64_t v11 = 0;
          }
LABEL_19:
          uint64_t result = sub_20DC54C78(a2, v11);
          if (!result) {
            return result;
          }
          unsigned int v15 = *v14;
          if (v15 < 0xB) {
            goto LABEL_34;
          }
          if (v14[5])
          {
            long long v16 = (int *)((char *)a1 + v14[5] + *(unsigned int *)((char *)a1 + v14[5]));
            if (*v16)
            {
              unint64_t v17 = 0;
              long long v18 = v16 + 1;
              while ((sub_20DC78378((int *)((char *)v18 + *v18), a2) & 1) != 0)
              {
                ++v17;
                ++v18;
                if (v17 >= *v16)
                {
                  uint64_t v12 = *a1;
                  uint64_t v13 = -v12;
                  unsigned int v15 = *(unsigned __int16 *)((char *)a1 - v12);
                  goto LABEL_27;
                }
              }
              return 0;
            }
          }
LABEL_27:
          if (v15 < 0xD) {
            goto LABEL_34;
          }
          if (*(_WORD *)((char *)a1 + v13 + 12))
          {
            uint64_t result = sub_20DC53E80(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v13 + 12) - *(void *)a2);
            if (!result) {
              return result;
            }
            unsigned int v19 = 0;
            if (*(unsigned __int16 *)((char *)a1 - (int)v12) < 0xDu) {
              goto LABEL_35;
            }
            uint64_t v13 = -(uint64_t)(int)v12;
          }
          if (*(_WORD *)((char *)a1 + v13 + 12)) {
            unsigned int v19 = (unsigned int *)((char *)a1
          }
                                 + *(unsigned __int16 *)((char *)a1 + v13 + 12)
                                 + *(unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v13 + 12)));
          else {
LABEL_34:
          }
            unsigned int v19 = 0;
LABEL_35:
          uint64_t result = sub_20DC54C78(a2, v19);
          if (!result) {
            return result;
          }
          uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v20 < 0xDu
            || (uint64_t v21 = v20[6]) == 0
            || (char v22 = (int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21)), !*v22))
          {
LABEL_42:
            --*(_DWORD *)(a2 + 16);
            return 1;
          }
          unint64_t v23 = 0;
          BOOL v24 = v22 + 1;
          while (sub_20DC542A0(a2, (unsigned int *)((char *)v24 + *v24)))
          {
            ++v23;
            ++v24;
            if (v23 >= *v22) {
              goto LABEL_42;
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

_OWORD *sub_20DC78AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t result = operator new(0x40uLL);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v5;
  if (*(char *)(a3 + 23) < 0)
  {
    BOOL v7 = *(const void **)a3;
    unint64_t v8 = *(void *)(a3 + 8);
    unsigned int v9 = result;
    sub_20DC55634((uint64_t)(result + 2), v7, v8);
    uint64_t result = v9;
  }
  else
  {
    result[2] = *(_OWORD *)a3;
    *((void *)result + 6) = *(void *)(a3 + 16);
  }
  *((void *)result + 7) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_20DC78B50(uint64_t a1)
{
  unint64_t v3 = *(uint64_t **)(a1 + 24);
  unint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        uint64_t v4 = sub_20DC51538(*v3);
        MEMORY[0x210568AF0](v4, 0x10B2C40EE200C30);
        unint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    unint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_20DC50214(*(char **)(a1 + 8));
  return a1;
}

uint64_t *sub_20DC78BCC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)sub_20DC78C70(a1, &v13, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v8 = v5;
    sub_20DC78D50((uint64_t)&v12, a1, *a3);
    uint64_t v9 = v13;
    uint64_t v6 = v12;
    *uint64_t v12 = 0;
    v6[1] = 0;
    v6[2] = v9;
    *unint64_t v8 = v6;
    uint64_t v10 = **(void **)a1;
    uint64_t v11 = v6;
    if (v10)
    {
      *(void *)a1 = v10;
      uint64_t v11 = *v8;
    }
    sub_20DC5007C(*(uint64_t **)(a1 + 8), v11);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

void *sub_20DC78C70(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        BOOL v7 = v4;
        uint64_t v9 = v4 + 4;
        unint64_t v8 = (const void *)v4[4];
        char v10 = *((unsigned char *)v9 + 23);
        int v11 = v10;
        if (v10 >= 0) {
          unint64_t v8 = v9;
        }
        uint64_t v12 = v10 & 0x7F;
        if (v11 < 0) {
          uint64_t v12 = v9[1];
        }
        long long v18 = v8;
        uint64_t v19 = v12;
        if ((sub_20DC50018((const void **)a3, (uint64_t)&v18) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_17;
        }
      }
      char v13 = *(unsigned char *)(a3 + 23);
      BOOL v14 = v13 < 0;
      unsigned int v15 = *(const void **)a3;
      if (v13 >= 0) {
        unsigned int v15 = (const void *)a3;
      }
      uint64_t v16 = v13 & 0x7F;
      if (v14) {
        uint64_t v16 = *(void *)(a3 + 8);
      }
      long long v18 = v15;
      uint64_t v19 = v16;
      if ((sub_20DC50018((const void **)v9, (uint64_t)&v18) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    BOOL v7 = (void *)(a1 + 8);
  }
LABEL_17:
  *a2 = v7;
  return v5;
}

_OWORD *sub_20DC78D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  uint64_t result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_20DC55634((uint64_t)result, *(const void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *uint64_t result = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_20DC78DC4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a2 - *a1) >> 3);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v12 > 0x38E38E38E38E38ELL) {
      abort();
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v7) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1C71C71C71C71C7) {
      unint64_t v14 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v14 = v12;
    }
    unint64_t v23 = a1 + 2;
    if (v14)
    {
      if (v14 > 0x38E38E38E38E38ELL) {
        sub_20DC4F504();
      }
      unsigned int v15 = (char *)operator new(72 * v14);
    }
    else
    {
      unsigned int v15 = 0;
    }
    uint64_t v19 = v15;
    uint64_t v20 = &v15[72 * v8];
    uint64_t v21 = v20;
    char v22 = &v15[72 * v14];
    sub_20DC79028((uint64_t *)&v19, a3);
    sub_20DC79200(a1, &v19, a2);
    sub_20DC79304((uint64_t)&v19);
  }
  else if (a2 == v6)
  {
    long long v10 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v10;
    long long v11 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)(a2 + 32) = v11;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
    *(void *)(v7 + 72 * v8 + 64) = *(void *)(a3 + 64);
    a1[1] = a2 + 72;
  }
  else
  {
    sub_20DC78FB4((uint64_t)a1, a2, v6, a2 + 72);
    long long v16 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 10) = *(_OWORD *)(a3 + 10);
    *(_OWORD *)a2 = v16;
    unint64_t v17 = (void **)(a2 + 32);
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*v17);
    }
    long long v18 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)unint64_t v17 = v18;
    *(unsigned char *)(a3 + 55) = 0;
    *(unsigned char *)(a3 + 32) = 0;
    *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
    *(void *)(v7 + 72 * v8 + 64) = *(void *)(a3 + 64);
  }
}

double sub_20DC78FB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v10;
      long long v11 = *(_OWORD *)(v9 + 32);
      *(void *)(v8 + 48) = *(void *)(v9 + 48);
      *(_OWORD *)(v8 + 32) = v11;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 32) = 0;
      *(_WORD *)(v8 + 56) = *(_WORD *)(v9 + 56);
      *(void *)(v8 + 64) = *(void *)(v9 + 64);
      v8 += 72;
      v9 += 72;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  *(void *)&double result = sub_20DC58F0C(a2, v7, v6).n128_u64[0];
  return result;
}

__n128 sub_20DC79028(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v8 = *a1;
    unint64_t v7 = a1[1];
    if (v7 <= *a1)
    {
      unint64_t v12 = 0x1C71C71C71C71C72 * ((uint64_t)(v4 - v8) >> 3);
      if (v4 == v8) {
        unint64_t v12 = 1;
      }
      uint64_t v25 = a1[4];
      if (v12 >= 0x38E38E38E38E38FLL) {
        sub_20DC4F504();
      }
      unint64_t v13 = v12 >> 2;
      uint64_t v14 = 9 * v12;
      unsigned int v15 = (char *)operator new(72 * v12);
      long long v16 = &v15[72 * v13];
      if (v4 == v7)
      {
        int64x2_t v17 = vdupq_n_s64(v4);
        long long v18 = &v15[72 * v13];
      }
      else
      {
        long long v18 = &v16[v4 - v7];
        uint64_t v19 = &v15[72 * v13];
        do
        {
          long long v20 = *(_OWORD *)(v7 + 16);
          *(_OWORD *)uint64_t v19 = *(_OWORD *)v7;
          *((_OWORD *)v19 + 1) = v20;
          long long v21 = *(_OWORD *)(v7 + 32);
          *((void *)v19 + 6) = *(void *)(v7 + 48);
          *((_OWORD *)v19 + 2) = v21;
          *(void *)(v7 + 40) = 0;
          *(void *)(v7 + 48) = 0;
          *(void *)(v7 + 32) = 0;
          *((_WORD *)v19 + 28) = *(_WORD *)(v7 + 56);
          *((void *)v19 + 8) = *(void *)(v7 + 64);
          v19 += 72;
          v7 += 72;
        }
        while (v19 != v18);
        uint64_t v8 = *a1;
        int64x2_t v17 = *(int64x2_t *)(a1 + 1);
        unint64_t v4 = a1[3];
      }
      uint64_t v22 = v8;
      *a1 = (uint64_t)v15;
      a1[1] = (uint64_t)v16;
      int64x2_t v23 = v17;
      a1[2] = (uint64_t)v18;
      a1[3] = (uint64_t)&v15[8 * v14];
      unint64_t v24 = v4;
      sub_20DC79304((uint64_t)&v22);
      unint64_t v4 = a1[2];
    }
    else
    {
      int64_t v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = -9 * (v10 >> 1);
      unint64_t v4 = sub_20DC58FC0((long long *)a1[1], (long long *)v4, v7 - 72 * (v10 >> 1));
      a1[1] += 8 * v11;
      a1[2] = v4;
    }
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  __n128 result = *(__n128 *)(a2 + 32);
  *(void *)(v4 + 48) = *(void *)(a2 + 48);
  *(__n128 *)(v4 + 32) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(_WORD *)(v4 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(v4 + 64) = *(void *)(a2 + 64);
  a1[2] += 72;
  return result;
}

uint64_t sub_20DC79200(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a2[1];
    do
    {
      uint64_t v6 = v8 - 72;
      long long v9 = *(_OWORD *)(v7 - 72);
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(v7 - 56);
      *(_OWORD *)(v8 - 72) = v9;
      long long v10 = *(_OWORD *)(v7 - 40);
      *(void *)(v8 - 24) = *(void *)(v7 - 24);
      *(_OWORD *)(v8 - 40) = v10;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 40) = 0;
      uint64_t v11 = *(void *)(v7 - 8);
      *(_WORD *)(v8 - 16) = *(_WORD *)(v7 - 16);
      *(void *)(v8 - 8) = v11;
      v7 -= 72;
      v8 -= 72;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v12 = a1[1];
  uint64_t v13 = a2[2];
  if (v12 != a3)
  {
    do
    {
      long long v14 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a3;
      *(_OWORD *)(v13 + 16) = v14;
      long long v15 = *(_OWORD *)(a3 + 32);
      *(void *)(v13 + 48) = *(void *)(a3 + 48);
      *(_OWORD *)(v13 + 32) = v15;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 32) = 0;
      *(_WORD *)(v13 + 56) = *(_WORD *)(a3 + 56);
      *(void *)(v13 + 64) = *(void *)(a3 + 64);
      v13 += 72;
      a3 += 72;
    }
    while (a3 != v12);
    uint64_t v6 = a2[1];
  }
  a2[2] = v13;
  uint64_t v16 = *a1;
  *a1 = v6;
  a2[1] = v16;
  uint64_t v17 = a1[1];
  a1[1] = a2[2];
  a2[2] = v17;
  uint64_t v18 = a1[2];
  a1[2] = a2[3];
  a2[3] = v18;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20DC79304(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 72;
      *(void *)(a1 + 16) = v2 - 72;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20DC79368(flatbuffers::ClassicLocale *a1, char *a2)
{
  uint64_t v7 = a2;
  uint64_t v4 = (_xlocale *)flatbuffers::ClassicLocale::Get(a1);
  float v5 = strtof_l(a2, &v7, v4);
  *(_WORD *)a1 = sub_20DC793E8(v5);
  if (v7 != a2 && !*v7) {
    return 1;
  }
  uint64_t result = 0;
  *(_WORD *)a1 = 0;
  return result;
}

uint64_t sub_20DC793E8(float a1)
{
  unsigned int v1 = LODWORD(a1) & 0x7FFFFFFF;
  if ((LODWORD(a1) & 0x7FFFFFFFu) - 947912704 >= (LODWORD(a1) & 0x7FFFFFFFu) - 1199570944)
  {
    if (v1 < 0x7F800001)
    {
      unsigned int v6 = v1 >> 23;
      unsigned int v7 = HIBYTE(v1);
      unsigned int v8 = LODWORD(a1) & 0x7FFFFF | 0x800000;
      BOOL v9 = v8 << ((v1 >> 23) - 81) != 0;
      unsigned int v10 = v8 >> (113 - (v1 >> 23));
      unsigned int v11 = v10 >> 13;
      unsigned int v12 = v10 & 0x1FFF | v9;
      int v4 = ((v10 >> 13) & 1) + (v10 >> 13);
      if (v12 != 4096) {
        LOWORD(v4) = v11;
      }
      if (v12 > 0x1000) {
        LOWORD(v4) = v11 + 1;
      }
      if (v7 < 0x2D) {
        LOWORD(v4) = 0;
      }
      if (v6 > 0x8E) {
        LOWORD(v4) = 31744;
      }
    }
    else
    {
      int v4 = (LODWORD(a1) >> 13) & 0x1FF | 0x7E00;
    }
  }
  else
  {
    __int16 v2 = LODWORD(a1) >> 13;
    __int16 v3 = v2 + 0x4000;
    if ((LOWORD(a1) & 0x1FFF) == 0x1000) {
      __int16 v3 = ((LODWORD(a1) >> 13) & 1) + v2 + 0x4000;
    }
    LOWORD(v4) = v2 + 16385;
    if ((LOWORD(a1) & 0x1FFFu) <= 0x1000) {
      LOWORD(v4) = v3;
    }
  }
  return (unsigned __int16)(v4 | (LODWORD(a1) >> 31 << 15));
}

uint64_t sub_20DC794C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20DC7952C(uint64_t a1, int a2, unint64_t a3, _OWORD *a4)
{
  unsigned int v6 = (uint64_t **)sub_20DC795D8(a1, &v13, a2, a3);
  if (*v6) {
    return 0;
  }
  unsigned int v8 = v6;
  BOOL v9 = operator new(0x30uLL);
  void v9[2] = *a4;
  uint64_t v10 = v13;
  *(void *)BOOL v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v10;
  *unsigned int v8 = (uint64_t *)v9;
  uint64_t v11 = **(void **)a1;
  if (v11)
  {
    *(void *)a1 = v11;
    unsigned int v12 = *v8;
  }
  else
  {
    unsigned int v12 = (uint64_t *)v9;
  }
  sub_20DC5007C(*(uint64_t **)(a1 + 8), v12);
  ++*(void *)(a1 + 16);
  return 1;
}

void *sub_20DC795D8(uint64_t a1, void *a2, int a3, unint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v5 = v6;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (void *)v5;
        int v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a3) {
          break;
        }
LABEL_3:
        uint64_t v5 = *v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_12;
        }
      }
      if (v8 >= a3)
      {
        unint64_t v9 = v7[5];
        if (v9 > a4) {
          goto LABEL_3;
        }
        if (v9 >= a4) {
          goto LABEL_12;
        }
      }
      uint64_t result = v7 + 1;
      uint64_t v5 = v7[1];
      if (!v5) {
        goto LABEL_12;
      }
    }
  }
  unsigned int v7 = result;
LABEL_12:
  *a2 = v7;
  return result;
}

uint64_t sub_20DC79634(uint64_t result, char *a2, uint64_t (**a3)(void), uint64_t a4, char a5)
{
  uint64_t v11 = (char *)result;
  while (2)
  {
    unsigned int v12 = a2 - 8;
LABEL_3:
    for (uint64_t i = 1 - a4; ; ++i)
    {
      uint64_t v14 = a2 - v11;
      unint64_t v15 = (a2 - v11) >> 3;
      if (!(!v6 & v5))
      {
        switch(v15)
        {
          case 0uLL:
          case 1uLL:
            return result;
          case 2uLL:
            uint64_t result = ((uint64_t (*)(void, void))*a3)(*(void *)v12, *(void *)v11);
            if (result)
            {
              uint64_t v23 = *(void *)v11;
              *(void *)uint64_t v11 = *(void *)v12;
              *(void *)unsigned int v12 = v23;
            }
            break;
          case 3uLL:
            uint64_t result = sub_20DC5AA2C(v11, (void *)v11 + 1, (void *)a2 - 1, a3);
            break;
          case 4uLL:
            uint64_t result = sub_20DC5AF04(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)a2 - 1, a3);
            break;
          case 5uLL:
            uint64_t result = sub_20DC5AFB8(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, (void *)a2 - 1, a3);
            break;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v14 <= 191)
      {
        unint64_t v24 = v11 + 8;
        BOOL v26 = v11 == a2 || v24 == a2;
        if (a5)
        {
          if (!v26)
          {
            uint64_t v27 = 0;
            long long v28 = v11;
            do
            {
              uint64_t v30 = *(void *)v28;
              uint64_t v29 = *((void *)v28 + 1);
              long long v28 = v24;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v30);
              if (result)
              {
                uint64_t v31 = *(void *)v28;
                uint64_t v32 = v27;
                while (1)
                {
                  *(void *)&v11[v32 + 8] = *(void *)&v11[v32];
                  if (!v32) {
                    break;
                  }
                  uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v31, *(void *)&v11[v32 - 8]);
                  v32 -= 8;
                  if ((result & 1) == 0)
                  {
                    std::string::size_type v33 = &v11[v32 + 8];
                    goto LABEL_46;
                  }
                }
                std::string::size_type v33 = v11;
LABEL_46:
                *(void *)std::string::size_type v33 = v31;
              }
              unint64_t v24 = v28 + 8;
              v27 += 8;
            }
            while (v28 + 8 != a2);
          }
        }
        else if (!v26)
        {
          do
          {
            uint64_t v35 = *(void *)v11;
            uint64_t v34 = *((void *)v11 + 1);
            uint64_t v11 = v24;
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v34, v35);
            if (result)
            {
              uint64_t v36 = *(void *)v11;
              std::string::size_type v37 = v11;
              do
              {
                std::string::size_type v38 = v37;
                uint64_t v39 = *((void *)v37 - 1);
                v37 -= 8;
                *(void *)std::string::size_type v38 = v39;
                uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v36, *((void *)v38 - 2));
              }
              while ((result & 1) != 0);
              *(void *)std::string::size_type v37 = v36;
            }
            unint64_t v24 = v11 + 8;
          }
          while (v11 + 8 != a2);
        }
        return result;
      }
      if (i == 1)
      {
        if (v11 != a2)
        {
          return sub_20DC5B094((uint64_t)v11, a2, a2, (unsigned int (**)(void, void))a3);
        }
        return result;
      }
      unint64_t v16 = v15 >> 1;
      uint64_t v17 = &v11[8 * (v15 >> 1)];
      if ((unint64_t)v14 >= 0x401)
      {
        sub_20DC5AA2C(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, a3);
        sub_20DC5AA2C((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, a3);
        sub_20DC5AA2C((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, a3);
        sub_20DC5AA2C((void *)v17 - 1, v17, &v11[8 * v16 + 8], a3);
        uint64_t v18 = *(void *)v11;
        *(void *)uint64_t v11 = *(void *)v17;
        *(void *)uint64_t v17 = v18;
      }
      else
      {
        sub_20DC5AA2C(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, a3);
      }
      if ((a5 & 1) == 0
        && (((uint64_t (*)(void, void))*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_20DC5AB10((uint64_t *)v11, (uint64_t *)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
        uint64_t v22 = (uint64_t *)result;
        goto LABEL_16;
      }
      uint64_t v19 = sub_20DC5AC20((uint64_t *)v11, (uint64_t *)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
      if ((v20 & 1) == 0) {
        goto LABEL_62;
      }
      BOOL v21 = sub_20DC5AD3C(v11, v19, a3);
      uint64_t v22 = v19 + 1;
      uint64_t result = sub_20DC5AD3C(v19 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v21)
      {
LABEL_62:
        a4 = -i;
        uint64_t result = sub_20DC79634(v11, v19, a3, -i, a5 & 1);
        a5 = 0;
        uint64_t v11 = (char *)(v19 + 1);
        goto LABEL_3;
      }
LABEL_16:
      uint64_t v11 = (char *)v22;
    }
    a4 = -i;
    a2 = (char *)v19;
    if (!v21) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_20DC79A54(uint64_t a1, const void **a2, uint64_t *a3)
{
  char v5 = (uint64_t **)sub_20DC5B668(a1, &v13, a2);
  char v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = v5;
    sub_20DC79AF8((uint64_t)&v12, a1, *a3);
    uint64_t v8 = v13;
    char v6 = v12;
    *unsigned int v12 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *unsigned int v7 = v6;
    uint64_t v9 = **(void **)a1;
    uint64_t v10 = v6;
    if (v9)
    {
      *(void *)a1 = v9;
      uint64_t v10 = *v7;
    }
    sub_20DC5007C(*(uint64_t **)(a1 + 8), v10);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

_OWORD *sub_20DC79AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  char v6 = (char *)operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  uint64_t result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_20DC55634((uint64_t)result, *(const void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *uint64_t result = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

_OWORD *sub_20DC79B6C(uint64_t a1, char *__src, uint64_t a3)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v6 = (unint64_t)&v5[-*(void *)a1];
  unint64_t v13 = v6;
  sub_20DC52ACC(a1, v5, __src, &__src[a3 + 1], a3 + 1);
  if (*(unsigned char *)(a1 + 52))
  {
    uint64_t v9 = sub_20DC79C64(a1 + 64, v6);
    if ((void *)(a1 + 72) == v9)
    {
      sub_20DC79D00(a1 + 64, v6, (uint64_t *)&v13);
    }
    else
    {
      uint64_t v10 = v9;
      unint64_t v11 = *(void *)(a1 + 8) - *(void *)a1;
      if (v6 > v11)
      {
        sub_20DC77E78((unint64_t *)a1, v6 - v11);
      }
      else if (v6 < v11)
      {
        *(void *)(a1 + 8) = *(void *)a1 + v6;
      }
      unint64_t v6 = v10[4];
    }
  }
  *(void *)&long long v12 = v6;
  *((void *)&v12 + 1) = 4;
  unsigned int v7 = *(_OWORD **)(a1 + 32);
  if ((unint64_t)v7 >= *(void *)(a1 + 40))
  {
    uint64_t result = sub_20DC52CB4((void **)(a1 + 24), &v12);
  }
  else
  {
    *unsigned int v7 = v12;
    uint64_t result = v7 + 1;
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void *sub_20DC79C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = *v4 == v4[1] ? 0 : *v4;
  unint64_t v6 = (const char *)(v5 + a2);
  unsigned int v7 = (void *)(a1 + 8);
  do
  {
    int v8 = strcmp((const char *)(v5 + v3[4]), v6);
    uint64_t v9 = v3 + 1;
    if (v8 >= 0)
    {
      uint64_t v9 = v3;
      unsigned int v7 = v3;
    }
    uint64_t v3 = (void *)*v9;
  }
  while (*v9);
  if (v7 == v2 || strcmp(v6, (const char *)(v5 + v7[4])) < 0) {
    return v2;
  }
  return v7;
}

uint64_t **sub_20DC79D00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = (uint64_t **)sub_20DC79DA0(a1, &v11, a2);
  if (!*result)
  {
    unint64_t v6 = result;
    unsigned int v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a3;
    uint64_t v8 = v11;
    *unsigned int v7 = 0;
    v7[1] = 0;
    void v7[2] = v8;
    *unint64_t v6 = v7;
    uint64_t v9 = **(void **)a1;
    if (v9)
    {
      *(void *)a1 = v9;
      uint64_t v10 = *v6;
    }
    else
    {
      uint64_t v10 = v7;
    }
    uint64_t result = (uint64_t **)sub_20DC5007C(*(uint64_t **)(a1 + 8), v10);
    ++*(void *)(a1 + 16);
  }
  return result;
}

void *sub_20DC79DA0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = *(uint64_t **)(a1 + 24);
    if (*v6 == v6[1]) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *v6;
    }
    uint64_t v8 = (const char *)(v7 + a3);
    do
    {
      while (1)
      {
        uint64_t v9 = v4;
        uint64_t v10 = (const char *)(v7 + v4[4]);
        if ((strcmp(v8, v10) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v9;
        uint64_t v5 = v9;
        if (!*v9) {
          goto LABEL_13;
        }
      }
      if ((strcmp(v10, v8) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v9 + 1;
      uint64_t v4 = (void *)v9[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v9 = (void *)(a1 + 8);
  }
LABEL_13:
  *a2 = v9;
  return v5;
}

void sub_20DC79E48(uint64_t **a1, uint64_t a2)
{
  sub_20DC79E90(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }

  operator delete((void *)a2);
}

uint64_t *sub_20DC79E90(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_20DC5B788(v6, a2);
}

_OWORD *sub_20DC79EE4(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  BOOL v5 = (void **)sub_20DC78C70(a1, &v14, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v8 = v5;
    unint64_t v6 = operator new(0x50uLL);
    uint64_t v9 = *a3;
    uint64_t v10 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v10;
    void *v9 = 0;
    v9[1] = 0;
    void v9[2] = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 7) = 0;
    uint64_t v11 = v14;
    *(void *)unint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v11;
    *uint64_t v8 = v6;
    uint64_t v12 = **(void **)a1;
    unint64_t v13 = (uint64_t *)v6;
    if (v12)
    {
      *(void *)a1 = v12;
      unint64_t v13 = (uint64_t *)*v8;
    }
    sub_20DC5007C(*(uint64_t **)(a1 + 8), v13);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

_OWORD *sub_20DC79FA4(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  BOOL v5 = (void **)sub_20DC78C70(a1, &v14, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v8 = v5;
    unint64_t v6 = operator new(0x50uLL);
    uint64_t v9 = *a3;
    uint64_t v10 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    void *v9 = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 7) = v6 + 4;
    uint64_t v11 = v14;
    *(void *)unint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v11;
    *uint64_t v8 = v6;
    uint64_t v12 = **(void **)a1;
    unint64_t v13 = (uint64_t *)v6;
    if (v12)
    {
      *(void *)a1 = v12;
      unint64_t v13 = (uint64_t *)*v8;
    }
    sub_20DC5007C(*(uint64_t **)(a1 + 8), v13);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

uint64_t sub_20DC7A06C(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_20DC5B3DC(a1, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20DC55634(a1[1], *(const void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    uint64_t result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

uint64_t *sub_20DC7A0D8(uint64_t a1, const void **a2, uint64_t a3)
{
  BOOL v5 = (uint64_t **)sub_20DC7A180(a1, &v11, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_20DC5BB80(a1, a3, (uint64_t)&v10);
    uint64_t v7 = v11;
    uint64_t v8 = v10;
    *uint64_t v10 = 0;
    v8[1] = 0;
    unsigned char v8[2] = v7;
    *BOOL v5 = v8;
    uint64_t v9 = **(void **)a1;
    if (v9)
    {
      *(void *)a1 = v9;
      uint64_t v8 = *v5;
    }
    sub_20DC5007C(*(uint64_t **)(a1 + 8), v8);
    ++*(void *)(a1 + 16);
    return v10;
  }
  return result;
}

void *sub_20DC7A180(uint64_t a1, void *a2, const void **a3)
{
  BOOL v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  long long v4 = v5;
  if (v5)
  {
    uint64_t v18 = a2;
    while (1)
    {
      uint64_t v17 = result;
      char v20 = v4;
      uint64_t v9 = (const void *)v4[4];
      uint64_t v8 = v4 + 4;
      uint64_t v7 = v9;
      char v10 = *((unsigned char *)v8 + 23);
      int v11 = v10;
      if (v10 >= 0) {
        uint64_t v7 = v8;
      }
      uint64_t v12 = (const void *)(v10 & 0x7F);
      if (v11 < 0) {
        uint64_t v12 = (const void *)v8[1];
      }
      BOOL v21 = v7;
      uint64_t v22 = v12;
      if ((sub_20DC50018(a3, (uint64_t)&v21) & 0x80000000) != 0)
      {
        unint64_t v6 = v20;
        long long v4 = (void *)*v20;
        uint64_t result = v20;
      }
      else
      {
        unint64_t v13 = a3;
        char v14 = *((unsigned char *)a3 + 23);
        BOOL v15 = v14 < 0;
        if (v14 < 0) {
          unint64_t v13 = *a3;
        }
        unint64_t v16 = (const void *)(v14 & 0x7F);
        if (v15) {
          unint64_t v16 = a3[1];
        }
        BOOL v21 = v13;
        uint64_t v22 = v16;
        if ((sub_20DC50018((const void **)v8, (uint64_t)&v21) & 0x80000000) == 0)
        {
          uint64_t result = v17;
          a2 = v18;
          unint64_t v6 = v20;
          goto LABEL_3;
        }
        unint64_t v6 = v20;
        uint64_t result = v20 + 1;
        long long v4 = (void *)v20[1];
      }
      a2 = v18;
      if (!v4) {
        goto LABEL_3;
      }
    }
  }
  unint64_t v6 = result;
LABEL_3:
  *a2 = v6;
  return result;
}

void sub_20DC7A25C(uint64_t **a1, void *a2)
{
  unint64_t v3 = (uint64_t *)sub_20DC7572C((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    long long v4 = v3;
    sub_20DC79E90(a1, v3);
    sub_20DC7549C((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

uint64_t *sub_20DC7A2C4(uint64_t a1, const void **a2, uint64_t *a3)
{
  BOOL v5 = (uint64_t **)sub_20DC4FEF8(a1, &v13, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v8 = v5;
    sub_20DC7A368((uint64_t)&v12, a1, *a3);
    uint64_t v9 = v13;
    unint64_t v6 = v12;
    *uint64_t v12 = 0;
    v6[1] = 0;
    v6[2] = v9;
    *uint64_t v8 = v6;
    uint64_t v10 = **(void **)a1;
    int v11 = v6;
    if (v10)
    {
      *(void *)a1 = v10;
      int v11 = *v8;
    }
    sub_20DC5007C(*(uint64_t **)(a1 + 8), v11);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

_OWORD *sub_20DC7A368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  unint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  uint64_t result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_20DC55634((uint64_t)result, *(const void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *uint64_t result = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  v6[56] = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_20DC7A3DC(uint64_t a1, uint64_t a2, std::string *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  switch(v6)
  {
    case 0u:
      uint64_t v7 = "null";
      goto LABEL_3;
    case 1u:
    case 6u:
      sub_20DC7AFA4(a1);
      sub_20DC3C654();
      goto LABEL_47;
    case 2u:
    case 7u:
      sub_20DC7B270(a1);
      sub_20DC444C8();
      goto LABEL_47;
    case 3u:
    case 8u:
      double v21 = sub_20DC7B538(a1);
      sub_20DC4C328(12, &__p, v21);
LABEL_47:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
    case 4u:
      uint64_t v9 = *(unsigned int **)a1;
      unsigned int v10 = *(unsigned __int8 *)(a1 + 8);
      if (v10 > 3)
      {
        if (v10 > 7) {
          uint64_t v11 = *(void *)v9;
        }
        else {
          uint64_t v11 = *v9;
        }
      }
      else if (v10 > 1)
      {
        uint64_t v11 = *(unsigned __int16 *)v9;
      }
      else
      {
        uint64_t v11 = *(unsigned __int8 *)v9;
      }
      uint64_t v17 = (char *)v9 - v11;
      if (!a2)
      {
        uint64_t v8 = a3;
        uint64_t v7 = (char *)v9 - v11;
        goto LABEL_4;
      }
      size_t v18 = strlen((const char *)v9 - v11);
      uint64_t v19 = (uint64_t)v17;
LABEL_32:
      sub_20DC610D8(v19, v18, a3, 1, 0);
      return;
    case 5u:
      uint64_t v12 = *(unsigned int **)a1;
      unsigned int v13 = *(unsigned __int8 *)(a1 + 8);
      if (v13 > 3)
      {
        if (v13 > 7) {
          uint64_t v14 = *(void *)v12;
        }
        else {
          uint64_t v14 = *v12;
        }
      }
      else if (v13 > 1)
      {
        uint64_t v14 = *(unsigned __int16 *)v12;
      }
      else
      {
        uint64_t v14 = *(unsigned __int8 *)v12;
      }
      uint64_t v19 = (uint64_t)v12 - v14;
      uint64_t v20 = *(unsigned __int8 *)(a1 + 9);
      if (v20 > 3)
      {
        if (v20 > 7) {
          size_t v18 = *(void *)(v19 - v20);
        }
        else {
          size_t v18 = *(unsigned int *)(v19 - v20);
        }
      }
      else if (v20 > 1)
      {
        size_t v18 = *(unsigned __int16 *)(v19 - v20);
      }
      else
      {
        size_t v18 = *(unsigned __int8 *)(v19 - v20);
      }
      goto LABEL_32;
    case 9u:
      std::string::append(a3, "{ ");
      if (*(_DWORD *)(a1 + 12) != 9)
      {
        std::string::size_type v33 = (char *)&unk_20DC7CF31;
        LODWORD(v34) = 1;
        goto LABEL_68;
      }
      unint64_t v24 = *(unsigned int **)a1;
      unsigned int v25 = *(unsigned __int8 *)(a1 + 8);
      if (v25 > 3)
      {
        if (v25 > 7) {
          uint64_t v26 = *(void *)v24;
        }
        else {
          uint64_t v26 = *v24;
        }
      }
      else if (v25 > 1)
      {
        uint64_t v26 = *(unsigned __int16 *)v24;
      }
      else
      {
        uint64_t v26 = *(unsigned __int8 *)v24;
      }
      std::string::size_type v33 = (char *)v24 - v26;
      unint64_t v34 = *(unsigned __int8 *)(a1 + 9);
      if (v34 > 3)
      {
        sub_20DC7B874((uint64_t)&__p, (uint64_t)v24 - v26, v34);
        if (v34 >= 8) {
          std::string::size_type v35 = *(void *)&v33[-v34];
        }
        else {
          std::string::size_type v35 = *(unsigned int *)&v33[-v34];
        }
        goto LABEL_69;
      }
      if (v34 < 2)
      {
LABEL_68:
        sub_20DC7B874((uint64_t)&__p, (uint64_t)v33, v34);
        unint64_t v34 = v34;
        std::string::size_type v35 = v33[-v34];
        goto LABEL_69;
      }
      sub_20DC7B874((uint64_t)&__p, (uint64_t)v24 - v26, v34);
      std::string::size_type v35 = *(unsigned __int16 *)&v33[-v34];
LABEL_69:
      std::string::size_type v36 = __p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v37 = 0;
        std::string::size_type v38 = __p.__r_.__value_.__r.__words[0];
        uint64_t v39 = __p.__r_.__value_.__s.__data_[8];
        std::string::size_type v45 = &v33[v35 * v34];
        unint64_t v46 = __p.__r_.__value_.__s.__data_[8] | ((unint64_t)v50 << 32) | 0x100;
        std::string::size_type v40 = __p.__r_.__value_.__r.__words[2] - 1;
        do
        {
          std::string::size_type v47 = v38;
          unint64_t v48 = v46;
          sub_20DC7A3DC(&v47, a2, a3);
          std::string::append(a3, ": ");
          if (v35 <= v37)
          {
            std::string::size_type v42 = 0;
            unint64_t v41 = 257;
          }
          else
          {
            unint64_t v41 = ((unint64_t)(v45[v37] >> 2) << 32) | ((unint64_t)(1 << (v45[v37] & 3)) << 8) | v34;
            std::string::size_type v42 = v33;
          }
          std::string::size_type v47 = (std::string::size_type)v42;
          unint64_t v48 = v41;
          sub_20DC7A3DC(&v47, a2, a3);
          if (v37 < v40) {
            std::string::append(a3, ", ");
          }
          ++v37;
          v33 += v34;
          v38 += v39;
        }
        while (v36 != v37);
      }
      std::string::append(a3, " }");
      return;
    case 0x1Au:
      if (sub_20DC7B808(a1)) {
        uint64_t v7 = "true";
      }
      else {
        uint64_t v7 = "false";
      }
      goto LABEL_3;
    default:
      if (v6 - 9 <= 1)
      {
        sub_20DC7BA20((uint64_t)&__p, (unsigned int **)a1);
        sub_20DC7B928(a3, (uint64_t)&__p, a2);
      }
      else if (v6 > 0x24 || ((1 << v6) & 0x100000F800) == 0)
      {
        char v16 = v6 - 16;
        if (v6 - 16 <= 8)
        {
          unsigned __int8 v27 = v6 - 16;
          unsigned int v28 = (v6 - 16) / 3u + 2;
          int v29 = (v16 - 3 * (v27 / 3u) + 1);
          uint64_t v30 = *(unsigned int **)a1;
          unsigned int v31 = *(unsigned __int8 *)(a1 + 8);
          if (v31 > 3)
          {
            if (v31 > 7) {
              uint64_t v32 = *(void *)v30;
            }
            else {
              uint64_t v32 = *v30;
            }
          }
          else if (v31 > 1)
          {
            uint64_t v32 = *(unsigned __int16 *)v30;
          }
          else
          {
            uint64_t v32 = *(unsigned __int8 *)v30;
          }
          std::string::size_type v43 = (std::string::size_type)v30 - v32;
          std::string::value_type v44 = *(unsigned char *)(a1 + 9);
          __p.__r_.__value_.__r.__words[0] = v43;
          __p.__r_.__value_.__s.__data_[8] = v44;
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = v29;
          __p.__r_.__value_.__s.__data_[16] = v28;
          sub_20DC7BC8C(a3, (uint64_t)&__p, a2);
        }
        else if (v6 == 25)
        {
          sub_20DC7BD6C((uint64_t)&__p, (unsigned int **)a1);
          sub_20DC610D8((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2], a3, 1, 0);
        }
        else
        {
          uint64_t v7 = "(?)";
LABEL_3:
          uint64_t v8 = a3;
LABEL_4:
          std::string::append(v8, v7);
        }
      }
      else
      {
        sub_20DC7BBB8((uint64_t)&__p, (unsigned int **)a1);
        sub_20DC7BAD8(a3, (uint64_t)&__p, a2);
      }
      return;
  }
}

void sub_20DC7A958(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    uint64_t v8 = (__int16 *)((char *)a3 + v7);
LABEL_3:
    __int16 v9 = *v8;
    goto LABEL_4;
  }
  if (*(char *)(a2 + 207) >= 0) {
    unsigned int v10 = (char *)(a2 + 184);
  }
  else {
    unsigned int v10 = *(char **)(a2 + 184);
  }
  sub_20DC79368((flatbuffers::ClassicLocale *)&v13, v10);
  __int16 v9 = v13;
  uint64_t v11 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v11 > v7)
  {
    uint64_t v12 = *(unsigned __int16 *)((char *)v11 + v7);
    if (v12)
    {
      uint64_t v8 = (__int16 *)((char *)a3 + v12);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_20DC5E398(a1, v9, *(_DWORD *)(a2 + 152), *(void *)(a2 + 168));
}

void sub_20DC7A9F8(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    uint64_t v8 = (unsigned __int16 *)((char *)a3 + v7);
LABEL_3:
    unsigned __int16 v9 = *v8;
    goto LABEL_4;
  }
  if (*(char *)(a2 + 207) >= 0) {
    unsigned int v10 = (char *)(a2 + 184);
  }
  else {
    unsigned int v10 = *(char **)(a2 + 184);
  }
  unint64_t v14 = 0;
  BOOL v11 = sub_20DC50648((flatbuffers::ClassicLocale *)&v14, v10, 0, 0);
  unsigned __int16 v9 = v14;
  if (v14 >= 0xFFFF) {
    unsigned __int16 v9 = -1;
  }
  if (!v11) {
    unsigned __int16 v9 = 0;
  }
  uint64_t v12 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v12 > v7)
  {
    uint64_t v13 = *(unsigned __int16 *)((char *)v12 + v7);
    if (v13)
    {
      uint64_t v8 = (unsigned __int16 *)((char *)a3 + v13);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_20DC5EFE0(a1, v9, *(_DWORD *)(a2 + 152), *(void *)(a2 + 168));
}

void sub_20DC7AAB4(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    uint64_t v8 = (__int16 *)((char *)a3 + v7);
LABEL_3:
    __int16 v9 = *v8;
    goto LABEL_4;
  }
  if (*(char *)(a2 + 207) >= 0) {
    unsigned int v10 = (char *)(a2 + 184);
  }
  else {
    unsigned int v10 = *(char **)(a2 + 184);
  }
  uint64_t v15 = 0;
  BOOL v11 = sub_20DC50648((flatbuffers::ClassicLocale *)&v15, v10, 0, 0);
  __int16 v9 = 0;
  if (v11)
  {
    __int16 v12 = 0x8000;
    if (v15 > -32768) {
      __int16 v12 = v15;
    }
    if (v15 < 0x8000) {
      __int16 v9 = v12;
    }
    else {
      __int16 v9 = 0x7FFF;
    }
  }
  uint64_t v13 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v13 > v7)
  {
    uint64_t v14 = *(unsigned __int16 *)((char *)v13 + v7);
    if (v14)
    {
      uint64_t v8 = (__int16 *)((char *)a3 + v14);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_20DC5FBDC(a1, v9, *(_DWORD *)(a2 + 152), *(void *)(a2 + 168));
}

void sub_20DC7AB7C(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    uint64_t v8 = (int *)((char *)a3 + v7);
LABEL_3:
    int v9 = *v8;
    goto LABEL_4;
  }
  if (*(char *)(a2 + 207) >= 0) {
    unsigned int v10 = (char *)(a2 + 184);
  }
  else {
    unsigned int v10 = *(char **)(a2 + 184);
  }
  uint64_t v15 = 0;
  BOOL v11 = sub_20DC50648((flatbuffers::ClassicLocale *)&v15, v10, 0, 0);
  int v9 = 0;
  if (v11)
  {
    unsigned int v12 = 0x80000000;
    if (v15 > (uint64_t)0xFFFFFFFF80000000) {
      unsigned int v12 = v15;
    }
    if (v15 <= 0x7FFFFFFF) {
      int v9 = v12;
    }
    else {
      int v9 = 0x7FFFFFFF;
    }
  }
  uint64_t v13 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v13 > v7)
  {
    uint64_t v14 = *(unsigned __int16 *)((char *)v13 + v7);
    if (v14)
    {
      uint64_t v8 = (int *)((char *)a3 + v14);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_20DC5F7DC(a1, v9, *(_DWORD *)(a2 + 152), *(void *)(a2 + 168));
}

void sub_20DC7AC40(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    uint64_t v8 = (uint64_t *)((char *)a3 + v7);
LABEL_3:
    uint64_t v9 = *v8;
    goto LABEL_4;
  }
  uint64_t v13 = 0;
  if (*(char *)(a2 + 207) >= 0) {
    unsigned int v10 = (char *)(a2 + 184);
  }
  else {
    unsigned int v10 = *(char **)(a2 + 184);
  }
  sub_20DC50648((flatbuffers::ClassicLocale *)&v13, v10, 0, 1);
  uint64_t v9 = v13;
  BOOL v11 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v11 > v7)
  {
    uint64_t v12 = *(unsigned __int16 *)((char *)v11 + v7);
    if (v12)
    {
      uint64_t v8 = (uint64_t *)((char *)a3 + v12);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_20DC5FFD8(a1, v9, *(_DWORD *)(a2 + 152), *(void *)(a2 + 168));
}

void sub_20DC7ACE8(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    uint64_t v8 = (float *)((char *)a3 + v7);
LABEL_3:
    float v9 = *v8;
    goto LABEL_4;
  }
  float v13 = 0.0;
  if (*(char *)(a2 + 207) >= 0) {
    unsigned int v10 = (char *)(a2 + 184);
  }
  else {
    unsigned int v10 = *(char **)(a2 + 184);
  }
  sub_20DC510CC((flatbuffers::ClassicLocale *)&v13, v10);
  float v9 = v13;
  BOOL v11 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v11 > v7)
  {
    uint64_t v12 = *(unsigned __int16 *)((char *)v11 + v7);
    if (v12)
    {
      uint64_t v8 = (float *)((char *)a3 + v12);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_20DC603D0(a1, *(_DWORD *)(a2 + 152), *(void *)(a2 + 168), v9);
}

void sub_20DC7AD88(std::string **a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v7 = *(unsigned __int16 *)(a2 + 208);
  if (a4)
  {
    uint64_t v8 = (double *)((char *)a3 + v7);
LABEL_3:
    double v9 = *v8;
    goto LABEL_4;
  }
  double v13 = 0.0;
  if (*(char *)(a2 + 207) >= 0) {
    unsigned int v10 = (char *)(a2 + 184);
  }
  else {
    unsigned int v10 = *(char **)(a2 + 184);
  }
  sub_20DC52D9C((flatbuffers::ClassicLocale *)&v13, v10);
  double v9 = v13;
  BOOL v11 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v11 > v7)
  {
    uint64_t v12 = *(unsigned __int16 *)((char *)v11 + v7);
    if (v12)
    {
      uint64_t v8 = (double *)((char *)a3 + v12);
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_20DC607E0(a1, *(_DWORD *)(a2 + 152), *(void *)(a2 + 168), v9);
}

uint64_t sub_20DC7AE28(std::string **a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  BOOL v10 = *(_DWORD *)a4 == 15 && *(unsigned char *)(*(void *)(a4 + 8) + 200) != 0;
  int v11 = (*a1)->__r_.__value_.__r.__words[1];
  std::string::push_back(a1[1], 91);
  if (a3)
  {
    int v12 = (v11 & ~(v11 >> 31)) + a5;
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    while (1)
    {
      if (v14)
      {
        uint64_t v15 = *a1;
        if (!(*a1)[9].__r_.__value_.__s.__data_[10])
        {
          std::string::push_back(a1[1], 44);
          uint64_t v15 = *a1;
        }
        if ((v15->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
          std::string::push_back(a1[1], 10);
        }
      }
      std::string::append(a1[1], v12, 32);
      if (v10) {
        uint64_t v16 = a2 + *(void *)(*(void *)(a4 + 8) + 216) * v13;
      }
      else {
        LODWORD(v16) = 0;
      }
      if ((sub_20DC60BF0((int)a1, v16) & 1) == 0) {
        return 0;
      }
      uint64_t v13 = ++v14;
      if (v14 >= a3) {
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    if (((*a1)->__r_.__value_.__r.__words[1] & 0x80000000) == 0) {
      std::string::push_back(a1[1], 10);
    }
    std::string::append(a1[1], a5, 32);
    std::string::push_back(a1[1], 93);
    return 1;
  }
}

uint64_t sub_20DC7AFA4(uint64_t a1)
{
  uint64_t result = 0;
  int v3 = *(_DWORD *)(a1 + 12);
  switch(v3)
  {
    case 1:
      goto LABEL_2;
    case 2:
      long long v4 = *(const char **)a1;
      unsigned int v6 = *(unsigned __int8 *)(a1 + 8);
      if (v6 > 3)
      {
        if (v6 > 7) {
          return *(void *)v4;
        }
        return *(unsigned int *)v4;
      }
      else if (v6 > 1)
      {
        return *(unsigned __int16 *)v4;
      }
      else
      {
        return *(unsigned __int8 *)v4;
      }
    case 3:
      uint64_t v7 = *(float **)a1;
      unsigned int v8 = *(unsigned __int8 *)(a1 + 8);
      if (v8 <= 3)
      {
        if (v8 > 1) {
          int v9 = *(__int16 *)v7;
        }
        else {
          int v9 = *(char *)v7;
        }
        return (uint64_t)(double)v9;
      }
      if (v8 <= 7) {
        return (uint64_t)*v7;
      }
      return (uint64_t)*(double *)v7;
    case 4:
    case 9:
      return result;
    case 5:
      sub_20DC7BE24((uint64_t)v25, (const char **)a1);
      uint64_t v26 = 0;
      if (sub_20DC50648((flatbuffers::ClassicLocale *)&v26, v25[0], 10, 1)) {
        return v26;
      }
      else {
        return 0;
      }
    case 6:
      BOOL v10 = *(const char **)a1;
      unsigned int v11 = *(unsigned __int8 *)(a1 + 8);
      if (v11 > 3)
      {
        if (v11 > 7) {
          uint64_t v12 = *(void *)v10;
        }
        else {
          uint64_t v12 = *(unsigned int *)v10;
        }
      }
      else if (v11 > 1)
      {
        uint64_t v12 = *(unsigned __int16 *)v10;
      }
      else
      {
        uint64_t v12 = *(unsigned __int8 *)v10;
      }
      uint64_t v20 = -v12;
      unsigned int v21 = *(unsigned __int8 *)(a1 + 9);
      if (v21 > 3)
      {
        if (v21 > 7) {
          goto LABEL_54;
        }
        uint64_t result = *(int *)&v10[v20];
      }
      else if (v21 > 1)
      {
        uint64_t result = *(__int16 *)&v10[v20];
      }
      else
      {
        uint64_t result = v10[v20];
      }
      break;
    case 7:
      BOOL v10 = *(const char **)a1;
      unsigned int v13 = *(unsigned __int8 *)(a1 + 8);
      if (v13 > 3)
      {
        if (v13 > 7) {
          uint64_t v14 = *(void *)v10;
        }
        else {
          uint64_t v14 = *(unsigned int *)v10;
        }
      }
      else if (v13 > 1)
      {
        uint64_t v14 = *(unsigned __int16 *)v10;
      }
      else
      {
        uint64_t v14 = *(unsigned __int8 *)v10;
      }
      uint64_t v20 = -v14;
      unsigned int v22 = *(unsigned __int8 *)(a1 + 9);
      if (v22 > 3)
      {
        if (v22 > 7) {
LABEL_54:
        }
          uint64_t result = *(void *)&v10[v20];
        else {
          uint64_t result = *(unsigned int *)&v10[v20];
        }
      }
      else if (v22 > 1)
      {
        uint64_t result = *(unsigned __int16 *)&v10[v20];
      }
      else
      {
        uint64_t result = v10[v20];
      }
      break;
    case 8:
      uint64_t v15 = *(const char **)a1;
      unsigned int v16 = *(unsigned __int8 *)(a1 + 8);
      if (v16 > 3)
      {
        if (v16 > 7) {
          uint64_t v17 = *(void *)v15;
        }
        else {
          uint64_t v17 = *(unsigned int *)v15;
        }
      }
      else if (v16 > 1)
      {
        uint64_t v17 = *(unsigned __int16 *)v15;
      }
      else
      {
        uint64_t v17 = *(unsigned __int8 *)v15;
      }
      uint64_t v23 = -v17;
      unsigned int v24 = *(unsigned __int8 *)(a1 + 9);
      if (v24 > 3)
      {
        if (v24 > 7) {
          return (uint64_t)*(double *)&v15[v23];
        }
        else {
          return (uint64_t)*(float *)&v15[v23];
        }
      }
      else
      {
        if (v24 > 1) {
          int v9 = *(__int16 *)&v15[v23];
        }
        else {
          int v9 = v15[v23];
        }
        return (uint64_t)(double)v9;
      }
    case 10:
      sub_20DC7BA20((uint64_t)v25, (unsigned int **)a1);
      return (uint64_t)v25[2];
    default:
      if (v3 != 26) {
        return result;
      }
LABEL_2:
      long long v4 = *(const char **)a1;
      unsigned int v5 = *(unsigned __int8 *)(a1 + 8);
      if (v5 > 3)
      {
        if (v5 > 7) {
          return *(void *)v4;
        }
        else {
          return *(int *)v4;
        }
      }
      else if (v5 > 1)
      {
        return *(__int16 *)v4;
      }
      else
      {
        return *v4;
      }
  }
  return result;
}

unint64_t sub_20DC7B270(uint64_t a1)
{
  unint64_t result = 0;
  int v3 = *(_DWORD *)(a1 + 12);
  switch(v3)
  {
    case 1:
      long long v4 = *(const char **)a1;
      unsigned int v5 = *(unsigned __int8 *)(a1 + 8);
      if (v5 > 3)
      {
        if (v5 > 7) {
          return *(void *)v4;
        }
        return *(int *)v4;
      }
      else if (v5 > 1)
      {
        return *(__int16 *)v4;
      }
      else
      {
        return *v4;
      }
    case 2:
      goto LABEL_6;
    case 3:
      uint64_t v7 = *(float **)a1;
      unsigned int v8 = *(unsigned __int8 *)(a1 + 8);
      if (v8 <= 3)
      {
        if (v8 > 1) {
          int v9 = *(__int16 *)v7;
        }
        else {
          int v9 = *(char *)v7;
        }
        return (unint64_t)(double)v9;
      }
      if (v8 <= 7) {
        return (unint64_t)*v7;
      }
      return (unint64_t)*(double *)v7;
    case 4:
    case 9:
      return result;
    case 5:
      sub_20DC7BE24((uint64_t)v25, (const char **)a1);
      uint64_t v26 = 0;
      if (sub_20DC4F514((flatbuffers::ClassicLocale *)&v26, v25[0], 10, 1)) {
        return v26;
      }
      else {
        return 0;
      }
    case 6:
      BOOL v10 = *(const char **)a1;
      unsigned int v11 = *(unsigned __int8 *)(a1 + 8);
      if (v11 > 3)
      {
        if (v11 > 7) {
          uint64_t v12 = *(void *)v10;
        }
        else {
          uint64_t v12 = *(unsigned int *)v10;
        }
      }
      else if (v11 > 1)
      {
        uint64_t v12 = *(unsigned __int16 *)v10;
      }
      else
      {
        uint64_t v12 = *(unsigned __int8 *)v10;
      }
      uint64_t v20 = -v12;
      unsigned int v21 = *(unsigned __int8 *)(a1 + 9);
      if (v21 > 3)
      {
        if (v21 > 7) {
          goto LABEL_53;
        }
        unint64_t result = *(int *)&v10[v20];
      }
      else if (v21 > 1)
      {
        unint64_t result = *(__int16 *)&v10[v20];
      }
      else
      {
        unint64_t result = v10[v20];
      }
      break;
    case 7:
      BOOL v10 = *(const char **)a1;
      unsigned int v13 = *(unsigned __int8 *)(a1 + 8);
      if (v13 > 3)
      {
        if (v13 > 7) {
          uint64_t v14 = *(void *)v10;
        }
        else {
          uint64_t v14 = *(unsigned int *)v10;
        }
      }
      else if (v13 > 1)
      {
        uint64_t v14 = *(unsigned __int16 *)v10;
      }
      else
      {
        uint64_t v14 = *(unsigned __int8 *)v10;
      }
      uint64_t v20 = -v14;
      unsigned int v22 = *(unsigned __int8 *)(a1 + 9);
      if (v22 > 3)
      {
        if (v22 > 7) {
LABEL_53:
        }
          unint64_t result = *(void *)&v10[v20];
        else {
          unint64_t result = *(unsigned int *)&v10[v20];
        }
      }
      else if (v22 > 1)
      {
        unint64_t result = *(unsigned __int16 *)&v10[v20];
      }
      else
      {
        unint64_t result = v10[v20];
      }
      break;
    case 8:
      uint64_t v15 = *(const char **)a1;
      unsigned int v16 = *(unsigned __int8 *)(a1 + 8);
      if (v16 > 3)
      {
        if (v16 > 7) {
          uint64_t v17 = *(void *)v15;
        }
        else {
          uint64_t v17 = *(unsigned int *)v15;
        }
      }
      else if (v16 > 1)
      {
        uint64_t v17 = *(unsigned __int16 *)v15;
      }
      else
      {
        uint64_t v17 = *(unsigned __int8 *)v15;
      }
      uint64_t v23 = -v17;
      unsigned int v24 = *(unsigned __int8 *)(a1 + 9);
      if (v24 > 3)
      {
        if (v24 > 7) {
          return (unint64_t)*(double *)&v15[v23];
        }
        else {
          return (unint64_t)*(float *)&v15[v23];
        }
      }
      else
      {
        if (v24 > 1) {
          int v9 = *(__int16 *)&v15[v23];
        }
        else {
          int v9 = v15[v23];
        }
        return (unint64_t)(double)v9;
      }
    case 10:
      sub_20DC7BA20((uint64_t)v25, (unsigned int **)a1);
      return (unint64_t)v25[2];
    default:
      if (v3 == 26)
      {
LABEL_6:
        long long v4 = *(const char **)a1;
        unsigned int v6 = *(unsigned __int8 *)(a1 + 8);
        if (v6 > 3)
        {
          if (v6 > 7) {
            return *(void *)v4;
          }
          else {
            return *(unsigned int *)v4;
          }
        }
        else if (v6 > 1)
        {
          return *(unsigned __int16 *)v4;
        }
        else
        {
          return *(unsigned __int8 *)v4;
        }
      }
      return result;
  }
  return result;
}

double sub_20DC7B538(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12);
  double result = 0.0;
  switch(v1)
  {
    case 1:
      int v3 = *(const char **)a1;
      unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
      if (v4 > 3)
      {
        if (v4 > 7) {
          return (double)*(uint64_t *)v3;
        }
        else {
          return (double)*(int *)v3;
        }
      }
      else if (v4 > 1)
      {
        return (double)*(__int16 *)v3;
      }
      else
      {
        return (double)*v3;
      }
    case 2:
      goto LABEL_6;
    case 3:
      int v9 = *(float **)a1;
      unsigned int v10 = *(unsigned __int8 *)(a1 + 8);
      if (v10 <= 3)
      {
        if (v10 > 1) {
          int v11 = *(__int16 *)v9;
        }
        else {
          int v11 = *(char *)v9;
        }
        goto LABEL_69;
      }
      if (v10 <= 7)
      {
        float v21 = *v9;
        goto LABEL_62;
      }
      double result = *(double *)v9;
      break;
    case 4:
    case 9:
      return result;
    case 5:
      double v29 = 0.0;
      sub_20DC7BE24((uint64_t)v28, (const char **)a1);
      sub_20DC52D9C((flatbuffers::ClassicLocale *)&v29, v28[0]);
      return v29;
    case 6:
      uint64_t v12 = *(const char **)a1;
      unsigned int v13 = *(unsigned __int8 *)(a1 + 8);
      if (v13 > 3)
      {
        if (v13 > 7) {
          uint64_t v14 = *(void *)v12;
        }
        else {
          uint64_t v14 = *(unsigned int *)v12;
        }
      }
      else if (v13 > 1)
      {
        uint64_t v14 = *(unsigned __int16 *)v12;
      }
      else
      {
        uint64_t v14 = *(unsigned __int8 *)v12;
      }
      uint64_t v22 = -v14;
      unsigned int v23 = *(unsigned __int8 *)(a1 + 9);
      if (v23 > 3)
      {
        if (v23 > 7) {
          return (double)*(uint64_t *)&v12[v22];
        }
        else {
          return (double)*(int *)&v12[v22];
        }
      }
      else if (v23 > 1)
      {
        return (double)*(__int16 *)&v12[v22];
      }
      else
      {
        return (double)v12[v22];
      }
    case 7:
      uint64_t v15 = *(const char **)a1;
      unsigned int v16 = *(unsigned __int8 *)(a1 + 8);
      if (v16 > 3)
      {
        if (v16 > 7) {
          uint64_t v17 = *(void *)v15;
        }
        else {
          uint64_t v17 = *(unsigned int *)v15;
        }
      }
      else if (v16 > 1)
      {
        uint64_t v17 = *(unsigned __int16 *)v15;
      }
      else
      {
        uint64_t v17 = *(unsigned __int8 *)v15;
      }
      uint64_t v24 = -v17;
      unsigned int v25 = *(unsigned __int8 *)(a1 + 9);
      if (v25 > 3)
      {
        if (v25 > 7) {
          return (double)*(unint64_t *)&v15[v24];
        }
        else {
          return (double)*(unsigned int *)&v15[v24];
        }
      }
      else if (v25 > 1)
      {
        return (double)*(unsigned __int16 *)&v15[v24];
      }
      else
      {
        return (double)v15[v24];
      }
    case 8:
      size_t v18 = *(const char **)a1;
      unsigned int v19 = *(unsigned __int8 *)(a1 + 8);
      if (v19 > 3)
      {
        if (v19 > 7) {
          uint64_t v20 = *(void *)v18;
        }
        else {
          uint64_t v20 = *(unsigned int *)v18;
        }
      }
      else if (v19 > 1)
      {
        uint64_t v20 = *(unsigned __int16 *)v18;
      }
      else
      {
        uint64_t v20 = *(unsigned __int8 *)v18;
      }
      uint64_t v26 = -v20;
      unsigned int v27 = *(unsigned __int8 *)(a1 + 9);
      if (v27 > 3)
      {
        if (v27 > 7)
        {
          double result = *(double *)&v18[v26];
        }
        else
        {
          float v21 = *(float *)&v18[v26];
LABEL_62:
          double result = v21;
        }
      }
      else
      {
        if (v27 > 1) {
          int v11 = *(__int16 *)&v18[v26];
        }
        else {
          int v11 = v18[v26];
        }
LABEL_69:
        double result = (double)v11;
      }
      break;
    case 10:
      sub_20DC7BA20((uint64_t)v28, (unsigned int **)a1);
      return (double)(unint64_t)v28[2];
    default:
      if (v1 == 26)
      {
LABEL_6:
        unsigned int v6 = *(const char **)a1;
        unsigned int v7 = *(unsigned __int8 *)(a1 + 8);
        if (v7 > 3)
        {
          if (v7 > 7) {
            return (double)*(unint64_t *)v6;
          }
          else {
            return (double)*(unsigned int *)v6;
          }
        }
        else if (v7 > 1)
        {
          return (double)*(unsigned __int16 *)v6;
        }
        else
        {
          return (double)*(unsigned __int8 *)v6;
        }
      }
      return result;
  }
  return result;
}

BOOL sub_20DC7B808(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12) == 26)
  {
    int v1 = *(unsigned int **)a1;
    unsigned int v2 = *(unsigned __int8 *)(a1 + 8);
    if (v2 > 3)
    {
      if (v2 > 7) {
        unint64_t v3 = *(void *)v1;
      }
      else {
        unint64_t v3 = *v1;
      }
    }
    else if (v2 > 1)
    {
      unint64_t v3 = *(unsigned __int16 *)v1;
    }
    else
    {
      unint64_t v3 = *(unsigned __int8 *)v1;
    }
  }
  else
  {
    unint64_t v3 = sub_20DC7B270(a1);
  }
  return v3 != 0;
}

uint64_t sub_20DC7B874(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  unint64_t v3 = (unsigned int *)(a2 - 3 * a3);
  if (a3 > 3u)
  {
    if (a3 < 8u)
    {
      unsigned int v5 = (char *)v3 - *v3;
      int v6 = *(unsigned int *)((char *)v3 + a3);
      goto LABEL_9;
    }
    uint64_t v4 = *(void *)v3;
  }
  else
  {
    if (a3 >= 2u)
    {
      unsigned int v5 = (char *)v3 - *(unsigned __int16 *)v3;
      LOWORD(v6) = *(_WORD *)((char *)v3 + a3);
      goto LABEL_9;
    }
    uint64_t v4 = *(unsigned __int8 *)v3;
  }
  unsigned int v5 = (char *)v3 - v4;
  LOBYTE(v6) = *((unsigned char *)v3 + a3);
LABEL_9:
  unsigned int v7 = v6;
  *(void *)double result = v5;
  *(unsigned char *)(result + 8) = v6;
  uint64_t v8 = -(uint64_t)v6;
  if (v7 > 3)
  {
    if (v7 > 7) {
      uint64_t v9 = *(void *)&v5[v8];
    }
    else {
      uint64_t v9 = *(unsigned int *)&v5[v8];
    }
  }
  else if (v7 > 1)
  {
    uint64_t v9 = *(unsigned __int16 *)&v5[v8];
  }
  else
  {
    uint64_t v9 = v5[v8];
  }
  *(void *)(result + 16) = v9;
  *(_DWORD *)(result + 24) = 4;
  return result;
}

std::string *sub_20DC7B928(std::string *a1, uint64_t a2, uint64_t a3)
{
  std::string::append(a1, "[ ");
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    for (unint64_t i = 0; i < v6; ++i)
    {
      if (i)
      {
        std::string::append(a1, ", ");
        unint64_t v6 = *(void *)(a2 + 16);
      }
      if (v6 <= i)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 257;
      }
      else
      {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 8);
        unsigned int v9 = *(unsigned __int8 *)(*(void *)a2 + v6 * v8 + i);
        uint64_t v10 = *(void *)a2 + i * v8;
        unint64_t v11 = ((unint64_t)(v9 >> 2) << 32) | ((unint64_t)(1 << (v9 & 3)) << 8) | v8;
      }
      v13[0] = v10;
      v13[1] = v11;
      sub_20DC7A3DC(v13, a3, a1);
      unint64_t v6 = *(void *)(a2 + 16);
    }
  }

  return std::string::append(a1, " ]");
}

uint64_t sub_20DC7BA20(uint64_t result, unsigned int **a2)
{
  if ((*((_DWORD *)a2 + 3) - 9) > 1)
  {
    uint64_t v5 = 0;
    *(void *)double result = &unk_20DC7CF2D;
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    unsigned int v2 = *a2;
    unsigned int v3 = *((unsigned __int8 *)a2 + 8);
    if (v3 > 3)
    {
      if (v3 > 7) {
        uint64_t v4 = *(void *)v2;
      }
      else {
        uint64_t v4 = *v2;
      }
    }
    else if (v3 > 1)
    {
      uint64_t v4 = *(unsigned __int16 *)v2;
    }
    else
    {
      uint64_t v4 = *(unsigned __int8 *)v2;
    }
    unint64_t v6 = (char *)v2 - v4;
    uint64_t v7 = *((unsigned __int8 *)a2 + 9);
    *(void *)double result = v6;
    *(unsigned char *)(result + 8) = v7;
    if (v7 > 3)
    {
      if (v7 > 7) {
        uint64_t v5 = *(void *)&v6[-v7];
      }
      else {
        uint64_t v5 = *(unsigned int *)&v6[-v7];
      }
    }
    else if (v7 > 1)
    {
      uint64_t v5 = *(unsigned __int16 *)&v6[-v7];
    }
    else
    {
      uint64_t v5 = v6[-v7];
    }
  }
  *(void *)(result + 16) = v5;
  return result;
}

std::string *sub_20DC7BAD8(std::string *a1, uint64_t a2, uint64_t a3)
{
  std::string::append(a1, "[ ");
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    for (unint64_t i = 0; i < v6; ++i)
    {
      if (i)
      {
        std::string::append(a1, ", ");
        unint64_t v6 = *(void *)(a2 + 16);
      }
      if (v6 <= i)
      {
        uint64_t v9 = 0;
        unint64_t v10 = 257;
      }
      else
      {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 8);
        uint64_t v9 = *(void *)a2 + i * v8;
        unint64_t v10 = v8 | ((unint64_t)*(unsigned int *)(a2 + 24) << 32) | 0x100;
      }
      v12[0] = v9;
      v12[1] = v10;
      sub_20DC7A3DC(v12, a3, a1);
      unint64_t v6 = *(void *)(a2 + 16);
    }
  }

  return std::string::append(a1, " ]");
}

uint64_t sub_20DC7BBB8(uint64_t result, unsigned int **a2)
{
  int v2 = *((_DWORD *)a2 + 3);
  if ((v2 - 11) < 5 || v2 == 36)
  {
    unsigned int v3 = *a2;
    unsigned int v4 = *((unsigned __int8 *)a2 + 8);
    if (v4 > 3)
    {
      if (v4 > 7) {
        uint64_t v5 = *(void *)v3;
      }
      else {
        uint64_t v5 = *v3;
      }
    }
    else if (v4 > 1)
    {
      uint64_t v5 = *(unsigned __int16 *)v3;
    }
    else
    {
      uint64_t v5 = *(unsigned __int8 *)v3;
    }
    uint64_t v7 = (char *)v3 - v5;
    uint64_t v8 = *((unsigned __int8 *)a2 + 9);
    int v6 = v2 - 10;
    *(void *)double result = v7;
    *(unsigned char *)(result + 8) = v8;
    if (v8 > 3)
    {
      if (v8 > 7) {
        uint64_t v9 = *(void *)&v7[-v8];
      }
      else {
        uint64_t v9 = *(unsigned int *)&v7[-v8];
      }
    }
    else if (v8 > 1)
    {
      uint64_t v9 = *(unsigned __int16 *)&v7[-v8];
    }
    else
    {
      uint64_t v9 = v7[-v8];
    }
    *(void *)(result + 16) = v9;
    if (v6 == 5) {
      int v6 = 4;
    }
  }
  else
  {
    *(void *)double result = &unk_20DC7CF32;
    int v6 = 1;
    *(unsigned char *)(result + 8) = 1;
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = v6;
  return result;
}

std::string *sub_20DC7BC8C(std::string *a1, uint64_t a2, uint64_t a3)
{
  std::string::append(a1, "[ ");
  LODWORD(v6) = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    unint64_t v7 = 0;
    do
    {
      if (v7)
      {
        std::string::append(a1, ", ");
        LODWORD(v6) = *(unsigned __int8 *)(a2 + 16);
      }
      if (v7 >= v6)
      {
        unint64_t v9 = 0;
        unint64_t v10 = 257;
      }
      else
      {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 8);
        unint64_t v9 = *(void *)a2 + v7 * v8;
        unint64_t v10 = v8 | ((unint64_t)*(unsigned int *)(a2 + 12) << 32) | 0x100;
      }
      v12[0] = v9;
      v12[1] = v10;
      sub_20DC7A3DC(v12, a3, a1);
      ++v7;
      unint64_t v6 = *(unsigned __int8 *)(a2 + 16);
    }
    while (v7 < v6);
  }

  return std::string::append(a1, " ]");
}

uint64_t sub_20DC7BD6C(uint64_t result, unsigned int **a2)
{
  int v2 = *((_DWORD *)a2 + 3);
  if (v2 == 25 || v2 == 5)
  {
    unsigned int v4 = *a2;
    unsigned int v5 = *((unsigned __int8 *)a2 + 8);
    if (v5 > 3)
    {
      if (v5 > 7) {
        uint64_t v6 = *(void *)v4;
      }
      else {
        uint64_t v6 = *v4;
      }
    }
    else if (v5 > 1)
    {
      uint64_t v6 = *(unsigned __int16 *)v4;
    }
    else
    {
      uint64_t v6 = *(unsigned __int8 *)v4;
    }
    uint64_t v8 = (char *)v4 - v6;
    uint64_t v9 = *((unsigned __int8 *)a2 + 9);
    *(void *)double result = v8;
    *(unsigned char *)(result + 8) = v9;
    if (v9 > 3)
    {
      if (v9 > 7) {
        uint64_t v7 = *(void *)&v8[-v9];
      }
      else {
        uint64_t v7 = *(unsigned int *)&v8[-v9];
      }
    }
    else if (v9 > 1)
    {
      uint64_t v7 = *(unsigned __int16 *)&v8[-v9];
    }
    else
    {
      uint64_t v7 = v8[-v9];
    }
  }
  else
  {
    uint64_t v7 = 0;
    *(void *)double result = &unk_20DC7CF33;
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)(result + 16) = v7;
  return result;
}

size_t sub_20DC7BE24(uint64_t a1, const char **a2)
{
  int v3 = *((_DWORD *)a2 + 3);
  if (v3 == 4)
  {
    uint64_t v7 = *a2;
    unsigned int v8 = *((unsigned __int8 *)a2 + 8);
    if (v8 > 3)
    {
      if (v8 > 7) {
        uint64_t v9 = *(void *)v7;
      }
      else {
        uint64_t v9 = *(unsigned int *)v7;
      }
    }
    else if (v8 > 1)
    {
      uint64_t v9 = *(unsigned __int16 *)v7;
    }
    else
    {
      uint64_t v9 = *(unsigned __int8 *)v7;
    }
    unsigned int v13 = &v7[-v9];
    char v14 = *((unsigned char *)a2 + 9);
    size_t result = strlen(&v7[-v9]);
    *(void *)a1 = v13;
    *(unsigned char *)(a1 + 8) = v14;
  }
  else if (v3 == 5)
  {
    unsigned int v4 = (unsigned int *)*a2;
    unsigned int v5 = *((unsigned __int8 *)a2 + 8);
    if (v5 > 3)
    {
      if (v5 > 7) {
        uint64_t v6 = *(void *)v4;
      }
      else {
        uint64_t v6 = *v4;
      }
    }
    else if (v5 > 1)
    {
      uint64_t v6 = *(unsigned __int16 *)v4;
    }
    else
    {
      uint64_t v6 = *(unsigned __int8 *)v4;
    }
    unint64_t v11 = (char *)v4 - v6;
    uint64_t v12 = *((unsigned __int8 *)a2 + 9);
    *(void *)a1 = v11;
    *(unsigned char *)(a1 + 8) = v12;
    if (v12 > 3)
    {
      if (v12 > 7) {
        size_t result = *(void *)&v11[-v12];
      }
      else {
        size_t result = *(unsigned int *)&v11[-v12];
      }
    }
    else if (v12 > 1)
    {
      size_t result = *(unsigned __int16 *)&v11[-v12];
    }
    else
    {
      size_t result = v11[-v12];
    }
  }
  else
  {
    size_t result = 0;
    *(void *)a1 = &unk_20DC7CF2C;
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)(a1 + 16) = result;
  return result;
}

BOOL flatbuffers::FileExistsRaw(flatbuffers *this, const char *a2)
{
  v4[72] = *MEMORY[0x263EF8340];
  sub_20DC7BFF0(v4);
  BOOL v2 = *(_DWORD *)((char *)&v4[4] + *(void *)(v4[0] - 24)) == 0;
  sub_20DC68A30(v4);
  return v2;
}

uint64_t *sub_20DC7BFF0(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 24;
  uint64_t v3 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  unsigned int v4 = a1 + 2;
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v6;
  *(uint64_t *)((char *)a1 + *(void *)(v6 - 24)) = v5;
  a1[1] = 0;
  uint64_t v7 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2;
  a1[53] = v3;
  MEMORY[0x210568930](v4);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

BOOL flatbuffers::LoadFileRaw(const char *a1, int a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!stat(a1, &v12) && (v12.st_mode & 0x4000) != 0) {
    return 0;
  }
  sub_20DC7BFF0((uint64_t *)&v12.st_dev);
  if (v12.st_qspare[1])
  {
    if (a2)
    {
      std::istream::seekg();
      std::istream::tellg();
      std::string::resize((std::string *)a3, __n, 0);
      std::istream::seekg();
      std::istream::read();
    }
    else
    {
      sub_20DC68B30((uint64_t)v9);
      std::ostream::operator<<();
      std::stringbuf::str();
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v7;
      *(void *)(a3 + 16) = v8;
      sub_20DC7C5AC((uint64_t)v9);
      MEMORY[0x210568AB0](&v10);
    }
    BOOL v5 = (*((unsigned char *)&v12.st_atimespec.tv_sec + *(void *)(*(void *)&v12.st_dev - 24)) & 1) == 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  sub_20DC68A30(&v12);
  return v5;
}

uint64_t flatbuffers::LoadFile()
{
  return off_26B496488();
}

uint64_t flatbuffers::FileExists(flatbuffers *this, const char *a2)
{
  return off_26B496490(this, (const char *)off_26B496490);
}

std::string *flatbuffers::ConCatPathFileName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20DC55634(a3, *(const void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(void *)(a3 + 16) = *(void *)(a1 + 16);
  }
  char v5 = *(unsigned char *)(a3 + 23);
  int v6 = v5;
  uint64_t v7 = v5 & 0x7F;
  if (v6 < 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  if (v7)
  {
    uint64_t v8 = v7 - 1;
    uint64_t v9 = v6 >= 0 ? a3 : *(void *)a3;
    int v10 = *(unsigned __int8 *)(v9 + v8);
    if (v10 != 47)
    {
      if (v10 == 92) {
        *(unsigned char *)(v9 + v8) = 47;
      }
      else {
        std::string::push_back((std::string *)a3, 47);
      }
    }
  }
  char v11 = *(unsigned char *)(a2 + 23);
  BOOL v12 = v11 < 0;
  if (v11 >= 0) {
    uint64_t v13 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v13 = *(const std::string::value_type **)a2;
  }
  std::string::size_type v14 = v11 & 0x7F;
  if (v12) {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  else {
    std::string::size_type v15 = v14;
  }
  size_t result = std::string::append((std::string *)a3, v13, v15);
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v17 = (unsigned char *)a3;
  }
  else {
    uint64_t v17 = *(unsigned char **)a3;
  }
  if (*v17 == 46 && v17[1] == 47)
  {
    return std::string::erase((std::string *)a3, 0, 2uLL);
  }
  return result;
}

void flatbuffers::PosixPath(flatbuffers *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v5 = strlen((const char *)this);
  std::string::__init((std::string *)a2, (const std::string::value_type *)this, v5);
  char v6 = *(unsigned char *)(a2 + 23);
  BOOL v7 = v6 < 0;
  uint64_t v8 = *(unsigned char **)a2;
  if (v6 >= 0) {
    uint64_t v8 = (unsigned char *)a2;
  }
  uint64_t v9 = v6 & 0x7F;
  if (v7) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  for (; v9; --v9)
  {
    if (*v8 == 92) {
      *uint64_t v8 = 47;
    }
    ++v8;
  }
}

void flatbuffers::AbsolutePath(const char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (realpath(a1, __s))
  {
    std::string::size_type v4 = strlen(__s);
    std::string::__init(a2, __s, v4);
  }
  else if (v2[23] < 0)
  {
    sub_20DC55634((uint64_t)a2, *(const void **)v2, *((void *)v2 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
  }
}

uint64_t sub_20DC7C5AC(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x263F8C2C8];
  uint64_t v2 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v2 - 24)) = *(void *)(v1 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();

  return std::ostream::~ostream();
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98238](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98240](this, __c, __pos);
}

int std::string::compare(const std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string::value_type *__s)
{
  return MEMORY[0x270F98250](this, __pos1, __n1, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F98480](this, __pos, __n);
}

void std::string::__init(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F984B0](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984C0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F98568](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x270F98690]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x270F98698]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x270F98750]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98780]();
}

{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987C0]();
}

{
  return MEMORY[0x270F987C8]();
}

{
  return MEMORY[0x270F987D0]();
}

{
  return MEMORY[0x270F987D8]();
}

{
  return MEMORY[0x270F987E0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

void abort(void)
{
}

long double acos(long double __x)
{
  MEMORY[0x270ED8588](__x);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x270ED8610](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x270ED86A0](__x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x270ED8798](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

int freelocale(locale_t a1)
{
  return MEMORY[0x270ED9A58](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x270EDA518](a1, a2);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  return (locale_t)MEMORY[0x270EDA708](*(void *)&a1, a2, a3);
}

char *__cdecl realpath(const char *a1, char *a2)
{
  return (char *)MEMORY[0x270EDB160](a1, a2);
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return (char *)MEMORY[0x270EDB408](*(void *)&a1, a2);
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strpbrk(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB668](__s1, __s2);
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  MEMORY[0x270EDB6B0](a1, a2, a3);
  return result;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  MEMORY[0x270EDB6C0](a1, a2, a3);
  return result;
}

uint64_t strtoll_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x270EDB6F0](a1, a2, *(void *)&a3, a4);
}

unint64_t strtoull_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x270EDB720](a1, a2, *(void *)&a3, a4);
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}