void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void AudioIssueDetectorCreate()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  SingletonManagerInstance();
  std::mutex::lock(&SingletonManagerInstance(void)::sInstance);
  atomic_fetch_add(&dword_26AB1A928, 1u);
  uint64_t v0 = qword_26AB1A920;
  while (1)
  {
    unint64_t v1 = (unint64_t)(v0 + 1) > 1 ? v0 + 1 : 1;
    qword_26AB1A920 = v1;
    v2 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(v1);
    if (!v2) {
      break;
    }
    uint64_t v4 = v2[3];
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      uint64_t v0 = qword_26AB1A920;
      if (!v4) {
        break;
      }
    }
    else
    {
      uint64_t v0 = v1;
      if (!v4) {
        break;
      }
    }
  }
  operator new();
}

void sub_2227C3330(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::mutex::unlock(&SingletonManagerInstance(void)::sInstance);
  _Unwind_Resume(a1);
}

void rtaid::Detector::checkAndResetAnalyzers(uint64_t a1, void *a2)
{
  v2 = a2;
  uint64_t v4 = 0;
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v5 = (char *)(a1 + 96);
  uint64_t v6 = a1 + 416;
  v7 = (void *)(a1 + 364);
  __dst = (char *)(a1 + 288);
  v64 = (float *)(a1 + 384);
  v68 = (void *)(a1 + 364);
  v69 = (char *)(a1 + 96);
  do
  {
    char v8 = 0;
    uint64_t v9 = *v2;
    atomic_compare_exchange_strong((atomic_uchar *volatile)(*v2 + 408), (unsigned __int8 *)&v8, 1u);
    if (!v8)
    {
      v10 = (const char *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0) {
        v10 = *(const char **)v10;
      }
      strncpy(v5, v10, 0xC0uLL);
      *(_DWORD *)(a1 + 356) = v4;
      *(unsigned char *)(a1 + 360) = *(unsigned char *)(v9 + 188);
      switch((int)v4)
      {
        case 0:
          if (!*(unsigned char *)(v9 + 159) && !*(unsigned char *)(v9 + 152)) {
            goto LABEL_86;
          }
          v47 = *(OpaqueAudioComponentInstance **)(v9 + 32);
          if (!v47) {
            goto LABEL_86;
          }
          AudioUnitParameterValue v70 = 0.0;
          OSStatus Parameter = AudioUnitGetParameter(v47, 4u, 0, 0, &v70);
          float v49 = v70;
          if (Parameter) {
            float v49 = 0.0;
          }
          unsigned int v50 = v49;
          if (Parameter) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = v50;
          }
          AudioUnitParameterValue v71 = 0.0;
          OSStatus v52 = AudioUnitGetParameter(v47, 5u, 0, 0, &v71);
          float v53 = v71;
          if (v52) {
            float v53 = 0.0;
          }
          unsigned int v54 = v53;
          if (v52) {
            unsigned int v54 = 0;
          }
          BOOL v28 = (v51 | v54) != 0;
          if (v51 | v54)
          {
            *(_DWORD *)(a1 + 364) = v51;
            *(_DWORD *)(a1 + 368) = v54;
          }
          v55 = *(OpaqueAudioComponentInstance **)(v9 + 32);
          if (v55)
          {
            AudioUnitSetParameter(*(AudioUnit *)(v9 + 32), 4u, 0, 0, 0.0, 0);
            AudioUnitSetParameter(v55, 5u, 0, 0, 0.0, 0);
          }
          goto LABEL_71;
        case 1:
        case 2:
          if (!*(unsigned char *)(v9 + v4 + 159) && !*(unsigned char *)(v9 + v4 + 152)) {
            goto LABEL_86;
          }
          v11 = *(OpaqueAudioComponentInstance **)(v9 + 32);
          if (!v11) {
            goto LABEL_86;
          }
          AudioUnitParameterValue outValue = 0.0;
          OSStatus v12 = AudioUnitGetParameter(v11, 0, 0, 0, &outValue);
          float v13 = outValue;
          if (v12) {
            float v13 = 0.0;
          }
          unsigned int v14 = v13;
          if (v12) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = v14;
          }
          AudioUnitParameterValue v73 = 0.0;
          OSStatus v16 = AudioUnitGetParameter(v11, 1u, 0, 0, &v73);
          float v17 = v73;
          if (v16) {
            float v17 = 0.0;
          }
          unsigned int v18 = v17;
          if (v16) {
            unsigned int v19 = 0;
          }
          else {
            unsigned int v19 = v18;
          }
          AudioUnitParameterValue v74 = 0.0;
          OSStatus v20 = AudioUnitGetParameter(v11, 2u, 0, 0, &v74);
          float v21 = v74;
          if (v20) {
            float v21 = 0.0;
          }
          unsigned int v22 = v21;
          if (v20) {
            unsigned int v23 = 0;
          }
          else {
            unsigned int v23 = v22;
          }
          AudioUnitParameterValue v75 = 0.0;
          OSStatus v24 = AudioUnitGetParameter(v11, 3u, 0, 0, &v75);
          float v25 = v75;
          if (v24) {
            float v25 = 0.0;
          }
          unsigned int v26 = v25;
          if (v24) {
            unsigned int v26 = 0;
          }
          int v27 = v15 | v19 | v23 | v26;
          BOOL v28 = v27 != 0;
          if (v27)
          {
            *(_DWORD *)(a1 + 364) = v15;
            *(_DWORD *)(a1 + 368) = v19;
            *(_DWORD *)(a1 + 372) = v23;
            *(_DWORD *)(a1 + 376) = v26;
            float v29 = *(double *)(v9 + 80);
            *(float *)(a1 + 380) = v29;
            AudioUnitParameterValue v76 = 0.0;
            OSStatus v30 = AudioUnitGetParameter(v11, 6u, 0, 0, &v76);
            AudioUnitParameterValue v31 = v76;
            if (v30) {
              AudioUnitParameterValue v31 = 0.0;
            }
            float v32 = v31;
            if (v30) {
              float v32 = 0.0;
            }
            *(float *)(a1 + 384) = v32;
          }
          rtaid::DetectorNode::resetSilenceAnalyzerErrorState(*(OpaqueAudioComponentInstance **)(v9 + 32));
LABEL_71:
          atomic_store(0, (unsigned __int8 *)(v9 + 408));
          v7 = v68;
          uint64_t v5 = v69;
          if (!v28) {
            break;
          }
          goto LABEL_79;
        case 4:
          if (!*(unsigned char *)(v9 + 163) && !*(unsigned char *)(v9 + 156)) {
            goto LABEL_86;
          }
          int v45 = *(_DWORD *)(v9 + 168);
          if (v45)
          {
            void *v7 = 0;
            v7[1] = 0;
            if (*(_DWORD *)(v9 + 168))
            {
              unint64_t v46 = 0;
              do
              {
                *((_DWORD *)v7 + v46) = *(_DWORD *)(v9 + 172 + 4 * v46);
                ++v46;
              }
              while (v46 < *(unsigned int *)(v9 + 168));
            }
          }
          if (*(unsigned char *)(v9 + 257))
          {
            strlcpy(__dst, (const char *)(v9 + 257), 0x40uLL);
            *(_DWORD *)(a1 + 576) = *(_DWORD *)(v9 + 404);
            *(_OWORD *)(v9 + 257) = 0u;
            *(_OWORD *)(v9 + 273) = 0u;
            *(_OWORD *)(v9 + 289) = 0u;
            *(_OWORD *)(v9 + 305) = 0u;
            *(_OWORD *)(v9 + 321) = 0u;
            *(_OWORD *)(v9 + 337) = 0u;
            *(_OWORD *)(v9 + 353) = 0u;
            *(_OWORD *)(v9 + 369) = 0u;
            *(_OWORD *)(v9 + 385) = 0u;
            *(_DWORD *)(v9 + 404) = 0;
            v7 = v68;
            uint64_t v5 = v69;
          }
          *(_DWORD *)(v9 + 168) = 0;
          atomic_store(0, (unsigned __int8 *)(v9 + 408));
          if (!v45) {
            break;
          }
          goto LABEL_79;
        case 5:
        case 6:
          if (!*(unsigned char *)(v9 + v4 + 159) && !*(unsigned char *)(v9 + v4 + 152)) {
            goto LABEL_86;
          }
          unsigned int v33 = *(_DWORD *)(v9 + 244);
          if (v33)
          {
            unsigned int v67 = *(_DWORD *)(v9 + 244);
            v35 = *(char **)(v9 + 192);
            v34 = *(char **)(v9 + 200);
            uint64_t v66 = v34 - v35;
            if (v34 != v35)
            {
              float v36 = (float)v33;
              v37 = *(float **)(v9 + 216);
              if ((unint64_t)(v66 >> 2) <= 1) {
                uint64_t v38 = 1;
              }
              else {
                uint64_t v38 = v66 >> 2;
              }
              v39 = v64;
              v40 = *(float **)(v9 + 192);
              do
              {
                float v41 = *v40++;
                float v42 = (float)(v41 / v36) + 1.0e-12;
                *(v39 - 1) = log10f(v42) * 10.0;
                float v43 = *v37++;
                float v44 = v43 + 1.0e-12;
                float *v39 = log10f(v44) * 20.0;
                v39 += 2;
                --v38;
              }
              while (v38);
            }
            v2 = a2;
            *(_DWORD *)(a1 + 372) = (unint64_t)v66 >> 2;
            *(_DWORD *)(a1 + 364) = *(unsigned __int8 *)(v9 + 256);
            *(_DWORD *)(a1 + 368) = *(_DWORD *)(v9 + 248);
            v7 = v68;
            uint64_t v5 = v69;
            unsigned int v33 = v67;
          }
          else
          {
            v35 = *(char **)(v9 + 192);
            v34 = *(char **)(v9 + 200);
          }
          if (v34 != v35)
          {
            unint64_t v56 = (v34 - v35) >> 2;
            v57 = *(_DWORD **)(v9 + 216);
            if (v56 <= 1) {
              unint64_t v56 = 1;
            }
            do
            {
              *(_DWORD *)v35 = 0;
              v35 += 4;
              *v57++ = 0;
              --v56;
            }
            while (v56);
          }
          *(_DWORD *)(v9 + 244) = 0;
          atomic_store(0, (unsigned __int8 *)(v9 + 408));
          if (v33)
          {
LABEL_79:
            *(_DWORD *)(a1 + 352) = *(_DWORD *)a1;
            uint64_t v58 = *(void *)(a1 + 592);
            unint64_t v59 = (*(void *)(a1 + 600) - v58) >> 3;
            if (v59 >= 0x10) {
              unint64_t v59 = 16;
            }
            *(unsigned char *)(a1 + 412) = v59;
            if (v59)
            {
              uint64_t v60 = 0;
              uint64_t v61 = *(void *)(a1 + 616);
              do
              {
                *(void *)(v6 + 8 * v60) = *(void *)(v58 + 8 * v60);
                *(_WORD *)(v6 + 2 * v60 + 128) = *(_WORD *)(v61 + 2 * v60);
                ++v60;
              }
              while (v59 != v60);
            }
            *(void *)(a1 + 584) = v2[3];
            memcpy(v77, v5, sizeof(v77));
            uint64_t v62 = *(void *)(a1 + 88);
            if (!v62) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            (*(void (**)(uint64_t, uint8_t *))(*(void *)v62 + 48))(v62, v77);
          }
          break;
        default:
LABEL_86:
          atomic_store(0, (unsigned __int8 *)(v9 + 408));
          break;
      }
    }
    ++v4;
  }
  while (v4 != 7);
  v2[3] = 0;
}

void sub_2227C3B10(_Unwind_Exception *a1)
{
  atomic_store(0, (unsigned __int8 *)(v1 + 408));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0) {
      goto LABEL_18;
    }
    int v18 = v9 | 0x80;
    unsigned int v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        int v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        std::vector<std::csub_match>::pointer begin = this->__begin_;
        std::vector<std::csub_match>::pointer end = this->__end_;
        if (v20) {
          goto LABEL_8;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      uint64_t result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
LABEL_8:
  if (end == begin) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = begin;
  }
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      int v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      unsigned int v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    OSStatus v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  float v44 = 0;
  int v45 = 0;
  unint64_t v46 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v40 = 0;
    memset(&v40[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v42, 0, 21);
    int v45 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v44, (uint64_t)v40);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v40[32]) {
      operator delete(*(void **)&v40[32]);
    }
    uint64_t v38 = a4;
    std::vector<std::csub_match>::size_type v13 = v45;
    *((_DWORD *)v45 - 24) = 0;
    *((void *)v13 - 11) = a2;
    *((void *)v13 - 10) = a2;
    *((void *)v13 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v45 - 40), *(unsigned int *)(a1 + 32));
    std::pair<const char *, const char *> v14 = v45;
    *((void *)v45 - 2) = v6;
    v39 = a3;
    signed int v15 = a3 - a2;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    unsigned int v16 = 1;
    while (2)
    {
      if ((v16 & 0xFFF) != 0 || (int)(v16 >> 12) < v15)
      {
        int v18 = v14 - 16;
        uint64_t v17 = *((void *)v14 - 2);
        unsigned int v19 = v14 - 96;
        if (v17) {
          (*(void (**)(uint64_t, char *))(*(void *)v17 + 16))(v17, v14 - 96);
        }
        switch(*(_DWORD *)v19)
        {
          case 0xFFFFFC18:
            std::vector<std::csub_match>::size_type v20 = (const char *)*((void *)v14 - 10);
            if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v39) {
              goto LABEL_16;
            }
            uint64_t v29 = *v38;
            *(void *)uint64_t v29 = a2;
            *(void *)(v29 + 8) = v20;
            *(unsigned char *)(v29 + 16) = 1;
            uint64_t v30 = *((void *)v14 - 8);
            uint64_t v31 = *((void *)v14 - 7) - v30;
            if (v31)
            {
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
              unsigned int v33 = (unsigned char *)(v30 + 16);
              unsigned int v34 = 1;
              do
              {
                uint64_t v35 = v29 + 24 * v34;
                *(_OWORD *)uint64_t v35 = *((_OWORD *)v33 - 1);
                char v36 = *v33;
                v33 += 24;
                *(unsigned char *)(v35 + 16) = v36;
              }
              while (v32 > v34++);
            }
            uint64_t v27 = 1;
            goto LABEL_25;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            std::pair<const char *, const char *> v21 = v45 - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v45 - 12);
            int v45 = v21;
            goto LABEL_23;
          case 0xFFFFFC20:
            long long v22 = *((_OWORD *)v14 - 5);
            *(_OWORD *)v40 = *(_OWORD *)v19;
            *(_OWORD *)&v40[16] = v22;
            memset(&v40[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v40[32], *((long long **)v14 - 8), *((long long **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v14 - 7) - *((void *)v14 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v42[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v14 - 5), *((long long **)v14 - 4), (uint64_t)(*((void *)v14 - 4) - *((void *)v14 - 5)) >> 4);
            uint64_t v23 = *(void *)v18;
            *(void *)((char *)&v42[1] + 5) = *(void *)(v14 - 11);
            v42[1] = v23;
            (*(void (**)(void, uint64_t, char *))(**(void **)v18 + 24))(*(void *)v18, 1, v14 - 96);
            (*(void (**)(void, void, unsigned char *))(*(void *)v42[1] + 24))(v42[1], 0, v40);
            OSStatus v24 = v45;
            if ((unint64_t)v45 >= v46)
            {
              int v45 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v44, (uint64_t)v40);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v25 = *(_OWORD *)&v40[16];
              *(_OWORD *)int v45 = *(_OWORD *)v40;
              *((_OWORD *)v24 + 1) = v25;
              *((void *)v24 + 4) = 0;
              *((void *)v24 + 5) = 0;
              *((void *)v24 + 6) = 0;
              *((void *)v24 + 7) = 0;
              *((_OWORD *)v24 + 2) = *(_OWORD *)&v40[32];
              *((void *)v24 + 6) = *(void *)&v40[48];
              memset(&v40[32], 0, 24);
              *((void *)v24 + 8) = 0;
              *((void *)v24 + 9) = 0;
              *(_OWORD *)(v24 + 56) = *(_OWORD *)__p;
              *((void *)v24 + 9) = v42[0];
              __p[0] = 0;
              __p[1] = 0;
              v42[0] = 0;
              uint64_t v26 = v42[1];
              *(void *)(v24 + 85) = *(void *)((char *)&v42[1] + 5);
              *((void *)v24 + 10) = v26;
              int v45 = v24 + 96;
            }
            if (*(void *)&v40[32])
            {
              *(void *)&v40[40] = *(void *)&v40[32];
              operator delete(*(void **)&v40[32]);
            }
LABEL_23:
            std::pair<const char *, const char *> v14 = v45;
            ++v16;
            if (v44 == v45) {
              goto LABEL_24;
            }
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_24:
  uint64_t v27 = 0;
LABEL_25:
  *(void *)v40 = &v44;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  return v27;
}

void sub_2227C42BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(void *a1)
{
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  uint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *uint64_t v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *uint64_t v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v8 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_170;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_35;
  }
  char v6 = *current;
  LOBYTE(v85) = *current;
  char v7 = current[1];
  HIBYTE(v85) = v7;
  if (this->__icase_)
  {
    LOBYTE(v85) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v85) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v85;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v86, (const char *)&__s);
  std::string __p = v86;
  std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  int v11 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v86.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_11;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_15;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)this->__traits_.__col_ + 32))(&v86);
  if (v11 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v86;
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v86.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v86.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_113;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_113:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v22) {
      goto LABEL_17;
    }
LABEL_35:
    BOOL negate = 0;
    uint64_t v8 = 1;
    goto LABEL_36;
  }
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
    goto LABEL_35;
  }
LABEL_17:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v13 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    p_second = &begin->second;
    while (v85 != *(p_second - 1) || HIBYTE(v85) != *p_second)
    {
      p_second += 2;
      if (!--v14) {
        goto LABEL_26;
      }
    }
    goto LABEL_167;
  }
LABEL_26:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v85, (char *)&v86);
    std::vector<std::pair<std::string, std::string>>::pointer v17 = this->__ranges_.__begin_;
    uint64_t v18 = (char *)this->__ranges_.__end_ - (char *)v17;
    if (v18)
    {
      unint64_t v19 = 0;
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v17->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v19;
        ++v17;
        if (v19 >= v20) {
          goto LABEL_33;
        }
      }
      BOOL negate = 1;
      int v21 = 5;
    }
    else
    {
LABEL_33:
      BOOL negate = 0;
      int v21 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (negate) {
      goto LABEL_145;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_149:
    if ((char)v85 < 0)
    {
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
    }
    else
    {
      std::regex_traits<char>::char_class_type mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v75 = tab[v85];
      if (((v75 & mask) != 0 || v85 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v85) & 0x80000000) == 0
        && ((tab[HIBYTE(v85)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v85) == 95))
      {
        goto LABEL_167;
      }
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
      if ((v75 & neg_mask) != 0 || v85 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_166:
        int v77 = negate;
LABEL_168:
        BOOL negate = v77;
        goto LABEL_169;
      }
    }
    if ((SHIBYTE(v85) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v85)] & neg_mask) == 0)
      {
        int v77 = 1;
        if (HIBYTE(v85) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_168;
        }
      }
      goto LABEL_166;
    }
LABEL_167:
    int v77 = 1;
    goto LABEL_168;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v85, (char *)&v86);
  std::vector<std::string>::pointer v57 = this->__equivalences_.__begin_;
  uint64_t v58 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v59 = (char *)this->__equivalences_.__end_ - (char *)v57;
  if (!v59)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_149;
  }
  uint64_t v60 = 0;
  unint64_t v61 = v59 / 24;
  long long v62 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v63 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v63 = __s.__r_.__value_.__l.__size_;
  }
  if (v61 <= 1) {
    uint64_t v64 = 1;
  }
  else {
    uint64_t v64 = v59 / 24;
  }
  BOOL v65 = 1;
  while (1)
  {
    uint64_t v66 = &v57[v60];
    std::string::size_type v67 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
    int v68 = (char)v67;
    if ((v67 & 0x80u) != 0) {
      std::string::size_type v67 = v66->__r_.__value_.__l.__size_;
    }
    if (v63 != v67) {
      goto LABEL_140;
    }
    v69 = v68 >= 0 ? &v57[v60] : (std::string *)v66->__r_.__value_.__r.__words[0];
    if ((v58 & 0x80) == 0) {
      break;
    }
    unint64_t v82 = v61;
    uint64_t v83 = v58;
    int v72 = memcmp((const void *)v62, v69, *((size_t *)&v62 + 1));
    unint64_t v61 = v82;
    uint64_t v58 = v83;
    if (!v72)
    {
      int v21 = 5;
      BOOL negate = 1;
      goto LABEL_143;
    }
LABEL_140:
    BOOL v65 = ++v60 < v61;
    if (v60 == v64)
    {
      int v21 = 0;
      goto LABEL_142;
    }
  }
  if (!v58)
  {
    BOOL negate = 1;
    if (v65) {
      goto LABEL_169;
    }
    goto LABEL_149;
  }
  p_s = &__s;
  uint64_t v71 = v58;
  do
  {
    if (p_s->__r_.__value_.__s.__data_[0] != v69->__r_.__value_.__s.__data_[0]) {
      goto LABEL_140;
    }
    p_s = (std::string *)((char *)p_s + 1);
    v69 = (std::string *)((char *)v69 + 1);
    --v71;
  }
  while (v71);
  BOOL negate = 1;
  int v21 = 5;
LABEL_142:
  if ((v58 & 0x80) != 0) {
LABEL_143:
  }
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v65) {
    goto LABEL_149;
  }
LABEL_145:
  if (v21)
  {
LABEL_169:
    uint64_t v8 = 2;
    goto LABEL_170;
  }
  uint64_t v8 = 2;
LABEL_36:
  unsigned __int8 v23 = *a2->__current_;
  v86.__r_.__value_.__s.__data_[0] = v23;
  if (this->__icase_)
  {
    unsigned __int8 v23 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v23);
    v86.__r_.__value_.__s.__data_[0] = v23;
  }
  std::vector<char>::pointer v24 = this->__chars_.__begin_;
  unint64_t v25 = this->__chars_.__end_ - v24;
  if (v25)
  {
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    while (1)
    {
      int v26 = *v24++;
      if (v26 == v23) {
        break;
      }
      if (!--v25) {
        goto LABEL_43;
      }
    }
LABEL_103:
    BOOL negate = 1;
    goto LABEL_170;
  }
LABEL_43:
  std::regex_traits<char>::char_class_type v27 = this->__neg_mask_;
  if (v27 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v23 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v23] & v27) == 0) {
      int v28 = (v23 == 95) & (v27 >> 7);
    }
    else {
      LOBYTE(v28) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v30 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v23, end - this->__neg_chars_.__begin_);
    uint64_t v31 = v30 ? v30 : end;
    if ((v28 & 1) == 0 && v31 == end) {
      goto LABEL_103;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v32 = this->__ranges_.__end_;
  if (v33 != v32)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v86, &v86.__r_.__value_.__s.__data_[1]);
      std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v32 = this->__ranges_.__end_;
    }
    else
    {
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v23;
    }
    uint64_t v34 = (char *)v32 - (char *)v33;
    if (v34)
    {
      unint64_t v35 = 0;
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v34 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v33, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v33->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v35;
        ++v33;
        if (v35 >= v36) {
          goto LABEL_64;
        }
      }
      char v37 = 1;
      BOOL negate = 1;
    }
    else
    {
LABEL_64:
      char v37 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v37) {
      goto LABEL_170;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_98;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v86, &v86.__r_.__value_.__s.__data_[1]);
  std::vector<std::string>::pointer v38 = this->__equivalences_.__begin_;
  uint64_t v39 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v40 = (char *)this->__equivalences_.__end_ - (char *)v38;
  if (!v40)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_98;
  }
  uint64_t v41 = 0;
  unint64_t v42 = v40 / 24;
  long long v43 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = __s.__r_.__value_.__l.__size_;
  }
  if (v42 <= 1) {
    uint64_t v45 = 1;
  }
  else {
    uint64_t v45 = v40 / 24;
  }
  BOOL v46 = 1;
  while (2)
  {
    v47 = &v38[v41];
    std::string::size_type v48 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
    int v49 = (char)v48;
    if ((v48 & 0x80u) != 0) {
      std::string::size_type v48 = v47->__r_.__value_.__l.__size_;
    }
    if (v44 != v48)
    {
LABEL_91:
      BOOL v46 = ++v41 < v42;
      if (v41 == v45)
      {
LABEL_92:
        if ((v39 & 0x80) == 0) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }
      continue;
    }
    break;
  }
  if (v49 >= 0) {
    unsigned int v50 = &v38[v41];
  }
  else {
    unsigned int v50 = (std::string *)v47->__r_.__value_.__r.__words[0];
  }
  if ((v39 & 0x80) != 0)
  {
    BOOL v81 = negate;
    std::string::size_type v53 = v44;
    v80 = v38;
    int v54 = memcmp((const void *)v43, v50, *((size_t *)&v43 + 1));
    std::vector<std::string>::pointer v38 = v80;
    std::string::size_type v44 = v53;
    BOOL negate = v81;
    if (!v54)
    {
      BOOL negate = 1;
LABEL_93:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_94;
    }
    goto LABEL_91;
  }
  if (v39)
  {
    unsigned int v51 = &__s;
    uint64_t v52 = v39;
    while (v51->__r_.__value_.__s.__data_[0] == v50->__r_.__value_.__s.__data_[0])
    {
      unsigned int v51 = (std::string *)((char *)v51 + 1);
      unsigned int v50 = (std::string *)((char *)v50 + 1);
      if (!--v52)
      {
        BOOL negate = 1;
        goto LABEL_92;
      }
    }
    goto LABEL_91;
  }
  BOOL negate = 1;
LABEL_94:
  if (!v46)
  {
LABEL_98:
    if (v86.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_170;
    }
    std::regex_traits<char>::char_class_type v55 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v86.__r_.__value_.__s.__data_[0]] & v55) == 0)
    {
      int v56 = (v55 >> 7) & 1;
      if (v86.__r_.__value_.__s.__data_[0] != 95) {
        int v56 = 0;
      }
      if (v56 != 1) {
        goto LABEL_170;
      }
    }
    goto LABEL_103;
  }
LABEL_170:
  if (negate == this->__negate_)
  {
    first = 0;
    int v79 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    int v79 = -995;
  }
  a2->__do_ = v79;
  a2->__node_ = first;
}

void sub_2227C4D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  size_t v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (void *)*a1;
    size_t v3 = v2;
  }
  size_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v5 = v4;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (v3 == v5) {
      return 0;
    }
    if (v3 >= v5) {
      return 1;
    }
  }
  return 255;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    int v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      unsigned char *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v7 = (char *)operator new(96 * v6);
  }
  else
  {
    int v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  uint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  signed int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::pair<std::string, std::string>>::pointer v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    signed int v15 = (char *)*a1;
    int v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v21);
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      unint64_t v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v13);
      uint64_t v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      std::vector<std::pair<std::string, std::string>>::pointer v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      uint64_t v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *uint64_t v18 = v20;
        uint64_t v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      int v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      std::string::size_type v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        std::string::size_type v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2227C51D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    uint64_t v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    uint64_t v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  uint64_t v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  uint64_t v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    uint64_t v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2227C53E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7 = a5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = a3;
  unint64_t v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
  {
    v164 = (const char *)(a3 - a2);
    __int16 v163 = a5;
    if (*(_DWORD *)(a1 + 28))
    {
      v165[0] = 0;
      v165[1] = 0;
      *(void *)&long long v166 = 0;
      uint64_t v12 = *(void *)(a1 + 40);
      if (v12)
      {
        __x.first = a3;
        __x.second = a3;
        __x.matched = 0;
        *(_DWORD *)v168 = 0;
        memset(&v168[8], 0, 48);
        *(_OWORD *)std::string __p = 0u;
        memset(v170, 0, 21);
        v165[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v165, (uint64_t)v168);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (*(void *)&v168[32]) {
          operator delete(*(void **)&v168[32]);
        }
        v150 = a4;
        uint64_t v13 = v165[1];
        *((_DWORD *)v165[1] - 24) = 0;
        *(v13 - 11) = v10;
        *(v13 - 10) = v10;
        v160 = v9;
        *(v13 - 9) = v9;
        std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v165[1] - 40), *(unsigned int *)(a1 + 32));
        v156 = 0;
        v158 = 0;
        uint64_t v152 = 0;
        uint64_t v153 = 0;
        v154 = 0;
        v155 = 0;
        uint64_t v14 = 0;
        char v15 = 0;
        unsigned int v16 = 0;
        std::vector<std::pair<unsigned long, const char *>>::pointer v17 = v165[1];
        *((void *)v165[1] - 2) = v12;
        *(v17 - 2) = v7;
        *((unsigned char *)v17 - 4) = a6;
        do
        {
          BOOL v18 = (++v16 & 0xFFF) != 0 || (int)(v16 >> 12) < (int)v164;
          if (!v18) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          std::pair<const char *, const char *> v20 = v17 - 4;
          uint64_t v19 = *((void *)v17 - 2);
          int v21 = v17 - 24;
          if (v19) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v19 + 16))(v19, v17 - 24);
          }
          switch(*(_DWORD *)v21)
          {
            case 0xFFFFFC18:
              std::string::size_type v22 = (const char *)*((void *)v17 - 10);
              if ((v163 & 0x20) != 0 && v22 == v10 || (v163 & 0x1000) != 0 && v22 != v160) {
                goto LABEL_21;
              }
              if ((v15 & ((uint64_t)v14 >= (uint64_t)&v22[-*((void *)v17 - 11)])) != 0)
              {
                uint64_t v29 = v158;
                std::vector<char>::pointer v30 = v154;
              }
              else
              {
                std::vector<std::pair<std::string, std::string>>::pointer v32 = (long long *)*((void *)v17 - 8);
                uint64_t v31 = (long long *)*((void *)v17 - 7);
                unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                uint64_t v34 = v158;
                v149 = &v22[-*((void *)v17 - 11)];
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - (uint64_t)v155) >> 3) >= v33)
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((v158 - v155) >> 3) >= v33)
                  {
                    if (v32 == v31)
                    {
                      BOOL v46 = v155;
                      v47 = v155;
                    }
                    else
                    {
                      BOOL v46 = v155;
                      v47 = v155;
                      do
                      {
                        *(_OWORD *)v47 = *v32;
                        v47[16] = *((unsigned char *)v32 + 16);
                        v47 += 24;
                        std::vector<std::pair<std::string, std::string>>::pointer v32 = (long long *)((char *)v32 + 24);
                      }
                      while (v32 != v31);
                    }
                    int64_t v45 = v47 - v46;
                    uint64_t v34 = v46;
                  }
                  else
                  {
                    uint64_t v41 = (long long *)((char *)v32 + 8 * ((v158 - v155) >> 3));
                    if (v158 != v155)
                    {
                      unint64_t v42 = v155;
                      do
                      {
                        *(_OWORD *)unint64_t v42 = *v32;
                        v42[16] = *((unsigned char *)v32 + 16);
                        std::vector<std::pair<std::string, std::string>>::pointer v32 = (long long *)((char *)v32 + 24);
                        v42 += 24;
                      }
                      while (v32 != v41);
                    }
                    long long v43 = v158;
                    while (v41 != v31)
                    {
                      long long v44 = *v41;
                      *((void *)v43 + 2) = *((void *)v41 + 2);
                      *(_OWORD *)long long v43 = v44;
                      v43 += 24;
                      uint64_t v41 = (long long *)((char *)v41 + 24);
                    }
                    int64_t v45 = v43 - v158;
                  }
                }
                else
                {
                  if (v155)
                  {
                    operator delete(v155);
                    uint64_t v153 = 0;
                  }
                  if (v33 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_220;
                  }
                  unint64_t v35 = 0x5555555555555556 * (v153 >> 3);
                  if (v35 <= v33) {
                    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                  }
                  unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v153 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v35;
                  if (v36 > 0xAAAAAAAAAAAAAAALL) {
LABEL_220:
                  }
                    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                  char v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v36);
                  uint64_t v34 = v37;
                  uint64_t v39 = v37;
                  while (v32 != v31)
                  {
                    long long v40 = *v32;
                    *((void *)v39 + 2) = *((void *)v32 + 2);
                    *(_OWORD *)uint64_t v39 = v40;
                    v39 += 24;
                    std::vector<std::pair<std::string, std::string>>::pointer v32 = (long long *)((char *)v32 + 24);
                  }
                  uint64_t v153 = (uint64_t)&v37[24 * v38];
                  int64_t v45 = v39 - v37;
                  v155 = v37;
                }
                int v49 = (char *)*((void *)v17 - 5);
                std::string::size_type v48 = (char *)*((void *)v17 - 4);
                unint64_t v50 = (v48 - v49) >> 4;
                if (v50 <= (v152 - (uint64_t)v156) >> 4)
                {
                  unint64_t v57 = (v154 - v156) >> 4;
                  if (v57 >= v50)
                  {
                    if (v49 == v48)
                    {
                      std::string::size_type v63 = v156;
                      long long v62 = v156;
                      uint64_t v14 = v149;
                    }
                    else
                    {
                      long long v62 = v156;
                      uint64_t v14 = v149;
                      do
                      {
                        *(void *)long long v62 = *(void *)v49;
                        *((void *)v62 + 1) = *((void *)v49 + 1);
                        v62 += 16;
                        v49 += 16;
                      }
                      while (v49 != v48);
                      std::string::size_type v63 = v156;
                    }
                    uint64_t v64 = (char *)(v62 - v63);
                    std::string::size_type v53 = v63;
                  }
                  else
                  {
                    uint64_t v58 = &v49[16 * v57];
                    if (v154 != v156)
                    {
                      int64_t v59 = v156;
                      do
                      {
                        *(void *)int64_t v59 = *(void *)v49;
                        *((void *)v59 + 1) = *((void *)v49 + 1);
                        v49 += 16;
                        v59 += 16;
                      }
                      while (v49 != v58);
                    }
                    uint64_t v14 = v149;
                    if (v58 == v48)
                    {
                      std::string::size_type v53 = v154;
                      uint64_t v60 = v154;
                    }
                    else
                    {
                      std::string::size_type v53 = v154;
                      uint64_t v60 = v154;
                      do
                      {
                        long long v61 = *(_OWORD *)v58;
                        v58 += 16;
                        *(_OWORD *)uint64_t v60 = v61;
                        v60 += 16;
                      }
                      while (v58 != v48);
                    }
                    uint64_t v64 = (char *)(v60 - v53);
                  }
                }
                else
                {
                  if (v156)
                  {
                    operator delete(v156);
                    uint64_t v152 = 0;
                  }
                  if (v48 - v49 < 0) {
                    goto LABEL_219;
                  }
                  uint64_t v51 = v152 >> 3;
                  if (v152 >> 3 <= v50) {
                    uint64_t v51 = (v48 - v49) >> 4;
                  }
                  unint64_t v52 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v51;
                  if (v52 >> 60) {
LABEL_219:
                  }
                    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                  std::string::size_type v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(v52);
                  std::regex_traits<char>::char_class_type v55 = v53;
                  if (v49 == v48)
                  {
                    uint64_t v14 = v149;
                  }
                  else
                  {
                    uint64_t v14 = v149;
                    do
                    {
                      long long v56 = *(_OWORD *)v49;
                      v49 += 16;
                      *(_OWORD *)std::regex_traits<char>::char_class_type v55 = v56;
                      v55 += 16;
                    }
                    while (v49 != v48);
                  }
                  uint64_t v152 = (uint64_t)&v53[16 * v54];
                  uint64_t v64 = (char *)(v55 - v53);
                  v156 = v53;
                }
                uint64_t v29 = &v34[v45];
                std::vector<char>::pointer v30 = &v64[(void)v53];
              }
              v158 = v29;
              BOOL v65 = v165[1];
              v154 = v30;
              if (v14 == v164)
              {
                uint64_t v66 = v165[0];
                while (v65 != v66)
                {
                  v65 -= 12;
                  std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v65);
                }
                v165[1] = v66;
                char v15 = 1;
                uint64_t v14 = v164;
              }
              else
              {
                std::string::size_type v67 = (char *)v165[1] - 96;
                std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v165[1] - 12);
                v165[1] = v67;
                char v15 = 1;
              }
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              break;
            case 0xFFFFFC1F:
LABEL_21:
              std::vector<std::csub_match>::pointer v23 = (char *)v165[1] - 96;
              std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v165[1] - 12);
              v165[1] = v23;
              break;
            case 0xFFFFFC20:
              long long v24 = *((_OWORD *)v17 - 5);
              *(_OWORD *)v168 = *v21;
              *(_OWORD *)&v168[16] = v24;
              memset(&v168[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v168[32], *((long long **)v17 - 8), *((long long **)v17 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v17 - 7) - *((void *)v17 - 8)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v170[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v17 - 5), *((long long **)v17 - 4), (uint64_t)(*((void *)v17 - 4) - *((void *)v17 - 5)) >> 4);
              uint64_t v25 = *v20;
              *(void *)((char *)&v170[1] + 5) = *(void *)((char *)v17 - 11);
              v170[1] = v25;
              (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v20 + 24))(*v20, 1, v17 - 24);
              (*(void (**)(void, void, unsigned char *))(*(void *)v170[1] + 24))(v170[1], 0, v168);
              std::vector<std::csub_match>::size_type v26 = (char *)v165[1];
              if (v165[1] >= (void *)v166)
              {
                v165[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v165, (uint64_t)v168);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v27 = *(_OWORD *)&v168[16];
                *(_OWORD *)v165[1] = *(_OWORD *)v168;
                *((_OWORD *)v26 + 1) = v27;
                *((void *)v26 + 4) = 0;
                *((void *)v26 + 5) = 0;
                *((void *)v26 + 6) = 0;
                *((void *)v26 + 7) = 0;
                *((_OWORD *)v26 + 2) = *(_OWORD *)&v168[32];
                *((void *)v26 + 6) = *(void *)&v168[48];
                memset(&v168[32], 0, 24);
                *((void *)v26 + 8) = 0;
                *((void *)v26 + 9) = 0;
                *(_OWORD *)(v26 + 56) = *(_OWORD *)__p;
                *((void *)v26 + 9) = v170[0];
                __p[0] = 0;
                __p[1] = 0;
                v170[0] = 0;
                uint64_t v28 = v170[1];
                *(void *)(v26 + 85) = *(void *)((char *)&v170[1] + 5);
                *((void *)v26 + 10) = v28;
                v165[1] = v26 + 96;
              }
              if (*(void *)&v168[32])
              {
                *(void *)&v168[40] = *(void *)&v168[32];
                operator delete(*(void **)&v168[32]);
              }
              break;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          std::vector<std::pair<unsigned long, const char *>>::pointer v17 = v165[1];
        }
        while (v165[0] != v165[1]);
        if (v15)
        {
          uint64_t v69 = *v150;
          *(void *)uint64_t v69 = v10;
          *(void *)(v69 + 8) = &v14[(void)v10];
          *(unsigned char *)(v69 + 16) = 1;
          AudioUnitParameterValue v70 = v155;
          if (v158 != v155)
          {
            uint64_t v71 = v155 + 16;
            unsigned int v72 = 1;
            do
            {
              uint64_t v73 = v69 + 24 * v72;
              *(_OWORD *)uint64_t v73 = *((_OWORD *)v71 - 1);
              char v74 = *v71;
              v71 += 24;
              *(unsigned char *)(v73 + 16) = v74;
              BOOL v18 = 0xAAAAAAAAAAAAAAABLL * ((v158 - v155) >> 3) > v72++;
            }
            while (v18);
          }
          uint64_t v75 = 1;
        }
        else
        {
          uint64_t v75 = 0;
          AudioUnitParameterValue v70 = v155;
        }
        if (v156) {
          operator delete(v156);
        }
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        uint64_t v75 = 0;
      }
      *(void *)v168 = v165;
      std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
    }
    else
    {
      long long v166 = 0u;
      int64x2_t v167 = 0u;
      *(_OWORD *)v165 = 0u;
      uint64_t v75 = *(void *)(a1 + 40);
      if (v75)
      {
        *(_DWORD *)v168 = 0;
        memset(&v168[8], 0, 48);
        *(_OWORD *)std::string __p = 0uLL;
        memset(v170, 0, 21);
        std::deque<std::__state<char>>::push_back(v165, (uint64_t)v168);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (*(void *)&v168[32]) {
          operator delete(*(void **)&v168[32]);
        }
        v151 = a4;
        AudioUnitParameterValue v76 = v165[1];
        unint64_t v77 = v167.i64[1] + v167.i64[0] - 1;
        unint64_t v78 = v77 / 0x2A;
        uint64_t v79 = *((void *)v165[1] + v77 / 0x2A);
        unint64_t v80 = 3 * (v77 % 0x2A);
        uint64_t v81 = v79 + 32 * v80;
        *(_DWORD *)uint64_t v81 = 0;
        *(void *)(v81 + 8) = v10;
        *(void *)(v76[v78] + 32 * v80 + 16) = v10;
        *(void *)(v76[v78] + 32 * v80 + 24) = v9;
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v76[v78] + 32 * v80 + 56), *(unsigned int *)(a1 + 32));
        char v159 = 0;
        unsigned int v82 = 0;
        uint64_t v83 = v167.i64[1];
        v84 = v165[1];
        unint64_t v85 = v167.i64[1] + v167.i64[0] - 1;
        unint64_t v86 = v85 / 0x2A;
        unint64_t v87 = 3 * (v85 % 0x2A);
        *(void *)(*((void *)v165[1] + v86) + 32 * v87 + 80) = v75;
        uint64_t v88 = v84[v86] + 32 * v87;
        *(_DWORD *)(v88 + 88) = v7;
        *(unsigned char *)(v88 + 92) = a6;
        v157 = 0;
        while (2)
        {
          if ((++v82 & 0xFFF) == 0 && (int)(v82 >> 12) >= (int)v164) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          unint64_t v90 = v83 + v167.i64[0] - 1;
          uint64_t v91 = *((void *)v165[1] + v90 / 0x2A);
          unint64_t v92 = v90 % 0x2A;
          uint64_t v93 = v91 + 96 * (v90 % 0x2A);
          v95 = (void *)(v93 + 80);
          uint64_t v94 = *(void *)(v93 + 80);
          if (v94) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v94 + 16))(v94, v91 + 96 * v92);
          }
          switch(*(_DWORD *)v93)
          {
            case 0xFFFFFC18:
              v96 = *(const char **)(v91 + 96 * v92 + 16);
              BOOL v97 = (v7 & 0x1000) == 0 || v96 == v9;
              char v98 = v97;
              BOOL v99 = v96 != v10 || (v7 & 0x20) == 0;
              if (!v99 || (v98 & 1) == 0) {
                goto LABEL_203;
              }
              uint64_t v100 = (uint64_t)&v96[-*(void *)(v91 + 96 * v92 + 8)];
              v101 = v157;
              if ((v159 & ((uint64_t)v157 >= v100)) == 0) {
                v101 = (char *)v100;
              }
              if (v101 != v164)
              {
                v157 = v101;
                std::deque<std::__state<char>>::pop_back(v165);
                char v159 = 1;
                goto LABEL_204;
              }
              v102 = (void **)v165[1];
              v103 = (unsigned char *)v166;
              if ((void *)v166 == v165[1])
              {
                v103 = v165[1];
              }
              else
              {
                v104 = v10;
                v105 = (char *)v165[1] + 8 * (v167.i64[0] / 0x2AuLL);
                v106 = (void *)(*v105 + 96 * (v167.i64[0] % 0x2AuLL));
                unint64_t v107 = *((void *)v165[1] + (v167.i64[1] + v167.i64[0]) / 0x2AuLL)
                     + 96 * ((v167.i64[1] + v167.i64[0]) % 0x2AuLL);
                if (v106 != (void *)v107)
                {
                  do
                  {
                    std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v106);
                    v106 += 12;
                    if ((void *)((char *)v106 - *v105) == (void *)4032)
                    {
                      v108 = (void *)v105[1];
                      ++v105;
                      v106 = v108;
                    }
                  }
                  while (v106 != (void *)v107);
                  v102 = (void **)v165[1];
                  v103 = (unsigned char *)v166;
                }
                unint64_t v10 = v104;
              }
              v167.i64[1] = 0;
              unint64_t v139 = v103 - (unsigned char *)v102;
              if (v139 >= 0x11)
              {
                do
                {
                  operator delete(*v102);
                  v102 = (void **)((char *)v165[1] + 8);
                  v165[1] = v102;
                  unint64_t v139 = v166 - (void)v102;
                }
                while ((void)v166 - (void)v102 > 0x10uLL);
              }
              if (v139 >> 3 == 1)
              {
                uint64_t v140 = 21;
              }
              else
              {
                if (v139 >> 3 != 2) {
                  goto LABEL_191;
                }
                uint64_t v140 = 42;
              }
              v167.i64[0] = v140;
LABEL_191:
              char v159 = 1;
              v157 = (char *)v164;
LABEL_204:
              uint64_t v83 = v167.i64[1];
              if (v167.i64[1]) {
                continue;
              }
              if (v159)
              {
                uint64_t v148 = *v151;
                *(void *)uint64_t v148 = v10;
                *(void *)(v148 + 8) = &v157[(void)v10];
                uint64_t v75 = 1;
                *(unsigned char *)(v148 + 16) = 1;
              }
              else
              {
                uint64_t v75 = 0;
              }
              break;
            case 0xFFFFFC19:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_204;
            case 0xFFFFFC1D:
              unint64_t v109 = v167.i64[0];
              v110 = (char *)v165[1];
              v111 = (char *)v166;
              if (!v167.i64[0])
              {
                unint64_t v114 = (uint64_t)(v166 - (unint64_t)v165[1]) >> 3;
                uint64_t v115 = 42 * v114 - 1;
                if ((void *)v166 == v165[1]) {
                  uint64_t v115 = 0;
                }
                if ((unint64_t)(v115 - v167.i64[1]) < 0x2A)
                {
                  if (v114 >= (uint64_t)(*((void *)&v166 + 1) - (unint64_t)v165[0]) >> 3)
                  {
                    if (*((void **)&v166 + 1) == v165[0]) {
                      unint64_t v116 = 1;
                    }
                    else {
                      unint64_t v116 = (uint64_t)(*((void *)&v166 + 1) - (unint64_t)v165[0]) >> 2;
                    }
                    *(void *)&v168[32] = (char *)&v166 + 8;
                    *(void *)v168 = std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v116);
                    *(void *)&v168[8] = *(void *)v168;
                    *(void *)&v168[16] = *(void *)v168;
                    *(void *)&v168[24] = *(void *)v168 + 8 * v117;
                    v162 = v10;
                    __x.first = (const char *)operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v168, &__x);
                    v118 = (uint64_t *)v165[1];
                    v119 = *(char **)&v168[16];
                    for (i = v9; v118 != (uint64_t *)v166; *(void *)&v168[16] += 8)
                    {
                      if (v119 == *(char **)&v168[24])
                      {
                        v120 = *(char **)&v168[8];
                        v121 = *(void **)v168;
                        if (*(void *)&v168[8] <= *(void *)v168)
                        {
                          if (v119 == *(char **)v168) {
                            unint64_t v128 = 1;
                          }
                          else {
                            unint64_t v128 = (uint64_t)&v119[-*(void *)v168] >> 2;
                          }
                          v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v128);
                          v131 = &v129[8 * (v128 >> 2)];
                          uint64_t v132 = v119 - v120;
                          BOOL v97 = v119 == v120;
                          v119 = v131;
                          std::vector<std::pair<unsigned long, const char *>>::size_type v9 = i;
                          if (!v97)
                          {
                            v119 = &v131[v132 & 0xFFFFFFFFFFFFFFF8];
                            uint64_t v133 = 8 * (v132 >> 3);
                            v134 = v131;
                            do
                            {
                              uint64_t v135 = *(void *)v120;
                              v120 += 8;
                              *(void *)v134 = v135;
                              v134 += 8;
                              v133 -= 8;
                            }
                            while (v133);
                          }
                          *(void *)v168 = v129;
                          *(void *)&v168[8] = v131;
                          *(void *)&v168[16] = v119;
                          *(void *)&v168[24] = &v129[8 * v130];
                          if (v121) {
                            operator delete(v121);
                          }
                        }
                        else
                        {
                          uint64_t v122 = (uint64_t)(*(void *)&v168[8] - *(void *)v168) >> 3;
                          if (v122 >= -1) {
                            uint64_t v123 = v122 + 1;
                          }
                          else {
                            uint64_t v123 = v122 + 2;
                          }
                          uint64_t v124 = *(void *)&v168[8] - 8 * (v123 >> 1);
                          size_t v125 = (size_t)&v119[-*(void *)&v168[8]];
                          if (v119 != *(char **)&v168[8])
                          {
                            v126 = (void *)(*(void *)&v168[8] - 8 * (v123 >> 1));
                            memmove(v126, *(const void **)&v168[8], v125);
                            uint64_t v124 = (uint64_t)v126;
                            v119 = v120;
                          }
                          v127 = &v119[-8 * (v123 >> 1)];
                          v119 = (char *)(v124 + v125);
                          *(void *)&v168[8] = v127;
                          *(void *)&v168[16] = v124 + v125;
                          std::vector<std::pair<unsigned long, const char *>>::size_type v9 = i;
                        }
                      }
                      uint64_t v136 = *v118++;
                      *(void *)v119 = v136;
                      v119 = (char *)(*(void *)&v168[16] + 8);
                    }
                    v137 = v165[0];
                    *(_OWORD *)v165 = *(_OWORD *)v168;
                    *(void *)&long long v166 = v119;
                    *((void *)&v166 + 1) = *(void *)&v168[24];
                    uint64_t v138 = 21;
                    if (&v119[-*(void *)&v168[8]] != (char *)8) {
                      uint64_t v138 = v167.i64[0] + 42;
                    }
                    v167.i64[0] = v138;
                    unint64_t v10 = v162;
                    if (v137) {
                      operator delete(v137);
                    }
                    LOWORD(v7) = v163;
                  }
                  else
                  {
                    if (v165[1] == v165[0])
                    {
                      *(void *)v168 = operator new(0xFC0uLL);
                      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v165, v168);
                      *(void *)v168 = *(void *)(v166 - 8);
                      *(void *)&long long v166 = v166 - 8;
                    }
                    else
                    {
                      *(void *)v168 = operator new(0xFC0uLL);
                    }
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v165, v168);
                    uint64_t v141 = 21;
                    if ((void)v166 - (unint64_t)v165[1] != 8) {
                      uint64_t v141 = v167.i64[0] + 42;
                    }
                    v167.i64[0] = v141;
                  }
                }
                else
                {
                  v167.i64[0] = 42;
                  *(void *)v168 = *(void *)(v166 - 8);
                  *(void *)&long long v166 = v166 - 8;
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v165, v168);
                }
                unint64_t v109 = v167.i64[0];
                v110 = (char *)v165[1];
                v111 = (char *)v166;
              }
              v142 = &v110[8 * (v109 / 0x2A)];
              unint64_t v143 = *(void *)v142 + 96 * (v109 % 0x2A);
              if (v111 == v110) {
                uint64_t v144 = 0;
              }
              else {
                uint64_t v144 = v143;
              }
              if (v144 == *(void *)v142) {
                uint64_t v144 = *((void *)v142 - 1) + 4032;
              }
              long long v145 = *(_OWORD *)(v93 + 16);
              *(_OWORD *)(v144 - 96) = *(_OWORD *)v93;
              *(_OWORD *)(v144 - 80) = v145;
              uint64_t v146 = v91 + 96 * v92;
              *(void *)(v144 - 56) = 0;
              *(void *)(v144 - 48) = 0;
              *(void *)(v144 - 64) = 0;
              *(_OWORD *)(v144 - 64) = *(_OWORD *)(v146 + 32);
              *(void *)(v144 - 48) = *(void *)(v146 + 48);
              *(void *)(v146 + 32) = 0;
              *(void *)(v146 + 40) = 0;
              *(void *)(v146 + 48) = 0;
              *(void *)(v144 - 40) = 0;
              *(void *)(v144 - 32) = 0;
              *(void *)(v144 - 24) = 0;
              *(_OWORD *)(v144 - 40) = *(_OWORD *)(v146 + 56);
              *(void *)(v144 - 24) = *(void *)(v146 + 72);
              *(void *)(v146 + 56) = 0;
              *(void *)(v146 + 64) = 0;
              *(void *)(v146 + 72) = 0;
              uint64_t v147 = *v95;
              *(void *)(v144 - 11) = *(void *)(v93 + 85);
              *(void *)(v144 - 16) = v147;
              int64x2_t v167 = vaddq_s64(v167, (int64x2_t)xmmword_222805860);
              goto LABEL_203;
            case 0xFFFFFC1F:
LABEL_203:
              std::deque<std::__state<char>>::pop_back(v165);
              goto LABEL_204;
            case 0xFFFFFC20:
              long long v112 = *(_OWORD *)(v93 + 16);
              *(_OWORD *)v168 = *(_OWORD *)v93;
              *(_OWORD *)&v168[16] = v112;
              memset(&v168[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v168[32], *(long long **)(v91 + 96 * v92 + 32), *(long long **)(v91 + 96 * v92 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v91 + 96 * v92 + 40) - *(void *)(v91 + 96 * v92 + 32)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v170[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v91 + 96 * v92 + 56), *(long long **)(v91 + 96 * v92 + 64), (uint64_t)(*(void *)(v91 + 96 * v92 + 64) - *(void *)(v91 + 96 * v92 + 56)) >> 4);
              uint64_t v113 = *v95;
              *(void *)((char *)&v170[1] + 5) = *(void *)(v93 + 85);
              v170[1] = v113;
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v95 + 24))(*v95, 1, v93);
              (*(void (**)(void, void, unsigned char *))(*(void *)v170[1] + 24))(v170[1], 0, v168);
              std::deque<std::__state<char>>::push_back(v165, (uint64_t)v168);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (*(void *)&v168[32])
              {
                *(void *)&v168[40] = *(void *)&v168[32];
                operator delete(*(void **)&v168[32]);
              }
              goto LABEL_204;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          break;
        }
      }
      std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v165);
    }
    return v75;
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
}

void sub_2227C6464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  operator delete(v37);
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

OpaqueAudioComponentInstance *rtaid::DetectorNode::resetSilenceAnalyzerErrorState(OpaqueAudioComponentInstance *this)
{
  if (this)
  {
    uint64_t v1 = this;
    AudioUnitSetParameter(this, 0, 0, 0, 0.0, 0);
    AudioUnitSetParameter(v1, 1u, 0, 0, 0.0, 0);
    AudioUnitSetParameter(v1, 2u, 0, 0, 0.0, 0);
    AudioUnitSetParameter(v1, 3u, 0, 0, 0.0, 0);
    return (OpaqueAudioComponentInstance *)AudioUnitSetParameter(v1, 6u, 0, 0, -1.0, 0);
  }
  return this;
}

void rtaid::DetectorNode::~DetectorNode(rtaid::DetectorNode *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  unint64_t v2 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = (void *)((char *)this + 8);
    if (*((char *)this + 31) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    int v7 = 136316418;
    long long v8 = "DetectorNode.cpp";
    __int16 v9 = 1024;
    int v10 = 72;
    __int16 v11 = 1040;
    int v12 = 19;
    __int16 v13 = 2080;
    uint64_t v14 = "rtaid::DetectorNode]";
    __int16 v15 = 2048;
    unsigned int v16 = this;
    __int16 v17 = 2080;
    BOOL v18 = v3;
    _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] destroyed %s", (uint8_t *)&v7, 0x36u);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (void *)*((void *)this + 27);
  if (v5)
  {
    *((void *)this + 28) = v5;
    operator delete(v5);
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = (void *)*((void *)this + 24);
  if (v6)
  {
    *((void *)this + 25) = v6;
    operator delete(v6);
  }
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 136);
  rtaid::NodeFormatConverter::~NodeFormatConverter((rtaid::DetectorNode *)((char *)this + 40));
  std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100]((OpaqueAudioComponentInstance **)this + 4, 0);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t AudioIssueDetectorSetNodeFormatWithDirection(unint64_t a1)
{
  SingletonManagerInstance();

  return rtaid::Manager::SetNodeFormatWithDirectionOnDetector(a1);
}

uint64_t rtaid::Manager::SetNodeFormatWithDirectionOnDetector(unint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  std::mutex::lock(&SingletonManagerInstance(void)::sInstance);
  unint64_t v2 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    uint64_t v5 = v2[3];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v5)
    {
      std::regex_traits<char>::regex_traits(&v6);
      uint64_t v9 = 0;
      long long v8 = 0u;
      long long v7 = 0u;
      std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
    }
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  std::mutex::unlock(&SingletonManagerInstance(void)::sInstance);
  return 0xFFFFFFFFLL;
}

void sub_2227C7A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, ...)
{
  va_start(va, a16);
  if (a16 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  std::mutex::unlock(&SingletonManagerInstance(void)::sInstance);
  _Unwind_Resume(a1);
}

uint64_t AudioIssueDetectorAnalyzeBuffer(unint64_t a1, unsigned int a2, char a3, const AudioBufferList *a4, unsigned int a5, const AudioTimeStamp *a6)
{
  SingletonManagerInstance();
  if (atomic_load((unsigned int *)&dword_26AB1A928)) {
    return 0;
  }
  __int16 v15 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v15) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v17 = v15[3];
  unsigned int v16 = (std::__shared_weak_count *)v15[4];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v17)
  {
    char v18 = 0;
    if (a2 == 49 && *(_DWORD *)v17 == 3)
    {
      unsigned __int8 v19 = atomic_load((unsigned __int8 *)&unk_26AB1A964);
      char v18 = v19 & 1;
    }
    uint64_t v13 = 0;
    if ((a3 & 1) == 0 && (v18 & 1) == 0)
    {
      uint64_t mNumberBuffers = a4->mNumberBuffers;
      if ((mNumberBuffers - 33) >= 0xFFFFFFE0)
      {
        unint64_t v21 = 0;
        uint64_t v22 = 16 * mNumberBuffers;
        while (a4->mBuffers[v21 / 0x10].mData && a4->mBuffers[v21 / 0x10].mDataByteSize)
        {
          v21 += 16;
          if (v22 == v21)
          {
            std::vector<std::csub_match>::pointer v23 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(v17 + 8), a2);
            if (!v23)
            {
              uint64_t v13 = 4294967294;
              goto LABEL_17;
            }
            long long v24 = v23;
            uint64_t v25 = v23 + 3;
            uint64_t v13 = rtaid::DetectorNode::AnalyzeABL((rtaid::DetectorNode *)v23[3], a6, a4, a5);
            v24[6] = *(void *)&a6->mSampleTime;
            if (v13) {
              goto LABEL_17;
            }
            unsigned int v26 = *((_DWORD *)v24 + 8);
            unsigned int v27 = *((_DWORD *)v24 + 9) + a5;
            *((_DWORD *)v24 + 9) = v27;
            if (v27 >= v26)
            {
              *((_DWORD *)v24 + 9) = v27 % v26;
              rtaid::Detector::checkAndResetAnalyzers(v17, v25);
            }
            break;
          }
        }
      }
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0xFFFFFFFFLL;
  }
LABEL_17:
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  return v13;
}

void sub_2227C7D54(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rtaid::Manager::UpdateReportingSessionsOnDetector(unint64_t a1, char **a2)
{
  std::mutex::lock(&SingletonManagerInstance(void)::sInstance);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v4)
  {
    uint64_t v17 = 0xFFFFFFFFLL;
    goto LABEL_64;
  }
  uint64_t v6 = v4[3];
  uint64_t v5 = (std::__shared_weak_count *)v4[4];
  uint64_t v44 = v6;
  int64_t v45 = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v7 = v5;
    if (v6) {
      goto LABEL_4;
    }
LABEL_18:
    uint64_t v17 = 0xFFFFFFFFLL;
    if (!v7) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  long long v7 = 0;
  if (!v6) {
    goto LABEL_18;
  }
LABEL_4:
  if ((char **)(v6 + 592) == a2) {
    goto LABEL_29;
  }
  long long v8 = *a2;
  uint64_t v9 = a2[1];
  int64_t v10 = v9 - *a2;
  unint64_t v11 = v10 >> 3;
  uint64_t v12 = *(void *)(v6 + 608);
  uint64_t v13 = *(char **)(v6 + 592);
  if (v10 >> 3 <= (unint64_t)((v12 - (uint64_t)v13) >> 3))
  {
    unsigned int v16 = (void **)(v6 + 600);
    char v18 = *(unsigned char **)(v6 + 600);
    unint64_t v19 = (v18 - v13) >> 3;
    if (v19 < v11)
    {
      std::pair<const char *, const char *> v20 = &v8[8 * v19];
      if (v18 != v13)
      {
        memmove(*(void **)(v6 + 592), v8, v18 - v13);
        uint64_t v13 = (char *)*v16;
      }
      int64_t v10 = v9 - v20;
      if (v9 == v20) {
        goto LABEL_28;
      }
      unint64_t v21 = v13;
      uint64_t v22 = v20;
      goto LABEL_27;
    }
  }
  else
  {
    if (v13)
    {
      *(void *)(v6 + 600) = v13;
      operator delete(v13);
      uint64_t v12 = 0;
      *(void *)(v6 + 592) = 0;
      *(void *)(v6 + 600) = 0;
      *(void *)(v6 + 608) = 0;
    }
    if (v10 < 0) {
      goto LABEL_65;
    }
    uint64_t v14 = v12 >> 2;
    if (v12 >> 2 <= v11) {
      uint64_t v14 = v10 >> 3;
    }
    unint64_t v15 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
    if (v15 >> 61) {
LABEL_65:
    }
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = (char *)operator new(8 * v15);
    *(void *)(v6 + 592) = v13;
    unsigned int v16 = (void **)(v6 + 600);
    *(void *)(v6 + 600) = v13;
    *(void *)(v6 + 608) = &v13[8 * v15];
  }
  if (v9 != v8)
  {
    unint64_t v21 = v13;
    uint64_t v22 = v8;
LABEL_27:
    memmove(v21, v22, v10);
  }
LABEL_28:
  *unsigned int v16 = &v13[v10];
LABEL_29:
  rtaid::ConfigurationManager::DetermineConfiguration((rtaid::ConfigurationManager *)qword_26AB1A988, (rtaid::Detector *)v6, 0);
  std::vector<std::csub_match>::pointer v23 = (rtaid *)qword_26AB1A988;
  if (v6 + 616 == qword_26AB1A988 + 72) {
    goto LABEL_51;
  }
  long long v24 = *(char **)(qword_26AB1A988 + 72);
  uint64_t v25 = *(unsigned char **)(qword_26AB1A988 + 80);
  size_t v26 = v25 - v24;
  unint64_t v27 = (v25 - v24) >> 1;
  unint64_t v28 = *(void *)(v6 + 632);
  uint64_t v29 = *(char **)(v6 + 616);
  if (v27 <= (uint64_t)(v28 - (void)v29) >> 1)
  {
    std::vector<std::pair<std::string, std::string>>::pointer v32 = (void **)(v6 + 624);
    uint64_t v34 = *(unsigned char **)(v6 + 624);
    unint64_t v35 = (v34 - v29) >> 1;
    if (v35 < v27)
    {
      unint64_t v36 = &v24[2 * v35];
      if (v34 != v29)
      {
        memmove(*(void **)(v6 + 616), v24, v34 - v29);
        uint64_t v29 = (char *)*v32;
      }
      size_t v26 = v25 - v36;
      if (v25 == v36) {
        goto LABEL_50;
      }
      char v37 = v29;
      uint64_t v38 = v36;
      goto LABEL_49;
    }
  }
  else
  {
    if (v29)
    {
      *(void *)(v6 + 624) = v29;
      operator delete(v29);
      unint64_t v28 = 0;
      *(void *)(v6 + 616) = 0;
      *(void *)(v6 + 624) = 0;
      *(void *)(v6 + 632) = 0;
    }
    if ((v26 & 0x8000000000000000) != 0
      || (v28 <= v27 ? (uint64_t v30 = (v25 - v24) >> 1) : (uint64_t v30 = v28),
          v28 >= 0x7FFFFFFFFFFFFFFELL ? (uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL) : (uint64_t v31 = v30),
          v31 < 0))
    {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(v31);
    *(void *)(v6 + 616) = v29;
    std::vector<std::pair<std::string, std::string>>::pointer v32 = (void **)(v6 + 624);
    *(void *)(v6 + 624) = v29;
    *(void *)(v6 + 632) = &v29[2 * v33];
  }
  if (v25 != v24)
  {
    char v37 = v29;
    uint64_t v38 = v24;
LABEL_49:
    memmove(v37, v38, v26);
  }
LABEL_50:
  *std::vector<std::pair<std::string, std::string>>::pointer v32 = &v29[v26];
  std::vector<std::csub_match>::pointer v23 = (rtaid *)qword_26AB1A988;
LABEL_51:
  if (*((unsigned char *)v23 + 117))
  {
    uint64_t v39 = *(_WORD **)(v6 + 616);
    long long v40 = *(_WORD **)(v6 + 624);
    float v41 = 10.0;
    if (v39 != v40)
    {
      while (*v39 == 13)
      {
        if (++v39 == v40) {
          goto LABEL_57;
        }
      }
      if (v39 != v40) {
        goto LABEL_58;
      }
LABEL_57:
      float v41 = 3.0;
    }
LABEL_58:
    if (*(float *)(v6 + 56) != v41)
    {
      *(float *)(v6 + 56) = v41;
      unint64_t v42 = *(uint64_t **)(v6 + 24);
      if (v42)
      {
        do
        {
          rtaid::Detector::checkAndResetAnalyzers(v6, v42 + 3);
          *((_DWORD *)v42 + 9) = 0;
          *((_DWORD *)v42 + 8) = (*((double *)v42 + 5) * *(float *)(v6 + 56));
          unint64_t v42 = (uint64_t *)*v42;
        }
        while (v42);
        std::vector<std::csub_match>::pointer v23 = (rtaid *)qword_26AB1A988;
        uint64_t v5 = v45;
      }
    }
  }
  rtaid::Manager::applyConfiguration(v23, (int8x8_t *)v6);
  rtaid::Manager::applyTelephonyResets(*(int **)(qword_26AB1A988 + 48), *(int **)(qword_26AB1A988 + 56), &v44);
  uint64_t v17 = 0;
  long long v7 = v5;
  if (v5) {
LABEL_63:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_64:
  std::mutex::unlock(&SingletonManagerInstance(void)::sInstance);
  return v17;
}

void sub_2227C80F4(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  std::mutex::unlock(&SingletonManagerInstance(void)::sInstance);
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(unint64_t a1)
{
  if (!qword_26AB1A900) {
    return 0;
  }
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)qword_26AB1A900);
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    unint64_t v2 = a1;
    if (qword_26AB1A900 <= a1) {
      unint64_t v2 = a1 % qword_26AB1A900;
    }
  }
  else
  {
    unint64_t v2 = (qword_26AB1A900 - 1) & a1;
  }
  i = *(void **)(qword_26AB1A8F8 + 8 * v2);
  if (i)
  {
    for (i = (void *)*i; i; i = (void *)*i)
    {
      unint64_t v4 = i[1];
      if (v4 == a1)
      {
        if (i[2] == a1) {
          return i;
        }
      }
      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= qword_26AB1A900) {
            v4 %= (unint64_t)qword_26AB1A900;
          }
        }
        else
        {
          v4 &= qword_26AB1A900 - 1;
        }
        if (v4 != v2) {
          return 0;
        }
      }
    }
  }
  return i;
}

void rtaid::Manager::applyTelephonyResets(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a1 == a2) {
    return;
  }
  uint64_t v5 = a1;
  *(int32x2_t *)((char *)&xmmword_26AB1A968 + 4) = vdup_n_s32(0xC2F00000);
  do
  {
    int v6 = *v5;
    if (*v5 == 2)
    {
      uint64_t v11 = *a3;
      uint64_t v10 = a3[1];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)qword_26AB1A958;
      qword_26AB1A950 = v11;
      qword_26AB1A958 = v10;
      if (v9) {
LABEL_13:
      }
        std::__shared_weak_count::__release_weak(v9);
    }
    else if (v6 == 1)
    {
      uint64_t v13 = *a3;
      uint64_t v12 = a3[1];
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)qword_26AB1A948;
      qword_26AB1A940 = v13;
      qword_26AB1A948 = v12;
      if (v9) {
        goto LABEL_13;
      }
    }
    else if (!v6)
    {
      uint64_t v8 = *a3;
      uint64_t v7 = a3[1];
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)qword_26AB1A938;
      qword_26AB1A930 = v8;
      qword_26AB1A938 = v7;
      if (v9) {
        goto LABEL_13;
      }
    }
    ++v5;
  }
  while (v5 != a2);
  if (qword_26AB1A948)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_26AB1A948);
    if (v14)
    {
      unint64_t v15 = v14;
      if (qword_26AB1A940) {
        rtaid::Detector::ResetTelephonyRMSState(*(uint64_t **)(qword_26AB1A940 + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  if (qword_26AB1A958)
  {
    unsigned int v16 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_26AB1A958);
    if (v16)
    {
      uint64_t v17 = v16;
      if (qword_26AB1A950) {
        rtaid::Detector::ResetTelephonyRMSState(*(uint64_t **)(qword_26AB1A950 + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  if (qword_26AB1A938)
  {
    char v18 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_26AB1A938);
    if (v18)
    {
      unint64_t v19 = v18;
      if (qword_26AB1A930) {
        rtaid::Detector::ResetTelephonyRMSState(*(uint64_t **)(qword_26AB1A930 + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  std::pair<const char *, const char *> v20 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEBUG))
  {
    int v21 = 136316162;
    uint64_t v22 = "AudioIssueDetectorManager.cpp";
    __int16 v23 = 1024;
    int v24 = 345;
    __int16 v25 = 1040;
    int v26 = 14;
    __int16 v27 = 2080;
    unint64_t v28 = "rtaid::Manager]";
    __int16 v29 = 2048;
    uint64_t v30 = &SingletonManagerInstance(void)::sInstance;
    _os_log_impl(&dword_2227C1000, v20, OS_LOG_TYPE_DEBUG, "[%s:%-5d %.*s:%p] reset all telephony detectors", (uint8_t *)&v21, 0x2Cu);
  }
}

void rtaid::ConfigurationManager::DetermineConfiguration(rtaid::ConfigurationManager *this, rtaid::Detector *a2, char a3)
{
  j = this;
  uint64_t v147 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 117) = 0;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 7) = *((void *)this + 6);
  *((void *)this + 10) = *((void *)this + 9);
  uint64_t v5 = (uint64_t **)((char *)this + 8);
  std::__tree<ADAM::EndPointBitMask>::destroy(*((void **)this + 1));
  *(void *)j = v5;
  *((void *)j + 2) = 0;
  *uint64_t v5 = 0;
  int v6 = (uint64_t *)((char *)j + 32);
  std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(*((void **)j + 4));
  *((void *)j + 3) = (char *)j + 32;
  *((void *)j + 4) = 0;
  *((void *)j + 5) = 0;
  {
    if (inserted)
    {
      qword_26AB1AA08 = 0;
      rtaid::ConfigurationManager::GetDefaultConfiguration(void)::sDefaultConfig = (uint64_t)&qword_26AB1AA08;
      qword_26AB1AA28 = 0;
      unk_26AB1AA20 = 0;
      qword_26AB1AA10 = 0;
      qword_26AB1AA18 = (uint64_t)&unk_26AB1AA20;
    }
  }
  if (rtaid::ConfigurationManager::GetDefaultConfiguration(void)::onceToken != -1) {
    dispatch_once(&rtaid::ConfigurationManager::GetDefaultConfiguration(void)::onceToken, &__block_literal_global_168);
  }
  unint64_t v139 = j;
  v137 = (uint64_t **)((char *)j + 24);
  if (j == (rtaid::ConfigurationManager *)&rtaid::ConfigurationManager::GetDefaultConfiguration(void)::sDefaultConfig) {
    goto LABEL_122;
  }
  uint64_t v8 = (uint64_t *)rtaid::ConfigurationManager::GetDefaultConfiguration(void)::sDefaultConfig;
  if (*((void *)j + 2))
  {
    uint64_t v9 = *(void *)j;
    uint64_t v10 = *((void *)j + 1);
    *(void *)j = v5;
    *(void *)(v10 + 16) = 0;
    *uint64_t v5 = 0;
    v5[1] = 0;
    if (*(void *)(v9 + 8)) {
      uint64_t v11 = *(void **)(v9 + 8);
    }
    else {
      uint64_t v11 = (void *)v9;
    }
    if (v11)
    {
      uint64_t v12 = std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next((uint64_t)v11);
      if (v8 == &qword_26AB1AA08)
      {
        uint64_t v8 = &qword_26AB1AA08;
      }
      else
      {
        uint64_t v13 = v11;
        uint64_t v14 = v8;
        do
        {
          uint64_t v11 = v12;
          unsigned int v15 = *((_DWORD *)v14 + 7);
          *((_DWORD *)v13 + 7) = v15;
          unsigned int v16 = *v5;
          uint64_t v17 = v5;
          char v18 = v5;
          if (*v5)
          {
            do
            {
              while (1)
              {
                uint64_t v17 = (uint64_t **)v16;
                if (v15 >= *((_DWORD *)v16 + 7)) {
                  break;
                }
                unsigned int v16 = (uint64_t *)*v16;
                char v18 = v17;
                if (!*v17) {
                  goto LABEL_18;
                }
              }
              unsigned int v16 = (uint64_t *)v16[1];
            }
            while (v16);
            char v18 = v17 + 1;
          }
LABEL_18:
          std::__tree<rtaid::AnalyzerType>::__insert_node_at((uint64_t **)j, (uint64_t)v17, v18, v13);
          if (v12) {
            uint64_t v12 = std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next((uint64_t)v12);
          }
          else {
            uint64_t v12 = 0;
          }
          unint64_t v19 = (uint64_t *)v14[1];
          if (v19)
          {
            do
            {
              uint64_t v8 = v19;
              unint64_t v19 = (uint64_t *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v8 = (uint64_t *)v14[2];
              BOOL v81 = *v8 == (void)v14;
              uint64_t v14 = v8;
            }
            while (!v81);
          }
          if (!v11) {
            break;
          }
          uint64_t v13 = v11;
          uint64_t v14 = v8;
        }
        while (v8 != &qword_26AB1AA08);
      }
      std::__tree<ADAM::EndPointBitMask>::destroy(v11);
      if (!v12) {
        goto LABEL_36;
      }
      for (i = (void *)v12[2]; i; i = (void *)i[2])
        uint64_t v12 = i;
      std::pair<const char *, const char *> v20 = v12;
    }
    else
    {
      std::pair<const char *, const char *> v20 = 0;
    }
    std::__tree<ADAM::EndPointBitMask>::destroy(v20);
  }
LABEL_36:
  char __p = a3;
  if (v8 != &qword_26AB1AA08)
  {
    do
    {
      uint64_t v22 = (uint64_t *)operator new(0x20uLL);
      unsigned int v23 = *((_DWORD *)v8 + 7);
      *((_DWORD *)v22 + 7) = v23;
      int v24 = *v5;
      __int16 v25 = v5;
      int v26 = v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            __int16 v25 = (uint64_t **)v24;
            if (v23 >= *((_DWORD *)v24 + 7)) {
              break;
            }
            int v24 = (uint64_t *)*v24;
            int v26 = v25;
            if (!*v25) {
              goto LABEL_43;
            }
          }
          int v24 = (uint64_t *)v24[1];
        }
        while (v24);
        int v26 = v25 + 1;
      }
LABEL_43:
      uint64_t inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__insert_node_at((uint64_t **)j, (uint64_t)v25, v26, v22);
      __int16 v27 = (uint64_t *)v8[1];
      if (v27)
      {
        do
        {
          unint64_t v28 = v27;
          __int16 v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          unint64_t v28 = (uint64_t *)v8[2];
          BOOL v81 = *v28 == (void)v8;
          uint64_t v8 = v28;
        }
        while (!v81);
      }
      uint64_t v8 = v28;
    }
    while (v28 != &qword_26AB1AA08);
  }
  uint64_t v29 = qword_26AB1AA18;
  if (*((void *)j + 5))
  {
    uint64_t v30 = (uint64_t **)((char *)j + 24);
    uint64_t v31 = *v137;
    void *v137 = v6;
    *(void *)(*v6 + 16) = 0;
    *int v6 = 0;
    *((void *)j + 5) = 0;
    if (v31[1]) {
      std::string::size_type size = v31[1];
    }
    else {
      std::string::size_type size = (std::string::size_type)v31;
    }
    v142.__r_.__value_.__r.__words[0] = (std::string::size_type)j + 24;
    v142.__r_.__value_.__l.__size_ = size;
    v142.__r_.__value_.__r.__words[2] = size;
    if (size)
    {
      v142.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next(size);
      if ((_UNKNOWN *)v29 == &unk_26AB1AA20)
      {
        uint64_t v58 = &unk_26AB1AA20;
      }
      else
      {
        do
        {
          if (size != v29)
          {
            uint64_t v33 = *(void **)(v29 + 32);
            uint64_t v34 = (void *)(v29 + 40);
            if (*(void *)(size + 48))
            {
              unint64_t v36 = (uint64_t **)(size + 40);
              uint64_t v35 = *(void *)(size + 40);
              uint64_t v37 = *(void *)(size + 32);
              *(void *)(size + 32) = size + 40;
              *(void *)(v35 + 16) = 0;
              *(void *)(size + 40) = 0;
              *(void *)(size + 48) = 0;
              if (*(void *)(v37 + 8)) {
                uint64_t v38 = *(uint64_t **)(v37 + 8);
              }
              else {
                uint64_t v38 = (uint64_t *)v37;
              }
              if (v38)
              {
                uint64_t v39 = std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next((uint64_t)v38);
                if (v33 == v34)
                {
                  float v41 = v38;
                }
                else
                {
                  long long v40 = v33;
                  do
                  {
                    float v41 = v39;
                    uint64_t v42 = *(void *)((char *)v40 + 28);
                    *(uint64_t *)((char *)v38 + 28) = v42;
                    long long v43 = *v36;
                    uint64_t v44 = (uint64_t **)(size + 40);
                    int64_t v45 = (uint64_t **)(size + 40);
                    if (*v36)
                    {
                      do
                      {
                        while (1)
                        {
                          uint64_t v44 = (uint64_t **)v43;
                          if (v42 >= *((_DWORD *)v43 + 7)) {
                            break;
                          }
                          long long v43 = (uint64_t *)*v43;
                          int64_t v45 = v44;
                          if (!*v44) {
                            goto LABEL_69;
                          }
                        }
                        long long v43 = (uint64_t *)v43[1];
                      }
                      while (v43);
                      int64_t v45 = v44 + 1;
                    }
LABEL_69:
                    std::__tree<rtaid::AnalyzerType>::__insert_node_at((uint64_t **)(size + 32), (uint64_t)v44, v45, v38);
                    if (v39) {
                      uint64_t v39 = std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next((uint64_t)v39);
                    }
                    else {
                      uint64_t v39 = 0;
                    }
                    BOOL v46 = (void *)v40[1];
                    if (v46)
                    {
                      do
                      {
                        uint64_t v33 = v46;
                        BOOL v46 = (void *)*v46;
                      }
                      while (v46);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v33 = (void *)v40[2];
                        BOOL v81 = *v33 == (void)v40;
                        long long v40 = v33;
                      }
                      while (!v81);
                    }
                    if (!v41) {
                      break;
                    }
                    uint64_t v38 = v41;
                    long long v40 = v33;
                  }
                  while (v33 != v34);
                }
                std::__tree<ADAM::EndPointBitMask>::destroy(v41);
                if (v39)
                {
                  v47 = (uint64_t *)v39[2];
                  for (j = v139; v47; v47 = (uint64_t *)v47[2])
                    uint64_t v39 = v47;
                  std::__tree<ADAM::EndPointBitMask>::destroy(v39);
                  uint64_t v30 = v137;
                }
                else
                {
                  j = v139;
                  uint64_t v30 = v137;
                }
              }
              else
              {
                std::__tree<ADAM::EndPointBitMask>::destroy(0);
                j = v139;
              }
            }
            if (v33 != v34)
            {
              std::string::size_type v48 = (uint64_t **)(size + 40);
              do
              {
                int v49 = (uint64_t *)operator new(0x28uLL);
                uint64_t v50 = *(void *)((char *)v33 + 28);
                *(uint64_t *)((char *)v49 + 28) = v50;
                uint64_t v51 = *v48;
                unint64_t v52 = (uint64_t **)(size + 40);
                std::string::size_type v53 = (uint64_t **)(size + 40);
                if (*v48)
                {
                  do
                  {
                    while (1)
                    {
                      unint64_t v52 = (uint64_t **)v51;
                      if (*((_DWORD *)v51 + 7) <= v50) {
                        break;
                      }
                      uint64_t v51 = (uint64_t *)*v51;
                      std::string::size_type v53 = v52;
                      if (!*v52) {
                        goto LABEL_95;
                      }
                    }
                    uint64_t v51 = (uint64_t *)v51[1];
                  }
                  while (v51);
                  std::string::size_type v53 = v52 + 1;
                }
LABEL_95:
                std::__tree<rtaid::AnalyzerType>::__insert_node_at((uint64_t **)(size + 32), (uint64_t)v52, v53, v49);
                uint64_t v54 = (void *)v33[1];
                if (v54)
                {
                  do
                  {
                    std::regex_traits<char>::char_class_type v55 = v54;
                    uint64_t v54 = (void *)*v54;
                  }
                  while (v54);
                }
                else
                {
                  do
                  {
                    std::regex_traits<char>::char_class_type v55 = (void *)v33[2];
                    BOOL v81 = *v55 == (void)v33;
                    uint64_t v33 = v55;
                  }
                  while (!v81);
                }
                uint64_t v33 = v55;
              }
              while (v55 != v34);
            }
          }
          leaf_high = (uint64_t **)std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__find_leaf_high((uint64_t)v30, &v145, (void **)(size + 32));
          std::__tree<rtaid::AnalyzerType>::__insert_node_at(v30, v145, leaf_high, (uint64_t *)size);
          std::string::size_type size = v142.__r_.__value_.__l.__size_;
          v142.__r_.__value_.__r.__words[2] = v142.__r_.__value_.__l.__size_;
          if (v142.__r_.__value_.__l.__size_) {
            v142.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next(v142.__r_.__value_.__l.__size_);
          }
          unint64_t v57 = *(void **)(v29 + 8);
          if (v57)
          {
            do
            {
              uint64_t v58 = v57;
              unint64_t v57 = (void *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              uint64_t v58 = *(void **)(v29 + 16);
              BOOL v81 = *v58 == v29;
              uint64_t v29 = (uint64_t)v58;
            }
            while (!v81);
          }
          if (!size) {
            break;
          }
          uint64_t v29 = (uint64_t)v58;
        }
        while (v58 != (void *)&unk_26AB1AA20);
      }
    }
    else
    {
      uint64_t v58 = (void *)v29;
    }
    uint64_t inserted = std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v142);
    uint64_t v29 = (uint64_t)v58;
  }
  else
  {
    uint64_t v30 = (uint64_t **)((char *)j + 24);
  }
  a3 = __p;
  if ((_UNKNOWN *)v29 != &unk_26AB1AA20)
  {
    do
    {
      std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__construct_node<std::map<rtaid::AnalyzerType,unsigned int> const&>((uint64_t)&v142, (uint64_t)v30, (void *)(v29 + 32));
      int64_t v59 = (uint64_t *)v142.__r_.__value_.__r.__words[0];
      uint64_t v60 = (uint64_t **)std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__find_leaf_high((uint64_t)v30, &v145, (void **)(v142.__r_.__value_.__r.__words[0] + 32));
      uint64_t inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__insert_node_at(v30, v145, v60, v59);
      long long v61 = *(void **)(v29 + 8);
      if (v61)
      {
        do
        {
          long long v62 = v61;
          long long v61 = (void *)*v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          long long v62 = *(void **)(v29 + 16);
          BOOL v81 = *v62 == v29;
          uint64_t v29 = (uint64_t)v62;
        }
        while (!v81);
      }
      uint64_t v29 = (uint64_t)v62;
    }
    while (v62 != (void *)&unk_26AB1AA20);
  }
LABEL_122:
  unsigned int v63 = *(_DWORD *)a2;
  uint64_t v140 = 0x400000003;
  if (v63 == 3)
  {
    uint64_t v64 = 0;
    goto LABEL_126;
  }
  if (v63 == 4)
  {
    uint64_t v64 = 1;
LABEL_126:
    BOOL v65 = (char *)((unint64_t)&v140 | (4 * v64));
    goto LABEL_128;
  }
  BOOL v65 = (char *)v141;
LABEL_128:
  if (v65 - (char *)&v140 == 8 || (a3 & 1) == 0)
  {
    uint64_t v66 = (void *)*((void *)a2 + 74);
    std::string::size_type v67 = (void *)*((void *)a2 + 75);
    if (v66 == v67)
    {
      uint64_t v71 = (unsigned __int16 *)*((void *)j + 10);
    }
    else
    {
      do
      {
        uint64_t inserted = (*(uint64_t (**)(void, void))(***((void ***)j + 12) + 16))(**((void **)j + 12), *v66);
        __int16 v68 = inserted;
        AudioUnitParameterValue v70 = (_WORD *)*((void *)j + 10);
        unint64_t v69 = *((void *)j + 11);
        if ((unint64_t)v70 >= v69)
        {
          uint64_t inserted = *((void *)j + 9);
          uint64_t v72 = (uint64_t)v70 - inserted;
          if ((uint64_t)v70 - inserted <= -3) {
            std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v73 = v72 >> 1;
          unint64_t v74 = v69 - inserted;
          if (v74 <= (v72 >> 1) + 1) {
            unint64_t v75 = v73 + 1;
          }
          else {
            unint64_t v75 = v74;
          }
          if (v74 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v76 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v76 = v75;
          }
          if (v76)
          {
            uint64_t v76 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(v76);
            uint64_t inserted = *((void *)j + 9);
            AudioUnitParameterValue v70 = (_WORD *)*((void *)j + 10);
          }
          else
          {
            uint64_t v77 = 0;
          }
          unint64_t v78 = (_WORD *)(v76 + 2 * v73);
          *unint64_t v78 = v68;
          uint64_t v71 = v78 + 1;
          while (v70 != (_WORD *)inserted)
          {
            __int16 v79 = *--v70;
            *--unint64_t v78 = v79;
          }
          *((void *)j + 9) = v78;
          *((void *)j + 10) = v71;
          *((void *)j + 11) = v76 + 2 * v77;
          if (inserted) {
            operator delete((void *)inserted);
          }
        }
        else
        {
          *AudioUnitParameterValue v70 = inserted;
          uint64_t v71 = v70 + 1;
        }
        *((void *)j + 10) = v71;
        ++v66;
      }
      while (v66 != v67);
    }
    unint64_t v80 = (unsigned __int16 *)*((void *)j + 9);
    BOOL v81 = v71 != v80 && v63 == 2;
    BOOL v82 = v81;
    *((unsigned char *)j + 115) = v82;
    if (v80 != v71)
    {
      while (1)
      {
        int v83 = *v80;
        if (v83 == 13 && v63 == 2) {
          goto LABEL_170;
        }
        *((unsigned char *)j + 115) = 0;
        if (v83 == 4) {
          break;
        }
        if (v83 != 2)
        {
          if (v83 == 1) {
            *((unsigned char *)j + 112) = 1;
          }
          goto LABEL_168;
        }
        BOOL v85 = 1;
LABEL_169:
        *((unsigned char *)j + 114) = v85;
LABEL_170:
        if (++v80 == v71) {
          goto LABEL_171;
        }
      }
      *((unsigned char *)j + 113) = 1;
LABEL_168:
      BOOL v85 = *((unsigned char *)j + 114) != 0;
      goto LABEL_169;
    }
  }
LABEL_171:
  switch(v63)
  {
    case 1u:
      if (*((unsigned char *)j + 114))
      {
        if (!*((unsigned char *)j + 118))
        {
          rtaid::Detector::GetNodeIDs((rtaid::Detector *)&v145, (uint64_t)a2);
          unint64_t v86 = v146;
          __pa = (void *)v145;
          if ((unsigned int *)v145 != v146)
          {
            for (k = (unsigned int *)v145; k != v86; ++k)
            {
              unsigned int v88 = *k;
              uint64_t v89 = *((void *)a2 + 1);
              unint64_t v90 = *((void *)a2 + 2);
              uint64_t v91 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(v89, v90, *k);
              if (v91) {
                int v92 = *(unsigned __int8 *)(v91[3] + 188);
              }
              else {
                int v92 = 0;
              }
              uint64_t v93 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(v89, v90, v88);
              if (v93)
              {
                uint64_t v94 = v93[3];
                if (*(char *)(v94 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(v94 + 8), *(void *)(v94 + 16));
                }
                else
                {
                  long long v95 = *(_OWORD *)(v94 + 8);
                  v142.__r_.__value_.__r.__words[2] = *(void *)(v94 + 24);
                  *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v95;
                }
                char v143 = 1;
                int64_t v97 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
                char v98 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
                if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                {
                  BOOL v99 = &v142;
                }
                else
                {
                  int64_t v97 = v142.__r_.__value_.__l.__size_;
                  BOOL v99 = (std::string *)v142.__r_.__value_.__r.__words[0];
                }
                if (v97 >= 8)
                {
                  uint64_t v100 = (char *)v99 + v97;
                  v101 = v99;
                  do
                  {
                    v102 = (char *)memchr(v101, 66, v97 - 7);
                    if (!v102) {
                      break;
                    }
                    if (*(void *)v102 == 0x646E616265736142)
                    {
                      BOOL v96 = v102 != v100 && v102 - (char *)v99 != -1;
                      if ((v92 == 1) != v96) {
                        goto LABEL_195;
                      }
                      goto LABEL_237;
                    }
                    v101 = (std::string *)(v102 + 1);
                    int64_t v97 = v100 - (char *)v101;
                  }
                  while (v100 - (char *)v101 > 7);
                }
                if (v92 != 1)
                {
LABEL_237:
                  if (v98 < 0) {
                    operator delete(v142.__r_.__value_.__l.__data_);
                  }
                  continue;
                }
                LOBYTE(v96) = 0;
              }
              else
              {
                LOBYTE(v96) = 0;
                v142.__r_.__value_.__s.__data_[0] = 0;
                char v143 = 0;
                if (v92 != 1) {
                  continue;
                }
              }
LABEL_195:
              v144[0] = 5;
              v144[1] = *k;
              std::map<rtaid::AnalyzerType,unsigned int>::map[abi:ne180100]((uint64_t *)v141, v144, 1);
              std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__emplace_unique_key_args<std::map<rtaid::AnalyzerType,unsigned int>,std::map<rtaid::AnalyzerType,unsigned int> const&>((uint64_t)v137, v141, v141);
              char v103 = v92 != 1 || v96;
              v105 = (char *)*((void *)v139 + 7);
              unint64_t v104 = *((void *)v139 + 8);
              if (v103)
              {
                if ((unint64_t)v105 < v104)
                {
                  *(_DWORD *)v105 = 1;
                  v106 = v105 + 4;
LABEL_203:
                  unint64_t v107 = v106;
                  goto LABEL_236;
                }
                v108 = (char *)*((void *)v139 + 6);
                uint64_t v109 = (v105 - v108) >> 2;
                unint64_t v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 62) {
                  std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v111 = v104 - (void)v108;
                if (v111 >> 1 > v110) {
                  unint64_t v110 = v111 >> 1;
                }
                BOOL v112 = (unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v112) {
                  unint64_t v113 = v110;
                }
                if (v113)
                {
                  unint64_t v113 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(v113);
                  v108 = (char *)*((void *)v139 + 6);
                  v105 = (char *)*((void *)v139 + 7);
                }
                else
                {
                  uint64_t v114 = 0;
                }
                v119 = (_DWORD *)(v113 + 4 * v109);
                _DWORD *v119 = 1;
                unint64_t v107 = v119 + 1;
                while (v105 != v108)
                {
                  int v120 = *((_DWORD *)v105 - 1);
                  v105 -= 4;
                  *--v119 = v120;
                }
              }
              else
              {
                if ((unint64_t)v105 < v104)
                {
                  *(_DWORD *)v105 = 2;
                  v106 = v105 + 4;
                  goto LABEL_203;
                }
                v108 = (char *)*((void *)v139 + 6);
                uint64_t v115 = (v105 - v108) >> 2;
                unint64_t v116 = v115 + 1;
                if ((unint64_t)(v115 + 1) >> 62) {
                  std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v117 = v104 - (void)v108;
                if (v117 >> 1 > v116) {
                  unint64_t v116 = v117 >> 1;
                }
                BOOL v112 = (unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v112) {
                  unint64_t v113 = v116;
                }
                if (v113)
                {
                  unint64_t v113 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(v113);
                  v108 = (char *)*((void *)v139 + 6);
                  v105 = (char *)*((void *)v139 + 7);
                }
                else
                {
                  uint64_t v114 = 0;
                }
                v119 = (_DWORD *)(v113 + 4 * v115);
                _DWORD *v119 = 2;
                unint64_t v107 = v119 + 1;
                while (v105 != v108)
                {
                  int v121 = *((_DWORD *)v105 - 1);
                  v105 -= 4;
                  *--v119 = v121;
                }
              }
              *((void *)v139 + 6) = v119;
              *((void *)v139 + 7) = v107;
              *((void *)v139 + 8) = v113 + 4 * v114;
              if (v108) {
                operator delete(v108);
              }
LABEL_236:
              *((void *)v139 + 7) = v107;
              std::__tree<ADAM::EndPointBitMask>::destroy(v141[1]);
              char v98 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
              if (v143) {
                goto LABEL_237;
              }
            }
          }
          uint64_t inserted = (uint64_t)__pa;
          if (__pa) {
            operator delete(__pa);
          }
          j = v139;
        }
      }
      else if (!*((unsigned char *)j + 118))
      {
        uint64_t inserted = (*(uint64_t (**)(void))(**(void **)(*((void *)j + 12) + 32) + 16))(*(void *)(*((void *)j + 12) + 32));
        if (inserted) {
          goto LABEL_250;
        }
      }
LABEL_268:
      if (*((unsigned char *)j + 114))
      {
        if (!*((unsigned char *)j + 118))
        {
          uint64_t inserted = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults((rtaid::ConfigurationManager *)inserted);
          if ((inserted & 1) == 0) {
            uint64_t inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 1u, 1);
          }
          if (((v63 < 9) & (0x10Cu >> v63)) != 0) {
            uint64_t inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 6u, 6);
          }
        }
      }
      else if (*((unsigned char *)j + 113))
      {
        uint64_t inserted = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults((rtaid::ConfigurationManager *)inserted);
        if ((inserted & 1) == 0 && !*((unsigned char *)j + 118))
        {
          std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 1u, 1);
          uint64_t inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 6u, 6);
        }
      }
      else if (*((unsigned char *)j + 112))
      {
        rtaid::ConfigurationManager::addSiriConfiguration(j, a2);
      }
      int v134 = *((unsigned __int8 *)j + 115);
      if (*((unsigned char *)j + 115))
      {
        if (!rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults((rtaid::ConfigurationManager *)inserted))
        {
          std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 1u, 1);
          std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 6u, 6);
        }
        int v134 = *((unsigned __int8 *)j + 115);
      }
      if (v63 == 2 && v134 != *((unsigned __int8 *)j + 116))
      {
        *((unsigned char *)j + 116) = v134;
        *((unsigned char *)j + 117) = 1;
      }
      return;
    case 3u:
      *((unsigned char *)j + 114) = 1;
      goto LABEL_268;
    case 4u:
      rtaid::ConfigurationManager::addSiriConfiguration(j, a2);
      goto LABEL_268;
    case 7u:
      if (*((unsigned char *)j + 114) && !*((unsigned char *)j + 118))
      {
        uint64_t v145 = 0x300000005;
        std::map<rtaid::AnalyzerType,unsigned int>::map[abi:ne180100]((uint64_t *)&v142, (unsigned int *)&v145, 1);
        std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__emplace_unique_key_args<std::map<rtaid::AnalyzerType,unsigned int>,std::map<rtaid::AnalyzerType,unsigned int> const&>((uint64_t)v137, &v142, &v142);
        uint64_t v123 = (char *)*((void *)j + 7);
        unint64_t v122 = *((void *)j + 8);
        if ((unint64_t)v123 >= v122)
        {
          size_t v125 = (char *)*((void *)j + 6);
          uint64_t v126 = (v123 - v125) >> 2;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 62) {
            std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v128 = v122 - (void)v125;
          if (v128 >> 1 > v127) {
            unint64_t v127 = v128 >> 1;
          }
          BOOL v112 = (unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v129 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v112) {
            unint64_t v129 = v127;
          }
          if (v129)
          {
            unint64_t v129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(v129);
            size_t v125 = (char *)*((void *)j + 6);
            uint64_t v123 = (char *)*((void *)j + 7);
          }
          else
          {
            uint64_t v130 = 0;
          }
          v131 = (_DWORD *)(v129 + 4 * v126);
          unint64_t v132 = v129 + 4 * v130;
          _DWORD *v131 = 0;
          uint64_t v124 = v131 + 1;
          while (v123 != v125)
          {
            int v133 = *((_DWORD *)v123 - 1);
            v123 -= 4;
            *--v131 = v133;
          }
          *((void *)j + 6) = v131;
          *((void *)j + 7) = v124;
          *((void *)j + 8) = v132;
          if (v125) {
            operator delete(v125);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v123 = 0;
          uint64_t v124 = v123 + 4;
        }
        *((void *)j + 7) = v124;
        std::__tree<ADAM::EndPointBitMask>::destroy((void *)v142.__r_.__value_.__l.__size_);
      }
      goto LABEL_268;
    case 8u:
      if (!*((unsigned char *)j + 118)) {
LABEL_250:
      }
        uint64_t inserted = (uint64_t)std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>((uint64_t *)j, 6u, 6);
      goto LABEL_268;
    default:
      goto LABEL_268;
  }
}

void sub_2227C9360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, void *a18, char a19, int a20,__int16 a21,char a22,char a23)
{
}

void std::__tree<ADAM::EndPointBitMask>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<ADAM::EndPointBitMask>::destroy(*a1);
    std::__tree<ADAM::EndPointBitMask>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t *std::__tree<rtaid::AnalyzerType>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      unint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(*a1);
    std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(a1[1]);
    std::__tree<ADAM::EndPointBitMask>::destroy((void *)a1[5]);
    operator delete(a1);
  }
}

uint64_t AudioIssueDetectorUpdateReportingSessions(unint64_t a1, char **a2)
{
  SingletonManagerInstance();

  return rtaid::Manager::UpdateReportingSessionsOnDetector(a1, a2);
}

void SingletonManagerInstance(void)
{
  {
      std::make_unique[abi:ne180100]<AudioIssueDetectorDependencyInjection>();
  }
}

void sub_2227C975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  if (a10) {
    std::default_delete<AudioIssueDetectorDependencyInjection>::operator()[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t rtaid::DetectorNode::AnalyzeABL(rtaid::DetectorNode *this, const AudioTimeStamp *a2, const AudioBufferList *a3, unsigned int a4)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 42) > 3u) {
    return 0;
  }
  char v6 = 0;
  atomic_compare_exchange_strong((atomic_uchar *volatile)this + 408, (unsigned __int8 *)&v6, 1u);
  if (v6)
  {
    uint64_t v39 = *((unsigned int *)this + 42);
    uint64_t v4 = 4294967292;
    if (v39 <= 3)
    {
      *((_DWORD *)this + 42) = v39 + 1;
      *((_DWORD *)this + v39 + 43) = -4;
    }
  }
  else
  {
    if (!*((unsigned char *)this + 4)
      || (unsigned int v7 = a4,
          long long v8 = *(_OWORD *)&a2->mRateScalar,
          *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)&a2->mSampleTime,
          *(_OWORD *)&inTimeStamp.mRateScalar = v8,
          long long v9 = *(_OWORD *)&a2->mSMPTETime.mHours,
          *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes,
          *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v9,
          !a4))
    {
      uint64_t v4 = 0;
      goto LABEL_49;
    }
    int v11 = 0;
    std::string::size_type v48 = (char *)this + 172;
    p_mData = &a3->mBuffers[0].mData;
    while (1)
    {
      uint64_t v12 = v7 >= 0x400 ? 1024 : v7;
      uint64_t mNumberBuffers = a3->mNumberBuffers;
      MEMORY[0x270FA5388]();
      unsigned int v15 = (char *)&v48 - v14;
      bzero((char *)&v48 - v14, v16);
      *(_DWORD *)unsigned int v15 = mNumberBuffers;
      if (mNumberBuffers) {
        break;
      }
LABEL_14:
      unsigned int v23 = (OpaqueAudioConverter *)*((void *)this + 16);
      if (v23)
      {
        uint64_t v24 = *((void *)this + 17);
        uint64_t v25 = *(unsigned int *)(v24 + 48);
        if (*(_DWORD *)(v24 + 48))
        {
          int v26 = 4 * *(_DWORD *)this;
          __int16 v27 = (_DWORD *)(v24 + 60);
          do
          {
            *__int16 v27 = v26 * *(v27 - 1);
            v27 += 4;
            --v25;
          }
          while (v25);
        }
        uint64_t v4 = AudioConverterConvertComplexBuffer(v23, v12, (const AudioBufferList *)v15, (AudioBufferList *)(v24 + 48));
        if (v4)
        {
          {
            rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
          }
          uint64_t v42 = rtaid::get_log(void)::rtaid_os_log;
          if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_ERROR))
          {
            long long v43 = (void *)((char *)this + 8);
            if (*((char *)this + 31) < 0) {
              long long v43 = (void *)*v43;
            }
            int v44 = *((_DWORD *)v15 + 3);
            int v45 = *(_DWORD *)v15;
            int v46 = *(_DWORD *)(v24 + 60);
            int v47 = *(_DWORD *)(v24 + 48);
            float __C = 4.8162e-34;
            std::string::size_type v53 = "DetectorNode.cpp";
            __int16 v54 = 1024;
            int v55 = 509;
            __int16 v56 = 1040;
            int v57 = 19;
            __int16 v58 = 2080;
            int64_t v59 = "rtaid::DetectorNode]";
            __int16 v60 = 2048;
            long long v61 = this;
            __int16 v62 = 1024;
            int v63 = v4;
            __int16 v64 = 2080;
            BOOL v65 = v43;
            __int16 v66 = 1024;
            int v67 = v12;
            __int16 v68 = 1024;
            int v69 = v44;
            __int16 v70 = 1024;
            int v71 = v45;
            __int16 v72 = 1024;
            int v73 = v46;
            __int16 v74 = 1024;
            int v75 = v47;
            _os_log_impl(&dword_2227C1000, v42, OS_LOG_TYPE_ERROR, "[%s:%-5d %.*s:%p] Caught converter error (%d) at %s, %d frames (%d %d) vs (%d %d)\n", (uint8_t *)&__C, 0x5Au);
          }
          unsigned int v40 = *((_DWORD *)this + 42);
          if (v40 > 3) {
            goto LABEL_49;
          }
LABEL_48:
          *((_DWORD *)this + 42) = v40 + 1;
          *(_DWORD *)&v48[4 * v40] = v4;
          goto LABEL_49;
        }
        if (*((void *)this + 16)) {
          unsigned int v15 = (char *)(*((void *)this + 17) + 48);
        }
      }
      if (*((unsigned char *)this + 164) || *((unsigned char *)this + 157) || *((unsigned char *)this + 165) || *((unsigned char *)this + 158))
      {
        if (*((void *)this + 25) != *((void *)this + 24))
        {
          unint64_t v28 = 0;
          uint64_t v29 = (const float *)*((void *)v15 + 2);
          uint64_t v30 = v15 + 8;
          do
          {
            float __C = 0.0;
            uint64_t v31 = v15 + 8;
            std::vector<std::pair<std::string, std::string>>::pointer v32 = v29;
            if (!*((unsigned char *)this + 240))
            {
              std::vector<std::pair<std::string, std::string>>::pointer v32 = (const float *)*((void *)v30 + 1);
              uint64_t v31 = v30;
            }
            vDSP_svesq(v32, *(unsigned int *)v31, &__C, v12);
            *(float *)(*((void *)this + 24) + 4 * v28) = __C + *(float *)(*((void *)this + 24) + 4 * v28);
            float v51 = 0.0;
            uint64_t v33 = v15 + 8;
            uint64_t v34 = v29;
            if (!*((unsigned char *)this + 240))
            {
              uint64_t v34 = (const float *)*((void *)v30 + 1);
              uint64_t v33 = v30;
            }
            vDSP_maxmgv(v34, *(unsigned int *)v33, &v51, v12);
            uint64_t v35 = *((void *)this + 27);
            if (v51 > *(float *)(v35 + 4 * v28)) {
              *(float *)(v35 + 4 * v28) = v51;
            }
            if (!v28)
            {
              *((unsigned char *)this + 256) = 0;
              *((_DWORD *)this + 62) = 0;
            }
            ++v29;
            ++v28;
            v30 += 16;
          }
          while (v28 < (uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 2);
        }
        *((_DWORD *)this + 61) += v12;
      }
      unint64_t v36 = (OpaqueAudioComponentInstance *)*((void *)this + 4);
      if (v36)
      {
        uint64_t v37 = AudioUnitProcess(v36, 0, &inTimeStamp, v12, (AudioBufferList *)v15);
        uint64_t v4 = v37;
        if (v37)
        {
          uint64_t v38 = *((unsigned int *)this + 42);
          if (v38 <= 3)
          {
            *((_DWORD *)this + 42) = v38 + 1;
            *(_DWORD *)&v48[4 * v38] = v37;
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      v11 += v12;
      inTimeStamp.mSampleTime = inTimeStamp.mSampleTime + (double)v12;
      v7 -= v12;
      if (!v7) {
        goto LABEL_49;
      }
    }
    int v17 = *((_DWORD *)this + 16);
    unsigned int v18 = v17 * v12;
    uint64_t v19 = (v11 * v17);
    std::pair<const char *, const char *> v20 = v15 + 16;
    int v21 = p_mData;
    while (1)
    {
      unsigned int v22 = *((_DWORD *)v21 - 1);
      *((_DWORD *)v20 - 2) = *((_DWORD *)v21 - 2);
      *((_DWORD *)v20 - 1) = v18;
      *std::pair<const char *, const char *> v20 = (char *)*v21 + v19;
      if (v18 > v22) {
        break;
      }
      v21 += 2;
      v20 += 2;
      if (!--mNumberBuffers) {
        goto LABEL_14;
      }
    }
    unsigned int v40 = *((_DWORD *)this + 42);
    uint64_t v4 = 4294967246;
    if (v40 < 4) {
      goto LABEL_48;
    }
LABEL_49:
    atomic_store(0, (unsigned __int8 *)this + 408);
  }
  return v4;
}

void sub_2227C9C74(_Unwind_Exception *a1)
{
  atomic_store(0, (unsigned __int8 *)(v1 + 408));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t v4 = (uint64_t **)result;
  char v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        char v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        char v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = (uint64_t **)(result + 1);
LABEL_9:
    long long v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<rtaid::AnalyzerType>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t FeatureFlagSPIImplementation::IsAudioDSPHALRMSDetectionOn(FeatureFlagSPIImplementation *this)
{
  return _os_feature_enabled_impl();
}

uint64_t AudioStatisticsSPIImplementation::GetAudioServiceType(AudioStatisticsSPIImplementation *this, uint64_t a2)
{
  if (AudioStatisticsLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_187);
  }
  if (AudioStatisticsLibraryLoader(void)::libSym) {
    return AudioStatisticsLibraryLoader(void)::libSym(a2);
  }
  else {
    return 0xFFFFLL;
  }
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  uint64_t v12 = *(char **)a1;
  uint64_t v13 = *(char **)(a1 + 8);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(void *)a1] >> 3);
  unint64_t v15 = v11 - v14;
  if (v11 <= v14)
  {
    unsigned int v22 = *(char **)(a1 + 8);
    if (v11 >= v14) {
      goto LABEL_22;
    }
    unsigned int v22 = &v12[8 * ((a4[1] - *a4) >> 3)];
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3) >= v15)
  {
    unsigned int v22 = &v13[24 * v15];
    uint64_t v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v13[-*(void *)a1] >> 3);
    do
    {
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      v13[16] = 0;
      v13 += 24;
      v27 -= 24;
    }
    while (v27);
LABEL_21:
    *(void *)(a1 + 8) = v22;
    goto LABEL_22;
  }
  if (v11 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3);
  uint64_t v18 = 2 * v17;
  if (2 * v17 <= v11) {
    uint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  }
  if (v17 >= 0x555555555555555) {
    unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v19 = v18;
  }
  if (v19 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  std::pair<const char *, const char *> v20 = (char *)operator new(24 * v19);
  int v21 = &v20[24 * v14];
  unsigned int v22 = &v20[24 * v11];
  unsigned int v23 = v21;
  uint64_t v24 = 24 * v11 - 24 * v14;
  do
  {
    *(void *)unsigned int v23 = 0;
    *((void *)v23 + 1) = 0;
    v23[16] = 0;
    v23 += 24;
    v24 -= 24;
  }
  while (v24);
  uint64_t v25 = *(char **)a1;
  if (v13 != *(char **)a1)
  {
    do
    {
      long long v26 = *(_OWORD *)(v13 - 24);
      *((void *)v21 - 1) = *((void *)v13 - 1);
      *(_OWORD *)(v21 - 24) = v26;
      v21 -= 24;
      v13 -= 24;
    }
    while (v13 != v25);
    uint64_t v13 = *(char **)a1;
  }
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v22;
  *(void *)(a1 + 16) = &v20[24 * v19];
  if (v13)
  {
    operator delete(v13);
    unsigned int v22 = *(char **)(a1 + 8);
  }
LABEL_22:
  unint64_t v28 = *(char **)a1;
  if (v22 != *(char **)a1)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    uint64_t v32 = *a4;
    uint64_t v31 = a4[1];
    do
    {
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3);
      uint64_t v34 = (void *)(v32 + v29);
      if (v33 <= v30) {
        uint64_t v35 = a4 + 3;
      }
      else {
        uint64_t v35 = v34;
      }
      *(void *)&v28[v29] = a2 + *v35 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v30) {
        unint64_t v36 = a4 + 3;
      }
      else {
        unint64_t v36 = (uint64_t *)(*a4 + v29);
      }
      *(void *)(*(void *)a1 + v29 + 8) = a2 + v36[1] - v10;
      uint64_t v32 = *a4;
      uint64_t v31 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v31 - *a4) >> 3) <= v30) {
        uint64_t v37 = a4 + 3;
      }
      else {
        uint64_t v37 = (uint64_t *)(*a4 + v29);
      }
      char v38 = *((unsigned char *)v37 + 16);
      unint64_t v28 = *(char **)a1;
      uint64_t v39 = *(void *)(a1 + 8);
      *(unsigned char *)(*(void *)a1 + v29 + 16) = v38;
      ++v30;
      v29 += 24;
    }
    while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v28) >> 3));
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v40 = a2 + a4[6] - v10;
  *(void *)(a1 + 48) = v40;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 80) = a2 + a4[10] - v10;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = v40;
  }
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a4 + 96);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  unint64_t v2 = (const std::locale *)MEMORY[0x223C9D6D0]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x263F8C130]);
  return this;
}

void sub_2227CA138(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unsigned int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_2227CA620(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = p_match->__matches_.__end_;
  long long v9 = &__x->__match_;
  std::vector<std::ssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  unsigned int v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    ExtendedAudioBufferList_Destroy();
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::erase(void *a1, rtaid::DetectorNode **a2)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  unint64_t v4 = (unint64_t)a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  std::string::size_type v6 = *(rtaid::DetectorNode ***)(*a1 + 8 * v4);
  do
  {
    std::vector<std::ssub_match>::pointer v7 = v6;
    std::string::size_type v6 = (rtaid::DetectorNode **)*v6;
  }
  while (v6 != a2);
  if (v7 == a1 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = (unint64_t)v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *((void *)*a2 + 1);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a1 + 8 * v4) = 0;
  }
  BOOL v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *((void *)v10 + 1);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a1 + 8 * v11) = v7;
      BOOL v10 = *a2;
    }
  }
  std::__shared_weak_count *v7 = v10;
  *a2 = 0;
  --a1[3];
  std::unique_ptr<rtaid::DetectorNode>::reset[abi:ne180100](a2 + 3);

  operator delete(a2);
}

rtaid::DetectorNode *std::unique_ptr<rtaid::DetectorNode>::reset[abi:ne180100](rtaid::DetectorNode **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    rtaid::DetectorNode::~DetectorNode(result);
    JUMPOUT(0x223C9D800);
  }
  return result;
}

void rtaid::NodeFormatConverter::~NodeFormatConverter(rtaid::NodeFormatConverter *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  rtaid::NodeFormatConverter::disposeConverter(this);
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  uint64_t v2 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
  {
    int v3 = 136316162;
    unint64_t v4 = "NodeFormatConverter.cpp";
    __int16 v5 = 1024;
    int v6 = 28;
    __int16 v7 = 1040;
    int v8 = 26;
    __int16 v9 = 2080;
    BOOL v10 = "rtaid::NodeFormatConverter]";
    __int16 v11 = 2048;
    uint64_t v12 = this;
    _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] destroyed", (uint8_t *)&v3, 0x2Cu);
  }
}

void sub_2227CAA40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AudioIssueDetectorInitialize(unint64_t a1)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  SingletonManagerInstance();
  std::mutex::lock(&SingletonManagerInstance(void)::sInstance);
  uint64_t v2 = (rtaid *)std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v2)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
    goto LABEL_221;
  }
  int v3 = (rtaid::Detector *)*((void *)v2 + 3);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 4);
  int v83 = v3;
  v84 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v3)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
    if (v4) {
      goto LABEL_220;
    }
    goto LABEL_221;
  }
  rtaid::GetClientIDMap(v2);
  __int16 v5 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(&rtaid::GetClientIDMap(void)::gClientIDMap, *(_DWORD *)v3);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v6 = v5 + 3;
  if (*((char *)v5 + 47) < 0) {
    int v6 = (void *)*v6;
  }
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  __int16 v7 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "AudioIssueDetectorManager.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 104;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v6;
    _os_log_impl(&dword_2227C1000, v7, OS_LOG_TYPE_DEBUG, "%s:%-5d initialize called on %s's detector", buf, 0x1Cu);
  }
  int v8 = v83;
  rtaid::ConfigurationManager::DetermineConfiguration((rtaid::ConfigurationManager *)qword_26AB1A988, v83, 1);
  rtaid::Manager::applyConfiguration((rtaid *)qword_26AB1A988, (int8x8_t *)v83);
  rtaid::Manager::applyTelephonyResets(*(int **)(qword_26AB1A988 + 48), *(int **)(qword_26AB1A988 + 56), (uint64_t *)&v83);
  *(void *)buf = &unk_26D4EC9A8;
  *(void *)&buf[8] = &SingletonManagerInstance(void)::sInstance;
  *(void *)&buf[24] = buf;
  BOOL v10 = (void *)((char *)v8 + 88);
  __int16 v9 = (rtaid::Detector *)*((void *)v8 + 11);
  __int16 v11 = (char *)v8 + 64;
  *((void *)v8 + 11) = 0;
  if (v9 == (rtaid::Detector *)((char *)v8 + 64))
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 32))((uint64_t)v8 + 64);
  }
  else if (v9)
  {
    (*(void (**)(rtaid::Detector *))(*(void *)v9 + 40))(v9);
  }
  if (*(void *)&buf[24])
  {
    if (*(unsigned char **)&buf[24] == buf)
    {
      void *v10 = v11;
      (*(void (**)(unsigned char *, uint64_t))(*(void *)buf + 24))(buf, (uint64_t)v8 + 64);
      goto LABEL_23;
    }
    void *v10 = *(void *)&buf[24];
    BOOL v10 = &buf[24];
  }
  void *v10 = 0;
LABEL_23:
  std::__function::__value_func<void ()(rtaid::IssueDictionary)>::~__value_func[abi:ne180100](buf);
  uint64_t v13 = (void *)((char *)v8 + 24);
  while (1)
  {
    uint64_t v13 = (void *)*v13;
    if (!v13) {
      break;
    }
    for (uint64_t i = 0; i != 7; ++i)
    {
      uint64_t v15 = v13[3];
      *(unsigned char *)(v15 + i + 159) = (*((void *)v8 + 6) >> i) & 1;
      rtaid::DetectorNode::updateSilenceAnalyzerState(v15);
    }
    uint64_t v16 = v13[3];
    rtaid::NodeFormatConverter::disposeConverter((rtaid::NodeFormatConverter *)(v16 + 40));
    if (*(double *)(v16 + 40) != *(double *)(v16 + 80)) {
      goto LABEL_106;
    }
    int v17 = *(_DWORD *)(v16 + 48);
    if (v17 != *(_DWORD *)(v16 + 88)) {
      goto LABEL_106;
    }
    if (*(_DWORD *)(v16 + 56) != *(_DWORD *)(v16 + 96)) {
      goto LABEL_106;
    }
    if (*(_DWORD *)(v16 + 60) != *(_DWORD *)(v16 + 100)) {
      goto LABEL_106;
    }
    int v18 = *(_DWORD *)(v16 + 68);
    if (v18 != *(_DWORD *)(v16 + 108)) {
      goto LABEL_106;
    }
    unsigned int v19 = *(_DWORD *)(v16 + 72);
    if (v19 != *(_DWORD *)(v16 + 112)) {
      goto LABEL_106;
    }
    int v20 = *(_DWORD *)(v16 + 52);
    if (v17 != 1819304813)
    {
      if (v20 == *(_DWORD *)(v16 + 92)) {
        goto LABEL_43;
      }
      goto LABEL_106;
    }
    int v21 = v20 & 0x7FFFFFFF;
    if ((v20 & 0x7FFFFFFF) == 0) {
      int v21 = *(_DWORD *)(v16 + 52);
    }
    unsigned int v22 = *(_DWORD *)(v16 + 64);
    if (v22)
    {
      if ((v20 & 0x20) != 0) {
        unsigned int v23 = 1;
      }
      else {
        unsigned int v23 = *(_DWORD *)(v16 + 68);
      }
      if (v23)
      {
        unsigned int v22 = 8 * (v22 / v23);
        BOOL v24 = v22 == v19;
      }
      else
      {
        unsigned int v22 = 0;
        BOOL v24 = v19 == 0;
      }
      BOOL v29 = v24;
    }
    else
    {
      BOOL v29 = v19 == 0;
    }
    unsigned int v30 = v21 & 0xFFFFFFBF;
    if (v29) {
      v30 |= 8u;
    }
    if ((v19 & 7) == 0 && v22 == v19) {
      v30 &= 0xFFFFFFAF;
    }
    if (v30) {
      v30 &= 0xFFFFFFBB;
    }
    if ((v30 & 8) != 0 && v19 <= 8) {
      v30 &= 2u;
    }
    if (v18 == 1) {
      v30 &= ~0x20u;
    }
    if (!v30) {
      unsigned int v30 = 0x80000000;
    }
    int v33 = *(_DWORD *)(v16 + 92);
    int v34 = v33 & 0x7FFFFFFF;
    if ((v33 & 0x7FFFFFFF) == 0) {
      int v34 = *(_DWORD *)(v16 + 92);
    }
    unsigned int v35 = *(_DWORD *)(v16 + 104);
    if (v35)
    {
      if ((v33 & 0x20) != 0) {
        unsigned int v36 = 1;
      }
      else {
        unsigned int v36 = *(_DWORD *)(v16 + 68);
      }
      if (v36)
      {
        unsigned int v35 = 8 * (v35 / v36);
        BOOL v37 = v35 == v19;
        goto LABEL_83;
      }
      unsigned int v35 = 0;
    }
    BOOL v37 = v19 == 0;
LABEL_83:
    int v38 = v37;
    unsigned int v39 = v34 & 0xFFFFFFBF;
    if (v38) {
      v39 |= 8u;
    }
    BOOL v40 = (v19 & 7) == 0 && v35 == v19;
    unsigned int v41 = v39 & 0xFFFFFFAF;
    if (!v40) {
      unsigned int v41 = v39;
    }
    if (v41) {
      v41 &= 0xFFFFFFBB;
    }
    BOOL v42 = (v41 & 8) == 0 || v19 > 8;
    int v43 = v41 & 2;
    if (v42) {
      int v43 = v41;
    }
    if (v18 == 1) {
      unsigned int v44 = v43 & 0xFFFFFFDF;
    }
    else {
      unsigned int v44 = v43;
    }
    if (!v44) {
      unsigned int v44 = 0x80000000;
    }
    if (v30 == v44)
    {
LABEL_43:
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      uint64_t v25 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
      {
        CA::StreamDescription::AsString((CA::StreamDescription *)&__p, (void *)(v16 + 40), v26, v27);
        p_p = &__p;
        if (v88 < 0) {
          p_p = *(AudioComponentDescription **)&__p.componentType;
        }
        *(_DWORD *)buf = 136316418;
        *(void *)&buf[4] = "NodeFormatConverter.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 80;
        *(_WORD *)&buf[18] = 1040;
        *(_DWORD *)&buf[20] = 26;
        *(_WORD *)&buf[24] = 2080;
        *(void *)&buf[26] = "rtaid::NodeFormatConverter]";
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = v16 + 40;
        __int16 v91 = 2080;
        int v92 = p_p;
        _os_log_impl(&dword_2227C1000, v25, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] AudioConverterNew wasn't needed since incoming and outgoing format are equivalent: %s", buf, 0x36u);
        if (v88 < 0) {
          operator delete(*(void **)&__p.componentType);
        }
      }
      goto LABEL_138;
    }
LABEL_106:
    AudioConverterNew((const AudioStreamBasicDescription *)(v16 + 40), (const AudioStreamBasicDescription *)(v16 + 80), (AudioConverterRef *)(v16 + 128));
    uint64_t v45 = *(void *)(v16 + 128);
    if (!v45)
    {
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      __int16 v56 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_ERROR))
      {
        CA::StreamDescription::AsString((CA::StreamDescription *)&__p, (void *)(v16 + 40), v57, v58);
        if (v88 >= 0) {
          long long v61 = &__p;
        }
        else {
          long long v61 = *(AudioComponentDescription **)&__p.componentType;
        }
        CA::StreamDescription::AsString((CA::StreamDescription *)outInstance, (void *)(v16 + 80), v59, v60);
        __int16 v62 = outInstance;
        if (v86 < 0) {
          __int16 v62 = (AudioComponentInstance *)outInstance[0];
        }
        *(_DWORD *)buf = 136316674;
        *(void *)&buf[4] = "NodeFormatConverter.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 56;
        *(_WORD *)&buf[18] = 1040;
        *(_DWORD *)&buf[20] = 26;
        *(_WORD *)&buf[24] = 2080;
        *(void *)&buf[26] = "rtaid::NodeFormatConverter]";
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = v16 + 40;
        __int16 v91 = 2080;
        int v92 = v61;
        __int16 v93 = 2080;
        uint64_t v94 = v62;
        _os_log_impl(&dword_2227C1000, v56, OS_LOG_TYPE_ERROR, "[%s:%-5d %.*s:%p] AudioConverterNew failed with incoming format %s and outgoing format %s", buf, 0x40u);
        if (v86 < 0) {
          operator delete(outInstance[0]);
        }
        if (v88 < 0) {
          operator delete(*(void **)&__p.componentType);
        }
      }
      uint64_t v12 = 4294967293;
      goto LABEL_186;
    }
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    int v47 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
    {
      CA::StreamDescription::AsString((CA::StreamDescription *)&__p, (void *)(v16 + 40), v48, v49);
      if (v88 >= 0) {
        unint64_t v52 = &__p;
      }
      else {
        unint64_t v52 = *(AudioComponentDescription **)&__p.componentType;
      }
      CA::StreamDescription::AsString((CA::StreamDescription *)outInstance, (void *)(v16 + 80), v50, v51);
      std::string::size_type v53 = outInstance;
      if (v86 < 0) {
        std::string::size_type v53 = (AudioComponentInstance *)outInstance[0];
      }
      *(_DWORD *)buf = 136316674;
      *(void *)&buf[4] = "NodeFormatConverter.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 61;
      *(_WORD *)&buf[18] = 1040;
      *(_DWORD *)&buf[20] = 26;
      *(_WORD *)&buf[24] = 2080;
      *(void *)&buf[26] = "rtaid::NodeFormatConverter]";
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = v16 + 40;
      __int16 v91 = 2080;
      int v92 = v52;
      __int16 v93 = 2080;
      uint64_t v94 = v53;
      _os_log_impl(&dword_2227C1000, v47, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] AudioConverterNew succeeded with incoming format %s and outgoing format %s", buf, 0x40u);
      if (v86 < 0) {
        operator delete(outInstance[0]);
      }
      if (v88 < 0) {
        operator delete(*(void **)&__p.componentType);
      }
    }
    if (*(unsigned char *)(v16 + 120))
    {
      __p.componentType = 1;
      uint64_t v12 = AudioConverterSetProperty(*(AudioConverterRef *)(v16 + 128), 0x646D6978u, 4u, &__p);
      if (v12)
      {
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        int v55 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          *(void *)&buf[4] = "NodeFormatConverter.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 69;
          *(_WORD *)&buf[18] = 1040;
          *(_DWORD *)&buf[20] = 26;
          *(_WORD *)&buf[24] = 2080;
          *(void *)&buf[26] = "rtaid::NodeFormatConverter]";
          *(_WORD *)&buf[34] = 2048;
          *(void *)&buf[36] = v16 + 40;
          __int16 v91 = 1024;
          LODWORD(v92) = v12;
          _os_log_impl(&dword_2227C1000, v55, OS_LOG_TYPE_ERROR, "[%s:%-5d %.*s:%p] AudioConverterSetProperty for downmixing failed with error : %d", buf, 0x32u);
        }
        goto LABEL_186;
      }
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      int v63 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "NodeFormatConverter.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 73;
        *(_WORD *)&buf[18] = 1040;
        *(_DWORD *)&buf[20] = 26;
        *(_WORD *)&buf[24] = 2080;
        *(void *)&buf[26] = "rtaid::NodeFormatConverter]";
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = v16 + 40;
        _os_log_impl(&dword_2227C1000, v63, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] AudioConverterSetProperty for downmixing set successfully", buf, 0x2Cu);
      }
    }
LABEL_138:
    if (*(void *)(v16 + 128))
    {
      uint64_t v64 = ExtendedAudioBufferList_CreateWithFormat();
      uint64_t v65 = v64;
      int v66 = *(_DWORD *)(v16 + 88);
      if ((v66 == 1885564203 || v66 == 1819304813) && (*(unsigned char *)(v16 + 92) & 0x20) != 0)
      {
        if (!v64)
        {
LABEL_223:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "ExtendedAudioBufferList_CreateWithFormat failed");
LABEL_224:
        }
      }
      else if (!v64)
      {
        goto LABEL_223;
      }
      if (!ExtendedAudioBufferList_Prepare())
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
        goto LABEL_224;
      }
      if (!*(unsigned char *)(v16 + 144)) {
        *(unsigned char *)(v16 + 144) = 1;
      }
      *(void *)(v16 + 136) = v65;
      ExtendedAudioBufferList_Destroy();
    }
    if (*(unsigned char *)(v16 + 159)
      || *(unsigned char *)(v16 + 152)
      || *(unsigned char *)(v16 + 160)
      || *(unsigned char *)(v16 + 153)
      || *(unsigned char *)(v16 + 161)
      || *(unsigned char *)(v16 + 154))
    {
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      int v67 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "DetectorNode.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 83;
        *(_WORD *)&buf[18] = 1040;
        *(_DWORD *)&buf[20] = 19;
        *(_WORD *)&buf[24] = 2080;
        *(void *)&buf[26] = "rtaid::DetectorNode]";
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = v16;
        _os_log_impl(&dword_2227C1000, v67, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] adding silenceNonFiniteAnalyzer", buf, 0x2Cu);
      }
      __p.componentFlagsMask = 0;
      *(_OWORD *)&__p.componentType = *(_OWORD *)"xfuaalislppa";
      Next = AudioComponentFindNext(0, &__p);
      outInstance[0] = 0;
      uint64_t v69 = AudioComponentInstanceNew(Next, outInstance);
      if (outInstance[0])
      {
        std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100]((OpaqueAudioComponentInstance **)(v16 + 32), outInstance[0]);
        long long v70 = *(_OWORD *)(v16 + 96);
        *(_OWORD *)buf = *(_OWORD *)(v16 + 80);
        *(_OWORD *)&buf[16] = v70;
        *(void *)&buf[32] = *(void *)(v16 + 112);
        AudioUnitSetProperty(outInstance[0], 8u, 1u, 0, buf, 0x28u);
        AudioUnitSetProperty(outInstance[0], 8u, 2u, 0, buf, 0x28u);
        AudioUnitSetProperty(outInstance[0], 0xEu, 0, 0, (const void *)v16, 4u);
        uint64_t v12 = AudioUnitInitialize(outInstance[0]);
        if (v12)
        {
          std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100]((OpaqueAudioComponentInstance **)(v16 + 32), 0);
        }
        else
        {
          if (!*(unsigned char *)(v16 + 160) && !*(unsigned char *)(v16 + 153) && !*(unsigned char *)(v16 + 161) && !*(unsigned char *)(v16 + 154))
          {
            int inData = 1;
            AudioUnitSetProperty(outInstance[0], 0xFA01u, 0, 0, &inData, 4u);
          }
          if (*(unsigned char *)(v16 + 161) || *(unsigned char *)(v16 + 154))
          {
            int inData = 1;
            AudioUnitSetProperty(outInstance[0], 0xFA03u, 0, 0, &inData, 4u);
          }
          if (*(_DWORD *)(v16 + 48) == 1819304813 && *(_DWORD *)(v16 + 60) == 1)
          {
            unsigned int v71 = *(_DWORD *)(v16 + 64);
            if (v71 == *(_DWORD *)(v16 + 56))
            {
              unsigned int v72 = *(_DWORD *)(v16 + 72);
              if (v71 >= v72 >> 3)
              {
                unsigned int v73 = *(_DWORD *)(v16 + 68);
                if (v73)
                {
                  unsigned int v74 = *(_DWORD *)(v16 + 52);
                  if ((v74 & 0x20) != 0 || (BOOL v24 = v71 == v71 / v73 * v73, v71 /= v73, v24))
                  {
                    if ((*(_DWORD *)(v16 + 52) & 7) == 4 && 8 * v71 == v72)
                    {
                      int v75 = (v74 >> 7) & 0x3F;
                      if ((v75 != 24 || v71 != 4) && !v75 && v71 == 2)
                      {
                        int inData = 1;
                        AudioUnitSetProperty(outInstance[0], 0xFA02u, 0, 0, &inData, 4u);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        uint64_t v12 = v69;
      }
    }
    else
    {
      std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100]((OpaqueAudioComponentInstance **)(v16 + 32), 0);
      uint64_t v12 = 0;
    }
LABEL_186:
    if ((*(unsigned int (**)(void))(**(void **)(*(void *)(v16 + 416) + 24) + 16))(*(void *)(*(void *)(v16 + 416) + 24)))
    {
      if (*(_DWORD *)(v16 + 108) >= 4u) {
        unsigned int v76 = 4;
      }
      else {
        unsigned int v76 = *(_DWORD *)(v16 + 108);
      }
    }
    else
    {
      unsigned int v76 = 1;
    }
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    uint64_t v77 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316418;
      *(void *)&buf[4] = "DetectorNode.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 147;
      *(_WORD *)&buf[18] = 1040;
      *(_DWORD *)&buf[20] = 19;
      *(_WORD *)&buf[24] = 2080;
      *(void *)&buf[26] = "rtaid::DetectorNode]";
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = v16;
      __int16 v91 = 1024;
      LODWORD(v92) = v76;
      _os_log_impl(&dword_2227C1000, v77, OS_LOG_TYPE_DEBUG, "[%s:%-5d %.*s:%p] rms analysis setup for %d channels", buf, 0x32u);
    }
    std::vector<float>::resize((char **)(v16 + 192), v76);
    std::vector<float>::resize((char **)(v16 + 216), v76);
    double v78 = *(double *)(v16 + 40) * 0.5;
    *(unsigned char *)(v16 + 240) = (*(_DWORD *)(v16 + 92) & 0x20) == 0;
    *(_DWORD *)(v16 + 252) = (int)v78;
    *(unsigned char *)(v16 + 4) = v12 == 0;
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    __int16 v79 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136316418;
      *(void *)&buf[4] = "DetectorNode.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 156;
      *(_WORD *)&buf[18] = 1040;
      *(_DWORD *)&buf[20] = 19;
      *(_WORD *)&buf[24] = 2080;
      *(void *)&buf[26] = "rtaid::DetectorNode]";
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = v16;
      __int16 v91 = 1024;
      LODWORD(v92) = v12;
      _os_log_impl(&dword_2227C1000, v79, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] initialized with err = %d", buf, 0x32u);
    }
    if (v12) {
      goto LABEL_216;
    }
  }
  uint64_t v12 = 0;
LABEL_216:
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  unint64_t v80 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    *(void *)&buf[4] = "Detector.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 54;
    *(_WORD *)&buf[18] = 1040;
    *(_DWORD *)&buf[20] = 15;
    *(_WORD *)&buf[24] = 2080;
    *(void *)&buf[26] = "rtaid::Detector]";
    *(_WORD *)&buf[34] = 2048;
    *(void *)&buf[36] = v8;
    __int16 v91 = 1024;
    LODWORD(v92) = v12;
    _os_log_impl(&dword_2227C1000, v80, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] initialized with error = %d", buf, 0x32u);
  }
  unint64_t v4 = v84;
  if (v84) {
LABEL_220:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
LABEL_221:
  std::mutex::unlock(&SingletonManagerInstance(void)::sInstance);
  return v12;
}

void sub_2227CBBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void rtaid::Manager::applyConfiguration(rtaid *a1, int8x8_t *a2)
{
  int v33 = a1;
  v49[2] = *MEMORY[0x263EF8340];
  {
    if (a1)
    {
      rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap = 0u;
      *(_OWORD *)&qword_26AB1AA40 = 0u;
      dword_26AB1AA50 = 1065353216;
    }
  }
  if (rtaid::GetAnalyzerToStringMap(void)::onceToken != -1) {
    dispatch_once(&rtaid::GetAnalyzerToStringMap(void)::onceToken, &__block_literal_global_22_1098);
  }
  rtaid::GetClientIDMap(a1);
  int v3 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(&rtaid::GetClientIDMap(void)::gClientIDMap, a2->i32[0]);
  if (!v3) {
LABEL_69:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((char *)v3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v3[3], v3[4]);
  }
  else {
    std::string v35 = *(std::string *)((unsigned char *)v3 + 1);
  }
  unint64_t v4 = (void *)*v33;
  if ((void *)*v33 != v33 + 1)
  {
    do
    {
      uint64_t v5 = *((unsigned int *)v4 + 7);
      if (v5 == 7)
      {
        uint64_t v6 = (uint64_t)vorr_s8(a2[6], vorr_s8((int8x8_t)85, (int8x8_t)42));
      }
      else
      {
        if (v5 >= 7) {
          std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
        }
        uint64_t v6 = *(void *)&a2[6] | (1 << v5);
      }
      a2[6] = (int8x8_t)v6;
      for (uint64_t i = (void *)a2[3]; i; uint64_t i = (void *)*i)
      {
        uint64_t v8 = i[3];
        __int16 v9 = (_DWORD *)(v8 + 159);
        if (v5 == 7)
        {
          *(_DWORD *)(v8 + 162) = 16843009;
          *__int16 v9 = 16843009;
        }
        else
        {
          *((unsigned char *)v9 + v5) = 1;
        }
        rtaid::DetectorNode::updateSilenceAnalyzerState(v8);
      }
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      BOOL v10 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEBUG))
      {
        __int16 v11 = std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::find<rtaid::AnalyzerType>(*((_DWORD *)v4 + 7));
        if (!v11) {
          goto LABEL_69;
        }
        uint64_t v12 = v11 + 3;
        if (*((char *)v11 + 47) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        uint64_t v13 = &v35;
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316674;
        BOOL v37 = "AudioIssueDetectorManager.cpp";
        __int16 v38 = 1024;
        int v39 = 289;
        __int16 v40 = 1040;
        int v41 = 14;
        __int16 v42 = 2080;
        int v43 = "rtaid::Manager]";
        __int16 v44 = 2048;
        uint64_t v45 = &SingletonManagerInstance(void)::sInstance;
        __int16 v46 = 2080;
        int v47 = v12;
        __int16 v48 = 2080;
        v49[0] = v13;
        _os_log_impl(&dword_2227C1000, v10, OS_LOG_TYPE_DEBUG, "[%s:%-5d %.*s:%p] enabling global %s analyzer for client %s", buf, 0x40u);
      }
      unint64_t v14 = (void *)v4[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v4[2];
          BOOL v16 = *v15 == (void)v4;
          unint64_t v4 = v15;
        }
        while (!v16);
      }
      unint64_t v4 = v15;
    }
    while (v15 != v33 + 1);
  }
  int v17 = (void *)v33[3];
  int v34 = v33 + 4;
  if (v17 != v34)
  {
    int v18 = a2 + 1;
    do
    {
      unsigned int v19 = (void *)v17[4];
      if (v19 != v17 + 5)
      {
        do
        {
          uint64_t v20 = *((unsigned int *)v19 + 7);
          int v21 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(v18, *((_DWORD *)v19 + 8));
          if (v21)
          {
            uint64_t v22 = v21[3];
            unsigned int v23 = (_DWORD *)(v22 + 152);
            if (v20 == 7)
            {
              *(_DWORD *)(v22 + 155) = 16843009;
              *unsigned int v23 = 16843009;
            }
            else
            {
              *((unsigned char *)v23 + v20) = 1;
            }
            rtaid::DetectorNode::updateSilenceAnalyzerState(v22);
          }
          {
            rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
          }
          BOOL v24 = rtaid::get_log(void)::rtaid_os_log;
          if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v25 = std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::find<rtaid::AnalyzerType>(*((_DWORD *)v19 + 7));
            if (!v25) {
              goto LABEL_69;
            }
            double v26 = v25 + 3;
            if (*((char *)v25 + 47) < 0) {
              double v26 = (void *)*v26;
            }
            int v27 = *((_DWORD *)v19 + 8);
            unint64_t v28 = &v35;
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unint64_t v28 = (std::string *)v35.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136316930;
            BOOL v37 = "AudioIssueDetectorManager.cpp";
            __int16 v38 = 1024;
            int v39 = 296;
            __int16 v40 = 1040;
            int v41 = 14;
            __int16 v42 = 2080;
            int v43 = "rtaid::Manager]";
            __int16 v44 = 2048;
            uint64_t v45 = &SingletonManagerInstance(void)::sInstance;
            __int16 v46 = 2080;
            int v47 = v26;
            __int16 v48 = 1024;
            LODWORD(v49[0]) = v27;
            WORD2(v49[0]) = 2080;
            *(void *)((char *)v49 + 6) = v28;
            _os_log_impl(&dword_2227C1000, v24, OS_LOG_TYPE_DEBUG, "[%s:%-5d %.*s:%p] enabling node specific %s analyzer at node %d for client %s", buf, 0x46u);
          }
          BOOL v29 = (void *)v19[1];
          if (v29)
          {
            do
            {
              unsigned int v30 = v29;
              BOOL v29 = (void *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              unsigned int v30 = (void *)v19[2];
              BOOL v16 = *v30 == (void)v19;
              unsigned int v19 = v30;
            }
            while (!v16);
          }
          unsigned int v19 = v30;
        }
        while (v30 != v17 + 5);
      }
      uint64_t v31 = (void *)v17[1];
      if (v31)
      {
        do
        {
          uint64_t v32 = v31;
          uint64_t v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          uint64_t v32 = (void *)v17[2];
          BOOL v16 = *v32 == (void)v17;
          int v17 = v32;
        }
        while (!v16);
      }
      int v17 = v32;
    }
    while (v32 != v34);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_2227CC190(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t rtaid::DetectorNode::updateSilenceAnalyzerState(uint64_t this)
{
  uint64_t v1 = *(OpaqueAudioComponentInstance **)(this + 32);
  if (v1)
  {
    uint64_t v2 = this;
    BOOL v3 = !*(unsigned char *)(this + 160) && !*(unsigned char *)(this + 153) && !*(unsigned char *)(this + 161) && *(unsigned char *)(this + 154) == 0;
    BOOL inData = v3;
    AudioUnitSetProperty(v1, 0xFA01u, 0, 0, &inData, 4u);
    if (*(unsigned char *)(v2 + 161)) {
      int v4 = 1;
    }
    else {
      int v4 = *(unsigned __int8 *)(v2 + 154);
    }
    int v5 = v4;
    return AudioUnitSetProperty(v1, 0xFA03u, 0, 0, &v5, 4u);
  }
  return this;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  int v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void rtaid::GetClientIDMap(rtaid *this)
{
  {
    rtaid::GetClientIDMap(void)::gClientIDMap = 0u;
    *(_OWORD *)&qword_26AB1A9E0 = 0u;
    dword_26AB1A9F0 = 1065353216;
  }
  if (rtaid::GetClientIDMap(void)::onceToken != -1)
  {
    dispatch_once(&rtaid::GetClientIDMap(void)::onceToken, &__block_literal_global_1081);
  }
}

void std::vector<float>::resize(char **a1, unint64_t a2)
{
  uint8x8_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    BOOL v16 = &v3[4 * a2];
    goto LABEL_16;
  }
  unint64_t v6 = a2 - v5;
  unint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    BOOL v16 = &v4[4 * v6];
LABEL_16:
    a1[1] = v16;
    return;
  }
  if (a2 >> 62) {
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  __int16 v11 = (char *)operator new(4 * v10);
  uint64_t v12 = &v11[4 * v5];
  uint64_t v13 = &v11[4 * v10];
  bzero(v12, 4 * v6);
  unint64_t v14 = &v12[4 * v6];
  while (v4 != v3)
  {
    int v15 = *((_DWORD *)v4 - 1);
    v4 -= 4;
    *((_DWORD *)v12 - 1) = v15;
    v12 -= 4;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

OpaqueAudioComponentInstance *std::unique_ptr<OpaqueAudioComponentInstance,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioComponentInstance*,&(AudioComponentInstanceDispose)>>::reset[abi:ne180100](OpaqueAudioComponentInstance **a1, OpaqueAudioComponentInstance *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result) {
    return (OpaqueAudioComponentInstance *)AudioComponentInstanceDispose(result);
  }
  return result;
}

void rtaid::NodeFormatConverter::disposeConverter(rtaid::NodeFormatConverter *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v2 = (OpaqueAudioConverter *)*((void *)this + 11);
  if (v2)
  {
    AudioConverterDispose(v2);
    *((void *)this + 11) = 0;
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    uint8x8_t v3 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
    {
      int v4 = 136316162;
      unint64_t v5 = "NodeFormatConverter.cpp";
      __int16 v6 = 1024;
      int v7 = 92;
      __int16 v8 = 1040;
      int v9 = 26;
      __int16 v10 = 2080;
      __int16 v11 = "rtaid::NodeFormatConverter]";
      __int16 v12 = 2048;
      uint64_t v13 = this;
      _os_log_impl(&dword_2227C1000, v3, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] AudioConverterRef has been disposed", (uint8_t *)&v4, 0x2Cu);
    }
  }
}

void CA::StreamDescription::AsString(CA::StreamDescription *this, void *a2, double a3, int16x8_t a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  unsigned int v6 = *((_DWORD *)a2 + 2);
  if (v6 == 1718773105)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, 'freq'", (uint64_t)this, *((unsigned int *)a2 + 7), *a2);
    return;
  }
  if (v6 != 1819304813) {
    goto LABEL_19;
  }
  if (*((_DWORD *)a2 + 5) != 1) {
    goto LABEL_19;
  }
  unsigned int v7 = *((_DWORD *)a2 + 6);
  if (v7 != *((_DWORD *)a2 + 4)) {
    goto LABEL_19;
  }
  unsigned int v8 = *((_DWORD *)a2 + 8);
  if (v7 < v8 >> 3) {
    goto LABEL_19;
  }
  uint64_t v9 = *((unsigned int *)a2 + 7);
  if (!v9) {
    goto LABEL_19;
  }
  unsigned int v10 = *((_DWORD *)a2 + 3);
  if ((v10 & 0x20) == 0)
  {
    BOOL v15 = v7 == v7 / v9 * v9;
    v7 /= v9;
    if (!v15) {
      goto LABEL_19;
    }
  }
  if ((v10 & 2) != 0 || 8 * v7 != v8) {
    goto LABEL_19;
  }
  if (v10)
  {
    if ((v10 & 0x1F84) == 0)
    {
      if (v7 == 4)
      {
        uint64_t v12 = 1;
        goto LABEL_163;
      }
      BOOL v15 = v7 == 8;
      BOOL v52 = v7 == 8;
      if (v15)
      {
        uint64_t v12 = 4 * v52;
        goto LABEL_163;
      }
    }
LABEL_19:
    uint64_t v13 = *((unsigned int *)a2 + 7);
    double v14 = *(double *)a2;
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v6 == 0;
    }
    if (v15 && v14 == 0.0)
    {
      caulk::make_string((caulk *)"%2u ch, %6.0f Hz", (uint64_t)this, 0, *a2);
      return;
    }
    a4.i32[0] = bswap32(v6);
    *(int8x8_t *)a4.i8 = vzip1_s8(*(int8x8_t *)a4.i8, *(int8x8_t *)&v14);
    v16.i64[0] = 0x1F0000001FLL;
    v16.i64[1] = 0x1F0000001FLL;
    v17.i64[0] = 0x5F0000005FLL;
    v17.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)a4.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v16, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a4.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a4.i8, (int8x8_t)0x2E002E002E002ELL);
    *((unsigned char *)&v57.__r_.__value_.__s + 23) = 4;
    LODWORD(v57.__r_.__value_.__l.__data_) = vmovn_s16(a4).u32[0];
    v57.__r_.__value_.__s.__data_[4] = 0;
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s (0x%08X) ", (uint64_t)&v55, v13, *(void *)&v14, &v57, *((unsigned int *)a2 + 3));
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    int v18 = *((_DWORD *)a2 + 2);
    if (v18 <= 1819304812)
    {
      if (v18 != 1634492771 && v18 != 1634497332 && v18 != 1718378851)
      {
LABEL_70:
        caulk::make_string((caulk *)"%u bits/channel, %u bytes/packet, %u frames/packet, %u bytes/frame", (uint64_t)&v57, *((unsigned int *)a2 + 8), *((unsigned int *)a2 + 4), *((unsigned int *)a2 + 5), *((unsigned int *)a2 + 6));
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v30 = &v55;
        }
        else {
          unsigned int v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v55.__r_.__value_.__l.__size_;
        }
LABEL_62:
        uint64_t v32 = std::string::insert(&v57, 0, (const std::string::value_type *)v30, size);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        *((void *)this + 2) = *((void *)&v32->__r_.__value_.__l + 2);
        *(_OWORD *)this = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_65;
        }
        int v34 = (void *)v57.__r_.__value_.__r.__words[0];
LABEL_64:
        operator delete(v34);
LABEL_65:
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        return;
      }
LABEL_45:
      uint64_t v27 = *((unsigned int *)a2 + 3);
      if ((v27 - 1) < 4 || !v27 && (v18 == 1634497332 || v18 == 1936487278 || v18 == 1936487267))
      {
        caulk::make_string((caulk *)"from %u-bit source, ", (uint64_t)&v57, CA::StreamDescription::AsString(void)const::kSourceBits[v27]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v28 = &v57;
        }
        else {
          unint64_t v28 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v29 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v29 = v57.__r_.__value_.__l.__size_;
        }
        std::string::append(&v55, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::append(&v55, "from UNKNOWN source bit depth, ", 0x1FuLL);
      }
      caulk::make_string((caulk *)"%u frames/packet", (uint64_t)&v57, *((unsigned int *)a2 + 5));
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v30 = &v55;
      }
      else {
        unsigned int v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v55.__r_.__value_.__l.__size_;
      }
      goto LABEL_62;
    }
    if (v18 == 1936487278 || v18 == 1936487267) {
      goto LABEL_45;
    }
    if (v18 != 1819304813) {
      goto LABEL_70;
    }
    unsigned int v19 = *((_DWORD *)a2 + 3);
    unsigned int v20 = *((_DWORD *)a2 + 6);
    int v21 = v19 & 0x20;
    uint64_t v22 = "";
    if (!v20) {
      goto LABEL_37;
    }
    if ((v19 & 0x20) != 0)
    {
      unsigned int v23 = 1;
    }
    else
    {
      unsigned int v23 = *((_DWORD *)a2 + 7);
      if (!v23)
      {
        int v21 = 0;
LABEL_37:
        BOOL v24 = " signed";
        if ((v19 & 4) == 0) {
          BOOL v24 = " unsigned";
        }
        if (v19) {
          uint64_t v25 = "float";
        }
        else {
          uint64_t v25 = "integer";
        }
        if (v19) {
          double v26 = "";
        }
        else {
          double v26 = v24;
        }
LABEL_102:
        v57.__r_.__value_.__s.__data_[0] = 0;
        if (v21) {
          int v39 = ", deinterleaved";
        }
        else {
          int v39 = "";
        }
        unsigned int v36 = "";
        __int16 v40 = "";
        goto LABEL_106;
      }
    }
    int v35 = v20 / v23;
    if (v20 / v23 < 2)
    {
      __int16 v38 = " signed";
      if ((v19 & 4) == 0) {
        __int16 v38 = " unsigned";
      }
      if (v19) {
        uint64_t v25 = "float";
      }
      else {
        uint64_t v25 = "integer";
      }
      if (v19) {
        double v26 = "";
      }
      else {
        double v26 = v38;
      }
      if (v23 > v20) {
        goto LABEL_102;
      }
      int v35 = 1;
      unsigned int v36 = "";
    }
    else
    {
      if ((v19 & 2) != 0) {
        unsigned int v36 = " big-endian";
      }
      else {
        unsigned int v36 = " little-endian";
      }
      BOOL v37 = " unsigned";
      if ((v19 & 4) != 0) {
        BOOL v37 = " signed";
      }
      if (v19) {
        uint64_t v25 = "float";
      }
      else {
        uint64_t v25 = "integer";
      }
      if (v19) {
        double v26 = "";
      }
      else {
        double v26 = v37;
      }
    }
    unsigned int v41 = *((_DWORD *)a2 + 7);
    if ((v19 & 0x20) != 0) {
      unsigned int v42 = 1;
    }
    else {
      unsigned int v42 = *((_DWORD *)a2 + 7);
    }
    if (v42) {
      unsigned int v42 = 8 * (v20 / v42);
    }
    if (v42 == *((_DWORD *)a2 + 8))
    {
      v57.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      if ((v19 & 8) != 0) {
        int v43 = "";
      }
      else {
        int v43 = "un";
      }
      snprintf((char *)&v57, 0x20uLL, "%spacked in %u bytes", v43, v35);
      unsigned int v20 = *((_DWORD *)a2 + 6);
      unsigned int v19 = *((_DWORD *)a2 + 3);
      if (!v20)
      {
        unsigned int v44 = 0;
        int v21 = *((_DWORD *)a2 + 3) & 0x20;
        goto LABEL_128;
      }
      unsigned int v41 = *((_DWORD *)a2 + 7);
      int v21 = *((_DWORD *)a2 + 3) & 0x20;
    }
    if (v21) {
      unsigned int v44 = 1;
    }
    else {
      unsigned int v44 = v41;
    }
    if (v44) {
      unsigned int v44 = 8 * (v20 / v44);
    }
LABEL_128:
    int v45 = *((_DWORD *)a2 + 8);
    __int16 v46 = " high-aligned";
    if ((v19 & 0x10) == 0) {
      __int16 v46 = " low-aligned";
    }
    if ((v45 & 7) == 0 && v44 == v45) {
      __int16 v40 = "";
    }
    else {
      __int16 v40 = v46;
    }
    if (v21) {
      int v39 = ", deinterleaved";
    }
    else {
      int v39 = "";
    }
    if (v57.__r_.__value_.__s.__data_[0])
    {
      uint64_t v22 = ", ";
LABEL_141:
      if (((v19 >> 7) & 0x3F) != 0) {
        snprintf(__str, 0x14uLL, "%u.%u");
      }
      else {
        snprintf(__str, 0x14uLL, "%u");
      }
      caulk::make_string((caulk *)"%s-bit%s%s %s%s%s%s%s", (uint64_t)&v54, __str, v36, v26, v25, v22, &v57, v40, v39);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v48 = &v55;
      }
      else {
        __int16 v48 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v49 = v55.__r_.__value_.__l.__size_;
      }
      double v50 = std::string::insert(&v54, 0, (const std::string::value_type *)v48, v49);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *((void *)this + 2) = *((void *)&v50->__r_.__value_.__l + 2);
      *(_OWORD *)this = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      int v34 = (void *)v54.__r_.__value_.__r.__words[0];
      goto LABEL_64;
    }
LABEL_106:
    if (*v40) {
      uint64_t v22 = ", ";
    }
    goto LABEL_141;
  }
  if ((v10 & 4) == 0) {
    goto LABEL_19;
  }
  int v11 = (v10 >> 7) & 0x3F;
  if (v11 != 24 || v7 != 4)
  {
    if (!v11 && v7 == 4)
    {
      uint64_t v12 = 5;
      goto LABEL_163;
    }
    if (!v11 && v7 == 2)
    {
      uint64_t v12 = 2;
      goto LABEL_163;
    }
    goto LABEL_19;
  }
  uint64_t v12 = 3;
LABEL_163:
  if ((v10 & 0x20) != 0) {
    std::string::size_type v53 = ", deinterleaved";
  }
  else {
    std::string::size_type v53 = ", interleaved";
  }
  if (v9 <= 1) {
    std::string::size_type v53 = "";
  }
  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s%s", (uint64_t)this, v9, *a2, *((void *)&off_264628E00 + v12), v53);
}

void sub_2227CCD60(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  int v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      unsigned int v7 = (char *)a2;
    }
    else {
      unsigned int v7 = *(char **)a2;
    }
    if (v6 >= 0) {
      size_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v8 = *(void *)(a2 + 8);
    }
    int v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

uint64_t MobileGestaltSPIImplementation::IsInternalBuild(MobileGestaltSPIImplementation *this)
{
  {
    MobileGestaltSPIImplementation::IsInternalBuild(void)::sIsInternalBuild = MobileGestaltSPIImplementation::IsInternalBuild(void)::{lambda(void)#1}::operator()();
  }
  return MobileGestaltSPIImplementation::IsInternalBuild(void)::sIsInternalBuild;
}

void sub_2227CCE74(_Unwind_Exception *a1)
{
}

void *std::__function::__value_func<void ()(rtaid::IssueDictionary)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<rtaid::Manager::InitializeDetector(long long)::$_0,std::allocator<rtaid::Manager::InitializeDetector(long long)::$_0>,void ()(rtaid::IssueDictionary)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4EC9A8;
  a2[1] = v2;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  unsigned int v7 = a2;
  do
  {
    size_t v8 = v7;
    unsigned int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    int v9 = a1->__end_;
    unsigned int v10 = v8 + 1;
    int v11 = v8 + 1;
    do
    {
      size_t v8 = v11;
      int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_32;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_31;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v17);
      return a2 + 2;
    }
    if (v6 != 94) {
      goto LABEL_32;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return a2 + 1;
  }
  BOOL v9 = v6 == 40;
  size_t v8 = (char *)(a2 + 1);
  BOOL v9 = !v9 || v8 == a3;
  if (!v9)
  {
    unsigned int v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      int v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v44.__traits_);
        memset(&v44.__flags_, 0, 40);
        v44.__flags_ = this->__flags_;
        uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v44, a2 + 3, a3);
        unsigned int marked_count = v44.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v44, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
LABEL_30:
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v44.__traits_.__loc_);
        uint64_t result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2) {
          return result;
        }
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v44.__traits_);
        memset(&v44.__flags_, 0, 40);
        v44.__flags_ = this->__flags_;
        uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v44, a2 + 3, a3);
        unsigned int v14 = v44.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v44, 0, this->__marked_count_);
        this->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        goto LABEL_30;
      }
    }
LABEL_31:
    int v7 = *a2;
  }
LABEL_32:
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  unsigned int v20 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    uint64_t result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_98;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          uint64_t v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
          if (v22 == a3) {
            goto LABEL_98;
          }
          unsigned int v23 = v22;
          if (*v22 != 41) {
            goto LABEL_98;
          }
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          unsigned int v29 = this->__marked_count_;
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          unsigned int v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
          if (v30 == a3 || (unsigned int v23 = v30, *v30 != 41)) {
LABEL_98:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v29);
        }
        --*p_open_count;
        uint64_t v25 = (unsigned __int8 *)(v23 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_65;
      case '.':
        operator new();
      default:
        if ((char)v7 == 91)
        {
          uint64_t v25 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63) {
          goto LABEL_60;
        }
        goto LABEL_65;
    }
  }
  uint64_t v24 = ((char)v7 - 92);
  if (v24 <= 0x21)
  {
    if (((1 << (v7 - 92)) & 0x300000006) != 0) {
      return a2;
    }
    if ((char)v7 == 92)
    {
      if (v7 != 92) {
        return a2;
      }
      double v26 = a2 + 1;
      if (a2 + 1 == (unsigned __int8 *)a3) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
      }
      int v27 = *v26;
      unsigned int v28 = v27 - 48;
      if (v27 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v28);
LABEL_97:
        uint64_t v25 = a2 + 2;
        goto LABEL_61;
      }
      if ((v27 - 49) <= 8)
      {
        uint64_t v25 = a2 + 2;
        if (a2 + 2 == (unsigned __int8 *)a3)
        {
          uint64_t v25 = (unsigned __int8 *)a3;
        }
        else
        {
          while (1)
          {
            int v32 = *v25;
            if ((v32 - 48) > 9) {
              break;
            }
            if (v28 >= 0x19999999) {
              goto LABEL_99;
            }
            ++v25;
            unsigned int v28 = v32 + 10 * v28 - 48;
            if (v25 == (unsigned __int8 *)a3)
            {
              uint64_t v25 = (unsigned __int8 *)a3;
              break;
            }
          }
          if (!v28) {
LABEL_99:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
        }
        if (v28 > v20) {
          goto LABEL_99;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v28);
        if (v25 != v26)
        {
LABEL_57:
          uint64_t result = a2;
          if (v25 == a2) {
            return result;
          }
          goto LABEL_61;
        }
      }
      int v33 = (char)*v26;
      if (v33 > 99)
      {
        if (v33 == 119)
        {
          int v34 = this;
          BOOL v35 = 0;
          goto LABEL_89;
        }
        if (v33 == 115)
        {
          unsigned int v42 = this;
          BOOL v43 = 0;
LABEL_95:
          started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
          int v39 = started->__mask_ | 0x4000;
          goto LABEL_96;
        }
        if (v33 != 100)
        {
LABEL_90:
          unsigned int v41 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, (unsigned __int8 *)a3, 0);
          if (v41 == v26) {
            uint64_t v25 = a2;
          }
          else {
            uint64_t v25 = v41;
          }
          goto LABEL_57;
        }
        unsigned int v36 = this;
        BOOL v37 = 0;
      }
      else
      {
        if (v33 != 68)
        {
          if (v33 != 83)
          {
            if (v33 == 87)
            {
              int v34 = this;
              BOOL v35 = 1;
LABEL_89:
              __int16 v40 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
              v40->__mask_ |= 0x500u;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v40, 95);
              goto LABEL_97;
            }
            goto LABEL_90;
          }
          unsigned int v42 = this;
          BOOL v43 = 1;
          goto LABEL_95;
        }
        unsigned int v36 = this;
        BOOL v37 = 1;
      }
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v36, v37);
      int v39 = started->__mask_ | 0x400;
LABEL_96:
      started->__mask_ = v39;
      goto LABEL_97;
    }
    if (v24 == 31) {
LABEL_65:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
LABEL_60:
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
  uint64_t v25 = a2 + 1;
LABEL_61:
  size_t v31 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v25, (unsigned __int8 *)a3, end, v20 + 1, v31);
}

void sub_2227CD658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      uint64_t v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        uint64_t v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    BOOL v15 = a2 + 1;
    int v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            uint64_t v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              uint64_t v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              int v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            int v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        unsigned int v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          uint64_t v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            uint64_t v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        uint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            uint64_t v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                uint64_t v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            int v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    uint64_t v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      uint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    uint64_t v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      uint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_2227CDB68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x223C9D800);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26D4EC1D0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x223C9D800);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x223C9D800);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  unsigned int v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  unsigned int v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  int v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  int v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_248;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_248;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_248;
    }
    v84 = (char **)(v7 + 88);
    uint64_t v85 = v7 + 16;
    char v86 = a3 - 4;
    while (1)
    {
      size_t v8 = (char *)v5;
      BOOL v9 = a3;
      if ((char *)v5 == a3) {
        goto LABEL_151;
      }
      int v10 = *(unsigned __int8 *)v5;
      BOOL v9 = (char *)v5;
      if (v10 == 93) {
        goto LABEL_151;
      }
      int v11 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v94 = 0;
      int v12 = 0;
      BOOL v9 = (char *)v5;
      if ((char *)(v5 + 1) != a3 && v10 == 91)
      {
        int v13 = *(unsigned __int8 *)(v5 + 1);
        switch(v13)
        {
          case '.':
            BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)__p);
            int v12 = (void *)HIBYTE(v94);
            int v11 = __p[1];
            break;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_247;
            }
            for (unint64_t i = 0; ; ++i)
            {
              BOOL v15 = (char *)(v5 + i + 2);
              if (*v15 == 58 && *(unsigned char *)(v5 + i + 3) == 93) {
                break;
              }
              if (&v86[-v5] == (char *)i) {
                goto LABEL_247;
              }
            }
            if (v15 == a3) {
LABEL_247:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            int v20 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v99, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v99.__end_);
            if (SHIBYTE(v99.__end_) >= 0) {
              first = &v99;
            }
            else {
              first = v99.__first_;
            }
            if (SHIBYTE(v99.__end_) < 0) {
              std::__split_buffer<std::string>::pointer end_high = v99.__begin_;
            }
            (*(void (**)(void, void *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), first, (char *)end_high + (void)first);
            if (SHIBYTE(v99.__end_) >= 0) {
              unsigned int v23 = (const char *)&v99;
            }
            else {
              unsigned int v23 = (const char *)v99.__first_;
            }
            std::regex_traits<char>::char_class_type classname = std::__get_classname(v23, v20 & 1);
            if (SHIBYTE(v99.__end_) < 0) {
              operator delete(v99.__first_);
            }
            if (!classname) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            }
            char v25 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_147;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_247;
            }
            for (j = 0; ; ++j)
            {
              BOOL v15 = &j[v5 + 2];
              if (*v15 == 61 && j[v5 + 3] == 93) {
                break;
              }
              if (&v86[-v5] == j) {
                goto LABEL_247;
              }
            }
            if (v15 == a3) {
              goto LABEL_247;
            }
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v97, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(v98) < 0)
            {
              unint64_t v26 = *((void *)&v97 + 1);
              if (!*((void *)&v97 + 1)) {
LABEL_249:
              }
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              int v27 = (char *)v97;
            }
            else
            {
              unint64_t v26 = HIBYTE(v98);
              if (!HIBYTE(v98)) {
                goto LABEL_249;
              }
              int v27 = (char *)&v97;
            }
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v99, v27, &v27[v26], v26);
            (*(void (**)(std::string::value_type **__return_ptr))(**(void **)(a1 + 16) + 32))(__s);
            unsigned int v29 = (std::string::value_type *)HIBYTE(v96);
            if (v96 < 0) {
              unsigned int v29 = __s[1];
            }
            if (v29 != (std::string::value_type *)1)
            {
              if (v29 == (std::string::value_type *)12)
              {
                unsigned int v30 = __s;
                if (v96 < 0) {
                  unsigned int v30 = (std::string::value_type **)__s[0];
                }
                *((unsigned char *)v30 + 11) = *((unsigned char *)v30 + 3);
              }
              else if (SHIBYTE(v96) < 0)
              {
                *__s[0] = 0;
                __s[1] = 0;
              }
              else
              {
                LOBYTE(__s[0]) = 0;
                HIBYTE(v96) = 0;
              }
            }
            if (SHIBYTE(v99.__end_) < 0) {
              operator delete(v99.__first_);
            }
            unsigned int v36 = (std::string::value_type *)HIBYTE(v96);
            char v37 = HIBYTE(v96);
            if (v96 < 0) {
              unsigned int v36 = __s[1];
            }
            if (v36)
            {
              unint64_t v39 = *(void *)(v7 + 144);
              unint64_t v38 = *(void *)(v7 + 152);
              if (v39 >= v38)
              {
                uint64_t v43 = *(void *)(v7 + 136);
                unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v43) >> 3);
                unint64_t v45 = v44 + 1;
                if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - v43) >> 3);
                if (2 * v46 > v45) {
                  unint64_t v45 = 2 * v46;
                }
                if (v46 >= 0x555555555555555) {
                  unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v47 = v45;
                }
                v99.__end_cap_.__value_ = (std::allocator<std::string> *)(v7 + 152);
                if (v47)
                {
                  std::string::size_type v49 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v47);
                  char v37 = HIBYTE(v96);
                }
                else
                {
                  std::string::size_type v49 = 0;
                  uint64_t v48 = 0;
                }
                std::__split_buffer<std::string>::pointer end = v49 + v44;
                v99.__first_ = v49;
                v99.__begin_ = end;
                v99.__end_ = end;
                v99.__end_cap_.__value_ = &v49[v48];
                if (v37 < 0)
                {
                  std::string::__init_copy_ctor_external(end, __s[0], (std::string::size_type)__s[1]);
                  std::__split_buffer<std::string>::pointer end = v99.__end_;
                }
                else
                {
                  long long v53 = *(_OWORD *)__s;
                  end->__r_.__value_.__r.__words[2] = v96;
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v53;
                }
                std::__split_buffer<std::string>::pointer v51 = end + 1;
                v99.__end_ = end + 1;
                uint64_t v55 = *(void *)(v7 + 136);
                unint64_t v54 = *(void *)(v7 + 144);
                std::__split_buffer<std::string>::pointer begin = v99.__begin_;
                if (v54 == v55)
                {
                  int64x2_t v58 = vdupq_n_s64(v54);
                }
                else
                {
                  do
                  {
                    long long v57 = *(_OWORD *)(v54 - 24);
                    begin[-1].__r_.__value_.__r.__words[2] = *(void *)(v54 - 8);
                    *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v57;
                    --begin;
                    *(void *)(v54 - 16) = 0;
                    *(void *)(v54 - 8) = 0;
                    *(void *)(v54 - 24) = 0;
                    v54 -= 24;
                  }
                  while (v54 != v55);
                  int64x2_t v58 = *(int64x2_t *)(v7 + 136);
                  std::__split_buffer<std::string>::pointer v51 = v99.__end_;
                }
                *(void *)(v7 + 136) = begin;
                *(void *)(v7 + 144) = v51;
                *(int64x2_t *)&v99.__begin_ = v58;
                double v59 = *(std::string **)(v7 + 152);
                *(void *)(v7 + 152) = v99.__end_cap_.__value_;
                v99.__end_cap_.__value_ = v59;
                v99.__first_ = (std::__split_buffer<std::string>::pointer)v58.i64[0];
                std::__split_buffer<std::string>::~__split_buffer(&v99);
              }
              else
              {
                if (SHIBYTE(v96) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), __s[0], (std::string::size_type)__s[1]);
                }
                else
                {
                  long long v40 = *(_OWORD *)__s;
                  *(void *)(v39 + 16) = v96;
                  *(_OWORD *)unint64_t v39 = v40;
                }
                std::__split_buffer<std::string>::pointer v51 = (std::__split_buffer<std::string>::pointer)(v39 + 24);
                *(void *)(v7 + 144) = v39 + 24;
              }
              *(void *)(v7 + 144) = v51;
            }
            else
            {
              uint64_t v41 = HIBYTE(v98);
              if (SHIBYTE(v98) < 0) {
                uint64_t v41 = *((void *)&v97 + 1);
              }
              if (v41 == 2)
              {
                double v50 = (char *)&v97;
                if (SHIBYTE(v98) < 0) {
                  double v50 = (char *)v97;
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *v50, v50[1]);
              }
              else
              {
                if (v41 != 1) {
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                }
                unsigned int v42 = (char *)&v97;
                if (SHIBYTE(v98) < 0) {
                  unsigned int v42 = (char *)v97;
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *v42);
              }
            }
            if (SHIBYTE(v96) < 0) {
              operator delete(__s[0]);
            }
            if (SHIBYTE(v98) < 0) {
              operator delete((void *)v97);
            }
            char v25 = 0;
LABEL_147:
            uint64_t v5 = (uint64_t)(v15 + 2);
            int v34 = v8;
            goto LABEL_148;
          default:
            int v11 = 0;
            int v12 = 0;
            BOOL v9 = (char *)v5;
            break;
        }
      }
      uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((char)v12 >= 0) {
        int v11 = v12;
      }
      if (!v11)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          int v17 = *v9;
          if (v17 == 92)
          {
            size_t v18 = v9 + 1;
            if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0) {
              BOOL v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v18, a3, (uint64_t *)__p);
            }
            else {
              BOOL v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v18, (unsigned __int8 *)a3, (uint64_t)__p, v7);
            }
            BOOL v9 = v19;
            goto LABEL_76;
          }
        }
        else
        {
          LOBYTE(v17) = *v9;
        }
        if ((char)v12 < 0)
        {
          unsigned int v28 = (void **)__p[0];
          __p[1] = (void *)1;
        }
        else
        {
          HIBYTE(v94) = 1;
          unsigned int v28 = __p;
        }
        *(unsigned char *)unsigned int v28 = v17;
        *((unsigned char *)v28 + 1) = 0;
        ++v9;
      }
LABEL_76:
      if (v9 != a3)
      {
        int v31 = *v9;
        if (v31 != 93)
        {
          int v33 = v9 + 1;
          if (v9 + 1 != a3 && v31 == 45 && *v33 != 93)
          {
            v91[0] = 0;
            v91[1] = 0;
            uint64_t v92 = 0;
            int v34 = v9 + 2;
            if (v9 + 2 != a3 && *v33 == 91 && *v34 == 46)
            {
              BOOL v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v9 + 3, a3, (uint64_t)v91);
              goto LABEL_155;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v33) = *v33;
              if (v33 == 92)
              {
                if (v5) {
                  BOOL v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9 + 2, a3, (uint64_t *)v91);
                }
                else {
                  BOOL v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v9 + 2, (unsigned __int8 *)a3, (uint64_t)v91, v7);
                }
LABEL_155:
                int v34 = v35;
LABEL_156:
                *(_OWORD *)uint64_t v89 = *(_OWORD *)__p;
                unint64_t v90 = v94;
                __p[1] = 0;
                uint64_t v94 = 0;
                *(_OWORD *)unint64_t v87 = *(_OWORD *)v91;
                int64_t v88 = v92;
                v91[0] = 0;
                v91[1] = 0;
                uint64_t v92 = 0;
                __p[0] = 0;
                if (*(unsigned char *)(v7 + 170))
                {
                  if (*(unsigned char *)(v7 + 169))
                  {
                    for (k = 0; ; ++k)
                    {
                      if (SHIBYTE(v90) < 0)
                      {
                        if (k >= v89[1])
                        {
LABEL_168:
                          for (m = 0; ; ++m)
                          {
                            if (SHIBYTE(v88) < 0)
                            {
                              if (m >= v87[1]) {
                                goto LABEL_214;
                              }
                              uint64_t v65 = (void **)v87[0];
                            }
                            else
                            {
                              if ((unint64_t)m >= HIBYTE(v88)) {
                                goto LABEL_214;
                              }
                              uint64_t v65 = v87;
                            }
                            char v66 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), m[(void)v65]);
                            if (v88 >= 0) {
                              int v67 = v87;
                            }
                            else {
                              int v67 = (void **)v87[0];
                            }
                            m[(void)v67] = v66;
                          }
                        }
                        long long v61 = (void **)v89[0];
                      }
                      else
                      {
                        if ((unint64_t)k >= HIBYTE(v90)) {
                          goto LABEL_168;
                        }
                        long long v61 = v89;
                      }
                      char v62 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), k[(void)v61]);
                      if (SHIBYTE(v90) >= 0) {
                        int v63 = v89;
                      }
                      else {
                        int v63 = (void **)v89[0];
                      }
                      k[(void)v63] = v62;
                    }
                  }
                  uint64_t v77 = 0;
                  if ((HIBYTE(v90) & 0x80) != 0) {
                    goto LABEL_205;
                  }
                  while ((unint64_t)v77 < HIBYTE(v90))
                  {
                    while (1)
                    {
                      ++v77;
                      if ((HIBYTE(v90) & 0x80) == 0) {
                        break;
                      }
LABEL_205:
                      if (v77 >= v89[1]) {
                        goto LABEL_208;
                      }
                    }
                  }
LABEL_208:
                  double v78 = 0;
                  if (v88 < 0) {
                    goto LABEL_211;
                  }
                  while ((unint64_t)v78 < HIBYTE(v88))
                  {
                    while (1)
                    {
                      ++v78;
                      if ((v88 & 0x8000000000000000) == 0) {
                        break;
                      }
LABEL_211:
                      if (v78 >= v87[1]) {
                        goto LABEL_214;
                      }
                    }
                  }
LABEL_214:
                  __int16 v79 = (char *)HIBYTE(v90);
                  if (SHIBYTE(v90) >= 0) {
                    unint64_t v80 = (char *)v89;
                  }
                  else {
                    unint64_t v80 = (char *)v89[0];
                  }
                  if (SHIBYTE(v90) < 0) {
                    __int16 v79 = (char *)v89[1];
                  }
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v97, v85, v80, &v79[(void)v80]);
                  BOOL v81 = (char *)HIBYTE(v88);
                  if (v88 >= 0) {
                    BOOL v82 = (char *)v87;
                  }
                  else {
                    BOOL v82 = (char *)v87[0];
                  }
                  if (v88 < 0) {
                    BOOL v81 = (char *)v87[1];
                  }
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)__s, v85, v82, &v81[(void)v82]);
                  *(_OWORD *)&v99.__first_ = v97;
                  v99.__end_ = v98;
                  char v98 = 0;
                  long long v97 = 0uLL;
                  v99.__end_cap_ = *(std::__compressed_pair<std::string *> *)__s;
                  int64_t v100 = v96;
                  __s[0] = 0;
                  __s[1] = 0;
                  int64_t v96 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v84, (long long *)&v99);
                  if (SHIBYTE(v100) < 0) {
                    operator delete(v99.__end_cap_.__value_);
                  }
                  if (SHIBYTE(v99.__end_) < 0) {
                    operator delete(v99.__first_);
                  }
                  if (SHIBYTE(v96) < 0) {
                    operator delete(__s[0]);
                  }
                  if (SHIBYTE(v98) < 0)
                  {
                    std::__split_buffer<std::string>::pointer v76 = (std::__split_buffer<std::string>::pointer)v97;
LABEL_232:
                    operator delete(v76);
                  }
                }
                else
                {
                  __int16 v68 = (void *)HIBYTE(v90);
                  if (SHIBYTE(v90) < 0) {
                    __int16 v68 = v89[1];
                  }
                  if (v68 != (void *)1) {
                    goto LABEL_251;
                  }
                  uint64_t v69 = (void *)HIBYTE(v88);
                  if (v88 < 0) {
                    uint64_t v69 = v87[1];
                  }
                  if (v69 != (void *)1) {
LABEL_251:
                  }
                    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                  if (*(unsigned char *)(v7 + 169))
                  {
                    if (SHIBYTE(v90) >= 0) {
                      long long v70 = v89;
                    }
                    else {
                      long long v70 = (void **)v89[0];
                    }
                    char v71 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)v70);
                    if (SHIBYTE(v90) >= 0) {
                      unsigned int v72 = v89;
                    }
                    else {
                      unsigned int v72 = (void **)v89[0];
                    }
                    *(unsigned char *)unsigned int v72 = v71;
                    if (v88 >= 0) {
                      unsigned int v73 = v87;
                    }
                    else {
                      unsigned int v73 = (void **)v87[0];
                    }
                    char v74 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)v73);
                    if (v88 >= 0) {
                      int v75 = v87;
                    }
                    else {
                      int v75 = (void **)v87[0];
                    }
                    *(unsigned char *)int v75 = v74;
                  }
                  *(_OWORD *)&v99.__first_ = *(_OWORD *)v89;
                  v99.__end_ = v90;
                  v89[0] = 0;
                  v89[1] = 0;
                  unint64_t v90 = 0;
                  v99.__end_cap_ = *(std::__compressed_pair<std::string *> *)v87;
                  int64_t v100 = v88;
                  v87[0] = 0;
                  v87[1] = 0;
                  int64_t v88 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v84, (long long *)&v99);
                  if (SHIBYTE(v100) < 0) {
                    operator delete(v99.__end_cap_.__value_);
                  }
                  if (SHIBYTE(v99.__end_) < 0)
                  {
                    std::__split_buffer<std::string>::pointer v76 = v99.__first_;
                    goto LABEL_232;
                  }
                }
                if (SHIBYTE(v88) < 0) {
                  operator delete(v87[0]);
                }
                if (SHIBYTE(v90) < 0) {
                  operator delete(v89[0]);
                }
                if (SHIBYTE(v92) < 0) {
                  operator delete(v91[0]);
                }
                char v25 = 1;
LABEL_148:
                if (SHIBYTE(v94) < 0) {
                  operator delete(__p[0]);
                }
                BOOL v9 = v34;
                if ((v25 & 1) == 0) {
                  goto LABEL_152;
                }
                goto LABEL_151;
              }
            }
            else
            {
              LOBYTE(v33) = *v33;
            }
            HIBYTE(v92) = 1;
            LOWORD(v91[0]) = v33;
            goto LABEL_156;
          }
        }
      }
      if (SHIBYTE(v94) < 0)
      {
        if (__p[1])
        {
          if (__p[1] == (void *)1)
          {
            int v32 = (void **)__p[0];
LABEL_85:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v32);
LABEL_96:
            char v25 = 1;
            int v34 = v9;
            goto LABEL_148;
          }
          int v32 = (void **)__p[0];
LABEL_95:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v32, *((char *)v32 + 1));
          goto LABEL_96;
        }
        operator delete(__p[0]);
      }
      else if (HIBYTE(v94))
      {
        int v32 = __p;
        if (HIBYTE(v94) == 1) {
          goto LABEL_85;
        }
        goto LABEL_95;
      }
LABEL_151:
      uint64_t v5 = (uint64_t)v9;
LABEL_152:
      if ((char *)v5 == v8)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93) {
            return v8 + 1;
          }
        }
LABEL_248:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_2227CEC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  *(void *)(v46 + 144) = v47;
  if (a46 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v48 - 145) < 0) {
    operator delete(*(void **)(v48 - 168));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v4 = (unint64_t)a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)*a1) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555) {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v13 = (char *)operator new(48 * v12);
    }
    else
    {
      int v13 = 0;
    }
    size_t v14 = &v13[48 * v9];
    *(_OWORD *)size_t v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    long long v15 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    int v17 = *a1;
    unint64_t v16 = (unint64_t)a1[1];
    if ((char *)v16 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64(v16);
      size_t v18 = &v13[48 * v9];
    }
    else
    {
      size_t v18 = &v13[48 * v9];
      do
      {
        long long v19 = *(_OWORD *)(v16 - 48);
        *((void *)v18 - 4) = *(void *)(v16 - 32);
        *((_OWORD *)v18 - 3) = v19;
        *(void *)(v16 - 40) = 0;
        *(void *)(v16 - 32) = 0;
        *(void *)(v16 - 48) = 0;
        long long v20 = *(_OWORD *)(v16 - 24);
        *((void *)v18 - 1) = *(void *)(v16 - 8);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *(void *)(v16 - 16) = 0;
        *(void *)(v16 - 8) = 0;
        *(void *)(v16 - 24) = 0;
        v16 -= 48;
      }
      while ((char *)v16 != v17);
      int64x2_t v21 = *(int64x2_t *)a1;
    }
    size_t v8 = v14 + 48;
    *a1 = v18;
    a1[1] = v14 + 48;
    a1[2] = &v13[48 * v12];
    uint64_t v23 = v21.i64[1];
    BOOL v22 = (void *)v21.i64[0];
    while ((void *)v23 != v22)
    {
      v23 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v23);
    }
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *(void *)(v4 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    size_t v8 = (char *)(v4 + 48);
  }
  a1[1] = v8;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_2227CF168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  long long v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  int v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  void *v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  MEMORY[0x223C9D800](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unint64_t v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = *(void *)(a1 + 40);
      long long v7 = &v5[-v6];
      uint64_t v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        unint64_t v9 = v4 - v6;
        if (2 * v9 > v8) {
          uint64_t v8 = 2 * v9;
        }
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v10 = v8;
        }
        if (v10) {
          uint64_t v11 = operator new(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        long long v19 = &v7[(void)v11];
        long long v20 = (char *)v11 + v10;
        v7[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v7[(void)v11 + 1];
        if (v5 != (unsigned char *)v6)
        {
          int64x2_t v21 = &v5[~v6];
          do
          {
            char v22 = *--v5;
            (v21--)[(void)v11] = v22;
          }
          while (v5 != (unsigned char *)v6);
LABEL_45:
          unint64_t v5 = *(unsigned char **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  unint64_t v5 = *(unsigned char **)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      unint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = &v5[-v23];
      uint64_t v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        unint64_t v26 = v12 - v23;
        if (2 * v26 > v25) {
          uint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v27 = v25;
        }
        if (v27) {
          uint64_t v11 = operator new(v27);
        }
        else {
          uint64_t v11 = 0;
        }
        long long v19 = &v24[(void)v11];
        long long v20 = (char *)v11 + v27;
        v24[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v24[(void)v11 + 1];
        if (v5 != (unsigned char *)v23)
        {
          unsigned int v30 = &v5[~v23];
          do
          {
            char v31 = *--v5;
            (v30--)[(void)v11] = v31;
          }
          while (v5 != (unsigned char *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unint64_t v5 = v2;
    uint64_t v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12) {
    goto LABEL_22;
  }
  unint64_t v13 = *(void *)(a1 + 40);
  size_t v14 = &v5[-v13];
  uint64_t v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0) {
    goto LABEL_50;
  }
  unint64_t v16 = v12 - v13;
  if (2 * v16 > v15) {
    uint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v17 = v15;
  }
  if (v17) {
    uint64_t v11 = operator new(v17);
  }
  else {
    uint64_t v11 = 0;
  }
  long long v19 = &v14[(void)v11];
  long long v20 = (char *)v11 + v17;
  v14[(void)v11] = v2;
  uint64_t v18 = (uint64_t)&v14[(void)v11 + 1];
  if (v5 != (unsigned char *)v13)
  {
    unsigned int v28 = &v5[~v13];
    do
    {
      char v29 = *--v5;
      (v28--)[(void)v11] = v29;
    }
    while (v5 != (unsigned char *)v13);
    goto LABEL_45;
  }
LABEL_46:
  uint64_t v11 = v19;
LABEL_47:
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v20;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v18;
}

void std::__end_state<char>::~__end_state()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<ADAM::Sequencer::init(void)::$_0 &&>>(ADAM::AudioDataAnalysisManager *a1)
{
  uint64_t v1 = ***(void ***)a1;
  ADAM::AudioDataAnalysisManager::instance(a1);
  *(void *)(v1 + 40) = &ADAM::AudioDataAnalysisManager::instance(void)::gAdam;
  atomic_store(0, (unsigned __int8 *)(v1 + 16));
  std::thread::thread<void (ADAM::Sequencer::*)(void),ADAM::Sequencer*,void>();
}

void ADAM::AudioDataAnalysisManager::instance(ADAM::AudioDataAnalysisManager *this)
{
  {
    if (v1) {
      ADAM::AudioDataAnalysisManager::AudioDataAnalysisManager(v1);
    }
  }
}

void sub_2227CF6A4(_Unwind_Exception *a1)
{
}

void std::thread::thread<void (ADAM::Sequencer::*)(void),ADAM::Sequencer*,void>()
{
}

void sub_2227CF78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ADAM::Parameters::instance(ADAM::Parameters *this)
{
  {
    if (v1) {
      ADAM::Parameters::Parameters(v1);
    }
  }
}

void sub_2227CF834(_Unwind_Exception *a1)
{
}

uint64_t ADAM::Parameters::GetParamValue<BOOL>(unsigned int a1)
{
  if (a1 >= (unint64_t)((qword_26AB1A768 - ADAM::Parameters::instance(void)::gParams) >> 4))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, a1);
    __n128 v5 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v7, "unknown ADAMParameterType ", &v6);
    MEMORY[0x223C9D3E0](exception, &v7, v5);
  }
  char v2 = (unsigned __int8 *)std::any_cast[abi:ne180100]<BOOL>((uint64_t (**)(uint64_t, void, void, void, void *))(*(void *)(ADAM::Parameters::instance(void)::gParams + 16 * a1) + 16));
  if (!v2) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v2;
}

void sub_2227CF920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v22 - 33) < 0) {
    operator delete(*(void **)(v22 - 56));
  }
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_2227CFB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0)
    {
LABEL_12:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v27);
  goto LABEL_12;
}

void sub_2227CFC0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v14);
  __cxa_end_catch();
  JUMPOUT(0x2227CFC34);
}

void ADAM::Sequencer::generateRandomDataForWatch(ADAM::Sequencer *this, __n128 a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  char v2 = MEMORY[0x263EF8438];
  a2.n128_u64[0] = 136315650;
  __n128 v13 = a2;
LABEL_2:
  ADAM::AudioDataAnalysisManager::instance(this);
  ADAM::AudioDataAnalysisManager::getServerDelegates((uint64_t)v14, 0x65766E64u);
  unint64_t v4 = (id *)v14[0];
  int v3 = (id *)v14[1];
  while (1)
  {
    if (v4 == v3)
    {
      sleep(2u);
      *(void *)buf = v14;
      std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      goto LABEL_2;
    }
    id WeakRetained = objc_loadWeakRetained(v4);
    int v6 = [WeakRetained isActive:1702260324];

    if (v6) {
      break;
    }
LABEL_15:
    ++v4;
  }
  uint32_t v7 = arc4random_uniform(0x59u);
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  uint64_t v8 = v7 + 33;
  if (ADAM::ADAMLogScope(void)::scope)
  {
    unint64_t v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v9)
    {
LABEL_14:
      uint64_t v11 = [NSNumber numberWithInt:v8 * *(_OWORD *)&v13];
      id v12 = objc_loadWeakRetained(v4);
      [v12 sendAudioSample:v11 withType:1702260324 metadata:0];

      goto LABEL_15;
    }
  }
  else
  {
    size_t v10 = v2;
    unint64_t v9 = v2;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = v13.n128_u32[0];
    *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
    __int16 v16 = 1024;
    int v17 = 219;
    __int16 v18 = 1024;
    int v19 = v8;
    _os_log_impl(&dword_2227C1000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ADAM generated a random number: %d", buf, 0x18u);
  }

  goto LABEL_14;
}

void sub_2227CFDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a12;
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = (id *)**a1;
  if (v2)
  {
    unint64_t v4 = (id *)v1[1];
    __n128 v5 = **a1;
    if (v4 != v2)
    {
      do
        objc_destroyWeak(--v4);
      while (v4 != v2);
      __n128 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, char *__s, std::string *a3)
{
  size_t v6 = strlen(__s);
  uint32_t v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t (**std::any_cast[abi:ne180100]<BOOL>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<BOOL>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

void std::__throw_bad_any_cast[abi:ne180100]()
{
  exception = (std::bad_any_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  uint64_t v1 = std::bad_any_cast::bad_any_cast(exception);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char *__s)
{
  size_t v6 = strlen(__s);
  uint32_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_2227D007C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

std::bad_cast *std::bad_any_cast::bad_any_cast(std::bad_any_cast *this)
{
  __n128 result = std::bad_cast::bad_cast(this);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x263F8C378] + 16);
  return result;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_2227D0144(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (ADAM::Sequencer::*)(void),ADAM::Sequencer*>>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1);
    JUMPOUT(0x223C9D800);
  }
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x223C9D5B0]();
    JUMPOUT(0x223C9D800);
  }
  return result;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (ADAM::Sequencer::*)(void),ADAM::Sequencer*>>(uint64_t *a1)
{
  uint64_t v8 = a1;
  char v2 = std::__thread_local_data();
  int v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[2];
  __n128 v5 = (void (*)(void *))a1[1];
  size_t v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    __n128 v5 = *(void (**)(void *))(*v6 + v5);
  }
  v5(v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (ADAM::Sequencer::*)(void),ADAM::Sequencer*>>::reset[abi:ne180100](&v8);
  return 0;
}

void sub_2227D02B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (ADAM::Sequencer::*)(void),ADAM::Sequencer*>>::reset[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

void ADAM::Sequencer::run(ADAM::Sequencer *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    char v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v2) {
      goto LABEL_10;
    }
  }
  else
  {
    char v2 = MEMORY[0x263EF8438];
    id v3 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    __n128 v5 = "ADAMSequencer.cpp";
    __int16 v6 = 1024;
    int v7 = 87;
    _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Sequencer starts running", buf, 0x12u);
  }

LABEL_10:
  ADAM::Sequencer::run_impl(this);
}

void sub_2227D03DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception a10, long long buf, long long a12)
{
  if (a2 == 1)
  {
    __cxa_get_exception_ptr(a1);
    a10.__vftable = (std::exception_vtbl *)(MEMORY[0x263F8C3C0] + 16);
    __cxa_begin_catch(a1);
    if (*(void *)(v12 + 1848) != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    uint64_t v15 = CALog::LogObjIfEnabled(*(id **)(v13 + 1856));
    __int16 v16 = v15;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v17 = std::exception::what(&a10);
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "ADAMSequencer.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 91;
      WORD1(a12) = 2080;
      *(void *)((char *)&a12 + 4) = v17;
      _os_log_impl(&dword_2227C1000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d ADAM analysis thread caught exception: %s", (uint8_t *)&buf, 0x1Cu);
    }

    std::exception::~exception(&a10);
    __cxa_end_catch();
    JUMPOUT(0x2227D0394);
  }
  _Unwind_Resume(a1);
}

void ADAM::Sequencer::run_impl(ADAM::Sequencer *this)
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  while (2)
  {
    caulk::semaphore::timed_wait((caulk::semaphore *)(*((void *)this + 5) + 144), -1.0);
    uint64_t v2 = *((void *)this + 5);
    id v3 = *(unint64_t **)(v2 + 232);
    if (!v3)
    {
      uint64_t v4 = (unint64_t *)atomic_exchange_explicit((atomic_ullong *volatile)(v2 + 168), 0, memory_order_acquire);
      if (!v4)
      {
        id v3 = 0;
        goto LABEL_8;
      }
      id v3 = 0;
      do
      {
        unint64_t v5 = (unint64_t)v3;
        id v3 = v4;
        uint64_t v4 = (unint64_t *)atomic_load(v4);
        atomic_store(v5, v3);
      }
      while (v4);
      *(void *)(v2 + 232) = v3;
    }
    unint64_t v6 = atomic_load(v3);
    *(void *)(v2 + 232) = v6;
LABEL_8:
    switch(*((_DWORD *)v3 + 4))
    {
      case 0:
        unsigned __int8 v7 = atomic_load((unsigned __int8 *)this + 16);
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if ((v7 & 1) == 0)
        {
          if (ADAM::ADAMLogScope(void)::scope)
          {
            uint64_t v8 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v8) {
              continue;
            }
          }
          else
          {
            uint64_t v8 = MEMORY[0x263EF8438];
            id v76 = MEMORY[0x263EF8438];
          }
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
            __int16 v200 = 1024;
            int v201 = 116;
            _os_log_impl(&dword_2227C1000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Sequencer got Terminate Signal, but stop is not set", buf, 0x12u);
          }
          goto LABEL_213;
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          v196 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v196) {
            return;
          }
        }
        else
        {
          v196 = MEMORY[0x263EF8438];
          id v197 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
          __int16 v200 = 1024;
          int v201 = 114;
          _os_log_impl(&dword_2227C1000, v196, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer got Terminate Signal", buf, 0x12u);
        }

        return;
      case 1:
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          char v29 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v29)
          {
LABEL_105:
            atomic_store(1u, (unsigned __int8 *)this + 17);
            continue;
          }
        }
        else
        {
          char v29 = MEMORY[0x263EF8438];
          id v63 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
          __int16 v200 = 1024;
          int v201 = 121;
          _os_log_impl(&dword_2227C1000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer got Reset Signal", buf, 0x12u);
        }

        goto LABEL_105;
      case 2:
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          size_t v27 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v27) {
            goto LABEL_74;
          }
        }
        else
        {
          size_t v27 = MEMORY[0x263EF8438];
          id v35 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v36 = v3[1];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
          __int16 v200 = 1024;
          int v201 = 126;
          __int16 v202 = 2048;
          unint64_t v203 = v36;
          _os_log_impl(&dword_2227C1000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer got Dispose Signal for ClientSession: %llx", buf, 0x1Cu);
        }

LABEL_74:
        unint64_t v37 = v3[1];
        NodeDescriptor = (const ADAM::BufferNodeDescriptorBase *)ADAM::AudioDataAnalysisManager::getNodeDescriptor(*((ADAM::AudioDataAnalysisManager **)this + 5), v37);
        uint64_t v39 = *((void *)NodeDescriptor + 4);
        uint64_t v40 = *(void *)(*((void *)this + 5) + 240);
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          uint64_t v41 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v41) {
            goto LABEL_119;
          }
        }
        else
        {
          uint64_t v41 = MEMORY[0x263EF8438];
          id v66 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ADAMAnalyzerManager.cpp";
          __int16 v200 = 1024;
          int v201 = 180;
          __int16 v202 = 2048;
          unint64_t v203 = v37;
          _os_log_impl(&dword_2227C1000, v41, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: disposing analyzers", buf, 0x1Cu);
        }

LABEL_119:
        int v67 = *(void **)v40;
        __int16 v68 = *(void **)(v40 + 8);
        while (v67 != v68)
        {
          if ((*((void *)NodeDescriptor + 4) & *(void *)(*v67 + 16)) != 0) {
            (*(void (**)(void))(*(void *)*v67 + 16))(*v67);
          }
          ++v67;
        }
        ADAM::AudioDataAnalysisManager::dispatch(*(ADAM::AudioDataAnalysisManager **)(*((void *)this + 5) + 248), v37, NodeDescriptor);
        uint64_t v69 = *(void *)(*((void *)this + 5) + 248);
        std::mutex::lock((std::mutex *)v69);
        long long v70 = *(void **)(v69 + 72);
        if (!v70) {
          goto LABEL_135;
        }
        char v71 = (void *)(v69 + 72);
        do
        {
          unint64_t v72 = v70[4];
          BOOL v73 = v72 >= v37;
          if (v72 >= v37) {
            char v74 = v70;
          }
          else {
            char v74 = v70 + 1;
          }
          if (v73) {
            char v71 = v70;
          }
          long long v70 = (void *)*v74;
        }
        while (*v74);
        if (v71 == (void *)(v69 + 72) || v71[4] > v37)
        {
LABEL_135:
          if (ADAM::ADAMLogScope(void)::once != -1) {
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
          }
          if (ADAM::ADAMLogScope(void)::scope)
          {
            int v75 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v75) {
              goto LABEL_149;
            }
          }
          else
          {
            int v75 = MEMORY[0x263EF8438];
            id v77 = MEMORY[0x263EF8438];
          }
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "ADAMDispatcher.cpp";
            __int16 v200 = 1024;
            int v201 = 226;
            __int16 v202 = 2048;
            unint64_t v203 = v37;
            double v78 = v75;
            os_log_type_t v79 = OS_LOG_TYPE_DEFAULT;
            unint64_t v80 = "%25s:%-5d Session %llx: failed to dispose writer, writer already disposed?";
            goto LABEL_147;
          }
          goto LABEL_148;
        }
        long long v97 = (void *)v71[5];
        int64_t v96 = (void *)v71[6];
        while (v97 != v96)
        {
          (*(void (**)(void, void *))(*(void *)*v97 + 24))(*v97, v97);
          ++v97;
        }
        char v98 = (void *)v71[1];
        std::__split_buffer<std::string> v99 = v71;
        if (v98)
        {
          do
          {
            int64_t v100 = v98;
            char v98 = (void *)*v98;
          }
          while (v98);
        }
        else
        {
          do
          {
            int64_t v100 = (void *)v99[2];
            BOOL v139 = *v100 == (void)v99;
            std::__split_buffer<std::string> v99 = v100;
          }
          while (!v139);
        }
        if (*(void **)(v69 + 64) == v71) {
          *(void *)(v69 + 64) = v100;
        }
        v101 = *(void **)(v69 + 72);
        --*(void *)(v69 + 80);
        uint64_t v102 = *v71;
        char v103 = v71;
        if (!*v71) {
          goto LABEL_180;
        }
        unint64_t v104 = (void *)v71[1];
        if (v104)
        {
          do
          {
            char v103 = v104;
            unint64_t v104 = (void *)*v104;
          }
          while (v104);
LABEL_180:
          uint64_t v102 = v103[1];
          if (!v102)
          {
            int v105 = 1;
            goto LABEL_244;
          }
        }
        else
        {
          char v103 = v71;
        }
        int v105 = 0;
        *(void *)(v102 + 16) = v103[2];
LABEL_244:
        uint64_t v123 = (void *)v103[2];
        uint64_t v124 = (void *)*v123;
        if ((void *)*v123 == v103)
        {
          *uint64_t v123 = v102;
          if (v103 == v101)
          {
            uint64_t v124 = 0;
            v101 = (void *)v102;
          }
          else
          {
            uint64_t v124 = (void *)v123[1];
          }
        }
        else
        {
          v123[1] = v102;
        }
        int v126 = *((unsigned __int8 *)v103 + 24);
        if (v103 != v71)
        {
          uint64_t v127 = v71[2];
          v103[2] = v127;
          *(void *)(v127 + 8 * (*(void *)v71[2] != (void)v71)) = v103;
          uint64_t v128 = *v71;
          void *v103 = *v71;
          *(void *)(v128 + 16) = v103;
          uint64_t v129 = v71[1];
          v103[1] = v129;
          if (v129) {
            *(void *)(v129 + 16) = v103;
          }
          *((unsigned char *)v103 + 24) = *((unsigned char *)v71 + 24);
          if (v101 == v71) {
            v101 = v103;
          }
        }
        if (!v126 || !v101) {
          goto LABEL_407;
        }
        if (!v105)
        {
          *(unsigned char *)(v102 + 24) = 1;
          goto LABEL_407;
        }
        while (2)
        {
          uint64_t v130 = v124[2];
          if (*(void **)v130 == v124)
          {
            if (!*((unsigned char *)v124 + 24))
            {
              *((unsigned char *)v124 + 24) = 1;
              *(unsigned char *)(v130 + 24) = 0;
              uint64_t v136 = v124[1];
              *(void *)uint64_t v130 = v136;
              if (v136) {
                *(void *)(v136 + 16) = v130;
              }
              v124[2] = *(void *)(v130 + 16);
              *(void *)(*(void *)(v130 + 16) + 8 * (**(void **)(v130 + 16) != v130)) = v124;
              v124[1] = v130;
              *(void *)(v130 + 16) = v124;
              if (v101 == (void *)v130) {
                v101 = v124;
              }
              uint64_t v124 = *(void **)v130;
            }
            v137 = (unsigned char *)*v124;
            if (*v124 && !v137[24]) {
              goto LABEL_402;
            }
            uint64_t v138 = (uint64_t *)v124[1];
            if (v138 && !*((unsigned char *)v138 + 24))
            {
              if (v137 && !v137[24])
              {
LABEL_402:
                uint64_t v138 = v124;
              }
              else
              {
                *((unsigned char *)v138 + 24) = 1;
                *((unsigned char *)v124 + 24) = 0;
                uint64_t v181 = *v138;
                v124[1] = *v138;
                if (v181) {
                  *(void *)(v181 + 16) = v124;
                }
                v138[2] = v124[2];
                *(void *)(v124[2] + 8 * (*(void *)v124[2] != (void)v124)) = v138;
                *uint64_t v138 = (uint64_t)v124;
                v124[2] = v138;
                v137 = v124;
              }
              uint64_t v150 = v138[2];
              *((unsigned char *)v138 + 24) = *(unsigned char *)(v150 + 24);
              *(unsigned char *)(v150 + 24) = 1;
              v137[24] = 1;
              v151 = *(uint64_t **)v150;
              uint64_t v182 = *(void *)(*(void *)v150 + 8);
              *(void *)uint64_t v150 = v182;
              if (v182) {
                *(void *)(v182 + 16) = v150;
              }
              v151[2] = *(void *)(v150 + 16);
              *(void *)(*(void *)(v150 + 16) + 8 * (**(void **)(v150 + 16) != v150)) = v151;
              v151[1] = v150;
              goto LABEL_406;
            }
            *((unsigned char *)v124 + 24) = 0;
            uint64_t v135 = (unsigned char *)v124[2];
            if (v135[24]) {
              BOOL v139 = v135 == (unsigned char *)v101;
            }
            else {
              BOOL v139 = 1;
            }
            if (v139) {
              goto LABEL_316;
            }
            goto LABEL_291;
          }
          if (!*((unsigned char *)v124 + 24))
          {
            *((unsigned char *)v124 + 24) = 1;
            *(unsigned char *)(v130 + 24) = 0;
            v131 = *(uint64_t **)(v130 + 8);
            uint64_t v132 = *v131;
            *(void *)(v130 + 8) = *v131;
            if (v132) {
              *(void *)(v132 + 16) = v130;
            }
            v131[2] = *(void *)(v130 + 16);
            *(void *)(*(void *)(v130 + 16) + 8 * (**(void **)(v130 + 16) != v130)) = v131;
            uint64_t *v131 = v130;
            *(void *)(v130 + 16) = v131;
            if (v101 == (void *)*v124) {
              v101 = v124;
            }
            uint64_t v124 = *(void **)(*v124 + 8);
          }
          int v133 = (void *)*v124;
          if (!*v124 || *((unsigned char *)v133 + 24))
          {
            int v134 = (void *)v124[1];
            if (v134 && !*((unsigned char *)v134 + 24)) {
              goto LABEL_329;
            }
            *((unsigned char *)v124 + 24) = 0;
            uint64_t v135 = (unsigned char *)v124[2];
            if (v135 == (unsigned char *)v101)
            {
              uint64_t v135 = v101;
LABEL_316:
              v135[24] = 1;
              goto LABEL_407;
            }
            if (!v135[24]) {
              goto LABEL_316;
            }
LABEL_291:
            uint64_t v124 = *(void **)(*((void *)v135 + 2) + 8 * (**((void **)v135 + 2) == (void)v135));
            continue;
          }
          break;
        }
        int v134 = (void *)v124[1];
        if (v134 && !*((unsigned char *)v134 + 24))
        {
LABEL_329:
          int v133 = v124;
        }
        else
        {
          *((unsigned char *)v133 + 24) = 1;
          *((unsigned char *)v124 + 24) = 0;
          uint64_t v149 = v133[1];
          *uint64_t v124 = v149;
          if (v149) {
            *(void *)(v149 + 16) = v124;
          }
          v133[2] = v124[2];
          *(void *)(v124[2] + 8 * (*(void *)v124[2] != (void)v124)) = v133;
          v133[1] = v124;
          v124[2] = v133;
          int v134 = v124;
        }
        uint64_t v150 = v133[2];
        *((unsigned char *)v133 + 24) = *(unsigned char *)(v150 + 24);
        *(unsigned char *)(v150 + 24) = 1;
        *((unsigned char *)v134 + 24) = 1;
        v151 = *(uint64_t **)(v150 + 8);
        uint64_t v152 = *v151;
        *(void *)(v150 + 8) = *v151;
        if (v152) {
          *(void *)(v152 + 16) = v150;
        }
        v151[2] = *(void *)(v150 + 16);
        *(void *)(*(void *)(v150 + 16) + 8 * (**(void **)(v150 + 16) != v150)) = v151;
        uint64_t *v151 = v150;
LABEL_406:
        *(void *)(v150 + 16) = v151;
LABEL_407:
        *(void *)buf = v71 + 5;
        std::vector<std::unique_ptr<ADAM::Writer>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        operator delete(v71);
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (!ADAM::ADAMLogScope(void)::scope)
        {
          int v75 = MEMORY[0x263EF8438];
          id v183 = MEMORY[0x263EF8438];
LABEL_413:
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "ADAMDispatcher.cpp";
            __int16 v200 = 1024;
            int v201 = 235;
            __int16 v202 = 2048;
            unint64_t v203 = v37;
            double v78 = v75;
            os_log_type_t v79 = OS_LOG_TYPE_DEBUG;
            unint64_t v80 = "%25s:%-5d Session %llx: writers detached";
LABEL_147:
            _os_log_impl(&dword_2227C1000, v78, v79, v80, buf, 0x1Cu);
          }
LABEL_148:

          goto LABEL_149;
        }
        int v75 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (v75) {
          goto LABEL_413;
        }
LABEL_149:
        std::mutex::unlock((std::mutex *)v69);
        BOOL v81 = (void *)*((void *)this + 5);
        ADAM::session_lock::lock_inst(v82);
        MEMORY[0x223C9D5E0](&ADAM::session_lock::lock_inst(void)::_m);
        int v83 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(v81, HIDWORD(v37));
        if (!v83)
        {
          if (ADAM::ADAMLogScope(void)::once != -1) {
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
          }
          if (ADAM::ADAMLogScope(void)::scope)
          {
            int v83 = *(id *)ADAM::ADAMLogScope(void)::scope;
            uint64_t v94 = v83;
            if (!v83)
            {
LABEL_190:
              ADAM::session_lock_shared::~session_lock_shared((ADAM::session_lock_shared *)v83);
LABEL_191:
              int v108 = 0;
              goto LABEL_192;
            }
          }
          else
          {
            uint64_t v94 = MEMORY[0x263EF8438];
            id v107 = MEMORY[0x263EF8438];
          }
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "AudioDataAnalysisManager.cpp";
            __int16 v200 = 1024;
            int v201 = 137;
            __int16 v202 = 2048;
            unint64_t v203 = HIDWORD(v37);
            _os_log_impl(&dword_2227C1000, v94, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sessiion %llx already disposed?", buf, 0x1Cu);
          }

          goto LABEL_190;
        }
        Class isa = v83[3].isa;
        if (!*((unsigned char *)isa + 432)) {
          goto LABEL_190;
        }
        uint64_t v85 = (std::mutex *)((char *)isa + 56);
        std::mutex::lock((std::mutex *)((char *)isa + 56));
        if (std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)isa + 2, v37))
        {
          std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::__erase_unique<unsigned int>((void *)isa + 2, v37);
        }
        uint64_t v86 = *((void *)isa + 5);
        std::mutex::unlock(v85);
        ADAM::session_lock_shared::~session_lock_shared(v87);
        if (v86) {
          goto LABEL_191;
        }
        ADAM::session_lock_exclusive::session_lock_exclusive(v88);
        uint64_t v89 = (ADAM::ClientSessionManager **)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(v81, HIDWORD(v37));
        if (v89)
        {
          unint64_t v90 = v89;
          int8x8_t v91 = (int8x8_t)v81[1];
          uint64_t v92 = v89[1];
          uint8x8_t v93 = (uint8x8_t)vcnt_s8(v91);
          v93.i16[0] = vaddlv_u8(v93);
          if (v93.u32[0] > 1uLL)
          {
            if ((unint64_t)v92 >= *(void *)&v91) {
              uint64_t v92 = (ADAM::ClientSessionManager *)((unint64_t)v92 % *(void *)&v91);
            }
          }
          else
          {
            uint64_t v92 = (ADAM::ClientSessionManager *)((*(void *)&v91 - 1) & (unint64_t)v92);
          }
          int v120 = *(ADAM::ClientSessionManager ***)(*v81 + 8 * (void)v92);
          do
          {
            int v121 = v120;
            int v120 = (ADAM::ClientSessionManager **)*v120;
          }
          while (v120 != v89);
          if (v121 == v81 + 2) {
            goto LABEL_295;
          }
          unint64_t v122 = (unint64_t)v121[1];
          if (v93.u32[0] > 1uLL)
          {
            if (v122 >= *(void *)&v91) {
              v122 %= *(void *)&v91;
            }
          }
          else
          {
            v122 &= *(void *)&v91 - 1;
          }
          if ((ADAM::ClientSessionManager *)v122 != v92)
          {
LABEL_295:
            if (!*v89) {
              goto LABEL_296;
            }
            unint64_t v125 = *((void *)*v89 + 1);
            if (v93.u32[0] > 1uLL)
            {
              if (v125 >= *(void *)&v91) {
                v125 %= *(void *)&v91;
              }
            }
            else
            {
              v125 &= *(void *)&v91 - 1;
            }
            if ((ADAM::ClientSessionManager *)v125 != v92) {
LABEL_296:
            }
              *(void *)(*v81 + 8 * (void)v92) = 0;
          }
          uint64_t v140 = *v89;
          if (*v89)
          {
            unint64_t v141 = *((void *)v140 + 1);
            if (v93.u32[0] > 1uLL)
            {
              if (v141 >= *(void *)&v91) {
                v141 %= *(void *)&v91;
              }
            }
            else
            {
              v141 &= *(void *)&v91 - 1;
            }
            if ((ADAM::ClientSessionManager *)v141 != v92)
            {
              *(void *)(*v81 + 8 * v141) = v121;
              uint64_t v140 = *v89;
            }
          }
          void *v121 = v140;
          *uint64_t v89 = 0;
          --v81[3];
          std::unique_ptr<ADAM::ClientSessionManager>::reset[abi:ne180100](v89 + 3);
          operator delete(v90);
        }
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          std::string v142 = (ADAM::session_lock_exclusive *)*(id *)ADAM::ADAMLogScope(void)::scope;
          char v143 = v142;
          if (!v142) {
            goto LABEL_314;
          }
        }
        else
        {
          char v143 = MEMORY[0x263EF8438];
          id v144 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v143, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AudioDataAnalysisManager.cpp";
          __int16 v200 = 1024;
          int v201 = 150;
          __int16 v202 = 2048;
          unint64_t v203 = HIDWORD(v37);
          _os_log_impl(&dword_2227C1000, v143, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx dispose * Finished *", buf, 0x1Cu);
        }

LABEL_314:
        ADAM::session_lock_exclusive::~session_lock_exclusive(v142);
        int v108 = 1;
LABEL_192:
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (!v108)
        {
          if (ADAM::ADAMLogScope(void)::scope)
          {
            uint64_t v8 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v8) {
              continue;
            }
          }
          else
          {
            uint64_t v8 = MEMORY[0x263EF8438];
            id v114 = MEMORY[0x263EF8438];
          }
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
            __int16 v200 = 1024;
            int v201 = 147;
            __int16 v202 = 2048;
            unint64_t v203 = v37;
            _os_log_impl(&dword_2227C1000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer Not ready to reset analyzers for %llx", buf, 0x1Cu);
          }
LABEL_213:

          continue;
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          uint64_t v109 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v109) {
            goto LABEL_205;
          }
        }
        else
        {
          uint64_t v109 = MEMORY[0x263EF8438];
          id v110 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
          __int16 v200 = 1024;
          int v201 = 142;
          __int16 v202 = 2048;
          unint64_t v203 = v37;
          _os_log_impl(&dword_2227C1000, v109, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer hard reset analyzers for %llx", buf, 0x1Cu);
        }

LABEL_205:
        uint64_t v111 = *(void *)(*((void *)this + 5) + 240);
        BOOL v112 = *(void **)v111;
        unint64_t v113 = *(void **)(v111 + 8);
        while (v112 != v113)
        {
          if ((*(void *)(*v112 + 16) & v39) != 0) {
            (*(void (**)(void))(*(void *)*v112 + 48))(*v112);
          }
          ++v112;
        }
        continue;
      case 3:
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          uint64_t v28 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v28) {
            goto LABEL_83;
          }
        }
        else
        {
          uint64_t v28 = MEMORY[0x263EF8438];
          id v42 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v43 = v3[1];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
          __int16 v200 = 1024;
          int v201 = 153;
          __int16 v202 = 2048;
          unint64_t v203 = v43;
          _os_log_impl(&dword_2227C1000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sequencer Configure action: %llx", buf, 0x1Cu);
        }

LABEL_83:
        unint64_t v44 = (ADAM::AudioDataAnalysisManager *)*((void *)this + 5);
        unint64_t v45 = v3[1];
        uint64_t v46 = ADAM::AudioDataAnalysisManager::getNodeDescriptor(v44, v45);
        uint64_t v47 = *((void *)v44 + 30);
        uint64_t v48 = *(void **)v47;
        std::string::size_type v49 = *(void **)(v47 + 8);
        if (*(void **)v47 != v49)
        {
          uint64_t v50 = v46;
          do
          {
            if ((*(void *)(v50 + 32) & *(void *)(*v48 + 16)) != 0) {
              (*(void (**)(void, unint64_t, uint64_t))(*(void *)*v48 + 24))(*v48, v45, v50);
            }
            ++v48;
          }
          while (v48 != v49);
        }
        unint64_t v51 = v3[1];
        ClientSessionMananger = (std::mutex *)ADAM::AudioDataAnalysisManager::getClientSessionMananger(*((ADAM::AudioDataAnalysisManager **)this + 5), HIDWORD(v51));
        long long v53 = ClientSessionMananger;
        if (!ClientSessionMananger) {
          continue;
        }
        unint64_t v54 = ClientSessionMananger + 5;
        std::mutex::lock(ClientSessionMananger + 5);
        if (*(void *)&v53[6].__m_.__opaque[32])
        {
          unint64_t v55 = *(void *)&v53[6].__m_.__opaque[24];
          __int16 v56 = (uint64_t *)(*(void *)(*(void *)v53[6].__m_.__opaque + ((v55 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v55);
          uint64_t v58 = *v56;
          long long v57 = (std::__shared_weak_count *)v56[1];
          if (v57)
          {
            atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v55 = *(void *)&v53[6].__m_.__opaque[24];
            double v59 = *(std::__shared_weak_count **)(*(void *)(*(void *)v53[6].__m_.__opaque
                                                           + ((v55 >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * v55
                                               + 8);
            if (v59)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v59);
              unint64_t v55 = *(void *)&v53[6].__m_.__opaque[24];
            }
          }
          uint64_t v60 = *(void *)&v53[6].__m_.__opaque[32] - 1;
          unint64_t v61 = v55 + 1;
          *(void *)&v53[6].__m_.__opaque[24] = v61;
          *(void *)&v53[6].__m_.__opaque[32] = v60;
          if (v61 >= 0x200)
          {
            operator delete(**(void ***)v53[6].__m_.__opaque);
            *(void *)v53[6].__m_.__opaque += 8;
            *(void *)&v53[6].__m_.__opaque[24] -= 256;
          }
          if (*(_DWORD *)(v58 + 8) == v51) {
            goto LABEL_232;
          }
          if (ADAM::ADAMLogScope(void)::once != -1) {
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
          }
          if (ADAM::ADAMLogScope(void)::scope)
          {
            char v62 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v62)
            {
LABEL_232:
              if (v57) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v57);
              }
              goto LABEL_234;
            }
          }
          else
          {
            char v62 = MEMORY[0x263EF8438];
            id v118 = MEMORY[0x263EF8438];
          }
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            unint64_t v119 = *(void *)(v58 + 8);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "ADAMClientSessionManager.cpp";
            __int16 v200 = 1024;
            int v201 = 339;
            __int16 v202 = 2048;
            unint64_t v203 = v119;
            __int16 v204 = 1024;
            LODWORD(v205) = v51;
            _os_log_impl(&dword_2227C1000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d unexpected node id: expected: %llx, actual:%x", buf, 0x22u);
          }

          goto LABEL_232;
        }
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          uint64_t v95 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v95) {
            goto LABEL_234;
          }
        }
        else
        {
          uint64_t v95 = MEMORY[0x263EF8438];
          id v115 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADAMClientSessionManager.cpp";
          __int16 v200 = 1024;
          int v201 = 344;
          _os_log_impl(&dword_2227C1000, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d config msg queue empty", buf, 0x12u);
        }

LABEL_234:
        std::mutex::unlock(v54);
        continue;
      case 4:
        unint64_t v9 = v3[1];
        uint64_t v10 = ADAM::AudioDataAnalysisManager::getNodeDescriptor(*((ADAM::AudioDataAnalysisManager **)this + 5), v9);
        if (!v10)
        {
          if (ADAM::ADAMLogScope(void)::once != -1) {
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
          }
          if (ADAM::ADAMLogScope(void)::scope)
          {
            uint64_t v8 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v8) {
              continue;
            }
          }
          else
          {
            uint64_t v8 = MEMORY[0x263EF8438];
            id v106 = MEMORY[0x263EF8438];
          }
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
            __int16 v200 = 1024;
            int v201 = 163;
            __int16 v202 = 2048;
            unint64_t v203 = v9;
            _os_log_impl(&dword_2227C1000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: Sequencer getting a invalid node descriptor", buf, 0x1Cu);
          }
          goto LABEL_213;
        }
        uint64_t v11 = *(void *)(*((void *)this + 5) + 248);
        std::mutex::lock((std::mutex *)v11);
        uint64_t v12 = *(void **)(v11 + 72);
        if (!v12) {
          goto LABEL_59;
        }
        uint64_t v13 = (void *)(v11 + 72);
        do
        {
          unint64_t v14 = v12[4];
          BOOL v15 = v14 >= v9;
          if (v14 >= v9) {
            __int16 v16 = v12;
          }
          else {
            __int16 v16 = v12 + 1;
          }
          if (v15) {
            uint64_t v13 = v12;
          }
          uint64_t v12 = (void *)*v16;
        }
        while (*v16);
        if (v13 == (void *)(v11 + 72) || v13[4] > v9 || (uint64_t v17 = v13[5], v18 = v13[6], v17 == v18))
        {
LABEL_59:
          std::mutex::unlock((std::mutex *)v11);
          unint64_t v23 = (ADAM::AudioDataAnalysisManager *)*((void *)this + 5);
        }
        else
        {
          uint64_t v19 = v17 + 8;
          do
          {
            int v20 = (*(uint64_t (**)(void))(**(void **)(v19 - 8) + 8))(*(void *)(v19 - 8));
            int v21 = v20;
            if (v19 == v18) {
              char v22 = 1;
            }
            else {
              char v22 = v20;
            }
            v19 += 8;
          }
          while ((v22 & 1) == 0);
          std::mutex::unlock((std::mutex *)v11);
          unint64_t v23 = (ADAM::AudioDataAnalysisManager *)*((void *)this + 5);
          if (v21)
          {
            uint64_t v24 = *((void *)v23 + 30);
            int v25 = *(_DWORD *)(v10 + 40);
            *(_OWORD *)(v24 + 24) = 0u;
            int v26 = (ADAM *)(v24 + 24);
            *(void *)(v24 + 104) = 0;
            *(_OWORD *)(v24 + 88) = 0u;
            *(_OWORD *)(v24 + 72) = 0u;
            *(_OWORD *)(v24 + 56) = 0u;
            *(_OWORD *)(v24 + 40) = 0u;
            ADAM::AudioDataAnalysisManager::instance(v23);
            if (v25 == 2) {
              operator new();
            }
            if (v25 == 1) {
              operator new();
            }
            if (v25)
            {
              unsigned int v146 = 1970168353;
              goto LABEL_359;
            }
            ADAM::allocAudioBufferList(v26, (AudioBufferList **)(v10 + 48), (const AudioStreamBasicDescription *)*(unsigned int *)(v10 + 88), 1);
            uint64_t v145 = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, HIDWORD(v9));
            uint64_t v198 = v24 + 32;
            unsigned int v146 = 1852400673;
            if (v145)
            {
              if (*(unsigned char *)(v145 + 432))
              {
                uint64_t v147 = *(void *)v26;
                uint64_t v148 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(v145 + 16), v9);
                if (v148) {
                  unsigned int v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v148[3] + 24))(v148[3], v147, v198);
                }
              }
              else
              {
                unsigned int v146 = 1634625825;
              }
            }
            int v153 = ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
            unsigned int v154 = ++ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
            if (!v153 && v146)
            {
              if (ADAM::ADAMLogScope(void)::once != -1) {
                dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
              }
              if (ADAM::ADAMLogScope(void)::scope)
              {
                id v155 = *(id *)ADAM::ADAMLogScope(void)::scope;
                if (!v155) {
                  goto LABEL_356;
                }
              }
              else
              {
                unsigned int v159 = v146;
                v160 = (void *)MEMORY[0x263EF8438];
                id v161 = MEMORY[0x263EF8438];
                id v155 = v160;
                unsigned int v146 = v159;
              }
              v162 = v155;
              if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v208, v146);
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "ADAMAnalyzerManager.cpp";
                __int16 v200 = 1024;
                int v201 = 172;
                __int16 v202 = 2048;
                unint64_t v203 = v9;
                __int16 v204 = 2080;
                v205 = v208;
                _os_log_impl(&dword_2227C1000, v162, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session %llx: faild to read buffer: %s", buf, 0x26u);
              }

LABEL_356:
              int v163 = ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
              if (ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt > 0xFFE) {
                int v163 = 0;
              }
              ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt = v163;
LABEL_359:
              int v164 = ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
              unsigned int v165 = ++ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
              if (v164)
              {
                long long v166 = &ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                goto LABEL_371;
              }
              if (ADAM::ADAMLogScope(void)::once != -1) {
                dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
              }
              if (ADAM::ADAMLogScope(void)::scope)
              {
                int64x2_t v167 = *(id *)ADAM::ADAMLogScope(void)::scope;
                if (!v167)
                {
LABEL_370:
                  unsigned int v165 = ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                  long long v166 = &ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
LABEL_371:
                  unsigned int v158 = v146;
LABEL_372:
                  if (v165 > 0xFFE) {
                    unsigned int v165 = 0;
                  }
                  *long long v166 = v165;
LABEL_375:
                  int v169 = ADAM::Sequencer::run_impl(void)::errCnt;
                  unsigned int v170 = ++ADAM::Sequencer::run_impl(void)::errCnt;
                  if (!v169)
                  {
                    if (ADAM::ADAMLogScope(void)::once != -1) {
                      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
                    }
                    if (ADAM::ADAMLogScope(void)::scope)
                    {
                      id v171 = *(id *)ADAM::ADAMLogScope(void)::scope;
                      if (!v171) {
                        goto LABEL_387;
                      }
                    }
                    else
                    {
                      v172 = (void *)MEMORY[0x263EF8438];
                      id v173 = MEMORY[0x263EF8438];
                      id v171 = v172;
                    }
                    v174 = v171;
                    if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
                    {
                      v175 = (void *)(v10 + 8);
                      if (*(char *)(v10 + 31) < 0) {
                        v175 = (void *)*v175;
                      }
                      CAX4CCString::CAX4CCString((CAX4CCString *)v208, v158);
                      *(_DWORD *)buf = 136316162;
                      *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
                      __int16 v200 = 1024;
                      int v201 = 181;
                      __int16 v202 = 2048;
                      unint64_t v203 = v9;
                      __int16 v204 = 2080;
                      v205 = v175;
                      __int16 v206 = 2080;
                      v207 = v208;
                      _os_log_impl(&dword_2227C1000, v174, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: Error Analyzing Data, nodeName: %s, err code: %s", buf, 0x30u);
                    }

LABEL_387:
                    unsigned int v170 = ADAM::Sequencer::run_impl(void)::errCnt;
                  }
                  v176 = &ADAM::Sequencer::run_impl(void)::errCnt;
                  goto LABEL_389;
                }
              }
              else
              {
                int64x2_t v167 = MEMORY[0x263EF8438];
                id v168 = MEMORY[0x263EF8438];
              }
              if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "ADAMAnalyzerManager.cpp";
                __int16 v200 = 1024;
                int v201 = 72;
                __int16 v202 = 2048;
                unint64_t v203 = v9;
                _os_log_impl(&dword_2227C1000, v167, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: Failed to Fetch Data", buf, 0x1Cu);
              }

              goto LABEL_370;
            }
            if (v154 > 0xFFE) {
              unsigned int v154 = 0;
            }
            ADAM::AnalyzerManager::fetchData(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt = v154;
            if (v146) {
              goto LABEL_359;
            }
            v156 = *(void **)v24;
            if (*(void *)v24 == *(void *)(v24 + 8))
            {
              ADAM::AnalyzerManager::releaseData((ADAM::AnalyzerManager *)v24, (const ADAM::BufferNodeDescriptorBase *)v10);
              goto LABEL_416;
            }
            v157 = *(void **)(v24 + 8);
            unsigned int v158 = 561476709;
            do
            {
              if ((*(void *)(v10 + 32) & *(void *)(*v156 + 16)) != 0)
              {
                unsigned int v158 = (*(uint64_t (**)(void, unint64_t, void, uint64_t))(*(void *)*v156 + 32))(*v156, v9, *(void *)v26, v198);
                if (v158) {
                  break;
                }
              }
              ++v156;
            }
            while (v156 != v157);
            ADAM::AnalyzerManager::releaseData((ADAM::AnalyzerManager *)v24, (const ADAM::BufferNodeDescriptorBase *)v10);
            if (v158)
            {
              if (v158 != 561476709) {
                goto LABEL_375;
              }
LABEL_416:
              int v184 = ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
              unsigned int v165 = ++ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
              if (v184)
              {
                long long v166 = &ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
LABEL_435:
                unsigned int v158 = 561476709;
                goto LABEL_372;
              }
              if (ADAM::ADAMLogScope(void)::once != -1) {
                dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
              }
              if (ADAM::ADAMLogScope(void)::scope)
              {
                v185 = *(id *)ADAM::ADAMLogScope(void)::scope;
                if (!v185)
                {
LABEL_434:
                  long long v166 = &ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                  unsigned int v165 = ADAM::AnalyzerManager::analyze(unsigned long long,ADAM::BufferNodeDescriptorBase const*)::errCnt;
                  goto LABEL_435;
                }
              }
              else
              {
                v185 = MEMORY[0x263EF8438];
                id v190 = MEMORY[0x263EF8438];
              }
              if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
              {
                v191 = *(unsigned char **)(v10 + 32);
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "ADAMAnalyzerManager.cpp";
                __int16 v200 = 1024;
                int v201 = 88;
                __int16 v202 = 2048;
                unint64_t v203 = v9;
                __int16 v204 = 2048;
                v205 = v191;
                _os_log_impl(&dword_2227C1000, v185, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: No Analyzer found, nodeEndPointMask: %llx", buf, 0x26u);
              }

              goto LABEL_434;
            }
            unsigned int v186 = ADAM::AudioDataAnalysisManager::dispatch(*(ADAM::AudioDataAnalysisManager **)(*((void *)this + 5) + 248), v9, (const ADAM::BufferNodeDescriptorBase *)v10);
            int v187 = ADAM::Sequencer::run_impl(void)::errCnt;
            unsigned int v170 = ++ADAM::Sequencer::run_impl(void)::errCnt;
            if (v187)
            {
              v176 = &ADAM::Sequencer::run_impl(void)::errCnt;
              goto LABEL_389;
            }
            unsigned int v188 = v186;
            v176 = &ADAM::Sequencer::run_impl(void)::errCnt;
            if (!v186)
            {
LABEL_389:
              if (v170 > 0xFFE) {
                unsigned int v170 = 0;
              }
              int *v176 = v170;
              v177 = *(uint64_t **)(*((void *)this + 5) + 240);
              uint64_t v178 = *v177;
              uint64_t v179 = v177[1];
              while (v178 != v179)
              {
                v180 = *(void **)v178;
                if (*(unsigned char *)(*(void *)v178 + 112) && (*(void *)(v10 + 32) & v180[2]) != 0) {
                  (*(void (**)(void *))(*v180 + 40))(v180);
                }
                v178 += 8;
              }
              continue;
            }
            if (ADAM::ADAMLogScope(void)::once != -1) {
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
            }
            if (ADAM::ADAMLogScope(void)::scope)
            {
              id v189 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v189)
              {
LABEL_443:
                unsigned int v170 = ADAM::Sequencer::run_impl(void)::errCnt;
                v176 = &ADAM::Sequencer::run_impl(void)::errCnt;
                goto LABEL_389;
              }
            }
            else
            {
              v192 = (void *)MEMORY[0x263EF8438];
              id v193 = MEMORY[0x263EF8438];
              id v189 = v192;
            }
            v194 = v189;
            if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
            {
              v195 = (void *)(v10 + 8);
              if (*(char *)(v10 + 31) < 0) {
                v195 = (void *)*v195;
              }
              CAX4CCString::CAX4CCString((CAX4CCString *)v208, v188);
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
              __int16 v200 = 1024;
              int v201 = 177;
              __int16 v202 = 2048;
              unint64_t v203 = v9;
              __int16 v204 = 2080;
              v205 = v195;
              __int16 v206 = 2080;
              v207 = v208;
              _os_log_impl(&dword_2227C1000, v194, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: Error Dispatch Data, nodeName: %s, err code: %s", buf, 0x30u);
            }

            goto LABEL_443;
          }
        }
        uint64_t v30 = ADAM::AudioDataAnalysisManager::getClientSessionMananger(v23, HIDWORD(v9));
        if (v30)
        {
          if (*(unsigned char *)(v30 + 432))
          {
            char v31 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(v30 + 16), v9);
            if (v31) {
              (*(void (**)(uint64_t))(*(void *)v31[3] + 32))(v31[3]);
            }
          }
        }
        int v32 = ADAM::Sequencer::run_impl(void)::errCnt;
        unsigned int v33 = ++ADAM::Sequencer::run_impl(void)::errCnt;
        if (v32) {
          goto LABEL_225;
        }
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          int v34 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v34) {
            goto LABEL_224;
          }
        }
        else
        {
          int v34 = MEMORY[0x263EF8438];
          id v116 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          uint64_t v117 = (void *)(v10 + 8);
          if (*(char *)(v10 + 31) < 0) {
            uint64_t v117 = (void *)*v117;
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
          __int16 v200 = 1024;
          int v201 = 191;
          __int16 v202 = 2048;
          unint64_t v203 = v9;
          __int16 v204 = 2080;
          v205 = v117;
          _os_log_impl(&dword_2227C1000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: end point not enabled, nodeName: %s, data discarded", buf, 0x26u);
        }

LABEL_224:
        unsigned int v33 = ADAM::Sequencer::run_impl(void)::errCnt;
LABEL_225:
        if (v33 > 0xFFE) {
          unsigned int v33 = 0;
        }
        ADAM::Sequencer::run_impl(void)::errCnt = v33;
        continue;
      default:
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          uint64_t v8 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v8) {
            continue;
          }
        }
        else
        {
          uint64_t v8 = MEMORY[0x263EF8438];
          id v64 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          int v65 = *((_DWORD *)v3 + 4);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ADAMSequencer.cpp";
          __int16 v200 = 1024;
          int v201 = 197;
          __int16 v202 = 1024;
          LODWORD(v203) = v65;
          _os_log_impl(&dword_2227C1000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown Msg Action Type: %d", buf, 0x18u);
        }
        goto LABEL_213;
    }
  }
}

void sub_2227D2364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CALog::LogObjIfEnabled(id *a1)
{
  if (a1)
  {
    id v1 = *a1;
  }
  else
  {
    id v1 = (id)MEMORY[0x263EF8438];
    id v2 = MEMORY[0x263EF8438];
  }

  return v1;
}

void CAX4CCString::CAX4CCString(CAX4CCString *this, unsigned int a2)
{
  unsigned int v4 = bswap32(a2);
  *(_DWORD *)((char *)this + 1) = v4;
  uint64_t v5 = MEMORY[0x263EF8318];
  if ((v4 & 0x80) != 0)
  {
    if (!__maskrune((char)v4, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * (char)v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  unsigned int v6 = *((char *)this + 2);
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  unsigned int v7 = *((char *)this + 3);
  if ((v7 & 0x80000000) != 0)
  {
    if (!__maskrune(v7, 0x40000uLL)) {
      goto LABEL_17;
    }
LABEL_13:
    unsigned int v8 = *((char *)this + 4);
    if ((v8 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL)) {
        goto LABEL_17;
      }
    }
    else if ((*(_DWORD *)(v5 + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_17;
    }
    *(_WORD *)((char *)this + 5) = 39;
    *(unsigned char *)this = 39;
    return;
  }
  if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) != 0) {
    goto LABEL_13;
  }
LABEL_17:
  if (a2 + 199999 > 0x61A7E) {
    snprintf((char *)this, 0x10uLL, "0x%x");
  }
  else {
    snprintf((char *)this, 0x10uLL, "%d");
  }
}

void sub_2227D273C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227D2844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227D2B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  _Unwind_Resume(a1);
}

void std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  id v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_2227D2DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  BOOL v15 = v14;

  std::mutex::unlock(v12);
  objc_destroyWeak(&location);

  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_2227D2F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227D3018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227D30A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2227D3114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2227D32E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227D3570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227D3828(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_2227D39A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227D3B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227D3EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_2227D42A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227D472C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2227D49E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227D4DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2227D4F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ADAM::MediaExposureWriter::~MediaExposureWriter(ADAM::MediaExposureWriter *this)
{
  ADAM::MediaExposureWriter::~MediaExposureWriter(this);

  JUMPOUT(0x223C9D800);
}

{
  void *v2;
  void *v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  uint64_t v12 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D4EBA68;
  id v2 = (void *)MEMORY[0x223C9DB40]();
  id v3 = *(void **)(*((void *)this + 13) + 8);
  if (v3) {
    [v3 finishWithCompletion:&__block_literal_global];
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v4 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v4) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263EF8438];
    uint64_t v5 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    unsigned int v8 = 136315394;
    unint64_t v9 = "MediaExposureWriter.mm";
    uint64_t v10 = 1024;
    uint64_t v11 = 102;
    _os_log_impl(&dword_2227C1000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d HAE writer destroyed", (uint8_t *)&v8, 0x12u);
  }

LABEL_12:
  unsigned int v6 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  unsigned int v7 = (id *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v7) {
    std::default_delete<ADAM::MediaExposureWriter::HealthKitWriterInternalState>::operator()[abi:ne180100](v7);
  }
  ADAM::Writer::~Writer(this);
}

void sub_2227D512C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::default_delete<ADAM::MediaExposureWriter::HealthKitWriterInternalState>::operator()[abi:ne180100](id *a1)
{
  JUMPOUT(0x223C9D800);
}

void ADAM::Writer::~Writer(ADAM::Writer *this)
{
  *(void *)this = &unk_26D4EC678;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    uint64_t v3 = *((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
  }
  uint64_t v4 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void ADAM::Writer::detach(uint64_t a1, uint64_t *a2)
{
  if (*a2 == a1 && *(unsigned char *)(a1 + 80))
  {
    std::mutex::lock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
    if (*(unsigned char *)(a1 + 81))
    {
      uint64_t v4 = *a2;
      *a2 = 0;
      uint64_t v5 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = v4;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
      }
    }
    std::mutex::unlock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
  }
}

uint64_t ADAM::Writer::isEnabled(ADAM::Writer *this)
{
  return 1;
}

uint64_t ADAM::MediaExposureWriter::write(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  SessionBundleIDs = (ADAM::AudioDataAnalysisManager *)ADAM::AudioDataAnalysisManager::fetchSessionBundleIDs(*(void *)(a1 + 8), (std::vector<std::string> *)(a1 + 48));
  if (SessionBundleIDs)
  {
    unsigned int v7 = a2;
    uint64_t v8 = a3;
    context = (void *)MEMORY[0x223C9DB40]();
    unint64_t v9 = (void *)[objc_alloc(MEMORY[0x263F089D8]) initWithString:&stru_26D4ECBB0];
    uint64_t v10 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 56) != v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        uint64_t v13 = [NSString stringWithUTF8String:];
        [v9 appendString:v13];

        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
        if (v14 - 1 > v12)
        {
          [v9 appendString:@","];
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
        }
        ++v12;
        v11 += 24;
      }
      while (v14 > v12);
    }
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    a3 = v8;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      BOOL v15 = *(id *)ADAM::ADAMLogScope(void)::scope;
      a2 = v7;
      if (!v15)
      {
LABEL_16:
        [*(id *)(*(void *)(a1 + 104) + 24) setObject:v9 forKey:@"_HKPrivateMediaSourceBundleIdentifier"];

        goto LABEL_17;
      }
    }
    else
    {
      BOOL v15 = MEMORY[0x263EF8438];
      id v16 = MEMORY[0x263EF8438];
      a2 = v7;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "MediaExposureWriter.mm";
      __int16 v73 = 1024;
      int v74 = 191;
      __int16 v75 = 2112;
      uint64_t v76 = (uint64_t)v9;
      _os_log_impl(&dword_2227C1000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d HAE Updated bundleIDs: %@", buf, 0x1Cu);
    }

    goto LABEL_16;
  }
LABEL_17:
  if (*(void *)(*(void *)(a1 + 104) + 16)) {
    goto LABEL_18;
  }
  ADAM::AudioDataAnalysisManager::instance(SessionBundleIDs);
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, *(unsigned int *)(a1 + 12));
  if (ClientSessionMananger) {
    uint64_t v42 = ClientSessionMananger + 248;
  }
  else {
    uint64_t v42 = 0;
  }
  if (ClientSessionMananger && *(void *)v42)
  {
    if (objc_opt_class())
    {
      unint64_t v43 = (void *)MEMORY[0x223C9DB40]();
      uint64_t v44 = [objc_alloc(MEMORY[0x263F0A2D0]) initWithName:*(void *)v42 manufacturer:*(void *)(v42 + 8) model:*(void *)(v42 + 16) hardwareVersion:0 firmwareVersion:0 softwareVersion:0 localIdentifier:*(void *)(v42 + 24) UDIDeviceIdentifier:0];
      uint64_t v45 = *(void *)(a1 + 104);
      uint64_t v46 = *(void **)(v45 + 16);
      *(void *)(v45 + 16) = v44;

      if (*(unsigned char *)(v42 + 32))
      {
        char v48 = 1;
      }
      else
      {
        uint64_t v47 = [*(id *)(*(void *)(a1 + 104) + 16) manufacturer];
        char v48 = [v47 isEqualToString:@"Apple Inc."];
      }
      *(unsigned char *)(*(void *)(a1 + 104) + 32) = v48;
      if (*(void *)(*(void *)(a1 + 104) + 16))
      {
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          __int16 v56 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v56) {
            goto LABEL_18;
          }
        }
        else
        {
          __int16 v56 = MEMORY[0x263EF8438];
          id v61 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v62 = *(void *)(*(void *)(a1 + 104) + 16);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "MediaExposureWriter.mm";
          __int16 v73 = 1024;
          int v74 = 168;
          __int16 v75 = 2112;
          uint64_t v76 = v62;
          _os_log_impl(&dword_2227C1000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HAE HKDevice created: %@", buf, 0x1Cu);
        }

LABEL_18:
        uint64_t v17 = *(void *)(a1 + 104);
        uint64_t v18 = *(void **)(v17 + 48);
        if (!v18)
        {
          id v19 = objc_alloc_init(MEMORY[0x263F28C30]);
          uint64_t v20 = [v19 getPreferenceFor:@"_ADAFPreferenceKeyHAENotificationIsMandatory"];
          uint64_t v21 = *(void *)(a1 + 104);
          char v22 = *(void **)(v21 + 48);
          *(void *)(v21 + 48) = v20;

          unint64_t v23 = (ADAM::Parameters *)[*(id *)(*(void *)(a1 + 104) + 48) BOOLValue];
          if (v23)
          {
            ADAM::Parameters::instance(v23);
            CFPreferencesAppSynchronize(@"com.apple.coreaudio");
            (***(void (****)(void))(ADAM::Parameters::instance(void)::gParams + 176))(*(void *)(ADAM::Parameters::instance(void)::gParams + 176));
            if ([v19 shouldSufaceHAENotificationMigrationAlert]) {
              dispatch_async(MEMORY[0x263EF83A0], &__block_literal_global_365);
            }
          }

          uint64_t v17 = *(void *)(a1 + 104);
          uint64_t v18 = *(void **)(v17 + 48);
        }
        if (ADAM::haeMeasurementEnabled((ADAM *)*(unsigned __int8 *)(v17 + 32), [v18 BOOLValue]))
        {
          v24.n128_f32[0] = *a2;
          if (*a2 > 0.00000011921)
          {
            if (*(void *)(a1 + 112) || !objc_opt_class()) {
              goto LABEL_63;
            }
            int v25 = (void *)MEMORY[0x223C9DB40]();
            if (*(void *)(a3 + 8) <= (unint64_t)ADAM::MediaExposureWriter::writeToHealthKit(ADAM::SPLData const*,ADAM::Metadata const&)::prevTimeStamp)
            {
              if (ADAM::ADAMLogScope(void)::once != -1) {
                dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
              }
              if (ADAM::ADAMLogScope(void)::scope)
              {
                int v32 = *(id *)ADAM::ADAMLogScope(void)::scope;
                if (!v32) {
                  goto LABEL_115;
                }
              }
              else
              {
                int v32 = MEMORY[0x263EF8438];
                id v64 = MEMORY[0x263EF8438];
              }
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              {
                uint64_t v65 = *(void *)(a3 + 8);
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "MediaExposureWriter.mm";
                __int16 v73 = 1024;
                int v74 = 208;
                __int16 v75 = 2048;
                uint64_t v76 = ADAM::MediaExposureWriter::writeToHealthKit(ADAM::SPLData const*,ADAM::Metadata const&)::prevTimeStamp;
                __int16 v77 = 2048;
                uint64_t v78 = v65;
                _os_log_impl(&dword_2227C1000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d A out of order timestamp received for HAE: %llu (p) vs. %llu (c)", buf, 0x26u);
              }
LABEL_114:

LABEL_115:
LABEL_63:
              uint64_t result = *(void *)(a1 + 72);
              if (result)
              {
                *(void *)(a1 + 72) = 0;
                (*(void (**)(uint64_t, __n128))(*(void *)result + 40))(result, v24);
                return 0;
              }
              return result;
            }
            ADAM::MediaExposureWriter::writeToHealthKit(ADAM::SPLData const*,ADAM::Metadata const&)::prevTimeStamp = *(void *)(a3 + 8);
            id v26 = objc_alloc(MEMORY[0x263F0A638]);
            size_t v27 = [MEMORY[0x263F08C38] UUID];
            uint64_t v28 = ADAM::getSampleDateInterval(*(ADAM **)(a3 + 8), a2[4]);
            char v29 = (void *)MEMORY[0x263F0A628];
            uint64_t v30 = [MEMORY[0x263F0A828] unitFromString:@"dBASPL"];
            char v31 = [v29 quantityWithUnit:v30 doubleValue:*a2];
            int v32 = [v26 initWithIdentifier:v27 dateInterval:v28 quantity:v31 resumeContext:0];

            unsigned int v33 = (ADAM::Parameters *)[*(id *)(*(void *)(a1 + 104) + 48) BOOLValue];
            if (v33)
            {
              ADAM::Parameters::instance(v33);
              uint64_t Param = ADAM::Parameters::GetParamValue<BOOL>(0xBu);
              id v35 = *(void **)(*(void *)(a1 + 104) + 24);
              unint64_t v36 = [NSNumber numberWithBool:Param];
              [v35 setObject:v36 forKey:*MEMORY[0x263F0AAE8]];
            }
            if (ADAM::ADAMLogScope(void)::once != -1) {
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
            }
            if (ADAM::ADAMLogScope(void)::scope)
            {
              unint64_t v37 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v37)
              {
LABEL_113:
                __int16 v68 = *(void **)(*(void *)(a1 + 104) + 8);
                *(void *)buf = v32;
                uint64_t v69 = [MEMORY[0x263EFF8C0] arrayWithObjects:buf count:1];
                [v68 insertDatums:v69 device:*(void *)(*(void *)(a1 + 104) + 16) metadata:*(void *)(*(void *)(a1 + 104) + 24) completion:0];

                goto LABEL_114;
              }
            }
            else
            {
              unint64_t v37 = MEMORY[0x263EF8438];
              id v66 = MEMORY[0x263EF8438];
            }
            if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
            {
              uint64_t v67 = *(void *)(*(void *)(a1 + 104) + 24);
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "MediaExposureWriter.mm";
              __int16 v73 = 1024;
              int v74 = 228;
              __int16 v75 = 2112;
              uint64_t v76 = (uint64_t)v32;
              __int16 v77 = 2112;
              uint64_t v78 = v67;
              _os_log_impl(&dword_2227C1000, v37, OS_LOG_TYPE_INFO, "%25s:%-5d %@, metadata: %@", buf, 0x26u);
            }

            goto LABEL_113;
          }
        }
        int v38 = ADAM::MediaExposureWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        unsigned int v39 = ++ADAM::MediaExposureWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        if (v38)
        {
LABEL_60:
          if (v39 > 0x13) {
            unsigned int v39 = 0;
          }
          ADAM::MediaExposureWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v39;
          goto LABEL_63;
        }
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          uint64_t v40 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v40)
          {
LABEL_59:
            unsigned int v39 = ADAM::MediaExposureWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
            goto LABEL_60;
          }
        }
        else
        {
          uint64_t v40 = MEMORY[0x263EF8438];
          id v52 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          *(double *)&uint64_t v53 = *a2;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "MediaExposureWriter.mm";
          __int16 v73 = 1024;
          int v74 = 131;
          __int16 v75 = 2048;
          uint64_t v76 = v53;
          _os_log_impl(&dword_2227C1000, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HAE writing to healthkit disabled or zero-db value %f", buf, 0x1Cu);
        }

        goto LABEL_59;
      }
      int v57 = ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
      unsigned int v58 = ++ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
      if (v57) {
        goto LABEL_121;
      }
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (ADAM::ADAMLogScope(void)::scope)
      {
        double v59 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v59)
        {
LABEL_120:
          unsigned int v58 = ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
LABEL_121:
          if (v58 > 0x1D) {
            unsigned int v58 = 0;
          }
          ADAM::MediaExposureWriter::createHKDevice(void)::errCnt = v58;
          return 560232035;
        }
      }
      else
      {
        double v59 = MEMORY[0x263EF8438];
        id v70 = MEMORY[0x263EF8438];
      }
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "MediaExposureWriter.mm";
        __int16 v73 = 1024;
        int v74 = 170;
        _os_log_impl(&dword_2227C1000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d HAE Device failed to be created", buf, 0x12u);
      }

      goto LABEL_120;
    }
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      unint64_t v55 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v55) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      unint64_t v55 = MEMORY[0x263EF8438];
      id v63 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "MediaExposureWriter.mm";
      __int16 v73 = 1024;
      int v74 = 148;
      _os_log_impl(&dword_2227C1000, v55, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HAE HKDevice cannot be created: HealthKit is not available", buf, 0x12u);
    }

    return 0xFFFFFFFFLL;
  }
  int v49 = ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
  unsigned int v50 = ++ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
  if (!v49)
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      unint64_t v51 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v51)
      {
LABEL_87:
        unsigned int v50 = ADAM::MediaExposureWriter::createHKDevice(void)::errCnt;
        goto LABEL_88;
      }
    }
    else
    {
      unint64_t v51 = MEMORY[0x263EF8438];
      id v60 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "MediaExposureWriter.mm";
      __int16 v73 = 1024;
      int v74 = 144;
      _os_log_impl(&dword_2227C1000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d HAE Device information must be valid", buf, 0x12u);
    }

    goto LABEL_87;
  }
LABEL_88:
  if (v50 > 0x1D) {
    unsigned int v50 = 0;
  }
  ADAM::MediaExposureWriter::createHKDevice(void)::errCnt = v50;
  return 560555629;
}

void sub_2227D5F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZNK4ADAM19MediaExposureWriter21surfaceMigrationAlertEv_block_invoke()
{
  v32[2] = *MEMORY[0x263EF8340];
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v0 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v0) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v0 = MEMORY[0x263EF8438];
    id v1 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    id v26 = "MediaExposureWriter.mm";
    __int16 v27 = 1024;
    int v28 = 350;
    _os_log_impl(&dword_2227C1000, v0, OS_LOG_TYPE_DEFAULT, "%25s:%-5d surfacing migration alert...", buf, 0x12u);
  }

LABEL_10:
  id v2 = objc_alloc_init(MEMORY[0x263F28C30]);
  [v2 didSurfaceMigrationAlert];

  CFOptionFlags v24 = 0;
  uint64_t v4 = ADAM::LocalizationUtilityGetBundle(v3);
  uint64_t v5 = (ADAM *)[v4 localizedStringForKey:@"MigrationAlertTitle" value:&stru_26D4ECBB0 table:0];
  unsigned int v6 = ADAM::LocalizationUtilityGetBundle(v5);
  unsigned int v7 = (ADAM *)[v6 localizedStringForKey:@"MigrationAlertMessage" value:&stru_26D4ECBB0 table:0];
  uint64_t v8 = ADAM::LocalizationUtilityGetBundle(v7);
  unint64_t v9 = (ADAM *)[v8 localizedStringForKey:@"MigrationAlertButtonOK" value:&stru_26D4ECBB0 table:0];
  uint64_t v10 = ADAM::LocalizationUtilityGetBundle(v9);
  CFUserNotificationDisplayAlert(0.0, 1uLL, 0, 0, 0, (CFStringRef)v5, (CFStringRef)v7, (CFStringRef)v9, (CFStringRef)[v10 localizedStringForKey:@"MigrationAlertButtonSettings" value:&stru_26D4ECBB0 table:0], 0, &v24);

  if (!v24)
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      unint64_t v12 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v12) {
        return;
      }
    }
    else
    {
      unint64_t v12 = MEMORY[0x263EF8438];
      id v19 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      id v26 = "MediaExposureWriter.mm";
      __int16 v27 = 1024;
      int v28 = 381;
      uint64_t v20 = "%25s:%-5d Migration Alert -> OK";
LABEL_43:
      _os_log_impl(&dword_2227C1000, v12, OS_LOG_TYPE_DEFAULT, v20, buf, 0x12u);
    }
LABEL_49:

    return;
  }
  if (v24 == 1)
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      uint64_t v11 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v11) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v11 = MEMORY[0x263EF8438];
      id v13 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      id v26 = "MediaExposureWriter.mm";
      __int16 v27 = 1024;
      int v28 = 366;
      _os_log_impl(&dword_2227C1000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Migration Alert -> Settings", buf, 0x12u);
    }

LABEL_31:
    uint64_t v14 = *MEMORY[0x263F3F5E8];
    v31[0] = *MEMORY[0x263F3F608];
    v31[1] = v14;
    v32[0] = MEMORY[0x263EFFA88];
    v32[1] = MEMORY[0x263EFFA88];
    unint64_t v12 = [NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:2];
    BOOL v15 = [NSURL URLWithString:*MEMORY[0x263F41D70]];
    id v16 = [MEMORY[0x263F01880] defaultWorkspace];
    id v23 = 0;
    [v16 openSensitiveURL:v15 withOptions:v12 error:&v23];
    id v17 = v23;

    if (v17)
    {
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (ADAM::ADAMLogScope(void)::scope)
      {
        uint64_t v18 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v18) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v18 = MEMORY[0x263EF8438];
        id v22 = MEMORY[0x263EF8438];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        id v26 = "MediaExposureWriter.mm";
        __int16 v27 = 1024;
        int v28 = 376;
        __int16 v29 = 2112;
        id v30 = v17;
        _os_log_impl(&dword_2227C1000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to open settings because %@", buf, 0x1Cu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    unint64_t v12 = MEMORY[0x263EF8438];
    id v21 = MEMORY[0x263EF8438];
LABEL_41:
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      id v26 = "MediaExposureWriter.mm";
      __int16 v27 = 1024;
      int v28 = 384;
      uint64_t v20 = "%25s:%-5d Migration Alert -> Unknown";
      goto LABEL_43;
    }
    goto LABEL_49;
  }
  unint64_t v12 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v12) {
    goto LABEL_41;
  }
}

void sub_2227D6538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ADAM::Writer::Writer(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  *(void *)a1 = &unk_26D4EC678;
  *(void *)(a1 + 8) = a2;
  unsigned int v6 = (std::string *)(a1 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_WORD *)(a1 + 80) = 0;
  return a1;
}

void ADAM::MediaExposureWriter::MediaExposureWriter(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v3 = ADAM::Writer::Writer(a1, a2, a3, 1);
  *(void *)uint64_t v3 = &unk_26D4EBA68;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  operator new();
}

void sub_2227D6A48(_Unwind_Exception *a1)
{
  MEMORY[0x223C9D800](v2, 0x10F3C403C957076);
  uint64_t v4 = *((void *)v1 + 14);
  *((void *)v1 + 14) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = (id *)*((void *)v1 + 13);
  *((void *)v1 + 13) = 0;
  if (v5) {
    std::default_delete<ADAM::MediaExposureWriter::HealthKitWriterInternalState>::operator()[abi:ne180100](v5);
  }
  ADAM::Writer::~Writer(v1);
  _Unwind_Resume(a1);
}

void std::vector<ADAMServerDelegate * {__weak}>::push_back[abi:ne180100](uint64_t a1, id *from)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >= v5)
  {
    uint64_t v8 = (uint64_t)(v6 - *(void *)a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v5 - *(void *)a1;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v17 = v4;
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11;
    uint64_t v14 = (id *)(v11 + 8 * v8);
    unint64_t v16 = v11 + 8 * v12;
    objc_copyWeak(v14, from);
    BOOL v15 = v14 + 1;
    std::vector<ADAMServerDelegate * {__weak}>::__swap_out_circular_buffer((id **)a1, &v13);
    unint64_t v7 = *(void *)(a1 + 8);
    std::__split_buffer<ADAMServerDelegate * {__weak}>::~__split_buffer((uint64_t)&v13);
  }
  else
  {
    objc_copyWeak(*(id **)(a1 + 8), from);
    unint64_t v7 = v6 + 8;
  }
  *(void *)(a1 + 8) = v7;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void std::vector<ADAMServerDelegate * {__weak}>::__swap_out_circular_buffer(id **a1, void *a2)
{
  unint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = (id *)a2[1];
  while (v4 != v5)
    objc_moveWeak(--v6, --v4);
  a2[1] = v6;
  unint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (id *)a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = (id *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<ADAMServerDelegate * {__weak}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    objc_destroyWeak((id *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::make_unique[abi:ne180100]<AudioIssueDetectorDependencyInjection>()
{
}

void sub_2227D7318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v13 = a12[4];
  a12[4] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = a12[3];
  a12[3] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = a12[2];
  a12[2] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = a12[1];
  a12[1] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *a12;
  *a12 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  MEMORY[0x223C9D800](a12, 0x20C40769AC3DALL);
  _Unwind_Resume(a1);
}

uint64_t *std::default_delete<AudioIssueDetectorDependencyInjection>::operator()[abi:ne180100](uint64_t *result)
{
  if (result)
  {
    id v1 = result;
    uint64_t v2 = result[4];
    v1[4] = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[3];
    v1[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[2];
    v1[2] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[1];
    v1[1] = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *v1;
    *id v1 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    JUMPOUT(0x223C9D800);
  }
  return result;
}

void AudioIssueDetectorDispose(unint64_t a1)
{
  SingletonManagerInstance();
  std::mutex::lock(&SingletonManagerInstance(void)::sInstance);
  atomic_fetch_add(&dword_26AB1A928, 1u);
  unint64_t v2 = qword_26AB1A900;
  if (qword_26AB1A900)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)qword_26AB1A900);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a1;
      if (qword_26AB1A900 <= a1) {
        unint64_t v4 = a1 % qword_26AB1A900;
      }
    }
    else
    {
      unint64_t v4 = (qword_26AB1A900 - 1) & a1;
    }
    uint64_t v5 = *(uint64_t ***)(qword_26AB1A8F8 + 8 * v4);
    if (v5)
    {
      uint64_t v6 = *v5;
      if (*v5)
      {
        uint64_t v7 = qword_26AB1A900 - 1;
        do
        {
          unint64_t v8 = v6[1];
          if (v8 == a1)
          {
            if (v6[2] == a1)
            {
              if (v3.u32[0] > 1uLL)
              {
                if (qword_26AB1A900 <= a1) {
                  a1 %= (unint64_t)qword_26AB1A900;
                }
              }
              else
              {
                a1 &= v7;
              }
              uint64_t v9 = *(uint64_t **)(qword_26AB1A8F8 + 8 * a1);
              do
              {
                uint64_t v10 = v9;
                uint64_t v9 = (uint64_t *)*v9;
              }
              while (v9 != v6);
              if (v10 == &qword_26AB1A908) {
                goto LABEL_36;
              }
              unint64_t v11 = v10[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v11 >= qword_26AB1A900) {
                  v11 %= (unint64_t)qword_26AB1A900;
                }
              }
              else
              {
                v11 &= v7;
              }
              if (v11 != a1)
              {
LABEL_36:
                if (!*v6) {
                  goto LABEL_37;
                }
                unint64_t v12 = *(void *)(*v6 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v12 >= qword_26AB1A900) {
                    v12 %= (unint64_t)qword_26AB1A900;
                  }
                }
                else
                {
                  v12 &= v7;
                }
                if (v12 != a1) {
LABEL_37:
                }
                  *(void *)(qword_26AB1A8F8 + 8 * a1) = 0;
              }
              uint64_t v13 = *v6;
              if (*v6)
              {
                unint64_t v14 = *(void *)(v13 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= v2) {
                    v14 %= v2;
                  }
                }
                else
                {
                  v14 &= v7;
                }
                if (v14 != a1)
                {
                  *(void *)(qword_26AB1A8F8 + 8 * v14) = v10;
                  uint64_t v13 = *v6;
                }
              }
              uint64_t *v10 = v13;
              *uint64_t v6 = 0;
              --qword_26AB1A910;
              std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>>>::operator()[abi:ne180100](1, v6);
              break;
            }
          }
          else
          {
            if (v3.u32[0] > 1uLL)
            {
              if (v8 >= qword_26AB1A900) {
                v8 %= (unint64_t)qword_26AB1A900;
              }
            }
            else
            {
              v8 &= v7;
            }
            if (v8 != v4) {
              break;
            }
          }
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
    }
  }
  atomic_fetch_add(&dword_26AB1A928, 0xFFFFFFFF);

  std::mutex::unlock(&SingletonManagerInstance(void)::sInstance);
}

uint64_t AudioIssueDetectorReset(unint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  SingletonManagerInstance();
  std::mutex::lock(&SingletonManagerInstance(void)::sInstance);
  unint64_t v2 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v2)
  {
    uint64_t v13 = 0xFFFFFFFFLL;
    goto LABEL_25;
  }
  uint64_t v4 = v2[3];
  uint8x8_t v3 = (std::__shared_weak_count *)v2[4];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v4)
  {
    uint64_t v13 = 0xFFFFFFFFLL;
    if (!v3) {
      goto LABEL_25;
    }
LABEL_24:
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    goto LABEL_25;
  }
  uint64_t v15 = v3;
  for (uint64_t i = *(uint64_t **)(v4 + 24); i; uint64_t i = (uint64_t *)*i)
  {
    rtaid::Detector::checkAndResetAnalyzers(v4, i + 3);
    *((_DWORD *)i + 9) = 0;
    i[6] = 0;
    uint64_t v6 = i[3];
    uint64_t v7 = *(_DWORD **)(v6 + 192);
    uint64_t v8 = *(void *)(v6 + 200) - (void)v7;
    if (v8)
    {
      unint64_t v9 = v8 >> 2;
      uint64_t v10 = *(_DWORD **)(v6 + 216);
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      do
      {
        *v7++ = 0;
        *v10++ = 0;
        --v9;
      }
      while (v9);
    }
    *(_DWORD *)(v6 + 244) = 0;
    rtaid::DetectorNode::resetSilenceAnalyzerErrorState(*(OpaqueAudioComponentInstance **)(v6 + 32));
    *(_DWORD *)(v6 + 168) = 0;
    atomic_store(0, (unsigned __int8 *)(v6 + 408));
    *(unsigned char *)(v6 + 4) = 0;
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    unint64_t v11 = rtaid::get_log(void)::rtaid_os_log;
    if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136316162;
      uint64_t v17 = "DetectorNode.cpp";
      __int16 v18 = 1024;
      int v19 = 168;
      __int16 v20 = 1040;
      int v21 = 19;
      __int16 v22 = 2080;
      id v23 = "rtaid::DetectorNode]";
      __int16 v24 = 2048;
      uint64_t v25 = v6;
      _os_log_impl(&dword_2227C1000, v11, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] reset", buf, 0x2Cu);
    }
  }
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  unint64_t v12 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136316162;
    uint64_t v17 = "Detector.cpp";
    __int16 v18 = 1024;
    int v19 = 68;
    __int16 v20 = 1040;
    int v21 = 15;
    __int16 v22 = 2080;
    id v23 = "rtaid::Detector]";
    __int16 v24 = 2048;
    uint64_t v25 = v4;
    _os_log_impl(&dword_2227C1000, v12, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] reset", buf, 0x2Cu);
  }
  uint64_t v13 = 0;
  uint8x8_t v3 = v15;
  if (v15) {
    goto LABEL_24;
  }
LABEL_25:
  std::mutex::unlock(&SingletonManagerInstance(void)::sInstance);
  return v13;
}

void sub_2227D7AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::mutex::unlock(&SingletonManagerInstance(void)::sInstance);
  _Unwind_Resume(a1);
}

uint64_t AudioIssueDetectorSetNodeFormat(unint64_t a1)
{
  SingletonManagerInstance();

  return rtaid::Manager::SetNodeFormatWithDirectionOnDetector(a1);
}

uint64_t AudioIssueDetectorRemoveNode(unint64_t a1, unsigned int a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  SingletonManagerInstance();
  std::mutex::lock(&SingletonManagerInstance(void)::sInstance);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>>>::find<long long>(a1);
  if (!v4)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
    goto LABEL_16;
  }
  uint64_t v6 = v4[3];
  uint64_t v5 = (std::__shared_weak_count *)v4[4];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
    if (!v5) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(v6 + 8), a2);
  if (!v7)
  {
    uint64_t v12 = 4294967294;
    if (!v5) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v8 = v7;
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  unint64_t v9 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = v8[3];
    unint64_t v11 = (void *)(v10 + 8);
    if (*(char *)(v10 + 31) < 0) {
      unint64_t v11 = (void *)*v11;
    }
    int v14 = 136316674;
    uint64_t v15 = "Detector.cpp";
    __int16 v16 = 1024;
    int v17 = 137;
    __int16 v18 = 1040;
    int v19 = 15;
    __int16 v20 = 2080;
    int v21 = "rtaid::Detector]";
    __int16 v22 = 2048;
    uint64_t v23 = v6;
    __int16 v24 = 2080;
    uint64_t v25 = v11;
    __int16 v26 = 1024;
    unsigned int v27 = a2;
    _os_log_impl(&dword_2227C1000, v9, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] Removing node %s with nodeID %d", (uint8_t *)&v14, 0x3Cu);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::erase((void *)(v6 + 8), (rtaid::DetectorNode **)v8);
  uint64_t v12 = 0;
  if (v5) {
LABEL_15:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_16:
  std::mutex::unlock(&SingletonManagerInstance(void)::sInstance);
  return v12;
}

void AudioIssueDetectorSetUplinkMute(unsigned __int8 a1)
{
}

void AudioIssueDetectorSetDownlinkVolume(float a1)
{
  *(float *)&xmmword_26AB1A968 = a1;
}

float AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment(float a1)
{
  SingletonManagerInstance();
  float result = fabsf(fminf(a1, 0.0));
  dword_26AB1A960 = LODWORD(result);
  return result;
}

void AudioIssueDetectorSetSmartCaseMicMute(unsigned __int8 a1)
{
}

void ___ZN4ADAM12ADAMLogScopeEv_block_invoke()
{
}

uint64_t *ADAM::unpackEndPoints(uint64_t *result, uint64_t a2)
{
  result[1] = 0;
  unint64_t v2 = (uint64_t **)(result + 1);
  result[2] = 0;
  *float result = (uint64_t)(result + 1);
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result;
    for (uint64_t i = 0; ; uint64_t i = *v2)
    {
      unint64_t v6 = v3 & -v3;
      uint64_t v7 = v2;
      uint64_t v8 = v2;
      if (i)
      {
        unint64_t v9 = i;
        while (1)
        {
          while (1)
          {
            uint64_t v8 = (uint64_t **)v9;
            unint64_t v10 = v9[4];
            if (v6 >= v10) {
              break;
            }
            unint64_t v9 = *v8;
            uint64_t v7 = v8;
            if (!*v8) {
              goto LABEL_11;
            }
          }
          if (v10 >= v6) {
            break;
          }
          unint64_t v9 = v8[1];
          if (!v9)
          {
            uint64_t v7 = v8 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        unint64_t v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6;
        uint64_t *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v8;
        uint64_t *v7 = v11;
        uint64_t v12 = *(void *)*v4;
        if (v12)
        {
          *uint64_t v4 = v12;
          unint64_t v11 = *v7;
        }
        float result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
        ++v4[2];
      }
      v3 ^= v6;
      if (!v3) {
        break;
      }
    }
  }
  return result;
}

void sub_2227D8080(_Unwind_Exception *a1)
{
  std::__tree<ADAM::EndPointBitMask>::destroy(v1);
  _Unwind_Resume(a1);
}

void ADAM::getEndPointName(void *a1, int64_t __val)
{
  if (__val <= 15)
  {
    switch(__val)
    {
      case 1:
        uint64_t v3 = "EndPoint_HealthKit";
        goto LABEL_16;
      case 2:
        uint64_t v3 = "EndPoint_SensorKit";
        goto LABEL_16;
      case 4:
        uint64_t v3 = "EndPoint_EnvExposure";
        goto LABEL_16;
      case 8:
        uint64_t v3 = "EndPoint_AudioFile";
        goto LABEL_16;
      default:
        goto LABEL_19;
    }
  }
  if (__val > 63)
  {
    if (__val == 64)
    {
      uint64_t v3 = "EndPoint_ADAFramework";
      goto LABEL_16;
    }
    if (__val == 128)
    {
      uint64_t v3 = "EndPoint_EnvSoundClass";
      goto LABEL_16;
    }
  }
  else
  {
    if (__val == 16)
    {
      uint64_t v3 = "EndPoint_BinFile";
      goto LABEL_16;
    }
    if (__val == 32)
    {
      uint64_t v3 = "EndPoint_CsvFile";
LABEL_16:
      std::string::basic_string[abi:ne180100]<0>(a1, v3);
      return;
    }
  }
LABEL_19:
  std::to_string(&v6, __val);
  uint64_t v4 = std::string::insert(&v6, 0, "EndPoint_Unknown:", 0x11uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  a1[2] = *((void *)&v4->__r_.__value_.__l + 2);
  *(_OWORD *)a1 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_2227D81E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::string v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    std::string v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void ADAM::allocAudioBufferList(ADAM *this, AudioBufferList **a2, const AudioStreamBasicDescription *a3, int a4)
{
  int v5 = (int)a3;
  if ((*((_DWORD *)a2 + 3) & 0x20) != 0) {
    unsigned int v8 = *((_DWORD *)a2 + 7);
  }
  else {
    unsigned int v8 = 1;
  }
  unint64_t v9 = (unsigned int *)malloc_type_malloc(16 * (v8 - 1) + 24, 0x2C8E6D5CuLL);
  if (!v9) {
    goto LABEL_14;
  }
  unint64_t v10 = v9;
  bzero(v9, 16 * (v8 - 1) + 24);
  *(void *)this = v10;
  unsigned int *v10 = v8;
  if (v8 == 1) {
    int v11 = *((_DWORD *)a2 + 7);
  }
  else {
    int v11 = 1;
  }
  if (v8)
  {
    uint64_t v12 = 0;
    size_t v13 = (a4 * v5 * *((_DWORD *)a2 + 6));
    while (1)
    {
      uint64_t v14 = *(void *)this + v12;
      *(_DWORD *)(v14 + 8) = v11;
      *(_DWORD *)(v14 + 12) = 0;
      uint64_t v15 = malloc_type_malloc(v13, 0x2C8E6D5CuLL);
      __int16 v16 = v15;
      if (v13)
      {
        if (!v15) {
          break;
        }
      }
      bzero(v15, v13);
      *(void *)(*(void *)this + v12 + 16) = v16;
      v12 += 16;
      if (16 * v8 == v12) {
        return;
      }
    }
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    __int16 v18 = std::bad_alloc::bad_alloc(exception);
  }
}

void ADAM::releaseAudioBufferList(unsigned int **this, AudioBufferList **a2)
{
  if (this)
  {
    uint64_t v3 = *this;
    if (v3)
    {
      unint64_t v4 = *v3;
      if (v4)
      {
        unint64_t v5 = 0;
        uint64_t v6 = 4;
        do
        {
          if (*(void *)&v3[v6])
          {
            free(*(void **)&v3[v6]);
            uint64_t v3 = *this;
            unint64_t v4 = **this;
          }
          ++v5;
          v6 += 4;
        }
        while (v5 < v4);
      }
      free(v3);
      *this = 0;
    }
  }
}

CFStringRef *ADAM::copyDeviceInfo(CFStringRef *result, CFStringRef *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    if (*result) {
      *a2 = CFStringCreateCopy(0, *result);
    }
    CFStringRef v4 = v3[1];
    if (v4) {
      a2[1] = CFStringCreateCopy(0, v4);
    }
    CFStringRef v5 = v3[2];
    if (v5) {
      a2[2] = CFStringCreateCopy(0, v5);
    }
    CFStringRef v6 = v3[3];
    if (v6) {
      a2[3] = CFStringCreateCopy(0, v6);
    }
    CFDictionaryRef v7 = (const __CFDictionary *)v3[5];
    a2[4] = v3[4];
    float result = 0;
    if (v7) {
      float result = (CFStringRef *)CFDictionaryCreateCopy(0, v7);
    }
    a2[5] = (CFStringRef)result;
  }
  return result;
}

void ADAM::logDeviceInfo(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    unint64_t v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v2) {
      return;
    }
  }
  else
  {
    unint64_t v2 = MEMORY[0x263EF8438];
    id v3 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"NULL";
    CFStringRef v5 = *(__CFString **)a1;
    CFStringRef v6 = *(__CFString **)(a1 + 8);
    if (!*(void *)a1) {
      CFStringRef v5 = @"NULL";
    }
    if (!v6) {
      CFStringRef v6 = @"NULL";
    }
    CFDictionaryRef v7 = *(__CFString **)(a1 + 16);
    if (!v7) {
      CFDictionaryRef v7 = @"NULL";
    }
    if (*(void *)(a1 + 24)) {
      CFStringRef v4 = *(__CFString **)(a1 + 24);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    int v10 = 136316930;
    int v11 = "ADAMUtil.cpp";
    __int16 v12 = 1024;
    int v13 = 137;
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    __int16 v16 = 2112;
    int v17 = v6;
    __int16 v18 = 2112;
    int v19 = v7;
    __int16 v20 = 2112;
    int v21 = v4;
    __int16 v22 = 2048;
    uint64_t v23 = v8;
    __int16 v24 = 2112;
    uint64_t v25 = v9;
    _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device { name: %@  manufacture: %@ model: %@ UUID: %@ device flag: %0llx volume curve: %@ }", (uint8_t *)&v10, 0x4Eu);
  }
}

void ADAM::releaseADAMDeviceInfo(uint64_t a1)
{
  unint64_t v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  id v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  CFStringRef v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }
  CFStringRef v5 = *(const void **)(a1 + 24);
  if (v5) {
    CFRelease(v5);
  }
  CFStringRef v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    CFRelease(v6);
  }
}

uint64_t ADAM::haeMeasurementEnabled(ADAM *this, char a2)
{
  int v3 = (int)this;
  ADAM::Parameters::instance(this);
  uint64_t Param = (ADAM::Parameters *)ADAM::Parameters::GetParamValue<BOOL>(0xCu);
  unsigned int v5 = Param;
  ADAM::Parameters::instance(Param);
  CFStringRef v6 = (ADAM::Parameters *)ADAM::Parameters::GetParamValue<BOOL>(3u);
  int v7 = (int)v6;
  ADAM::Parameters::instance(v6);
  int v8 = ADAM::Parameters::GetParamValue<BOOL>(2u);
  if (v5 && (a2 & 1) != 0) {
    return 1;
  }
  else {
    return v8 & (v3 | v7 & v5);
  }
}

uint64_t ___ZN4ADAM19getMachTimeBaseInfoEv_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&ADAM::getMachTimeBaseInfo(void)::timebase_info);
}

uint64_t ADAM::absoluteTimeFromCMTimeRange(ADAM *this, uint64_t a2, CMTimeRange *a3, double a4, double a5, double a6)
{
  int v6 = (int)a3;
  if (ADAM::getMachTimeBaseInfo(void)::onceToken != -1) {
    dispatch_once(&ADAM::getMachTimeBaseInfo(void)::onceToken, &__block_literal_global_22);
  }
  LODWORD(a6) = ADAM::getMachTimeBaseInfo(void)::timebase_info;
  return (uint64_t)this
       + (unint64_t)((double)a2
                          / (double)v6
                          * 1000000000.0
                          * (double)(*(unsigned int *)algn_267F814E4 | 0x41CDCD6500000000uLL)
                          / (double)*(unint64_t *)&a6);
}

id ADAM::getSampleDateInterval(ADAM *this, double a2)
{
  int v6 = (void *)MEMORY[0x263EFF910];
  if (ADAM::getMachTimeBaseInfo(void)::onceToken != -1) {
    dispatch_once(&ADAM::getMachTimeBaseInfo(void)::onceToken, &__block_literal_global_22);
  }
  LODWORD(v3) = ADAM::getMachTimeBaseInfo(void)::timebase_info;
  LODWORD(v2) = *(_DWORD *)algn_267F814E4;
  int v7 = [MEMORY[0x263EFF910] date];
  [v7 timeIntervalSinceReferenceDate];
  double v9 = v8;
  int v10 = [MEMORY[0x263F08AB0] processInfo];
  [v10 systemUptime];
  double v12 = v9 - v11;

  int v13 = [v6 dateWithTimeIntervalSinceReferenceDate:(double)(unint64_t)this * (double)v3 / (double)v2 / 1000000000.0 + v12];
  __int16 v14 = [v13 dateByAddingTimeInterval:-a2];
  uint64_t v15 = (void *)[objc_alloc(MEMORY[0x263F08798]) initWithStartDate:v14 endDate:v13];

  return v15;
}

void sub_2227D8928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ADAM::LocalizationUtilityGetBundle(ADAM *this)
{
  if (ADAM::LocalizationUtilityGetBundle(void)::once != -1) {
    dispatch_once(&ADAM::LocalizationUtilityGetBundle(void)::once, &__block_literal_global_26);
  }
  id v1 = (void *)ADAM::LocalizationUtilityGetBundle(void)::_frameworkBundle;

  return v1;
}

uint64_t ___ZN4ADAM28LocalizationUtilityGetBundleEv_block_invoke()
{
  ADAM::LocalizationUtilityGetBundle(void)::_frameworkBundle = [MEMORY[0x263F086E0] bundleWithPath:@"/System/Library/PrivateFrameworks/AudioDataAnalysis.framework"];

  return MEMORY[0x270F9A758]();
}

void ___ZN4ADAM23isSpeechAnalysisEnabledEv_block_invoke()
{
  if (ADAM::getDeviceClass(void)::once != -1) {
    dispatch_once(&ADAM::getDeviceClass(void)::once, &__block_literal_global_55);
  }
  id v1 = (id)ADAM::getDeviceClass(void)::deviceClass;
  if (([v1 isEqualToString:@"iPhone"] & 1) != 0
    || [v1 isEqualToString:@"iPod"])
  {
    if (ADAM::isXCTest(void)::once != -1) {
      dispatch_once(&ADAM::isXCTest(void)::once, &__block_literal_global_60);
    }
    if (ADAM::isXCTest(void)::isXCTest) {
      goto LABEL_11;
    }
    if (ADAM::hasEntitlementForSensorkitSiri(void)::once != -1) {
      dispatch_once(&ADAM::hasEntitlementForSensorkitSiri(void)::once, &__block_literal_global_71);
    }
    if (ADAM::hasEntitlementForSensorkitSiri(void)::ans)
    {
LABEL_11:
      BOOL v0 = 1;
    }
    else
    {
      if (ADAM::hasEntitlementForSensorkitTelephony(void)::once != -1) {
        dispatch_once(&ADAM::hasEntitlementForSensorkitTelephony(void)::once, &__block_literal_global_76);
      }
      BOOL v0 = ADAM::hasEntitlementForSensorkitTelephony(void)::ans != 0;
    }
  }
  else
  {
    BOOL v0 = 0;
  }
  ADAM::isSpeechAnalysisEnabled(void)::ans = v0;
}

void sub_2227D8B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN4ADAM35hasEntitlementForSensorkitTelephonyEv_block_invoke(ADAM *a1)
{
  ADAM::getSensorkitEntitlements(a1);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  ADAM::hasEntitlementForSensorkitTelephony(void)::ans = [v1 containsObject:@"com.apple.SensorKit.soundDetection.telephony"];
}

void sub_2227D8BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id ADAM::getSensorkitEntitlements(ADAM *this)
{
  if (ADAM::getSensorkitEntitlements(void)::once != -1) {
    dispatch_once(&ADAM::getSensorkitEntitlements(void)::once, &__block_literal_global_65);
  }
  id v1 = (void *)ADAM::getSensorkitEntitlements(void)::skEntitlements;

  return v1;
}

void ___ZN4ADAM24getSensorkitEntitlementsEv_block_invoke()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  BOOL v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x263EFFB08]);
  if (v0)
  {
    id v1 = v0;
    CFErrorRef error = 0;
    CFTypeRef v2 = SecTaskCopyValueForEntitlement(v0, @"com.apple.sensorkit.writer.allow", &error);
    unint64_t v3 = (void *)ADAM::getSensorkitEntitlements(void)::skEntitlements;
    ADAM::getSensorkitEntitlements(void)::skEntitlements = (uint64_t)v2;

    if (ADAM::getSensorkitEntitlements(void)::skEntitlements && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (ADAM::ADAMLogScope(void)::scope)
      {
        CFStringRef v4 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v4) {
          goto LABEL_31;
        }
      }
      else
      {
        CFStringRef v4 = MEMORY[0x263EF8438];
        id v11 = MEMORY[0x263EF8438];
      }
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
LABEL_30:

LABEL_31:
        CFRelease(v1);
        return;
      }
      *(_DWORD *)buf = 136315650;
      __int16 v14 = "ADAMUtil.cpp";
      __int16 v15 = 1024;
      int v16 = 371;
      __int16 v17 = 2112;
      uint64_t v18 = ADAM::getSensorkitEntitlements(void)::skEntitlements;
      int v7 = "%25s:%-5d SK entitlements %@";
      double v8 = v4;
      uint32_t v9 = 28;
    }
    else
    {
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (ADAM::ADAMLogScope(void)::scope)
      {
        CFStringRef v4 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v4) {
          goto LABEL_31;
        }
      }
      else
      {
        CFStringRef v4 = MEMORY[0x263EF8438];
        id v6 = MEMORY[0x263EF8438];
      }
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_30;
      }
      *(_DWORD *)buf = 136316162;
      __int16 v14 = "ADAMUtil.cpp";
      __int16 v15 = 1024;
      int v16 = 369;
      __int16 v17 = 2112;
      uint64_t v18 = ADAM::getSensorkitEntitlements(void)::skEntitlements;
      __int16 v19 = 2112;
      __int16 v20 = @"com.apple.sensorkit.writer.allow";
      __int16 v21 = 2112;
      CFErrorRef v22 = error;
      int v7 = "%25s:%-5d Unexpected value %@ for %@ entitlement: %@";
      double v8 = v4;
      uint32_t v9 = 48;
    }
    _os_log_impl(&dword_2227C1000, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
    goto LABEL_30;
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    unsigned int v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5) {
      return;
    }
  }
  else
  {
    unsigned int v5 = MEMORY[0x263EF8438];
    id v10 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v14 = "ADAMUtil.cpp";
    __int16 v15 = 1024;
    int v16 = 376;
    _os_log_impl(&dword_2227C1000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d NULL value returned from SecTaskCreateFromSelf", buf, 0x12u);
  }
}

void ___ZN4ADAM30hasEntitlementForSensorkitSiriEv_block_invoke(ADAM *a1)
{
  ADAM::getSensorkitEntitlements(a1);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  ADAM::hasEntitlementForSensorkitSiri(void)::ans = [v1 containsObject:@"com.apple.SensorKit.soundDetection.siri"];
}

void sub_2227D8F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN4ADAM8isXCTestEv_block_invoke()
{
  id v1 = [MEMORY[0x263F08AB0] processInfo];
  BOOL v0 = [v1 processName];
  ADAM::isXCTest(void)::isXCTest = [v0 isEqualToString:@"xctest"];
}

void sub_2227D9004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN4ADAM14getDeviceClassEv_block_invoke()
{
  ADAM::getDeviceClass(void)::deviceClass = MGGetStringAnswer();

  return MEMORY[0x270F9A758]();
}

void ___ZN4ADAM20isProcessCorespeechdEv_block_invoke()
{
  id v1 = [MEMORY[0x263F08AB0] processInfo];
  BOOL v0 = [v1 processName];
  ADAM::isProcessCorespeechd(void)::isCorespeechd = [v0 isEqualToString:@"corespeechd"];
}

void sub_2227D90D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2227D9400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *___ZN5rtaid20ConfigurationManager23GetDefaultConfigurationEv_block_invoke()
{
  std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>(&rtaid::ConfigurationManager::GetDefaultConfiguration(void)::sDefaultConfig, 0, 0);

  return std::__tree<rtaid::AnalyzerType>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType>(&rtaid::ConfigurationManager::GetDefaultConfiguration(void)::sDefaultConfig, 4u, 4);
}

void rtaid::ConfigurationManager::addSiriConfiguration(rtaid::ConfigurationManager *this, const rtaid::Detector *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(this))
  {
    rtaid::Detector::GetNodeIDs((rtaid::Detector *)&v11, (uint64_t)a2);
    CFStringRef v4 = v11;
    unsigned int v5 = v12;
    if (v11 != v12)
    {
      id v6 = (char *)this + 24;
      int v7 = v11;
      do
      {
        unsigned int v8 = *v7;
        uint32_t v9 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(*((void *)a2 + 1), *((void *)a2 + 2), *v7);
        if (!v9 || !*(unsigned char *)(v9[3] + 188))
        {
          v13[0] = 2;
          v13[1] = v8;
          std::map<rtaid::AnalyzerType,unsigned int>::map[abi:ne180100]((uint64_t *)v10, v13, 1);
          std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__emplace_unique_key_args<std::map<rtaid::AnalyzerType,unsigned int>,std::map<rtaid::AnalyzerType,unsigned int> const&>((uint64_t)v6, v10, v10);
          std::__tree<ADAM::EndPointBitMask>::destroy(v10[1]);
        }
        ++v7;
      }
      while (v7 != v5);
    }
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_2227D9618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

BOOL rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(rtaid::ConfigurationManager *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  {
    rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection = CFPreferencesGetAppBooleanValue(@"DisableAudio", @"com.apple.audio.virtualaudio", 0) != 0;
  }
  int v1 = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection;
  if (rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection)
  {
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
    }
    CFTypeRef v2 = rtaid::get_log(void)::rtaid_os_log;
    BOOL v3 = os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT);
    int v1 = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection;
    if (v3)
    {
      int v5 = 136315650;
      id v6 = "ConfigurationManager.cpp";
      __int16 v7 = 1024;
      int v8 = 414;
      __int16 v9 = 1024;
      int v10 = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection;
      _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_DEFAULT, "%s:%-5d Defaults write for DisableAudio set to %d - silence detection will be bypassed", (uint8_t *)&v5, 0x18u);
      int v1 = rtaid::ConfigurationManager::IsSilenceAnalyzerBypassedThroughDefaults(void)::disableSilenceDetection;
    }
  }
  return v1 != 0;
}

void sub_2227D97BC(_Unwind_Exception *a1)
{
}

uint64_t *std::map<rtaid::AnalyzerType,unsigned int>::map[abi:ne180100](uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  CFStringRef v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__map_value_compare<rtaid::AnalyzerType,std::__value_type<rtaid::AnalyzerType,unsigned int>,std::less<rtaid::AnalyzerType>,true>,std::allocator<std::__value_type<rtaid::AnalyzerType,unsigned int>>>::__emplace_hint_unique_key_args<rtaid::AnalyzerType,std::pair<rtaid::AnalyzerType const,unsigned int> const&>(a1, v4, *a2, *(void *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_2227D983C(_Unwind_Exception *a1)
{
  std::__tree<ADAM::EndPointBitMask>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__emplace_unique_key_args<std::map<rtaid::AnalyzerType,unsigned int>,std::map<rtaid::AnalyzerType,unsigned int> const&>(uint64_t a1, void **a2, void *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  int v5 = *(uint64_t **)(a1 + 8);
  if (!v5)
  {
    __int16 v9 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__construct_node<std::map<rtaid::AnalyzerType,unsigned int> const&>((uint64_t)v16, a1, a3);
    return (uint64_t)std::__tree<rtaid::AnalyzerType>::__insert_node_at((uint64_t **)a1, (uint64_t)v9, v6, (uint64_t *)v16[0]);
  }
  int v8 = a2 + 1;
  while (1)
  {
    while (1)
    {
      __int16 v9 = (uint64_t **)v5;
      int v10 = *a2;
      uint64_t v11 = (void *)v5[4];
      double v12 = v5 + 5;
      v16[0] = (uint64_t (*)(uint64_t, uint64_t))std::__synth_three_way[abi:ne180100]<std::pair<rtaid::AnalyzerType const,unsigned int>,std::pair<rtaid::AnalyzerType const,unsigned int>>;
      if ((std::__lexicographical_compare_three_way_slow_path[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::strong_ordering (*)(std::pair<rtaid::AnalyzerType const,unsigned int> const&,std::pair<rtaid::AnalyzerType const,unsigned int> const&)>(v10, v8, v11, v5 + 5, v16) & 0x80) == 0)break; {
      int v5 = *v9;
      }
      uint64_t v6 = v9;
      if (!*v9) {
        goto LABEL_10;
      }
    }
    int v13 = v9[4];
    uint64_t v14 = *a2;
    v16[0] = (uint64_t (*)(uint64_t, uint64_t))std::__synth_three_way[abi:ne180100]<std::pair<rtaid::AnalyzerType const,unsigned int>,std::pair<rtaid::AnalyzerType const,unsigned int>>;
    uint64_t result = std::__lexicographical_compare_three_way_slow_path[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::strong_ordering (*)(std::pair<rtaid::AnalyzerType const,unsigned int> const&,std::pair<rtaid::AnalyzerType const,unsigned int> const&)>(v13, v12, v14, v8, v16);
    if ((result & 0x80) == 0) {
      break;
    }
    uint64_t v6 = v9 + 1;
    int v5 = v9[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (!*v6) {
    goto LABEL_10;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

void *std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__construct_node<std::map<rtaid::AnalyzerType,unsigned int> const&>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t result = operator new(0x38uLL);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  result[5] = 0;
  __int16 v7 = result + 5;
  result[4] = result + 5;
  int v8 = result + 4;
  result[6] = 0;
  uint64_t v11 = (void *)*a3;
  __int16 v9 = a3 + 1;
  int v10 = v11;
  if (v11 != v9)
  {
    do
    {
      uint64_t result = std::__tree<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__map_value_compare<rtaid::AnalyzerType,std::__value_type<rtaid::AnalyzerType,unsigned int>,std::less<rtaid::AnalyzerType>,true>,std::allocator<std::__value_type<rtaid::AnalyzerType,unsigned int>>>::__emplace_hint_unique_key_args<rtaid::AnalyzerType,std::pair<rtaid::AnalyzerType const,unsigned int> const&>(v8, v7, *((_DWORD *)v10 + 7), *(void *)((char *)v10 + 28));
      double v12 = (void *)v10[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)v10[2];
          BOOL v14 = *v13 == (void)v10;
          int v10 = v13;
        }
        while (!v14);
      }
      int v10 = v13;
    }
    while (v13 != v9);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_2227D9A54(_Unwind_Exception *a1)
{
  std::__tree<ADAM::EndPointBitMask>::destroy(v2[5]);
  *int v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::map<rtaid::AnalyzerType,unsigned int>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::map<rtaid::AnalyzerType,unsigned int>,void *>>>::operator()[abi:ne180100](char a1, void **a2)
{
  if (a1)
  {
    std::__tree<ADAM::EndPointBitMask>::destroy(a2[5]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t *std::__tree<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__map_value_compare<rtaid::AnalyzerType,std::__value_type<rtaid::AnalyzerType,unsigned int>,std::less<rtaid::AnalyzerType>,true>,std::allocator<std::__value_type<rtaid::AnalyzerType,unsigned int>>>::__emplace_hint_unique_key_args<rtaid::AnalyzerType,std::pair<rtaid::AnalyzerType const,unsigned int> const&>(uint64_t *result, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (unsigned int v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      int v10 = a2;
LABEL_16:
      if (v8) {
        int v13 = (uint64_t **)v10;
      }
      else {
        int v13 = (uint64_t **)a2;
      }
      if (v8) {
        uint64_t v11 = (uint64_t **)(v10 + 1);
      }
      else {
        uint64_t v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      __int16 v9 = (uint64_t *)*a2;
      do
      {
        int v10 = v9;
        __int16 v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      __int16 v15 = a2;
      do
      {
        int v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        __int16 v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3) {
      goto LABEL_16;
    }
    __int16 v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t **)v17;
          unsigned int v18 = *((_DWORD *)v17 + 7);
          if (v18 <= a3) {
            break;
          }
          __int16 v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        __int16 v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_47:
      uint64_t v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    uint64_t v11 = (uint64_t **)(a2 + 1);
    double v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        uint64_t v11 = (uint64_t **)v12;
        double v12 = (uint64_t *)*v12;
        int v13 = v11;
        BOOL v14 = v11;
      }
      while (v12);
    }
    else
    {
      BOOL v14 = (uint64_t **)a2;
      do
      {
        __int16 v19 = (uint64_t *)v14;
        BOOL v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v19);
      int v13 = (uint64_t **)a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 7) > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    __int16 v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t **)v20;
          unsigned int v21 = *((_DWORD *)v20 + 7);
          if (v21 <= a3) {
            break;
          }
          __int16 v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_47;
        }
        uint64_t v6 = v13 + 1;
        __int16 v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  int v13 = (uint64_t **)(result + 1);
LABEL_44:
  CFErrorRef v22 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v22 + 28) = a4;

  return std::__tree<rtaid::AnalyzerType>::__insert_node_at(v5, (uint64_t)v13, v6, v22);
}

uint64_t std::__lexicographical_compare_three_way_slow_path[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::strong_ordering (*)(std::pair<rtaid::AnalyzerType const,unsigned int> const&,std::pair<rtaid::AnalyzerType const,unsigned int> const&)>(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  BOOL v5 = a3 == a4;
  BOOL v6 = a1 == a2;
  if (a1 == a2 || (int v8 = a3, a3 == a4))
  {
LABEL_17:
    if (v6) {
      return (v5 - 1);
    }
    else {
      return 1;
    }
  }
  else
  {
    uint64_t v11 = a1;
    while (1)
    {
      uint64_t result = (*a5)((uint64_t)v11 + 28, (uint64_t)v8 + 28);
      if ((_BYTE)result) {
        break;
      }
      int v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          BOOL v14 = (void *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          uint64_t v11 = v14;
        }
        while (!v15);
      }
      BOOL v16 = (void *)v8[1];
      if (v16)
      {
        do
        {
          __int16 v17 = v16;
          BOOL v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          __int16 v17 = (void *)v8[2];
          BOOL v15 = *v17 == (void)v8;
          int v8 = v17;
        }
        while (!v15);
      }
      BOOL v5 = v17 == a4;
      BOOL v6 = v14 == a2;
      if (v14 != a2)
      {
        uint64_t v11 = v14;
        int v8 = v17;
        if (v17 != a4) {
          continue;
        }
      }
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t std::__synth_three_way[abi:ne180100]<std::pair<rtaid::AnalyzerType const,unsigned int>,std::pair<rtaid::AnalyzerType const,unsigned int>>(int *a1, _DWORD *a2)
{
  int v3 = *a1;
  if (*a1 < *a2) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = 1;
  }
  if (v3 == *a2)
  {
    unsigned int v5 = a1[1];
    unsigned int v6 = a2[1];
    BOOL v7 = v5 == v6;
    if (v5 < v6) {
      unsigned int v8 = -1;
    }
    else {
      unsigned int v8 = 1;
    }
    if (v7) {
      return 0;
    }
    else {
      return v8;
    }
  }
  return result;
}

void *std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    int v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        CFStringRef v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          CFStringRef v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; int v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          int v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void *std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::__find_leaf_high(uint64_t a1, void *a2, void **a3)
{
  unsigned int v5 = (void *)(a1 + 8);
  CFStringRef v4 = *(void **)(a1 + 8);
  if (v4)
  {
    BOOL v7 = a3 + 1;
    do
    {
      while (1)
      {
        unsigned int v5 = v4;
        unsigned int v8 = *a3;
        __int16 v9 = (void *)v4[4];
        uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))std::__synth_three_way[abi:ne180100]<std::pair<rtaid::AnalyzerType const,unsigned int>,std::pair<rtaid::AnalyzerType const,unsigned int>>;
        if ((std::__lexicographical_compare_three_way_slow_path[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<rtaid::AnalyzerType,unsigned int>,std::__tree_node<std::__value_type<rtaid::AnalyzerType,unsigned int>,void *> *,long>>,std::strong_ordering (*)(std::pair<rtaid::AnalyzerType const,unsigned int> const&,std::pair<rtaid::AnalyzerType const,unsigned int> const&)>(v8, v7, v9, v4 + 5, &v11) & 0x80) == 0)break; {
        CFStringRef v4 = (void *)*v5;
        }
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      CFStringRef v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(*(void **)(a1 + 16));
  CFTypeRef v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        CFTypeRef v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(v2);
  }
  return a1;
}

void std::vector<std::unique_ptr<CaulkSPIImplementation::Message>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  CFTypeRef v2 = **a1;
  if (v2)
  {
    CFStringRef v4 = v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *CFStringRef v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t CaulkSPIImplementation::Message::perform(CaulkSPIImplementation::Message *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memcpy(__dst, (char *)this + 56, sizeof(__dst));
  uint64_t v2 = *((void *)this + 6);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v2 + 48))(v2, __dst);
  atomic_store(0, (unsigned __int8 *)this + 552);
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x223C9D800);
}

void CaulkSPIImplementation::Message::~Message(CaulkSPIImplementation::Message *this)
{
  *(void *)this = &unk_26D4EBC78;
  std::__function::__value_func<void ()(rtaid::IssueDictionary const&)>::~__value_func[abi:ne180100]((void *)this + 3);
  caulk::concurrent::message::~message(this);

  JUMPOUT(0x223C9D800);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D4EBC78;
  std::__function::__value_func<void ()(rtaid::IssueDictionary const&)>::~__value_func[abi:ne180100]((void *)this + 3);

  caulk::concurrent::message::~message(this);
}

void *std::__function::__value_func<void ()(rtaid::IssueDictionary const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t CaulkSPIImplementation::EnqueueIssueDict(uint64_t result, const void *a2)
{
  uint64_t v2 = result;
  int v3 = 16;
  while (1)
  {
    uint64_t v4 = atomic_load((unsigned int *)(result + 48));
    int v5 = v4;
    atomic_compare_exchange_strong((atomic_uint *volatile)(result + 48), (unsigned int *)&v5, ((_BYTE)v4 + 1) & 0xF);
    if (v5 != v4)
    {
      atomic_load((unsigned int *)(result + 48));
      goto LABEL_6;
    }
    char v6 = 0;
    atomic_compare_exchange_strong((atomic_uchar *volatile)(*(void *)(*(void *)(result + 24) + 8 * v4) + 552), (unsigned __int8 *)&v6, 1u);
    if (!v6) {
      break;
    }
LABEL_6:
    if (!--v3) {
      return result;
    }
  }
  memcpy((void *)(*(void *)(*(void *)(result + 24) + 8 * v4) + 56), a2, 0x1F0uLL);
  uint64_t v7 = *(void *)(*(void *)(v2 + 24) + 8 * v4);

  return MEMORY[0x270F87AB8](v2 + 8, v7);
}

void *CaulkSPIImplementation::SetMessagePerform(void *result, uint64_t a2)
{
  v12[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)result[3];
  for (uint64_t i = (uint64_t *)result[4]; v2 != i; ++v2)
  {
    uint64_t v5 = *v2;
    std::__function::__value_func<void ()(rtaid::IssueDictionary const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    std::__function::__value_func<void ()(rtaid::IssueDictionary const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
    uint64_t v6 = v5 + 24;
    if ((void *)(v5 + 24) != v10)
    {
      uint64_t v7 = v11;
      uint64_t v8 = *(void *)(v5 + 48);
      if (v11 == v10)
      {
        if (v8 == v6)
        {
          (*(void (**)(void *, void *))(v10[0] + 24))(v10, v12);
          (*(void (**)(void *))(*v11 + 32))(v11);
          uint64_t v11 = 0;
          (*(void (**)(void, void *))(**(void **)(v5 + 48) + 24))(*(void *)(v5 + 48), v10);
          (*(void (**)(void))(**(void **)(v5 + 48) + 32))(*(void *)(v5 + 48));
          *(void *)(v5 + 48) = 0;
          uint64_t v11 = v10;
          (*(void (**)(void *, uint64_t))(v12[0] + 24))(v12, v5 + 24);
          (*(void (**)(void *))(v12[0] + 32))(v12);
        }
        else
        {
          (*(void (**)(void *, uint64_t))(v10[0] + 24))(v10, v5 + 24);
          (*(void (**)(void *))(*v11 + 32))(v11);
          uint64_t v11 = *(void **)(v5 + 48);
        }
        *(void *)(v5 + 48) = v6;
      }
      else if (v8 == v6)
      {
        (*(void (**)(uint64_t, void *))(*(void *)v6 + 24))(v5 + 24, v10);
        (*(void (**)(void))(**(void **)(v5 + 48) + 32))(*(void *)(v5 + 48));
        *(void *)(v5 + 48) = v11;
        uint64_t v11 = v10;
      }
      else
      {
        uint64_t v11 = *(void **)(v5 + 48);
        *(void *)(v5 + 48) = v7;
      }
    }
    std::__function::__value_func<void ()(rtaid::IssueDictionary const&)>::~__value_func[abi:ne180100](v10);
    uint64_t result = std::__function::__value_func<void ()(rtaid::IssueDictionary const&)>::~__value_func[abi:ne180100](v9);
  }
  return result;
}

void sub_2227DA590(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(rtaid::IssueDictionary const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void CaulkSPIImplementation::~CaulkSPIImplementation(CaulkSPIImplementation *this)
{
  *(void *)this = &unk_26D4EBC48;
  int v1 = (char *)this + 8;
  uint64_t v2 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<CaulkSPIImplementation::Message>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x223C9D330](v1);

  JUMPOUT(0x223C9D800);
}

{
  char *v1;
  void **v2;

  *(void *)this = &unk_26D4EBC48;
  int v1 = (char *)this + 8;
  uint64_t v2 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<CaulkSPIImplementation::Message>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x223C9D330](v1);
}

void FeatureFlagSPIImplementation::~FeatureFlagSPIImplementation(FeatureFlagSPIImplementation *this)
{
}

BOOL MobileGestaltSPIImplementation::IsInternalBuild(void)::{lambda(void)#1}::operator()()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  CFBooleanRef v1 = v0;
  BOOL v2 = CFBooleanGetValue(v0) != 0;
  CFRelease(v1);
  return v2;
}

void MobileGestaltSPIImplementation::~MobileGestaltSPIImplementation(MobileGestaltSPIImplementation *this)
{
}

uint64_t PlatformUtilitiesiOSSPIImplementation::GetDeviceClass(PlatformUtilitiesiOSSPIImplementation *this)
{
  return MGGetSInt32Answer();
}

uint64_t PlatformUtilitiesiOSSPIImplementation::GetProductType(PlatformUtilitiesiOSSPIImplementation *this)
{
  if (PlatformUtilities_iOS::GetProductType(void)::sCompletedCheck == 1) {
    return PlatformUtilities_iOS::GetProductType(void)::sType;
  }
  PlatformUtilities_iOS::GetProductType(void)::sCompletedCheck = 1;
  uint64_t v2 = MGGetProductType();
  if (v2 > 2159747552)
  {
    if (v2 <= 3196805750)
    {
      if (v2 > 2688879998)
      {
        if (v2 <= 2940697644)
        {
          if (v2 > 2781508712)
          {
            if (v2 <= 2797549162)
            {
              switch(v2)
              {
                case 2781508713:
                  uint64_t result = 6;
                  goto LABEL_481;
                case 2793418701:
                  uint64_t result = 19;
                  goto LABEL_481;
                case 2795618603:
                  uint64_t result = 42;
                  goto LABEL_481;
              }
              goto LABEL_480;
            }
            if (v2 > 2880863277)
            {
              if (v2 != 2880863278)
              {
                if (v2 == 2903084588)
                {
                  uint64_t result = 85;
                  goto LABEL_481;
                }
                goto LABEL_480;
              }
              goto LABEL_367;
            }
            if (v2 == 2797549163)
            {
              uint64_t result = 113;
              goto LABEL_481;
            }
            uint64_t v3 = 2823174122;
LABEL_289:
            if (v2 == v3)
            {
              uint64_t result = 109;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v2 > 2722529671)
          {
            switch(v2)
            {
              case 2722529672:
                uint64_t result = 28;
                goto LABEL_481;
              case 2730762296:
                uint64_t result = 112;
                goto LABEL_481;
              case 2751865418:
                uint64_t result = 143;
                goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v2 == 2688879999)
          {
            uint64_t result = 39;
            goto LABEL_481;
          }
          if (v2 != 2692844695)
          {
            if (v2 == 2702125347)
            {
              uint64_t result = 3;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
LABEL_389:
          uint64_t result = 197;
          goto LABEL_481;
        }
        if (v2 <= 3101941569)
        {
          if (v2 <= 2959111091)
          {
            switch(v2)
            {
              case 2940697645:
                uint64_t result = 38;
                goto LABEL_481;
              case 2941181571:
                uint64_t result = 41;
                goto LABEL_481;
              case 2943112657:
                uint64_t result = 149;
                goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v2 > 3001488777)
          {
            if (v2 == 3001488778)
            {
              uint64_t result = 34;
              goto LABEL_481;
            }
            if (v2 != 3054476161) {
              goto LABEL_480;
            }
            goto LABEL_323;
          }
          if (v2 == 2959111092)
          {
            uint64_t result = 95;
            goto LABEL_481;
          }
          if (v2 == 2979575960)
          {
            uint64_t result = 155;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        if (v2 <= 3133873108)
        {
          if (v2 != 3101941570)
          {
            if (v2 == 3104290450) {
              goto LABEL_344;
            }
            uint64_t v9 = 3128362815;
            goto LABEL_260;
          }
          goto LABEL_351;
        }
        if (v2 <= 3184375230)
        {
          if (v2 == 3133873109)
          {
            uint64_t result = 62;
            goto LABEL_481;
          }
          if (v2 == 3143587592)
          {
            uint64_t result = 166;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        if (v2 == 3184375231)
        {
LABEL_397:
          uint64_t result = 77;
          goto LABEL_481;
        }
        uint64_t v8 = 3196158497;
        goto LABEL_373;
      }
      if (v2 <= 2458172801)
      {
        if (v2 > 2309863437)
        {
          if (v2 <= 2385671068)
          {
            if (v2 == 2309863438)
            {
              uint64_t result = 37;
              goto LABEL_481;
            }
            if (v2 == 2311900306)
            {
              uint64_t result = 14;
              goto LABEL_481;
            }
            if (v2 != 2336512887) {
              goto LABEL_480;
            }
            goto LABEL_212;
          }
          if (v2 > 2445473384)
          {
            if (v2 == 2445473385)
            {
              uint64_t result = 124;
              goto LABEL_481;
            }
            if (v2 == 2454275343)
            {
              uint64_t result = 63;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v2 != 2385671069)
          {
            if (v2 == 2418348558)
            {
              uint64_t result = 135;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
LABEL_310:
          uint64_t result = 50;
          goto LABEL_481;
        }
        if (v2 > 2262113698)
        {
          if (v2 != 2262113699)
          {
            if (v2 == 2270970153)
            {
              uint64_t result = 21;
              goto LABEL_481;
            }
            if (v2 != 2288107369) {
              goto LABEL_480;
            }
            goto LABEL_396;
          }
          goto LABEL_390;
        }
        if (v2 == 2159747553)
        {
          uint64_t result = 26;
          goto LABEL_481;
        }
        if (v2 == 2162679683)
        {
LABEL_383:
          uint64_t result = 122;
          goto LABEL_481;
        }
        uint64_t v8 = 2236272848;
LABEL_373:
        if (v2 != v8) {
          goto LABEL_480;
        }
LABEL_374:
        uint64_t result = 87;
        goto LABEL_481;
      }
      if (v2 > 2619317133)
      {
        if (v2 <= 2628394913)
        {
          if (v2 != 2619317134)
          {
            if (v2 != 2622433984)
            {
              if (v2 == 2625074843)
              {
                uint64_t result = 161;
                goto LABEL_481;
              }
              goto LABEL_480;
            }
            goto LABEL_385;
          }
          goto LABEL_395;
        }
        if (v2 <= 2644487443)
        {
          if (v2 == 2628394914) {
            goto LABEL_323;
          }
          uint64_t v6 = 2634105757;
          goto LABEL_109;
        }
        if (v2 == 2644487444)
        {
          uint64_t result = 92;
          goto LABEL_481;
        }
        if (v2 != 2673319456) {
          goto LABEL_480;
        }
LABEL_360:
        uint64_t result = 73;
        goto LABEL_481;
      }
      if (v2 > 2516717267)
      {
        if (v2 != 2516717268)
        {
          if (v2 == 2566016329)
          {
            uint64_t result = 94;
            goto LABEL_481;
          }
          if (v2 != 2614323575) {
            goto LABEL_480;
          }
          goto LABEL_310;
        }
        goto LABEL_360;
      }
      if (v2 == 2458172802) {
        goto LABEL_374;
      }
      if (v2 == 2468178735) {
        goto LABEL_384;
      }
      if (v2 != 2487868872) {
        goto LABEL_480;
      }
LABEL_392:
      uint64_t result = 107;
      goto LABEL_481;
    }
    if (v2 <= 3711192743)
    {
      if (v2 <= 3540156651)
      {
        if (v2 <= 3300281075)
        {
          if (v2 <= 3228373940)
          {
            if (v2 == 3196805751)
            {
              uint64_t result = 7;
              goto LABEL_481;
            }
            if (v2 == 3215673114)
            {
              uint64_t result = 75;
              goto LABEL_481;
            }
            uint64_t v7 = 3217792190;
            goto LABEL_147;
          }
          if (v2 == 3228373941) {
            goto LABEL_391;
          }
          if (v2 != 3241053352)
          {
            if (v2 == 3242623367)
            {
              uint64_t result = 15;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_392;
        }
        if (v2 <= 3397214290)
        {
          if (v2 == 3300281076)
          {
            uint64_t result = 54;
            goto LABEL_481;
          }
          if (v2 == 3348380076)
          {
            uint64_t result = 4;
            goto LABEL_481;
          }
          if (v2 != 3361025853) {
            goto LABEL_480;
          }
          goto LABEL_388;
        }
        if (v2 > 3417429876)
        {
          if (v2 != 3417429877)
          {
            if (v2 == 3455223061)
            {
              uint64_t result = 83;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_379;
        }
        if (v2 == 3397214291)
        {
          uint64_t result = 74;
          goto LABEL_481;
        }
        if (v2 == 3402870384)
        {
          uint64_t result = 70;
          goto LABEL_481;
        }
LABEL_480:
        uint64_t result = 0;
        goto LABEL_481;
      }
      if (v2 > 3637438249)
      {
        if (v2 <= 3670339450)
        {
          if (v2 == 3637438250)
          {
            uint64_t result = 52;
            goto LABEL_481;
          }
          if (v2 != 3645319985)
          {
            if (v2 == 3663011141)
            {
              uint64_t result = 156;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_386;
        }
        if (v2 > 3683904381)
        {
          if (v2 == 3683904382)
          {
            uint64_t result = 137;
            goto LABEL_481;
          }
          uint64_t v5 = 3707345671;
          goto LABEL_366;
        }
        if (v2 == 3670339451) {
          goto LABEL_240;
        }
        uint64_t v6 = 3677894691;
LABEL_109:
        if (v2 == v6)
        {
          uint64_t result = 102;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
      if (v2 <= 3585085678)
      {
        if (v2 == 3540156652)
        {
          uint64_t result = 93;
          goto LABEL_481;
        }
        if (v2 != 3543203160)
        {
          if (v2 == 3571532206)
          {
            uint64_t result = 151;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        goto LABEL_240;
      }
      if (v2 == 3585085679)
      {
        uint64_t result = 10;
        goto LABEL_481;
      }
      if (v2 != 3599094683)
      {
        uint64_t v8 = 3636345305;
        goto LABEL_373;
      }
    }
    else
    {
      if (v2 > 3885279869)
      {
        if (v2 > 4068102501)
        {
          if (v2 <= 4231109336)
          {
            switch(v2)
            {
              case 4068102502:
                uint64_t result = 168;
                goto LABEL_481;
              case 4172444931:
                uint64_t result = 132;
                goto LABEL_481;
              case 4201643249:
                uint64_t result = 35;
                goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v2 > 4240173201)
          {
            if (v2 == 4240173202)
            {
              uint64_t result = 2;
              goto LABEL_481;
            }
            if (v2 == 4242862982)
            {
              uint64_t result = 80;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v2 != 4231109337)
          {
            if (v2 == 4232256925)
            {
              uint64_t result = 114;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_231;
        }
        if (v2 <= 3953847431)
        {
          if (v2 == 3885279870)
          {
            uint64_t result = 32;
            goto LABEL_481;
          }
          if (v2 != 3933865620)
          {
            if (v2 == 3933982784)
            {
              uint64_t result = 53;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_240;
        }
        if (v2 > 4055323050)
        {
          if (v2 == 4055323051)
          {
            uint64_t result = 58;
            goto LABEL_481;
          }
          if (v2 == 4067129264)
          {
            uint64_t result = 139;
            goto LABEL_481;
          }
        }
        else
        {
          if (v2 == 3953847432)
          {
            uint64_t result = 170;
            goto LABEL_481;
          }
          if (v2 == 4025247511)
          {
            uint64_t result = 133;
            goto LABEL_481;
          }
        }
        goto LABEL_480;
      }
      if (v2 <= 3825599859)
      {
        if (v2 <= 3767261005)
        {
          switch(v2)
          {
            case 3711192744:
              uint64_t result = 84;
              goto LABEL_481;
            case 3742999858:
              uint64_t result = 159;
              goto LABEL_481;
            case 3743999268:
              uint64_t result = 24;
              goto LABEL_481;
          }
          goto LABEL_480;
        }
        if (v2 == 3767261006)
        {
          uint64_t result = 153;
          goto LABEL_481;
        }
        if (v2 != 3801472101)
        {
          if (v2 == 3819635030)
          {
            uint64_t result = 160;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        goto LABEL_302;
      }
      if (v2 <= 3863625341)
      {
        switch(v2)
        {
          case 3825599860:
            uint64_t result = 20;
            goto LABEL_481;
          case 3839750255:
            uint64_t result = 169;
            goto LABEL_481;
          case 3856877970:
            uint64_t result = 110;
            goto LABEL_481;
        }
        goto LABEL_480;
      }
      if (v2 > 3865922941)
      {
        if (v2 == 3865922942)
        {
          uint64_t result = 56;
          goto LABEL_481;
        }
        if (v2 == 3867318491)
        {
          uint64_t result = 162;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
      if (v2 != 3863625342)
      {
        if (v2 == 3865897231)
        {
          uint64_t result = 79;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
    }
    uint64_t result = 97;
    goto LABEL_481;
  }
  if (v2 > 1325975681)
  {
    if (v2 > 1737882205)
    {
      if (v2 > 2032616840)
      {
        if (v2 <= 2089455187)
        {
          if (v2 <= 2080700390)
          {
            if (v2 != 2032616841)
            {
              if (v2 == 2048538371)
              {
                uint64_t result = 60;
                goto LABEL_481;
              }
              if (v2 == 2078329141)
              {
                uint64_t result = 31;
                goto LABEL_481;
              }
              goto LABEL_480;
            }
            goto LABEL_394;
          }
          if (v2 > 2084894488)
          {
            if (v2 == 2084894489)
            {
              uint64_t result = 164;
              goto LABEL_481;
            }
            if (v2 == 2085054105)
            {
              uint64_t result = 158;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          if (v2 == 2080700391)
          {
            uint64_t result = 46;
            goto LABEL_481;
          }
          if (v2 != 2081274472) {
            goto LABEL_480;
          }
          goto LABEL_383;
        }
        if (v2 > 2132302343)
        {
          if (v2 <= 2144123135)
          {
            if (v2 == 2132302344)
            {
              uint64_t result = 148;
              goto LABEL_481;
            }
            uint64_t v7 = 2141052862;
LABEL_147:
            if (v2 != v7) {
              goto LABEL_480;
            }
            goto LABEL_240;
          }
          if (v2 != 2144123136)
          {
            uint64_t v10 = 2158787296;
LABEL_377:
            if (v2 == v10)
            {
              uint64_t result = 69;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
LABEL_379:
          uint64_t result = 194;
          goto LABEL_481;
        }
        if (v2 != 2089455188)
        {
          if (v2 != 2095883268)
          {
            if (v2 != 2103978418) {
              goto LABEL_480;
            }
            goto LABEL_265;
          }
          goto LABEL_389;
        }
LABEL_388:
        uint64_t result = 105;
        goto LABEL_481;
      }
      if (v2 <= 1878257789)
      {
        if (v2 <= 1770142588)
        {
          if (v2 == 1737882206)
          {
            uint64_t result = 116;
            goto LABEL_481;
          }
          if (v2 != 1744899922)
          {
            if (v2 == 1756509290)
            {
              uint64_t result = 144;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_240;
        }
        if (v2 == 1770142589)
        {
          uint64_t result = 163;
          goto LABEL_481;
        }
        if (v2 == 1834147427) {
          goto LABEL_323;
        }
        uint64_t v11 = 1868379043;
LABEL_350:
        if (v2 != v11) {
          goto LABEL_480;
        }
        goto LABEL_351;
      }
      if (v2 > 1990293941)
      {
        if (v2 <= 2021146988)
        {
          if (v2 == 1990293942)
          {
            uint64_t result = 140;
            goto LABEL_481;
          }
          uint64_t v4 = 2001966017;
LABEL_172:
          if (v2 != v4) {
            goto LABEL_480;
          }
          goto LABEL_302;
        }
        if (v2 == 2021146989)
        {
          uint64_t result = 18;
          goto LABEL_481;
        }
        uint64_t v11 = 2023824667;
        goto LABEL_350;
      }
      if (v2 == 1878257790)
      {
        uint64_t result = 81;
        goto LABEL_481;
      }
      if (v2 == 1895344378)
      {
        uint64_t result = 86;
        goto LABEL_481;
      }
      if (v2 != 1908832379) {
        goto LABEL_480;
      }
LABEL_231:
      uint64_t result = 196;
      goto LABEL_481;
    }
    if (v2 <= 1517755654)
    {
      if (v2 > 1402208363)
      {
        if (v2 <= 1415625991)
        {
          switch(v2)
          {
            case 1402208364:
              uint64_t result = 130;
              goto LABEL_481;
            case 1408738134:
              uint64_t result = 150;
              goto LABEL_481;
            case 1412429328:
              uint64_t result = 65;
              goto LABEL_481;
          }
        }
        else if (v2 > 1429914405)
        {
          if (v2 == 1429914406)
          {
            uint64_t result = 23;
            goto LABEL_481;
          }
          if (v2 == 1434404433)
          {
            uint64_t result = 17;
            goto LABEL_481;
          }
        }
        else
        {
          if (v2 == 1415625992)
          {
            uint64_t result = 136;
            goto LABEL_481;
          }
          if (v2 == 1419435331)
          {
            uint64_t result = 142;
            goto LABEL_481;
          }
        }
        goto LABEL_480;
      }
      if (v2 <= 1371389548)
      {
        if (v2 == 1325975682)
        {
          uint64_t result = 67;
          goto LABEL_481;
        }
        if (v2 != 1353145733)
        {
          uint64_t v9 = 1364038516;
          goto LABEL_260;
        }
LABEL_302:
        uint64_t result = 88;
        goto LABEL_481;
      }
      if (v2 == 1371389549)
      {
        uint64_t result = 27;
        goto LABEL_481;
      }
      if (v2 != 1373516433)
      {
        if (v2 == 1380747801)
        {
          uint64_t result = 127;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
LABEL_351:
      uint64_t result = 100;
      goto LABEL_481;
    }
    if (v2 <= 1602181455)
    {
      if (v2 > 1554479184)
      {
        switch(v2)
        {
          case 1554479185:
            uint64_t result = 167;
            goto LABEL_481;
          case 1559256613:
            uint64_t result = 55;
            goto LABEL_481;
          case 1573906122:
            uint64_t result = 138;
            goto LABEL_481;
        }
      }
      else
      {
        switch(v2)
        {
          case 1517755655:
            uint64_t result = 171;
            goto LABEL_481;
          case 1540760353:
            uint64_t result = 5;
            goto LABEL_481;
          case 1549248876:
            uint64_t result = 172;
            goto LABEL_481;
        }
      }
      goto LABEL_480;
    }
    if (v2 > 1644180311)
    {
      if (v2 > 1721691076)
      {
        if (v2 == 1721691077)
        {
          uint64_t result = 16;
          goto LABEL_481;
        }
        if (v2 == 1733600853)
        {
          uint64_t result = 128;
          goto LABEL_481;
        }
      }
      else
      {
        if (v2 == 1644180312)
        {
          uint64_t result = 145;
          goto LABEL_481;
        }
        if (v2 == 1701146937)
        {
          uint64_t result = 49;
          goto LABEL_481;
        }
      }
      goto LABEL_480;
    }
    if (v2 == 1602181456)
    {
      uint64_t result = 154;
      goto LABEL_481;
    }
    if (v2 == 1608945770)
    {
      uint64_t result = 192;
      goto LABEL_481;
    }
    if (v2 != 1625227434) {
      goto LABEL_480;
    }
LABEL_391:
    uint64_t result = 104;
    goto LABEL_481;
  }
  if (v2 <= 676119127)
  {
    if (v2 <= 337183580)
    {
      if (v2 > 133314239)
      {
        if (v2 <= 228444037)
        {
          if (v2 == 133314240)
          {
            uint64_t result = 40;
            goto LABEL_481;
          }
          if (v2 != 157833461)
          {
            if (v2 == 173258742)
            {
              uint64_t result = 59;
              goto LABEL_481;
            }
            goto LABEL_480;
          }
          goto LABEL_387;
        }
        if (v2 > 262180326)
        {
          if (v2 == 262180327)
          {
            uint64_t result = 123;
            goto LABEL_481;
          }
          if (v2 == 330877086)
          {
            uint64_t result = 43;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        if (v2 != 228444038)
        {
          if (v2 != 253148925) {
            goto LABEL_480;
          }
LABEL_384:
          uint64_t result = 120;
          goto LABEL_481;
        }
LABEL_386:
        uint64_t result = 72;
        goto LABEL_481;
      }
      if (v2 <= 42878381)
      {
        switch(v2)
        {
          case 23433786:
            uint64_t result = 61;
            goto LABEL_481;
          case 33245053:
            uint64_t result = 68;
            goto LABEL_481;
          case 40511012:
            uint64_t result = 134;
            goto LABEL_481;
        }
        goto LABEL_480;
      }
      if (v2 == 42878382)
      {
        uint64_t result = 12;
        goto LABEL_481;
      }
      if (v2 != 79936591)
      {
        if (v2 != 88647037) {
          goto LABEL_480;
        }
        goto LABEL_397;
      }
LABEL_390:
      uint64_t result = 76;
      goto LABEL_481;
    }
    if (v2 > 363237282)
    {
      if (v2 > 502329936)
      {
        if (v2 <= 555503453)
        {
          if (v2 == 502329937)
          {
            uint64_t result = 22;
            goto LABEL_481;
          }
          uint64_t v5 = 551446205;
LABEL_366:
          if (v2 != v5) {
            goto LABEL_480;
          }
          goto LABEL_367;
        }
        if (v2 != 555503454)
        {
          if (v2 == 574536383)
          {
            uint64_t result = 30;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
LABEL_395:
        uint64_t result = 106;
        goto LABEL_481;
      }
      if (v2 != 363237283)
      {
        if (v2 == 425046865)
        {
          uint64_t result = 157;
          goto LABEL_481;
        }
        if (v2 == 445396642)
        {
          uint64_t result = 117;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
LABEL_240:
      uint64_t result = 193;
      goto LABEL_481;
    }
    if (v2 > 344862119)
    {
      switch(v2)
      {
        case 344862120:
          uint64_t result = 115;
          goto LABEL_481;
        case 355234908:
          uint64_t result = 129;
          goto LABEL_481;
        case 358923952:
          uint64_t result = 126;
          goto LABEL_481;
      }
      goto LABEL_480;
    }
    if (v2 == 337183581)
    {
      uint64_t result = 11;
      goto LABEL_481;
    }
    if (v2 == 340218669)
    {
      uint64_t result = 111;
      goto LABEL_481;
    }
    uint64_t v4 = 341800273;
    goto LABEL_172;
  }
  if (v2 <= 952317140)
  {
    if (v2 > 776033018)
    {
      if (v2 > 851437780)
      {
        if (v2 <= 910181309)
        {
          if (v2 == 851437781)
          {
            uint64_t result = 29;
            goto LABEL_481;
          }
          if (v2 == 896202454)
          {
            uint64_t result = 71;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
        if (v2 != 910181310)
        {
          if (v2 != 910313402) {
            goto LABEL_480;
          }
LABEL_344:
          uint64_t result = 195;
          goto LABEL_481;
        }
LABEL_394:
        uint64_t result = 25;
        goto LABEL_481;
      }
      if (v2 == 776033019)
      {
        uint64_t result = 57;
        goto LABEL_481;
      }
      if (v2 != 810906663)
      {
        uint64_t v10 = 820711327;
        goto LABEL_377;
      }
LABEL_385:
      uint64_t result = 98;
      goto LABEL_481;
    }
    if (v2 <= 746003605)
    {
      if (v2 == 676119128)
      {
        uint64_t result = 146;
        goto LABEL_481;
      }
      if (v2 == 689804742)
      {
        uint64_t result = 36;
        goto LABEL_481;
      }
      uint64_t v9 = 698697055;
LABEL_260:
      if (v2 != v9) {
        goto LABEL_480;
      }
      goto LABEL_379;
    }
    if (v2 != 746003606)
    {
      if (v2 == 749116821)
      {
        uint64_t result = 165;
        goto LABEL_481;
      }
      uint64_t v3 = 761631964;
      goto LABEL_289;
    }
LABEL_323:
    uint64_t result = 101;
    goto LABEL_481;
  }
  if (v2 > 1234705394)
  {
    if (v2 > 1293446024)
    {
      if (v2 <= 1302273957)
      {
        if (v2 != 1293446025)
        {
          if (v2 == 1294429942)
          {
            uint64_t result = 147;
            goto LABEL_481;
          }
          goto LABEL_480;
        }
LABEL_265:
        uint64_t result = 96;
        goto LABEL_481;
      }
      if (v2 != 1302273958)
      {
        if (v2 == 1309571158)
        {
          uint64_t result = 141;
          goto LABEL_481;
        }
        goto LABEL_480;
      }
LABEL_396:
      uint64_t result = 108;
      goto LABEL_481;
    }
    if (v2 == 1234705395)
    {
      uint64_t result = 125;
      goto LABEL_481;
    }
    if (v2 != 1280441783)
    {
      if (v2 == 1280909812)
      {
        uint64_t result = 152;
        goto LABEL_481;
      }
      goto LABEL_480;
    }
LABEL_387:
    uint64_t result = 78;
    goto LABEL_481;
  }
  if (v2 <= 1110205731)
  {
    if (v2 != 952317141)
    {
      if (v2 == 1060988941)
      {
        uint64_t result = 9;
        goto LABEL_481;
      }
      if (v2 == 1085318934)
      {
        uint64_t result = 131;
        goto LABEL_481;
      }
      goto LABEL_480;
    }
LABEL_212:
    uint64_t result = 121;
    goto LABEL_481;
  }
  if (v2 > 1119807501)
  {
    if (v2 != 1119807502)
    {
      if (v2 == 1169082144)
      {
        uint64_t result = 33;
        goto LABEL_481;
      }
      goto LABEL_480;
    }
LABEL_367:
    uint64_t result = 51;
    goto LABEL_481;
  }
  if (v2 == 1110205732)
  {
    uint64_t result = 48;
    goto LABEL_481;
  }
  if (v2 != 1114644381) {
    goto LABEL_480;
  }
  uint64_t result = 82;
LABEL_481:
  PlatformUtilities_iOS::GetProductType(void)::sType = result;
  return result;
}

void PlatformUtilitiesiOSSPIImplementation::~PlatformUtilitiesiOSSPIImplementation(PlatformUtilitiesiOSSPIImplementation *this)
{
}

void AudioStatisticsSPIImplementation::SendMessage(uint64_t a1, uint64_t *a2, unsigned int a3, const UInt8 **a4, unsigned int a5, unsigned int a6)
{
  int64x2_t v74 = 0uLL;
  v75[0] = 0;
  unint64_t v11 = (unint64_t)a4[2];
  if (v11)
  {
    if (v11 >> 60) {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    BOOL v82 = v75;
    double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(v11);
    BOOL v14 = &v12[16 * v13];
    v80.i64[1] = (uint64_t)v12;
    unint64_t v81 = (unint64_t)v14;
    BOOL v15 = (void *)v74.i64[1];
    BOOL v16 = (void *)v74.i64[0];
    if (v74.i64[1] == v74.i64[0])
    {
      int64x2_t v19 = vdupq_n_s64(v74.u64[1]);
      __int16 v17 = v12;
    }
    else
    {
      __int16 v17 = v12;
      do
      {
        uint64_t v18 = *(v15 - 2);
        v15 -= 2;
        *((void *)v17 - 2) = v18;
        v17 -= 16;
        *BOOL v15 = 0;
        *((void *)v17 + 1) = v15[1];
        v15[1] = 0;
      }
      while (v15 != v16);
      int64x2_t v19 = v74;
      double v12 = (char *)v80.i64[1];
      BOOL v14 = (char *)v81;
    }
    v74.i64[0] = (uint64_t)v17;
    v74.i64[1] = (uint64_t)v12;
    int64x2_t v80 = v19;
    unint64_t v20 = v75[0];
    v75[0] = v14;
    unint64_t v81 = v20;
    keys = (void **)v19.i64[0];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&keys);
  }
  unsigned int v71 = a3;
  unsigned int v72 = a5;
  unsigned int v73 = a6;
  uint64_t v23 = *a4;
  CFErrorRef v22 = a4 + 1;
  unsigned int v21 = v23;
  if (v23 == (const UInt8 *)v22)
  {
    __int16 v24 = (CFStringRef *)v74.i64[1];
  }
  else
  {
    __int16 v24 = (CFStringRef *)v74.i64[1];
    do
    {
      if ((unint64_t)v24 >= v75[0])
      {
        uint64_t v25 = ((uint64_t)v24 - v74.i64[0]) >> 4;
        if ((unint64_t)(v25 + 1) >> 60) {
          std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = (v75[0] - v74.i64[0]) >> 3;
        if (v26 <= v25 + 1) {
          unint64_t v26 = v25 + 1;
        }
        if (v75[0] - v74.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        BOOL v82 = v75;
        if (v27) {
          unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>>(v27);
        }
        else {
          uint64_t v28 = 0;
        }
        keys = (void **)v27;
        v80.i64[0] = v27 + 16 * v25;
        v80.i64[1] = v80.i64[0];
        unint64_t v81 = v27 + 16 * v28;
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>((CFStringRef *)v80.i64[0], v21 + 32, (uint64_t)(v21 + 56));
        uint64_t v29 = v80.i64[0];
        __int16 v24 = (CFStringRef *)(v80.i64[1] + 16);
        v80.i64[1] += 16;
        id v30 = (void *)v74.i64[1];
        char v31 = (void *)v74.i64[0];
        if (v74.i64[1] == v74.i64[0])
        {
          int64x2_t v33 = vdupq_n_s64(v74.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v32 = *(v30 - 2);
            v30 -= 2;
            *(void *)(v29 - 16) = v32;
            v29 -= 16;
            *id v30 = 0;
            *(void *)(v29 + 8) = v30[1];
            v30[1] = 0;
          }
          while (v30 != v31);
          int64x2_t v33 = v74;
          __int16 v24 = (CFStringRef *)v80.i64[1];
        }
        v74.i64[0] = v29;
        v74.i64[1] = (uint64_t)v24;
        int64x2_t v80 = v33;
        unint64_t v34 = v75[0];
        v75[0] = v81;
        unint64_t v81 = v34;
        keys = (void **)v33.i64[0];
        std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&keys);
      }
      else
      {
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(v24, v21 + 32, (uint64_t)(v21 + 56));
        v24 += 2;
      }
      v74.i64[1] = (uint64_t)v24;
      id v35 = (UInt8 *)*((void *)v21 + 1);
      if (v35)
      {
        do
        {
          unint64_t v36 = (const UInt8 **)v35;
          id v35 = *(UInt8 **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          unint64_t v36 = (const UInt8 **)*((void *)v21 + 2);
          BOOL v37 = *v36 == v21;
          unsigned int v21 = (const UInt8 *)v36;
        }
        while (!v37);
      }
      unsigned int v21 = (const UInt8 *)v36;
    }
    while (v36 != v22);
  }
  uint64_t v38 = ((uint64_t)v24 - v74.i64[0]) >> 4;
  keys = 0;
  int64x2_t v80 = 0uLL;
  std::vector<void const*>::reserve((void **)&keys, v38);
  values = 0;
  __int16 v77 = 0;
  unint64_t v78 = 0;
  std::vector<void const*>::reserve((void **)&values, v38);
  uint64_t v40 = (void **)v74.i64[1];
  for (uint64_t i = (void **)v74.i64[0]; i != v40; i += 2)
  {
    uint64_t v41 = *i;
    if (!*i || !i[1])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x223C9D400](exception, "Could not construct");
    }
    uint64_t v42 = (void **)v80.i64[0];
    if (v80.i64[0] >= (unint64_t)v80.i64[1])
    {
      uint64_t v44 = keys;
      uint64_t v45 = (v80.i64[0] - (uint64_t)keys) >> 3;
      unint64_t v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 61) {
        std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = v80.i64[1] - (void)keys;
      if ((v80.i64[1] - (uint64_t)keys) >> 2 > v46) {
        unint64_t v46 = v47 >> 2;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v46;
      }
      if (v48) {
        unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v48);
      }
      else {
        uint64_t v49 = 0;
      }
      unsigned int v50 = (void **)(v48 + 8 * v45);
      *unsigned int v50 = v41;
      unint64_t v43 = v50 + 1;
      if (v42 != v44)
      {
        do
        {
          unint64_t v51 = *--v42;
          *--unsigned int v50 = v51;
        }
        while (v42 != v44);
        uint64_t v42 = keys;
      }
      keys = v50;
      v80.i64[1] = v48 + 8 * v49;
      if (v42) {
        operator delete(v42);
      }
    }
    else
    {
      *(void *)v80.i64[0] = v41;
      unint64_t v43 = v42 + 1;
    }
    v80.i64[0] = (uint64_t)v43;
    id v52 = i[1];
    uint64_t v53 = v77;
    if ((unint64_t)v77 >= v78)
    {
      unint64_t v55 = values;
      uint64_t v56 = v77 - values;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61) {
        std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v58 = v78 - (void)values;
      if ((uint64_t)(v78 - (void)values) >> 2 > v57) {
        unint64_t v57 = v58 >> 2;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59) {
        unint64_t v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v59);
      }
      else {
        uint64_t v60 = 0;
      }
      id v61 = (void **)(v59 + 8 * v56);
      *id v61 = v52;
      unint64_t v54 = v61 + 1;
      if (v53 != v55)
      {
        do
        {
          uint64_t v62 = *--v53;
          *--id v61 = v62;
        }
        while (v53 != v55);
        uint64_t v53 = values;
      }
      values = v61;
      unint64_t v78 = v59 + 8 * v60;
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *__int16 v77 = v52;
      unint64_t v54 = v53 + 1;
    }
    __int16 v77 = v54;
  }
  id v63 = keys;
  id v64 = values;
  CFDictionaryRef v65 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v38, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v65)
  {
    id v70 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x223C9D400](v70, "Could not construct");
  }
  if (v64) {
    operator delete(v64);
  }
  if (v63) {
    operator delete(v63);
  }
  keys = (void **)&v74;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&keys);
  if (v71)
  {
    uint64_t v66 = v71;
    do
    {
      uint64_t v68 = *a2++;
      uint64_t v67 = v68;
      if (v68)
      {
        if (AudioStatisticsLibraryLoader(void)::once != -1) {
          dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_187);
        }
        if (AudioStatisticsLibraryLoader(void)::libSym) {
          AudioStatisticsLibraryLoader(void)::libSym(v67, v65, v72, v73);
        }
      }
      --v66;
    }
    while (v66);
  }
  else
  {
    if (AudioStatisticsLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_187);
    }
    if (AudioStatisticsLibraryLoader(void)::libSym) {
      AudioStatisticsLibraryLoader(void)::libSym(v65, v72, v73);
    }
  }
  CFRelease(v65);
}

void sub_2227DC578(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18)
{
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    CFBooleanRef v1 = result;
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSym = dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void))dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)result;
  }
  return result;
}

void std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  CFBooleanRef v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(CFStringRef *a1, const UInt8 *a2, uint64_t a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x223C9D400](exception, "Could not construct");
  }
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const UInt8 *)a3;
  }
  else {
    uint64_t v9 = *(const UInt8 **)a3;
  }
  if (v8 >= 0) {
    CFIndex v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v10 = *(void *)(a3 + 8);
  }
  CFStringRef v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  a1[1] = v11;
  if (!v11)
  {
    BOOL v14 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x223C9D400](v14, "Could not construct");
  }
  return a1;
}

void sub_2227DC970(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(a2);
    CFIndex v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    CFStringRef v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    int v8 = (char *)a1[1];
    CFIndex v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      int v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void AudioStatisticsSPIImplementation::~AudioStatisticsSPIImplementation(AudioStatisticsSPIImplementation *this)
{
}

uint64_t std::unique_ptr<ADAM::Sequencer>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1 = (std::thread *)qword_26AB1A880;
  qword_26AB1A880 = result;
  if (v1)
  {
    std::thread::~thread(v1 + 1);
    std::thread::~thread(v1);
    JUMPOUT(0x223C9D800);
  }
  return result;
}

void std::default_delete<ADAM::Dispatcher>::operator()[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::destroy(*(char **)(a1 + 72));
  std::mutex::~mutex((std::mutex *)a1);

  JUMPOUT(0x223C9D800);
}

uint64_t std::unique_ptr<ADAM::AnalyzerManager>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1 = (void **)qword_26AB1A870;
  qword_26AB1A870 = result;
  if (v1)
  {
    uint64_t v2 = v1;
    std::vector<std::unique_ptr<ADAM::AnalysisNodeBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x223C9D800);
  }
  return result;
}

void std::default_delete<ADAM::AudioDataAnalysisManager::XPCServiceState>::operator()[abi:ne180100](uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));

  JUMPOUT(0x223C9D800);
}

ADAM::ClientSessionManager *std::unique_ptr<ADAM::ClientSessionManager>::reset[abi:ne180100](ADAM::ClientSessionManager **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    ADAM::ClientSessionManager::~ClientSessionManager(result);
    JUMPOUT(0x223C9D800);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 40);
    std::vector<std::unique_ptr<ADAM::Writer>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::vector<std::unique_ptr<ADAM::Writer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    CFIndex v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
      }
      while (v4 != v2);
      CFIndex v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ADAM::AudioDataAnalysisManager::AudioDataAnalysisManager(ADAM::AudioDataAnalysisManager *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance(void)::gAdam = 0u;
  *(_OWORD *)&qword_26AB1A790 = 0u;
  dword_26AB1A7A0 = 1065353216;
  *(_OWORD *)&qword_26AB1A7A8 = 0u;
  *(_OWORD *)&qword_26AB1A7B8 = 0u;
  dword_26AB1A7C8 = 1065353216;
  qword_26AB1A7D0 = 850045863;
  unk_26AB1A7D8 = 0u;
  unk_26AB1A7E8 = 0u;
  unk_26AB1A7F8 = 0u;
  qword_26AB1A808 = 0;
  caulk::semaphore::semaphore((caulk::semaphore *)&unk_26AB1A810);
  byte_26AB1A820 = 0;
  qword_26AB1A828 = 0;
  unk_26AB1A868 = 0u;
  *(_OWORD *)&qword_26AB1A878 = 0u;
  *(_OWORD *)&qword_26AB1A888 = 0u;
  operator new();
}

void sub_2227DD8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  a10 = v10;
  std::vector<std::unique_ptr<ADAM::AnalysisNodeBase>>::__destroy_vector::operator()[abi:ne180100](&a10);
  MEMORY[0x223C9D800](v10, 0x10A2C40C815ADB6);
  if (qword_26AB1A890) {
    CFRelease((CFTypeRef)qword_26AB1A890);
  }
  uint64_t v14 = qword_26AB1A888;
  qword_26AB1A888 = 0;
  if (v14) {
    std::default_delete<ADAM::AudioDataAnalysisManager::XPCServiceState>::operator()[abi:ne180100](v14);
  }
  std::unique_ptr<ADAM::Sequencer>::reset[abi:ne180100](0);
  uint64_t v15 = qword_26AB1A878;
  qword_26AB1A878 = 0;
  if (v15) {
    std::default_delete<ADAM::Dispatcher>::operator()[abi:ne180100](v15);
  }
  std::unique_ptr<ADAM::AnalyzerManager>::reset[abi:ne180100](0);
  MEMORY[0x223C9D370](&unk_26AB1A810);
  std::mutex::~mutex((std::mutex *)&qword_26AB1A7D0);
  BOOL v16 = (void *)qword_26AB1A7B8;
  if (qword_26AB1A7B8)
  {
    do
    {
      __int16 v17 = (void *)*v16;
      uint64_t v18 = v16[4];
      v16[4] = 0;
      if (v18)
      {
        uint64_t v19 = MEMORY[0x223C9D370]();
        MEMORY[0x223C9D800](v19, 0x1000C40A517B1A3);
      }
      operator delete(v16);
      BOOL v16 = v17;
    }
    while (v17);
  }
  unint64_t v20 = (void *)qword_26AB1A7A8;
  qword_26AB1A7A8 = 0;
  if (v20) {
    operator delete(v20);
  }
  unsigned int v21 = (ADAM::ClientSessionManager **)qword_26AB1A790;
  if (qword_26AB1A790)
  {
    do
    {
      CFErrorRef v22 = *v21;
      std::unique_ptr<ADAM::ClientSessionManager>::reset[abi:ne180100](v21 + 3);
      operator delete(v21);
      unsigned int v21 = (ADAM::ClientSessionManager **)v22;
    }
    while (v22);
  }
  uint64_t v23 = (void *)ADAM::AudioDataAnalysisManager::instance(void)::gAdam;
  *(void *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam = 0;
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void ADAM::AudioDataAnalysisManager::initialize(ADAM::AudioDataAnalysisManager *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  {
    __cxa_atexit(MEMORY[0x263F8C118], &ADAM::AudioDataAnalysisManager::initialize(void)::sLock, &dword_2227C1000);
  }
  std::mutex::lock(&ADAM::AudioDataAnalysisManager::initialize(void)::sLock);
  if (byte_26AB1A820) {
    goto LABEL_44;
  }
  if (ADAM::isXCTest(void)::once != -1) {
    dispatch_once(&ADAM::isXCTest(void)::once, &__block_literal_global_60);
  }
  if (ADAM::isXCTest(void)::isXCTest) {
    goto LABEL_24;
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v1 = MEMORY[0x263EF8438];
    id v2 = MEMORY[0x263EF8438];
    goto LABEL_12;
  }
  uint64_t v1 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v1)
  {
LABEL_12:
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioDataAnalysisManager.cpp";
      __int16 v16 = 1024;
      int v17 = 753;
      _os_log_impl(&dword_2227C1000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting ADAM XPC Service Listeners...", buf, 0x12u);
    }
  }
  uint64_t v3 = [objc_alloc(MEMORY[0x263F08D88]) initWithMachServiceName:@"com.apple.audio.adam.xpc"];
  uint64_t v4 = *(void **)(qword_26AB1A888 + 8);
  *(void *)(qword_26AB1A888 + 8) = v3;

  CFIndex v5 = objc_alloc_init(ADAMServiceListenerDelegate);
  uint64_t v6 = *(void **)qword_26AB1A888;
  *(void *)qword_26AB1A888 = v5;

  [*(id *)(qword_26AB1A888 + 8) setDelegate:*(void *)qword_26AB1A888];
  [*(id *)(qword_26AB1A888 + 8) resume];
  [MEMORY[0x263F41DC8] startNotificationCenterServer];
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v7 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v7) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v7 = MEMORY[0x263EF8438];
    id v8 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AudioDataAnalysisManager.cpp";
    __int16 v16 = 1024;
    int v17 = 761;
    _os_log_impl(&dword_2227C1000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ADAM XPC Services Started...", buf, 0x12u);
  }

LABEL_24:
  uint64_t v13 = qword_26AB1A880;
  if (atomic_load_explicit((atomic_ullong *volatile)&ADAM::Sequencer::init(void)::mOnce, memory_order_acquire) != -1)
  {
    *(void *)buf = &v13;
    uint64_t v14 = buf;
    std::__call_once(&ADAM::Sequencer::init(void)::mOnce, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ADAM::Sequencer::init(void)::$_0 &&>>);
  }
  *(unsigned char *)(qword_26AB1A870 + 112) = 1;
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v9 = MEMORY[0x263EF8438];
    id v10 = MEMORY[0x263EF8438];
    goto LABEL_32;
  }
  uint64_t v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v9)
  {
LABEL_32:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "ADAMAnalyzerManager.cpp";
      __int16 v16 = 1024;
      int v17 = 52;
      _os_log_impl(&dword_2227C1000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d AnalyzerManager initialized", buf, 0x12u);
    }
  }
  byte_26AB1A820 = 1;
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v11 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v11) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v11 = MEMORY[0x263EF8438];
    id v12 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AudioDataAnalysisManager.cpp";
    __int16 v16 = 1024;
    int v17 = 73;
    _os_log_impl(&dword_2227C1000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ADAM Initialized", buf, 0x12u);
  }

LABEL_44:
  std::mutex::unlock(&ADAM::AudioDataAnalysisManager::initialize(void)::sLock);
}

void sub_2227DDF7C(_Unwind_Exception *exception_object)
{
}

void ADAM::session_lock_exclusive::session_lock_exclusive(ADAM::session_lock_exclusive *this)
{
  ADAM::session_lock_exclusive::shared_cnt(this);
  ADAM::session_lock_exclusive::exclusive_flag(v1);
  int v3 = 0;
  atomic_compare_exchange_strong(&ADAM::session_lock_exclusive::exclusive_flag(void)::_f, (unsigned __int8 *)&v3, 1u);
  if ((_BYTE)v3)
  {
    int v4 = v3;
    do
    {
      atomic_compare_exchange_strong(&ADAM::session_lock_exclusive::exclusive_flag(void)::_f, (unsigned __int8 *)&v4, 1u);
      BOOL v5 = v4 == v3;
      LOBYTE(v3) = v4;
    }
    while (!v5);
  }
  while (ADAM::session_lock_exclusive::shared_cnt(void)::_c)
    ;
  ADAM::session_lock::lock_inst(v2);

  JUMPOUT(0x223C9D600);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  BOOL v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void ADAM::session_lock_exclusive::~session_lock_exclusive(ADAM::session_lock_exclusive *this)
{
  ADAM::session_lock::lock_inst(this);
  uint64_t v1 = (ADAM::session_lock_exclusive *)MEMORY[0x223C9D610](&ADAM::session_lock::lock_inst(void)::_m);
  ADAM::session_lock_exclusive::exclusive_flag(v1);
  atomic_store(0, (unsigned __int8 *)&ADAM::session_lock_exclusive::exclusive_flag(void)::_f);
}

void ADAM::session_lock::lock_inst(ADAM::session_lock *this)
{
  {
    std::shared_timed_mutex::shared_timed_mutex(&ADAM::session_lock::lock_inst(void)::_m);
  }
}

void sub_2227DE164(_Unwind_Exception *a1)
{
}

void ADAM::session_lock_exclusive::exclusive_flag(ADAM::session_lock_exclusive *this)
{
  {
    ADAM::session_lock_exclusive::exclusive_flag(void)::_f = 0;
  }
}

void ADAM::session_lock_exclusive::shared_cnt(ADAM::session_lock_exclusive *this)
{
  {
    ADAM::session_lock_exclusive::shared_cnt(void)::_c = 0;
  }
}

uint64_t ADAM::AudioDataAnalysisManager::getClientSessionMananger(ADAM::AudioDataAnalysisManager *this, unint64_t a2)
{
  ADAM::session_lock::lock_inst(this);
  MEMORY[0x223C9D5E0](&ADAM::session_lock::lock_inst(void)::_m);
  unint64_t v4 = (ADAM::session_lock_shared *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(this, a2);
  if (v4) {
    uint64_t v5 = *((void *)v4 + 3);
  }
  else {
    uint64_t v5 = 0;
  }
  ADAM::session_lock_shared::~session_lock_shared(v4);
  return v5;
}

void ADAM::session_lock_shared::~session_lock_shared(ADAM::session_lock_shared *this)
{
}

ADAM::session_lock_exclusive::session_lock_exclusive_flag *ADAM::session_lock_exclusive::session_lock_exclusive_flag::session_lock_exclusive_flag(ADAM::session_lock_exclusive::session_lock_exclusive_flag *this)
{
  *(unsigned char *)this = 0;
  ADAM::session_lock_exclusive::shared_cnt(this);
  ADAM::session_lock_exclusive::exclusive_flag(v2);
  char v4 = 0;
  atomic_compare_exchange_strong(&ADAM::session_lock_exclusive::exclusive_flag(void)::_f, (unsigned __int8 *)&v4, 1u);
  if (!v4)
  {
    atomic_fetch_add_explicit(&ADAM::session_lock_exclusive::shared_cnt(void)::_c, 1u, memory_order_relaxed);
    *(unsigned char *)this = 1;
    ADAM::session_lock_exclusive::exclusive_flag(v3);
    atomic_store(0, (unsigned __int8 *)&ADAM::session_lock_exclusive::exclusive_flag(void)::_f);
  }
  return this;
}

uint64_t ADAM::AudioDataAnalysisManager::signal(unint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a1)
  {
    atomic_ullong v1 = qword_26AB1A828[0];
    atomic_store(qword_26AB1A828[0], a1);
    unint64_t v2 = v1;
    atomic_compare_exchange_strong(qword_26AB1A828, &v2, (unint64_t)a1);
    if (v2 != v1)
    {
      unint64_t v3 = v2;
      do
      {
        atomic_store(v2, a1);
        atomic_compare_exchange_strong(qword_26AB1A828, &v3, (unint64_t)a1);
        BOOL v4 = v3 == v2;
        unint64_t v2 = v3;
      }
      while (!v4);
    }
  }
  else
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      uint64_t v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v5) {
        return caulk::semaphore::signal((caulk::semaphore *)&unk_26AB1A810);
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x263EF8438];
      id v6 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "AudioDataAnalysisManager.cpp";
      __int16 v10 = 1024;
      int v11 = 534;
      _os_log_impl(&dword_2227C1000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d *****SEVER ERROR: A NULL msg is received", (uint8_t *)&v8, 0x12u);
    }
  }
  return caulk::semaphore::signal((caulk::semaphore *)&unk_26AB1A810);
}

uint64_t ADAM::AudioDataAnalysisManager::getNodeDescriptor(ADAM::AudioDataAnalysisManager *this, unint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger(this, HIDWORD(a2));
  if (!ClientSessionMananger) {
    return 0;
  }
  BOOL v4 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(ClientSessionMananger + 16), v2);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4[3] + 40);

  return v5();
}

uint64_t ADAM::AudioDataAnalysisManager::dispatch(ADAM::AudioDataAnalysisManager *this, unint64_t a2, const ADAM::BufferNodeDescriptorBase *a3)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance(this);
  id v6 = *(uint64_t **)qword_26AB1A870;
  unint64_t v7 = *(uint64_t **)(qword_26AB1A870 + 8);
  if (*(uint64_t **)qword_26AB1A870 == v7) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v43 = (void *)((char *)this + 72);
  unint64_t v9 = 0x267F81000uLL;
  uint64_t v40 = *(uint64_t **)(qword_26AB1A870 + 8);
  uint64_t v41 = a3;
  do
  {
    uint64_t v10 = *v6;
    uint64_t v11 = *((void *)a3 + 4) & *(void *)(*v6 + 16);
    if (!v11 || !*(unsigned char *)(v10 + 112)) {
      goto LABEL_63;
    }
    uint64_t v42 = v6;
    uint64_t v12 = *(void *)(v10 + 24);
    ADAM::unpackEndPoints((uint64_t *)&v46, v11);
    uint64_t v13 = v46;
    uint64_t v8 = 561476709;
    if (v46 == v47) {
      goto LABEL_62;
    }
    uint64_t v14 = v10 + 32;
    do
    {
      int64_t v15 = (int64_t)v13[4];
      std::mutex::lock((std::mutex *)this);
      unint64_t v16 = v9;
      int v17 = (void *)*v43;
      if (!*v43) {
        goto LABEL_24;
      }
      uint64_t v18 = (void *)((char *)this + 72);
      do
      {
        unint64_t v19 = v17[4];
        BOOL v20 = v19 >= a2;
        if (v19 >= a2) {
          unsigned int v21 = v17;
        }
        else {
          unsigned int v21 = v17 + 1;
        }
        if (v20) {
          uint64_t v18 = v17;
        }
        int v17 = (void *)*v21;
      }
      while (*v21);
      if (v18 == v43 || v18[4] > a2 || (v23 = (void *)v18[5], CFErrorRef v22 = (void *)v18[6], v24 = 561476709, v22 == v23))
      {
LABEL_24:
        int v25 = ADAM::Dispatcher::dispatch2EndPoint(unsigned long long,ADAM::EndPointBitMask,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        unsigned int v26 = ++ADAM::Dispatcher::dispatch2EndPoint(unsigned long long,ADAM::EndPointBitMask,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        unint64_t v9 = v16;
        if (v25)
        {
LABEL_35:
          if (v26 > 0x3FE) {
            unsigned int v26 = 0;
          }
          ADAM::Dispatcher::dispatch2EndPoint(unsigned long long,ADAM::EndPointBitMask,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v26;
          std::mutex::unlock((std::mutex *)this);
          unsigned int v24 = 561476709;
LABEL_38:
          CAX4CCString::CAX4CCString((CAX4CCString *)v58, v24);
          int v29 = *(_DWORD *)(v9 + 1448);
          unsigned int v30 = v29 + 1;
          *(_DWORD *)(v9 + 1448) = v29 + 1;
          if (v29)
          {
LABEL_52:
            if (v30 > 0x1D) {
              unsigned int v30 = 0;
            }
            *(_DWORD *)(v9 + 1448) = v30;
            goto LABEL_55;
          }
          if (ADAM::ADAMLogScope(void)::once != -1) {
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
          }
          if (ADAM::ADAMLogScope(void)::scope)
          {
            id v31 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v31)
            {
LABEL_51:
              unsigned int v30 = *(_DWORD *)(v9 + 1448);
              goto LABEL_52;
            }
          }
          else
          {
            uint64_t v32 = (void *)MEMORY[0x263EF8438];
            id v33 = MEMORY[0x263EF8438];
            id v31 = v32;
          }
          unint64_t v34 = v31;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            ADAM::getEndPointName(__p, v15);
            id v35 = __p;
            if (v45 < 0) {
              id v35 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136316162;
            uint64_t v49 = "ADAMDispatcher.cpp";
            __int16 v50 = 1024;
            int v51 = 98;
            __int16 v52 = 2048;
            unint64_t v53 = a2;
            __int16 v54 = 2080;
            unint64_t v55 = v35;
            __int16 v56 = 2080;
            unint64_t v57 = v58;
            _os_log_impl(&dword_2227C1000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx: Failed to dispatch to endpoint: %s err: %s", buf, 0x30u);
            if (v45 < 0) {
              operator delete(__p[0]);
            }
          }

          goto LABEL_51;
        }
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          unint64_t v27 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v27)
          {
LABEL_34:
            unsigned int v26 = ADAM::Dispatcher::dispatch2EndPoint(unsigned long long,ADAM::EndPointBitMask,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
            goto LABEL_35;
          }
        }
        else
        {
          unint64_t v27 = MEMORY[0x263EF8438];
          id v28 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v49 = "ADAMDispatcher.cpp";
          __int16 v50 = 1024;
          int v51 = 124;
          __int16 v52 = 2048;
          unint64_t v53 = a2;
          _os_log_impl(&dword_2227C1000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %llx, no writers exists", buf, 0x1Cu);
        }

        goto LABEL_34;
      }
      do
      {
        if (*(void *)(*v23 + 40) == v15) {
          unsigned int v24 = (**(uint64_t (***)(void, uint64_t, uint64_t))*v23)(*v23, v12, v14);
        }
        ++v23;
      }
      while (v23 != v22);
      std::mutex::unlock((std::mutex *)this);
      unint64_t v9 = v16;
      if (v24) {
        goto LABEL_38;
      }
LABEL_55:
      unint64_t v36 = v13[1];
      if (v36)
      {
        do
        {
          BOOL v37 = (void **)v36;
          unint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          BOOL v37 = (void **)v13[2];
          BOOL v38 = *v37 == v13;
          uint64_t v13 = v37;
        }
        while (!v38);
      }
      uint64_t v13 = v37;
    }
    while (v37 != v47);
    uint64_t v8 = 0;
LABEL_62:
    std::__tree<ADAM::EndPointBitMask>::destroy(v47[0]);
    a3 = v41;
    id v6 = v42;
    unint64_t v7 = v40;
LABEL_63:
    ++v6;
  }
  while (v6 != v7);
  return v8;
}

void sub_2227DE958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  std::__tree<ADAM::EndPointBitMask>::destroy(a23);
  _Unwind_Resume(a1);
}

void ADAM::AudioDataAnalysisManager::addWriters(unint64_t a1, uint64_t a2)
{
  v86[19] = *MEMORY[0x263EF8340];
  uint64_t v4 = qword_26AB1A878;
  unint64_t v71 = a1;
  std::mutex::lock((std::mutex *)qword_26AB1A878);
  unint64_t v55 = (uint64_t **)(v4 + 64);
  __int16 v54 = (std::mutex *)v4;
  id v6 = (void *)(v4 + 72);
  uint64_t v5 = *(uint64_t **)(v4 + 72);
  if (v5)
  {
    unint64_t v7 = (void *)(v4 + 72);
    uint64_t v8 = *(void **)(v4 + 72);
    do
    {
      unint64_t v9 = v8[4];
      BOOL v10 = v9 >= a1;
      if (v9 >= a1) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = v8 + 1;
      }
      if (v10) {
        unint64_t v7 = v8;
      }
      uint64_t v8 = (void *)*v11;
    }
    while (*v11);
    if (v7 != v6 && v7[4] <= a1) {
      goto LABEL_22;
    }
    *(_OWORD *)__int16 v77 = a1;
    *(void *)&v77[16] = 0;
    *(void *)&v77[24] = 0;
    memset(&v76, 0, sizeof(v76));
    do
    {
      while (1)
      {
        uint64_t v12 = (uint64_t **)v5;
        unint64_t v13 = v5[4];
        if (v13 <= a1) {
          break;
        }
        uint64_t v5 = *v12;
        if (!*v12)
        {
          uint64_t v14 = v12;
          goto LABEL_20;
        }
      }
      if (v13 >= a1) {
        goto LABEL_21;
      }
      uint64_t v5 = v12[1];
    }
    while (v5);
    uint64_t v14 = v12 + 1;
  }
  else
  {
    *(_OWORD *)__int16 v77 = a1;
    *(void *)&v77[16] = 0;
    *(void *)&v77[24] = 0;
    uint64_t v14 = (uint64_t **)(v4 + 72);
    uint64_t v12 = (uint64_t **)(v4 + 72);
    memset(&v76, 0, sizeof(v76));
  }
LABEL_20:
  int64_t v15 = (uint64_t *)operator new(0x40uLL);
  v15[4] = a1;
  v15[5] = 0;
  v15[6] = 0;
  v15[7] = 0;
  memset(&v77[8], 0, 24);
  std::__tree<rtaid::AnalyzerType>::__insert_node_at(v55, (uint64_t)v12, v14, v15);
LABEL_21:
  __int16 v75 = (std::string *)&v77[8];
  std::vector<std::unique_ptr<ADAM::Writer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  __int16 v75 = &v76;
  std::vector<std::unique_ptr<ADAM::Writer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
LABEL_22:
  unint64_t v16 = ADAM::unpackEndPoints((uint64_t *)&v69, a2);
  int v17 = v69;
  if (v69 != v70)
  {
    uint64_t v63 = *(void *)(MEMORY[0x263F8C2B8] + 24);
    uint64_t v64 = *(void *)(MEMORY[0x263F8C2B8] + 16);
    uint64_t v62 = *(void *)(MEMORY[0x263F8C2B8] + 32);
    uint64_t v60 = *(void *)(MEMORY[0x263F8C2B8] + 48);
    uint64_t v61 = *(void *)(MEMORY[0x263F8C2B8] + 40);
    uint64_t v59 = *(void *)(MEMORY[0x263F8C2B8] + 8);
    uint64_t v58 = *MEMORY[0x263F8C2B8];
    uint64_t v56 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v57 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    CFDictionaryRef v65 = v6;
    while (1)
    {
      uint64_t v18 = (void *)*v6;
      if (!*v6) {
LABEL_135:
      }
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
      unint64_t v19 = v17[4];
      while (1)
      {
        while (1)
        {
          unint64_t v20 = v18[4];
          if (v20 <= a1) {
            break;
          }
          uint64_t v18 = (void *)*v18;
          if (!v18) {
            goto LABEL_135;
          }
        }
        if (v20 >= a1) {
          break;
        }
        uint64_t v18 = (void *)v18[1];
        if (!v18) {
          goto LABEL_135;
        }
      }
      uint64_t v22 = v18[5];
      uint64_t v21 = v18[6];
      if (v22 != v21)
      {
        uint64_t v23 = v22 + 8;
        do
        {
          unsigned int v24 = *(void **)(*(void *)(v23 - 8) + 40);
          BOOL v25 = v24 == v19 || v23 == v21;
          v23 += 8;
        }
        while (!v25);
        if (v24 == v19) {
          goto LABEL_119;
        }
      }
      int64_t __val = (int64_t)v17[4];
      unint64_t v74 = a1;
      ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)v16);
      uint64_t NodeDescriptor = ADAM::AudioDataAnalysisManager::getNodeDescriptor((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, a1);
      uint64_t v26 = MEMORY[0x263F8C328] + 104;
      v86[0] = MEMORY[0x263F8C328] + 104;
      uint64_t v27 = MEMORY[0x263F8C328] + 64;
      *(void *)&v77[16] = MEMORY[0x263F8C328] + 64;
      *(void *)__int16 v77 = v64;
      *(void *)&v77[*(void *)(v64 - 24)] = v63;
      *(void *)&v77[8] = 0;
      id v28 = (std::ios_base *)&v77[*(void *)(*(void *)v77 - 24)];
      std::ios_base::init(v28, &v77[24]);
      uint64_t v29 = MEMORY[0x263F8C328] + 24;
      v28[1].__vftable = 0;
      v28[1].__fmtflags_ = -1;
      *(void *)&v77[16] = v62;
      *(void *)&v77[*(void *)(v62 - 24) + 16] = v61;
      *(void *)__int16 v77 = v59;
      *(void *)&v77[*(void *)(v59 - 24)] = v60;
      v86[0] = v26;
      *(void *)__int16 v77 = v29;
      *(void *)&v77[16] = v27;
      std::streambuf::basic_streambuf();
      uint64_t v30 = MEMORY[0x263F8C318] + 16;
      *(void *)&v77[24] = MEMORY[0x263F8C318] + 16;
      long long __p = 0u;
      long long v84 = 0u;
      int v85 = 24;
      char v31 = *(unsigned char *)(NodeDescriptor + 31);
      uint64_t v66 = (const char **)(NodeDescriptor + 8);
      if (__val == 2)
      {
        uint64_t v32 = v31 >= 0 ? *(unsigned __int8 *)(NodeDescriptor + 31) : *(void *)(NodeDescriptor + 16);
        if (v32 == 5)
        {
          if (v31 >= 0) {
            id v33 = (const char *)(NodeDescriptor + 8);
          }
          else {
            id v33 = *v66;
          }
          if (*(_DWORD *)v33 == 1970237541 && v33[4] == 116)
          {
            id v33 = "TelephonyUplink";
            uint64_t v32 = 15;
          }
        }
        else if (v32 == 16)
        {
          if (v31 >= 0) {
            id v33 = (const char *)(NodeDescriptor + 8);
          }
          else {
            id v33 = *v66;
          }
          if (*(void *)v33 == 0x6365722D63767661 && *((void *)v33 + 1) == 0x657565755164726FLL)
          {
            id v33 = "SiriUplink";
            uint64_t v32 = 10;
          }
        }
        else
        {
          id v33 = v31 >= 0 ? (const char *)(NodeDescriptor + 8) : *v66;
        }
      }
      else
      {
        id v33 = v31 >= 0 ? (const char *)(NodeDescriptor + 8) : *(const char **)(NodeDescriptor + 8);
        uint64_t v32 = v31 >= 0 ? *(unsigned __int8 *)(NodeDescriptor + 31) : *(void *)(NodeDescriptor + 16);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77[16], (uint64_t)v33, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77[16], (uint64_t)"-", 1);
      *(_DWORD *)&v77[*(void *)(*(void *)&v77[16] - 24) + 24] = *(_DWORD *)&v77[*(void *)(*(void *)&v77[16]
                                                                                                - 24)
                                                                                    + 24] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      if ((v85 & 0x10) != 0)
      {
        unint64_t v38 = *((void *)&v84 + 1);
        if (*((void *)&v84 + 1) < v82)
        {
          *((void *)&v84 + 1) = v82;
          unint64_t v38 = v82;
        }
        unsigned int v39 = __src;
      }
      else
      {
        if ((v85 & 8) == 0)
        {
          size_t v36 = 0;
          HIBYTE(v73) = 0;
          BOOL v37 = __dst;
          goto LABEL_88;
        }
        unsigned int v39 = v79;
        unint64_t v38 = v80;
      }
      size_t v36 = v38 - (void)v39;
      if (v38 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v36 >= 0x17) {
        break;
      }
      HIBYTE(v73) = v38 - (_BYTE)v39;
      BOOL v37 = __dst;
      if (v36) {
        goto LABEL_87;
      }
LABEL_88:
      *((unsigned char *)v37 + v36) = 0;
      *(void *)__int16 v77 = v58;
      *(void *)&v77[*(void *)(v58 - 24)] = v56;
      *(void *)&v77[16] = v57;
      *(void *)&v77[24] = v30;
      if (SBYTE7(v84) < 0) {
        operator delete((void *)__p);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x223C9D730](v86);
      if (__val > 15)
      {
        switch(__val)
        {
          case 64:
            std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v55, v74, (uint64_t *)&v74);
            operator new();
          case 32:
            std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v55, v74, (uint64_t *)&v74);
            operator new();
          case 16:
            std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v55, v74, (uint64_t *)&v74);
            operator new();
        }
      }
      else
      {
        switch(__val)
        {
          case 1:
            std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v55, v74, (uint64_t *)&v74);
            operator new();
          case 2:
            std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v55, v74, (uint64_t *)&v74);
            operator new();
          case 8:
            std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v55, v74, (uint64_t *)&v74);
            operator new();
        }
      }
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (!ADAM::ADAMLogScope(void)::scope)
      {
        uint64_t v42 = (uint64_t *)MEMORY[0x263EF8438];
        id v43 = MEMORY[0x263EF8438];
        unint64_t v16 = v42;
LABEL_109:
        uint64_t v44 = v16;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          if (*(char *)(NodeDescriptor + 31) < 0) {
            uint64_t v66 = (const char **)*v66;
          }
          unint64_t v45 = v74;
          ADAM::getEndPointName(&v76, __val);
          unint64_t v46 = &v76;
          if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v46 = (std::string *)v76.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v77 = 136316162;
          *(void *)&v77[4] = "ADAMDispatcher.cpp";
          *(_WORD *)&v77[12] = 1024;
          *(_DWORD *)&v77[14] = 198;
          *(_WORD *)&v77[18] = 2048;
          *(void *)&v77[20] = v45;
          *(_WORD *)&v77[28] = 2080;
          *(void *)&v77[30] = v66;
          __int16 v78 = 2080;
          uint64_t v79 = v46;
          _os_log_impl(&dword_2227C1000, v44, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx, No writer exists for node %s, endPoint: %s", v77, 0x30u);
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v76.__r_.__value_.__l.__data_);
          }
        }

        goto LABEL_117;
      }
      unint64_t v16 = (uint64_t *)*(id *)ADAM::ADAMLogScope(void)::scope;
      if (v16) {
        goto LABEL_109;
      }
LABEL_117:
      if (SHIBYTE(v73) < 0) {
        operator delete(__dst[0]);
      }
LABEL_119:
      uint64_t v47 = v17[1];
      if (v47)
      {
        do
        {
          unint64_t v48 = (void **)v47;
          uint64_t v47 = (void *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          unint64_t v48 = (void **)v17[2];
          BOOL v25 = *v48 == v17;
          int v17 = v48;
        }
        while (!v25);
      }
      int v17 = v48;
      id v6 = v65;
      if (v48 == v70) {
        goto LABEL_125;
      }
    }
    uint64_t v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v40 = v36 | 7;
    }
    uint64_t v41 = v40 + 1;
    BOOL v37 = (void **)operator new(v40 + 1);
    __dst[1] = (void *)v36;
    unint64_t v73 = v41 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_87:
    memmove(v37, v39, v36);
    goto LABEL_88;
  }
LABEL_125:
  std::__tree<ADAM::EndPointBitMask>::destroy(v70[0]);
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    id v49 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v49) {
      goto LABEL_134;
    }
  }
  else
  {
    id v49 = (id)MEMORY[0x263EF8438];
    id v50 = MEMORY[0x263EF8438];
  }
  int v51 = v49;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
  {
    __int16 v52 = std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v55, v71, (uint64_t *)&v71);
    uint64_t v53 = (v52[6] - v52[5]) >> 3;
    *(_DWORD *)__int16 v77 = 136315906;
    *(void *)&v77[4] = "ADAMDispatcher.cpp";
    *(_WORD *)&v77[12] = 1024;
    *(_DWORD *)&v77[14] = 57;
    *(_WORD *)&v77[18] = 2048;
    *(void *)&v77[20] = a1;
    *(_WORD *)&v77[28] = 2048;
    *(void *)&v77[30] = v53;
    _os_log_impl(&dword_2227C1000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session %llx: size of writers: %lu", v77, 0x26u);
  }

LABEL_134:
  std::mutex::unlock(v54);
}

void sub_2227E0584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12)
{
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t ADAM::AudioDataAnalysisManager::fetchSessionBundleIDs(unint64_t a1, std::vector<std::string> *a2)
{
  unsigned int v3 = a1;
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, HIDWORD(a1));
  if (!ClientSessionMananger) {
    return 0;
  }
  uint64_t v5 = ClientSessionMananger;
  unsigned int v29 = v3;
  if (!*(unsigned char *)(ClientSessionMananger + 432)) {
    return 0;
  }
  id v6 = (std::mutex *)(ClientSessionMananger + 184);
  std::mutex::lock((std::mutex *)(ClientSessionMananger + 184));
  unint64_t v7 = *(void *)(v5 + 152);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v8 = (float *)(v5 + 144);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v3;
    if (v7 <= v3) {
      unint64_t v10 = v3 % v7;
    }
  }
  else
  {
    unint64_t v10 = (v7 - 1) & v3;
  }
  uint64_t v12 = *(uint64_t ***)(*(void *)v8 + 8 * v10);
  if (!v12 || (unint64_t v13 = *v12) == 0)
  {
LABEL_20:
    uint64_t v11 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v14 = v13[1];
    if (v14 == v3) {
      break;
    }
    if (v9.u32[0] > 1uLL)
    {
      if (v14 >= v7) {
        v14 %= v7;
      }
    }
    else
    {
      v14 &= v7 - 1;
    }
    if (v14 != v10) {
      goto LABEL_20;
    }
LABEL_19:
    unint64_t v13 = (uint64_t *)*v13;
    if (!v13) {
      goto LABEL_20;
    }
  }
  if (*((_DWORD *)v13 + 4) != v3) {
    goto LABEL_19;
  }
  if (!*((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)(v5 + 144), v3, &v29)+ 20))goto LABEL_20; {
  if ((std::vector<std::string> *)(v5 + 120) != a2)
  }
  {
    int v17 = *(long long **)(v5 + 120);
    unint64_t v16 = *(long long **)(v5 + 128);
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v17) >> 3);
    std::__split_buffer<std::string>::pointer begin = a2->__begin_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a2->__end_cap_.__value_ - (char *)a2->__begin_) >> 3) < v18)
    {
      std::vector<std::string>::__vdeallocate(a2);
      if (v18 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_50;
      }
      unint64_t v20 = 0x5555555555555556 * (((char *)a2->__end_cap_.__value_ - (char *)a2->__begin_) >> 3);
      if (v20 <= v18) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v17) >> 3);
      }
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2->__end_cap_.__value_ - (char *)a2->__begin_) >> 3) >= 0x555555555555555
          ? 0xAAAAAAAAAAAAAAALL
          : v20;
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
LABEL_50:
      }
        std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
      uint64_t v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v21);
      a2->__begin_ = v22;
      a2->__end_ = v22;
      a2->__end_cap_.__value_ = &v22[v23];
      unsigned int v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&a2->__end_cap_, v17, v16, v22);
      goto LABEL_40;
    }
    std::__split_buffer<std::string>::pointer end = a2->__end_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) >= v18)
    {
      if (v17 != v16)
      {
        do
        {
          std::string::operator=(begin, (const std::string *)v17);
          int v17 = (long long *)((char *)v17 + 24);
          ++begin;
        }
        while (v17 != v16);
        std::__split_buffer<std::string>::pointer end = a2->__end_;
      }
      while (end != begin)
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      a2->__end_ = begin;
    }
    else
    {
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
      if (end != begin)
      {
        uint64_t v26 = 8 * (((char *)end - (char *)begin) >> 3);
        uint64_t v27 = (const std::string *)v17;
        do
        {
          std::string::operator=(begin++, v27++);
          v26 -= 24;
        }
        while (v26);
        std::__split_buffer<std::string>::pointer begin = a2->__end_;
      }
      unsigned int v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&a2->__end_cap_, (long long *)((char *)v17 + 24 * v28), v16, begin);
LABEL_40:
      a2->__end_ = v24;
    }
  }
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v8, v3, &v29)+ 20) = 0;
  uint64_t v11 = 1;
LABEL_21:
  std::mutex::unlock(v6);
  return v11;
}

void sub_2227E0CD0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v3;
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ADAM::AudioDataAnalysisManager::getServerDelegates(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = 0;
  unint64_t v16 = &v15;
  uint64_t v17 = 0x4812000000;
  unint64_t v18 = __Block_byref_object_copy_;
  unint64_t v19 = __Block_byref_object_dispose_;
  unint64_t v20 = "";
  memset(v21, 0, sizeof(v21));
  uint64_t v4 = (std::mutex *)(qword_26AB1A888 + 24);
  std::mutex::lock((std::mutex *)(qword_26AB1A888 + 24));
  uint64_t v5 = *(void **)(qword_26AB1A888 + 16);
  id v6 = [NSNumber numberWithUnsignedInteger:a2];
  unint64_t v7 = [v5 objectForKey:v6];

  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  v14[2] = ___ZN4ADAM24AudioDataAnalysisManager18getServerDelegatesE25ADAMAudioDataAnalysisType_block_invoke;
  void v14[3] = &unk_264628D70;
  v14[4] = &v15;
  [v7 enumerateObjectsUsingBlock:v14];

  std::mutex::unlock(v4);
  uint64_t v8 = v16;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint8x8_t v9 = (id *)v8[6];
  unint64_t v10 = (id *)v8[7];
  uint64_t v22 = (void **)a1;
  char v23 = 0;
  uint64_t v11 = (char *)v10 - (char *)v9;
  if (v10 != v9)
  {
    if (v11 < 0) {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (id *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v11 >> 3);
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = &v12[v13];
    do
      objc_copyWeak(v12++, v9++);
    while (v9 != v10);
    *(void *)(a1 + 8) = v12;
  }
  _Block_object_dispose(&v15, 8);
  uint64_t v22 = (void **)v21;
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100](&v22);
}

void sub_2227E0EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  std::mutex::unlock(v6);
  _Block_object_dispose(va, 8);
  *(void *)(v9 - 64) = v8;
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 64));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  atomic_ullong v1 = (void **)(a1 + 48);
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN4ADAM24AudioDataAnalysisManager18getServerDelegatesE25ADAMAudioDataAnalysisType_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  objc_initWeak(&v13, a2);
  unint64_t v3 = *(void *)(v2 + 56);
  unint64_t v4 = *(void *)(v2 + 64);
  if (v3 >= v4)
  {
    uint64_t v6 = *(void *)(v2 + 48);
    uint64_t v7 = (uint64_t)(v3 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v4 - v6;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    v14[4] = v2 + 64;
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = (id *)(v10 + 8 * v7);
    v14[0] = v10;
    v14[1] = v12;
    void v14[3] = v10 + 8 * v11;
    objc_moveWeak(v12, &v13);
    v14[2] = v12 + 1;
    std::vector<ADAMServerDelegate * {__weak}>::__swap_out_circular_buffer((id **)(v2 + 48), v14);
    unint64_t v5 = *(void *)(v2 + 56);
    std::__split_buffer<ADAMServerDelegate * {__weak}>::~__split_buffer((uint64_t)v14);
  }
  else
  {
    objc_moveWeak(*(id **)(v2 + 56), &v13);
    unint64_t v5 = v3 + 8;
    *(void *)(v2 + 56) = v3 + 8;
  }
  *(void *)(v2 + 56) = v5;
  objc_destroyWeak(&v13);
}

void sub_2227E106C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

void std::__tree<std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,NSMutableArray * {__strong}>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,NSMutableArray * {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,NSMutableArray * {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void sub_2227E1880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,NSMutableArray * {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,NSMutableArray * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    unint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_2227E1E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
}

void sub_2227E208C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227E2FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227E3328(_Unwind_Exception *exception_object)
{
}

void sub_2227E3828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227E3EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227E4148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227E4720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_2227E4AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227E4BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227E4E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227E4FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227E4FFC()
{
}

uint64_t ADAM::Analyzer::EnvironmentExposureBuffer::hardReset(ADAM::Analyzer::EnvironmentExposureBuffer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

uint64_t ADAM::Analyzer::EnvironmentExposureBuffer::reset(uint64_t this)
{
  *(unsigned char *)(this + 112) = 0;
  return this;
}

uint64_t ADAM::Analyzer::EnvironmentExposureBuffer::analyze(uint64_t a1, uint64_t a2, float *a3, _OWORD *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if (ADAM::Analyzer::EnvironmentExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt++)
    {
LABEL_18:
      uint64_t v9 = 1684108321;
      int v12 = ADAM::Analyzer::EnvironmentExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
      if (ADAM::Analyzer::EnvironmentExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt > 0xBB7) {
        int v12 = 0;
      }
      ADAM::Analyzer::EnvironmentExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt = v12;
      return v9;
    }
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      unint64_t v16 = *(NSObject **)ADAM::ADAMLogScope(void)::scope;
      if (!*(void *)ADAM::ADAMLogScope(void)::scope) {
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v16 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      char v23 = "EnvironmentExposureBuffer.cpp";
      __int16 v24 = 1024;
      int v25 = 61;
      _os_log_impl(&dword_2227C1000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d env spl data ptr is null? (sampled every 3k)", (uint8_t *)&v22, 0x12u);
    }
    goto LABEL_18;
  }
  BOOL v5 = *a3 >= 0.00000011921 && *a3 <= 130.0;
  if (v5
    && (float v6 = a3[1], v6 >= 0.00000011921)
    && ((v7 = a3[2], v7 >= 0.00000011921) ? (BOOL v8 = v6 <= (float)(v7 + 0.00000011921)) : (BOOL v8 = 0), v8))
  {
    uint64_t v9 = 0;
    *(_OWORD *)(a1 + 32) = *a4;
    long long v17 = a4[1];
    long long v18 = a4[2];
    long long v19 = a4[4];
    *(_OWORD *)(a1 + 80) = a4[3];
    *(_OWORD *)(a1 + 96) = v19;
    *(_OWORD *)(a1 + 48) = v17;
    *(_OWORD *)(a1 + 64) = v18;
    uint64_t v20 = *(void *)a3;
    *(float *)(a1 + 124) = a3[2];
    *(void *)(a1 + 116) = v20;
    *(unsigned char *)(a1 + 112) = 1;
  }
  else
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    uint64_t v9 = 1684108321;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      unint64_t v10 = *(NSObject **)ADAM::ADAMLogScope(void)::scope;
      if (!*(void *)ADAM::ADAMLogScope(void)::scope) {
        return v9;
      }
    }
    else
    {
      unint64_t v10 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      double v13 = *a3;
      double v14 = a3[1];
      double v15 = a3[2];
      int v22 = 136316162;
      char v23 = "EnvironmentExposureBuffer.cpp";
      __int16 v24 = 1024;
      int v25 = 74;
      __int16 v26 = 2048;
      double v27 = v13;
      __int16 v28 = 2048;
      double v29 = v14;
      __int16 v30 = 2048;
      double v31 = v15;
      _os_log_impl(&dword_2227C1000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid EVE data { dBA: %.2f, duration: %.2f, period: %.2f}", (uint8_t *)&v22, 0x30u);
    }
  }
  return v9;
}

uint64_t ADAM::Analyzer::EnvironmentExposureBuffer::flush(uint64_t this)
{
  *(unsigned char *)(this + 112) = 0;
  return this;
}

void ADAM::Analyzer::EnvironmentExposureBuffer::~EnvironmentExposureBuffer(ADAM::Analyzer::EnvironmentExposureBuffer *this)
{
}

uint64_t ADAM::Analyzer::EnvironmentSoundClassAnalyzer::hardReset(uint64_t this)
{
  *(unsigned char *)(this + 112) = 0;
  return this;
}

uint64_t ADAM::Analyzer::EnvironmentSoundClassAnalyzer::reset(uint64_t this)
{
  *(unsigned char *)(this + 112) = 0;
  return this;
}

uint64_t ADAM::Analyzer::EnvironmentSoundClassAnalyzer::analyze(uint64_t a1, uint64_t a2, void *a3, _OWORD *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if (ADAM::Analyzer::EnvironmentSoundClassAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt++)
    {
LABEL_9:
      uint64_t v5 = 1684108321;
      int v8 = ADAM::Analyzer::EnvironmentSoundClassAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
      if (ADAM::Analyzer::EnvironmentSoundClassAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt > 0xBB7) {
        int v8 = 0;
      }
      ADAM::Analyzer::EnvironmentSoundClassAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt = v8;
      return v5;
    }
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      int v12 = *(NSObject **)ADAM::ADAMLogScope(void)::scope;
      if (!*(void *)ADAM::ADAMLogScope(void)::scope) {
        goto LABEL_9;
      }
    }
    else
    {
      int v12 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      unint64_t v16 = "EnvironmentExposureBuffer.cpp";
      __int16 v17 = 1024;
      int v18 = 124;
      _os_log_impl(&dword_2227C1000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d env sound class data ptr is null? (sampled every 3k)", (uint8_t *)&v15, 0x12u);
    }
    goto LABEL_9;
  }
  if (*a3 < 0x11uLL)
  {
    uint64_t v5 = 0;
    *(_OWORD *)(a1 + 32) = *a4;
    long long v9 = a4[1];
    long long v10 = a4[2];
    long long v11 = a4[4];
    *(_OWORD *)(a1 + 80) = a4[3];
    *(_OWORD *)(a1 + 96) = v11;
    *(_OWORD *)(a1 + 48) = v9;
    *(_OWORD *)(a1 + 64) = v10;
    *(void *)(a1 + 120) = *a3;
    *(unsigned char *)(a1 + 112) = 1;
  }
  else
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    uint64_t v5 = 1684108321;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      float v6 = *(NSObject **)ADAM::ADAMLogScope(void)::scope;
      if (!*(void *)ADAM::ADAMLogScope(void)::scope) {
        return v5;
      }
    }
    else
    {
      float v6 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *a3;
      int v15 = 136315650;
      unint64_t v16 = "EnvironmentExposureBuffer.cpp";
      __int16 v17 = 1024;
      int v18 = 131;
      __int16 v19 = 2048;
      uint64_t v20 = v13;
      _os_log_impl(&dword_2227C1000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid EnvSense Class  { ClassBitSet: %.2llu }", (uint8_t *)&v15, 0x1Cu);
    }
  }
  return v5;
}

uint64_t ADAM::Analyzer::EnvironmentSoundClassAnalyzer::flush(uint64_t this)
{
  *(unsigned char *)(this + 112) = 0;
  return this;
}

void ADAM::Analyzer::EnvironmentSoundClassAnalyzer::~EnvironmentSoundClassAnalyzer(ADAM::Analyzer::EnvironmentSoundClassAnalyzer *this)
{
}

void rtaid::Detector::~Detector(std::__shared_weak_count **this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  for (uint64_t i = this + 3; ; rtaid::Detector::checkAndResetAnalyzers((uint64_t)this, i + 3))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
  }
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  unint64_t v3 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_INFO))
  {
    int v10 = 136316162;
    long long v11 = "Detector.cpp";
    __int16 v12 = 1024;
    int v13 = 32;
    __int16 v14 = 1040;
    int v15 = 15;
    __int16 v16 = 2080;
    __int16 v17 = "rtaid::Detector]";
    __int16 v18 = 2048;
    __int16 v19 = (rtaid::Detector *)this;
    _os_log_impl(&dword_2227C1000, v3, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] destroyed", (uint8_t *)&v10, 0x2Cu);
  }
  unint64_t v4 = this[81];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = this[77];
  if (v5)
  {
    this[78] = v5;
    operator delete(v5);
  }
  float v6 = this[74];
  if (v6)
  {
    this[75] = v6;
    operator delete(v6);
  }
  std::__function::__value_func<void ()(rtaid::IssueDictionary)>::~__value_func[abi:ne180100](this + 8);
  float v7 = (rtaid::DetectorNode **)this[3];
  if (v7)
  {
    do
    {
      int v8 = *v7;
      std::unique_ptr<rtaid::DetectorNode>::reset[abi:ne180100](v7 + 3);
      operator delete(v7);
      float v7 = (rtaid::DetectorNode **)v8;
    }
    while (v8);
  }
  long long v9 = this[1];
  this[1] = 0;
  if (v9) {
    operator delete(v9);
  }
}

void sub_2227E5728(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *rtaid::Detector::ResetTelephonyRMSState(uint64_t *this)
{
  for (; this; this = (uint64_t *)*this)
  {
    uint64_t v1 = this[3];
    if (*(unsigned char *)(v1 + 164) || *(unsigned char *)(v1 + 157))
    {
      uint64_t v2 = *(_DWORD **)(v1 + 192);
      uint64_t v3 = *(void *)(v1 + 200) - (void)v2;
      if (v3)
      {
        unint64_t v4 = v3 >> 2;
        uint64_t v5 = *(_DWORD **)(v1 + 216);
        if (v4 <= 1) {
          unint64_t v4 = 1;
        }
        do
        {
          *v2++ = 0;
          *v5++ = 0;
          --v4;
        }
        while (v4);
      }
      *(_DWORD *)(v1 + 244) = 0;
    }
  }
  return this;
}

void rtaid::DetectorNode::ConstructionSettings::~ConstructionSettings(rtaid::DetectorNode::ConstructionSettings *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }

  std::locale::~locale(this);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 12);
}

void sub_2227E58C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__state<char>::~__state(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 16);
}

void sub_2227E5960(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  }
  unint64_t v7 = a1[4];
  unint64_t v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      unint64_t v22 = (v4 - v5) >> 3;
      char v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        unint64_t v87 = a1 + 3;
        *(void *)&long long v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v25);
        *((void *)&v85 + 1) = v85 + 8 * v22;
        *(void *)&long long v86 = *((void *)&v85 + 1);
        *((void *)&v86 + 1) = v85 + 8 * v26;
        long long v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        uint64_t v27 = a1[2];
        double v29 = (char *)*((void *)&v85 + 1);
        __int16 v28 = (char *)v85;
        double v31 = (char *)*((void *)&v86 + 1);
        __int16 v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28) {
                unint64_t v37 = 1;
              }
              else {
                unint64_t v37 = (v31 - v28) >> 2;
              }
              unint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v37);
              uint64_t v40 = v38;
              double v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v41 = v30 - v28;
              BOOL v35 = v30 == v28;
              __int16 v30 = v29;
              if (!v35)
              {
                __int16 v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v42 = 8 * (v41 >> 3);
                id v43 = v29;
                uint64_t v44 = v28;
                do
                {
                  uint64_t v45 = *(void *)v44;
                  v44 += 8;
                  *(void *)id v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              double v31 = &v38[8 * v39];
              if (v28) {
                operator delete(v28);
              }
              __int16 v28 = v40;
            }
            else
            {
              uint64_t v32 = (v31 - v30) >> 3;
              if (v32 >= -1) {
                unint64_t v33 = v32 + 1;
              }
              else {
                unint64_t v33 = v32 + 2;
              }
              unint64_t v34 = &v30[8 * (v33 >> 1)];
              double v29 = &v34[-(v30 - v28)];
              size_t v36 = v30 - v28;
              BOOL v35 = v30 == v28;
              __int16 v30 = v34;
              if (!v35) {
                memmove(v29, v28, v36);
              }
            }
          }
          uint64_t v46 = *(void *)(v27 - 8);
          v27 -= 8;
          *((void *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(void *)&long long v85 = v28;
        *((void *)&v85 + 1) = v29;
        *(void *)&long long v86 = v30;
        *((void *)&v86 + 1) = v31;
        long long v48 = v85;
        long long v49 = v86;
        *(void *)&long long v85 = *a1;
        uint64_t v47 = (void *)v85;
        *((void *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(void *)&long long v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        uint64_t v5 = (char *)a1[1];
        unint64_t v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(void *)&long long v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      uint64_t v61 = (void *)a1[1];
      unint64_t v4 = (char *)a1[2];
      uint64_t v63 = *v61;
      uint64_t v62 = (char *)(v61 + 1);
      uint64_t v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        uint64_t v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          uint64_t v65 = v64 >> 3;
          BOOL v14 = v64 >> 3 < -1;
          uint64_t v66 = (v64 >> 3) + 2;
          if (v14) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = v65 + 1;
          }
          uint64_t v68 = -(v67 >> 1);
          uint64_t v69 = v67 >> 1;
          id v70 = &v62[-8 * v69];
          int64_t v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            uint64_t v62 = (char *)a1[1];
          }
          unint64_t v4 = &v70[v71];
          unsigned int v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1) {
          unint64_t v77 = 1;
        }
        else {
          unint64_t v77 = (uint64_t)&v4[-*a1] >> 2;
        }
        int v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v77);
        __int16 v52 = &v51[8 * (v77 >> 2)];
        __int16 v54 = &v51[8 * v78];
        uint64_t v79 = (uint64_t *)a1[1];
        unint64_t v4 = v52;
        uint64_t v80 = a1[2] - (void)v79;
        if (v80)
        {
          unint64_t v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v81 = 8 * (v80 >> 3);
          unint64_t v82 = &v51[8 * (v77 >> 2)];
          do
          {
            uint64_t v83 = *v79++;
            *(void *)unint64_t v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        uint64_t v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          unint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      uint64_t v11 = *(void *)v5;
      long long v9 = v5 + 8;
      uint64_t v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        uint64_t v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          uint64_t v13 = v12 >> 3;
          BOOL v14 = v12 >> 3 < -1;
          uint64_t v15 = (v12 >> 3) + 2;
          if (v14) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = v13 + 1;
          }
          uint64_t v17 = -(v16 >> 1);
          uint64_t v18 = v16 >> 1;
          __int16 v19 = &v9[-8 * v18];
          int64_t v20 = v4 - v9;
          if (v4 == v9)
          {
            uint64_t v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            uint64_t v21 = (char *)a1[1];
          }
          unint64_t v4 = &v19[v20];
          unsigned int v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1) {
          unint64_t v50 = 1;
        }
        else {
          unint64_t v50 = (uint64_t)&v4[-*a1] >> 2;
        }
        int v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v50);
        __int16 v52 = &v51[8 * (v50 >> 2)];
        __int16 v54 = &v51[8 * v53];
        unint64_t v55 = (uint64_t *)a1[1];
        unint64_t v4 = v52;
        uint64_t v56 = a1[2] - (void)v55;
        if (v56)
        {
          unint64_t v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v57 = 8 * (v56 >> 3);
          uint64_t v58 = &v51[8 * (v50 >> 2)];
          do
          {
            uint64_t v59 = *v55++;
            *(void *)uint64_t v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(void *)unint64_t v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  unint64_t v73 = *(void *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  long long v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(void *)(v73 + 40) = 0;
  *(void *)(v73 + 48) = 0;
  *(void *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v73 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v73 + 56) = 0;
  *(void *)(v73 + 64) = 0;
  *(void *)(v73 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(void *)(v73 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v76 = *(void *)(a2 + 80);
  *(void *)(v73 + 85) = *(void *)(a2 + 85);
  *(void *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_2227E5DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * ((v3 - v4) >> 3) - 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          long long v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        uint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        __int16 v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)__int16 v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ADAMServerDelegate * {__weak}>>(v16);
      __int16 v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        char v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)char v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v19, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    __int16 v19 = 0;
    size_t v20 = 0;
    uint64_t v21 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v16, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v18);
    unint64_t v5 = v16;
    size_t v4 = v17;
  }
  else
  {
    size_t v4 = 0;
    unint64_t v5 = 0;
    unsigned int v3 = 0;
    unint64_t v16 = 0;
    size_t v17 = 0;
    uint64_t v18 = 0;
  }
  int v6 = SHIBYTE(v21);
  uint64_t v7 = v19;
  if (v21 >= 0) {
    size_t v8 = HIBYTE(v21);
  }
  else {
    size_t v8 = v20;
  }
  if (v21 >= 0) {
    uint64_t v9 = &v19;
  }
  else {
    uint64_t v9 = (void **)v19;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v10 = v3;
  }
  else {
    size_t v10 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    uint64_t v11 = (void **)&v16;
  }
  else {
    uint64_t v11 = v5;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  unsigned int v13 = memcmp(v9, v11, v12);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v7);
LABEL_24:
  unsigned int v14 = v10 < v8;
  if (v8 < v10) {
    unsigned int v14 = -1;
  }
  if (v13) {
    return v13;
  }
  else {
    return v14;
  }
}

void sub_2227E638C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    __n128 result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    void *v7 = result;
    uint64_t v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v7 = v10;
    uint64_t v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)uint64_t v7 = 0;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 17);
}

void sub_2227E6490(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  size_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      int v6 = v3;
      unsigned int v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned int v3 = a3;
  std::__split_buffer<std::string>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    char v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 14);
}

void sub_2227E663C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x223C9D800);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x223C9D800);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    uint64_t v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 15);
}

void sub_2227E684C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::__split_buffer<std::string>::pointer end = this->__end_;
  unsigned int marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    uint64_t v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  uint64_t v9 = (v8 - 36);
  if (v9 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) != 0) {
    goto LABEL_4;
  }
  if (v9 == 5)
  {
    if (!this->__open_count_) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if ((v8 - 123) >= 2)
    {
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
LABEL_32:
      unsigned int v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
  }
LABEL_4:
  char v10 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_21:
    int v11 = *a2;
LABEL_22:
    if (v11 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v11 = *a2;
  if (v11 != 92) {
    goto LABEL_22;
  }
  int v12 = *v10;
  char v13 = *v10;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((this->__flags_ & 0x1F0) == 0x40)
    {
      uint64_t v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, a2 + 1, a3, 0);
    }
    else
    {
      BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
      uint64_t v17 = 2;
      if (!v16) {
        uint64_t v17 = 0;
      }
      uint64_t v15 = &a2[v17];
    }
    if (v15 != a2)
    {
LABEL_25:
      if (v15 == a2 && v15 != a3)
      {
        int v18 = *a2;
        if (v18 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
          goto LABEL_32;
        }
        if (v18 != 40)
        {
          if (v18 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int v19 = this->__marked_count_;
        ++this->__open_count_;
        size_t v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this, a2 + 1, a3);
        if (v20 == a3 || (uint64_t v21 = v20, *v20 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v19);
        --this->__open_count_;
        uint64_t v15 = v21 + 1;
      }
      unsigned int v14 = (unsigned __int8 *)v15;
      if (v15 != a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    goto LABEL_21;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
  unsigned int v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v22 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v14, (unsigned __int8 *)a3, end, marked_count + 1, v22);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 6);
}

void sub_2227E6CFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 8);
}

void sub_2227E6DD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 7);
}

void sub_2227E6E28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 5);
}

void sub_2227E73B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; ; ++i)
  {
    int v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93) {
      break;
    }
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = (char)*a2;
  if (v7 > 97)
  {
    if (v7 > 114)
    {
      if (v7 != 115)
      {
        if (v7 == 119)
        {
          *(_DWORD *)(a5 + 160) |= 0x500u;
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
          return a2 + 1;
        }
        goto LABEL_27;
      }
      int v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v7 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      if (v7 != 100) {
        goto LABEL_27;
      }
      int v9 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v9;
    return a2 + 1;
  }
  if (v7 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 1) = 0;
      return a2 + 1;
    }
    if (v7 == 68)
    {
      int v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_24:
      *(_DWORD *)(a5 + 164) = v8;
      return a2 + 1;
    }
    goto LABEL_27;
  }
  if (v7 == 83)
  {
    int v8 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_24;
  }
  if (v7 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(unsigned char *)(a5 + 169))
    {
      char v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a5 + 24) + 40))(*(void *)(a5 + 24), 95);
      char v11 = v10;
      char v13 = *(unsigned char **)(a5 + 72);
      unint64_t v12 = *(void *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *char v13 = v10;
        uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_62:
        *(void *)(a5 + 72) = v14;
        return a2 + 1;
      }
      unint64_t v24 = *(void *)(a5 + 64);
      unint64_t v25 = &v13[-v24];
      uint64_t v26 = (uint64_t)&v13[-v24 + 1];
      if (v26 >= 0)
      {
        unint64_t v27 = v12 - v24;
        if (2 * v27 > v26) {
          uint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          double v29 = operator new(v28);
        }
        else {
          double v29 = 0;
        }
        double v31 = &v29[v28];
        v25[(void)v29] = v11;
        uint64_t v14 = (uint64_t)&v25[(void)v29 + 1];
        if (v13 == (unsigned char *)v24)
        {
          double v29 = &v25[(void)v29];
        }
        else
        {
          uint64_t v32 = &v13[~v24];
          do
          {
            char v33 = *--v13;
            (v32--)[(void)v29] = v33;
          }
          while (v13 != (unsigned char *)v24);
          char v13 = *(unsigned char **)(a5 + 64);
        }
        *(void *)(a5 + 64) = v29;
        *(void *)(a5 + 72) = v14;
        *(void *)(a5 + 80) = v31;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_62;
      }
LABEL_87:
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *(unsigned char **)(a5 + 72);
    unint64_t v16 = *(void *)(a5 + 80);
    if (*(unsigned char *)(a5 + 170))
    {
      if ((unint64_t)v17 >= v16)
      {
        unint64_t v18 = *(void *)(a5 + 64);
        unsigned int v19 = &v17[-v18];
        uint64_t v20 = (uint64_t)&v17[-v18 + 1];
        if (v20 < 0) {
          goto LABEL_87;
        }
        unint64_t v21 = v16 - v18;
        if (2 * v21 > v20) {
          uint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v22 = v20;
        }
        if (v22) {
          char v23 = operator new(v22);
        }
        else {
          char v23 = 0;
        }
        uint64_t v39 = &v19[(void)v23];
        uint64_t v40 = (char *)v23 + v22;
        v19[(void)v23] = 95;
        uint64_t v30 = (uint64_t)&v19[(void)v23 + 1];
        if (v17 != (unsigned char *)v18)
        {
          uint64_t v41 = &v17[~v18];
          do
          {
            char v42 = *--v17;
            (v41--)[(void)v23] = v42;
          }
          while (v17 != (unsigned char *)v18);
LABEL_80:
          uint64_t v17 = *(unsigned char **)(a5 + 64);
          goto LABEL_82;
        }
        goto LABEL_81;
      }
    }
    else if ((unint64_t)v17 >= v16)
    {
      unint64_t v34 = *(void *)(a5 + 64);
      BOOL v35 = &v17[-v34];
      uint64_t v36 = (uint64_t)&v17[-v34 + 1];
      if (v36 < 0) {
        goto LABEL_87;
      }
      unint64_t v37 = v16 - v34;
      if (2 * v37 > v36) {
        uint64_t v36 = 2 * v37;
      }
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v38 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v38 = v36;
      }
      if (v38) {
        char v23 = operator new(v38);
      }
      else {
        char v23 = 0;
      }
      uint64_t v39 = &v35[(void)v23];
      uint64_t v40 = (char *)v23 + v38;
      v35[(void)v23] = 95;
      uint64_t v30 = (uint64_t)&v35[(void)v23 + 1];
      if (v17 != (unsigned char *)v34)
      {
        id v43 = &v17[~v34];
        do
        {
          char v44 = *--v17;
          (v43--)[(void)v23] = v44;
        }
        while (v17 != (unsigned char *)v34);
        goto LABEL_80;
      }
LABEL_81:
      char v23 = v39;
LABEL_82:
      *(void *)(a5 + 64) = v23;
      *(void *)(a5 + 72) = v30;
      *(void *)(a5 + 80) = v40;
      if (v17) {
        operator delete(v17);
      }
      goto LABEL_84;
    }
    *uint64_t v17 = 95;
    uint64_t v30 = (uint64_t)(v17 + 1);
LABEL_84:
    *(void *)(a5 + 72) = v30;
    return a2 + 1;
  }
LABEL_27:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_80:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  std::basic_regex<char>::value_type v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 8;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_25;
          }
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 12;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v6;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      std::basic_regex<char>::value_type v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97) {
      goto LABEL_25;
    }
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    std::basic_regex<char>::value_type v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_16;
  }
LABEL_25:
  if ((v6 & 0xF8) != 0x30) {
    goto LABEL_80;
  }
  std::basic_regex<char>::value_type v8 = v5 - 48;
  int v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30) {
      goto LABEL_49;
    }
    std::basic_regex<char>::value_type v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      char v10 = a2[2];
      int v11 = v10 & 0xF8;
      std::basic_regex<char>::value_type v12 = v10 + 8 * v8 - 48;
      if (v11 == 48) {
        int v9 = a2 + 3;
      }
      else {
        int v9 = a2 + 2;
      }
      if (v11 == 48) {
        std::basic_regex<char>::value_type v8 = v12;
      }
      goto LABEL_49;
    }
  }
  int v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((unsigned char *)a4 + 23) = 1;
    }
    *(unsigned char *)a4 = v8;
    *((unsigned char *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        unint64_t v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *unint64_t v25 = v6;
        unint64_t v24 = v25 + 1;
        unint64_t v37 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--unint64_t v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        unint64_t v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *unint64_t v25 = v6;
        unint64_t v24 = v25 + 1;
        uint64_t v39 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--unint64_t v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *std::basic_regex<char>::value_type v8 = v6;
    unint64_t v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioServiceType>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  unint64_t v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *unint64_t v25 = v6;
  unint64_t v24 = v25 + 1;
  size_t v28 = *(char **)(a1 + 112);
  unint64_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--unint64_t v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  unint64_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    __int16 v6 = __p;
  }
  else {
    __int16 v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2227E7E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 9);
}

void sub_2227E7F18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 3);
}

void sub_2227E7F70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_2227E80F8(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  MEMORY[0x223C9D800](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26D4EC020;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x223C9D800);
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26D4EC020;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26D4EBFF0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x223C9D800);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26D4EBFF0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            int v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                int v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6) {
                  goto LABEL_27;
                }
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v9 = v4[1];
          char v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) {
            goto LABEL_32;
          }
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v10 = -87;
LABEL_32:
          if (v4 + 2 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v11 = v4[2];
          char v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
            goto LABEL_37;
          }
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v12 = -87;
LABEL_37:
          std::basic_regex<char>::value_type v13 = v12 + v11 + 16 * (v10 + v9);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            *(unsigned char *)a4 = v13;
            *((unsigned char *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      std::basic_regex<char>::value_type v6 = 0;
      goto LABEL_67;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        std::basic_regex<char>::value_type v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          *(unsigned char *)a4 = v5;
          *((unsigned char *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3) {
      goto LABEL_89;
    }
    unsigned __int8 v14 = v4[1];
    if (((v14 & 0xDF) - 65) > 0x19u) {
      goto LABEL_89;
    }
    std::basic_regex<char>::value_type v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v15;
      *((unsigned char *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_2227E8B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 1);
}

void sub_2227E8BE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 2);
}

void sub_2227E8C40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    std::basic_regex<char>::value_type v6 = __p;
  }
  else {
    std::basic_regex<char>::value_type v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2227E8D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a1;
      }
      else {
        uint64_t v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2227E8E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 4);
}

void sub_2227E9078(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (unint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        __n128 result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (__n128 result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    std::__split_buffer<std::string>::pointer v4 = (unsigned __int8 **)(v3 + 24 * v2);
    unsigned int v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26D4EC0B0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x223C9D800);
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26D4EC0B0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26D4EC080;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x223C9D800);
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26D4EC080;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = (char *)a2;
  if (a2 != a3)
  {
    std::__split_buffer<std::string>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    int v9 = a2 + 1;
    int v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46) {
        operator new();
      }
      int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92) {
        return v3;
      }
      int v12 = *v9;
      if (v12 == 40)
      {
        uint64_t v13 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v14 = a1->__marked_count_;
        do
        {
          std::basic_regex<char>::value_type v15 = (unsigned __int8 *)v13;
          uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v13, a3);
        }
        while ((unsigned __int8 *)v13 != v15);
        if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        int v11 = (char *)(v15 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v14);
      }
      else
      {
        BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v12);
        uint64_t v17 = 2;
        if (!v16) {
          uint64_t v17 = 0;
        }
        int v11 = &v3[v17];
      }
    }
    int v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3) {
        return (char *)a3;
      }
      size_t v18 = a1->__marked_count_ + 1;
      int v19 = *v9;
      if (v19 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v19 != 92 || v9[1] != 123) {
        return (char *)v9;
      }
      int v29 = 0;
      unint64_t v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v29);
      if (v20 == v9 + 2) {
LABEL_45:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v20 != a3)
      {
        unint64_t v21 = v20 + 1;
        int v22 = *v20;
        if (v22 == 44)
        {
          int v28 = -1;
          uint64_t v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v20 + 1, a3, &v28);
          if (v23 != a3 && v23 + 1 != a3 && *v23 == 92 && v23[1] == 125)
          {
            size_t v25 = v28;
            size_t v24 = v29;
            if (v28 == -1)
            {
              size_t v25 = -1;
            }
            else if (v28 < v29)
            {
              goto LABEL_45;
            }
            uint64_t v3 = (char *)&v23[2 * (v23[1] == 125)];
            uint64_t v26 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v26, v24, v25, end, marked_count + 1, v18, 1);
            return v3;
          }
        }
        else if (v21 != a3 && v22 == 92 && *v21 == 125)
        {
          uint64_t v3 = (char *)(v20 + 2);
          size_t v24 = v29;
          uint64_t v26 = a1;
          size_t v25 = v29;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x223C9D440](exception, 11);
}

void sub_2227E9BD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  memset(&v23, 0, 17);
  char v24 = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  uint64_t v20 = v5;
  uint64_t v21 = v5;
  char v22 = 0;
  std::vector<std::csub_match>::value_type v23 = v19;
  uint64_t v25 = v5;
  char v24 = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::csub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::csub_match>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = *(_DWORD *)(a1 + 80);
  uint64_t v12 = *(void *)(a2 + 32);
  unsigned int v13 = 2;
  uint64_t v14 = 1;
  do
  {
    std::basic_regex<char>::value_type v15 = &begin[v14];
    uint64_t v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    uint64_t v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:

  operator delete(begin);
}

void sub_2227E9FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26D4EBF78;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26D4EBF78;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  std::vector<std::csub_match>::size_type v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26D4EBF48;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x223C9D800);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26D4EBF48;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9D800);
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  int v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (__n128 result = *v5; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void rtaid::Detector::GetNodeIDs(rtaid::Detector *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    if (v4 >> 62) {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    int v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(v4);
    unint64_t v7 = &v5[4 * v6];
    *(void *)this = v5;
    *((void *)this + 1) = v5;
    *((void *)this + 2) = v7;
  }
  else
  {
    unint64_t v7 = 0;
    int v5 = 0;
  }
  uint64_t v8 = *(uint64_t **)(a2 + 24);
  if (v8)
  {
    int v9 = v5;
    do
    {
      if (v9 >= v7)
      {
        uint64_t v11 = (v9 - v5) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
        }
        if ((v7 - v5) >> 1 > v12) {
          unint64_t v12 = (v7 - v5) >> 1;
        }
        if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<rtaid::TelephonyResetDetector>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        std::basic_regex<char>::value_type v15 = (char *)(v13 + 4 * v11);
        *(_DWORD *)std::basic_regex<char>::value_type v15 = *((_DWORD *)v8 + 4);
        int v10 = v15 + 4;
        while (v9 != v5)
        {
          int v16 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        unint64_t v7 = (char *)(v13 + 4 * v14);
        *(void *)this = v15;
        *((void *)this + 1) = v10;
        *((void *)this + 2) = v7;
        if (v5) {
          operator delete(v5);
        }
        int v5 = v15;
      }
      else
      {
        *(_DWORD *)int v9 = *((_DWORD *)v8 + 4);
        int v10 = v9 + 4;
      }
      *((void *)this + 1) = v10;
      uint64_t v8 = (uint64_t *)*v8;
      int v9 = v10;
    }
    while (v8);
  }
}

void sub_2227EA644(_Unwind_Exception *exception_object)
{
  uint8x8_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ADAM::SensorKitWriter::~SensorKitWriter(ADAM::SensorKitWriter *this)
{
  ADAM::SensorKitWriter::~SensorKitWriter(this);

  JUMPOUT(0x223C9D800);
}

{
  NSObject *v2;
  id v3;
  void *v4;
  id *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  ADAM::SensorKitWriter *v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D4EC2C0;
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    unsigned int v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v2) {
      goto LABEL_12;
    }
  }
  else
  {
    unsigned int v2 = MEMORY[0x263EF8438];
    uint8x8_t v3 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v4 = (void *)((char *)this + 16);
    if (*((char *)this + 39) < 0) {
      unint64_t v4 = (void *)*v4;
    }
    uint64_t v6 = 136315906;
    unint64_t v7 = "SensorKitWriter.mm";
    uint64_t v8 = 1024;
    int v9 = 239;
    int v10 = 2080;
    uint64_t v11 = v4;
    unint64_t v12 = 2048;
    unint64_t v13 = this;
    _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SensorKit Writer [%s](%p) destroyed...", (uint8_t *)&v6, 0x26u);
  }

LABEL_12:
  std::mutex::~mutex((std::mutex *)((char *)this + 96));
  int v5 = (id *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v5) {
    std::default_delete<ADAM::SensorKitWriter::SensorKitWriterInternalState>::operator()[abi:ne180100](v5);
  }
  ADAM::Writer::~Writer(this);
}

void std::default_delete<ADAM::SensorKitWriter::SensorKitWriterInternalState>::operator()[abi:ne180100](id *a1)
{
  JUMPOUT(0x223C9D800);
}

uint64_t ADAM::SensorKitWriter::isEnabled(ADAM::SensorKitWriter *this)
{
  uint64_t v2 = *((void *)this + 11);
  uint8x8_t v3 = *(void **)(v2 + 24);
  if (v3)
  {
    if ([v3 isMonitoring]) {
      return 1;
    }
    uint64_t v2 = *((void *)this + 11);
  }
  uint64_t result = *(void *)(v2 + 32);
  if (result)
  {
    return [(id)result isMonitoring];
  }
  return result;
}

uint64_t ADAM::SensorKitWriter::write(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v6 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v6) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x263EF8438];
    id v7 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = a2[3];
    int v9 = *(_DWORD *)(a3 + 64);
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v11 = *(void *)(a3 + 72);
    *(_DWORD *)buf = 136316418;
    uint64_t v92 = "SensorKitWriter.mm";
    __int16 v93 = 1024;
    int v94 = 249;
    __int16 v95 = 1024;
    *(_DWORD *)int64_t v96 = v8;
    *(_WORD *)&v96[4] = 1024;
    *(_DWORD *)&v96[6] = v9;
    *(_WORD *)&v96[10] = 2048;
    *(void *)&v96[12] = v10;
    *(_WORD *)&v96[20] = 2048;
    *(void *)&v96[22] = v11;
    _os_log_impl(&dword_2227C1000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d size: %u, frames: %u mSelf: %p, last batch: %lld", buf, 0x32u);
  }

LABEL_10:
  if (ADAM::isSpeechAnalysisEnabled(void)::once != -1) {
    dispatch_once(&ADAM::isSpeechAnalysisEnabled(void)::once, &__block_literal_global_32);
  }
  if (ADAM::isSpeechAnalysisEnabled(void)::ans)
  {
    uint64_t v12 = *(void *)(a1 + 88);
    unint64_t v13 = *(void **)(v12 + 24);
    if (v13)
    {
      if ([v13 isMonitoring]) {
        goto LABEL_18;
      }
      uint64_t v12 = *(void *)(a1 + 88);
    }
    uint64_t v14 = *(void **)(v12 + 32);
    if (v14 && [v14 isMonitoring])
    {
LABEL_18:
      context = (void *)MEMORY[0x223C9DB40]();
      id v15 = *(id *)(*(void *)(a1 + 88) + 8);
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (ADAM::ADAMLogScope(void)::scope)
      {
        int v16 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v16) {
          goto LABEL_28;
        }
      }
      else
      {
        int v16 = MEMORY[0x263EF8438];
        id v18 = MEMORY[0x263EF8438];
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = *(_DWORD *)(a3 + 64);
        *(_DWORD *)buf = 136315650;
        uint64_t v92 = "SensorKitWriter.mm";
        __int16 v93 = 1024;
        int v94 = 111;
        __int16 v95 = 1024;
        *(_DWORD *)int64_t v96 = v19;
        _os_log_impl(&dword_2227C1000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allocating AVAudioPCMBuffer of %d frames", buf, 0x18u);
      }

LABEL_28:
      uint64_t v20 = (void *)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v15 frameCapacity:*(unsigned int *)(a3 + 64)];
      if (*a2)
      {
        uint64_t v21 = 0;
        unint64_t v22 = 0;
        do
        {
          memcpy(*(void **)([v20 mutableAudioBufferList] + v21 * 4 + 16), *(const void **)&a2[v21 + 4], a2[v21 + 3]);
          unsigned int v23 = a2[v21 + 3];
          *(_DWORD *)([v20 mutableAudioBufferList] + v21 * 4 + 12) = v23;
          ++v22;
          v21 += 4;
        }
        while (v22 < *a2);
      }
      [v20 setFrameLength:[v20 frameCapacity]];

      if (!v20)
      {
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        uint64_t v17 = 1684108321;
        if (ADAM::ADAMLogScope(void)::scope)
        {
          unint64_t v27 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v27) {
            goto LABEL_141;
          }
        }
        else
        {
          unint64_t v27 = MEMORY[0x263EF8438];
          id v49 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v92 = "SensorKitWriter.mm";
          __int16 v93 = 1024;
          int v94 = 259;
          _os_log_impl(&dword_2227C1000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create a AVAudioPCMBuffer", buf, 0x12u);
        }

        goto LABEL_141;
      }
      if (*(char *)(a1 + 39) < 0)
      {
        uint64_t v26 = *(unsigned char **)(a1 + 16);
        unint64_t v25 = *(void *)(a1 + 24);
      }
      else
      {
        unint64_t v25 = *(unsigned __int8 *)(a1 + 39);
        uint64_t v26 = (unsigned char *)(a1 + 16);
      }
      if (v25 >= 0xF) {
        unint64_t v25 = 15;
      }
      if (v25)
      {
        int v28 = &v26[v25];
        int v29 = v26;
        uint64_t v30 = v28;
        do
        {
          if (*v29 == 84)
          {
            uint64_t v31 = 1u;
            while (v31 != 15)
            {
              if (&v29[v31] == v28) {
                goto LABEL_53;
              }
              int v32 = v29[v31];
              int v33 = aTelephonyuplin[v31++];
              if (v32 != v33) {
                goto LABEL_45;
              }
            }
            uint64_t v30 = v29;
          }
LABEL_45:
          ++v29;
        }
        while (v29 != v28);
LABEL_53:
        if (v30 != v28 && v30 == v26)
        {
          unsigned int v34 = [v20 frameLength];
          uint64_t v35 = [v20 format];
          [v35 sampleRate];
          double v37 = v36;

          double v38 = (double)v34 / v37;
          if (v38 <= 4.0)
          {
            {
              ADAM::get_log(void)::adam_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "adam");
            }
            uint64_t v61 = ADAM::get_log(void)::adam_os_log;
            uint64_t v17 = 0;
            if (!os_log_type_enabled((os_log_t)ADAM::get_log(void)::adam_os_log, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_141;
            }
            *(_DWORD *)buf = 136316418;
            uint64_t v92 = "SensorKitWriter.mm";
            __int16 v93 = 1024;
            int v94 = 269;
            __int16 v95 = 1040;
            *(_DWORD *)int64_t v96 = 21;
            *(_WORD *)&v96[4] = 2080;
            *(void *)&v96[6] = "ADAM::SensorKitWriter]";
            *(_WORD *)&v96[14] = 2048;
            *(void *)&v96[16] = a1;
            *(_WORD *)&v96[24] = 2048;
            *(double *)&v96[26] = v38;
            _os_log_impl(&dword_2227C1000, v61, OS_LOG_TYPE_DEFAULT, "[%s:%-5d %.*s:%p] not sending telephony audio to Speech and SoundAnalysis due to length of audio : %f", buf, 0x36u);
            goto LABEL_140;
          }
        }
      }
      ADAM::Parameters::instance(v24);
      if (!ADAM::Parameters::GetParamValue<BOOL>(0xFu))
      {
LABEL_136:
        std::mutex::lock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
        *(unsigned char *)(a1 + 81) = 1;
        std::mutex::unlock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
        uint64_t v78 = *(void *)(a1 + 88);
        uint64_t v79 = *(void **)(v78 + 24);
        if (v79)
        {
          [v79 write:v20 withMetadata:a3];
          uint64_t v78 = *(void *)(a1 + 88);
        }
        uint64_t v80 = *(void **)(v78 + 32);
        if (v80) {
          [v80 write:v20 withMetadata:a3];
        }
LABEL_140:
        uint64_t v17 = 0;
LABEL_141:

        return v17;
      }
      uint64_t v39 = *(void **)(*(void *)(a1 + 88) + 8);
      if (*(char *)(a1 + 39) >= 0) {
        size_t v40 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        size_t v40 = *(void *)(a1 + 24);
      }
      uint64_t v41 = &v87;
      std::string::basic_string[abi:ne180100]((uint64_t)&v87, v40 + 1);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v41 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if (v40)
      {
        if (*(char *)(a1 + 39) >= 0) {
          char v42 = (const void *)(a1 + 16);
        }
        else {
          char v42 = *(const void **)(a1 + 16);
        }
        memmove(v41, v42, v40);
      }
      *(_WORD *)((char *)&v41->__r_.__value_.__l.__data_ + v40) = 95;
      std::to_string(&v86, *(_DWORD *)(*(void *)(a1 + 88) + 40));
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v43 = &v86;
      }
      else {
        id v43 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v86.__r_.__value_.__l.__size_;
      }
      uint64_t v45 = std::string::append(&v87, (const std::string::value_type *)v43, size);
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      int64_t v89 = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::vector<std::csub_match> __p = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if (v89 >= 0) {
        uint64_t v47 = __p;
      }
      else {
        uint64_t v47 = (void **)__p[0];
      }
      id v84 = v39;
      if (ADAM::isProcessCorespeechd(void)::once != -1) {
        dispatch_once(&ADAM::isProcessCorespeechd(void)::once, &__block_literal_global_50);
      }
      if (ADAM::isProcessCorespeechd(void)::isCorespeechd)
      {
        uint64_t v48 = [[NSString alloc] initWithFormat:@"/private/var/mobile/Documents/Logs/CoreSpeech/ADAM-%s.caf", v47];
      }
      else
      {
        id v50 = [NSString alloc];
        int v51 = NSTemporaryDirectory();
        uint64_t v48 = [v50 initWithFormat:@"%@ADAM-%s.caf", v51, v47];
      }
      uint64_t v83 = (void *)[objc_alloc(NSURL) initWithString:v48];
      __int16 v52 = (void *)MEMORY[0x263EFF9A0];
      unint64_t v82 = (void *)v48;
      uint64_t v53 = [v84 settings];
      __int16 v54 = [v52 dictionaryWithDictionary:v53];

      [v54 setObject:&unk_26D4EEC50 forKey:*MEMORY[0x263EF9038]];
      id v55 = objc_alloc(MEMORY[0x263EF9380]);
      uint64_t v56 = [v84 commonFormat];
      id v90 = 0;
      uint64_t v57 = (void *)[v55 initForWriting:v83 settings:v54 commonFormat:v56 interleaved:1 error:&v90];
      id v58 = v90;
      if (v58)
      {
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          id v59 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v59) {
            goto LABEL_108;
          }
        }
        else
        {
          id v59 = (id)MEMORY[0x263EF8438];
          id v62 = MEMORY[0x263EF8438];
        }
        uint64_t v63 = v59;
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
        {
          uint64_t v64 = [NSNumber numberWithBool:[v84 isInterleaved]];
          *(_DWORD *)buf = 136316162;
          uint64_t v92 = "SensorKitWriter.mm";
          __int16 v93 = 1024;
          int v94 = 73;
          __int16 v95 = 2112;
          *(void *)int64_t v96 = v58;
          *(_WORD *)&v96[8] = 2112;
          *(void *)&v96[10] = v54;
          *(_WORD *)&v96[18] = 2112;
          *(void *)&v96[20] = v64;
          _os_log_impl(&dword_2227C1000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to initialize output file: %@, settings: %@, format interleaved: %@", buf, 0x30u);
        }
        id v59 = 0;
LABEL_108:

        if (SHIBYTE(v89) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        ++*(_DWORD *)(*(void *)(a1 + 88) + 40);
        id v68 = v59;
        id v69 = v20;
        if (!v68) {
          goto LABEL_135;
        }
        __p[0] = 0;
        [v68 writeFromBuffer:v69 error:__p];
        id v70 = __p[0];
        if (v70)
        {
          if (ADAM::ADAMLogScope(void)::once != -1) {
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
          }
          if (ADAM::ADAMLogScope(void)::scope)
          {
            int64_t v71 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v71) {
              goto LABEL_134;
            }
          }
          else
          {
            int64_t v71 = MEMORY[0x263EF8438];
            id v72 = MEMORY[0x263EF8438];
          }
          if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
          {
LABEL_133:

LABEL_134:
LABEL_135:

            goto LABEL_136;
          }
          *(_DWORD *)buf = 136315650;
          uint64_t v92 = "SensorKitWriter.mm";
          __int16 v93 = 1024;
          int v94 = 99;
          __int16 v95 = 2112;
          *(void *)int64_t v96 = v70;
          unint64_t v73 = "%25s:%-5d failed to write audio buffer: %@";
          long long v74 = v71;
          os_log_type_t v75 = OS_LOG_TYPE_ERROR;
          uint32_t v76 = 28;
        }
        else
        {
          if (ADAM::ADAMLogScope(void)::once != -1) {
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
          }
          if (ADAM::ADAMLogScope(void)::scope)
          {
            int64_t v71 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v71) {
              goto LABEL_134;
            }
          }
          else
          {
            int64_t v71 = MEMORY[0x263EF8438];
            id v77 = MEMORY[0x263EF8438];
          }
          if (!os_log_type_enabled(v71, OS_LOG_TYPE_INFO)) {
            goto LABEL_133;
          }
          *(_DWORD *)buf = 136315906;
          uint64_t v92 = "SensorKitWriter.mm";
          __int16 v93 = 1024;
          int v94 = 103;
          __int16 v95 = 2112;
          *(void *)int64_t v96 = v69;
          *(_WORD *)&v96[8] = 2112;
          *(void *)&v96[10] = v68;
          unint64_t v73 = "%25s:%-5d Wrote audio buffer %@ to file %@";
          long long v74 = v71;
          os_log_type_t v75 = OS_LOG_TYPE_INFO;
          uint32_t v76 = 38;
        }
        _os_log_impl(&dword_2227C1000, v74, v75, v73, buf, v76);
        goto LABEL_133;
      }
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (ADAM::ADAMLogScope(void)::scope)
      {
        id v60 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v60)
        {
LABEL_107:
          id v59 = v57;
          goto LABEL_108;
        }
      }
      else
      {
        id v60 = (id)MEMORY[0x263EF8438];
        id v65 = MEMORY[0x263EF8438];
      }
      uint64_t v66 = v60;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
      {
        uint64_t v67 = [NSNumber numberWithBool:[v84 isInterleaved]];
        *(_DWORD *)buf = 136315906;
        uint64_t v92 = "SensorKitWriter.mm";
        __int16 v93 = 1024;
        int v94 = 79;
        __int16 v95 = 2112;
        *(void *)int64_t v96 = v82;
        *(_WORD *)&v96[8] = 2112;
        *(void *)&v96[10] = v67;
        _os_log_impl(&dword_2227C1000, v66, OS_LOG_TYPE_INFO, "%25s:%-5d Created output file: %@, format interleaved: %@", buf, 0x26u);
      }
      goto LABEL_107;
    }
  }
  return 0;
}

void sub_2227EB524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }

  _Unwind_Resume(a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void ___ZN4ADAM15SensorKitWriterC2EyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERK27AudioStreamBasicDescription_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v5 = MEMORY[0x263EF8438];
    id v6 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(v4 + 72);
    uint64_t v8 = *(void *)(*(void *)(v4 + 88) + 32);
    int v13 = 136316418;
    uint64_t v14 = "SensorKitWriter.mm";
    __int16 v15 = 1024;
    int v16 = 183;
    __int16 v17 = 2112;
    id v18 = v3;
    __int16 v19 = 2048;
    uint64_t v20 = v7;
    __int16 v21 = 2048;
    uint64_t v22 = v4;
    __int16 v23 = 2048;
    uint64_t v24 = v8;
    _os_log_impl(&dword_2227C1000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SoundAnalysis writer completed with err: %@ mSelf: %p this: %p, speech writer: %p", (uint8_t *)&v13, 0x3Au);
  }

LABEL_10:
  int v9 = *(void **)(*(void *)(v4 + 88) + 32);
  if (v9 && ![v9 isComplete]) {
    goto LABEL_24;
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v10 = MEMORY[0x263EF8438];
    id v11 = MEMORY[0x263EF8438];
    goto LABEL_18;
  }
  uint64_t v10 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v10)
  {
LABEL_18:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315394;
      uint64_t v14 = "SensorKitWriter.mm";
      __int16 v15 = 1024;
      int v16 = 188;
      _os_log_impl(&dword_2227C1000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d * Sound Analysis completion callback terminating SK writer", (uint8_t *)&v13, 0x12u);
    }
  }
  std::mutex::lock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
  *(unsigned char *)(v4 + 81) = 0;
  uint64_t v12 = *(void *)(v4 + 72);
  if (v12)
  {
    *(void *)(v4 + 72) = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
  }
  std::mutex::unlock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
LABEL_24:
}

void sub_2227EB92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN4ADAM15SensorKitWriterC2EyRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERK27AudioStreamBasicDescription_block_invoke_6(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v5 = MEMORY[0x263EF8438];
    id v6 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(v4 + 72);
    uint64_t v8 = *(void *)(*(void *)(v4 + 88) + 24);
    int v13 = 136316418;
    uint64_t v14 = "SensorKitWriter.mm";
    __int16 v15 = 1024;
    int v16 = 210;
    __int16 v17 = 2112;
    id v18 = v3;
    __int16 v19 = 2048;
    uint64_t v20 = v7;
    __int16 v21 = 2048;
    uint64_t v22 = v4;
    __int16 v23 = 2048;
    uint64_t v24 = v8;
    _os_log_impl(&dword_2227C1000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Speech Analysis writer completed: %@ mSelf: %p, this: %p, speech writer: %p", (uint8_t *)&v13, 0x3Au);
  }

LABEL_10:
  int v9 = *(void **)(*(void *)(v4 + 88) + 24);
  if (v9 && ![v9 isComplete]) {
    goto LABEL_24;
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v10 = MEMORY[0x263EF8438];
    id v11 = MEMORY[0x263EF8438];
    goto LABEL_18;
  }
  uint64_t v10 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v10)
  {
LABEL_18:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315394;
      uint64_t v14 = "SensorKitWriter.mm";
      __int16 v15 = 1024;
      int v16 = 215;
      _os_log_impl(&dword_2227C1000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d * Speech Analysis completion callback terminating SK writer", (uint8_t *)&v13, 0x12u);
    }
  }
  std::mutex::lock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
  *(unsigned char *)(v4 + 81) = 0;
  uint64_t v12 = *(void *)(v4 + 72);
  if (v12)
  {
    *(void *)(v4 + 72) = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
  }
  std::mutex::unlock(&ADAM::Writer::getAsyncMutex(void)::sAsyncMutex);
LABEL_24:
}

void sub_2227EBBB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t rtaid::get_log(rtaid *this)
{
  unint64_t v1 = 0x26AB1A000uLL;
  {
    unint64_t v1 = 0x26AB1A000;
    if (v3)
    {
      rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      unint64_t v1 = 0x26AB1A000;
    }
  }
  return *(void *)(v1 + 2216);
}

void sub_2227EC13C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227EC300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN42AudioIssueDetectorManagerCallStateReporter17InternalCallStateC2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [RTAIDCallObserver alloc];
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  v5[2] = ___ZN42AudioIssueDetectorManagerCallStateReporter17InternalCallStateC2Ev_block_invoke_2;
  v5[3] = &__block_descriptor_40_e8_v12__0B8l;
  v5[4] = v1;
  uint64_t v3 = [(RTAIDCallObserver *)v2 initWithCallReporterBlock:v5];
  uint64_t v4 = *(void **)(v1 + 8);
  *(void *)(v1 + 8) = v3;
}

uint64_t ___ZN42AudioIssueDetectorManagerCallStateReporter17InternalCallStateC2Ev_block_invoke_2(uint64_t result, char a2)
{
  **(unsigned char **)(result + 32) = a2;
  return result;
}

uint64_t *std::unique_ptr<AudioIssueDetectorManagerCallStateReporter::InternalCallState>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {

    JUMPOUT(0x223C9D800);
  }
  return result;
}

void sub_2227EC73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227ECA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227ECBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227ED02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227ED218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227ED4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227ED7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227EDAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227EDE28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227EE0A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227EE4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_2227EE9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

double ADAM::Analyzer::PCMBuffer::hardReset(ADAM::Analyzer::PCMBuffer *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v3 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = MEMORY[0x263EF8438];
    id v4 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 23);
    int v8 = 136315650;
    int v9 = "PCMBuffer.cpp";
    __int16 v10 = 1024;
    int v11 = 187;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    _os_log_impl(&dword_2227C1000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d hard reset pcm buffer for session %llx", (uint8_t *)&v8, 0x1Cu);
  }

LABEL_10:
  uint64_t v6 = *((void *)this + 15);
  *((unsigned char *)this + 112) = 0;
  if (v6) {
    ADAM::releaseAudioBufferList((unsigned int **)this + 15, v2);
  }
  *((void *)this + 15) = 0;
  strcpy((char *)this + 184, "don!dis!");
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 97) = 0u;
  return result;
}

double ADAM::Analyzer::PCMBuffer::reset(ADAM::Analyzer::PCMBuffer *this)
{
  uint64_t v1 = (unsigned int *)*((void *)this + 15);
  uint64_t v2 = *v1;
  if (v2)
  {
    uint64_t v3 = v1 + 3;
    do
    {
      _DWORD *v3 = 0;
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  *((unsigned char *)this + 112) = 0;
  double result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return result;
}

uint64_t ADAM::Analyzer::PCMBuffer::analyze(ADAM *this, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  v49[2] = *MEMORY[0x263EF8340];
  int v8 = (int **)((char *)this + 120);
  if (*((void *)this + 15)) {
    goto LABEL_2;
  }
  uint64_t v16 = 560100710;
  if (!*((unsigned char *)this + 192)) {
    return v16;
  }
  ADAM::allocAudioBufferList((ADAM *)((char *)this + 120), (AudioBufferList **)this + 16, (const AudioStreamBasicDescription *)*((unsigned int *)this + 44), *((_DWORD *)this + 43));
  uint64_t v21 = *((void *)this + 15);
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (v21)
  {
    if (ADAM::ADAMLogScope(void)::scope)
    {
      uint64_t v22 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v22) {
        goto LABEL_2;
      }
    }
    else
    {
      uint64_t v22 = MEMORY[0x263EF8438];
      id v30 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = **v8;
      uint64_t v32 = *((void *)*v8 + 2);
      int v43 = 136315906;
      char v44 = "PCMBuffer.cpp";
      __int16 v45 = 1024;
      int v46 = 111;
      __int16 v47 = 1024;
      *(_DWORD *)uint64_t v48 = v31;
      *(_WORD *)&v48[4] = 2048;
      *(void *)&v48[6] = v32;
      _os_log_impl(&dword_2227C1000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PCMBuffer allocated anumBuffers: %u, buffer location: %p", (uint8_t *)&v43, 0x22u);
    }

LABEL_2:
    if (*((unsigned char *)this + 192) && (int v9 = *v8) != 0)
    {
      if (*((void *)this + 23) == a2)
      {
        if (*v9 == *a3)
        {
          if (*v9)
          {
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            do
            {
              memcpy((void *)(*(void *)&v9[v10 + 4] + v9[v10 + 3]), *(const void **)&a3[v10 + 4], a3[v10 + 3]);
              int v9 = *v8;
              (*v8)[v10 + 3] += a3[v10 + 3];
              ++v11;
              v10 += 4;
            }
            while (v11 < *v9);
          }
          unsigned int v12 = *((_DWORD *)this + 24) + a3[3] / *((_DWORD *)this + 38);
          *((_DWORD *)this + 24) = v12;
          if (!*((void *)this + 5)) {
            *((void *)this + 5) = *(void *)(a4 + 8);
          }
          int v13 = ADAM::Analyzer::PCMBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
          unsigned int v14 = ++ADAM::Analyzer::PCMBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
          if (v13) {
            goto LABEL_72;
          }
          if (ADAM::ADAMLogScope(void)::once != -1) {
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
          }
          if (ADAM::ADAMLogScope(void)::scope)
          {
            __int16 v15 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v15)
            {
LABEL_71:
              unsigned int v14 = ADAM::Analyzer::PCMBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
              unsigned int v12 = *((_DWORD *)this + 24);
LABEL_72:
              uint64_t v16 = 0;
              if (v14 > 0x63) {
                unsigned int v14 = 0;
              }
              ADAM::Analyzer::PCMBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v14;
              if (v12 >= *((_DWORD *)this + 42))
              {
                uint64_t v16 = 0;
                *((void *)this + 3) = *((void *)this + 15);
                *((unsigned char *)this + 112) = 1;
              }
              return v16;
            }
          }
          else
          {
            __int16 v15 = MEMORY[0x263EF8438];
            id v37 = MEMORY[0x263EF8438];
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            int v38 = *(_DWORD *)(*((void *)this + 15) + 12);
            int v39 = *((_DWORD *)this + 24);
            uint64_t v40 = *((void *)this + 5);
            int v43 = 136316418;
            char v44 = "PCMBuffer.cpp";
            __int16 v45 = 1024;
            int v46 = 59;
            __int16 v47 = 2048;
            *(void *)uint64_t v48 = a2;
            *(_WORD *)&v48[8] = 1024;
            *(_DWORD *)&v48[10] = v38;
            *(_WORD *)&v48[14] = 1024;
            *(_DWORD *)&v48[16] = v39;
            LOWORD(v49[0]) = 2048;
            *(void *)((char *)v49 + 2) = v40;
            _os_log_impl(&dword_2227C1000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d nodeID: %llx size: %u total frames: %u timestamp: %llu", (uint8_t *)&v43, 0x32u);
          }

          goto LABEL_71;
        }
        uint64_t v16 = 1718444833;
        __int16 v17 = &ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
        int v26 = ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
        unsigned int v19 = ++ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
        if (v26) {
          goto LABEL_63;
        }
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          uint64_t v20 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v20) {
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v20 = MEMORY[0x263EF8438];
          id v41 = MEMORY[0x263EF8438];
        }
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        uint64_t v42 = *((void *)this + 23);
        int v43 = 136315650;
        char v44 = "PCMBuffer.cpp";
        __int16 v45 = 1024;
        int v46 = 91;
        __int16 v47 = 2048;
        *(void *)uint64_t v48 = v42;
        int v29 = "%25s:%-5d %llx: num buffers mismatch";
        goto LABEL_48;
      }
      uint64_t v16 = 561017453;
      __int16 v17 = &ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      int v23 = ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      unsigned int v19 = ++ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      if (!v23)
      {
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          uint64_t v24 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v24) {
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v24 = MEMORY[0x263EF8438];
          id v34 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v35 = *((void *)this + 23);
          int v43 = 136316162;
          char v44 = "PCMBuffer.cpp";
          __int16 v45 = 1024;
          int v46 = 83;
          __int16 v47 = 2048;
          *(void *)uint64_t v48 = v35;
          *(_WORD *)&v48[8] = 2048;
          *(void *)&v48[10] = a2;
          *(_WORD *)&v48[18] = 2048;
          v49[0] = v8;
          _os_log_impl(&dword_2227C1000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Different nodeIDs not supported by PCM buffer: %llx(c), %llx(n) ABL: %p", (uint8_t *)&v43, 0x30u);
        }

        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v16 = 560162407;
      __int16 v17 = &ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      int v18 = ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      unsigned int v19 = ++ADAM::Analyzer::PCMBuffer::verifyInvariants(unsigned long long,AudioBufferList const*)const::errCnt;
      if (!v18)
      {
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          uint64_t v20 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v20) {
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v20 = MEMORY[0x263EF8438];
          id v27 = MEMORY[0x263EF8438];
        }
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
LABEL_49:

LABEL_62:
          unsigned int v19 = *v17;
          goto LABEL_63;
        }
        uint64_t v28 = *((void *)this + 23);
        int v43 = 136315650;
        char v44 = "PCMBuffer.cpp";
        __int16 v45 = 1024;
        int v46 = 75;
        __int16 v47 = 2048;
        *(void *)uint64_t v48 = v28;
        int v29 = "%25s:%-5d %llx: PCM Buffer not configured";
LABEL_48:
        _os_log_impl(&dword_2227C1000, v20, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&v43, 0x1Cu);
        goto LABEL_49;
      }
    }
LABEL_63:
    if (v19 > 0x3E7) {
      unsigned int v19 = 0;
    }
    *__int16 v17 = v19;
    return v16;
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v25 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v25) {
      return v16;
    }
  }
  else
  {
    uint64_t v25 = MEMORY[0x263EF8438];
    id v33 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    int v43 = 136315394;
    char v44 = "PCMBuffer.cpp";
    __int16 v45 = 1024;
    int v46 = 107;
    _os_log_impl(&dword_2227C1000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PCMBuffer failed to allocate buffer", (uint8_t *)&v43, 0x12u);
  }

  return v16;
}

void ADAM::Analyzer::PCMBuffer::configure(ADAM::Analyzer::PCMBuffer *this, unint64_t a2, const ADAM::BufferNodeDescriptorBase *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v6 = (ADAM::AudioDataAnalysisManager *)*(id *)ADAM::ADAMLogScope(void)::scope;
    uint64_t v7 = v6;
    if (!v6) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v7 = MEMORY[0x263EF8438];
    id v8 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v26 = 136315650;
    id v27 = "PCMBuffer.cpp";
    __int16 v28 = 1024;
    int v29 = 118;
    __int16 v30 = 2048;
    *(void *)int v31 = a2;
    _os_log_impl(&dword_2227C1000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: Configuring PCM Buffer", (uint8_t *)&v26, 0x1Cu);
  }

LABEL_10:
  ADAM::AudioDataAnalysisManager::instance(v6);
  uint64_t ClientSessionMananger = (ADAM::Parameters *)ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, HIDWORD(a2));
  if (ClientSessionMananger)
  {
    int v10 = *(unsigned __int8 *)ClientSessionMananger;
    ADAM::Parameters::instance(ClientSessionMananger);
    if (v10 == 3)
    {
      int Param = (int)ADAM::Parameters::GetParamValue<float>(0xDu);
      if (Param <= 1) {
        int Param = 1;
      }
      BOOL v12 = Param >= 0xF0;
      int v13 = 240;
      goto LABEL_19;
    }
  }
  else
  {
    ADAM::Parameters::instance(0);
  }
  int Param = (int)ADAM::Parameters::GetParamValue<float>(0xEu);
  if (Param <= 1) {
    int Param = 1;
  }
  BOOL v12 = Param >= 0x3C;
  int v13 = 60;
LABEL_19:
  if (v12) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = Param;
  }
  double v16 = *((double *)a3 + 6);
  __int16 v15 = (unsigned int *)((char *)a3 + 48);
  *((_DWORD *)this + 43) = ((double)v15[10] + (double)v14 * v16) / v15[10];
  long long v18 = *(_OWORD *)v15;
  long long v17 = *((_OWORD *)v15 + 1);
  *((void *)this + 20) = *((void *)v15 + 4);
  *((_OWORD *)this + 8) = v18;
  *((_OWORD *)this + 9) = v17;
  unsigned int v19 = v15[10];
  *((_DWORD *)this + 42) = (1.0 - ((double)v19 - (double)v14 * *((double *)this + 16)));
  *((_DWORD *)this + 44) = v19;
  *((void *)this + 23) = a2;
  *((unsigned char *)this + 192) = 1;
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v20 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v20) {
      return;
    }
  }
  else
  {
    uint64_t v20 = MEMORY[0x263EF8438];
    id v21 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = *((_DWORD *)this + 43);
    int v22 = *((_DWORD *)this + 44);
    int v24 = *((_DWORD *)this + 42);
    uint64_t v25 = *(void *)v15;
    int v26 = 136316674;
    id v27 = "PCMBuffer.cpp";
    __int16 v28 = 1024;
    int v29 = 154;
    __int16 v30 = 1024;
    *(_DWORD *)int v31 = v14;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = v23;
    __int16 v32 = 1024;
    int v33 = v22;
    __int16 v34 = 1024;
    int v35 = v24;
    __int16 v36 = 2048;
    uint64_t v37 = v25;
    _os_log_impl(&dword_2227C1000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PCM Buffer Configured: duration: %us numSlots: %u, maxFramesPerBlock %u, maxFrames: %u, sample rate: %.2lf", (uint8_t *)&v26, 0x34u);
  }
}

void ADAM::Analyzer::PCMBuffer::flush(ADAM::Analyzer::PCMBuffer *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x263EF8438];
    id v3 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *((void *)this + 23);
    int v7 = 136315650;
    id v8 = "PCMBuffer.cpp";
    __int16 v9 = 1024;
    int v10 = 161;
    __int16 v11 = 2048;
    uint64_t v12 = v4;
    _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: flushing PCM Buffer", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_10:
  if (!*((_DWORD *)this + 24)) {
    return;
  }
  *((void *)this + 3) = *((void *)this + 15);
  *((void *)this + 13) = 1;
  *((unsigned char *)this + 112) = 1;
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5) {
      return;
    }
  }
  else
  {
    uint64_t v5 = MEMORY[0x263EF8438];
    id v6 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    id v8 = "PCMBuffer.cpp";
    __int16 v9 = 1024;
    int v10 = 168;
    _os_log_impl(&dword_2227C1000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d PCM Buffer will be flushed", (uint8_t *)&v7, 0x12u);
  }
}

void ADAM::Analyzer::PCMBuffer::~PCMBuffer(ADAM::Analyzer::PCMBuffer *this, AudioBufferList **a2)
{
  *(void *)this = &unk_26D4EC318;
  uint64_t v3 = *((void *)this + 15);
  uint64_t v2 = (unsigned int **)((char *)this + 120);
  if (v3) {
    ADAM::releaseAudioBufferList(v2, a2);
  }

  JUMPOUT(0x223C9D800);
}

{
  unsigned int **v2;
  uint64_t v3;

  *(void *)this = &unk_26D4EC318;
  uint64_t v3 = *((void *)this + 15);
  uint64_t v2 = (unsigned int **)((char *)this + 120);
  if (v3) {
    ADAM::releaseAudioBufferList(v2, a2);
  }
}

uint64_t ADAM::Analyzer::LoudnessAnalyzer::hardReset(ADAM::Analyzer::LoudnessAnalyzer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

double ADAM::Analyzer::LoudnessAnalyzer::reset(ADAM::Analyzer::LoudnessAnalyzer *this)
{
  *((unsigned char *)this + 112) = 0;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *((_DWORD *)this + 45) = 0;
  return result;
}

uint64_t ADAM::Analyzer::LoudnessAnalyzer::analyze(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    int v8 = ADAM::Analyzer::LoudnessAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
    unsigned int v9 = ++ADAM::Analyzer::LoudnessAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
    if (v8)
    {
LABEL_31:
      uint64_t v6 = 1684108321;
      if (v9 > 0xBB7) {
        unsigned int v9 = 0;
      }
      ADAM::Analyzer::LoudnessAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt = v9;
      return v6;
    }
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      int v10 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v10)
      {
LABEL_30:
        unsigned int v9 = ADAM::Analyzer::LoudnessAnalyzer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
        goto LABEL_31;
      }
    }
    else
    {
      int v10 = MEMORY[0x263EF8438];
      id v23 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      int v26 = "LoudnessAnalyzer.cpp";
      __int16 v27 = 1024;
      int v28 = 114;
      _os_log_impl(&dword_2227C1000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d HAE SPL data ptr is null? (sampled every 3k)", (uint8_t *)&v25, 0x12u);
    }

    goto LABEL_30;
  }
  BOOL v5 = *(float *)a3 >= 0.0 && *(float *)a3 < 130.0;
  if (v5 && *(float *)(a3 + 16) >= 0.0)
  {
    *(_OWORD *)(a1 + 32) = *a4;
    long long v15 = a4[1];
    long long v16 = a4[2];
    long long v17 = a4[4];
    *(_OWORD *)(a1 + 80) = a4[3];
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v16;
    *(double *)&long long v15 = *(float *)a3;
    double v18 = *(float *)(a3 + 16);
    *(double *)(a1 + 144) = *(double *)(a1 + 144) + v18;
    *(double *)(a1 + 136) = *(double *)(a1 + 136) + __exp10(*(double *)&v15 * 0.1) * v18;
    double v19 = *(float *)(a3 + 4);
    double v20 = *(float *)(a3 + 16);
    *(double *)(a1 + 160) = *(double *)(a1 + 160) + v20;
    *(double *)(a1 + 152) = *(double *)(a1 + 152) + __exp10(v19 * 0.1) * v20;
    double v21 = *(float *)(a3 + 8);
    double v22 = *(float *)(a3 + 16);
    *(double *)(a1 + 176) = *(double *)(a1 + 176) + v22;
    *(double *)(a1 + 168) = *(double *)(a1 + 168) + __exp10(v21 * 0.1) * v22;
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a3 + 12);
    if (*(double *)(a1 + 144) >= *(double *)(a1 + 184))
    {
      ADAM::Analyzer::LoudnessAnalyzer::popDose((ADAM::Analyzer::LoudnessAnalyzer *)a1);
      uint64_t v6 = 0;
      *(unsigned char *)(a1 + 112) = 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    uint64_t v6 = 1684108321;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      int v7 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v7) {
        return v6;
      }
    }
    else
    {
      int v7 = MEMORY[0x263EF8438];
      id v11 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      double v12 = *(float *)a3;
      double v13 = *(float *)(a3 + 16);
      int v25 = 136315906;
      int v26 = "LoudnessAnalyzer.cpp";
      __int16 v27 = 1024;
      int v28 = 124;
      __int16 v29 = 2048;
      double v30 = v12;
      __int16 v31 = 2048;
      double v32 = v13;
      _os_log_impl(&dword_2227C1000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid HAE data { dBA: %.2f, duration: %.2f }", (uint8_t *)&v25, 0x26u);
    }
  }
  return v6;
}

float ADAM::Analyzer::LoudnessAnalyzer::popDose(ADAM::Analyzer::LoudnessAnalyzer *this)
{
  long double v2 = log(*((double *)this + 17) / *((double *)this + 18));
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *(float *)&long double v2 = v2 * 10.0 / 2.30258509;
  *((_DWORD *)this + 29) = LODWORD(v2);
  long double v3 = log(*((double *)this + 19) / *((double *)this + 20));
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *(float *)&long double v3 = v3 * 10.0 / 2.30258509;
  *((_DWORD *)this + 30) = LODWORD(v3);
  double v4 = *((double *)this + 22);
  long double v5 = log(*((double *)this + 21) / v4);
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *(float *)&long double v5 = v5 * 10.0 / 2.30258509;
  *((_DWORD *)this + 31) = LODWORD(v5);
  float result = v4;
  *((float *)this + 33) = result;
  return result;
}

void ADAM::Analyzer::LoudnessAnalyzer::flush(ADAM::Analyzer::LoudnessAnalyzer *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*((double *)this + 18) > 0.0)
  {
    ADAM::Analyzer::LoudnessAnalyzer::popDose(this);
    *((unsigned char *)this + 112) = 1;
    *((void *)this + 13) = 1;
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      long double v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v2) {
        return;
      }
    }
    else
    {
      long double v2 = MEMORY[0x263EF8438];
      id v3 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315394;
      long double v5 = "LoudnessAnalyzer.cpp";
      __int16 v6 = 1024;
      int v7 = 90;
      _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d LoudnessAnalyzer needs to be flushed", (uint8_t *)&v4, 0x12u);
    }
  }
}

void ADAM::Analyzer::LoudnessAnalyzer::~LoudnessAnalyzer(ADAM::Analyzer::LoudnessAnalyzer *this)
{
}

float ADAM::Parameters::GetParamValue<float>(unsigned int a1)
{
  if (a1 >= (unint64_t)((qword_26AB1A768 - ADAM::Parameters::instance(void)::gParams) >> 4))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, a1);
    __n128 v5 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v7, "unknown ADAMParameterType ", &v6);
    MEMORY[0x223C9D3E0](exception, &v7, v5);
  }
  long double v2 = std::any_cast[abi:ne180100]<float>((uint64_t (**)(uint64_t, void, void, void, void *))(*(void *)(ADAM::Parameters::instance(void)::gParams + 16 * a1) + 16));
  if (!v2) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *(float *)v2;
}

void sub_2227EFE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v22 - 33) < 0) {
    operator delete(*(void **)(v22 - 56));
  }
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_2227F002C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0)
    {
LABEL_12:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v27);
  goto LABEL_12;
}

void sub_2227F0130(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v14);
  __cxa_end_catch();
  JUMPOUT(0x2227F0158);
}

uint64_t (**std::any_cast[abi:ne180100]<float>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<float>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *ADAM::BoolParamInfo::BoolParamInfo(void *a1, uint64_t a2, unsigned __int8 a3, long long *a4)
{
  v6[4] = *(void (**)(uint64_t, void, uint64_t, void, void))MEMORY[0x263EF8340];
  v6[1] = (void (*)(uint64_t, void, uint64_t, void, void))a3;
  v6[0] = (void (*)(uint64_t, void, uint64_t, void, void))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  ADAM::Parameters::ParamInfo::ParamInfo(a1, a2, v6, a4);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))v6);
  *a1 = &unk_26D4EC3A8;
  return a1;
}

void sub_2227F0248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))va);
  _Unwind_Resume(a1);
}

void *ADAM::FloatParamInfo::FloatParamInfo(void *a1, uint64_t a2, long long *a3, float a4)
{
  v6[4] = *(void (**)(uint64_t, void, uint64_t, void, void))MEMORY[0x263EF8340];
  v6[1] = (void (*)(uint64_t, void, uint64_t, void, void))LODWORD(a4);
  v6[0] = (void (*)(uint64_t, void, uint64_t, void, void))std::__any_imp::_SmallHandler<float>::__handle[abi:ne180100];
  ADAM::Parameters::ParamInfo::ParamInfo(a1, a2, v6, a3);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))v6);
  *a1 = &unk_26D4EC3D8;
  return a1;
}

void sub_2227F02FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<ADAM::Parameters::ParamInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long double v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    __n128 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        std::string v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      __n128 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::default_delete<ADAM::BoolParamInfo>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    *(void *)float result = &unk_26D4EC3C0;
    if (*(char *)(result + 103) < 0) {
      operator delete(*(void **)(result + 80));
    }
    std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))(v1 + 48));
    std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))(v1 + 16));
    JUMPOUT(0x223C9D800);
  }
  return result;
}

uint64_t ADAM::Parameters::ReadDefaults(ADAM::Parameters *this)
{
  uint64_t result = CFPreferencesAppSynchronize(@"com.apple.coreaudio");
  int v4 = *(uint64_t (*****)(void))this;
  id v3 = (uint64_t (****)(void))*((void *)this + 1);
  while (v4 != v3)
  {
    __n128 v5 = *v4;
    v4 += 2;
    uint64_t result = (**v5)(v5);
  }
  return result;
}

uint64_t ___ZN4ADAM10ParametersC2Ev_block_invoke(uint64_t a1)
{
  return ADAM::Parameters::ReadDefaults(*(ADAM::Parameters **)(a1 + 32));
}

void ADAM::Parameters::SettingsChanged(ADAM::Parameters *this, __CFNotificationCenter **a2, void *a3, const __CFString *a4, void *a5, const __CFDictionary *a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v15 = a3;
  std::string v6 = (ADAM::Parameters *)[v15 isEqualToString:*MEMORY[0x263F28B80]];
  if (!v6)
  {
    ADAM::Parameters::instance(v6);
    ADAM::Parameters::ReadDefaults((ADAM::Parameters *)&ADAM::Parameters::instance(void)::gParams);
    goto LABEL_20;
  }
  ADAM::Parameters::instance(v6);
  id v7 = objc_alloc_init(MEMORY[0x263F28C30]);
  uint64_t v8 = [v7 getPreferenceFor:@"_ADAFPreferenceKeyConnectedWiredDeviceIsHeadphone"];

  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    unsigned int v9 = MEMORY[0x263EF8438];
    id v10 = MEMORY[0x263EF8438];
    goto LABEL_9;
  }
  unsigned int v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v9)
  {
LABEL_9:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ADAMParameters.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 162;
      __int16 v18 = 2112;
      double v19 = v8;
      _os_log_impl(&dword_2227C1000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d ADAM re-loading wired device status is headphone: %@", buf, 0x1Cu);
    }
  }
  if (v8) {
    unsigned __int8 v11 = [v8 BOOLValue];
  }
  else {
    unsigned __int8 v11 = 1;
  }
  uint64_t v12 = *(void *)(ADAM::Parameters::instance(void)::gParams + 192);
  double v13 = (void (**)(uint64_t, uint64_t, unsigned char *, void, void))(v12 + 16);
  v16[1] = (uint64_t (*)(void, void, void, void, void))v11;
  v16[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  if (v16 != (uint64_t (**)(void, void, void, void, void))(v12 + 16))
  {
    unsigned int v14 = *v13;
    if (*v13)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      v14(2, v12 + 16, buf, 0, 0);
      v16[0](2, v16, v13, 0, 0);
      (*(void (**)(uint64_t, unsigned char *, uint64_t (**)(void, void, void, void, void), void, void))buf)(2, buf, v16, 0, 0);
      std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))buf);
    }
    else
    {
      *(unsigned char *)(v12 + 24) = v11;
      *(void *)(v12 + 16) = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
      v16[0] = 0;
    }
  }
  std::any::reset[abi:ne180100](v16);

LABEL_20:
}

void sub_2227F06E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t (**std::any::reset[abi:ne180100](uint64_t (**result)(void, void, void, void, void)))(void, void, void, void, void)
{
  if (*result) {
    return (uint64_t (**)(void, void, void, void, void))(*result)(0, result, 0, 0, 0);
  }
  return result;
}

uint64_t std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(unsigned char *)(a3 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a3 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
      break;
    case 2:
      uint64_t result = 0;
      *(unsigned char *)(a3 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a3 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<BOOL>::__id && a4 == 0) {
        uint64_t result = a2 + 8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ADAM::FloatParamInfo  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<ADAM::BoolParamInfo>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<ADAM::FloatParamInfo  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9D800);
}

void *ADAM::Parameters::ParamInfo::ParamInfo(void *a1, uint64_t a2, void (**a3)(uint64_t, void, uint64_t, void, void), long long *a4)
{
  *a1 = &unk_26D4EC3C0;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  if (*a3) {
    (*a3)(1, a3, (uint64_t)(a1 + 2), 0, 0);
  }
  a1[6] = 0;
  a1[7] = 0;
  if (*a3) {
    (*a3)(1, a3, (uint64_t)(a1 + 6), 0, 0);
  }
  id v7 = (std::string *)(a1 + 10);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v8 = *a4;
    a1[12] = *((void *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_2227F0924(_Unwind_Exception *a1)
{
  std::any::reset[abi:ne180100](v2);
  std::any::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ADAM::FloatParamInfo::ReadDefaultsValue(ADAM::FloatParamInfo *this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  CFBooleanRef v2 = (const __CFBoolean *)CFPreferencesCopyAppValue(*((CFStringRef *)this + 1), @"com.apple.coreaudio");
  double valuePtr = 0.0;
  if (v2)
  {
    CFBooleanRef v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFBooleanGetTypeID())
    {
      double Value = (double)CFBooleanGetValue(v3);
LABEL_6:
      CFRelease(v3);
      BOOL v6 = 1;
LABEL_7:
      float v7 = Value;
      *(_DWORD *)&buffer[12] = 0;
      *(float *)&buffer[8] = v7;
      *(void *)buffer = std::__any_imp::_SmallHandler<float>::__handle[abi:ne180100];
      goto LABEL_15;
    }
    if (v4 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v3, kCFNumberDoubleType, &valuePtr);
      double Value = valuePtr;
      goto LABEL_6;
    }
    if (v4 == CFStringGetTypeID())
    {
      long long v19 = 0u;
      memset(buffer, 0, sizeof(buffer));
      CFStringGetCString((CFStringRef)v3, buffer, 64, 0x600u);
      BOOL v6 = sscanf(buffer, "%lf", &valuePtr) == 1;
      double Value = valuePtr;
      CFRelease(v3);
      if (v6) {
        goto LABEL_7;
      }
    }
    else
    {
      CFRelease(v3);
    }
  }
  long long v8 = (void (*)(uint64_t, char *, char *, void, void))*((void *)this + 6);
  *(void *)buffer = 0;
  *(void *)&buffer[8] = 0;
  if (v8) {
    v8(1, (char *)this + 48, buffer, 0, 0);
  }
  BOOL v6 = 0;
LABEL_15:
  std::any::operator=[abi:ne180100]((unint64_t *)this + 2, (void (**)(uint64_t))buffer);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))buffer);
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    id v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v9) {
      return;
    }
  }
  else
  {
    id v9 = (id)MEMORY[0x263EF8438];
    id v10 = MEMORY[0x263EF8438];
  }
  unsigned __int8 v11 = v9;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *((void *)this + 1);
    double v13 = (float *)std::any_cast[abi:ne180100]<float>((uint64_t (**)(uint64_t, void, void, void, void *))this + 2);
    if (!v13) {
      std::__throw_bad_any_cast[abi:ne180100]();
    }
    double v14 = *v13;
    id v15 = "invalid";
    if (v6) {
      id v15 = "valid";
    }
    long long v16 = (void *)((char *)this + 80);
    if (*((char *)this + 103) < 0) {
      long long v16 = (void *)*v16;
    }
    *(_DWORD *)buffer = 136316418;
    *(void *)&buffer[4] = "ADAMParameters.cpp";
    *(_WORD *)&buffer[12] = 1024;
    *(_DWORD *)&buffer[14] = 41;
    *(_WORD *)&buffer[18] = 2112;
    *(void *)&buffer[20] = v12;
    *(_WORD *)&buffer[28] = 2048;
    *(double *)&buffer[30] = v14;
    *(_WORD *)&buffer[38] = 2080;
    *(void *)&buffer[40] = v15;
    LOWORD(v19) = 2080;
    *(void *)((char *)&v19 + 2) = v16;
    _os_log_impl(&dword_2227C1000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ADAM Parameter: {'%@', %.2f, %s} %s", (uint8_t *)buffer, 0x3Au);
  }
}

void sub_2227F0C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t *std::any::operator=[abi:ne180100](unint64_t *a1, void (**a2)(uint64_t))
{
  v4[8] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  v4[0] = 0;
  v4[1] = 0;
  if (*a2) {
    (*a2)(1);
  }
  if (v4 != (uint64_t (**)(void, void, void, void, void))a1 && *a1 != (unsigned __int128)0) {
    ((void (*)(uint64_t, unint64_t *, uint64_t (**)(void, void, void, void, void), void, void))*a1)(2, a1, v4, 0, 0);
  }
  std::any::reset[abi:ne180100](v4);
  return a1;
}

void sub_2227F0D74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__any_imp::_SmallHandler<float>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)a3 = std::__any_imp::_SmallHandler<float>::__handle[abi:ne180100];
      break;
    case 2:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)a3 = std::__any_imp::_SmallHandler<float>::__handle[abi:ne180100];
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<float>::__id && a4 == 0) {
        uint64_t result = a2 + 8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ADAM::BoolParamInfo  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<ADAM::BoolParamInfo>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<ADAM::BoolParamInfo  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9D800);
}

void ADAM::BoolParamInfo::ReadDefaultsValue(ADAM::BoolParamInfo *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  CFBooleanRef v2 = (const __CFBoolean *)CFPreferencesCopyAppValue(*((CFStringRef *)this + 1), @"com.apple.coreaudio");
  int valuePtr = 0;
  if (!v2) {
    goto LABEL_12;
  }
  CFBooleanRef v3 = v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 == CFBooleanGetTypeID())
  {
    BOOL v5 = CFBooleanGetValue(v3) == 0;
    goto LABEL_6;
  }
  if (v4 == CFNumberGetTypeID())
  {
    CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
    BOOL v5 = valuePtr == 0;
LABEL_6:
    BOOL v6 = !v5;
    goto LABEL_9;
  }
  if (v4 == CFStringGetTypeID())
  {
    long long v24 = 0u;
    memset(buf, 0, sizeof(buf));
    CFStringGetCString((CFStringRef)v3, (char *)buf, 64, 0x600u);
    if (sscanf((const char *)buf, "%d", &valuePtr) == 1)
    {
      BOOL v6 = valuePtr != 0;
      CFRelease(v3);
      goto LABEL_11;
    }
    signed __int8 v18 = buf[0];
    if (buf[0])
    {
      long long v19 = &buf[1];
      do
      {
        *(v19 - 1) = __tolower(v18);
        int v20 = *v19++;
        signed __int8 v18 = v20;
      }
      while (v20);
    }
    if (!(*(unsigned __int16 *)buf ^ 0x6F6E | buf[2])
      || (*(_DWORD *)buf == 1936482662 ? (BOOL v21 = *(unsigned __int16 *)&buf[4] == 101) : (BOOL v21 = 0), v21))
    {
      BOOL v6 = 0;
LABEL_9:
      int v7 = 1;
      goto LABEL_10;
    }
    if (*(_DWORD *)buf == 7562617 || !(*(_DWORD *)buf ^ 0x65757274 | buf[4]))
    {
      int v7 = 1;
      BOOL v6 = 1;
    }
    else
    {
      int v7 = 0;
      BOOL v6 = valuePtr != 0;
    }
  }
  else
  {
    int v7 = 0;
    BOOL v6 = 0;
  }
LABEL_10:
  CFRelease(v3);
  if (v7)
  {
LABEL_11:
    int v8 = 0;
    *(void *)&buf[8] = v6;
    *(void *)buf = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    goto LABEL_15;
  }
LABEL_12:
  id v9 = (void (*)(uint64_t, char *, uint8_t *, void, void))*((void *)this + 6);
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  if (v9) {
    v9(1, (char *)this + 48, buf, 0, 0);
  }
  int v8 = 1;
LABEL_15:
  std::any::operator=[abi:ne180100]((unint64_t *)this + 2, (void (**)(uint64_t))buf);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))buf);
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    id v10 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v10) {
      return;
    }
  }
  else
  {
    id v10 = (id)MEMORY[0x263EF8438];
    id v11 = MEMORY[0x263EF8438];
  }
  uint64_t v12 = v10;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *((void *)this + 1);
    double v14 = std::any_cast[abi:ne180100]<BOOL>((uint64_t (**)(uint64_t, void, void, void, void *))this + 2);
    if (!v14) {
      std::__throw_bad_any_cast[abi:ne180100]();
    }
    if (*v14) {
      id v15 = "true";
    }
    else {
      id v15 = "false";
    }
    long long v16 = "invalid";
    if (!v8) {
      long long v16 = "valid";
    }
    long long v17 = (void *)((char *)this + 80);
    if (*((char *)this + 103) < 0) {
      long long v17 = (void *)*v17;
    }
    *(_DWORD *)buf = 136316418;
    *(void *)&uint8_t buf[4] = "ADAMParameters.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 30;
    *(_WORD *)&unsigned char buf[18] = 2112;
    *(void *)&buf[20] = v13;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = v15;
    *(_WORD *)&buf[38] = 2080;
    *(void *)&buf[40] = v16;
    LOWORD(v24) = 2080;
    *(void *)((char *)&v24 + 2) = v17;
    _os_log_impl(&dword_2227C1000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ADAM Parameter: {'%@', %s, %s} %s", buf, 0x3Au);
  }
}

void sub_2227F1210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ADAM::Parameters::Parameters(ADAM::Parameters *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2227F1E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::vector<std::shared_ptr<ADAM::Parameters::ParamInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v16 = 248;
  while (1)
  {
    long long v17 = *(std::__shared_weak_count **)(&a15 + v16);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    v16 -= 16;
    if (v16 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_2227F204C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<ADAM::Parameters::ParamInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  JUMPOUT(0x2227F2044);
}

float ADAM::Parameters::GetHAELiveUIAccumulationPeriodInSec(ADAM::Parameters *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  float Param = ADAM::Parameters::GetParamValue<float>(9u);
  if (Param <= 0.0 || Param > 10.0)
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      CFBooleanRef v3 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v3) {
        return 1.0;
      }
    }
    else
    {
      CFBooleanRef v3 = MEMORY[0x263EF8438];
      id v4 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      int v7 = "ADAMParameters.cpp";
      __int16 v8 = 1024;
      int v9 = 152;
      __int16 v10 = 2048;
      double v11 = Param;
      _os_log_impl(&dword_2227C1000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid Accumulation Period in Seconds for HAE: %.2f, default to 1.0s", (uint8_t *)&v6, 0x1Cu);
    }

    return 1.0;
  }
  return Param;
}

void ADAM::BufferNodePCM::~BufferNodePCM(ADAM::BufferNodePCM *this, AudioBufferList **a2)
{
  ADAM::BufferNodePCM::~BufferNodePCM(this, a2);

  JUMPOUT(0x223C9D800);
}

{
  void *v3;
  void *v4;

  *(void *)this = &unk_26D4EC460;
  ADAM::releaseAudioBufferList((unsigned int **)this + 20, a2);
  CFBooleanRef v3 = (void *)*((void *)this + 29);
  if (v3)
  {
    *((void *)this + 30) = v3;
    operator delete(v3);
  }
  *((void *)this + 8) = &unk_26D4EC870;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  *(void *)this = &unk_26D4EC800;
  id v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
}

void ADAM::BufferNodeDescriptorBase::~BufferNodeDescriptorBase(void **this)
{
  *this = &unk_26D4EC870;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x223C9D800);
}

{
  *this = &unk_26D4EC870;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t ADAM::BufferNodePCM::getNodeDescriptor(ADAM::BufferNodePCM *this)
{
  return (uint64_t)this + 64;
}

_DWORD *ADAM::BufferNodePCM::pop(_DWORD *this)
{
  if (this[44])
  {
    atomic_fetch_add(this + 44, 0xFFFFFFFF);
    this[43] = (this[43] + 1) % this[47];
  }
  return this;
}

uint64_t ADAM::BufferNodePCM::read(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v5 = *(_DWORD **)(a1 + 160);
  if (*a2 == *v5)
  {
    if (*(_DWORD *)(a1 + 176))
    {
      unsigned int v7 = *(_DWORD *)(a1 + 172);
      unsigned int v8 = (v7 + 1) % *(_DWORD *)(a1 + 188);
      uint64_t v9 = *(void *)(a1 + 232);
      if (*a2)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        size_t v12 = (*(_DWORD *)(a1 + 216) * *(_DWORD *)(v9 + 80 * v7 + 64));
        do
        {
          memcpy(*(void **)&a2[v10 + 4], (const void *)(*(void *)&v5[v10 + 4] + *(_DWORD *)(a1 + 184) * v7), v12);
          a2[v10 + 3] = v12;
          ++v11;
          BOOL v5 = *(_DWORD **)(a1 + 160);
          v10 += 4;
        }
        while (v11 < *v5);
        uint64_t v9 = *(void *)(a1 + 232);
      }
      uint64_t v13 = 0;
      double v14 = (_OWORD *)(v9 + 80 * v7);
      *a3 = *v14;
      long long v15 = v14[1];
      long long v16 = v14[2];
      long long v17 = v14[4];
      a3[3] = v14[3];
      a3[4] = v17;
      a3[1] = v15;
      a3[2] = v16;
      *(_DWORD *)(a1 + 172) = v8;
      atomic_fetch_add((atomic_uint *volatile)(a1 + 176), 0xFFFFFFFF);
    }
    else
    {
      return 1701670945;
    }
  }
  else
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    uint64_t v13 = 1718444833;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      signed __int8 v18 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v18) {
        return v13;
      }
    }
    else
    {
      signed __int8 v18 = MEMORY[0x263EF8438];
      id v19 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = *a2;
      int v21 = **(_DWORD **)(a1 + 160);
      int v23 = 136315906;
      long long v24 = "ADAMRingBuffer.cpp";
      __int16 v25 = 1024;
      int v26 = 63;
      __int16 v27 = 1024;
      int v28 = v20;
      __int16 v29 = 1024;
      int v30 = v21;
      _os_log_impl(&dword_2227C1000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioRingBuffer process error format does not match: outABL.mNumBuffers:%u expected:%u", (uint8_t *)&v23, 0x1Eu);
    }
  }
  return v13;
}

uint64_t ADAM::BufferNodePCM::process(_DWORD **a1, long long *a2, _OWORD *a3)
{
  CFBooleanRef v3 = a1;
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v30 = *a2;
  uint64_t v31 = *((void *)a2 + 2);
  if (v30 != *a1[20])
  {
    int v7 = ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
    unsigned int v8 = ++ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
    if (v7)
    {
LABEL_30:
      if (v8 > 0xFFE) {
        unsigned int v8 = 0;
      }
      ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt = v8;
      return 1718444833;
    }
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      uint64_t v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v9)
      {
LABEL_29:
        unsigned int v8 = ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v9 = MEMORY[0x263EF8438];
      id v26 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v27 = *v3[20];
      *(_DWORD *)buf = 136315906;
      uint64_t v33 = "ADAMRingBuffer.cpp";
      __int16 v34 = 1024;
      int v35 = 32;
      __int16 v36 = 1024;
      int v37 = v30;
      __int16 v38 = 1024;
      int v39 = v27;
      _os_log_impl(&dword_2227C1000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioRingBuffer process error format does not match: inABL.mNumBuffers:%u expected:%u", buf, 0x1Eu);
    }

    goto LABEL_29;
  }
  if (HIDWORD(v30) > *((_DWORD *)a1 + 46))
  {
    int v4 = ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
    unsigned int v5 = ++ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
    if (v4)
    {
LABEL_38:
      if (v5 > 0xFFE) {
        unsigned int v5 = 0;
      }
      ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt = v5;
      return 1819436833;
    }
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      int v6 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v6)
      {
LABEL_37:
        unsigned int v5 = ADAM::AudioRingBuffer::write(AudioBufferList const&,ADAM::Metadata const&)::errCnt;
        goto LABEL_38;
      }
    }
    else
    {
      int v6 = MEMORY[0x263EF8438];
      id v28 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v29 = *((_DWORD *)v3 + 46);
      *(_DWORD *)buf = 136315906;
      uint64_t v33 = "ADAMRingBuffer.cpp";
      __int16 v34 = 1024;
      int v35 = 37;
      __int16 v36 = 1024;
      int v37 = HIDWORD(v30);
      __int16 v38 = 1024;
      int v39 = v29;
      _os_log_impl(&dword_2227C1000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioRingBuffer process error incoming size: %u, blksz: %u", buf, 0x1Eu);
    }

    goto LABEL_37;
  }
  int v10 = *((_DWORD *)a1 + 42);
  unsigned int v11 = *((_DWORD *)a1 + 47);
  if (*((_DWORD *)a1 + 44) == v11) {
    return 1718971425;
  }
  unsigned int v14 = (v10 + 1) % v11;
  if (v30)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 16 * v30;
    do
    {
      a1 = (_DWORD **)memcpy((void *)(*(void *)&v3[20][v15 / 4 + 4] + (*((_DWORD *)v3 + 46) * v10)), *(const void **)((char *)&v30 + v15 + 16), *(unsigned int *)((char *)&v30 + v15 + 12));
      v15 += 16;
    }
    while (v16 != v15);
  }
  long long v17 = &v3[29][20 * v10];
  *long long v17 = *a3;
  long long v18 = a3[1];
  long long v19 = a3[2];
  long long v20 = a3[4];
  v17[3] = a3[3];
  v17[4] = v20;
  v17[1] = v18;
  v17[2] = v19;
  *((_DWORD *)v3 + 42) = v14;
  atomic_fetch_add((atomic_uint *volatile)v3 + 44, 1u);
  unint64_t v21 = (unint64_t)&v3[4][6 * *((unsigned int *)v3 + 14)];
  *(void *)(v21 + 8) = v3[2];
  *(_DWORD *)(v21 + 16) = 4;
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  uint64_t v22 = qword_26AB1A828[0];
  atomic_store(qword_26AB1A828[0], (unint64_t *)v21);
  unint64_t v23 = v22;
  atomic_compare_exchange_strong(qword_26AB1A828, &v23, v21);
  if (v23 != v22)
  {
    unint64_t v24 = v23;
    do
    {
      atomic_store(v23, (unint64_t *)v21);
      atomic_compare_exchange_strong(qword_26AB1A828, &v24, v21);
      BOOL v25 = v24 == v23;
      unint64_t v23 = v24;
    }
    while (!v25);
  }
  caulk::semaphore::signal((caulk::semaphore *)&unk_26AB1A810);
  uint64_t result = 0;
  *((_DWORD *)v3 + 14) = (*((_DWORD *)v3 + 14) + 1) % *((_DWORD *)v3 + 7);
  return result;
}

void ADAM::BufferNodePCM::reset(ADAM::BufferNodePCM *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!atomic_load((unsigned int *)this + 44))
  {
LABEL_5:
    *((_DWORD *)this + 42) = 0;
    *((_DWORD *)this + 43) = 0;
    *((_DWORD *)this + 44) = 0;
    return;
  }
  int v3 = -50500;
  while (1)
  {
    v3 += 500;
    if (!v3) {
      break;
    }
    usleep(0x1F4u);
    if (!atomic_load((unsigned int *)this + 44)) {
      goto LABEL_5;
    }
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    unsigned int v5 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v5) {
      return;
    }
  }
  else
  {
    unsigned int v5 = MEMORY[0x263EF8438];
    id v6 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *((void *)this + 2);
    int v8 = 136315650;
    uint64_t v9 = "ADAMBufferNodes.cpp";
    __int16 v10 = 1024;
    int v11 = 46;
    __int16 v12 = 2048;
    uint64_t v13 = v7;
    _os_log_impl(&dword_2227C1000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Session: %llx Failed to flush ring buffer, Timedout", (uint8_t *)&v8, 0x1Cu);
  }
}

void ADAM::BufferNodePCM::initialize(ADAM::BufferNodePCM *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 8))
  {
    ADAM::AudioDataAnalysisManager::instance(this);
    ADAM::AudioDataAnalysisManager::addWriters(*((void *)this + 2), *((void *)this + 12));
    *((unsigned char *)this + 8) = 1;
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      CFBooleanRef v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v2) {
        return;
      }
    }
    else
    {
      CFBooleanRef v2 = MEMORY[0x263EF8438];
      id v3 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *((void *)this + 2);
      int v5 = 136315650;
      id v6 = "ADAMBufferNodes.cpp";
      __int16 v7 = 1024;
      int v8 = 35;
      __int16 v9 = 2048;
      uint64_t v10 = v4;
      _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session: %llx initialized", (uint8_t *)&v5, 0x1Cu);
    }
  }
}

void *std::vector<ADAM::BufferNodeMsg>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2227F2CC8(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ADAM::BufferNodeBase::getEndPointBitMask(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  if (v4 > 13)
  {
    if (v4 != 14)
    {
      if (v4 != 16) {
        return v2;
      }
      if (v5 >= 0) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = (uint64_t *)*a1;
      }
      uint64_t v12 = *v11;
      uint64_t v8 = v11[1];
      BOOL v9 = v12 == 0x6365722D63767661;
      uint64_t v10 = 0x657565755164726FLL;
      goto LABEL_16;
    }
    if (v5 >= 0) {
      long long v19 = a1;
    }
    else {
      long long v19 = (uint64_t *)*a1;
    }
    uint64_t v20 = *v19;
    uint64_t v21 = *(uint64_t *)((char *)v19 + 6);
    if (v20 == 0x532D747365544358 && v21 == 0x65646F4E4C50532DLL)
    {
      uint64_t v2 = a2 | 0x20;
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (ADAM::ADAMLogScope(void)::scope)
      {
        long long v18 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v18) {
          return v2;
        }
      }
      else
      {
        long long v18 = MEMORY[0x263EF8438];
        id v28 = MEMORY[0x263EF8438];
      }
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_59;
      }
      int v30 = 136315394;
      uint64_t v31 = "ADAMBufferNodes.cpp";
      __int16 v32 = 1024;
      int v33 = 96;
      BOOL v25 = "%25s:%-5d ADAM enable csv file for XCTest";
      id v26 = v18;
      uint32_t v27 = 18;
      goto LABEL_58;
    }
  }
  else
  {
    if (v4 != 5)
    {
      if (v4 != 11) {
        return v2;
      }
      if (v5 >= 0) {
        id v6 = a1;
      }
      else {
        id v6 = (uint64_t *)*a1;
      }
      uint64_t v7 = *v6;
      uint64_t v8 = *(uint64_t *)((char *)v6 + 3);
      BOOL v9 = v7 == 0x4E2D747365544358;
      uint64_t v10 = 0x65646F4E2D747365;
LABEL_16:
      if (!v9 || v8 != v10) {
        return v2;
      }
      goto LABEL_30;
    }
    if (v5 >= 0) {
      uint64_t v14 = (int *)a1;
    }
    else {
      uint64_t v14 = (int *)*a1;
    }
    int v15 = *v14;
    int v16 = *((unsigned __int8 *)v14 + 4);
    if (v15 == 1970237541 && v16 == 116)
    {
LABEL_30:
      ADAM::Parameters::instance((ADAM::Parameters *)a1);
      if (!ADAM::Parameters::GetParamValue<BOOL>(0)) {
        return v2;
      }
      v2 |= 8uLL;
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (ADAM::ADAMLogScope(void)::scope)
      {
        long long v18 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v18) {
          return v2;
        }
      }
      else
      {
        long long v18 = MEMORY[0x263EF8438];
        id v23 = MEMORY[0x263EF8438];
      }
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_59:

        return v2;
      }
      if (*((char *)a1 + 23) >= 0) {
        unint64_t v24 = (int *)a1;
      }
      else {
        unint64_t v24 = (int *)*a1;
      }
      int v30 = 136315650;
      uint64_t v31 = "ADAMBufferNodes.cpp";
      __int16 v32 = 1024;
      int v33 = 92;
      __int16 v34 = 2080;
      int v35 = v24;
      BOOL v25 = "%25s:%-5d ADAM enable dumping audio file for %s";
      id v26 = v18;
      uint32_t v27 = 28;
LABEL_58:
      _os_log_impl(&dword_2227C1000, v26, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v30, v27);
      goto LABEL_59;
    }
  }
  return v2;
}

void ADAM::BufferNodeDescriptorPCM::~BufferNodeDescriptorPCM(void **this)
{
  *this = &unk_26D4EC870;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x223C9D800);
}

{
  *this = &unk_26D4EC870;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void AudioDataAnalysisManagerCreate(ADAM::AudioDataAnalysisManager *a1)
{
  unsigned int v1 = a1;
  uint64_t v10 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance(a1);
  ADAM::session_lock_exclusive::session_lock_exclusive(v2);
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    id v3 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    id v3 = MEMORY[0x263EF8438];
    id v4 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v7 = "AudioDataAnalysisManager.cpp";
    __int16 v8 = 1024;
    int v9 = 84;
    _os_log_impl(&dword_2227C1000, v3, OS_LOG_TYPE_INFO, "%25s:%-5d createSessionManager: Exclusive lock acquired", buf, 0x12u);
  }

  do
LABEL_10:
    int v5 = rand();
  while (std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, ((unint64_t)v1 << 24) | v5 & 0xFFFFFF));
  operator new();
}

void sub_2227F3880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<ADAM::ClientSessionManager>::reset[abi:ne180100](v3);
  operator delete(v2);
  int v5 = std::unique_ptr<ADAM::ClientSessionManager>::reset[abi:ne180100]((ADAM::ClientSessionManager **)va);
  ADAM::session_lock_exclusive::~session_lock_exclusive(v5);
  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerDispose(ADAM::AudioDataAnalysisManager *a1)
{
  *(void *)&v24[5] = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance(a1);
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger) {
    return 0;
  }
  uint64_t v3 = ClientSessionMananger;
  if (!*(_DWORD *)(ClientSessionMananger + 40)) {
    return 0;
  }
  unint64_t v4 = 0x26AB1A000;
  if (*(unsigned char *)(ClientSessionMananger + 432))
  {
    ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)ClientSessionMananger);
    uint64_t v18 = *(void *)(v3 + 8);
    std::mutex::lock((std::mutex *)(v3 + 56));
    int v5 = *(uint64_t ***)(v3 + 32);
    if (v5)
    {
      unsigned int v6 = 0;
      do
      {
        unint64_t v7 = *(void *)(v3 + 296) + 24 * v6;
        *(void *)(v7 + 8) = *((unsigned int *)v5 + 4) | (*(void *)(v3 + 8) << 32);
        *(_DWORD *)(v7 + 16) = 2;
        atomic_ullong v8 = qword_26AB1A828[0];
        atomic_store(qword_26AB1A828[0], (unint64_t *)v7);
        unint64_t v9 = v8;
        atomic_compare_exchange_strong(qword_26AB1A828, &v9, v7);
        if (v9 != v8)
        {
          unint64_t v10 = v9;
          do
          {
            atomic_store(v9, (unint64_t *)v7);
            atomic_compare_exchange_strong(qword_26AB1A828, &v10, v7);
            BOOL v11 = v10 == v9;
            unint64_t v9 = v10;
          }
          while (!v11);
        }
        caulk::semaphore::signal((caulk::semaphore *)&unk_26AB1A810);
        ++v6;
        int v5 = (uint64_t **)*v5;
      }
      while (v5);
    }
    else
    {
      unsigned int v6 = 0;
    }
    std::mutex::unlock((std::mutex *)(v3 + 56));
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    unint64_t v4 = 0x26AB1A000uLL;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      uint64_t v12 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v12) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v12 = MEMORY[0x263EF8438];
      id v13 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      uint64_t v20 = "ADAMClientSessionManager.cpp";
      __int16 v21 = 1024;
      int v22 = 301;
      __int16 v23 = 1024;
      v24[0] = v6;
      LOWORD(v24[1]) = 2048;
      *(void *)((char *)&v24[1] + 2) = v18;
      _os_log_impl(&dword_2227C1000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sent [ %u ] dispose signals for session: %llx", buf, 0x22u);
    }
  }
LABEL_22:
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  uint64_t v14 = *(id **)(v4 + 1856);
  if (v14)
  {
    int v15 = *v14;
    if (!v15) {
      return 0;
    }
  }
  else
  {
    int v15 = MEMORY[0x263EF8438];
    id v16 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v20 = "AudioDataAnalysisManager.cpp";
    __int16 v21 = 1024;
    int v22 = 113;
    __int16 v23 = 2048;
    *(void *)unint64_t v24 = a1;
    _os_log_impl(&dword_2227C1000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx dispose * Pending *", buf, 0x1Cu);
  }

  return 0;
}

void sub_2227F3C14(_Unwind_Exception *exception_object)
{
}

uint64_t AudioDataAnalysisManagerReset(ADAM::AudioDataAnalysisManager *a1)
{
  ADAM::AudioDataAnalysisManager::instance(a1);
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger) {
    return 561211748;
  }
  uint64_t v3 = ClientSessionMananger;
  for (uint64_t i = *(uint64_t ***)(ClientSessionMananger + 32); i; uint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[3] + 8))(i[3]);
  uint64_t v5 = *(void *)(v3 + 120);
  for (uint64_t j = *(void *)(v3 + 128); j != v5; j -= 24)
  {
    if (*(char *)(j - 1) < 0) {
      operator delete(*(void **)(j - 24));
    }
  }
  uint64_t result = 0;
  *(void *)(v3 + 128) = v5;
  return result;
}

uint64_t AudioDataAnalysisManagerUpdateReportingSessions(ADAM::AudioDataAnalysisManager *a1, uint64_t **a2)
{
  ADAM::AudioDataAnalysisManager::instance(a1);
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger) {
    return 561211748;
  }
  ADAM::ClientSessionManager::updateReportingSessions(ClientSessionMananger, a2);
  return 0;
}

uint64_t AudioDataAnalysisManagerCreateNodePCM(ADAM::AudioDataAnalysisManager *a1, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance(a1);
  if (ADAM::isSpeechAnalysisEnabled(void)::once != -1) {
    dispatch_once(&ADAM::isSpeechAnalysisEnabled(void)::once, &__block_literal_global_32);
  }
  if (!ADAM::isSpeechAnalysisEnabled(void)::ans)
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      uint64_t result = (uint64_t)*(id *)ADAM::ADAMLogScope(void)::scope;
      unint64_t v7 = result;
      if (!result) {
        return result;
      }
    }
    else
    {
      unint64_t v7 = MEMORY[0x263EF8438];
      id v8 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int buf = 136315394;
      buf_4 = "AudioDataAnalysisManager.cpp";
      __int16 buf_12 = 1024;
      int buf_14 = 182;
      _os_log_impl(&dword_2227C1000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d speech analysis is disabled", (uint8_t *)&buf, 0x12u);
    }
    goto LABEL_37;
  }
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger) {
    return 561211748;
  }
  uint64_t v5 = ClientSessionMananger;
  if (ADAM::hasEntitlementForSensorkitSiri(void)::once != -1) {
    dispatch_once(&ADAM::hasEntitlementForSensorkitSiri(void)::once, &__block_literal_global_71);
  }
  if (ADAM::hasEntitlementForSensorkitSiri(void)::ans) {
    goto LABEL_8;
  }
  if (ADAM::hasEntitlementForSensorkitTelephony(void)::once != -1) {
    dispatch_once(&ADAM::hasEntitlementForSensorkitTelephony(void)::once, &__block_literal_global_76);
  }
  if (ADAM::hasEntitlementForSensorkitTelephony(void)::ans)
  {
    if (!*(unsigned char *)(v5 + 433))
    {
LABEL_29:
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (ADAM::ADAMLogScope(void)::scope)
      {
        uint64_t result = (uint64_t)*(id *)ADAM::ADAMLogScope(void)::scope;
        unint64_t v7 = result;
        if (!result) {
          return result;
        }
      }
      else
      {
        unint64_t v7 = MEMORY[0x263EF8438];
        id v9 = MEMORY[0x263EF8438];
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int buf = 136315394;
        buf_4 = "ADAMClientSessionManager.cpp";
        __int16 buf_12 = 1024;
        int buf_14 = 357;
        _os_log_impl(&dword_2227C1000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d speech analysis is not monitoring", (uint8_t *)&buf, 0x12u);
      }
LABEL_37:

      return 0;
    }
  }
  else
  {
    if (ADAM::isXCTest(void)::once != -1) {
      dispatch_once(&ADAM::isXCTest(void)::once, &__block_literal_global_60);
    }
    if (!ADAM::isXCTest(void)::isXCTest) {
      goto LABEL_29;
    }
  }
LABEL_8:
  if (!std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(v5 + 16), a2))operator new(); {
  return 1852400673;
  }
}

void sub_2227F4B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, long long a15)
{
  operator delete(v15);
  if ((void)a15) {
    operator delete((void *)a15);
  }
  std::mutex::unlock(a14);
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerCreateNodeSPL(ADAM::AudioDataAnalysisManager *a1, unsigned int a2)
{
  ADAM::AudioDataAnalysisManager::instance(a1);
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger) {
    return 561211748;
  }
  if (!std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(ClientSessionMananger + 16), a2))operator new(); {
  return 1852400673;
  }
}

void sub_2227F50A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v11);
  void *v10 = a10;
  id v13 = (void *)v10[4];
  if (v13)
  {
    v10[5] = v13;
    operator delete(v13);
  }
  MEMORY[0x223C9D800](v10, 0x10B3C401A3A0796);
  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerCreateNodeEnvSPL()
{
  return 1718511905;
}

uint64_t AudioDataAnalysisManagerCreateNodeEnvSoundClass()
{
  return 1718511905;
}

uint64_t AudioDataAnalysisManagerRemoveNode(ADAM::AudioDataAnalysisManager *a1, unsigned int a2)
{
  ADAM::AudioDataAnalysisManager::instance(a1);
  if (!byte_26AB1A820) {
    return 1634625825;
  }
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger) {
    return 561211748;
  }
  uint64_t v5 = (void *)(ClientSessionMananger + 16);
  if (!std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(ClientSessionMananger + 16), a2))return 1852400673; {
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::__erase_unique<unsigned int>(v5, a2);
  }
  return 0;
}

uint64_t AudioDataAnalysisManagerInitialize(ADAM::AudioDataAnalysisManager *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance(a1);
  ADAM::AudioDataAnalysisManager::initialize(v2);
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger) {
    return 561211748;
  }
  uint64_t v4 = ClientSessionMananger;
  std::vector<ADAM::BufferNodeMsg>::vector(v12, *(void *)(ClientSessionMananger + 40));
  uint64_t v5 = *(void **)(v4 + 296);
  if (v5)
  {
    *(void *)(v4 + 304) = v5;
    operator delete(v5);
  }
  *(_OWORD *)(v4 + 296) = *(_OWORD *)v12;
  *(void *)(v4 + 312) = *(void *)&v12[16];
  for (uint64_t i = *(uint64_t **)(v4 + 32); i; uint64_t i = (uint64_t *)*i)
  {
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)(v4 + 144), *((_DWORD *)i + 4), (_DWORD *)i + 4)+ 20) = 0;
    (**(void (***)(uint64_t))i[3])(i[3]);
  }
  *(unsigned char *)(v4 + 432) = 1;
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t result = (uint64_t)*(id *)ADAM::ADAMLogScope(void)::scope;
    id v8 = result;
    if (!result) {
      return result;
    }
  }
  else
  {
    id v8 = MEMORY[0x263EF8438];
    id v9 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(v4 + 40);
    uint64_t v11 = *(void *)(v4 + 8);
    *(_DWORD *)uint64_t v12 = 136315906;
    *(void *)&void v12[4] = "ADAMClientSessionManager.cpp";
    *(_WORD *)&v12[12] = 1024;
    *(_DWORD *)&v12[14] = 323;
    *(_WORD *)&v12[18] = 2048;
    *(void *)&v12[20] = v10;
    __int16 v13 = 2048;
    uint64_t v14 = v11;
    _os_log_impl(&dword_2227C1000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Created %lu buffers for session: %llx", v12, 0x26u);
  }

  return 0;
}

uint64_t AudioDataAnalysisManagerIsSessionInitialized(ADAM::AudioDataAnalysisManager *a1, unsigned char *a2)
{
  ADAM::AudioDataAnalysisManager::instance(a1);
  if (a2) {
    *a2 = 0;
  }
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (ClientSessionMananger) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 561211748;
  }
  if (a2)
  {
    if (ClientSessionMananger)
    {
      uint64_t result = 0;
      *a2 = *(unsigned char *)(ClientSessionMananger + 432);
    }
  }
  return result;
}

uint64_t AudioDataAnalysisManagerProcessAudio(unint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, _OWORD *a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  if (ADAM::isSpeechAnalysisEnabled(void)::once != -1) {
    dispatch_once(&ADAM::isSpeechAnalysisEnabled(void)::once, &__block_literal_global_32);
  }
  if (!ADAM::isSpeechAnalysisEnabled(void)::ans) {
    return 0;
  }
  uint64_t v10 = 1634625825;
  if (!byte_26AB1A820) {
    return v10;
  }
  ADAM::session_lock_exclusive::session_lock_exclusive_flag::session_lock_exclusive_flag((ADAM::session_lock_exclusive::session_lock_exclusive_flag *)buf);
  if (!buf[0])
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    uint64_t v10 = 1835102241;
    if (ADAM::ADAMLogScope(void)::scope)
    {
      id v13 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v13) {
        return v10;
      }
    }
    else
    {
      id v13 = (id)MEMORY[0x263EF8438];
      id v14 = MEMORY[0x263EF8438];
    }
    uint64_t v15 = v13;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioDataAnalysisManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 268;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = a2 | (a1 << 32);
      _os_log_impl(&dword_2227C1000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Session %llx, Map is mutating", buf, 0x1Cu);
    }

    return v10;
  }
  uint64_t v11 = (ADAM::session_lock_exclusive *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, a1);
  if (!v11)
  {
    ADAM::session_lock_exclusive::shared_cnt(0);
    atomic_fetch_add_explicit(&ADAM::session_lock_exclusive::shared_cnt(void)::_c, 0xFFFFFFFF, memory_order_relaxed);
    return 561211748;
  }
  uint64_t v12 = *((void *)v11 + 3);
  ADAM::session_lock_exclusive::shared_cnt(v11);
  atomic_fetch_add_explicit(&ADAM::session_lock_exclusive::shared_cnt(void)::_c, 0xFFFFFFFF, memory_order_relaxed);
  if (!v12) {
    return 561211748;
  }
  if (*(unsigned char *)(v12 + 432))
  {
    if (ADAM::hasEntitlementForSensorkitSiri(void)::once != -1) {
      dispatch_once(&ADAM::hasEntitlementForSensorkitSiri(void)::once, &__block_literal_global_71);
    }
    if (ADAM::hasEntitlementForSensorkitSiri(void)::ans)
    {
      if (!+[ADAMSensorKitWriterFactory IsMonitoringSiri]) {
        return 0;
      }
    }
    else
    {
      if (ADAM::hasEntitlementForSensorkitTelephony(void)::once != -1) {
        dispatch_once(&ADAM::hasEntitlementForSensorkitTelephony(void)::once, &__block_literal_global_76);
      }
      if (ADAM::hasEntitlementForSensorkitTelephony(void)::ans)
      {
        if (!*(unsigned char *)(v12 + 433)) {
          return 0;
        }
      }
      else
      {
        if (ADAM::isXCTest(void)::once != -1) {
          dispatch_once(&ADAM::isXCTest(void)::once, &__block_literal_global_60);
        }
        if (!ADAM::isXCTest(void)::isXCTest) {
          return 0;
        }
      }
    }
    if (std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(v12 + 16), a2))
    {
      long long v17 = a5[1];
      *(_OWORD *)int buf = *a5;
      *(_OWORD *)&buf[16] = v17;
      long long v18 = a5[3];
      long long v21 = a5[2];
      long long v22 = v18;
      uint64_t v24 = 0;
      uint64_t v23 = a4;
      long long v19 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(v12 + 16), a2);
      if (!v19) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v19[3] + 16))(v19[3], a3, buf);
    }
    else
    {
      return 1852400673;
    }
  }
  return v10;
}

void sub_2227F57D4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, __int16 a10, __int16 a11, long long a12, uint64_t a13)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  id v16 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v17 = ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
    unsigned int v18 = ++ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
    if (v17)
    {
LABEL_20:
      if (v18 > 0xBB7) {
        unsigned int v18 = 0;
      }
      ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt = v18;
      __cxa_end_catch();
      goto LABEL_32;
    }
    long long v19 = v16;
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      uint64_t v20 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v20)
      {
LABEL_19:

        unsigned int v18 = ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v20 = MEMORY[0x263EF8438];
      id v24 = MEMORY[0x263EF8438];
    }
    uint64_t v20 = v20;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "AudioDataAnalysisManager.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 272;
      a11 = 2048;
      WORD2(a12) = 2048;
      *(void *)((char *)&a12 + 6) = v14 | (unint64_t)(v13 << 32);
      HIWORD(a12) = 2080;
      a13 = v25;
      _os_log_impl(&dword_2227C1000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception %p, session %llx, %s", (uint8_t *)&a9, 0x30u);
    }

    goto LABEL_19;
  }
  int v21 = ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
  unsigned int v22 = ++ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
  if (v21)
  {
LABEL_28:
    if (v22 > 0xBB7) {
      unsigned int v22 = 0;
    }
    ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt = v22;
    __cxa_end_catch();
LABEL_32:
    JUMPOUT(0x2227F55B4);
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v23 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v23)
    {
LABEL_27:

      unsigned int v22 = ADAM::AudioDataAnalysisManager::processAudio(unsigned long long,unsigned int,AudioBufferList const&,unsigned int,AudioTimeStamp const&)::errCnt;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v23 = MEMORY[0x263EF8438];
    id v26 = MEMORY[0x263EF8438];
  }
  uint64_t v23 = v23;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(void *)((char *)&a9 + 4) = "AudioDataAnalysisManager.cpp";
    WORD6(a9) = 1024;
    LODWORD(a9) = 136315906;
    *(_DWORD *)((char *)&a9 + 14) = 274;
    a11 = 2048;
    WORD2(a12) = 2048;
    *(void *)((char *)&a12 + 6) = v14 | (unint64_t)(v13 << 32);
    _os_log_impl(&dword_2227C1000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception %p, session %llx", (uint8_t *)&a9, 0x26u);
  }

  goto LABEL_27;
}

uint64_t AudioDataAnalysisManagerProcessSPL(unint64_t a1, unsigned int a2, _OWORD *a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v16 = 1634625825;
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  if (!byte_26AB1A820) {
    return v16;
  }
  ADAM::session_lock_exclusive::session_lock_exclusive_flag::session_lock_exclusive_flag((ADAM::session_lock_exclusive::session_lock_exclusive_flag *)buf);
  if (buf[0])
  {
    int v17 = (ADAM::session_lock_exclusive *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ADAM::ClientSessionManager>>>>::find<unsigned long long>(&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, a1);
    if (v17)
    {
      uint64_t v18 = *((void *)v17 + 3);
      ADAM::session_lock_exclusive::shared_cnt(v17);
      atomic_fetch_add_explicit(&ADAM::session_lock_exclusive::shared_cnt(void)::_c, 0xFFFFFFFF, memory_order_relaxed);
      if (v18)
      {
        if (*(unsigned char *)(v18 + 432))
        {
          if (std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(v18 + 16), a2))
          {
            long long v19 = a3[1];
            *(_OWORD *)int buf = *a3;
            *(_OWORD *)&buf[16] = v19;
            long long v20 = a3[3];
            long long v28 = a3[2];
            long long v29 = v20;
            int v31 = 0;
            uint64_t v32 = 0;
            int v30 = 1;
            *(float *)id v26 = a4;
            *(float *)&v26[1] = a5;
            *(float *)&v26[2] = a6;
            *(float *)&v26[3] = a7;
            *(float *)&v26[4] = a8;
            int v21 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>((void *)(v18 + 16), a2);
            if (!v21) {
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            return (*(uint64_t (**)(uint64_t, _DWORD *, unsigned char *))(*(void *)v21[3] + 16))(v21[3], v26, buf);
          }
          else
          {
            return 1852400673;
          }
        }
        return v16;
      }
    }
    else
    {
      ADAM::session_lock_exclusive::shared_cnt(0);
      atomic_fetch_add_explicit(&ADAM::session_lock_exclusive::shared_cnt(void)::_c, 0xFFFFFFFF, memory_order_relaxed);
    }
    return 561211748;
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  uint64_t v16 = 1835102241;
  if (ADAM::ADAMLogScope(void)::scope)
  {
    id v22 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v22) {
      return v16;
    }
  }
  else
  {
    id v22 = (id)MEMORY[0x263EF8438];
    id v23 = MEMORY[0x263EF8438];
  }
  id v24 = v22;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "AudioDataAnalysisManager.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 303;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = a2 | (a1 << 32);
    _os_log_impl(&dword_2227C1000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Session %llx, Map is mutating", buf, 0x1Cu);
  }

  return v16;
}

void sub_2227F5CC8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, __int16 a14, __int16 a15, long long a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  long long v20 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v21 = ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
    unsigned int v22 = ++ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
    if (v21)
    {
LABEL_20:
      if (v22 > 0xBB7) {
        unsigned int v22 = 0;
      }
      ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt = v22;
      __cxa_end_catch();
      goto LABEL_32;
    }
    id v23 = v20;
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      id v24 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v24)
      {
LABEL_19:

        unsigned int v22 = ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
        goto LABEL_20;
      }
    }
    else
    {
      id v24 = MEMORY[0x263EF8438];
      id v28 = MEMORY[0x263EF8438];
    }
    id v24 = v24;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "AudioDataAnalysisManager.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 307;
      a15 = 2048;
      WORD2(a16) = 2048;
      *(void *)((char *)&a16 + 6) = v18 | (unint64_t)(v17 << 32);
      HIWORD(a16) = 2080;
      a17 = v29;
      _os_log_impl(&dword_2227C1000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception %p, session %llx, %s", (uint8_t *)&buf, 0x30u);
    }

    goto LABEL_19;
  }
  int v25 = ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
  unsigned int v26 = ++ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
  if (v25)
  {
LABEL_28:
    if (v26 > 0xBB7) {
      unsigned int v26 = 0;
    }
    ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt = v26;
    __cxa_end_catch();
LABEL_32:
    JUMPOUT(0x2227F5BB8);
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint32_t v27 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v27)
    {
LABEL_27:

      unsigned int v26 = ADAM::AudioDataAnalysisManager::processSPL(unsigned long long,unsigned int,float,float,float,float,float,AudioTimeStamp const&)::errCnt;
      goto LABEL_28;
    }
  }
  else
  {
    uint32_t v27 = MEMORY[0x263EF8438];
    id v30 = MEMORY[0x263EF8438];
  }
  uint32_t v27 = v27;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(void *)((char *)&buf + 4) = "AudioDataAnalysisManager.cpp";
    WORD6(buf) = 1024;
    LODWORD(buf) = 136315906;
    *(_DWORD *)((char *)&buf + 14) = 309;
    a15 = 2048;
    WORD2(a16) = 2048;
    *(void *)((char *)&a16 + 6) = v18 | (unint64_t)(v17 << 32);
    _os_log_impl(&dword_2227C1000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception %p, session %llx", (uint8_t *)&buf, 0x26u);
  }

  goto LABEL_27;
}

uint64_t AudioDataAnalysisManagerProcessEnvSPL()
{
  return 1718511905;
}

uint64_t AudioDataAnalysisManagerProcessEnvSoundClass()
{
  return 1718511905;
}

uint64_t AudioDataAnalysisManagerSetDeviceInfo(ADAM::AudioDataAnalysisManager *a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance(a1);
  uint64_t ClientSessionMananger = ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1);
  if (!ClientSessionMananger) {
    return 561211748;
  }
  if (*(void *)a2)
  {
    uint64_t v5 = ClientSessionMananger;
    unsigned int v6 = (CFStringRef *)(ClientSessionMananger + 248);
    ADAM::releaseADAMDeviceInfo(ClientSessionMananger + 248);
    ADAM::copyDeviceInfo((CFStringRef *)a2, v6);
    ADAM::logDeviceInfo((uint64_t)v6);
    unint64_t v7 = (void *)MEMORY[0x223C9DB40]();
    CFStringRef v8 = *(const __CFString **)(v5 + 248);
    if (v8)
    {
      if ((*(unsigned char *)(v5 + 280) & 4) != 0)
      {
        id v9 = @"Codec";
        uint64_t v12 = @"Codec";
      }
      else
      {
        id v9 = (id)CFStringCreateCopy(0, v8);
        if (!v9)
        {
          uint64_t v10 = 561017453;
LABEL_32:

          return v10;
        }
      }
      uint64_t v13 = *(void **)(v5 + 272);
      if (v13) {
        unsigned int v14 = (__CFString *)[v13 copy];
      }
      else {
        unsigned int v14 = &stru_26D4ECBB0;
      }
      uint64_t v16 = [NSNumber numberWithUnsignedLongLong:*(void *)(v5 + 280) & 2];
      uint64_t v17 = [NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 32) & 0x10];
      CFDictionaryRef v19 = *(const __CFDictionary **)(v5 + 288);
      if (v19)
      {
        CFDictionaryRef Copy = CFDictionaryCreateCopy(0, v19);
        int v21 = [(__CFDictionary *)Copy objectForKey:@"ScalarVolume74"];
        unsigned int v22 = v21;
        if (v21)
        {
          [v21 floatValue];
          float v24 = v23;
        }
        else
        {
          float v24 = -1.0;
        }

        unsigned int v26 = [(__CFDictionary *)Copy objectForKey:@"ScalarVolume80"];
        uint32_t v27 = v26;
        if (v26)
        {
          [v26 floatValue];
          float v25 = v28;
        }
        else
        {
          float v25 = -1.0;
        }
      }
      else
      {
        CFDictionaryRef Copy = 0;
        float v24 = -1.0;
        float v25 = -1.0;
      }
      uint64_t v29 = NSDictionary;
      *(float *)&double v18 = v24;
      id v30 = [NSNumber numberWithFloat:v18];
      *(float *)&double v31 = v25;
      uint64_t v32 = [NSNumber numberWithFloat:v31];
      uint64_t v33 = [v29 dictionaryWithObjectsAndKeys:v9, *MEMORY[0x263F41D80], v16, *MEMORY[0x263F41D90], v17, *MEMORY[0x263F41D88], v14, *MEMORY[0x263F41D78], v30, *MEMORY[0x263F41D98], v32, *MEMORY[0x263F41DA0], 0];

      __int16 v34 = [MEMORY[0x263F41DC0] sharedInstance];
      [v34 deviceSessionCreated:v33 SessionID:*(void *)(v5 + 8)];

      uint64_t v10 = 0;
      goto LABEL_32;
    }
    uint64_t v10 = 561017453;
    id v9 = 0;
    goto LABEL_32;
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  uint64_t v10 = 561017453;
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v11 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v11) {
      return v10;
    }
  }
  else
  {
    uint64_t v11 = MEMORY[0x263EF8438];
    id v15 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315394;
    int v37 = "ADAMClientSessionManager.cpp";
    __int16 v38 = 1024;
    int v39 = 119;
    _os_log_impl(&dword_2227C1000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Device name invalid", buf, 0x12u);
  }

  return v10;
}

void sub_2227F62F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227F6368()
{
}

void sub_2227F6370()
{
}

void sub_2227F6378()
{
}

uint64_t AudioDataAnalysisManagerRegisterDeviceInfo(ADAM::AudioDataAnalysisManager *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance(a1);
  if (ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1))
  {
    uint64_t v4 = [MEMORY[0x263F41DC0] sharedInstance];
    char v5 = [v4 isUSBCPort];

    if (v5)
    {
      if (*(void *)a2)
      {
        uint64_t v6 = *(void *)(a2 + 24);
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (v6)
        {
          if (ADAM::ADAMLogScope(void)::scope)
          {
            unint64_t v7 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v7) {
              goto LABEL_32;
            }
          }
          else
          {
            unint64_t v7 = MEMORY[0x263EF8438];
            id v11 = MEMORY[0x263EF8438];
          }
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            CFStringRef v12 = *(CFStringRef *)a2;
            uint64_t v13 = *(void *)(a2 + 24);
            *(_DWORD *)int buf = 136315906;
            unsigned int v26 = "ADAMClientSessionManager.cpp";
            __int16 v27 = 1024;
            int v28 = 201;
            __int16 v29 = 2112;
            CFStringRef v30 = v12;
            __int16 v31 = 2112;
            uint64_t v32 = v13;
            _os_log_impl(&dword_2227C1000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device { name: %@  UUID: %@ }", buf, 0x26u);
          }

LABEL_32:
          unsigned int v14 = (void *)MEMORY[0x223C9DB40]();
          if (*(void *)a2)
          {
            if ((*(unsigned char *)(a2 + 32) & 4) != 0)
            {
              id v15 = @"Codec";
              uint64_t v17 = @"Codec";
            }
            else
            {
              id v15 = (id)CFStringCreateCopy(0, *(CFStringRef *)a2);
              if (!v15)
              {
                uint64_t v8 = 561017453;
LABEL_43:

                return v8;
              }
            }
            CFDictionaryRef Copy = (__CFString *)CFStringCreateCopy(0, *(CFStringRef *)(a2 + 24));
            CFDictionaryRef v19 = [NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 32) & 2];
            long long v20 = [NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 32) & 0x10];
            int v21 = [NSDictionary dictionaryWithObjectsAndKeys:v15, *MEMORY[0x263F41D80], v19, *MEMORY[0x263F41D90], v20, *MEMORY[0x263F41D88], Copy, *MEMORY[0x263F41D78], 0];
            unsigned int v22 = [MEMORY[0x263F41DC0] sharedInstance];
            [v22 registerDevice:v21];

            uint64_t v8 = 0;
            goto LABEL_43;
          }
          uint64_t v8 = 561017453;
          id v15 = 0;
          goto LABEL_43;
        }
        uint64_t v8 = 561017453;
        if (ADAM::ADAMLogScope(void)::scope)
        {
          id v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v9) {
            return v8;
          }
        }
        else
        {
          id v9 = MEMORY[0x263EF8438];
          id v23 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          unsigned int v26 = "ADAMClientSessionManager.cpp";
          __int16 v27 = 1024;
          int v28 = 197;
          _os_log_impl(&dword_2227C1000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Device UID invalid", buf, 0x12u);
        }
      }
      else
      {
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        uint64_t v8 = 561017453;
        if (ADAM::ADAMLogScope(void)::scope)
        {
          id v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v9) {
            return v8;
          }
        }
        else
        {
          id v9 = MEMORY[0x263EF8438];
          id v16 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          unsigned int v26 = "ADAMClientSessionManager.cpp";
          __int16 v27 = 1024;
          int v28 = 191;
          _os_log_impl(&dword_2227C1000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Device name invalid", buf, 0x12u);
        }
      }
    }
    else
    {
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      uint64_t v8 = 561017453;
      if (ADAM::ADAMLogScope(void)::scope)
      {
        id v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
        if (!v9) {
          return v8;
        }
      }
      else
      {
        id v9 = MEMORY[0x263EF8438];
        id v10 = MEMORY[0x263EF8438];
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        unsigned int v26 = "ADAMClientSessionManager.cpp";
        __int16 v27 = 1024;
        int v28 = 185;
        _os_log_impl(&dword_2227C1000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Registration is only for USBC devices", buf, 0x12u);
      }
    }

    return v8;
  }
  return 561211748;
}

void sub_2227F685C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerSetDeviceConnectionState(ADAM::AudioDataAnalysisManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance(a1);
  if (!ADAM::AudioDataAnalysisManager::getClientSessionMananger((ADAM::AudioDataAnalysisManager *)&ADAM::AudioDataAnalysisManager::instance(void)::gAdam, (unint64_t)a1))return 561211748; {
  if (*(void *)(a2 + 24))
  }
  {
    uint64_t v6 = [MEMORY[0x263F41DC0] sharedInstance];
    if ([v6 isUSBCPort])
    {
      uint64_t v7 = *(void *)(a2 + 32);

      if ((v7 & 2) != 0)
      {
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          uint64_t v8 = *(id *)ADAM::ADAMLogScope(void)::scope;
          id v10 = v8;
          if (!v8)
          {
LABEL_27:
            uint64_t v17 = (void *)MEMORY[0x223C9DB40](v8, v9);
            CFDictionaryRef Copy = (__CFString *)CFStringCreateCopy(0, *(CFStringRef *)(a2 + 24));
            CFDictionaryRef v19 = [MEMORY[0x263F41DC0] sharedInstance];
            [v19 setDeviceConnectionState:Copy isConnected:a3];

            return 0;
          }
        }
        else
        {
          id v10 = MEMORY[0x263EF8438];
          id v14 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = "disconnected";
          unsigned int v22 = "ADAMClientSessionManager.cpp";
          __int16 v23 = 1024;
          uint64_t v16 = *(void *)(a2 + 24);
          int v21 = 136315906;
          if (a3) {
            id v15 = "connected";
          }
          int v24 = 240;
          __int16 v25 = 2112;
          uint64_t v26 = v16;
          __int16 v27 = 2080;
          int v28 = v15;
          _os_log_impl(&dword_2227C1000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device { UUID: %@ is %s}", (uint8_t *)&v21, 0x26u);
        }

        goto LABEL_27;
      }
    }
    else
    {
    }
    return 0;
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  uint64_t v11 = 561017453;
  if (ADAM::ADAMLogScope(void)::scope)
  {
    CFStringRef v12 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v12) {
      return v11;
    }
  }
  else
  {
    CFStringRef v12 = MEMORY[0x263EF8438];
    id v13 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v21 = 136315394;
    unsigned int v22 = "ADAMClientSessionManager.cpp";
    __int16 v23 = 1024;
    int v24 = 233;
    _os_log_impl(&dword_2227C1000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Device UID invalid", (uint8_t *)&v21, 0x12u);
  }

  return v11;
}

void sub_2227F6B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerStartServices(ADAM::AudioDataAnalysisManager *a1)
{
  ADAM::AudioDataAnalysisManager::instance(a1);
  ADAM::AudioDataAnalysisManager::initialize(v1);
  return 0;
}

uint64_t AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone(ADAM::AudioDataAnalysisManager *a1, void *a2)
{
  if (a1)
  {
    ADAM::AudioDataAnalysisManager::instance(a1);
    uint64_t v4 = (void *)MEMORY[0x223C9DB40]();
    if (a2) {
      id v5 = a2;
    }
    int v6 = [MEMORY[0x263F41DC8] connectedWiredDeviceIsHeadphoneWithUUID:a2];

    *(_DWORD *)a1 = v6;
  }
  return 0;
}

void sub_2227F6C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AudioDataAnalysisManagerSetApplicationBundleID(ADAM::AudioDataAnalysisManager *a1, const void *a2)
{
  ADAM::AudioDataAnalysisManager::instance(a1);
  if (a2)
  {
    CFRetain(a2);
    CFTypeID v3 = CFGetTypeID(a2);
    if (v3 != CFStringGetTypeID())
    {
      CFRelease(a2);
      a2 = 0;
    }
  }
  uint64_t v4 = (const void *)qword_26AB1A890;
  qword_26AB1A890 = (uint64_t)a2;
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

void *std::vector<std::unique_ptr<ADAM::AnalysisNodeBase>>::__swap_out_circular_buffer(void *result, void *a2)
{
  CFTypeID v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *--v2;
    void *v2 = 0;
    *(void *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  int v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<ADAM::AnalysisNodeBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::unique_ptr<ADAM::AnalysisNodeBase>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ADAM::AnalyzerManager::releaseData(ADAM::AnalyzerManager *this, const ADAM::BufferNodeDescriptorBase *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  if (v3)
  {
    if (!*((_DWORD *)a2 + 10))
    {
      unint64_t v4 = *v3;
      if (v4)
      {
        unint64_t v5 = 0;
        uint64_t v6 = 4;
        do
        {
          if (*(void *)&v3[v6])
          {
            free(*(void **)&v3[v6]);
            uint64_t v3 = (unsigned int *)*((void *)this + 3);
            unint64_t v4 = *v3;
          }
          ++v5;
          v6 += 4;
        }
        while (v5 < v4);
      }
    }
    free(v3);
  }
  *((void *)this + 3) = 0;
}

void ADAM::AudioBufferWriter::~AudioBufferWriter(ADAM::AudioBufferWriter *this)
{
  ADAM::AudioBufferWriter::~AudioBufferWriter(this);

  JUMPOUT(0x223C9D800);
}

{
  char *v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  void **v18;
  uint64_t v19;

  CFDictionaryRef v19 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D4EC518;
  uint64_t v2 = (char *)(*(uint64_t (**)(void))(**((void **)this + 11) + 56))(*((void *)this + 11));
  std::string::basic_string[abi:ne180100]<0>(__p, v2);
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    unint64_t v4 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v4) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v4 = MEMORY[0x263EF8438];
    unint64_t v5 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = __p;
    if (v10 < 0) {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    CFStringRef v12 = "FileWriter.cpp";
    id v13 = 1024;
    id v14 = 44;
    id v15 = 2048;
    uint64_t v16 = v6;
    uint64_t v17 = 2080;
    double v18 = v7;
    _os_log_impl(&dword_2227C1000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session %llx: AudioBufferWriter destroyed: %s", buf, 0x26u);
  }

LABEL_14:
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  ADAM::Writer::~Writer(this);
}

void sub_2227F70FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ADAM::AudioBufferWriter::write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int v5 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 88) + 24))(*(void *)(a1 + 88), *(unsigned int *)(a3 + 64), a2, 1);
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    uint64_t v6 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v6) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x263EF8438];
    id v7 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    int v10 = *(_DWORD *)(a1 + 96) * *(_DWORD *)(a3 + 64);
    int v13 = 136316418;
    id v14 = "FileWriter.cpp";
    __int16 v15 = 1024;
    int v16 = 35;
    __int16 v17 = 2048;
    uint64_t v18 = v8;
    __int16 v19 = 2080;
    long long v20 = v9;
    __int16 v21 = 1024;
    int v22 = v10;
    __int16 v23 = 1024;
    int v24 = v5;
    _os_log_impl(&dword_2227C1000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session %llx: AudioBufferWriter [%s] wrote %u bytes; err: %d",
      (uint8_t *)&v13,
      0x32u);
  }

LABEL_12:
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    *(void *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
  }
  return 0;
}

void ADAM::BinaryFileWriter::~BinaryFileWriter(ADAM::BinaryFileWriter *this)
{
  ADAM::BinaryFileWriter::~BinaryFileWriter(this);

  JUMPOUT(0x223C9D800);
}

{
  char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_26D4EC558;
  uint64_t v2 = (char *)this + 120;
  uint64_t v3 = (void *)((char *)this + 112);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
  }
  unint64_t v4 = MEMORY[0x263F8C2B0];
  int v5 = *MEMORY[0x263F8C2B0];
  *((void *)this + 14) = *MEMORY[0x263F8C2B0];
  *(void *)((char *)v3 + *(void *)(v5 - 24)) = *(void *)(v4 + 24);
  MEMORY[0x223C9D4F0](v2);
  std::ostream::~ostream();
  MEMORY[0x223C9D730]((char *)this + 528);
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }

  ADAM::Writer::~Writer(this);
}

uint64_t ADAM::BinaryFileWriter::write(uint64_t a1)
{
  std::ostream::write();
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  return 0;
}

void ADAM::CsvFileWriter::~CsvFileWriter(ADAM::CsvFileWriter *this)
{
  ADAM::CsvFileWriter::~CsvFileWriter(this);

  JUMPOUT(0x223C9D800);
}

{
  char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_26D4EC598;
  uint64_t v2 = (char *)this + 120;
  uint64_t v3 = (void *)((char *)this + 112);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
  }
  unint64_t v4 = MEMORY[0x263F8C2B0];
  int v5 = *MEMORY[0x263F8C2B0];
  *((void *)this + 14) = *MEMORY[0x263F8C2B0];
  *(void *)((char *)v3 + *(void *)(v5 - 24)) = *(void *)(v4 + 24);
  MEMORY[0x223C9D4F0](v2);
  std::ostream::~ostream();
  MEMORY[0x223C9D730]((char *)this + 528);
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }

  ADAM::Writer::~Writer(this);
}

uint64_t ADAM::CsvFileWriter::write(uint64_t a1, float *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
  int v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  id v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
  int v9 = ADAM::CsvFileWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
  unsigned int v10 = ++ADAM::CsvFileWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
  if (!v9)
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      uint64_t v11 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v11)
      {
LABEL_11:
        unsigned int v10 = ADAM::CsvFileWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v11 = MEMORY[0x263EF8438];
      id v12 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      double v13 = *a2;
      double v14 = a2[1];
      double v15 = a2[2];
      double v16 = a2[3];
      double v17 = a2[4];
      int v20 = 136316674;
      __int16 v21 = "FileWriter.cpp";
      __int16 v22 = 1024;
      int v23 = 86;
      __int16 v24 = 2048;
      double v25 = v13;
      __int16 v26 = 2048;
      double v27 = v14;
      __int16 v28 = 2048;
      double v29 = v15;
      __int16 v30 = 2048;
      double v31 = v16;
      __int16 v32 = 2048;
      double v33 = v17;
      _os_log_impl(&dword_2227C1000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d dBA/dBC/LKFS/VolumeGain/Duration: %f, %f, %f, %f, %f", (uint8_t *)&v20, 0x44u);
    }

    goto LABEL_11;
  }
LABEL_12:
  if (v10 > 0x63) {
    unsigned int v10 = 0;
  }
  ADAM::CsvFileWriter::write(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v10;
  uint64_t v18 = *(void *)(a1 + 72);
  if (v18)
  {
    *(void *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
  }
  return 0;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x223C9D530](v23, a1);
  if (v23[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unsigned int v10 = std::locale::use_facet(&__b, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v25 = v16;
        int64_t v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      int v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0) {
        operator delete(__b.__locale_);
      }
      if (v21 != v16) {
        goto LABEL_29;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x223C9D540](v23);
  return a1;
}

void sub_2227F7B28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x223C9D540](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2227F7AFCLL);
}

void sub_2227F7B94(_Unwind_Exception *a1)
{
}

void ADAM::HAENotificationFileWriter::~HAENotificationFileWriter(ADAM::HAENotificationFileWriter *this)
{
  ADAM::HAENotificationFileWriter::~HAENotificationFileWriter(this);

  JUMPOUT(0x223C9D800);
}

{
  char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_26D4EC5D8;
  uint64_t v2 = (char *)this + 120;
  uint64_t v3 = (void *)((char *)this + 112);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
  }
  unint64_t v4 = MEMORY[0x263F8C2B0];
  int v5 = *MEMORY[0x263F8C2B0];
  *((void *)this + 14) = *MEMORY[0x263F8C2B0];
  *(void *)((char *)v3 + *(void *)(v5 - 24)) = *(void *)(v4 + 24);
  MEMORY[0x223C9D4F0](v2);
  std::ostream::~ostream();
  MEMORY[0x223C9D730]((char *)this + 528);
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }

  ADAM::Writer::~Writer(this);
}

uint64_t ADAM::HAENotificationFileWriter::write(uint64_t a1)
{
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  unint64_t v4 = std::locale::use_facet(&v7, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v7);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5)
  {
    *(void *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  return 0;
}

void sub_2227F7E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *___Z16NewAudioCapturer20AudioCapturerOptionsPKcS1_jPK27AudioStreamBasicDescriptionRS3__block_invoke()
{
  uint64_t result = dlopen("/usr/local/lib/libAudioDiagnostics.dylib", 5);
  if (result)
  {
    uint64_t result = dlsym(result, "NewAudioCapturerImpl");
    if (result) {
      NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction = (uint64_t (*)(void, void, void, void, void, void))result;
    }
  }
  return result;
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x223C9D4E0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_2227F8020(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x223C9D730](v1);
  _Unwind_Resume(a1);
}

uint64_t ADAM::HAENotificationFileWriter::HAENotificationFileWriter(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)ADAM::Writer::Writer(a1, a2, a3, 0);
  *uint64_t v5 = &unk_26D4EC5D8;
  uint64_t v6 = v5 + 11;
  std::operator+<char>();
  uint64_t v7 = std::string::append((std::string *)__p, ".txt", 4uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v6[2] = *((void *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v6 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE3(v16) < 0) {
    operator delete(*(void **)__p);
  }
  std::ofstream::basic_ofstream((uint64_t *)(a1 + 112));
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    int v9 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v9) {
      return a1;
    }
  }
  else
  {
    int v9 = MEMORY[0x263EF8438];
    id v10 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::vector<std::csub_match> __p = 136315906;
    *(void *)&__p[4] = "FileWriter.cpp";
    __int16 v13 = 1024;
    int v14 = 98;
    __int16 v15 = 2048;
    uint64_t v16 = a2;
    __int16 v17 = 2080;
    uint64_t v18 = v6;
    _os_log_impl(&dword_2227C1000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Session %llx: Created HAE Notification File Writer: %s", __p, 0x26u);
  }

  return a1;
}

void sub_2227F8220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void ADAM::AnalysisFrameworkWriter::~AnalysisFrameworkWriter(ADAM::AnalysisFrameworkWriter *this)
{
  ADAM::AnalysisFrameworkWriter::~AnalysisFrameworkWriter(this);

  JUMPOUT(0x223C9D800);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26D4EC638;
  uint64_t v2 = *((void *)this + 11);
  if (v2 && (ADAM::releaseADAMDeviceInfo(v2), uint64_t v3 = *((void *)this + 11), *((void *)this + 11) = 0, v3))
  {
    MEMORY[0x223C9D800](v3, 0x1060C4045DA4F00);
    uint64_t v4 = *((void *)this + 11);
    *((void *)this + 11) = 0;
    if (v4) {
      MEMORY[0x223C9D800](v4, 0x1060C4045DA4F00);
    }
  }
  else
  {
    *((void *)this + 11) = 0;
  }

  ADAM::Writer::~Writer(this);
}

uint64_t ADAM::AnalysisFrameworkWriter::write(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 88)) {
    operator new();
  }
  if (a2)
  {
    uint64_t v6 = (ADAM::AudioDataAnalysisManager *)ADAM::haeMeasurementEnabled((ADAM *)*(unsigned __int8 *)(a1 + 96), *(unsigned char *)(a1 + 97));
    if (v6)
    {
      int v7 = ADAM::AnalysisFrameworkWriter::writeMediaSPLDataToDelegates(ADAM::SPLData const*,ADAM::Metadata const&)::errCnt;
      unsigned int v8 = ++ADAM::AnalysisFrameworkWriter::writeMediaSPLDataToDelegates(ADAM::SPLData const*,ADAM::Metadata const&)::errCnt;
      if (v7) {
        goto LABEL_16;
      }
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (ADAM::ADAMLogScope(void)::scope)
      {
        uint64_t v6 = (ADAM::AudioDataAnalysisManager *)*(id *)ADAM::ADAMLogScope(void)::scope;
        int v9 = v6;
        if (!v6)
        {
LABEL_15:
          unsigned int v8 = ADAM::AnalysisFrameworkWriter::writeMediaSPLDataToDelegates(ADAM::SPLData const*,ADAM::Metadata const&)::errCnt;
LABEL_16:
          if (v8 > 0x1D) {
            unsigned int v8 = 0;
          }
          ADAM::AnalysisFrameworkWriter::writeMediaSPLDataToDelegates(ADAM::SPLData const*,ADAM::Metadata const&)::errCnt = v8;
          uint64_t v42 = 0;
          int v43 = 0;
          uint64_t v44 = 0;
          ADAM::AudioDataAnalysisManager::instance(v6);
          ADAM::AudioDataAnalysisManager::getServerDelegates((uint64_t)&v49, 0x68616574u);
          p_Class isa = &v49->isa;
          __int16 v13 = v50;
          while (p_isa != (id *)v13)
          {
            id WeakRetained = objc_loadWeakRetained(p_isa);
            int v15 = [WeakRetained isActive:1751213428];

            if (v15) {
              std::vector<ADAMServerDelegate * {__weak}>::push_back[abi:ne180100]((uint64_t)&v42, p_isa);
            }
            ++p_isa;
          }
          int v16 = ADAM::AnalysisFrameworkWriter::getClientDelegates(ADAMAudioDataAnalysisType)const::errCnt;
          unsigned int v17 = ++ADAM::AnalysisFrameworkWriter::getClientDelegates(ADAMAudioDataAnalysisType)const::errCnt;
          if (v16) {
            goto LABEL_34;
          }
          if (ADAM::ADAMLogScope(void)::once != -1) {
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
          }
          if (ADAM::ADAMLogScope(void)::scope)
          {
            id v18 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v18)
            {
LABEL_33:
              unsigned int v17 = ADAM::AnalysisFrameworkWriter::getClientDelegates(ADAMAudioDataAnalysisType)const::errCnt;
LABEL_34:
              if (v17 > 0x1D) {
                unsigned int v17 = 0;
              }
              ADAM::AnalysisFrameworkWriter::getClientDelegates(ADAMAudioDataAnalysisType)const::errCnt = v17;
              *(void *)int buf = &v49;
              std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              id v49 = @"_ADAFMetadataKeyIsLoud";
              *(float *)&double v23 = *a2;
              uint64_t v24 = [NSNumber numberWithBool:*a2 >= 85.0, v23];
              size_t v25 = (void *)v24;
              int64_t v26 = *(__CFString **)(*(void *)(a1 + 88) + 24);
              if (!v26) {
                int64_t v26 = @"nil";
              }
              *(void *)int buf = v24;
              *(void *)&buf[8] = v26;
              id v50 = @"_ADAFMetadataKeyDeviceID";
              int v51 = @"_ADAFMetadataKeyHAEDataForGauge";
              double v27 = NSNumber;
              float v28 = a2[4];
              {
                if (v40)
                {
                  ADAM::Parameters::instance(v40);
                }
              double v29 = };
              *(void *)&buf[16] = v29;
              __int16 v30 = [NSDictionary dictionaryWithObjects:buf forKeys:&v49 count:3];

              id v31 = objc_alloc(MEMORY[0x263F28C28]);
              __int16 v32 = [NSNumber numberWithDouble:*a2];
              double v33 = ADAM::getSampleDateInterval(*(ADAM **)(a3 + 8), a2[4]);
              uint64_t v34 = (void *)[v31 initAudioSampleWithType:1751213428 data:v32 dateInterval:v33 metadata:v30];

              int v35 = v42;
              uint64_t v36 = v43;
              while (v35 != v36)
              {
                id v37 = objc_loadWeakRetained(v35);
                [v37 sendAudioSample:v34];

                ++v35;
              }

              __int16 v45 = &v42;
              std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
              goto LABEL_43;
            }
          }
          else
          {
            id v18 = (id)MEMORY[0x263EF8438];
            id v19 = MEMORY[0x263EF8438];
          }
          int v20 = v18;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            id v21 = +[ADAFUtil stringFromDataType:1751213428];
            uint64_t v22 = [v21 UTF8String];
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "AnalysisFrameworkWriter.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 87;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v22;
            __int16 v47 = 2048;
            uint64_t v48 = v43 - v42;
            _os_log_impl(&dword_2227C1000, v20, OS_LOG_TYPE_INFO, "%25s:%-5d number of delegates for %s : %lu", buf, 0x26u);
          }
          goto LABEL_33;
        }
      }
      else
      {
        int v9 = MEMORY[0x263EF8438];
        id v10 = MEMORY[0x263EF8438];
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(double *)&uint64_t v11 = *a2;
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "AnalysisFrameworkWriter.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 54;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "writeMediaSPLDataToDelegates";
        __int16 v47 = 2048;
        uint64_t v48 = v11;
        _os_log_impl(&dword_2227C1000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d %s : %.2f", buf, 0x26u);
      }

      goto LABEL_15;
    }
  }
LABEL_43:
  uint64_t v38 = *(void *)(a1 + 72);
  if (v38)
  {
    *(void *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(void *)v38 + 40))(v38);
  }
  return 0;
}

void sub_2227F8BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<ADAMServerDelegate * {__weak}>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_2227F8D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227F8DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227F914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_2227F9500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5rtaid14GetClientIDMapEv_block_invoke()
{
  unint64_t v1 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  unint64_t v2 = (unint64_t)&rtaid::GetClientIDMap(void)::gClientIDMap + 8;
  if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
  {
    if (*(void *)rtaid::GetClientIDMap(void)::gClientIDMap)
    {
      uint64_t v3 = **(uint64_t ***)rtaid::GetClientIDMap(void)::gClientIDMap;
      if (v3)
      {
        uint8x8_t v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientIDMap(void)::gClientIDMap + 8));
        v4.i16[0] = vaddlv_u8(v4);
        do
        {
          unint64_t v5 = v3[1];
          if (v5)
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v5 < *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1)) {
                break;
              }
              unint64_t v6 = v5 % *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
            }
            else
            {
              unint64_t v6 = v5 & (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) - 1);
            }
            if (v6) {
              break;
            }
          }
          else if (!*((_DWORD *)v3 + 4))
          {
            goto LABEL_32;
          }
          uint64_t v3 = (uint64_t *)*v3;
        }
        while (v3);
      }
    }
  }
  int v7 = operator new(0x30uLL);
  void *v7 = 0;
  v7[1] = 0;
  *((_DWORD *)v7 + 4) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 3, "Generic");
  float v8 = (float)(unint64_t)(qword_26AB1A9E8 + 1);
  if (!v1 || (float)(*(float *)&dword_26AB1A9F0 * (float)v1) < v8)
  {
    BOOL v9 = 1;
    if (v1 >= 3) {
      BOOL v9 = (v1 & (v1 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v1);
    unint64_t v11 = vcvtps_u32_f32(v8 / *(float *)&dword_26AB1A9F0);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v12);
    unint64_t v1 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  }
  __int16 v13 = (void *)rtaid::GetClientIDMap(void)::gClientIDMap;
  int v14 = *(void **)rtaid::GetClientIDMap(void)::gClientIDMap;
  if (*(void *)rtaid::GetClientIDMap(void)::gClientIDMap)
  {
    void *v7 = *v14;
LABEL_30:
    *int v14 = v7;
    goto LABEL_31;
  }
  void *v7 = qword_26AB1A9E0;
  qword_26AB1A9E0 = (uint64_t)v7;
  *__int16 v13 = &qword_26AB1A9E0;
  if (*v7)
  {
    unint64_t v15 = *(void *)(*v7 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v15 >= v1) {
        v15 %= v1;
      }
    }
    else
    {
      v15 &= v1 - 1;
    }
    int v14 = (void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v15);
    goto LABEL_30;
  }
LABEL_31:
  ++qword_26AB1A9E8;
  unint64_t v1 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
LABEL_32:
  if (v1)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v0 = v16.u32[0] >= 2uLL ? v1 != 1 : (v1 & 1) == 0;
    unsigned int v17 = *(uint64_t **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
    if (v17)
    {
      while (1)
      {
        unsigned int v17 = (uint64_t *)*v17;
        if (!v17) {
          break;
        }
        unint64_t v18 = v17[1];
        if (v18 == 1)
        {
          if (*((_DWORD *)v17 + 4) == 1) {
            goto LABEL_68;
          }
        }
        else
        {
          if (v16.u32[0] > 1uLL)
          {
            if (v18 >= v1) {
              v18 %= v1;
            }
          }
          else
          {
            v18 &= v1 - 1;
          }
          if (v18 != v0) {
            break;
          }
        }
      }
    }
  }
  id v19 = operator new(0x30uLL);
  *id v19 = 0;
  v19[1] = 1;
  *((_DWORD *)v19 + 4) = 1;
  std::string::basic_string[abi:ne180100]<0>(v19 + 3, "HAL");
  float v20 = (float)(unint64_t)(qword_26AB1A9E8 + 1);
  if (!v1 || (float)(*(float *)&dword_26AB1A9F0 * (float)v1) < v20)
  {
    BOOL v21 = 1;
    if (v1 >= 3) {
      BOOL v21 = (v1 & (v1 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v1);
    unint64_t v23 = vcvtps_u32_f32(v20 / *(float *)&dword_26AB1A9F0);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v24);
    unint64_t v1 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v1 & (v1 - 1)) != 0) {
      unint64_t v0 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) > 1uLL
    }
        || *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) != 1;
    else {
      unint64_t v0 = ~DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) & 1;
    }
  }
  uint64_t v25 = rtaid::GetClientIDMap(void)::gClientIDMap;
  int64_t v26 = *(void **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
  if (v26)
  {
    *id v19 = *v26;
LABEL_66:
    *int64_t v26 = v19;
    goto LABEL_67;
  }
  *id v19 = qword_26AB1A9E0;
  qword_26AB1A9E0 = (uint64_t)v19;
  *(void *)(v25 + 8 * v0) = &qword_26AB1A9E0;
  if (*v19)
  {
    unint64_t v27 = *(void *)(*v19 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v27 >= v1) {
        v27 %= v1;
      }
    }
    else
    {
      v27 &= v1 - 1;
    }
    int64_t v26 = (void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v27);
    goto LABEL_66;
  }
LABEL_67:
  ++qword_26AB1A9E8;
LABEL_68:
  std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[3]>(2u, 2, "VA");
  std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[3]>(3u, 3, "VP");
  std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[5]>(4u, 4, "AVVC");
  std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[5]>(5u, 5, "AQME");
  unint64_t v28 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
  {
    uint8x8_t v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientIDMap(void)::gClientIDMap + 8));
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL) {
      unint64_t v0 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= 6uLL
    }
         ? 6uLL % *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1)
         : 6;
    else {
      unint64_t v0 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & 6;
    }
    __int16 v30 = *(uint64_t ***)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
    if (v30)
    {
      for (uint64_t i = *v30; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v32 = i[1];
        if (v32 == 6)
        {
          if (*((_DWORD *)i + 4) == 6) {
            goto LABEL_108;
          }
        }
        else
        {
          if (v29.u32[0] > 1uLL)
          {
            if (v32 >= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1)) {
              v32 %= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
            }
          }
          else
          {
            v32 &= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) - 1;
          }
          if (v32 != v0) {
            break;
          }
        }
      }
    }
  }
  double v33 = operator new(0x30uLL);
  *double v33 = 0;
  v33[1] = 6;
  *((_DWORD *)v33 + 4) = 6;
  std::string::basic_string[abi:ne180100]<0>(v33 + 3, "AudioQueue");
  float v34 = (float)(unint64_t)(qword_26AB1A9E8 + 1);
  if (!v28 || (float)(*(float *)&dword_26AB1A9F0 * (float)v28) < v34)
  {
    BOOL v35 = 1;
    if (v28 >= 3) {
      BOOL v35 = (v28 & (v28 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v28);
    unint64_t v37 = vcvtps_u32_f32(v34 / *(float *)&dword_26AB1A9F0);
    if (v36 <= v37) {
      size_t v38 = v37;
    }
    else {
      size_t v38 = v36;
    }
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v38);
    unint64_t v28 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= 6uLL) {
        unint64_t v0 = 6uLL % *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      }
      else {
        unint64_t v0 = 6;
      }
    }
    else
    {
      unint64_t v0 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & 6;
    }
  }
  uint64_t v39 = rtaid::GetClientIDMap(void)::gClientIDMap;
  uint64_t v40 = *(void **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
  if (v40)
  {
    *double v33 = *v40;
LABEL_106:
    void *v40 = v33;
    goto LABEL_107;
  }
  *double v33 = qword_26AB1A9E0;
  qword_26AB1A9E0 = (uint64_t)v33;
  *(void *)(v39 + 8 * v0) = &qword_26AB1A9E0;
  if (*v33)
  {
    unint64_t v41 = *(void *)(*v33 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v41 >= v28) {
        v41 %= v28;
      }
    }
    else
    {
      v41 &= v28 - 1;
    }
    uint64_t v40 = (void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v41);
    goto LABEL_106;
  }
LABEL_107:
  ++qword_26AB1A9E8;
  unint64_t v28 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
LABEL_108:
  if (v28)
  {
    uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.u32[0] > 1uLL) {
      unint64_t v0 = v28 <= 7 ? 7 % v28 : 7;
    }
    else {
      unint64_t v0 = ((int)v28 - 1) & 7;
    }
    int v43 = *(uint64_t ***)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
    if (v43)
    {
      for (uint64_t j = *v43; j; uint64_t j = (uint64_t *)*j)
      {
        unint64_t v45 = j[1];
        if (v45 == 7)
        {
          if (*((_DWORD *)j + 4) == 7) {
            goto LABEL_148;
          }
        }
        else
        {
          if (v42.u32[0] > 1uLL)
          {
            if (v45 >= v28) {
              v45 %= v28;
            }
          }
          else
          {
            v45 &= v28 - 1;
          }
          if (v45 != v0) {
            break;
          }
        }
      }
    }
  }
  int v46 = operator new(0x30uLL);
  *int v46 = 0;
  v46[1] = 7;
  *((_DWORD *)v46 + 4) = 7;
  std::string::basic_string[abi:ne180100]<0>(v46 + 3, "RemoteIO");
  float v47 = (float)(unint64_t)(qword_26AB1A9E8 + 1);
  if (!v28 || (float)(*(float *)&dword_26AB1A9F0 * (float)v28) < v47)
  {
    BOOL v48 = 1;
    if (v28 >= 3) {
      BOOL v48 = (v28 & (v28 - 1)) != 0;
    }
    unint64_t v49 = v48 | (2 * v28);
    unint64_t v50 = vcvtps_u32_f32(v47 / *(float *)&dword_26AB1A9F0);
    if (v49 <= v50) {
      size_t v51 = v50;
    }
    else {
      size_t v51 = v49;
    }
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v51);
    unint64_t v28 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= 7uLL) {
        unint64_t v0 = 7uLL % *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      }
      else {
        unint64_t v0 = 7;
      }
    }
    else
    {
      unint64_t v0 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & 7;
    }
  }
  uint64_t v52 = rtaid::GetClientIDMap(void)::gClientIDMap;
  uint64_t v53 = *(void **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v0);
  if (v53)
  {
    *int v46 = *v53;
LABEL_146:
    *uint64_t v53 = v46;
    goto LABEL_147;
  }
  *int v46 = qword_26AB1A9E0;
  qword_26AB1A9E0 = (uint64_t)v46;
  *(void *)(v52 + 8 * v0) = &qword_26AB1A9E0;
  if (*v46)
  {
    unint64_t v54 = *(void *)(*v46 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v54 >= v28) {
        v54 %= v28;
      }
    }
    else
    {
      v54 &= v28 - 1;
    }
    uint64_t v53 = (void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v54);
    goto LABEL_146;
  }
LABEL_147:
  ++qword_26AB1A9E8;
  unint64_t v28 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
LABEL_148:
  if (v28)
  {
    uint8x8_t v55 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v55.i16[0] = vaddlv_u8(v55);
    if (v55.u32[0] > 1uLL) {
      unint64_t v2 = v28 <= 8 ? 8 % v28 : 8;
    }
    else {
      unint64_t v2 = ((int)v28 - 1) & 8;
    }
    uint64_t v56 = *(uint64_t ***)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v2);
    if (v56)
    {
      for (k = *v56; k; k = (uint64_t *)*k)
      {
        unint64_t v58 = k[1];
        if (v58 == 8)
        {
          if (*((_DWORD *)k + 4) == 8) {
            return;
          }
        }
        else
        {
          if (v55.u32[0] > 1uLL)
          {
            if (v58 >= v28) {
              v58 %= v28;
            }
          }
          else
          {
            v58 &= v28 - 1;
          }
          if (v58 != v2) {
            break;
          }
        }
      }
    }
  }
  id v59 = operator new(0x30uLL);
  *id v59 = 0;
  v59[1] = 8;
  *((_DWORD *)v59 + 4) = 8;
  std::string::basic_string[abi:ne180100]<0>(v59 + 3, "PHASE");
  float v60 = (float)(unint64_t)(qword_26AB1A9E8 + 1);
  if (!v28 || (float)(*(float *)&dword_26AB1A9F0 * (float)v28) < v60)
  {
    BOOL v61 = 1;
    if (v28 >= 3) {
      BOOL v61 = (v28 & (v28 - 1)) != 0;
    }
    unint64_t v62 = v61 | (2 * v28);
    unint64_t v63 = vcvtps_u32_f32(v60 / *(float *)&dword_26AB1A9F0);
    if (v62 <= v63) {
      size_t v64 = v63;
    }
    else {
      size_t v64 = v62;
    }
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v64);
    unint64_t v28 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= 8uLL) {
        unint64_t v2 = 8uLL % *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      }
      else {
        unint64_t v2 = 8;
      }
    }
    else
    {
      unint64_t v2 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & 8;
    }
  }
  uint64_t v65 = rtaid::GetClientIDMap(void)::gClientIDMap;
  uint64_t v66 = *(void **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v2);
  if (v66)
  {
    *id v59 = *v66;
LABEL_186:
    *uint64_t v66 = v59;
    goto LABEL_187;
  }
  *id v59 = qword_26AB1A9E0;
  qword_26AB1A9E0 = (uint64_t)v59;
  *(void *)(v65 + 8 * v2) = &qword_26AB1A9E0;
  if (*v59)
  {
    unint64_t v67 = *(void *)(*v59 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v67 >= v28) {
        v67 %= v28;
      }
    }
    else
    {
      v67 &= v28 - 1;
    }
    uint64_t v66 = (void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v67);
    goto LABEL_186;
  }
LABEL_187:
  ++qword_26AB1A9E8;
}

void sub_2227F9FC4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[3]>(unsigned int a1, int a2, char *a3)
{
  unint64_t v6 = a1;
  unint64_t v7 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientIDMap(void)::gClientIDMap + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a1;
      if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= (unint64_t)a1) {
        unint64_t v3 = (unint64_t)a1 % *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      }
    }
    else
    {
      unint64_t v3 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & a1;
    }
    BOOL v9 = *(uint64_t ***)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a1)
        {
          if (*((_DWORD *)i + 4) == a1) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1)) {
              v11 %= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
            }
          }
          else
          {
            v11 &= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  size_t v12 = operator new(0x30uLL);
  *size_t v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a2;
  std::string::basic_string[abi:ne180100]<0>(v12 + 3, a3);
  float v13 = (float)(unint64_t)(qword_26AB1A9E8 + 1);
  if (!v7 || (float)(*(float *)&dword_26AB1A9F0 * (float)v7) < v13)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_26AB1A9F0);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v17);
    unint64_t v7 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= v6) {
        unint64_t v3 = v6 % *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & v6;
    }
  }
  uint64_t v18 = rtaid::GetClientIDMap(void)::gClientIDMap;
  id v19 = *(void **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v3);
  if (v19)
  {
    *size_t v12 = *v19;
LABEL_38:
    *id v19 = v12;
    goto LABEL_39;
  }
  *size_t v12 = qword_26AB1A9E0;
  qword_26AB1A9E0 = (uint64_t)v12;
  *(void *)(v18 + 8 * v3) = &qword_26AB1A9E0;
  if (*v12)
  {
    unint64_t v20 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    id v19 = (void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++qword_26AB1A9E8;
}

void sub_2227FA228(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__emplace_unique_key_args<AIDM_ClientID,AIDM_ClientID,char const(&)[5]>(unsigned int a1, int a2, char *a3)
{
  unint64_t v6 = a1;
  unint64_t v7 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientIDMap(void)::gClientIDMap + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a1;
      if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= (unint64_t)a1) {
        unint64_t v3 = (unint64_t)a1 % *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      }
    }
    else
    {
      unint64_t v3 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & a1;
    }
    BOOL v9 = *(uint64_t ***)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a1)
        {
          if (*((_DWORD *)i + 4) == a1) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1)) {
              v11 %= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
            }
          }
          else
          {
            v11 &= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  size_t v12 = operator new(0x30uLL);
  *size_t v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a2;
  std::string::basic_string[abi:ne180100]<0>(v12 + 3, a3);
  float v13 = (float)(unint64_t)(qword_26AB1A9E8 + 1);
  if (!v7 || (float)(*(float *)&dword_26AB1A9F0 * (float)v7) < v13)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_26AB1A9F0);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(v17);
    unint64_t v7 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) <= v6) {
        unint64_t v3 = v6 % *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (DWORD2(rtaid::GetClientIDMap(void)::gClientIDMap) - 1) & v6;
    }
  }
  uint64_t v18 = rtaid::GetClientIDMap(void)::gClientIDMap;
  id v19 = *(void **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v3);
  if (v19)
  {
    *size_t v12 = *v19;
LABEL_38:
    *id v19 = v12;
    goto LABEL_39;
  }
  *size_t v12 = qword_26AB1A9E0;
  qword_26AB1A9E0 = (uint64_t)v12;
  *(void *)(v18 + 8 * v3) = &qword_26AB1A9E0;
  if (*v12)
  {
    unint64_t v20 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    id v19 = (void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++qword_26AB1A9E8;
}

void sub_2227FA46C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AIDM_ClientID,std::string>,std::__unordered_map_hasher<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::hash<AIDM_ClientID>,std::equal_to<AIDM_ClientID>,true>,std::__unordered_map_equal<AIDM_ClientID,std::__hash_value_type<AIDM_ClientID,std::string>,std::equal_to<AIDM_ClientID>,std::hash<AIDM_ClientID>,true>,std::allocator<std::__hash_value_type<AIDM_ClientID,std::string>>>::__rehash<true>(size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  size_t v2 = *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1);
  if (prime <= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1))
  {
    if (prime >= *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1)) {
      return;
    }
    unint64_t v9 = vcvtps_u32_f32((float)(unint64_t)qword_26AB1A9E8 / *(float *)&dword_26AB1A9F0);
    if (*((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) < 3uLL
      || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientIDMap(void)::gClientIDMap + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime >= v2) {
      return;
    }
    if (!prime)
    {
      BOOL v14 = (void *)rtaid::GetClientIDMap(void)::gClientIDMap;
      *(void *)&rtaid::GetClientIDMap(void)::gClientIDMap = 0;
      if (v14) {
        operator delete(v14);
      }
      *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v3 = operator new(8 * prime);
  uint8x8_t v4 = (void *)rtaid::GetClientIDMap(void)::gClientIDMap;
  *(void *)&rtaid::GetClientIDMap(void)::gClientIDMap = v3;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = 0;
  *((void *)&rtaid::GetClientIDMap(void)::gClientIDMap + 1) = prime;
  do
    *(void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v5++) = 0;
  while (prime != v5);
  unint64_t v6 = (void **)qword_26AB1A9E0;
  if (qword_26AB1A9E0)
  {
    size_t v7 = *(void *)(qword_26AB1A9E0 + 8);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime) {
        v7 %= prime;
      }
    }
    else
    {
      v7 &= prime - 1;
    }
    *(void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v7) = &qword_26AB1A9E0;
    for (i = *v6; i; size_t v7 = v13)
    {
      size_t v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime) {
          v13 %= prime;
        }
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v13))
        {
          *(void *)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v13) = v6;
          goto LABEL_31;
        }
        *unint64_t v6 = (void *)*i;
        void *i = **(void **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v13);
        **(void **)(rtaid::GetClientIDMap(void)::gClientIDMap + 8 * v13) = i;
        uint64_t i = v6;
      }
      size_t v13 = v7;
LABEL_31:
      unint64_t v6 = (void **)i;
      uint64_t i = (void *)*i;
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void rtaid::GetClientUseCaseMap(rtaid *this)
{
  {
    rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap = 0u;
    *(_OWORD *)&qword_26AB1A5D0 = 0u;
    dword_26AB1A5E0 = 1065353216;
  }
  if (rtaid::GetClientUseCaseMap(void)::onceToken != -1)
  {
    dispatch_once(&rtaid::GetClientUseCaseMap(void)::onceToken, &__block_literal_global_12);
  }
}

void ___ZN5rtaid19GetClientUseCaseMapEv_block_invoke()
{
  unint64_t v1 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
  unint64_t v2 = (unint64_t)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8;
  if (*((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1))
  {
    if (*(void *)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap)
    {
      unint64_t v3 = **(uint64_t ***)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
      if (v3)
      {
        uint8x8_t v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8));
        v4.i16[0] = vaddlv_u8(v4);
        do
        {
          unint64_t v5 = v3[1];
          if (v5)
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v5 < *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1)) {
                break;
              }
              unint64_t v6 = v5 % *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
            }
            else
            {
              unint64_t v6 = v5 & (*((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) - 1);
            }
            if (v6) {
              break;
            }
          }
          else if (!*((_WORD *)v3 + 8))
          {
            goto LABEL_32;
          }
          unint64_t v3 = (uint64_t *)*v3;
        }
        while (v3);
      }
    }
  }
  size_t v7 = operator new(0x30uLL);
  void *v7 = 0;
  v7[1] = 0;
  *((_WORD *)v7 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 3, "Generic");
  float v8 = (float)(unint64_t)(qword_26AB1A5D8 + 1);
  if (!v1 || (float)(*(float *)&dword_26AB1A5E0 * (float)v1) < v8)
  {
    BOOL v9 = 1;
    if (v1 >= 3) {
      BOOL v9 = (v1 & (v1 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v1);
    unint64_t v11 = vcvtps_u32_f32(v8 / *(float *)&dword_26AB1A5E0);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(v12);
    unint64_t v1 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
  }
  size_t v13 = (void *)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  BOOL v14 = *(void **)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  if (*(void *)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap)
  {
    void *v7 = *v14;
LABEL_30:
    *BOOL v14 = v7;
    goto LABEL_31;
  }
  void *v7 = qword_26AB1A5D0;
  qword_26AB1A5D0 = (uint64_t)v7;
  *size_t v13 = &qword_26AB1A5D0;
  if (*v7)
  {
    unint64_t v15 = *(void *)(*v7 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v15 >= v1) {
        v15 %= v1;
      }
    }
    else
    {
      v15 &= v1 - 1;
    }
    BOOL v14 = (void *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v15);
    goto LABEL_30;
  }
LABEL_31:
  ++qword_26AB1A5D8;
  unint64_t v1 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
LABEL_32:
  if (v1)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v0 = v16.u32[0] >= 2uLL ? v1 != 1 : (v1 & 1) == 0;
    size_t v17 = *(uint64_t **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
    if (v17)
    {
      while (1)
      {
        size_t v17 = (uint64_t *)*v17;
        if (!v17) {
          break;
        }
        unint64_t v18 = v17[1];
        if (v18 == 1)
        {
          if (*((_WORD *)v17 + 8) == 1) {
            goto LABEL_68;
          }
        }
        else
        {
          if (v16.u32[0] > 1uLL)
          {
            if (v18 >= v1) {
              v18 %= v1;
            }
          }
          else
          {
            v18 &= v1 - 1;
          }
          if (v18 != v0) {
            break;
          }
        }
      }
    }
  }
  id v19 = operator new(0x30uLL);
  *id v19 = 0;
  v19[1] = 1;
  *((_WORD *)v19 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(v19 + 3, "Siri");
  float v20 = (float)(unint64_t)(qword_26AB1A5D8 + 1);
  if (!v1 || (float)(*(float *)&dword_26AB1A5E0 * (float)v1) < v20)
  {
    BOOL v21 = 1;
    if (v1 >= 3) {
      BOOL v21 = (v1 & (v1 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v1);
    unint64_t v23 = vcvtps_u32_f32(v20 / *(float *)&dword_26AB1A5E0);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(v24);
    unint64_t v1 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
    BOOL v25 = 1;
    if (*((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) <= 1uLL) {
      BOOL v25 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) != 1;
    }
    if ((*((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) & (*((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap
                                                                                   + 1)
                                                                                 - 1)) != 0)
      unint64_t v0 = v25;
    else {
      unint64_t v0 = (BYTE8(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap) & 1) == 0;
    }
  }
  uint64_t v26 = rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  unint64_t v27 = *(void **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
  if (v27)
  {
    *id v19 = *v27;
LABEL_66:
    *unint64_t v27 = v19;
    goto LABEL_67;
  }
  *id v19 = qword_26AB1A5D0;
  qword_26AB1A5D0 = (uint64_t)v19;
  *(void *)(v26 + 8 * v0) = &qword_26AB1A5D0;
  if (*v19)
  {
    unint64_t v28 = *(void *)(*v19 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v28 >= v1) {
        v28 %= v1;
      }
    }
    else
    {
      v28 &= v1 - 1;
    }
    unint64_t v27 = (void *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v28);
    goto LABEL_66;
  }
LABEL_67:
  ++qword_26AB1A5D8;
  unint64_t v1 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
LABEL_68:
  if (v1)
  {
    uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL) {
      unint64_t v0 = v1 <= 2 ? 2 % v1 : 2;
    }
    else {
      unint64_t v0 = ((int)v1 - 1) & 2;
    }
    __int16 v30 = *(uint64_t ***)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
    if (v30)
    {
      for (uint64_t i = *v30; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v32 = i[1];
        if (v32 == 2)
        {
          if (*((_WORD *)i + 8) == 2) {
            goto LABEL_108;
          }
        }
        else
        {
          if (v29.u32[0] > 1uLL)
          {
            if (v32 >= v1) {
              v32 %= v1;
            }
          }
          else
          {
            v32 &= v1 - 1;
          }
          if (v32 != v0) {
            break;
          }
        }
      }
    }
  }
  double v33 = operator new(0x30uLL);
  *double v33 = 0;
  v33[1] = 2;
  *((_WORD *)v33 + 8) = 2;
  std::string::basic_string[abi:ne180100]<0>(v33 + 3, "Telephony");
  float v34 = (float)(unint64_t)(qword_26AB1A5D8 + 1);
  if (!v1 || (float)(*(float *)&dword_26AB1A5E0 * (float)v1) < v34)
  {
    BOOL v35 = 1;
    if (v1 >= 3) {
      BOOL v35 = (v1 & (v1 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v1);
    unint64_t v37 = vcvtps_u32_f32(v34 / *(float *)&dword_26AB1A5E0);
    if (v36 <= v37) {
      size_t v38 = v37;
    }
    else {
      size_t v38 = v36;
    }
    std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(v38);
    unint64_t v1 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) <= 2uLL) {
        unint64_t v0 = 2uLL % *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
      }
      else {
        unint64_t v0 = 2;
      }
    }
    else
    {
      unint64_t v0 = (DWORD2(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap) - 1) & 2;
    }
  }
  uint64_t v39 = rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  uint64_t v40 = *(void **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
  if (v40)
  {
    *double v33 = *v40;
LABEL_106:
    void *v40 = v33;
    goto LABEL_107;
  }
  *double v33 = qword_26AB1A5D0;
  qword_26AB1A5D0 = (uint64_t)v33;
  *(void *)(v39 + 8 * v0) = &qword_26AB1A5D0;
  if (*v33)
  {
    unint64_t v41 = *(void *)(*v33 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v41 >= v1) {
        v41 %= v1;
      }
    }
    else
    {
      v41 &= v1 - 1;
    }
    uint64_t v40 = (void *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v41);
    goto LABEL_106;
  }
LABEL_107:
  ++qword_26AB1A5D8;
  unint64_t v1 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
LABEL_108:
  if (v1)
  {
    uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.u32[0] > 1uLL) {
      unint64_t v0 = v1 <= 4 ? 4 % v1 : 4;
    }
    else {
      unint64_t v0 = ((int)v1 - 1) & 4;
    }
    int v43 = *(uint64_t ***)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
    if (v43)
    {
      for (uint64_t j = *v43; j; uint64_t j = (uint64_t *)*j)
      {
        unint64_t v45 = j[1];
        if (v45 == 4)
        {
          if (*((_WORD *)j + 8) == 4) {
            goto LABEL_148;
          }
        }
        else
        {
          if (v42.u32[0] > 1uLL)
          {
            if (v45 >= v1) {
              v45 %= v1;
            }
          }
          else
          {
            v45 &= v1 - 1;
          }
          if (v45 != v0) {
            break;
          }
        }
      }
    }
  }
  int v46 = operator new(0x30uLL);
  *int v46 = 0;
  v46[1] = 4;
  *((_WORD *)v46 + 8) = 4;
  std::string::basic_string[abi:ne180100]<0>(v46 + 3, "Alarms");
  float v47 = (float)(unint64_t)(qword_26AB1A5D8 + 1);
  if (!v1 || (float)(*(float *)&dword_26AB1A5E0 * (float)v1) < v47)
  {
    BOOL v48 = 1;
    if (v1 >= 3) {
      BOOL v48 = (v1 & (v1 - 1)) != 0;
    }
    unint64_t v49 = v48 | (2 * v1);
    unint64_t v50 = vcvtps_u32_f32(v47 / *(float *)&dword_26AB1A5E0);
    if (v49 <= v50) {
      size_t v51 = v50;
    }
    else {
      size_t v51 = v49;
    }
    std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(v51);
    unint64_t v1 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) <= 4uLL) {
        unint64_t v0 = 4uLL % *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
      }
      else {
        unint64_t v0 = 4;
      }
    }
    else
    {
      unint64_t v0 = (DWORD2(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap) - 1) & 4;
    }
  }
  uint64_t v52 = rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  uint64_t v53 = *(void **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v0);
  if (v53)
  {
    *int v46 = *v53;
LABEL_146:
    *uint64_t v53 = v46;
    goto LABEL_147;
  }
  *int v46 = qword_26AB1A5D0;
  qword_26AB1A5D0 = (uint64_t)v46;
  *(void *)(v52 + 8 * v0) = &qword_26AB1A5D0;
  if (*v46)
  {
    unint64_t v54 = *(void *)(*v46 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v54 >= v1) {
        v54 %= v1;
      }
    }
    else
    {
      v54 &= v1 - 1;
    }
    uint64_t v53 = (void *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v54);
    goto LABEL_146;
  }
LABEL_147:
  ++qword_26AB1A5D8;
  unint64_t v1 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
LABEL_148:
  if (v1)
  {
    uint8x8_t v55 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v55.i16[0] = vaddlv_u8(v55);
    if (v55.u32[0] > 1uLL) {
      unint64_t v2 = v1 <= 0xD ? 0xD % v1 : 13;
    }
    else {
      unint64_t v2 = ((int)v1 - 1) & 0xDLL;
    }
    uint64_t v56 = *(uint64_t ***)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v2);
    if (v56)
    {
      for (k = *v56; k; k = (uint64_t *)*k)
      {
        unint64_t v58 = k[1];
        if (v58 == 13)
        {
          if (*((_WORD *)k + 8) == 13) {
            return;
          }
        }
        else
        {
          if (v55.u32[0] > 1uLL)
          {
            if (v58 >= v1) {
              v58 %= v1;
            }
          }
          else
          {
            v58 &= v1 - 1;
          }
          if (v58 != v2) {
            break;
          }
        }
      }
    }
  }
  id v59 = operator new(0x30uLL);
  *id v59 = 0;
  v59[1] = 13;
  *((_WORD *)v59 + 8) = 13;
  std::string::basic_string[abi:ne180100]<0>(v59 + 3, "SystemSounds");
  float v60 = (float)(unint64_t)(qword_26AB1A5D8 + 1);
  if (!v1 || (float)(*(float *)&dword_26AB1A5E0 * (float)v1) < v60)
  {
    BOOL v61 = 1;
    if (v1 >= 3) {
      BOOL v61 = (v1 & (v1 - 1)) != 0;
    }
    unint64_t v62 = v61 | (2 * v1);
    unint64_t v63 = vcvtps_u32_f32(v60 / *(float *)&dword_26AB1A5E0);
    if (v62 <= v63) {
      size_t v64 = v63;
    }
    else {
      size_t v64 = v62;
    }
    std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(v64);
    unint64_t v1 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) <= 0xDuLL) {
        unint64_t v2 = 0xDuLL % *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
      }
      else {
        unint64_t v2 = 13;
      }
    }
    else
    {
      unint64_t v2 = (DWORD2(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap) - 1) & 0xDLL;
    }
  }
  uint64_t v65 = rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  uint64_t v66 = *(void **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v2);
  if (v66)
  {
    *id v59 = *v66;
LABEL_186:
    *uint64_t v66 = v59;
    goto LABEL_187;
  }
  *id v59 = qword_26AB1A5D0;
  qword_26AB1A5D0 = (uint64_t)v59;
  *(void *)(v65 + 8 * v2) = &qword_26AB1A5D0;
  if (*v59)
  {
    unint64_t v67 = *(void *)(*v59 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v67 >= v1) {
        v67 %= v1;
      }
    }
    else
    {
      v67 &= v1 - 1;
    }
    uint64_t v66 = (void *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v67);
    goto LABEL_186;
  }
LABEL_187:
  ++qword_26AB1A5D8;
}

void sub_2227FB0A4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::__rehash<true>(size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  size_t v2 = *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1);
  if (prime <= *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1))
  {
    if (prime >= *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1)) {
      return;
    }
    unint64_t v9 = vcvtps_u32_f32((float)(unint64_t)qword_26AB1A5D8 / *(float *)&dword_26AB1A5E0);
    if (*((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) < 3uLL
      || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime >= v2) {
      return;
    }
    if (!prime)
    {
      BOOL v14 = (void *)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
      *(void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap = 0;
      if (v14) {
        operator delete(v14);
      }
      *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v3 = operator new(8 * prime);
  uint8x8_t v4 = (void *)rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
  *(void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap = v3;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = 0;
  *((void *)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 1) = prime;
  do
    *(void *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v5++) = 0;
  while (prime != v5);
  unint64_t v6 = (void **)qword_26AB1A5D0;
  if (qword_26AB1A5D0)
  {
    size_t v7 = *(void *)(qword_26AB1A5D0 + 8);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime) {
        v7 %= prime;
      }
    }
    else
    {
      v7 &= prime - 1;
    }
    *(void *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v7) = &qword_26AB1A5D0;
    for (i = *v6; i; size_t v7 = v13)
    {
      size_t v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime) {
          v13 %= prime;
        }
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(void *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v13))
        {
          *(void *)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v13) = v6;
          goto LABEL_31;
        }
        *unint64_t v6 = (void *)*i;
        void *i = **(void **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v13);
        **(void **)(rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap + 8 * v13) = i;
        uint64_t i = v6;
      }
      size_t v13 = v7;
LABEL_31:
      unint64_t v6 = (void **)i;
      uint64_t i = (void *)*i;
    }
  }
}

void rtaid::GetReporterTypeInterestedMap(rtaid *this)
{
  {
    rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap = 0u;
    *(_OWORD *)&qword_26AB1A5F8 = 0u;
    dword_26AB1A608 = 1065353216;
  }
  if (rtaid::GetReporterTypeInterestedMap(void)::onceToken != -1)
  {
    dispatch_once(&rtaid::GetReporterTypeInterestedMap(void)::onceToken, &__block_literal_global_19);
  }
}

void ___ZN5rtaid28GetReporterTypeInterestedMapEv_block_invoke()
{
  unint64_t v0 = operator new(0xCuLL);
  size_t v7 = v0 + 3;
  uint8x8_t v8 = v0 + 3;
  *(void *)unint64_t v0 = 0x400000000;
  v0[2] = 6;
  std::vector<std::csub_match> __p = v0;
  std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(0, 0, (uint64_t)&__p);
  if (__p) {
    operator delete(__p);
  }
  unint64_t v1 = operator new(0x10uLL);
  std::vector<std::csub_match> __p = v1;
  *unint64_t v1 = xmmword_222805880;
  size_t v7 = v1 + 1;
  uint8x8_t v8 = v1 + 1;
  std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(1u, 1, (uint64_t)&__p);
  if (__p) {
    operator delete(__p);
  }
  size_t v2 = operator new(0x14uLL);
  size_t v7 = v2 + 5;
  uint8x8_t v8 = v2 + 5;
  v2[4] = 6;
  *(_OWORD *)size_t v2 = xmmword_222805934;
  std::vector<std::csub_match> __p = v2;
  std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(2u, 2, (uint64_t)&__p);
  if (__p) {
    operator delete(__p);
  }
  unint64_t v3 = operator new(0x10uLL);
  std::vector<std::csub_match> __p = v3;
  _OWORD *v3 = xmmword_222805890;
  size_t v7 = v3 + 1;
  uint8x8_t v8 = v3 + 1;
  std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(4u, 4, (uint64_t)&__p);
  if (__p) {
    operator delete(__p);
  }
  uint8x8_t v4 = operator new(8uLL);
  std::vector<std::csub_match> __p = v4;
  *uint8x8_t v4 = 0x600000001;
  size_t v7 = v4 + 1;
  uint8x8_t v8 = v4 + 1;
  std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(0xDu, 13, (uint64_t)&__p);
  uint64_t v5 = __p;
  if (__p)
  {
    operator delete(v5);
  }
}

void sub_2227FB504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>>>::__emplace_unique_key_args<AudioServiceType,AudioServiceType,std::vector<rtaid::AnalyzerType>>(unsigned __int16 a1, __int16 a2, uint64_t a3)
{
  unint64_t v6 = a1;
  unint64_t v7 = *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1);
  if (*((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1))
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap
                                        + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a1;
      if (*((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) <= (unint64_t)a1) {
        unint64_t v3 = (unint64_t)a1
      }
           % *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1);
    }
    else
    {
      unint64_t v3 = (DWORD2(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap) - 1) & a1;
    }
    unint64_t v9 = *(uint64_t ****)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v11 = (unint64_t)i[1];
        if (v11 == a1)
        {
          if (*((unsigned __int16 *)i + 8) == a1) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1)) {
              v11 %= *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1);
            }
          }
          else
          {
            v11 &= *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  size_t v12 = (char *)operator new(0x30uLL);
  *(void *)size_t v12 = 0;
  *((void *)v12 + 1) = v6;
  *((_WORD *)v12 + 8) = a2;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a3;
  *((void *)v12 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v13 = (float)(unint64_t)(qword_26AB1A600 + 1);
  if (!v7 || (float)(*(float *)&dword_26AB1A608 * (float)v7) < v13)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_26AB1A608);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1);
    if (*(void *)&prime > *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1)) {
      goto LABEL_30;
    }
    if (*(void *)&prime < *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1))
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_26AB1A600 / *(float *)&dword_26AB1A608);
      if (*((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) < 3uLL
        || (uint8x8_t v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap
                                                 + 8)),
            v25.i16[0] = vaddlv_u8(v25),
            v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v18 = operator new(8 * *(void *)&prime);
          id v19 = (void *)rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap;
          *(void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) = prime;
          do
            *(void *)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          BOOL v21 = (void **)qword_26AB1A5F8;
          if (qword_26AB1A5F8)
          {
            unint64_t v22 = *(void *)(qword_26AB1A5F8 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v22) = &qword_26AB1A5F8;
            for (j = *v21; j; unint64_t v22 = v28)
            {
              unint64_t v28 = j[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v28))
                {
                  *(void *)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v28) = v21;
                  goto LABEL_55;
                }
                *BOOL v21 = (void *)*j;
                void *j = **(void **)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v28);
                **(void **)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v28) = j;
                uint64_t j = v21;
              }
              unint64_t v28 = v22;
LABEL_55:
              BOOL v21 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v32 = (void *)rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap;
        *(void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap = 0;
        if (v32) {
          operator delete(v32);
        }
        unint64_t v7 = 0;
        *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v29 = rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap;
  __int16 v30 = *(void **)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v3);
  if (v30)
  {
    *(void *)size_t v12 = *v30;
LABEL_72:
    *__int16 v30 = v12;
    goto LABEL_73;
  }
  *(void *)size_t v12 = qword_26AB1A5F8;
  qword_26AB1A5F8 = (uint64_t)v12;
  *(void *)(v29 + 8 * v3) = &qword_26AB1A5F8;
  if (*(void *)v12)
  {
    unint64_t v31 = *(void *)(*(void *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    __int16 v30 = (void *)(rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++qword_26AB1A600;
}

void sub_2227FB940(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AudioServiceType,std::vector<rtaid::AnalyzerType>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void ___ZN5rtaid22GetAnalyzerToStringMapEv_block_invoke()
{
  unint64_t v1 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  unint64_t v2 = (unint64_t)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8;
  if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
  {
    if (*(void *)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap)
    {
      unint64_t v3 = **(uint64_t ***)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
      if (v3)
      {
        uint8x8_t v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8));
        v4.i16[0] = vaddlv_u8(v4);
        do
        {
          unint64_t v5 = v3[1];
          if (v5)
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v5 < *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)) {
                break;
              }
              unint64_t v6 = v5 % *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
            }
            else
            {
              unint64_t v6 = v5 & (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) - 1);
            }
            if (v6) {
              break;
            }
          }
          else if (!*((_DWORD *)v3 + 4))
          {
            goto LABEL_32;
          }
          unint64_t v3 = (uint64_t *)*v3;
        }
        while (v3);
      }
    }
  }
  unint64_t v7 = operator new(0x30uLL);
  void *v7 = 0;
  v7[1] = 0;
  *((_DWORD *)v7 + 4) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 3, "NonFinite");
  float v8 = (float)(unint64_t)(qword_26AB1AA48 + 1);
  if (!v1 || (float)(*(float *)&dword_26AB1AA50 * (float)v1) < v8)
  {
    BOOL v9 = 1;
    if (v1 >= 3) {
      BOOL v9 = (v1 & (v1 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v1);
    unint64_t v11 = vcvtps_u32_f32(v8 / *(float *)&dword_26AB1AA50);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v12);
    unint64_t v1 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  }
  float v13 = (void *)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  BOOL v14 = *(void **)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  if (*(void *)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap)
  {
    void *v7 = *v14;
LABEL_30:
    *BOOL v14 = v7;
    goto LABEL_31;
  }
  void *v7 = qword_26AB1AA40;
  qword_26AB1AA40 = (uint64_t)v7;
  *float v13 = &qword_26AB1AA40;
  if (*v7)
  {
    unint64_t v15 = *(void *)(*v7 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v15 >= v1) {
        v15 %= v1;
      }
    }
    else
    {
      v15 &= v1 - 1;
    }
    BOOL v14 = (void *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v15);
    goto LABEL_30;
  }
LABEL_31:
  ++qword_26AB1AA48;
  unint64_t v1 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
LABEL_32:
  if (v1)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v0 = v16.u32[0] >= 2uLL ? v1 != 1 : (v1 & 1) == 0;
    size_t v17 = *(uint64_t **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
    if (v17)
    {
      while (1)
      {
        size_t v17 = (uint64_t *)*v17;
        if (!v17) {
          break;
        }
        unint64_t v18 = v17[1];
        if (v18 == 1)
        {
          if (*((_DWORD *)v17 + 4) == 1) {
            goto LABEL_68;
          }
        }
        else
        {
          if (v16.u32[0] > 1uLL)
          {
            if (v18 >= v1) {
              v18 %= v1;
            }
          }
          else
          {
            v18 &= v1 - 1;
          }
          if (v18 != v0) {
            break;
          }
        }
      }
    }
  }
  id v19 = operator new(0x30uLL);
  *id v19 = 0;
  v19[1] = 1;
  *((_DWORD *)v19 + 4) = 1;
  std::string::basic_string[abi:ne180100]<0>(v19 + 3, "Silence");
  float v20 = (float)(unint64_t)(qword_26AB1AA48 + 1);
  if (!v1 || (float)(*(float *)&dword_26AB1AA50 * (float)v1) < v20)
  {
    BOOL v21 = 1;
    if (v1 >= 3) {
      BOOL v21 = (v1 & (v1 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v1);
    unint64_t v23 = vcvtps_u32_f32(v20 / *(float *)&dword_26AB1AA50);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v24);
    unint64_t v1 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    BOOL v25 = 1;
    if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 1uLL) {
      BOOL v25 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) != 1;
    }
    if ((*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) & (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap
                                                                                         + 1)
                                                                                       - 1)) != 0)
      unint64_t v0 = v25;
    else {
      unint64_t v0 = (BYTE8(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) & 1) == 0;
    }
  }
  uint64_t v26 = rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  unint64_t v27 = *(void **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
  if (v27)
  {
    *id v19 = *v27;
LABEL_66:
    *unint64_t v27 = v19;
    goto LABEL_67;
  }
  *id v19 = qword_26AB1AA40;
  qword_26AB1AA40 = (uint64_t)v19;
  *(void *)(v26 + 8 * v0) = &qword_26AB1AA40;
  if (*v19)
  {
    unint64_t v28 = *(void *)(*v19 + 8);
    if ((v1 & (v1 - 1)) != 0)
    {
      if (v28 >= v1) {
        v28 %= v1;
      }
    }
    else
    {
      v28 &= v1 - 1;
    }
    unint64_t v27 = (void *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v28);
    goto LABEL_66;
  }
LABEL_67:
  ++qword_26AB1AA48;
LABEL_68:
  std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType,char const(&)[22]>(2u, 2, "SampleAccurateSilence");
  unint64_t v29 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
  {
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8));
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL) {
      unint64_t v0 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 3uLL
    }
         ? 3uLL % *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)
         : 3;
    else {
      unint64_t v0 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & 3;
    }
    unint64_t v31 = *(uint64_t ***)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
    if (v31)
    {
      for (uint64_t i = *v31; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v33 = i[1];
        if (v33 == 3)
        {
          if (*((_DWORD *)i + 4) == 3) {
            goto LABEL_108;
          }
        }
        else
        {
          if (v30.u32[0] > 1uLL)
          {
            if (v33 >= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)) {
              v33 %= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
            }
          }
          else
          {
            v33 &= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) - 1;
          }
          if (v33 != v0) {
            break;
          }
        }
      }
    }
  }
  float v34 = operator new(0x30uLL);
  void *v34 = 0;
  v34[1] = 3;
  *((_DWORD *)v34 + 4) = 3;
  std::string::basic_string[abi:ne180100]<0>(v34 + 3, "Overload");
  float v35 = (float)(unint64_t)(qword_26AB1AA48 + 1);
  if (!v29 || (float)(*(float *)&dword_26AB1AA50 * (float)v29) < v35)
  {
    BOOL v36 = 1;
    if (v29 >= 3) {
      BOOL v36 = (v29 & (v29 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v29);
    unint64_t v38 = vcvtps_u32_f32(v35 / *(float *)&dword_26AB1AA50);
    if (v37 <= v38) {
      size_t v39 = v38;
    }
    else {
      size_t v39 = v37;
    }
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v39);
    unint64_t v29 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 3uLL) {
        unint64_t v0 = 3uLL % *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
      }
      else {
        unint64_t v0 = 3;
      }
    }
    else
    {
      unint64_t v0 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & 3;
    }
  }
  uint64_t v40 = rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  unint64_t v41 = *(void **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
  if (v41)
  {
    void *v34 = *v41;
LABEL_106:
    *unint64_t v41 = v34;
    goto LABEL_107;
  }
  void *v34 = qword_26AB1AA40;
  qword_26AB1AA40 = (uint64_t)v34;
  *(void *)(v40 + 8 * v0) = &qword_26AB1AA40;
  if (*v34)
  {
    unint64_t v42 = *(void *)(*v34 + 8);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v42 >= v29) {
        v42 %= v29;
      }
    }
    else
    {
      v42 &= v29 - 1;
    }
    unint64_t v41 = (void *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v42);
    goto LABEL_106;
  }
LABEL_107:
  ++qword_26AB1AA48;
LABEL_108:
  std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType,char const(&)[22]>(4u, 4, "AnalyzerRealTimeError");
  unint64_t v43 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
  {
    uint8x8_t v44 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8));
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL) {
      unint64_t v0 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 5uLL
    }
         ? 5uLL % *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)
         : 5;
    else {
      unint64_t v0 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & 5;
    }
    unint64_t v45 = *(uint64_t ***)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
    if (v45)
    {
      for (uint64_t j = *v45; j; uint64_t j = (uint64_t *)*j)
      {
        unint64_t v47 = j[1];
        if (v47 == 5)
        {
          if (*((_DWORD *)j + 4) == 5) {
            goto LABEL_148;
          }
        }
        else
        {
          if (v44.u32[0] > 1uLL)
          {
            if (v47 >= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)) {
              v47 %= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
            }
          }
          else
          {
            v47 &= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) - 1;
          }
          if (v47 != v0) {
            break;
          }
        }
      }
    }
  }
  BOOL v48 = operator new(0x30uLL);
  *BOOL v48 = 0;
  v48[1] = 5;
  *((_DWORD *)v48 + 4) = 5;
  std::string::basic_string[abi:ne180100]<0>(v48 + 3, "TelephonyChainRMS");
  float v49 = (float)(unint64_t)(qword_26AB1AA48 + 1);
  if (!v43 || (float)(*(float *)&dword_26AB1AA50 * (float)v43) < v49)
  {
    BOOL v50 = 1;
    if (v43 >= 3) {
      BOOL v50 = (v43 & (v43 - 1)) != 0;
    }
    unint64_t v51 = v50 | (2 * v43);
    unint64_t v52 = vcvtps_u32_f32(v49 / *(float *)&dword_26AB1AA50);
    if (v51 <= v52) {
      size_t v53 = v52;
    }
    else {
      size_t v53 = v51;
    }
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v53);
    unint64_t v43 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    if ((v43 & (v43 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 5uLL) {
        unint64_t v0 = 5uLL % *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
      }
      else {
        unint64_t v0 = 5;
      }
    }
    else
    {
      unint64_t v0 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & 5;
    }
  }
  uint64_t v54 = rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  uint8x8_t v55 = *(void **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v0);
  if (v55)
  {
    *BOOL v48 = *v55;
LABEL_146:
    void *v55 = v48;
    goto LABEL_147;
  }
  *BOOL v48 = qword_26AB1AA40;
  qword_26AB1AA40 = (uint64_t)v48;
  *(void *)(v54 + 8 * v0) = &qword_26AB1AA40;
  if (*v48)
  {
    unint64_t v56 = *(void *)(*v48 + 8);
    if ((v43 & (v43 - 1)) != 0)
    {
      if (v56 >= v43) {
        v56 %= v43;
      }
    }
    else
    {
      v56 &= v43 - 1;
    }
    uint8x8_t v55 = (void *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v56);
    goto LABEL_146;
  }
LABEL_147:
  ++qword_26AB1AA48;
  unint64_t v43 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
LABEL_148:
  if (v43)
  {
    uint8x8_t v57 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
    v57.i16[0] = vaddlv_u8(v57);
    if (v57.u32[0] > 1uLL) {
      unint64_t v2 = v43 <= 6 ? 6 % v43 : 6;
    }
    else {
      unint64_t v2 = ((int)v43 - 1) & 6;
    }
    unint64_t v58 = *(uint64_t ***)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v2);
    if (v58)
    {
      for (k = *v58; k; k = (uint64_t *)*k)
      {
        unint64_t v60 = k[1];
        if (v60 == 6)
        {
          if (*((_DWORD *)k + 4) == 6) {
            return;
          }
        }
        else
        {
          if (v57.u32[0] > 1uLL)
          {
            if (v60 >= v43) {
              v60 %= v43;
            }
          }
          else
          {
            v60 &= v43 - 1;
          }
          if (v60 != v2) {
            break;
          }
        }
      }
    }
  }
  BOOL v61 = operator new(0x30uLL);
  *BOOL v61 = 0;
  v61[1] = 6;
  *((_DWORD *)v61 + 4) = 6;
  std::string::basic_string[abi:ne180100]<0>(v61 + 3, "RMS");
  float v62 = (float)(unint64_t)(qword_26AB1AA48 + 1);
  if (!v43 || (float)(*(float *)&dword_26AB1AA50 * (float)v43) < v62)
  {
    BOOL v63 = 1;
    if (v43 >= 3) {
      BOOL v63 = (v43 & (v43 - 1)) != 0;
    }
    unint64_t v64 = v63 | (2 * v43);
    unint64_t v65 = vcvtps_u32_f32(v62 / *(float *)&dword_26AB1AA50);
    if (v64 <= v65) {
      size_t v66 = v65;
    }
    else {
      size_t v66 = v64;
    }
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v66);
    unint64_t v43 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    if ((v43 & (v43 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= 6uLL) {
        unint64_t v2 = 6uLL % *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
      }
      else {
        unint64_t v2 = 6;
      }
    }
    else
    {
      unint64_t v2 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & 6;
    }
  }
  uint64_t v67 = rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  id v68 = *(void **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v2);
  if (v68)
  {
    *BOOL v61 = *v68;
LABEL_186:
    void *v68 = v61;
    goto LABEL_187;
  }
  *BOOL v61 = qword_26AB1AA40;
  qword_26AB1AA40 = (uint64_t)v61;
  *(void *)(v67 + 8 * v2) = &qword_26AB1AA40;
  if (*v61)
  {
    unint64_t v69 = *(void *)(*v61 + 8);
    if ((v43 & (v43 - 1)) != 0)
    {
      if (v69 >= v43) {
        v69 %= v43;
      }
    }
    else
    {
      v69 &= v43 - 1;
    }
    id v68 = (void *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v69);
    goto LABEL_186;
  }
LABEL_187:
  ++qword_26AB1AA48;
}

void sub_2227FC2EC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__emplace_unique_key_args<rtaid::AnalyzerType,rtaid::AnalyzerType,char const(&)[22]>(unsigned int a1, int a2, char *a3)
{
  unint64_t v6 = a1;
  unint64_t v7 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a1;
      if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= (unint64_t)a1) {
        unint64_t v3 = (unint64_t)a1 % *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
      }
    }
    else
    {
      unint64_t v3 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & a1;
    }
    BOOL v9 = *(uint64_t ***)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a1)
        {
          if (*((_DWORD *)i + 4) == a1) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)) {
              v11 %= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
            }
          }
          else
          {
            v11 &= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  size_t v12 = operator new(0x30uLL);
  *size_t v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a2;
  std::string::basic_string[abi:ne180100]<0>(v12 + 3, a3);
  float v13 = (float)(unint64_t)(qword_26AB1AA48 + 1);
  if (!v7 || (float)(*(float *)&dword_26AB1AA50 * (float)v7) < v13)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_26AB1AA50);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(v17);
    unint64_t v7 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= v6) {
        unint64_t v3 = v6 % *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & v6;
    }
  }
  uint64_t v18 = rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  id v19 = *(void **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v3);
  if (v19)
  {
    *size_t v12 = *v19;
LABEL_38:
    *id v19 = v12;
    goto LABEL_39;
  }
  *size_t v12 = qword_26AB1AA40;
  qword_26AB1AA40 = (uint64_t)v12;
  *(void *)(v18 + 8 * v3) = &qword_26AB1AA40;
  if (*v12)
  {
    unint64_t v20 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    id v19 = (void *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++qword_26AB1AA48;
}

void sub_2227FC550(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AIDM_ClientID,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::__rehash<true>(size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  size_t v2 = *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
  if (prime <= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1))
  {
    if (prime >= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)) {
      return;
    }
    unint64_t v9 = vcvtps_u32_f32((float)(unint64_t)qword_26AB1AA48 / *(float *)&dword_26AB1AA50);
    if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) < 3uLL
      || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime >= v2) {
      return;
    }
    if (!prime)
    {
      BOOL v14 = (void *)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
      *(void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap = 0;
      if (v14) {
        operator delete(v14);
      }
      *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v3 = operator new(8 * prime);
  uint8x8_t v4 = (void *)rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap;
  *(void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap = v3;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = 0;
  *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) = prime;
  do
    *(void *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v5++) = 0;
  while (prime != v5);
  unint64_t v6 = (void **)qword_26AB1AA40;
  if (qword_26AB1AA40)
  {
    size_t v7 = *(void *)(qword_26AB1AA40 + 8);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime) {
        v7 %= prime;
      }
    }
    else
    {
      v7 &= prime - 1;
    }
    *(void *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v7) = &qword_26AB1AA40;
    for (i = *v6; i; size_t v7 = v13)
    {
      size_t v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime) {
          v13 %= prime;
        }
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(void *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v13))
        {
          *(void *)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v13) = v6;
          goto LABEL_31;
        }
        *unint64_t v6 = (void *)*i;
        void *i = **(void **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v13);
        **(void **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v13) = i;
        uint64_t i = v6;
      }
      size_t v13 = v7;
LABEL_31:
      unint64_t v6 = (void **)i;
      uint64_t i = (void *)*i;
    }
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        unint64_t v6 = (uint64_t **)v5;
        uint8x8_t v8 = v5 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v5 = *v6;
        unint64_t v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2) & 0x80) == 0) {
        return v6;
      }
      unint64_t v9 = v6 + 1;
      uint64_t v5 = v6[1];
    }
    while (v5);
  }
  else
  {
    unint64_t v9 = a1 + 1;
  }
LABEL_9:
  uint8x8_t v10 = (uint64_t *)v6;
  unint64_t v6 = (uint64_t **)operator new(0x50uLL);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  uint64_t v11 = *(uint64_t **)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  v6[6] = v11;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *unint64_t v6 = 0;
  v6[1] = 0;
  v6[2] = v10;
  *unint64_t v9 = (uint64_t *)v6;
  size_t v12 = (uint64_t *)**a1;
  size_t v13 = (uint64_t *)v6;
  if (v12)
  {
    *a1 = v12;
    size_t v13 = *v9;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v6;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    size_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    size_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void rtaid::handleRMSIssue(std::string *a1, uint64_t a2, void *a3, const std::string *a4, char **a5)
{
  size_t v7 = a1;
  uint64_t v136 = *MEMORY[0x263EF8340];
  memset(v125, 0, 24);
  memset(&v124, 0, sizeof(v124));
  if (!HIDWORD(a1[11].__r_.__value_.__r.__words[1])) {
    goto LABEL_29;
  }
  unint64_t v8 = 0;
  unint64_t v9 = (float *)&a1[12];
  do
  {
    uint64_t v10 = v125[23];
    if (v125[23] < 0) {
      uint64_t v10 = *(void *)&v125[8];
    }
    if (v10) {
      std::string::append((std::string *)v125, ", ", 2uLL);
    }
    std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v124.__r_.__value_.__l.__size_;
    }
    if (size) {
      std::string::append(&v124, ", ", 2uLL);
    }
    std::to_string(&v123, *(v9 - 1));
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v12 = &v123;
    }
    else {
      size_t v12 = (std::string *)v123.__r_.__value_.__r.__words[0];
    }
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = v123.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)v125, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
    std::to_string(&v123, *v9);
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v14 = &v123;
    }
    else {
      BOOL v14 = (std::string *)v123.__r_.__value_.__r.__words[0];
    }
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = v123.__r_.__value_.__l.__size_;
    }
    a1 = std::string::append(&v124, (const std::string::value_type *)v14, v15);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
    ++v8;
    v9 += 2;
  }
  while (v8 < HIDWORD(v7[11].__r_.__value_.__r.__words[1]));
  if ((v125[23] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v125, *(std::string::size_type *)&v125[8]);
  }
  else {
LABEL_29:
  }
    std::string __str = *(std::string *)v125;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v122, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v122 = v124;
  }
  if ((v125[23] & 0x80000000) != 0) {
    operator delete(*(void **)v125);
  }
  unint64_t v16 = a3;
  float v17 = *((float *)&v7[11].__r_.__value_.__r.__words[2] + 1);
  float v18 = *(float *)&v7[12].__r_.__value_.__l.__data_;
  rtaid::GetClientUseCaseMap((rtaid *)a1);
  id v19 = std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::find<AudioServiceType>(&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap, 4u);
  if (!v19) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v20 = (char *)*((unsigned __int8 *)a5 + 23);
  if ((char)v20 >= 0) {
    BOOL v21 = (char *)a5;
  }
  else {
    BOOL v21 = *a5;
  }
  size_t v24 = v19[3];
  unint64_t v22 = v19 + 3;
  unint64_t v23 = v24;
  int v25 = *((char *)v22 + 23);
  if (v25 >= 0) {
    uint64_t v26 = v22;
  }
  else {
    uint64_t v26 = (uint64_t **)v23;
  }
  if (v25 >= 0) {
    int64_t v27 = *((unsigned __int8 *)v22 + 23);
  }
  else {
    int64_t v27 = (int64_t)v22[1];
  }
  if (!v27) {
    goto LABEL_104;
  }
  if ((char)v20 < 0) {
    unint64_t v20 = a5[1];
  }
  if ((uint64_t)v20 >= v27)
  {
    uint8x8_t v44 = &v20[(void)v21];
    int v45 = *(char *)v26;
    int v46 = v21;
    while (1)
    {
      unint64_t v47 = &v20[-v27];
      if (v47 == (char *)-1) {
        goto LABEL_51;
      }
      BOOL v48 = (char *)memchr(v46, v45, (size_t)(v47 + 1));
      if (!v48) {
        goto LABEL_51;
      }
      float v49 = v48;
      if (!memcmp(v48, v26, v27)) {
        break;
      }
      int v46 = v49 + 1;
      unint64_t v20 = (char *)(v44 - (v49 + 1));
      if ((uint64_t)v20 < v27) {
        goto LABEL_51;
      }
    }
    if (v49 != v44 && v49 - v21 != -1)
    {
LABEL_104:
      if (v17 > -55.0 || v17 <= -120.0)
      {
        *(_OWORD *)&v125[8] = 0uLL;
        *(void *)unint64_t v125 = &v125[8];
        std::string::basic_string[abi:ne180100]<0>(&v124, "rtaid_client");
        unint64_t v58 = a4;
        uint64_t v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
        std::string::operator=((std::string *)(v67 + 7), a4);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        std::to_string(&v124, *(double *)&v7[20].__r_.__value_.__l.__size_);
        std::string::basic_string[abi:ne180100]<0>(&v123, "issue_detected_sample_time");
        id v68 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v123, (uint64_t)&v123);
        unint64_t v69 = (void **)(v68 + 7);
        if (*((char *)v68 + 79) < 0) {
          operator delete(*v69);
        }
        *(std::string *)unint64_t v69 = v124;
        *((unsigned char *)&v124.__r_.__value_.__s + 23) = 0;
        v124.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v123.__r_.__value_.__l.__data_);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v124, "node");
        id v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
        std::string::__assign_external((std::string *)(v70 + 7), (const std::string::value_type *)v7);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v124, "alarms_rms");
        int64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
        std::string::operator=((std::string *)(v71 + 7), &__str);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v124, "alarms_peak");
        id v72 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
        std::string::operator=((std::string *)(v72 + 7), &v122);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v124, "report_type");
        unint64_t v73 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
        if (*((char *)v73 + 79) < 0)
        {
          v73[8] = (uint64_t *)3;
          long long v74 = v73[7];
        }
        else
        {
          long long v74 = (uint64_t *)(v73 + 7);
          *((unsigned char *)v73 + 79) = 3;
        }
        *(_DWORD *)long long v74 = 5459282;
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        int v75 = (*(uint64_t (**)(void))(*(void *)v16[3] + 16))(v16[3]);
        if (LODWORD(v7[10].__r_.__value_.__r.__words[2]) == 1) {
          int v76 = 1;
        }
        else {
          int v76 = v75;
        }
        if (v76 != 1)
        {
LABEL_148:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)&v125[8]);
          {
            rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
          }
          uint64_t v78 = rtaid::get_log(void)::rtaid_os_log;
          if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)a5 + 23) >= 0) {
              uint64_t v79 = (char *)a5;
            }
            else {
              uint64_t v79 = *a5;
            }
            if ((v58->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v80 = v58;
            }
            else {
              uint64_t v80 = (const std::string *)v58->__r_.__value_.__r.__words[0];
            }
            std::string::size_type v81 = v7[20].__r_.__value_.__l.__size_;
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v83 = &v122;
            }
            else {
              uint64_t v83 = (std::string *)v122.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)unint64_t v125 = 136316930;
            *(void *)&v125[4] = "IssueReporting.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 432;
            *(_WORD *)&v125[18] = 2080;
            *(void *)&v125[20] = v79;
            __int16 v126 = 2080;
            uint64_t v127 = v80;
            __int16 v128 = 2080;
            uint64_t v129 = v7;
            __int16 v130 = 2048;
            std::string::size_type v131 = v81;
            __int16 v132 = 2080;
            int v133 = p_str;
            __int16 v134 = 2080;
            uint64_t v135 = v83;
            id v84 = "%s:%-5d RTAID [ use_case=%s report_type=Alarms RMS Chain clientID=%s node=%s issue_detected_sample_tim"
                  "e=%f ] -- [ rms:[%s], peaks:[%s] ] ";
            goto LABEL_250;
          }
          goto LABEL_251;
        }
        id v77 = *(void (**)(void))(*(void *)*v16 + 24);
      }
      else
      {
        *(_OWORD *)&v125[8] = 0uLL;
        *(void *)unint64_t v125 = &v125[8];
        std::string::basic_string[abi:ne180100]<0>(&v124, "rtaid_client");
        unint64_t v58 = a4;
        id v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
        std::string::operator=((std::string *)(v59 + 7), a4);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        std::to_string(&v124, *(double *)&v7[20].__r_.__value_.__l.__size_);
        std::string::basic_string[abi:ne180100]<0>(&v123, "issue_detected_sample_time");
        unint64_t v60 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v123, (uint64_t)&v123);
        BOOL v61 = (void **)(v60 + 7);
        if (*((char *)v60 + 79) < 0) {
          operator delete(*v61);
        }
        *(std::string *)BOOL v61 = v124;
        *((unsigned char *)&v124.__r_.__value_.__s + 23) = 0;
        v124.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v123.__r_.__value_.__l.__data_);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v124, "node");
        float v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
        std::string::__assign_external((std::string *)(v62 + 7), (const std::string::value_type *)v7);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v124, "alarms_rms");
        BOOL v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
        std::string::operator=((std::string *)(v63 + 7), &__str);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v124, "alarms_peak");
        unint64_t v64 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
        std::string::operator=((std::string *)(v64 + 7), &v122);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v124, "issue_type");
        unint64_t v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
        if (*((char *)v65 + 79) < 0)
        {
          v65[8] = (uint64_t *)6;
          size_t v66 = (char *)v65[7];
        }
        else
        {
          size_t v66 = (char *)(v65 + 7);
          *((unsigned char *)v65 + 79) = 6;
        }
        strcpy(v66, "LowRMS");
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        id v77 = *(void (**)(void))(*(void *)*v16 + 24);
      }
      v77();
      goto LABEL_148;
    }
  }
LABEL_51:
  uint64_t v28 = v7[13].__r_.__value_.__s.__data_[4];
  if (v7[13].__r_.__value_.__s.__data_[4])
  {
    unint64_t v29 = &v7[18].__r_.__value_.__r.__words[2];
    do
    {
      int v30 = *(unsigned __int16 *)v29;
      unint64_t v29 = (std::string::size_type *)((char *)v29 + 2);
      if (v30 != 13) {
        goto LABEL_74;
      }
      --v28;
    }
    while (v28);
    if (v17 > -70.0 && v18 > -60.0)
    {
      *(_OWORD *)&v125[8] = 0uLL;
      *(void *)unint64_t v125 = &v125[8];
      std::string::basic_string[abi:ne180100]<0>(&v124, "rtaid_client");
      BOOL v50 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
      std::string::operator=((std::string *)(v50 + 7), a4);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::to_string(&v124, *(double *)&v7[20].__r_.__value_.__l.__size_);
      std::string::basic_string[abi:ne180100]<0>(&v123, "issue_detected_sample_time");
      unint64_t v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v123, (uint64_t)&v123);
      unint64_t v52 = (void **)(v51 + 7);
      if (*((char *)v51 + 79) < 0) {
        operator delete(*v52);
      }
      *(std::string *)unint64_t v52 = v124;
      *((unsigned char *)&v124.__r_.__value_.__s + 23) = 0;
      v124.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v123.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v124, "node");
      size_t v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
      std::string::__assign_external((std::string *)(v53 + 7), (const std::string::value_type *)v7);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v124, "systemSounds_rms");
      uint64_t v54 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
      std::string::operator=((std::string *)(v54 + 7), &__str);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v124, "systemSounds_peak");
      uint8x8_t v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
      std::string::operator=((std::string *)(v55 + 7), &v122);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v124, "report_type");
      unint64_t v56 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
      if (*((char *)v56 + 79) < 0)
      {
        v56[8] = (uint64_t *)3;
        uint8x8_t v57 = v56[7];
      }
      else
      {
        uint8x8_t v57 = (uint64_t *)(v56 + 7);
        *((unsigned char *)v56 + 79) = 3;
      }
      *(_DWORD *)uint8x8_t v57 = 5459282;
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      int v110 = (*(uint64_t (**)(void))(*(void *)v16[3] + 16))(v16[3]);
      if (LODWORD(v7[10].__r_.__value_.__r.__words[2]) == 1) {
        int v111 = 1;
      }
      else {
        int v111 = v110;
      }
      if (v111 != 1)
      {
LABEL_236:
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)&v125[8]);
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        uint64_t v78 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a5 + 23) >= 0) {
            BOOL v112 = (char *)a5;
          }
          else {
            BOOL v112 = *a5;
          }
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v113 = a4;
          }
          else {
            unint64_t v113 = (const std::string *)a4->__r_.__value_.__r.__words[0];
          }
          std::string::size_type v114 = v7[20].__r_.__value_.__l.__size_;
          id v115 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            id v115 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            id v116 = &v122;
          }
          else {
            id v116 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)unint64_t v125 = 136316930;
          *(void *)&v125[4] = "IssueReporting.cpp";
          *(_WORD *)&v125[12] = 1024;
          *(_DWORD *)&v125[14] = 462;
          *(_WORD *)&v125[18] = 2080;
          *(void *)&v125[20] = v112;
          __int16 v126 = 2080;
          uint64_t v127 = v113;
          __int16 v128 = 2080;
          uint64_t v129 = v7;
          __int16 v130 = 2048;
          std::string::size_type v131 = v114;
          __int16 v132 = 2080;
          int v133 = v115;
          __int16 v134 = 2080;
          uint64_t v135 = v116;
          id v84 = "%s:%-5d RTAID [ use_case=%s report_type=System Sounds RMS Chain clientID=%s node=%s issue_detected_sampl"
                "e_time=%f ] -- [ rms:[%s], peaks:[%s] ] ";
          goto LABEL_250;
        }
        goto LABEL_251;
      }
      uint64_t v109 = *(void (**)(void))(*(void *)*v16 + 24);
    }
    else
    {
      *(_OWORD *)&v125[8] = 0uLL;
      *(void *)unint64_t v125 = &v125[8];
      std::string::basic_string[abi:ne180100]<0>(&v124, "rtaid_client");
      unint64_t v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
      std::string::operator=((std::string *)(v32 + 7), a4);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::to_string(&v124, *(double *)&v7[20].__r_.__value_.__l.__size_);
      std::string::basic_string[abi:ne180100]<0>(&v123, "issue_detected_sample_time");
      unint64_t v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v123, (uint64_t)&v123);
      float v34 = (void **)(v33 + 7);
      if (*((char *)v33 + 79) < 0) {
        operator delete(*v34);
      }
      *(std::string *)float v34 = v124;
      *((unsigned char *)&v124.__r_.__value_.__s + 23) = 0;
      v124.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v123.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v124, "node");
      float v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
      std::string::__assign_external((std::string *)(v35 + 7), (const std::string::value_type *)v7);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v124, "systemSounds_rms");
      BOOL v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
      std::string::operator=((std::string *)(v36 + 7), &__str);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v124, "systemSounds_peak");
      unint64_t v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
      std::string::operator=((std::string *)(v37 + 7), &v122);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v124, "issue_type");
      unint64_t v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v125, &v124, (uint64_t)&v124);
      if (*((char *)v38 + 79) < 0)
      {
        v38[8] = (uint64_t *)6;
        size_t v39 = (char *)v38[7];
      }
      else
      {
        size_t v39 = (char *)(v38 + 7);
        *((unsigned char *)v38 + 79) = 6;
      }
      strcpy(v39, "LowRMS");
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      uint64_t v109 = *(void (**)(void))(*(void *)*v16 + 24);
    }
    v109();
    goto LABEL_236;
  }
LABEL_74:
  int v40 = (*(uint64_t (**)(void))(*(void *)v16[3] + 16))(v16[3]);
  if (LODWORD(v7[10].__r_.__value_.__r.__words[2]) == 1) {
    int v41 = 1;
  }
  else {
    int v41 = v40;
  }
  if (v41 == 1)
  {
    *(_OWORD *)&v124.__r_.__value_.__r.__words[1] = 0uLL;
    v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]<0>(v125, "report_type");
    unint64_t v42 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v124, v125, (uint64_t)v125);
    if (*((char *)v42 + 79) < 0)
    {
      v42[8] = (uint64_t *)3;
      unint64_t v43 = v42[7];
    }
    else
    {
      unint64_t v43 = (uint64_t *)(v42 + 7);
      *((unsigned char *)v42 + 79) = 3;
    }
    *(_DWORD *)unint64_t v43 = 5459282;
    if ((v125[23] & 0x80000000) != 0) {
      operator delete(*(void **)v125);
    }
    std::string::basic_string[abi:ne180100]<0>(v125, "rtaid_client");
    long long v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v124, v125, (uint64_t)v125);
    std::string::operator=((std::string *)(v85 + 7), a4);
    if ((v125[23] & 0x80000000) != 0) {
      operator delete(*(void **)v125);
    }
    std::to_string((std::string *)v125, *(double *)&v7[20].__r_.__value_.__l.__size_);
    std::string::basic_string[abi:ne180100]<0>(&v123, "issue_detected_sample_time");
    std::string v86 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v124, &v123, (uint64_t)&v123);
    std::string v87 = v86 + 7;
    if (*((char *)v86 + 79) < 0) {
      operator delete(*v87);
    }
    *(_OWORD *)std::string v87 = *(_OWORD *)v125;
    v87[2] = *(uint64_t **)&v125[16];
    v125[23] = 0;
    v125[0] = 0;
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v123.__r_.__value_.__l.__data_);
      if ((v125[23] & 0x80000000) != 0) {
        operator delete(*(void **)v125);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v125, "node");
    int64_t v88 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v124, v125, (uint64_t)v125);
    std::string::__assign_external((std::string *)(v88 + 7), (const std::string::value_type *)v7);
    if ((v125[23] & 0x80000000) != 0) {
      operator delete(*(void **)v125);
    }
    std::string::basic_string[abi:ne180100]<0>(v125, "rms");
    int64_t v89 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v124, v125, (uint64_t)v125);
    std::string::operator=((std::string *)(v89 + 7), &__str);
    if ((v125[23] & 0x80000000) != 0) {
      operator delete(*(void **)v125);
    }
    std::string::basic_string[abi:ne180100]<0>(v125, "peak");
    id v90 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v124, v125, (uint64_t)v125);
    std::string::operator=((std::string *)(v90 + 7), &v122);
    if ((v125[23] & 0x80000000) != 0) {
      operator delete(*(void **)v125);
    }
    (*(void (**)(void, uint64_t, void, std::string *, uint64_t, uint64_t))(*(void *)*v16 + 24))(*v16, a2, v7[13].__r_.__value_.__s.__data_[4], &v124, 1, 7);
    if (HIDWORD(v7[11].__r_.__value_.__r.__words[0]))
    {
      unsigned int v91 = v7[11].__r_.__value_.__r.__words[1];
      *(_OWORD *)&v123.__r_.__value_.__r.__words[1] = 0uLL;
      v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]<0>(v125, "issue_type");
      uint64_t v92 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v123, v125, (uint64_t)v125);
      if (*((char *)v92 + 79) < 0)
      {
        v92[8] = (uint64_t *)2;
        __int16 v93 = (char *)v92[7];
      }
      else
      {
        __int16 v93 = (char *)(v92 + 7);
        *((unsigned char *)v92 + 79) = 2;
      }
      strcpy(v93, "DC");
      if ((v125[23] & 0x80000000) != 0) {
        operator delete(*(void **)v125);
      }
      std::string::basic_string[abi:ne180100]<0>(v125, "rtaid_client");
      int v94 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v123, v125, (uint64_t)v125);
      std::string::operator=((std::string *)(v94 + 7), a4);
      if ((v125[23] & 0x80000000) != 0) {
        operator delete(*(void **)v125);
      }
      std::to_string((std::string *)v125, *(double *)&v7[20].__r_.__value_.__l.__size_);
      std::string::basic_string[abi:ne180100]<0>(__p, "issue_detected_sample_time");
      __int16 v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v123, __p, (uint64_t)__p);
      int64_t v96 = v95 + 7;
      if (*((char *)v95 + 79) < 0) {
        operator delete(*v96);
      }
      *(_OWORD *)int64_t v96 = *(_OWORD *)v125;
      v96[2] = *(uint64_t **)&v125[16];
      v125[23] = 0;
      v125[0] = 0;
      if (v120 < 0)
      {
        operator delete(__p[0]);
        if ((v125[23] & 0x80000000) != 0) {
          operator delete(*(void **)v125);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v125, "node");
      uint64_t v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v123, v125, (uint64_t)v125);
      std::string::__assign_external((std::string *)(v97 + 7), (const std::string::value_type *)v7);
      if ((v125[23] & 0x80000000) != 0) {
        operator delete(*(void **)v125);
      }
      std::to_string((std::string *)v125, v91);
      std::string::basic_string[abi:ne180100]<0>(__p, "dc_consecutive_samples");
      char v98 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v123, __p, (uint64_t)__p);
      std::__split_buffer<std::string> v99 = v98 + 7;
      if (*((char *)v98 + 79) < 0) {
        operator delete(*v99);
      }
      *(_OWORD *)std::__split_buffer<std::string> v99 = *(_OWORD *)v125;
      v99[2] = *(uint64_t **)&v125[16];
      v125[23] = 0;
      v125[0] = 0;
      if (v120 < 0)
      {
        operator delete(__p[0]);
        if ((v125[23] & 0x80000000) != 0) {
          operator delete(*(void **)v125);
        }
      }
      (*(void (**)(void, uint64_t, void, std::string *, uint64_t, uint64_t))(*(void *)*v16 + 24))(*v16, a2, v7[13].__r_.__value_.__s.__data_[4], &v123, 1, 7);
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      int64_t v100 = rtaid::get_log(void)::rtaid_os_log;
      if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a5 + 23) >= 0) {
          v101 = (char *)a5;
        }
        else {
          v101 = *a5;
        }
        if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v102 = a4;
        }
        else {
          uint64_t v102 = (const std::string *)a4->__r_.__value_.__r.__words[0];
        }
        std::string::size_type v103 = v7[20].__r_.__value_.__l.__size_;
        *(_DWORD *)unint64_t v125 = 136316674;
        *(void *)&v125[4] = "IssueReporting.cpp";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 488;
        *(_WORD *)&v125[18] = 2080;
        *(void *)&v125[20] = v101;
        __int16 v126 = 2080;
        uint64_t v127 = v102;
        __int16 v128 = 2080;
        uint64_t v129 = v7;
        __int16 v130 = 2048;
        std::string::size_type v131 = v103;
        __int16 v132 = 1024;
        LODWORD(v133) = v91;
        _os_log_impl(&dword_2227C1000, v100, OS_LOG_TYPE_DEFAULT, "%s:%-5d RTAID [ use_case=%s issue_type=DC Generic Chain clientID=%s node=%s issue_detected_sample_time=%f ] -- [ %d ] ", v125, 0x40u);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v123.__r_.__value_.__l.__size_);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v124.__r_.__value_.__l.__size_);
  }
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  uint64_t v78 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a5 + 23) >= 0) {
      unint64_t v104 = (char *)a5;
    }
    else {
      unint64_t v104 = *a5;
    }
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v105 = a4;
    }
    else {
      int v105 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    }
    std::string::size_type v106 = v7[20].__r_.__value_.__l.__size_;
    id v107 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      id v107 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v108 = &v122;
    }
    else {
      int v108 = (std::string *)v122.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)unint64_t v125 = 136316930;
    *(void *)&v125[4] = "IssueReporting.cpp";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 491;
    *(_WORD *)&v125[18] = 2080;
    *(void *)&v125[20] = v104;
    __int16 v126 = 2080;
    uint64_t v127 = v105;
    __int16 v128 = 2080;
    uint64_t v129 = v7;
    __int16 v130 = 2048;
    std::string::size_type v131 = v106;
    __int16 v132 = 2080;
    int v133 = v107;
    __int16 v134 = 2080;
    uint64_t v135 = v108;
    id v84 = "%s:%-5d RTAID [ use_case=%s report_type=RMS Generic Chain clientID=%s node=%s issue_detected_sample_time=%f ] "
          "-- [ rms:[%s], peaks:[%s] ] ";
LABEL_250:
    _os_log_impl(&dword_2227C1000, v78, OS_LOG_TYPE_DEFAULT, v84, v125, 0x4Eu);
  }
LABEL_251:
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_2227FDF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,void *a40,int a41,__int16 a42,char a43,char a44)
{
}

uint64_t **std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::find<AudioServiceType>(void *a1, unsigned __int16 a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ****)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v7 = (unint64_t)result[1];
    if (v7 == a2)
    {
      if (*((unsigned __int16 *)result + 8) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void rtaid::HandleAudioIssue(uint64_t a1, void *a2, float a3)
{
  uint64_t v235 = *MEMORY[0x263EF8340];
  if (*a2)
  {
    float v6 = a3;
    unint64_t v4 = (void **)a2;
    uint64_t v3 = a1;
    std::string::basic_string[abi:ne180100]<0>(&__str, "Unknown");
    unint64_t v5 = 0x26AB1A000uLL;
  }
  else
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  if (v202)
  {
    rtaid::GetClientIDMap(v202);
    *(void *)(v5 + 1416) = &rtaid::GetClientIDMap(void)::gClientIDMap;
  }
LABEL_3:
  unint64_t v7 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(*(void **)(v5 + 1416), *(_DWORD *)(v3 + 256));
  if (v7) {
    std::string::operator=(&__str, v7 + 1);
  }
  std::string::basic_string[abi:ne180100]<0>(&v206, "Generic");
  {
    if (v203)
    {
      rtaid::GetClientUseCaseMap(v203);
      rtaid::HandleAudioIssue(rtaid::IssueDictionary const&,std::shared_ptr<AudioIssueDetectorDependencyInjection>,float)::clientUseCaseMap = (uint64_t)&rtaid::GetClientUseCaseMap(void)::gClientUseCaseMap;
    }
  }
  unsigned int v8 = *(unsigned __int8 *)(v3 + 316);
  if (*(unsigned char *)(v3 + 316))
  {
    unint64_t v9 = std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::find<AudioServiceType>((void *)rtaid::HandleAudioIssue(rtaid::IssueDictionary const&,std::shared_ptr<AudioIssueDetectorDependencyInjection>,float)::clientUseCaseMap, *(_WORD *)(v3 + 448));
    if (v9)
    {
      std::string::operator=(&v206, (const std::string *)v9 + 1);
      unsigned int v8 = *(unsigned __int8 *)(v3 + 316);
    }
    if (v8 >= 2)
    {
      uint64_t v10 = 225;
      do
      {
        uint64_t v11 = std::__hash_table<std::__hash_value_type<AudioServiceType,std::string>,std::__unordered_map_hasher<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::hash<AudioServiceType>,std::equal_to<AudioServiceType>,true>,std::__unordered_map_equal<AudioServiceType,std::__hash_value_type<AudioServiceType,std::string>,std::equal_to<AudioServiceType>,std::hash<AudioServiceType>,true>,std::allocator<std::__hash_value_type<AudioServiceType,std::string>>>::find<AudioServiceType>((void *)rtaid::HandleAudioIssue(rtaid::IssueDictionary const&,std::shared_ptr<AudioIssueDetectorDependencyInjection>,float)::clientUseCaseMap, *(_WORD *)(v3 + 2 * v10));
        if (v11)
        {
          BOOL v14 = v11[3];
          size_t v12 = v11 + 3;
          std::string::size_type v13 = (const std::string::value_type *)v14;
          int v15 = *((char *)v12 + 23);
          if (v15 >= 0) {
            unint64_t v16 = (const std::string::value_type *)v12;
          }
          else {
            unint64_t v16 = v13;
          }
          if (v15 >= 0) {
            std::string::size_type v17 = *((unsigned __int8 *)v12 + 23);
          }
          else {
            std::string::size_type v17 = (std::string::size_type)v12[1];
          }
          std::string::append(&v206, v16, v17);
          unsigned int v8 = *(unsigned __int8 *)(v3 + 316);
        }
        unint64_t v18 = v10 - 223;
        ++v10;
      }
      while (v18 < v8);
    }
  }
  {
    if (v204)
    {
      rtaid::GetReporterTypeInterestedMap(v204);
    }
  }
  uint64_t v19 = *(unsigned __int8 *)(v3 + 316);
  if (*(unsigned char *)(v3 + 316))
  {
    uint64_t v20 = 0;
    long long v21 = rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap;
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap
                                         + 8));
    v22.i16[0] = vaddlv_u8(v22);
    uint64_t v23 = *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) + 0xFFFFLL;
    uint64_t v24 = *((void *)&rtaid::GetReporterTypeInterestedMap(void)::gReporterTypeInterestedMap + 1) - 1;
    int v25 = *(_DWORD *)(v3 + 260);
    do
    {
      v205[v20] = *(void *)(v3 + 320 + 8 * v20);
      if (*((void *)&v21 + 1))
      {
        unint64_t v26 = *(unsigned __int16 *)(v3 + 448 + 2 * v20);
        if (v22.u32[0] > 1uLL)
        {
          unint64_t v27 = *(unsigned __int16 *)(v3 + 448 + 2 * v20);
          if (*((void *)&v21 + 1) <= v26) {
            unint64_t v27 = v26 % *((void *)&v21 + 1);
          }
        }
        else
        {
          unint64_t v27 = v23 & v26;
        }
        uint64_t v28 = *(uint64_t ***)(v21 + 8 * v27);
        if (v28)
        {
          while (1)
          {
            uint64_t v28 = (uint64_t **)*v28;
            if (!v28) {
              break;
            }
            unint64_t v29 = (unint64_t)v28[1];
            if (v29 == v26)
            {
              if (*((unsigned __int16 *)v28 + 8) == v26)
              {
                unint64_t v31 = v28[3];
                int v30 = v28[4];
                if (v31 != v30)
                {
                  while (*(_DWORD *)v31 != v25)
                  {
                    unint64_t v31 = (uint64_t *)((char *)v31 + 4);
                    if (v31 == v30)
                    {
                      unint64_t v31 = v28[4];
                      break;
                    }
                  }
                }
                if (v31 == v30) {
                  v205[v20] = 0;
                }
                break;
              }
            }
            else
            {
              if (v22.u32[0] > 1uLL)
              {
                if (v29 >= *((void *)&v21 + 1)) {
                  v29 %= *((void *)&v21 + 1);
                }
              }
              else
              {
                v29 &= v24;
              }
              if (v29 != v27) {
                break;
              }
            }
          }
        }
      }
      ++v20;
    }
    while (v20 != v19);
  }
  else
  {
    int v25 = *(_DWORD *)(v3 + 260);
  }
  switch(v25)
  {
    case 0:
      int v40 = *v4;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]<0>(buf, "issue_type");
      int v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, buf, (uint64_t)buf);
      if (*((char *)v41 + 79) < 0)
      {
        v41[8] = (uint64_t *)9;
        unint64_t v42 = (char *)v41[7];
      }
      else
      {
        unint64_t v42 = (char *)(v41 + 7);
        *((unsigned char *)v41 + 79) = 9;
      }
      strcpy(v42, "NonFinite");
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "rtaid_client");
      __int16 v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, buf, (uint64_t)buf);
      std::string::operator=((std::string *)(v93 + 7), &__str);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      std::to_string((std::string *)buf, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v219, "issue_detected_sample_time");
      int v94 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v219, (uint64_t)&v219);
      __int16 v95 = v94 + 7;
      if (*((char *)v94 + 79) < 0) {
        operator delete(*v95);
      }
      *(_OWORD *)__int16 v95 = *(_OWORD *)buf;
      v95[2] = *(uint64_t **)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "node");
      int64_t v96 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, buf, (uint64_t)buf);
      std::string::__assign_external((std::string *)(v96 + 7), (const std::string::value_type *)v3);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      std::to_string((std::string *)buf, *(_DWORD *)(v3 + 268));
      std::string::basic_string[abi:ne180100]<0>(&v219, "nan_frames");
      uint64_t v97 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v219, (uint64_t)&v219);
      char v98 = v97 + 7;
      if (*((char *)v97 + 79) < 0) {
        operator delete(*v98);
      }
      *(_OWORD *)char v98 = *(_OWORD *)buf;
      v98[2] = *(uint64_t **)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      std::to_string((std::string *)buf, *(_DWORD *)(v3 + 272));
      std::string::basic_string[abi:ne180100]<0>(&v219, "inf_frames");
      std::__split_buffer<std::string> v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v219, (uint64_t)&v219);
      int64_t v100 = v99 + 7;
      if (*((char *)v99 + 79) < 0) {
        operator delete(*v100);
      }
      *(_OWORD *)int64_t v100 = *(_OWORD *)buf;
      v100[2] = *(uint64_t **)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      (*(void (**)(void, void *, void, std::string *, uint64_t, uint64_t))(*(void *)*v40 + 24))(*v40, v205, *(unsigned __int8 *)(v3 + 316), &__p, 11, 7);
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      uint64_t v101 = rtaid::get_log(void)::rtaid_os_log;
      if (!os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_354;
      }
      uint64_t v102 = &v206;
      if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v102 = (std::string *)v206.__r_.__value_.__r.__words[0];
      }
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      uint64_t v104 = *(void *)(v3 + 488);
      int v105 = *(_DWORD *)(v3 + 268);
      int v106 = *(_DWORD *)(v3 + 272);
      *(_DWORD *)int buf = 136316930;
      *(void *)&uint8_t buf[4] = "IssueReporting.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 239;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v102;
      __int16 v223 = 2080;
      v224 = p_str;
      __int16 v225 = 2080;
      uint64_t v226 = v3;
      __int16 v227 = 2048;
      uint64_t v228 = v104;
      __int16 v229 = 1024;
      *(_DWORD *)v230 = v105;
      *(_WORD *)&v230[4] = 1024;
      *(_DWORD *)&v230[6] = v106;
      id v107 = "%s:%-5d RTAID [ use_case=%s issue_type=NonFinites clientID=%s node=%s issue_detected_sample_time=%f ] -- [ "
             "nan_frames=%d inf_frames=%d ]";
      int v108 = v101;
      uint32_t v109 = 70;
      goto LABEL_353;
    case 1:
    case 2:
      unint64_t v32 = (void **)*v4;
      float v33 = *(float *)(v3 + 284);
      if (!v19) {
        goto LABEL_56;
      }
      float v34 = (unsigned __int16 *)(v3 + 448);
      break;
    case 4:
      float v49 = *v4;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]<0>(buf, "issue_type");
      BOOL v50 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, buf, (uint64_t)buf);
      if (*((char *)v50 + 79) < 0)
      {
        v50[8] = (uint64_t *)7;
        unint64_t v51 = (char *)v50[7];
      }
      else
      {
        unint64_t v51 = (char *)(v50 + 7);
        *((unsigned char *)v50 + 79) = 7;
      }
      strcpy(v51, "RTError");
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "rtaid_client");
      int v110 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, buf, (uint64_t)buf);
      std::string::operator=((std::string *)(v110 + 7), &__str);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      std::to_string((std::string *)buf, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v219, "issue_detected_sample_time");
      int v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v219, (uint64_t)&v219);
      BOOL v112 = v111 + 7;
      if (*((char *)v111 + 79) < 0) {
        operator delete(*v112);
      }
      *(_OWORD *)BOOL v112 = *(_OWORD *)buf;
      v112[2] = *(uint64_t **)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "node");
      unint64_t v113 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, buf, (uint64_t)buf);
      std::string::__assign_external((std::string *)(v113 + 7), (const std::string::value_type *)v3);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      std::to_string(&v213, *(_DWORD *)(v3 + 268));
      std::string::size_type v114 = std::string::insert(&v213, 0, " {", 2uLL);
      long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      v214.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      id v116 = std::string::append(&v214, ", ", 2uLL);
      long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v215.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0;
      v116->__r_.__value_.__r.__words[2] = 0;
      v116->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v212, *(_DWORD *)(v3 + 272));
      if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v118 = &v212;
      }
      else {
        id v118 = (std::string *)v212.__r_.__value_.__r.__words[0];
      }
      if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v212.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v212.__r_.__value_.__l.__size_;
      }
      char v120 = std::string::append(&v215, (const std::string::value_type *)v118, size);
      long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v216.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      std::string v122 = std::string::append(&v216, ", ", 2uLL);
      long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
      v217.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v123;
      v122->__r_.__value_.__l.__size_ = 0;
      v122->__r_.__value_.__r.__words[2] = 0;
      v122->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v211, *(_DWORD *)(v3 + 276));
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v124 = &v211;
      }
      else {
        std::string v124 = (std::string *)v211.__r_.__value_.__r.__words[0];
      }
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v125 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v125 = v211.__r_.__value_.__l.__size_;
      }
      __int16 v126 = std::string::append(&v217, (const std::string::value_type *)v124, v125);
      long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      v218.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v127;
      v126->__r_.__value_.__l.__size_ = 0;
      v126->__r_.__value_.__r.__words[2] = 0;
      v126->__r_.__value_.__r.__words[0] = 0;
      __int16 v128 = std::string::append(&v218, ", ", 2uLL);
      long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      v219.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v129;
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v210, *(_DWORD *)(v3 + 280));
      if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v130 = &v210;
      }
      else {
        __int16 v130 = (std::string *)v210.__r_.__value_.__r.__words[0];
      }
      if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v131 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v131 = v210.__r_.__value_.__l.__size_;
      }
      __int16 v132 = std::string::append(&v219, (const std::string::value_type *)v130, v131);
      long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      *(void *)&buf[16] = *((void *)&v132->__r_.__value_.__l + 2);
      *(_OWORD *)int buf = v133;
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      __int16 v134 = std::string::append((std::string *)buf, "}", 1uLL);
      std::string::size_type v135 = v134->__r_.__value_.__r.__words[0];
      v221[0] = v134->__r_.__value_.__l.__size_;
      *(void *)((char *)v221 + 7) = *(std::string::size_type *)((char *)&v134->__r_.__value_.__r.__words[1] + 7);
      char v136 = HIBYTE(v134->__r_.__value_.__r.__words[2]);
      v134->__r_.__value_.__l.__size_ = 0;
      v134->__r_.__value_.__r.__words[2] = 0;
      v134->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v208, "rt_errors");
      v137 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, v208, (uint64_t)v208);
      uint64_t v138 = v137;
      if (*((char *)v137 + 79) < 0) {
        operator delete(v137[7]);
      }
      BOOL v139 = (uint64_t *)v221[0];
      v138[7] = (uint64_t *)v135;
      v138[8] = v139;
      *(uint64_t **)((char *)v138 + 71) = *(uint64_t **)((char *)v221 + 7);
      *((unsigned char *)v138 + 79) = v136;
      if (v209 < 0) {
        operator delete(v208[0]);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v210.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v219.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v218.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v211.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v217.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v216.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v212.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v215.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v214.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v213.__r_.__value_.__l.__data_);
      }
      (*(void (**)(void, void *, void, std::string *, uint64_t, uint64_t))(*(void *)*v49 + 24))(*v49, v205, *(unsigned __int8 *)(v3 + 316), &__p, 11, 7);
      int v140 = *(_DWORD *)(v3 + 480);
      if (v140)
      {
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        uint64_t v142 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        {
          char v143 = &v206;
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v143 = (std::string *)v206.__r_.__value_.__r.__words[0];
          }
          id v144 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            id v144 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          uint64_t v145 = *(void *)(v3 + 488);
          int v146 = *(_DWORD *)(v3 + 268);
          int v147 = *(_DWORD *)(v3 + 272);
          int v148 = *(_DWORD *)(v3 + 276);
          int v149 = *(_DWORD *)(v3 + 280);
          int v150 = *(_DWORD *)(v3 + 480);
          *(_DWORD *)int buf = 136317954;
          *(void *)&uint8_t buf[4] = "IssueReporting.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 320;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v143;
          __int16 v223 = 2080;
          v224 = v144;
          __int16 v225 = 2080;
          uint64_t v226 = v3;
          __int16 v227 = 2048;
          uint64_t v228 = v145;
          __int16 v229 = 1024;
          *(_DWORD *)v230 = v146;
          *(_WORD *)&v230[4] = 1024;
          *(_DWORD *)&v230[6] = v147;
          LOWORD(v231) = 1024;
          *(_DWORD *)((char *)&v231 + 2) = v148;
          HIWORD(v231) = 1024;
          *(_DWORD *)v232 = v149;
          *(_WORD *)&v232[4] = 2080;
          *(void *)&v232[6] = v3 + 192;
          *(_WORD *)&v232[14] = 1024;
          *(_DWORD *)&v232[16] = v150;
          id v107 = "%s:%-5d RTAID [ use_case=%s issue_type=RTError clientID=%s node=%s issue_detected_sample_time=%f ] -- ["
                 " error1=%d error2=%d error3=%d error4=%d ] -- [file name = %s : line number = %d]";
          int v108 = v142;
          uint32_t v109 = 98;
          goto LABEL_353;
        }
      }
      else
      {
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        uint64_t v151 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v152 = &v206;
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v152 = (std::string *)v206.__r_.__value_.__r.__words[0];
          }
          int v153 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v153 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          uint64_t v154 = *(void *)(v3 + 488);
          int v155 = *(_DWORD *)(v3 + 268);
          int v156 = *(_DWORD *)(v3 + 272);
          int v157 = *(_DWORD *)(v3 + 276);
          int v158 = *(_DWORD *)(v3 + 280);
          *(_DWORD *)int buf = 136317442;
          *(void *)&uint8_t buf[4] = "IssueReporting.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 324;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v152;
          __int16 v223 = 2080;
          v224 = v153;
          __int16 v225 = 2080;
          uint64_t v226 = v3;
          __int16 v227 = 2048;
          uint64_t v228 = v154;
          __int16 v229 = 1024;
          *(_DWORD *)v230 = v155;
          *(_WORD *)&v230[4] = 1024;
          *(_DWORD *)&v230[6] = v156;
          LOWORD(v231) = 1024;
          *(_DWORD *)((char *)&v231 + 2) = v157;
          HIWORD(v231) = 1024;
          *(_DWORD *)v232 = v158;
          id v107 = "%s:%-5d RTAID [ use_case=%s issue_type=RTError clientID=%s node=%s issue_detected_sample_time=%f ] -- ["
                 " error1=%d error2=%d error3=%d error4=%d ]";
          int v108 = v151;
          uint32_t v109 = 82;
          goto LABEL_353;
        }
      }
      goto LABEL_354;
    case 5:
      float v52 = *(float *)(v3 + 284);
      float v53 = *(float *)(v3 + 288);
      float v54 = *(float *)(v3 + 292);
      float v55 = *(float *)(v3 + 296);
      if (v52 >= (float)(-30.0 - v6) || v52 >= (float)((float)(v53 + -3.0) - v6) || v53 <= -40.0)
      {
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        uint64_t v58 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        {
          id v59 = &v206;
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            id v59 = (std::string *)v206.__r_.__value_.__r.__words[0];
          }
          unint64_t v60 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v60 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          uint64_t v61 = *(void *)(v3 + 488);
          *(_DWORD *)int buf = 136317698;
          *(void *)&uint8_t buf[4] = "IssueReporting.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 361;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v59;
          __int16 v223 = 2080;
          v224 = v60;
          __int16 v225 = 2080;
          uint64_t v226 = v3;
          __int16 v227 = 2048;
          uint64_t v228 = v61;
          __int16 v229 = 2048;
          *(double *)v230 = v53;
          *(_WORD *)&v230[8] = 2048;
          double v231 = v55;
          *(_WORD *)v232 = 2048;
          *(double *)&v232[2] = v52;
          *(_WORD *)&v232[10] = 2048;
          *(double *)&v232[12] = v54;
          __int16 v233 = 2048;
          double v234 = v6;
          int v45 = "%s:%-5d RTAID [ use_case=%s issue_type=RMS Telephony Chain clientID=%s node=%s issue_detected_sample_tim"
                "e=%f ] -- [ DLInputRMS=%f DLInputPeak=%f DLOutputRMS=%f DLOutputPeak=%f DLAdjustment=%f ]";
          goto LABEL_147;
        }
      }
      else
      {
        unsigned int v159 = *v4;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]<0>(buf, "issue_type");
        v160 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, buf, (uint64_t)buf);
        if (*((char *)v160 + 79) < 0)
        {
          v160[8] = (uint64_t *)6;
          id v161 = (char *)v160[7];
        }
        else
        {
          id v161 = (char *)(v160 + 7);
          *((unsigned char *)v160 + 79) = 6;
        }
        strcpy(v161, "LowRMS");
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "rtaid_client");
        int v184 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, buf, (uint64_t)buf);
        std::string::operator=((std::string *)(v184 + 7), &__str);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        std::to_string((std::string *)buf, *(double *)(v3 + 488));
        std::string::basic_string[abi:ne180100]<0>(&v219, "issue_detected_sample_time");
        v185 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v219, (uint64_t)&v219);
        unsigned int v186 = v185 + 7;
        if (*((char *)v185 + 79) < 0) {
          operator delete(*v186);
        }
        *(_OWORD *)unsigned int v186 = *(_OWORD *)buf;
        v186[2] = *(uint64_t **)&buf[16];
        buf[23] = 0;
        buf[0] = 0;
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v219.__r_.__value_.__l.__data_);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "node");
        int v187 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, buf, (uint64_t)buf);
        std::string::__assign_external((std::string *)(v187 + 7), (const std::string::value_type *)v3);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        std::to_string((std::string *)buf, v53);
        std::string::basic_string[abi:ne180100]<0>(&v219, "dl_input_rms");
        unsigned int v188 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v219, (uint64_t)&v219);
        id v189 = v188 + 7;
        if (*((char *)v188 + 79) < 0) {
          operator delete(*v189);
        }
        *(_OWORD *)id v189 = *(_OWORD *)buf;
        v189[2] = *(uint64_t **)&buf[16];
        buf[23] = 0;
        buf[0] = 0;
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v219.__r_.__value_.__l.__data_);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        std::to_string((std::string *)buf, v55);
        std::string::basic_string[abi:ne180100]<0>(&v219, "dl_input_peak");
        id v190 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v219, (uint64_t)&v219);
        v191 = v190 + 7;
        if (*((char *)v190 + 79) < 0) {
          operator delete(*v191);
        }
        *(_OWORD *)v191 = *(_OWORD *)buf;
        v191[2] = *(uint64_t **)&buf[16];
        buf[23] = 0;
        buf[0] = 0;
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v219.__r_.__value_.__l.__data_);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        std::to_string((std::string *)buf, v52);
        std::string::basic_string[abi:ne180100]<0>(&v219, "dl_output_rms");
        v192 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v219, (uint64_t)&v219);
        id v193 = v192 + 7;
        if (*((char *)v192 + 79) < 0) {
          operator delete(*v193);
        }
        *(_OWORD *)id v193 = *(_OWORD *)buf;
        v193[2] = *(uint64_t **)&buf[16];
        buf[23] = 0;
        buf[0] = 0;
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v219.__r_.__value_.__l.__data_);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        std::to_string((std::string *)buf, v54);
        std::string::basic_string[abi:ne180100]<0>(&v219, "dl_output_peak");
        v194 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v219, (uint64_t)&v219);
        v195 = v194 + 7;
        if (*((char *)v194 + 79) < 0) {
          operator delete(*v195);
        }
        *(_OWORD *)v195 = *(_OWORD *)buf;
        v195[2] = *(uint64_t **)&buf[16];
        buf[23] = 0;
        buf[0] = 0;
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v219.__r_.__value_.__l.__data_);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        std::to_string((std::string *)buf, v6);
        std::string::basic_string[abi:ne180100]<0>(&v219, "dl_adjustment");
        v196 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v219, (uint64_t)&v219);
        id v197 = v196 + 7;
        if (*((char *)v196 + 79) < 0) {
          operator delete(*v197);
        }
        *(_OWORD *)id v197 = *(_OWORD *)buf;
        v197[2] = *(uint64_t **)&buf[16];
        buf[23] = 0;
        buf[0] = 0;
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v219.__r_.__value_.__l.__data_);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        (*(void (**)(void, void *, void, std::string *, uint64_t, uint64_t))(*(void *)*v159 + 24))(*v159, v205, *(unsigned __int8 *)(v3 + 316), &__p, 11, 7);
        {
          rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
        }
        uint64_t v198 = rtaid::get_log(void)::rtaid_os_log;
        if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
        {
          v199 = &v206;
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v199 = (std::string *)v206.__r_.__value_.__r.__words[0];
          }
          __int16 v200 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v200 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          uint64_t v201 = *(void *)(v3 + 488);
          *(_DWORD *)int buf = 136317698;
          *(void *)&uint8_t buf[4] = "IssueReporting.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 356;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v199;
          __int16 v223 = 2080;
          v224 = v200;
          __int16 v225 = 2080;
          uint64_t v226 = v3;
          __int16 v227 = 2048;
          uint64_t v228 = v201;
          __int16 v229 = 2048;
          *(double *)v230 = v53;
          *(_WORD *)&v230[8] = 2048;
          double v231 = v55;
          *(_WORD *)v232 = 2048;
          *(double *)&v232[2] = v52;
          *(_WORD *)&v232[10] = 2048;
          *(double *)&v232[12] = v54;
          __int16 v233 = 2048;
          double v234 = v6;
          id v107 = "%s:%-5d RTAID [ use_case=%s issue_type=RMS Telephony Chain clientID=%s node=%s issue_detected_sample_ti"
                 "me=%f ] -- [ DLInputRMS=%f DLInputPeak=%f DLOutputRMS=%f DLOutputPeak=%f DLAdjustment=%f ]";
          int v108 = v198;
          uint32_t v109 = 108;
LABEL_353:
          _os_log_impl(&dword_2227C1000, v108, OS_LOG_TYPE_DEFAULT, v107, buf, v109);
        }
LABEL_354:
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)__p.__r_.__value_.__l.__size_);
      }
      goto LABEL_355;
    case 6:
      rtaid::handleRMSIssue((std::string *)v3, (uint64_t)v205, *v4, &__str, &v206.__r_.__value_.__l.__data_);
      goto LABEL_355;
    default:
      {
        rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
      }
      uint64_t v43 = rtaid::get_log(void)::rtaid_os_log;
      if (!os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_355;
      }
      int v44 = *(_DWORD *)(v3 + 260);
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "IssueReporting.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 572;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v44;
      int v45 = "%s:%-5d Invalid analyzer type: %d";
      int v46 = v43;
      os_log_type_t v47 = OS_LOG_TYPE_ERROR;
      uint32_t v48 = 24;
      goto LABEL_148;
  }
  do
  {
    int v35 = *v34++;
    if (v35 != 13)
    {
LABEL_56:
      *(void *)&buf[8] = 0;
      *(void *)&buf[16] = 0;
      *(void *)int buf = &buf[8];
      std::string::basic_string[abi:ne180100]<0>(&__p, "issue_type");
      unint64_t v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &__p, (uint64_t)&__p);
      if (*((char *)v38 + 79) < 0)
      {
        v38[8] = (uint64_t *)7;
        size_t v39 = (char *)v38[7];
      }
      else
      {
        size_t v39 = (char *)(v38 + 7);
        *((unsigned char *)v38 + 79) = 7;
      }
      strcpy(v39, "Silence");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "rtaid_client");
      float v62 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &__p, (uint64_t)&__p);
      std::string::operator=((std::string *)(v62 + 7), &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::to_string(&__p, *(double *)(v3 + 488));
      std::string::basic_string[abi:ne180100]<0>(&v219, "issue_detected_sample_time");
      BOOL v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
      unint64_t v64 = (void **)(v63 + 7);
      if (*((char *)v63 + 79) < 0) {
        operator delete(*v64);
      }
      *(std::string *)unint64_t v64 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "node");
      unint64_t v65 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &__p, (uint64_t)&__p);
      std::string::__assign_external((std::string *)(v65 + 7), (const std::string::value_type *)v3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::to_string(&__p, *(_DWORD *)(v3 + 268));
      std::string::basic_string[abi:ne180100]<0>(&v219, "all_channel_silence_samples");
      size_t v66 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
      uint64_t v67 = (void **)(v66 + 7);
      if (*((char *)v66 + 79) < 0) {
        operator delete(*v67);
      }
      *(std::string *)uint64_t v67 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::to_string(&__p, *(_DWORD *)(v3 + 272));
      std::string::basic_string[abi:ne180100]<0>(&v219, "any_channel_silence_samples");
      id v68 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
      unint64_t v69 = (void **)(v68 + 7);
      if (*((char *)v68 + 79) < 0) {
        operator delete(*v69);
      }
      *(std::string *)unint64_t v69 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::to_string(&__p, *(_DWORD *)(v3 + 276));
      std::string::basic_string[abi:ne180100]<0>(&v219, "leading_silence_samples");
      id v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
      int64_t v71 = (void **)(v70 + 7);
      if (*((char *)v70 + 79) < 0) {
        operator delete(*v71);
      }
      *(std::string *)int64_t v71 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::to_string(&__p, *(_DWORD *)(v3 + 280));
      std::string::basic_string[abi:ne180100]<0>(&v219, "mid_stream_silence_samples");
      id v72 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
      unint64_t v73 = (void **)(v72 + 7);
      if (*((char *)v72 + 79) < 0) {
        operator delete(*v73);
      }
      *(std::string *)unint64_t v73 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::to_string(&__p, (float)*(unsigned int *)(v3 + 268) / v33);
      std::string::basic_string[abi:ne180100]<0>(&v219, "all_channel_silence_seconds");
      long long v74 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
      int v75 = (void **)(v74 + 7);
      if (*((char *)v74 + 79) < 0) {
        operator delete(*v75);
      }
      *(std::string *)int v75 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::to_string(&__p, (float)*(unsigned int *)(v3 + 272) / v33);
      std::string::basic_string[abi:ne180100]<0>(&v219, "any_channel_silence_seconds");
      int v76 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
      id v77 = (void **)(v76 + 7);
      if (*((char *)v76 + 79) < 0) {
        operator delete(*v77);
      }
      *(std::string *)id v77 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::to_string(&__p, (float)*(unsigned int *)(v3 + 276) / v33);
      std::string::basic_string[abi:ne180100]<0>(&v219, "leading_silence_seconds");
      uint64_t v78 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
      uint64_t v79 = (void **)(v78 + 7);
      if (*((char *)v78 + 79) < 0) {
        operator delete(*v79);
      }
      *(std::string *)uint64_t v79 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::to_string(&__p, (float)*(unsigned int *)(v3 + 280) / v33);
      std::string::basic_string[abi:ne180100]<0>(&v219, "mid_stream_silence_seconds");
      uint64_t v80 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
      std::string::size_type v81 = (void **)(v80 + 7);
      if (*((char *)v80 + 79) < 0) {
        operator delete(*v81);
      }
      *(std::string *)std::string::size_type v81 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::to_string(&__p, *(float *)(v3 + 288));
      std::string::basic_string[abi:ne180100]<0>(&v219, "mid_stream_silence_sample_time");
      unint64_t v82 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
      uint64_t v83 = (void **)(v82 + 7);
      if (*((char *)v82 + 79) < 0) {
        operator delete(*v83);
      }
      *(std::string *)uint64_t v83 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v219.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      id v84 = *(void (**)(void))(**v32 + 24);
      goto LABEL_139;
    }
    --v19;
  }
  while (v19);
  if (!(*(unsigned int (**)(void *))(*v32[3] + 16))(v32[3])) {
    goto LABEL_140;
  }
  *(void *)&buf[8] = 0;
  *(void *)&buf[16] = 0;
  *(void *)int buf = &buf[8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "issue_type");
  BOOL v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &__p, (uint64_t)&__p);
  if (*((char *)v36 + 79) < 0)
  {
    v36[8] = (uint64_t *)7;
    unint64_t v37 = (char *)v36[7];
  }
  else
  {
    unint64_t v37 = (char *)(v36 + 7);
    *((unsigned char *)v36 + 79) = 7;
  }
  strcpy(v37, "Silence");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtaid_client");
  v162 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &__p, (uint64_t)&__p);
  std::string::operator=((std::string *)(v162 + 7), &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::to_string(&__p, *(double *)(v3 + 488));
  std::string::basic_string[abi:ne180100]<0>(&v219, "issue_detected_sample_time");
  int v163 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
  int v164 = (void **)(v163 + 7);
  if (*((char *)v163 + 79) < 0) {
    operator delete(*v164);
  }
  *(std::string *)int v164 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "node");
  unsigned int v165 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &__p, (uint64_t)&__p);
  std::string::__assign_external((std::string *)(v165 + 7), (const std::string::value_type *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::to_string(&__p, *(_DWORD *)(v3 + 268));
  std::string::basic_string[abi:ne180100]<0>(&v219, "all_channel_silence_samples");
  long long v166 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
  int64x2_t v167 = (void **)(v166 + 7);
  if (*((char *)v166 + 79) < 0) {
    operator delete(*v167);
  }
  *(std::string *)int64x2_t v167 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&__p, *(_DWORD *)(v3 + 272));
  std::string::basic_string[abi:ne180100]<0>(&v219, "any_channel_silence_samples");
  id v168 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
  int v169 = (void **)(v168 + 7);
  if (*((char *)v168 + 79) < 0) {
    operator delete(*v169);
  }
  *(std::string *)int v169 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&__p, *(_DWORD *)(v3 + 276));
  std::string::basic_string[abi:ne180100]<0>(&v219, "leading_silence_samples");
  unsigned int v170 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
  id v171 = (void **)(v170 + 7);
  if (*((char *)v170 + 79) < 0) {
    operator delete(*v171);
  }
  *(std::string *)id v171 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&__p, *(_DWORD *)(v3 + 280));
  std::string::basic_string[abi:ne180100]<0>(&v219, "mid_stream_silence_samples");
  v172 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
  id v173 = (void **)(v172 + 7);
  if (*((char *)v172 + 79) < 0) {
    operator delete(*v173);
  }
  *(std::string *)id v173 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&__p, (float)*(unsigned int *)(v3 + 268) / v33);
  std::string::basic_string[abi:ne180100]<0>(&v219, "all_channel_silence_seconds");
  v174 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
  v175 = (void **)(v174 + 7);
  if (*((char *)v174 + 79) < 0) {
    operator delete(*v175);
  }
  *(std::string *)v175 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&__p, (float)*(unsigned int *)(v3 + 272) / v33);
  std::string::basic_string[abi:ne180100]<0>(&v219, "any_channel_silence_seconds");
  v176 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
  v177 = (void **)(v176 + 7);
  if (*((char *)v176 + 79) < 0) {
    operator delete(*v177);
  }
  *(std::string *)v177 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&__p, (float)*(unsigned int *)(v3 + 276) / v33);
  std::string::basic_string[abi:ne180100]<0>(&v219, "leading_silence_seconds");
  uint64_t v178 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
  uint64_t v179 = (void **)(v178 + 7);
  if (*((char *)v178 + 79) < 0) {
    operator delete(*v179);
  }
  *(std::string *)uint64_t v179 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&__p, (float)*(unsigned int *)(v3 + 280) / v33);
  std::string::basic_string[abi:ne180100]<0>(&v219, "mid_stream_silence_seconds");
  v180 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
  uint64_t v181 = (void **)(v180 + 7);
  if (*((char *)v180 + 79) < 0) {
    operator delete(*v181);
  }
  *(std::string *)uint64_t v181 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&__p, *(float *)(v3 + 288));
  std::string::basic_string[abi:ne180100]<0>(&v219, "mid_stream_silence_sample_time");
  uint64_t v182 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, &v219, (uint64_t)&v219);
  id v183 = (void **)(v182 + 7);
  if (*((char *)v182 + 79) < 0) {
    operator delete(*v183);
  }
  *(std::string *)id v183 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  id v84 = *(void (**)(void))(**v32 + 24);
LABEL_139:
  v84();
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)&buf[8]);
LABEL_140:
  {
    rtaid::get_log(void)::rtaid_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  uint64_t v58 = rtaid::get_log(void)::rtaid_os_log;
  if (os_log_type_enabled((os_log_t)rtaid::get_log(void)::rtaid_os_log, OS_LOG_TYPE_DEFAULT))
  {
    long long v85 = &v206;
    if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v85 = (std::string *)v206.__r_.__value_.__r.__words[0];
    }
    std::string v86 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v86 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    uint64_t v87 = *(void *)(v3 + 488);
    double v88 = (float)((float)*(unsigned int *)(v3 + 268) / v33);
    double v89 = (float)((float)*(unsigned int *)(v3 + 272) / v33);
    double v90 = (float)((float)*(unsigned int *)(v3 + 276) / v33);
    float v91 = (float)*(unsigned int *)(v3 + 280);
    *(_DWORD *)int buf = 136317698;
    float v92 = *(float *)(v3 + 288);
    *(void *)&uint8_t buf[4] = "IssueReporting.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 296;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v85;
    __int16 v223 = 2080;
    v224 = v86;
    __int16 v225 = 2080;
    uint64_t v226 = v3;
    __int16 v227 = 2048;
    uint64_t v228 = v87;
    __int16 v229 = 2048;
    *(double *)v230 = v88;
    *(_WORD *)&v230[8] = 2048;
    double v231 = v89;
    *(_WORD *)v232 = 2048;
    *(double *)&v232[2] = v90;
    *(_WORD *)&v232[10] = 2048;
    *(double *)&v232[12] = (float)(v91 / v33);
    __int16 v233 = 2048;
    double v234 = v92;
    int v45 = "%s:%-5d RTAID [ use_case=%s issue_type=Silence clientID=%s node=%s issue_detected_sample_time=%f ] -- [ all_ch"
          "annel_silence_seconds=%f any_channel_silence_seconds=%f leading_silence_seconds=%f mid_stream_silence_seconds="
          "%f mid_stream_silence_sampleTime=%f ]";
LABEL_147:
    int v46 = v58;
    os_log_type_t v47 = OS_LOG_TYPE_DEFAULT;
    uint32_t v48 = 108;
LABEL_148:
    _os_log_impl(&dword_2227C1000, v46, v47, v45, buf, v48);
  }
LABEL_355:
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v206.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_222800624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v74 - 217) < 0) {
    operator delete(*(void **)(v74 - 240));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a74);
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::unique_ptr<ADAM::Writer>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  float v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        float v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        float v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)operator new(0x40uLL);
    void v9[4] = *a3;
    v9[5] = 0;
    v9[6] = 0;
    v9[7] = 0;
    std::__tree<rtaid::AnalyzerType>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t std::__split_buffer<std::unique_ptr<ADAM::Writer>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::deque<std::shared_ptr<ADAM::BufferNodeMsg>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    float v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 256;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      int v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void ADAM::ClientSessionManager::~ClientSessionManager(ADAM::ClientSessionManager *this)
{
  unint64_t v2 = (void *)MEMORY[0x223C9DB40]();
  CFStringRef v3 = (const __CFString *)*((void *)this + 31);
  if (v3)
  {
    if ((*((unsigned char *)this + 280) & 4) != 0) {
      CFDictionaryRef Copy = @"Codec";
    }
    else {
      CFDictionaryRef Copy = (__CFString *)CFStringCreateCopy(0, v3);
    }
  }
  else
  {
    CFDictionaryRef Copy = 0;
  }
  unint64_t v5 = Copy;
  unint64_t v6 = *((void *)this + 35);
  uint64_t v7 = [MEMORY[0x263F41DC0] sharedInstance];
  [v7 deviceSessionDestroyed:v5 isWired:(v6 >> 1) & 1];

  ADAM::releaseADAMDeviceInfo((uint64_t)this + 248);
  std::deque<std::shared_ptr<ADAM::BufferNodeMsg>>::~deque[abi:ne180100]((uint64_t)this + 384);
  std::mutex::~mutex((std::mutex *)this + 5);
  uint64_t v8 = (void *)*((void *)this + 37);
  if (v8)
  {
    *((void *)this + 38) = v8;
    operator delete(v8);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::~__hash_table((uint64_t)this + 144);
  uint64_t v9 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::mutex::~mutex((std::mutex *)((char *)this + 56));
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::~__hash_table((uint64_t)this + 16);
}

void ADAM::ClientSessionManager::updateReportingSessions(uint64_t a1, uint64_t **a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (!ADAM::ADAMLogScope(void)::scope)
  {
    CFStringRef v3 = MEMORY[0x263EF8438];
    id v4 = MEMORY[0x263EF8438];
    goto LABEL_7;
  }
  CFStringRef v3 = *(id *)ADAM::ADAMLogScope(void)::scope;
  if (v3)
  {
LABEL_7:
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = a2[1] - *a2;
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "ADAMClientSessionManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 63;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v5;
      _os_log_impl(&dword_2227C1000, v3, OS_LOG_TYPE_INFO, "%25s:%-5d updating reporting sessions with %lu keys", buf, 0x1Cu);
    }
  }
  uint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  if (v6 == *a2) {
    return;
  }
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v42 = &v43;
  do
  {
    uint64_t v8 = *v7;
    if (AudioStatisticsLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_1202);
    }
    if (AudioStatisticsLibraryLoader(void)::libSym) {
      CFDictionaryRef v9 = (const __CFDictionary *)AudioStatisticsLibraryLoader(void)::libSym(v8);
    }
    else {
      CFDictionaryRef v9 = 0;
    }
    theDict[0] = v9;
    LOWORD(theDict[1]) = 1;
    if (CFDictionaryContainsKey(v9, @"HostApplicationDisplayID"))
    {
      if (theDict[0])
      {
        double Value = (void *)CFDictionaryGetValue(theDict[0], @"HostApplicationDisplayID");
        uint64_t v11 = Value;
        if (Value)
        {
          CFTypeID v12 = CFGetTypeID(Value);
          if (v12 == CFStringGetTypeID())
          {
            if (ADAM::ADAMLogScope(void)::once != -1) {
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
            }
            if (ADAM::ADAMLogScope(void)::scope)
            {
              unint64_t v13 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v13)
              {
LABEL_50:
                uint64_t v14 = v11;
                std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v14 UTF8String]);
                long long v21 = v43;
                uint8x8_t v22 = &v43;
                for (i = &v43; v21; long long v21 = v22[1])
                {
                  while (1)
                  {
                    uint8x8_t v22 = (uint64_t **)v21;
                    uint64_t v24 = v21 + 4;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(buf, v21 + 4) & 0x80) == 0) {
                      break;
                    }
                    long long v21 = *v22;
                    uint64_t i = v22;
                    if (!*v22) {
                      goto LABEL_56;
                    }
                  }
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, buf) & 0x80) == 0) {
                    goto LABEL_59;
                  }
                  uint64_t i = v22 + 1;
                }
LABEL_56:
                int v25 = operator new(0x38uLL);
                v25[2] = *(_OWORD *)buf;
                *((void *)v25 + 6) = *(void *)&buf[16];
                memset(buf, 0, 24);
                *(void *)int v25 = 0;
                *((void *)v25 + 1) = 0;
                *((void *)v25 + 2) = v22;
                void *i = (uint64_t *)v25;
                if (*v42)
                {
                  unint64_t v42 = (uint64_t **)*v42;
                  int v25 = *i;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v43, (uint64_t *)v25);
                ++v44;
LABEL_59:
                if ((char)buf[23] < 0) {
                  operator delete(*(void **)buf);
                }
                goto LABEL_43;
              }
            }
            else
            {
              unint64_t v13 = MEMORY[0x263EF8438];
              id v20 = MEMORY[0x263EF8438];
            }
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int buf = 136315650;
              *(void *)&uint8_t buf[4] = "ADAMClientSessionManager.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 83;
              *(_WORD *)&unsigned char buf[18] = 2112;
              *(void *)&buf[20] = v11;
              _os_log_impl(&dword_2227C1000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d updating bundleID: %@", buf, 0x1Cu);
            }

            goto LABEL_50;
          }
        }
      }
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (!ADAM::ADAMLogScope(void)::scope)
      {
        uint64_t v14 = MEMORY[0x263EF8438];
        id v15 = MEMORY[0x263EF8438];
LABEL_37:
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "ADAMClientSessionManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 89;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v8;
          uint64_t v16 = v14;
          os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
          unint64_t v18 = "%25s:%-5d Missing HostApplicationDisplayID for CAReporterID %llu";
          goto LABEL_42;
        }
        goto LABEL_43;
      }
      uint64_t v14 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (v14) {
        goto LABEL_37;
      }
    }
    else
    {
      if (ADAM::ADAMLogScope(void)::once != -1) {
        dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
      }
      if (!ADAM::ADAMLogScope(void)::scope)
      {
        uint64_t v14 = MEMORY[0x263EF8438];
        id v19 = MEMORY[0x263EF8438];
LABEL_40:
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "ADAMClientSessionManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 77;
          *(_WORD *)&unsigned char buf[18] = 2112;
          *(CFDictionaryRef *)&buf[20] = theDict[0];
          uint64_t v16 = v14;
          os_log_type_t v17 = OS_LOG_TYPE_ERROR;
          unint64_t v18 = "%25s:%-5d Configuration has no key 'HostApplicationDisplayID', %@";
LABEL_42:
          _os_log_impl(&dword_2227C1000, v16, v17, v18, buf, 0x1Cu);
        }
LABEL_43:

        goto LABEL_44;
      }
      uint64_t v14 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (v14) {
        goto LABEL_40;
      }
    }
LABEL_44:
    CACFDictionary::~CACFDictionary((CACFDictionary *)theDict);
    ++v7;
  }
  while (v7 != v6);
  std::mutex::lock((std::mutex *)(a1 + 184));
  unint64_t v26 = v42;
  theDict[1] = 0;
  int v41 = 0;
  theDict[0] = 0;
  if (v42 != &v43)
  {
    unint64_t v27 = 0;
    uint64_t v28 = v42;
    do
    {
      unint64_t v29 = v27;
      int v30 = v28[1];
      if (v30)
      {
        do
        {
          unint64_t v31 = (uint64_t **)v30;
          int v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          unint64_t v31 = (uint64_t **)v28[2];
          BOOL v32 = *v31 == (uint64_t *)v28;
          uint64_t v28 = v31;
        }
        while (!v32);
      }
      ++v27;
      uint64_t v28 = v31;
    }
    while (v31 != &v43);
    int v45 = theDict;
    char v46 = 0;
    if (v29 >= 0xAAAAAAAAAAAAAAALL) {
      std::vector<ADAMAudioDataAnalysisType>::__throw_length_error[abi:ne180100]();
    }
    theDict[0] = (CFDictionaryRef)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v27);
    theDict[1] = theDict[0];
    int v41 = (char *)theDict[0] + 24 * v33;
    CFDictionaryRef v47 = theDict[0];
    CFDictionaryRef v48 = theDict[0];
    *(void *)int buf = &v41;
    *(void *)&buf[8] = &v47;
    *(void *)&buf[16] = &v48;
    buf[24] = 0;
    float v34 = (std::string *)theDict[0];
    do
    {
      if (*((char *)v26 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v34, (const std::string::value_type *)v26[4], (std::string::size_type)v26[5]);
      }
      else
      {
        long long v35 = *((_OWORD *)v26 + 2);
        v34->__r_.__value_.__r.__words[2] = (std::string::size_type)v26[6];
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
      }
      BOOL v36 = v26[1];
      if (v36)
      {
        do
        {
          unint64_t v37 = (uint64_t **)v36;
          BOOL v36 = (uint64_t *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          unint64_t v37 = (uint64_t **)v26[2];
          BOOL v32 = *v37 == (uint64_t *)v26;
          unint64_t v26 = v37;
        }
        while (!v32);
      }
      float v34 = (std::string *)((char *)v48 + 24);
      CFDictionaryRef v48 = (CFDictionaryRef)((char *)v48 + 24);
      unint64_t v26 = v37;
    }
    while (v37 != &v43);
    buf[24] = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
    theDict[1] = (CFDictionaryRef)v34;
  }
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)theDict;
  *(void *)(a1 + 136) = v41;
  theDict[1] = 0;
  int v41 = 0;
  theDict[0] = 0;
  *(void *)int buf = theDict;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  for (uint64_t j = *(uint64_t **)(a1 + 160); j; uint64_t j = (uint64_t *)*j)
    *((unsigned char *)j + 20) = 1;
  std::mutex::unlock((std::mutex *)(a1 + 184));
  std::__tree<std::string>::destroy((char *)v43);
}

void sub_222801534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  if (*((unsigned char *)this + 8))
  {
    unint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(void *)a1);
    std::__tree<std::string>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke_1211()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    unint64_t v1 = result;
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void))dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)result;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    CFDictionaryRef v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((unsigned char *)v10 + 20) = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v18 = operator new(8 * *(void *)&prime);
  id v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  long long v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    unint64_t v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *long long v21 = *v27;
          *unint64_t v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          unint64_t v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        long long v21 = v27;
        unint64_t v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  unint64_t v29 = *(void **)a1;
  int v30 = *(void **)(*(void *)a1 + 8 * v6);
  if (v30)
  {
    void *v10 = *v30;
LABEL_72:
    *int v30 = v10;
    goto LABEL_73;
  }
  void *v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    int v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_222801C48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  float v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      float v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_222801D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::__erase_unique<unsigned int>(void *a1, unsigned int a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,rtaid::Detector::NodeBook>>>::find<unsigned int>(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = v3[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    long long v7 = *(uint64_t **)(*a1 + 8 * v5);
    do
    {
      uint8x8_t v8 = v7;
      long long v7 = (uint64_t *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2) {
      goto LABEL_20;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    uint64_t v11 = *v3;
    if (*v3)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *v3;
      }
    }
    *uint8x8_t v8 = v11;
    uint64_t *v3 = 0;
    --a1[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,void *>>>::operator()[abi:ne180100](1, v3);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = __p[3];
    __p[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__shared_ptr_emplace<ADAM::BufferNodeMsg>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4EC778;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9D800);
}

void std::__shared_ptr_emplace<ADAM::BufferNodeMsg>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4EC778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<ADAM::BufferNodeBase>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v5 = operator new(8 * prime);
  uint8x8_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint8x8_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    BOOL v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *uint8x8_t v8 = *v14;
          *BOOL v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          BOOL v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint8x8_t v8 = v14;
        BOOL v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void ADAM::BufferNodeDescriptorSPL::~BufferNodeDescriptorSPL(void **this)
{
  *this = &unk_26D4EC870;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x223C9D800);
}

{
  *this = &unk_26D4EC870;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::~BufferNodeSPL(uint64_t a1)
{
  *(void *)a1 = &unk_26D4EC7B0;
  ADAM::ADAMRingBuffer<ADAM::SPLData>::~ADAMRingBuffer((void *)(a1 + 112));
  *(void *)(a1 + 64) = &unk_26D4EC870;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  *(void *)a1 = &unk_26D4EC800;
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9D800);
}

void *ADAM::ADAMRingBuffer<ADAM::SPLData>::~ADAMRingBuffer(void *a1)
{
  unint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::~BufferNodeSPL(uint64_t a1)
{
  *(void *)a1 = &unk_26D4EC7B0;
  ADAM::ADAMRingBuffer<ADAM::SPLData>::~ADAMRingBuffer((void *)(a1 + 112));
  *(void *)(a1 + 64) = &unk_26D4EC870;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  *(void *)a1 = &unk_26D4EC800;
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::getNodeDescriptor(uint64_t a1)
{
  return a1 + 64;
}

_DWORD *ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::pop(_DWORD *result)
{
  if (result[30])
  {
    result[29] = (result[29] + 1) % result[44];
    atomic_fetch_add(result + 30, 0xFFFFFFFF);
  }
  return result;
}

uint64_t ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::read(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 116);
  unsigned int v4 = *(_DWORD *)(a1 + 176);
  unint64_t v5 = (atomic_uint *)(a1 + 120);
  if (!atomic_load((unsigned int *)(a1 + 120))) {
    return 1701670945;
  }
  uint64_t result = 0;
  unsigned int v9 = (v3 + 1) % v4;
  uint64_t v10 = *(void *)(a1 + 152) + 20 * v3;
  long long v11 = *(_OWORD *)v10;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v10 + 16);
  *(_OWORD *)a2 = v11;
  uint8x8_t v12 = (_OWORD *)(*(void *)(a1 + 128) + 80 * v3);
  *a3 = *v12;
  long long v13 = v12[1];
  long long v14 = v12[2];
  long long v15 = v12[4];
  a3[3] = v12[3];
  a3[4] = v15;
  a3[1] = v13;
  a3[2] = v14;
  *(_DWORD *)(a1 + 116) = v9;
  atomic_fetch_add(v5, 0xFFFFFFFF);
  return result;
}

uint64_t ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  *(_OWORD *)int buf = *(_OWORD *)a2;
  *(_DWORD *)&buf[16] = *(_DWORD *)(a2 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 112);
  unsigned int v5 = *(_DWORD *)(a1 + 176);
  if (*(_DWORD *)(a1 + 120) == v5)
  {
    ++ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::err_cnt;
    int v6 = ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
    unsigned int v7 = ++ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
    if (v6)
    {
LABEL_18:
      if (v7 > 0xBB7) {
        unsigned int v7 = 0;
      }
      ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v7;
      return 1718971425;
    }
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      id v8 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v8)
      {
LABEL_17:
        unsigned int v7 = ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
        goto LABEL_18;
      }
    }
    else
    {
      id v8 = (id)MEMORY[0x263EF8438];
      id v21 = MEMORY[0x263EF8438];
    }
    unint64_t v22 = v8;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 16);
      CAX4CCString::CAX4CCString((CAX4CCString *)v24, 0x66756C21u);
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "ADAMBufferNodes.hpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 151;
      *(_WORD *)&unsigned char buf[18] = 2048;
      uint64_t v26 = v23;
      __int16 v27 = 2080;
      unint64_t v28 = v24;
      __int16 v29 = 1024;
      int v30 = ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::process(ADAM::UnionDataPtr,ADAM::Metadata const&)::err_cnt;
      _os_log_impl(&dword_2227C1000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Session %llx: Failed to process data, err code: %s, failed count: %u", buf, 0x2Cu);
    }

    goto LABEL_17;
  }
  unsigned int v9 = (v4 + 1) % v5;
  uint64_t v10 = *(void *)(a1 + 152) + 20 * v4;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)buf;
  *(_DWORD *)(v10 + 16) = *(_DWORD *)&buf[16];
  long long v11 = (_OWORD *)(*(void *)(a1 + 128) + 80 * v4);
  long long v13 = a3[3];
  long long v12 = a3[4];
  long long v14 = a3[2];
  v11[1] = a3[1];
  v11[2] = v14;
  v11[3] = v13;
  v11[4] = v12;
  _OWORD *v11 = *a3;
  *(_DWORD *)(a1 + 112) = v9;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 120), 1u);
  unint64_t v15 = *(void *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 56);
  *(void *)(v15 + 8) = *(void *)(a1 + 16);
  *(_DWORD *)(v15 + 16) = 4;
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  atomic_ullong v16 = qword_26AB1A828[0];
  atomic_store(qword_26AB1A828[0], (unint64_t *)v15);
  unint64_t v17 = v16;
  atomic_compare_exchange_strong(qword_26AB1A828, &v17, v15);
  if (v17 != v16)
  {
    unint64_t v18 = v17;
    do
    {
      atomic_store(v17, (unint64_t *)v15);
      atomic_compare_exchange_strong(qword_26AB1A828, &v18, v15);
      BOOL v19 = v18 == v17;
      unint64_t v17 = v18;
    }
    while (!v19);
  }
  caulk::semaphore::signal((caulk::semaphore *)&unk_26AB1A810);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 56) = (*(_DWORD *)(a1 + 56) + 1) % *(_DWORD *)(a1 + 176);
  return result;
}

void sub_222802744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::reset(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a1 + 120))
  {
LABEL_5:
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 116) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    return;
  }
  int v2 = -50500;
  while (1)
  {
    v2 += 500;
    if (!v2) {
      break;
    }
    usleep(0x1F4u);
    if (!*(_DWORD *)(a1 + 120)) {
      goto LABEL_5;
    }
  }
  if (ADAM::ADAMLogScope(void)::once != -1) {
    dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
  }
  if (ADAM::ADAMLogScope(void)::scope)
  {
    unsigned int v3 = *(id *)ADAM::ADAMLogScope(void)::scope;
    if (!v3) {
      return;
    }
  }
  else
  {
    unsigned int v3 = MEMORY[0x263EF8438];
    id v4 = MEMORY[0x263EF8438];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = 136315650;
    unsigned int v7 = "ADAMBufferNodes.hpp";
    __int16 v8 = 1024;
    int v9 = 119;
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    _os_log_impl(&dword_2227C1000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Session: %llx Failed to flush ring buffer, Timedout", (uint8_t *)&v6, 0x1Cu);
  }
}

void ADAM::BufferNodeSPL<ADAM::SPLData,(ADAM::EndPointBitMask)65,16u>::initialize(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 8))
  {
    ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
    ADAM::AudioDataAnalysisManager::addWriters(*(void *)(a1 + 16), *(void *)(a1 + 96));
    *(unsigned char *)(a1 + 8) = 1;
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      int v2 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v2) {
        return;
      }
    }
    else
    {
      int v2 = MEMORY[0x263EF8438];
      id v3 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 16);
      int v5 = 136315650;
      int v6 = "ADAMBufferNodes.hpp";
      __int16 v7 = 1024;
      int v8 = 108;
      __int16 v9 = 2048;
      uint64_t v10 = v4;
      _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session: %llx initialized", (uint8_t *)&v5, 0x1Cu);
    }
  }
}

uint64_t ADAM::Analyzer::MediaExposureBuffer::hardReset(ADAM::Analyzer::MediaExposureBuffer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

double ADAM::Analyzer::MediaExposureBuffer::reset(ADAM::Analyzer::MediaExposureBuffer *this)
{
  *((unsigned char *)this + 112) = 0;
  double result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  return result;
}

uint64_t ADAM::Analyzer::MediaExposureBuffer::analyze(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  ADAM::AudioDataAnalysisManager::instance((ADAM::AudioDataAnalysisManager *)a1);
  __int16 v7 = (std::mutex *)(qword_26AB1A888 + 24);
  std::mutex::lock((std::mutex *)(qword_26AB1A888 + 24));
  int v8 = *(void **)(qword_26AB1A888 + 16);
  __int16 v9 = [NSNumber numberWithUnsignedInteger:1751213428];
  uint64_t v10 = [v8 objectForKey:v9];

  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v11 = v10;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v43 objects:buf count:16];
  if (!v12) {
    goto LABEL_9;
  }
  uint64_t v13 = *(void *)v44;
  while (2)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if (*(void *)v44 != v13) {
        objc_enumerationMutation(v11);
      }
      if (objc_msgSend(*(id *)(*((void *)&v43 + 1) + 8 * i), "isActive:", 1751213428, (void)v43))
      {

        std::mutex::unlock(v7);
        if (a3)
        {
          if (*(float *)a3 < 0.0 || *(float *)a3 >= 130.0 || *(float *)(a3 + 16) < 0.0)
          {
            if (ADAM::ADAMLogScope(void)::once != -1) {
              dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
            }
            uint64_t v18 = 1684108321;
            if (ADAM::ADAMLogScope(void)::scope)
            {
              BOOL v19 = *(id *)ADAM::ADAMLogScope(void)::scope;
              if (!v19) {
                return v18;
              }
            }
            else
            {
              BOOL v19 = MEMORY[0x263EF8438];
              id v23 = MEMORY[0x263EF8438];
            }
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              double v24 = *(float *)a3;
              double v25 = *(float *)(a3 + 16);
              *(_DWORD *)int buf = 136315906;
              CFDictionaryRef v48 = "MediaExposureBuffer.cpp";
              __int16 v49 = 1024;
              int v50 = 108;
              __int16 v51 = 2048;
              double v52 = v24;
              __int16 v53 = 2048;
              double v54 = v25;
              _os_log_impl(&dword_2227C1000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid HAE data { dBA: %.2f, duration: %.2f }", buf, 0x26u);
            }

            return v18;
          }
          *(_OWORD *)(a1 + 32) = *a4;
          long long v26 = a4[1];
          long long v27 = a4[2];
          long long v28 = a4[4];
          *(_OWORD *)(a1 + 80) = a4[3];
          *(_OWORD *)(a1 + 96) = v28;
          *(_OWORD *)(a1 + 48) = v26;
          *(_OWORD *)(a1 + 64) = v27;
          *(double *)&long long v26 = *(float *)a3;
          double v29 = *(float *)(a3 + 16);
          *(double *)(a1 + 128) = *(double *)(a1 + 128) + v29;
          double v30 = *(double *)(a1 + 120) + __exp10(*(double *)&v26 * 0.1) * v29;
          *(double *)(a1 + 120) = v30;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(a3 + 12);
          double v31 = *(double *)(a1 + 128);
          if (v31 < *(double *)(a1 + 160)) {
            return 0;
          }
          long double v33 = log(v30 / v31);
          *(void *)(a1 + 120) = 0;
          *(void *)(a1 + 128) = 0;
          *(float *)&long double v33 = v33 * 10.0 / 2.30258509;
          *(_DWORD *)(a1 + 136) = LODWORD(v33);
          *(float *)&long double v33 = v31;
          *(_DWORD *)(a1 + 152) = LODWORD(v33);
          *(unsigned char *)(a1 + 112) = 1;
          int v34 = ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
          unsigned int v35 = ++ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
          if (v34)
          {
LABEL_64:
            uint64_t v18 = 0;
            if (v35 > 0x1D) {
              unsigned int v35 = 0;
            }
            ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v35;
            return v18;
          }
          if (ADAM::ADAMLogScope(void)::once != -1) {
            dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
          }
          if (ADAM::ADAMLogScope(void)::scope)
          {
            BOOL v36 = *(id *)ADAM::ADAMLogScope(void)::scope;
            if (!v36)
            {
LABEL_63:
              unsigned int v35 = ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
              goto LABEL_64;
            }
          }
          else
          {
            BOOL v36 = MEMORY[0x263EF8438];
            id v39 = MEMORY[0x263EF8438];
          }
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            double v40 = *(float *)(a1 + 136);
            double v41 = *(float *)(a1 + 152);
            double v42 = *(float *)(a1 + 148);
            *(_DWORD *)int buf = 136316162;
            CFDictionaryRef v48 = "MediaExposureBuffer.cpp";
            __int16 v49 = 1024;
            int v50 = 55;
            __int16 v51 = 2048;
            double v52 = v40;
            __int16 v53 = 2048;
            double v54 = v41;
            __int16 v55 = 2048;
            double v56 = v42;
            _os_log_impl(&dword_2227C1000, v36, OS_LOG_TYPE_INFO, "%25s:%-5d MediaExposureBuffer: accumulated dose = %.2f (dBA), duration %.2f (sec) volume gain: %.2f", buf, 0x30u);
          }

          goto LABEL_63;
        }
        int v20 = ADAM::Analyzer::MediaExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
        unsigned int v21 = ++ADAM::Analyzer::MediaExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
        if (v20)
        {
LABEL_55:
          uint64_t v18 = 1684108321;
          if (v21 > 0xBB7) {
            unsigned int v21 = 0;
          }
          ADAM::Analyzer::MediaExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt = v21;
          return v18;
        }
        if (ADAM::ADAMLogScope(void)::once != -1) {
          dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
        }
        if (ADAM::ADAMLogScope(void)::scope)
        {
          unint64_t v22 = *(id *)ADAM::ADAMLogScope(void)::scope;
          if (!v22)
          {
LABEL_54:
            unsigned int v21 = ADAM::Analyzer::MediaExposureBuffer::isDataValid(ADAM::UnionDataPtr)const::errCnt;
            goto LABEL_55;
          }
        }
        else
        {
          unint64_t v22 = MEMORY[0x263EF8438];
          id v37 = MEMORY[0x263EF8438];
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          CFDictionaryRef v48 = "MediaExposureBuffer.cpp";
          __int16 v49 = 1024;
          int v50 = 98;
          _os_log_impl(&dword_2227C1000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAE SPL data ptr is null? (sampled every 3k)", buf, 0x12u);
        }

        goto LABEL_54;
      }
    }
    uint64_t v12 = [v11 countByEnumeratingWithState:&v43 objects:buf count:16];
    if (v12) {
      continue;
    }
    break;
  }
LABEL_9:

  std::mutex::unlock(v7);
  int v15 = ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
  unsigned int v16 = ++ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
  if (!v15)
  {
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      unint64_t v17 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v17) {
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v17 = MEMORY[0x263EF8438];
      id v32 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136315394;
      CFDictionaryRef v48 = "MediaExposureBuffer.cpp";
      __int16 v49 = 1024;
      int v50 = 34;
      _os_log_impl(&dword_2227C1000, v17, OS_LOG_TYPE_INFO, "%25s:%-5d MediaExposureBuffer: no delegates for HAE...", buf, 0x12u);
    }

LABEL_40:
    unsigned int v16 = ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt;
  }
  uint64_t v18 = 0;
  if (v16 > 0xBB7) {
    unsigned int v16 = 0;
  }
  ADAM::Analyzer::MediaExposureBuffer::analyze(unsigned long long,ADAM::UnionDataPtr,ADAM::Metadata const&)::errCnt = v16;
  return v18;
}

void sub_222803048(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ADAM::Analyzer::MediaExposureBuffer::flush(ADAM::Analyzer::MediaExposureBuffer *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  double v1 = *((double *)this + 16);
  if (v1 > 0.0)
  {
    long double v3 = log(*((double *)this + 15) / v1);
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    *(float *)&long double v3 = v3 * 10.0 / 2.30258509;
    *((_DWORD *)this + 34) = LODWORD(v3);
    *(float *)&long double v3 = v1;
    *((_DWORD *)this + 38) = LODWORD(v3);
    *((unsigned char *)this + 112) = 1;
    *((void *)this + 13) = 1;
    if (ADAM::ADAMLogScope(void)::once != -1) {
      dispatch_once(&ADAM::ADAMLogScope(void)::once, &__block_literal_global_81);
    }
    if (ADAM::ADAMLogScope(void)::scope)
    {
      uint64_t v4 = *(id *)ADAM::ADAMLogScope(void)::scope;
      if (!v4) {
        return;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x263EF8438];
      id v5 = MEMORY[0x263EF8438];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      __int16 v7 = "MediaExposureBuffer.cpp";
      __int16 v8 = 1024;
      int v9 = 78;
      _os_log_impl(&dword_2227C1000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d LoudnessAnalyzer needs to be flushed", (uint8_t *)&v6, 0x12u);
    }
  }
}

void ADAM::Analyzer::MediaExposureBuffer::~MediaExposureBuffer(ADAM::Analyzer::MediaExposureBuffer *this)
{
}

void std::default_delete<rtaid::ConfigurationManager>::operator()[abi:ne180100](uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long double v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  std::__tree<std::map<rtaid::AnalyzerType,unsigned int>>::destroy(*(void **)(a1 + 32));
  std::__tree<ADAM::EndPointBitMask>::destroy(*(void **)(a1 + 8));

  JUMPOUT(0x223C9D800);
}

uint64_t std::unique_ptr<AudioIssueDetectorManagerCallStateReporter>::reset[abi:ne180100](uint64_t result)
{
  double v1 = (uint64_t *)qword_26AB1A980;
  qword_26AB1A980 = result;
  if (v1)
  {
    std::unique_ptr<AudioIssueDetectorManagerCallStateReporter::InternalCallState>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x223C9D800);
  }
  return result;
}

void std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 24);
  v3[0] = *(void *)(a1 + 16);
  v3[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  rtaid::HandleAudioIssue(a2, v3, *(float *)(a1 + 8));
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_22280335C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::destroy(uint64_t a1)
{
  double v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D4EC910;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 16) = *(void *)(result + 16);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

_DWORD *std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x20uLL);
  *(void *)double result = &unk_26D4EC910;
  result[2] = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 2) = *(void *)(a1 + 16);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::~__func(void *a1)
{
  *a1 = &unk_26D4EC910;
  double v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C9D800);
}

void *std::__function::__func<rtaid::Manager::Manager(std::unique_ptr<AudioIssueDetectorDependencyInjection> &&)::$_0,std::allocator<std::unique_ptr<AudioIssueDetectorDependencyInjection> &&>,void ()(rtaid::IssueDictionary const&)>::~__func(void *a1)
{
  *a1 = &unk_26D4EC910;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t *std::__shared_ptr_pointer<AudioIssueDetectorDependencyInjection  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<AudioIssueDetectorDependencyInjection>::operator()[abi:ne180100](*(uint64_t **)(a1 + 24));
}

void std::__shared_ptr_pointer<AudioIssueDetectorDependencyInjection  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9D800);
}

void rtaid::Manager::Manager(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  SingletonManagerInstance(void)::sInstance.__m_.__sig = 850045863;
  *(_OWORD *)SingletonManagerInstance(void)::sInstance.__m_.__opaque = 0u;
  *(_OWORD *)&SingletonManagerInstance(void)::sInstance.__m_.__opaque[16] = 0u;
  *(_OWORD *)&SingletonManagerInstance(void)::sInstance.__m_.__opaque[32] = 0u;
  *(_OWORD *)&SingletonManagerInstance(void)::sInstance.__m_.__opaque[48] = 0u;
  *(_OWORD *)&qword_26AB1A900 = 0u;
  qword_26AB1A910 = 0;
  dword_26AB1A918 = 1065353216;
  qword_26AB1A920 = 0;
  dword_26AB1A928 = 0;
  *(_OWORD *)&qword_26AB1A930 = 0u;
  *(_OWORD *)&qword_26AB1A940 = 0u;
  *(_OWORD *)&qword_26AB1A950 = 0u;
  *(uint64_t *)((char *)&qword_26AB1A958 + 6) = 0;
  xmmword_26AB1A968 = xmmword_2228058A0;
  dword_26AB1A978 = -1024458752;
  qword_26AB1A980 = 0;
  qword_26AB1A988 = 0;
  qword_26AB1A990 = *a1;
  if (qword_26AB1A990) {
    operator new();
  }
  qword_26AB1A998 = 0;
  *a1 = 0;
  if (qword_26AB1A990) {
    operator new();
  }
  _os_assert_log();
  _os_crash();
  __break(1u);
  _os_assert_log();
  _os_crash();
  __break(1u);
  {
    a1[277] = (uint64_t)os_log_create("com.apple.coreaudio", "aid");
  }
  uint64_t v2 = a1[277];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = 136316162;
    uint64_t v4 = "AudioIssueDetectorManager.cpp";
    __int16 v5 = 1024;
    int v6 = 47;
    __int16 v7 = 1040;
    int v8 = 14;
    __int16 v9 = 2080;
    uint64_t v10 = "rtaid::Manager]";
    __int16 v11 = 2048;
    uint64_t v12 = &SingletonManagerInstance(void)::sInstance;
    _os_log_impl(&dword_2227C1000, v2, OS_LOG_TYPE_INFO, "[%s:%-5d %.*s:%p] constructed", (uint8_t *)&v3, 0x2Cu);
  }
}

void sub_222803A1C(_Unwind_Exception *a1)
{
  std::unique_ptr<AudioIssueDetectorManagerCallStateReporter::InternalCallState>::reset[abi:ne180100](v1, 0);
  MEMORY[0x223C9D800](v1, 0x20C4093837F09);
  if (qword_26AB1A998) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)qword_26AB1A998);
  }
  uint64_t v3 = qword_26AB1A988;
  qword_26AB1A988 = 0;
  if (v3) {
    std::default_delete<rtaid::ConfigurationManager>::operator()[abi:ne180100](v3);
  }
  std::unique_ptr<AudioIssueDetectorManagerCallStateReporter>::reset[abi:ne180100](0);
  if (qword_26AB1A958) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)qword_26AB1A958);
  }
  if (qword_26AB1A948) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)qword_26AB1A948);
  }
  if (qword_26AB1A938) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)qword_26AB1A938);
  }
  uint64_t v4 = (void *)qword_26AB1A908;
  if (qword_26AB1A908)
  {
    do
    {
      __int16 v5 = (void *)*v4;
      int v6 = (std::__shared_weak_count *)v4[4];
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      operator delete(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  __int16 v7 = (void *)qword_26AB1A8F8;
  qword_26AB1A8F8 = 0;
  if (v7) {
    operator delete(v7);
  }
  std::mutex::~mutex(&SingletonManagerInstance(void)::sInstance);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<rtaid::Detector>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

std::__shared_weak_count **std::__shared_ptr_pointer<rtaid::Detector  *>::__on_zero_shared(uint64_t a1)
{
  double result = *(std::__shared_weak_count ***)(a1 + 24);
  if (result)
  {
    rtaid::Detector::~Detector(result);
    JUMPOUT(0x223C9D800);
  }
  return result;
}

void std::__shared_ptr_pointer<rtaid::Detector  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9D800);
}

uint64_t std::__function::__func<rtaid::Manager::InitializeDetector(long long)::$_0,std::allocator<rtaid::Manager::InitializeDetector(long long)::$_0>,void ()(rtaid::IssueDictionary)>::operator()(uint64_t a1, const void *a2)
{
  __dst[62] = *MEMORY[0x263EF8340];
  uint64_t result = (uint64_t)memcpy(__dst, a2, 0x1F0uLL);
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(unsigned __int8 ***)(v7 + 200);
  v10 = !v8 || (__int16 v9 = *v8) == 0 || *v9 != 0;
  if (HIDWORD(__dst[32]) != 5) {
    goto LABEL_20;
  }
  if (*(float *)(v7 + 176) < 1.0) {
    return result;
  }
  if (LODWORD(__dst[32]) == 7)
  {
    if (__dst[0] == 0x6374756F2D6F6972 && *(void *)((char *)__dst + 5) == 0x746E65696C637475) {
      goto LABEL_11;
    }
  }
  else if (LODWORD(__dst[32]) == 1 && !LOBYTE(__dst[33]) && __dst[0] == 0x646E616265736142)
  {
LABEL_11:
    float v11 = *((float *)&__dst[35] + 1);
    *(_DWORD *)(v7 + 180) = HIDWORD(__dst[35]);
    *(_DWORD *)(v7 + 188) = __dst[36];
    goto LABEL_17;
  }
  *(_DWORD *)(v7 + 184) = HIDWORD(__dst[35]);
  *(_DWORD *)(v7 + 192) = __dst[36];
  float v11 = *(float *)(v7 + 180);
LABEL_17:
  if (v11 == -120.0) {
    return result;
  }
  v5.n128_u32[0] = *(_DWORD *)(v7 + 184);
  v6.n128_u32[0] = -1024458752;
  if (v5.n128_f32[0] == -120.0) {
    return result;
  }
  HIDWORD(__dst[35]) = *(_DWORD *)(v7 + 184);
  *(float *)&__dst[36] = v11;
  HIDWORD(__dst[36]) = *(_DWORD *)(v7 + 192);
  LODWORD(__dst[37]) = *(_DWORD *)(v7 + 188);
  v4.n128_u64[0] = (unint64_t)vdup_n_s32(0xC2F00000);
  *(void *)(v7 + 180) = v4.n128_u64[0];
LABEL_20:
  unsigned __int8 v13 = atomic_load((unsigned __int8 *)(v7 + 172));
  int v14 = 1;
  atomic_compare_exchange_strong((atomic_uchar *volatile)(v7 + 173), (unsigned __int8 *)&v14, v14);
  BOOL v15 = v14 == 1;
  if (HIDWORD(__dst[32]) == 1)
  {
    if (LOBYTE(__dst[33])) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v14 == 1;
    }
    if (!v18)
    {
      int v19 = 0;
      uint64_t result = LODWORD(__dst[32]) == 3;
      int v20 = LODWORD(__dst[32]) == 4;
      uint64_t v21 = BYTE4(__dst[39]);
      if (BYTE4(__dst[39])) {
        BOOL v22 = LODWORD(__dst[32]) == 2;
      }
      else {
        BOOL v22 = 0;
      }
      int v23 = v22;
      if (BYTE4(__dst[39]) && ((v20 ^ result) & 1) == 0)
      {
        char v24 = 0;
        char v25 = LODWORD(__dst[32]) == 4;
        char v26 = LODWORD(__dst[32]) == 3;
        long long v27 = (unsigned __int16 *)&__dst[56];
        do
        {
          int v29 = *v27++;
          int v28 = v29;
          if (LODWORD(__dst[32]) != 2 || v28 != 13)
          {
            LOBYTE(v23) = 0;
            char v26 = (v28 == 2) | v26 & 1;
            char v25 = (v28 == 1) | v25 & 1;
            char v24 = (v28 == 4) | v24 & 1;
          }
          --v21;
        }
        while (v21);
        uint64_t result = v26 & 1;
        int v20 = v25 & 1;
        int v19 = v24 & 1;
        v23 &= 1u;
      }
      v5.n128_u32[0] = HIDWORD(__dst[35]);
      v4.n128_f32[0] = (float)HIDWORD(__dst[33]) / *((float *)&__dst[35] + 1);
      v6.n128_f32[0] = (float)HIDWORD(__dst[34]) / *((float *)&__dst[35] + 1);
      if (v23)
      {
        if (v4.n128_f32[0] > 0.0) {
          return (*(uint64_t (**)(void, void *, __n128, __n128, __n128))(**(void **)(*(void *)(v7 + 216) + 16)
        }
                                                                                     + 24))(*(void *)(*(void *)(v7 + 216) + 16), __dst, v4, v5, v6);
        if (v6.n128_f32[0] > 0.0 || LODWORD(__dst[35]) != 0) {
          return (*(uint64_t (**)(void, void *, __n128, __n128, __n128))(**(void **)(*(void *)(v7 + 216) + 16)
        }
                                                                                     + 24))(*(void *)(*(void *)(v7 + 216) + 16), __dst, v4, v5, v6);
      }
      else if (result)
      {
        if (v10)
        {
          v6.n128_u32[0] = __dst[34];
          BOOL v31 = !v15;
          if (v13) {
            BOOL v31 = 0;
          }
          if (v31
            || (LODWORD(__dst[32]) != 1 || LOBYTE(__dst[33]) != 1 || __dst[0] != 0x646E616265736142)
            && (LODWORD(__dst[32]) != 2
             || LOBYTE(__dst[33]) != 1
             || (__dst[0] == 0x2D20505344657250 ? (BOOL v32 = __dst[1] == 0x707974205B207B20) : (BOOL v32 = 0),
                 v32 ? (BOOL v33 = *(void *)((char *)&__dst[1] + 7) == 0x6E6C7570203A6570) : (BOOL v33 = 0),
                 !v33)))
          {
            if ((LODWORD(__dst[32]) - 1) <= 1 && LOBYTE(__dst[33]) == 1)
            {
              v5.n128_u32[0] = 5.0;
              if (v4.n128_f32[0] > 5.0) {
                return (*(uint64_t (**)(void, void *, __n128, __n128, __n128))(**(void **)(*(void *)(v7 + 216) + 16)
              }
                                                                                           + 24))(*(void *)(*(void *)(v7 + 216) + 16), __dst, v4, v5, v6);
            }
            else
            {
              v5.n128_f32[0] = (float)LODWORD(__dst[34]) / *((float *)&__dst[35] + 1);
              v6.n128_u32[0] = 5.0;
              if (v4.n128_f32[0] > 5.0 || v5.n128_f32[0] > 5.0) {
                return (*(uint64_t (**)(void, void *, __n128, __n128, __n128))(**(void **)(*(void *)(v7 + 216) + 16)
              }
                                                                                           + 24))(*(void *)(*(void *)(v7 + 216) + 16), __dst, v4, v5, v6);
            }
          }
        }
      }
      else if (v20)
      {
        v5.n128_u32[0] = 1034147594;
        if (v4.n128_f32[0] > 0.08) {
          return (*(uint64_t (**)(void, void *, __n128, __n128, __n128))(**(void **)(*(void *)(v7 + 216) + 16)
        }
                                                                                     + 24))(*(void *)(*(void *)(v7 + 216) + 16), __dst, v4, v5, v6);
        if (v6.n128_f32[0] > 0.08 || LODWORD(__dst[35]) > 5) {
          return (*(uint64_t (**)(void, void *, __n128, __n128, __n128))(**(void **)(*(void *)(v7 + 216) + 16)
        }
                                                                                     + 24))(*(void *)(*(void *)(v7 + 216) + 16), __dst, v4, v5, v6);
      }
      else if (v19)
      {
        v5.n128_u32[0] = 9.0;
        if (v4.n128_f32[0] > 9.0 || v6.n128_f32[0] > 9.0) {
          return (*(uint64_t (**)(void, void *, __n128, __n128, __n128))(**(void **)(*(void *)(v7 + 216) + 16)
        }
                                                                                     + 24))(*(void *)(*(void *)(v7 + 216) + 16), __dst, v4, v5, v6);
      }
    }
  }
  else
  {
    if (HIDWORD(__dst[32]) != 5) {
      return (*(uint64_t (**)(void, void *, __n128, __n128, __n128))(**(void **)(*(void *)(v7 + 216)
    }
                                                                                               + 16)
                                                                                 + 24))(*(void *)(*(void *)(v7 + 216) + 16), __dst, v4, v5, v6);
    v5.n128_u32[0] = HIDWORD(__dst[35]);
    v6.n128_u32[0] = __dst[36];
    BOOL v16 = *(float *)&__dst[36] > -60.0;
    BOOL v17 = *((float *)&__dst[35] + 1) < (float)(-30.0 - *(float *)(v7 + 168)) && *(float *)&__dst[36] > -60.0;
    v4.n128_u32[0] = -1038090240;
    if (*(float *)&__dst[36] >= -40.0) {
      BOOL v16 = 0;
    }
    if (v17 || v16) {
      return (*(uint64_t (**)(void, void *, __n128, __n128, __n128))(**(void **)(*(void *)(v7 + 216)
    }
                                                                                               + 16)
                                                                                 + 24))(*(void *)(*(void *)(v7 + 216) + 16), __dst, v4, v5, v6);
  }
  return result;
}

void *std::__function::__func<rtaid::Manager::InitializeDetector(long long)::$_0,std::allocator<rtaid::Manager::InitializeDetector(long long)::$_0>,void ()(rtaid::IssueDictionary)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4EC9A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<rtaid::Manager::InitializeDetector(long long)::$_0,std::allocator<rtaid::Manager::InitializeDetector(long long)::$_0>,void ()(rtaid::IssueDictionary)>::~__func()
{
}

uint64_t *std::__hash_table<std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::__unordered_map_hasher<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::hash<rtaid::AnalyzerType>,std::equal_to<rtaid::AnalyzerType>,true>,std::__unordered_map_equal<rtaid::AnalyzerType,std::__hash_value_type<rtaid::AnalyzerType,std::string>,std::equal_to<rtaid::AnalyzerType>,std::hash<rtaid::AnalyzerType>,true>,std::allocator<std::__hash_value_type<rtaid::AnalyzerType,std::string>>>::find<rtaid::AnalyzerType>(unsigned int a1)
{
  if (!*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)) {
    return 0;
  }
  uint8x8_t v1 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8));
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    unint64_t v2 = a1;
    if (*((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) <= (unint64_t)a1) {
      unint64_t v2 = (unint64_t)a1 % *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
    }
  }
  else
  {
    unint64_t v2 = (DWORD2(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap) - 1) & a1;
  }
  uint64_t i = *(uint64_t **)(rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 8 * v2);
  if (i)
  {
    for (uint64_t i = (uint64_t *)*i; i; uint64_t i = (uint64_t *)*i)
    {
      unint64_t v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1) {
          return i;
        }
      }
      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1)) {
            v4 %= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1);
          }
        }
        else
        {
          v4 &= *((void *)&rtaid::GetAnalyzerToStringMap(void)::gAnalyzerToStringMap + 1) - 1;
        }
        if (v4 != v2) {
          return 0;
        }
      }
    }
  }
  return i;
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return (AudioComponent)MEMORY[0x270F0FC80](inComponent, inDesc);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return MEMORY[0x270F0FCA0](inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return MEMORY[0x270F0FCB0](inComponent, outInstance);
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  return MEMORY[0x270F0FCC8](inAudioConverter, *(void *)&inNumberPCMFrames, inInputData, outOutputData);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x270F0FCD0](inAudioConverter);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x270F0FCD8](inSourceFormat, inDestinationFormat, outAudioConverter);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x270F0FCE0](inAudioConverter, *(void *)&inPropertyID, *(void *)&inPropertyDataSize, inPropertyData);
}

OSStatus AudioUnitGetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue *outValue)
{
  return MEMORY[0x270F0FD50](inUnit, *(void *)&inID, *(void *)&inScope, *(void *)&inElement, outValue);
}

OSStatus AudioUnitInitialize(AudioUnit inUnit)
{
  return MEMORY[0x270F0FD68](inUnit);
}

OSStatus AudioUnitProcess(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x270F0FD70](inUnit, ioActionFlags, inTimeStamp, *(void *)&inNumberFrames, ioData);
}

OSStatus AudioUnitSetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames)
{
  return MEMORY[0x270F0FDA8](inUnit, *(void *)&inID, *(void *)&inScope, *(void *)&inElement, *(void *)&inBufferOffsetInFrames, inValue);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x270F0FDB0](inUnit, *(void *)&inID, *(void *)&inScope, *(void *)&inElement, inData, *(void *)&inDataSize);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x270EE4910](allocator, theDict);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x270EE4B88]();
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x270EE4C90](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x270EE4CA0](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x270EE4CD0](key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x270EE5098](alloc, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x270EE50D0](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return MEMORY[0x270EE54D8](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, timeout);
}

uint64_t ExtendedAudioBufferList_CreateWithFormat()
{
  return MEMORY[0x270F0FE10]();
}

uint64_t ExtendedAudioBufferList_Destroy()
{
  return MEMORY[0x270F0FE18]();
}

uint64_t ExtendedAudioBufferList_Prepare()
{
  return MEMORY[0x270F0FE20]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x270F95F98]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x270F95FD8]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x270F95FE8]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x270F95FF8]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

SRAbsoluteTime SRAbsoluteTimeFromContinuousTime(uint64_t cont)
{
  MEMORY[0x270EFE090](cont);
  return result;
}

CFAbsoluteTime SRAbsoluteTimeToCFAbsoluteTime(SRAbsoluteTime sr)
{
  MEMORY[0x270EFE0A0](sr);
  return result;
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x270EFDCB8](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x270EFDCD8](allocator);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
}

uint64_t caulk::concurrent::messenger::shared_logging_priority(caulk::concurrent::messenger *this)
{
  return MEMORY[0x270F87AA8](this);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x270F87AC0]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
}

uint64_t caulk::semaphore::timed_wait(caulk::semaphore *this, double a2)
{
  return MEMORY[0x270F87BF8](this, a2);
}

uint64_t caulk::semaphore::signal(caulk::semaphore *this)
{
  return MEMORY[0x270F87C00](this);
}

uint64_t caulk::semaphore::semaphore(caulk::semaphore *this)
{
  return MEMORY[0x270F87C08](this);
}

void caulk::semaphore::~semaphore(caulk::semaphore *this)
{
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x270F98248](this, __s);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x270F982D8](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x270F98310](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98318](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x270F98320](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x270F98440](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x270F98750]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987E0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x270F98890](__s, __icase);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x270F98898](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::shared_timed_mutex::lock_shared(std::shared_timed_mutex *this)
{
}

void std::shared_timed_mutex::unlock_shared(std::shared_timed_mutex *this)
{
}

void std::shared_timed_mutex::lock(std::shared_timed_mutex *this)
{
}

void std::shared_timed_mutex::unlock(std::shared_timed_mutex *this)
{
}

std::shared_timed_mutex *__cdecl std::shared_timed_mutex::shared_timed_mutex(std::shared_timed_mutex *this)
{
  return (std::shared_timed_mutex *)MEMORY[0x270F989A0](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x270F989F8]();
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x270F98A00](retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x270F98DF8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x270F98E00](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E30](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x270F98E48](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x270F98E58](this);
}

void std::exception::~exception(std::exception *this)
{
}

{
  MEMORY[0x270F98E80](this);
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x270F98F00](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

uint64_t _os_assert_log()
{
  return MEMORY[0x270ED8050]();
}

uint64_t _os_crash()
{
  return MEMORY[0x270ED8060]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x270ED8070]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x270ED85F8](*(void *)&__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

void free(void *a1)
{
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x270ED9D00]();
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x270EDA0B8](a1);
  return result;
}

uint64_t mach_get_times()
{
  return MEMORY[0x270EDA170]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x270EDAA90]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x270EDB508](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

void srand(unsigned int a1)
{
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

int uname(utsname *a1)
{
  return MEMORY[0x270EDB998](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

void vDSP_maxmgv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}