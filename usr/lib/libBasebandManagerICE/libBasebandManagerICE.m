void ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke_2(void *a1, char a2, void *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  uint64_t *v11;
  xpc_object_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  void **v18;
  char *v19;
  void **v20;
  void *v21;
  xpc_object_t object;
  void *__p[3];
  std::__shared_weak_count *v25;
  long long v26;
  uint8_t buf[4];
  void **v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E4F143B8];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v25 = v8;
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        if (a2)
        {
          v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            v19 = (char *)MEMORY[0x1C8795DE0](*a3);
            memset(__p, 170, sizeof(__p));
            std::string::basic_string[abi:ne180100]<0>(__p, v19);
            free(v19);
            v20 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
            LODWORD(v26) = 136315138;
            *(void *)((char *)&v26 + 4) = v20;
            _os_log_debug_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEBUG, "#D PPM telemetry from BB: %s", (uint8_t *)&v26, 0xCu);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
          }
          v11 = *(uint64_t **)(v7 + 576);
          v12 = (xpc_object_t)*a3;
          v21 = v12;
          if (v12 && MEMORY[0x1C8795EB0](v12) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v12);
          }
          else
          {
            v12 = xpc_null_create();
            v21 = v12;
          }
          PPMManager::reportTelemetry(v11, &v21);
          xpc_release(v12);
          v21 = 0;
        }
        else
        {
          v14 = (void *)a1[7];
          v13 = a1 + 7;
          v15 = *MEMORY[0x1E4FB9C68];
          if (xpc_dictionary_get_value(v14, (const char *)*MEMORY[0x1E4FB9C68]))
          {
            v16 = *(NSObject **)(v7 + 40);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(void *)&v26 = v13;
              *((void *)&v26 + 1) = v15;
              xpc::dict::object_proxy::operator xpc::object((uint64_t)&v26, &object);
              xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&object, (const object *)"None", v17);
              if (SHIBYTE(__p[2]) >= 0) {
                v18 = __p;
              }
              else {
                v18 = (void **)__p[0];
              }
              *(_DWORD *)buf = 136315138;
              v28 = v18;
              _os_log_error_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", buf, 0xCu);
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              xpc_release(object);
            }
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C59C83D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::handleInternalMessage_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  memset(__p, 170, sizeof(__p));
  xpc_object_t value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  int v7 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v8 = HIBYTE(__p[2]);
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  if (v8 == strlen(kCommandCheckIn[0]))
  {
    v9 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    if (!memcmp(v9, kCommandCheckIn[0], v8))
    {
      memset(object, 170, sizeof(object));
      xpc_object_t v15 = xpc_dictionary_get_value(*a3, kKeyClientName[0]);
      xpc_object_t v71 = v15;
      if (v15) {
        xpc_retain(v15);
      }
      else {
        xpc_object_t v71 = xpc_null_create();
      }
      memset(buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      xpc_release(v71);
      memset(buf, 170, 16);
      xpc_object_t v19 = *a2;
      if (*a2)
      {
        xpc_retain(*a2);
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        v20 = (void *)(a1 + 152);
        v21 = *(void **)(a1 + 152);
        if (!v21) {
          goto LABEL_52;
        }
      }
      else
      {
        xpc_object_t v19 = xpc_null_create();
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        v20 = (void *)(a1 + 152);
        v21 = *(void **)(a1 + 152);
        if (!v21) {
          goto LABEL_52;
        }
      }
      v22 = v20;
      do
      {
        unint64_t v23 = v21[4];
        BOOL v24 = v23 >= (unint64_t)v19;
        if (v23 >= (unint64_t)v19) {
          v25 = v21;
        }
        else {
          v25 = v21 + 1;
        }
        if (v24) {
          v22 = v21;
        }
        v21 = (void *)*v25;
      }
      while (*v25);
      if (v22 != v20 && (unint64_t)v19 >= v22[4])
      {
        uint64_t v27 = v22[5];
        v26 = (std::__shared_weak_count *)v22[6];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)buf = v27;
        *(void *)&buf[8] = v26;
        goto LABEL_53;
      }
LABEL_52:
      v26 = 0;
      uint64_t v27 = 0;
LABEL_53:
      xpc_release(v19);
      if (v27)
      {
        if ((xpc_object_t *)v27 != object)
        {
          if (*(char *)(v27 + 23) < 0)
          {
            if (SHIBYTE(object[2]) >= 0) {
              v50 = object;
            }
            else {
              v50 = (xpc_object_t *)object[0];
            }
            if (SHIBYTE(object[2]) >= 0) {
              size_t v51 = HIBYTE(object[2]);
            }
            else {
              size_t v51 = (size_t)object[1];
            }
            std::string::__assign_no_alias<false>((void **)v27, v50, v51);
          }
          else if ((HIBYTE(object[2]) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((void *)v27, object[0], (size_t)object[1]);
          }
          else
          {
            long long v28 = *(_OWORD *)object;
            *(xpc_object_t *)(v27 + 16) = object[2];
            *(_OWORD *)uint64_t v27 = v28;
          }
        }
        *(unsigned char *)(v27 + 24) = 1;
      }
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      if (SHIBYTE(object[2]) < 0) {
        operator delete(object[0]);
      }
      int v44 = 0;
      goto LABEL_134;
    }
  }
  if (v8 != strlen(kCommandCheckOut)
    || (v7 >= 0 ? (v10 = __p) : (v10 = (void **)__p[0]), memcmp(v10, kCommandCheckOut, v8)))
  {
    if (v8 != strlen(kCommandEventsOn[0])
      || (v7 >= 0 ? (v11 = __p) : (v11 = (void **)__p[0]), memcmp(v11, kCommandEventsOn[0], v8)))
    {
      if (v8 != strlen(kCommandEventsOff[0])) {
        goto LABEL_160;
      }
      v12 = v7 >= 0 ? __p : (void **)__p[0];
      if (memcmp(v12, kCommandEventsOff[0], v8)) {
        goto LABEL_160;
      }
      xpc_object_t v13 = xpc_dictionary_get_value(*a3, kKeyEventsList[0]);
      object[0] = v13;
      if (v13) {
        xpc_retain(v13);
      }
      else {
        object[0] = xpc_null_create();
      }
      xpc::bridge((uint64_t *)buf, (xpc *)object, v14);
      v45 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_102;
      }
      CFTypeID v46 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v46 == CFArrayGetTypeID())
      {
        CFRetain(v45);
        v47 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_102;
        }
      }
      else
      {
        v45 = 0;
        v47 = *(const void **)buf;
        if (!*(void *)buf)
        {
LABEL_102:
          xpc_release(object[0]);
          if (v45) {
            v48 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
          }
          else {
            v48 = 0;
          }
          if (v48)
          {
            xpc_object_t v49 = *a2;
            xpc_object_t v68 = v49;
            if (v49)
            {
              xpc_retain(v49);
              v67 = v45;
              if (v45)
              {
LABEL_108:
                CFRetain(v45);
                ABMServerInternal::registerNotification(a1, &v68, 0, &v67);
                CFRelease(v45);
                xpc_object_t v49 = v68;
                goto LABEL_124;
              }
            }
            else
            {
              xpc_object_t v49 = xpc_null_create();
              v67 = v45;
              xpc_object_t v68 = v49;
              if (v45) {
                goto LABEL_108;
              }
            }
            ABMServerInternal::registerNotification(a1, &v68, 0, &v67);
LABEL_124:
            xpc_release(v49);
            int v44 = 0;
            xpc_object_t v68 = 0;
            if (!v45) {
              goto LABEL_134;
            }
            goto LABEL_125;
          }
          int v44 = -534716414;
          if (v45) {
LABEL_125:
          }
            CFRelease(v45);
LABEL_134:
          xpc_object_t reply = xpc_dictionary_create_reply(*a3);
          if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8795EB0](reply) == MEMORY[0x1E4F14590])
            {
              xpc_retain(reply);
              xpc_object_t v53 = reply;
            }
            else
            {
              xpc_object_t v53 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v53 = xpc_null_create();
            xpc_object_t reply = 0;
          }
          xpc_release(reply);
          xpc_object_t v54 = xpc_int64_create(v44);
          if (!v54) {
            xpc_object_t v54 = xpc_null_create();
          }
          xpc_dictionary_set_value(v53, kKeyCommandResult[0], v54);
          xpc_object_t v55 = xpc_null_create();
          xpc_release(v54);
          xpc_release(v55);
          v56 = *(NSObject **)(a1 + 112);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          {
            v63 = __p;
            if (SHIBYTE(__p[2]) < 0) {
              v63 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = v63;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v44;
            _os_log_debug_impl(&dword_1C59C6000, v56, OS_LOG_TYPE_DEBUG, "#D Replying to client's command: %s, with return code: 0x%x", buf, 0x12u);
          }
          xpc_connection_send_message((xpc_connection_t)*a2, v53);
          xpc_object_t v57 = xpc_null_create();
          xpc_object_t v58 = xpc_null_create();
          xpc_object_t v59 = *a3;
          *a3 = v57;
          xpc_release(v59);
          xpc_release(v58);
          if (SHIBYTE(__p[2]) >= 0) {
            size_t v60 = HIBYTE(__p[2]);
          }
          else {
            size_t v60 = (size_t)__p[1];
          }
          if (v60 == strlen(kCommandEventsOn[0]))
          {
            v61 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
            if (!memcmp(v61, kCommandEventsOn[0], v60) && *(_DWORD *)(a1 + 192) == 1)
            {
              v65[0] = MEMORY[0x1E4F143A8];
              v65[1] = 1174405120;
              v65[2] = ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
              v65[3] = &__block_descriptor_tmp_24_2;
              xpc_object_t v62 = *a2;
              v65[4] = a1;
              xpc_object_t v66 = v62;
              if (v62) {
                xpc_retain(v62);
              }
              else {
                xpc_object_t v66 = xpc_null_create();
              }
              ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v65);
              xpc_release(v66);
              xpc_object_t v66 = 0;
            }
          }
          xpc_release(v53);
          goto LABEL_160;
        }
      }
      CFRelease(v47);
      goto LABEL_102;
    }
    xpc_object_t v17 = xpc_dictionary_get_value(*a3, kKeyEventsList[0]);
    object[0] = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      object[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)object, v18);
    v39 = *(const void **)buf;
    if (*(void *)buf)
    {
      CFTypeID v40 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v40 == CFArrayGetTypeID())
      {
        CFRetain(v39);
        v41 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_83;
        }
      }
      else
      {
        v39 = 0;
        v41 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_83;
        }
      }
      CFRelease(v41);
    }
LABEL_83:
    xpc_release(object[0]);
    if (v39) {
      v42 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      v42 = 0;
    }
    if (!v42)
    {
      int v44 = -534716414;
      if (!v39) {
        goto LABEL_134;
      }
LABEL_114:
      CFRelease(v39);
      goto LABEL_134;
    }
    xpc_object_t v43 = *a2;
    xpc_object_t v70 = v43;
    if (v43)
    {
      xpc_retain(v43);
      v69 = v39;
      if (v39)
      {
LABEL_89:
        CFRetain(v39);
        ABMServerInternal::registerNotification(a1, &v70, 1, &v69);
        CFRelease(v39);
        xpc_object_t v43 = v70;
        goto LABEL_113;
      }
    }
    else
    {
      xpc_object_t v43 = xpc_null_create();
      v69 = v39;
      xpc_object_t v70 = v43;
      if (v39) {
        goto LABEL_89;
      }
    }
    ABMServerInternal::registerNotification(a1, &v70, 1, &v69);
LABEL_113:
    xpc_release(v43);
    int v44 = 0;
    xpc_object_t v70 = 0;
    if (!v39) {
      goto LABEL_134;
    }
    goto LABEL_114;
  }
  memset(object, 170, sizeof(object));
  xpc_object_t v16 = xpc_dictionary_get_value(*a3, kKeyClientName[0]);
  xpc_object_t v71 = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    xpc_object_t v71 = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v71);
  v29 = *(void **)(a1 + 152);
  if (v29)
  {
    xpc_object_t v30 = *a2;
    uint64_t v31 = a1 + 152;
    do
    {
      unint64_t v32 = v29[4];
      BOOL v33 = v32 >= (unint64_t)v30;
      if (v32 >= (unint64_t)v30) {
        v34 = v29;
      }
      else {
        v34 = v29 + 1;
      }
      if (v33) {
        uint64_t v31 = (uint64_t)v29;
      }
      v29 = (void *)*v34;
    }
    while (*v34);
    if (v31 != a1 + 152 && (unint64_t)v30 >= *(void *)(v31 + 32)) {
      std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase((void *)(a1 + 144), v31);
    }
  }
  xpc_object_t v35 = xpc_null_create();
  xpc_object_t v36 = xpc_null_create();
  xpc_object_t v37 = *a3;
  *a3 = v35;
  xpc_release(v37);
  xpc_release(v36);
  v38 = *(NSObject **)(a1 + 112);
  if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    if ((SHIBYTE(object[2]) & 0x80000000) == 0) {
      goto LABEL_160;
    }
    goto LABEL_75;
  }
  v64 = object;
  if (SHIBYTE(object[2]) < 0) {
    v64 = (xpc_object_t *)object[0];
  }
  *(_DWORD *)buf = 136315138;
  *(void *)&buf[4] = v64;
  _os_log_debug_impl(&dword_1C59C6000, v38, OS_LOG_TYPE_DEBUG, "#D Client '%s' checked out", buf, 0xCu);
  if (SHIBYTE(object[2]) < 0) {
LABEL_75:
  }
    operator delete(object[0]);
LABEL_160:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C59C8DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  v2 = *a1;
  uint64_t v3 = **a1;
  v4 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(v3 + 120, (const void **)*a1 + 1);
  v5 = (const void *)v2[5];
  if ((uint64_t *)(v3 + 128) == v4)
  {
    if (!v5) {
      goto LABEL_12;
    }
    xpc_object_t v6 = xpc_null_create();
    uint64_t v7 = v2[5];
    object[0] = v6;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v7 + 16))(v7, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v8);
  }
  else if (v5)
  {
    object[0] = 0;
    object[1] = object;
    object[2] = (xpc_object_t)0x3002000000;
    xpc_object_t object[3] = __Block_byref_object_copy__7;
    object[4] = __Block_byref_object_dispose__7;
    xpc_object_t v16 = (void *)0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_42;
    aBlock[3] = &__block_descriptor_tmp_43_2;
    v14 = _Block_copy(v5);
    xpc_object_t v16 = _Block_copy(aBlock);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_44;
    v11[3] = &unk_1E651C770;
    v11[4] = object;
    v12 = v11;
    dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(v4[7], (xpc_object_t)v2[4], (void **)&v12);
    _Block_object_dispose(object, 8);
    if (v16) {
      _Block_release(v16);
    }
    if (v14) {
      _Block_release(v14);
    }
  }
  else
  {
    object[0] = &__block_literal_global_7;
    dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(v4[7], (xpc_object_t)v2[4], object);
  }
  v9 = (const void *)v2[5];
  if (v9) {
    _Block_release(v9);
  }
LABEL_12:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  if (*((char *)v2 + 31) < 0) {
    operator delete((void *)v2[1]);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  operator delete(a1);
}

void sub_1C59C9250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,xpc_object_t object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  xpc_release(object);
  xpc_release(v27);
  std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a9);
  v29 = (std::__shared_weak_count *)v26[2];
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke(uint64_t a1, void **a2, void **a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v5 = *a2;
  xpc_object_t v8 = v5;
  if (!v5)
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v6 = *a3;
    xpc_object_t object = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    xpc_object_t object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  xpc_object_t v6 = *a3;
  xpc_object_t object = v6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v4 + 40))(v4, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
}

void sub_1C59C93E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

void ABMServerInternal::handleMessage_sync(uint64_t a1, xpc_object_t *a2, xpc::object *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  xpc_object_t v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    xpc_object_t v35 = 0;
    xpc_object_t v36 = 0;
    uint64_t v7 = (void *)(a1 + 152);
    xpc_object_t v8 = *(void **)(a1 + 152);
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v35 = 0;
    xpc_object_t v36 = 0;
    uint64_t v7 = (void *)(a1 + 152);
    xpc_object_t v8 = *(void **)(a1 + 152);
    if (!v8)
    {
LABEL_15:
      xpc_object_t v13 = 0;
      goto LABEL_16;
    }
  }
  v9 = v7;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6) {
      v12 = v8;
    }
    else {
      v12 = v8 + 1;
    }
    if (v11) {
      v9 = v8;
    }
    xpc_object_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v7 || (unint64_t)v6 < v9[4]) {
    goto LABEL_15;
  }
  xpc_object_t v13 = (long long *)v9[5];
  v20 = (std::__shared_weak_count *)v9[6];
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v35 = v13;
  xpc_object_t v36 = v20;
LABEL_16:
  xpc_release(v6);
  v14 = *(NSObject **)(a1 + 112);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v13)
  {
    if (!v15) {
      goto LABEL_21;
    }
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v13, *((void *)v13 + 1));
    }
    else
    {
      long long v27 = *v13;
      v34.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v27;
    }
    int v28 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
    std::string::size_type v29 = v34.__r_.__value_.__r.__words[0];
    xpc::object::to_string((uint64_t *)__p, a3);
    v25 = &v34;
    if (v28 < 0) {
      v25 = (std::string *)v29;
    }
    if (v33 >= 0) {
      v26 = __p;
    }
    else {
      v26 = (void **)__p[0];
    }
  }
  else
  {
    if (!v15) {
      goto LABEL_21;
    }
    xpc::object::to_string((uint64_t *)&v34, (xpc::object *)a2);
    int v23 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
    std::string::size_type v24 = v34.__r_.__value_.__r.__words[0];
    xpc::object::to_string((uint64_t *)__p, a3);
    v25 = &v34;
    if (v23 < 0) {
      v25 = (std::string *)v24;
    }
    if (v33 >= 0) {
      v26 = __p;
    }
    else {
      v26 = (void **)__p[0];
    }
  }
  *(_DWORD *)buf = 136315394;
  v38 = v25;
  __int16 v39 = 2080;
  CFTypeID v40 = v26;
  _os_log_debug_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEBUG, "#D Message from %s:\n%s", buf, 0x16u);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
LABEL_21:
  xpc_object_t v16 = *(xpc_object_t *)a3;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16)
  {
    xpc_retain(v16);
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  }
  uint64_t v17 = MEMORY[0x1C8795EB0](v16);
  uint64_t v18 = MEMORY[0x1E4F14590];
  if (v17 == MEMORY[0x1E4F14590])
  {
    xpc_object_t v19 = *a2;
    xpc_object_t v31 = v19;
    if (v19)
    {
      xpc_retain(v19);
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v31 = v19;
    }
    ABMServerInternal::handleInternalMessage_sync(a1, &v31, (xpc_object_t *)&v34.__r_.__value_.__l.__data_);
    xpc_release(v19);
    xpc_object_t v31 = 0;
    xpc_object_t v16 = (xpc_object_t)v34.__r_.__value_.__r.__words[0];
  }
  if (MEMORY[0x1C8795EB0](v16) == v18)
  {
    v21 = (_xpc_connection_s *)*a2;
    xpc_connection_t v30 = v21;
    if (v21)
    {
      xpc_retain(v21);
    }
    else
    {
      v21 = (_xpc_connection_s *)xpc_null_create();
      xpc_connection_t v30 = v21;
    }
    ABMServerInternal::handlePublicMessage_sync(a1, &v30, (xpc_object_t *)&v34.__r_.__value_.__l.__data_);
    xpc_release(v21);
    xpc_connection_t v30 = 0;
  }
  xpc_release(v34.__r_.__value_.__l.__data_);
  v22 = v36;
  if (v36)
  {
    if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1C59C9788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
}

void sub_1C59C97A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  xpc_release(v15);
  xpc_release(object);
  JUMPOUT(0x1C59C9824);
}

void sub_1C59C97C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  xpc_release(v15);
  xpc_release(a15);
  JUMPOUT(0x1C59C9824);
}

void sub_1C59C9834(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t Service::isServerDown(Service *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
    if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 1;
    if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v6;
    }
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_1C59C9944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1C59C9B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void coex::Module::State::handleSetWCI2Mode_sync(void *a1, xpc_object_t *a2, unsigned int a3)
{
  *(void *)bytes = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t value = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Policy");
  v159[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v7 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  *(void *)bytes = v7;
  xpc_object_t v8 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_PowerThreshold");
  v159[0] = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v9 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  unint64_t v10 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RB_Threshold");
  v159[0] = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v11 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v12 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_LTE_TxDenialThreshold");
  v159[0] = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v13 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v14 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_APTTable");
  v159[0] = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v15 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v16 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_ControllerTxPowerLimit");
  v159[0] = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v17 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  uint64_t v18 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_WCI2PowerLimit");
  v159[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v19 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v20 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_LinkPathLossThreshold");
  v159[0] = v20;
  if (v20) {
    xpc_retain(v20);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v138 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v21 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RBFilterAlpha");
  v159[0] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  xpc::dyn_cast_or_default((xpc *)v159, v22, 0.0);
  double v24 = v23;
  xpc_release(v159[0]);
  v25 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_FilterRBThreshold");
  v159[0] = v25;
  if (v25) {
    xpc_retain(v25);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v137 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v26 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_ControllerTxPowerLimitTO");
  v159[0] = v26;
  if (v26) {
    xpc_retain(v26);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v136 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  long long v27 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_WCI2PowerLimitTO");
  v159[0] = v27;
  if (v27) {
    xpc_retain(v27);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  unsigned int v135 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  int v28 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_MaxAllowedFrameDenials");
  v159[0] = v28;
  if (v28) {
    xpc_retain(v28);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v146 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  std::string::size_type v29 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_FrameDenialWindow");
  v159[0] = v29;
  if (v29) {
    xpc_retain(v29);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v139 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_connection_t v30 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_TxPowerThresholdForAdvTxNotice");
  v159[0] = v30;
  if (v30) {
    xpc_retain(v30);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v133 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v31 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RbThresholdForAdvTxNotice");
  v159[0] = v31;
  if (v31) {
    xpc_retain(v31);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v132 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  unint64_t v32 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Controller_RB_Threshold");
  v159[0] = v32;
  if (v32) {
    xpc_retain(v32);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v131 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  char v33 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Harq_nack_ratio_Threshold");
  v159[0] = v33;
  if (v33) {
    xpc_retain(v33);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v130 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  std::string v34 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Controller_PowerLimiting_Enable");
  v159[0] = v34;
  if (v34) {
    xpc_retain(v34);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  int v129 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v35 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_enabled");
  v159[0] = v35;
  if (v35) {
    xpc_retain(v35);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  int v128 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v36 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_critical_ul_ca_bitmap");
  v159[0] = v36;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v127 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v37 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_tx_denial_ca_bitmap");
  v159[0] = v37;
  if (v37) {
    xpc_retain(v37);
  }
  else {
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  }
  uint64_t v126 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  xpc_object_t v38 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_ca_grp_bitmap");
  xpc_object_t v158 = v38;
  if (v38) {
    xpc_retain(v38);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  unsigned int v134 = v19;
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v39);
  CFMutableDictionaryRef v40 = v159[0];
  if (!v159[0] || (CFTypeID v41 = CFGetTypeID(v159[0]), v41 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v156 = 0;
    CFMutableDictionaryRef v42 = v159[0];
    if (!v159[0]) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  CFMutableDictionaryRef v156 = v40;
  CFRetain(v40);
  CFMutableDictionaryRef v42 = v159[0];
  if (v159[0]) {
LABEL_75:
  }
    CFRelease(v42);
LABEL_76:
  xpc_release(v158);
  xpc_object_t v43 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_consecutive_denial_threshold");
  xpc_object_t v158 = v43;
  if (v43) {
    xpc_retain(v43);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v44);
  if (!v159[0] || (cf = v159[0], CFTypeID v45 = CFGetTypeID(v159[0]), v45 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef cf = 0;
    CFMutableDictionaryRef v155 = 0;
    CFMutableDictionaryRef v46 = v159[0];
    if (!v159[0]) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  CFMutableDictionaryRef v155 = cf;
  CFRetain(cf);
  CFMutableDictionaryRef v46 = v159[0];
  if (v159[0]) {
LABEL_84:
  }
    CFRelease(v46);
LABEL_85:
  xpc_release(v158);
  xpc_object_t v47 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_duty_cycle_numerator_rx_prio_req");
  xpc_object_t v158 = v47;
  if (v47) {
    xpc_retain(v47);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v48);
  if (!v159[0] || (v144 = v159[0], CFTypeID v49 = CFGetTypeID(v159[0]), v49 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v144 = 0;
    CFMutableDictionaryRef v154 = 0;
    CFMutableDictionaryRef v50 = v159[0];
    if (!v159[0]) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  CFMutableDictionaryRef v154 = v144;
  CFRetain(v144);
  CFMutableDictionaryRef v50 = v159[0];
  if (v159[0]) {
LABEL_93:
  }
    CFRelease(v50);
LABEL_94:
  xpc_release(v158);
  xpc_object_t v51 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_power_threshold");
  xpc_object_t v158 = v51;
  if (v51) {
    xpc_retain(v51);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v52);
  if (!v159[0] || (v143 = v159[0], CFTypeID v53 = CFGetTypeID(v159[0]), v53 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v143 = 0;
    CFMutableDictionaryRef v153 = 0;
    CFMutableDictionaryRef v54 = v159[0];
    if (!v159[0]) {
      goto LABEL_103;
    }
    goto LABEL_102;
  }
  CFMutableDictionaryRef v153 = v143;
  CFRetain(v143);
  CFMutableDictionaryRef v54 = v159[0];
  if (v159[0]) {
LABEL_102:
  }
    CFRelease(v54);
LABEL_103:
  xpc_release(v158);
  xpc_object_t v55 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_RB_threshold");
  xpc_object_t v158 = v55;
  if (v55) {
    xpc_retain(v55);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v56);
  if (!v159[0] || (v142 = v159[0], CFTypeID v57 = CFGetTypeID(v159[0]), v57 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v142 = 0;
    CFMutableDictionaryRef v152 = 0;
    CFMutableDictionaryRef v58 = v159[0];
    if (!v159[0]) {
      goto LABEL_112;
    }
    goto LABEL_111;
  }
  CFMutableDictionaryRef v152 = v142;
  CFRetain(v142);
  CFMutableDictionaryRef v58 = v159[0];
  if (v159[0]) {
LABEL_111:
  }
    CFRelease(v58);
LABEL_112:
  xpc_release(v158);
  xpc_object_t v59 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_advance_notice_power_threshold");
  xpc_object_t v158 = v59;
  if (v59) {
    xpc_retain(v59);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v60);
  if (!v159[0] || (v141 = v159[0], CFTypeID v61 = CFGetTypeID(v159[0]), v61 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v141 = 0;
    CFMutableDictionaryRef v151 = 0;
    CFMutableDictionaryRef v62 = v159[0];
    if (!v159[0]) {
      goto LABEL_121;
    }
    goto LABEL_120;
  }
  CFMutableDictionaryRef v151 = v141;
  CFRetain(v141);
  CFMutableDictionaryRef v62 = v159[0];
  if (v159[0]) {
LABEL_120:
  }
    CFRelease(v62);
LABEL_121:
  xpc_release(v158);
  xpc_object_t v63 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_RB_threshold");
  xpc_object_t v158 = v63;
  if (v63) {
    xpc_retain(v63);
  }
  else {
    xpc_object_t v158 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v159, (xpc *)&v158, v64);
  if (!v159[0] || (v140 = v159[0], CFTypeID v65 = CFGetTypeID(v159[0]), v65 != CFArrayGetTypeID()))
  {
    CFMutableDictionaryRef v140 = 0;
    CFMutableDictionaryRef v150 = 0;
    CFMutableDictionaryRef v66 = v159[0];
    if (!v159[0]) {
      goto LABEL_130;
    }
    goto LABEL_129;
  }
  CFMutableDictionaryRef v150 = v140;
  CFRetain(v140);
  CFMutableDictionaryRef v66 = v159[0];
  if (v159[0]) {
LABEL_129:
  }
    CFRelease(v66);
LABEL_130:
  unsigned int v123 = v17;
  unsigned int v124 = v15;
  unsigned int v125 = v13;
  unsigned int v67 = v11;
  xpc_release(v158);
  v149 = 0;
  CFAllocatorRef v68 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v70 = Mutable;
  if (Mutable) {
    v149 = Mutable;
  }
  CFTypeRef v122 = (CFTypeRef)*MEMORY[0x1E4FB9590];
  ctu::cf::insert<__CFString const*,long long>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9590], v146, v68);
  CFTypeRef v121 = (CFTypeRef)*MEMORY[0x1E4FB94F0];
  ctu::cf::insert<__CFString const*,long long>(v70, (CFTypeRef)*MEMORY[0x1E4FB94F0], v139, v68);
  uint64_t v71 = v9;
  CFDataRef v72 = CFDataCreate(v68, bytes, 8);
  CFDataRef v73 = v72;
  unsigned int v147 = a3;
  if (a3) {
    uint64_t v74 = 20;
  }
  else {
    uint64_t v74 = 18;
  }
  uint64_t v75 = (void *)a1[v74];
  CFDataRef v148 = v72;
  if (v75) {
    CFRetain(v75);
  }
  v159[0] = *(CFMutableDictionaryRef *)MEMORY[0x1E4FB94E0];
  CFMutableDictionaryRef v76 = v159[0];
  if (v159[0]) {
    CFRetain(v159[0]);
  }
  xpc_object_t v158 = v73;
  if (v73)
  {
    CFRetain(v73);
    if (v76) {
      CFDictionarySetValue((CFMutableDictionaryRef)v75, v76, v73);
    }
    CFRelease(v73);
  }
  if (v76) {
    CFRelease(v76);
  }
  if (v75) {
    CFRelease(v75);
  }
  v77 = (__CFDictionary *)a1[v74];
  v159[0] = v77;
  if (v77) {
    CFRetain(v77);
  }
  ctu::cf::update<__CFString const*,long long>(v77, (CFTypeRef)*MEMORY[0x1E4FB9630], v71, v68);
  if (v77) {
    CFRelease(v77);
  }
  v78 = (__CFDictionary *)a1[v74];
  v159[0] = v78;
  if (v78) {
    CFRetain(v78);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v78, (CFTypeRef)*MEMORY[0x1E4FB95C0], v67, v68);
  if (v78) {
    CFRelease(v78);
  }
  v79 = (__CFDictionary *)a1[v74];
  v159[0] = v79;
  if (v79) {
    CFRetain(v79);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v79, (CFTypeRef)*MEMORY[0x1E4FB99B0], v125, v68);
  if (v79) {
    CFRelease(v79);
  }
  v80 = (__CFDictionary *)a1[v74];
  v159[0] = v80;
  if (v80) {
    CFRetain(v80);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v80, (CFTypeRef)*MEMORY[0x1E4FB9508], v124, v68);
  if (v80) {
    CFRelease(v80);
  }
  v81 = (__CFDictionary *)a1[v74];
  v159[0] = v81;
  if (v81) {
    CFRetain(v81);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v81, (CFTypeRef)*MEMORY[0x1E4FB97D8], v123, v68);
  if (v81) {
    CFRelease(v81);
  }
  v82 = (__CFDictionary *)a1[v74];
  v159[0] = v82;
  if (v82) {
    CFRetain(v82);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v82, (CFTypeRef)*MEMORY[0x1E4FB9698], v134, v68);
  if (v82) {
    CFRelease(v82);
  }
  v83 = (__CFDictionary *)a1[v74];
  v159[0] = v83;
  if (v83) {
    CFRetain(v83);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v83, (CFTypeRef)*MEMORY[0x1E4FB97B8], v138, v68);
  if (v83) {
    CFRelease(v83);
  }
  v84 = (__CFDictionary *)a1[v74];
  v159[0] = v84;
  if (v84) {
    CFRetain(v84);
  }
  ctu::cf::update<__CFString const*,double>(v84, (CFTypeRef)*MEMORY[0x1E4FB9610], v68, v24);
  if (v84) {
    CFRelease(v84);
  }
  v85 = (__CFDictionary *)a1[v74];
  v159[0] = v85;
  if (v85) {
    CFRetain(v85);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v85, (CFTypeRef)*MEMORY[0x1E4FB9710], v137, v68);
  if (v85) {
    CFRelease(v85);
  }
  v86 = (__CFDictionary *)a1[v74];
  v159[0] = v86;
  if (v86) {
    CFRetain(v86);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v86, (CFTypeRef)*MEMORY[0x1E4FB9950], v136, v68);
  if (v86) {
    CFRelease(v86);
  }
  v87 = (__CFDictionary *)a1[v74];
  v159[0] = v87;
  if (v87) {
    CFRetain(v87);
  }
  ctu::cf::update<__CFString const*,unsigned int>(v87, (CFTypeRef)*MEMORY[0x1E4FB9858], v135, v68);
  if (v87) {
    CFRelease(v87);
  }
  v88 = (__CFDictionary *)a1[v74];
  v159[0] = v88;
  if (v88) {
    CFRetain(v88);
  }
  ctu::cf::update<__CFString const*,__CFDictionary *>(v88, (CFTypeRef)*MEMORY[0x1E4FB9880], v70);
  if (v88) {
    CFRelease(v88);
  }
  v89 = (__CFDictionary *)a1[v74];
  v159[0] = v89;
  if (v89) {
    CFRetain(v89);
  }
  ctu::cf::update<__CFString const*,long long>(v89, (CFTypeRef)*MEMORY[0x1E4FB9978], v133, v68);
  if (v89) {
    CFRelease(v89);
  }
  v90 = (__CFDictionary *)a1[v74];
  v159[0] = v90;
  if (v90) {
    CFRetain(v90);
  }
  ctu::cf::update<__CFString const*,long long>(v90, (CFTypeRef)*MEMORY[0x1E4FB98A8], v132, v68);
  if (v90) {
    CFRelease(v90);
  }
  v91 = (__CFDictionary *)a1[v74];
  v159[0] = v91;
  if (v91) {
    CFRetain(v91);
  }
  ctu::cf::update<__CFString const*,long long>(v91, (CFTypeRef)*MEMORY[0x1E4FB9780], v131, v68);
  if (v91) {
    CFRelease(v91);
  }
  v92 = (__CFDictionary *)a1[v74];
  v159[0] = v92;
  if (v92) {
    CFRetain(v92);
  }
  ctu::cf::update<__CFString const*,long long>(v92, (CFTypeRef)*MEMORY[0x1E4FB97E0], v130, v68);
  if (v92) {
    CFRelease(v92);
  }
  v93 = (__CFDictionary *)a1[v74];
  v159[0] = v93;
  if (v93) {
    CFRetain(v93);
  }
  ctu::cf::update<__CFString const*,BOOL>(v93, (CFTypeRef)*MEMORY[0x1E4FB9948], v129);
  if (v93) {
    CFRelease(v93);
  }
  v94 = (__CFDictionary *)a1[v74];
  v159[0] = v94;
  if (v94) {
    CFRetain(v94);
  }
  ctu::cf::update<__CFString const*,BOOL>(v94, (CFTypeRef)*MEMORY[0x1E4FB9820], v128);
  if (v94) {
    CFRelease(v94);
  }
  v95 = (__CFDictionary *)a1[v74];
  v159[0] = v95;
  if (v95) {
    CFRetain(v95);
  }
  ctu::cf::update<__CFString const*,long long>(v95, (CFTypeRef)*MEMORY[0x1E4FB9788], v127, v68);
  if (v95) {
    CFRelease(v95);
  }
  v96 = (__CFDictionary *)a1[v74];
  v159[0] = v96;
  if (v96) {
    CFRetain(v96);
  }
  ctu::cf::update<__CFString const*,long long>(v96, (CFTypeRef)*MEMORY[0x1E4FB9708], v126, v68);
  if (v96) {
    CFRelease(v96);
  }
  v97 = (__CFDictionary *)a1[v74];
  v159[0] = v97;
  if (v97) {
    CFRetain(v97);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v97, (CFTypeRef)*MEMORY[0x1E4FB9680], v156);
  if (v97) {
    CFRelease(v97);
  }
  v98 = (__CFDictionary *)a1[v74];
  v159[0] = v98;
  if (v98) {
    CFRetain(v98);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v98, (CFTypeRef)*MEMORY[0x1E4FB9958], cf);
  if (v98) {
    CFRelease(v98);
  }
  v99 = (__CFDictionary *)a1[v74];
  v159[0] = v99;
  if (v99) {
    CFRetain(v99);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v99, (CFTypeRef)*MEMORY[0x1E4FB9968], v144);
  if (v99) {
    CFRelease(v99);
  }
  v100 = (__CFDictionary *)a1[v74];
  v159[0] = v100;
  if (v100) {
    CFRetain(v100);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v100, (CFTypeRef)*MEMORY[0x1E4FB9970], v143);
  if (v100) {
    CFRelease(v100);
  }
  v101 = (__CFDictionary *)a1[v74];
  v159[0] = v101;
  if (v101) {
    CFRetain(v101);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v101, (CFTypeRef)*MEMORY[0x1E4FB9910], v142);
  if (v101) {
    CFRelease(v101);
  }
  v102 = (__CFDictionary *)a1[v74];
  v159[0] = v102;
  if (v102) {
    CFRetain(v102);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v102, (CFTypeRef)*MEMORY[0x1E4FB9960], v141);
  if (v102) {
    CFRelease(v102);
  }
  v103 = (__CFDictionary *)a1[v74];
  v159[0] = v103;
  if (v103) {
    CFRetain(v103);
  }
  ctu::cf::update<__CFString const*,__CFArray const*>(v103, (CFTypeRef)*MEMORY[0x1E4FB9908], v140);
  if (v103) {
    CFRelease(v103);
  }
  if (capabilities::abs::supportsCoexEur5G(v104))
  {
    v105 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_CoexTech");
    v159[0] = v105;
    if (v105) {
      xpc_retain(v105);
    }
    else {
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    }
    unsigned int v106 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v107 = (__CFDictionary *)a1[v74];
    v159[0] = v107;
    if (v107) {
      CFRetain(v107);
    }
    ctu::cf::update<__CFString const*,unsigned int>(v107, (CFTypeRef)*MEMORY[0x1E4FB95B8], v147, v68);
    if (v107) {
      CFRelease(v107);
    }
    v108 = (__CFDictionary *)a1[v74];
    v159[0] = v108;
    if (v108) {
      CFRetain(v108);
    }
    ctu::cf::update<__CFString const*,unsigned int>(v108, (CFTypeRef)*MEMORY[0x1E4FB95F0], v147, v68);
    if (v108) {
      CFRelease(v108);
    }
    v109 = (__CFDictionary *)a1[v74];
    v159[0] = v109;
    if (v109) {
      CFRetain(v109);
    }
    ctu::cf::update<__CFString const*,unsigned int>(v109, (CFTypeRef)*MEMORY[0x1E4FB9518], v106, v68);
    if (v109) {
      CFRelease(v109);
    }
    v110 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_TxDenialThresholdSlots");
    v159[0] = v110;
    if (v110) {
      xpc_retain(v110);
    }
    else {
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    }
    unsigned int v111 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v112 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_MaxAllowedSlotDenials");
    v159[0] = v112;
    if (v112) {
      xpc_retain(v112);
    }
    else {
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    }
    uint64_t v113 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v114 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_SlotsDenialWindow");
    v159[0] = v114;
    if (v114) {
      xpc_retain(v114);
    }
    else {
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    }
    uint64_t v115 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v159[0] = 0;
    v116 = CFDictionaryCreateMutable(v68, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v117 = v116;
    if (v116) {
      v159[0] = v116;
    }
    ctu::cf::insert<__CFString const*,long long>(v116, v122, v113, v68);
    ctu::cf::insert<__CFString const*,long long>(v117, v121, v115, v68);
    v118 = (void *)a1[v74];
    xpc_object_t v158 = v118;
    if (v118) {
      CFRetain(v118);
    }
    ctu::cf::update<__CFString const*,unsigned int>((__CFDictionary *)v118, (CFTypeRef)*MEMORY[0x1E4FB99B8], v111, v68);
    if (v118) {
      CFRelease(v118);
    }
    v119 = (void *)a1[v74];
    xpc_object_t v158 = v119;
    if (v119) {
      CFRetain(v119);
    }
    ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v119, (CFTypeRef)*MEMORY[0x1E4FB9918], v117);
    if (v119) {
      CFRelease(v119);
    }
    if (v117) {
      CFRelease(v117);
    }
  }
  v159[0] = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, 0, 0, v159);
  if (v159[0]) {
    v120 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    v120 = 0;
  }
  if (v120)
  {
    CFDictionaryRemoveValue(v159[0], (const void *)*MEMORY[0x1E4FB9850]);
    CFDictionaryRemoveValue(v159[0], (const void *)*MEMORY[0x1E4FB9728]);
  }
  coex::Module::State::setPolicy_sync(a1, v147);
  if (v159[0]) {
    CFRelease(v159[0]);
  }
  if (v148) {
    CFRelease(v148);
  }
  if (v149) {
    CFRelease(v149);
  }
  if (v150) {
    CFRelease(v150);
  }
  if (v151) {
    CFRelease(v151);
  }
  if (v152) {
    CFRelease(v152);
  }
  if (v153) {
    CFRelease(v153);
  }
  if (v154) {
    CFRelease(v154);
  }
  if (v155) {
    CFRelease(v155);
  }
  if (v156) {
    CFRelease(v156);
  }
}

void sub_1C59CB088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31,const void *a32,const void *a33)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v33 - 120));
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v33 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a31);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a32);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a33);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 184));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 176));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 168));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 160));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 152));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 144));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 136));
  _Unwind_Resume(a1);
}

void sub_1C59CB72C()
{
}

void ctu::cf::update<__CFString const*,void const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  CFRetain(a3);
  if (cf) {
    CFDictionarySetValue(a1, cf, a3);
  }
  CFRelease(a3);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C59CB7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C59CB7D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::XpcClient::handleMessage_sync(uint64_t a1, xpc::object *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string((uint64_t *)buf, a2);
    uint64_t v18 = v27 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)double v23 = 136315138;
    *(void *)&v23[4] = v18;
    _os_log_debug_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEBUG, "#D Got Message:\n%s", v23, 0xCu);
    if (v27 < 0) {
      operator delete(*(void **)buf);
    }
  }
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kMessageId");
  xpc_object_t v6 = value;
  xpc_object_t object = value;
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
  }
  if (MEMORY[0x1C8795EB0](v6) == MEMORY[0x1E4F145D8])
  {
    unsigned int v15 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((uint64_t *)buf, a2);
      xpc_object_t v16 = v27 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)double v23 = 136315394;
      *(void *)&v23[4] = "kMessageId";
      __int16 v24 = 2080;
      v25 = v16;
      _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "Message was missing key %s from: %s", v23, 0x16u);
      if (v27 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    int v7 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    int v8 = v7;
    uint64_t v9 = *(void *)(a1 + 112);
    if (!v9) {
      goto LABEL_16;
    }
    uint64_t v10 = a1 + 112;
    do
    {
      int v11 = *(_DWORD *)(v9 + 32);
      BOOL v12 = v11 < v7;
      if (v11 >= v7) {
        unsigned int v13 = (uint64_t *)v9;
      }
      else {
        unsigned int v13 = (uint64_t *)(v9 + 8);
      }
      if (!v12) {
        uint64_t v10 = v9;
      }
      uint64_t v9 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 112 && *(_DWORD *)(v10 + 32) <= v7)
    {
      xpc_object_t v17 = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kSubId");
      *(void *)double v23 = v17;
      if (v17) {
        xpc_retain(v17);
      }
      else {
        *(void *)double v23 = xpc_null_create();
      }
      uint64_t v19 = xpc::dyn_cast_or_default((xpc *)v23, 0);
      uint64_t v20 = *(void *)(v10 + 40);
      xpc_object_t v21 = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kMessageArgs");
      *(void *)buf = v21;
      if (v21) {
        xpc_retain(v21);
      }
      else {
        *(void *)buf = xpc_null_create();
      }
      (*(void (**)(uint64_t, uint8_t *, uint64_t))(v20 + 16))(v20, buf, v19);
      xpc_release(*(xpc_object_t *)buf);
      xpc_release(*(xpc_object_t *)v23);
    }
    else
    {
LABEL_16:
      v14 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v8;
        _os_log_error_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_ERROR, "Unrecognized command %d", buf, 8u);
      }
    }
  }
  xpc_release(object);
}

void sub_1C59CBACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    int v7 = *a3;
    CFTypeRef cf = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v11 = *(std::string *)a2;
  int v7 = *a3;
  CFTypeRef cf = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  int v8 = *a4;
  if (*a4) {
    int v8 = _Block_copy(v8);
  }
  aBlock = v8;
  (*(void (**)(uint64_t, std::string *, CFTypeRef *, void **))(a1 + 16))(a1, &v11, &cf, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C59CBC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void coex::Module::State::setPolicy_sync(void *a1, uint64_t a2)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  if (a1[13])
  {
    CFMutableDictionaryRef v168 = 0;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v6 = Mutable;
    if (Mutable) {
      CFMutableDictionaryRef v168 = Mutable;
    }
    memset(buf, 170, 16);
    uint64_t v7 = 20;
    if (!a2) {
      uint64_t v7 = 18;
    }
    int v8 = (const void *)a1[v7];
    *(void *)&long long v169 = v8;
    if (v8) {
      CFRetain(v8);
    }
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v8);
    if (v8) {
      CFRelease(v8);
    }
    CFMutableDictionaryRef v166 = v6;
    if (v6) {
      CFRetain(v6);
    }
    uint64_t v9 = (const void *)*MEMORY[0x1E4FB9630];
    uint64_t v10 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9630]);
    std::string v11 = v10;
    if (v10)
    {
      CFRelease(v10);
      ctu::cf::update<__CFString const*,void const*>(v6, v9, v11);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v165 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v165 = 0;
    }
    unsigned int v13 = (const void *)*MEMORY[0x1E4FB9698];
    v14 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9698]);
    unsigned int v15 = v14;
    if (v14)
    {
      CFRelease(v14);
      ctu::cf::update<__CFString const*,void const*>(v6, v13, v15);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v164 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v164 = 0;
    }
    xpc_object_t v16 = (const void *)*MEMORY[0x1E4FB97D8];
    xpc_object_t v17 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB97D8]);
    uint64_t v18 = v17;
    if (v17)
    {
      CFRelease(v17);
      ctu::cf::update<__CFString const*,void const*>(v6, v16, v18);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v163 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v163 = 0;
    }
    uint64_t v19 = (const void *)*MEMORY[0x1E4FB94E0];
    uint64_t v20 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB94E0]);
    xpc_object_t v21 = v20;
    if (v20)
    {
      CFRelease(v20);
      ctu::cf::update<__CFString const*,void const*>(v6, v19, v21);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v162 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v162 = 0;
    }
    v22 = (const void *)*MEMORY[0x1E4FB95C0];
    double v23 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB95C0]);
    __int16 v24 = v23;
    if (v23)
    {
      CFRelease(v23);
      ctu::cf::update<__CFString const*,void const*>(v6, v22, v24);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v161 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v161 = 0;
    }
    v25 = (const void *)*MEMORY[0x1E4FB99B0];
    v26 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB99B0]);
    char v27 = v26;
    if (v26)
    {
      CFRelease(v26);
      ctu::cf::update<__CFString const*,void const*>(v6, v25, v27);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v160 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v160 = 0;
    }
    uint64_t v28 = (const void *)*MEMORY[0x1E4FB9508];
    std::string::size_type v29 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9508]);
    xpc_connection_t v30 = v29;
    if (v29)
    {
      CFRelease(v29);
      ctu::cf::update<__CFString const*,void const*>(v6, v28, v30);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v159 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v159 = 0;
    }
    xpc_object_t v31 = (const void *)*MEMORY[0x1E4FB97B8];
    unint64_t v32 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB97B8]);
    uint64_t v33 = v32;
    if (v32)
    {
      CFRelease(v32);
      ctu::cf::update<__CFString const*,void const*>(v6, v31, v33);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v158 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v158 = 0;
    }
    std::string v34 = (const void *)*MEMORY[0x1E4FB9610];
    xpc_object_t v35 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9610]);
    xpc_object_t v36 = v35;
    if (v35)
    {
      CFRelease(v35);
      ctu::cf::update<__CFString const*,void const*>(v6, v34, v36);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v157 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v157 = 0;
    }
    xpc_object_t v37 = (const void *)*MEMORY[0x1E4FB9710];
    xpc_object_t v38 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9710]);
    __int16 v39 = v38;
    if (v38)
    {
      CFRelease(v38);
      ctu::cf::update<__CFString const*,void const*>(v6, v37, v39);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v156 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v156 = 0;
    }
    CFMutableDictionaryRef v40 = (const void *)*MEMORY[0x1E4FB9950];
    CFTypeID v41 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9950]);
    CFMutableDictionaryRef v42 = v41;
    if (v41)
    {
      CFRelease(v41);
      ctu::cf::update<__CFString const*,void const*>(v6, v40, v42);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v155 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v155 = 0;
    }
    xpc_object_t v43 = (const void *)*MEMORY[0x1E4FB9858];
    int v44 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9858]);
    CFTypeID v45 = v44;
    if (v44)
    {
      CFRelease(v44);
      ctu::cf::update<__CFString const*,void const*>(v6, v43, v45);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v154 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v154 = 0;
    }
    CFMutableDictionaryRef v46 = (const void *)*MEMORY[0x1E4FB9880];
    xpc_object_t v47 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9880]);
    v48 = v47;
    if (v47)
    {
      CFRelease(v47);
      ctu::cf::update<__CFString const*,void const*>(v6, v46, v48);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v153 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v153 = 0;
    }
    CFTypeID v49 = (const void *)*MEMORY[0x1E4FB9978];
    CFMutableDictionaryRef v50 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9978]);
    xpc_object_t v51 = v50;
    if (v50)
    {
      CFRelease(v50);
      ctu::cf::update<__CFString const*,void const*>(v6, v49, v51);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v152 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v152 = 0;
    }
    v52 = (const void *)*MEMORY[0x1E4FB98A8];
    CFTypeID v53 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB98A8]);
    CFMutableDictionaryRef v54 = v53;
    if (v53)
    {
      CFRelease(v53);
      ctu::cf::update<__CFString const*,void const*>(v6, v52, v54);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v151 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v151 = 0;
    }
    xpc_object_t v55 = (const void *)*MEMORY[0x1E4FB9780];
    v56 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9780]);
    CFTypeID v57 = v56;
    if (v56)
    {
      CFRelease(v56);
      ctu::cf::update<__CFString const*,void const*>(v6, v55, v57);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v150 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v150 = 0;
    }
    CFMutableDictionaryRef v58 = (const void *)*MEMORY[0x1E4FB97E0];
    xpc_object_t v59 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB97E0]);
    size_t v60 = v59;
    if (v59)
    {
      CFRelease(v59);
      ctu::cf::update<__CFString const*,void const*>(v6, v58, v60);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v149 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v149 = 0;
    }
    CFTypeID v61 = (const void *)*MEMORY[0x1E4FB9948];
    CFMutableDictionaryRef v62 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9948]);
    xpc_object_t v63 = v62;
    if (v62)
    {
      CFRelease(v62);
      ctu::cf::update<__CFString const*,void const*>(v6, v61, v63);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v148 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v148 = 0;
    }
    v64 = (const void *)*MEMORY[0x1E4FB9820];
    CFTypeID v65 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9820]);
    CFMutableDictionaryRef v66 = v65;
    if (v65)
    {
      CFRelease(v65);
      ctu::cf::update<__CFString const*,void const*>(v6, v64, v66);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v147 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v147 = 0;
    }
    unsigned int v67 = (const void *)*MEMORY[0x1E4FB9788];
    CFAllocatorRef v68 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9788]);
    v69 = v68;
    if (v68)
    {
      CFRelease(v68);
      ctu::cf::update<__CFString const*,void const*>(v6, v67, v69);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v146 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v146 = 0;
    }
    xpc_object_t v70 = (const void *)*MEMORY[0x1E4FB9708];
    uint64_t v71 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9708]);
    CFDataRef v72 = v71;
    if (v71)
    {
      CFRelease(v71);
      ctu::cf::update<__CFString const*,void const*>(v6, v70, v72);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v145 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v145 = 0;
    }
    CFDataRef v73 = (const void *)*MEMORY[0x1E4FB9680];
    uint64_t v74 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9680]);
    uint64_t v75 = v74;
    if (v74)
    {
      CFRelease(v74);
      ctu::cf::update<__CFString const*,void const*>(v6, v73, v75);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v144 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v144 = 0;
    }
    CFMutableDictionaryRef v76 = (const void *)*MEMORY[0x1E4FB9958];
    v77 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9958]);
    v78 = v77;
    if (v77)
    {
      CFRelease(v77);
      ctu::cf::update<__CFString const*,void const*>(v6, v76, v78);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v143 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v143 = 0;
    }
    v79 = (const void *)*MEMORY[0x1E4FB9968];
    v80 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9968]);
    v81 = v80;
    if (v80)
    {
      CFRelease(v80);
      ctu::cf::update<__CFString const*,void const*>(v6, v79, v81);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v142 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v142 = 0;
    }
    v82 = (const void *)*MEMORY[0x1E4FB9970];
    v83 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9970]);
    v84 = v83;
    if (v83)
    {
      CFRelease(v83);
      ctu::cf::update<__CFString const*,void const*>(v6, v82, v84);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v141 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v141 = 0;
    }
    v85 = (const void *)*MEMORY[0x1E4FB9910];
    v86 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9910]);
    v87 = v86;
    if (v86)
    {
      CFRelease(v86);
      ctu::cf::update<__CFString const*,void const*>(v6, v85, v87);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v140 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v140 = 0;
    }
    v88 = (const void *)*MEMORY[0x1E4FB9960];
    v89 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9960]);
    v90 = v89;
    if (v89)
    {
      CFRelease(v89);
      ctu::cf::update<__CFString const*,void const*>(v6, v88, v90);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v139 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v139 = 0;
    }
    v91 = (const void *)*MEMORY[0x1E4FB9908];
    v92 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9908]);
    v93 = v92;
    if (v92)
    {
      CFRelease(v92);
      ctu::cf::update<__CFString const*,void const*>(v6, v91, v93);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v138 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v138 = 0;
    }
    v94 = (const void *)*MEMORY[0x1E4FB95B8];
    v95 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB95B8]);
    v96 = v95;
    if (v95)
    {
      CFRelease(v95);
      ctu::cf::update<__CFString const*,void const*>(v6, v94, v96);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v137 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v137 = 0;
    }
    v97 = (const void *)*MEMORY[0x1E4FB95F0];
    v98 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB95F0]);
    v99 = v98;
    if (v98)
    {
      CFRelease(v98);
      ctu::cf::update<__CFString const*,void const*>(v6, v97, v99);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v136 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v136 = 0;
    }
    v100 = (const void *)*MEMORY[0x1E4FB9518];
    v101 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9518]);
    v102 = v101;
    if (v101)
    {
      CFRelease(v101);
      ctu::cf::update<__CFString const*,void const*>(v6, v100, v102);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v135 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v135 = 0;
    }
    v103 = (const void *)*MEMORY[0x1E4FB99B8];
    v104 = (const void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB99B8]);
    v105 = v104;
    if (v104)
    {
      CFRelease(v104);
      ctu::cf::update<__CFString const*,void const*>(v6, v103, v105);
    }
    if (v6)
    {
      CFRelease(v6);
      CFMutableDictionaryRef v134 = v6;
      CFRetain(v6);
    }
    else
    {
      CFMutableDictionaryRef v134 = 0;
    }
    unsigned int v106 = (const void *)*MEMORY[0x1E4FB9918];
    v107 = (void *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9918]);
    v108 = v107;
    if (v107)
    {
      CFRelease(v107);
      ctu::cf::update<__CFString const*,void const*>(v6, v106, v108);
    }
    if (v6) {
      CFRelease(v6);
    }
    int v109 = capabilities::abs::supportsCoexGPSReporting((capabilities::abs *)v107);
    ctu::cf::update<__CFString const*,BOOL>(v6, (CFTypeRef)*MEMORY[0x1E4FB98D8], v109);
    if (!CFDictionaryGetCount(v6))
    {
      unsigned int v125 = a1[5];
      if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v169) = 0;
        _os_log_impl(&dword_1C59C6000, v125, OS_LOG_TYPE_DEFAULT, "#I Nothing in policy yet, bail\n", (uint8_t *)&v169, 2u);
      }
      goto LABEL_220;
    }
    CFTypeRef v133 = 0;
    CFMutableDictionaryRef v110 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v111 = v110;
    if (v110) {
      CFTypeRef v133 = v110;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v110, (CFTypeRef)*MEMORY[0x1E4FB9568], v6);
    CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
    coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, 0, 0, &theDict);
    if (theDict) {
      v112 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
    }
    else {
      v112 = 0;
    }
    if (v112) {
      CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4FB9988]);
    }
    uint64_t v113 = a1[5];
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v169) = 138412290;
      *(void *)((char *)&v169 + 4) = v111;
      _os_log_impl(&dword_1C59C6000, v113, OS_LOG_TYPE_DEFAULT, "#I Setting policy with: %@", (uint8_t *)&v169, 0xCu);
    }
    uint64_t v115 = a1[9];
    v114 = (std::__shared_weak_count *)a1[10];
    *(void *)&long long v169 = v115;
    if (!v114 || (v116 = std::__shared_weak_count::lock(v114), (*((void *)&v169 + 1) = v116) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v117 = v116;
    uint64_t v118 = a1[13];
    if (v111 && (CFTypeID v119 = CFGetTypeID(v111), v119 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v111;
      CFRetain(v111);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_329;
    void aBlock[4] = a1;
    aBlock[5] = v115;
    uint64_t v127 = v117;
    atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v128, (const ctu::cf::dict_adapter *)buf);
    v120 = _Block_copy(aBlock);
    CFTypeRef v121 = a1[11];
    if (v121) {
      dispatch_retain(v121);
    }
    if (v120)
    {
      int v129 = _Block_copy(v120);
      dispatch_object_t object = v121;
      if (!v121) {
        goto LABEL_199;
      }
    }
    else
    {
      int v129 = 0;
      dispatch_object_t object = v121;
      if (!v121)
      {
LABEL_199:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v118 + 48))(v118, &cf, a2, &v129);
        if (object) {
          dispatch_release(object);
        }
        if (v129) {
          _Block_release(v129);
        }
        if (v121) {
          dispatch_release(v121);
        }
        if (v120) {
          _Block_release(v120);
        }
        if (cf) {
          CFRelease(cf);
        }
        MEMORY[0x1C87942E0](v128);
        CFTypeRef v122 = v127;
        if (v127 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
          unsigned int v123 = (std::__shared_weak_count *)*((void *)&v169 + 1);
          if (!*((void *)&v169 + 1)) {
            goto LABEL_213;
          }
        }
        else
        {
          unsigned int v123 = (std::__shared_weak_count *)*((void *)&v169 + 1);
          if (!*((void *)&v169 + 1)) {
            goto LABEL_213;
          }
        }
        if (!atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
          CFMutableDictionaryRef v124 = theDict;
          if (!theDict) {
            goto LABEL_215;
          }
          goto LABEL_214;
        }
LABEL_213:
        CFMutableDictionaryRef v124 = theDict;
        if (!theDict)
        {
LABEL_215:
          if (v133) {
            CFRelease(v133);
          }
          CFMutableDictionaryRef v6 = v168;
LABEL_220:
          MEMORY[0x1C87942E0](buf);
          if (v6) {
            CFRelease(v6);
          }
          return;
        }
LABEL_214:
        CFRelease(v124);
        goto LABEL_215;
      }
    }
    dispatch_retain(v121);
    goto LABEL_199;
  }
  BOOL v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I Invalid driver", buf, 2u);
  }
}

void sub_1C59CD144(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void coex::XpcClient::sendMessage(uint64_t a1, int a2, void **a3, int a4)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
  v7[3] = &__block_descriptor_tmp_7_1;
  int v9 = a2;
  CFMutableDictionaryRef v6 = *a3;
  v7[4] = a1;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v10 = a4;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v7);
  xpc_release(object);
}

uint64_t coex::Module::State::getSubProperty@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, CFMutableDictionaryRef *a5@<X8>)
{
  v15[0] = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = 152;
  if (!a3) {
    uint64_t v8 = 136;
  }
  int v9 = *(const void **)(a1 + v8);
  if (v9) {
    CFRetain(v9);
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)v9);
  if (v9) {
    CFRelease(v9);
  }
  int v10 = (__CFDictionary *)(*(uint64_t (**)(void *, uint64_t))v15[0])(v15, a2);
  CFMutableDictionaryRef Mutable = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFRelease(Mutable);
    *a5 = 0;
    if (v12 == TypeID)
    {
      CFRetain(Mutable);
LABEL_13:
      *a5 = Mutable;
      return MEMORY[0x1C87942E0](v15);
    }
  }
  else
  {
    *a5 = 0;
  }
  if (a4)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable) {
      goto LABEL_13;
    }
  }
  return MEMORY[0x1C87942E0](v15);
}

void sub_1C59CD6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v3);
  MEMORY[0x1C87942E0](va);
  _Unwind_Resume(a1);
}

void sub_1C59CD6DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL defaults::get(char *a1, char *a2, std::string *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    CFMutableDictionaryRef v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C1F8])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D2F0])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F980])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F978]))
    {
      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C200]))
      {
        if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C288]))
        {
          if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C390]))
          {
            if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C398]))
            {
              if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C300]))
              {
                if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C138]))
                {
                  if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C2F8]))
                  {
                    if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C1B8]))
                    {
                      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C210]))
                      {
LABEL_16:
                        if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C208]))
                        {
                          return defaults::tracesettings::get(a2, a3);
                        }
                        else
                        {
                          uint64_t v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              int v9 = a1;
                            }
                            else {
                              int v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              int v10 = a2;
                            }
                            else {
                              int v10 = *(char **)a2;
                            }
                            int v11 = 136315650;
                            CFTypeID v12 = "prop.default";
                            __int16 v13 = 2080;
                            v14 = v9;
                            __int16 v15 = 2080;
                            xpc_object_t v16 = v10;
                            _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid domain; domain='%s' key='%s'",
                              (uint8_t *)&v11,
                              0x20u);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1F8]) {
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D2F0])
  }
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F980])
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F978]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C200]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C288]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C390]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C398]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C300]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C138]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2F8]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1B8]))
                  {
                    CFMutableDictionaryRef v6 = a1;
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C210])) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return defaults::tailspin::get(a2, (uint64_t)a3);
                  }
LABEL_60:
                  return defaults::profile::get(a2, (uint64_t)a3);
                }
LABEL_57:
                return defaults::systemlogs::get(a2, (uint64_t)a3);
              }
LABEL_54:
              return defaults::logfilter::get(a2, (uint64_t)a3);
            }
LABEL_51:
            return defaults::ttr::get(a2, (uint64_t)a3);
          }
LABEL_48:
          return defaults::compression::get(a2, (uint64_t)a3);
        }
LABEL_45:
        return defaults::bbipc::get(a2, (uint64_t)a3);
      }
LABEL_39:
      return defaults::ipc::get(a2, (uint64_t)a3);
    }
LABEL_42:
    return defaults::coredump::get(a2, (uint64_t)a3);
  }

  return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(void *a1, void *a2)
{
  result = (void *)a2[5];
  if (result) {
    result = _Block_copy(result);
  }
  uint64_t v6 = a2[6];
  uint64_t v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

BOOL prop::get_from_file(char *a1, char *a2, uint64_t a3)
{
  memset(&__p, 0, sizeof(__p));
  BOOL v6 = defaults::get(a1, a2, &__p);
  if (v6)
  {
    prop::file::get<std::string>((const void **)a1, (uint64_t)a2, (uint64_t)&__p, &v8);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(std::string *)a3 = v8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1C59CDEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, uint64_t a2, const void **a3)
{
  CFAllocatorRef v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      std::string v8 = v7;
      uint64_t v9 = a1[5];
      if (!v9)
      {
LABEL_11:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_11_1;
      v14[4] = v6;
      if (*a3)
      {
        int v10 = _Block_copy(*a3);
        uint64_t v11 = a1[5];
        CFTypeID v12 = (uint64_t *)(v6 + 120);
        aBlock = v10;
        uint64_t v16 = v11;
        __int16 v13 = (std::__shared_weak_count *)a1[6];
        uint64_t v17 = v13;
        if (!v13)
        {
LABEL_7:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          goto LABEL_11;
        }
      }
      else
      {
        CFTypeID v12 = (uint64_t *)(v6 + 120);
        aBlock = 0;
        uint64_t v16 = v9;
        __int16 v13 = (std::__shared_weak_count *)a1[6];
        uint64_t v17 = v13;
        if (!v13) {
          goto LABEL_7;
        }
      }
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_7;
    }
  }
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  std::string v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F21067F8;
  block[5] = v5;
  CFTypeID v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  int v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

void ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke(uint64_t a1, const void **a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *a2;
  if (*a2) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      xpc_object_t v21 = v5;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Failed to set policy: %@", buf, 0xCu);
    }
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, (const ctu::cf::dict_adapter *)(a1 + 56));
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  __int16 v15 = ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke_326;
  uint64_t v16 = &__block_descriptor_tmp_328;
  std::string v8 = *a2;
  uint64_t v17 = v4;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = (int *)(*(uint64_t (**)(void *, void))v19[0])(v19, *MEMORY[0x1E4FB97D8]);
  int v10 = v9;
  if (v9)
  {
    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 == CFNumberGetTypeID())
    {
      *(_DWORD *)buf = -1431655766;
      int v13 = ctu::cf::assign((ctu::cf *)buf, v10, v12);
      CFRelease(v10);
      if (v13) {
        v15((uint64_t)v14, *(unsigned int *)buf);
      }
    }
    else
    {
      CFRelease(v10);
    }
  }
  MEMORY[0x1C87942E0](v19);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C59CE3CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C59CE3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v7);
  MEMORY[0x1C87942E0](va);
  _Unwind_Resume(a1);
}

uint64_t sValidateConnection(void *a1)
{
  if (a1)
  {
    xpc_object_t v1 = a1;
    xpc_retain(a1);
    xpc_object_t xdict = v1;
  }
  else
  {
    xpc_object_t v1 = xpc_null_create();
    xpc_object_t xdict = v1;
    if (!v1)
    {
      xpc_object_t v2 = xpc_null_create();
      xpc_object_t v1 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v1) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v1);
    goto LABEL_9;
  }
  xpc_object_t v2 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v2;
LABEL_9:
  xpc_release(v1);
  xpc_object_t v3 = xdict;
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  pid_t pid = xpc_connection_get_pid(remote_connection);
  if (getpid() == pid)
  {
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = hasBasebandEntitlement(&xdict, 0);
    xpc_object_t v3 = xdict;
  }
  xpc_release(v3);
  return v6;
}

void sub_1C59CE4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

BOOL defaults::coredump::get(const char *a1, uint64_t a2)
{
  xpc_object_t v3 = (uint64_t *)a1;
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]);
  int v5 = (int)v4;
  if (v4)
  {
    uint64_t v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v7 = *MEMORY[0x1E4F4C200];
      if (*((char *)v3 + 23) >= 0) {
        std::string v8 = v3;
      }
      else {
        std::string v8 = (uint64_t *)*v3;
      }
      LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
      __int16 v15 = v8;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v14,
        0x20u);
    }
  }
  else
  {
    int v9 = capabilities::trace::allowed(v4);
    v16[0] = 0;
    *(void *)((char *)v16 + 7) = 0;
    std::to_string(&v14, v9);
    v16[0] = v14.__r_.__value_.__l.__size_;
    std::string::size_type v10 = v14.__r_.__value_.__r.__words[0];
    *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
    char v11 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v12 = v16[0];
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 15) = *(void *)((char *)v16 + 7);
    *(unsigned char *)(a2 + 23) = v11;
  }
  return v5 == 0;
}

void sub_1C59CE670(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C59CE61CLL);
    }
    JUMPOUT(0x1C59CE624);
  }
  _Unwind_Resume(a1);
}

BOOL prop::coredump::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4C200];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C200]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    std::string::size_type v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  std::string::size_type v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C59CE780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::ipc::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4D338];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D338]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    std::string::size_type v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  std::string::size_type v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C59CE888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL defaults::bbtrace::get(char *a1, std::string::size_type *a2)
{
  v77[2] = *MEMORY[0x1E4F143B8];
  int v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    size_t v5 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]);
    if (v5)
    {
      uint64_t v6 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C380]);
      if (v6)
      {
        std::string::size_type v7 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C5B8]);
        if (v7)
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198]) && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CCD0]))
          {
            if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C490])) {
              goto LABEL_184;
            }
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C428]))
            {
              uint64_t v8 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0]);
              uint64_t v9 = a1;
              if (v8) {
                goto LABEL_10;
              }
LABEL_25:
              int v14 = capabilities::trace::defaultHistorySizeMB(v8);
              util::to_str<int>(v14, &v75);
LABEL_73:
              if (*((char *)a2 + 23) < 0) {
                operator delete((void *)*a2);
              }
              *(std::string *)a2 = v75;
              return 1;
            }
          }
          goto LABEL_29;
        }
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_26:
    int v15 = capabilities::trace::enabledByDefault(v5);
    v77[0] = 0;
    *(void *)((char *)v77 + 7) = 0;
    std::to_string(&v75, v15);
LABEL_30:
    v77[0] = v75.__r_.__value_.__l.__size_;
    std::string::size_type v18 = v75.__r_.__value_.__r.__words[0];
    *(void *)((char *)v77 + 7) = *(std::string::size_type *)((char *)&v75.__r_.__value_.__r.__words[1] + 7);
    char v19 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    if (*((char *)a2 + 23) < 0) {
      operator delete((void *)*a2);
    }
    std::string::size_type v20 = v77[0];
    *a2 = v18;
    a2[1] = v20;
    *(std::string::size_type *)((char *)a2 + 15) = *(void *)((char *)v77 + 7);
    *((unsigned char *)a2 + 23) = v19;
    return 1;
  }
  uint64_t v9 = *(const char **)a1;
  size_t v5 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8]);
  if (!v5) {
    goto LABEL_26;
  }
  uint64_t v6 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C380]);
  if (!v6)
  {
LABEL_27:
    int v16 = capabilities::trace::supportsHighTPutByDefault(v6);
    v77[0] = 0;
    *(void *)((char *)v77 + 7) = 0;
    std::to_string(&v75, v16);
    goto LABEL_30;
  }
  std::string::size_type v7 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C5B8]);
  if (!v7)
  {
LABEL_28:
    int v17 = capabilities::trace::supportsDataLoggingByDefault(v7);
    v77[0] = 0;
    *(void *)((char *)v77 + 7) = 0;
    std::to_string(&v75, v17);
    goto LABEL_30;
  }
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C198]) || !strcasecmp(v9, (const char *)*MEMORY[0x1E4F4CCD0])) {
    goto LABEL_29;
  }
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C490])) {
    goto LABEL_184;
  }
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C428]))
  {
LABEL_29:
    *(void *)((char *)v77 + 7) = 0;
    v77[0] = 0;
    std::to_string(&v75, 0);
    goto LABEL_30;
  }
  uint64_t v8 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E4F4C2E0]);
  if (!v8) {
    goto LABEL_25;
  }
LABEL_10:
  BOOL v10 = (capabilities::radio *)strcasecmp(v9, (const char *)*MEMORY[0x1E4F47280]);
  if (v10) {
    goto LABEL_11;
  }
  uint64_t v22 = (capabilities::radio *)capabilities::radio::maverick(v10);
  if (v22 & 1) != 0 || (capabilities::radio::ice(v22))
  {
    util::to_str<diag::config::DuringAPSleep>(&v75);
    goto LABEL_73;
  }
  LOBYTE(v4) = a1[23];
LABEL_11:
  char v11 = *(const char **)a1;
  if ((v4 & 0x80u) == 0) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(const char **)a1;
  }
  unint64_t v13 = (capabilities::radio *)strcasecmp(v12, (const char *)*MEMORY[0x1E4F47270]);
  if (!v13)
  {
    if (capabilities::radio::maverick(v13)) {
      goto LABEL_72;
    }
    LOBYTE(v4) = a1[23];
    char v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    double v23 = a1;
  }
  else {
    double v23 = v11;
  }
  __int16 v24 = (capabilities::radio *)strcasecmp(v23, (const char *)*MEMORY[0x1E4F47268]);
  if (!v24)
  {
    if (capabilities::radio::maverick(v24)) {
      goto LABEL_72;
    }
    LOBYTE(v4) = a1[23];
    char v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    v25 = a1;
  }
  else {
    v25 = v11;
  }
  v26 = (capabilities::radio *)strcasecmp(v25, (const char *)*MEMORY[0x1E4F47288]);
  if (!v26)
  {
    if (capabilities::radio::maverick(v26))
    {
      util::to_str<unsigned int>(&v75, 3u);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
    char v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    char v27 = a1;
  }
  else {
    char v27 = v11;
  }
  uint64_t v28 = (capabilities::radio *)strcasecmp(v27, (const char *)*MEMORY[0x1E4F47290]);
  if (!v28)
  {
    if (capabilities::radio::maverick(v28))
    {
      util::to_str<diag::config::Recovery>(&v75);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    std::string::size_type v29 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F47278])) {
      goto LABEL_62;
    }
LABEL_72:
    util::to_str<BOOL>(&v75, 0);
    goto LABEL_73;
  }
  std::string::size_type v29 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F47278])) {
    goto LABEL_72;
  }
LABEL_62:
  xpc_connection_t v30 = (const char *)*MEMORY[0x1E4F4CCC8];
  xpc_object_t v31 = (capabilities::radio *)strcasecmp(v29, (const char *)*MEMORY[0x1E4F4CCC8]);
  if (!v31)
  {
    uint64_t v32 = capabilities::radio::maverick(v31);
    if (v32) {
      goto LABEL_78;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    uint64_t v33 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CEA8]);
    std::string v34 = a1;
    if (v33) {
      goto LABEL_67;
    }
    goto LABEL_77;
  }
  std::string v34 = *(const char **)a1;
  uint64_t v33 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4CEA8]);
  if (!v33)
  {
LABEL_77:
    uint64_t v32 = capabilities::radio::ice(v33);
    if (!v32)
    {
      xpc_object_t v36 = "None";
LABEL_82:
      std::string::__assign_external((std::string *)a2, v36);
      return 1;
    }
LABEL_78:
    if (config::hw::watch((config::hw *)v32)) {
      xpc_object_t v36 = "Lite";
    }
    else {
      xpc_object_t v36 = "Default";
    }
    goto LABEL_82;
  }
LABEL_67:
  xpc_object_t v35 = (capabilities::radio *)strcasecmp(v34, (const char *)*MEMORY[0x1E4F47260]);
  if (!v35)
  {
    if (capabilities::radio::maverick(v35))
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 4;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 4;
      }
      strcpy((char *)a2, "None");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80u) == 0) {
    xpc_object_t v37 = a1;
  }
  else {
    xpc_object_t v37 = *(const char **)a1;
  }
  xpc_object_t v38 = (const char *)*MEMORY[0x1E4F4CAA8];
  __int16 v39 = (capabilities::radio *)strcasecmp(v37, (const char *)*MEMORY[0x1E4F4CAA8]);
  if (!v39)
  {
    if (capabilities::radio::maverick(v39))
    {
LABEL_89:
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 5;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 5;
      }
      strcpy((char *)a2, "Sleep");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C4D0]))
    {
      CFMutableDictionaryRef v40 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CD88]);
      CFTypeID v41 = a1;
      if (v40) {
        goto LABEL_95;
      }
LABEL_100:
      unsigned int v43 = capabilities::trace::defaultMemoryFileMaxCount(v40);
      util::to_str<unsigned int>(&v75, v43);
      goto LABEL_73;
    }
LABEL_101:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 17;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((unsigned char *)a2 + 23) = 17;
    }
    strcpy((char *)a2, "/usr/lib/bbmasks/");
    return 1;
  }
  CFTypeID v41 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C4D0])) {
    goto LABEL_101;
  }
  CFMutableDictionaryRef v40 = (capabilities::trace *)strcasecmp(v41, (const char *)*MEMORY[0x1E4F4CD88]);
  if (!v40) {
    goto LABEL_100;
  }
LABEL_95:
  CFMutableDictionaryRef v42 = (capabilities::radio *)strcasecmp(v41, (const char *)*MEMORY[0x1E4F4F9A8]);
  if (!v42)
  {
    if (capabilities::radio::ice(v42)) {
      goto LABEL_72;
    }
    LOBYTE(v4) = a1[23];
  }
  int v44 = *(const char **)a1;
  if ((v4 & 0x80u) == 0) {
    CFTypeID v45 = a1;
  }
  else {
    CFTypeID v45 = *(const char **)a1;
  }
  CFMutableDictionaryRef v46 = (const char *)*MEMORY[0x1E4F4F998];
  xpc_object_t v47 = (capabilities::radio *)strcasecmp(v45, (const char *)*MEMORY[0x1E4F4F998]);
  if (!v47)
  {
    v48 = (capabilities::radio *)capabilities::radio::ice(v47);
    if (v48)
    {
      if (capabilities::radio::ice(v48)) {
        int v49 = 80;
      }
      else {
        int v49 = -1;
      }
LABEL_118:
      util::to_str<int>(v49, &v75);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
    int v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    CFMutableDictionaryRef v50 = a1;
  }
  else {
    CFMutableDictionaryRef v50 = v44;
  }
  xpc_object_t v51 = (const char *)*MEMORY[0x1E4F4F990];
  v52 = (capabilities::radio *)strcasecmp(v50, (const char *)*MEMORY[0x1E4F4F990]);
  if (!v52)
  {
    CFTypeID v53 = (capabilities::radio *)capabilities::radio::ice(v52);
    if (v53)
    {
      if (capabilities::radio::ice(v53)) {
        int v49 = 1;
      }
      else {
        int v49 = -1;
      }
      goto LABEL_118;
    }
    LOBYTE(v4) = a1[23];
    int v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    CFMutableDictionaryRef v54 = a1;
  }
  else {
    CFMutableDictionaryRef v54 = v44;
  }
  xpc_object_t v55 = (capabilities::radio *)strcasecmp(v54, (const char *)*MEMORY[0x1E4F4F988]);
  if (!v55)
  {
    if (capabilities::radio::ice(v55))
    {
      xpc_object_t v36 = (const std::string::value_type *)*MEMORY[0x1E4F4F9A0];
      goto LABEL_82;
    }
    LOBYTE(v4) = a1[23];
    int v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    v56 = a1;
  }
  else {
    v56 = v44;
  }
  CFTypeID v57 = (capabilities::radio *)strcasecmp(v56, v30);
  if (!v57)
  {
    if (capabilities::radio::ice(v57))
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 7;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 7;
      }
      strcpy((char *)a2, "Default");
      return 1;
    }
    LOBYTE(v4) = a1[23];
    int v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    CFMutableDictionaryRef v58 = a1;
  }
  else {
    CFMutableDictionaryRef v58 = v44;
  }
  xpc_object_t v59 = (capabilities::radio *)strcasecmp(v58, v38);
  if (!v59)
  {
    if (capabilities::radio::ice(v59)) {
      goto LABEL_89;
    }
    LOBYTE(v4) = a1[23];
    int v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    size_t v60 = a1;
  }
  else {
    size_t v60 = v44;
  }
  CFTypeID v61 = (capabilities::radio *)strcasecmp(v60, v46);
  if (!v61)
  {
    if (capabilities::radio::ice(v61))
    {
      util::to_str<int>(80, &v75);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
    int v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    CFMutableDictionaryRef v62 = a1;
  }
  else {
    CFMutableDictionaryRef v62 = v44;
  }
  xpc_object_t v63 = (capabilities::radio *)strcasecmp(v62, v51);
  if (!v63)
  {
    if (capabilities::radio::ice(v63))
    {
      util::to_str<int>(1, &v75);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D248])) {
      goto LABEL_72;
    }
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D200]) && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D208]))
    {
      v64 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C378]);
      if (v64)
      {
        CFTypeID v65 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C940]);
        if (v65)
        {
          CFMutableDictionaryRef v66 = (defaults::bbtrace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CAB8]);
          unsigned int v67 = a1;
          if (v66) {
            goto LABEL_171;
          }
LABEL_183:
          unsigned int count = defaults::bbtrace::transport_read_count(v66);
          util::to_str<unsigned int>(&v75, count);
          goto LABEL_73;
        }
LABEL_192:
        CFDataRef v73 = (capabilities::abs *)capabilities::radio::vendor(v65);
        if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v73)) {
          unsigned int v74 = 0x4000;
        }
        else {
          unsigned int v74 = 0x8000;
        }
        util::to_str<unsigned int>(&v75, v74);
        goto LABEL_73;
      }
LABEL_191:
      unsigned int v72 = capabilities::trace::defaultFileSizeBytes(v64);
      util::to_str<unsigned int>(&v75, v72);
      goto LABEL_73;
    }
LABEL_184:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 0;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((unsigned char *)a2 + 23) = 0;
    }
    *(unsigned char *)a2 = 0;
    return 1;
  }
  unsigned int v67 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4D248])) {
    goto LABEL_72;
  }
  if (!strcasecmp(v67, (const char *)*MEMORY[0x1E4F4D200]) || !strcasecmp(v67, (const char *)*MEMORY[0x1E4F4D208])) {
    goto LABEL_184;
  }
  v64 = (capabilities::trace *)strcasecmp(v67, (const char *)*MEMORY[0x1E4F4C378]);
  if (!v64) {
    goto LABEL_191;
  }
  CFTypeID v65 = (capabilities::radio *)strcasecmp(v67, (const char *)*MEMORY[0x1E4F4C940]);
  if (!v65) {
    goto LABEL_192;
  }
  CFMutableDictionaryRef v66 = (defaults::bbtrace *)strcasecmp(v67, (const char *)*MEMORY[0x1E4F4CAB8]);
  if (!v66) {
    goto LABEL_183;
  }
LABEL_171:
  if (!strcasecmp(v67, (const char *)*MEMORY[0x1E4F4CEA0]))
  {
    util::to_str<BOOL>(&v75, 1);
    goto LABEL_73;
  }
  CFAllocatorRef v68 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v68, OS_LOG_TYPE_ERROR);
  if (result)
  {
    std::string::size_type v69 = *MEMORY[0x1E4F4D2F0];
    if (a1[23] >= 0) {
      xpc_object_t v70 = a1;
    }
    else {
      xpc_object_t v70 = *(char **)a1;
    }
    LODWORD(v75.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v75.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v75.__r_.__value_.__r.__words[1] + 6) = v69;
    HIWORD(v75.__r_.__value_.__r.__words[2]) = 2080;
    CFMutableDictionaryRef v76 = v70;
    _os_log_error_impl(&dword_1C59C6000, v68, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v75,
      0x20u);
    return 0;
  }
  return result;
}

void sub_1C59CF3A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C59CEB78);
    }
    JUMPOUT(0x1C59CEB80);
  }
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(uint64_t a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  size_t v5 = (void *)_MergedGlobals_0;
  if (!_MergedGlobals_0) {
    return;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
  if (!v6) {
    return;
  }
  char v11 = std::__shared_weak_count::lock(v6);
  CFTypeID v53 = v11;
  if (!v11) {
    return;
  }
  if (!*v5)
  {
    std::string::size_type v20 = v11;
LABEL_68:
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    return;
  }
  unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v50[1] = v12;
  v50[2] = v12;
  v50[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v50);
  if (a3 && *a3)
  {
    uint64_t v13 = MEMORY[0x1C87947E0](v50, a3);
    MEMORY[0x1C87947E0](v13, ": ");
  }
  MEMORY[0x1C87941D0](&v48, a4, a5);
  ctu::operator<<();
  int v14 = (ctu::Clock *)MEMORY[0x1C87941F0](&v48);
  ctu::Clock::now_in_nanoseconds(v14);
  int v15 = (std::string *)operator new(0x60uLL);
  int v16 = abm::debug::kLogDomainMap[a2];
  size_t v17 = strlen(v16);
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    char v19 = (void **)operator new(v21 + 1);
    __dst[1] = v18;
    unint64_t v47 = v22 | 0x8000000000000000;
    __dst[0] = v19;
    goto LABEL_16;
  }
  HIBYTE(v47) = v17;
  char v19 = __dst;
  if (v17) {
LABEL_16:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  MEMORY[0x1C87941B0](v50);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v50);
  ctu::LogMessage::LogMessage();
  v48 = v15;
  double v23 = (std::__shared_weak_count *)operator new(0x20uLL);
  v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106688;
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  int v49 = v23;
  if (SHIBYTE(v47) < 0)
  {
    operator delete(__dst[0]);
    __int16 v24 = v15 + 2;
    int v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    __int16 v24 = v15 + 2;
    int v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_19:
      size_t size = v25;
      data = v24;
      goto LABEL_22;
    }
  }
  data = (std::string *)v15[2].__r_.__value_.__l.__data_;
  size_t size = v15[2].__r_.__value_.__l.__size_;
LABEL_22:
  uint64_t v28 = memchr(data, 10, size);
  if (v28) {
    unint64_t v29 = (unint64_t)v28;
  }
  else {
    unint64_t v29 = (unint64_t)data + size;
  }
  if (v29 - (void)data != size)
  {
    xpc_connection_t v30 = (unsigned __int8 *)(v29 + 1);
    if ((std::string *)(v29 + 1) != (std::string *)((char *)data + size))
    {
      xpc_object_t v31 = (char *)data + size + ~v29;
      do
      {
        int v32 = *v30;
        if (v32 != 10) {
          *(unsigned char *)v29++ = v32;
        }
        ++v30;
        --v31;
      }
      while (v31);
      LOBYTE(v25) = *((unsigned char *)&v15[2].__r_.__value_.__s + 23);
    }
  }
  if ((v25 & 0x80) == 0)
  {
    uint64_t v33 = (char *)v24 + v25;
    std::string::size_type v34 = v29 - (void)v24;
    if (v25 >= v29 - (unint64_t)v24) {
      goto LABEL_34;
    }
LABEL_49:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::string::pointer v39 = v15[2].__r_.__value_.__l.__data_;
  std::string::size_type v38 = v15[2].__r_.__value_.__l.__size_;
  uint64_t v33 = &v39[v38];
  std::string::size_type v34 = v29 - (void)v39;
  if (v38 < v29 - (unint64_t)v39) {
    goto LABEL_49;
  }
LABEL_34:
  if (&v33[-v29] == (char *)-1)
  {
    if ((v25 & 0x80) != 0)
    {
      std::string::pointer v44 = v15[2].__r_.__value_.__l.__data_;
      v15[2].__r_.__value_.__l.__size_ = v34;
      v44[v34] = 0;
      xpc_object_t v35 = v49;
      CFTypeID v45 = v49;
      if (!v49) {
        goto LABEL_37;
      }
    }
    else
    {
      *((unsigned char *)&v15[2].__r_.__value_.__s + 23) = v34 & 0x7F;
      v24->__r_.__value_.__s.__data_[v34] = 0;
      xpc_object_t v35 = v49;
      CFTypeID v45 = v49;
      if (!v49) {
        goto LABEL_37;
      }
    }
    goto LABEL_36;
  }
  std::string::__erase_external_with_move(v24, v34, (std::string::size_type)&v33[-v29]);
  xpc_object_t v35 = v49;
  CFTypeID v45 = v49;
  if (v49) {
LABEL_36:
  }
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_37:
  ctu::LogServer::log();
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  if (a2)
  {
    if (a2 == 2)
    {
      CFMutableDictionaryRef v40 = qword_1EBBDCCC8;
      if (qword_1EBBDCCC8 && os_log_type_enabled((os_log_t)qword_1EBBDCCC8, OS_LOG_TYPE_DEBUG))
      {
        CFTypeID v41 = (std::string::__raw *)&v48[2];
        if (SHIBYTE(v48[2].__r_.__value_.__r.__words[2]) < 0) {
          CFTypeID v41 = (std::string::__raw *)v41->__words[0];
        }
        *(_DWORD *)buf = 136315138;
        xpc_object_t v55 = v41;
        _os_log_debug_impl(&dword_1C59C6000, v40, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
    }
    else if (a2 == 3)
    {
      xpc_object_t v36 = qword_1EBBDCCD0;
      if (qword_1EBBDCCD0)
      {
        if (os_log_type_enabled((os_log_t)qword_1EBBDCCD0, OS_LOG_TYPE_DEFAULT))
        {
          xpc_object_t v37 = (std::string::__raw *)&v48[2];
          if (SHIBYTE(v48[2].__r_.__value_.__r.__words[2]) < 0) {
            xpc_object_t v37 = (std::string::__raw *)v37->__words[0];
          }
          *(_DWORD *)buf = 136315138;
          xpc_object_t v55 = v37;
LABEL_63:
          _os_log_impl(&dword_1C59C6000, v36, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    xpc_object_t v36 = qword_1EBBDCCC0;
    if (qword_1EBBDCCC0 && os_log_type_enabled((os_log_t)qword_1EBBDCCC0, OS_LOG_TYPE_DEFAULT))
    {
      CFMutableDictionaryRef v42 = (std::string::__raw *)&v48[2];
      if (SHIBYTE(v48[2].__r_.__value_.__r.__words[2]) < 0) {
        CFMutableDictionaryRef v42 = (std::string::__raw *)v42->__words[0];
      }
      *(_DWORD *)buf = 136315138;
      xpc_object_t v55 = v42;
      goto LABEL_63;
    }
  }
  unsigned int v43 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  MEMORY[0x1C87941F0](v50);
  std::string::size_type v20 = v53;
  if (v53) {
    goto LABEL_68;
  }
}

void sub_1C59CF9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x1C87941F0](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 128);
  _Unwind_Resume(a1);
}

void sub_1C59CFA54(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void sub_1C59CFA68()
{
  operator delete(v0);
  JUMPOUT(0x1C59CFAB0);
}

void sub_1C59CFA94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  JUMPOUT(0x1C59CFAB0);
}

void ABMServerInternal::broadcast_sync(void *a1, uint64_t a2, ctu **a3, void **a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v7) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  if (*a3) {
    BOOL v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    BOOL v10 = 0;
  }
  xpc_object_t v40 = v8;
  if (v10)
  {
    ctu::cf_to_xpc((uint64_t *)&v63, *a3, v9);
    xpc_dictionary_set_value(v8, kKeyEventData[0], v63);
    xpc_object_t v11 = v63;
    xpc_object_t v63 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v63);
    xpc_object_t v63 = 0;
  }
  xpc_object_t v12 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, kKeyCommand[0], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  int v14 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0) {
    int v14 = *(const char **)a2;
  }
  xpc_object_t v15 = xpc_string_create(v14);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, kKeyEvent[0], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  group = dispatch_group_create();
  size_t v17 = (std::__shared_weak_count *)a1[2];
  if (!v17 || (v41 = a1[1], (std::string::size_type v18 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v19 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
    CFMutableDictionaryRef v42 = v19;
    std::string::size_type v20 = (void *)a1[18];
    CFTypeID v45 = a1;
    uint64_t v21 = a1 + 19;
    if (v20 == a1 + 19) {
      goto LABEL_76;
    }
LABEL_26:
    while (1)
    {
      unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v22 = (xpc_object_t)v20[4];
      xpc_object_t v60 = v22;
      if (v22) {
        break;
      }
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v60 = v22;
      unint64_t v24 = v20[5];
      unint64_t v23 = v20[6];
      unint64_t v61 = v24;
      unint64_t v62 = v23;
      if (v23) {
        goto LABEL_28;
      }
LABEL_29:
      if (v22)
      {
        xpc_retain(v22);
        unint64_t v58 = v24;
        xpc_object_t v59 = (std::__shared_weak_count *)v23;
        if (!v23) {
          goto LABEL_32;
        }
LABEL_31:
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_32;
      }
      xpc_object_t v22 = xpc_null_create();
      unint64_t v58 = v24;
      xpc_object_t v59 = (std::__shared_weak_count *)v23;
      if (v23) {
        goto LABEL_31;
      }
LABEL_32:
      if ((uint64_t *)(v24 + 40) == std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(v24 + 32, (const void **)a2))goto LABEL_62; {
      uint64_t SystemTime = TelephonyUtilGetSystemTime();
      }
      v26 = v45[14];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        char v27 = (const void *)a2;
        if (*(char *)(a2 + 23) < 0)
        {
          char v27 = *(const void **)a2;
          if (*(char *)(v24 + 23) < 0) {
            goto LABEL_42;
          }
LABEL_36:
          long long v28 = *(_OWORD *)v24;
          v57.__r_.__value_.__r.__words[2] = *(void *)(v24 + 16);
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v28;
        }
        else
        {
          if ((*(char *)(v24 + 23) & 0x80000000) == 0) {
            goto LABEL_36;
          }
LABEL_42:
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v24, *(void *)(v24 + 8));
        }
        unint64_t v29 = &v57;
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        CFTypeID v65 = v27;
        __int16 v66 = 2080;
        unsigned int v67 = v29;
        __int16 v68 = 2048;
        uint64_t v69 = SystemTime;
        _os_log_impl(&dword_1C59C6000, v26, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        xpc_object_t v8 = v40;
      }
      if (!*a4)
      {
        xpc_connection_send_message((xpc_connection_t)v22, v8);
        goto LABEL_62;
      }
      dispatch_group_enter(group);
      xpc_connection_t v30 = v45[3];
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 1174405120;
      handler[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
      handler[3] = &__block_descriptor_tmp_31_4;
      handler[4] = v45;
      handler[5] = v41;
      unint64_t v51 = v42;
      atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      unint64_t v52 = v24;
      CFTypeID v53 = (std::__shared_weak_count *)v23;
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      uint64_t v55 = SystemTime;
      uint64_t v56 = group;
      xpc_connection_send_message_with_reply((xpc_connection_t)v22, v8, v30, handler);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        xpc_object_t v31 = v53;
        if (!v53) {
          goto LABEL_60;
        }
      }
      else
      {
        xpc_object_t v31 = v53;
        if (!v53) {
          goto LABEL_60;
        }
      }
      if (atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_60:
        int v32 = v51;
        if (!v51) {
          goto LABEL_62;
        }
LABEL_61:
        std::__shared_weak_count::__release_weak(v32);
        goto LABEL_62;
      }
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      int v32 = v51;
      if (v51) {
        goto LABEL_61;
      }
LABEL_62:
      uint64_t v33 = v59;
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      xpc_release(v22);
      std::string::size_type v34 = (std::__shared_weak_count *)v62;
      if (v62 && !atomic_fetch_add((atomic_ullong *volatile)(v62 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      xpc_release(v60);
      xpc_object_t v35 = (void *)v20[1];
      if (v35)
      {
        do
        {
          xpc_object_t v36 = v35;
          xpc_object_t v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          xpc_object_t v36 = (void *)v20[2];
          BOOL v37 = *v36 == (void)v20;
          std::string::size_type v20 = v36;
        }
        while (!v37);
      }
      std::string::size_type v20 = v36;
      if (v36 == v21) {
        goto LABEL_76;
      }
    }
    xpc_retain(v22);
    unint64_t v24 = v20[5];
    unint64_t v23 = v20[6];
    unint64_t v61 = v24;
    unint64_t v62 = v23;
    if (!v23) {
      goto LABEL_29;
    }
LABEL_28:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_29;
  }
  CFMutableDictionaryRef v42 = v18;
  std::string::size_type v20 = (void *)a1[18];
  CFTypeID v45 = a1;
  uint64_t v21 = a1 + 19;
  if (v20 != a1 + 19) {
    goto LABEL_26;
  }
LABEL_76:
  if (*a4)
  {
    std::string::size_type v38 = v45[3];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_32;
    block[3] = &__block_descriptor_tmp_33_3;
    block[4] = v45;
    block[5] = v41;
    unint64_t v47 = v42;
    atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v48 = *(std::string *)a2;
    }
    std::string::pointer v39 = *a4;
    if (*a4) {
      std::string::pointer v39 = _Block_copy(v39);
    }
    aBlock = v39;
    dispatch_group_notify(group, v38, block);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  dispatch_release(group);
  std::__shared_weak_count::__release_weak(v42);
  xpc_release(v8);
}

void sub_1C59D0244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28) {
    std::__shared_weak_count::__release_weak(a28);
  }
  std::__shared_weak_count::__release_weak(a18);
  xpc_release(object);
  _Unwind_Resume(a1);
}

BOOL prop::bbtrace::get(char *a1, uint64_t a2)
{
  int v4 = (const void *)*MEMORY[0x1E4F4D2F0];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    xpc_object_t v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  xpc_object_t v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C59D0444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isInternalProperty_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3, _DWORD *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  v36[0] = 0;
  v36[1] = 0;
  int64_t v37 = 0;
  v34[0] = 0;
  v34[1] = 0;
  int64_t v35 = 0;
  memset(&string, 0, sizeof(string));
  uint64_t v8 = MEMORY[0x1C8795EB0](*a2);
  uint64_t v9 = MEMORY[0x1E4F14590];
  if (v8 != MEMORY[0x1E4F14590])
  {
    BOOL v10 = 0;
    goto LABEL_3;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C1A0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  *(_OWORD *)xpc_object_t v36 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  int64_t v37 = v32.__r_.__value_.__r.__words[2];
  *((unsigned char *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(object);
  xpc_object_t v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C6A8]);
  xpc_object_t objecta = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t objecta = xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[0]);
  }
  *(_OWORD *)std::string::size_type v34 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  int64_t v35 = v32.__r_.__value_.__r.__words[2];
  *((unsigned char *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(objecta);
  xpc_object_t v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C800]);
  xpc_object_t objectb = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t objectb = xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(string.__r_.__value_.__l.__data_);
  }
  std::string string = v32;
  xpc_release(objectb);
  if ((SHIBYTE(v37) & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E4F4C398]))
    {
      if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E4F4C300]))
      {
        if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E4F4C2F8]))
        {
          xpc_object_t v22 = (char *)*MEMORY[0x1E4F4C1B8];
          if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E4F4C1B8]))
          {
            xpc_object_t v22 = (char *)*MEMORY[0x1E4F4C210];
            if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E4F4C210]))
            {
              xpc_object_t v22 = (char *)*MEMORY[0x1E4F4C208];
              unint64_t v23 = (const char *)v36;
              unint64_t v24 = (const char *)v36;
LABEL_56:
              if (strcasecmp(v24, v22))
              {
                xpc_object_t v22 = (char *)*MEMORY[0x1E4F4C138];
                if (strcasecmp(v23, (const char *)*MEMORY[0x1E4F4C138]))
                {
                  BOOL v10 = 0;
                  goto LABEL_3;
                }
              }
              goto LABEL_74;
            }
          }
          goto LABEL_74;
        }
LABEL_64:
        BOOL v27 = prop::systemlogs::get((char *)v34, (uint64_t)&string);
        goto LABEL_69;
      }
      goto LABEL_60;
    }
LABEL_59:
    BOOL v27 = prop::compression::get((char *)v34, (uint64_t)&string);
LABEL_69:
    BOOL v10 = v27;
    goto LABEL_3;
  }
  unint64_t v23 = v36[0];
  if (!strcasecmp(v36[0], (const char *)*MEMORY[0x1E4F4C398])) {
    goto LABEL_59;
  }
  if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E4F4C300]))
  {
    if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E4F4C2F8]))
    {
      xpc_object_t v22 = (char *)*MEMORY[0x1E4F4C1B8];
      if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E4F4C1B8]))
      {
        xpc_object_t v22 = (char *)*MEMORY[0x1E4F4C210];
        if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E4F4C210]))
        {
          xpc_object_t v22 = (char *)*MEMORY[0x1E4F4C208];
          unint64_t v24 = v36[0];
          goto LABEL_56;
        }
      }
LABEL_74:
      std::string::basic_string[abi:ne180100]<0>(&__p, v22);
      BOOL v10 = prop::get((char *)&__p, (char *)v34, (uint64_t)&string);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_3;
    }
    goto LABEL_64;
  }
LABEL_60:
  if (v35 >= 0) {
    int v25 = v34;
  }
  else {
    int v25 = (void **)v34[0];
  }
  v26 = (TapToRadar *)strcasecmp((const char *)v25, (const char *)*MEMORY[0x1E4F4C198]);
  if (v26)
  {
    BOOL v27 = prop::ttr::get((char *)v34, (uint64_t)&string);
    goto LABEL_69;
  }
  int Mode = TapToRadar::getMode(v26);
  util::to_str<int>(Mode, &__p);
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(string.__r_.__value_.__l.__data_);
  }
  std::string string = __p;
  BOOL v10 = 1;
LABEL_3:
  if (MEMORY[0x1C8795EB0](*a3) != v9) {
    goto LABEL_22;
  }
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!string.__r_.__value_.__l.__size_) {
      goto LABEL_22;
    }
    p_std::string string = (std::string *)string.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&string.__r_.__value_.__s + 23)) {
      goto LABEL_22;
    }
    p_std::string string = &string;
  }
  xpc_object_t v15 = xpc_string_create((const char *)p_string);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E4F4C800], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
LABEL_22:
  if (!v10)
  {
    *a4 = -534716416;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
LABEL_33:
    if (SHIBYTE(v35) < 0) {
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  size_t v17 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *a4 = 0;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  std::string::size_type v18 = v36;
  if (v37 < 0) {
    std::string::size_type v18 = (char **)v36[0];
  }
  char v19 = v34;
  if (v35 < 0) {
    char v19 = (void **)v34[0];
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
  std::string::size_type v20 = &string;
  if ((string.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v20 = (std::string *)string.__r_.__value_.__r.__words[0];
  }
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"get";
  WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
  HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
  std::string::pointer v39 = v19;
  __int16 v40 = 2080;
  uint64_t v41 = v20;
  _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I Internal %s trace property: %s, %s = %s", (uint8_t *)&__p, 0x2Au);
  *a4 = 0;
  if ((SHIBYTE(string.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_37:
  operator delete(string.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
  {
LABEL_38:
    operator delete(v34[0]);
    if (SHIBYTE(v37) < 0) {
      goto LABEL_39;
    }
    return v10;
  }
LABEL_34:
  if (SHIBYTE(v37) < 0) {
LABEL_39:
  }
    operator delete(v36[0]);
  return v10;
}

void sub_1C59D0C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a18 < 0)
  {
    operator delete(a13);
    if ((a25 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  operator delete(a20);
  if ((a32 & 0x80000000) == 0) {
LABEL_7:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(a27);
  goto LABEL_7;
}

std::string **ServerClientState::ServerClientState(std::string **a1, uint64_t a2)
{
  int v4 = (std::string *)operator new(0x38uLL);
  size_t v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  v5[1].__r_.__value_.__s.__data_[0] = 0;
  v5[2].__r_.__value_.__r.__words[0] = 0;
  v5[1].__r_.__value_.__r.__words[2] = 0;
  v5[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v5[1].__r_.__value_.__r.__words[2];
  *a1 = v5;
  uint64_t v6 = (std::string *)operator new(0x20uLL);
  v6->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F210FEB8;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  a1[1] = v6;
  return a1;
}

void sub_1C59D0EA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C59D0EB4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v28 = 0;
  unint64_t v29 = &v28;
  uint64_t v30 = 0x2000000000;
  int v31 = -534716414;
  if (MEMORY[0x1C8795EB0](*(void *)(v2 + 24)) == MEMORY[0x1E4F14590])
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4D300]);
    xpc_object_t v32 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v32 = xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&v32, (const object *)0xFFFFFFFFLL);
    xpc_release(v32);
    if (v13 != 1)
    {
      if (v13)
      {
        if (v13 - 2 > 3) {
          goto LABEL_2;
        }
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    uint64_t v15 = *(void *)(v3 + 176);
    if (v15)
    {
      uint64_t v16 = v3 + 176;
      do
      {
        unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
        BOOL v18 = v17 >= v13;
        if (v17 >= v13) {
          char v19 = (uint64_t *)v15;
        }
        else {
          char v19 = (uint64_t *)(v15 + 8);
        }
        if (v18) {
          uint64_t v16 = v15;
        }
        uint64_t v15 = *v19;
      }
      while (*v19);
      if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
      {
        *((_DWORD *)v29 + 6) = -534716416;
        std::string::size_type v20 = *(std::__shared_weak_count **)(v16 + 48);
        v27[0] = *(void *)(v16 + 40);
        v27[1] = (uint64_t)v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 1174405120;
        v23[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke;
        v23[3] = &unk_1F21080B8;
        v23[5] = v3;
        uint64_t v21 = *(void **)(v2 + 32);
        if (v21) {
          uint64_t v21 = _Block_copy(v21);
        }
        aBlock = v21;
        uint64_t v25 = v16;
        v23[4] = &v28;
        xpc_object_t v22 = _Block_copy(v23);
        v26 = v22;
        AWDModule::clearConfiguration_sync(v3, v27, (uint64_t)&v26);
        if (v22) {
          _Block_release(v22);
        }
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
    }
  }
LABEL_2:
  int v4 = v29;
  if (*((_DWORD *)v29 + 6) == -534716414)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    xpc_object_t v32 = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v32);
    xpc_release(v32);
    xpc_release(v8);
    _Block_object_dispose(&v28, 8);
  }
  else
  {
    _Block_object_dispose(&v28, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  BOOL v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  xpc_object_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C59D11F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v23) {
    _Block_release(v23);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  _Block_object_dispose(&a20, 8);
  uint64_t v25 = *(const void **)(v21 + 32);
  if (v25) {
    _Block_release(v25);
  }
  xpc_release(*(xpc_object_t *)(v21 + 24));
  *(void *)(v21 + 24) = 0;
  v26 = *(std::__shared_weak_count **)(v21 + 8);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  operator delete((void *)v21);
  BOOL v27 = (std::__shared_weak_count *)v20[2];
  if (v27)
  {
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator xpc::array(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v4) != MEMORY[0x1E4F14568])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

uint64_t std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

BOOL prop::get(char *a1, char *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    uint64_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C1F8])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D2F0])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F980])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F978]))
    {
      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C200]))
      {
        if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C288]))
        {
          if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C390]))
          {
            if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C398]))
            {
              if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C300]))
              {
                if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C138]))
                {
                  if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C2F8]))
                  {
                    if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C1B8]))
                    {
                      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C210]))
                      {
LABEL_16:
                        if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C208]))
                        {
                          return prop::tracesettings::get(a2, a3);
                        }
                        else
                        {
                          uint64_t v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              uint64_t v9 = a1;
                            }
                            else {
                              uint64_t v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              BOOL v10 = a2;
                            }
                            else {
                              BOOL v10 = *(char **)a2;
                            }
                            int v11 = 136315650;
                            xpc_object_t v12 = "prop";
                            __int16 v13 = 2080;
                            xpc_object_t v14 = v9;
                            __int16 v15 = 2080;
                            uint64_t v16 = v10;
                            _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "%s: get: Invalid domain; domain='%s' key='%s'",
                              (uint8_t *)&v11,
                              0x20u);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1F8]) {
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D2F0])
  }
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F980])
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F978]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C200]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C288]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C390]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C398]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C300]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C138]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2F8]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1B8]))
                  {
                    uint64_t v6 = a1;
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C210])) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return prop::tailspin::get(a2, a3);
                  }
LABEL_60:
                  return prop::profile::get(a2, a3);
                }
LABEL_57:
                return prop::systemlogs::get(a2, a3);
              }
LABEL_54:
              return prop::logfilter::get(a2, a3);
            }
LABEL_51:
            return prop::ttr::get(a2, a3);
          }
LABEL_48:
          return prop::compression::get(a2, a3);
        }
LABEL_45:
        return prop::bbipc::get(a2, a3);
      }
LABEL_39:
      return prop::ipc::get(a2, a3);
    }
LABEL_42:
    return prop::coredump::get(a2, a3);
  }

  return prop::bbtrace::get(a2, a3);
}

uint64_t ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ABMServerInternal::registerNotification(uint64_t a1, void **a2, char a3, const void **a4)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_28_2;
  uint64_t v7 = *a2;
  v9[4] = a1;
  xpc_object_t object = v7;
  if (!v7)
  {
    xpc_object_t object = xpc_null_create();
    char v12 = a3;
    xpc_object_t v8 = *a4;
    CFTypeRef cf = v8;
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v7);
  char v12 = a3;
  xpc_object_t v8 = *a4;
  CFTypeRef cf = v8;
  if (v8) {
LABEL_5:
  }
    CFRetain(v8);
LABEL_6:
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
}

void prop::file::get<std::string>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  memset(v30, 170, sizeof(v30));
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  unint64_t v7 = v6 + 1;
  __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    unint64_t v29 = (std::__shared_weak_count *)(v6 + 1);
    v30[0] = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    unint64_t v29 = 0;
    v30[0] = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v30[0]) = v6 + 1;
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (v5 >= 0) {
    xpc_object_t v14 = a1;
  }
  else {
    xpc_object_t v14 = *a1;
  }
  memmove(p_dst, v14, v6);
LABEL_15:
  *(_WORD *)((char *)p_dst + v6) = 46;
  int v15 = *(char *)(a2 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v16 = *(const std::string::value_type **)a2;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a2 + 8);
  }
  BOOL v18 = std::string::append((std::string *)&__dst, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v30[3] = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)&v30[1] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30[0]) < 0) {
    operator delete(__dst);
  }
  if (v30[3] >= 0) {
    std::string::size_type v20 = (char *)&v30[1] + HIBYTE(v30[3]);
  }
  else {
    std::string::size_type v20 = (char *)(v30[1] + v30[2]);
  }
  if (v30[3] >= 0) {
    uint64_t v21 = (char *)&v30[1];
  }
  else {
    uint64_t v21 = (char *)v30[1];
  }
  for (; v21 != v20; ++v21)
    char *v21 = __tolower(*v21);
  memset(a4, 170, sizeof(std::string));
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDC7D8)
  {
    unint64_t v23 = (void **)operator new(0x18uLL);
    MEMORY[0x1C87942F0](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    xpc_object_t v22 = operator new(0x20uLL);
    void *v22 = &unk_1F210A638;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    unint64_t v24 = (std::__shared_weak_count *)off_1EBBDC7E0;
    qword_1EBBDC7D8 = (uint64_t)v23;
    off_1EBBDC7E0 = v22;
    if (!v24)
    {
      __dst = v23;
      unint64_t v29 = (std::__shared_weak_count *)v22;
      goto LABEL_41;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  unint64_t v23 = (void **)qword_1EBBDC7D8;
  xpc_object_t v22 = off_1EBBDC7E0;
  __dst = (void **)qword_1EBBDC7D8;
  unint64_t v29 = (std::__shared_weak_count *)off_1EBBDC7E0;
  if (off_1EBBDC7E0) {
LABEL_41:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (v30[3] >= 0) {
    uint64_t v25 = (const char *)&v30[1];
  }
  else {
    uint64_t v25 = (const char *)v30[1];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v31, v25);
  v26 = (const void *)(*(uint64_t (**)(void **, uint64_t))*v23)(v23, v31);
  if (v26)
  {
    ctu::cf::assign();
    CFRelease(v26);
  }
  MEMORY[0x1C8794290](&v31);
  BOOL v27 = v29;
  if (!v29 || atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v30[3]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (SHIBYTE(v30[3]) < 0) {
LABEL_50:
  }
    operator delete((void *)v30[1]);
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, xpc_object_t *a2, const void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  unint64_t v7 = (void *)a1[4];
  xpc_object_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    int v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      uint64_t v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      uint64_t v13 = *a3;
      if (*a3)
      {
LABEL_8:
        xpc_object_t v14 = _Block_copy(v13);
        int v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    xpc_object_t v14 = 0;
    int v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    std::string::size_type v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    BOOL v18 = v17;
    long long v19 = operator new(0x28uLL);
    std::string::size_type v20 = v19;
    *long long v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    xpc_object_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v23 = operator new(0x18uLL);
    *unint64_t v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ABMServerInternal::handleNewClient_sync(uint64_t a1@<X0>, xpc::object *a2@<X1>, const void **a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  if ((*(_DWORD *)(a1 + 192) & 0xFFFFFFFE) == 4)
  {
    size_t v6 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    unint64_t v7 = (char *)MEMORY[0x1C8795DE0](*(void *)a2);
    memset(__p, 170, sizeof(__p));
    size_t v8 = strlen(v7);
    if (v8 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      uint64_t v19 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v19 = v8 | 7;
      }
      uint64_t v20 = v19 + 1;
      uint64_t v10 = operator new(v19 + 1);
      __p[1] = v9;
      __p[2] = (void *)(v20 | 0x8000000000000000);
      __p[0] = v10;
    }
    else
    {
      HIBYTE(__p[2]) = v8;
      uint64_t v10 = __p;
      if (!v8) {
        goto LABEL_22;
      }
    }
    memcpy(v10, v7, (size_t)v9);
LABEL_22:
    *((unsigned char *)v9 + (void)v10) = 0;
    free(v7);
    int v21 = SHIBYTE(__p[2]);
    xpc_object_t v22 = (void **)__p[0];
    unint64_t v23 = to_string(*(_DWORD *)(a1 + 192));
    unint64_t v24 = __p;
    if (v21 < 0) {
      unint64_t v24 = v22;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v23;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Rejecting new client %s because server state is '%s'", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  xpc::object::to_string((uint64_t *)__p, a2);
  int v11 = (std::string *)operator new(0x38uLL);
  xpc_object_t v12 = v11;
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v11->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
  }
  v12[1].__r_.__value_.__s.__data_[0] = 0;
  v12[2].__r_.__value_.__r.__words[0] = 0;
  v12[1].__r_.__value_.__r.__words[2] = 0;
  v12[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v12[1].__r_.__value_.__r.__words[2];
  *(void *)buf = v12;
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = &unk_1F210FEB8;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v12;
  *(void *)&uint8_t buf[8] = v13;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    xpc_object_t v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_33;
    }
  }
  else
  {
    xpc_object_t v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_33;
    }
  }
  int v15 = (char *)MEMORY[0x1C8795DE0](*(void *)a2);
  memset(__p, 170, sizeof(__p));
  size_t v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v25 = v16 | 7;
    }
    uint64_t v26 = v25 + 1;
    BOOL v18 = operator new(v25 + 1);
    __p[1] = v17;
    __p[2] = (void *)(v26 | 0x8000000000000000);
    __p[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(__p[2]) = v16;
  BOOL v18 = __p;
  if (v16) {
LABEL_29:
  }
    memcpy(v18, v15, (size_t)v17);
  *((unsigned char *)v17 + (void)v18) = 0;
  free(v15);
  BOOL v27 = __p;
  if (SHIBYTE(__p[2]) < 0) {
    BOOL v27 = (void **)__p[0];
  }
  *(_DWORD *)CFMutableDictionaryRef v46 = 136315138;
  unint64_t v47 = v27;
  _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I New client: %s", v46, 0xCu);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    unint64_t v29 = (uint64_t **)(a1 + 152);
    uint64_t v28 = *(uint64_t **)(a1 + 152);
    if (v28) {
      goto LABEL_34;
    }
    goto LABEL_43;
  }
LABEL_33:
  unint64_t v29 = (uint64_t **)(a1 + 152);
  uint64_t v28 = *(uint64_t **)(a1 + 152);
  if (v28)
  {
LABEL_34:
    unint64_t v30 = *(void *)a2;
    while (1)
    {
      while (1)
      {
        uint64_t v31 = (uint64_t **)v28;
        unint64_t v32 = v28[4];
        if (v30 >= v32) {
          break;
        }
        uint64_t v28 = *v31;
        unint64_t v29 = v31;
        if (!*v31) {
          goto LABEL_44;
        }
      }
      if (v32 >= v30) {
        break;
      }
      uint64_t v28 = v31[1];
      if (!v28)
      {
        unint64_t v29 = v31 + 1;
        goto LABEL_44;
      }
    }
    uint64_t v33 = (uint64_t *)v31;
    uint64_t v35 = *(void *)buf;
    uint64_t v34 = *(void *)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_43:
  uint64_t v31 = v29;
LABEL_44:
  uint64_t v33 = (uint64_t *)operator new(0x38uLL);
  xpc_object_t v36 = *(void **)a2;
  v33[4] = *(void *)a2;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    v33[4] = (uint64_t)xpc_null_create();
  }
  v33[5] = 0;
  v33[6] = 0;
  *uint64_t v33 = 0;
  v33[1] = 0;
  v33[2] = (uint64_t)v31;
  std::__shared_weak_count *v29 = v33;
  uint64_t v37 = **(void **)(a1 + 144);
  std::string::size_type v38 = v33;
  if (v37)
  {
    *(void *)(a1 + 144) = v37;
    std::string::size_type v38 = *v29;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 152), v38);
  ++*(void *)(a1 + 160);
  uint64_t v35 = *(void *)buf;
  uint64_t v34 = *(void *)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_51;
  }
LABEL_50:
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
LABEL_51:
  std::string::pointer v39 = (std::__shared_weak_count *)v33[6];
  v33[5] = v35;
  v33[6] = v34;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 0x40000000;
  v43[2] = ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke;
  v43[3] = &__block_descriptor_tmp_21;
  v43[4] = a1;
  __int16 v40 = _Block_copy(v43);
  uint64_t v41 = *a3;
  *a3 = v40;
  if (v41) {
    _Block_release(v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
}

void sub_1C59D2738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  operator delete(v21);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*v20) {
    _Block_release(*v20);
  }
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::CommCenterNVMSync::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 36) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 29);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, (uint64_t)a2, a4);
}

void StatsModule::reportAWD_sync(uint64_t a1, int a2, void **a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = *(void **)(a1 + 200);
  if (v4)
  {
    uint64_t v5 = *a3;
    xpc_object_t object = v5;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    StatsAWD::submit(v4, a2, &object);
    xpc_release(object);
  }
  else
  {
    int v6 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v9 = a2;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "AWD object has not created yet. 0x%x metric ID cannot be submitted", buf, 8u);
    }
  }
}

void sub_1C59D296C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t hasBasebandEntitlement(xpc_object_t *a1, char a2)
{
  uint64_t v4 = MEMORY[0x1C8795EB0](*a1);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 == MEMORY[0x1E4F14590])
  {
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*a1);
    if (remote_connection)
    {
      xpc_object_t v8 = remote_connection;
      xpc_retain(remote_connection);
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
    if (MEMORY[0x1C8795EB0](v8) != MEMORY[0x1E4F14578])
    {
      uint64_t v6 = 0;
LABEL_94:
      xpc_release(v8);
      return v6;
    }
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v47 = v9;
    long long v48 = v9;
    xpc_connection_get_audit_token();
    xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v10 = (void *)xpc_copy_entitlement_for_token();
    xpc_object_t v11 = v10;
    if (v10)
    {
      xpc_object_t xdict = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t xdict = v11;
      if (!v11)
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
        goto LABEL_15;
      }
    }
    if (MEMORY[0x1C8795EB0](v11) == v5)
    {
      xpc_retain(v11);
      goto LABEL_16;
    }
    xpc_object_t v12 = xpc_null_create();
LABEL_15:
    xpc_object_t xdict = v12;
LABEL_16:
    xpc_release(v11);
    xpc_object_t v13 = xpc_null_create();
    if (MEMORY[0x1C8795EB0](xdict) == v5)
    {
      std::string __p = &xdict;
      uint64_t v50 = kKeyEntitlementFineGrained;
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&__p, object);
      xpc_object_t v14 = object[0];
      object[0] = xpc_null_create();
      xpc_release(v13);
      xpc_release(object[0]);
      xpc_object_t v13 = v14;
    }
    uint64_t v15 = MEMORY[0x1C8795EB0](v13);
    uint64_t v16 = MEMORY[0x1E4F14568];
    if (v15 != MEMORY[0x1E4F14568])
    {
      uint64_t v6 = 0;
LABEL_36:
      if ((a2 & 1) == 0)
      {
        if (MEMORY[0x1C8795EB0](xdict) == v5)
        {
          xpc_object_t value = xpc_dictionary_get_value(xdict, (const char *)kKeyEntitlementBasebanddAllow);
          xpc_object_t v31 = value;
          std::string __p = value;
          if (value)
          {
            xpc_retain(value);
          }
          else
          {
            xpc_object_t v31 = xpc_null_create();
            std::string __p = v31;
          }
          if (MEMORY[0x1C8795EB0](v31) == MEMORY[0x1E4F145D8])
          {
            uint64_t v6 = 0;
          }
          else
          {
            uint64_t v6 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
            xpc_object_t v31 = __p;
          }
          xpc_release(v31);
        }
        else
        {
          uint64_t v6 = 0;
        }
      }
LABEL_93:
      xpc_release(v13);
      xpc_release(xdict);
      goto LABEL_94;
    }
    if (v13)
    {
      xpc_retain(v13);
      xpc_object_t v17 = v13;
    }
    else
    {
      xpc_object_t v17 = xpc_null_create();
      if (!v17)
      {
        xpc_object_t v17 = xpc_null_create();
        BOOL v18 = 0;
LABEL_24:
        xpc_release(v18);
        if (v13)
        {
          xpc_retain(v13);
          xpc_object_t v19 = v13;
        }
        else
        {
          xpc_object_t v19 = xpc_null_create();
        }
        xpc_object_t v41 = v13;
        if (MEMORY[0x1C8795EB0](v13) == v16)
        {
          size_t count = xpc_array_get_count(v13);
          if (v19) {
            goto LABEL_29;
          }
        }
        else
        {
          size_t count = 0;
          if (v19)
          {
LABEL_29:
            xpc_retain(v19);
            xpc_object_t v43 = v19;
            goto LABEL_32;
          }
        }
        xpc_object_t v43 = xpc_null_create();
LABEL_32:
        xpc_release(v19);
        if (!count && v17 == v43)
        {
          char v42 = 0;
LABEL_35:
          xpc_release(v43);
          xpc_release(v17);
          xpc_object_t v13 = v41;
          uint64_t v6 = v42 & 1;
          if (v42) {
            goto LABEL_93;
          }
          goto LABEL_36;
        }
        if (a2)
        {
          char v42 = 0;
          size_t v21 = 0;
          size_t v22 = count - 1;
          while (1)
          {
            xpc_object_t v45 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
            xpc_object_t v23 = xpc_array_get_value(v17, v21);
            xpc_object_t v45 = v23;
            if (v23) {
              xpc_retain(v23);
            }
            else {
              xpc_object_t v45 = xpc_null_create();
            }
            memset(object, 170, sizeof(object));
            std::string __p = 0;
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            xpc::dyn_cast_or_default();
            if (SHIBYTE(v51) < 0) {
              operator delete(__p);
            }
            int v24 = SHIBYTE(object[2]);
            xpc_object_t v25 = SHIBYTE(object[2]) >= 0 ? (xpc_object_t)HIBYTE(object[2]) : object[1];
            if (v25 != (xpc_object_t)strlen((const char *)kBasebandXpcRestricted)) {
              break;
            }
            uint64_t v26 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
            if (memcmp(v26, (const void *)kBasebandXpcRestricted, (size_t)v25)) {
              break;
            }
            int v27 = 0;
            char v42 = 1;
            if (v24 < 0) {
              goto LABEL_55;
            }
LABEL_56:
            xpc_release(v45);
            if (v27)
            {
              size_t v28 = v21 + 1;
              BOOL v29 = v22 == v21++;
              if (!v29) {
                continue;
              }
              size_t v21 = v28;
              if (v17 != v43) {
                continue;
              }
            }
            goto LABEL_35;
          }
          int v27 = 1;
          if ((v24 & 0x80000000) == 0) {
            goto LABEL_56;
          }
LABEL_55:
          operator delete(object[0]);
          goto LABEL_56;
        }
        char v42 = 0;
        size_t v32 = 0;
        size_t v33 = count - 1;
        while (1)
        {
          xpc_object_t v45 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          xpc_object_t v34 = xpc_array_get_value(v17, v32);
          xpc_object_t v45 = v34;
          if (v34) {
            xpc_retain(v34);
          }
          else {
            xpc_object_t v45 = xpc_null_create();
          }
          memset(object, 170, sizeof(object));
          std::string __p = 0;
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v51) < 0) {
            operator delete(__p);
          }
          int v35 = SHIBYTE(object[2]);
          xpc_object_t v36 = SHIBYTE(object[2]) >= 0 ? (xpc_object_t)HIBYTE(object[2]) : object[1];
          if (v36 != (xpc_object_t)strlen((const char *)kBasebandXpc)) {
            break;
          }
          uint64_t v37 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
          if (memcmp(v37, (const void *)kBasebandXpc, (size_t)v36)) {
            break;
          }
          int v38 = 0;
          char v42 = 1;
          if (v35 < 0) {
            goto LABEL_80;
          }
LABEL_81:
          xpc_release(v45);
          if (v38)
          {
            size_t v39 = v32 + 1;
            BOOL v29 = v33 == v32++;
            if (!v29) {
              continue;
            }
            size_t v32 = v39;
            if (v17 != v43) {
              continue;
            }
          }
          goto LABEL_35;
        }
        int v38 = 1;
        if ((v35 & 0x80000000) == 0) {
          goto LABEL_81;
        }
LABEL_80:
        operator delete(object[0]);
        goto LABEL_81;
      }
    }
    xpc_retain(v17);
    BOOL v18 = v17;
    goto LABEL_24;
  }
  return 0;
}

void sub_1C59D2ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, xpc_object_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  xpc_release(object);
  xpc_release(v28);
  xpc_release(a16);
  xpc_release(v27);
  _Unwind_Resume(a1);
}

void PowerManager::releasePowerAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    xpc_object_t v12 = v2;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    goto LABEL_6;
  }
  std::string v11 = *(std::string *)a2;
  xpc_object_t v12 = v2;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  std::string __p = v11;
LABEL_6:
  uint64_t v3 = (std::__shared_weak_count *)v2[10];
  if (!v3 || (uint64_t v4 = v2[9], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = v12;
  xpc_object_t v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v7[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  long long v9 = v2[11];
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v7;
  v10[1] = v4;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_17:
      operator delete(v11.__r_.__value_.__l.__data_);
      return;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_1C59D31D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  xpc_object_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11FSModuleICEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F2109010;
  block[5] = v5;
  xpc_object_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

void awd::metrics::CommCenterNVMSync::~CommCenterNVMSync(awd::metrics::CommCenterNVMSync *this)
{
  *(void *)this = &unk_1F210D1A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

{
  *(void *)this = &unk_1F210D1A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F210D1A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void FSModuleICE::requestFSSync_sync(FSModuleICE *this, unsigned int a2, int a3)
{
  if (*((unsigned char *)this + 1153))
  {
    uint64_t v4 = *((void *)this + 11);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I RFS sync is not allowed", (uint8_t *)&buf, 2u);
    }
    return;
  }
  int v5 = a3;
  if (*((unsigned char *)this + 962) || *((unsigned char *)this + 963))
  {
    uint64_t v7 = *((void *)this + 11);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Deferred to invoke FS Sync due to low power mode", (uint8_t *)&buf, 2u);
    }
    xpc_object_t v8 = (char *)*((void *)this + 124);
    long long v9 = (char *)*((void *)this + 123);
    uint64_t v10 = v8 - v9;
    if (v8 == v9) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = ((v8 - v9) << 6) - 1;
    }
    unint64_t v12 = *((void *)this + 126);
    unint64_t v13 = *((void *)this + 127) + v12;
    if (v11 != v13) {
      goto LABEL_128;
    }
    if (v12 >= 0x200)
    {
      *((void *)this + 126) = v12 - 512;
      xpc_object_t v14 = v9 + 8;
      uint64_t v15 = *(void *)v9;
      *((void *)this + 123) = v9 + 8;
      if (v8 != *((char **)this + 125))
      {
LABEL_125:
        *(void *)xpc_object_t v8 = v15;
        goto LABEL_126;
      }
      uint64_t v16 = (char *)*((void *)this + 122);
      if (v14 > v16)
      {
        uint64_t v17 = (v14 - v16) >> 3;
        if (v17 >= -1) {
          uint64_t v18 = v17 + 1;
        }
        else {
          uint64_t v18 = v17 + 2;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = -v19;
        size_t v21 = &v14[-8 * v19];
        int64_t v22 = v8 - v14;
        if (v8 != v14)
        {
          memmove(&v14[-8 * v19], v14, v8 - v14);
          xpc_object_t v8 = (char *)*((void *)this + 123);
        }
        xpc_object_t v23 = &v8[8 * v20];
        xpc_object_t v8 = &v21[v22];
        *((void *)this + 124) = &v21[v22];
        *((void *)this + 123) = v23;
        goto LABEL_125;
      }
      unint64_t v40 = (v8 - v16) >> 2;
      if (v8 == v16) {
        unint64_t v40 = 1;
      }
      if (!(v40 >> 61))
      {
        unint64_t v41 = v40 >> 2;
        uint64_t v42 = 8 * v40;
        xpc_object_t v43 = (char *)operator new(8 * v40);
        std::string::pointer v44 = &v43[8 * v41];
        int64_t v46 = v8 - v14;
        BOOL v45 = v8 == v14;
        xpc_object_t v8 = v44;
        if (v45) {
          goto LABEL_123;
        }
        xpc_object_t v8 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v47 = v46 - 8;
        if ((unint64_t)(v46 - 8) >= 0x38)
        {
          int v109 = &v43[8 * v41];
          long long v48 = v109;
          if ((unint64_t)(v109 - v14) >= 0x20)
          {
            uint64_t v110 = (v47 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            long long v48 = &v44[v111];
            v14 += v111;
            v112 = (long long *)(v9 + 24);
            uint64_t v113 = v109 + 16;
            uint64_t v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v115 = *v112;
              *(v113 - 1) = *(v112 - 1);
              *uint64_t v113 = v115;
              v112 += 2;
              v113 += 2;
              v114 -= 4;
            }
            while (v114);
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_123:
              *((void *)this + 122) = v43;
              *((void *)this + 123) = v44;
              *((void *)this + 124) = v8;
              *((void *)this + 125) = &v43[v42];
              if (v16)
              {
                operator delete(v16);
                xpc_object_t v8 = (char *)*((void *)this + 124);
              }
              goto LABEL_125;
            }
          }
        }
        else
        {
          long long v48 = &v43[8 * v41];
        }
        do
        {
          uint64_t v116 = *(void *)v14;
          v14 += 8;
          *(void *)long long v48 = v116;
          v48 += 8;
        }
        while (v48 != v8);
        goto LABEL_123;
      }
LABEL_147:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v138 = v5;
    uint64_t v24 = v10 >> 3;
    xpc_object_t v25 = (char *)*((void *)this + 125);
    uint64_t v26 = (char *)*((void *)this + 122);
    if (v10 >> 3 < (unint64_t)((v25 - v26) >> 3))
    {
      int v27 = operator new(0x1000uLL);
      size_t v28 = v27;
      if (v25 != v8)
      {
        *(void *)xpc_object_t v8 = v27;
        *((void *)this + 124) += 8;
        int v5 = v138;
LABEL_127:
        long long v9 = (char *)*((void *)this + 123);
        unint64_t v13 = *((void *)this + 127) + *((void *)this + 126);
LABEL_128:
        uint64_t v117 = *(void *)&v9[(v13 >> 6) & 0x3FFFFFFFFFFFFF8];
        unint64_t v118 = v13 & 0x1FF;
        unint64_t v119 = 0xAAAAAA0000000000;
        if (v5) {
          unint64_t v119 = 0xAAAAAA0100000000;
        }
        *(void *)(v117 + 8 * v118) = v119 | a2;
        ++*((void *)this + 127);
        return;
      }
      if (v9 == v26)
      {
        unint64_t v84 = (v25 - v9) >> 2;
        if (v8 == v9) {
          unint64_t v84 = 1;
        }
        if (v84 >> 61) {
          goto LABEL_147;
        }
        unint64_t v85 = (v84 + 3) >> 2;
        uint64_t v86 = 8 * v84;
        v87 = (char *)operator new(8 * v84);
        int v49 = &v87[8 * v85];
        v88 = v49;
        if (v8 != v9)
        {
          v88 = &v49[8 * v24];
          v89 = &v87[8 * v85];
          v90 = v9;
          if ((unint64_t)(v10 - 8) < 0x38) {
            goto LABEL_151;
          }
          v91 = &v87[8 * v85];
          v89 = v91;
          v90 = v9;
          if ((unint64_t)(v91 - v9) < 0x20) {
            goto LABEL_151;
          }
          unint64_t v92 = ((unint64_t)(v10 - 8) >> 3) + 1;
          uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
          v89 = &v49[v93];
          v90 = &v9[v93];
          v94 = (long long *)(v9 + 16);
          v95 = v91 + 16;
          uint64_t v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v97 = *v94;
            *(v95 - 1) = *(v94 - 1);
            _OWORD *v95 = v97;
            v94 += 2;
            v95 += 2;
            v96 -= 4;
          }
          while (v96);
          if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_151:
            do
            {
              uint64_t v98 = *(void *)v90;
              v90 += 8;
              *(void *)v89 = v98;
              v89 += 8;
            }
            while (v89 != v88);
          }
        }
        *((void *)this + 122) = v87;
        *((void *)this + 123) = v49;
        *((void *)this + 124) = v88;
        *((void *)this + 125) = &v87[v86];
        if (v9)
        {
          operator delete(v9);
          int v49 = (char *)*((void *)this + 123);
        }
      }
      else
      {
        int v49 = v9;
      }
      *((void *)v49 - 1) = v28;
      v99 = (char *)*((void *)this + 123);
      *((void *)this + 123) = v99 - 8;
      uint64_t v100 = *((void *)v99 - 1);
      *((void *)this + 123) = v99;
      v101 = (char *)*((void *)this + 124);
      int v5 = v138;
      if (v101 != *((char **)this + 125))
      {
LABEL_110:
        *(void *)v101 = v100;
LABEL_126:
        *((void *)this + 124) += 8;
        goto LABEL_127;
      }
      v102 = (char *)*((void *)this + 122);
      if (v99 > v102)
      {
        uint64_t v103 = (v99 - v102) >> 3;
        if (v103 >= -1) {
          uint64_t v104 = v103 + 1;
        }
        else {
          uint64_t v104 = v103 + 2;
        }
        uint64_t v105 = v104 >> 1;
        uint64_t v106 = -v105;
        v107 = &v99[-8 * v105];
        int64_t v108 = v101 - v99;
        if (v101 != v99)
        {
          memmove(&v99[-8 * v105], v99, v101 - v99);
          v99 = (char *)*((void *)this + 123);
        }
        *((void *)this + 124) = &v107[v108];
        *((void *)this + 123) = &v99[8 * v106];
        *(void *)&v107[v108] = v100;
        goto LABEL_126;
      }
      unint64_t v120 = (v101 - v102) >> 2;
      if (v101 == v102) {
        unint64_t v120 = 1;
      }
      if (v120 >> 61) {
        goto LABEL_147;
      }
      unint64_t v121 = v120 >> 2;
      uint64_t v122 = 8 * v120;
      unsigned int v123 = (char *)operator new(8 * v120);
      CFMutableDictionaryRef v124 = &v123[8 * v121];
      int64_t v125 = v101 - v99;
      BOOL v45 = v101 == v99;
      v101 = v124;
      if (!v45)
      {
        v101 = &v124[v125 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v126 = v125 - 8;
        if ((unint64_t)(v125 - 8) < 0x38)
        {
          uint64_t v127 = &v123[8 * v121];
          do
          {
LABEL_142:
            uint64_t v136 = *(void *)v99;
            v99 += 8;
            *(void *)uint64_t v127 = v136;
            v127 += 8;
          }
          while (v127 != v101);
          goto LABEL_143;
        }
        int v128 = &v123[8 * v121];
        uint64_t v127 = v128;
        if ((unint64_t)(v128 - v99) < 0x20) {
          goto LABEL_142;
        }
        uint64_t v129 = (v126 >> 3) + 1;
        uint64_t v130 = 8 * (v129 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v127 = &v124[v130];
        uint64_t v131 = &v99[v130];
        uint64_t v132 = (long long *)(v99 + 16);
        CFTypeRef v133 = v128 + 16;
        uint64_t v134 = v129 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v135 = *v132;
          *(v133 - 1) = *(v132 - 1);
          *CFTypeRef v133 = v135;
          v132 += 2;
          v133 += 2;
          v134 -= 4;
        }
        while (v134);
        v99 = v131;
        if (v129 != (v129 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_142;
        }
      }
LABEL_143:
      *((void *)this + 122) = v123;
      *((void *)this + 123) = v124;
      *((void *)this + 124) = v101;
      *((void *)this + 125) = &v123[v122];
      if (v102)
      {
        operator delete(v102);
        v101 = (char *)*((void *)this + 124);
      }
      goto LABEL_110;
    }
    if (v25 == v26) {
      unint64_t v32 = 1;
    }
    else {
      unint64_t v32 = (v25 - v26) >> 2;
    }
    if (v32 >> 61) {
      goto LABEL_147;
    }
    unsigned int v137 = a2;
    size_t v33 = (char *)operator new(8 * v32);
    xpc_object_t v34 = operator new(0x1000uLL);
    int v35 = &v33[8 * v24];
    xpc_object_t v36 = &v33[8 * v32];
    if (v24 == v32)
    {
      uint64_t v37 = v34;
      int v5 = v138;
      if (v10 < 1)
      {
        if (v8 == v9) {
          unint64_t v61 = 1;
        }
        else {
          unint64_t v61 = v10 >> 2;
        }
        if (v61 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v35 = (char *)operator new(8 * v61);
        xpc_object_t v36 = &v35[8 * v61];
        operator delete(v33);
        xpc_object_t v8 = (char *)*((void *)this + 124);
        long long v9 = (char *)*((void *)this + 123);
        size_t v33 = v35;
      }
      else
      {
        unint64_t v38 = v24 + 2;
        if (v24 >= -1) {
          unint64_t v38 = v24 + 1;
        }
        v35 -= 8 * (v38 >> 1);
      }
      *(void *)int v35 = v37;
      size_t v39 = v35 + 8;
      if (v8 == v9) {
        goto LABEL_73;
      }
    }
    else
    {
      int v5 = v138;
      *(void *)int v35 = v34;
      size_t v39 = v35 + 8;
      if (v8 == v9)
      {
LABEL_73:
        unint64_t v62 = (void *)*((void *)this + 122);
        *((void *)this + 122) = v33;
        *((void *)this + 123) = v35;
        *((void *)this + 124) = v39;
        *((void *)this + 125) = v36;
        a2 = v137;
        if (v62) {
          operator delete(v62);
        }
        goto LABEL_127;
      }
    }
    do
    {
      if (v35 == v33)
      {
        if (v39 >= v36)
        {
          if (v36 == v33) {
            unint64_t v68 = 1;
          }
          else {
            unint64_t v68 = (v36 - v33) >> 2;
          }
          if (v68 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v69 = (char *)operator new(8 * v68);
          uint64_t v70 = v69;
          unint64_t v71 = (v68 + 3) >> 2;
          int v35 = &v69[8 * v71];
          int64_t v72 = v39 - v33;
          BOOL v45 = v39 == v33;
          size_t v39 = v35;
          if (!v45)
          {
            size_t v39 = &v35[v72 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v73 = v72 - 8;
            unsigned int v74 = &v69[8 * v71];
            std::string v75 = v33;
            if (v73 < 0x38) {
              goto LABEL_152;
            }
            uint64_t v76 = 8 * v71;
            unsigned int v74 = &v69[8 * v71];
            std::string v75 = v33;
            if ((unint64_t)(v74 - v33) < 0x20) {
              goto LABEL_152;
            }
            uint64_t v77 = (v73 >> 3) + 1;
            uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
            unsigned int v74 = &v35[v78];
            std::string v75 = &v33[v78];
            v79 = (long long *)(v33 + 16);
            v80 = &v69[v76 + 16];
            uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v82 = *v79;
              *((_OWORD *)v80 - 1) = *(v79 - 1);
              *(_OWORD *)v80 = v82;
              v79 += 2;
              v80 += 32;
              v81 -= 4;
            }
            while (v81);
            if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_152:
              do
              {
                uint64_t v83 = *(void *)v75;
                v75 += 8;
                *(void *)unsigned int v74 = v83;
                v74 += 8;
              }
              while (v74 != v39);
            }
          }
          xpc_object_t v36 = &v69[8 * v68];
          operator delete(v33);
          size_t v33 = v70;
        }
        else
        {
          uint64_t v64 = (v36 - v39) >> 3;
          if (v64 >= -1) {
            uint64_t v65 = v64 + 1;
          }
          else {
            uint64_t v65 = v64 + 2;
          }
          uint64_t v66 = v65 >> 1;
          int v35 = &v33[8 * (v65 >> 1)];
          unsigned int v67 = v33;
          if (v39 != v33)
          {
            memmove(v35, v33, v39 - v33);
            unsigned int v67 = v39;
          }
          size_t v39 = (char *)v67 + 8 * v66;
        }
      }
      uint64_t v63 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v35 - 1) = v63;
      v35 -= 8;
    }
    while (v8 != *((char **)this + 123));
    goto LABEL_73;
  }
  char v29 = a3;
  unint64_t v144 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v145 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, FSModuleICE *))(*(void *)this + 80))(&v144, this);
  unint64_t v30 = v144;
  if (!v144) {
    goto LABEL_64;
  }
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  if (*((char *)this + 1071) < 0) {
    std::string::__init_copy_ctor_external(&v142, *((const std::string::value_type **)this + 131), *((void *)this + 132));
  }
  else {
    std::string v142 = *(std::string *)((char *)this + 1048);
  }
  char v31 = v29;
  uint64_t v50 = *(void *)(v30 + 104);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&buf, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = v142;
  }
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, void))(*(void *)v50 + 24))(&object, v50, &buf, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_52:
      uint64_t v51 = (std::__shared_weak_count *)*((void *)this + 16);
      if (!v51) {
LABEL_146:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_56;
    }
  }
  else if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(v142.__r_.__value_.__l.__data_);
  uint64_t v51 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v51) {
    goto LABEL_146;
  }
LABEL_56:
  std::string::size_type v52 = *((void *)this + 15);
  CFTypeID v53 = std::__shared_weak_count::lock(v51);
  if (!v53) {
    goto LABEL_146;
  }
  CFMutableDictionaryRef v54 = v53;
  p_shared_weak_owners = &v53->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v53->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v54);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  buf.__r_.__value_.__l.__size_ = v52;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v54;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_object_t v56 = object;
  dispatch_object_t v140 = object;
  if (object)
  {
    dispatch_retain(object);
    std::string v57 = object;
  }
  else
  {
    std::string v57 = 0;
  }
  LOBYTE(v141) = v31;
  HIDWORD(v141) = a2;
  unint64_t v58 = *((void *)this + 17);
  xpc_object_t v59 = operator new(0x28uLL);
  *xpc_object_t v59 = this;
  v59[1] = v52;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
  v59[2] = v54;
  v59[3] = v56;
  dispatch_object_t v140 = 0;
  v59[4] = v141;
  dispatch_group_notify_f(v57, v58, v59, (dispatch_function_t)dispatch::detail::group_notify<FSModuleICE::requestFSSync_sync(unsigned int,BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,FSModuleICE::requestFSSync_sync(unsigned int,BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v54);
  if (object) {
    dispatch_release(object);
  }
LABEL_64:
  xpc_object_t v60 = (std::__shared_weak_count *)v145;
  if (v145 && !atomic_fetch_add((atomic_ullong *volatile)(v145 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
}

void sub_1C59D3DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,dispatch_object_t object,char a27)
{
  if (a25 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_1C59D3E68()
{
  if (v0) {
    JUMPOUT(0x1C59D3E74);
  }
  JUMPOUT(0x1C59D3E7CLL);
}

void ___ZN11FSModuleICE21restartSyncTimer_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    long long v9 = v4;
    if (v4)
    {
      int v5 = v4;
      if (!a1[5]) {
        goto LABEL_9;
      }
      uint64_t v6 = *(NSObject **)(v3 + 88);
      if (*(unsigned char *)(v3 + 960))
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I scheduled filesystem flush", v7, 2u);
        }
        FSModuleICE::requestFSSync_sync((FSModuleICE *)v3, 4u, 0);
LABEL_9:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_12:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        goto LABEL_9;
      }
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "Skipping scheduled FS sync as baseband is not ready", v7, 2u);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_12;
      }
    }
  }
}

void sub_1C59D3FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ABMServerInternal::handleClientError_sync(void *a1, xpc_object_t *a2, xpc::object *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  xpc_object_t v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    unint64_t v38 = 0;
    size_t v39 = 0;
    xpc_object_t v8 = a1 + 19;
    uint64_t v7 = (void *)a1[19];
    if (!v7) {
      goto LABEL_15;
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    unint64_t v38 = 0;
    size_t v39 = 0;
    xpc_object_t v8 = a1 + 19;
    uint64_t v7 = (void *)a1[19];
    if (!v7)
    {
LABEL_15:
      unint64_t v13 = 0;
      xpc_object_t v14 = 0;
      goto LABEL_16;
    }
  }
  long long v9 = v8;
  do
  {
    unint64_t v10 = v7[4];
    BOOL v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6) {
      unint64_t v12 = v7;
    }
    else {
      unint64_t v12 = v7 + 1;
    }
    if (v11) {
      long long v9 = v7;
    }
    uint64_t v7 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v8 || (unint64_t)v6 < v9[4]) {
    goto LABEL_15;
  }
  xpc_object_t v14 = (long long *)v9[5];
  unint64_t v13 = (std::__shared_weak_count *)v9[6];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v38 = v14;
  size_t v39 = v13;
LABEL_16:
  xpc_release(v6);
  if (!v14) {
    goto LABEL_62;
  }
  memset(__p, 170, 24);
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v14, *((void *)v14 + 1));
  }
  else
  {
    long long v15 = *v14;
    v40.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v15;
  }
  uint64_t v16 = std::string::insert(&v40, 0, "Client '", 8uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v41, "'", 1uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      uint64_t v20 = *(void *)a3;
      if (*(void *)a3 != MEMORY[0x1E4F14528]) {
        goto LABEL_23;
      }
LABEL_36:
      uint64_t v26 = a1[14];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          int v27 = (void **)__p[0];
        }
        LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C59C6000, v26, OS_LOG_TYPE_DEFAULT, "#I %s disappeared", (uint8_t *)&v41, 0xCu);
      }
      size_t v28 = (void *)a1[19];
      if (v28)
      {
        xpc_object_t v29 = *a2;
        uint64_t v30 = (uint64_t)v8;
        do
        {
          unint64_t v31 = v28[4];
          BOOL v32 = v31 >= (unint64_t)v29;
          if (v31 >= (unint64_t)v29) {
            size_t v33 = v28;
          }
          else {
            size_t v33 = v28 + 1;
          }
          if (v32) {
            uint64_t v30 = (uint64_t)v28;
          }
          size_t v28 = (void *)*v33;
        }
        while (*v33);
        if ((void *)v30 != v8 && (unint64_t)v29 >= *(void *)(v30 + 32)) {
          std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(a1 + 18, v30);
        }
      }
      goto LABEL_60;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  uint64_t v20 = *(void *)a3;
  if (*(void *)a3 == MEMORY[0x1E4F14528]) {
    goto LABEL_36;
  }
LABEL_23:
  if (v20 == MEMORY[0x1E4F14520])
  {
    int64_t v22 = a1[14];
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_60;
    }
    xpc_object_t v34 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      xpc_object_t v34 = (void **)__p[0];
    }
    LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
    int v35 = "#D %s connection interrupted";
  }
  else
  {
    uint64_t v21 = MEMORY[0x1E4F14550];
    int64_t v22 = a1[14];
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
    if (v20 != v21)
    {
      if (v23)
      {
        xpc::object::to_string((uint64_t *)&v41, a3);
        uint64_t v24 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          uint64_t v24 = (void **)__p[0];
        }
        xpc_object_t v25 = (v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v41
            : (std::string *)v41.__r_.__value_.__r.__words[0];
        LODWORD(v40.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        WORD2(v40.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
        _os_log_debug_impl(&dword_1C59C6000, v22, OS_LOG_TYPE_DEBUG, "#D %s %s", (uint8_t *)&v40, 0x16u);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v41.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_62;
          }
          goto LABEL_61;
        }
      }
LABEL_60:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    if (!v23) {
      goto LABEL_60;
    }
    xpc_object_t v36 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      xpc_object_t v36 = (void **)__p[0];
    }
    LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    int v35 = "#D %s will be terminated";
  }
  _os_log_debug_impl(&dword_1C59C6000, v22, OS_LOG_TYPE_DEBUG, v35, (uint8_t *)&v41, 0xCu);
  if (SHIBYTE(__p[2]) < 0) {
LABEL_61:
  }
    operator delete(__p[0]);
LABEL_62:
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1C59D4438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1C59D4494(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void FSModuleICE::singleFlushOperation_sync(FSModuleICE *this, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "false";
    int v6 = *((_DWORD *)this + 256);
    if (a2) {
      int v5 = "true";
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v6;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v5;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Requesting flush(%u) forShutdown=%s", (uint8_t *)&buf, 0x12u);
  }
  if (BBUFSServerStart())
  {
    if (BBUFSServerSetConfig())
    {
      int v7 = BBUFSServerFlush();
      goto LABEL_11;
    }
  }
  else
  {
    xpc_object_t v8 = *((void *)this + 11);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "failed starting file server", (uint8_t *)&buf, 2u);
      long long v9 = *((void *)this + 11);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_10;
      }
LABEL_43:
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "failed to set shutdown flag for NVM sync with BBU", (uint8_t *)&buf, 2u);
      goto LABEL_10;
    }
  }
  long long v9 = *((void *)this + 11);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    goto LABEL_43;
  }
LABEL_10:
  int v7 = 0;
LABEL_11:
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, FSModuleICE *))(*(void *)this + 80))(&v20, this);
  unint64_t v10 = v20;
  if (!v20) {
    goto LABEL_20;
  }
  if (*((char *)this + 1071) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 131), *((void *)this + 132));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 1048);
  }
  uint64_t v11 = *(void *)(v10 + 104);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = __p;
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_20:
      unint64_t v12 = *((void *)this + 11);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  unint64_t v12 = *((void *)this + 11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
LABEL_21:
    int v13 = *((unsigned __int8 *)this + 520);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v7;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v13;
    _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I Flush completed with success: %u, running: %u", (uint8_t *)&buf, 0xEu);
  }
LABEL_22:
  *((unsigned char *)this + 1152) = *((unsigned char *)this + 552);
  if (v7) {
    *((unsigned char *)this + 964) = 0;
  }
  FSModuleICE::submitMetric_sync(this, v7);
  if (*((unsigned char *)this + 520))
  {
    if (v7)
    {
      BBUFSServerStop();
      unsigned int v14 = *((_DWORD *)this + 257) + 1;
      *((_DWORD *)this + 257) = v14;
      long long v15 = *((void *)this + 11);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *((_DWORD *)this + 256);
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v14;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v16;
        _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I Checking response fSyncsCompleted=%u fSyncsRequested=%u", (uint8_t *)&buf, 0xEu);
        unsigned int v14 = *((_DWORD *)this + 257);
      }
      if (v14 >= *((_DWORD *)this + 256)) {
        FSModuleICE::execPendingResponses_sync(this, 1);
      }
    }
    else if (*((unsigned char *)this + 960))
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_1C5BC7C40;
      strcpy(buf.__r_.__value_.__l.__data_, "filesystem flush operation failed -- check ARI and BB state --");
      FSModuleICE::resetBaseband_sync(this, (uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    long long v17 = *((void *)this + 11);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I file server has stopped", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v18 = (std::__shared_weak_count *)v21;
  if (v21)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1C59D4950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ServiceCtrl::handleCommand(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v9 = a1;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    std::string __p = *(std::string *)a2;
    int v7 = *a3;
    xpc_object_t object = v7;
    if (v7) {
      goto LABEL_3;
    }
LABEL_6:
    xpc_object_t object = xpc_null_create();
    xpc_object_t v8 = *a4;
    if (!*a4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  int v7 = *a3;
  xpc_object_t object = v7;
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  xpc_retain(v7);
  xpc_object_t v8 = *a4;
  if (*a4) {
LABEL_7:
  }
    xpc_object_t v8 = _Block_copy(v8);
LABEL_8:
  aBlock = v8;
  ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>((uint64_t *)(a1 + 72), (uint64_t)&v9);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void Service::runCommand(uint64_t a1, uint64_t a2, xpc_object_t *a3, const void **a4)
{
  int v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5) {
    return;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v5);
  v16[2] = v9;
  if (!v9) {
    return;
  }
  unint64_t v10 = v9;
  uint64_t v11 = *(void **)(a1 + 8);
  v16[1] = v11;
  if (v11)
  {
    xpc_object_t v12 = *a3;
    v16[0] = v12;
    if (v12)
    {
      xpc_retain(v12);
      int v13 = *a4;
      if (*a4)
      {
LABEL_6:
        unsigned int v14 = _Block_copy(v13);
LABEL_9:
        long long v15 = v14;
        ServiceManager::runCommand((uint64_t)v11, a2, v16, &v15);
        if (v14) {
          _Block_release(v14);
        }
        xpc_release(v12);
        v16[0] = 0;
        goto LABEL_12;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      v16[0] = v12;
      int v13 = *a4;
      if (*a4) {
        goto LABEL_6;
      }
    }
    unsigned int v14 = 0;
    goto LABEL_9;
  }
LABEL_12:
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1C59D4C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v12) {
    _Block_release(v12);
  }
  xpc_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(uint64_t a1, xpc_object_t object, void **a3)
{
  xpc_object_t objecta = object;
  if (!object)
  {
    xpc_object_t objecta = xpc_null_create();
    int v5 = *a3;
    if (!*a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(object);
  int v5 = *a3;
  if (*a3) {
LABEL_5:
  }
    int v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  (*(void (**)(uint64_t, xpc_object_t *, void **))(a1 + 16))(a1, &objecta, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(objecta);
}

void sub_1C59D4CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ServiceManager::runCommand(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v6 = *(void *)(a1 + 168);
  int v7 = *a3;
  xpc_object_t object = v7;
  if (!v7)
  {
    xpc_object_t object = xpc_null_create();
    xpc_object_t v8 = *a4;
    if (!*a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v7);
  xpc_object_t v8 = *a4;
  if (*a4) {
LABEL_5:
  }
    xpc_object_t v8 = _Block_copy(v8);
LABEL_6:
  aBlock = v8;
  ServiceCtrl::handleCommand(v6, a2, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
}

void sub_1C59D4DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v5;
  v29[8] = v5;
  v29[5] = v5;
  v29[6] = v5;
  v29[3] = v5;
  v29[4] = v5;
  v29[1] = v5;
  v29[2] = v5;
  v29[0] = v5;
  long long v27 = v5;
  long long v28 = v5;
  long long v25 = v5;
  *(_OWORD *)std::string __p = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v22 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  uint64_t v6 = (void *)std::ostream::operator<<();
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  size_t v8 = strlen(a3);
  uint64_t v9 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a3, v8);
  memset(__dst, 170, sizeof(__dst));
  if ((BYTE8(v28) & 0x10) != 0)
  {
    uint64_t v15 = v28;
    if ((unint64_t)v28 < *((void *)&v25 + 1))
    {
      *(void *)&long long v28 = *((void *)&v25 + 1);
      uint64_t v15 = *((void *)&v25 + 1);
    }
    int v16 = (const void *)v25;
    size_t v13 = v15 - v25;
    if ((unint64_t)(v15 - v25) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_22;
    }
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      size_t v13 = 0;
      HIBYTE(__dst[2]) = 0;
      unsigned int v14 = __dst;
      goto LABEL_14;
    }
    int v16 = (const void *)*((void *)&v23 + 1);
    size_t v13 = *((void *)&v24 + 1) - *((void *)&v23 + 1);
    if (*((void *)&v24 + 1) - *((void *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_22:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    unsigned int v14 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)v13;
    __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v14;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v13;
  unsigned int v14 = __dst;
  if (v13) {
LABEL_13:
  }
    uint64_t v9 = (abm::debug *)memmove(v14, v16, v13);
LABEL_14:
  *((unsigned char *)v14 + v13) = 0;
  long long v19 = __dst;
  if (SHIBYTE(__dst[2]) < 0) {
    long long v19 = (void **)__dst[0];
  }
  abm::debug::handleDebugPrintBBUHelper(v9, v10, v11, v12, v19);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v22 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v22 + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v22 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8795140](v29);
}

void sub_1C59D5074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<RadioModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  size_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210A000;
  block[5] = v5;
  xpc_object_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  unint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3(void *a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4C880];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4C880]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v21 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v21 = v4 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (std::string *)operator new(v21 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_53:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        long long v23 = (char *)operator new(0x28uLL);
        strcpy(v23, " rejected; ABM is shutting down ");
        long long v24 = std::string::append(&__dst, v23, 0x20uLL);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        __p[2] = (void *)v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        operator delete(v23);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          uint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
LABEL_55:
            uint64_t v28 = a1[5];
            long long v27 = a1 + 5;
            if (!v28)
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            unint64_t v31 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              unint64_t v31 = __p[1];
            }
            if (v31)
            {
              xpc_object_t v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (xpc_object_t v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v32) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v32);
                  xpc_object_t v33 = v32;
                }
                else
                {
                  xpc_object_t v33 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v33 = xpc_null_create();
                xpc_object_t v32 = 0;
              }
              xpc_release(v32);
              xpc_object_t v34 = xpc_null_create();
              int v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v35);
              xpc_release(v34);
              if (SHIBYTE(__p[2]) >= 0) {
                xpc_object_t v36 = __p;
              }
              else {
                xpc_object_t v36 = (void **)__p[0];
              }
              xpc_object_t v37 = xpc_string_create((const char *)v36);
              if (!v37) {
                xpc_object_t v37 = xpc_null_create();
              }
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x1E4F4C240], v37);
              xpc_object_t v38 = xpc_null_create();
              xpc_release(v37);
              xpc_release(v38);
            }
            LODWORD(v45) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v27, (unsigned int *)&v45, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          uint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_55;
          }
        }
        xpc_object_t v29 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v29 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_1C59C6000, v26, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v30 = a1[5];
        long long v27 = a1 + 5;
        if (!v30) {
          goto LABEL_79;
        }
        goto LABEL_61;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_53;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  aBlock[3] = &__block_descriptor_tmp_10_0;
  uint64_t v8 = a1[6];
  int v7 = (std::__shared_weak_count *)a1[7];
  void aBlock[4] = v2;
  aBlock[5] = v8;
  long long v48 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)a1[5];
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  int v49 = v9;
  unint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v2[17];
  if (v11) {
    dispatch_retain(v11);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  int64_t v46 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v12);
    long long v14 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v15 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    int v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_1EBBDCA08;
  }
  uint64_t v17 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v41 = v13;
  uint64_t v42 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v43, v13);
  unint64_t v45 = 0;
  int64_t v46 = 0;
  if (v44)
  {
    int64_t v46 = std::__shared_weak_count::lock(v44);
    if (v46) {
      unint64_t v45 = v43;
    }
    if (v44) {
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v45;
    if (v45) {
      goto LABEL_30;
    }
  }
  else
  {
    unint64_t v18 = v45;
    if (v45)
    {
LABEL_30:
      long long v19 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0]) {
        long long v19 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      }
      size_t v39 = v19;
      dispatch_object_t object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_) {
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v18 + 96))(v18, &v39);
      if (object) {
        dispatch_release(object);
      }
      if (v39) {
        _Block_release(v39);
      }
    }
  }
  unint64_t v20 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
}

void sub_1C59D5888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void TraceManager::runOnHelper_sync(void *a1, const char *a2, uint64_t a3, unsigned int a4, char a5, xpc_object_t *a6, NSObject **a7, void **a8)
{
  int v13 = (int)a2;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if ((a5 & 1) == 0
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v15)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v16))
  {
    return;
  }
  uint64_t v17 = a1[11];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = abm::helper::asString();
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = a3;
    _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I Running helper action: %s:%s", buf, 0x16u);
  }
  memset(buf, 170, 16);
  GetABMLogServer(&v54);
  abm::HelperClient::create();
  unint64_t v18 = v55;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = MEMORY[0x1C8795EB0](*a6);
  uint64_t v20 = MEMORY[0x1E4F14590];
  if (v19 != MEMORY[0x1E4F14590])
  {
    xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
    if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v21) == v20)
      {
        xpc_retain(v21);
        xpc_object_t v22 = v21;
      }
      else
      {
        xpc_object_t v22 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v21 = 0;
    }
    xpc_release(v21);
    xpc_object_t v23 = xpc_null_create();
    xpc_object_t v24 = *a6;
    *a6 = v22;
    xpc_release(v24);
    xpc_release(v23);
  }
  if (a4)
  {
    xpc_object_t v25 = xpc_int64_create(a4);
    if (!v25) {
      xpc_object_t v25 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a6, (const char *)*MEMORY[0x1E4F470A0], v25);
    xpc_object_t v26 = xpc_null_create();
    xpc_release(v25);
    xpc_release(v26);
  }
  if (!*a8 || !a8[1])
  {
    uint64_t v28 = (std::__shared_weak_count *)a1[16];
    if (!v28 || (v29 = a1[15], (uint64_t v30 = std::__shared_weak_count::lock(v28)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unint64_t v31 = v30;
    p_shared_weak_owners = &v30->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v31);
    }
    unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12TraceManager16runOnHelper_syncEN3abm6helper6TaskIDEPKcjbN3xpc4dictEN8dispatch13group_sessionENS7_8callbackIU13block_pointerFvN12TelephonyXPC6ResultES6_EEE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_100_0;
    void aBlock[4] = a1;
    aBlock[5] = v29;
    unint64_t v43 = v31;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v33 = *a7;
    dispatch_group_t group = v33;
    if (v33)
    {
      dispatch_retain(v33);
      dispatch_group_enter(group);
    }
    uint64_t v45 = *(void *)buf;
    int64_t v46 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    }
    int v48 = v13;
    uint64_t v47 = a3;
    xpc_object_t v34 = _Block_copy(aBlock);
    int v35 = a1[17];
    if (v35) {
      dispatch_retain(v35);
    }
    unint64_t v49 = (unint64_t)v34;
    unint64_t v50 = (unint64_t)v35;
    xpc_object_t v41 = *a6;
    if (*a6)
    {
      xpc_retain(*a6);
      if (v34) {
        goto LABEL_39;
      }
    }
    else
    {
      xpc_object_t v41 = xpc_null_create();
      if (v34)
      {
LABEL_39:
        size_t v39 = _Block_copy(v34);
        dispatch_object_t object = v35;
        if (!v35) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
    }
    size_t v39 = 0;
    dispatch_object_t object = v35;
    if (!v35)
    {
LABEL_41:
      abm::HelperClient::perform();
      if (object) {
        dispatch_release(object);
      }
      if (v39) {
        _Block_release(v39);
      }
      xpc_release(v41);
      if (v35) {
        dispatch_release(v35);
      }
      if (v34) {
        _Block_release(v34);
      }
      xpc_object_t v36 = v46;
      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v43) {
        std::__shared_weak_count::__release_weak(v43);
      }
      std::__shared_weak_count::__release_weak(v31);
      xpc_object_t v37 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]) {
        goto LABEL_71;
      }
      return;
    }
LABEL_40:
    dispatch_retain(v35);
    goto LABEL_41;
  }
  xpc_object_t v53 = *a6;
  if (!v53)
  {
    xpc_object_t v53 = xpc_null_create();
    long long v27 = *a8;
    if (!*a8) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  xpc_retain(v53);
  long long v27 = *a8;
  if (*a8) {
LABEL_63:
  }
    long long v27 = _Block_copy(v27);
LABEL_64:
  xpc_object_t v38 = a8[1];
  uint64_t v51 = v27;
  dispatch_object_t v52 = v38;
  if (v38) {
    dispatch_retain(v38);
  }
  abm::HelperClient::perform();
  if (v52) {
    dispatch_release(v52);
  }
  if (v51) {
    _Block_release(v51);
  }
  xpc_release(v53);
  xpc_object_t v53 = 0;
  xpc_object_t v37 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
LABEL_71:
    if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1C59D5F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, dispatch_group_t group, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C59D6090(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    std::string::size_type v5 = *(void **)(a2 + 48);
    *(void *)(a1 + 48) = v5;
    if (v5) {
      return xpc_retain(v5);
    }
  }
  else
  {
    *(void *)(a1 + 40) = xpc_null_create();
    std::string::size_type v5 = *(void **)(a2 + 48);
    *(void *)(a1 + 48) = v5;
    if (v5) {
      return xpc_retain(v5);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void ___ZN12TraceManager20initTraceHelper_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      std::string::size_type v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      int v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Wireless helper server has started", buf, 2u);
      }
      uint64_t v8 = (const char *)*MEMORY[0x1E4F4CAE8];
      int v9 = *(char *)(v3 + 215);
      if (v9 >= 0) {
        size_t v10 = *(unsigned __int8 *)(v3 + 215);
      }
      else {
        size_t v10 = *(void *)(v3 + 200);
      }
      if (v10 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
        && (v9 >= 0 ? (uint64_t v11 = (const void *)(v3 + 192)) : (uint64_t v11 = *(const void **)(v3 + 192)),
            !memcmp(v11, v8, v10)
         && (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], v12)
          || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v14)
          || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v15))))
      {
        xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
        if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v16) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v16);
            xpc_object_t v17 = v16;
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
          xpc_object_t v16 = 0;
        }
        xpc_release(v16);
        xpc_object_t v18 = xpc_string_create(v8);
        if (!v18) {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F4C688], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        xpc_object_t object = v17;
        if (v17) {
          xpc_retain(v17);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        uint64_t v20 = *MEMORY[0x1E4F47138];
        v21[1] = 0;
        xpc_object_t v22 = 0;
        v21[0] = 0;
        TraceManager::runOnHelper_sync((void *)v3, (const char *)9, v20, 0x1388u, 0, &object, &v22, v21);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v17);
      }
      else
      {
        int v13 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I Skipping trace start", buf, 2u);
        }
      }
    }
  }
}

void sub_1C59D63F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb5_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  size_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetWCI2Mode_sync(v4, &v6, *((_DWORD *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  std::string::size_type v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C59D6548(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  std::string::size_type v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = 0;
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

xpc_object_t __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  xpc_object_t result = xpc_null_create();
  *(void *)(a2 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  a1[2].n128_u32[2] = a2[2].n128_u32[2];
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

__n128 __Block_byref_object_copy__3(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

__n128 __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__6(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void AntennaModule::setProperty_sync(AntennaModule *this, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x1C8795EB0](*a2);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 != MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = *((void *)this + 11);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "Failed to get input!", (uint8_t *)&buf, 2u);
    }
    return;
  }
  memset(&buf, 170, sizeof(buf));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C878]);
  v111.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&buf, (xpc *)&v111, (const object *)"", v8);
  xpc_release(v111.__r_.__value_.__l.__data_);
  std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
  }
  if (!size || MEMORY[0x1C8795EB0](*a2) != v5) {
    goto LABEL_73;
  }
  size_t v10 = (const void *)*MEMORY[0x1E4F4CAF8];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4CAF8]);
  size_t v12 = v11;
  std::string::size_type v13 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v11 != -1)
    {
      std::string::size_type v14 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v11) {
        size_t v16 = v11;
      }
      else {
        size_t v16 = buf.__r_.__value_.__l.__size_;
      }
      if (memcmp(buf.__r_.__value_.__l.__data_, v10, v16)) {
        goto LABEL_27;
      }
      goto LABEL_23;
    }
LABEL_212:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 == -1) {
    goto LABEL_212;
  }
  std::string::size_type v14 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (HIBYTE(buf.__r_.__value_.__r.__words[2]) >= v11) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  if (memcmp(&buf, v10, v15)) {
    goto LABEL_27;
  }
LABEL_23:
  if (v14 == v12)
  {
    xdict.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    std::string::size_type v17 = *MEMORY[0x1E4F4C628];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v17;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &xdict);
    if (MEMORY[0x1C8795EB0](xdict.__r_.__value_.__r.__words[0]) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      xpc_object_t v18 = xpc_dictionary_get_value(xdict.__r_.__value_.__l.__data_, (const char *)*MEMORY[0x1E4F4D290]);
      xpc_object_t object = v18;
      if (v18) {
        xpc_retain(v18);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v19);
      xpc_release(object);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v110, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      }
      else {
        std::string v110 = v111;
      }
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v110);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    xpc_release(xdict.__r_.__value_.__l.__data_);
    goto LABEL_73;
  }
LABEL_27:
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C508]);
  std::string::size_type v21 = v20;
  if ((v13 & 0x80) == 0)
  {
    if (v20 != -1)
    {
      p_std::string buf = &buf;
      std::string::size_type v23 = v13;
      goto LABEL_32;
    }
LABEL_213:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v20 == -1) {
    goto LABEL_213;
  }
  std::string::size_type v23 = buf.__r_.__value_.__l.__size_;
  p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_32:
  if (v23 >= v21) {
    size_t v24 = v21;
  }
  else {
    size_t v24 = v23;
  }
  if (!memcmp(p_buf, (const void *)*MEMORY[0x1E4F4C508], v24) && v23 == v21)
  {
    memset(&v111, 170, sizeof(v111));
    xpc_object_t v25 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C628]);
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&xdict, (const object *)"", v26);
    xpc_release(xdict.__r_.__value_.__l.__data_);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v109, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v109 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v109);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    {
      xpc_object_t v38 = (void *)v109.__r_.__value_.__r.__words[0];
LABEL_61:
      operator delete(v38);
    }
LABEL_62:
    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_63;
  }
  size_t v27 = strlen((const char *)*MEMORY[0x1E4F4C710]);
  std::string::size_type v28 = v27;
  if ((v13 & 0x80) == 0)
  {
    if (v27 != -1)
    {
      uint64_t v29 = &buf;
      std::string::size_type v30 = v13;
      goto LABEL_44;
    }
LABEL_214:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 == -1) {
    goto LABEL_214;
  }
  std::string::size_type v30 = buf.__r_.__value_.__l.__size_;
  uint64_t v29 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_44:
  if (v30 >= v28) {
    size_t v31 = v28;
  }
  else {
    size_t v31 = v30;
  }
  if (!memcmp(v29, (const void *)*MEMORY[0x1E4F4C710], v31) && v30 == v28)
  {
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    std::string::size_type v32 = *MEMORY[0x1E4F4C628];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v32;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C8795EB0](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      std::string::size_type v33 = *MEMORY[0x1E4F4D0C8];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v33;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&v108, (const object *)"", v34);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v107, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      }
      else {
        std::string v107 = v111;
      }
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v107);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
LABEL_143:
    xpc_release(object);
    goto LABEL_73;
  }
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4C868]);
  std::string::size_type v36 = v35;
  if ((v13 & 0x80) == 0)
  {
    if (v35 != -1)
    {
      xpc_object_t v37 = &buf;
      goto LABEL_78;
    }
LABEL_215:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v35 == -1) {
    goto LABEL_215;
  }
  std::string::size_type v13 = buf.__r_.__value_.__l.__size_;
  xpc_object_t v37 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_78:
  if (v13 >= v36) {
    size_t v39 = v36;
  }
  else {
    size_t v39 = v13;
  }
  if (!memcmp(v37, (const void *)*MEMORY[0x1E4F4C868], v39) && v13 == v36)
  {
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    std::string::size_type v40 = *MEMORY[0x1E4F4C628];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v40;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C8795EB0](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      std::string::size_type v41 = *MEMORY[0x1E4F4D140];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v41;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&v108, (const object *)"", v42);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v106, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      }
      else {
        std::string v106 = v111;
      }
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v106);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v106.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_143;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CFA8]))
  {
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    std::string::size_type v43 = *MEMORY[0x1E4F4C628];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v43;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C8795EB0](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      std::string::size_type v44 = *MEMORY[0x1E4F4D270];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v44;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&v108, (const object *)"", v45);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v105, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      }
      else {
        std::string v105 = v111;
      }
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v105);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_143;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CFD0]))
  {
    memset(&v111, 170, sizeof(v111));
    int64_t v46 = (char *)*MEMORY[0x1E4F4C308];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v47);
    xpc_release(object);
    memset(&xdict, 170, sizeof(xdict));
    int v48 = (char *)*MEMORY[0x1E4F4C4F0];
    xpc_object_t object = a2;
    v102 = v48;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
    xpc::dyn_cast_or_default((uint64_t *)&xdict, (xpc *)&v108, (const object *)"", v49);
    xpc_release(v108);
    std::string::basic_string[abi:ne180100]<0>(&object, v46);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v100, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v100 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&object, (uint64_t)&v100);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v100.__r_.__value_.__l.__data_);
    }
    if (v103 < 0) {
      operator delete(object);
    }
    std::string::basic_string[abi:ne180100]<0>(&object, v48);
    if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v99, xdict.__r_.__value_.__l.__data_, xdict.__r_.__value_.__l.__size_);
    }
    else {
      std::string v99 = xdict;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&object, (uint64_t)&v99);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v99.__r_.__value_.__l.__data_);
      if ((v103 & 0x80000000) == 0)
      {
LABEL_128:
        if ((SHIBYTE(xdict.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_132;
      }
    }
    else if ((v103 & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
    operator delete(object);
    if ((SHIBYTE(xdict.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
LABEL_132:
    xpc_object_t v38 = (void *)xdict.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C808]))
  {
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v50 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v50;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v51);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v98, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v98 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v98);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    {
      xpc_object_t v38 = (void *)v98.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CFA0]))
  {
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v52 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v52;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v53);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v97, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v97 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v97);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      xpc_object_t v38 = (void *)v97.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CF90]))
  {
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v54 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v54;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v55);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v96, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v96 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v96);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    {
      xpc_object_t v38 = (void *)v96.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C810]))
  {
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v56 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v56;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v57);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v95, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v95 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v95);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    {
      xpc_object_t v38 = (void *)v95.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4D018]))
  {
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v58 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v58;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v59);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v94, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v94 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v94);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    char v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v63 = &v111;
    }
    else {
      uint64_t v63 = (std::string *)v111.__r_.__value_.__r.__words[0];
    }
    size_t v64 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
    if (strncasecmp((const char *)v63, (const char *)*MEMORY[0x1E4F4D2C8], v64))
    {
      uint64_t v65 = (const char *)*MEMORY[0x1E4F4D278];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E4F4D278]);
      xpc_object_t object = a2;
      v102 = v65;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      int v66 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v66);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      unsigned int v67 = (const char *)*MEMORY[0x1E4F4D230];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E4F4D230]);
      xpc_object_t object = a2;
      v102 = v67;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      int v68 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v68);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      uint64_t v69 = (const char *)*MEMORY[0x1E4F4D080];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E4F4D080]);
      xpc_object_t object = a2;
      v102 = v69;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      int v70 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v70);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      unint64_t v71 = (const char *)*MEMORY[0x1E4F4D078];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E4F4D078]);
      xpc_object_t object = a2;
      v102 = v71;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      int v72 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v72);
      xpc_release(v108);
      goto LABEL_187;
    }
  }
  else
  {
    if (std::string::compare(&buf, "kSetWorkoutInfo"))
    {
      if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C108]))
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v92, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string v92 = buf;
        }
        AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v92);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        std::string::size_type v79 = *MEMORY[0x1E4F4C628];
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v111.__r_.__value_.__l.__size_ = v79;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&v111, &xdict);
        xpc_object_t v80 = xpc_null_create();
        uint64_t v81 = (void *)xdict.__r_.__value_.__r.__words[0];
        xpc_object_t object = (xpc_object_t)xdict.__r_.__value_.__r.__words[0];
        if (xdict.__r_.__value_.__r.__words[0] && MEMORY[0x1C8795EB0](xdict.__r_.__value_.__r.__words[0]) == v5) {
          xpc_retain(v81);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        if (MEMORY[0x1C8795EB0]() != v5) {
          xpc::dict::operator=(&object, v80);
        }
        xpc_release(v80);
        xpc_release(xdict.__r_.__value_.__l.__data_);
        std::string::size_type v82 = *MEMORY[0x1E4F4CCB0];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E4F4CCB0]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v82;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&v108, (const object *)"", v83);
        AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, (uint64_t)__p);
        if (v91 < 0) {
          operator delete(__p[0]);
        }
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        std::string::size_type v84 = *MEMORY[0x1E4F4C460];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E4F4C460]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v84;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        unsigned int v85 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v85);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        std::string::size_type v86 = *MEMORY[0x1E4F4C620];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E4F4C620]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v86;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        unsigned int v87 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v87);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        std::string::size_type v88 = *MEMORY[0x1E4F4C290];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E4F4C290]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v88;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        unsigned int v89 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v89);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        xpc_release(object);
      }
      goto LABEL_73;
    }
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v60 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v60;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v61);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v93, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v93 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v93);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    char v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v73 = &v111;
    }
    else {
      unint64_t v73 = (std::string *)v111.__r_.__value_.__r.__words[0];
    }
    size_t v74 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
    if (strncasecmp((const char *)v73, (const char *)*MEMORY[0x1E4F4D2C8], v74))
    {
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutType");
      xpc_object_t object = a2;
      v102 = "kKeyWorkoutType";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      unsigned int v75 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v75);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutState");
      xpc_object_t object = a2;
      v102 = "kKeyWorkoutState";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      unsigned int v76 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v76);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutLocation");
      xpc_object_t object = a2;
      v102 = "kKeyWorkoutLocation";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      unsigned int v77 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v77);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeySwimLocation");
      xpc_object_t object = a2;
      v102 = "kKeySwimLocation";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      unsigned int v78 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v78);
      xpc_release(v108);
LABEL_187:
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      char v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    }
  }
  if (v62 < 0) {
LABEL_63:
  }
    operator delete(v111.__r_.__value_.__l.__data_);
LABEL_73:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1C59D7928(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0)
  {
    operator delete(*(void **)(v1 - 112));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void antenna::Service::Internal::antennaSetProperty(antenna::Service::Internal *this, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4) {
LABEL_12:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4) {
      goto LABEL_12;
    }
  }
  uint64_t v5 = *((void *)this + 9);
  xpc_object_t v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    goto LABEL_12;
  }
  int v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = this;
  v8[1] = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    v8[1] = xpc_null_create();
  }
  int v9 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>(antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v3);
}

void ctu::cf::update<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  if (cf) {
    CFRetain(cf);
  }
  xpc_object_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    xpc_object_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  int v7 = *v6;
  if (cf && v7)
  {
    CFDictionarySetValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C59D817C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(AntennaModule ***a1)
{
  uint64_t v2 = *a1;
  xpc_object_t v3 = **a1;
  uint64_t v4 = (xpc_object_t *)(*a1 + 1);
  uint64_t v5 = 3760250880;
  if (MEMORY[0x1C8795EB0](*v4) == MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = (antenna::Service::Internal **)*((void *)v3 + 22);
    if (v6)
    {
      if (*v6) {
        antenna::Service::Internal::antennaSetProperty(*v6, v4);
      }
      AntennaModule::setProperty_sync(v3, v4);
      uint64_t v5 = 0;
    }
  }
  int v7 = v2[2];
  xpc_object_t object = xpc_null_create();
  (*((void (**)(AntennaModule *, uint64_t, xpc_object_t *))v7 + 2))(v7, v5, &object);
  xpc_release(object);
  uint64_t v8 = v2[2];
  if (v8) {
    _Block_release(v8);
  }
  xpc_release(*v4);
  operator delete(v2);
  int v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_1C59D82D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  std::string::size_type v14 = (const void *)v11[2];
  if (v14) {
    _Block_release(v14);
  }
  xpc_release(*v12);
  operator delete(v11);
  size_t v15 = (std::__shared_weak_count *)v10[2];
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (xpc_object_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  uint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v8 = *(void *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *((void *)v8 + 3) = v9;
  *((void *)v8 + 4) = v10;
  xpc_object_t v11 = xpc_null_create();
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = 0;
  size_t v12 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v13 = operator new(0x18uLL);
  *std::string::size_type v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  dispatch_async_f(v12, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void StatsAWD::submit(void *a1, int a2, xpc_object_t *a3)
{
  xpc_object_t v5 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
    xpc_object_t v6 = (std::__shared_weak_count *)a1[10];
    if (!v6) {
LABEL_9:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v6 = (std::__shared_weak_count *)a1[10];
    if (!v6) {
      goto LABEL_9;
    }
  }
  uint64_t v7 = a1[9];
  uint64_t v8 = std::__shared_weak_count::lock(v6);
  if (!v8) {
    goto LABEL_9;
  }
  uint64_t v9 = v8;
  uint64_t v10 = operator new(0x18uLL);
  *(void *)uint64_t v10 = a1;
  v10[2] = a2;
  *((void *)v10 + 2) = v5;
  xpc_object_t v11 = xpc_null_create();
  size_t v12 = a1[11];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v13 = operator new(0x18uLL);
  *std::string::size_type v13 = v10;
  v13[1] = v7;
  v13[2] = v9;
  dispatch_async_f(v12, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<StatsAWD>::execute_wrapped<StatsAWD::submit(unsigned int,xpc::object)::$_0>(StatsAWD::submit(unsigned int,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<StatsAWD::submit(unsigned int,xpc::object)::$_0,dispatch_queue_s *::default_delete<StatsAWD::submit(unsigned int,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  xpc_release(v11);
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)(a2 + 32);
  if (result) {
    __n128 result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void GetABMLogServer(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_10, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_10))
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &qword_1EBBDCE38, &dword_1C59C6000);
      __cxa_guard_release(&_MergedGlobals_10);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_14_0;
  block[4] = &qword_1EBBDCE38;
  if (qword_1EBBDCE30 == -1)
  {
    uint64_t v2 = unk_1EBBDCE40;
    *a1 = qword_1EBBDCE38;
    a1[1] = v2;
    if (!v2) {
      return;
    }
    goto LABEL_4;
  }
  dispatch_once(&qword_1EBBDCE30, block);
  uint64_t v2 = unk_1EBBDCE40;
  *a1 = qword_1EBBDCE38;
  a1[1] = v2;
  if (v2) {
LABEL_4:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  xpc_object_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    xpc_object_t v5 = a2;
  }
  else {
    xpc_object_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      int v8 = *((char *)v3 + 55);
      uint64_t v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      size_t v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      size_t v11 = v6 >= v10 ? v10 : v6;
      int v12 = memcmp(v9, v5, v11);
      if (v12) {
        break;
      }
      if (v10 >= v6) {
        goto LABEL_23;
      }
LABEL_9:
      xpc_object_t v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_24;
      }
    }
    if (v12 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v7 = v3;
    xpc_object_t v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2) {
    return v2;
  }
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    std::string::size_type v14 = v7 + 4;
  }
  else {
    std::string::size_type v14 = (const void *)v7[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)v7 + 55);
  }
  else {
    size_t v15 = v7[5];
  }
  if (v15 >= v6) {
    size_t v16 = v6;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      return v7;
    }
    return v2;
  }
  else
  {
    if (v6 < v15) {
      return v2;
    }
    return v7;
  }
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, xpc_object_t *a2, const void **a3)
{
  int v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  int v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    int v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    int v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      std::string::size_type v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  std::string::size_type v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  size_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  int v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  void *v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[2] = v13;
  size_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void antenna::Service::setAudioState(void **a1, xpc_object_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    xpc_object_t v3 = *a2;
    xpc_object_t v4 = v3;
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
      xpc_object_t v4 = v3;
    }
    antenna::Service::Internal::setAudioState(v2, &v4);
    xpc_release(v3);
  }
}

void antenna::Service::Internal::setAudioState(void *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
LABEL_9:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t v5 = a1[9];
  size_t v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    goto LABEL_9;
  }
  uint64_t v7 = v6;
  int v8 = operator new(0x10uLL);
  *int v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = xpc_null_create();
  uint64_t v10 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v11 = operator new(0x18uLL);
  *xpc_object_t v11 = v8;
  v11[1] = v5;
  v11[2] = v7;
  dispatch_async_f(v10, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>(antenna::Service::Internal::setAudioState(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::setAudioState(xpc::dict)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v9);
}

void ABMServerInternal::handlePublicMessage_sync(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](reply) == v7)
    {
      xpc_retain(reply);
      xpc_object_t v8 = reply;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t reply = 0;
  }
  xpc_release(reply);
  if (*(_DWORD *)(a1 + 192) == 5)
  {
    if (MEMORY[0x1C8795EB0](v8) == v7)
    {
      xpc_object_t v9 = xpc_int64_create(-534716415);
      if (!v9) {
        xpc_object_t v9 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, kKeyCommandResult[0], v9);
      xpc_object_t v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v11) == v7)
        {
          xpc_retain(v11);
          xpc_object_t v12 = v11;
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
      }
      xpc_release(v11);
      xpc_object_t v18 = xpc_string_create("Server not available");
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C240], v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if (v12)
      {
        xpc_retain(v12);
        xpc_object_t v20 = v12;
      }
      else
      {
        xpc_object_t v20 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, kKeyCommandData[0], v20);
      xpc_object_t v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      xpc_connection_send_message(*a2, v8);
      xpc_release(v12);
    }
    goto LABEL_38;
  }
  memset(__p, 170, 24);
  xpc_object_t value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&__p[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  uint64_t v14 = *(void *)(a1 + 288);
  xpc_object_t v15 = *a3;
  xpc_object_t v29 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v29 = xpc_null_create();
  }
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 1174405120;
  v25[2] = ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
  v25[3] = &__block_descriptor_tmp_27_2;
  v25[4] = a1;
  xpc_object_t v26 = v8;
  if (!v8)
  {
    xpc_object_t v26 = xpc_null_create();
    xpc_connection_t v16 = *a2;
    xpc_object_t v27 = v16;
    if (v16) {
      goto LABEL_23;
    }
LABEL_25:
    xpc_object_t v27 = xpc_null_create();
    goto LABEL_26;
  }
  xpc_retain(v8);
  xpc_connection_t v16 = *a2;
  xpc_object_t v27 = v16;
  if (!v16) {
    goto LABEL_25;
  }
LABEL_23:
  xpc_retain(v16);
LABEL_26:
  int v17 = _Block_copy(v25);
  std::string::size_type v28 = v17;
  ServiceManager::runCommand(v14, (uint64_t)__p, &v29, &v28);
  if (v17) {
    _Block_release(v17);
  }
  xpc_release(v29);
  xpc_object_t v29 = 0;
  xpc_release(v27);
  xpc_object_t v27 = 0;
  xpc_release(v26);
  xpc_object_t v26 = 0;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_38:
  xpc_object_t v22 = xpc_null_create();
  xpc_object_t v23 = xpc_null_create();
  xpc_object_t v24 = *a3;
  *a3 = v22;
  xpc_release(v24);
  xpc_release(v23);
  xpc_release(v8);
}

void sub_1C59D8FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t object, uint64_t a16, xpc_object_t a17, xpc_object_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(v25);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v4) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = (xpc::object *)(*a1 + 1);
  uint64_t v5 = 3760250880;
  if (MEMORY[0x1C8795EB0](*(void *)v4) == MEMORY[0x1E4F14590])
  {
    size_t v6 = *(void ***)(v3 + 176);
    if (v6)
    {
      uint64_t v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        xpc::object::to_string((uint64_t *)__p, v4);
        if (v16 >= 0) {
          xpc_object_t v10 = __p;
        }
        else {
          xpc_object_t v10 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        xpc_object_t v18 = v10;
        _os_log_debug_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEBUG, "#D Received Audio State: %s", buf, 0xCu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        size_t v6 = *(void ***)(v3 + 176);
        xpc_object_t v8 = *(xpc_object_t *)v4;
        if (*(void *)v4)
        {
LABEL_5:
          xpc_retain(v8);
          xpc_object_t v9 = *v6;
          if (!*v6) {
            goto LABEL_18;
          }
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t v8 = *(xpc_object_t *)v4;
        if (*(void *)v4) {
          goto LABEL_5;
        }
      }
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v9 = *v6;
      if (!*v6)
      {
LABEL_18:
        xpc_release(v8);
        uint64_t v5 = 0;
        goto LABEL_19;
      }
LABEL_14:
      __p[0] = v8;
      if (v8)
      {
        xpc_retain(v8);
        xpc_object_t v11 = v8;
      }
      else
      {
        xpc_object_t v11 = xpc_null_create();
        __p[0] = v11;
      }
      antenna::Service::Internal::setAudioState(v9, __p);
      xpc_release(v11);
      goto LABEL_18;
    }
  }
LABEL_19:
  uint64_t v12 = v2[2];
  __p[0] = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v12 + 16))(v12, v5, __p);
  xpc_release(__p[0]);
  int v13 = (const void *)v2[2];
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(*(xpc_object_t *)v4);
  operator delete(v2);
  uint64_t v14 = (std::__shared_weak_count *)a1[2];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(a1);
}

void sub_1C59D93A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t Preferences::getPreference<BOOL>(uint64_t (***a1)(void, uint64_t), const char *a2, ctu::cf *a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  uint64_t v5 = (BOOL *)(**a1)(a1, v11);
  size_t v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFBooleanGetTypeID()) {
      uint64_t v9 = ctu::cf::assign(a3, v6, v8);
    }
    else {
      uint64_t v9 = 0;
    }
    CFRelease(v6);
  }
  else
  {
    uint64_t v9 = 0;
  }
  MEMORY[0x1C8794290](&v11);
  return v9;
}

uint64_t Capabilities::isCMHandDetectionSupported(Capabilities *this)
{
  capabilities::abs::supportsCMHandDetection(this);
  uint64_t v1 = (void *)MEMORY[0x1E4F221C0];

  return [v1 isCallHandednessAvailable];
}

void ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = MEMORY[0x1C8795EB0](*(void *)(a1 + 40));
  uint64_t v8 = MEMORY[0x1E4F14590];
  if (v7 != MEMORY[0x1E4F14590]) {
    return;
  }
  if (a2 != -534716414)
  {
    xpc_object_t v11 = xpc_int64_create(a2);
    if (v11) {
      goto LABEL_12;
    }
LABEL_11:
    xpc_object_t v11 = xpc_null_create();
LABEL_12:
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult[0], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (MEMORY[0x1C8795EB0](*a3) == v8)
    {
      xpc_object_t v13 = (xpc_object_t)*a3;
      if (v13) {
        xpc_retain(v13);
      }
      else {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData[0], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
    }
    goto LABEL_27;
  }
  if (*(_DWORD *)(v6 + 192) != 3)
  {
    xpc_object_t v11 = xpc_int64_create(-534716414);
    if (v11) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v9) == v8)
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v15 = xpc_int64_create(-534716415);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult[0], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_string_create("Server not available");
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E4F4C240], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v10)
  {
    xpc_retain(v10);
    xpc_object_t v19 = v10;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData[0], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_release(v10);
LABEL_27:
  xpc_object_t v22 = *(void **)(a1 + 40);
  xpc_object_t v21 = *(_xpc_connection_s **)(a1 + 48);

  xpc_connection_send_message(v21, v22);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = (void *)a2[7];
  if (result) {
    __n128 result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2, int a3)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!v6) {
      goto LABEL_29;
    }
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      uint64_t v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite")) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  uint64_t v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!v6) {
    goto LABEL_29;
  }
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background")) {
    goto LABEL_30;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = std::stol(a1, &__idx, a3);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx != size || v6 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFF) {
    return 0;
  }
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_1C59D9B50(void *a1)
{
  return 0;
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE56c27_ZTSN3ctu2cf12dict_adapterE(void *a1, void *a2)
{
  uint64_t v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)(a1 + 7), (const ctu::cf::dict_adapter *)(a2 + 7));
}

void sub_1C59D9BB4(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Service::broadcastEvent(uint64_t a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5) {
    return;
  }
  xpc_object_t v9 = std::__shared_weak_count::lock(v5);
  xpc_object_t v19 = v9;
  if (!v9) {
    return;
  }
  xpc_object_t v10 = v9;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v18 = v11;
  if (!v11) {
    goto LABEL_19;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  xpc_object_t v12 = *a3;
  xpc_object_t v16 = v12;
  if (v12) {
    CFRetain(v12);
  }
  if (*a4)
  {
    xpc_object_t v13 = _Block_copy(*a4);
    xpc_object_t v15 = v13;
    uint64_t v14 = *(void *)(v11 + 184);
    if (!v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  xpc_object_t v13 = 0;
  xpc_object_t v15 = 0;
  uint64_t v14 = *(void *)(v11 + 184);
  if (v14) {
LABEL_13:
  }
    dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(v14, (uint64_t)&v17, &v16, &v15);
LABEL_14:
  if (v13) {
    _Block_release(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_22:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    return;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_22;
  }
}

void sub_1C59D9D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C59D9D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (v18) {
    _Block_release(v18);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t ServiceManager::isServerDown(ServiceManager *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 192);
  return v1 & 1;
}

xpc_object_t __copy_helper_block_e8_40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void ctu::cf::insert<__CFString const*,long long>(__CFDictionary *a1, CFTypeRef cf, uint64_t a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C59D9E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C59D9EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  memset(&v44, 170, sizeof(v44));
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C1A0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  long long buf = 0uLL;
  int64_t v46 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v5 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C6A8]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  long long buf = 0uLL;
  int64_t v46 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v44;
  }
  char isSupported = abm::trace::isSupported();
  char v7 = isSupported;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_12:
      unsigned int v41 = -534716416;
      xpc_object_t v40 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v40 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v40 = v9;
        if (!v9)
        {
          xpc_object_t v15 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_25;
        }
      }
      if (MEMORY[0x1C8795EB0](v9) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v9);
        goto LABEL_26;
      }
      xpc_object_t v15 = xpc_null_create();
LABEL_25:
      xpc_object_t v40 = v15;
LABEL_26:
      xpc_release(v9);
      xpc_object_t v16 = (void *)v2[1];
      xpc_object_t v39 = v16;
      if (v16)
      {
        xpc_retain(v16);
      }
      else
      {
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v39 = v16;
      }
      BOOL isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)v3, &v39, &v40, &v41);
      xpc_release(v16);
      xpc_object_t v39 = 0;
      if (isInternalProperty_sync)
      {
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v2 + 2, &v41, &v40);
LABEL_64:
        xpc_release(v40);
        goto LABEL_65;
      }
      if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
      {
        long long buf = 0uLL;
        int64_t v46 = 0;
        BOOL v18 = prop::get((char *)&v44, (char *)object, (uint64_t)&buf);
        xpc_object_t v19 = (void *)v2[1];
        __dst[0] = v19;
        if (v19)
        {
          xpc_retain(v19);
        }
        else
        {
          xpc_object_t v19 = xpc_null_create();
          __dst[0] = v19;
        }
        if (SHIBYTE(v46) >= 0) {
          p_long long buf = (const char *)&buf;
        }
        else {
          p_long long buf = (const char *)buf;
        }
        xpc_object_t v28 = xpc_string_create(p_buf);
        if (!v28) {
          xpc_object_t v28 = xpc_null_create();
        }
        xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F4C800], v28);
        xpc_object_t v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        if (v18) {
          int v30 = 0;
        }
        else {
          int v30 = -534716416;
        }
        LODWORD(v36) = v30;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 2, (unsigned int *)&v36, __dst);
        xpc_release(__dst[0]);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)buf);
        }
        goto LABEL_64;
      }
      xpc_object_t v20 = (const void *)*MEMORY[0x1E4F4D060];
      size_t v21 = strlen((const char *)*MEMORY[0x1E4F4D060]);
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      xpc_object_t v22 = (void *)v21;
      if (v21 >= 0x17)
      {
        uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v24 = v21 | 7;
        }
        uint64_t v25 = v24 + 1;
        xpc_object_t v23 = (void **)operator new(v24 + 1);
        __dst[1] = v22;
        unint64_t v38 = v25 | 0x8000000000000000;
        __dst[0] = v23;
      }
      else
      {
        HIBYTE(v38) = v21;
        xpc_object_t v23 = __dst;
        if (!v21) {
          goto LABEL_42;
        }
      }
      memmove(v23, v20, (size_t)v22);
LABEL_42:
      *((unsigned char *)v22 + (void)v23) = 0;
      xpc_object_t v26 = (void *)v2[1];
      xpc_object_t v36 = v26;
      if (v26)
      {
        xpc_retain(v26);
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
        xpc_object_t v36 = v26;
      }
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 3321888768;
      int64_t v46 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke;
      uint64_t v47 = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      size_t v31 = (void *)v2[2];
      if (v31) {
        size_t v31 = _Block_copy(v31);
      }
      int v48 = v31;
      std::string::size_type v32 = _Block_copy(&buf);
      size_t v35 = v32;
      Service::runCommand((uint64_t)v3, (uint64_t)__dst, &v36, &v35);
      if (v32) {
        _Block_release(v32);
      }
      xpc_release(v26);
      xpc_object_t v36 = 0;
      if (SHIBYTE(v38) < 0) {
        operator delete(__dst[0]);
      }
      if (v48) {
        _Block_release(v48);
      }
      goto LABEL_64;
    }
  }
  else if (isSupported)
  {
    goto LABEL_12;
  }
  xpc_object_t v10 = v3[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = &v44;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v11 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v11;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I The property (%s) not supported in getting", (uint8_t *)&buf, 0xCu);
  }
  xpc_object_t v12 = xpc_null_create();
  xpc_object_t v13 = (void *)v2[2];
  *(void *)&long long buf = v12;
  xpc_object_t v14 = xpc_null_create();
  ((void (*)(void *, uint64_t, long long *))v13[2])(v13, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v14);
LABEL_65:
  if (SHIBYTE(object[2]) < 0)
  {
    operator delete(object[0]);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_67:
      std::string::size_type v33 = (void *)v2[2];
      if (!v33) {
        goto LABEL_72;
      }
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_67;
  }
  operator delete(v44.__r_.__value_.__l.__data_);
  std::string::size_type v33 = (void *)v2[2];
  if (v33) {
LABEL_71:
  }
    _Block_release(v33);
LABEL_72:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  xpc_object_t v34 = (std::__shared_weak_count *)a1[2];
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  operator delete(a1);
}

void sub_1C59DA4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v3 = a2;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 32), &v3, a3);
}

void ctu::SharedSynchronizable<TraceManager>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v7 = v6;
  xpc_object_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F2106490;
  void block[5] = v5;
  xpc_object_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  xpc_object_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(void *a1, uint64_t a2)
{
  unsigned int v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      xpc_object_t v4 = v3;
      unsigned int v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = (void *)a2;
    do
    {
      xpc_object_t v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  char v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  xpc_object_t v8 = *(std::__shared_weak_count **)(a2 + 48);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  xpc_release(*(xpc_object_t *)(a2 + 32));

  operator delete((void *)a2);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    std::__tree<std::string>::destroy(v1 + 32, *(char **)(v1 + 40));
    if (*(char *)(v1 + 23) < 0)
    {
      operator delete(*(void **)v1);
      uint64_t v2 = (void *)v1;
    }
    else
    {
      uint64_t v2 = (void *)v1;
    }
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      xpc_object_t v8 = a2;
    }
    else {
      xpc_object_t v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      xpc_object_t v10 = (uint64_t **)v5;
      xpc_object_t v13 = (const void *)v5[4];
      uint64_t v11 = v5 + 4;
      xpc_object_t v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        xpc_object_t v15 = v11;
      }
      else {
        xpc_object_t v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return v10;
          }
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        uint64_t v5 = v10[1];
        if (!v5)
        {
          BOOL v6 = v10 + 1;
LABEL_28:
          xpc_object_t v20 = operator new(0x38uLL);
          size_t v21 = (std::string *)(v20 + 4);
          if (*(char *)(a3 + 23) < 0) {
            goto LABEL_31;
          }
LABEL_29:
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
          v21->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        uint64_t v5 = *v10;
        BOOL v6 = v10;
        if (!*v10) {
          goto LABEL_28;
        }
      }
    }
  }
  xpc_object_t v10 = a1 + 1;
  xpc_object_t v20 = operator new(0x38uLL);
  size_t v21 = (std::string *)(v20 + 4);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
    goto LABEL_29;
  }
LABEL_31:
  std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_32:
  void *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *BOOL v6 = v20;
  xpc_object_t v22 = (uint64_t *)**a1;
  xpc_object_t v23 = v20;
  if (v22)
  {
    *a1 = v22;
    xpc_object_t v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_1C59DABB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (BOOL v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  xpc_object_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210B2A0;
  void block[5] = v5;
  xpc_object_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  xpc_object_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke(void *a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[7];
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 48);
    v16[0] = *(void *)(v4 + 40);
    v16[1] = (uint64_t)v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2;
    aBlock[3] = &unk_1F2108080;
    void aBlock[4] = a1[4];
    char v14 = 1;
    BOOL v6 = (void *)a1[6];
    if (v6) {
      BOOL v6 = _Block_copy(v6);
    }
    xpc_object_t v13 = v6;
    int v7 = _Block_copy(aBlock);
    xpc_object_t v15 = v7;
    AWDModule::enableMetricSubmission_sync(v3, v16, 0, (uint64_t)&v15);
    if (v7) {
      _Block_release(v7);
    }
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      xpc_object_t v8 = v13;
      if (v13) {
        goto LABEL_11;
      }
    }
    else
    {
      xpc_object_t v8 = v13;
      if (v13) {
LABEL_11:
      }
        _Block_release(v8);
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    uint64_t v10 = a1[6];
    xpc_object_t v17 = v9;
    xpc_object_t v11 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v10 + 16))(v10, 3760250880, &v17);
    xpc_release(v17);
    xpc_release(v11);
  }
}

void sub_1C59DAEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void AWDModule::queryMetric_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (v6)
  {
    xpc_object_t v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v17 = *a2;
    int v18 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1174405120;
    void v14[2] = ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_34;
    uint64_t v10 = *(void **)a5;
    if (*(void *)a5) {
      uint64_t v10 = _Block_copy(v10);
    }
    xpc_object_t v15 = v10;
    aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(void *)v6 + 88))(v6, &v17, a3, a4, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    xpc_object_t v11 = v18;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    else
    {
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    _Block_release(v12);
  }
  else
  {
    xpc_object_t v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Cannot query metric because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a5 + 16))();
  }
}

void sub_1C59DB0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

BOOL prop::tracesettings::enabled(prop::tracesettings *this, const char *a2)
{
  BOOL v34 = 0;
  if ((prop::tracesettings *)*MEMORY[0x1E4F4C2F8] == this)
  {
    size_t v6 = strlen((const char *)this);
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_59:
    }
      std::string::__throw_length_error[abi:ne180100]();
    size_t v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v17 = v6 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (void **)operator new(v17 + 1);
      size_t v32 = v7;
      unint64_t v33 = v18 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v6;
      p_dst = (void **)&__dst;
      if (!v6)
      {
LABEL_35:
        *((unsigned char *)p_dst + v7) = 0;
        int v19 = (const void *)*MEMORY[0x1E4F4C198];
        size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C198]);
        if (v20 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v21 = v20;
        if (v20 >= 0x17)
        {
          uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v23 = v20 | 7;
          }
          uint64_t v24 = v23 + 1;
          xpc_object_t v22 = operator new(v23 + 1);
          size_t v29 = v21;
          unint64_t v30 = v24 | 0x8000000000000000;
          xpc_object_t v28 = v22;
        }
        else
        {
          HIBYTE(v30) = v20;
          xpc_object_t v22 = &v28;
          if (!v20)
          {
LABEL_43:
            *((unsigned char *)v22 + v21) = 0;
            memset(&__p, 0, sizeof(__p));
            int v25 = -1431655766;
            if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p))
            {
              int v35 = -1431655766;
              int v26 = util::convert<int>(&__p, &v35, 0);
              if (v26) {
                int v25 = v35;
              }
              else {
                int v25 = -1431655766;
              }
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_51:
                if (SHIBYTE(v30) < 0)
                {
                  operator delete(v28);
                  if ((SHIBYTE(v33) & 0x80000000) == 0)
                  {
LABEL_53:
                    if (!v26) {
                      return v34;
                    }
                    return v25 != 0;
                  }
                }
                else if ((SHIBYTE(v33) & 0x80000000) == 0)
                {
                  goto LABEL_53;
                }
                operator delete(__dst);
                if (!v26) {
                  return v34;
                }
                return v25 != 0;
              }
            }
            else
            {
              int v26 = 0;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_51;
              }
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_51;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_43;
      }
    }
    memcpy(p_dst, this, v7);
    goto LABEL_35;
  }
  size_t v3 = strlen((const char *)this);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_59;
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v9 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v9 = v3 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v5 = (void **)operator new(v9 + 1);
    size_t v32 = v4;
    unint64_t v33 = v10 | 0x8000000000000000;
    std::string __dst = v5;
    goto LABEL_13;
  }
  HIBYTE(v33) = v3;
  uint64_t v5 = (void **)&__dst;
  if (v3) {
LABEL_13:
  }
    memcpy(v5, this, v4);
  *((unsigned char *)v5 + v4) = 0;
  xpc_object_t v11 = (const void *)*MEMORY[0x1E4F4C2D8];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C2D8]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    char v14 = operator new(v15 + 1);
    size_t v29 = v13;
    unint64_t v30 = v16 | 0x8000000000000000;
    xpc_object_t v28 = v14;
    goto LABEL_21;
  }
  HIBYTE(v30) = v12;
  char v14 = &v28;
  if (v12) {
LABEL_21:
  }
    memmove(v14, v11, v13);
  *((unsigned char *)v14 + v13) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p)) {
    util::convert<BOOL>(&__p, &v34, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
    {
LABEL_26:
      if (SHIBYTE(v33) < 0) {
        goto LABEL_30;
      }
      return v34;
    }
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v28);
  if (SHIBYTE(v33) < 0) {
LABEL_30:
  }
    operator delete(__dst);
  return v34;
}

void sub_1C59DB51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL defaults::ipc::get(char *a1, uint64_t a2)
{
  void v19[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    size_t v6 = *(const char **)a1;
    size_t v4 = (capabilities::ipc *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8]);
    if (v4)
    {
      uint64_t v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C2E0]);
      if (v5) {
        goto LABEL_4;
      }
LABEL_9:
      int v8 = capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(v5);
      memset(v19, 0, 15);
      std::to_string(&v17, v8);
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v9 = (capabilities::trace *)capabilities::ipc::supportsPCI(v4);
    if (v9) {
      LODWORD(v9) = capabilities::trace::enabledByDefault(v9);
    }
    memset(v19, 0, 15);
    std::to_string(&v17, (int)v9);
    goto LABEL_13;
  }
  size_t v4 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0]);
  size_t v6 = a1;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_4:
  size_t v7 = (capabilities::ipc *)strcasecmp(v6, "BufferCount");
  if (!v7 && capabilities::ipc::supportsPCI(v7))
  {
    memset(v19, 0, 15);
    std::to_string(&v17, 4uLL);
LABEL_13:
    v19[0] = v17.__r_.__value_.__l.__size_;
    std::string::size_type v10 = v17.__r_.__value_.__r.__words[0];
    *(void *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
    char v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v12 = v19[0];
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 15) = *(void *)((char *)v19 + 7);
    *(unsigned char *)(a2 + 23) = v11;
    return 1;
  }
  char v14 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    std::string::size_type v15 = *MEMORY[0x1E4F4D338];
    if (a1[23] >= 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = *(char **)a1;
    }
    LODWORD(v17.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v17.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 6) = v15;
    HIWORD(v17.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v18 = v16;
    _os_log_error_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v17,
      0x20u);
    return 0;
  }
  return result;
}

void sub_1C59DB7BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C59DB6B0);
    }
    JUMPOUT(0x1C59DB6B8);
  }
  _Unwind_Resume(a1);
}

void ServerClientState::registerNotification_sync(void **a1, int a2, const void **a3)
{
  size_t v4 = *a1;
  uint64_t v5 = *a3;
  if (*a3) {
    CFRetain(v5);
  }
  v6.length = CFArrayGetCount((CFArrayRef)v5);
  if (a2) {
    size_t v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::registerNotificationApplier;
  }
  else {
    size_t v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::unregisterNotificationApplier;
  }
  v6.location = 0;
  CFArrayApplyFunction((CFArrayRef)v5, v6, v7, v4);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1C59DB89C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v43 = 0;
  std::string v44 = &v43;
  uint64_t v45 = 0x2000000000;
  int v46 = -534716414;
  if (MEMORY[0x1C8795EB0](*(void *)(v2 + 24)) == MEMORY[0x1E4F14590])
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4D300]);
    v47[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      v47[0] = xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)v47, (const object *)0xFFFFFFFFLL);
    xpc_release(v47[0]);
    if (v13 <= 5u
      && (((1 << v13) & 0x36) != 0
       || !v13 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14)))
    {
      uint64_t v15 = *(void *)(v3 + 176);
      if (v15)
      {
        uint64_t v16 = v3 + 176;
        do
        {
          unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
          BOOL v18 = v17 >= v13;
          if (v17 >= v13) {
            int v19 = (uint64_t *)v15;
          }
          else {
            int v19 = (uint64_t *)(v15 + 8);
          }
          if (v18) {
            uint64_t v16 = v15;
          }
          uint64_t v15 = *v19;
        }
        while (*v19);
        if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
        {
          *((_DWORD *)v44 + 6) = -534716416;
          xpc_object_t v20 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C1F0]);
          v47[0] = v20;
          if (v20) {
            xpc_retain(v20);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v35 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v21 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C278]);
          v47[0] = v21;
          if (v21) {
            xpc_retain(v21);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v22 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C1A8]);
          v47[0] = v23;
          if (v23) {
            xpc_retain(v23);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v24 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C178]);
          v47[0] = v25;
          if (v25) {
            xpc_retain(v25);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v26 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v27 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C130]);
          v47[0] = v27;
          if (v27) {
            xpc_retain(v27);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v28 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v29 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C2D0]);
          v47[0] = v29;
          if (v29) {
            xpc_retain(v29);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v30 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          uint64_t v31 = *(void *)(v16 + 40);
          size_t v32 = *(std::__shared_weak_count **)(v16 + 48);
          v42[0] = v31;
          v42[1] = (uint64_t)v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v41[0] = v26;
          v41[1] = v28;
          v41[2] = 0;
          v41[3] = v30;
          v41[4] = -1431699456;
          v41[5] = -1431655936;
          v41[6] = -1431655936;
          v39[0] = v24;
          v39[1] = v35;
          v39[2] = v22;
          v39[3] = -1431655766;
          uint64_t v40 = 0;
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke;
          aBlock[3] = &unk_1F21080F0;
          void aBlock[4] = &v43;
          unint64_t v33 = *(void **)(v2 + 32);
          if (v33) {
            unint64_t v33 = _Block_copy(v33);
          }
          xpc_object_t v37 = v33;
          BOOL v34 = _Block_copy(aBlock);
          unint64_t v38 = v34;
          AWDModule::queryMetric_sync(v3, v42, (uint64_t)v41, (uint64_t)v39, (uint64_t)&v38);
          if (v34) {
            _Block_release(v34);
          }
          if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          if (v37) {
            _Block_release(v37);
          }
        }
      }
    }
  }
  size_t v4 = v44;
  if (*((_DWORD *)v44 + 6) == -534716414)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    v47[0] = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, v47);
    xpc_release(v47[0]);
    xpc_release(v8);
    _Block_object_dispose(&v43, 8);
  }
  else
  {
    _Block_object_dispose(&v43, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  std::string::size_type v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  char v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C59DBDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  if (v18) {
    _Block_release(v18);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  _Block_object_dispose((const void *)(v20 - 128), 8);
  int v22 = *(const void **)(v17 + 32);
  if (v22) {
    _Block_release(v22);
  }
  xpc_release(*(xpc_object_t *)(v17 + 24));
  *(void *)(v17 + 24) = 0;
  xpc_object_t v23 = *(std::__shared_weak_count **)(v17 + 8);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  operator delete((void *)v17);
  int v24 = (std::__shared_weak_count *)v16[2];
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t util::convert<BOOL>(const std::string *a1, BOOL *a2, int a3)
{
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v6 = (const char *)a1->__r_.__value_.__r.__words[0];
    if (strcasecmp(a1->__r_.__value_.__l.__data_, "false") && strcasecmp(v6, "off") && strcasecmp(v6, "no"))
    {
      if (!strcasecmp(v6, "true")
        || !strcasecmp(v6, "on")
        || !strcasecmp(v6, "yes")
        || !strcasecmp(v6, "full")
        || !strcasecmp(v6, "streaming")
        || !strcasecmp(v6, "lite"))
      {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
LABEL_27:
    unint64_t v7 = 0;
LABEL_29:
    *a2 = v7 != 0;
    return 1;
  }
  if (!strcasecmp((const char *)a1, "false")
    || !strcasecmp((const char *)a1, "off")
    || !strcasecmp((const char *)a1, "no"))
  {
    goto LABEL_27;
  }
  if (!strcasecmp((const char *)a1, "true")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "on")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "yes")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "full")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "streaming")) {
    goto LABEL_28;
  }
  uint64_t v6 = (const char *)a1;
  if (!strcasecmp((const char *)a1, "lite")) {
    goto LABEL_28;
  }
LABEL_21:
  if (!strcasecmp(v6, "background"))
  {
LABEL_28:
    unint64_t v7 = 1;
    goto LABEL_29;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = std::stol(a1, &__idx, a3);
  uint64_t v8 = 0;
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx == size && v7 < 2) {
    goto LABEL_29;
  }
  return v8;
}

uint64_t sub_1C59DC220(void *a1)
{
  return 0;
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke(void *a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = a1[5];
    size_t v4 = (std::__shared_weak_count *)a1[8];
    v15[0] = a1[7];
    v15[1] = (uint64_t)v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2;
    aBlock[3] = &unk_1F2108010;
    void aBlock[4] = a1[4];
    char v13 = 1;
    xpc_object_t v5 = (void *)a1[6];
    if (v5) {
      xpc_object_t v5 = _Block_copy(v5);
    }
    uint64_t v12 = v5;
    uint64_t v6 = _Block_copy(aBlock);
    char v14 = v6;
    AWDModule::enableMetricSubmission_sync(v3, v15, 1, (uint64_t)&v14);
    if (v6) {
      _Block_release(v6);
    }
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      unint64_t v7 = v12;
      if (v12) {
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v7 = v12;
      if (v12) {
LABEL_11:
      }
        _Block_release(v7);
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    uint64_t v9 = a1[6];
    xpc_object_t v16 = v8;
    xpc_object_t v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v9 + 16))(v9, 3760250880, &v16);
    xpc_release(v16);
    xpc_release(v10);
  }
}

void sub_1C59DC3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v37 = 0;
  unint64_t v38 = &v37;
  uint64_t v39 = 0x2000000000;
  int v40 = -534716414;
  if (MEMORY[0x1C8795EB0](*(void *)(v2 + 24)) == MEMORY[0x1E4F14590])
  {
    xpc_object_t value = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4D300]);
    unsigned int v41 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      unsigned int v41 = (char *)xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&v41, (const object *)0xFFFFFFFFLL);
    xpc_release(v41);
    if (v13 != 1)
    {
      if (v13)
      {
        if ((v13 - 2) > 3u) {
          goto LABEL_2;
        }
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    uint64_t v15 = *(void *)(v3 + 176);
    if (!v15) {
      goto LABEL_33;
    }
    uint64_t v16 = v3 + 176;
    do
    {
      unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
      BOOL v18 = v17 >= v13;
      if (v17 >= v13) {
        int v19 = (uint64_t *)v15;
      }
      else {
        int v19 = (uint64_t *)(v15 + 8);
      }
      if (v18) {
        uint64_t v16 = v15;
      }
      uint64_t v15 = *v19;
    }
    while (*v19);
    if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
    {
      xpc_object_t v21 = *(char **)(v16 + 40);
      uint64_t v20 = *(std::__shared_weak_count **)(v16 + 48);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
LABEL_33:
      AWDModule::appCheckIn_sync(v3, v13, &v41);
      xpc_object_t v21 = v41;
      uint64_t v20 = (std::__shared_weak_count *)v42;
    }
    if (v21)
    {
      *((_DWORD *)v38 + 6) = -534716416;
      int v22 = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C248]);
      unsigned int v41 = v22;
      if (v22) {
        xpc_retain(v22);
      }
      else {
        unsigned int v41 = (char *)xpc_null_create();
      }
      unsigned __int8 v23 = xpc::dyn_cast_or_default((xpc *)&v41, (const object *)0xFFFFFFFFLL);
      xpc_release(v41);
      memset(__p, 170, sizeof(__p));
      xpc_object_t v24 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C0F0]);
      xpc_object_t object = v24;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      unsigned int v41 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      xpc::dyn_cast_or_default();
      if (v41)
      {
        uint64_t v42 = v41;
        operator delete(v41);
      }
      xpc_release(object);
      xpc_object_t v25 = __p[0];
      if (__p[1] != __p[0] && v23 <= 2u)
      {
        v34[0] = (uint64_t)v21;
        v34[1] = (uint64_t)v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke;
        aBlock[3] = &unk_1F2108048;
        void aBlock[5] = v3;
        int v26 = *(void **)(v2 + 32);
        if (v26) {
          int v26 = _Block_copy(v26);
        }
        int v30 = v26;
        uint64_t v31 = v21;
        size_t v32 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        void aBlock[4] = &v37;
        xpc_object_t v27 = _Block_copy(aBlock);
        unint64_t v33 = v27;
        AWDModule::sendPayload_sync(v3, v34, v23, (uint64_t)__p, (uint64_t)&v33);
        if (v27) {
          _Block_release(v27);
        }
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        int v28 = v32;
        if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        if (v30) {
          _Block_release(v30);
        }
        xpc_object_t v25 = __p[0];
      }
      if (v25)
      {
        __p[1] = v25;
        operator delete(v25);
      }
    }
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_2:
  size_t v4 = v38;
  if (*((_DWORD *)v38 + 6) == -534716414)
  {
    xpc_object_t v5 = (char *)xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    unsigned int v41 = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, char **))(v6 + 16))(v6, v7, &v41);
    xpc_release(v41);
    xpc_release(v8);
    _Block_object_dispose(&v37, 8);
  }
  else
  {
    _Block_object_dispose(&v37, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  xpc_object_t v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  char v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C59DC910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,xpc_object_t object,void *__p,uint64_t a24)
{
  if (v27) {
    _Block_release(v27);
  }
  if (a18 && !atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
    std::__shared_weak_count::__release_weak(a18);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a21 && !atomic_fetch_add(&a21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
    std::__shared_weak_count::__release_weak(a21);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Block_object_dispose((const void *)(v28 - 120), 8);
  int v30 = *(const void **)(v25 + 32);
  if (v30) {
    _Block_release(v30);
  }
  xpc_release(*(xpc_object_t *)(v25 + 24));
  *(void *)(v25 + 24) = 0;
  uint64_t v31 = *(std::__shared_weak_count **)(v25 + 8);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete((void *)v25);
  size_t v32 = (std::__shared_weak_count *)v24[2];
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void AWDModule::enableMetricSubmission_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5)
  {
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v15 = *a2;
    uint64_t v16 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1174405120;
    v12[2] = ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v12[3] = &__block_descriptor_tmp_25_0;
    xpc_object_t v8 = *(void **)a4;
    if (*(void *)a4) {
      xpc_object_t v8 = _Block_copy(v8);
    }
    unsigned __int8 v13 = v8;
    aBlock = _Block_copy(v12);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(void *)v5 + 48))(v5, &v15, a3, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v9 = v16;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      xpc_object_t v10 = v13;
      if (!v13) {
        return;
      }
    }
    else
    {
      xpc_object_t v10 = v13;
      if (!v13) {
        return;
      }
    }
    _Block_release(v10);
  }
  else
  {
    char v11 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Cannot enable metric submission because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
}

void sub_1C59DCD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (!v4)
  {
    *(void *)(a1 + 40) = xpc_null_create();
    CFTypeRef result = *(CFTypeRef *)(a2 + 48);
    *(void *)(a1 + 48) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  xpc_retain(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1C59DCE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void *__copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    CFTypeRef result = *(void **)(a2 + 48);
    if (!result) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(void *)(a1 + 40) = xpc_null_create();
  CFTypeRef result = *(void **)(a2 + 48);
  if (result) {
LABEL_5:
  }
    CFTypeRef result = _Block_copy(result);
LABEL_6:
  *(void *)(a1 + 48) = result;
  return result;
}

void Timestamp::Timestamp(Timestamp *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 0;
  uint64_t v2 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  unsigned long long v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2;
    if (*v2) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v4;
    void *v2 = v7;
    uint64_t v8 = **(void **)this;
    uint64_t v9 = (uint64_t *)v7;
    if (v8)
    {
      *(void *)this = v8;
      uint64_t v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((void *)this + 2);
    goto LABEL_13;
  }
  xpc_object_t v10 = __error();
  char v11 = strerror(*v10);
  *(_DWORD *)long long buf = 136315138;
  char v14 = v11;
  _os_log_error_impl(&dword_1C59C6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  uint64_t v3 = *v2;
  uint64_t v4 = v2;
  if (!*v2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v5 = v3;
  while (1)
  {
    while (1)
    {
      uint64_t v4 = (void *)v5;
      int v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1) {
        break;
      }
      uint64_t v5 = *v4;
      uint64_t v2 = v4;
      if (!*v4) {
        goto LABEL_10;
      }
    }
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    uint64_t v5 = v4[1];
    if (!v5)
    {
      uint64_t v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  uint64_t v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_1C59DD0C8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1C59DD0E4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(void **)a2, (void *)a2 + 1);
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(void **)a2, (void *)a2 + 1);
}

void sub_1C59DD140(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1C59DD198(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *Timestamp::Timestamp(void *a1, _OWORD *a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  uint64_t v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  *int v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  void *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  uint64_t v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  *int v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  uint64_t v7 = a1 + 1;
  int v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        int v6 = *(char **)v8;
        uint64_t v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      int v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        uint64_t v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v8 = (char *)(a1 + 1);
LABEL_8:
    xpc_object_t v10 = v8;
    uint64_t v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((void *)v8 + 5) = 0;
    *((void *)v8 + 6) = 0;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *uint64_t v7 = (uint64_t *)v8;
    char v11 = (uint64_t *)**a1;
    unsigned long long v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      unsigned long long v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  __n128 result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

void *Timestamp::Timestamp(void *a1, uint64_t a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  uint64_t v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  *int v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  void *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  uint64_t v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  *int v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  uint64_t v5 = a2;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  a1[1] = 0;
  uint64_t v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  __p[2] = (void *)0x11AAAAAAAAAA0053;
  *(_OWORD *)std::string __p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((void *)&v23 + 1) = 0xAAAAAAAA00000000;
  memset(&v24, 0, sizeof(v24));
  if (a2[23] < 0) {
    uint64_t v5 = *(const char **)a2;
  }
  if (strptime(v5, (const char *)__p, &v24))
  {
    v24.tm_isdst = -1;
    *(void *)&unsigned long long v23 = mktime(&v24);
    if ((void)v23 != -1) {
      goto LABEL_15;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v19 = __error();
      uint64_t v20 = strerror(*v19);
      *(_DWORD *)long long buf = 136315138;
      xpc_object_t v27 = v20;
      _os_log_error_impl(&dword_1C59C6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      unsigned long long v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      unsigned long long v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    uint64_t v8 = __error();
    int v9 = strerror(*v8);
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v27 = v9;
    xpc_object_t v10 = MEMORY[0x1E4F14500];
    char v11 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_32;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  unsigned long long v23 = 0uLL;
  if (gettimeofday((timeval *)&v23, 0) < 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    xpc_object_t v21 = __error();
    int v22 = strerror(*v21);
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v27 = v22;
    xpc_object_t v10 = MEMORY[0x1E4F14500];
    char v11 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_32:
    _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_15:
  unsigned long long v12 = *v7;
  unsigned __int8 v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        unsigned __int8 v13 = (uint64_t **)v12;
        int v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a4) {
          break;
        }
        unsigned long long v12 = *v13;
        uint64_t v7 = v13;
        if (!*v13) {
          goto LABEL_22;
        }
      }
      if (v14 >= a4) {
        break;
      }
      unsigned long long v12 = v13[1];
      if (!v12)
      {
        uint64_t v7 = v13 + 1;
        goto LABEL_22;
      }
    }
    *(_OWORD *)(v13 + 5) = v23;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_22:
    uint64_t v15 = (char *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = a4;
    *((void *)v15 + 5) = 0;
    *((void *)v15 + 6) = 0;
    *(void *)uint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = v13;
    *uint64_t v7 = (uint64_t *)v15;
    uint64_t v16 = (uint64_t *)**a1;
    unsigned int v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      unsigned int v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v15 + 40) = v23;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_25:
    }
      operator delete(__p[0]);
  }
  return a1;
}

void sub_1C59DD7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v24, *(void **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, void *a2, int a3)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a3;
    if (v7 >= a3) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3) {
    return 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _DWORD v41[7] = v8;
  v41[8] = v8;
  v41[5] = v8;
  v41[6] = v8;
  v41[3] = v8;
  v41[4] = v8;
  v41[1] = v8;
  v41[2] = v8;
  long long v40 = v8;
  v41[0] = v8;
  *(_OWORD *)std::string __p = v8;
  long long v39 = v8;
  long long v36 = v8;
  long long v37 = v8;
  long long v34 = v8;
  long long v35 = v8;
  long long v33 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  uint64_t v9 = v11;
  if (!v11) {
    goto LABEL_11;
  }
  uint64_t v12 = v10;
  do
  {
    int v13 = *(_DWORD *)(v9 + 32);
    BOOL v14 = v13 < a2;
    if (v13 >= a2) {
      uint64_t v15 = (uint64_t *)v9;
    }
    else {
      uint64_t v15 = (uint64_t *)(v9 + 8);
    }
    if (!v14) {
      uint64_t v12 = v9;
    }
    uint64_t v9 = *v15;
  }
  while (*v15);
  if (v12 != v10 && *(_DWORD *)(v12 + 32) <= a2)
  {
    time_t v16 = *(void *)(v12 + 40);
    if ((a3 & 0x11) != 0)
    {
LABEL_12:
      v31.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
      time_t v32 = v16;
      *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v31.tm_mon = v17;
      *(_OWORD *)&v31.tm_isdst = v17;
      *(_OWORD *)&v31.tm_sec = v17;
      localtime_r(&v32, &v31);
      long long v46 = 0u;
      long long v47 = 0u;
      *(_OWORD *)__s = 0u;
      long long v45 = 0u;
      if ((a3 & 0x10) != 0) {
        BOOL v18 = "%Y.%m.%d_%H-%M-%S%z";
      }
      else {
        BOOL v18 = "%Y-%m-%d-%H-%M-%S";
      }
      strftime(__s, 0x40uLL, v18, &v31);
      size_t v19 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)__s, v19);
      if ((a3 & 8) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"-", 1);
        uint64_t v20 = v34;
        xpc_object_t v21 = (char *)&v34 + *(void *)(v34 - 24);
        if (*((_DWORD *)v21 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v34 + *(void *)(v34 - 24)));
          int v22 = std::locale::use_facet(&v43, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 32);
          std::locale::~locale(&v43);
          uint64_t v20 = v34;
        }
        *((_DWORD *)v21 + 36) = 48;
        *(void *)((char *)&v35 + *(void *)(v20 - 24) + 8) = 3;
        std::ostream::operator<<();
      }
      goto LABEL_23;
    }
  }
  else
  {
LABEL_11:
    time_t v16 = 0;
    if ((a3 & 0x11) != 0) {
      goto LABEL_12;
    }
  }
  std::ostream::operator<<();
  if ((a3 & 4) != 0 || (a3 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
LABEL_23:
  if ((BYTE8(v40) & 0x10) != 0)
  {
    uint64_t v24 = v40;
    if ((unint64_t)v40 < *((void *)&v37 + 1))
    {
      *(void *)&long long v40 = *((void *)&v37 + 1);
      uint64_t v24 = *((void *)&v37 + 1);
    }
    uint64_t v25 = (const void *)v37;
    size_t v23 = v24 - v37;
    if ((unint64_t)(v24 - v37) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_40;
    }
  }
  else
  {
    if ((BYTE8(v40) & 8) == 0)
    {
      size_t v23 = 0;
      a4[23] = 0;
      goto LABEL_36;
    }
    uint64_t v25 = (const void *)*((void *)&v35 + 1);
    size_t v23 = *((void *)&v36 + 1) - *((void *)&v35 + 1);
    if (*((void *)&v36 + 1) - *((void *)&v35 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_40:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    uint64_t v28 = operator new(v26 + 1);
    *((void *)a4 + 1) = v23;
    *((void *)a4 + 2) = v27 | 0x8000000000000000;
    *(void *)a4 = v28;
    a4 = v28;
    goto LABEL_35;
  }
  a4[23] = v23;
  if (v23) {
LABEL_35:
  }
    memmove(a4, v25, v23);
LABEL_36:
  a4[v23] = 0;
  *(void *)&long long v33 = *MEMORY[0x1E4FBA408];
  uint64_t v29 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v33 + *(void *)(v33 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v34 = v29;
  *((void *)&v34 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8795140](v41);
}

void sub_1C59DDCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C59DDCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::locale::~locale((std::locale *)(v9 - 136));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C59DDD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C59DDD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C59DDD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  long long v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1C59DE008(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1C8795140](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8795140](a1 + 128);
  return a1;
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      long long v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v1 = v11[1];
    if (!v11[1]) {
      goto LABEL_18;
    }
  }
  uint64_t v2 = &v11[1];
  uint64_t v3 = v1;
  do
  {
    uint64_t v4 = (uint64_t **)v3;
    uint64_t v5 = v2;
    int v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0) {
      uint64_t v2 = (uint64_t **)v3;
    }
    else {
      ++v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1]) {
    goto LABEL_18;
  }
  uint64_t v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0) {
    goto LABEL_18;
  }
  if (v6 < 0) {
    uint64_t v4 = v5;
  }
  long long v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_1C59DE274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E651AB88, MEMORY[0x1E4FBA1C8]);
}

void sub_1C59DE2F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    long long v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    uint64_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *uint64_t v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          uint64_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        uint64_t *v9 = v2;
        *(void *)(v2 + 16) = v9;
        uint64_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *uint64_t v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    unsigned char *v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    uint64_t v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      uint64_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    uint64_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  int v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *int v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    int v6 = result + 1;
    do
    {
      int v7 = *((_DWORD *)v4 + 8);
      int v8 = (uint64_t *)v5[1];
      uint64_t v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_10;
      }
      uint64_t v10 = v5[1];
      uint64_t v11 = v6;
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t *)v10;
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 8) < v7)
      {
LABEL_10:
        if (v8) {
          int v13 = (uint64_t **)v9;
        }
        else {
          int v13 = (uint64_t **)v6;
        }
        if (v8) {
          uint64_t v14 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v14 = (uint64_t **)v6;
        }
        if (*v14) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v6;
        int v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              int v13 = (uint64_t **)v8;
              int v15 = *((_DWORD *)v8 + 8);
              if (v15 <= v7) {
                break;
              }
              int v8 = *v13;
              uint64_t v14 = v13;
              if (!*v13) {
                goto LABEL_25;
              }
            }
            if (v15 >= v7) {
              goto LABEL_29;
            }
            int v8 = v13[1];
            if (!v8)
            {
              uint64_t v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      time_t v16 = operator new(0x38uLL);
      uint64_t v17 = v4[6];
      uint64_t v16[2] = *((_OWORD *)v4 + 2);
      *((void *)v16 + 6) = v17;
      *(void *)time_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v13;
      char *v14 = (uint64_t *)v16;
      uint64_t v18 = *(void *)*v5;
      if (v18)
      {
        uint64_t *v5 = v18;
        size_t v19 = *v14;
      }
      else
      {
        size_t v19 = (uint64_t *)v16;
      }
      __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
      ++v5[2];
LABEL_29:
      uint64_t v20 = (void *)v4[1];
      if (v20)
      {
        do
        {
          xpc_object_t v21 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          xpc_object_t v21 = (void *)v4[2];
          BOOL v12 = *v21 == (void)v4;
          uint64_t v4 = v21;
        }
        while (!v12);
      }
      uint64_t v4 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1C8794F60](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1C8794F70](v13);
  return a1;
}

void sub_1C59DE8C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1C8794F70](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C59DE8A8);
}

void sub_1C59DE91C(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        int v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        int v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0) {
        time_t v16 = __b;
      }
      else {
        time_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1C59DEB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *ABMGetRootVersionString@<X0>(uint64_t a1@<X8>)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BC27D0;
  strcpy(result, "AppleBasebandServices_Manager-1211");
  return result;
}

void ABMServerFactory::create(uint64_t *a1@<X8>)
{
}

void ABMServerFactory::ABMServerFactory(ABMServerFactory *this)
{
  Factory::Factory(this);
  void *v1 = &unk_1F2102888;
}

{
  void *v1;

  Factory::Factory(this);
  void *v1 = &unk_1F2102888;
}

void ABMServerFactory::~ABMServerFactory(ABMServerFactory *this)
{
  Factory::~Factory(this);

  operator delete(v1);
}

void ABMServerFactory::createServiceManager(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  v4[0] = *a1;
  v4[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v3 = ABMServiceManager::create(v4, a2);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v2->__on_zero_shared)(v2, v3);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C59DECE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void ABMServerFactory::createBBServerConnection(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ABMServerFactory::createRouterServer(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = &v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21028D8;
  Factory::Factory((Factory *)&v2[1]);
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2102888;
  *a1 = v4;
  a1[1] = (uint64_t)v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);

  std::__shared_weak_count::__release_weak(v2);
}

void sub_1C59DEEB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ABMServerFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21028D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21028D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ABMServerFactory>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

void sub_1C59DF3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C59DF6F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::function<void ()(BOOL,BOOL,char const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t VoIPCallDelegate::create@<X0>(capabilities::abs *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  capabilities::abs::supportedSARFeatures(a1);
  uint64_t result = capabilities::abs::operator&();
  if (result)
  {
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    a3[1] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v7 = (char *)operator new(0x28uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)uint64_t v7 = &unk_1F21029B8;
    uint64_t result = (uint64_t)std::construct_at[abi:ne180100]<VoIPCallDelegate,dispatch::queue &,std::function<void ()(BOOL,BOOL,char const*)> &,VoIPCallDelegate*>((void ***)v7 + 3, (NSObject **)a1, a2);
    *a3 = v7 + 24;
    a3[1] = v7;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_1C59DF930(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ***VoIPCallDelegate::VoIPCallDelegate(void ***a1, dispatch_object_t *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  uint64_t v6 = a3[3];
  if (!v6) {
    goto LABEL_6;
  }
  if ((void *)v6 != a3)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
LABEL_6:
    time_t v16 = (void *)v6;
    goto LABEL_8;
  }
  time_t v16 = v15;
  (*(void (**)(void *, void *))(*a3 + 24))(a3, v15);
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = (void **)operator new(8uLL);
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v8 = (uint64_t)v16;
  if (!v16) {
    goto LABEL_13;
  }
  if (v16 != v15)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(*v16 + 16))();
LABEL_13:
    uint64_t v18 = (void *)v8;
    goto LABEL_15;
  }
  uint64_t v18 = v17;
  (*(void (**)(void *, void *))(v15[0] + 24))(v15, v17);
LABEL_15:
  *uint64_t v7 = 0;
  int v9 = [VoIPCallObserverImpl alloc];
  uint64_t v10 = (uint64_t)v18;
  if (!v18)
  {
LABEL_18:
    uint64_t v20 = (void *)v10;
    goto LABEL_20;
  }
  if (v18 != v17)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(*v18 + 16))();
    goto LABEL_18;
  }
  uint64_t v20 = v19;
  (*(void (**)(void *, void *))(v17[0] + 24))(v17, v19);
LABEL_20:
  uint64_t v11 = [(VoIPCallObserverImpl *)v9 initWithCallback:v19 queue:v5];
  size_t v12 = *v7;
  *uint64_t v7 = (void *)v11;

  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void))(*v20 + 40))();
  }
  int v13 = (void **)operator new(0x20uLL);
  *int v13 = &unk_1F2102928;
  v13[1] = 0;
  void v13[2] = 0;
  v13[3] = v7;
  *a1 = v7;
  a1[1] = v13;
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
    if (v5) {
LABEL_28:
    }
      dispatch_release(v5);
  }
  else
  {
    if (v18) {
      (*(void (**)(void))(*v18 + 40))();
    }
    if (v5) {
      goto LABEL_28;
    }
  }
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
    if (!v5) {
      return a1;
    }
    goto LABEL_33;
  }
  if (v16) {
    (*(void (**)(void))(*v16 + 40))();
  }
  if (v5) {
LABEL_33:
  }
    dispatch_release(v5);
  return a1;
}

void sub_1C59DFCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v18) {
    dispatch_release(v18);
  }
  operator delete(v20);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v19);
  std::function<void ()(BOOL,BOOL,char const*)>::~function(&a10);
  if (v18)
  {
    dispatch_release(v18);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<VoIPCallObserver *,std::shared_ptr<VoIPCallObserver>::__shared_ptr_default_delete<VoIPCallObserver,VoIPCallObserver>,std::allocator<VoIPCallObserver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<VoIPCallObserver *,std::shared_ptr<VoIPCallObserver>::__shared_ptr_default_delete<VoIPCallObserver,VoIPCallObserver>,std::allocator<VoIPCallObserver>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  if (v1)
  {

    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<VoIPCallObserver *,std::shared_ptr<VoIPCallObserver>::__shared_ptr_default_delete<VoIPCallObserver,VoIPCallObserver>,std::allocator<VoIPCallObserver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC28C9) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC28C9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC28C9)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC28C9 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  operator delete(v1);
}

void std::__shared_ptr_emplace<VoIPCallDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21029B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<VoIPCallDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21029B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<VoIPCallDelegate>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ***std::construct_at[abi:ne180100]<VoIPCallDelegate,dispatch::queue &,std::function<void ()(BOOL,BOOL,char const*)> &,VoIPCallDelegate*>(void ***a1, NSObject **a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  dispatch_object_t v8 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = a3[3];
  if (!v6) {
    goto LABEL_6;
  }
  if ((void *)v6 != a3)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
LABEL_6:
    uint64_t v10 = (void *)v6;
    goto LABEL_8;
  }
  uint64_t v10 = v9;
  (*(void (**)(void *, void *))(*a3 + 24))(a3, v9);
LABEL_8:
  VoIPCallDelegate::VoIPCallDelegate(a1, &v8, v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
    if (!v5) {
      return a1;
    }
    goto LABEL_12;
  }
  if (v10) {
    (*(void (**)(void *))(*v10 + 40))(v10);
  }
  if (v5) {
LABEL_12:
  }
    dispatch_release(v5);
  return a1;
}

void sub_1C59E0154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  _Unwind_Resume(exception_object);
}

void OBDManager::create(char *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, OBDManager **a5@<X8>)
{
  uint64_t v28 = (OBDManager *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (OBDManager *)operator new(0x80uLL);
  uint64_t v11 = *a2;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v12 = a3[1];
  uint64_t v25 = *a3;
  uint64_t v26 = (std::__shared_weak_count *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *a4;
  uint64_t v14 = (std::__shared_weak_count *)a4[1];
  v24[0] = v13;
  v24[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OBDManager::OBDManager((uint64_t)v10, a1, &object, &v25, v24);
  uint64_t v28 = v10;
  *(void *)long long buf = v10;
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = &v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2102A98;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  unint64_t v29 = (unint64_t)v15;
  *(void *)long long buf = 0;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v10 + 2);
  if (!v17)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v10 + 1) = v10;
    *((void *)v10 + 2) = v15;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v17->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v10 + 1) = v10;
    *((void *)v10 + 2) = v15;
    std::__shared_weak_count::__release_weak(v17);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_12:
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_13:
  if (*(void *)buf)
  {
    OBDManager::~OBDManager(*(OBDManager **)buf);
    operator delete(v18);
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v19 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v20 = v28;
  if (v28 && OBDManager::init(v28))
  {
    unint64_t v21 = v29;
    *a5 = v20;
    a5[1] = (OBDManager *)v21;
    return;
  }
  int v22 = GetOsLogContext()[1];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v22, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager!", buf, 2u);
    *a5 = 0;
    a5[1] = 0;
    size_t v23 = (std::__shared_weak_count *)v29;
    if (!v29) {
      return;
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    size_t v23 = (std::__shared_weak_count *)v29;
    if (!v29) {
      return;
    }
  }
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1C59E0498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C59E04B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::unique_ptr<OBDManager>::~unique_ptr[abi:ne180100]((OBDManager **)va2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v2) {
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

BOOL OBDManager::init(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2)
  {
    uint64_t v9 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      return v2 != 0;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v10 = "Audio Manager is null pointer!";
LABEL_30:
    _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
    return v2 != 0;
  }
  uint64_t v3 = (void *)*((void *)this + 8);
  if (!v3)
  {
    uint64_t v9 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      return v2 != 0;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v10 = "On-Body handler is not created";
    goto LABEL_30;
  }
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = (void *)*((void *)this + 8);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10OBDManager4initEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e11_v16__0i8i12l;
  void aBlock[4] = this;
  void aBlock[5] = v4;
  uint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v15 = v6;
  time_t v16 = v7;
  dispatch_object_t v8 = (void **)v3[4];
  if ((unint64_t)v8 >= v3[5])
  {
    uint64_t v12 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v3 + 3, (uint64_t)&v15);
    uint64_t v7 = v16;
    v3[4] = v12;
    if (!v7) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v6)
  {
    *dispatch_object_t v8 = _Block_copy(v6);
    v8[1] = v7;
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *dispatch_object_t v8 = 0;
  v8[1] = v7;
  if (v7) {
LABEL_12:
  }
    dispatch_retain(v7);
LABEL_13:
  v3[4] = v8 + 2;
  if (v7) {
LABEL_14:
  }
    dispatch_release(v7);
LABEL_15:
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return v2 != 0;
}

void sub_1C59E06E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback((uint64_t)&a17);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (!v17) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

uint64_t OBDManager::OBDManager(uint64_t a1, char *__s, NSObject **a3, uint64_t *a4, void *a5)
{
  size_t v10 = strlen(__s);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10) {
LABEL_8:
  }
    memcpy(p_dst, __s, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  uint64_t v15 = std::string::append(&__dst, ".", 1uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = std::string::append(&v35, "OBDManager", 0xAuLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  int64_t v37 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v37 >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, "com.apple.telephony.abm", (const char *)v19);
  if (SHIBYTE(v37) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    unint64_t v21 = *a3;
    *(void *)(a1 + 24) = *a3;
    if (!v21) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_36:
  operator delete(__dst.__r_.__value_.__l.__data_);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v21 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v21) {
LABEL_16:
  }
    dispatch_retain(v21);
LABEL_17:
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = *a5;
  *(_WORD *)(a1 + 32) = 257;
  uint64_t v22 = a5[1];
  *(void *)(a1 + 72) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *a4;
  *(void *)(a1 + 104) = *a4;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0;
  uint64_t v24 = a4[1];
  *(void *)(a1 + 112) = v24;
  if (v24)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    uint64_t v23 = *(void *)(a1 + 104);
  }
  if (!v23)
  {
    AudioManager::create((AudioManager *)__s, (AudioManager **)__p);
    long long v30 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    tm v31 = *(std::__shared_weak_count **)(a1 + 112);
    *(_OWORD *)(a1 + 104) = v30;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    time_t v32 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (!*(void *)(a1 + 64))
  {
    uint64_t v25 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v25;
    if (v25) {
      dispatch_retain(v25);
    }
    CMOnBodyDelegate::create(&object, v20, __p);
    long long v26 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v27 = *(std::__shared_weak_count **)(a1 + 72);
    *(_OWORD *)(a1 + 64) = v26;
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    uint64_t v28 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    unint64_t v21 = object;
    if (object) {
      dispatch_release(object);
    }
  }
  *(_DWORD *)(a1 + 120) = capabilities::txpower::supportedControlInput((capabilities::txpower *)v21);
  return a1;
}

void sub_1C59E0ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v12);
    uint64_t v14 = v9[12];
    if (!v14)
    {
LABEL_3:
      uint64_t v15 = v9[10];
      if (!v15) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v12);
    uint64_t v14 = v9[12];
    if (!v14) {
      goto LABEL_3;
    }
  }
  dispatch_release(v14);
  uint64_t v15 = v9[10];
  if (!v15)
  {
LABEL_4:
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::~vector[abi:ne180100](v10);
    long long v16 = v9[3];
    if (!v16) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  dispatch_release(v15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
  std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::~vector[abi:ne180100](v10);
  long long v16 = v9[3];
  if (!v16)
  {
LABEL_5:
    uint64_t v17 = (std::__shared_weak_count *)v9[2];
    if (!v17) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_11:
  dispatch_release(v16);
  uint64_t v17 = (std::__shared_weak_count *)v9[2];
  if (!v17)
  {
LABEL_7:
    MEMORY[0x1C8794100](v9);
    _Unwind_Resume(a1);
  }
LABEL_6:
  std::__shared_weak_count::__release_weak(v17);
  goto LABEL_7;
}

void sub_1C59E0B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if (a15 < 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void **std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 1);
        if (v5) {
          dispatch_release(v5);
        }
        uint64_t v6 = (const void *)*((void *)v3 - 2);
        if (v6) {
          _Block_release(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void OBDManager::~OBDManager(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 12);
    *((void *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      uint64_t v4 = *((void *)this + 12);
      *((void *)this + 12) = 0;
      if (v4) {
        dispatch_release(v4);
      }
    }
  }
  if (*((void *)this + 8))
  {
    uint64_t v5 = *((void *)this + 10);
    if (v5)
    {
      dispatch_source_cancel(v5);
      uint64_t v6 = *((void *)this + 10);
      *((void *)this + 10) = 0;
      if (v6)
      {
        dispatch_release(v6);
        uint64_t v7 = *((void *)this + 10);
        *((void *)this + 10) = 0;
        if (v7) {
          dispatch_release(v7);
        }
      }
    }
    CMOnBodyDelegate::stopMotionDetection(*((CMOnBodyDelegate **)this + 8));
  }
  uint64_t v8 = *((void *)this + 5);
  for (uint64_t i = *((void *)this + 6); i != v8; i -= 16)
  {
    size_t v10 = *(NSObject **)(i - 8);
    if (v10) {
      dispatch_release(v10);
    }
    uint64_t v11 = *(const void **)(i - 16);
    if (v11) {
      _Block_release(v11);
    }
  }
  *((void *)this + 6) = v8;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 14);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  uint64_t v15 = *((void *)this + 12);
  if (v15) {
    dispatch_release(v15);
  }
  long long v16 = *((void *)this + 10);
  if (v16) {
    dispatch_release(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    long long v18 = (char *)*((void *)this + 5);
    if (!v18) {
      goto LABEL_43;
    }
  }
  else
  {
    long long v18 = (char *)*((void *)this + 5);
    if (!v18) {
      goto LABEL_43;
    }
  }
  uint64_t v19 = (char *)*((void *)this + 6);
  queue v20 = v18;
  if (v19 != v18)
  {
    do
    {
      unint64_t v21 = *((void *)v19 - 1);
      if (v21) {
        dispatch_release(v21);
      }
      uint64_t v22 = (const void *)*((void *)v19 - 2);
      if (v22) {
        _Block_release(v22);
      }
      v19 -= 16;
    }
    while (v19 != v18);
    queue v20 = (char *)*((void *)this + 5);
  }
  *((void *)this + 6) = v18;
  operator delete(v20);
LABEL_43:
  uint64_t v23 = *((void *)this + 3);
  if (v23) {
    dispatch_release(v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }

  JUMPOUT(0x1C8794100);
}

void OBDManager::stopOBDTimer(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 12);
    *((void *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      uint64_t v4 = *((void *)this + 12);
      *((void *)this + 12) = 0;
      if (v4)
      {
        dispatch_release(v4);
      }
    }
  }
}

void OBDManager::stopCoreMotionCallbackWatchdog(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 10);
    *((void *)this + 10) = 0;
    if (v3)
    {
      dispatch_release(v3);
      uint64_t v4 = *((void *)this + 10);
      *((void *)this + 10) = 0;
      if (v4)
      {
        dispatch_release(v4);
      }
    }
  }
}

void ___ZN10OBDManager4initEv_block_invoke(void *a1, unsigned int a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a1[5];
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v10)
      {
        uint64_t v11 = *(NSObject **)v7;
        if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 2) {
            uint64_t v12 = "Unknown";
          }
          else {
            uint64_t v12 = off_1E651AD58[a2];
          }
          uint64_t v13 = "Confidence Level Unknown";
          if (a3 == 1) {
            uint64_t v13 = "Confidence Level High";
          }
          if (!a3) {
            uint64_t v13 = "Confidence Level Low";
          }
          int v15 = 136315394;
          long long v16 = v12;
          __int16 v17 = 2080;
          long long v18 = v13;
          _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I On Body Callback: OnBody: %s, confidence: %s", (uint8_t *)&v15, 0x16u);
        }
        *(_DWORD *)(v7 + 88) = a2;
        if (*(void *)(v7 + 96))
        {
          OBDManager::startCoreMotionCallbackWatchdog((OBDManager *)v7);
        }
        else
        {
          uint64_t v14 = *(NSObject **)v7;
          if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v15) = 0;
            _os_log_error_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_ERROR, "OBD has not started yet!", (uint8_t *)&v15, 2u);
          }
        }
      }
    }
  }
}

void OBDManager::startCoreMotionCallbackWatchdog(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 10);
    *((void *)this + 10) = 0;
    if (v3)
    {
      dispatch_release(v3);
      uint64_t v4 = *((void *)this + 10);
      *((void *)this + 10) = 0;
      if (v4) {
        dispatch_release(v4);
      }
    }
  }
  uint64_t v5 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *((dispatch_queue_t *)this + 3));
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = v5;
  if (v6)
  {
    dispatch_release(v6);
    uint64_t v5 = *((void *)this + 10);
  }
  dispatch_time_t v7 = dispatch_time(0, 5120000000);
  dispatch_source_set_timer(v5, v7, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v8 = *((void *)this + 1);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *((void *)this + 10);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3321888768;
  handler[2] = ___ZN10OBDManager31startCoreMotionCallbackWatchdogEv_block_invoke;
  handler[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e5_v8__0l;
  handler[4] = this;
  handler[5] = v8;
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(*((dispatch_object_t *)this + 10));
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t OBDManager::getOBDState(OBDManager *this)
{
  return *((unsigned __int8 *)this + 32);
}

void *OBDManager::registerCallback(void *a1, void **a2)
{
  uint64_t v4 = (void *)a1[6];
  if ((unint64_t)v4 >= a1[7])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)> const&>(a1 + 5, (uint64_t)a2);
    a1[6] = result;
  }
  else
  {
    uint64_t v5 = *a2;
    if (*a2) {
      uint64_t v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[6] = v4 + 2;
  }
  return result;
}

void OBDManager::start(OBDManager *this, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 12))
  {
    uint64_t v4 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I WARNING - OBD Manager has started already!", (uint8_t *)&v6, 2u);
    }
  }
  if (*((void *)this + 8))
  {
    OBDManager::startCoreMotionCallbackWatchdog(this);
    CMOnBodyDelegate::startMotionDetection(*((CMOnBodyDelegate **)this + 8));
  }
  OBDManager::startOBDTimer((uint64_t)this, a2);
  uint64_t v5 = *(NSObject **)this;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    uint64_t v7 = a2;
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Core Motion OnBody Detection is starting with %lld msec", (uint8_t *)&v6, 0xCu);
  }
}

void OBDManager::startOBDTimer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 96);
  if (v4)
  {
    dispatch_source_cancel(v4);
    uint64_t v5 = *(NSObject **)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v5)
    {
      dispatch_release(v5);
      int v6 = *(NSObject **)(a1 + 96);
      *(void *)(a1 + 96) = 0;
      if (v6) {
        dispatch_release(v6);
      }
    }
  }
  uint64_t v7 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 24));
  uint64_t v8 = *(NSObject **)(a1 + 96);
  *(void *)(a1 + 96) = v7;
  if (v8)
  {
    dispatch_release(v8);
    uint64_t v7 = *(NSObject **)(a1 + 96);
  }
  dispatch_time_t v9 = dispatch_time(0, 1000000 * a2);
  dispatch_source_set_timer(v7, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(NSObject **)(a1 + 96);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3321888768;
  void v13[2] = ___ZN10OBDManager13startOBDTimerENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000EEEEE_block_invoke;
  v13[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e5_v8__0l;
  v13[4] = a1;
  v13[5] = v10;
  uint64_t v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = a2;
  dispatch_source_set_event_handler(v12, v13);
  dispatch_activate(*(dispatch_object_t *)(a1 + 96));
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void OBDManager::stop(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 12);
    *((void *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      uint64_t v4 = *((void *)this + 12);
      *((void *)this + 12) = 0;
      if (v4) {
        dispatch_release(v4);
      }
    }
  }
  if (*((void *)this + 8))
  {
    uint64_t v5 = *((void *)this + 10);
    if (v5)
    {
      dispatch_source_cancel(v5);
      int v6 = *((void *)this + 10);
      *((void *)this + 10) = 0;
      if (v6)
      {
        dispatch_release(v6);
        uint64_t v7 = *((void *)this + 10);
        *((void *)this + 10) = 0;
        if (v7) {
          dispatch_release(v7);
        }
      }
    }
    uint64_t v8 = (CMOnBodyDelegate *)*((void *)this + 8);
    CMOnBodyDelegate::stopMotionDetection(v8);
  }
}

void ___ZN10OBDManager31startCoreMotionCallbackWatchdogEv_block_invoke(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (os_log_t *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        uint64_t v7 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 134217984;
          uint64_t v9 = 5120;
          _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I WARNING - Motion did not report the callback in %llu milli-seconds", (uint8_t *)&v8, 0xCu);
        }
      }
    }
  }
}

void ___ZN10OBDManager13startOBDTimerENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000EEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      __int16 v17 = a1;
      if (config::hw::iPad((config::hw *)v4))
      {
        OBDManager::updateOBDState_iPad((OBDManager *)v3);
        uint64_t v7 = *(void *)(v3 + 40);
        uint64_t v8 = *(void *)(v3 + 48);
        if (v7 != v8) {
          goto LABEL_13;
        }
        goto LABEL_32;
      }
      OBDManager::updateOBDState_iPhone((OBDManager *)v3);
      uint64_t v7 = *(void *)(v3 + 40);
      uint64_t v8 = *(void *)(v3 + 48);
      if (v7 == v8)
      {
LABEL_32:
        uint64_t v15 = *(NSObject **)(v3 + 96);
        dispatch_time_t v16 = dispatch_time(0, 1000000 * v17[7]);
        dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
        return;
      }
LABEL_13:
      while (*(void *)v7)
      {
        uint64_t v9 = _Block_copy(*(const void **)v7);
        uint64_t v10 = *(NSObject **)(v7 + 8);
        if (v10) {
          goto LABEL_15;
        }
LABEL_16:
        char v11 = *(unsigned char *)(v3 + 32);
        char v12 = *(unsigned char *)(v3 + 33);
        if (v9) {
          uint64_t v13 = _Block_copy(v9);
        }
        else {
          uint64_t v13 = 0;
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3321888768;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3sar8OBDStateENS1_10TunerStateEEEclIJS2_S3_EEEvDpT__block_invoke;
        block[3] = &__block_descriptor_42_e8_32c74_ZTSN8dispatch5blockIU13block_pointerFvN3sar8OBDStateENS1_10TunerStateEEEE_e5_v8__0l;
        if (v13) {
          uint64_t v14 = _Block_copy(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        aBlock = v14;
        char v20 = v11;
        char v21 = v12;
        dispatch_async(v10, block);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v13) {
          _Block_release(v13);
        }
        if (v10) {
          dispatch_release(v10);
        }
        if (v9) {
          _Block_release(v9);
        }
        v7 += 16;
        if (v7 == v8) {
          goto LABEL_32;
        }
      }
      uint64_t v9 = 0;
      uint64_t v10 = *(NSObject **)(v7 + 8);
      if (!v10) {
        goto LABEL_16;
      }
LABEL_15:
      dispatch_retain(v10);
      goto LABEL_16;
    }
  }
}

void OBDManager::updateOBDState(OBDManager *this)
{
  if (config::hw::iPad(this))
  {
    OBDManager::updateOBDState_iPad(this);
  }
  else
  {
    OBDManager::updateOBDState_iPhone(this);
  }
}

void OBDManager::setMotionParameter(uint64_t a1, ctu **a2)
{
  if (*(void *)(a1 + 64))
  {
    ctu::xpc_to_cf((uint64_t *)&cf, *a2, a2);
    CFTypeRef v3 = cf;
    if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v7 = v3;
      CFRetain(v3);
      CFTypeRef v5 = cf;
      if (!cf)
      {
LABEL_8:
        CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(a1 + 64), v3);
        if (v3) {
          CFRelease(v3);
        }
        return;
      }
    }
    else
    {
      CFTypeRef v3 = 0;
      CFTypeRef v7 = 0;
      CFTypeRef v5 = cf;
      if (!cf) {
        goto LABEL_8;
      }
    }
    CFRelease(v5);
    goto LABEL_8;
  }
}

void sub_1C59E1B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C59E1B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void OBDManager::updateOBDState_iPad(OBDManager *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *((_WORD *)this + 16) = 257;
  if (capabilities::txpower::operator&() && !*((_DWORD *)this + 22))
  {
    *((_WORD *)this + 16) = 0;
    uint64_t v2 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
  }
  uint64_t v3 = *((int *)this + 22);
  if (v3 > 2) {
    CFTypeID v4 = "Unknown";
  }
  else {
    CFTypeID v4 = off_1E651AD58[v3];
  }
  uint64_t v5 = sar::toString();
  uint64_t v6 = sar::toString();
  int v7 = capabilities::txpower::operator&();
  uint64_t v8 = "YES";
  int v9 = 136315906;
  uint64_t v10 = v4;
  __int16 v11 = 2080;
  if (!v7) {
    uint64_t v8 = "NO";
  }
  uint64_t v12 = v5;
  __int16 v13 = 2080;
  uint64_t v14 = v6;
  __int16 v15 = 2080;
  dispatch_time_t v16 = v8;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Motion Status: %s. Notifying OBD State: %s, Tuner State: %s, Motion Status as an input: %s", (uint8_t *)&v9, 0x2Au);
}

void OBDManager::updateOBDState_iPhone(OBDManager *this)
{
  uint64_t v1 = this;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(*((void *)this + 13) + 56);
  *((unsigned char *)this + 32) = 1;
  if (v2)
  {
    if (v2 == 1)
    {
      *((_WORD *)this + 16) = 256;
      uint64_t v3 = *(NSObject **)this;
      if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      goto LABEL_15;
    }
    this = (OBDManager *)capabilities::txpower::operator&();
    if (this)
    {
      if (!*((_DWORD *)v1 + 22)) {
        goto LABEL_13;
      }
    }
  }
  if (capabilities::txpower::supportsMotionAlways(this)
    && capabilities::txpower::operator&()
    && !*((_DWORD *)v1 + 22))
  {
LABEL_13:
    *((unsigned char *)v1 + 32) = 0;
    CFTypeID v4 = (char *)v1 + 33;
  }
  else
  {
    *((unsigned char *)v1 + 33) = 1;
    CFTypeID v4 = (char *)v1 + 33;
    if (*((_DWORD *)v1 + 22))
    {
      uint64_t v3 = *(NSObject **)v1;
      if (!os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      goto LABEL_15;
    }
  }
  unsigned char *v4 = 0;
  uint64_t v3 = *(NSObject **)v1;
  if (!os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEFAULT)) {
    return;
  }
LABEL_15:
  unint64_t v5 = *(char *)(*((void *)v1 + 13) + 56);
  if (v5 > 3)
  {
    uint64_t v6 = "Unknown Audio Output";
    uint64_t v7 = *((int *)v1 + 22);
    if (v7 > 2) {
      goto LABEL_17;
    }
LABEL_19:
    uint64_t v8 = off_1E651AD58[v7];
    goto LABEL_20;
  }
  uint64_t v6 = off_1E651AD38[v5];
  uint64_t v7 = *((int *)v1 + 22);
  if (v7 <= 2) {
    goto LABEL_19;
  }
LABEL_17:
  uint64_t v8 = "Unknown";
LABEL_20:
  uint64_t v9 = sar::toString();
  uint64_t v10 = sar::toString();
  int v11 = capabilities::txpower::operator&();
  int v13 = 136316162;
  uint64_t v12 = "YES";
  uint64_t v14 = v6;
  __int16 v15 = 2080;
  if (!v11) {
    uint64_t v12 = "NO";
  }
  dispatch_time_t v16 = v8;
  __int16 v17 = 2080;
  uint64_t v18 = v9;
  __int16 v19 = 2080;
  uint64_t v20 = v10;
  __int16 v21 = 2080;
  uint64_t v22 = v12;
  _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Audio Output: %s, Motion Status: %s. Notifying OBD State: %s, Tuner State: %s, Motion Status as an input: %s", (uint8_t *)&v13, 0x34u);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void *std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)> const&>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = (v2 >> 4) + 1;
  if (v3 >> 60) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (!v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v8 = (char *)operator new(16 * v7);
  uint64_t v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    uint64_t v9 = _Block_copy(v9);
LABEL_13:
  uint64_t v10 = *(NSObject **)(a2 + 8);
  int v11 = &v8[16 * (v2 >> 4)];
  *(void *)int v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v12 = &v8[16 * v7];
  int v13 = v11 + 16;
  uint64_t v14 = (char *)*a1;
  __int16 v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    uint64_t v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    __int16 v17 = &v11[-v28];
    unint64_t v29 = &v15[-v28];
    long long v30 = (double *)(v11 - 32);
    tm v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)tm v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    int v11 = v17;
    __int16 v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      __int16 v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)__int16 v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    __int16 v15 = (char *)*a1;
    __int16 v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      uint64_t v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      __int16 v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]()
{
}

OBDManager **std::unique_ptr<OBDManager>::~unique_ptr[abi:ne180100](OBDManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    OBDManager::~OBDManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(OBDManager **)(a1 + 24);
  if (v1)
  {
    OBDManager::~OBDManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC2A23) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC2A23 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC2A23)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC2A23 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN3sar8OBDStateENS1_10TunerStateEEEclIJS2_S3_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void *__copy_helper_block_e8_32c74_ZTSN8dispatch5blockIU13block_pointerFvN3sar8OBDStateENS1_10TunerStateEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c74_ZTSN8dispatch5blockIU13block_pointerFvN3sar8OBDStateENS1_10TunerStateEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t data::TransportService::ThrottlingConfig::asString@<X0>(data::TransportService::ThrottlingConfig *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[7] = v4;
  v23[8] = v4;
  v23[5] = v4;
  void v23[6] = v4;
  v23[3] = v4;
  v23[4] = v4;
  v23[1] = v4;
  v23[2] = v4;
  long long v22 = v4;
  v23[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v21 = v4;
  long long v18 = v4;
  *(_OWORD *)__src = v4;
  long long v16 = v4;
  long long v17 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"enabled ", 8);
  uint64_t v6 = "???";
  if (!*(_DWORD *)this) {
    uint64_t v6 = "Disabled";
  }
  if (*(_DWORD *)this == 1) {
    unint64_t v7 = "Enabled";
  }
  else {
    unint64_t v7 = v6;
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  if (*(_DWORD *)this == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)", timeout ", 10);
    std::ostream::operator<<();
  }
  if ((BYTE8(v22) & 0x10) != 0)
  {
    uint64_t v10 = (unsigned char *)v22;
    if ((void *)v22 < __src[1])
    {
      *(void **)&long long v22 = __src[1];
      uint64_t v10 = __src[1];
    }
    int v11 = __src[0];
    size_t v9 = v10 - (char *)__src[0];
    if ((unint64_t)(v10 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_25;
    }
  }
  else
  {
    if ((BYTE8(v22) & 8) == 0)
    {
      size_t v9 = 0;
      a2[23] = 0;
      goto LABEL_21;
    }
    int v11 = (const void *)*((void *)&v17 + 1);
    size_t v9 = *((void *)&v18 + 1) - *((void *)&v17 + 1);
    if (*((void *)&v18 + 1) - *((void *)&v17 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_25:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v14 = operator new(v12 + 1);
    *((void *)a2 + 1) = v9;
    *((void *)a2 + 2) = v13 | 0x8000000000000000;
    *(void *)a2 = v14;
    a2 = v14;
    goto LABEL_20;
  }
  a2[23] = v9;
  if (v9) {
LABEL_20:
  }
    memmove(a2, v11, v9);
LABEL_21:
  a2[v9] = 0;
  *(void *)&long long v16 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v16 + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v16 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8795140](v23);
}

void sub_1C59E2604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  unint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1C59E2788(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1C8795140](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8795140](a1 + 112);
  return a1;
}

void *data::TransportService::TransportService(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

dispatch_object_t *data::TransportService::TransportService(dispatch_object_t *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  unint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::TransportService::State::create((capabilities::abs *)&v6, a1);
  uint64_t v4 = v7;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  unint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::TransportService::State::create((capabilities::abs *)&v6, a1);
  uint64_t v4 = v7;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C59E297C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void data::TransportService::State::create(capabilities::abs *a1@<X0>, dispatch_object_t *a2@<X8>)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::abs::supportsDataTransportService(a1))
  {
    uint64_t v4 = (char *)operator new(0xA8uLL);
    unint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 1);
    uint64_t v115 = *(void *)a1;
    uint64_t v116 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BYTE7(v133) = 12;
    strcpy(label, "ipc.svc.data");
    BYTE7(v123) = 12;
    strcpy((char *)__p, "ipc.svc.data");
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&object, "com.apple.telephony.abm", (const char *)__p);
    uint64_t v6 = dispatch_queue_create(label, 0);
    *((void *)v4 + 9) = 0;
    *((void *)v4 + 10) = 0;
    *((void *)v4 + 11) = v6;
    if (v6)
    {
      unint64_t v7 = v6;
      dispatch_retain(v6);
      *((void *)v4 + 12) = 0;
      dispatch_release(v7);
    }
    else
    {
      *((void *)v4 + 12) = 0;
    }
    *(void *)uint64_t v4 = &unk_1F2102C78;
    ctu::OsLogContext::OsLogContext();
    ctu::OsLogContext::OsLogContext();
    ctu::LoggerCommonBase::LoggerCommonBase();
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)aBlock);
    *((void *)v4 + 1) = &unk_1F2102CB8;
    *((void *)v4 + 7) = v115;
    *((void *)v4 + 8) = v116;
    if (v116) {
      atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v128);
    *(void *)uint64_t v4 = &unk_1F2102C38;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&object);
    if (SBYTE7(v123) < 0)
    {
      operator delete(__p[0]);
      if ((SBYTE7(v133) & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((SBYTE7(v133) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)label);
LABEL_11:
    *(void *)uint64_t v4 = &unk_1F2102B68;
    *((_DWORD *)v4 + 28) = 0;
    *((void *)v4 + 15) = v4 + 120;
    *((void *)v4 + 16) = v4 + 120;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *((void *)v4 + 13) = 0x2D00000000;
    dispatch_object_t v126 = (dispatch_object_t)v4;
    uint64_t v127 = (void *)0xAAAAAAAAAAAAAAAALL;
    size_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = &v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2102B18;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    uint64_t v127 = v8;
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v4 + 10);
    if (v10)
    {
      if (v10->__shared_owners_ != -1
        || (atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed),
            atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed),
            *((void *)v4 + 9) = v4,
            *((void *)v4 + 10) = v8,
            std::__shared_weak_count::__release_weak(v10),
            atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)))
      {
LABEL_19:
        dispatch_object_t v11 = v126;
        if (v126[7].isa)
        {
          isa = (std::__shared_weak_count *)v126[10].isa;
          if (!isa || (Class v13 = v126[9].isa, (v14 = std::__shared_weak_count::lock(isa)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          __int16 v15 = v14;
          *(void *)label = v13;
          *(void *)&label[8] = v14;
          ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)&v11[1]);
          __p[0] = v13;
          __p[1] = v15;
          memset(label, 0, sizeof(label));
          ctu::TrackedLogger::registerLoggerToServer();
          long long v16 = (std::__shared_weak_count *)__p[1];
          if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          long long v17 = *(std::__shared_weak_count **)&label[8];
          if (*(void *)&label[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&label[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          dispatch_object_t v11 = v126;
        }
        long long v18 = v127;
        dispatch_object_t v126 = 0;
        uint64_t v127 = 0;
        *a2 = v11;
        a2[1] = v18;
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
        __int16 v19 = *a2;
        uint64_t v20 = (*a2)[5].isa;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)label = 0;
          _os_log_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEFAULT, "#I Inited", (uint8_t *)label, 2u);
        }
        pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
        uint64_t v21 = xmmword_1EBBDCAF8;
        if (!(void)xmmword_1EBBDCAF8)
        {
          memset(label, 170, sizeof(label));
          long long v22 = (sys::UIObserver *)operator new(0x40uLL);
          sys::UIObserver::UIObserver(v22);
          std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)label, (std::__shared_weak_count_vtbl *)v22);
          long long v23 = *(_OWORD *)label;
          memset(label, 0, sizeof(label));
          unint64_t v24 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCAF8 + 1);
          xmmword_1EBBDCAF8 = v23;
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          BOOL v25 = *(std::__shared_weak_count **)&label[8];
          if (*(void *)&label[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&label[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
          uint64_t v21 = xmmword_1EBBDCAF8;
        }
        unint64_t v118 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCAF8 + 1);
        if (*((void *)&xmmword_1EBBDCAF8 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDCAF8 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke;
        aBlock[3] = &__block_descriptor_tmp;
        void aBlock[4] = v19 + 9;
        void aBlock[5] = data::TransportService::State::handleUILockStateChange_sync;
        void aBlock[6] = 0;
        long long v26 = _Block_copy(aBlock);
        uint64_t v112 = v21;
        uint64_t v27 = (std::__shared_weak_count *)v19[10];
        if (!v27 || (uint64_t v28 = v19[9], (v114 = std::__shared_weak_count::lock(v27)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        unint64_t v29 = v19[11];
        dispatch_object_t v120 = v29;
        std::string v111 = v26;
        if (v26) {
          long long v30 = _Block_copy(v26);
        }
        else {
          long long v30 = 0;
        }
        unint64_t v121 = v30;
        dispatch_retain(v29);
        *(_OWORD *)std::string __p = 0u;
        long long v123 = 0u;
        dispatch_object_t v126 = v29;
        if (v30) {
          long long v30 = _Block_copy(v30);
        }
        uint64_t v127 = v30;
        dispatch_retain(v29);
        dispatch_object_t object = v29;
        std::string v110 = v19;
        if (v30)
        {
          tm v31 = _Block_copy(v30);
          uint64_t v131 = v31;
          dispatch_retain(v29);
          if (v31)
          {
            uint64_t v32 = _Block_copy(v31);
            dispatch_retain(v29);
            int v128 = 0;
            if (v32)
            {
              float64x2x2_t v33 = _Block_copy(v32);
              dispatch_retain(v29);
              if (v33)
              {
                long long v34 = _Block_copy(v33);
                dispatch_retain(v29);
                if (v34)
                {
                  uint64_t v113 = v34;
                  std::string v35 = _Block_copy(v34);
                  dispatch_retain(v29);
                  std::string v109 = v32;
                  if (v35)
                  {
                    long long v36 = _Block_copy(v35);
                    dispatch_retain(v29);
                    v129[0] = v29;
                    if (v36)
                    {
                      uint64_t v37 = v28;
                      unint64_t v38 = _Block_copy(v36);
                      char v39 = 0;
                      char v40 = 0;
                      char v41 = 0;
                      char v42 = 0;
                      char v43 = 0;
                      goto LABEL_66;
                    }
                    uint64_t v37 = v28;
                    char v39 = 0;
                    char v40 = 0;
                    char v41 = 0;
                    char v42 = 0;
                    unint64_t v38 = 0;
LABEL_65:
                    char v43 = 1;
LABEL_66:
                    v129[1] = v38;
                    dispatch_retain(v29);
                    dispatch_release(v29);
                    if ((v43 & 1) == 0) {
                      _Block_release(v36);
                    }
                    dispatch_release(v29);
                    if ((v42 & 1) == 0) {
                      _Block_release(v35);
                    }
                    dispatch_release(v29);
                    if ((v41 & 1) == 0) {
                      _Block_release(v113);
                    }
                    int v128 = (uint64_t *)boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>)::stored_vtable;
                    dispatch_release(v29);
                    if ((v40 & 1) == 0) {
                      _Block_release(v33);
                    }
                    dispatch_release(v29);
                    if ((v39 & 1) == 0) {
                      _Block_release(v109);
                    }
                    *(void *)&long long v133 = 0xAAAAAAAAAAAAAAAALL;
                    *((void *)&v133 + 1) = 0xAAAAAAAAAAAAAAAALL;
                    *(void *)label = 0;
                    *(void *)&label[8] = 0xAAAAAAAAAAAAAAAALL;
                    boost::function1<void,BOOL>::move_assign((uint64_t)label, (uint64_t *)&v128);
                    boost::function1<void,BOOL>::move_assign((uint64_t)&v128, (uint64_t *)&v123 + 1);
                    boost::function1<void,BOOL>::move_assign((uint64_t)&v123 + 8, (uint64_t *)label);
                    if (*(void *)label)
                    {
                      if ((label[0] & 1) == 0)
                      {
                        std::string v44 = *(void (**)(char *, char *, uint64_t))(*(void *)label & 0xFFFFFFFFFFFFFFFELL);
                        if (v44) {
                          v44(&label[8], &label[8], 2);
                        }
                      }
                    }
                    if (v128)
                    {
                      if ((v128 & 1) == 0)
                      {
                        long long v45 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v128 & 0xFFFFFFFFFFFFFFFELL);
                        if (v45) {
                          v45((uint64_t)v129, v129, 2u);
                        }
                      }
                      int v128 = 0;
                    }
                    dispatch_release(object);
                    if (v131) {
                      _Block_release(v131);
                    }
                    dispatch_release(v126);
                    if (v127) {
                      _Block_release(v127);
                    }
                    atomic_fetch_add_explicit(&v114->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    long long v46 = operator new(0x18uLL);
                    *long long v46 = &unk_1F2102EA0;
                    v46[1] = v37;
                    v46[2] = v114;
                    atomic_fetch_add_explicit(&v114->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    long long v47 = operator new(0x18uLL);
                    void *v47 = &unk_1F2102EA0;
                    v47[1] = v37;
                    xpc_object_t v47[2] = v114;
                    atomic_fetch_add_explicit(&v114->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    *(void *)&label[8] = v47;
                    *(_DWORD *)label = 2;
                    uint64_t v48 = __p[1];
                    if (__p[1] >= (void *)v123)
                    {
                      std::string::size_type v50 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)__p, (uint64_t)label);
                    }
                    else
                    {
                      uint64_t v49 = operator new(0x18uLL);
                      *uint64_t v49 = &unk_1F2102EA0;
                      v49[1] = v37;
                      v49[2] = v114;
                      atomic_fetch_add_explicit(&v114->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                      v48[1] = v49;
                      *(_DWORD *)uint64_t v48 = 2;
                      std::string::size_type v50 = v48 + 3;
                    }
                    __p[1] = v50;
                    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)label);
                    (*(void (**)(void *))(*v46 + 8))(v46);
                    std::__shared_weak_count::__release_weak(v114);
                    uint64_t v51 = *(uint64_t ***)(v112 + 40);
                    *(void *)&long long v52 = 0xAAAAAAAAAAAAAAAALL;
                    *((void *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
                    long long v140 = v52;
                    long long v141 = v52;
                    long long v138 = v52;
                    long long v139 = v52;
                    long long v136 = v52;
                    long long v137 = v52;
                    long long v134 = v52;
                    long long v135 = v52;
                    *(_OWORD *)label = v52;
                    long long v133 = v52;
                    xpc_object_t v53 = (pthread_mutex_t *)v51[3];
                    unint64_t v142 = 10;
                    CFMutableDictionaryRef v143 = label;
                    uint64_t v144 = 0;
                    unint64_t v145 = v53;
                    pthread_mutex_lock(v53);
                    dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
                    uint64_t v131 = (void *)0xAAAAAAAAAAAAAAAALL;
                    std::string::size_type v54 = (atomic_uint *)v51[1];
                    if (v54 && atomic_load_explicit(v54 + 2, memory_order_acquire) == 1)
                    {
                      uint64_t v55 = **v51;
                      std::string::size_type v56 = v51[2];
                      int v57 = 2;
                      if (v56 != (uint64_t *)v55)
                      {
                        int v128 = v51[2];
                        if ((uint64_t *)**v51 == v56) {
                          goto LABEL_125;
                        }
                        goto LABEL_105;
                      }
                    }
                    else
                    {
                      std::string::size_type v58 = (uint64_t *)operator new(0x20uLL);
                      xpc_object_t v59 = (uint64_t **)*v51;
                      uint64_t v60 = **v51;
                      unint64_t v61 = operator new(0x40uLL);
                      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v61, v60);
                      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v58, (uint64_t)v61);
                      v58[2] = (uint64_t)v59[2];
                      uint64_t v62 = (uint64_t)v59[3];
                      v58[3] = v62;
                      if (v62) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v62 + 8), 1u, memory_order_relaxed);
                      }
                      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v128, (uint64_t)v58);
                      uint64_t v63 = v128;
                      size_t v64 = (atomic_uint *)v51[1];
                      int v128 = *v51;
                      *uint64_t v51 = v63;
                      v51[1] = (uint64_t *)v129[0];
                      v129[0] = v64;
                      if (v64)
                      {
                        if (atomic_fetch_add(v64 + 2, 0xFFFFFFFF) == 1)
                        {
                          (*(void (**)(atomic_uint *))(*(void *)v64 + 16))(v64);
                          if (atomic_fetch_add(v64 + 3, 0xFFFFFFFF) == 1) {
                            (*(void (**)(atomic_uint *))(*(void *)v64 + 24))(v64);
                          }
                        }
                      }
                      int v57 = 0;
                      uint64_t v55 = **v51;
                    }
                    std::string::size_type v56 = *(uint64_t **)(v55 + 8);
                    int v128 = v56;
                    if ((uint64_t *)**v51 == v56) {
                      goto LABEL_125;
                    }
LABEL_105:
                    unsigned int v65 = 0;
                    unsigned int v66 = v57 - 1;
                    do
                    {
                      uint64_t v69 = v56[2];
                      int v70 = *(uint64_t **)(v69 + 32);
                      if (v70)
                      {
                        for (uint64_t i = *v70; i != v70[1]; i += 24)
                        {
                          if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
                          {
                            if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
                              goto LABEL_122;
                            }
                          }
                          else
                          {
                            uint64_t v72 = *(void *)(i + 16);
                            if (!v72 || !atomic_load_explicit((atomic_uint *volatile)(v72 + 8), memory_order_acquire))
                            {
LABEL_122:
                              if (*(unsigned char *)(v69 + 24))
                              {
                                *(unsigned char *)(v69 + 24) = 0;
                                boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v69, label);
                              }
                              break;
                            }
                          }
                        }
                      }
                      uint64_t v67 = v128[2];
                      if (*(unsigned char *)(v67 + 24)) {
                        std::string::size_type v56 = (uint64_t *)v128[1];
                      }
                      else {
                        std::string::size_type v56 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase((uint64_t *)**v51, (int *)(v67 + 64), &v128);
                      }
                      int v128 = v56;
                      ++v65;
                    }
                    while (v56 != (uint64_t *)**v51 && v66 >= v65);
LABEL_125:
                    v51[2] = v56;
                    unint64_t v73 = (char *)operator new(0x50uLL);
                    *((void *)v73 + 1) = 0;
                    *((void *)v73 + 2) = 0;
                    v73[24] = 1;
                    *((_DWORD *)v73 + 7) = 1;
                    *(void *)unint64_t v73 = &unk_1F2102CF8;
                    size_t v74 = operator new(0x38uLL);
                    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v74, (uint64_t *)__p);
                    v74[3] = 0;
                    uint64_t v75 = *((void *)&v123 + 1);
                    if (*((void *)&v123 + 1))
                    {
                      v74[3] = *((void *)&v123 + 1);
                      if (v75)
                      {
                        *((_OWORD *)v74 + 2) = v124;
                        v74[6] = v125;
                      }
                      else
                      {
                        (*(void (**)(long long *, void *, void))(v75 & 0xFFFFFFFFFFFFFFFELL))(&v124, v74 + 4, 0);
                      }
                    }
                    *((void *)v73 + 4) = v74;
                    *((void *)v73 + 5) = 0;
                    unsigned int v76 = operator new(0x18uLL);
                    v76[1] = 0x100000001;
                    *unsigned int v76 = &unk_1F2102DA0;
                    v76[2] = v74;
                    *((void *)v73 + 5) = v76;
                    *((void *)v73 + 6) = v51[3];
                    unsigned int v77 = (atomic_uint *)v51[4];
                    *((void *)v73 + 7) = v77;
                    if (v77) {
                      atomic_fetch_add_explicit(v77 + 2, 1u, memory_order_relaxed);
                    }
                    *((_DWORD *)v73 + 16) = 0;
                    v73[68] = 0;
                    dispatch_object_t object = (dispatch_object_t)v73;
                    uint64_t v131 = 0;
                    unsigned int v78 = (atomic_uint *)operator new(0x18uLL);
                    *((void *)v78 + 1) = 0x100000001;
                    *(void *)unsigned int v78 = &unk_1F2102E00;
                    *((void *)v78 + 2) = v73;
                    uint64_t v131 = v78;
                    uint64_t v79 = **v51;
                    xpc_object_t v80 = operator new(0x20uLL);
                    uint64_t v81 = (void *)(v79 + 32);
                    v80[2] = v73;
                    v80[3] = v78;
                    atomic_fetch_add_explicit(v78 + 2, 1u, memory_order_relaxed);
                    uint64_t v82 = *(void *)v79;
                    *(void *)(v82 + 8) = v80;
                    void *v80 = v82;
                    *(void *)uint64_t v79 = v80;
                    v80[1] = v79;
                    ++*(void *)(v79 + 16);
                    uint64_t v83 = *(uint64_t **)(v79 + 32);
                    if (v83)
                    {
                      uint64_t v84 = v79 + 32;
                      uint64_t v85 = *(void *)(v79 + 32);
                      do
                      {
                        int v86 = *(_DWORD *)(v85 + 32);
                        BOOL v87 = v86 == 2;
                        BOOL v88 = v86 < 2;
                        if (v86 >= 2) {
                          unsigned int v89 = (uint64_t *)v85;
                        }
                        else {
                          unsigned int v89 = (uint64_t *)(v85 + 8);
                        }
                        if (!v88) {
                          uint64_t v84 = v85;
                        }
                        if (v87)
                        {
                          unsigned int v89 = (uint64_t *)v85;
                          uint64_t v84 = v85;
                        }
                        uint64_t v85 = *v89;
                      }
                      while (*v89);
                      if ((void *)v84 == v81 || *(_DWORD *)(v84 + 32) != 2)
                      {
                        int v90 = *((_DWORD *)v83 + 8);
                        while (v90 != 2)
                        {
                          if (v90 < 3)
                          {
                            char v91 = (uint64_t *)v83[1];
                            if (!v91)
                            {
                              uint64_t v81 = v83 + 1;
                              goto LABEL_152;
                            }
                          }
                          else
                          {
                            char v91 = (uint64_t *)*v83;
                            uint64_t v81 = v83;
                            if (!*v83) {
                              goto LABEL_152;
                            }
                          }
                          int v90 = *((_DWORD *)v91 + 8);
                          uint64_t v83 = v91;
                        }
                      }
                      *((_DWORD *)v73 + 16) = 2;
                      *(void *)(v73 + 68) = 0xAAAAAAAAAAAAAA00;
                    }
                    else
                    {
                      uint64_t v83 = (uint64_t *)(v79 + 32);
LABEL_152:
                      std::string v92 = operator new(0x38uLL);
                      v92[4] = 0xAAAAAA0000000002;
                      *((_DWORD *)v92 + 10) = -1431655766;
                      v92[6] = v80;
                      void *v92 = 0;
                      v92[1] = 0;
                      v92[2] = v83;
                      void *v81 = v92;
                      uint64_t v93 = **(void **)(v79 + 24);
                      if (v93)
                      {
                        *(void *)(v79 + 24) = v93;
                        std::string v92 = (void *)*v81;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v79 + 32), v92);
                      ++*(void *)(v79 + 40);
                      unint64_t v73 = (char *)object;
                      unsigned int v78 = (atomic_uint *)v131;
                      LODWORD(object[8].isa) = 2;
                      *(void *)(v73 + 68) = 0xAAAAAAAAAAAAAA00;
                      if (!v78)
                      {
                        long long v117 = (unint64_t)v73;
                        std::string v94 = (atomic_uint *)v131;
                        if (!v131) {
                          goto LABEL_162;
                        }
                        goto LABEL_158;
                      }
                    }
                    atomic_fetch_add_explicit(v78 + 3, 1u, memory_order_relaxed);
                    *(void *)&long long v117 = v73;
                    *((void *)&v117 + 1) = v78;
                    atomic_fetch_add_explicit(v78 + 3, 1u, memory_order_relaxed);
                    if (atomic_fetch_add(v78 + 3, 0xFFFFFFFF) == 1) {
                      (*(void (**)(atomic_uint *))(*(void *)v78 + 24))(v78);
                    }
                    std::string v94 = (atomic_uint *)v131;
                    if (!v131)
                    {
LABEL_162:
                      pthread_mutex_unlock(v145);
                      std::string v95 = (char *)v143;
                      if (v143)
                      {
                        if (v144 - 1 >= 0)
                        {
                          std::string v96 = (char *)v143 + 16 * v144;
                          do
                          {
                            std::string v97 = (atomic_uint *)*((void *)v96 - 1);
                            if (v97)
                            {
                              if (atomic_fetch_add(v97 + 2, 0xFFFFFFFF) == 1)
                              {
                                (*(void (**)(atomic_uint *))(*(void *)v97 + 16))(v97);
                                if (atomic_fetch_add(v97 + 3, 0xFFFFFFFF) == 1) {
                                  (*(void (**)(atomic_uint *))(*(void *)v97 + 24))(v97);
                                }
                              }
                            }
                            v96 -= 16;
                          }
                          while (v96 > v95);
                        }
                        if (v142 >= 0xB) {
                          operator delete(v143);
                        }
                      }
                      if (*((void *)&v123 + 1))
                      {
                        if ((BYTE8(v123) & 1) == 0)
                        {
                          std::string v98 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v123 + 1) & 0xFFFFFFFFFFFFFFFELL);
                          if (v98) {
                            v98(&v124, &v124, 2);
                          }
                        }
                        *((void *)&v123 + 1) = 0;
                      }
                      std::string v99 = (char *)__p[0];
                      if (__p[0])
                      {
                        std::string v100 = (char *)__p[1];
                        v101 = __p[0];
                        if (__p[1] != __p[0])
                        {
                          do
                          {
                            v100 -= 24;
                            boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v100);
                          }
                          while (v100 != v99);
                          v101 = __p[0];
                        }
                        __p[1] = v99;
                        operator delete(v101);
                      }
                      dispatch_release(v120);
                      if (v121) {
                        _Block_release(v121);
                      }
                      if (atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        if (!v111)
                        {
LABEL_189:
                          v102 = operator new(0x20uLL);
                          v102[1] = v117;
                          uint64_t v103 = v110[15];
                          *(void *)v102 = v103;
                          *((void *)v102 + 1) = v110 + 15;
                          *(void *)(v103 + 8) = v102;
                          v110[15] = v102;
                          ++v110[17];
                          uint64_t v104 = (ApplePDPHelperInterface *)capabilities::ipc::supportsIPMetadataTrailer((capabilities::ipc *)v102);
                          if (v104)
                          {
                            Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance(v104);
                            int v106 = ApplePDPHelperInterface::enableMetadataTrailer(Instance, 1, 0);
                            std::string v107 = v110[5];
                            if (v106)
                            {
                              if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_WORD *)label = 0;
                                _os_log_impl(&dword_1C59C6000, v107, OS_LOG_TYPE_DEFAULT, "#I Enabled IP metadata trailer appending", (uint8_t *)label, 2u);
                                xpc_object_t v108 = v118;
                                if (!v118) {
                                  return;
                                }
LABEL_196:
                                if (!atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                                  std::__shared_weak_count::__release_weak(v108);
                                }
                                return;
                              }
                            }
                            else if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
                            {
                              *(_WORD *)label = 0;
                              _os_log_error_impl(&dword_1C59C6000, v107, OS_LOG_TYPE_ERROR, "Failed to enable IP metadata trailer appending", (uint8_t *)label, 2u);
                              xpc_object_t v108 = v118;
                              if (!v118) {
                                return;
                              }
                              goto LABEL_196;
                            }
                          }
                          xpc_object_t v108 = v118;
                          if (!v118) {
                            return;
                          }
                          goto LABEL_196;
                        }
                      }
                      else
                      {
                        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                        std::__shared_weak_count::__release_weak(v114);
                        if (!v111) {
                          goto LABEL_189;
                        }
                      }
                      _Block_release(v111);
                      goto LABEL_189;
                    }
LABEL_158:
                    if (atomic_fetch_add(v94 + 2, 0xFFFFFFFF) == 1)
                    {
                      (*(void (**)(atomic_uint *))(*(void *)v94 + 16))(v94);
                      if (atomic_fetch_add(v94 + 3, 0xFFFFFFFF) == 1) {
                        (*(void (**)(atomic_uint *))(*(void *)v94 + 24))(v94);
                      }
                    }
                    goto LABEL_162;
                  }
                  uint64_t v37 = v28;
                  char v39 = 0;
                  char v40 = 0;
                  char v41 = 0;
LABEL_64:
                  dispatch_retain(v29);
                  std::string v35 = 0;
                  long long v36 = 0;
                  unint64_t v38 = 0;
                  v129[0] = v29;
                  char v42 = 1;
                  goto LABEL_65;
                }
                uint64_t v37 = v28;
                char v39 = 0;
                char v40 = 0;
LABEL_63:
                std::string v109 = v32;
                dispatch_retain(v29);
                uint64_t v113 = 0;
                char v41 = 1;
                goto LABEL_64;
              }
              char v39 = 0;
LABEL_62:
              uint64_t v37 = v28;
              dispatch_retain(v29);
              float64x2x2_t v33 = 0;
              char v40 = 1;
              goto LABEL_63;
            }
LABEL_61:
            dispatch_retain(v29);
            uint64_t v32 = 0;
            char v39 = 1;
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v131 = 0;
          dispatch_retain(v29);
        }
        dispatch_retain(v29);
        int v128 = 0;
        goto LABEL_61;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v4 + 9) = v4;
      *((void *)v4 + 10) = v8;
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_19;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    goto LABEL_19;
  }
}

void sub_1C59E3CD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a2)
  {
    uint64_t v51 = *v50;
    if (*v50)
    {
      uint64_t v52 = (uint64_t)v50[1];
      xpc_object_t v53 = *v50;
      if ((void *)v52 != v51)
      {
        do
        {
          v52 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v52);
        }
        while ((void *)v52 != v51);
        xpc_object_t v53 = *v50;
      }
      v50[1] = v51;
      operator delete(v53);
    }
    operator delete(v50);
    boost::signals2::detail::connection_body_base::~connection_body_base(v49);
    operator delete(v49);
    JUMPOUT(0x1C59E42FCLL);
  }
  JUMPOUT(0x1C59E42F4);
}

void sub_1C59E4020(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (__p)
    {
      if (a71 - 1 >= 0)
      {
        unint64_t v71 = &__p[16 * a71];
        do
        {
          uint64_t v72 = (atomic_uint *)*((void *)v71 - 1);
          if (v72)
          {
            if (atomic_fetch_add(v72 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v72 + 16))(v72);
              if (atomic_fetch_add(v72 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v72 + 24))(v72);
              }
            }
          }
          v71 -= 16;
        }
        while (v71 > __p);
      }
      if (a69 >= 0xB) {
        operator delete(__p);
      }
    }
    JUMPOUT(0x1C59E4304);
  }
  JUMPOUT(0x1C59E42F4);
}

void sub_1C59E40EC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59E40F4);
  }
  JUMPOUT(0x1C59E42F4);
}

void sub_1C59E4120(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59E4128);
  }
  JUMPOUT(0x1C59E42F4);
}

void sub_1C59E413C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    dispatch_barrier_async_f(v2[11], v2, (dispatch_function_t)std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C59E42F4);
}

void sub_1C59E4170()
{
}

void sub_1C59E4180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a24);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a46);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v58);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a50);
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  operator delete(v57);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void sub_1C59E41FC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59E4204);
  }
  JUMPOUT(0x1C59E42F4);
}

void sub_1C59E4210(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&a47);
    JUMPOUT(0x1C59E42FCLL);
  }
  JUMPOUT(0x1C59E42F4);
}

void sub_1C59E422C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char *__p,char *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49)
{
  if (a2)
  {
    boost::function1<void,BOOL>::~function1(&a49);
    boost::function<void ()(BOOL)>::~function(&a43);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a47);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a41);
    if (a36)
    {
      if ((a36 & 1) == 0)
      {
        uint64_t v49 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a36 & 0xFFFFFFFFFFFFFFFELL);
        if (v49) {
          v49(&a37, &a37, 2);
        }
      }
    }
    if (__p)
    {
      std::string::size_type v50 = a34;
      uint64_t v51 = __p;
      if (a34 != __p)
      {
        do
        {
          v50 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v50);
        }
        while (v50 != __p);
        uint64_t v51 = __p;
      }
      operator delete(v51);
    }
    JUMPOUT(0x1C59E430CLL);
  }
  JUMPOUT(0x1C59E42F4);
}

void sub_1C59E42DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_1C59E4444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void data::TransportService::enterLowPower(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_54;
    v3[4] = v1;
    uint64_t v4 = v3;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    void block[4] = v1 + 72;
    void block[5] = &v4;
    uint64_t v2 = *(NSObject **)(v1 + 88);
    if (*(void *)(v1 + 96)) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

void data::TransportService::exitLowPower(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_56;
    v2[4] = v1;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void data::TransportService::setConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *a2;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 0x40000000;
    uint64_t v4[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    v4[3] = &__block_descriptor_tmp_59;
    v4[4] = v2;
    v4[5] = v3;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v4);
  }
}

void data::TransportService::dumpState(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_60;
    v3[4] = v1;
    uint64_t v4 = v3;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    void block[4] = v1 + 72;
    void block[5] = &v4;
    uint64_t v2 = *(NSObject **)(v1 + 88);
    if (*(void *)(v1 + 96)) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

void data::TransportService::unblockThrottling(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_61;
    v3[4] = v1;
    uint64_t v4 = v3;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    void block[4] = v1 + 72;
    void block[5] = &v4;
    uint64_t v2 = *(NSObject **)(v1 + 88);
    if (*(void *)(v1 + 96)) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

uint64_t ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared"
                     "_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3"
                                "__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

void data::TransportService::State::~State(data::TransportService::State *this)
{
  data::TransportService::State::~State(this);

  operator delete(v1);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  atomic_uint *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  atomic_uint *v15;
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;

  *(void *)this = &unk_1F2102B68;
  uint64_t v2 = (char *)this + 120;
  unint64_t v3 = (char *)*((void *)this + 16);
  if (v3 != (char *)this + 120)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 16));
      unint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  if (*((void *)this + 17))
  {
    uint64_t v4 = *((void *)this + 15);
    unint64_t v5 = (char *)*((void *)this + 16);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 17) = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v7 = (char *)*((void *)v5 + 1);
        size_t v8 = (atomic_uint *)*((void *)v5 + 3);
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        unint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  size_t v9 = *((void *)this + 20);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!*((void *)this + 17)) {
      goto LABEL_22;
    }
  }
  else if (!*((void *)this + 17))
  {
    goto LABEL_22;
  }
  dispatch_object_t v11 = *((void *)this + 15);
  uint64_t v12 = (char *)*((void *)this + 16);
  Class v13 = *(void *)v12;
  *(void *)(v13 + 8) = *(void *)(v11 + 8);
  **(void **)(v11 + 8) = v13;
  *((void *)this + 17) = 0;
  if (v12 != v2)
  {
    do
    {
      uint64_t v14 = (char *)*((void *)v12 + 1);
      __int16 v15 = (atomic_uint *)*((void *)v12 + 3);
      if (v15 && atomic_fetch_add(v15 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v15 + 24))(v15);
      }
      operator delete(v12);
      uint64_t v12 = v14;
    }
    while (v14 != v2);
  }
LABEL_22:
  *(void *)this = &unk_1F2102C78;
  MEMORY[0x1C87940C0]((char *)this + 8);
  long long v16 = *((void *)this + 12);
  if (v16) {
    dispatch_release(v16);
  }
  long long v17 = *((void *)this + 11);
  if (v17) {
    dispatch_release(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "ipc.svc.data");
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2102C78;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2102C78;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2102C78;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2102C78;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void boost::signals2::connection::disconnect(boost::signals2::connection *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 1);
  if (v1)
  {
    uint64_t v2 = v1[2];
    while (v2)
    {
      uint64_t v3 = v2;
      atomic_compare_exchange_strong_explicit(v1 + 2, (unsigned int *)&v3, v2 + 1, memory_order_relaxed, memory_order_relaxed);
      BOOL v4 = v3 == v2;
      uint64_t v2 = v3;
      if (v4)
      {
        unint64_t v5 = *(boost::signals2::detail::connection_body_base **)this;
        if (v5) {
          boost::signals2::detail::connection_body_base::disconnect(v5);
        }
        if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
          if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
          }
        }
        return;
      }
    }
  }
}

void sub_1C59E4F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[8] = v2;
  v6[9] = v2;
  v6[6] = v2;
  v6[7] = v2;
  v6[4] = v2;
  v6[5] = v2;
  v6[2] = v2;
  v6[3] = v2;
  v6[0] = v2;
  v6[1] = v2;
  unint64_t v7 = 10;
  std::string __p = v6;
  uint64_t v9 = 0;
  uint64_t v10 = this;
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(void *)this + 24))(this);
  if (*((unsigned char *)this + 24))
  {
    *((unsigned char *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v6);
  }
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(void *)v10 + 32))(v10);
  uint64_t v3 = (char *)__p;
  if (__p)
  {
    if (v9 - 1 >= 0)
    {
      BOOL v4 = (char *)__p + 16 * v9;
      do
      {
        unint64_t v5 = (atomic_uint *)*((void *)v4 - 1);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v3);
    }
    if (v7 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1C59E5120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C59E5134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr(uint64_t a1)
{
  long long v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        unint64_t v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, void *a2)
{
  int v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v8);
    uint64_t v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1)) {
        unint64_t v5 = v4 + 1;
      }
      else {
        unint64_t v5 = 4 * v4;
      }
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      uint64_t v4 = a2[22];
    }
    uint64_t v6 = *((void *)&v8 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v8;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      uint64_t v4 = a2[22];
    }
    a2[22] = v4 + 1;
    unint64_t v7 = (atomic_uint *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
      }
    }
  }
}

void sub_1C59E55D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (void *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v4 = operator new(16 * a2);
  }
  uint64_t v6 = *(void **)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  if (v5)
  {
    unint64_t v7 = &v6[2 * v5];
    long long v8 = v4;
    do
    {
      uint64_t v9 = v6[1];
      *long long v8 = *v6;
      v8[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    uint64_t v6 = *(void **)(a1 + 168);
  }
  if (v6)
  {
    uint64_t v10 = *(void *)(a1 + 176);
    if (v10 - 1 >= 0)
    {
      uint64_t v11 = &v6[2 * v10];
      do
      {
        uint64_t v12 = (atomic_uint *)*(v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 2;
      }
      while (v11 > v6);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  *(void *)(a1 + 160) = a2;
  *(void *)(a1 + 168) = v4;
}

void boost::signals2::connection::~connection(boost::signals2::connection *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 1);
  if (v1)
  {
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

void data::TransportService::State::handleUILockStateChange_sync(data::TransportService::State *this, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 5);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      return;
    }
LABEL_7:
    data::TransportService::State::unblockThrottling_sync(this);
    return;
  }
  uint64_t v5 = "unlocked";
  if (a2) {
    uint64_t v5 = "locked";
  }
  int v6 = 136315138;
  unint64_t v7 = v5;
  _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I UI has %s", (uint8_t *)&v6, 0xCu);
  if ((a2 & 1) == 0) {
    goto LABEL_7;
  }
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 72);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void **boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    int v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      int v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        uint64_t v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1C59E5C28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(void *a1, uint64_t a2)
{
  *a1 = 0;
  unint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  void *v4 = &unk_1F2103028;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1C59E5D18(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1C59E5E38(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1C59E60AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list((void *)a1, (void *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((unsigned char *)v4 + 48) = *(unsigned char *)(a2 + 48);
  v4[3] = v4 + 4;
  uint64_t v5 = (void *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  int v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    unint64_t v7 = *(void **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      v7[6] = v8;
      uint64_t v9 = a2;
      if (v6 != v5) {
        uint64_t v9 = v6[6];
      }
      uint64_t v10 = (void *)v6[1];
      uint64_t v11 = v10;
      uint64_t v12 = v6;
      if (v10)
      {
        do
        {
          Class v13 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          Class v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (!v14);
      }
      uint64_t v15 = a2;
      if (v13 != v5) {
        uint64_t v15 = v13[6];
      }
      while (v9 != v15)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v8 = *(void *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          long long v16 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v16 = (void *)v6[2];
          BOOL v14 = *v16 == (void)v6;
          int v6 = v16;
        }
        while (!v14);
      }
      long long v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          long long v18 = v17;
          long long v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          long long v18 = (void *)v7[2];
          BOOL v14 = *v18 == (void)v7;
          unint64_t v7 = v18;
        }
        while (!v14);
      }
      int v6 = v16;
      unint64_t v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1C59E6298(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v2, *(void **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list(void *a1, void *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = (void *)a2[1];
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    int v6 = a1;
    do
    {
      unint64_t v7 = operator new(0x20uLL);
      uint64_t v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
        int v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      *unint64_t v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      uint64_t v3 = (void *)v3[1];
      int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1C59E6360(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        unint64_t v7 = (uint64_t *)v5[1];
        uint64_t v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
          if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t *std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    v19[9] = v3;
    v19[10] = v4;
    uint64_t v6 = a2;
    unint64_t v7 = result;
    uint64_t v8 = result + 1;
    do
    {
      long long v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v19[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      uint64_t result = std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(v7, v8, v19, &v18, v6 + 8);
      if (*result)
      {
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = result;
        uint64_t v11 = operator new(0x38uLL);
        uint64_t v12 = *((void *)v6 + 6);
        v11[2] = *((_OWORD *)v6 + 2);
        *((void *)v11 + 6) = v12;
        Class v13 = v19[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v13;
        uint64_t *v10 = (uint64_t)v11;
        BOOL v14 = *(void **)*v7;
        if (v14)
        {
          *unint64_t v7 = (uint64_t)v14;
          uint64_t v15 = (uint64_t *)*v10;
        }
        else
        {
          uint64_t v15 = (uint64_t *)v11;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v15);
        ++v7[2];
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            long long v16 = v9;
            uint64_t v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        long long v16 = (int *)*((void *)v6 + 2);
        BOOL v17 = *(void *)v16 == (void)v6;
        uint64_t v6 = v16;
      }
      while (!v17);
LABEL_3:
      uint64_t v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2) {
    goto LABEL_8;
  }
  int v6 = *a5;
  int v7 = *((_DWORD *)a2 + 8);
  if (*a5 == v7)
  {
    if (v6 != 1)
    {
LABEL_6:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    int v8 = a5[2];
    int v9 = *((_DWORD *)a2 + 10);
    if (v8 >= v9)
    {
      if (v9 >= v8) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_8:
    uint64_t v11 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      Class v13 = a2;
    }
    else
    {
      if (v11)
      {
        uint64_t v12 = (uint64_t *)*a2;
        do
        {
          Class v13 = v12;
          uint64_t v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        BOOL v17 = a2;
        do
        {
          Class v13 = (uint64_t *)v17[2];
          BOOL v18 = *v13 == (void)v17;
          BOOL v17 = v13;
        }
        while (v18);
      }
      int v19 = *((_DWORD *)v13 + 8);
      int v20 = *a5;
      if (v19 == *a5)
      {
        if (v19 != 1 || *((_DWORD *)v13 + 10) >= a5[2]) {
          goto LABEL_24;
        }
      }
      else if (v19 >= v20)
      {
LABEL_24:
        uint64_t v21 = (void *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        if (v20 != 1)
        {
          while (1)
          {
            int v26 = *((_DWORD *)v21 + 8);
            long long v23 = v21;
            if (v20 == v26) {
              break;
            }
            if (v20 < v26)
            {
              uint64_t v21 = (void *)*v21;
              uint64_t v5 = v23;
              if (!*v23) {
                break;
              }
            }
            else
            {
              if (v26 >= v20) {
                break;
              }
              uint64_t v5 = v21 + 1;
              uint64_t v21 = (void *)v21[1];
              if (!v21) {
                break;
              }
            }
          }
LABEL_40:
          *a3 = v23;
          return v5;
        }
        int v22 = a5[2];
        while (1)
        {
          long long v23 = v21;
          int v24 = *((_DWORD *)v21 + 8);
          if (v24 == 1)
          {
            int v25 = *((_DWORD *)v23 + 10);
            if (v22 >= v25)
            {
              if (v25 >= v22) {
                goto LABEL_40;
              }
              goto LABEL_33;
            }
LABEL_27:
            uint64_t v21 = (void *)*v23;
            uint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v24 > 1) {
              goto LABEL_27;
            }
LABEL_33:
            uint64_t v5 = v23 + 1;
            uint64_t v21 = (void *)v23[1];
            if (!v21) {
              goto LABEL_40;
            }
          }
        }
      }
    }
    if (v11)
    {
      *a3 = v13;
      return v13 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v6 < v7) {
    goto LABEL_8;
  }
  if (v7 >= v6) {
    goto LABEL_6;
  }
LABEL_15:
  uint64_t v14 = a2[1];
  if (v14)
  {
    uint64_t v15 = (uint64_t *)a2[1];
    do
    {
      long long v16 = v15;
      uint64_t v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  else
  {
    uint64_t v27 = a2;
    do
    {
      long long v16 = (uint64_t *)v27[2];
      BOOL v18 = *v16 == (void)v27;
      uint64_t v27 = v16;
    }
    while (!v18);
  }
  if (v16 == v5) {
    goto LABEL_56;
  }
  int v28 = *((_DWORD *)v16 + 8);
  if (v6 == v28)
  {
    if (v6 == 1)
    {
      int v29 = a5[2];
      if (v29 >= *((_DWORD *)v16 + 10))
      {
        long long v30 = (void *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        goto LABEL_61;
      }
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  if (v6 < v28)
  {
LABEL_56:
    if (v14)
    {
      *a3 = v16;
      return v16;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
LABEL_58:
  long long v30 = (void *)*v5;
  if (*v5)
  {
    if (v6 == 1)
    {
      int v29 = a5[2];
LABEL_61:
      tm v31 = v30;
      while (1)
      {
        long long v30 = v31;
        int v32 = *((_DWORD *)v31 + 8);
        if (v32 == 1)
        {
          int v33 = *((_DWORD *)v30 + 10);
          if (v29 >= v33)
          {
            if (v33 >= v29) {
              goto LABEL_72;
            }
            goto LABEL_68;
          }
LABEL_62:
          tm v31 = (void *)*v30;
          uint64_t v5 = v30;
          if (!*v30) {
            goto LABEL_72;
          }
        }
        else
        {
          if (v32 > 1) {
            goto LABEL_62;
          }
LABEL_68:
          uint64_t v5 = v30 + 1;
          tm v31 = (void *)v30[1];
          if (!v31) {
            goto LABEL_72;
          }
        }
      }
    }
    int v34 = *((_DWORD *)v30 + 8);
    while (v6 != v34)
    {
      if (v6 < v34)
      {
        uint64_t v35 = *v30;
        uint64_t v5 = v30;
        if (!*v30) {
          break;
        }
      }
      else
      {
        if (v34 >= v6) {
          break;
        }
        uint64_t v5 = v30 + 1;
        uint64_t v35 = v30[1];
        if (!v35) {
          break;
        }
      }
      int v34 = *(_DWORD *)(v35 + 32);
      long long v30 = (void *)v35;
    }
  }
  else
  {
    long long v30 = a1 + 1;
  }
LABEL_72:
  *a3 = v30;
  return v5;
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  void *v4 = &unk_1F2102FB8;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1C59E69B8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          int v6 = (atomic_uint *)v3[3];
          if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1C59E6AA8(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          int v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v6 = a1 + 4;
  uint64_t v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    uint64_t v23 = a1[10];
    if ((uint64_t *)v23 != *a3) {
      goto LABEL_55;
    }
    int v19 = *(uint64_t **)(v23 + 8);
    int v9 = v6;
    int v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      char v39 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v39)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  int v7 = *a2;
  int v8 = a2[2];
  int v9 = v6;
  uint64_t v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v16 = *((_DWORD *)v10 + 8);
        BOOL v17 = v16 < 1;
        if (v16 == 1) {
          BOOL v17 = *((_DWORD *)v10 + 10) < v8;
        }
        if (!v17) {
          break;
        }
        uint64_t v10 = (uint64_t *)v10[1];
        if (!v10) {
          goto LABEL_19;
        }
      }
      int v9 = v10;
      uint64_t v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      int v11 = *((_DWORD *)v10 + 8);
      BOOL v12 = v11 == v7;
      BOOL v13 = v11 < v7;
      if (v11 >= v7) {
        uint64_t v14 = (uint64_t **)v10;
      }
      else {
        uint64_t v14 = (uint64_t **)(v10 + 1);
      }
      if (v13) {
        uint64_t v15 = v9;
      }
      else {
        uint64_t v15 = v10;
      }
      if (v12)
      {
        uint64_t v14 = (uint64_t **)v10;
        int v9 = v10;
      }
      else
      {
        int v9 = v15;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  uint64_t v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    int v19 = *(uint64_t **)(v18 + 8);
    int v20 = v6;
    if (v7 == 1)
    {
      uint64_t v21 = v5;
      while (1)
      {
        int v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10)) {
            goto LABEL_27;
          }
LABEL_22:
          uint64_t v21 = (uint64_t *)v21[1];
          if (!v21) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v22 <= 1) {
            goto LABEL_22;
          }
LABEL_27:
          int v20 = v21;
          uint64_t v21 = (uint64_t *)*v21;
          if (!v21) {
            goto LABEL_44;
          }
        }
      }
    }
    uint64_t v27 = v5;
    do
    {
      int v28 = *((_DWORD *)v27 + 8);
      int v29 = (uint64_t **)(v27 + 1);
      BOOL v30 = v7 == v28;
      BOOL v31 = v7 < v28;
      if (v7 >= v28) {
        int v32 = (uint64_t **)(v27 + 1);
      }
      else {
        int v32 = (uint64_t **)v27;
      }
      if (!v31) {
        uint64_t v27 = v20;
      }
      if (v30) {
        int v32 = v29;
      }
      else {
        int v20 = v27;
      }
      uint64_t v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      int v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1) {
        goto LABEL_46;
      }
    }
    else
    {
      int v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6]) {
        goto LABEL_46;
      }
    }
LABEL_31:
    int v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        int v26 = v25;
        int v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      int v33 = v9;
      do
      {
        int v26 = (uint64_t *)v33[2];
        BOOL v12 = *v26 == (void)v33;
        int v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9) {
      *int v24 = v26;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  int v34 = *a3;
  uint64_t v35 = **a3;
  uint64_t v36 = (*a3)[1];
  *(void *)(v35 + 8) = v36;
  *(void *)v34[1] = v35;
  --a1[2];
  uint64_t v37 = (atomic_uint *)v34[3];
  if (v37)
  {
    if (atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v37 + 16))(v37);
      if (atomic_fetch_add(v37 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v37 + 24))(v37);
      }
    }
  }
  operator delete(v34);
  return v36;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>(_DWORD *a1, void *a2)
{
  int v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v8);
    uint64_t v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1)) {
        unint64_t v5 = v4 + 1;
      }
      else {
        unint64_t v5 = 4 * v4;
      }
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      uint64_t v4 = a2[22];
    }
    uint64_t v6 = *((void *)&v8 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v8;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      uint64_t v4 = a2[22];
    }
    a2[22] = v4 + 1;
    int v7 = (atomic_uint *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
      }
    }
  }
}

void sub_1C59E7014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, void **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    if (*a2 != 1)
    {
      int v18 = *((_DWORD *)v6 + 8);
      if (v8 == v18) {
        return (uint64_t **)v6;
      }
      uint64_t v10 = (uint64_t **)a1[1];
      while (1)
      {
        if (v8 < v18)
        {
          uint64_t v6 = *v10;
          int v7 = v10;
          if (!*v10) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v18 >= v8) {
            return v10;
          }
          uint64_t v6 = v10[1];
          if (!v6)
          {
LABEL_11:
            int v7 = v10 + 1;
            goto LABEL_13;
          }
        }
        int v18 = *((_DWORD *)v6 + 8);
        uint64_t v10 = (uint64_t **)v6;
        if (v8 == v18) {
          return (uint64_t **)v6;
        }
      }
    }
    int v9 = a2[2];
    while (1)
    {
      uint64_t v10 = (uint64_t **)v6;
      int v11 = *((_DWORD *)v6 + 8);
      if (v11 == 1)
      {
        int v12 = *((_DWORD *)v6 + 10);
        if (v9 >= v12)
        {
          if (v12 >= v9) {
            return v10;
          }
          goto LABEL_10;
        }
LABEL_4:
        uint64_t v6 = (uint64_t *)*v6;
        int v7 = v10;
        if (!*v10) {
          goto LABEL_13;
        }
      }
      else
      {
        if (v11 > 1) {
          goto LABEL_4;
        }
LABEL_10:
        uint64_t v6 = (uint64_t *)v6[1];
        if (!v6) {
          goto LABEL_11;
        }
      }
    }
  }
  uint64_t v10 = a1 + 1;
LABEL_13:
  BOOL v13 = operator new(0x38uLL);
  int v14 = *((_DWORD *)*a4 + 2);
  v13[4] = **a4;
  *((_DWORD *)v13 + 10) = v14;
  void v13[6] = 0;
  *BOOL v13 = 0;
  v13[1] = 0;
  void v13[2] = v10;
  *int v7 = v13;
  uint64_t v15 = (uint64_t *)**a1;
  int v16 = v13;
  if (v15)
  {
    *a1 = v15;
    int v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v13;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    uint64_t v6 = (uint64_t **)v3[2];
    int v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  uint64_t v6 = (uint64_t **)v3[2];
  int v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  *uint64_t v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    int v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
    goto LABEL_16;
  }
  int v7 = 0;
  uint64_t result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    int v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      int v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_48;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      int v20 = (uint64_t *)v7[1];
      void *v14 = v20;
      if (v20) {
        v20[2] = (uint64_t)v14;
      }
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      void v14[2] = v7;
      if (result == (uint64_t *)v14) {
        uint64_t result = v7;
      }
      int v7 = *v14;
      int v16 = (void *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    uint64_t v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        uint64_t v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        uint64_t *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        int v16 = v7;
      }
      uint64_t v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      *uint64_t v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      uint64_t v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_24:
    int v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    uint64_t v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_38:
      int v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      int v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        int v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_24;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    BOOL v17 = v14[1];
    int v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      v18[2] = (uint64_t)v14;
    }
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    *BOOL v17 = (uint64_t)v14;
    void v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    int v7 = *(uint64_t **)(*v7 + 8);
    uint64_t v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_38;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_38;
  }
  int v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    *int v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    uint64_t v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    int v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  int v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  uint64_t *v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

void boost::signals2::detail::connection_body_base::~connection_body_base(boost::signals2::detail::connection_body_base *this)
{
  *(void *)this = &unk_1F2102D60;
  uint64_t v1 = (atomic_uint *)*((void *)this + 2);
  if (v1)
  {
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  void v14[4] = v2;
  void v14[5] = v2;
  void v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  int v16 = (char *)v14;
  uint64_t v17 = 0;
  int v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          int v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  uint64_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = &v16[16 * v17];
      do
      {
        int v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C59E7918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    void *v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    void *v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    char v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__construct_at_end<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>((uint64_t)a1, v3, v4);
  }
  return a1;
}

void sub_1C59E7BA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v4);
      }
      while ((void *)v4 != v3);
      int64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__construct_at_end<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v4 + v7;
      uint64_t v9 = a2 + v7;
      if ((*(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31)) == 2)
      {
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(v9 + 8) + 32))(*(void *)(v9 + 8));
        *(void *)(v8 + 8) = result;
      }
      else
      {
        *(void *)(v8 + 8) = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(a2 + v7 + 16);
        *(void *)(v4 + v7 + 16) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 1u, memory_order_relaxed);
        }
      }
      *(_DWORD *)uint64_t v8 = *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(v3 + 8) = v4;
  return result;
}

void sub_1C59E7CD8(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 24)
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v2 - 24 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

atomic_uint *boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v1 == 2)
  {
    uint64_t result = *(atomic_uint **)(a1 + 8);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (atomic_uint *)v3();
    }
  }
  else if (v1 == 1)
  {
    uint64_t result = *(atomic_uint **)(a1 + 16);
    if (result && atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
    }
  }
  else
  {
    uint64_t result = *(atomic_uint **)(a1 + 16);
    if (result && atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
    }
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::dispose(uint64_t a1)
{
  int v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      unint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        unint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F2102CF8;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F2102D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    unint64_t v2 = *(atomic_uint **)(a1 + 16);
    if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return a1;
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)result ^ (*(int *)result >> 31);
  if (v3 == 2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(result + 8) + 16))(&v8);
    *(void *)(a2 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    *(_DWORD *)a2 = 1;
    uint64_t result = v8;
    if (v8) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = *(void *)(result + 16);
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(v4 + 8);
      while (v5)
      {
        uint64_t v6 = v5;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 8), (unsigned int *)&v6, v5 + 1, memory_order_relaxed, memory_order_relaxed);
        BOOL v7 = v6 == v5;
        uint64_t v5 = v6;
        if (v7)
        {
          *(void *)(a2 + 8) = *(void *)(result + 8);
          *(void *)(a2 + 16) = v4;
          *(_DWORD *)a2 = 0;
          return result;
        }
      }
      uint64_t v4 = 0;
    }
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v4;
    *(_DWORD *)a2 = 0;
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_1C59E82B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(BOOL)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      int v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C5BC2F2FLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C5BC2F2FLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      uint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    BOOL v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      BOOL v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      uint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>,void,BOOL>::invoke(uint64_t a1, char a2)
{
  uint64_t v4 = *(NSObject **)a1;
  int v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_10:
    char v18 = 1;
LABEL_11:
    uint64_t v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  BOOL v7 = _Block_copy(v5);
  uint64_t v8 = v7;
  if (!v7)
  {
    char v18 = 0;
    goto LABEL_11;
  }
  uint64_t v9 = _Block_copy(v7);
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = _Block_copy(v9);
    int v12 = v11;
    if (v11)
    {
      BOOL v13 = _Block_copy(v11);
      int v14 = v13;
      if (v13)
      {
        unint64_t v15 = _Block_copy(v13);
        int v16 = v15;
        if (v15)
        {
          uint64_t v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          uint64_t v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        uint64_t v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      uint64_t v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    uint64_t v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  char v18 = 0;
LABEL_21:
  int v19 = operator new(1uLL);
  *int v19 = a2;
  int v20 = operator new(0x20uLL);
  void *v20 = boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable;
  if (v17) {
    uint64_t v21 = _Block_copy(v17);
  }
  else {
    uint64_t v21 = 0;
  }
  v20[1] = v21;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke;
  block[3] = &__block_descriptor_tmp_37;
  void block[4] = v20;
  void block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable)
  {
    if ((boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 1) == 0)
    {
      uint64_t v22 = *(void (**)(void *, void *, uint64_t))((unint64_t)boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22) {
        v22(v23, v23, 2);
      }
    }
  }
  if ((v18 & 1) == 0) {
    _Block_release(v6);
  }
}

void sub_1C59E86F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    _Block_release(v10);
  }
  if ((v11 & 1) == 0) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1F21031B0;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(void *, void))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned __int8 **)(a1 + 40));
  int v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      *int v3 = 0;
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1C59E8814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C59E8870(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1F2103180;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F2103108;
  *(void *)(a1 + 8) = &unk_1F2103138;
  *(void *)(a1 + 24) = &unk_1F2103160;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F21031D8;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1F2103180;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((void *)v2 + 1) = &unk_1F21031B0;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 3) = &unk_1F21031D8;
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)uint64_t v2 = &unk_1F2103108;
  *((void *)v2 + 1) = &unk_1F2103138;
  *((void *)v2 + 3) = &unk_1F2103160;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_1C59E8AF4(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C59E8B10(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C59E8B8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F21031D8;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete((void *)a1);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1F21031D8;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;
  uint64_t vars8;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1F21031D8;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete(&this[-1].__imp_);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F21031D8;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;
  uint64_t vars8;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F21031D8;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F2103180;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F21031B0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F21031D8;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F2103108;
  *(void *)(a1 + 8) = &unk_1F2103138;
  *(void *)(a1 + 24) = &unk_1F2103160;
  return a1;
}

void sub_1C59E9028(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    uint64_t v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    uint64_t result = *(void *)(a1 + 8);
    if (!result) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v7);
  uint64_t v5 = v7;
  uint64_t v8 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
LABEL_8:
  }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
LABEL_9:
  *(void *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  return result;
}

void sub_1C59E91BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C59E91DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C59E91F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(BOOL)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C5BC2F6DLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C5BC2F6DLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      uint64_t v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(BOOL)>,void,BOOL>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::function1<void,BOOL>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_1C59E93AC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_1C59E93BC(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,BOOL>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v21 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v7 = (char *)operator new(24 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = (int *)&v7[24 * v3];
  std::string __p = v7;
  char v18 = v8;
  int v19 = v8;
  int v20 = &v7[24 * v6];
  uint64_t v9 = v8 + 2;
  uint64_t v10 = a2 + 8;
  int v11 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v11 == 2)
  {
    void *v9 = (*(uint64_t (**)(void))(**(void **)v10 + 32))();
    int v11 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
    int v12 = v19;
  }
  else
  {
    if (v11 != 1) {
      int v11 = 0;
    }
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *(void *)uint64_t v10 = 0;
    *(void *)(a2 + 16) = 0;
    int v12 = v8;
  }
  *uint64_t v8 = v11;
  int v19 = v12 + 6;
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  unint64_t v15 = v18;
  for (uint64_t i = v19; v19 != v15; uint64_t i = v19)
  {
    int v19 = i - 6;
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)(i - 6));
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1C59E95B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      uint64_t v9 = v4 + v7;
      if ((*(_DWORD *)(v4 + v7 - 24) ^ (*(int *)(v4 + v7 - 24) >> 31)) == 2)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v9 - 16) + 32))(*(void *)(v9 - 16));
        *(void *)(v8 - 16) = result;
      }
      else
      {
        *(void *)(v8 - 16) = *(void *)(v9 - 16);
        uint64_t v10 = *(void *)(v4 + v7 - 8);
        *(void *)(v6 + v7 - 8) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 1u, memory_order_relaxed);
        }
      }
      *(_DWORD *)(v8 - 24) = *(_DWORD *)(v9 - 24) ^ (*(int *)(v9 - 24) >> 31);
      v7 -= 24;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v11 = *v3;
  *unint64_t v3 = v6;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_1C59E96F8(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 24)
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(i - 24);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_1F2102EA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(void *__p)
{
  *std::string __p = &unk_1F2102EA0;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  uint64_t v7 = operator new(0x18uLL);
  *uint64_t v7 = &unk_1F2102F00;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1C59E9928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F2102EA0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_1F2102F00;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  *std::string __p = &unk_1F2102F00;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F2102F00;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void data::TransportService::State::unblockThrottling_sync(data::TransportService::State *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Disabling throttling", (uint8_t *)&v11, 2u);
  }
  if (*((void *)this + 18))
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Stop Listening for UI events", (uint8_t *)&v11, 2u);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  uint64_t v5 = *((void *)this + 20);
  if (v5)
  {
    dispatch_source_cancel(v5);
    uint64_t v6 = *((void *)this + 20);
    *((void *)this + 20) = 0;
    if (v6) {
      dispatch_release(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    uint64_t v5 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v11, 2u);
    }
  }
  if (*((_DWORD *)this + 26) == 1)
  {
    if (*((_DWORD *)this + 28) == 1)
    {
      uint64_t v8 = *((void *)this + 5);
      uint64_t v5 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        int v11 = 136315394;
        uint64_t v12 = "Throttled";
        __int16 v13 = 2080;
        int v14 = "Idle";
        _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v11, 0x16u);
      }
      *((_DWORD *)this + 28) = 0;
    }
    Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v5);
    if ((ApplePDPHelperInterface::activateLowPowerPDPThrottle(Instance) & 1) == 0)
    {
      uint64_t v10 = *((void *)this + 5);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v11) = 0;
        _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to disable flow for throttling", (uint8_t *)&v11, 2u);
      }
    }
  }
}

void ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 160);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(NSObject **)(v1 + 160);
    *(void *)(v1 + 160) = 0;
    if (v3) {
      dispatch_release(v3);
    }
    uint64_t v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v9, 2u);
    }
  }
  unsigned int v5 = *(_DWORD *)(v1 + 112);
  if (v5 >= 2)
  {
    if (v5 == 2) {
      return;
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = "???";
      if (!v5) {
        uint64_t v7 = "Idle";
      }
      if (v5 == 1) {
        uint64_t v7 = "Throttled";
      }
      int v9 = 136315394;
      uint64_t v10 = v7;
      __int16 v11 = 2080;
      uint64_t v12 = "LowPower";
      _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v9, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 2;
  }
  uint64_t v8 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Entered low power", (uint8_t *)&v9, 2u);
  }
}

void *___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 112);
  if ((v2 - 1) <= 1)
  {
    uint64_t v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = "???";
      if (v2 == 1) {
        uint64_t v4 = "Throttled";
      }
      if (v2 == 2) {
        uint64_t v4 = "LowPower";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "Throttled";
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", buf, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 1;
    data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v1);
  }
  unsigned int v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Exited Low Power", buf, 2u);
  }
  if (!*(void *)(v1 + 144))
  {
    uint64_t v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Listening for UI events", buf, 2u);
    }
    pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    uint64_t v7 = (sys::UIObserver *)xmmword_1EBBDCAF8;
    if (!(void)xmmword_1EBBDCAF8)
    {
      memset(buf, 170, 16);
      uint64_t v8 = (sys::UIObserver *)operator new(0x40uLL);
      sys::UIObserver::UIObserver(v8);
      std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)buf, (std::__shared_weak_count_vtbl *)v8);
      long long v9 = *(_OWORD *)buf;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      uint64_t v10 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCAF8 + 1);
      xmmword_1EBBDCAF8 = v9;
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      __int16 v11 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v7 = (sys::UIObserver *)xmmword_1EBBDCAF8;
    }
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCAF8 + 1);
    if (*((void *)&xmmword_1EBBDCAF8 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDCAF8 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    sys::UIObserver::observe(v7, 1, (std::__shared_weak_count_vtbl **)&v16);
    long long v13 = v16;
    long long v16 = 0uLL;
    int v14 = *(std::__shared_weak_count **)(v1 + 152);
    *(_OWORD *)(v1 + 144) = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    if (*((void *)&v16 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    if (v12)
    {
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_1C59EA2CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  _Unwind_Resume(a1);
}

void data::TransportService::State::startLimitTimer_sync(data::TransportService::State *this)
{
  if (*((_DWORD *)this + 26) == 1)
  {
    dispatch_time_t v2 = dispatch_time(0, 1000000000 * *((unsigned int *)this + 27) + 500000000);
    uint64_t v3 = *((void *)this + 20);
    if (v3)
    {
      dispatch_source_cancel(v3);
      uint64_t v4 = *((void *)this + 20);
      *((void *)this + 20) = 0;
      if (v4) {
        dispatch_release(v4);
      }
      unsigned int v5 = *((void *)this + 5);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", buf, 2u);
      }
    }
    uint64_t v6 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *((dispatch_queue_t *)this + 11));
    uint64_t v7 = *((void *)this + 20);
    *((void *)this + 20) = v6;
    if (v7)
    {
      dispatch_release(v7);
      uint64_t v6 = *((void *)this + 20);
    }
    dispatch_source_set_timer(v6, v2, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v8 || (v9 = *((void *)this + 9), (uint64_t v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    __int16 v11 = v10;
    p_shared_weak_owners = &v10->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    long long v13 = *((void *)this + 20);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_58;
    handler[4] = this;
    handler[5] = v9;
    long long v16 = v11;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    dispatch_source_set_event_handler(v13, handler);
    dispatch_activate(*((dispatch_object_t *)this + 20));
    int v14 = *((void *)this + 5);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I Limit timer started", buf, 2u);
    }
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
    std::__shared_weak_count::__release_weak(v11);
  }
}

void ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F2102F48;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (data::TransportService::State *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *((void *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Limit timer expired", v7, 2u);
        }
        data::TransportService::State::unblockThrottling_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C59EA874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(a1 + 40), __p),
         v13 >= 0)
      ? (uint64_t v4 = __p)
      : (uint64_t v4 = (void **)__p[0]),
        *(_DWORD *)long long buf = 136315138,
        uint64_t v15 = v4,
        _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Config set to %s", buf, 0xCu),
        v13 < 0))
  {
    operator delete(__p[0]);
    int v5 = *(_DWORD *)(v2 + 104);
    int v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6) {
      goto LABEL_13;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(v2 + 104);
    int v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6) {
      goto LABEL_13;
    }
  }
  *(_DWORD *)(v2 + 104) = v6;
  uint64_t v7 = *(NSObject **)(v2 + 40);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v6;
    _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Throttling %d", (uint8_t *)__p, 8u);
  }
  Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v8);
  if ((ApplePDPHelperInterface::enableLowPowerPDPThrottle(Instance) & 1) == 0)
  {
    uint64_t v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v6;
      _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed setting throttling to %d", (uint8_t *)__p, 8u);
    }
  }
  int v5 = *(_DWORD *)(a1 + 40);
LABEL_13:
  if (v5 == 1)
  {
    int v11 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(v2 + 108) != v11)
    {
      *(_DWORD *)(v2 + 108) = v11;
      if (*(void *)(v2 + 160)) {
        data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v2);
      }
    }
  }
}

void ___ZNK4data16TransportService5State9dumpStateEv_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(v1 + 104), __p);
    if (v12 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Config: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v2 = *(NSObject **)(v1 + 40);
  }
  BOOL v4 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    uint64_t v5 = *(int *)(v1 + 112);
    if (v5 > 2) {
      int v6 = "???";
    }
    else {
      int v6 = off_1E651AE70[v5];
    }
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = v6;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Low Power State %s", __p, 0xCu);
  }
  memset(buf, 0, 12);
  ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v4);
  int NumLowPowerPDPThrottleStats = ApplePDPHelperInterface::getNumLowPowerPDPThrottleStats();
  BOOL v8 = *(NSObject **)(v1 + 40);
  if (NumLowPowerPDPThrottleStats)
  {
    if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 67109632;
      *(_DWORD *)&__p[4] = *(_DWORD *)buf;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = *(_DWORD *)&buf[4];
      __int16 v10 = 1024;
      int v11 = *(_DWORD *)&buf[8];
      _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Blocked outgoing packets: %u, non-baseband wakes: %u, incoming traffic deactivations: %u", __p, 0x14u);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string __p = 0;
    _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "Failed to query throttle stats", __p, 2u);
  }
}

void ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(data::TransportService::State **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Unblocking throttling", v3, 2u);
  }
  data::TransportService::State::unblockThrottling_sync(v1);
}

uint64_t __cxx_global_var_init_3()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy, &ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void NetworkStatsInterface::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  BOOL v4 = operator new(0x68uLL);
  uint64_t v5 = (uint64_t)v4;
  int v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = *a1;
  uint64_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkStatsInterface::NetworkStatsInterface(v4, &v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<NetworkStatsInterface>::shared_ptr[abi:ne180100]<NetworkStatsInterface,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1},void>(a2, v5);
  ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  uint64_t v7 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1C59EAE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C59EAE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C59EAE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void *NetworkStatsInterface::NetworkStatsInterface(void *a1, void *a2)
{
  *a1 = &unk_1F21031F8;
  BOOL v4 = a1 + 9;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v6, "com.apple.telephony.abm", "net.stats");
  dispatch_object_t object = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable(v4, "net.stats", QOS_CLASS_DEFAULT, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v6, a2);
  *a1 = &unk_1F2103318;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v6);
  *a1 = &unk_1F21031F8;
  return a1;
}

void sub_1C59EAF78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_1C59EAF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a10);
  _Unwind_Resume(a1);
}

const char *NetworkStatsInterface::getName(NetworkStatsInterface *this)
{
  return "net.stats";
}

void NetworkStatsInterface::query(NetworkStatsInterface *this@<X0>, void *a2@<X8>)
{
  uint64_t v9 = 0;
  __int16 v10 = &v9;
  uint64_t v11 = 0x3802000000;
  char v12 = __Block_byref_object_copy_;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v13 = __Block_byref_object_dispose_;
  BOOL v4 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v4->__on_zero_shared = 0;
  v4->~__shared_weak_count_0 = 0;
  v4->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v4->~__shared_weak_count_0;
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2103398;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZN21NetworkStatsInterface5queryEv_block_invoke;
  v8[3] = &unk_1E651AE90;
  v8[4] = &v9;
  NetworkStatsInterface::applyInterfaces((uint64_t)this, (uint64_t)v8);
  uint64_t v6 = v10[6];
  *a2 = v10[5];
  a2[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(&v9, 8);
  uint64_t v7 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1C59EB158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  operator delete(v14);
  _Block_object_dispose(&a14, 8);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 + 40);
  _Unwind_Resume(a1);
}

void NetworkStatsInterface::applyInterfaces(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v55 = (ifaddrs *)0xAAAAAAAAAAAAAAAALL;
  int v3 = getifaddrs(&v55);
  if (v3)
  {
    BOOL v4 = __error();
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *v4;
      uint64_t v7 = strerror(v6);
      *(_DWORD *)long long buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v3;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v6;
      *(_WORD *)&buf[14] = 2080;
      *(void *)&uint8_t buf[16] = v7;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "Failed to get data stats, error %d errno=%d(%s)", buf, 0x18u);
    }
    return;
  }
  uint64_t v8 = v55;
  if (v55)
  {
    uint64_t v49 = a2;
    while (1)
    {
      unint64_t v53 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v54 = 0x6AAAAAAAAAAAAAALL;
      std::string __p = (void *)0xAA0070695F706470;
      ifa_addr = v8->ifa_addr;
      if (!ifa_addr)
      {
        uint64_t v8 = v8->ifa_next;
        goto LABEL_7;
      }
      int sa_family = ifa_addr->sa_family;
      unsigned int ifa_flags = v8->ifa_flags;
      memset(__dst, 170, sizeof(__dst));
      ifa_name = v8->ifa_name;
      size_t v13 = strlen(ifa_name);
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (unsigned char *)v13;
      if (v13 >= 0x17) {
        break;
      }
      HIBYTE(__dst[2]) = v13;
      uint64_t v15 = __dst;
      if (v13) {
        goto LABEL_16;
      }
LABEL_17:
      v14[(void)v15] = 0;
      uint64_t v18 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        long long v45 = __dst;
        if (SHIBYTE(__dst[2]) < 0) {
          long long v45 = (void **)__dst[0];
        }
        unsigned int v46 = v8->ifa_flags;
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = v45;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = sa_family;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v46;
        __int16 v58 = 1024;
        int v59 = ifa_flags & 1;
        _os_log_debug_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEBUG, "#D Found interface %s, family %u, flags %u, up %d", buf, 0x1Eu);
        if (sa_family != 30 && sa_family != 18) {
          goto LABEL_79;
        }
      }
      else if (sa_family != 30 && sa_family != 18)
      {
        goto LABEL_79;
      }
      int v20 = (unsigned char *)HIBYTE(__dst[2]);
      uint64_t v21 = (void **)__dst[0];
      if (SHIBYTE(__dst[2]) >= 0) {
        uint64_t v22 = __dst;
      }
      else {
        uint64_t v22 = (void **)__dst[0];
      }
      if (v54 >= 0) {
        p_p = (char *)&__p;
      }
      else {
        p_p = (char *)__p;
      }
      if (v54 >= 0) {
        int64_t v24 = HIBYTE(v54);
      }
      else {
        int64_t v24 = v53;
      }
      if (!v24)
      {
        int64_t v32 = 0;
LABEL_44:
        int v33 = (unsigned char *)(v32 + v24);
        if ((v20 & 0x80) != 0)
        {
          int v20 = __dst[1];
          if (__dst[1] < v33) {
LABEL_102:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
        }
        else
        {
          if (v33 > v20) {
            goto LABEL_102;
          }
          uint64_t v21 = __dst;
        }
        unint64_t v34 = v20 - v33;
        if ((unint64_t)(v20 - v33) > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v34 >= 0x17)
        {
          uint64_t v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17) {
            uint64_t v36 = v34 | 7;
          }
          uint64_t v37 = v36 + 1;
          uint64_t v35 = operator new(v36 + 1);
          *(void *)&uint8_t buf[8] = v20 - v33;
          *(void *)&uint8_t buf[16] = v37 | 0x8000000000000000;
          *(void *)long long buf = v35;
        }
        else
        {
          buf[23] = (_BYTE)v20 - (_BYTE)v33;
          uint64_t v35 = buf;
          if (v20 == v33)
          {
LABEL_56:
            v35[v34] = 0;
            __endptr = 0;
            if (buf[23] >= 0) {
              size_t v38 = buf[23];
            }
            else {
              size_t v38 = *(void *)&buf[8];
            }
            if (v38
              && (buf[23] >= 0 ? (char v39 = buf) : (char v39 = *(unsigned char **)buf),
                  (char v40 = memchr(v39, 45, v38)) != 0 && v40 - v39 != -1))
            {
              BOOL v41 = 0;
              uint64_t v42 = 2863311530;
              if ((buf[23] & 0x80000000) != 0)
              {
LABEL_66:
                operator delete(*(void **)buf);
                if (!v41) {
                  goto LABEL_79;
                }
LABEL_78:
                (*(void (**)(uint64_t, ifaddrs *, uint64_t))(v49 + 16))(v49, v8, v42);
                goto LABEL_79;
              }
            }
            else
            {
              *__error() = 0;
              if (buf[23] >= 0) {
                char v43 = buf;
              }
              else {
                char v43 = *(const char **)buf;
              }
              unsigned int v44 = strtoul(v43, &__endptr, 10);
              BOOL v41 = 0;
              if (*__error())
              {
                uint64_t v42 = 2863311530;
                if ((buf[23] & 0x80000000) != 0) {
                  goto LABEL_66;
                }
              }
              else
              {
                uint64_t v42 = 2863311530;
                if (__endptr)
                {
                  BOOL v41 = *__endptr == 0;
                  if (*__endptr) {
                    uint64_t v42 = 2863311530;
                  }
                  else {
                    uint64_t v42 = v44;
                  }
                }
                if ((buf[23] & 0x80000000) != 0) {
                  goto LABEL_66;
                }
              }
            }
            if (!v41) {
              goto LABEL_79;
            }
            goto LABEL_78;
          }
        }
        memmove(v35, &v33[(void)v21], v20 - v33);
        goto LABEL_56;
      }
      if (SHIBYTE(__dst[2]) >= 0) {
        uint64_t v25 = HIBYTE(__dst[2]);
      }
      else {
        uint64_t v25 = (uint64_t)__dst[1];
      }
      if (v25 >= v24)
      {
        uint64_t v26 = (char *)v22 + v25;
        int v27 = *p_p;
        uint64_t v28 = v22;
        while (1)
        {
          uint64_t v29 = v25 - v24;
          if (v29 == -1) {
            goto LABEL_79;
          }
          BOOL v30 = (char *)memchr(v28, v27, v29 + 1);
          if (!v30) {
            goto LABEL_79;
          }
          BOOL v31 = v30;
          if (!memcmp(v30, p_p, v24)) {
            break;
          }
          uint64_t v28 = (void **)(v31 + 1);
          uint64_t v25 = v26 - (v31 + 1);
          if (v25 < v24) {
            goto LABEL_79;
          }
        }
        if (v31 != v26)
        {
          int64_t v32 = v31 - (char *)v22;
          if (v31 - (char *)v22 != -1) {
            goto LABEL_44;
          }
        }
      }
LABEL_79:
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        uint64_t v8 = v8->ifa_next;
        if (SHIBYTE(v54) < 0) {
LABEL_83:
        }
          operator delete(__p);
      }
      else
      {
        uint64_t v8 = v8->ifa_next;
        if (SHIBYTE(v54) < 0) {
          goto LABEL_83;
        }
      }
LABEL_7:
      if (!v8)
      {
        uint64_t v48 = v55;
        goto LABEL_98;
      }
    }
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    __dst[2] = (void *)(v17 | 0x8000000000000000);
    __dst[0] = v15;
LABEL_16:
    memmove(v15, ifa_name, (size_t)v14);
    goto LABEL_17;
  }
  uint64_t v48 = 0;
LABEL_98:
  MEMORY[0x1C8795630](v48);
}

void sub_1C59EB6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(a21);
  goto LABEL_7;
}

void ___ZN21NetworkStatsInterface5queryEv_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a2 + 16);
  memset(__dst, 170, sizeof(__dst));
  uint64_t v7 = *(const char **)(a2 + 8);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    __int16 v10 = operator new(v11 + 1);
    *(void *)&__dst[8] = v9;
    *(void *)&__dst[16] = v12 | 0x8000000000000000;
    *(void *)std::string __dst = v10;
    goto LABEL_8;
  }
  __dst[23] = v8;
  __int16 v10 = __dst;
  if (v8) {
LABEL_8:
  }
    memmove(v10, v7, v9);
  v10[v9] = 0;
  size_t v13 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v15 = v13 + 1;
  uint64_t v14 = v13[1];
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v16 = (uint64_t **)v14;
        unsigned int v17 = *((_DWORD *)v14 + 8);
        if (v17 <= a3) {
          break;
        }
        uint64_t v14 = *v16;
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_16;
        }
      }
      if (v17 >= a3) {
        break;
      }
      uint64_t v14 = v16[1];
      if (!v14)
      {
        uint64_t v15 = v16 + 1;
        goto LABEL_16;
      }
    }
    uint64_t v18 = (char *)v16;
  }
  else
  {
    uint64_t v16 = v13 + 1;
LABEL_16:
    uint64_t v18 = (char *)operator new(0x50uLL);
    *((_DWORD *)v18 + 8) = a3;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *((void *)v18 + 9) = 0;
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v16;
    *uint64_t v15 = (uint64_t *)v18;
    int v19 = (uint64_t *)**v13;
    int v20 = (uint64_t *)v18;
    if (v19)
    {
      *size_t v13 = v19;
      int v20 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v13[1], v20);
    void v13[2] = (uint64_t *)((char *)v13[2] + 1);
  }
  v18[48] |= v6 & 1;
  uint64_t v21 = (void **)(v18 + 56);
  if (v18 + 56 != __dst)
  {
    if (v18[79] < 0)
    {
      if (__dst[23] >= 0) {
        uint64_t v22 = __dst;
      }
      else {
        uint64_t v22 = *(unsigned char **)__dst;
      }
      if (__dst[23] >= 0) {
        size_t v23 = __dst[23];
      }
      else {
        size_t v23 = *(void *)&__dst[8];
      }
      std::string::__assign_no_alias<false>(v21, v22, v23);
    }
    else if ((__dst[23] & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v21, *(void **)__dst, *(size_t *)&__dst[8]);
    }
    else
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)__dst;
      *((void *)v18 + 9) = *(void *)&__dst[16];
    }
  }
  uint64_t v24 = *(void *)(a2 + 48);
  if (v24)
  {
    int v25 = *((_DWORD *)v18 + 11);
    *((_DWORD *)v18 + 10) += *(_DWORD *)(v24 + 28);
    *((_DWORD *)v18 + 11) = v25 + *(_DWORD *)(v24 + 20);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
}

void sub_1C59EB97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NetworkStatsInterface::getInterfaceList(NetworkStatsInterface *this@<X0>, void *a2@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x4002000000;
  size_t v13 = __Block_byref_object_copy__3;
  uint64_t v14 = __Block_byref_object_dispose__4;
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK21NetworkStatsInterface16getInterfaceListEv_block_invoke;
  void v9[3] = &unk_1E651AEB8;
  v9[4] = &v10;
  NetworkStatsInterface::applyInterfaces((uint64_t)this, (uint64_t)v9);
  int v3 = v11;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v5 = (unsigned char *)v3[5];
  BOOL v4 = (unsigned char *)v3[6];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *a2 = v7;
    size_t v8 = &v7[4 * (v6 >> 2)];
    a2[2] = v8;
    memcpy(v7, v5, v6);
    a2[1] = v8;
  }
  _Block_object_dispose(&v10, 8);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_1C59EBAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  a21 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZNK21NetworkStatsInterface16getInterfaceListEv_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v4 = *(void **)(*(void *)(a1 + 32) + 8);
  int64_t v6 = (char *)v4[6];
  unint64_t v5 = v4[7];
  uint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_DWORD *)int64_t v6 = a3;
    uint64_t v8 = (uint64_t)(v6 + 4);
    goto LABEL_22;
  }
  size_t v9 = (char *)v4[5];
  uint64_t v10 = (v6 - v9) >> 2;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 62) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v5 - (void)v9;
  if (v12 >> 1 > v11) {
    unint64_t v11 = v12 >> 1;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v14 = operator new(4 * v13);
    uint64_t v15 = &v14[4 * v10];
    uint64_t v16 = &v14[4 * v13];
    *uint64_t v15 = a3;
    uint64_t v8 = (uint64_t)(v15 + 1);
    int64_t v17 = v6 - v9;
    if (v6 == v9) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  uint64_t v15 = (_DWORD *)(4 * v10);
  uint64_t v16 = 0;
  *(_DWORD *)(4 * v10) = a3;
  uint64_t v8 = 4 * v10 + 4;
  int64_t v17 = v6 - v9;
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v18 = v17 - 4;
    if (v18 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v19 = (v18 >> 2) + 1;
    uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v7 = &v6[-v20];
    uint64_t v15 = (_DWORD *)((char *)v15 - v20);
    uint64_t v21 = &v14[4 * v10 - 16];
    uint64_t v22 = v6 - 16;
    uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      _OWORD *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v25 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--uint64_t v15 = v25;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  v4[5] = v15;
  void v4[6] = v8;
  v4[7] = v16;
  if (v9) {
    operator delete(v9);
  }
LABEL_22:
  void v4[6] = v8;
}

void NetworkStatsInterface::~NetworkStatsInterface(NetworkStatsInterface *this)
{
  *(void *)this = &unk_1F2103358;
  MEMORY[0x1C87940C0]((char *)this + 8);
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F2103358;
  MEMORY[0x1C87940C0]((char *)this + 8);
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(this);
}

uint64_t ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "net.stats");
}

uint64_t ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *std::string::__assign_no_alias<true>(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    int64_t v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *std::string __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    int64_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      int64_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    size_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
    goto LABEL_12;
  }
  size_t v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = v7 - 1;
  unint64_t v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2) {
      goto LABEL_7;
    }
LABEL_14:
    unint64_t v13 = 2 * v10;
    if (__len > 2 * v10) {
      unint64_t v13 = __len;
    }
    uint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v14 = v13 | 7;
    }
    if (v13 >= 0x17) {
      size_t v9 = v14 + 1;
    }
    else {
      size_t v9 = 23;
    }
    size_t v8 = operator new(v9);
    if (!__len) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unint64_t v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2) {
    goto LABEL_14;
  }
LABEL_7:
  size_t v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len) {
LABEL_8:
  }
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22) {
    operator delete(v11);
  }
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E651AB90, MEMORY[0x1E4FBA1D0]);
}

void sub_1C59EC070(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C59EC1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C59EC1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<NetworkStatsInterface>::shared_ptr[abi:ne180100]<NetworkStatsInterface,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  BOOL v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21032C8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C59EC320(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C59EC348(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable(void *a1, const char *a2, dispatch_qos_class_t a3, dispatch_object_t *a4)
{
  size_t v8 = *a4;
  if (*a4) {
    dispatch_retain(*a4);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  unint64_t v10 = dispatch_queue_create_with_target_V2(a2, initially_inactive, v8);
  dispatch_set_qos_class_floor(v10, a3, 0);
  dispatch_activate(v10);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  unint64_t v11 = *a4;
  a1[3] = *a4;
  if (v11) {
    dispatch_retain(v11);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v8) {
    dispatch_release(v8);
  }
  return a1;
}

void *ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1F2103358;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1F2102CB8;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1C59EC5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *ctu::SharedLoggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2103358;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2103358;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2103358;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2103358;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(char ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC3646) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC3646 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC3646)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC3646 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(*((void *)a1 + 1));
    if (a1[79] < 0)
    {
      operator delete(*((void **)a1 + 7));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

void BudgetData::BudgetData(BudgetData *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
}

void BudgetData::~BudgetData(BudgetData *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  void *v2 = 0;
}

{
  void *v2;

  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  void *v2 = 0;
}

void BudgetData::BudgetData(BudgetData *this, const BudgetData *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  if (this != a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  if (this != a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

void sub_1C59EC9BC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1C59ECA20(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *BudgetData::BudgetData(void *result, uint64_t a2)
{
  result[2] = 0;
  result[1] = 0;
  std::logic_error *result = result + 1;
  std::logic_error *result = *(void *)a2;
  *(void *)a2 = result + 1;
  uint64_t v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  if (result[2]) {
    uint64_t v3 = (void *)(result[1] + 16);
  }
  else {
    uint64_t v3 = result;
  }
  *uint64_t v3 = result + 1;
  *(void *)a2 = a2 + 8;
  return result;
}

{
  uint64_t v2;
  void *v3;

  result[2] = 0;
  result[1] = 0;
  std::logic_error *result = result + 1;
  std::logic_error *result = *(void *)a2;
  *(void *)a2 = result + 1;
  uint64_t v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  if (result[2]) {
    uint64_t v3 = (void *)(result[1] + 16);
  }
  else {
    uint64_t v3 = result;
  }
  *uint64_t v3 = result + 1;
  *(void *)a2 = a2 + 8;
  return result;
}

uint64_t BudgetData::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  }
  return a1;
}

uint64_t BudgetData::get(uint64_t **a1, unsigned int a2)
{
  char v2 = a2;
  uint64_t v5 = a1 + 1;
  BOOL v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v6 = v4;
        unsigned int v7 = v4[28];
        if (v7 <= a2) {
          break;
        }
        BOOL v4 = (unsigned __int8 *)*v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      BOOL v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    unint64_t v6 = a1 + 1;
LABEL_8:
    size_t v8 = v6;
    unint64_t v6 = operator new(0x28uLL);
    *((unsigned char *)v6 + 28) = v2;
    *((unsigned char *)v6 + 32) = 0;
    *((unsigned char *)v6 + 36) = 0;
    *unint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    unsigned char *v5 = v6;
    size_t v9 = (uint64_t *)**a1;
    unint64_t v10 = v6;
    if (v9)
    {
      *a1 = v9;
      unint64_t v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *BudgetData::set(uint64_t *result, unsigned int a2, int a3)
{
  char v4 = a2;
  uint64_t v5 = result;
  unsigned int v7 = (uint64_t **)(result + 1);
  unint64_t v6 = (unsigned __int8 *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        size_t v8 = v6;
        unsigned int v9 = v6[28];
        if (v9 <= a2) {
          break;
        }
        unint64_t v6 = (unsigned __int8 *)*v8;
        unsigned int v7 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      unint64_t v6 = (unsigned __int8 *)v8[1];
      if (!v6)
      {
        unsigned int v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    size_t v8 = result + 1;
LABEL_8:
    unint64_t v10 = v8;
    size_t v8 = operator new(0x28uLL);
    *((unsigned char *)v8 + 28) = v4;
    *((unsigned char *)v8 + 32) = 0;
    *((unsigned char *)v8 + 36) = 0;
    *size_t v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *unsigned int v7 = v8;
    uint64_t v11 = *(void *)*v5;
    uint64_t v12 = v8;
    if (v11)
    {
      uint64_t *v5 = v11;
      uint64_t v12 = *v7;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
    ++v5[2];
  }
  *((_DWORD *)v8 + 8) = a3;
  *((unsigned char *)v8 + 36) = 1;
  return result;
}

void BudgetData::clear(BudgetData *this)
{
  char v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  void *v2 = 0;
}

void *BudgetData::for_each(void *result, uint64_t a2)
{
  char v2 = result + 1;
  uint64_t v3 = (void *)*result;
  if ((void *)*result != result + 1)
  {
    do
    {
      uint64_t v5 = *(void *)(a2 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 48))(v5, (uint64_t)v3 + 28, v3 + 4);
      if (!result) {
        break;
      }
      unint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(uint64_t a1, void *a2, void *a3)
{
  char v4 = a2;
  if (*(void *)(a1 + 16))
  {
    unint64_t v6 = *(uint64_t **)a1;
    BOOL v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    unsigned int v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      unint64_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          uint64_t *v10 = 0;
          while (1)
          {
            uint64_t v35 = (uint64_t *)v10[1];
            if (!v35) {
              break;
            }
            do
            {
              unint64_t v10 = v35;
              uint64_t v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
        else
        {
          for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              unint64_t v10 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        uint64_t v12 = v9;
        unint64_t v13 = v4;
        while (1)
        {
          unsigned int v9 = v10;
          unsigned int v14 = *((unsigned __int8 *)v13 + 28);
          *((unsigned char *)v12 + 28) = v14;
          int v15 = *((_DWORD *)v13 + 8);
          *((unsigned char *)v12 + 36) = *((unsigned char *)v13 + 36);
          *((_DWORD *)v12 + 8) = v15;
          uint64_t v16 = *v8;
          int64_t v17 = (uint64_t **)(a1 + 8);
          unint64_t v18 = (uint64_t **)(a1 + 8);
          if (*v8) {
            break;
          }
LABEL_14:
          uint64_t *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v17;
          char *v18 = v12;
          uint64_t v19 = **(void **)a1;
          if (v19) {
            goto LABEL_15;
          }
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
          ++*(void *)(a1 + 16);
          if (v10)
          {
            unint64_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              uint64_t v22 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                uint64_t *v10 = 0;
                while (1)
                {
                  uint64_t v23 = (uint64_t *)v10[1];
                  if (!v23) {
                    break;
                  }
                  do
                  {
                    unint64_t v10 = v23;
                    uint64_t v23 = (uint64_t *)*v23;
                  }
                  while (v23);
                }
              }
              else
              {
                for (v10[1] = 0; v22; uint64_t v22 = (uint64_t *)v10[1])
                {
                  do
                  {
                    unint64_t v10 = v22;
                    uint64_t v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
            }
          }
          else
          {
            unint64_t v10 = 0;
          }
          uint64_t v20 = (void *)v13[1];
          if (v20)
          {
            do
            {
              char v4 = v20;
              uint64_t v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              char v4 = (void *)v13[2];
              BOOL v21 = *v4 == (void)v13;
              unint64_t v13 = v4;
            }
            while (!v21);
          }
          if (v9)
          {
            uint64_t v12 = v9;
            unint64_t v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            int64_t v17 = (uint64_t **)v16;
            if (v14 >= *((unsigned __int8 *)v16 + 28)) {
              break;
            }
            uint64_t v16 = (uint64_t *)*v16;
            unint64_t v18 = v17;
            if (!*v17) {
              goto LABEL_14;
            }
          }
          uint64_t v16 = (uint64_t *)v16[1];
        }
        while (v16);
        unint64_t v18 = v17 + 1;
        uint64_t *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v17;
        v17[1] = v12;
        uint64_t v19 = **(void **)a1;
        if (!v19) {
          goto LABEL_16;
        }
LABEL_15:
        *(void *)a1 = v19;
        uint64_t v12 = *v18;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v9);
      if (v10)
      {
        for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
          unint64_t v10 = i;
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    int v25 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      uint64_t v26 = (uint64_t *)operator new(0x28uLL);
      int v27 = v26;
      int v28 = *((_DWORD *)v4 + 9);
      *(uint64_t *)((char *)v26 + 28) = *(void *)((char *)v4 + 28);
      *((_DWORD *)v26 + 9) = v28;
      uint64_t v29 = *v25;
      BOOL v30 = (uint64_t **)(a1 + 8);
      BOOL v31 = (uint64_t **)(a1 + 8);
      if (*v25) {
        break;
      }
LABEL_54:
      uint64_t *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      *BOOL v31 = v26;
      uint64_t v32 = **(void **)a1;
      if (v32) {
        goto LABEL_55;
      }
LABEL_56:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
      ++*(void *)(a1 + 16);
      int v33 = (void *)v4[1];
      if (v33)
      {
        do
        {
          unint64_t v34 = v33;
          int v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          unint64_t v34 = (void *)v4[2];
          BOOL v21 = *v34 == (void)v4;
          char v4 = v34;
        }
        while (!v21);
      }
      char v4 = v34;
      if (v34 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        BOOL v30 = v29;
        if (*((unsigned __int8 *)v26 + 28) >= *((unsigned __int8 *)v29 + 28)) {
          break;
        }
        uint64_t v29 = (uint64_t **)*v29;
        BOOL v31 = v30;
        if (!*v30) {
          goto LABEL_54;
        }
      }
      uint64_t v29 = (uint64_t **)v29[1];
    }
    while (v29);
    BOOL v31 = v30 + 1;
    uint64_t *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    uint64_t v32 = **(void **)a1;
    if (!v32) {
      goto LABEL_56;
    }
LABEL_55:
    *(void *)a1 = v32;
    int v27 = *v31;
    goto LABEL_56;
  }
}

void coex::Module::create(uint64_t *a1@<X0>, capabilities::abs **a2@<X8>)
{
  *a2 = (capabilities::abs *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (capabilities::abs *)0xAAAAAAAAAAAAAAAALL;
  char v4 = (capabilities::abs *)operator new(0x40uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  coex::Module::Module(v4, v9);
  *a2 = v5;
  BOOL v8 = (capabilities::abs *)operator new(0x20uLL);
  *(void *)BOOL v8 = &unk_1F2103F70;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v5;
  a2[1] = v8;
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C59ED1B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

capabilities::abs *coex::Module::Module(capabilities::abs *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *((void *)a1 + 1) = v4;
  *((void *)a1 + 2) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)a1 + 3) = 0;
    *((void *)a1 + 4) = 0;
    *((void *)a1 + 5) = 0;
    std::__shared_weak_count::__release_weak(v5);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    *((void *)a1 + 3) = 0;
    *((void *)a1 + 4) = 0;
    *((void *)a1 + 5) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F21033E8;
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 7) = 0;
  if (!capabilities::abs::supportsCoex(a1)) {
    return a1;
  }
  GetABMLogServer(&v15);
  uint64_t v6 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = v6;
  unsigned int v14 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  coex::Module::State::create(&v15, &v13, (coex::Module::State **)&v17);
  long long v8 = v17;
  long long v17 = 0uLL;
  unsigned int v9 = (std::__shared_weak_count *)*((void *)a1 + 7);
  *((_OWORD *)a1 + 3) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v11 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_1C59ED464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int v14 = v13;
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v12);
  Service::~Service(v11);
  _Unwind_Resume(a1);
}

void sub_1C59ED498(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void coex::Module::State::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, coex::Module::State **a3@<X8>)
{
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v41, v6);
    long long v8 = v41;
    long long v41 = 0uLL;
    unsigned int v9 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    unint64_t v10 = (std::__shared_weak_count *)*((void *)&v41 + 1);
    if (*((void *)&v41 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = off_1EBBDCA08;
  }
  uint64_t v39 = v7;
  char v40 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  GetABMLogServer(&v35);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)v7 + 48))(&v37, v7, &v35);
  uint64_t v11 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *a3 = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = (std::__shared_weak_count **)operator new(0x118uLL);
  unsigned int v14 = v13;
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  uint64_t v33 = *a1;
  unint64_t v34 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)v38;
  v32[0] = v37;
  v32[1] = v38;
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *a2;
  unint64_t v18 = (std::__shared_weak_count *)a2[1];
  v31[0] = v17;
  v31[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  coex::Module::State::State((uint64_t)v13, &v33, v32, v31);
  *a3 = (coex::Module::State *)v14;
  a3[1] = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  p_shared_owners = &v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2103FC0;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  a3[1] = (coex::Module::State *)v19;
  BOOL v21 = v14[10];
  if (v21)
  {
    if (v21->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v14[9] = (std::__shared_weak_count *)v14;
      _OWORD v14[10] = v19;
      std::__shared_weak_count::__release_weak(v21);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_26:
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        uint64_t v22 = *a3;
        if (!*((void *)*a3 + 7)) {
          goto LABEL_38;
        }
        goto LABEL_30;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v14[9] = (std::__shared_weak_count *)v14;
    _OWORD v14[10] = v19;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_26;
    }
  }
  uint64_t v22 = *a3;
  if (!*((void *)*a3 + 7)) {
    goto LABEL_38;
  }
LABEL_30:
  uint64_t v23 = (std::__shared_weak_count *)*((void *)v22 + 10);
  if (!v23 || (uint64_t v24 = *((void *)v22 + 9), (v25 = std::__shared_weak_count::lock(v23)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v26 = v25;
  *(void *)&long long v41 = v24;
  *((void *)&v41 + 1) = v25;
  ctu::LoggerCommonBase::getLogDomain((coex::Module::State *)((char *)v22 + 8));
  uint64_t v39 = v24;
  char v40 = v26;
  long long v41 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  int v27 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  int v28 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_38:
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v29 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  coex::Module::State::init(*a3);
  BOOL v30 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v38 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1C59ED9D0()
{
}

void sub_1C59EDA54()
{
}

void sub_1C59EDA64()
{
}

void sub_1C59EDA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C59EDA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1C59EDAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void coex::Module::~Module(coex::Module *this)
{
  *(void *)this = &unk_1F21033E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(void *)this = &unk_1F2112348;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  else
  {
    *(void *)this = &unk_1F2112348;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = (void **)*((void *)this + 4);
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    do
    {
      if (*((char *)v4 - 1) < 0) {
        operator delete(*(v4 - 3));
      }
      v4 -= 3;
    }
    while (v4 != v3);
    uint64_t v5 = (void **)*((void *)this + 3);
  }
  *((void *)this + 4) = v3;
  operator delete(v5);
LABEL_11:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  std::__shared_weak_count *v2;
  void **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1F21033E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(void *)this = &unk_1F2112348;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  else
  {
    *(void *)this = &unk_1F2112348;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = (void **)*((void *)this + 4);
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    do
    {
      if (*((char *)v4 - 1) < 0) {
        operator delete(*(v4 - 3));
      }
      v4 -= 3;
    }
    while (v4 != v3);
    uint64_t v5 = (void **)*((void *)this + 3);
  }
  *((void *)this + 4) = v3;
  operator delete(v5);
LABEL_11:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  std::__shared_weak_count *v2;
  void **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F21033E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(void *)this = &unk_1F2112348;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  else
  {
    *(void *)this = &unk_1F2112348;
    uint64_t v3 = (void **)*((void *)this + 3);
    if (!v3) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = (void **)*((void *)this + 4);
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    do
    {
      if (*((char *)v4 - 1) < 0) {
        operator delete(*(v4 - 3));
      }
      v4 -= 3;
    }
    while (v4 != v3);
    uint64_t v5 = (void **)*((void *)this + 3);
  }
  *((void *)this + 4) = v3;
  operator delete(v5);
LABEL_11:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  operator delete(this);
}

const char *coex::Module::getName(coex::Module *this)
{
  return "coex.mod";
}

unsigned char *coex::Module::getShutdownStages@<X0>(unsigned char *this@<X0>, void *a2@<X8>)
{
  if (*((void *)this + 6))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v3 = operator new(1uLL);
    *a2 = v3;
    *uint64_t v3 = 3;
    this = v3 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

unsigned char *coex::Module::State::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  *uint64_t v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void coex::Module::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = v5;
    if (v5)
    {
      dispatch_retain(v5);
      dispatch_group_enter(v5);
      coex::Module::State::shutdown(v3, a2, &v6);
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
    else
    {
      coex::Module::State::shutdown(v3, a2, &v6);
    }
  }
}

void coex::Module::State::shutdown(void *a1, char a2, NSObject **a3)
{
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  void v13[2] = ___ZN4coex6Module5State8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v13[3] = &__block_descriptor_tmp_127;
  uint64_t v5 = *a3;
  v13[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v15 = a2;
  uint64_t v6 = (std::__shared_weak_count *)a1[10];
  if (!v6 || (uint64_t v7 = a1[9], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v9 = v8;
  uint64_t v10 = a1[11];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F2104938;
  void block[5] = v7;
  uint64_t v17 = v9;
  p_shared_owners = &v9->__shared_owners_;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v13;
  dispatch_async(v10, block);
  uint64_t v12 = v17;
  if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_9:
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void coex::Module::State::init(coex::Module::State *this)
{
  uint64_t v902 = *MEMORY[0x1E4F143B8];
  uint64_t v801 = *((void *)this + 9);
  v790 = (char *)this + 72;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v1 || (uint64_t v2 = std::__shared_weak_count::lock(v1)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v3 = v2;
  p_shared_weak_owners = &v2->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 15);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State4initEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_22;
  void aBlock[4] = this;
  void aBlock[5] = v801;
  v867 = v3;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = v6;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v5;
  LODWORD(v891) = 1200;
  if (v6) {
    uint64_t v8 = _Block_copy(v6);
  }
  else {
    uint64_t v8 = 0;
  }
  v890[1] = v8;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v5 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v7) {
    _Block_release(v7);
  }
  unsigned int v9 = (uint64_t *)*((void *)this + 15);
  v864[0] = MEMORY[0x1E4F143A8];
  v864[1] = 1174405120;
  v864[2] = ___ZN4coex6Module5State4initEv_block_invoke_21;
  v864[3] = &__block_descriptor_tmp_24;
  v864[4] = this;
  v864[5] = v801;
  v865 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = _Block_copy(v864);
  uint64_t v11 = v10;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v9;
  LODWORD(v891) = 1201;
  if (v10) {
    uint64_t v12 = _Block_copy(v10);
  }
  else {
    uint64_t v12 = 0;
  }
  v890[1] = v12;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v9 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v11) {
    _Block_release(v11);
  }
  uint64_t v13 = (uint64_t *)*((void *)this + 15);
  v862[0] = MEMORY[0x1E4F143A8];
  v862[1] = 1174405120;
  v862[2] = ___ZN4coex6Module5State4initEv_block_invoke_25;
  v862[3] = &__block_descriptor_tmp_28;
  v862[4] = this;
  v862[5] = v801;
  v863 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unsigned int v14 = _Block_copy(v862);
  char v15 = v14;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v13;
  LODWORD(v891) = 1202;
  if (v14) {
    uint64_t v16 = _Block_copy(v14);
  }
  else {
    uint64_t v16 = 0;
  }
  v890[1] = v16;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v13 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v15) {
    _Block_release(v15);
  }
  uint64_t v17 = (uint64_t *)*((void *)this + 15);
  v860[0] = MEMORY[0x1E4F143A8];
  v860[1] = 1174405120;
  v860[2] = ___ZN4coex6Module5State4initEv_block_invoke_29;
  v860[3] = &__block_descriptor_tmp_32;
  v860[4] = this;
  v860[5] = v801;
  v861 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v18 = _Block_copy(v860);
  uint64_t v19 = v18;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v17;
  LODWORD(v891) = 1203;
  if (v18) {
    uint64_t v20 = _Block_copy(v18);
  }
  else {
    uint64_t v20 = 0;
  }
  v890[1] = v20;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v17 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v19) {
    _Block_release(v19);
  }
  BOOL v21 = (uint64_t *)*((void *)this + 15);
  v858[0] = MEMORY[0x1E4F143A8];
  v858[1] = 1174405120;
  v858[2] = ___ZN4coex6Module5State4initEv_block_invoke_33;
  v858[3] = &__block_descriptor_tmp_36;
  v858[4] = this;
  v858[5] = v801;
  v859 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v22 = _Block_copy(v858);
  uint64_t v23 = v22;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v21;
  LODWORD(v891) = 1206;
  if (v22) {
    uint64_t v24 = _Block_copy(v22);
  }
  else {
    uint64_t v24 = 0;
  }
  v890[1] = v24;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v21 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v23) {
    _Block_release(v23);
  }
  int v25 = (uint64_t *)*((void *)this + 15);
  v856[0] = MEMORY[0x1E4F143A8];
  v856[1] = 1174405120;
  v856[2] = ___ZN4coex6Module5State4initEv_block_invoke_37;
  v856[3] = &__block_descriptor_tmp_40;
  v856[4] = this;
  v856[5] = v801;
  v857 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = _Block_copy(v856);
  int v27 = v26;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v25;
  LODWORD(v891) = 1204;
  if (v26) {
    int v28 = _Block_copy(v26);
  }
  else {
    int v28 = 0;
  }
  v890[1] = v28;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v25 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v27) {
    _Block_release(v27);
  }
  uint64_t v29 = (uint64_t *)*((void *)this + 15);
  v854[0] = MEMORY[0x1E4F143A8];
  v854[1] = 1174405120;
  v854[2] = ___ZN4coex6Module5State4initEv_block_invoke_41;
  v854[3] = &__block_descriptor_tmp_44;
  v854[4] = this;
  v854[5] = v801;
  v855 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v30 = _Block_copy(v854);
  BOOL v31 = v30;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v29;
  LODWORD(v891) = 1205;
  if (v30) {
    uint64_t v32 = _Block_copy(v30);
  }
  else {
    uint64_t v32 = 0;
  }
  v890[1] = v32;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v29 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v31) {
    _Block_release(v31);
  }
  uint64_t v33 = (uint64_t *)*((void *)this + 15);
  v852[0] = MEMORY[0x1E4F143A8];
  v852[1] = 1174405120;
  v852[2] = ___ZN4coex6Module5State4initEv_block_invoke_45;
  v852[3] = &__block_descriptor_tmp_48;
  v852[4] = this;
  v852[5] = v801;
  v853 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v34 = _Block_copy(v852);
  uint64_t v35 = v34;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v33;
  LODWORD(v891) = 1207;
  if (v34) {
    uint64_t v36 = _Block_copy(v34);
  }
  else {
    uint64_t v36 = 0;
  }
  v890[1] = v36;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v33 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v35) {
    _Block_release(v35);
  }
  unint64_t v37 = (uint64_t *)*((void *)this + 15);
  v850[0] = MEMORY[0x1E4F143A8];
  v850[1] = 1174405120;
  v850[2] = ___ZN4coex6Module5State4initEv_block_invoke_49;
  v850[3] = &__block_descriptor_tmp_52;
  v850[4] = this;
  v850[5] = v801;
  v851 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v38 = _Block_copy(v850);
  uint64_t v39 = v38;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v37;
  LODWORD(v891) = 1208;
  if (v38) {
    char v40 = _Block_copy(v38);
  }
  else {
    char v40 = 0;
  }
  v890[1] = v40;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v37 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v39) {
    _Block_release(v39);
  }
  long long v41 = (uint64_t *)*((void *)this + 15);
  v848[0] = MEMORY[0x1E4F143A8];
  v848[1] = 1174405120;
  v848[2] = ___ZN4coex6Module5State4initEv_block_invoke_53;
  v848[3] = &__block_descriptor_tmp_56_1;
  v848[4] = this;
  v848[5] = v801;
  v849 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v42 = _Block_copy(v848);
  char v43 = v42;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v41;
  LODWORD(v891) = 1209;
  if (v42) {
    unsigned int v44 = _Block_copy(v42);
  }
  else {
    unsigned int v44 = 0;
  }
  v890[1] = v44;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v41 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v43) {
    _Block_release(v43);
  }
  long long v45 = (uint64_t *)*((void *)this + 15);
  v846[0] = MEMORY[0x1E4F143A8];
  v846[1] = 1174405120;
  v846[2] = ___ZN4coex6Module5State4initEv_block_invoke_57;
  v846[3] = &__block_descriptor_tmp_60_2;
  v846[4] = this;
  v846[5] = v801;
  v847 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unsigned int v46 = _Block_copy(v846);
  long long v47 = v46;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v45;
  LODWORD(v891) = 1210;
  if (v46) {
    uint64_t v48 = _Block_copy(v46);
  }
  else {
    uint64_t v48 = 0;
  }
  v890[1] = v48;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v45 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v47) {
    _Block_release(v47);
  }
  uint64_t v49 = (uint64_t *)*((void *)this + 15);
  v844[0] = MEMORY[0x1E4F143A8];
  v844[1] = 1174405120;
  v844[2] = ___ZN4coex6Module5State4initEv_block_invoke_61;
  v844[3] = &__block_descriptor_tmp_64_0;
  v844[4] = this;
  v844[5] = v801;
  v845 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v50 = _Block_copy(v844);
  uint64_t v51 = v50;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v49;
  LODWORD(v891) = 1211;
  if (v50) {
    uint64_t v52 = _Block_copy(v50);
  }
  else {
    uint64_t v52 = 0;
  }
  v890[1] = v52;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v49 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v51) {
    _Block_release(v51);
  }
  unint64_t v53 = (uint64_t *)*((void *)this + 15);
  v842[0] = MEMORY[0x1E4F143A8];
  v842[1] = 1174405120;
  v842[2] = ___ZN4coex6Module5State4initEv_block_invoke_65;
  v842[3] = &__block_descriptor_tmp_68_1;
  v842[4] = this;
  v842[5] = v801;
  v843 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v54 = _Block_copy(v842);
  uint64_t v55 = v54;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v53;
  LODWORD(v891) = 1212;
  if (v54) {
    std::string::size_type v56 = _Block_copy(v54);
  }
  else {
    std::string::size_type v56 = 0;
  }
  v890[1] = v56;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v53 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v55) {
    _Block_release(v55);
  }
  int v57 = (uint64_t *)*((void *)this + 15);
  v840[0] = MEMORY[0x1E4F143A8];
  v840[1] = 1174405120;
  v840[2] = ___ZN4coex6Module5State4initEv_block_invoke_69;
  v840[3] = &__block_descriptor_tmp_72;
  v840[4] = this;
  v840[5] = v801;
  v841 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  __int16 v58 = _Block_copy(v840);
  int v59 = v58;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v57;
  LODWORD(v891) = 1213;
  if (v58) {
    uint64_t v60 = _Block_copy(v58);
  }
  else {
    uint64_t v60 = 0;
  }
  v890[1] = v60;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v57 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v59) {
    _Block_release(v59);
  }
  unint64_t v61 = (uint64_t *)*((void *)this + 15);
  v838[0] = MEMORY[0x1E4F143A8];
  v838[1] = 1174405120;
  v838[2] = ___ZN4coex6Module5State4initEv_block_invoke_73;
  v838[3] = &__block_descriptor_tmp_76;
  v838[4] = this;
  v838[5] = v801;
  v839 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v62 = _Block_copy(v838);
  uint64_t v63 = v62;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v61;
  LODWORD(v891) = 1214;
  if (v62) {
    size_t v64 = _Block_copy(v62);
  }
  else {
    size_t v64 = 0;
  }
  v890[1] = v64;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v61 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v63) {
    _Block_release(v63);
  }
  unsigned int v65 = (uint64_t *)*((void *)this + 15);
  v836[0] = MEMORY[0x1E4F143A8];
  v836[1] = 1174405120;
  v836[2] = ___ZN4coex6Module5State4initEv_block_invoke_77;
  v836[3] = &__block_descriptor_tmp_80_0;
  v836[4] = this;
  v836[5] = v801;
  v837 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unsigned int v66 = _Block_copy(v836);
  uint64_t v67 = v66;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v65;
  LODWORD(v891) = 1215;
  if (v66) {
    int v68 = _Block_copy(v66);
  }
  else {
    int v68 = 0;
  }
  v890[1] = v68;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v65 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v67) {
    _Block_release(v67);
  }
  uint64_t v69 = (uint64_t *)*((void *)this + 15);
  v834[0] = MEMORY[0x1E4F143A8];
  v834[1] = 1174405120;
  v834[2] = ___ZN4coex6Module5State4initEv_block_invoke_81;
  v834[3] = &__block_descriptor_tmp_84;
  v834[4] = this;
  v834[5] = v801;
  v835 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v70 = _Block_copy(v834);
  unint64_t v71 = v70;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v69;
  LODWORD(v891) = 1216;
  if (v70) {
    uint64_t v72 = _Block_copy(v70);
  }
  else {
    uint64_t v72 = 0;
  }
  v890[1] = v72;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v69 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v71) {
    _Block_release(v71);
  }
  unint64_t v73 = (uint64_t *)*((void *)this + 15);
  v832[0] = MEMORY[0x1E4F143A8];
  v832[1] = 1174405120;
  v832[2] = ___ZN4coex6Module5State4initEv_block_invoke_85;
  v832[3] = &__block_descriptor_tmp_88;
  v832[4] = this;
  v832[5] = v801;
  v833 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v74 = _Block_copy(v832);
  uint64_t v75 = v74;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v73;
  LODWORD(v891) = 1221;
  if (v74) {
    unsigned int v76 = _Block_copy(v74);
  }
  else {
    unsigned int v76 = 0;
  }
  v890[1] = v76;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v73 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v75) {
    _Block_release(v75);
  }
  unsigned int v77 = (uint64_t *)*((void *)this + 15);
  v830[0] = MEMORY[0x1E4F143A8];
  v830[1] = 1174405120;
  v830[2] = ___ZN4coex6Module5State4initEv_block_invoke_89;
  v830[3] = &__block_descriptor_tmp_92;
  v830[4] = this;
  v830[5] = v801;
  v831 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unsigned int v78 = _Block_copy(v830);
  uint64_t v79 = v78;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v77;
  LODWORD(v891) = 1224;
  if (v78) {
    xpc_object_t v80 = _Block_copy(v78);
  }
  else {
    xpc_object_t v80 = 0;
  }
  v890[1] = v80;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v77 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v79) {
    _Block_release(v79);
  }
  uint64_t v81 = (uint64_t *)*((void *)this + 15);
  v828[0] = MEMORY[0x1E4F143A8];
  v828[1] = 1174405120;
  v828[2] = ___ZN4coex6Module5State4initEv_block_invoke_93;
  v828[3] = &__block_descriptor_tmp_96;
  v828[4] = this;
  v828[5] = v801;
  v829 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v82 = _Block_copy(v828);
  uint64_t v83 = v82;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v81;
  LODWORD(v891) = 1222;
  if (v82) {
    uint64_t v84 = _Block_copy(v82);
  }
  else {
    uint64_t v84 = 0;
  }
  v890[1] = v84;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v81 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v83) {
    _Block_release(v83);
  }
  uint64_t v85 = (uint64_t *)*((void *)this + 15);
  v826[0] = MEMORY[0x1E4F143A8];
  v826[1] = 1174405120;
  v826[2] = ___ZN4coex6Module5State4initEv_block_invoke_97;
  v826[3] = &__block_descriptor_tmp_100;
  v826[4] = this;
  v826[5] = v801;
  v827 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v86 = _Block_copy(v826);
  BOOL v87 = v86;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v85;
  LODWORD(v891) = 1217;
  if (v86) {
    BOOL v88 = _Block_copy(v86);
  }
  else {
    BOOL v88 = 0;
  }
  v890[1] = v88;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v85 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v87) {
    _Block_release(v87);
  }
  unsigned int v89 = (uint64_t *)*((void *)this + 15);
  v824[0] = MEMORY[0x1E4F143A8];
  v824[1] = 1174405120;
  v824[2] = ___ZN4coex6Module5State4initEv_block_invoke_101;
  v824[3] = &__block_descriptor_tmp_104;
  v824[4] = this;
  v824[5] = v801;
  v825 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v90 = _Block_copy(v824);
  char v91 = v90;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v89;
  LODWORD(v891) = 1218;
  if (v90) {
    std::string v92 = _Block_copy(v90);
  }
  else {
    std::string v92 = 0;
  }
  v890[1] = v92;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v89 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v91) {
    _Block_release(v91);
  }
  uint64_t v93 = (uint64_t *)*((void *)this + 15);
  v822[0] = MEMORY[0x1E4F143A8];
  v822[1] = 1174405120;
  v822[2] = ___ZN4coex6Module5State4initEv_block_invoke_105;
  v822[3] = &__block_descriptor_tmp_108;
  v822[4] = this;
  v822[5] = v801;
  v823 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v94 = _Block_copy(v822);
  std::string v95 = v94;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v93;
  LODWORD(v891) = 1219;
  if (v94) {
    std::string v96 = _Block_copy(v94);
  }
  else {
    std::string v96 = 0;
  }
  v890[1] = v96;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v93 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v95) {
    _Block_release(v95);
  }
  std::string v97 = (uint64_t *)*((void *)this + 15);
  v820[0] = MEMORY[0x1E4F143A8];
  v820[1] = 1174405120;
  v820[2] = ___ZN4coex6Module5State4initEv_block_invoke_109;
  v820[3] = &__block_descriptor_tmp_112;
  v820[4] = this;
  v820[5] = v801;
  v821 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v98 = _Block_copy(v820);
  std::string v99 = v98;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v97;
  LODWORD(v891) = 1220;
  if (v98) {
    std::string v100 = _Block_copy(v98);
  }
  else {
    std::string v100 = 0;
  }
  v890[1] = v100;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v97 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v99) {
    _Block_release(v99);
  }
  v101 = (uint64_t *)*((void *)this + 15);
  v818[0] = MEMORY[0x1E4F143A8];
  v818[1] = 1174405120;
  v818[2] = ___ZN4coex6Module5State4initEv_block_invoke_113;
  v818[3] = &__block_descriptor_tmp_116;
  v818[4] = this;
  v818[5] = v801;
  v819 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v102 = _Block_copy(v818);
  uint64_t v103 = v102;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v889 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_5_9;
  v890[0] = v101;
  LODWORD(v891) = 1223;
  if (v102) {
    uint64_t v104 = _Block_copy(v102);
  }
  else {
    uint64_t v104 = 0;
  }
  v890[1] = v104;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v101 + 1, (uint64_t)&block);
  if (v890[1]) {
    _Block_release(v890[1]);
  }
  if (v103) {
    _Block_release(v103);
  }
  std::string v105 = (void *)*((void *)this + 15);
  v877[0] = (void *)MEMORY[0x1E4F143A8];
  v877[1] = (void *)0x40000000;
  *(void *)&long long v878 = ___ZN4coex9XpcClient5startEv_block_invoke;
  *((void *)&v878 + 1) = &__block_descriptor_tmp_6;
  *(void *)&long long v879 = v105;
  v868 = v877;
  *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 0x40000000;
  *(void *)&long long v889 = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  *((void *)&v889 + 1) = &__block_descriptor_tmp_14;
  v890[0] = v105 + 1;
  v890[1] = &v868;
  int v106 = v105[3];
  if (v105[4]) {
    dispatch_async_and_wait(v106, &block);
  }
  else {
    dispatch_sync(v106, &block);
  }
  uint64_t v793 = *((void *)this + 13);
  v868 = (void **)MEMORY[0x1E4F143A8];
  uint64_t v869 = 0x40000000;
  v870 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvvENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEEEENS7_5mutexEEES3_vJEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke;
  v871 = &__block_descriptor_tmp_366;
  v872 = v790;
  v873 = coex::Module::State::handleCommandDriverStarted_sync;
  uint64_t v874 = 0;
  std::string v107 = _Block_copy(&v868);
  v785 = v3;
  xpc_object_t v108 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v108 || (uint64_t v109 = *((void *)this + 9), (v110 = std::__shared_weak_count::lock(v108)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string v111 = v110;
  uint64_t v112 = *((void *)this + 11);
  dispatch_object_t v875 = v112;
  v783 = v107;
  if (v107) {
    uint64_t v113 = _Block_copy(v107);
  }
  else {
    uint64_t v113 = 0;
  }
  v876 = v113;
  dispatch_retain(v112);
  long long v878 = 0u;
  *(_OWORD *)v877 = 0u;
  dispatch_object_t v881 = v112;
  if (v113) {
    uint64_t v113 = _Block_copy(v113);
  }
  v882 = v113;
  dispatch_retain(v112);
  dispatch_object_t object = v112;
  v786 = v111;
  if (!v113)
  {
    v884 = 0;
    dispatch_retain(v112);
    goto LABEL_199;
  }
  uint64_t v114 = _Block_copy(v113);
  v884 = v114;
  dispatch_retain(v112);
  if (!v114)
  {
LABEL_199:
    dispatch_retain(v112);
    v885 = 0;
    goto LABEL_200;
  }
  uint64_t v115 = _Block_copy(v114);
  dispatch_retain(v112);
  v885 = 0;
  if (!v115)
  {
LABEL_200:
    dispatch_retain(v112);
    v777 = 0;
    char v120 = 1;
LABEL_201:
    dispatch_retain(v112);
    v769 = 0;
    char v121 = 1;
LABEL_202:
    dispatch_retain(v112);
    long long v117 = 0;
    char v122 = 1;
LABEL_203:
    dispatch_retain(v112);
    unint64_t v118 = 0;
    unint64_t v886 = (unint64_t)v112;
    char v123 = 1;
    goto LABEL_204;
  }
  uint64_t v116 = _Block_copy(v115);
  dispatch_retain(v112);
  v777 = v115;
  if (!v116)
  {
    char v120 = 0;
    goto LABEL_201;
  }
  long long v117 = _Block_copy(v116);
  dispatch_retain(v112);
  v769 = v116;
  if (!v117)
  {
    char v120 = 0;
    char v121 = 0;
    goto LABEL_202;
  }
  unint64_t v118 = _Block_copy(v117);
  dispatch_retain(v112);
  if (!v118)
  {
    char v120 = 0;
    char v121 = 0;
    char v122 = 0;
    goto LABEL_203;
  }
  unint64_t v119 = _Block_copy(v118);
  dispatch_retain(v112);
  unint64_t v886 = (unint64_t)v112;
  if (v119)
  {
    char v120 = 0;
    char v121 = 0;
    char v122 = 0;
    char v123 = 0;
    v887 = _Block_copy(v119);
    dispatch_retain(v112);
    dispatch_release(v112);
    _Block_release(v119);
    goto LABEL_205;
  }
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
LABEL_204:
  v887 = 0;
  dispatch_retain(v112);
  dispatch_release(v112);
LABEL_205:
  dispatch_release(v112);
  if ((v123 & 1) == 0) {
    _Block_release(v118);
  }
  dispatch_release(v112);
  if ((v122 & 1) == 0) {
    _Block_release(v117);
  }
  v885 = boost::function0<void>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>)::stored_vtable;
  dispatch_release(v112);
  if ((v121 & 1) == 0) {
    _Block_release(v769);
  }
  dispatch_release(v112);
  if ((v120 & 1) == 0) {
    _Block_release(v777);
  }
  *((void *)&v889 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v889 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&blocuint64_t k = 0;
  boost::function0<void>::move_assign((uint64_t)&block, (uint64_t *)&v885);
  boost::function0<void>::move_assign((uint64_t)&v885, (uint64_t *)&v878 + 1);
  boost::function0<void>::move_assign((uint64_t)&v878 + 8, (uint64_t *)&block);
  if ((void)block)
  {
    if ((block & 1) == 0)
    {
      long long v124 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
      if (v124) {
        v124((char *)&block + 8, (char *)&block + 8, 2);
      }
    }
  }
  if (v885)
  {
    if ((v885 & 1) == 0)
    {
      uint64_t v125 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v885 & 0xFFFFFFFFFFFFFFFELL);
      if (v125) {
        v125((uint64_t)&v886, &v886, 2u);
      }
    }
    v885 = 0;
  }
  dispatch_release(object);
  if (v884) {
    _Block_release(v884);
  }
  dispatch_release(v881);
  if (v882) {
    _Block_release(v882);
  }
  atomic_fetch_add_explicit(&v786->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  dispatch_object_t v126 = operator new(0x18uLL);
  *dispatch_object_t v126 = &unk_1F2104268;
  v126[1] = v109;
  v126[2] = v786;
  atomic_fetch_add_explicit(&v786->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v127 = operator new(0x18uLL);
  *uint64_t v127 = &unk_1F2104268;
  v127[1] = v109;
  v127[2] = v786;
  atomic_fetch_add_explicit(&v786->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)&block + 1) = v127;
  LODWORD(block) = 2;
  int v128 = v877[1];
  if (v877[1] >= (void *)v878)
  {
    uint64_t v131 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v877, (uint64_t)&block);
    uint64_t v130 = v786;
  }
  else
  {
    uint64_t v129 = operator new(0x18uLL);
    *uint64_t v129 = &unk_1F2104268;
    v129[1] = v109;
    uint64_t v130 = v786;
    v129[2] = v786;
    atomic_fetch_add_explicit(&v786->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v128[1] = v129;
    *(_DWORD *)int v128 = 2;
    uint64_t v131 = v128 + 3;
  }
  v877[1] = v131;
  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&block);
  (*(void (**)(void *))(*v126 + 8))(v126);
  std::__shared_weak_count::__release_weak(v130);
  uint64_t v132 = *(uint64_t ***)(v793 + 128);
  *(void *)&long long v133 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v133 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v897 = v133;
  long long v896 = v133;
  long long v895 = v133;
  long long v894 = v133;
  long long v893 = v133;
  long long v892 = v133;
  long long v891 = v133;
  *(_OWORD *)v890 = v133;
  long long v889 = v133;
  blocuint64_t k = v133;
  long long v134 = (pthread_mutex_t *)v132[3];
  unint64_t v898 = 10;
  std::string __p = &block;
  uint64_t v900 = 0;
  v901 = v134;
  pthread_mutex_lock(v134);
  unint64_t v886 = 0xAAAAAAAAAAAAAAAALL;
  v885 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
  long long v135 = (atomic_uint *)v132[1];
  v794 = (uint64_t ***)v132;
  if (!v135 || atomic_load_explicit(v135 + 2, memory_order_acquire) != 1)
  {
    long long v139 = (uint64_t **)operator new(0x20uLL);
    long long v140 = *v132;
    uint64_t v141 = **v132;
    v778 = v139;
    unint64_t v142 = operator new(0x40uLL);
    CFMutableDictionaryRef v143 = v142;
    *unint64_t v142 = v142;
    v142[1] = v142;
    v142[2] = 0;
    uint64_t v144 = *(void **)(v141 + 8);
    if (v144 != (void *)v141)
    {
      uint64_t v145 = 0;
      uint64_t v146 = v142;
      do
      {
        CFMutableDictionaryRef v147 = operator new(0x20uLL);
        v147[2] = v144[2];
        uint64_t v148 = v144[3];
        v147[3] = v148;
        if (v148)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v148 + 8), 1u, memory_order_relaxed);
          uint64_t v146 = (void *)*v143;
          uint64_t v145 = v143[2];
        }
        *CFMutableDictionaryRef v147 = v146;
        v147[1] = v143;
        v146[1] = v147;
        *CFMutableDictionaryRef v143 = v147;
        v143[2] = ++v145;
        uint64_t v144 = (void *)v144[1];
        uint64_t v146 = v147;
      }
      while (v144 != (void *)v141);
    }
    v770 = v140;
    v143[3] = 0;
    CFMutableDictionaryRef v149 = (void **)(v143 + 3);
    v143[4] = 0;
    CFMutableDictionaryRef v150 = v143 + 4;
    v143[5] = 0;
    *((unsigned char *)v143 + 48) = *(unsigned char *)(v141 + 48);
    v143[3] = v143 + 4;
    CFMutableDictionaryRef v151 = *(void **)(v141 + 24);
    CFMutableDictionaryRef v152 = (void *)(v141 + 32);
    if (v151 == (void *)(v141 + 32))
    {
LABEL_239:
      *((unsigned char *)v143 + 56) = *(unsigned char *)(v141 + 56);
      CFMutableDictionaryRef v153 = *(void **)(v141 + 24);
      if (v153 != v152)
      {
        CFMutableDictionaryRef v154 = (void *)v143[3];
        uint64_t v155 = v143[1];
        do
        {
          v154[6] = v155;
          uint64_t v156 = v141;
          if (v153 != v152) {
            uint64_t v156 = v153[6];
          }
          CFMutableDictionaryRef v157 = (void *)v153[1];
          CFMutableDictionaryRef v158 = v157;
          CFMutableDictionaryRef v159 = v153;
          if (v157)
          {
            do
            {
              CFMutableDictionaryRef v160 = v158;
              CFMutableDictionaryRef v158 = (void *)*v158;
            }
            while (v158);
          }
          else
          {
            do
            {
              CFMutableDictionaryRef v160 = (void *)v159[2];
              BOOL v205 = *v160 == (void)v159;
              CFMutableDictionaryRef v159 = v160;
            }
            while (!v205);
          }
          uint64_t v161 = v141;
          if (v160 != v152) {
            uint64_t v161 = v160[6];
          }
          while (v156 != v161)
          {
            uint64_t v156 = *(void *)(v156 + 8);
            uint64_t v155 = *(void *)(v155 + 8);
          }
          if (v157)
          {
            do
            {
              CFMutableDictionaryRef v162 = v157;
              CFMutableDictionaryRef v157 = (void *)*v157;
            }
            while (v157);
          }
          else
          {
            do
            {
              CFMutableDictionaryRef v162 = (void *)v153[2];
              BOOL v205 = *v162 == (void)v153;
              CFMutableDictionaryRef v153 = v162;
            }
            while (!v205);
          }
          CFMutableDictionaryRef v163 = (void *)v154[1];
          if (v163)
          {
            do
            {
              CFMutableDictionaryRef v164 = v163;
              CFMutableDictionaryRef v163 = (void *)*v163;
            }
            while (v163);
          }
          else
          {
            do
            {
              CFMutableDictionaryRef v164 = (void *)v154[2];
              BOOL v205 = *v164 == (void)v154;
              CFMutableDictionaryRef v154 = v164;
            }
            while (!v205);
          }
          CFMutableDictionaryRef v153 = v162;
          CFMutableDictionaryRef v154 = v164;
        }
        while (v162 != v152);
      }
      *v778 = v143;
      v778[1] = 0;
      v184 = (uint64_t *)operator new(0x18uLL);
      uint64_t v132 = (uint64_t **)v794;
      v184[1] = 0x100000001;
      uint64_t *v184 = (uint64_t)&unk_1F21040B0;
      v184[2] = (uint64_t)v143;
      v778[1] = v184;
      v778[2] = (uint64_t *)v770[2];
      uint64_t v185 = v770[3];
      v778[3] = (uint64_t *)v185;
      if (v185) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v185 + 8), 1u, memory_order_relaxed);
      }
      v186 = (uint64_t **)operator new(0x18uLL);
      v186[1] = (uint64_t *)0x100000001;
      *v186 = (uint64_t *)&unk_1F2104050;
      v186[2] = (uint64_t *)v778;
      v187 = (atomic_uint *)v794[1];
      *v794 = v778;
      v794[1] = v186;
      if (v187)
      {
        if (atomic_fetch_add(v187 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v187 + 16))(v187);
          if (atomic_fetch_add(v187 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v187 + 24))(v187);
          }
        }
      }
      int v138 = 0;
      long long v136 = **v794;
LABEL_318:
      long long v137 = (uint64_t *)v136[1];
      if (v136 == v137) {
        goto LABEL_418;
      }
      goto LABEL_319;
    }
    while (1)
    {
      int v165 = *((_DWORD *)v151 + 8);
      CFMutableDictionaryRef v166 = (void *)*v150;
      v167 = v143 + 4;
      if (*v149 != v150)
      {
        CFMutableDictionaryRef v168 = (void *)*v150;
        long long v169 = v143 + 4;
        if (v166)
        {
          do
          {
            v167 = v168;
            CFMutableDictionaryRef v168 = (void *)v168[1];
          }
          while (v168);
        }
        else
        {
          do
          {
            v167 = (void *)v169[2];
            BOOL v205 = *v167 == (void)v169;
            long long v169 = v167;
          }
          while (v205);
        }
        int v170 = *((_DWORD *)v151 + 10);
        int v171 = *((_DWORD *)v167 + 8);
        if (v171 == v165)
        {
          if (v165 != 1) {
            goto LABEL_284;
          }
          if (*((_DWORD *)v167 + 10) >= v170)
          {
            v172 = (void *)*v150;
            v173 = v143 + 4;
            v174 = v143 + 4;
            if (v166) {
              goto LABEL_288;
            }
LABEL_295:
            v178 = operator new(0x38uLL);
            long long v179 = *((_OWORD *)v151 + 2);
            v178[6] = v151[6];
            *((_OWORD *)v178 + 2) = v179;
            void *v178 = 0;
            v178[1] = 0;
            v178[2] = v174;
            void *v173 = v178;
            v180 = (void *)**v149;
            if (v180)
            {
              __CFDictionary *v149 = v180;
              v178 = (void *)*v173;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v143[4], v178);
            ++v143[5];
            goto LABEL_298;
          }
        }
        else if (v171 >= v165)
        {
LABEL_284:
          v173 = v143 + 4;
          v174 = v143 + 4;
          if (!v166) {
            goto LABEL_295;
          }
          v172 = (void *)*v150;
          if (v165 != 1)
          {
            int v175 = *((_DWORD *)v166 + 8);
            v174 = (void *)*v150;
            while (v165 != v175)
            {
              if (v165 < v175)
              {
                uint64_t v183 = *v174;
                v173 = v174;
                if (!*v174) {
                  goto LABEL_295;
                }
              }
              else
              {
                if (v175 >= v165) {
                  goto LABEL_298;
                }
                uint64_t v183 = v174[1];
                if (!v183) {
                  goto LABEL_294;
                }
              }
              int v175 = *(_DWORD *)(v183 + 32);
              v174 = (void *)v183;
            }
            goto LABEL_298;
          }
          while (1)
          {
LABEL_288:
            v174 = v172;
            int v176 = *((_DWORD *)v172 + 8);
            if (v176 == 1)
            {
              int v177 = *((_DWORD *)v172 + 10);
              if (v177 > v170) {
                goto LABEL_287;
              }
              if (v177 >= v170) {
                goto LABEL_298;
              }
            }
            else if (v176 > 1)
            {
LABEL_287:
              v172 = (void *)*v172;
              v173 = v174;
              if (!*v174) {
                goto LABEL_295;
              }
              continue;
            }
            v172 = (void *)v172[1];
            if (!v172)
            {
LABEL_294:
              v173 = v174 + 1;
              goto LABEL_295;
            }
          }
        }
      }
      if (v166) {
        v174 = v167;
      }
      else {
        v174 = v143 + 4;
      }
      if (v166) {
        v173 = v167 + 1;
      }
      else {
        v173 = v143 + 4;
      }
      if (!*v173) {
        goto LABEL_295;
      }
LABEL_298:
      v181 = (void *)v151[1];
      if (v181)
      {
        do
        {
          v182 = v181;
          v181 = (void *)*v181;
        }
        while (v181);
      }
      else
      {
        do
        {
          v182 = (void *)v151[2];
          BOOL v205 = *v182 == (void)v151;
          CFMutableDictionaryRef v151 = v182;
        }
        while (!v205);
      }
      CFMutableDictionaryRef v151 = v182;
      if (v182 == v152) {
        goto LABEL_239;
      }
    }
  }
  long long v136 = (uint64_t *)**v132;
  long long v137 = v132[2];
  int v138 = 2;
  if (v137 == v136) {
    goto LABEL_318;
  }
LABEL_319:
  int v188 = 0;
  unsigned int v189 = v138 - 1;
  do
  {
    uint64_t v192 = v137[2];
    v193 = *(uint64_t **)(v192 + 32);
    if (v193)
    {
      for (uint64_t i = *v193; i != v193[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
            goto LABEL_336;
          }
        }
        else
        {
          uint64_t v195 = *(void *)(i + 16);
          if (!v195 || !atomic_load_explicit((atomic_uint *volatile)(v195 + 8), memory_order_acquire))
          {
LABEL_336:
            if (*(unsigned char *)(v192 + 24))
            {
              *(unsigned char *)(v192 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v192, &block);
            }
            break;
          }
        }
      }
    }
    uint64_t v190 = v137[2];
    if (*(unsigned char *)(v190 + 24))
    {
      long long v136 = (uint64_t *)v137[1];
      goto LABEL_322;
    }
    uint64_t v196 = **v132;
    v198 = (uint64_t **)(v196 + 32);
    uint64_t v197 = *(void *)(v196 + 32);
    if (!v197)
    {
      if (*(uint64_t **)(v196 + 80) != v137) {
        goto LABEL_413;
      }
      v220 = (uint64_t *)v137[1];
      v222 = (uint64_t **)(v196 + 32);
      v201 = (uint64_t *)(v196 + 32);
      if (v220 != (uint64_t *)v196) {
        goto LABEL_409;
      }
LABEL_391:
      v225 = (uint64_t *)v201[1];
      v226 = v201;
      if (v225)
      {
        do
        {
          v227 = v225;
          v225 = (uint64_t *)*v225;
        }
        while (v225);
      }
      else
      {
        do
        {
          v227 = (uint64_t *)v226[2];
          BOOL v205 = *v227 == (void)v226;
          v226 = v227;
        }
        while (!v205);
      }
      if (*(uint64_t **)(v196 + 24) == v201) {
        *(void *)(v196 + 24) = v227;
      }
      --*(void *)(v196 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v197, v201);
      operator delete(v201);
      goto LABEL_413;
    }
    int v199 = *(_DWORD *)(v190 + 64);
    int v200 = *(_DWORD *)(v190 + 72);
    v201 = (uint64_t *)(v196 + 32);
    uint64_t v202 = *(void *)(v196 + 32);
    if (v199 == 1)
    {
      v201 = (uint64_t *)(v196 + 32);
      uint64_t v203 = *(void *)(v196 + 32);
      do
      {
        while (1)
        {
          int v209 = *(_DWORD *)(v203 + 32);
          BOOL v210 = v209 < 1;
          if (v209 == 1) {
            BOOL v210 = *(_DWORD *)(v203 + 40) < v200;
          }
          if (!v210) {
            break;
          }
          uint64_t v203 = *(void *)(v203 + 8);
          if (!v203) {
            goto LABEL_357;
          }
        }
        v201 = (uint64_t *)v203;
        uint64_t v203 = *(void *)v203;
      }
      while (v203);
    }
    else
    {
      do
      {
        int v204 = *(_DWORD *)(v202 + 32);
        BOOL v205 = v204 == v199;
        BOOL v206 = v204 < v199;
        if (v204 >= v199) {
          v207 = (uint64_t *)v202;
        }
        else {
          v207 = (uint64_t *)(v202 + 8);
        }
        if (v206) {
          v208 = v201;
        }
        else {
          v208 = (uint64_t *)v202;
        }
        if (v205)
        {
          v207 = (uint64_t *)v202;
          v201 = (uint64_t *)v202;
        }
        else
        {
          v201 = v208;
        }
        uint64_t v202 = *v207;
      }
      while (*v207);
    }
LABEL_357:
    if ((uint64_t *)v201[6] != v137) {
      goto LABEL_413;
    }
    v211 = (uint64_t **)(v196 + 32);
    v212 = *(uint64_t ***)(v196 + 32);
    if (v199 == 1)
    {
      while (1)
      {
        int v218 = *((_DWORD *)v212 + 8);
        if (v218 == 1)
        {
          if (v200 < *((_DWORD *)v212 + 10)) {
            goto LABEL_374;
          }
LABEL_369:
          v212 = (uint64_t **)v212[1];
          if (!v212) {
            goto LABEL_375;
          }
        }
        else
        {
          if (v218 <= 1) {
            goto LABEL_369;
          }
LABEL_374:
          v211 = v212;
          v212 = (uint64_t **)*v212;
          if (!v212) {
            goto LABEL_375;
          }
        }
      }
    }
    do
    {
      int v213 = *((_DWORD *)v212 + 8);
      v214 = (uint64_t ***)(v212 + 1);
      BOOL v215 = v199 == v213;
      BOOL v216 = v199 < v213;
      if (v199 >= v213) {
        v217 = (uint64_t ***)(v212 + 1);
      }
      else {
        v217 = (uint64_t ***)v212;
      }
      if (!v216) {
        v212 = v211;
      }
      if (v215) {
        v217 = v214;
      }
      else {
        v211 = v212;
      }
      v212 = *v217;
    }
    while (*v217);
LABEL_375:
    v219 = (uint64_t *)v196;
    if (v211 != v198) {
      v219 = v211[6];
    }
    v220 = (uint64_t *)v137[1];
    if (v220 == v219) {
      goto LABEL_391;
    }
    if (v199 == 1)
    {
      while (1)
      {
        while (1)
        {
          v222 = (uint64_t **)v197;
          int v223 = *(_DWORD *)(v197 + 32);
          if (v223 == 1) {
            break;
          }
          if (v223 <= 1) {
            goto LABEL_387;
          }
LABEL_381:
          uint64_t v197 = *(void *)v197;
          if (!*v222)
          {
            v198 = v222;
            goto LABEL_409;
          }
        }
        int v224 = *(_DWORD *)(v197 + 40);
        if (v224 > v200) {
          goto LABEL_381;
        }
        if (v224 >= v200)
        {
          *(void *)(v197 + 48) = v220;
          goto LABEL_413;
        }
LABEL_387:
        uint64_t v197 = *(void *)(v197 + 8);
        if (!v197)
        {
          v198 = v222 + 1;
          goto LABEL_409;
        }
      }
    }
    int v221 = *(_DWORD *)(v197 + 32);
    if (v199 == v221) {
      goto LABEL_412;
    }
    while (v199 >= v221)
    {
      if (v221 >= v199) {
        goto LABEL_412;
      }
      uint64_t v228 = *(void *)(v197 + 8);
      if (!v228)
      {
        v198 = (uint64_t **)(v197 + 8);
        goto LABEL_408;
      }
LABEL_400:
      int v221 = *(_DWORD *)(v228 + 32);
      uint64_t v197 = v228;
      if (v199 == v221)
      {
        *(void *)(v228 + 48) = v220;
        goto LABEL_413;
      }
    }
    uint64_t v228 = *(void *)v197;
    if (*(void *)v197) {
      goto LABEL_400;
    }
    v198 = (uint64_t **)v197;
LABEL_408:
    v222 = (uint64_t **)v197;
LABEL_409:
    uint64_t v197 = (uint64_t)operator new(0x38uLL);
    uint64_t v229 = *(void *)(v190 + 64);
    *(_DWORD *)(v197 + 40) = *(_DWORD *)(v190 + 72);
    *(void *)(v197 + 32) = v229;
    *(void *)(v197 + 48) = 0;
    *(void *)uint64_t v197 = 0;
    *(void *)(v197 + 8) = 0;
    *(void *)(v197 + 16) = v222;
    *v198 = (uint64_t *)v197;
    uint64_t v230 = **(void **)(v196 + 24);
    v231 = (uint64_t *)v197;
    if (v230)
    {
      *(void *)(v196 + 24) = v230;
      v231 = *v198;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v196 + 32), v231);
    ++*(void *)(v196 + 40);
LABEL_412:
    *(void *)(v197 + 48) = v220;
LABEL_413:
    uint64_t v232 = *v137;
    long long v136 = (uint64_t *)v137[1];
    *(void *)(v232 + 8) = v136;
    *(void *)v137[1] = v232;
    --*(void *)(v196 + 16);
    v233 = (atomic_uint *)v137[3];
    if (v233)
    {
      if (atomic_fetch_add(v233 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v233 + 16))(v233);
        if (atomic_fetch_add(v233 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v233 + 24))(v233);
        }
      }
    }
    operator delete(v137);
    uint64_t v132 = (uint64_t **)v794;
LABEL_322:
    BOOL v191 = v136 != (uint64_t *)**v132 && v189 >= ++v188;
    long long v137 = v136;
  }
  while (v191);
LABEL_418:
  v132[2] = v136;
  v234 = operator new(0x50uLL);
  v234[1] = 0;
  v234[2] = 0;
  *((unsigned char *)v234 + 24) = 1;
  *((_DWORD *)v234 + 7) = 1;
  void *v234 = &unk_1F2104110;
  v235 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v235, (uint64_t *)v877);
  v235[3] = 0;
  uint64_t v236 = *((void *)&v878 + 1);
  if (*((void *)&v878 + 1))
  {
    v235[3] = *((void *)&v878 + 1);
    if (v236)
    {
      *((_OWORD *)v235 + 2) = v879;
      v235[6] = v880;
    }
    else
    {
      (*(void (**)(long long *, void *, void))(v236 & 0xFFFFFFFFFFFFFFFELL))(&v879, v235 + 4, 0);
    }
  }
  v234[4] = v235;
  v234[5] = 0;
  v237 = operator new(0x18uLL);
  v237[1] = 0x100000001;
  void *v237 = &unk_1F2104168;
  v237[2] = v235;
  v234[5] = v237;
  v234[6] = v132[3];
  v238 = (atomic_uint *)v132[4];
  v234[7] = v238;
  if (v238) {
    atomic_fetch_add_explicit(v238 + 2, 1u, memory_order_relaxed);
  }
  *((_DWORD *)v234 + 16) = 0;
  *((unsigned char *)v234 + 68) = 0;
  v885 = (uint64_t (**)())v234;
  v239 = operator new(0x18uLL);
  *((void *)v239 + 1) = 0x100000001;
  *(void *)v239 = &unk_1F21041C8;
  *((void *)v239 + 2) = v234;
  unint64_t v886 = (unint64_t)v239;
  v240 = (uint64_t *)**v132;
  v241 = operator new(0x20uLL);
  v242 = v240 + 4;
  v241[2] = v234;
  v241[3] = v239;
  atomic_fetch_add_explicit((atomic_uint *volatile)v239 + 2, 1u, memory_order_relaxed);
  uint64_t v243 = *v240;
  *(void *)(v243 + 8) = v241;
  void *v241 = v243;
  uint64_t *v240 = (uint64_t)v241;
  v241[1] = v240;
  ++v240[2];
  v244 = (uint64_t *)v240[4];
  if (v244)
  {
    v245 = v240 + 4;
    uint64_t v246 = v240[4];
    do
    {
      int v247 = *(_DWORD *)(v246 + 32);
      BOOL v248 = v247 == 2;
      BOOL v249 = v247 < 2;
      if (v247 >= 2) {
        v250 = (uint64_t *)v246;
      }
      else {
        v250 = (uint64_t *)(v246 + 8);
      }
      if (!v249) {
        v245 = (uint64_t *)v246;
      }
      if (v248)
      {
        v250 = (uint64_t *)v246;
        v245 = (uint64_t *)v246;
      }
      uint64_t v246 = *v250;
    }
    while (*v250);
    if (v245 == v242 || *((_DWORD *)v245 + 8) != 2)
    {
      int v252 = *((_DWORD *)v244 + 8);
      while (v252 != 2)
      {
        if (v252 < 3)
        {
          v253 = (uint64_t *)v244[1];
          if (!v253)
          {
            v242 = v244 + 1;
            goto LABEL_445;
          }
        }
        else
        {
          v253 = (uint64_t *)*v244;
          v242 = v244;
          if (!*v244) {
            goto LABEL_445;
          }
        }
        int v252 = *((_DWORD *)v253 + 8);
        v244 = v253;
      }
    }
    *((_DWORD *)v234 + 16) = 2;
    *(void *)((char *)v234 + 68) = 0xAAAAAAAAAAAAAA00;
    v251 = this;
LABEL_448:
    atomic_fetch_add_explicit((atomic_uint *volatile)v239 + 3, 1u, memory_order_relaxed);
    *(void *)&long long v817 = v234;
    *((void *)&v817 + 1) = v239;
    atomic_fetch_add_explicit((atomic_uint *volatile)v239 + 3, 1u, memory_order_relaxed);
    if (atomic_fetch_add((atomic_uint *volatile)v239 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(void *))(*(void *)v239 + 24))(v239);
    }
    v256 = (atomic_uint *)v886;
    if (v886) {
      goto LABEL_451;
    }
  }
  else
  {
    v244 = v240 + 4;
LABEL_445:
    v254 = operator new(0x38uLL);
    v254[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v254 + 10) = -1431655766;
    v254[6] = v241;
    void *v254 = 0;
    v254[1] = 0;
    v254[2] = v244;
    uint64_t *v242 = (uint64_t)v254;
    uint64_t v255 = *(void *)v240[3];
    if (v255)
    {
      v240[3] = v255;
      v254 = (void *)*v242;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v240[4], v254);
    ++v240[5];
    v234 = v885;
    v239 = (void *)v886;
    *((_DWORD *)v885 + 16) = 2;
    *(void *)((char *)v234 + 68) = 0xAAAAAAAAAAAAAA00;
    v251 = this;
    if (v239) {
      goto LABEL_448;
    }
    long long v817 = (unint64_t)v234;
    v256 = (atomic_uint *)v886;
    if (v886)
    {
LABEL_451:
      if (atomic_fetch_add(v256 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v256 + 16))(v256);
        if (atomic_fetch_add(v256 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v256 + 24))(v256);
        }
      }
    }
  }
  pthread_mutex_unlock(v901);
  v257 = (char *)__p;
  if (__p)
  {
    if (v900 - 1 >= 0)
    {
      v258 = (char *)__p + 16 * v900;
      do
      {
        v259 = (atomic_uint *)*((void *)v258 - 1);
        if (v259)
        {
          if (atomic_fetch_add(v259 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v259 + 16))(v259);
            if (atomic_fetch_add(v259 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v259 + 24))(v259);
            }
          }
        }
        v258 -= 16;
      }
      while (v258 > v257);
    }
    v251 = this;
    if (v898 >= 0xB) {
      operator delete(__p);
    }
  }
  if (*((void *)&v878 + 1))
  {
    if ((BYTE8(v878) & 1) == 0)
    {
      v260 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v878 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v260) {
        v260(&v879, &v879, 2);
      }
    }
    *((void *)&v878 + 1) = 0;
  }
  v261 = (char *)v877[0];
  if (v877[0])
  {
    v262 = (char *)v877[1];
    v263 = v877[0];
    if (v877[1] != v877[0])
    {
      do
      {
        v262 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v262);
      }
      while (v262 != v261);
      v263 = v877[0];
    }
    v877[1] = v261;
    operator delete(v263);
  }
  dispatch_release(v875);
  if (v876) {
    _Block_release(v876);
  }
  if (atomic_fetch_add(&v786->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v783) {
      goto LABEL_482;
    }
LABEL_481:
    _Block_release(v783);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v786->__on_zero_shared)(v786);
    std::__shared_weak_count::__release_weak(v786);
    if (v783) {
      goto LABEL_481;
    }
  }
LABEL_482:
  v264 = operator new(0x20uLL);
  v264[1] = v817;
  uint64_t v265 = *((void *)v251 + 28);
  v784 = (char *)v251 + 224;
  *(void *)v264 = v265;
  *((void *)v264 + 1) = (char *)v251 + 224;
  *(void *)(v265 + 8) = v264;
  *((void *)v251 + 28) = v264;
  ++*((void *)v251 + 30);
  uint64_t v266 = *((void *)v251 + 13);
  v868 = (void **)MEMORY[0x1E4F143A8];
  uint64_t v869 = 0x40000000;
  v870 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISF_EENSL_IFvRKNS7_10connectionESD_SE_EEENS7_5mutexEEES3_vJSD_SE_EEEDTcl7connectfp_cvNSI_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke;
  v871 = &__block_descriptor_tmp_392;
  v872 = v790;
  v873 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleCommandDriverStateUpdate_sync;
  uint64_t v874 = 0;
  v267 = _Block_copy(&v868);
  uint64_t v795 = v266;
  v268 = (std::__shared_weak_count *)*((void *)v251 + 10);
  if (!v268 || (uint64_t v269 = *((void *)v251 + 9), (v270 = std::__shared_weak_count::lock(v268)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v271 = v270;
  v272 = *((void *)v251 + 11);
  dispatch_object_t v875 = v272;
  v779 = v267;
  if (v267) {
    v273 = _Block_copy(v267);
  }
  else {
    v273 = 0;
  }
  v876 = v273;
  dispatch_retain(v272);
  long long v878 = 0u;
  *(_OWORD *)v877 = 0u;
  dispatch_object_t v881 = v272;
  if (v273) {
    v273 = _Block_copy(v273);
  }
  v882 = v273;
  dispatch_retain(v272);
  dispatch_object_t object = v272;
  v787 = v271;
  if (!v273)
  {
    v884 = 0;
    dispatch_retain(v272);
    goto LABEL_498;
  }
  v274 = _Block_copy(v273);
  v884 = v274;
  dispatch_retain(v272);
  if (!v274)
  {
LABEL_498:
    dispatch_retain(v272);
    v885 = 0;
    goto LABEL_499;
  }
  v275 = _Block_copy(v274);
  dispatch_retain(v272);
  v885 = 0;
  if (!v275)
  {
LABEL_499:
    dispatch_retain(v272);
    v765 = 0;
    char v280 = 1;
LABEL_500:
    dispatch_retain(v272);
    v771 = 0;
    char v281 = 1;
LABEL_501:
    dispatch_retain(v272);
    v277 = 0;
    char v282 = 1;
LABEL_502:
    dispatch_retain(v272);
    v278 = 0;
    unint64_t v886 = (unint64_t)v272;
    char v283 = 1;
    goto LABEL_503;
  }
  v276 = _Block_copy(v275);
  dispatch_retain(v272);
  v765 = v275;
  if (!v276)
  {
    char v280 = 0;
    goto LABEL_500;
  }
  v277 = _Block_copy(v276);
  dispatch_retain(v272);
  v771 = v276;
  if (!v277)
  {
    char v280 = 0;
    char v281 = 0;
    goto LABEL_501;
  }
  v278 = _Block_copy(v277);
  dispatch_retain(v272);
  if (!v278)
  {
    char v280 = 0;
    char v281 = 0;
    char v282 = 0;
    goto LABEL_502;
  }
  v279 = _Block_copy(v278);
  dispatch_retain(v272);
  unint64_t v886 = (unint64_t)v272;
  if (v279)
  {
    char v280 = 0;
    char v281 = 0;
    char v282 = 0;
    char v283 = 0;
    v887 = _Block_copy(v279);
    dispatch_retain(v272);
    dispatch_release(v272);
    _Block_release(v279);
    goto LABEL_504;
  }
  char v280 = 0;
  char v281 = 0;
  char v282 = 0;
  char v283 = 0;
LABEL_503:
  v887 = 0;
  dispatch_retain(v272);
  dispatch_release(v272);
LABEL_504:
  dispatch_release(v272);
  if ((v283 & 1) == 0) {
    _Block_release(v278);
  }
  dispatch_release(v272);
  if ((v282 & 1) == 0) {
    _Block_release(v277);
  }
  v885 = boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>)::stored_vtable;
  dispatch_release(v272);
  if ((v281 & 1) == 0) {
    _Block_release(v771);
  }
  dispatch_release(v272);
  if ((v280 & 1) == 0) {
    _Block_release(v765);
  }
  *((void *)&v889 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v889 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&blocuint64_t k = 0;
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v885);
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&v885, (uint64_t *)&v878 + 1);
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&v878 + 8, (uint64_t *)&block);
  if ((void)block)
  {
    if ((block & 1) == 0)
    {
      v284 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
      if (v284) {
        v284((char *)&block + 8, (char *)&block + 8, 2);
      }
    }
  }
  if (v885)
  {
    if ((v885 & 1) == 0)
    {
      v285 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v885 & 0xFFFFFFFFFFFFFFFELL);
      if (v285) {
        v285((uint64_t)&v886, &v886, 2u);
      }
    }
    v885 = 0;
  }
  dispatch_release(object);
  if (v884) {
    _Block_release(v884);
  }
  dispatch_release(v881);
  if (v882) {
    _Block_release(v882);
  }
  atomic_fetch_add_explicit(&v787->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v286 = operator new(0x18uLL);
  void *v286 = &unk_1F2104268;
  v286[1] = v269;
  v286[2] = v787;
  atomic_fetch_add_explicit(&v787->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v287 = operator new(0x18uLL);
  void *v287 = &unk_1F2104268;
  v287[1] = v269;
  v287[2] = v787;
  atomic_fetch_add_explicit(&v787->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)&block + 1) = v287;
  LODWORD(block) = 2;
  v288 = v877[1];
  if (v877[1] >= (void *)v878)
  {
    v291 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v877, (uint64_t)&block);
    v290 = v787;
  }
  else
  {
    v289 = operator new(0x18uLL);
    void *v289 = &unk_1F2104268;
    v289[1] = v269;
    v290 = v787;
    v289[2] = v787;
    atomic_fetch_add_explicit(&v787->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v288[1] = v289;
    *(_DWORD *)v288 = 2;
    v291 = v288 + 3;
  }
  v877[1] = v291;
  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&block);
  (*(void (**)(void *))(*v286 + 8))(v286);
  std::__shared_weak_count::__release_weak(v290);
  v292 = *(uint64_t ***)(v795 + 152);
  *(void *)&long long v293 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v293 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v897 = v293;
  long long v896 = v293;
  long long v895 = v293;
  long long v894 = v293;
  long long v893 = v293;
  long long v892 = v293;
  long long v891 = v293;
  *(_OWORD *)v890 = v293;
  long long v889 = v293;
  blocuint64_t k = v293;
  v294 = (pthread_mutex_t *)v292[3];
  unint64_t v898 = 10;
  std::string __p = &block;
  uint64_t v900 = 0;
  v901 = v294;
  pthread_mutex_lock(v294);
  unint64_t v886 = 0xAAAAAAAAAAAAAAAALL;
  v885 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
  v295 = (atomic_uint *)v292[1];
  v796 = (uint64_t ***)v292;
  if (v295 && atomic_load_explicit(v295 + 2, memory_order_acquire) == 1)
  {
    v296 = (uint64_t *)**v292;
    v297 = v292[2];
    int v298 = 2;
    if (v297 != v296) {
      goto LABEL_618;
    }
    goto LABEL_617;
  }
  v299 = (uint64_t **)operator new(0x20uLL);
  v300 = *v292;
  uint64_t v301 = **v292;
  v772 = v299;
  v302 = operator new(0x40uLL);
  v303 = v302;
  void *v302 = v302;
  v302[1] = v302;
  v302[2] = 0;
  v304 = *(void **)(v301 + 8);
  if (v304 != (void *)v301)
  {
    uint64_t v305 = 0;
    v306 = v302;
    do
    {
      v307 = operator new(0x20uLL);
      v307[2] = v304[2];
      uint64_t v308 = v304[3];
      v307[3] = v308;
      if (v308)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v308 + 8), 1u, memory_order_relaxed);
        v306 = (void *)*v303;
        uint64_t v305 = v303[2];
      }
      void *v307 = v306;
      v307[1] = v303;
      v306[1] = v307;
      void *v303 = v307;
      v303[2] = ++v305;
      v304 = (void *)v304[1];
      v306 = v307;
    }
    while (v304 != (void *)v301);
  }
  v766 = v300;
  v303[3] = 0;
  v309 = (void **)(v303 + 3);
  v303[4] = 0;
  v310 = v303 + 4;
  v303[5] = 0;
  *((unsigned char *)v303 + 48) = *(unsigned char *)(v301 + 48);
  v303[3] = v303 + 4;
  v311 = *(void **)(v301 + 24);
  v312 = (void *)(v301 + 32);
  if (v311 != (void *)(v301 + 32))
  {
    do
    {
      int v325 = *((_DWORD *)v311 + 8);
      v326 = (void *)*v310;
      v327 = v303 + 4;
      if (*v309 != v310)
      {
        v328 = (void *)*v310;
        v329 = v303 + 4;
        if (v326)
        {
          do
          {
            v327 = v328;
            v328 = (void *)v328[1];
          }
          while (v328);
        }
        else
        {
          do
          {
            v327 = (void *)v329[2];
            BOOL v205 = *v327 == (void)v329;
            v329 = v327;
          }
          while (v205);
        }
        int v330 = *((_DWORD *)v311 + 10);
        int v331 = *((_DWORD *)v327 + 8);
        if (v331 == v325)
        {
          if (v325 != 1) {
            goto LABEL_583;
          }
          if (*((_DWORD *)v327 + 10) >= v330)
          {
            v332 = (void *)*v310;
            v333 = v303 + 4;
            v334 = v303 + 4;
            if (v326) {
              goto LABEL_587;
            }
LABEL_594:
            v338 = operator new(0x38uLL);
            long long v339 = *((_OWORD *)v311 + 2);
            v338[6] = v311[6];
            *((_OWORD *)v338 + 2) = v339;
            void *v338 = 0;
            v338[1] = 0;
            v338[2] = v334;
            void *v333 = v338;
            v340 = (void *)**v309;
            if (v340)
            {
              *v309 = v340;
              v338 = (void *)*v333;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v303[4], v338);
            ++v303[5];
            goto LABEL_597;
          }
        }
        else if (v331 >= v325)
        {
LABEL_583:
          v333 = v303 + 4;
          v334 = v303 + 4;
          if (!v326) {
            goto LABEL_594;
          }
          v332 = (void *)*v310;
          if (v325 != 1)
          {
            int v335 = *((_DWORD *)v326 + 8);
            v334 = (void *)*v310;
            while (v325 != v335)
            {
              if (v325 < v335)
              {
                uint64_t v343 = *v334;
                v333 = v334;
                if (!*v334) {
                  goto LABEL_594;
                }
              }
              else
              {
                if (v335 >= v325) {
                  goto LABEL_597;
                }
                uint64_t v343 = v334[1];
                if (!v343) {
                  goto LABEL_593;
                }
              }
              int v335 = *(_DWORD *)(v343 + 32);
              v334 = (void *)v343;
            }
            goto LABEL_597;
          }
          while (1)
          {
LABEL_587:
            v334 = v332;
            int v336 = *((_DWORD *)v332 + 8);
            if (v336 == 1)
            {
              int v337 = *((_DWORD *)v332 + 10);
              if (v337 > v330) {
                goto LABEL_586;
              }
              if (v337 >= v330) {
                goto LABEL_597;
              }
            }
            else if (v336 > 1)
            {
LABEL_586:
              v332 = (void *)*v332;
              v333 = v334;
              if (!*v334) {
                goto LABEL_594;
              }
              continue;
            }
            v332 = (void *)v332[1];
            if (!v332)
            {
LABEL_593:
              v333 = v334 + 1;
              goto LABEL_594;
            }
          }
        }
      }
      if (v326) {
        v334 = v327;
      }
      else {
        v334 = v303 + 4;
      }
      if (v326) {
        v333 = v327 + 1;
      }
      else {
        v333 = v303 + 4;
      }
      if (!*v333) {
        goto LABEL_594;
      }
LABEL_597:
      v341 = (void *)v311[1];
      if (v341)
      {
        do
        {
          v342 = v341;
          v341 = (void *)*v341;
        }
        while (v341);
      }
      else
      {
        do
        {
          v342 = (void *)v311[2];
          BOOL v205 = *v342 == (void)v311;
          v311 = v342;
        }
        while (!v205);
      }
      v311 = v342;
    }
    while (v342 != v312);
  }
  *((unsigned char *)v303 + 56) = *(unsigned char *)(v301 + 56);
  v313 = *(void **)(v301 + 24);
  if (v313 != v312)
  {
    v314 = (void *)v303[3];
    uint64_t v315 = v303[1];
    do
    {
      v314[6] = v315;
      uint64_t v316 = v301;
      if (v313 != v312) {
        uint64_t v316 = v313[6];
      }
      v317 = (void *)v313[1];
      v318 = v317;
      v319 = v313;
      if (v317)
      {
        do
        {
          v320 = v318;
          v318 = (void *)*v318;
        }
        while (v318);
      }
      else
      {
        do
        {
          v320 = (void *)v319[2];
          BOOL v205 = *v320 == (void)v319;
          v319 = v320;
        }
        while (!v205);
      }
      uint64_t v321 = v301;
      if (v320 != v312) {
        uint64_t v321 = v320[6];
      }
      while (v316 != v321)
      {
        uint64_t v316 = *(void *)(v316 + 8);
        uint64_t v315 = *(void *)(v315 + 8);
      }
      if (v317)
      {
        do
        {
          v322 = v317;
          v317 = (void *)*v317;
        }
        while (v317);
      }
      else
      {
        do
        {
          v322 = (void *)v313[2];
          BOOL v205 = *v322 == (void)v313;
          v313 = v322;
        }
        while (!v205);
      }
      v323 = (void *)v314[1];
      if (v323)
      {
        do
        {
          v324 = v323;
          v323 = (void *)*v323;
        }
        while (v323);
      }
      else
      {
        do
        {
          v324 = (void *)v314[2];
          BOOL v205 = *v324 == (void)v314;
          v314 = v324;
        }
        while (!v205);
      }
      v313 = v322;
      v314 = v324;
    }
    while (v322 != v312);
  }
  *v772 = v303;
  v772[1] = 0;
  v344 = (uint64_t *)operator new(0x18uLL);
  v292 = (uint64_t **)v796;
  v344[1] = 0x100000001;
  uint64_t *v344 = (uint64_t)&unk_1F2104358;
  v344[2] = (uint64_t)v303;
  v772[1] = v344;
  v772[2] = (uint64_t *)v766[2];
  uint64_t v345 = v766[3];
  v772[3] = (uint64_t *)v345;
  if (v345) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v345 + 8), 1u, memory_order_relaxed);
  }
  v346 = (uint64_t **)operator new(0x18uLL);
  v346[1] = (uint64_t *)0x100000001;
  *v346 = (uint64_t *)&unk_1F21042F8;
  v346[2] = (uint64_t *)v772;
  v347 = (atomic_uint *)v796[1];
  *v796 = v772;
  v796[1] = v346;
  if (v347)
  {
    if (atomic_fetch_add(v347 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v347 + 16))(v347);
      if (atomic_fetch_add(v347 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v347 + 24))(v347);
      }
    }
  }
  int v298 = 0;
  v296 = **v796;
LABEL_617:
  v297 = (uint64_t *)v296[1];
  if (v296 == v297) {
    goto LABEL_717;
  }
LABEL_618:
  int v348 = 0;
  unsigned int v349 = v298 - 1;
  while (2)
  {
    uint64_t v352 = v297[2];
    v353 = *(uint64_t **)(v352 + 32);
    if (v353)
    {
      for (uint64_t j = *v353; j != v353[1]; j += 24)
      {
        if ((*(_DWORD *)j ^ (*(int *)j >> 31)) > 1)
        {
          if ((*(uint64_t (**)(void))(**(void **)(j + 8) + 24))(*(void *)(j + 8))) {
            goto LABEL_635;
          }
        }
        else
        {
          uint64_t v355 = *(void *)(j + 16);
          if (!v355 || !atomic_load_explicit((atomic_uint *volatile)(v355 + 8), memory_order_acquire))
          {
LABEL_635:
            if (*(unsigned char *)(v352 + 24))
            {
              *(unsigned char *)(v352 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v352, &block);
            }
            break;
          }
        }
      }
    }
    uint64_t v350 = v297[2];
    if (*(unsigned char *)(v350 + 24))
    {
      v296 = (uint64_t *)v297[1];
      goto LABEL_621;
    }
    uint64_t v356 = **v292;
    v358 = (uint64_t **)(v356 + 32);
    uint64_t v357 = *(void *)(v356 + 32);
    if (!v357)
    {
      if (*(uint64_t **)(v356 + 80) != v297) {
        goto LABEL_712;
      }
      v380 = (uint64_t *)v297[1];
      v382 = (uint64_t **)(v356 + 32);
      v361 = (uint64_t *)(v356 + 32);
      if (v380 != (uint64_t *)v356) {
        goto LABEL_708;
      }
      goto LABEL_690;
    }
    int v359 = *(_DWORD *)(v350 + 64);
    int v360 = *(_DWORD *)(v350 + 72);
    v361 = (uint64_t *)(v356 + 32);
    uint64_t v362 = *(void *)(v356 + 32);
    if (v359 == 1)
    {
      v361 = (uint64_t *)(v356 + 32);
      uint64_t v363 = *(void *)(v356 + 32);
      do
      {
        while (1)
        {
          int v369 = *(_DWORD *)(v363 + 32);
          BOOL v370 = v369 < 1;
          if (v369 == 1) {
            BOOL v370 = *(_DWORD *)(v363 + 40) < v360;
          }
          if (!v370) {
            break;
          }
          uint64_t v363 = *(void *)(v363 + 8);
          if (!v363) {
            goto LABEL_656;
          }
        }
        v361 = (uint64_t *)v363;
        uint64_t v363 = *(void *)v363;
      }
      while (v363);
    }
    else
    {
      do
      {
        int v364 = *(_DWORD *)(v362 + 32);
        BOOL v365 = v364 == v359;
        BOOL v366 = v364 < v359;
        if (v364 >= v359) {
          v367 = (uint64_t *)v362;
        }
        else {
          v367 = (uint64_t *)(v362 + 8);
        }
        if (v366) {
          v368 = v361;
        }
        else {
          v368 = (uint64_t *)v362;
        }
        if (v365)
        {
          v367 = (uint64_t *)v362;
          v361 = (uint64_t *)v362;
        }
        else
        {
          v361 = v368;
        }
        uint64_t v362 = *v367;
      }
      while (*v367);
    }
LABEL_656:
    if ((uint64_t *)v361[6] != v297) {
      goto LABEL_712;
    }
    v371 = (uint64_t **)(v356 + 32);
    v372 = *(uint64_t ***)(v356 + 32);
    if (v359 == 1)
    {
      while (1)
      {
        int v378 = *((_DWORD *)v372 + 8);
        if (v378 == 1)
        {
          if (v360 < *((_DWORD *)v372 + 10)) {
            goto LABEL_673;
          }
LABEL_668:
          v372 = (uint64_t **)v372[1];
          if (!v372) {
            goto LABEL_674;
          }
        }
        else
        {
          if (v378 <= 1) {
            goto LABEL_668;
          }
LABEL_673:
          v371 = v372;
          v372 = (uint64_t **)*v372;
          if (!v372) {
            goto LABEL_674;
          }
        }
      }
    }
    do
    {
      int v373 = *((_DWORD *)v372 + 8);
      v374 = (uint64_t ***)(v372 + 1);
      BOOL v375 = v359 == v373;
      BOOL v376 = v359 < v373;
      if (v359 >= v373) {
        v377 = (uint64_t ***)(v372 + 1);
      }
      else {
        v377 = (uint64_t ***)v372;
      }
      if (!v376) {
        v372 = v371;
      }
      if (v375) {
        v377 = v374;
      }
      else {
        v371 = v372;
      }
      v372 = *v377;
    }
    while (*v377);
LABEL_674:
    v379 = (uint64_t *)v356;
    if (v371 != v358) {
      v379 = v371[6];
    }
    v380 = (uint64_t *)v297[1];
    if (v380 == v379)
    {
LABEL_690:
      v385 = (uint64_t *)v361[1];
      v386 = v361;
      if (v385)
      {
        do
        {
          v387 = v385;
          v385 = (uint64_t *)*v385;
        }
        while (v385);
      }
      else
      {
        do
        {
          v387 = (uint64_t *)v386[2];
          BOOL v205 = *v387 == (void)v386;
          v386 = v387;
        }
        while (!v205);
      }
      if (*(uint64_t **)(v356 + 24) == v361) {
        *(void *)(v356 + 24) = v387;
      }
      --*(void *)(v356 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v357, v361);
      operator delete(v361);
      goto LABEL_712;
    }
    if (v359 == 1)
    {
      while (1)
      {
        while (1)
        {
          v382 = (uint64_t **)v357;
          int v383 = *(_DWORD *)(v357 + 32);
          if (v383 == 1) {
            break;
          }
          if (v383 <= 1) {
            goto LABEL_686;
          }
LABEL_680:
          uint64_t v357 = *(void *)v357;
          if (!*v382)
          {
            v358 = v382;
            goto LABEL_708;
          }
        }
        int v384 = *(_DWORD *)(v357 + 40);
        if (v384 > v360) {
          goto LABEL_680;
        }
        if (v384 >= v360)
        {
          *(void *)(v357 + 48) = v380;
          goto LABEL_712;
        }
LABEL_686:
        uint64_t v357 = *(void *)(v357 + 8);
        if (!v357)
        {
          v358 = v382 + 1;
          goto LABEL_708;
        }
      }
    }
    int v381 = *(_DWORD *)(v357 + 32);
    if (v359 == v381) {
      goto LABEL_711;
    }
    while (2)
    {
      if (v359 >= v381)
      {
        if (v381 >= v359) {
          goto LABEL_711;
        }
        uint64_t v388 = *(void *)(v357 + 8);
        if (!v388)
        {
          v358 = (uint64_t **)(v357 + 8);
          goto LABEL_707;
        }
        goto LABEL_699;
      }
      uint64_t v388 = *(void *)v357;
      if (*(void *)v357)
      {
LABEL_699:
        int v381 = *(_DWORD *)(v388 + 32);
        uint64_t v357 = v388;
        if (v359 == v381)
        {
          *(void *)(v388 + 48) = v380;
          goto LABEL_712;
        }
        continue;
      }
      break;
    }
    v358 = (uint64_t **)v357;
LABEL_707:
    v382 = (uint64_t **)v357;
LABEL_708:
    uint64_t v357 = (uint64_t)operator new(0x38uLL);
    uint64_t v389 = *(void *)(v350 + 64);
    *(_DWORD *)(v357 + 40) = *(_DWORD *)(v350 + 72);
    *(void *)(v357 + 32) = v389;
    *(void *)(v357 + 48) = 0;
    *(void *)uint64_t v357 = 0;
    *(void *)(v357 + 8) = 0;
    *(void *)(v357 + 16) = v382;
    *v358 = (uint64_t *)v357;
    uint64_t v390 = **(void **)(v356 + 24);
    v391 = (uint64_t *)v357;
    if (v390)
    {
      *(void *)(v356 + 24) = v390;
      v391 = *v358;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v356 + 32), v391);
    ++*(void *)(v356 + 40);
LABEL_711:
    *(void *)(v357 + 48) = v380;
LABEL_712:
    uint64_t v392 = *v297;
    v296 = (uint64_t *)v297[1];
    *(void *)(v392 + 8) = v296;
    *(void *)v297[1] = v392;
    --*(void *)(v356 + 16);
    v393 = (atomic_uint *)v297[3];
    if (v393)
    {
      if (atomic_fetch_add(v393 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v393 + 16))(v393);
        if (atomic_fetch_add(v393 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v393 + 24))(v393);
        }
      }
    }
    operator delete(v297);
    v292 = (uint64_t **)v796;
LABEL_621:
    BOOL v351 = v296 != (uint64_t *)**v292 && v349 >= ++v348;
    v297 = v296;
    if (v351) {
      continue;
    }
    break;
  }
LABEL_717:
  v292[2] = v296;
  v394 = operator new(0x50uLL);
  v394[1] = 0;
  v394[2] = 0;
  *((unsigned char *)v394 + 24) = 1;
  *((_DWORD *)v394 + 7) = 1;
  void *v394 = &unk_1F21043B8;
  v395 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v395, (uint64_t *)v877);
  v395[3] = 0;
  uint64_t v396 = *((void *)&v878 + 1);
  if (*((void *)&v878 + 1))
  {
    v395[3] = *((void *)&v878 + 1);
    if (v396)
    {
      *((_OWORD *)v395 + 2) = v879;
      v395[6] = v880;
    }
    else
    {
      (*(void (**)(long long *, void *, void))(v396 & 0xFFFFFFFFFFFFFFFELL))(&v879, v395 + 4, 0);
    }
  }
  v394[4] = v395;
  v394[5] = 0;
  v397 = operator new(0x18uLL);
  v397[1] = 0x100000001;
  void *v397 = &unk_1F2104410;
  v397[2] = v395;
  v394[5] = v397;
  v394[6] = v292[3];
  v398 = (atomic_uint *)v292[4];
  v394[7] = v398;
  if (v398) {
    atomic_fetch_add_explicit(v398 + 2, 1u, memory_order_relaxed);
  }
  *((_DWORD *)v394 + 16) = 0;
  *((unsigned char *)v394 + 68) = 0;
  v885 = (uint64_t (**)())v394;
  v399 = operator new(0x18uLL);
  *((void *)v399 + 1) = 0x100000001;
  *(void *)v399 = &unk_1F2104470;
  *((void *)v399 + 2) = v394;
  unint64_t v886 = (unint64_t)v399;
  v400 = (uint64_t *)**v292;
  v401 = operator new(0x20uLL);
  v402 = v400 + 4;
  v401[2] = v394;
  v401[3] = v399;
  atomic_fetch_add_explicit((atomic_uint *volatile)v399 + 2, 1u, memory_order_relaxed);
  uint64_t v403 = *v400;
  *(void *)(v403 + 8) = v401;
  void *v401 = v403;
  uint64_t *v400 = (uint64_t)v401;
  v401[1] = v400;
  ++v400[2];
  v404 = (uint64_t *)v400[4];
  if (v404)
  {
    v405 = v400 + 4;
    uint64_t v406 = v400[4];
    do
    {
      int v407 = *(_DWORD *)(v406 + 32);
      BOOL v408 = v407 == 2;
      BOOL v409 = v407 < 2;
      if (v407 >= 2) {
        v410 = (uint64_t *)v406;
      }
      else {
        v410 = (uint64_t *)(v406 + 8);
      }
      if (!v409) {
        v405 = (uint64_t *)v406;
      }
      if (v408)
      {
        v410 = (uint64_t *)v406;
        v405 = (uint64_t *)v406;
      }
      uint64_t v406 = *v410;
    }
    while (*v410);
    if (v405 == v402 || *((_DWORD *)v405 + 8) != 2)
    {
      int v412 = *((_DWORD *)v404 + 8);
      while (v412 != 2)
      {
        if (v412 < 3)
        {
          v413 = (uint64_t *)v404[1];
          if (!v413)
          {
            v402 = v404 + 1;
            goto LABEL_744;
          }
        }
        else
        {
          v413 = (uint64_t *)*v404;
          v402 = v404;
          if (!*v404) {
            goto LABEL_744;
          }
        }
        int v412 = *((_DWORD *)v413 + 8);
        v404 = v413;
      }
    }
    *((_DWORD *)v394 + 16) = 2;
    *(void *)((char *)v394 + 68) = 0xAAAAAAAAAAAAAA00;
    v411 = this;
LABEL_747:
    atomic_fetch_add_explicit((atomic_uint *volatile)v399 + 3, 1u, memory_order_relaxed);
    *(void *)&long long v817 = v394;
    *((void *)&v817 + 1) = v399;
    atomic_fetch_add_explicit((atomic_uint *volatile)v399 + 3, 1u, memory_order_relaxed);
    if (atomic_fetch_add((atomic_uint *volatile)v399 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(void *))(*(void *)v399 + 24))(v399);
    }
    v416 = (atomic_uint *)v886;
    if (v886) {
      goto LABEL_750;
    }
  }
  else
  {
    v404 = v400 + 4;
LABEL_744:
    v414 = operator new(0x38uLL);
    v414[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v414 + 10) = -1431655766;
    v414[6] = v401;
    void *v414 = 0;
    v414[1] = 0;
    v414[2] = v404;
    uint64_t *v402 = (uint64_t)v414;
    uint64_t v415 = *(void *)v400[3];
    if (v415)
    {
      v400[3] = v415;
      v414 = (void *)*v402;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v400[4], v414);
    ++v400[5];
    v394 = v885;
    v399 = (void *)v886;
    *((_DWORD *)v885 + 16) = 2;
    *(void *)((char *)v394 + 68) = 0xAAAAAAAAAAAAAA00;
    v411 = this;
    if (v399) {
      goto LABEL_747;
    }
    long long v817 = (unint64_t)v394;
    v416 = (atomic_uint *)v886;
    if (v886)
    {
LABEL_750:
      if (atomic_fetch_add(v416 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v416 + 16))(v416);
        if (atomic_fetch_add(v416 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v416 + 24))(v416);
        }
      }
    }
  }
  pthread_mutex_unlock(v901);
  v417 = (char *)__p;
  if (__p)
  {
    if (v900 - 1 >= 0)
    {
      v418 = (char *)__p + 16 * v900;
      do
      {
        v419 = (atomic_uint *)*((void *)v418 - 1);
        if (v419)
        {
          if (atomic_fetch_add(v419 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v419 + 16))(v419);
            if (atomic_fetch_add(v419 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v419 + 24))(v419);
            }
          }
        }
        v418 -= 16;
      }
      while (v418 > v417);
    }
    v411 = this;
    if (v898 >= 0xB) {
      operator delete(__p);
    }
  }
  if (*((void *)&v878 + 1))
  {
    if ((BYTE8(v878) & 1) == 0)
    {
      v420 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v878 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v420) {
        v420(&v879, &v879, 2);
      }
    }
    *((void *)&v878 + 1) = 0;
  }
  v421 = (char *)v877[0];
  if (v877[0])
  {
    v422 = (char *)v877[1];
    v423 = v877[0];
    if (v877[1] != v877[0])
    {
      do
      {
        v422 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v422);
      }
      while (v422 != v421);
      v423 = v877[0];
    }
    v877[1] = v421;
    operator delete(v423);
  }
  dispatch_release(v875);
  if (v876) {
    _Block_release(v876);
  }
  if (!atomic_fetch_add(&v787->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
    std::__shared_weak_count::__release_weak(v787);
    if (!v779) {
      goto LABEL_781;
    }
    goto LABEL_780;
  }
  if (v779) {
LABEL_780:
  }
    _Block_release(v779);
LABEL_781:
  v424 = operator new(0x20uLL);
  v424[1] = v817;
  uint64_t v425 = *((void *)v411 + 28);
  *(void *)v424 = v425;
  *((void *)v424 + 1) = v784;
  *(void *)(v425 + 8) = v424;
  *((void *)v411 + 28) = v424;
  ++*((void *)v411 + 30);
  uint64_t v426 = *((void *)v411 + 26);
  if (v426)
  {
    v868 = (void **)MEMORY[0x1E4F143A8];
    uint64_t v869 = 0x40000000;
    v870 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISA_EENSG_IFvRKNS7_10connectionES9_EEENS7_5mutexEEES3_vJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FST_SV_E_block_invoke;
    v871 = &__block_descriptor_tmp_398;
    v872 = v790;
    v873 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleDesenseCommandDriverStarted_sync;
    uint64_t v874 = 0;
    v427 = _Block_copy(&v868);
    uint64_t v797 = v426;
    v428 = (std::__shared_weak_count *)*((void *)v411 + 10);
    if (!v428 || (uint64_t v429 = *((void *)v411 + 9), (v430 = std::__shared_weak_count::lock(v428)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v431 = v430;
    v432 = *((void *)v411 + 11);
    dispatch_object_t v875 = v432;
    if (v427) {
      v433 = _Block_copy(v427);
    }
    else {
      v433 = 0;
    }
    v876 = v433;
    dispatch_retain(v432);
    long long v878 = 0u;
    *(_OWORD *)v877 = 0u;
    dispatch_object_t v881 = v432;
    if (v433) {
      v433 = _Block_copy(v433);
    }
    v882 = v433;
    dispatch_retain(v432);
    dispatch_object_t object = v432;
    v788 = v431;
    v780 = v427;
    if (v433)
    {
      v434 = _Block_copy(v433);
      v884 = v434;
      dispatch_retain(v432);
      if (v434)
      {
        v435 = _Block_copy(v434);
        dispatch_retain(v432);
        v885 = 0;
        if (v435)
        {
          v436 = _Block_copy(v435);
          dispatch_retain(v432);
          v767 = v435;
          if (v436)
          {
            v437 = _Block_copy(v436);
            dispatch_retain(v432);
            v773 = v436;
            if (v437)
            {
              v438 = _Block_copy(v437);
              dispatch_retain(v432);
              if (v438)
              {
                v439 = _Block_copy(v438);
                dispatch_retain(v432);
                unint64_t v886 = (unint64_t)v432;
                if (v439)
                {
                  char v440 = 0;
                  char v441 = 0;
                  char v442 = 0;
                  char v443 = 0;
                  v887 = _Block_copy(v439);
                  dispatch_retain(v432);
                  dispatch_release(v432);
                  _Block_release(v439);
                  goto LABEL_804;
                }
                char v440 = 0;
                char v441 = 0;
                char v442 = 0;
                char v443 = 0;
LABEL_803:
                v887 = 0;
                dispatch_retain(v432);
                dispatch_release(v432);
LABEL_804:
                dispatch_release(v432);
                if ((v443 & 1) == 0) {
                  _Block_release(v438);
                }
                dispatch_release(v432);
                if ((v442 & 1) == 0) {
                  _Block_release(v437);
                }
                v885 = boost::function1<void,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>)::stored_vtable;
                dispatch_release(v432);
                if ((v441 & 1) == 0) {
                  _Block_release(v773);
                }
                dispatch_release(v432);
                if ((v440 & 1) == 0) {
                  _Block_release(v767);
                }
                *((void *)&v889 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(void *)&long long v889 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(void *)&blocuint64_t k = 0;
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v885);
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&v885, (uint64_t *)&v878 + 1);
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&v878 + 8, (uint64_t *)&block);
                if ((void)block)
                {
                  if ((block & 1) == 0)
                  {
                    v444 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                    if (v444) {
                      v444((char *)&block + 8, (char *)&block + 8, 2);
                    }
                  }
                }
                if (v885)
                {
                  if ((v885 & 1) == 0)
                  {
                    v445 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v885 & 0xFFFFFFFFFFFFFFFELL);
                    if (v445) {
                      v445((uint64_t)&v886, &v886, 2u);
                    }
                  }
                  v885 = 0;
                }
                dispatch_release(object);
                if (v884) {
                  _Block_release(v884);
                }
                dispatch_release(v881);
                if (v882) {
                  _Block_release(v882);
                }
                atomic_fetch_add_explicit(&v788->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                v446 = operator new(0x18uLL);
                void *v446 = &unk_1F2104268;
                v446[1] = v429;
                v446[2] = v788;
                atomic_fetch_add_explicit(&v788->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                v447 = operator new(0x18uLL);
                void *v447 = &unk_1F2104268;
                v447[1] = v429;
                v447[2] = v788;
                atomic_fetch_add_explicit(&v788->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                *((void *)&block + 1) = v447;
                LODWORD(block) = 2;
                v448 = v877[1];
                if (v877[1] >= (void *)v878)
                {
                  v450 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v877, (uint64_t)&block);
                }
                else
                {
                  v449 = operator new(0x18uLL);
                  void *v449 = &unk_1F2104268;
                  v449[1] = v429;
                  v449[2] = v788;
                  atomic_fetch_add_explicit(&v788->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  v448[1] = v449;
                  *(_DWORD *)v448 = 2;
                  v450 = v448 + 3;
                }
                v877[1] = v450;
                boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&block);
                (*(void (**)(void *))(*v446 + 8))(v446);
                std::__shared_weak_count::__release_weak(v788);
                v451 = *(uint64_t ***)(v797 + 112);
                *(void *)&long long v452 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v452 + 1) = 0xAAAAAAAAAAAAAAAALL;
                long long v897 = v452;
                long long v896 = v452;
                long long v895 = v452;
                long long v894 = v452;
                long long v893 = v452;
                long long v892 = v452;
                long long v891 = v452;
                *(_OWORD *)v890 = v452;
                long long v889 = v452;
                blocuint64_t k = v452;
                v453 = (pthread_mutex_t *)v451[3];
                unint64_t v898 = 10;
                std::string __p = &block;
                uint64_t v900 = 0;
                v901 = v453;
                pthread_mutex_lock(v453);
                unint64_t v886 = 0xAAAAAAAAAAAAAAAALL;
                v885 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                v454 = (atomic_uint *)v451[1];
                v798 = (uint64_t ***)v451;
                if (v454 && atomic_load_explicit(v454 + 2, memory_order_acquire) == 1)
                {
                  v455 = (uint64_t *)**v451;
                  v456 = v451[2];
                  int v457 = 2;
                  if (v456 != v455) {
                    goto LABEL_918;
                  }
                  goto LABEL_917;
                }
                v458 = (uint64_t **)operator new(0x20uLL);
                v459 = *v451;
                uint64_t v460 = *v459;
                v774 = v458;
                v461 = operator new(0x40uLL);
                v462 = v461;
                void *v461 = v461;
                v461[1] = v461;
                v461[2] = 0;
                v463 = *(void **)(v460 + 8);
                if (v463 != (void *)v460)
                {
                  uint64_t v464 = 0;
                  v465 = v461;
                  do
                  {
                    v466 = operator new(0x20uLL);
                    v466[2] = v463[2];
                    uint64_t v467 = v463[3];
                    v466[3] = v467;
                    if (v467)
                    {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v467 + 8), 1u, memory_order_relaxed);
                      v465 = (void *)*v462;
                      uint64_t v464 = v462[2];
                    }
                    void *v466 = v465;
                    v466[1] = v462;
                    v465[1] = v466;
                    void *v462 = v466;
                    v462[2] = ++v464;
                    v463 = (void *)v463[1];
                    v465 = v466;
                  }
                  while (v463 != (void *)v460);
                }
                v768 = v459;
                v462[3] = 0;
                v468 = (void **)(v462 + 3);
                v462[4] = 0;
                v469 = v462 + 4;
                v462[5] = 0;
                *((unsigned char *)v462 + 48) = *(unsigned char *)(v460 + 48);
                v462[3] = v462 + 4;
                v470 = *(void **)(v460 + 24);
                v471 = (void *)(v460 + 32);
                if (v470 == (void *)(v460 + 32))
                {
LABEL_838:
                  *((unsigned char *)v462 + 56) = *(unsigned char *)(v460 + 56);
                  v472 = *(void **)(v460 + 24);
                  if (v472 != v471)
                  {
                    v473 = (void *)v462[3];
                    uint64_t v474 = v462[1];
                    do
                    {
                      v473[6] = v474;
                      uint64_t v475 = v460;
                      if (v472 != v471) {
                        uint64_t v475 = v472[6];
                      }
                      v476 = (void *)v472[1];
                      v477 = v476;
                      v478 = v472;
                      if (v476)
                      {
                        do
                        {
                          v479 = v477;
                          v477 = (void *)*v477;
                        }
                        while (v477);
                      }
                      else
                      {
                        do
                        {
                          v479 = (void *)v478[2];
                          BOOL v205 = *v479 == (void)v478;
                          v478 = v479;
                        }
                        while (!v205);
                      }
                      uint64_t v480 = v460;
                      if (v479 != v471) {
                        uint64_t v480 = v479[6];
                      }
                      while (v475 != v480)
                      {
                        uint64_t v475 = *(void *)(v475 + 8);
                        uint64_t v474 = *(void *)(v474 + 8);
                      }
                      if (v476)
                      {
                        do
                        {
                          v481 = v476;
                          v476 = (void *)*v476;
                        }
                        while (v476);
                      }
                      else
                      {
                        do
                        {
                          v481 = (void *)v472[2];
                          BOOL v205 = *v481 == (void)v472;
                          v472 = v481;
                        }
                        while (!v205);
                      }
                      v482 = (void *)v473[1];
                      if (v482)
                      {
                        do
                        {
                          v483 = v482;
                          v482 = (void *)*v482;
                        }
                        while (v482);
                      }
                      else
                      {
                        do
                        {
                          v483 = (void *)v473[2];
                          BOOL v205 = *v483 == (void)v473;
                          v473 = v483;
                        }
                        while (!v205);
                      }
                      v472 = v481;
                      v473 = v483;
                    }
                    while (v481 != v471);
                  }
                  *v774 = v462;
                  v774[1] = 0;
                  v503 = (uint64_t *)operator new(0x18uLL);
                  v451 = (uint64_t **)v798;
                  v503[1] = 0x100000001;
                  uint64_t *v503 = (uint64_t)&unk_1F2104570;
                  v503[2] = (uint64_t)v462;
                  v774[1] = v503;
                  v774[2] = (uint64_t *)v768[2];
                  uint64_t v504 = v768[3];
                  v774[3] = (uint64_t *)v504;
                  if (v504) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v504 + 8), 1u, memory_order_relaxed);
                  }
                  v505 = (uint64_t **)operator new(0x18uLL);
                  v505[1] = (uint64_t *)0x100000001;
                  *v505 = (uint64_t *)&unk_1F2104510;
                  v505[2] = (uint64_t *)v774;
                  v506 = (atomic_uint *)v798[1];
                  *v798 = v774;
                  v798[1] = v505;
                  if (v506)
                  {
                    if (atomic_fetch_add(v506 + 2, 0xFFFFFFFF) == 1)
                    {
                      (*(void (**)(atomic_uint *))(*(void *)v506 + 16))(v506);
                      if (atomic_fetch_add(v506 + 3, 0xFFFFFFFF) == 1) {
                        (*(void (**)(atomic_uint *))(*(void *)v506 + 24))(v506);
                      }
                    }
                  }
                  int v457 = 0;
                  v455 = **v798;
LABEL_917:
                  v456 = (uint64_t *)v455[1];
                  if (v455 == v456) {
                    goto LABEL_1017;
                  }
LABEL_918:
                  int v507 = 0;
                  unsigned int v508 = v457 - 1;
LABEL_926:
                  uint64_t v511 = v456[2];
                  v512 = *(uint64_t **)(v511 + 32);
                  if (!v512) {
                    goto LABEL_919;
                  }
                  for (uint64_t k = *v512; ; k += 24)
                  {
                    if (k == v512[1]) {
                      goto LABEL_919;
                    }
                    if ((*(_DWORD *)k ^ (*(int *)k >> 31)) > 1)
                    {
                      if ((*(uint64_t (**)(void))(**(void **)(k + 8) + 24))(*(void *)(k + 8))) {
                        goto LABEL_935;
                      }
                    }
                    else
                    {
                      uint64_t v514 = *(void *)(k + 16);
                      if (!v514 || !atomic_load_explicit((atomic_uint *volatile)(v514 + 8), memory_order_acquire))
                      {
LABEL_935:
                        if (*(unsigned char *)(v511 + 24))
                        {
                          *(unsigned char *)(v511 + 24) = 0;
                          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v511, &block);
                        }
LABEL_919:
                        uint64_t v509 = v456[2];
                        if (*(unsigned char *)(v509 + 24))
                        {
                          v455 = (uint64_t *)v456[1];
                          goto LABEL_921;
                        }
                        uint64_t v515 = **v451;
                        v516 = (uint64_t **)(v515 + 32);
                        v517 = *(char **)(v515 + 32);
                        if (!v517)
                        {
                          if (*(uint64_t **)(v515 + 80) != v456) {
                            goto LABEL_1012;
                          }
                          v539 = (uint64_t *)v456[1];
                          v541 = (uint64_t **)(v515 + 32);
                          v520 = (uint64_t *)(v515 + 32);
                          if (v539 != (uint64_t *)v515) {
                            goto LABEL_1008;
                          }
                          goto LABEL_990;
                        }
                        int v518 = *(_DWORD *)(v509 + 64);
                        int v519 = *(_DWORD *)(v509 + 72);
                        v520 = (uint64_t *)(v515 + 32);
                        uint64_t v521 = *(void *)(v515 + 32);
                        if (v518 == 1)
                        {
                          v520 = (uint64_t *)(v515 + 32);
                          uint64_t v522 = *(void *)(v515 + 32);
                          do
                          {
                            while (1)
                            {
                              int v528 = *(_DWORD *)(v522 + 32);
                              BOOL v529 = v528 < 1;
                              if (v528 == 1) {
                                BOOL v529 = *(_DWORD *)(v522 + 40) < v519;
                              }
                              if (!v529) {
                                break;
                              }
                              uint64_t v522 = *(void *)(v522 + 8);
                              if (!v522) {
                                goto LABEL_956;
                              }
                            }
                            v520 = (uint64_t *)v522;
                            uint64_t v522 = *(void *)v522;
                          }
                          while (v522);
                        }
                        else
                        {
                          do
                          {
                            int v523 = *(_DWORD *)(v521 + 32);
                            BOOL v524 = v523 == v518;
                            BOOL v525 = v523 < v518;
                            if (v523 >= v518) {
                              v526 = (uint64_t *)v521;
                            }
                            else {
                              v526 = (uint64_t *)(v521 + 8);
                            }
                            if (v525) {
                              v527 = v520;
                            }
                            else {
                              v527 = (uint64_t *)v521;
                            }
                            if (v524)
                            {
                              v526 = (uint64_t *)v521;
                              v520 = (uint64_t *)v521;
                            }
                            else
                            {
                              v520 = v527;
                            }
                            uint64_t v521 = *v526;
                          }
                          while (*v526);
                        }
LABEL_956:
                        if ((uint64_t *)v520[6] == v456)
                        {
                          v530 = (uint64_t **)(v515 + 32);
                          v531 = *(uint64_t ***)(v515 + 32);
                          if (v518 != 1)
                          {
                            do
                            {
                              int v532 = *((_DWORD *)v531 + 8);
                              v533 = (uint64_t ***)(v531 + 1);
                              BOOL v534 = v518 == v532;
                              BOOL v535 = v518 < v532;
                              if (v518 >= v532) {
                                v536 = (uint64_t ***)(v531 + 1);
                              }
                              else {
                                v536 = (uint64_t ***)v531;
                              }
                              if (!v535) {
                                v531 = v530;
                              }
                              if (v534) {
                                v536 = v533;
                              }
                              else {
                                v530 = v531;
                              }
                              v531 = *v536;
                            }
                            while (*v536);
LABEL_974:
                            v538 = (uint64_t *)v515;
                            if (v530 != v516) {
                              v538 = v530[6];
                            }
                            v539 = (uint64_t *)v456[1];
                            if (v539 != v538)
                            {
                              if (v518 != 1)
                              {
                                int v540 = *((_DWORD *)v517 + 8);
                                if (v518 == v540) {
                                  goto LABEL_1011;
                                }
                                while (1)
                                {
                                  if (v518 < v540)
                                  {
                                    uint64_t v547 = *(void *)v517;
                                    if (!*(void *)v517)
                                    {
                                      v516 = (uint64_t **)v517;
LABEL_1007:
                                      v541 = (uint64_t **)v517;
LABEL_1008:
                                      v517 = (char *)operator new(0x38uLL);
                                      uint64_t v548 = *(void *)(v509 + 64);
                                      *((_DWORD *)v517 + 10) = *(_DWORD *)(v509 + 72);
                                      *((void *)v517 + 4) = v548;
                                      *((void *)v517 + 6) = 0;
                                      *(void *)v517 = 0;
                                      *((void *)v517 + 1) = 0;
                                      *((void *)v517 + 2) = v541;
                                      *v516 = (uint64_t *)v517;
                                      uint64_t v549 = **(void **)(v515 + 24);
                                      v550 = (uint64_t *)v517;
                                      if (v549)
                                      {
                                        *(void *)(v515 + 24) = v549;
                                        v550 = *v516;
                                      }
                                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v515 + 32), v550);
                                      ++*(void *)(v515 + 40);
LABEL_1011:
                                      *((void *)v517 + 6) = v539;
                                      goto LABEL_1012;
                                    }
                                  }
                                  else
                                  {
                                    if (v540 >= v518) {
                                      goto LABEL_1011;
                                    }
                                    uint64_t v547 = *((void *)v517 + 1);
                                    if (!v547)
                                    {
                                      v516 = (uint64_t **)(v517 + 8);
                                      goto LABEL_1007;
                                    }
                                  }
                                  int v540 = *(_DWORD *)(v547 + 32);
                                  v517 = (char *)v547;
                                  if (v518 == v540)
                                  {
                                    *(void *)(v547 + 48) = v539;
                                    goto LABEL_1012;
                                  }
                                }
                              }
                              while (1)
                              {
                                v541 = (uint64_t **)v517;
                                int v542 = *((_DWORD *)v517 + 8);
                                if (v542 == 1)
                                {
                                  int v543 = *((_DWORD *)v517 + 10);
                                  if (v543 <= v519)
                                  {
                                    if (v543 >= v519)
                                    {
                                      *((void *)v517 + 6) = v539;
                                      goto LABEL_1012;
                                    }
LABEL_986:
                                    v517 = (char *)*((void *)v517 + 1);
                                    if (!v517)
                                    {
                                      v516 = v541 + 1;
                                      goto LABEL_1008;
                                    }
                                    continue;
                                  }
                                }
                                else if (v542 <= 1)
                                {
                                  goto LABEL_986;
                                }
                                v517 = *(char **)v517;
                                if (!*v541)
                                {
                                  v516 = v541;
                                  goto LABEL_1008;
                                }
                              }
                            }
LABEL_990:
                            v544 = (uint64_t *)v520[1];
                            v545 = v520;
                            if (v544)
                            {
                              do
                              {
                                v546 = v544;
                                v544 = (uint64_t *)*v544;
                              }
                              while (v544);
                            }
                            else
                            {
                              do
                              {
                                v546 = (uint64_t *)v545[2];
                                BOOL v205 = *v546 == (void)v545;
                                v545 = v546;
                              }
                              while (!v205);
                            }
                            if (*(uint64_t **)(v515 + 24) == v520) {
                              *(void *)(v515 + 24) = v546;
                            }
                            --*(void *)(v515 + 40);
                            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v517, v520);
                            operator delete(v520);
                            goto LABEL_1012;
                          }
                          while (1)
                          {
                            int v537 = *((_DWORD *)v531 + 8);
                            if (v537 == 1)
                            {
                              if (v519 >= *((_DWORD *)v531 + 10)) {
                                goto LABEL_968;
                              }
                            }
                            else if (v537 <= 1)
                            {
LABEL_968:
                              v531 = (uint64_t **)v531[1];
                              if (!v531) {
                                goto LABEL_974;
                              }
                              continue;
                            }
                            v530 = v531;
                            v531 = (uint64_t **)*v531;
                            if (!v531) {
                              goto LABEL_974;
                            }
                          }
                        }
LABEL_1012:
                        uint64_t v551 = *v456;
                        v455 = (uint64_t *)v456[1];
                        *(void *)(v551 + 8) = v455;
                        *(void *)v456[1] = v551;
                        --*(void *)(v515 + 16);
                        v552 = (atomic_uint *)v456[3];
                        if (v552)
                        {
                          if (atomic_fetch_add(v552 + 2, 0xFFFFFFFF) == 1)
                          {
                            (*(void (**)(atomic_uint *))(*(void *)v552 + 16))(v552);
                            if (atomic_fetch_add(v552 + 3, 0xFFFFFFFF) == 1) {
                              (*(void (**)(atomic_uint *))(*(void *)v552 + 24))(v552);
                            }
                          }
                        }
                        operator delete(v456);
                        v451 = (uint64_t **)v798;
LABEL_921:
                        BOOL v510 = v455 != (uint64_t *)**v451 && v508 >= ++v507;
                        v456 = v455;
                        if (!v510)
                        {
LABEL_1017:
                          v451[2] = v455;
                          v553 = operator new(0x50uLL);
                          v553[1] = 0;
                          v553[2] = 0;
                          *((unsigned char *)v553 + 24) = 1;
                          *((_DWORD *)v553 + 7) = 1;
                          void *v553 = &unk_1F21045D0;
                          v554 = operator new(0x38uLL);
                          std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v554, (uint64_t *)v877);
                          v554[3] = 0;
                          uint64_t v555 = *((void *)&v878 + 1);
                          if (*((void *)&v878 + 1))
                          {
                            v554[3] = *((void *)&v878 + 1);
                            if (v555)
                            {
                              *((_OWORD *)v554 + 2) = v879;
                              v554[6] = v880;
                            }
                            else
                            {
                              (*(void (**)(long long *, void *, void))(v555 & 0xFFFFFFFFFFFFFFFELL))(&v879, v554 + 4, 0);
                            }
                          }
                          v553[4] = v554;
                          v553[5] = 0;
                          v556 = operator new(0x18uLL);
                          v556[1] = 0x100000001;
                          void *v556 = &unk_1F2104628;
                          v556[2] = v554;
                          v553[5] = v556;
                          v553[6] = v451[3];
                          v557 = (atomic_uint *)v451[4];
                          v553[7] = v557;
                          if (v557) {
                            atomic_fetch_add_explicit(v557 + 2, 1u, memory_order_relaxed);
                          }
                          *((_DWORD *)v553 + 16) = 0;
                          *((unsigned char *)v553 + 68) = 0;
                          v885 = (uint64_t (**)())v553;
                          v558 = operator new(0x18uLL);
                          *((void *)v558 + 1) = 0x100000001;
                          *(void *)v558 = &unk_1F2104688;
                          *((void *)v558 + 2) = v553;
                          unint64_t v886 = (unint64_t)v558;
                          v559 = (uint64_t *)**v451;
                          v560 = operator new(0x20uLL);
                          v561 = v559 + 4;
                          v560[2] = v553;
                          v560[3] = v558;
                          atomic_fetch_add_explicit((atomic_uint *volatile)v558 + 2, 1u, memory_order_relaxed);
                          uint64_t v562 = *v559;
                          *(void *)(v562 + 8) = v560;
                          void *v560 = v562;
                          uint64_t *v559 = (uint64_t)v560;
                          v560[1] = v559;
                          ++v559[2];
                          v563 = (uint64_t *)v559[4];
                          if (!v563)
                          {
                            v563 = v559 + 4;
                            goto LABEL_1044;
                          }
                          v564 = v559 + 4;
                          uint64_t v565 = v559[4];
                          do
                          {
                            int v566 = *(_DWORD *)(v565 + 32);
                            BOOL v567 = v566 == 2;
                            BOOL v568 = v566 < 2;
                            if (v566 >= 2) {
                              v569 = (uint64_t *)v565;
                            }
                            else {
                              v569 = (uint64_t *)(v565 + 8);
                            }
                            if (!v568) {
                              v564 = (uint64_t *)v565;
                            }
                            if (v567)
                            {
                              v569 = (uint64_t *)v565;
                              v564 = (uint64_t *)v565;
                            }
                            uint64_t v565 = *v569;
                          }
                          while (*v569);
                          if (v564 != v561 && *((_DWORD *)v564 + 8) == 2)
                          {
LABEL_1035:
                            *((_DWORD *)v553 + 16) = 2;
                            *(void *)((char *)v553 + 68) = 0xAAAAAAAAAAAAAA00;
                            v570 = this;
                            goto LABEL_1047;
                          }
                          int v571 = *((_DWORD *)v563 + 8);
                          while (1)
                          {
                            if (v571 == 2) {
                              goto LABEL_1035;
                            }
                            if (v571 < 3)
                            {
                              v572 = (uint64_t *)v563[1];
                              if (!v572)
                              {
                                v561 = v563 + 1;
LABEL_1044:
                                v573 = operator new(0x38uLL);
                                v573[4] = 0xAAAAAA0000000002;
                                *((_DWORD *)v573 + 10) = -1431655766;
                                v573[6] = v560;
                                void *v573 = 0;
                                v573[1] = 0;
                                v573[2] = v563;
                                uint64_t *v561 = (uint64_t)v573;
                                uint64_t v574 = *(void *)v559[3];
                                if (v574)
                                {
                                  v559[3] = v574;
                                  v573 = (void *)*v561;
                                }
                                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v559[4], v573);
                                ++v559[5];
                                v553 = v885;
                                v558 = (void *)v886;
                                *((_DWORD *)v885 + 16) = 2;
                                *(void *)((char *)v553 + 68) = 0xAAAAAAAAAAAAAA00;
                                v570 = this;
                                if (v558)
                                {
LABEL_1047:
                                  atomic_fetch_add_explicit((atomic_uint *volatile)v558 + 3, 1u, memory_order_relaxed);
                                  *(void *)&long long v817 = v553;
                                  *((void *)&v817 + 1) = v558;
                                  atomic_fetch_add_explicit((atomic_uint *volatile)v558 + 3, 1u, memory_order_relaxed);
                                  if (atomic_fetch_add((atomic_uint *volatile)v558 + 3, 0xFFFFFFFF) == 1) {
                                    (*(void (**)(void *))(*(void *)v558 + 24))(v558);
                                  }
                                  v575 = (atomic_uint *)v886;
                                  if (v886)
                                  {
LABEL_1050:
                                    if (atomic_fetch_add(v575 + 2, 0xFFFFFFFF) == 1)
                                    {
                                      (*(void (**)(atomic_uint *))(*(void *)v575 + 16))(v575);
                                      if (atomic_fetch_add(v575 + 3, 0xFFFFFFFF) == 1) {
                                        (*(void (**)(atomic_uint *))(*(void *)v575 + 24))(v575);
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  long long v817 = (unint64_t)v553;
                                  v575 = (atomic_uint *)v886;
                                  if (v886) {
                                    goto LABEL_1050;
                                  }
                                }
                                pthread_mutex_unlock(v901);
                                v576 = (char *)__p;
                                if (__p)
                                {
                                  if (v900 - 1 >= 0)
                                  {
                                    v577 = (char *)__p + 16 * v900;
                                    do
                                    {
                                      v578 = (atomic_uint *)*((void *)v577 - 1);
                                      if (v578)
                                      {
                                        if (atomic_fetch_add(v578 + 2, 0xFFFFFFFF) == 1)
                                        {
                                          (*(void (**)(atomic_uint *))(*(void *)v578 + 16))(v578);
                                          if (atomic_fetch_add(v578 + 3, 0xFFFFFFFF) == 1) {
                                            (*(void (**)(atomic_uint *))(*(void *)v578 + 24))(v578);
                                          }
                                        }
                                      }
                                      v577 -= 16;
                                    }
                                    while (v577 > v576);
                                  }
                                  v570 = this;
                                  if (v898 >= 0xB) {
                                    operator delete(__p);
                                  }
                                }
                                if (*((void *)&v878 + 1))
                                {
                                  if ((BYTE8(v878) & 1) == 0)
                                  {
                                    v579 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v878 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                    if (v579) {
                                      v579(&v879, &v879, 2);
                                    }
                                  }
                                  *((void *)&v878 + 1) = 0;
                                }
                                v580 = (char *)v877[0];
                                if (v877[0])
                                {
                                  v581 = (char *)v877[1];
                                  v582 = v877[0];
                                  if (v877[1] != v877[0])
                                  {
                                    do
                                    {
                                      v581 -= 24;
                                      boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v581);
                                    }
                                    while (v581 != v580);
                                    v582 = v877[0];
                                  }
                                  v877[1] = v580;
                                  operator delete(v582);
                                }
                                dispatch_release(v875);
                                if (v876) {
                                  _Block_release(v876);
                                }
                                if (atomic_fetch_add(&v788->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  v583 = v780;
                                  if (!v780) {
                                    goto LABEL_1081;
                                  }
LABEL_1080:
                                  _Block_release(v583);
                                }
                                else
                                {
                                  ((void (*)(std::__shared_weak_count *))v788->__on_zero_shared)(v788);
                                  std::__shared_weak_count::__release_weak(v788);
                                  v583 = v780;
                                  if (v780) {
                                    goto LABEL_1080;
                                  }
                                }
LABEL_1081:
                                v584 = operator new(0x20uLL);
                                v584[1] = v817;
                                uint64_t v585 = *((void *)v570 + 28);
                                *(void *)v584 = v585;
                                *((void *)v584 + 1) = v784;
                                *(void *)(v585 + 8) = v584;
                                *((void *)v570 + 28) = v584;
                                ++*((void *)v570 + 30);
                                uint64_t v586 = *((void *)v570 + 26);
                                v868 = (void **)MEMORY[0x1E4F143A8];
                                uint64_t v869 = 0x40000000;
                                v870 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNSt3__13mapIPKcNS9_4listINS9_4pairIyjEENS9_9allocatorISF_EEEENS9_4lessISC_EENSG_INSE_IKSC_SI_EEEEEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSJ_IiEENS6_8functionISQ_EENSU_IFvRKNS7_10connectionESO_SP_EEENS7_5mutexEEES3_vJSO_SP_EEEDTcl7connectfp_cvNS9_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FS17_S19_E_block_invoke;
                                v871 = &__block_descriptor_tmp_405;
                                v872 = v790;
                                v873 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleDesenseFrequencyReport_sync;
                                uint64_t v874 = 0;
                                v587 = _Block_copy(&v868);
                                uint64_t v799 = v586;
                                v588 = (std::__shared_weak_count *)*((void *)v570 + 10);
                                if (!v588
                                  || (uint64_t v589 = *((void *)v570 + 9), (v590 = std::__shared_weak_count::lock(v588)) == 0))
                                {
                                  std::__throw_bad_weak_ptr[abi:ne180100]();
                                }
                                v591 = v590;
                                v592 = *((void *)v570 + 11);
                                dispatch_object_t v875 = v592;
                                v789 = v587;
                                if (v587) {
                                  v593 = _Block_copy(v587);
                                }
                                else {
                                  v593 = 0;
                                }
                                v876 = v593;
                                dispatch_retain(v592);
                                long long v878 = 0u;
                                *(_OWORD *)v877 = 0u;
                                dispatch_object_t v881 = v592;
                                if (v593) {
                                  v593 = _Block_copy(v593);
                                }
                                v882 = v593;
                                dispatch_retain(v592);
                                dispatch_object_t object = v592;
                                v791 = v591;
                                if (v593)
                                {
                                  v594 = _Block_copy(v593);
                                  v884 = v594;
                                  dispatch_retain(v592);
                                  if (v594)
                                  {
                                    v595 = _Block_copy(v594);
                                    dispatch_retain(v592);
                                    v885 = 0;
                                    if (v595)
                                    {
                                      v596 = _Block_copy(v595);
                                      dispatch_retain(v592);
                                      v775 = v595;
                                      if (v596)
                                      {
                                        v597 = _Block_copy(v596);
                                        dispatch_retain(v592);
                                        v781 = v596;
                                        if (v597)
                                        {
                                          v598 = _Block_copy(v597);
                                          dispatch_retain(v592);
                                          if (v598)
                                          {
                                            v599 = _Block_copy(v598);
                                            dispatch_retain(v592);
                                            unint64_t v886 = (unint64_t)v592;
                                            if (v599)
                                            {
                                              char v600 = 0;
                                              char v601 = 0;
                                              char v602 = 0;
                                              char v603 = 0;
                                              v887 = _Block_copy(v599);
                                              dispatch_retain(v592);
                                              dispatch_release(v592);
                                              _Block_release(v599);
                                              goto LABEL_1103;
                                            }
                                            char v600 = 0;
                                            char v601 = 0;
                                            char v602 = 0;
                                            char v603 = 0;
LABEL_1102:
                                            v887 = 0;
                                            dispatch_retain(v592);
                                            dispatch_release(v592);
LABEL_1103:
                                            dispatch_release(v592);
                                            if ((v603 & 1) == 0) {
                                              _Block_release(v598);
                                            }
                                            dispatch_release(v592);
                                            if ((v602 & 1) == 0) {
                                              _Block_release(v597);
                                            }
                                            v885 = boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>)::stored_vtable;
                                            dispatch_release(v592);
                                            if ((v601 & 1) == 0) {
                                              _Block_release(v781);
                                            }
                                            dispatch_release(v592);
                                            if ((v600 & 1) == 0) {
                                              _Block_release(v775);
                                            }
                                            *((void *)&v889 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                            *(void *)&long long v889 = 0xAAAAAAAAAAAAAAAALL;
                                            *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                                            *(void *)&blocuint64_t k = 0;
                                            boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v885);
                                            boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&v885, (uint64_t *)&v878 + 1);
                                            boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&v878 + 8, (uint64_t *)&block);
                                            if ((void)block)
                                            {
                                              if ((block & 1) == 0)
                                              {
                                                v604 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                                                if (v604) {
                                                  v604((char *)&block + 8, (char *)&block + 8, 2);
                                                }
                                              }
                                            }
                                            if (v885)
                                            {
                                              if ((v885 & 1) == 0)
                                              {
                                                v605 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v885 & 0xFFFFFFFFFFFFFFFELL);
                                                if (v605) {
                                                  v605((uint64_t)&v886, &v886, 2u);
                                                }
                                              }
                                              v885 = 0;
                                            }
                                            dispatch_release(object);
                                            if (v884) {
                                              _Block_release(v884);
                                            }
                                            dispatch_release(v881);
                                            if (v882) {
                                              _Block_release(v882);
                                            }
                                            atomic_fetch_add_explicit(&v791->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                            v606 = operator new(0x18uLL);
                                            void *v606 = &unk_1F2104268;
                                            v606[1] = v589;
                                            v606[2] = v791;
                                            atomic_fetch_add_explicit(&v791->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                            v607 = operator new(0x18uLL);
                                            void *v607 = &unk_1F2104268;
                                            v607[1] = v589;
                                            v607[2] = v791;
                                            atomic_fetch_add_explicit(&v791->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                            *((void *)&block + 1) = v607;
                                            LODWORD(block) = 2;
                                            v608 = v877[1];
                                            if (v877[1] >= (void *)v878)
                                            {
                                              v611 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v877, (uint64_t)&block);
                                              v610 = v791;
                                            }
                                            else
                                            {
                                              v609 = operator new(0x18uLL);
                                              void *v609 = &unk_1F2104268;
                                              v609[1] = v589;
                                              v610 = v791;
                                              v609[2] = v791;
                                              atomic_fetch_add_explicit(&v791->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                              v608[1] = v609;
                                              *(_DWORD *)v608 = 2;
                                              v611 = v608 + 3;
                                            }
                                            v877[1] = v611;
                                            boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&block);
                                            (*(void (**)(void *))(*v606 + 8))(v606);
                                            std::__shared_weak_count::__release_weak(v610);
                                            v612 = *(uint64_t ***)(v799 + 136);
                                            *(void *)&long long v613 = 0xAAAAAAAAAAAAAAAALL;
                                            *((void *)&v613 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                            long long v897 = v613;
                                            long long v896 = v613;
                                            long long v895 = v613;
                                            long long v894 = v613;
                                            long long v893 = v613;
                                            long long v892 = v613;
                                            long long v891 = v613;
                                            *(_OWORD *)v890 = v613;
                                            long long v889 = v613;
                                            blocuint64_t k = v613;
                                            v614 = (pthread_mutex_t *)v612[3];
                                            unint64_t v898 = 10;
                                            std::string __p = &block;
                                            uint64_t v900 = 0;
                                            v901 = v614;
                                            pthread_mutex_lock(v614);
                                            unint64_t v886 = 0xAAAAAAAAAAAAAAAALL;
                                            v885 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                                            v615 = (atomic_uint *)v612[1];
                                            v800 = (uint64_t ***)v612;
                                            if (v615 && atomic_load_explicit(v615 + 2, memory_order_acquire) == 1)
                                            {
                                              v616 = (uint64_t *)**v612;
                                              v617 = v612[2];
                                              int v618 = 2;
                                              if (v617 != v616) {
                                                goto LABEL_1217;
                                              }
                                              goto LABEL_1216;
                                            }
                                            v619 = (uint64_t **)operator new(0x20uLL);
                                            v620 = *v612;
                                            uint64_t v621 = **v612;
                                            v782 = v619;
                                            v622 = operator new(0x40uLL);
                                            v623 = v622;
                                            void *v622 = v622;
                                            v622[1] = v622;
                                            v622[2] = 0;
                                            v624 = *(void **)(v621 + 8);
                                            if (v624 != (void *)v621)
                                            {
                                              uint64_t v625 = 0;
                                              v626 = v622;
                                              do
                                              {
                                                v627 = operator new(0x20uLL);
                                                v627[2] = v624[2];
                                                uint64_t v628 = v624[3];
                                                v627[3] = v628;
                                                if (v628)
                                                {
                                                  atomic_fetch_add_explicit((atomic_uint *volatile)(v628 + 8), 1u, memory_order_relaxed);
                                                  v626 = (void *)*v623;
                                                  uint64_t v625 = v623[2];
                                                }
                                                void *v627 = v626;
                                                v627[1] = v623;
                                                v626[1] = v627;
                                                void *v623 = v627;
                                                v623[2] = ++v625;
                                                v624 = (void *)v624[1];
                                                v626 = v627;
                                              }
                                              while (v624 != (void *)v621);
                                            }
                                            v776 = v620;
                                            v623[3] = 0;
                                            v629 = (void **)(v623 + 3);
                                            v623[4] = 0;
                                            v630 = v623 + 4;
                                            v623[5] = 0;
                                            *((unsigned char *)v623 + 48) = *(unsigned char *)(v621 + 48);
                                            v623[3] = v623 + 4;
                                            v631 = *(void **)(v621 + 24);
                                            v632 = (void *)(v621 + 32);
                                            if (v631 == (void *)(v621 + 32))
                                            {
LABEL_1137:
                                              *((unsigned char *)v623 + 56) = *(unsigned char *)(v621 + 56);
                                              v633 = *(void **)(v621 + 24);
                                              if (v633 != v632)
                                              {
                                                v634 = (void *)v623[3];
                                                uint64_t v635 = v623[1];
                                                do
                                                {
                                                  v634[6] = v635;
                                                  uint64_t v636 = v621;
                                                  if (v633 != v632) {
                                                    uint64_t v636 = v633[6];
                                                  }
                                                  v637 = (void *)v633[1];
                                                  v638 = v637;
                                                  v639 = v633;
                                                  if (v637)
                                                  {
                                                    do
                                                    {
                                                      v640 = v638;
                                                      v638 = (void *)*v638;
                                                    }
                                                    while (v638);
                                                  }
                                                  else
                                                  {
                                                    do
                                                    {
                                                      v640 = (void *)v639[2];
                                                      BOOL v205 = *v640 == (void)v639;
                                                      v639 = v640;
                                                    }
                                                    while (!v205);
                                                  }
                                                  uint64_t v641 = v621;
                                                  if (v640 != v632) {
                                                    uint64_t v641 = v640[6];
                                                  }
                                                  while (v636 != v641)
                                                  {
                                                    uint64_t v636 = *(void *)(v636 + 8);
                                                    uint64_t v635 = *(void *)(v635 + 8);
                                                  }
                                                  if (v637)
                                                  {
                                                    do
                                                    {
                                                      v642 = v637;
                                                      v637 = (void *)*v637;
                                                    }
                                                    while (v637);
                                                  }
                                                  else
                                                  {
                                                    do
                                                    {
                                                      v642 = (void *)v633[2];
                                                      BOOL v205 = *v642 == (void)v633;
                                                      v633 = v642;
                                                    }
                                                    while (!v205);
                                                  }
                                                  v643 = (void *)v634[1];
                                                  if (v643)
                                                  {
                                                    do
                                                    {
                                                      v644 = v643;
                                                      v643 = (void *)*v643;
                                                    }
                                                    while (v643);
                                                  }
                                                  else
                                                  {
                                                    do
                                                    {
                                                      v644 = (void *)v634[2];
                                                      BOOL v205 = *v644 == (void)v634;
                                                      v634 = v644;
                                                    }
                                                    while (!v205);
                                                  }
                                                  v633 = v642;
                                                  v634 = v644;
                                                }
                                                while (v642 != v632);
                                              }
                                              *v782 = v623;
                                              v782[1] = 0;
                                              v664 = (uint64_t *)operator new(0x18uLL);
                                              v612 = (uint64_t **)v800;
                                              v664[1] = 0x100000001;
                                              uint64_t *v664 = (uint64_t)&unk_1F2104788;
                                              v664[2] = (uint64_t)v623;
                                              v782[1] = v664;
                                              v782[2] = (uint64_t *)v776[2];
                                              uint64_t v665 = v776[3];
                                              v782[3] = (uint64_t *)v665;
                                              if (v665) {
                                                atomic_fetch_add_explicit((atomic_uint *volatile)(v665 + 8), 1u, memory_order_relaxed);
                                              }
                                              v666 = (uint64_t **)operator new(0x18uLL);
                                              v666[1] = (uint64_t *)0x100000001;
                                              *v666 = (uint64_t *)&unk_1F2104728;
                                              v666[2] = (uint64_t *)v782;
                                              v667 = (atomic_uint *)v800[1];
                                              *v800 = v782;
                                              v800[1] = v666;
                                              if (v667)
                                              {
                                                if (atomic_fetch_add(v667 + 2, 0xFFFFFFFF) == 1)
                                                {
                                                  (*(void (**)(atomic_uint *))(*(void *)v667 + 16))(v667);
                                                  if (atomic_fetch_add(v667 + 3, 0xFFFFFFFF) == 1) {
                                                    (*(void (**)(atomic_uint *))(*(void *)v667 + 24))(v667);
                                                  }
                                                }
                                              }
                                              int v618 = 0;
                                              v616 = **v800;
LABEL_1216:
                                              v617 = (uint64_t *)v616[1];
                                              if (v616 == v617) {
                                                goto LABEL_1316;
                                              }
LABEL_1217:
                                              int v668 = 0;
                                              unsigned int v669 = v618 - 1;
LABEL_1225:
                                              uint64_t v672 = v617[2];
                                              v673 = *(uint64_t **)(v672 + 32);
                                              if (!v673) {
                                                goto LABEL_1218;
                                              }
                                              for (uint64_t m = *v673; ; m += 24)
                                              {
                                                if (m == v673[1]) {
                                                  goto LABEL_1218;
                                                }
                                                if ((*(_DWORD *)m ^ (*(int *)m >> 31)) > 1)
                                                {
                                                  if ((*(uint64_t (**)(void))(**(void **)(m + 8) + 24))(*(void *)(m + 8))) {
                                                    goto LABEL_1234;
                                                  }
                                                }
                                                else
                                                {
                                                  uint64_t v675 = *(void *)(m + 16);
                                                  if (!v675
                                                    || !atomic_load_explicit((atomic_uint *volatile)(v675 + 8), memory_order_acquire))
                                                  {
LABEL_1234:
                                                    if (*(unsigned char *)(v672 + 24))
                                                    {
                                                      *(unsigned char *)(v672 + 24) = 0;
                                                      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v672, &block);
                                                    }
LABEL_1218:
                                                    uint64_t v670 = v617[2];
                                                    if (*(unsigned char *)(v670 + 24))
                                                    {
                                                      v616 = (uint64_t *)v617[1];
                                                      goto LABEL_1220;
                                                    }
                                                    uint64_t v676 = **v612;
                                                    v678 = (uint64_t **)(v676 + 32);
                                                    v677 = *(char **)(v676 + 32);
                                                    if (!v677)
                                                    {
                                                      if (*(uint64_t **)(v676 + 80) != v617) {
                                                        goto LABEL_1311;
                                                      }
                                                      v700 = (uint64_t *)v617[1];
                                                      v702 = (uint64_t **)(v676 + 32);
                                                      v681 = (uint64_t *)(v676 + 32);
                                                      if (v700 != (uint64_t *)v676) {
                                                        goto LABEL_1307;
                                                      }
                                                      goto LABEL_1289;
                                                    }
                                                    int v679 = *(_DWORD *)(v670 + 64);
                                                    int v680 = *(_DWORD *)(v670 + 72);
                                                    v681 = (uint64_t *)(v676 + 32);
                                                    uint64_t v682 = *(void *)(v676 + 32);
                                                    if (v679 == 1)
                                                    {
                                                      v681 = (uint64_t *)(v676 + 32);
                                                      uint64_t v683 = *(void *)(v676 + 32);
                                                      do
                                                      {
                                                        while (1)
                                                        {
                                                          int v689 = *(_DWORD *)(v683 + 32);
                                                          BOOL v690 = v689 < 1;
                                                          if (v689 == 1) {
                                                            BOOL v690 = *(_DWORD *)(v683 + 40) < v680;
                                                          }
                                                          if (!v690) {
                                                            break;
                                                          }
                                                          uint64_t v683 = *(void *)(v683 + 8);
                                                          if (!v683) {
                                                            goto LABEL_1255;
                                                          }
                                                        }
                                                        v681 = (uint64_t *)v683;
                                                        uint64_t v683 = *(void *)v683;
                                                      }
                                                      while (v683);
                                                    }
                                                    else
                                                    {
                                                      do
                                                      {
                                                        int v684 = *(_DWORD *)(v682 + 32);
                                                        BOOL v685 = v684 == v679;
                                                        BOOL v686 = v684 < v679;
                                                        if (v684 >= v679) {
                                                          v687 = (uint64_t *)v682;
                                                        }
                                                        else {
                                                          v687 = (uint64_t *)(v682 + 8);
                                                        }
                                                        if (v686) {
                                                          v688 = v681;
                                                        }
                                                        else {
                                                          v688 = (uint64_t *)v682;
                                                        }
                                                        if (v685)
                                                        {
                                                          v687 = (uint64_t *)v682;
                                                          v681 = (uint64_t *)v682;
                                                        }
                                                        else
                                                        {
                                                          v681 = v688;
                                                        }
                                                        uint64_t v682 = *v687;
                                                      }
                                                      while (*v687);
                                                    }
LABEL_1255:
                                                    if ((uint64_t *)v681[6] != v617) {
                                                      goto LABEL_1311;
                                                    }
                                                    v691 = (uint64_t **)(v676 + 32);
                                                    v692 = *(uint64_t ***)(v676 + 32);
                                                    if (v679 != 1)
                                                    {
                                                      do
                                                      {
                                                        int v693 = *((_DWORD *)v692 + 8);
                                                        v694 = (uint64_t ***)(v692 + 1);
                                                        BOOL v695 = v679 == v693;
                                                        BOOL v696 = v679 < v693;
                                                        if (v679 >= v693) {
                                                          v697 = (uint64_t ***)(v692 + 1);
                                                        }
                                                        else {
                                                          v697 = (uint64_t ***)v692;
                                                        }
                                                        if (!v696) {
                                                          v692 = v691;
                                                        }
                                                        if (v695) {
                                                          v697 = v694;
                                                        }
                                                        else {
                                                          v691 = v692;
                                                        }
                                                        v692 = *v697;
                                                      }
                                                      while (*v697);
LABEL_1273:
                                                      v699 = (uint64_t *)v676;
                                                      if (v691 != v678) {
                                                        v699 = v691[6];
                                                      }
                                                      v700 = (uint64_t *)v617[1];
                                                      if (v700 != v699)
                                                      {
                                                        if (v679 != 1)
                                                        {
                                                          int v701 = *((_DWORD *)v677 + 8);
                                                          if (v679 == v701) {
                                                            goto LABEL_1310;
                                                          }
                                                          while (2)
                                                          {
                                                            if (v679 >= v701)
                                                            {
                                                              if (v701 >= v679) {
                                                                goto LABEL_1310;
                                                              }
                                                              uint64_t v708 = *((void *)v677 + 1);
                                                              if (!v708)
                                                              {
                                                                v678 = (uint64_t **)(v677 + 8);
                                                                goto LABEL_1306;
                                                              }
                                                              goto LABEL_1298;
                                                            }
                                                            uint64_t v708 = *(void *)v677;
                                                            if (*(void *)v677)
                                                            {
LABEL_1298:
                                                              int v701 = *(_DWORD *)(v708 + 32);
                                                              v677 = (char *)v708;
                                                              if (v679 == v701)
                                                              {
                                                                *(void *)(v708 + 48) = v700;
                                                                goto LABEL_1311;
                                                              }
                                                              continue;
                                                            }
                                                            break;
                                                          }
                                                          v678 = (uint64_t **)v677;
LABEL_1306:
                                                          v702 = (uint64_t **)v677;
LABEL_1307:
                                                          v677 = (char *)operator new(0x38uLL);
                                                          uint64_t v709 = *(void *)(v670 + 64);
                                                          *((_DWORD *)v677 + 10) = *(_DWORD *)(v670 + 72);
                                                          *((void *)v677 + 4) = v709;
                                                          *((void *)v677 + 6) = 0;
                                                          *(void *)v677 = 0;
                                                          *((void *)v677 + 1) = 0;
                                                          *((void *)v677 + 2) = v702;
                                                          *v678 = (uint64_t *)v677;
                                                          uint64_t v710 = **(void **)(v676 + 24);
                                                          v711 = (uint64_t *)v677;
                                                          if (v710)
                                                          {
                                                            *(void *)(v676 + 24) = v710;
                                                            v711 = *v678;
                                                          }
                                                          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v676 + 32), v711);
                                                          ++*(void *)(v676 + 40);
LABEL_1310:
                                                          *((void *)v677 + 6) = v700;
LABEL_1311:
                                                          uint64_t v712 = *v617;
                                                          v616 = (uint64_t *)v617[1];
                                                          *(void *)(v712 + 8) = v616;
                                                          *(void *)v617[1] = v712;
                                                          --*(void *)(v676 + 16);
                                                          v713 = (atomic_uint *)v617[3];
                                                          if (v713)
                                                          {
                                                            if (atomic_fetch_add(v713 + 2, 0xFFFFFFFF) == 1)
                                                            {
                                                              (*(void (**)(atomic_uint *))(*(void *)v713 + 16))(v713);
                                                              if (atomic_fetch_add(v713 + 3, 0xFFFFFFFF) == 1) {
                                                                (*(void (**)(atomic_uint *))(*(void *)v713 + 24))(v713);
                                                              }
                                                            }
                                                          }
                                                          operator delete(v617);
                                                          v612 = (uint64_t **)v800;
LABEL_1220:
                                                          BOOL v671 = v616 != (uint64_t *)**v612 && v669 >= ++v668;
                                                          v617 = v616;
                                                          if (!v671)
                                                          {
LABEL_1316:
                                                            v612[2] = v616;
                                                            v714 = operator new(0x50uLL);
                                                            v714[1] = 0;
                                                            v714[2] = 0;
                                                            *((unsigned char *)v714 + 24) = 1;
                                                            *((_DWORD *)v714 + 7) = 1;
                                                            void *v714 = &unk_1F21047E8;
                                                            v715 = operator new(0x38uLL);
                                                            std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v715, (uint64_t *)v877);
                                                            v715[3] = 0;
                                                            uint64_t v716 = *((void *)&v878 + 1);
                                                            if (*((void *)&v878 + 1))
                                                            {
                                                              v715[3] = *((void *)&v878 + 1);
                                                              if (v716)
                                                              {
                                                                *((_OWORD *)v715 + 2) = v879;
                                                                v715[6] = v880;
                                                              }
                                                              else
                                                              {
                                                                (*(void (**)(long long *, void *, void))(v716 & 0xFFFFFFFFFFFFFFFELL))(&v879, v715 + 4, 0);
                                                              }
                                                            }
                                                            v714[4] = v715;
                                                            v714[5] = 0;
                                                            v717 = operator new(0x18uLL);
                                                            v717[1] = 0x100000001;
                                                            void *v717 = &unk_1F2104840;
                                                            v717[2] = v715;
                                                            v714[5] = v717;
                                                            v714[6] = v612[3];
                                                            v718 = (atomic_uint *)v612[4];
                                                            v714[7] = v718;
                                                            if (v718) {
                                                              atomic_fetch_add_explicit(v718 + 2, 1u, memory_order_relaxed);
                                                            }
                                                            *((_DWORD *)v714 + 16) = 0;
                                                            *((unsigned char *)v714 + 68) = 0;
                                                            v885 = (uint64_t (**)())v714;
                                                            v719 = operator new(0x18uLL);
                                                            *((void *)v719 + 1) = 0x100000001;
                                                            *(void *)v719 = &unk_1F21048A0;
                                                            *((void *)v719 + 2) = v714;
                                                            unint64_t v886 = (unint64_t)v719;
                                                            v720 = (uint64_t *)**v612;
                                                            v721 = operator new(0x20uLL);
                                                            v722 = v720 + 4;
                                                            v721[2] = v714;
                                                            v721[3] = v719;
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)v719 + 2, 1u, memory_order_relaxed);
                                                            uint64_t v723 = *v720;
                                                            *(void *)(v723 + 8) = v721;
                                                            void *v721 = v723;
                                                            uint64_t *v720 = (uint64_t)v721;
                                                            v721[1] = v720;
                                                            ++v720[2];
                                                            v724 = (uint64_t *)v720[4];
                                                            if (v724)
                                                            {
                                                              v725 = v720 + 4;
                                                              uint64_t v726 = v720[4];
                                                              do
                                                              {
                                                                int v727 = *(_DWORD *)(v726 + 32);
                                                                BOOL v728 = v727 == 2;
                                                                BOOL v729 = v727 < 2;
                                                                if (v727 >= 2) {
                                                                  v730 = (uint64_t *)v726;
                                                                }
                                                                else {
                                                                  v730 = (uint64_t *)(v726 + 8);
                                                                }
                                                                if (!v729) {
                                                                  v725 = (uint64_t *)v726;
                                                                }
                                                                if (v728)
                                                                {
                                                                  v730 = (uint64_t *)v726;
                                                                  v725 = (uint64_t *)v726;
                                                                }
                                                                uint64_t v726 = *v730;
                                                              }
                                                              while (*v730);
                                                              if (v725 == v722 || *((_DWORD *)v725 + 8) != 2)
                                                              {
                                                                int v731 = *((_DWORD *)v724 + 8);
                                                                while (v731 != 2)
                                                                {
                                                                  if (v731 < 3)
                                                                  {
                                                                    v732 = (uint64_t *)v724[1];
                                                                    if (!v732)
                                                                    {
                                                                      v722 = v724 + 1;
                                                                      goto LABEL_1343;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    v732 = (uint64_t *)*v724;
                                                                    v722 = v724;
                                                                    if (!*v724) {
                                                                      goto LABEL_1343;
                                                                    }
                                                                  }
                                                                  int v731 = *((_DWORD *)v732 + 8);
                                                                  v724 = v732;
                                                                }
                                                              }
                                                              *((_DWORD *)v714 + 16) = 2;
                                                              *(void *)((char *)v714 + 68) = 0xAAAAAAAAAAAAAA00;
                                                              v411 = this;
LABEL_1346:
                                                              atomic_fetch_add_explicit((atomic_uint *volatile)v719 + 3, 1u, memory_order_relaxed);
                                                              *(void *)&long long v817 = v714;
                                                              *((void *)&v817 + 1) = v719;
                                                              atomic_fetch_add_explicit((atomic_uint *volatile)v719 + 3, 1u, memory_order_relaxed);
                                                              if (atomic_fetch_add((atomic_uint *volatile)v719 + 3, 0xFFFFFFFF) == 1)(*(void (**)(void *))(*(void *)v719 + 24))(v719); {
                                                              v735 = (atomic_uint *)v886;
                                                              }
                                                              if (v886) {
                                                                goto LABEL_1349;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v724 = v720 + 4;
LABEL_1343:
                                                              v733 = operator new(0x38uLL);
                                                              v733[4] = 0xAAAAAA0000000002;
                                                              *((_DWORD *)v733 + 10) = -1431655766;
                                                              v733[6] = v721;
                                                              void *v733 = 0;
                                                              v733[1] = 0;
                                                              v733[2] = v724;
                                                              uint64_t *v722 = (uint64_t)v733;
                                                              uint64_t v734 = *(void *)v720[3];
                                                              if (v734)
                                                              {
                                                                v720[3] = v734;
                                                                v733 = (void *)*v722;
                                                              }
                                                              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v720[4], v733);
                                                              ++v720[5];
                                                              v714 = v885;
                                                              v719 = (void *)v886;
                                                              *((_DWORD *)v885 + 16) = 2;
                                                              *(void *)((char *)v714 + 68) = 0xAAAAAAAAAAAAAA00;
                                                              v411 = this;
                                                              if (v719) {
                                                                goto LABEL_1346;
                                                              }
                                                              long long v817 = (unint64_t)v714;
                                                              v735 = (atomic_uint *)v886;
                                                              if (v886)
                                                              {
LABEL_1349:
                                                                if (atomic_fetch_add(v735 + 2, 0xFFFFFFFF) == 1)
                                                                {
                                                                  (*(void (**)(atomic_uint *))(*(void *)v735 + 16))(v735);
                                                                  if (atomic_fetch_add(v735 + 3, 0xFFFFFFFF) == 1) {
                                                                    (*(void (**)(atomic_uint *))(*(void *)v735 + 24))(v735);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                            pthread_mutex_unlock(v901);
                                                            v736 = (char *)__p;
                                                            if (__p)
                                                            {
                                                              if (v900 - 1 >= 0)
                                                              {
                                                                v737 = (char *)__p + 16 * v900;
                                                                do
                                                                {
                                                                  v738 = (atomic_uint *)*((void *)v737 - 1);
                                                                  if (v738)
                                                                  {
                                                                    if (atomic_fetch_add(v738 + 2, 0xFFFFFFFF) == 1)
                                                                    {
                                                                      (*(void (**)(atomic_uint *))(*(void *)v738 + 16))(v738);
                                                                      if (atomic_fetch_add(v738 + 3, 0xFFFFFFFF) == 1) {
                                                                        (*(void (**)(atomic_uint *))(*(void *)v738 + 24))(v738);
                                                                      }
                                                                    }
                                                                  }
                                                                  v737 -= 16;
                                                                }
                                                                while (v737 > v736);
                                                              }
                                                              v411 = this;
                                                              if (v898 >= 0xB) {
                                                                operator delete(__p);
                                                              }
                                                            }
                                                            if (*((void *)&v878 + 1))
                                                            {
                                                              if ((BYTE8(v878) & 1) == 0)
                                                              {
                                                                v739 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v878 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                                                if (v739) {
                                                                  v739(&v879, &v879, 2);
                                                                }
                                                              }
                                                              *((void *)&v878 + 1) = 0;
                                                            }
                                                            v740 = (char *)v877[0];
                                                            if (v877[0])
                                                            {
                                                              v741 = (char *)v877[1];
                                                              v742 = v877[0];
                                                              if (v877[1] != v877[0])
                                                              {
                                                                do
                                                                {
                                                                  v741 -= 24;
                                                                  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v741);
                                                                }
                                                                while (v741 != v740);
                                                                v742 = v877[0];
                                                              }
                                                              v877[1] = v740;
                                                              operator delete(v742);
                                                            }
                                                            dispatch_release(v875);
                                                            if (v876) {
                                                              _Block_release(v876);
                                                            }
                                                            if (atomic_fetch_add(&v791->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                                            {
                                                              if (!v789)
                                                              {
LABEL_1380:
                                                                v743 = operator new(0x20uLL);
                                                                v743[1] = v817;
                                                                uint64_t v744 = *((void *)v411 + 28);
                                                                *(void *)v743 = v744;
                                                                *((void *)v743 + 1) = v784;
                                                                *(void *)(v744 + 8) = v743;
                                                                *((void *)v411 + 28) = v743;
                                                                ++*((void *)v411 + 30);
                                                                goto LABEL_1381;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              ((void (*)(std::__shared_weak_count *))v791->__on_zero_shared)(v791);
                                                              std::__shared_weak_count::__release_weak(v791);
                                                              if (!v789) {
                                                                goto LABEL_1380;
                                                              }
                                                            }
                                                            _Block_release(v789);
                                                            goto LABEL_1380;
                                                          }
                                                          goto LABEL_1225;
                                                        }
                                                        while (1)
                                                        {
                                                          v702 = (uint64_t **)v677;
                                                          int v703 = *((_DWORD *)v677 + 8);
                                                          if (v703 == 1)
                                                          {
                                                            int v704 = *((_DWORD *)v677 + 10);
                                                            if (v704 <= v680)
                                                            {
                                                              if (v704 >= v680)
                                                              {
                                                                *((void *)v677 + 6) = v700;
                                                                goto LABEL_1311;
                                                              }
LABEL_1285:
                                                              v677 = (char *)*((void *)v677 + 1);
                                                              if (!v677)
                                                              {
                                                                v678 = v702 + 1;
                                                                goto LABEL_1307;
                                                              }
                                                              continue;
                                                            }
                                                          }
                                                          else if (v703 <= 1)
                                                          {
                                                            goto LABEL_1285;
                                                          }
                                                          v677 = *(char **)v677;
                                                          if (!*v702)
                                                          {
                                                            v678 = v702;
                                                            goto LABEL_1307;
                                                          }
                                                        }
                                                      }
LABEL_1289:
                                                      v705 = (uint64_t *)v681[1];
                                                      v706 = v681;
                                                      if (v705)
                                                      {
                                                        do
                                                        {
                                                          v707 = v705;
                                                          v705 = (uint64_t *)*v705;
                                                        }
                                                        while (v705);
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v707 = (uint64_t *)v706[2];
                                                          BOOL v205 = *v707 == (void)v706;
                                                          v706 = v707;
                                                        }
                                                        while (!v205);
                                                      }
                                                      if (*(uint64_t **)(v676 + 24) == v681) {
                                                        *(void *)(v676 + 24) = v707;
                                                      }
                                                      --*(void *)(v676 + 40);
                                                      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v677, v681);
                                                      operator delete(v681);
                                                      goto LABEL_1311;
                                                    }
                                                    while (1)
                                                    {
                                                      int v698 = *((_DWORD *)v692 + 8);
                                                      if (v698 == 1)
                                                      {
                                                        if (v680 >= *((_DWORD *)v692 + 10)) {
                                                          goto LABEL_1267;
                                                        }
                                                      }
                                                      else if (v698 <= 1)
                                                      {
LABEL_1267:
                                                        v692 = (uint64_t **)v692[1];
                                                        if (!v692) {
                                                          goto LABEL_1273;
                                                        }
                                                        continue;
                                                      }
                                                      v691 = v692;
                                                      v692 = (uint64_t **)*v692;
                                                      if (!v692) {
                                                        goto LABEL_1273;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            while (2)
                                            {
                                              int v645 = *((_DWORD *)v631 + 8);
                                              v646 = (void *)*v630;
                                              v647 = v623 + 4;
                                              if (*v629 == v630) {
                                                goto LABEL_1174;
                                              }
                                              v648 = (void *)*v630;
                                              v649 = v623 + 4;
                                              if (v646)
                                              {
                                                do
                                                {
                                                  v647 = v648;
                                                  v648 = (void *)v648[1];
                                                }
                                                while (v648);
                                              }
                                              else
                                              {
                                                do
                                                {
                                                  v647 = (void *)v649[2];
                                                  BOOL v205 = *v647 == (void)v649;
                                                  v649 = v647;
                                                }
                                                while (v205);
                                              }
                                              int v650 = *((_DWORD *)v631 + 10);
                                              int v651 = *((_DWORD *)v647 + 8);
                                              if (v651 == v645)
                                              {
                                                if (v645 == 1)
                                                {
                                                  if (*((_DWORD *)v647 + 10) >= v650)
                                                  {
                                                    v652 = (void *)*v630;
                                                    v653 = v623 + 4;
                                                    v654 = v623 + 4;
                                                    if (v646) {
                                                      goto LABEL_1186;
                                                    }
LABEL_1193:
                                                    v658 = operator new(0x38uLL);
                                                    long long v659 = *((_OWORD *)v631 + 2);
                                                    v658[6] = v631[6];
                                                    *((_OWORD *)v658 + 2) = v659;
                                                    void *v658 = 0;
                                                    v658[1] = 0;
                                                    v658[2] = v654;
                                                    void *v653 = v658;
                                                    v660 = (void *)**v629;
                                                    if (v660)
                                                    {
                                                      *v629 = v660;
                                                      v658 = (void *)*v653;
                                                    }
                                                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v623[4], v658);
                                                    ++v623[5];
LABEL_1196:
                                                    v661 = (void *)v631[1];
                                                    if (v661)
                                                    {
                                                      do
                                                      {
                                                        v662 = v661;
                                                        v661 = (void *)*v661;
                                                      }
                                                      while (v661);
                                                    }
                                                    else
                                                    {
                                                      do
                                                      {
                                                        v662 = (void *)v631[2];
                                                        BOOL v205 = *v662 == (void)v631;
                                                        v631 = v662;
                                                      }
                                                      while (!v205);
                                                    }
                                                    v631 = v662;
                                                    if (v662 == v632) {
                                                      goto LABEL_1137;
                                                    }
                                                    continue;
                                                  }
LABEL_1174:
                                                  if (v646) {
                                                    v654 = v647;
                                                  }
                                                  else {
                                                    v654 = v623 + 4;
                                                  }
                                                  if (v646) {
                                                    v653 = v647 + 1;
                                                  }
                                                  else {
                                                    v653 = v623 + 4;
                                                  }
                                                  if (!*v653) {
                                                    goto LABEL_1193;
                                                  }
                                                  goto LABEL_1196;
                                                }
                                              }
                                              else if (v651 < v645)
                                              {
                                                goto LABEL_1174;
                                              }
                                              break;
                                            }
                                            v653 = v623 + 4;
                                            v654 = v623 + 4;
                                            if (!v646) {
                                              goto LABEL_1193;
                                            }
                                            v652 = (void *)*v630;
                                            if (v645 != 1)
                                            {
                                              int v655 = *((_DWORD *)v646 + 8);
                                              v654 = (void *)*v630;
                                              while (v645 != v655)
                                              {
                                                if (v645 < v655)
                                                {
                                                  uint64_t v663 = *v654;
                                                  v653 = v654;
                                                  if (!*v654) {
                                                    goto LABEL_1193;
                                                  }
                                                }
                                                else
                                                {
                                                  if (v655 >= v645) {
                                                    goto LABEL_1196;
                                                  }
                                                  uint64_t v663 = v654[1];
                                                  if (!v663) {
                                                    goto LABEL_1192;
                                                  }
                                                }
                                                int v655 = *(_DWORD *)(v663 + 32);
                                                v654 = (void *)v663;
                                              }
                                              goto LABEL_1196;
                                            }
                                            while (1)
                                            {
LABEL_1186:
                                              v654 = v652;
                                              int v656 = *((_DWORD *)v652 + 8);
                                              if (v656 == 1)
                                              {
                                                int v657 = *((_DWORD *)v652 + 10);
                                                if (v657 > v650) {
                                                  goto LABEL_1185;
                                                }
                                                if (v657 >= v650) {
                                                  goto LABEL_1196;
                                                }
                                              }
                                              else if (v656 > 1)
                                              {
LABEL_1185:
                                                v652 = (void *)*v652;
                                                v653 = v654;
                                                if (!*v654) {
                                                  goto LABEL_1193;
                                                }
                                                continue;
                                              }
                                              v652 = (void *)v652[1];
                                              if (!v652)
                                              {
LABEL_1192:
                                                v653 = v654 + 1;
                                                goto LABEL_1193;
                                              }
                                            }
                                          }
                                          char v600 = 0;
                                          char v601 = 0;
                                          char v602 = 0;
LABEL_1101:
                                          dispatch_retain(v592);
                                          v598 = 0;
                                          unint64_t v886 = (unint64_t)v592;
                                          char v603 = 1;
                                          goto LABEL_1102;
                                        }
                                        char v600 = 0;
                                        char v601 = 0;
LABEL_1100:
                                        dispatch_retain(v592);
                                        v597 = 0;
                                        char v602 = 1;
                                        goto LABEL_1101;
                                      }
                                      char v600 = 0;
LABEL_1099:
                                      dispatch_retain(v592);
                                      v781 = 0;
                                      char v601 = 1;
                                      goto LABEL_1100;
                                    }
LABEL_1098:
                                    dispatch_retain(v592);
                                    v775 = 0;
                                    char v600 = 1;
                                    goto LABEL_1099;
                                  }
                                }
                                else
                                {
                                  v884 = 0;
                                  dispatch_retain(v592);
                                }
                                dispatch_retain(v592);
                                v885 = 0;
                                goto LABEL_1098;
                              }
                            }
                            else
                            {
                              v572 = (uint64_t *)*v563;
                              v561 = v563;
                              if (!*v563) {
                                goto LABEL_1044;
                              }
                            }
                            int v571 = *((_DWORD *)v572 + 8);
                            v563 = v572;
                          }
                        }
                        goto LABEL_926;
                      }
                    }
                  }
                }
                while (2)
                {
                  int v484 = *((_DWORD *)v470 + 8);
                  v485 = (void *)*v469;
                  v486 = v462 + 4;
                  if (*v468 == v469) {
                    goto LABEL_875;
                  }
                  v487 = (void *)*v469;
                  v488 = v462 + 4;
                  if (v485)
                  {
                    do
                    {
                      v486 = v487;
                      v487 = (void *)v487[1];
                    }
                    while (v487);
                  }
                  else
                  {
                    do
                    {
                      v486 = (void *)v488[2];
                      BOOL v205 = *v486 == (void)v488;
                      v488 = v486;
                    }
                    while (v205);
                  }
                  int v489 = *((_DWORD *)v470 + 10);
                  int v490 = *((_DWORD *)v486 + 8);
                  if (v490 == v484)
                  {
                    if (v484 == 1)
                    {
                      if (*((_DWORD *)v486 + 10) >= v489)
                      {
                        v491 = (void *)*v469;
                        v492 = v462 + 4;
                        v493 = v462 + 4;
                        if (v485) {
                          goto LABEL_887;
                        }
LABEL_894:
                        v497 = operator new(0x38uLL);
                        long long v498 = *((_OWORD *)v470 + 2);
                        v497[6] = v470[6];
                        *((_OWORD *)v497 + 2) = v498;
                        void *v497 = 0;
                        v497[1] = 0;
                        v497[2] = v493;
                        void *v492 = v497;
                        v499 = (void *)**v468;
                        if (v499)
                        {
                          *v468 = v499;
                          v497 = (void *)*v492;
                        }
                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v462[4], v497);
                        ++v462[5];
LABEL_897:
                        v500 = (void *)v470[1];
                        if (v500)
                        {
                          do
                          {
                            v501 = v500;
                            v500 = (void *)*v500;
                          }
                          while (v500);
                        }
                        else
                        {
                          do
                          {
                            v501 = (void *)v470[2];
                            BOOL v205 = *v501 == (void)v470;
                            v470 = v501;
                          }
                          while (!v205);
                        }
                        v470 = v501;
                        if (v501 == v471) {
                          goto LABEL_838;
                        }
                        continue;
                      }
LABEL_875:
                      if (v485) {
                        v493 = v486;
                      }
                      else {
                        v493 = v462 + 4;
                      }
                      if (v485) {
                        v492 = v486 + 1;
                      }
                      else {
                        v492 = v462 + 4;
                      }
                      if (!*v492) {
                        goto LABEL_894;
                      }
                      goto LABEL_897;
                    }
                  }
                  else if (v490 < v484)
                  {
                    goto LABEL_875;
                  }
                  break;
                }
                v492 = v462 + 4;
                v493 = v462 + 4;
                if (!v485) {
                  goto LABEL_894;
                }
                v491 = (void *)*v469;
                if (v484 != 1)
                {
                  int v494 = *((_DWORD *)v485 + 8);
                  v493 = (void *)*v469;
                  while (v484 != v494)
                  {
                    if (v484 < v494)
                    {
                      uint64_t v502 = *v493;
                      v492 = v493;
                      if (!*v493) {
                        goto LABEL_894;
                      }
                    }
                    else
                    {
                      if (v494 >= v484) {
                        goto LABEL_897;
                      }
                      uint64_t v502 = v493[1];
                      if (!v502) {
                        goto LABEL_893;
                      }
                    }
                    int v494 = *(_DWORD *)(v502 + 32);
                    v493 = (void *)v502;
                  }
                  goto LABEL_897;
                }
                while (1)
                {
LABEL_887:
                  v493 = v491;
                  int v495 = *((_DWORD *)v491 + 8);
                  if (v495 == 1)
                  {
                    int v496 = *((_DWORD *)v491 + 10);
                    if (v496 > v489) {
                      goto LABEL_886;
                    }
                    if (v496 >= v489) {
                      goto LABEL_897;
                    }
                  }
                  else if (v495 > 1)
                  {
LABEL_886:
                    v491 = (void *)*v491;
                    v492 = v493;
                    if (!*v493) {
                      goto LABEL_894;
                    }
                    continue;
                  }
                  v491 = (void *)v491[1];
                  if (!v491)
                  {
LABEL_893:
                    v492 = v493 + 1;
                    goto LABEL_894;
                  }
                }
              }
              char v440 = 0;
              char v441 = 0;
              char v442 = 0;
LABEL_802:
              dispatch_retain(v432);
              v438 = 0;
              unint64_t v886 = (unint64_t)v432;
              char v443 = 1;
              goto LABEL_803;
            }
            char v440 = 0;
            char v441 = 0;
LABEL_801:
            dispatch_retain(v432);
            v437 = 0;
            char v442 = 1;
            goto LABEL_802;
          }
          char v440 = 0;
LABEL_800:
          dispatch_retain(v432);
          v773 = 0;
          char v441 = 1;
          goto LABEL_801;
        }
LABEL_799:
        dispatch_retain(v432);
        v767 = 0;
        char v440 = 1;
        goto LABEL_800;
      }
    }
    else
    {
      v884 = 0;
      dispatch_retain(v432);
    }
    dispatch_retain(v432);
    v885 = 0;
    goto LABEL_799;
  }
LABEL_1381:
  coex::Module::State::setIndications_sync(v411);
  char v816 = 8;
  CFTypeRef cf = 0;
  strcpy((char *)v815, "coex.mod");
  AppleBasebandManager::create();
  long long v745 = block;
  blocuint64_t k = 0uLL;
  v746 = (std::__shared_weak_count *)*((void *)v411 + 32);
  *(_OWORD *)((char *)v411 + 248) = v745;
  if (v746 && !atomic_fetch_add(&v746->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v746->__on_zero_shared)(v746);
    std::__shared_weak_count::__release_weak(v746);
    v747 = (std::__shared_weak_count *)*((void *)&block + 1);
    if (!*((void *)&block + 1)) {
      goto LABEL_1385;
    }
LABEL_1384:
    if (atomic_fetch_add(&v747->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_1385;
    }
    ((void (*)(std::__shared_weak_count *))v747->__on_zero_shared)(v747);
    std::__shared_weak_count::__release_weak(v747);
    CFTypeRef v748 = cf;
    if (cf) {
LABEL_1386:
    }
      CFRelease(v748);
  }
  else
  {
    v747 = (std::__shared_weak_count *)*((void *)&block + 1);
    if (*((void *)&block + 1)) {
      goto LABEL_1384;
    }
LABEL_1385:
    CFTypeRef v748 = cf;
    if (cf) {
      goto LABEL_1386;
    }
  }
  if (v816 < 0) {
    operator delete(v815[0]);
  }
  v749 = (const void *)*MEMORY[0x1E4F4D0F8];
  size_t v750 = strlen((const char *)*MEMORY[0x1E4F4D0F8]);
  if (v750 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v751 = (void *)v750;
  if (v750 >= 0x17)
  {
    uint64_t v753 = (v750 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v750 | 7) != 0x17) {
      uint64_t v753 = v750 | 7;
    }
    uint64_t v754 = v753 + 1;
    v752 = (void **)operator new(v753 + 1);
    __dst[1] = v751;
    unint64_t v813 = v754 | 0x8000000000000000;
    __dst[0] = v752;
    goto LABEL_1396;
  }
  HIBYTE(v813) = v750;
  v752 = __dst;
  if (v750) {
LABEL_1396:
  }
    memmove(v752, v749, (size_t)v751);
  *((unsigned char *)v751 + (void)v752) = 0;
  v808[0] = MEMORY[0x1E4F143A8];
  v808[1] = 1174405120;
  v808[2] = ___ZN4coex6Module5State4initEv_block_invoke_117;
  v808[3] = &__block_descriptor_tmp_121;
  v808[4] = v411;
  v808[5] = v801;
  v809 = v785;
  atomic_fetch_add_explicit(&v785->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v755 = _Block_copy(v808);
  v756 = *((void *)v411 + 11);
  if (v756) {
    dispatch_retain(*((dispatch_object_t *)v411 + 11));
  }
  v810 = v755;
  dispatch_object_t v811 = v756;
  AppleBasebandManager::setEventHandler();
  if (v811) {
    dispatch_release(v811);
  }
  if (v810) {
    _Block_release(v810);
  }
  if (SHIBYTE(v813) < 0) {
    operator delete(__dst[0]);
  }
  v757 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v758 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v758 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v759 = (void *)v758;
  if (v758 >= 0x17)
  {
    uint64_t v761 = (v758 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v758 | 7) != 0x17) {
      uint64_t v761 = v758 | 7;
    }
    uint64_t v762 = v761 + 1;
    v760 = operator new(v761 + 1);
    v806[1] = v759;
    unint64_t v807 = v762 | 0x8000000000000000;
    v806[0] = v760;
    goto LABEL_1412;
  }
  HIBYTE(v807) = v758;
  v760 = v806;
  if (v758) {
LABEL_1412:
  }
    memmove(v760, v757, (size_t)v759);
  *((unsigned char *)v759 + (void)v760) = 0;
  v802[0] = MEMORY[0x1E4F143A8];
  v802[1] = 1174405120;
  v802[2] = ___ZN4coex6Module5State4initEv_block_invoke_122;
  v802[3] = &__block_descriptor_tmp_125_0;
  v802[4] = v411;
  v802[5] = v801;
  v803 = v785;
  atomic_fetch_add_explicit(&v785->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v763 = _Block_copy(v802);
  v764 = *((void *)v411 + 11);
  if (v764) {
    dispatch_retain(*((dispatch_object_t *)v411 + 11));
  }
  v804 = v763;
  dispatch_object_t v805 = v764;
  AppleBasebandManager::setEventHandler();
  if (v805) {
    dispatch_release(v805);
  }
  if (v804) {
    _Block_release(v804);
  }
  if (SHIBYTE(v807) < 0) {
    operator delete(v806[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)v411 + 31));
  if (v803) {
    std::__shared_weak_count::__release_weak(v803);
  }
  if (v809) {
    std::__shared_weak_count::__release_weak(v809);
  }
  if (v819) {
    std::__shared_weak_count::__release_weak(v819);
  }
  if (v821) {
    std::__shared_weak_count::__release_weak(v821);
  }
  if (v823) {
    std::__shared_weak_count::__release_weak(v823);
  }
  if (v825) {
    std::__shared_weak_count::__release_weak(v825);
  }
  if (v827) {
    std::__shared_weak_count::__release_weak(v827);
  }
  if (v829) {
    std::__shared_weak_count::__release_weak(v829);
  }
  if (v831) {
    std::__shared_weak_count::__release_weak(v831);
  }
  if (v833) {
    std::__shared_weak_count::__release_weak(v833);
  }
  if (v835) {
    std::__shared_weak_count::__release_weak(v835);
  }
  if (v837) {
    std::__shared_weak_count::__release_weak(v837);
  }
  if (v839) {
    std::__shared_weak_count::__release_weak(v839);
  }
  if (v841) {
    std::__shared_weak_count::__release_weak(v841);
  }
  if (v843) {
    std::__shared_weak_count::__release_weak(v843);
  }
  if (v845) {
    std::__shared_weak_count::__release_weak(v845);
  }
  if (v847) {
    std::__shared_weak_count::__release_weak(v847);
  }
  if (v849) {
    std::__shared_weak_count::__release_weak(v849);
  }
  if (v851) {
    std::__shared_weak_count::__release_weak(v851);
  }
  if (v853) {
    std::__shared_weak_count::__release_weak(v853);
  }
  if (v855) {
    std::__shared_weak_count::__release_weak(v855);
  }
  if (v857) {
    std::__shared_weak_count::__release_weak(v857);
  }
  if (v859) {
    std::__shared_weak_count::__release_weak(v859);
  }
  if (v861) {
    std::__shared_weak_count::__release_weak(v861);
  }
  if (v863) {
    std::__shared_weak_count::__release_weak(v863);
  }
  if (v865) {
    std::__shared_weak_count::__release_weak(v865);
  }
  if (v867) {
    std::__shared_weak_count::__release_weak(v867);
  }
  std::__shared_weak_count::__release_weak(v785);
}

void sub_1C59F4F28(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C59F4F34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F4F40(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F4F4C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F4F58(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F4F64(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F4F70(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F4F7C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F4F88(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F4F94(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F4FA0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F4FA8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F4FB0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F4FB8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F4FC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F4FD4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F4FE0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F4FEC(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      uint64_t v5 = (uint64_t)v3[1];
      uint64_t v6 = *v3;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v3;
      }
      v3[1] = v4;
      operator delete(v6);
    }
    operator delete(v3);
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1C59F7760);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5B00(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5B08(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5B10(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5B18(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x828];
    if (STACK[0x828])
    {
      if ((uint64_t)(STACK[0x830] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x830];
        do
        {
          uint64_t v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x820] >= 0xB) {
        operator delete((void *)STACK[0x828]);
      }
    }
    JUMPOUT(0x1C59F7AE0);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5BE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5BE8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F5BF0);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5C1C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F5C24);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5C30(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5C3C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5C44(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5C7C(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C59F7B00);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5C8C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5C94(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v3 = (unint64_t)v2[3];
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        uint64_t v4 = *(void (**)(void **, void **, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          v4(v2 + 4, v2 + 4, 2);
        }
      }
      v2[3] = 0;
    }
    uint64_t v5 = *v2;
    if (*v2)
    {
      uint64_t v6 = (uint64_t)v2[1];
      uint64_t v7 = *v2;
      if ((void *)v6 != v5)
      {
        do
        {
          v6 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
        }
        while ((void *)v6 != v5);
        uint64_t v7 = *v2;
      }
      v2[1] = v5;
      operator delete(v7);
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5D14(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5D1C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, boost::signals2::detail::connection_body_base *a10)
{
  if (a2)
  {
    __cxa_end_catch();
    uint64_t v10 = (atomic_uint *)*((void *)a10 + 5);
    if (v10)
    {
      if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
        if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a10);
    JUMPOUT(0x1C59F7848);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5DB0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5DB8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5DC0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F5DCCLL);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5DD8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F5DE4);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5DF0(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x828];
    if (STACK[0x828])
    {
      if ((uint64_t)(STACK[0x830] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x830];
        do
        {
          uint64_t v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x820] >= 0xB) {
        operator delete((void *)STACK[0x828]);
      }
    }
    JUMPOUT(0x1C59F7B08);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5EB8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F5EC0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F5EC8);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5EF4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F5EFCLL);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F5F14(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F20(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F2C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F38(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F44(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F50(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F5C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F68(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F74(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F80(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F8C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5F98(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5FA4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5FB0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5FBC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5FC8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5FD4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5FE0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5FEC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F5FF8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6004(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6010(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F601C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6028(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6034(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6040(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F604C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6058(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6064(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6070(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F607C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6088(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6094(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F60A0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F60AC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F60B8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F60C4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F60D0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F60DC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F60E8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F60F4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6100(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F610C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6118(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6124(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6130(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F613C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6148(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6154(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6160(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F616C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6178(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6184(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6190(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F619C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F61A8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F61B4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F61C0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F61CC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F61D8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F61E4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F61F0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F61FC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6208(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6214(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6220(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F622C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6238(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6244(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6250(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F625C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6268(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6274(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6280(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F628C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6298(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F62A4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F62B0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F62BC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F62C8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F62D4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F62E0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F62EC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F62F8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6304(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6310(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F631C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6328(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v10 = (atomic_uint *)__p[3];
    if (v10)
    {
      if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
        if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
        }
      }
    }
    uint64_t v11 = (atomic_uint *)__p[1];
    if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6450(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F645C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6468(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C59F7B28);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6478(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6484(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v2[4]);
    if (v2[2])
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = (uint64_t *)v2[1];
      uint64_t v5 = *v4;
      *(void *)(v5 + 8) = *(void *)(*v2 + 8);
      *(void *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v4[1];
          uint64_t v7 = (atomic_uint *)v4[3];
          if (v7 && atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          uint64_t v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6574(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6580(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    __cxa_end_catch();
    uint64_t v10 = *(atomic_uint **)(a10 + 8);
    if (v10 && atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
      if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
      }
    }
    JUMPOUT(0x1C59F7930);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6614(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6620(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F662C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F7930);
}

void sub_1C59F6638(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v11 = (atomic_uint *)__p[3];
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    uint64_t v12 = (atomic_uint *)__p[1];
    if (v12 && atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
      if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6760(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F676C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6778(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C59F7B58);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6788(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6794(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v2[4]);
    if (v2[2])
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = (uint64_t *)v2[1];
      uint64_t v5 = *v4;
      *(void *)(v5 + 8) = *(void *)(*v2 + 8);
      *(void *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v4[1];
          uint64_t v7 = (atomic_uint *)v4[3];
          if (v7 && atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          uint64_t v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6884(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6890(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    __cxa_end_catch();
    uint64_t v11 = *(atomic_uint **)(a11 + 8);
    if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
    JUMPOUT(0x1C59F7A1CLL);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6924(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6930(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F693C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F7A1CLL);
}

void sub_1C59F6948(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x760]);
    JUMPOUT(0x1C59F7AD8);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F695C(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x760]);
    JUMPOUT(0x1C59F7B00);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62,uint64_t a63)
{
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  if (a55)
  {
    std::__shared_weak_count::__release_weak(a55);
    int v70 = a62;
    if (!a62)
    {
LABEL_7:
      unint64_t v71 = a69;
      if (!a69) {
        goto LABEL_8;
      }
      goto LABEL_34;
    }
  }
  else
  {
    int v70 = a62;
    if (!a62) {
      goto LABEL_7;
    }
  }
  std::__shared_weak_count::__release_weak(v70);
  unint64_t v71 = a69;
  if (!a69)
  {
LABEL_8:
    uint64_t v72 = (std::__shared_weak_count *)STACK[0x218];
    if (!STACK[0x218]) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v71);
  uint64_t v72 = (std::__shared_weak_count *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_9:
    unint64_t v73 = (std::__shared_weak_count *)STACK[0x250];
    if (!STACK[0x250]) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v72);
  unint64_t v73 = (std::__shared_weak_count *)STACK[0x250];
  if (!STACK[0x250])
  {
LABEL_10:
    size_t v74 = (std::__shared_weak_count *)STACK[0x288];
    if (!STACK[0x288]) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v73);
  size_t v74 = (std::__shared_weak_count *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_11:
    uint64_t v75 = (std::__shared_weak_count *)STACK[0x2C0];
    if (!STACK[0x2C0]) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = (std::__shared_weak_count *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_12:
    unsigned int v76 = (std::__shared_weak_count *)STACK[0x2F8];
    if (!STACK[0x2F8]) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v75);
  unsigned int v76 = (std::__shared_weak_count *)STACK[0x2F8];
  if (!STACK[0x2F8])
  {
LABEL_13:
    unsigned int v77 = (std::__shared_weak_count *)STACK[0x330];
    if (!STACK[0x330]) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v76);
  unsigned int v77 = (std::__shared_weak_count *)STACK[0x330];
  if (!STACK[0x330])
  {
LABEL_14:
    unsigned int v78 = (std::__shared_weak_count *)STACK[0x368];
    if (!STACK[0x368]) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v77);
  unsigned int v78 = (std::__shared_weak_count *)STACK[0x368];
  if (!STACK[0x368])
  {
LABEL_15:
    uint64_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
    if (!STACK[0x3A0]) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v78);
  uint64_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (!STACK[0x3A0])
  {
LABEL_16:
    xpc_object_t v80 = (std::__shared_weak_count *)STACK[0x3D8];
    if (!STACK[0x3D8]) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v79);
  xpc_object_t v80 = (std::__shared_weak_count *)STACK[0x3D8];
  if (!STACK[0x3D8])
  {
LABEL_17:
    uint64_t v81 = (std::__shared_weak_count *)STACK[0x410];
    if (!STACK[0x410]) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v80);
  uint64_t v81 = (std::__shared_weak_count *)STACK[0x410];
  if (!STACK[0x410])
  {
LABEL_18:
    uint64_t v82 = (std::__shared_weak_count *)STACK[0x448];
    if (!STACK[0x448]) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v81);
  uint64_t v82 = (std::__shared_weak_count *)STACK[0x448];
  if (!STACK[0x448])
  {
LABEL_19:
    uint64_t v83 = (std::__shared_weak_count *)STACK[0x480];
    if (!STACK[0x480]) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v82);
  uint64_t v83 = (std::__shared_weak_count *)STACK[0x480];
  if (!STACK[0x480])
  {
LABEL_20:
    uint64_t v84 = (std::__shared_weak_count *)STACK[0x4B8];
    if (!STACK[0x4B8]) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v83);
  uint64_t v84 = (std::__shared_weak_count *)STACK[0x4B8];
  if (!STACK[0x4B8])
  {
LABEL_21:
    uint64_t v85 = (std::__shared_weak_count *)STACK[0x4F0];
    if (!STACK[0x4F0]) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v84);
  uint64_t v85 = (std::__shared_weak_count *)STACK[0x4F0];
  if (!STACK[0x4F0])
  {
LABEL_22:
    int v86 = (std::__shared_weak_count *)STACK[0x528];
    if (!STACK[0x528]) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v85);
  int v86 = (std::__shared_weak_count *)STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_23:
    BOOL v87 = (std::__shared_weak_count *)STACK[0x560];
    if (!STACK[0x560]) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v86);
  BOOL v87 = (std::__shared_weak_count *)STACK[0x560];
  if (!STACK[0x560])
  {
LABEL_24:
    BOOL v88 = (std::__shared_weak_count *)STACK[0x598];
    if (!STACK[0x598]) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v87);
  BOOL v88 = (std::__shared_weak_count *)STACK[0x598];
  if (!STACK[0x598])
  {
LABEL_25:
    unsigned int v89 = (std::__shared_weak_count *)STACK[0x5D0];
    if (!STACK[0x5D0]) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v88);
  unsigned int v89 = (std::__shared_weak_count *)STACK[0x5D0];
  if (!STACK[0x5D0])
  {
LABEL_26:
    int v90 = (std::__shared_weak_count *)STACK[0x608];
    if (!STACK[0x608]) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v89);
  int v90 = (std::__shared_weak_count *)STACK[0x608];
  if (!STACK[0x608])
  {
LABEL_27:
    char v91 = (std::__shared_weak_count *)STACK[0x640];
    if (!STACK[0x640]) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v90);
  char v91 = (std::__shared_weak_count *)STACK[0x640];
  if (!STACK[0x640])
  {
LABEL_28:
    std::string v92 = (std::__shared_weak_count *)STACK[0x678];
    if (!STACK[0x678]) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }
LABEL_54:
  std::__shared_weak_count::__release_weak(v91);
  std::string v92 = (std::__shared_weak_count *)STACK[0x678];
  if (!STACK[0x678])
  {
LABEL_29:
    uint64_t v93 = (std::__shared_weak_count *)STACK[0x6B0];
    if (!STACK[0x6B0]) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_55:
  std::__shared_weak_count::__release_weak(v92);
  uint64_t v93 = (std::__shared_weak_count *)STACK[0x6B0];
  if (!STACK[0x6B0])
  {
LABEL_31:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v93);
  goto LABEL_31;
}

void sub_1C59F6984(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a40) {
    std::__shared_weak_count::__release_weak(a40);
  }
  JUMPOUT(0x1C59F730CLL);
}

void sub_1C59F69B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F69B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a38);
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  if (a45 < 0) {
    operator delete(__p);
  }
  if (a58)
  {
    std::__shared_weak_count::__release_weak(a58);
    unint64_t v73 = a65;
    if (!a65)
    {
LABEL_7:
      size_t v74 = a72;
      if (!a72) {
        goto LABEL_8;
      }
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v73 = a65;
    if (!a65) {
      goto LABEL_7;
    }
  }
  std::__shared_weak_count::__release_weak(v73);
  size_t v74 = a72;
  if (!a72)
  {
LABEL_8:
    uint64_t v75 = (std::__shared_weak_count *)STACK[0x218];
    if (!STACK[0x218]) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = (std::__shared_weak_count *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_9:
    unsigned int v76 = (std::__shared_weak_count *)STACK[0x250];
    if (!STACK[0x250]) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v75);
  unsigned int v76 = (std::__shared_weak_count *)STACK[0x250];
  if (!STACK[0x250])
  {
LABEL_10:
    unsigned int v77 = (std::__shared_weak_count *)STACK[0x288];
    if (!STACK[0x288]) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v76);
  unsigned int v77 = (std::__shared_weak_count *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_11:
    unsigned int v78 = (std::__shared_weak_count *)STACK[0x2C0];
    if (!STACK[0x2C0]) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v77);
  unsigned int v78 = (std::__shared_weak_count *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_12:
    uint64_t v79 = (std::__shared_weak_count *)STACK[0x2F8];
    if (!STACK[0x2F8]) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v78);
  uint64_t v79 = (std::__shared_weak_count *)STACK[0x2F8];
  if (!STACK[0x2F8])
  {
LABEL_13:
    xpc_object_t v80 = (std::__shared_weak_count *)STACK[0x330];
    if (!STACK[0x330]) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v79);
  xpc_object_t v80 = (std::__shared_weak_count *)STACK[0x330];
  if (!STACK[0x330])
  {
LABEL_14:
    uint64_t v81 = (std::__shared_weak_count *)STACK[0x368];
    if (!STACK[0x368]) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v80);
  uint64_t v81 = (std::__shared_weak_count *)STACK[0x368];
  if (!STACK[0x368])
  {
LABEL_15:
    uint64_t v82 = (std::__shared_weak_count *)STACK[0x3A0];
    if (!STACK[0x3A0]) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v81);
  uint64_t v82 = (std::__shared_weak_count *)STACK[0x3A0];
  if (!STACK[0x3A0])
  {
LABEL_16:
    uint64_t v83 = (std::__shared_weak_count *)STACK[0x3D8];
    if (!STACK[0x3D8]) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v82);
  uint64_t v83 = (std::__shared_weak_count *)STACK[0x3D8];
  if (!STACK[0x3D8])
  {
LABEL_17:
    uint64_t v84 = (std::__shared_weak_count *)STACK[0x410];
    if (!STACK[0x410]) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v83);
  uint64_t v84 = (std::__shared_weak_count *)STACK[0x410];
  if (!STACK[0x410])
  {
LABEL_18:
    uint64_t v85 = (std::__shared_weak_count *)STACK[0x448];
    if (!STACK[0x448]) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v84);
  uint64_t v85 = (std::__shared_weak_count *)STACK[0x448];
  if (!STACK[0x448])
  {
LABEL_19:
    int v86 = (std::__shared_weak_count *)STACK[0x480];
    if (!STACK[0x480]) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v85);
  int v86 = (std::__shared_weak_count *)STACK[0x480];
  if (!STACK[0x480])
  {
LABEL_20:
    BOOL v87 = (std::__shared_weak_count *)STACK[0x4B8];
    if (!STACK[0x4B8]) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v86);
  BOOL v87 = (std::__shared_weak_count *)STACK[0x4B8];
  if (!STACK[0x4B8])
  {
LABEL_21:
    BOOL v88 = (std::__shared_weak_count *)STACK[0x4F0];
    if (!STACK[0x4F0]) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v87);
  BOOL v88 = (std::__shared_weak_count *)STACK[0x4F0];
  if (!STACK[0x4F0])
  {
LABEL_22:
    unsigned int v89 = (std::__shared_weak_count *)STACK[0x528];
    if (!STACK[0x528]) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v88);
  unsigned int v89 = (std::__shared_weak_count *)STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_23:
    int v90 = (std::__shared_weak_count *)STACK[0x560];
    if (!STACK[0x560]) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v89);
  int v90 = (std::__shared_weak_count *)STACK[0x560];
  if (!STACK[0x560])
  {
LABEL_24:
    char v91 = (std::__shared_weak_count *)STACK[0x598];
    if (!STACK[0x598]) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v90);
  char v91 = (std::__shared_weak_count *)STACK[0x598];
  if (!STACK[0x598])
  {
LABEL_25:
    std::string v92 = (std::__shared_weak_count *)STACK[0x5D0];
    if (!STACK[0x5D0]) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v91);
  std::string v92 = (std::__shared_weak_count *)STACK[0x5D0];
  if (!STACK[0x5D0])
  {
LABEL_26:
    uint64_t v93 = (std::__shared_weak_count *)STACK[0x608];
    if (!STACK[0x608]) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v92);
  uint64_t v93 = (std::__shared_weak_count *)STACK[0x608];
  if (!STACK[0x608])
  {
LABEL_27:
    std::string v94 = (std::__shared_weak_count *)STACK[0x640];
    if (!STACK[0x640]) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v93);
  std::string v94 = (std::__shared_weak_count *)STACK[0x640];
  if (!STACK[0x640])
  {
LABEL_28:
    std::string v95 = (std::__shared_weak_count *)STACK[0x678];
    if (!STACK[0x678]) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }
LABEL_54:
  std::__shared_weak_count::__release_weak(v94);
  std::string v95 = (std::__shared_weak_count *)STACK[0x678];
  if (!STACK[0x678])
  {
LABEL_29:
    std::string v96 = (std::__shared_weak_count *)STACK[0x6B0];
    if (!STACK[0x6B0]) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_55:
  std::__shared_weak_count::__release_weak(v95);
  std::string v96 = (std::__shared_weak_count *)STACK[0x6B0];
  if (!STACK[0x6B0])
  {
LABEL_31:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v96);
  goto LABEL_31;
}

void sub_1C59F69E4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F69EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,const void *a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a43);
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a58)
  {
    std::__shared_weak_count::__release_weak(a58);
    unint64_t v73 = a65;
    if (!a65)
    {
LABEL_5:
      size_t v74 = a72;
      if (!a72) {
        goto LABEL_6;
      }
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v73 = a65;
    if (!a65) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v73);
  size_t v74 = a72;
  if (!a72)
  {
LABEL_6:
    uint64_t v75 = (std::__shared_weak_count *)STACK[0x218];
    if (!STACK[0x218]) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = (std::__shared_weak_count *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_7:
    unsigned int v76 = (std::__shared_weak_count *)STACK[0x250];
    if (!STACK[0x250]) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  std::__shared_weak_count::__release_weak(v75);
  unsigned int v76 = (std::__shared_weak_count *)STACK[0x250];
  if (!STACK[0x250])
  {
LABEL_8:
    unsigned int v77 = (std::__shared_weak_count *)STACK[0x288];
    if (!STACK[0x288]) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v76);
  unsigned int v77 = (std::__shared_weak_count *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_9:
    unsigned int v78 = (std::__shared_weak_count *)STACK[0x2C0];
    if (!STACK[0x2C0]) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v77);
  unsigned int v78 = (std::__shared_weak_count *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_10:
    uint64_t v79 = (std::__shared_weak_count *)STACK[0x2F8];
    if (!STACK[0x2F8]) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v78);
  uint64_t v79 = (std::__shared_weak_count *)STACK[0x2F8];
  if (!STACK[0x2F8])
  {
LABEL_11:
    xpc_object_t v80 = (std::__shared_weak_count *)STACK[0x330];
    if (!STACK[0x330]) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v79);
  xpc_object_t v80 = (std::__shared_weak_count *)STACK[0x330];
  if (!STACK[0x330])
  {
LABEL_12:
    uint64_t v81 = (std::__shared_weak_count *)STACK[0x368];
    if (!STACK[0x368]) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v80);
  uint64_t v81 = (std::__shared_weak_count *)STACK[0x368];
  if (!STACK[0x368])
  {
LABEL_13:
    uint64_t v82 = (std::__shared_weak_count *)STACK[0x3A0];
    if (!STACK[0x3A0]) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v81);
  uint64_t v82 = (std::__shared_weak_count *)STACK[0x3A0];
  if (!STACK[0x3A0])
  {
LABEL_14:
    uint64_t v83 = (std::__shared_weak_count *)STACK[0x3D8];
    if (!STACK[0x3D8]) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v82);
  uint64_t v83 = (std::__shared_weak_count *)STACK[0x3D8];
  if (!STACK[0x3D8])
  {
LABEL_15:
    uint64_t v84 = (std::__shared_weak_count *)STACK[0x410];
    if (!STACK[0x410]) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v83);
  uint64_t v84 = (std::__shared_weak_count *)STACK[0x410];
  if (!STACK[0x410])
  {
LABEL_16:
    uint64_t v85 = (std::__shared_weak_count *)STACK[0x448];
    if (!STACK[0x448]) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v84);
  uint64_t v85 = (std::__shared_weak_count *)STACK[0x448];
  if (!STACK[0x448])
  {
LABEL_17:
    int v86 = (std::__shared_weak_count *)STACK[0x480];
    if (!STACK[0x480]) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v85);
  int v86 = (std::__shared_weak_count *)STACK[0x480];
  if (!STACK[0x480])
  {
LABEL_18:
    BOOL v87 = (std::__shared_weak_count *)STACK[0x4B8];
    if (!STACK[0x4B8]) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v86);
  BOOL v87 = (std::__shared_weak_count *)STACK[0x4B8];
  if (!STACK[0x4B8])
  {
LABEL_19:
    BOOL v88 = (std::__shared_weak_count *)STACK[0x4F0];
    if (!STACK[0x4F0]) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v87);
  BOOL v88 = (std::__shared_weak_count *)STACK[0x4F0];
  if (!STACK[0x4F0])
  {
LABEL_20:
    unsigned int v89 = (std::__shared_weak_count *)STACK[0x528];
    if (!STACK[0x528]) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v88);
  unsigned int v89 = (std::__shared_weak_count *)STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_21:
    int v90 = (std::__shared_weak_count *)STACK[0x560];
    if (!STACK[0x560]) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v89);
  int v90 = (std::__shared_weak_count *)STACK[0x560];
  if (!STACK[0x560])
  {
LABEL_22:
    char v91 = (std::__shared_weak_count *)STACK[0x598];
    if (!STACK[0x598]) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v90);
  char v91 = (std::__shared_weak_count *)STACK[0x598];
  if (!STACK[0x598])
  {
LABEL_23:
    std::string v92 = (std::__shared_weak_count *)STACK[0x5D0];
    if (!STACK[0x5D0]) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v91);
  std::string v92 = (std::__shared_weak_count *)STACK[0x5D0];
  if (!STACK[0x5D0])
  {
LABEL_24:
    uint64_t v93 = (std::__shared_weak_count *)STACK[0x608];
    if (!STACK[0x608]) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v92);
  uint64_t v93 = (std::__shared_weak_count *)STACK[0x608];
  if (!STACK[0x608])
  {
LABEL_25:
    std::string v94 = (std::__shared_weak_count *)STACK[0x640];
    if (!STACK[0x640]) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v93);
  std::string v94 = (std::__shared_weak_count *)STACK[0x640];
  if (!STACK[0x640])
  {
LABEL_26:
    std::string v95 = (std::__shared_weak_count *)STACK[0x678];
    if (!STACK[0x678]) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v94);
  std::string v95 = (std::__shared_weak_count *)STACK[0x678];
  if (!STACK[0x678])
  {
LABEL_27:
    std::string v96 = (std::__shared_weak_count *)STACK[0x6B0];
    if (!STACK[0x6B0]) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v95);
  std::string v96 = (std::__shared_weak_count *)STACK[0x6B0];
  if (!STACK[0x6B0])
  {
LABEL_29:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_28:
  std::__shared_weak_count::__release_weak(v96);
  goto LABEL_29;
}

void sub_1C59F6A14(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6A54(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C59F7B28);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6A68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v11 = (unint64_t)v10[3];
    if (v11)
    {
      if ((v11 & 1) == 0)
      {
        uint64_t v12 = *(void (**)(void **, void **, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
        if (v12) {
          v12(v10 + 4, v10 + 4, 2);
        }
      }
      v10[3] = 0;
    }
    uint64_t v13 = *v10;
    if (*v10)
    {
      uint64_t v14 = (uint64_t)v10[1];
      char v15 = *v10;
      if ((void *)v14 != v13)
      {
        do
        {
          v14 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v14);
        }
        while ((void *)v14 != v13);
        char v15 = *v10;
      }
      v10[1] = v13;
      operator delete(v15);
    }
    operator delete(v10);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6AF0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6AFC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, boost::signals2::detail::connection_body_base *a10)
{
  if (a2)
  {
    __cxa_end_catch();
    uint64_t v10 = (atomic_uint *)*((void *)a10 + 5);
    if (v10)
    {
      if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
        if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a10);
    JUMPOUT(0x1C59F7930);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6B90(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6B9C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6BA8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F6BB4);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6BC0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F6BCCLL);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6BD8(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x828];
    if (STACK[0x828])
    {
      if ((uint64_t)(STACK[0x830] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x830];
        do
        {
          uint64_t v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x820] >= 0xB) {
        operator delete((void *)STACK[0x828]);
      }
    }
    JUMPOUT(0x1C59F7B30);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6CA0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6CAC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F6CB4);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6CE0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F6CE8);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6CF4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62,uint64_t a63)
{
  boost::signals2::connection::~connection((boost::signals2::connection *)&a47);
  if (a55)
  {
    std::__shared_weak_count::__release_weak(a55);
    int v70 = a62;
    if (!a62)
    {
LABEL_3:
      unint64_t v71 = a69;
      if (!a69) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else
  {
    int v70 = a62;
    if (!a62) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v70);
  unint64_t v71 = a69;
  if (!a69)
  {
LABEL_4:
    uint64_t v72 = (std::__shared_weak_count *)STACK[0x218];
    if (!STACK[0x218]) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v71);
  uint64_t v72 = (std::__shared_weak_count *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_5:
    unint64_t v73 = (std::__shared_weak_count *)STACK[0x250];
    if (!STACK[0x250]) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  std::__shared_weak_count::__release_weak(v72);
  unint64_t v73 = (std::__shared_weak_count *)STACK[0x250];
  if (!STACK[0x250])
  {
LABEL_6:
    size_t v74 = (std::__shared_weak_count *)STACK[0x288];
    if (!STACK[0x288]) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v73);
  size_t v74 = (std::__shared_weak_count *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_7:
    uint64_t v75 = (std::__shared_weak_count *)STACK[0x2C0];
    if (!STACK[0x2C0]) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = (std::__shared_weak_count *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_8:
    unsigned int v76 = (std::__shared_weak_count *)STACK[0x2F8];
    if (!STACK[0x2F8]) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v75);
  unsigned int v76 = (std::__shared_weak_count *)STACK[0x2F8];
  if (!STACK[0x2F8])
  {
LABEL_9:
    unsigned int v77 = (std::__shared_weak_count *)STACK[0x330];
    if (!STACK[0x330]) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v76);
  unsigned int v77 = (std::__shared_weak_count *)STACK[0x330];
  if (!STACK[0x330])
  {
LABEL_10:
    unsigned int v78 = (std::__shared_weak_count *)STACK[0x368];
    if (!STACK[0x368]) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v77);
  unsigned int v78 = (std::__shared_weak_count *)STACK[0x368];
  if (!STACK[0x368])
  {
LABEL_11:
    uint64_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
    if (!STACK[0x3A0]) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v78);
  uint64_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (!STACK[0x3A0])
  {
LABEL_12:
    xpc_object_t v80 = (std::__shared_weak_count *)STACK[0x3D8];
    if (!STACK[0x3D8]) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v79);
  xpc_object_t v80 = (std::__shared_weak_count *)STACK[0x3D8];
  if (!STACK[0x3D8])
  {
LABEL_13:
    uint64_t v81 = (std::__shared_weak_count *)STACK[0x410];
    if (!STACK[0x410]) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v80);
  uint64_t v81 = (std::__shared_weak_count *)STACK[0x410];
  if (!STACK[0x410])
  {
LABEL_14:
    uint64_t v82 = (std::__shared_weak_count *)STACK[0x448];
    if (!STACK[0x448]) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v81);
  uint64_t v82 = (std::__shared_weak_count *)STACK[0x448];
  if (!STACK[0x448])
  {
LABEL_15:
    uint64_t v83 = (std::__shared_weak_count *)STACK[0x480];
    if (!STACK[0x480]) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v82);
  uint64_t v83 = (std::__shared_weak_count *)STACK[0x480];
  if (!STACK[0x480])
  {
LABEL_16:
    uint64_t v84 = (std::__shared_weak_count *)STACK[0x4B8];
    if (!STACK[0x4B8]) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v83);
  uint64_t v84 = (std::__shared_weak_count *)STACK[0x4B8];
  if (!STACK[0x4B8])
  {
LABEL_17:
    uint64_t v85 = (std::__shared_weak_count *)STACK[0x4F0];
    if (!STACK[0x4F0]) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v84);
  uint64_t v85 = (std::__shared_weak_count *)STACK[0x4F0];
  if (!STACK[0x4F0])
  {
LABEL_18:
    int v86 = (std::__shared_weak_count *)STACK[0x528];
    if (!STACK[0x528]) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v85);
  int v86 = (std::__shared_weak_count *)STACK[0x528];
  if (!STACK[0x528])
  {
LABEL_19:
    BOOL v87 = (std::__shared_weak_count *)STACK[0x560];
    if (!STACK[0x560]) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v86);
  BOOL v87 = (std::__shared_weak_count *)STACK[0x560];
  if (!STACK[0x560])
  {
LABEL_20:
    BOOL v88 = (std::__shared_weak_count *)STACK[0x598];
    if (!STACK[0x598]) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v87);
  BOOL v88 = (std::__shared_weak_count *)STACK[0x598];
  if (!STACK[0x598])
  {
LABEL_21:
    unsigned int v89 = (std::__shared_weak_count *)STACK[0x5D0];
    if (!STACK[0x5D0]) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v88);
  unsigned int v89 = (std::__shared_weak_count *)STACK[0x5D0];
  if (!STACK[0x5D0])
  {
LABEL_22:
    int v90 = (std::__shared_weak_count *)STACK[0x608];
    if (!STACK[0x608]) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v89);
  int v90 = (std::__shared_weak_count *)STACK[0x608];
  if (!STACK[0x608])
  {
LABEL_23:
    char v91 = (std::__shared_weak_count *)STACK[0x640];
    if (!STACK[0x640]) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v90);
  char v91 = (std::__shared_weak_count *)STACK[0x640];
  if (!STACK[0x640])
  {
LABEL_24:
    std::string v92 = (std::__shared_weak_count *)STACK[0x678];
    if (!STACK[0x678]) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v91);
  std::string v92 = (std::__shared_weak_count *)STACK[0x678];
  if (!STACK[0x678])
  {
LABEL_25:
    uint64_t v93 = (std::__shared_weak_count *)STACK[0x6B0];
    if (!STACK[0x6B0]) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v92);
  uint64_t v93 = (std::__shared_weak_count *)STACK[0x6B0];
  if (!STACK[0x6B0])
  {
LABEL_27:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_26:
  std::__shared_weak_count::__release_weak(v93);
  goto LABEL_27;
}

void sub_1C59F6D10(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6D1C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6D5C(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C59F7B58);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6D6C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6D78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v12 = (unint64_t)v11[3];
    if (v12)
    {
      if ((v12 & 1) == 0)
      {
        uint64_t v13 = *(void (**)(void **, void **, uint64_t))(v12 & 0xFFFFFFFFFFFFFFFELL);
        if (v13) {
          v13(v11 + 4, v11 + 4, 2);
        }
      }
      v11[3] = 0;
    }
    uint64_t v14 = *v11;
    if (*v11)
    {
      uint64_t v15 = (uint64_t)v11[1];
      uint64_t v16 = *v11;
      if ((void *)v15 != v14)
      {
        do
        {
          v15 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v15);
        }
        while ((void *)v15 != v14);
        uint64_t v16 = *v11;
      }
      v11[1] = v14;
      operator delete(v16);
    }
    operator delete(v11);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6E00(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6E0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::signals2::detail::connection_body_base *a11)
{
  if (a2)
  {
    __cxa_end_catch();
    unint64_t v11 = (atomic_uint *)*((void *)a11 + 5);
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a11);
    JUMPOUT(0x1C59F7A1CLL);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6EA0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6EAC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6EB8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F6EC4);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6ED0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F6EDCLL);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6EE8(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x828];
    if (STACK[0x828])
    {
      if ((uint64_t)(STACK[0x830] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x830];
        do
        {
          uint64_t v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x820] >= 0xB) {
        operator delete((void *)STACK[0x828]);
      }
    }
    JUMPOUT(0x1C59F7B60);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6FB0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F6FBC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F6FC4);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F6FF0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F6FF8);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F7004(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7010(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F701C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7028(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7034(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7040(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F704C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7058(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7064(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7070(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F707C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7088(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7094(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F70A0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F70AC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F70B8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F70C4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F70D0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F70DC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F70E8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F70F4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7100(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F710C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7118(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7124(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7130(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F714C(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x760]);
    JUMPOUT(0x1C59F7B28);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F7160(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x760]);
    JUMPOUT(0x1C59F7B58);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F718C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F7B58);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F7198(void *a1, int a2)
{
  if (a2)
  {
    boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::~function2((uint64_t *)&STACK[0x780]);
    boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function((uint64_t *)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x740]);
    unint64_t v3 = STACK[0x718];
    if (STACK[0x718])
    {
      if ((v3 & 1) == 0)
      {
        uint64_t v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          v4(&STACK[0x720], &STACK[0x720], 2);
        }
      }
      STACK[0x718] = 0;
    }
    unint64_t v5 = STACK[0x700];
    if (STACK[0x700])
    {
      uint64_t v6 = STACK[0x708];
      uint64_t v7 = (void *)STACK[0x700];
      if (STACK[0x708] != v5)
      {
        do
        {
          v6 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
        }
        while (v6 != v5);
        uint64_t v7 = (void *)STACK[0x700];
      }
      STACK[0x708] = v5;
      operator delete(v7);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x6F0]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1C59F7AE8);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F7238(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F7240(void *a1, int a2)
{
  if (a2)
  {
    boost::function1<void,coex::SubId>::~function1((uint64_t *)&STACK[0x780]);
    boost::function<void ()(coex::SubId)>::~function((uint64_t *)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x740]);
    unint64_t v3 = STACK[0x718];
    if (STACK[0x718])
    {
      if ((v3 & 1) == 0)
      {
        uint64_t v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          v4(&STACK[0x720], &STACK[0x720], 2);
        }
      }
      STACK[0x718] = 0;
    }
    unint64_t v5 = STACK[0x700];
    if (STACK[0x700])
    {
      uint64_t v6 = STACK[0x708];
      uint64_t v7 = (void *)STACK[0x700];
      if (STACK[0x708] != v5)
      {
        do
        {
          v6 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
        }
        while (v6 != v5);
        uint64_t v7 = (void *)STACK[0x700];
      }
      STACK[0x708] = v5;
      operator delete(v7);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x6F0]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1C59F7B10);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F72E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F72EC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F72F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F7300(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_1C59F7514(void *a1, int a2)
{
  if (a2)
  {
    boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::~function2((uint64_t *)&STACK[0x780]);
    boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function((uint64_t *)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x740]);
    unint64_t v3 = STACK[0x718];
    if (STACK[0x718])
    {
      if ((v3 & 1) == 0)
      {
        uint64_t v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          v4(&STACK[0x720], &STACK[0x720], 2);
        }
      }
      STACK[0x718] = 0;
    }
    unint64_t v5 = STACK[0x700];
    if (STACK[0x700])
    {
      uint64_t v6 = STACK[0x708];
      uint64_t v7 = (void *)STACK[0x700];
      if (STACK[0x708] != v5)
      {
        do
        {
          v6 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
        }
        while (v6 != v5);
        uint64_t v7 = (void *)STACK[0x700];
      }
      STACK[0x708] = v5;
      operator delete(v7);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x6F0]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1C59F7B38);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F75B4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F75C0(void *a1, int a2)
{
  if (a2)
  {
    boost::function0<void>::~function0((uint64_t *)&STACK[0x780]);
    boost::function<void ()(void)>::~function((uint64_t *)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x740]);
    unint64_t v3 = STACK[0x718];
    if (STACK[0x718])
    {
      if ((v3 & 1) == 0)
      {
        uint64_t v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          v4(&STACK[0x720], &STACK[0x720], 2);
        }
      }
      STACK[0x718] = 0;
    }
    unint64_t v5 = STACK[0x700];
    if (STACK[0x700])
    {
      uint64_t v6 = STACK[0x708];
      uint64_t v7 = (void *)STACK[0x700];
      if (STACK[0x708] != v5)
      {
        do
        {
          v6 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
        }
        while (v6 != v5);
        uint64_t v7 = (void *)STACK[0x700];
      }
      STACK[0x708] = v5;
      operator delete(v7);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x6F0]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1C59F7B68);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F7660(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F766C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7678(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7B50);
  }
  JUMPOUT(0x1C59F76E8);
}

void sub_1C59F7684(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C59F7688);
  }
  _Unwind_Resume(a1);
}

void sub_1C59F768C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C59F7690);
  }
  __clang_call_terminate();
}

void sub_1C59F769C(uint64_t a1, int a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(v2);
    JUMPOUT(0x1C59F7758);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F76B8(uint64_t a1, int a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(v2);
    JUMPOUT(0x1C59F7840);
  }
  JUMPOUT(0x1C59F7B50);
}

void sub_1C59F76D4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t coex::Module::State::State(uint64_t a1, void *a2, void *a3, void *a4)
{
  *(void *)a1 = &unk_1F2103458;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v36, "com.apple.telephony.abm", "coex.mod");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  unsigned int v9 = dispatch_queue_create_with_target_V2("coex.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v9, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v9);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v9;
  if (v9)
  {
    dispatch_retain(v9);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v9);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1F2103F30;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v34);
  *(void *)(a1 + 8) = &unk_1F2102CB8;
  *(void *)(a1 + 56) = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 64) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v38);
  *(void *)a1 = &unk_1F2104010;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v36);
  *(void *)a1 = &unk_1F2103458;
  *(void *)(a1 + 104) = *a3;
  uint64_t v11 = a3[1];
  *(void *)(a1 + 112) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  char v35 = 0;
  LOBYTE(v34) = 0;
  coex::XpcClient::create((uint64_t)&v34, (void *)(a1 + 120));
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 172) = 8;
  unint64_t v12 = (void *)(a1 + 176);
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4CAF0];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CAF0]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    unint64_t v12 = operator new(v16 + 1);
    *(void *)(a1 + 184) = v15;
    *(void *)(a1 + 192) = v17 | 0x8000000000000000;
    *(void *)(a1 + 176) = v12;
    goto LABEL_15;
  }
  *(unsigned char *)(a1 + 199) = v14;
  if (v14) {
LABEL_15:
  }
    size_t v14 = (size_t)memmove(v12, v13, v15);
  *((unsigned char *)v12 + v15) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 224;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = a1 + 224;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = *a4;
  uint64_t v18 = a4[1];
  *(void *)(a1 + 272) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 16), 1uLL, memory_order_relaxed);
  }
  if (capabilities::abs::supportsDesense((capabilities::abs *)v14))
  {
    uint64_t v19 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v20 = off_1EBBDCA08;
    if (!off_1EBBDCA08)
    {
      CommandDriverFactory::create_default_global((uint64_t *)&v34, v19);
      long long v21 = v34;
      long long v34 = 0uLL;
      uint64_t v22 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
      off_1EBBDCA08 = v21;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v23 = (std::__shared_weak_count *)*((void *)&v34 + 1);
      if (*((void *)&v34 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      uint64_t v20 = off_1EBBDCA08;
    }
    uint64_t v36 = v20;
    unint64_t v37 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    if (*(&off_1EBBDCA08 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v20 + 144))(&v38, v20);
    long long v24 = v38;
    long long v38 = 0uLL;
    int v25 = *(std::__shared_weak_count **)(a1 + 216);
    *(_OWORD *)(a1 + 208) = v24;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    uint64_t v26 = (std::__shared_weak_count *)*((void *)&v38 + 1);
    if (*((void *)&v38 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    int v27 = v37;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  ctu::LoggerCommonBase::setLogLevel();
  coex::CoexCache::initProperty((coex::CoexCache *)(a1 + 136));
  CFAllocatorRef v28 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    BOOL v30 = *(const void **)(a1 + 144);
    *(void *)(a1 + 144) = Mutable;
    if (v30) {
      CFRelease(v30);
    }
  }
  CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v31)
  {
    uint64_t v32 = *(const void **)(a1 + 160);
    *(void *)(a1 + 160) = v31;
    if (v32) {
      CFRelease(v32);
    }
  }
  return a1;
}

void sub_1C59F80D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v18 = *(std::__shared_weak_count **)(v10 + 272);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v16);
  std::list<boost::signals2::connection>::~list(v15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v14);
  if (*(char *)(v10 + 199) < 0) {
    operator delete(*a10);
  }
  coex::CoexCache::~CoexCache(v13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
  ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((void *)v10);
  _Unwind_Resume(a1);
}

const char *coex::Module::State::getName(coex::Module::State *this)
{
  return "coex.mod";
}

void coex::CoexCache::initProperty(coex::CoexCache *this)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    unint64_t v5 = *(const void **)this;
    *(void *)this = v4;
    if (v5) {
      CFRelease(v5);
    }
  }
  CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v6)
  {
    CFMutableDictionaryRef v7 = v6;
    uint64_t v8 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = v7;
    if (v8) {
      CFRelease(v8);
    }
  }
}

uint64_t *std::list<boost::signals2::connection>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        CFMutableDictionaryRef v6 = (atomic_uint *)v3[3];
        if (v6 && atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
        }
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void *ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2103F30;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F2103F30;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void coex::Module::State::~State(coex::Module::State *this)
{
  *(void *)this = &unk_1F2103458;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v16, 2u);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!*((void *)this + 30)) {
      goto LABEL_15;
    }
  }
  else if (!*((void *)this + 30))
  {
    goto LABEL_15;
  }
  uint64_t v5 = *((void *)this + 28);
  CFMutableDictionaryRef v6 = (coex::Module::State *)*((void *)this + 29);
  uint64_t v7 = *(void *)v6;
  *(void *)(v7 + 8) = *(void *)(v5 + 8);
  **(void **)(v5 + 8) = v7;
  *((void *)this + 30) = 0;
  if (v6 != (coex::Module::State *)((char *)this + 224))
  {
    do
    {
      uint64_t v8 = (coex::Module::State *)*((void *)v6 + 1);
      unsigned int v9 = (atomic_uint *)*((void *)v6 + 3);
      if (v9 && atomic_fetch_add(v9 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v9 + 24))(v9);
      }
      operator delete(v6);
      CFMutableDictionaryRef v6 = v8;
    }
    while (v8 != (coex::Module::State *)((char *)this + 224));
  }
LABEL_15:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if ((*((char *)this + 199) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (*((char *)this + 199) < 0) {
LABEL_18:
  }
    operator delete(*((void **)this + 22));
LABEL_19:
  coex::CoexCache::~CoexCache((coex::Module::State *)((char *)this + 136));
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)this = &unk_1F2103F30;
  MEMORY[0x1C87940C0]((char *)this + 8);
  uint64_t v13 = *((void *)this + 12);
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = *((void *)this + 11);
  if (v14) {
    dispatch_release(v14);
  }
  size_t v15 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  void *v1;
  uint64_t vars8;

  coex::Module::State::~State(this);

  operator delete(v1);
}

void ___ZN4coex6Module5State4initEv_block_invoke(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1[4];
  uint64_t v19 = 0;
  CFMutableDictionaryRef v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (uint64_t v19 = std::__shared_weak_count::lock(v6)) != 0)
  {
    uint64_t v7 = (void *)a1[5];
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  uint64_t v18 = std::__shared_weak_count::lock(v8);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v9) & 1) == 0)
  {
    uint64_t v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (uint64_t v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v13 = v12;
    uint64_t v14 = operator new(0x10uLL);
    *(void *)uint64_t v14 = v5;
    void v14[2] = a3;
    size_t v15 = v7[11];
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = operator new(0x18uLL);
    *uint64_t v16 = v14;
    v16[1] = v11;
    uint64_t v16[2] = v13;
    dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_14:
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v17 = v19;
    if (!v19) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v17 = v19;
  if (!v19) {
    return;
  }
LABEL_17:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1C59F88B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_21(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1[4];
  uint64_t v19 = 0;
  CFMutableDictionaryRef v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (uint64_t v19 = std::__shared_weak_count::lock(v6)) != 0)
  {
    uint64_t v7 = (void *)a1[5];
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  uint64_t v18 = std::__shared_weak_count::lock(v8);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v9) & 1) == 0)
  {
    uint64_t v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (uint64_t v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v13 = v12;
    uint64_t v14 = operator new(0x10uLL);
    *(void *)uint64_t v14 = v5;
    void v14[2] = a3;
    size_t v15 = v7[11];
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = operator new(0x18uLL);
    *uint64_t v16 = v14;
    v16[1] = v11;
    uint64_t v16[2] = v13;
    dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_14:
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v17 = v19;
    if (!v19) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v17 = v19;
  if (!v19) {
    return;
  }
LABEL_17:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1C59F8B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_25(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  uint64_t v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C59F8DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_29(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  uint64_t v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C59F9078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_33(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  uint64_t v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C59F9318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_37(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  uint64_t v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb4_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C59F95B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_41(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  uint64_t v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb5_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C59F9858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_45(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  uint64_t v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb6_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C59F9AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_49(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6 = a1[4];
  long long v24 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (long long v24 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (void *)a1[5];
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  uint64_t v23 = v10;
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12) & 1) != 0) {
    goto LABEL_18;
  }
  xpc_object_t v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = (std::__shared_weak_count *)v8[10];
    if (!v14) {
      goto LABEL_27;
    }
  }
  uint64_t v15 = v8[9];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_27;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  void *v18 = v6;
  v18[1] = v13;
  xpc_object_t v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  uint64_t v20 = v8[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb7_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  uint64_t v11 = v23;
  if (v23)
  {
LABEL_18:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v22 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = v24;
  if (!v24) {
    return;
  }
LABEL_20:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C59F9D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_53(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1[4];
  xpc_object_t v19 = 0;
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (xpc_object_t v19 = std::__shared_weak_count::lock(v6)) != 0)
  {
    uint64_t v7 = (void *)a1[5];
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v18 = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8) {
      goto LABEL_14;
    }
  }
  uint64_t v18 = std::__shared_weak_count::lock(v8);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v9) & 1) == 0)
  {
    uint64_t v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (uint64_t v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v13 = v12;
    uint64_t v14 = operator new(0x10uLL);
    *(void *)uint64_t v14 = v5;
    void v14[2] = a3;
    uint64_t v15 = v7[11];
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = operator new(0x18uLL);
    *uint64_t v16 = v14;
    v16[1] = v11;
    uint64_t v16[2] = v13;
    dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb8_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_14:
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v17 = v19;
    if (!v19) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v17 = v19;
  if (!v19) {
    return;
  }
LABEL_17:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1C59F9FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ___ZN4coex6Module5State4initEv_block_invoke_57(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb9_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_61(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb10_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_65(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb11_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_69(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb12_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_73(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb13_E4__14EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_77(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb14_E4__15EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_81(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb15_E4__16EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_85(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb16_E4__17EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_89(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb17_E4__18EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_93(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb18_E4__19EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_97(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb19_E4__20EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_101(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb20_E4__21EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_105(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb21_E4__22EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_109(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb22_E4__23EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_113(void *a1, xpc_object_t *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (void *)a1[5];
      if (v10)
      {
        xpc_object_t v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          uint64_t v12 = (std::__shared_weak_count *)v10[10];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v10[9];
        uint64_t v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x18uLL);
        *uint64_t v16 = v7;
        v16[1] = v11;
        xpc_object_t v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        uint64_t v18 = v10[11];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb23_E4__24EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void coex::Module::State::handleCommandDriverStateUpdate_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  CFDictionaryRef v4 = *a2;
  if (v4) {
    uint64_t v5 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    memset(buf, 170, 16);
    uint64_t v7 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v4);
    uint64_t v185 = 0;
    uint64_t v8 = ctu::cf::map_adapter::copyCFDictionaryRef(v7, (const __CFString *)*MEMORY[0x1E4FB9608]);
    uint64_t v9 = (const void *)v8;
    uint64_t v185 = v8;
    if (v8) {
      uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      CFDictionaryRef v11 = (const __CFDictionary *)v8;
    }
    else
    {
      CFDictionaryRef v11 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9670]);
      uint64_t v185 = (uint64_t)v11;
      if (v9) {
        CFRelease(v9);
      }
    }
    if (v11) {
      uint64_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v13 = 0;
    }
    v180 = v13;
    if (v13)
    {
      uint64_t v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v11);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v15 = Mutable;
      if (Mutable) {
        CFRetain(Mutable);
      }
      uint64_t v16 = (const void *)*MEMORY[0x1E4FB96C8];
      xpc_object_t v17 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB96C8]);
      uint64_t v18 = v17;
      if (v17)
      {
        CFRelease(v17);
        ctu::cf::update<__CFString const*,void const*>(v15, v16, v18);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      xpc_object_t v19 = (const void *)*MEMORY[0x1E4FB96B0];
      uint64_t v20 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB96B0]);
      long long v21 = v20;
      if (v20)
      {
        CFRelease(v20);
        ctu::cf::update<__CFString const*,void const*>(v15, v19, v21);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      uint64_t v22 = (const void *)*MEMORY[0x1E4FB95D0];
      uint64_t v23 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB95D0]);
      long long v24 = v23;
      if (v23)
      {
        CFRelease(v23);
        ctu::cf::update<__CFString const*,void const*>(v15, v22, v24);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      int v25 = (const void *)*MEMORY[0x1E4FB97B0];
      uint64_t v26 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97B0]);
      int v27 = v26;
      if (v26)
      {
        CFRelease(v26);
        ctu::cf::update<__CFString const*,void const*>(v15, v25, v27);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      CFAllocatorRef v28 = (const void *)*MEMORY[0x1E4FB98B8];
      uint64_t v29 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB98B8]);
      BOOL v30 = v29;
      if (v29)
      {
        CFRelease(v29);
        ctu::cf::update<__CFString const*,void const*>(v15, v28, v30);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      CFMutableDictionaryRef v31 = (const void *)*MEMORY[0x1E4FB9790];
      uint64_t v32 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9790]);
      uint64_t v33 = v32;
      if (v32)
      {
        CFRelease(v32);
        ctu::cf::update<__CFString const*,void const*>(v15, v31, v33);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      long long v34 = (const void *)*MEMORY[0x1E4FB97F0];
      char v35 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97F0]);
      uint64_t v36 = v35;
      if (v35)
      {
        CFRelease(v35);
        ctu::cf::update<__CFString const*,void const*>(v15, v34, v36);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      unint64_t v37 = (const void *)*MEMORY[0x1E4FB97A0];
      long long v38 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97A0]);
      uint64_t v39 = v38;
      if (v38)
      {
        CFRelease(v38);
        ctu::cf::update<__CFString const*,void const*>(v15, v37, v39);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      char v40 = (const void *)*MEMORY[0x1E4FB9848];
      long long v41 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9848]);
      uint64_t v42 = v41;
      if (v41)
      {
        CFRelease(v41);
        ctu::cf::update<__CFString const*,void const*>(v15, v40, v42);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      char v43 = (const void *)*MEMORY[0x1E4FB9868];
      unsigned int v44 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9868]);
      long long v45 = v44;
      if (v44)
      {
        CFRelease(v44);
        ctu::cf::update<__CFString const*,void const*>(v15, v43, v45);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      unsigned int v46 = (const void *)*MEMORY[0x1E4FB97C0];
      long long v47 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97C0]);
      uint64_t v48 = v47;
      if (v47)
      {
        CFRelease(v47);
        ctu::cf::update<__CFString const*,void const*>(v15, v46, v48);
      }
      if (v15)
      {
        CFRelease(v15);
        CFRetain(v15);
      }
      uint64_t v49 = (const void *)*MEMORY[0x1E4FB9870];
      std::string::size_type v50 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9870]);
      uint64_t v51 = v50;
      if (v50)
      {
        CFRelease(v50);
        ctu::cf::update<__CFString const*,void const*>(v15, v49, v51);
      }
      if (v15) {
        CFRelease(v15);
      }
      uint64_t v52 = 152;
      if (!a3) {
        uint64_t v52 = 136;
      }
      unint64_t v53 = *(void **)(a1 + v52);
      if (v53) {
        CFRetain(v53);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v53, (CFTypeRef)coex::kKeyWWANState, v15);
      if (v53) {
        CFRelease(v53);
      }
      if (v15) {
        CFRelease(v15);
      }
      MEMORY[0x1C87942E0](&v183);
    }
    CFDictionaryRef v54 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9660]);
    uint64_t v185 = (uint64_t)v54;
    if (v11) {
      CFRelease(v11);
    }
    if (v54) {
      uint64_t v55 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v55 = 0;
    }
    BOOL v182 = v55 != 0;
    if (v55)
    {
      uint64_t v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v54);
      CFMutableDictionaryRef v56 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int v57 = v56;
      if (v56) {
        CFRetain(v56);
      }
      __int16 v58 = (const void *)*MEMORY[0x1E4FB99C8];
      int v59 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB99C8]);
      uint64_t v60 = v59;
      if (v59)
      {
        CFRelease(v59);
        ctu::cf::update<__CFString const*,void const*>(v57, v58, v60);
      }
      if (v57) {
        CFRelease(v57);
      }
      uint64_t v61 = 152;
      if (!a3) {
        uint64_t v61 = 136;
      }
      uint64_t v62 = *(void **)(a1 + v61);
      if (v62) {
        CFRetain(v62);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v62, (CFTypeRef)coex::kKeyLinkQuality, v57);
      if (v62) {
        CFRelease(v62);
      }
      if (v57) {
        CFRelease(v57);
      }
      MEMORY[0x1C87942E0](&v183);
    }
    CFStringRef v63 = (const __CFString *)*MEMORY[0x1E4FB96B8];
    CFDictionaryRef v64 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB96B8]);
    uint64_t v185 = (uint64_t)v64;
    if (v54) {
      CFRelease(v54);
    }
    if (v64) {
      unsigned int v65 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      unsigned int v65 = 0;
    }
    unsigned int v66 = (const void **)MEMORY[0x1E4FB95F8];
    if (v65)
    {
      uint64_t v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v64);
      CFMutableDictionaryRef v67 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int v68 = v67;
      if (v67) {
        CFRetain(v67);
      }
      uint64_t v69 = (const void *)*MEMORY[0x1E4FB95A0];
      int v70 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB95A0]);
      unint64_t v71 = v70;
      if (v70)
      {
        CFRelease(v70);
        ctu::cf::update<__CFString const*,void const*>(v68, v69, v71);
      }
      if (v68)
      {
        CFRelease(v68);
        CFRetain(v68);
      }
      uint64_t v72 = *v66;
      unint64_t v73 = (const void *)(*v183)(&v183, *v66);
      size_t v74 = v73;
      if (v73)
      {
        CFRelease(v73);
        ctu::cf::update<__CFString const*,void const*>(v68, v72, v74);
      }
      if (v68)
      {
        CFRelease(v68);
        CFRetain(v68);
      }
      uint64_t v75 = (const void *)*MEMORY[0x1E4FB9628];
      unsigned int v76 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9628]);
      unsigned int v77 = v76;
      if (v76)
      {
        CFRelease(v76);
        ctu::cf::update<__CFString const*,void const*>(v68, v75, v77);
      }
      if (v68) {
        CFRelease(v68);
      }
      uint64_t v78 = 152;
      if (!a3) {
        uint64_t v78 = 136;
      }
      uint64_t v79 = *(void **)(a1 + v78);
      if (v79) {
        CFRetain(v79);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v79, (CFTypeRef)coex::kKeyWLANScanState, v68);
      if (v79) {
        CFRelease(v79);
      }
      if (v68) {
        CFRelease(v68);
      }
      MEMORY[0x1C87942E0](&v183);
    }
    CFDictionaryRef v80 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, v63);
    uint64_t v185 = (uint64_t)v80;
    if (v64) {
      CFRelease(v64);
    }
    if (v80) {
      uint64_t v81 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v81 = 0;
    }
    if (v81)
    {
      uint64_t v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v80);
      CFMutableDictionaryRef v82 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v83 = v82;
      if (v82) {
        CFRetain(v82);
      }
      uint64_t v84 = (const void *)*MEMORY[0x1E4FB9770];
      uint64_t v85 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9770]);
      int v86 = v85;
      if (v85)
      {
        CFRelease(v85);
        ctu::cf::update<__CFString const*,void const*>(v83, v84, v86);
      }
      if (v83)
      {
        CFRelease(v83);
        CFRetain(v83);
      }
      BOOL v87 = *v66;
      BOOL v88 = (const void *)(*v183)(&v183, *v66);
      unsigned int v89 = v88;
      if (v88)
      {
        CFRelease(v88);
        ctu::cf::update<__CFString const*,void const*>(v83, v87, v89);
      }
      if (v83)
      {
        CFRelease(v83);
        CFRetain(v83);
      }
      int v90 = (const void *)*MEMORY[0x1E4FB9738];
      char v91 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9738]);
      std::string v92 = v91;
      if (v91)
      {
        CFRelease(v91);
        ctu::cf::update<__CFString const*,void const*>(v83, v90, v92);
      }
      if (v83)
      {
        CFRelease(v83);
        CFRetain(v83);
      }
      uint64_t v93 = (const void *)*MEMORY[0x1E4FB9740];
      std::string v94 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9740]);
      std::string v95 = v94;
      if (v94)
      {
        CFRelease(v94);
        ctu::cf::update<__CFString const*,void const*>(v83, v93, v95);
      }
      if (v83)
      {
        CFRelease(v83);
        CFRetain(v83);
      }
      std::string v96 = (const void *)*MEMORY[0x1E4FB96F0];
      std::string v97 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB96F0]);
      std::string v98 = v97;
      if (v97)
      {
        CFRelease(v97);
        ctu::cf::update<__CFString const*,void const*>(v83, v96, v98);
      }
      if (v83) {
        CFRelease(v83);
      }
      uint64_t v99 = 152;
      if (!a3) {
        uint64_t v99 = 136;
      }
      std::string v100 = *(void **)(a1 + v99);
      if (v100) {
        CFRetain(v100);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v100, (CFTypeRef)coex::kKeyWLANConnState, v83);
      if (v100) {
        CFRelease(v100);
      }
      if (v83) {
        CFRelease(v83);
      }
      MEMORY[0x1C87942E0](&v183);
    }
    CFDictionaryRef v101 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9668]);
    uint64_t v185 = (uint64_t)v101;
    if (v80) {
      CFRelease(v80);
    }
    if (v101) {
      v102 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      v102 = 0;
    }
    if (v102)
    {
      uint64_t v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v101);
      CFMutableDictionaryRef v103 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v104 = v103;
      if (v103) {
        CFRetain(v103);
      }
      std::string v105 = (const void *)*MEMORY[0x1E4FB9578];
      int v106 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9578]);
      std::string v107 = v106;
      if (v106)
      {
        CFRelease(v106);
        ctu::cf::update<__CFString const*,void const*>(v104, v105, v107);
      }
      if (v104)
      {
        CFRelease(v104);
        CFRetain(v104);
      }
      xpc_object_t v108 = (const void *)*MEMORY[0x1E4FB9860];
      uint64_t v109 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9860]);
      std::string v110 = v109;
      if (v109)
      {
        CFRelease(v109);
        ctu::cf::update<__CFString const*,void const*>(v104, v108, v110);
      }
      if (v104) {
        CFRelease(v104);
      }
      uint64_t v111 = 152;
      if (!a3) {
        uint64_t v111 = 136;
      }
      uint64_t v112 = *(void **)(a1 + v111);
      if (v112) {
        CFRetain(v112);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v112, (CFTypeRef)coex::kKeyLinkQuality, v104);
      if (v112) {
        CFRelease(v112);
      }
      if (v104) {
        CFRelease(v104);
      }
      MEMORY[0x1C87942E0](&v183);
      BOOL v182 = 1;
    }
    CFDictionaryRef v113 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9720]);
    uint64_t v185 = (uint64_t)v113;
    if (v101) {
      CFRelease(v101);
    }
    if (v113) {
      uint64_t v114 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v114 = 0;
    }
    if (v114)
    {
      uint64_t v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, v113);
      CFMutableDictionaryRef v115 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v116 = v115;
      if (v115) {
        CFRetain(v115);
      }
      long long v117 = (const void *)*MEMORY[0x1E4FB9988];
      unint64_t v118 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9988]);
      unint64_t v119 = v118;
      if (v118)
      {
        CFRelease(v118);
        ctu::cf::update<__CFString const*,void const*>(v116, v117, v119);
      }
      if (v116)
      {
        CFRelease(v116);
        CFRetain(v116);
      }
      char v120 = (const void *)*MEMORY[0x1E4FB97F8];
      char v121 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97F8]);
      char v122 = v121;
      if (v121)
      {
        CFRelease(v121);
        ctu::cf::update<__CFString const*,void const*>(v116, v120, v122);
      }
      if (v116)
      {
        CFRelease(v116);
        CFRetain(v116);
      }
      char v123 = (const void *)*MEMORY[0x1E4FB9850];
      long long v124 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9850]);
      uint64_t v125 = v124;
      if (v124)
      {
        CFRelease(v124);
        ctu::cf::update<__CFString const*,void const*>(v116, v123, v125);
      }
      if (v116) {
        CFRelease(v116);
      }
      uint64_t v126 = 152;
      if (!a3) {
        uint64_t v126 = 136;
      }
      uint64_t v127 = *(void **)(a1 + v126);
      if (v127) {
        CFRetain(v127);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v127, (CFTypeRef)coex::kKeyFailCondition, v116);
      if (v127) {
        CFRelease(v127);
      }
      if (v116) {
        CFRelease(v116);
      }
      MEMORY[0x1C87942E0](&v183);
    }
    int v128 = (const void *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9598]);
    uint64_t v185 = (uint64_t)v128;
    if (v113) {
      CFRelease(v113);
    }
    if (v128) {
      uint64_t v129 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v129 = 0;
    }
    if (v129)
    {
      uint64_t v183 = (uint64_t (**)(void, const void *))0xAAAAAAAAAAAAAAAALL;
      unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v130 = 160;
      if (!a3) {
        uint64_t v130 = 144;
      }
      uint64_t v131 = *(const void **)(a1 + v130);
      if (v131) {
        CFRetain(v131);
      }
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v183, (const __CFDictionary *)v131);
      if (v131) {
        CFRelease(v131);
      }
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef v132 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      long long v133 = v132;
      if (v132) {
        CFRetain(v132);
      }
      long long v134 = (const void *)*MEMORY[0x1E4FB94E0];
      long long v135 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB94E0]);
      long long v136 = v135;
      if (v135)
      {
        CFRelease(v135);
        ctu::cf::update<__CFString const*,void const*>(v133, v134, v136);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      long long v137 = (const void *)*MEMORY[0x1E4FB9630];
      int v138 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9630]);
      long long v139 = v138;
      if (v138)
      {
        CFRelease(v138);
        ctu::cf::update<__CFString const*,void const*>(v133, v137, v139);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      long long v140 = (const void *)*MEMORY[0x1E4FB99B0];
      uint64_t v141 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB99B0]);
      unint64_t v142 = v141;
      if (v141)
      {
        CFRelease(v141);
        ctu::cf::update<__CFString const*,void const*>(v133, v140, v142);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      CFMutableDictionaryRef v143 = (const void *)*MEMORY[0x1E4FB97D8];
      uint64_t v144 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB97D8]);
      uint64_t v145 = v144;
      if (v144)
      {
        CFRelease(v144);
        ctu::cf::update<__CFString const*,void const*>(v133, v143, v145);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      uint64_t v146 = (const void *)*MEMORY[0x1E4FB9880];
      CFMutableDictionaryRef v147 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9880]);
      uint64_t v148 = v147;
      if (v147)
      {
        CFRelease(v147);
        ctu::cf::update<__CFString const*,void const*>(v133, v146, v148);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      CFMutableDictionaryRef v149 = (const void *)*MEMORY[0x1E4FB9978];
      CFMutableDictionaryRef v150 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9978]);
      CFMutableDictionaryRef v151 = v150;
      if (v150)
      {
        CFRelease(v150);
        ctu::cf::update<__CFString const*,void const*>(v133, v149, v151);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      CFMutableDictionaryRef v152 = (const void *)*MEMORY[0x1E4FB98A8];
      CFMutableDictionaryRef v153 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB98A8]);
      CFMutableDictionaryRef v154 = v153;
      if (v153)
      {
        CFRelease(v153);
        ctu::cf::update<__CFString const*,void const*>(v133, v152, v154);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      uint64_t v155 = (const void *)*MEMORY[0x1E4FB95B8];
      uint64_t v156 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB95B8]);
      CFMutableDictionaryRef v157 = v156;
      if (v156)
      {
        CFRelease(v156);
        ctu::cf::update<__CFString const*,void const*>(v133, v155, v157);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      CFMutableDictionaryRef v158 = (const void *)*MEMORY[0x1E4FB95F0];
      CFMutableDictionaryRef v159 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB95F0]);
      CFMutableDictionaryRef v160 = v159;
      if (v159)
      {
        CFRelease(v159);
        ctu::cf::update<__CFString const*,void const*>(v133, v158, v160);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      uint64_t v161 = (const void *)*MEMORY[0x1E4FB9518];
      CFMutableDictionaryRef v162 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9518]);
      CFMutableDictionaryRef v163 = v162;
      if (v162)
      {
        CFRelease(v162);
        ctu::cf::update<__CFString const*,void const*>(v133, v161, v163);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      CFMutableDictionaryRef v164 = (const void *)*MEMORY[0x1E4FB99B8];
      int v165 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB99B8]);
      CFMutableDictionaryRef v166 = v165;
      if (v165)
      {
        CFRelease(v165);
        ctu::cf::update<__CFString const*,void const*>(v133, v164, v166);
      }
      if (v133)
      {
        CFRelease(v133);
        CFRetain(v133);
      }
      v167 = (const void *)*MEMORY[0x1E4FB9918];
      CFMutableDictionaryRef v168 = (const void *)(*v183)(&v183, (const void *)*MEMORY[0x1E4FB9918]);
      long long v169 = v168;
      if (v168)
      {
        CFRelease(v168);
        ctu::cf::update<__CFString const*,void const*>(v133, v167, v169);
      }
      int v170 = v114;
      if (v133) {
        CFRelease(v133);
      }
      if (a3) {
        uint64_t v171 = 152;
      }
      else {
        uint64_t v171 = 136;
      }
      v172 = *(void **)(a1 + v171);
      if (v172) {
        CFRetain(v172);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v172, (CFTypeRef)coex::kKeyPolicy, v133);
      if (v172) {
        CFRelease(v172);
      }
      CFMutableDictionaryRef v173 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      v174 = v173;
      if (v173) {
        CFRetain(v173);
      }
      int v175 = (const void *)(*v183)(&v183, v140);
      int v176 = v175;
      if (v175)
      {
        CFRelease(v175);
        ctu::cf::update<__CFString const*,void const*>(v174, v140, v176);
      }
      if (v174)
      {
        CFRelease(v174);
        CFRetain(v174);
      }
      int v177 = (const void *)(*v183)(&v183, v143);
      v178 = v177;
      if (v177)
      {
        CFRelease(v177);
        ctu::cf::update<__CFString const*,void const*>(v174, v143, v178);
      }
      if (v174) {
        CFRelease(v174);
      }
      long long v179 = *(void **)(a1 + v171);
      if (v179) {
        CFRetain(v179);
      }
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v179, (CFTypeRef)coex::kKeyFailCondition, v174);
      uint64_t v114 = v170;
      if (v179) {
        CFRelease(v179);
      }
      if (v174) {
        CFRelease(v174);
      }
      if (v133) {
        CFRelease(v133);
      }
      MEMORY[0x1C87942E0](&v183);
    }
    if (v180) {
      coex::Module::State::sendWWANState_sync(a1, a3);
    }
    if (v182) {
      coex::Module::State::sendLinkQuality_sync(a1, a3);
    }
    if (v114) {
      coex::Module::State::sendFailCondition_sync(a1, a3);
    }
    if (v128) {
      CFRelease(v128);
    }
    MEMORY[0x1C87942E0](buf);
  }
  else
  {
    uint64_t v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEBUG, "#D Empty update passed; ignoring it", buf, 2u);
    }
  }
}

void sub_1C59FD5AC(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 120));
  MEMORY[0x1C87942E0](v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t coex::Module::State::handleDesenseCommandDriverStarted_sync(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 208);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

void coex::Module::State::handleDesenseFrequencyReport_sync(uint64_t a1, void *a2, int a3)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  if (a2[2])
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v7 = v6;
    uint64_t v8 = MEMORY[0x1E4F14590];
    uint64_t v158 = a1;
    if (v6)
    {
      xpc_object_t v173 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v173 = v7;
      if (!v7)
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t v7 = 0;
        goto LABEL_11;
      }
    }
    if (MEMORY[0x1C8795EB0](v7) == v8)
    {
      xpc_retain(v7);
      goto LABEL_12;
    }
    xpc_object_t v10 = xpc_null_create();
LABEL_11:
    xpc_object_t v173 = v10;
LABEL_12:
    int v157 = a3;
    xpc_release(v7);
    CFDictionaryRef v11 = (void *)*a2;
    if ((void *)*a2 != a2 + 1)
    {
      __s = (char *)*MEMORY[0x1E4FB9E10];
      CFMutableDictionaryRef v163 = (char *)*MEMORY[0x1E4FB9E08];
      uint64_t v161 = (char *)*MEMORY[0x1E4FB9E28];
      CFMutableDictionaryRef v162 = (char *)*MEMORY[0x1E4FB9E18];
      CFMutableDictionaryRef v159 = (char *)*MEMORY[0x1E4FB9E20];
      CFMutableDictionaryRef v160 = (char *)*MEMORY[0x1E4FB9E00];
      while (1)
      {
        int v170 = &v170;
        uint64_t v171 = &v170;
        uint64_t v172 = 0;
        uint64_t v12 = v11[6];
        if ((void *)v12 != v11 + 5)
        {
          uint64_t v13 = &v170;
          uint64_t v14 = 1;
          do
          {
            uint64_t v15 = operator new(0x20uLL);
            v15[1] = *(_OWORD *)(v12 + 16);
            *(void *)uint64_t v15 = v13;
            *((void *)v15 + 1) = &v170;
            v13[1] = v15;
            int v170 = v15;
            uint64_t v172 = v14;
            uint64_t v12 = *(void *)(v12 + 8);
            ++v14;
            uint64_t v13 = v15;
          }
          while ((void *)v12 != v11 + 5);
        }
        xpc_object_t v16 = xpc_array_create(0, 0);
        if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v16) == MEMORY[0x1E4F14568])
          {
            xpc_retain(v16);
            xpc_object_t v17 = v16;
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
          xpc_object_t v16 = 0;
        }
        xpc_release(v16);
        for (uint64_t i = v171; i != &v170; uint64_t i = (void *)i[1])
        {
          xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
          if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8795EB0](v19) == v8)
            {
              xpc_retain(v19);
              xpc_object_t v20 = v19;
            }
            else
            {
              xpc_object_t v20 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v20 = xpc_null_create();
            xpc_object_t v19 = 0;
          }
          xpc_release(v19);
          xpc_object_t v21 = xpc_uint64_create(i[2]);
          if (!v21) {
            xpc_object_t v21 = xpc_null_create();
          }
          xpc_dictionary_set_value(v20, "kWCMCellular_DesenseNetworkConfiguration_CenterFreq", v21);
          xpc_object_t v22 = xpc_null_create();
          xpc_release(v21);
          xpc_release(v22);
          xpc_object_t v23 = xpc_int64_create(*((unsigned int *)i + 6));
          if (!v23) {
            xpc_object_t v23 = xpc_null_create();
          }
          xpc_dictionary_set_value(v20, "kWCMCellular_DesenseNetworkConfiguration_Bandwidth", v23);
          xpc_object_t v24 = xpc_null_create();
          xpc_release(v23);
          xpc_release(v24);
          xpc_array_append_value(v17, v20);
          xpc_release(v20);
        }
        if (MEMORY[0x1C8795EB0](v17) == MEMORY[0x1E4F14568] && xpc_array_get_count(v17))
        {
          xpc_object_t object = v17;
          xpc_object_t v17 = xpc_null_create();
        }
        else
        {
          xpc_object_t object = xpc_null_create();
        }
        xpc_release(v17);
        if (v172)
        {
          uint64_t v26 = v170;
          int v25 = v171;
          uint64_t v27 = *v171;
          *(void *)(v27 + 8) = *((void *)v170 + 1);
          **((void **)v26 + 1) = v27;
          uint64_t v172 = 0;
          if (v25 != &v170)
          {
            do
            {
              CFAllocatorRef v28 = (void *)v25[1];
              operator delete(v25);
              int v25 = v28;
            }
            while (v28 != &v170);
          }
        }
        uint64_t v29 = (const char *)v11[4];
        size_t v30 = strlen(v29);
        if (v30 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v31 = v30;
        if (v30 >= 0x17) {
          break;
        }
        HIBYTE(v169) = v30;
        uint64_t v32 = buf;
        if (v30) {
          goto LABEL_50;
        }
LABEL_51:
        v32[v31] = 0;
        size_t v35 = strlen(__s);
        if (v35 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v36 = v35;
        if (v35 >= 0x17)
        {
          uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v35 | 7) != 0x17) {
            uint64_t v38 = v35 | 7;
          }
          uint64_t v39 = v38 + 1;
          p_dst = (long long *)operator new(v38 + 1);
          *((void *)&__dst + 1) = v36;
          int64_t v175 = v39 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
LABEL_58:
          memmove(p_dst, __s, v36);
          goto LABEL_59;
        }
        HIBYTE(v175) = v35;
        p_dst = &__dst;
        if (v35) {
          goto LABEL_58;
        }
LABEL_59:
        *((unsigned char *)p_dst + v36) = 0;
        int v40 = SHIBYTE(v169);
        long long v41 = *(uint8_t **)buf;
        if (v169 >= 0) {
          uint64_t v42 = buf;
        }
        else {
          uint64_t v42 = *(uint8_t **)buf;
        }
        int v43 = SHIBYTE(v175);
        unsigned int v44 = (void *)__dst;
        if (v175 >= 0) {
          long long v45 = (const char *)&__dst;
        }
        else {
          long long v45 = (const char *)__dst;
        }
        int v46 = strcasecmp((const char *)v42, v45);
        if (v43 < 0)
        {
          operator delete(v44);
          if ((v40 & 0x80000000) == 0)
          {
LABEL_67:
            if (!v46) {
              goto LABEL_74;
            }
            goto LABEL_68;
          }
        }
        else if ((v40 & 0x80000000) == 0)
        {
          goto LABEL_67;
        }
        operator delete(v41);
        if (!v46)
        {
LABEL_74:
          uint64_t v51 = object;
          if (object)
          {
            xpc_retain(object);
            xpc_object_t v52 = object;
          }
          else
          {
            xpc_object_t v52 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_UplinkFrequency", v52);
          xpc_object_t v91 = xpc_null_create();
          xpc_release(v52);
          xpc_release(v91);
          goto LABEL_230;
        }
LABEL_68:
        long long v47 = (const char *)v11[4];
        size_t v48 = strlen(v47);
        if (v48 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v49 = v48;
        if (v48 >= 0x17)
        {
          uint64_t v53 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v48 | 7) != 0x17) {
            uint64_t v53 = v48 | 7;
          }
          uint64_t v54 = v53 + 1;
          std::string::size_type v50 = operator new(v53 + 1);
          size_t v168 = v49;
          int64_t v169 = v54 | 0x8000000000000000;
          *(void *)long long buf = v50;
LABEL_79:
          memmove(v50, v47, v49);
          goto LABEL_80;
        }
        HIBYTE(v169) = v48;
        std::string::size_type v50 = buf;
        if (v48) {
          goto LABEL_79;
        }
LABEL_80:
        *((unsigned char *)v50 + v49) = 0;
        size_t v55 = strlen(v163);
        if (v55 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v56 = v55;
        if (v55 >= 0x17)
        {
          uint64_t v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v55 | 7) != 0x17) {
            uint64_t v58 = v55 | 7;
          }
          uint64_t v59 = v58 + 1;
          int v57 = (long long *)operator new(v58 + 1);
          *((void *)&__dst + 1) = v56;
          int64_t v175 = v59 | 0x8000000000000000;
          *(void *)&long long __dst = v57;
LABEL_87:
          memmove(v57, v163, v56);
          goto LABEL_88;
        }
        HIBYTE(v175) = v55;
        int v57 = &__dst;
        if (v55) {
          goto LABEL_87;
        }
LABEL_88:
        *((unsigned char *)v57 + v56) = 0;
        int v60 = SHIBYTE(v169);
        uint64_t v61 = *(uint8_t **)buf;
        if (v169 >= 0) {
          uint64_t v62 = buf;
        }
        else {
          uint64_t v62 = *(uint8_t **)buf;
        }
        int v63 = SHIBYTE(v175);
        CFDictionaryRef v64 = (void *)__dst;
        if (v175 >= 0) {
          unsigned int v65 = (const char *)&__dst;
        }
        else {
          unsigned int v65 = (const char *)__dst;
        }
        int v66 = strcasecmp((const char *)v62, v65);
        if (v63 < 0)
        {
          operator delete(v64);
          if ((v60 & 0x80000000) == 0)
          {
LABEL_96:
            if (!v66) {
              goto LABEL_103;
            }
            goto LABEL_97;
          }
        }
        else if ((v60 & 0x80000000) == 0)
        {
          goto LABEL_96;
        }
        operator delete(v61);
        if (!v66)
        {
LABEL_103:
          uint64_t v51 = object;
          if (object)
          {
            xpc_retain(object);
            xpc_object_t v71 = object;
          }
          else
          {
            xpc_object_t v71 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_SearchFrequency", v71);
          xpc_object_t v111 = xpc_null_create();
          xpc_release(v71);
          xpc_release(v111);
          goto LABEL_230;
        }
LABEL_97:
        CFMutableDictionaryRef v67 = (const char *)v11[4];
        size_t v68 = strlen(v67);
        if (v68 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v69 = v68;
        if (v68 >= 0x17)
        {
          uint64_t v72 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17) {
            uint64_t v72 = v68 | 7;
          }
          uint64_t v73 = v72 + 1;
          int v70 = operator new(v72 + 1);
          size_t v168 = v69;
          int64_t v169 = v73 | 0x8000000000000000;
          *(void *)long long buf = v70;
LABEL_108:
          memmove(v70, v67, v69);
          goto LABEL_109;
        }
        HIBYTE(v169) = v68;
        int v70 = buf;
        if (v68) {
          goto LABEL_108;
        }
LABEL_109:
        *((unsigned char *)v70 + v69) = 0;
        size_t v74 = strlen(v162);
        if (v74 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v75 = v74;
        if (v74 >= 0x17)
        {
          uint64_t v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v74 | 7) != 0x17) {
            uint64_t v77 = v74 | 7;
          }
          uint64_t v78 = v77 + 1;
          unsigned int v76 = (long long *)operator new(v77 + 1);
          *((void *)&__dst + 1) = v75;
          int64_t v175 = v78 | 0x8000000000000000;
          *(void *)&long long __dst = v76;
LABEL_116:
          memmove(v76, v162, v75);
          goto LABEL_117;
        }
        HIBYTE(v175) = v74;
        unsigned int v76 = &__dst;
        if (v74) {
          goto LABEL_116;
        }
LABEL_117:
        *((unsigned char *)v76 + v75) = 0;
        int v79 = SHIBYTE(v169);
        CFDictionaryRef v80 = *(uint8_t **)buf;
        if (v169 >= 0) {
          uint64_t v81 = buf;
        }
        else {
          uint64_t v81 = *(uint8_t **)buf;
        }
        int v82 = SHIBYTE(v175);
        uint64_t v83 = (void *)__dst;
        if (v175 >= 0) {
          uint64_t v84 = (const char *)&__dst;
        }
        else {
          uint64_t v84 = (const char *)__dst;
        }
        int v85 = strcasecmp((const char *)v81, v84);
        if (v82 < 0)
        {
          operator delete(v83);
          if ((v79 & 0x80000000) == 0)
          {
LABEL_125:
            if (!v85) {
              goto LABEL_132;
            }
            goto LABEL_126;
          }
        }
        else if ((v79 & 0x80000000) == 0)
        {
          goto LABEL_125;
        }
        operator delete(v80);
        if (!v85)
        {
LABEL_132:
          uint64_t v51 = object;
          if (object)
          {
            xpc_retain(object);
            xpc_object_t v90 = object;
          }
          else
          {
            xpc_object_t v90 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_HoppingFrequency", v90);
          xpc_object_t v131 = xpc_null_create();
          xpc_release(v90);
          xpc_release(v131);
          goto LABEL_230;
        }
LABEL_126:
        int v86 = (const char *)v11[4];
        size_t v87 = strlen(v86);
        if (v87 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v88 = v87;
        if (v87 >= 0x17)
        {
          uint64_t v92 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v87 | 7) != 0x17) {
            uint64_t v92 = v87 | 7;
          }
          uint64_t v93 = v92 + 1;
          unsigned int v89 = operator new(v92 + 1);
          size_t v168 = v88;
          int64_t v169 = v93 | 0x8000000000000000;
          *(void *)long long buf = v89;
LABEL_139:
          memmove(v89, v86, v88);
          goto LABEL_140;
        }
        HIBYTE(v169) = v87;
        unsigned int v89 = buf;
        if (v87) {
          goto LABEL_139;
        }
LABEL_140:
        *((unsigned char *)v89 + v88) = 0;
        size_t v94 = strlen(v161);
        if (v94 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v95 = v94;
        if (v94 >= 0x17)
        {
          uint64_t v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v94 | 7) != 0x17) {
            uint64_t v97 = v94 | 7;
          }
          uint64_t v98 = v97 + 1;
          std::string v96 = (long long *)operator new(v97 + 1);
          *((void *)&__dst + 1) = v95;
          int64_t v175 = v98 | 0x8000000000000000;
          *(void *)&long long __dst = v96;
LABEL_147:
          memmove(v96, v161, v95);
          goto LABEL_148;
        }
        HIBYTE(v175) = v94;
        std::string v96 = &__dst;
        if (v94) {
          goto LABEL_147;
        }
LABEL_148:
        *((unsigned char *)v96 + v95) = 0;
        int v99 = SHIBYTE(v169);
        std::string v100 = *(uint8_t **)buf;
        if (v169 >= 0) {
          CFDictionaryRef v101 = buf;
        }
        else {
          CFDictionaryRef v101 = *(uint8_t **)buf;
        }
        int v102 = SHIBYTE(v175);
        CFMutableDictionaryRef v103 = (void *)__dst;
        if (v175 >= 0) {
          uint64_t v104 = (const char *)&__dst;
        }
        else {
          uint64_t v104 = (const char *)__dst;
        }
        int v105 = strcasecmp((const char *)v101, v104);
        if (v102 < 0)
        {
          operator delete(v103);
          if ((v99 & 0x80000000) == 0)
          {
LABEL_156:
            if (!v105) {
              goto LABEL_163;
            }
            goto LABEL_157;
          }
        }
        else if ((v99 & 0x80000000) == 0)
        {
          goto LABEL_156;
        }
        operator delete(v100);
        if (!v105)
        {
LABEL_163:
          uint64_t v51 = object;
          if (object)
          {
            xpc_retain(object);
            xpc_object_t v110 = object;
          }
          else
          {
            xpc_object_t v110 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_NeighborFrequency", v110);
          xpc_object_t v147 = xpc_null_create();
          xpc_release(v110);
          xpc_release(v147);
          goto LABEL_230;
        }
LABEL_157:
        int v106 = (const char *)v11[4];
        size_t v107 = strlen(v106);
        if (v107 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v108 = v107;
        if (v107 >= 0x17)
        {
          uint64_t v112 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v107 | 7) != 0x17) {
            uint64_t v112 = v107 | 7;
          }
          uint64_t v113 = v112 + 1;
          uint64_t v109 = operator new(v112 + 1);
          size_t v168 = v108;
          int64_t v169 = v113 | 0x8000000000000000;
          *(void *)long long buf = v109;
LABEL_170:
          memmove(v109, v106, v108);
          goto LABEL_171;
        }
        HIBYTE(v169) = v107;
        uint64_t v109 = buf;
        if (v107) {
          goto LABEL_170;
        }
LABEL_171:
        *((unsigned char *)v109 + v108) = 0;
        size_t v114 = strlen(v160);
        if (v114 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v115 = v114;
        if (v114 >= 0x17)
        {
          uint64_t v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17) {
            uint64_t v117 = v114 | 7;
          }
          uint64_t v118 = v117 + 1;
          uint64_t v116 = (long long *)operator new(v117 + 1);
          *((void *)&__dst + 1) = v115;
          int64_t v175 = v118 | 0x8000000000000000;
          *(void *)&long long __dst = v116;
LABEL_178:
          memmove(v116, v160, v115);
          goto LABEL_179;
        }
        HIBYTE(v175) = v114;
        uint64_t v116 = &__dst;
        if (v114) {
          goto LABEL_178;
        }
LABEL_179:
        *((unsigned char *)v116 + v115) = 0;
        int v119 = SHIBYTE(v169);
        char v120 = *(uint8_t **)buf;
        if (v169 >= 0) {
          char v121 = buf;
        }
        else {
          char v121 = *(uint8_t **)buf;
        }
        int v122 = SHIBYTE(v175);
        char v123 = (void *)__dst;
        if (v175 >= 0) {
          long long v124 = (const char *)&__dst;
        }
        else {
          long long v124 = (const char *)__dst;
        }
        int v125 = strcasecmp((const char *)v121, v124);
        if (v122 < 0)
        {
          operator delete(v123);
          if ((v119 & 0x80000000) == 0)
          {
LABEL_187:
            if (!v125) {
              goto LABEL_194;
            }
            goto LABEL_188;
          }
        }
        else if ((v119 & 0x80000000) == 0)
        {
          goto LABEL_187;
        }
        operator delete(v120);
        if (!v125)
        {
LABEL_194:
          uint64_t v51 = object;
          if (object)
          {
            xpc_retain(object);
            xpc_object_t v130 = object;
          }
          else
          {
            xpc_object_t v130 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_RplmnFrequency", v130);
          xpc_object_t v148 = xpc_null_create();
          xpc_release(v130);
          xpc_release(v148);
          goto LABEL_230;
        }
LABEL_188:
        uint64_t v126 = (const char *)v11[4];
        size_t v127 = strlen(v126);
        if (v127 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v128 = v127;
        if (v127 >= 0x17)
        {
          uint64_t v132 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v127 | 7) != 0x17) {
            uint64_t v132 = v127 | 7;
          }
          uint64_t v133 = v132 + 1;
          uint64_t v129 = operator new(v132 + 1);
          size_t v168 = v128;
          int64_t v169 = v133 | 0x8000000000000000;
          *(void *)long long buf = v129;
LABEL_201:
          memmove(v129, v126, v128);
          goto LABEL_202;
        }
        HIBYTE(v169) = v127;
        uint64_t v129 = buf;
        if (v127) {
          goto LABEL_201;
        }
LABEL_202:
        *((unsigned char *)v129 + v128) = 0;
        size_t v134 = strlen(v159);
        if (v134 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v135 = v134;
        if (v134 >= 0x17)
        {
          uint64_t v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v134 | 7) != 0x17) {
            uint64_t v137 = v134 | 7;
          }
          uint64_t v138 = v137 + 1;
          long long v136 = (long long *)operator new(v137 + 1);
          *((void *)&__dst + 1) = v135;
          int64_t v175 = v138 | 0x8000000000000000;
          *(void *)&long long __dst = v136;
LABEL_209:
          memmove(v136, v159, v135);
          goto LABEL_210;
        }
        HIBYTE(v175) = v134;
        long long v136 = &__dst;
        if (v134) {
          goto LABEL_209;
        }
LABEL_210:
        *((unsigned char *)v136 + v135) = 0;
        int v139 = SHIBYTE(v169);
        long long v140 = *(uint8_t **)buf;
        if (v169 >= 0) {
          uint64_t v141 = buf;
        }
        else {
          uint64_t v141 = *(uint8_t **)buf;
        }
        int v142 = SHIBYTE(v175);
        CFMutableDictionaryRef v143 = (void *)__dst;
        if (v175 >= 0) {
          uint64_t v144 = (const char *)&__dst;
        }
        else {
          uint64_t v144 = (const char *)__dst;
        }
        int v145 = strcasecmp((const char *)v141, v144);
        if (v142 < 0)
        {
          operator delete(v143);
          if ((v139 & 0x80000000) == 0)
          {
LABEL_218:
            uint64_t v51 = object;
            if (!v145) {
              goto LABEL_222;
            }
            goto LABEL_230;
          }
        }
        else if ((v139 & 0x80000000) == 0)
        {
          goto LABEL_218;
        }
        operator delete(v140);
        uint64_t v51 = object;
        if (!v145)
        {
LABEL_222:
          if (v51)
          {
            xpc_retain(v51);
            xpc_object_t v146 = v51;
          }
          else
          {
            xpc_object_t v146 = xpc_null_create();
          }
          xpc_dictionary_set_value(v173, "kWCMCellular_DesenseFreqReport_DownlinkFrequency", v146);
          xpc_object_t v149 = xpc_null_create();
          xpc_release(v146);
          xpc_release(v149);
        }
LABEL_230:
        xpc_release(v51);
        CFMutableDictionaryRef v150 = (void *)v11[1];
        if (v150)
        {
          do
          {
            CFMutableDictionaryRef v151 = v150;
            CFMutableDictionaryRef v150 = (void *)*v150;
          }
          while (v150);
        }
        else
        {
          do
          {
            CFMutableDictionaryRef v151 = (void *)v11[2];
            BOOL v152 = *v151 == (void)v11;
            CFDictionaryRef v11 = v151;
          }
          while (!v152);
        }
        CFDictionaryRef v11 = v151;
        if (v151 == a2 + 1) {
          goto LABEL_236;
        }
      }
      uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v33 = v30 | 7;
      }
      uint64_t v34 = v33 + 1;
      uint64_t v32 = operator new(v33 + 1);
      size_t v168 = v31;
      int64_t v169 = v34 | 0x8000000000000000;
      *(void *)long long buf = v32;
LABEL_50:
      memmove(v32, v29, v31);
      goto LABEL_51;
    }
LABEL_236:
    CFMutableDictionaryRef v153 = *(NSObject **)(v158 + 40);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT)
      && ((xpc::object::to_string((uint64_t *)buf, (xpc::object *)&v173), v169 >= 0)
        ? (CFMutableDictionaryRef v154 = buf)
        : (CFMutableDictionaryRef v154 = *(uint8_t **)buf),
          LODWORD(__dst) = 136315138,
          *(void *)((char *)&__dst + 4) = v154,
          _os_log_impl(&dword_1C59C6000, v153, OS_LOG_TYPE_DEFAULT, "#I Desense frequency report -> %s", (uint8_t *)&__dst, 0xCu), SHIBYTE(v169) < 0))
    {
      operator delete(*(void **)buf);
      uint64_t v155 = *(void *)(v158 + 120);
      if (v155) {
        goto LABEL_242;
      }
    }
    else
    {
      uint64_t v155 = *(void *)(v158 + 120);
      if (v155)
      {
LABEL_242:
        xpc_object_t v156 = v173;
        CFMutableDictionaryRef v166 = v173;
        if (v173)
        {
          xpc_retain(v173);
        }
        else
        {
          xpc_object_t v156 = xpc_null_create();
          CFMutableDictionaryRef v166 = v156;
        }
        coex::XpcClient::sendMessage(v155, 399, &v166, v157);
        xpc_release(v156);
        CFMutableDictionaryRef v166 = 0;
      }
    }
    xpc_release(v173);
    return;
  }
  uint64_t v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEBUG, "#D Empty report passed; ignoring it", buf, 2u);
  }
}

void sub_1C59FE9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,void *a29,uint64_t a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void coex::Module::State::setIndications_sync(coex::Module::State *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v19 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v7 = Mutable;
  if (Mutable) {
    xpc_object_t v19 = Mutable;
  }
  uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9670], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(v7, (CFTypeRef)*MEMORY[0x1E4FB9668], v8);
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(v7, (CFTypeRef)*MEMORY[0x1E4FB9720], v8);
  if (capabilities::abs::supportsCoexEur5G(v9))
  {
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v7, (CFTypeRef)*MEMORY[0x1E4FB9758], (CFTypeRef)*MEMORY[0x1E4F1CFC8]);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v7, (CFTypeRef)*MEMORY[0x1E4FB9618], v8);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v7, (CFTypeRef)*MEMORY[0x1E4FB96D0], v8);
  }
  uint64_t v10 = *((void *)this + 13);
  if (v7 && (CFTypeID v11 = CFGetTypeID(v7), v11 == CFDictionaryGetTypeID()))
  {
    uint64_t v18 = v7;
    CFRetain(v7);
  }
  else
  {
    uint64_t v18 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State19setIndications_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_132_0;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  uint64_t v15 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = *((void *)this + 11);
  if (v13) {
    dispatch_retain(v13);
  }
  if (v12)
  {
    xpc_object_t v16 = _Block_copy(v12);
    dispatch_object_t object = v13;
    if (!v13) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  xpc_object_t v16 = 0;
  dispatch_object_t object = v13;
  if (v13) {
LABEL_17:
  }
    dispatch_retain(v13);
LABEL_18:
  (*(void (**)(uint64_t, __CFDictionary **, void **))(*(void *)v10 + 64))(v10, &v18, &v16);
  if (object) {
    dispatch_release(object);
  }
  if (v16) {
    _Block_release(v16);
  }
  if (v13) {
    dispatch_release(v13);
  }
  if (v12) {
    _Block_release(v12);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v7) {
    CFRelease(v7);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C59FEF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a17);
  if (v18) {
    dispatch_release(v18);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v20 - 64));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v20 - 56));
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void sub_1C59FEF58(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v2 - 56));
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_117(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    xpc_object_t v21 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v13 = v6;
LABEL_28:
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      CFTypeRef v7 = cf;
      if (cf) {
        uint64_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v8)
      {
        v18[0] = 0xAAAAAAAAAAAAAAAALL;
        v18[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v18, (const __CFDictionary *)cf);
        int v9 = *(unsigned __int8 *)(v5 + 172);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, (const char *)*MEMORY[0x1E4F4CB50]);
        char Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v18, *(const __CFString **)buf);
        MEMORY[0x1C8794290](buf);
        *(unsigned char *)(v5 + 172) = Int;
        if (v9 && !Int && *(void *)(v5 + 120))
        {
          xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
          if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8795EB0](v11) == MEMORY[0x1E4F14590])
            {
              xpc_retain(v11);
              xpc_object_t v12 = v11;
            }
            else
            {
              xpc_object_t v12 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v12 = xpc_null_create();
            xpc_object_t v11 = 0;
          }
          xpc_release(v11);
          uint64_t v14 = *(void *)(v5 + 120);
          xpc_object_t v17 = v12;
          if (v12)
          {
            xpc_retain(v12);
            xpc_object_t v15 = v17;
          }
          else
          {
            xpc_object_t v15 = xpc_null_create();
            xpc_object_t v17 = v15;
          }
          coex::XpcClient::sendMessage(v14, 304, &v17, 0);
          xpc_release(v15);
          xpc_object_t v17 = 0;
          xpc_object_t v16 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Notified CXM that Baseband is Ready", buf, 2u);
          }
          xpc_release(v12);
        }
        coex::Module::State::evaluateCurrentCoexBootState_sync((coex::Module::State *)v5);
        MEMORY[0x1C87942E0](v18);
        CFTypeRef v7 = cf;
      }
      if (v7) {
        CFRelease(v7);
      }
      uint64_t v13 = v21;
      if (v21) {
        goto LABEL_28;
      }
    }
  }
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void coex::Module::State::evaluateCurrentCoexBootState_sync(coex::Module::State *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((char *)this + 172);
  uint64_t v3 = (_OWORD *)((char *)this + 176);
  memset(&v19, 170, sizeof(v19));
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)this + 22), *((void *)this + 23));
  }
  else
  {
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *v3;
    v19.__r_.__value_.__r.__words[2] = *((void *)this + 24);
  }
  if (v2 > 7) {
    int v4 = 2;
  }
  else {
    int v4 = dword_1C5BC4DE8[v2];
  }
  int v5 = *((char *)this + 199);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)this + 199);
  }
  else {
    size_t v6 = *((void *)this + 23);
  }
  int v7 = 2;
  if (v6 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
  {
    if (v5 >= 0) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = *(const void **)v3;
    }
    if (!memcmp(v8, (const void *)*MEMORY[0x1E4F4CAE8], v6)) {
      int v7 = v4;
    }
    else {
      int v7 = 2;
    }
  }
  int v9 = *((_DWORD *)this + 50);
  if (v7 != v9)
  {
    uint64_t v10 = *((void *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      int v21 = v9;
      __int16 v22 = 1024;
      int v23 = v7;
      _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Coex boot state changing from %d -> %d", buf, 0xEu);
    }
    *((_DWORD *)this + 50) = v7;
    if (*((void *)this + 15))
    {
      xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v11) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v11);
          xpc_object_t v12 = v11;
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
      }
      xpc_release(v11);
      xpc_object_t v13 = xpc_int64_create(*((unsigned int *)this + 50));
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, "kWCMCellular_BBState", v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      uint64_t v15 = *((void *)this + 15);
      uint64_t v18 = v12;
      if (v12)
      {
        xpc_retain(v12);
        xpc_object_t v16 = v18;
      }
      else
      {
        xpc_object_t v16 = xpc_null_create();
        uint64_t v18 = v16;
      }
      coex::XpcClient::sendMessage(v15, 388, &v18, 0);
      xpc_release(v16);
      uint64_t v18 = 0;
      xpc_object_t v17 = *((void *)this + 5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I Notified CXM with baseband state", buf, 2u);
      }
      xpc_release(v12);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1C59FF538(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN4coex6Module5State4initEv_block_invoke_122(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  size_t v6 = std::__shared_weak_count::lock(v3);
  CFAllocatorRef v28 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    xpc_object_t v13 = v6;
LABEL_34:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)&cf, *a2);
  CFTypeRef v7 = cf;
  if (cf) {
    uint64_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    v25[0] = 0xAAAAAAAAAAAAAAAALL;
    v25[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v25, (const __CFDictionary *)cf);
    int v9 = (const void *)*MEMORY[0x1E4F4CAF0];
    size_t v10 = strlen((const char *)*MEMORY[0x1E4F4CAF0]);
    if (v10 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v11 = (void *)v10;
    if (v10 >= 0x17)
    {
      uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v14 = v10 | 7;
      }
      uint64_t v15 = v14 + 1;
      xpc_object_t v12 = operator new(v14 + 1);
      __p[1] = v11;
      unint64_t v22 = v15 | 0x8000000000000000;
      __p[0] = v12;
    }
    else
    {
      HIBYTE(v22) = v10;
      xpc_object_t v12 = __p;
      if (!v10) {
        goto LABEL_17;
      }
    }
    memmove(v12, v9, (size_t)v11);
LABEL_17:
    xpc_object_t v16 = (const char *)*MEMORY[0x1E4F4C688];
    *((unsigned char *)v11 + (void)v12) = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v29, v16);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8794290](&v29);
    xpc_object_t v17 = (void **)(v5 + 176);
    if (*(char *)(v5 + 199) < 0) {
      operator delete(*v17);
    }
    *(_OWORD *)xpc_object_t v17 = v23;
    *(void *)(v5 + 192) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    int v18 = *(char *)(v5 + 199);
    if (v18 >= 0) {
      size_t v19 = *(unsigned __int8 *)(v5 + 199);
    }
    else {
      size_t v19 = *(void *)(v5 + 184);
    }
    if (v19 == strlen((const char *)*MEMORY[0x1E4F4CCD8]))
    {
      uint64_t v20 = v18 >= 0 ? (const void *)(v5 + 176) : *v17;
      if (!memcmp(v20, (const void *)*MEMORY[0x1E4F4CCD8], v19)) {
        coex::CoexCache::initProperty((coex::CoexCache *)(v5 + 136));
      }
    }
    coex::Module::State::evaluateCurrentCoexBootState_sync((coex::Module::State *)v5);
    MEMORY[0x1C87942E0](v25);
    CFTypeRef v7 = cf;
  }
  if (v7) {
    CFRelease(v7);
  }
  xpc_object_t v13 = v28;
  if (v28) {
    goto LABEL_34;
  }
}

void ___ZN4coex6Module5State8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1 + 28;
  uint64_t v3 = (uint64_t *)v1[29];
  if (v3 != v1 + 28)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 2));
      uint64_t v3 = (uint64_t *)v3[1];
    }
    while (v3 != v2);
  }
  if (v1[30])
  {
    uint64_t v4 = v1[28];
    uint64_t v5 = (uint64_t *)v1[29];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    v1[30] = 0;
    if (v5 != v2)
    {
      do
      {
        CFTypeRef v7 = (uint64_t *)v5[1];
        uint64_t v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  int v9 = (std::__shared_weak_count *)v1[16];
  v1[15] = 0;
  v1[16] = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  size_t v10 = (std::__shared_weak_count *)v1[14];
  v1[13] = 0;
  v1[14] = 0;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    xpc_object_t v11 = (std::__shared_weak_count *)v1[32];
    v1[31] = 0;
    v1[32] = 0;
    if (!v11) {
      return;
    }
  }
  else
  {
    xpc_object_t v11 = (std::__shared_weak_count *)v1[32];
    v1[31] = 0;
    v1[32] = 0;
    if (!v11) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN4coex6Module5State19setIndications_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      CFTypeRef v7 = v6;
      if (!a1[5]) {
        goto LABEL_13;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        int v9 = 0;
      }
      size_t v10 = *(NSObject **)(v5 + 40);
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (!v11) {
          goto LABEL_13;
        }
        int v15 = 138412290;
        uint64_t v16 = v8;
        xpc_object_t v12 = "#I Failed to  set indications:\n%@";
        xpc_object_t v13 = v10;
        uint32_t v14 = 12;
      }
      else
      {
        if (!v11) {
          goto LABEL_13;
        }
        LOWORD(v15) = 0;
        xpc_object_t v12 = "#I Indications set successfully";
        xpc_object_t v13 = v10;
        uint32_t v14 = 2;
      }
      _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v15, v14);
LABEL_13:
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(void *)a1;
}

void coex::CommandDriver::Callback::~Callback(coex::CommandDriver::Callback *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)this) {
    _Block_release(*(const void **)this);
  }
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void coex::Module::State::handleSetNetworkConfigOfInterest_sync(uint64_t a1, xpc_object_t *a2, unsigned int a3)
{
  uint64_t v4 = a2;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14568])
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Invalid XPC array", buf, 2u);
    }
    return;
  }
  uint64_t v66 = a1;
  CFArrayRef v85 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable) {
    CFArrayRef v85 = Mutable;
  }
  memset(buf, 170, 16);
  xpc_object_t v9 = *v4;
  if (*v4)
  {
    xpc_retain(*v4);
    *(void *)long long buf = v9;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    *(void *)long long buf = v9;
    if (!v9)
    {
      xpc_object_t v9 = 0;
      *(void *)long long buf = xpc_null_create();
      goto LABEL_10;
    }
  }
  xpc_retain(v9);
LABEL_10:
  *(void *)&uint8_t buf[8] = 0;
  xpc_release(v9);
  unsigned int v65 = a3;
  uint64_t v71 = *MEMORY[0x1E4FB9658];
  CFTypeRef v69 = (CFTypeRef)*MEMORY[0x1E4FB94E8];
  uint64_t v70 = *MEMORY[0x1E4FB9538];
  CFMutableDictionaryRef v67 = v4;
  CFTypeRef v68 = (CFTypeRef)*MEMORY[0x1E4FB9528];
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4FB9510];
  while (1)
  {
    xpc_object_t v10 = *v4;
    if (*v4) {
      xpc_retain(*v4);
    }
    else {
      xpc_object_t v10 = xpc_null_create();
    }
    if (MEMORY[0x1C8795EB0](*v4) == MEMORY[0x1E4F14568])
    {
      size_t count = xpc_array_get_count(*v4);
      if (!v10)
      {
LABEL_20:
        xpc_object_t v12 = xpc_null_create();
        goto LABEL_21;
      }
    }
    else
    {
      size_t count = 0;
      if (!v10) {
        goto LABEL_20;
      }
    }
    xpc_retain(v10);
    xpc_object_t v12 = v10;
LABEL_21:
    xpc_release(v10);
    xpc_object_t v13 = *(xpc_object_t *)buf;
    uint64_t v14 = *(void *)&buf[8];
    xpc_release(v12);
    if (v14 == count && v13 == v12) {
      break;
    }
    xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long keys = buf;
    *((void *)&keys + 1) = *(void *)&buf[8];
    xpc::array::object_proxy::operator xpc::dict((uint64_t)&keys, &xdict);
    unint64_t v83 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_ULCenterFreq");
    values[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      values[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&keys, (xpc *)values, v16);
    uint64_t v17 = (const void *)keys;
    if (!(void)keys || (CFTypeID v18 = CFGetTypeID((CFTypeRef)keys), v18 != CFNumberGetTypeID()))
    {
      uint64_t v17 = 0;
      unint64_t v83 = 0;
      size_t v19 = (const void *)keys;
      if (!(void)keys) {
        goto LABEL_32;
      }
LABEL_31:
      CFRelease(v19);
      goto LABEL_32;
    }
    unint64_t v83 = (unint64_t)v17;
    CFRetain(v17);
    size_t v19 = (const void *)keys;
    if ((void)keys) {
      goto LABEL_31;
    }
LABEL_32:
    xpc_release(values[0]);
    unint64_t v82 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v20 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_ULBandwidth");
    values[0] = v20;
    if (v20) {
      xpc_retain(v20);
    }
    else {
      values[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&keys, (xpc *)values, v21);
    unint64_t v22 = (const void *)keys;
    if (!(void)keys || (CFTypeID v23 = CFGetTypeID((CFTypeRef)keys), v23 != CFNumberGetTypeID()))
    {
      unint64_t v22 = 0;
      unint64_t v82 = 0;
      uint64_t v24 = (const void *)keys;
      if (!(void)keys) {
        goto LABEL_41;
      }
LABEL_40:
      CFRelease(v24);
      goto LABEL_41;
    }
    unint64_t v82 = (unint64_t)v22;
    CFRetain(v22);
    uint64_t v24 = (const void *)keys;
    if ((void)keys) {
      goto LABEL_40;
    }
LABEL_41:
    xpc_release(values[0]);
    unint64_t v81 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v25 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_DLCenterFreq");
    values[0] = v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      values[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&keys, (xpc *)values, v26);
    uint64_t v27 = (const void *)keys;
    if (!(void)keys || (CFTypeID v28 = CFGetTypeID((CFTypeRef)keys), v28 != CFNumberGetTypeID()))
    {
      uint64_t v27 = 0;
      unint64_t v81 = 0;
      uint64_t v29 = (const void *)keys;
      if (!(void)keys) {
        goto LABEL_50;
      }
LABEL_49:
      CFRelease(v29);
      goto LABEL_50;
    }
    unint64_t v81 = (unint64_t)v27;
    CFRetain(v27);
    uint64_t v29 = (const void *)keys;
    if ((void)keys) {
      goto LABEL_49;
    }
LABEL_50:
    xpc_release(values[0]);
    unint64_t v80 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v30 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_DLBandwidth");
    values[0] = v30;
    if (v30) {
      xpc_retain(v30);
    }
    else {
      values[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&keys, (xpc *)values, v31);
    uint64_t v32 = (const void *)keys;
    if (!(void)keys || (CFTypeID v33 = CFGetTypeID((CFTypeRef)keys), v33 != CFNumberGetTypeID()))
    {
      uint64_t v32 = 0;
      unint64_t v80 = 0;
      uint64_t v34 = (const void *)keys;
      if (!(void)keys) {
        goto LABEL_59;
      }
LABEL_58:
      CFRelease(v34);
      goto LABEL_59;
    }
    unint64_t v80 = (unint64_t)v32;
    CFRetain(v32);
    uint64_t v34 = (const void *)keys;
    if ((void)keys) {
      goto LABEL_58;
    }
LABEL_59:
    xpc_release(values[0]);
    xpc_object_t v35 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_BandMask");
    *(void *)&long long keys = v35;
    if (v35) {
      xpc_retain(v35);
    }
    else {
      *(void *)&long long keys = xpc_null_create();
    }
    unsigned __int8 v36 = xpc::dyn_cast_or_default((xpc *)&keys, 0);
    xpc_release((xpc_object_t)keys);
    if (!v17 || !v22 || !v27)
    {
      if (v32) {
        goto LABEL_91;
      }
      goto LABEL_92;
    }
    if (v32)
    {
      CFDictionaryRef v78 = 0;
      CFDictionaryRef v79 = 0;
      *(void *)&long long keys = v71;
      *((void *)&keys + 1) = v70;
      values[0] = (void *)v17;
      values[1] = (void *)v22;
      v89[0] = (void *)v27;
      v89[1] = (void *)v32;
      CFDictionaryRef v37 = CFDictionaryCreate(v7, (const void **)&keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v38 = v37;
      if (v37) {
        CFDictionaryRef v79 = v37;
      }
      CFDictionaryRef v39 = CFDictionaryCreate(v7, (const void **)&keys, (const void **)v89, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v40 = v39;
      if (v39) {
        CFDictionaryRef v78 = v39;
      }
      v89[0] = 0;
      CFMutableDictionaryRef v41 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v42 = v41;
      if (v41) {
        v89[0] = v41;
      }
      ctu::cf::insert<__CFString const*,__CFDictionary const*>(v41, v69, v38);
      ctu::cf::insert<__CFString const*,__CFDictionary const*>(v42, v68, v40);
      *(void *)bytes = v36;
      CFDataRef v43 = CFDataCreate(v7, bytes, 8);
      v77[1] = v43;
      *(void *)&long long keys = cf;
      if (cf) {
        CFRetain(cf);
      }
      values[0] = v43;
      if (v43)
      {
        CFRetain(v43);
        if (cf) {
          CFDictionaryAddValue(v42, cf, v43);
        }
        CFRelease(v43);
      }
      CFAllocatorRef v44 = v7;
      if (cf) {
        CFRelease(cf);
      }
      long long v45 = v85;
      *(void *)&long long keys = v42;
      if (v42)
      {
        CFRetain(v42);
        CFArrayAppendValue(v45, v42);
        CFRelease(v42);
      }
      if (v43) {
        CFRelease(v43);
      }
      CFAllocatorRef v7 = v44;
      if (v42) {
        CFRelease(v42);
      }
      uint64_t v4 = v67;
      if (v40) {
        CFRelease(v40);
      }
      if (v38) {
        CFRelease(v38);
      }
LABEL_91:
      CFRelease(v32);
LABEL_92:
      if (!v27) {
        goto LABEL_94;
      }
    }
    CFRelease(v27);
LABEL_94:
    if (v22) {
      CFRelease(v22);
    }
    if (v17) {
      CFRelease(v17);
    }
    xpc_release(xdict);
    xpc_object_t v46 = *(xpc_object_t *)buf;
    if (*(void *)buf) {
      xpc_retain(*(xpc_object_t *)buf);
    }
    else {
      xpc_object_t v46 = xpc_null_create();
    }
    ++*(void *)&buf[8];
    xpc_release(v46);
  }
  xpc_release(*(xpc_object_t *)buf);
  CFArrayRef v47 = v85;
  if (!CFArrayGetCount(v85))
  {
    int v63 = *(NSObject **)(v66 + 40);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((uint64_t *)buf, (xpc::object *)v4);
      if (v87 >= 0) {
        CFDictionaryRef v64 = buf;
      }
      else {
        CFDictionaryRef v64 = *(uint8_t **)buf;
      }
      LODWORD(keys) = 136315138;
      *(void *)((char *)&keys + 4) = v64;
      _os_log_error_impl(&dword_1C59C6000, v63, OS_LOG_TYPE_ERROR, "XPC array is: %s", (uint8_t *)&keys, 0xCu);
      if (v87 < 0) {
        operator delete(*(void **)buf);
      }
      int v63 = *(NSObject **)(v66 + 40);
      if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
LABEL_138:
        if (!v47) {
          return;
        }
        goto LABEL_139;
      }
    }
    else if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_138;
    }
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v47;
    _os_log_error_impl(&dword_1C59C6000, v63, OS_LOG_TYPE_ERROR, "Band filter array is: %@", buf, 0xCu);
    if (!v47) {
      return;
    }
LABEL_139:
    CFRelease(v47);
    return;
  }
  *(void *)&long long keys = 0;
  *(void *)long long buf = *MEMORY[0x1E4FB95A8];
  values[0] = v47;
  CFDictionaryRef v48 = CFDictionaryCreate(v7, (const void **)buf, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v49 = v48;
  if (v48) {
    *(void *)&long long keys = v48;
  }
  values[0] = 0;
  CFMutableDictionaryRef v50 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v51 = v50;
  if (v50) {
    values[0] = v50;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v50, (CFTypeRef)*MEMORY[0x1E4FB9640], v49);
  uint64_t v53 = *(void *)(v66 + 72);
  xpc_object_t v52 = *(std::__shared_weak_count **)(v66 + 80);
  *(void *)long long buf = v53;
  if (!v52 || (uint64_t v54 = std::__shared_weak_count::lock(v52), (*(void *)&buf[8] = v54) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v55 = v54;
  uint64_t v56 = *(void *)(v66 + 104);
  if (v51 && (CFTypeID v57 = CFGetTypeID(v51), v57 == CFDictionaryGetTypeID()))
  {
    v77[0] = v51;
    CFRetain(v51);
  }
  else
  {
    v77[0] = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State37handleSetNetworkConfigOfInterest_syncEN3xpc5arrayENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_138_0;
  void aBlock[4] = v66;
  void aBlock[5] = v53;
  size_t v74 = v55;
  atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v58 = _Block_copy(aBlock);
  uint64_t v59 = *(NSObject **)(v66 + 88);
  if (v59) {
    dispatch_retain(*(dispatch_object_t *)(v66 + 88));
  }
  if (v58)
  {
    size_t v75 = _Block_copy(v58);
    dispatch_object_t object = v59;
    if (v59) {
      goto LABEL_115;
    }
  }
  else
  {
    size_t v75 = 0;
    dispatch_object_t object = v59;
    if (v59) {
LABEL_115:
    }
      dispatch_retain(v59);
  }
  (*(void (**)(uint64_t, CFTypeRef *, void, void **))(*(void *)v56 + 48))(v56, v77, v65, &v75);
  if (object) {
    dispatch_release(object);
  }
  if (v75) {
    _Block_release(v75);
  }
  if (v59) {
    dispatch_release(v59);
  }
  if (v58) {
    _Block_release(v58);
  }
  if (v77[0]) {
    CFRelease(v77[0]);
  }
  int v60 = v74;
  if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    uint64_t v61 = *(std::__shared_weak_count **)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_130;
    }
LABEL_129:
    if (atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_130;
    }
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    uint64_t v62 = values[0];
    if (values[0]) {
LABEL_131:
    }
      CFRelease(v62);
  }
  else
  {
    uint64_t v61 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_129;
    }
LABEL_130:
    uint64_t v62 = values[0];
    if (values[0]) {
      goto LABEL_131;
    }
  }
  if ((void)keys) {
    CFRelease((CFTypeRef)keys);
  }
  CFArrayRef v47 = v85;
  if (v85) {
    goto LABEL_139;
  }
}

void sub_1C5A007F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,int a52,__int16 a53,char a54,char a55,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void xpc::array::object_proxy::operator xpc::dict(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_array_get_value(**(xpc_object_t **)a1, *(void *)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v4) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

uint64_t ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ___ZN4coex6Module5State37handleSetNetworkConfigOfInterest_syncEN3xpc5arrayENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Failed to set: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

const void **ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void coex::Module::State::handleSetTxPowerLimit_sync(void *a1, xpc *this, uint64_t a3)
{
  uint64_t v5 = xpc::dyn_cast_or_default(this, 0);
  uint64_t v6 = 20;
  if (!a3) {
    uint64_t v6 = 18;
  }
  uint64_t v7 = (__CFDictionary *)a1[v6];
  CFMutableDictionaryRef theDict = v7;
  if (v7) {
    CFRetain(v7);
  }
  ctu::cf::update<__CFString const*,long long>(v7, (CFTypeRef)*MEMORY[0x1E4FB97D8], v5, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v7) {
    CFRelease(v7);
  }
  CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, a3, 0, &theDict);
  if (theDict) {
    uint64_t v8 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4FB97F8]);
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4FB9728]);
  }
  coex::Module::State::setPolicy_sync(a1, a3);
  if (theDict) {
    CFRelease(theDict);
  }
}

void sub_1C5A00EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5A00ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2TxPowerLimit_sync(void *a1, xpc *this, uint64_t a3)
{
  uint64_t v5 = xpc::dyn_cast_or_default(this, 0);
  uint64_t v6 = 20;
  if (!a3) {
    uint64_t v6 = 18;
  }
  uint64_t v7 = (__CFDictionary *)a1[v6];
  CFMutableDictionaryRef theDict = v7;
  if (v7) {
    CFRetain(v7);
  }
  ctu::cf::update<__CFString const*,long long>(v7, (CFTypeRef)*MEMORY[0x1E4FB9698], v5, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v7) {
    CFRelease(v7);
  }
  CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, a3, 0, &theDict);
  if (theDict) {
    uint64_t v8 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4FB97F8]);
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4FB9728]);
  }
  coex::Module::State::setPolicy_sync(a1, a3);
  if (theDict) {
    CFRelease(theDict);
  }
}

void sub_1C5A01010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5A01024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2CalibrationInfo_sync(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_error_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_ERROR, "WCMCellularSetWCI2CalibrationInfo not supported", v2, 2u);
  }
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void coex::Module::State::handleSetLinkQualityMode_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  object[1] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMBTSetLinkQuality_Mode");
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  uint64_t v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  xpc_object_t v8 = xpc_dictionary_get_value(*a2, "kWCMBTSetLinkQuality_EventType");
  object[0] = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v9 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (!v7) {
    goto LABEL_15;
  }
  if (v9 == 1)
  {
    int v10 = 0;
    int v11 = *(_DWORD *)(a1 + 168) ^ 1;
    if (!v11) {
      return;
    }
    goto LABEL_16;
  }
  if (v9 == 2)
  {
    int v9 = 2;
    int v10 = 1;
    int v11 = *(_DWORD *)(a1 + 168) ^ 2;
    if (!v11) {
      return;
    }
    goto LABEL_16;
  }
  xpc_object_t v12 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
LABEL_15:
    int v10 = 0;
    int v9 = 0;
    LOBYTE(v11) = *(_DWORD *)(a1 + 168);
    if (!*(_DWORD *)(a1 + 168)) {
      return;
    }
    goto LABEL_16;
  }
  LODWORD(object[0]) = 67109120;
  HIDWORD(object[0]) = v9;
  _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "Unrecognized event type: %d", (uint8_t *)object, 8u);
  int v10 = 0;
  int v9 = 0;
  LOBYTE(v11) = *(_DWORD *)(a1 + 168);
  if (!*(_DWORD *)(a1 + 168)) {
    return;
  }
LABEL_16:
  object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v13 = (const void *)*MEMORY[0x1E4FB95E8];
  coex::Module::State::getSubProperty(a1, *MEMORY[0x1E4FB95E8], a3, 1, (CFMutableDictionaryRef *)object);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (const void *)*MEMORY[0x1E4FB95D8];
  coex::Module::State::getSubProperty(a1, *MEMORY[0x1E4FB95D8], a3, 1, (CFMutableDictionaryRef *)&cf);
  int v15 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v11)
  {
    ctu::cf::update<__CFString const*,BOOL>((CFMutableDictionaryRef)object[0], (CFTypeRef)*MEMORY[0x1E4FB99C0], v9 & 1);
    if (v9) {
      ctu::cf::update<__CFString const*,double>((__CFDictionary *)object[0], (CFTypeRef)*MEMORY[0x1E4FB99D0], *v15, 1.0);
    }
  }
  if ((v11 & 2) != 0)
  {
    ctu::cf::update<__CFString const*,BOOL>((CFMutableDictionaryRef)cf, (CFTypeRef)*MEMORY[0x1E4FB99C0], v10);
    if (v10)
    {
      xpc_object_t v16 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLinkQuality_BLERBlockCount");
      xpc_object_t v24 = v16;
      if (v16) {
        xpc_retain(v16);
      }
      else {
        xpc_object_t v24 = xpc_null_create();
      }
      uint64_t v17 = xpc::dyn_cast_or_default((xpc *)&v24, 0);
      CFAllocatorRef v18 = *v15;
      ctu::cf::update<__CFString const*,long long>((__CFDictionary *)cf, (CFTypeRef)*MEMORY[0x1E4FB9578], v17, *v15);
      xpc_release(v24);
      xpc_object_t v19 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLinkQuality_BLERThreshold");
      xpc_object_t v24 = v19;
      if (v19) {
        xpc_retain(v19);
      }
      else {
        xpc_object_t v24 = xpc_null_create();
      }
      uint64_t v20 = xpc::dyn_cast_or_default((xpc *)&v24, 0);
      ctu::cf::update<__CFString const*,long long>((__CFDictionary *)cf, (CFTypeRef)*MEMORY[0x1E4FB9860], v20, v18);
      xpc_release(v24);
    }
  }
  if (a3) {
    uint64_t v21 = 152;
  }
  else {
    uint64_t v21 = 136;
  }
  unint64_t v22 = *(void **)(a1 + v21);
  xpc_object_t v24 = v22;
  if (v22) {
    CFRetain(v22);
  }
  ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v22, v13, object[0]);
  if (v22) {
    CFRelease(v22);
  }
  CFTypeID v23 = *(void **)(a1 + v21);
  xpc_object_t v24 = v23;
  if (v23) {
    CFRetain(v23);
  }
  ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v23, v14, cf);
  if (v23) {
    CFRelease(v23);
  }
  coex::Module::State::setLinkQualityMode_sync(a1, v9, a3);
  if (cf) {
    CFRelease(cf);
  }
  if (object[0]) {
    CFRelease(object[0]);
  }
}

void sub_1C5A014A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, xpc_object_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void coex::Module::State::setLinkQualityMode_sync(uint64_t a1, int a2, uint64_t a3)
{
  CFMutableDictionaryRef v39 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v7 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef v39 = Mutable;
  }
  v38[0] = 0xAAAAAAAAAAAAAAAALL;
  v38[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = 152;
  if (!a3) {
    uint64_t v8 = 136;
  }
  int v9 = *(const void **)(a1 + v8);
  uint64_t v34 = v9;
  if (v9) {
    CFRetain(v9);
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v38, (const __CFDictionary *)v9);
  if (v9) {
    CFRelease(v9);
  }
  int v10 = *(_DWORD *)(a1 + 168) ^ a2;
  if (v10)
  {
    CFMutableDictionaryRef v37 = v7;
    if (v7) {
      CFRetain(v7);
    }
    int v11 = (const void *)*MEMORY[0x1E4FB95E8];
    xpc_object_t v12 = (const void *)(*(uint64_t (**)(void *, void))v38[0])(v38, *MEMORY[0x1E4FB95E8]);
    xpc_object_t v13 = v12;
    if (v12)
    {
      CFRelease(v12);
      ctu::cf::update<__CFString const*,void const*>(v7, v11, v13);
    }
    if (!v7)
    {
      if ((v10 & 2) == 0) {
        goto LABEL_28;
      }
      CFMutableDictionaryRef v36 = 0;
LABEL_23:
      char v14 = 1;
      goto LABEL_24;
    }
    CFRelease(v7);
    if ((v10 & 2) == 0) {
      goto LABEL_28;
    }
    CFMutableDictionaryRef v36 = v7;
  }
  else
  {
    if ((v10 & 2) == 0) {
      goto LABEL_28;
    }
    CFMutableDictionaryRef v36 = v7;
    if (!v7) {
      goto LABEL_23;
    }
  }
  CFRetain(v7);
  char v14 = 0;
LABEL_24:
  int v15 = (const void *)*MEMORY[0x1E4FB95D8];
  xpc_object_t v16 = (const void *)(*(uint64_t (**)(void *, void))v38[0])(v38, *MEMORY[0x1E4FB95D8]);
  uint64_t v17 = v16;
  if (v16)
  {
    CFRelease(v16);
    ctu::cf::update<__CFString const*,void const*>(v7, v15, v17);
  }
  if ((v14 & 1) == 0) {
    CFRelease(v7);
  }
LABEL_28:
  xpc_object_t v19 = *(const void **)(a1 + 72);
  CFAllocatorRef v18 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v34 = v19;
  if (!v18 || (v20 = std::__shared_weak_count::lock(v18), (xpc_object_t v35 = v20) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(a1 + 104);
  if (v7 && (CFTypeID v23 = CFGetTypeID(v7), v23 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v7;
    CFRetain(v7);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State23setLinkQualityMode_syncEjNS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_332;
  void aBlock[4] = a1;
  void aBlock[5] = v19;
  xpc_object_t v30 = v21;
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v24 = _Block_copy(aBlock);
  xpc_object_t v25 = *(NSObject **)(a1 + 88);
  if (v25) {
    dispatch_retain(v25);
  }
  if (v24)
  {
    size_t v31 = _Block_copy(v24);
    dispatch_object_t object = v25;
    if (!v25) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  size_t v31 = 0;
  dispatch_object_t object = v25;
  if (v25) {
LABEL_38:
  }
    dispatch_retain(v25);
LABEL_39:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v22 + 48))(v22, &cf, a3, &v31);
  if (object) {
    dispatch_release(object);
  }
  if (v31) {
    _Block_release(v31);
  }
  if (v25) {
    dispatch_release(v25);
  }
  if (v24) {
    _Block_release(v24);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v26 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    uint64_t v27 = v35;
    if (!v35)
    {
LABEL_53:
      MEMORY[0x1C87942E0](v38);
      CFMutableDictionaryRef v28 = v39;
      if (!v39) {
        return;
      }
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v27 = v35;
    if (!v35) {
      goto LABEL_53;
    }
  }
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  MEMORY[0x1C87942E0](v38);
  CFMutableDictionaryRef v28 = v39;
  if (v39) {
LABEL_54:
  }
    CFRelease(v28);
}

void sub_1C5A019FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v17 = va_arg(va2, const void *);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  if (v9) {
    dispatch_release(v9);
  }
  if (v10) {
    _Block_release(v10);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  MEMORY[0x1C87942E0](v12 - 88);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v12 - 72));
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetScanFreqBandFilter_sync(uint64_t a1, xpc_object_t *a2, unsigned int a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1C8795EB0](*a2);
  uint64_t v7 = MEMORY[0x1E4F14568];
  if (v6 != MEMORY[0x1E4F14568])
  {
    uint64_t v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "Invalid XPC array", buf, 2u);
    }
    return;
  }
  unsigned int v46 = a3;
  CFArrayRef theArray = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable) {
    CFArrayRef theArray = Mutable;
  }
  memset(buf, 170, 16);
  xpc_object_t v11 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    *(void *)long long buf = v11;
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    *(void *)long long buf = v11;
    if (!v11)
    {
      xpc_object_t v11 = 0;
      *(void *)long long buf = xpc_null_create();
      goto LABEL_10;
    }
  }
  xpc_retain(v11);
LABEL_10:
  *(void *)&uint8_t buf[8] = 0;
  xpc_release(v11);
  uint64_t v47 = a1;
  CFTypeRef v49 = (CFTypeRef)*MEMORY[0x1E4FB9658];
  CFTypeRef v48 = (CFTypeRef)*MEMORY[0x1E4FB9538];
  uint64_t v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  xpc_object_t v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  uint64_t v14 = MEMORY[0x1E4F14590];
  while (1)
  {
    xpc_object_t v15 = *a2;
    if (*a2) {
      xpc_retain(*a2);
    }
    else {
      xpc_object_t v15 = xpc_null_create();
    }
    if (MEMORY[0x1C8795EB0](*a2) == v7)
    {
      size_t count = xpc_array_get_count(*a2);
      if (!v15)
      {
LABEL_20:
        xpc_object_t v17 = xpc_null_create();
        goto LABEL_21;
      }
    }
    else
    {
      size_t count = 0;
      if (!v15) {
        goto LABEL_20;
      }
    }
    xpc_retain(v15);
    xpc_object_t v17 = v15;
LABEL_21:
    xpc_release(v15);
    xpc_object_t v19 = *(xpc_object_t *)buf;
    uint64_t v18 = *(void *)&buf[8];
    xpc_release(v17);
    if (v18 == count && v19 == v17) {
      break;
    }
    CFTypeRef v56 = 0;
    CFMutableDictionaryRef v20 = CFDictionaryCreateMutable(v9, 0, v12, v13);
    uint64_t v21 = v20;
    if (v20) {
      CFTypeRef v56 = v20;
    }
    xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v60 = buf;
    *((void *)&v60 + 1) = *(void *)&buf[8];
    xpc::array::object_proxy::operator xpc::dict((uint64_t)&v60, &xdict);
    if (MEMORY[0x1C8795EB0](xdict) == v14)
    {
      xpc_object_t value = xpc_dictionary_get_value(xdict, "kWCMCellularScanFreqBandFilter_CenterFreq");
      *(void *)&long long v60 = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        *(void *)&long long v60 = xpc_null_create();
      }
      int v23 = xpc::dyn_cast_or_default((xpc *)&v60, 0);
      xpc_release((xpc_object_t)v60);
      xpc_object_t v24 = xpc_dictionary_get_value(xdict, "kWCMCellularScanFreqBandFilter_Bandwidth");
      *(void *)&long long v60 = v24;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        *(void *)&long long v60 = xpc_null_create();
      }
      int v25 = xpc::dyn_cast_or_default((xpc *)&v60, 0);
      xpc_release((xpc_object_t)v60);
      ctu::cf::insert<__CFString const*,long long>(v21, v49, v23, v9);
      ctu::cf::insert<__CFString const*,long long>(v21, v48, v25, v9);
    }
    uint64_t v26 = theArray;
    *(void *)&long long v60 = v21;
    if (v21)
    {
      CFRetain(v21);
      CFArrayAppendValue(v26, v21);
      CFRelease(v21);
    }
    xpc_release(xdict);
    if (v21) {
      CFRelease(v21);
    }
    xpc_object_t v27 = *(xpc_object_t *)buf;
    if (*(void *)buf) {
      xpc_retain(*(xpc_object_t *)buf);
    }
    else {
      xpc_object_t v27 = xpc_null_create();
    }
    ++*(void *)&buf[8];
    xpc_release(v27);
  }
  xpc_release(*(xpc_object_t *)buf);
  CFArrayRef v28 = theArray;
  if (!CFArrayGetCount(theArray))
  {
    CFAllocatorRef v44 = *(NSObject **)(v47 + 40);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((uint64_t *)buf, (xpc::object *)a2);
      if (v59 >= 0) {
        long long v45 = buf;
      }
      else {
        long long v45 = *(uint8_t **)buf;
      }
      LODWORD(v60) = 136315138;
      *(void *)((char *)&v60 + 4) = v45;
      _os_log_error_impl(&dword_1C59C6000, v44, OS_LOG_TYPE_ERROR, "XPC array is: %s", (uint8_t *)&v60, 0xCu);
      if (v59 < 0) {
        operator delete(*(void **)buf);
      }
      CFAllocatorRef v44 = *(NSObject **)(v47 + 40);
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
LABEL_78:
        if (!v28) {
          return;
        }
        goto LABEL_79;
      }
    }
    else if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_78;
    }
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_error_impl(&dword_1C59C6000, v44, OS_LOG_TYPE_ERROR, "Scan frequency band filter array is: %@", buf, 0xCu);
    if (!v28) {
      return;
    }
LABEL_79:
    CFRelease(v28);
    return;
  }
  *(void *)&long long v60 = 0;
  uint64_t v29 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v30 = v29;
  if (v29) {
    *(void *)&long long v60 = v29;
  }
  ctu::cf::insert<__CFString const*,__CFArray *>(v29, (CFTypeRef)*MEMORY[0x1E4FB96D8], v28);
  CFTypeRef v56 = 0;
  CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v32 = v31;
  if (v31) {
    CFTypeRef v56 = v31;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v31, (CFTypeRef)*MEMORY[0x1E4FB97D0], v30);
  uint64_t v34 = *(void *)(v47 + 72);
  CFTypeID v33 = *(std::__shared_weak_count **)(v47 + 80);
  *(void *)long long buf = v34;
  if (!v33 || (xpc_object_t v35 = std::__shared_weak_count::lock(v33), (*(void *)&buf[8] = v35) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFMutableDictionaryRef v36 = v35;
  uint64_t v37 = *(void *)(v47 + 104);
  if (v32 && (CFTypeID v38 = CFGetTypeID(v32), v38 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v32;
    CFRetain(v32);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleSetScanFreqBandFilter_syncEN3xpc5arrayENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_179;
  void aBlock[4] = v47;
  void aBlock[5] = v34;
  CFMutableDictionaryRef v51 = v36;
  atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  CFMutableDictionaryRef v39 = _Block_copy(aBlock);
  CFDictionaryRef v40 = *(NSObject **)(v47 + 88);
  if (v40) {
    dispatch_retain(*(dispatch_object_t *)(v47 + 88));
  }
  if (v39)
  {
    xpc_object_t v52 = _Block_copy(v39);
    dispatch_object_t object = v40;
    if (v40) {
      goto LABEL_54;
    }
  }
  else
  {
    xpc_object_t v52 = 0;
    dispatch_object_t object = v40;
    if (v40) {
LABEL_54:
    }
      dispatch_retain(v40);
  }
  (*(void (**)(uint64_t, CFTypeRef *, void, void **))(*(void *)v37 + 48))(v37, &cf, v46, &v52);
  if (object) {
    dispatch_release(object);
  }
  if (v52) {
    _Block_release(v52);
  }
  if (v40) {
    dispatch_release(v40);
  }
  if (v39) {
    _Block_release(v39);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFMutableDictionaryRef v41 = v51;
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    CFTypeRef v43 = v56;
    if (v56) {
LABEL_71:
    }
      CFRelease(v43);
  }
  else
  {
    CFTypeRef v43 = v56;
    if (v56) {
      goto LABEL_71;
    }
  }
  if ((void)v60) {
    CFRelease((CFTypeRef)v60);
  }
  CFArrayRef v28 = theArray;
  if (theArray) {
    goto LABEL_79;
  }
}

void sub_1C5A02214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t object,char a25,int a26,__int16 a27,char a28,char a29,xpc_object_t a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State32handleSetScanFreqBandFilter_syncEN3xpc5arrayENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Failed to set: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetWiFiStatus_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_CenterFrequency");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v8 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v9 = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_ChannelBandwidth");
  *(void *)&long long buf = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v10 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v11 = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_TxPower");
  *(void *)&long long buf = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v12 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  CFTypeRef v36 = 0;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v15 = Mutable;
  if (Mutable) {
    CFTypeRef v36 = Mutable;
  }
  ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9658], v8, v13);
  ctu::cf::insert<__CFString const*,int>(v15, (CFTypeRef)*MEMORY[0x1E4FB9538], v10, v13);
  ctu::cf::insert<__CFString const*,int>(v15, (CFTypeRef)*MEMORY[0x1E4FB9500], v12, v13);
  CFTypeRef v35 = 0;
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v17 = v16;
  if (v16) {
    CFTypeRef v35 = v16;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E4FB9620], v15);
  uint64_t v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting WiFi status with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v20 = a1[9];
  xpc_object_t v19 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v20;
  if (!v19 || (uint64_t v21 = std::__shared_weak_count::lock(v19), (*((void *)&buf + 1) = v21) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v22 = v21;
  uint64_t v23 = a1[13];
  if (v17 && (CFTypeID v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v17;
    CFRetain(v17);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1174405120;
  v30[2] = ___ZN4coex6Module5State24handleSetWiFiStatus_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v30[3] = &__block_descriptor_tmp_185;
  void v30[4] = a1;
  v30[5] = v20;
  CFMutableDictionaryRef v31 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  int v25 = _Block_copy(v30);
  uint64_t v26 = a1[11];
  if (v26) {
    dispatch_retain(v26);
  }
  if (v25)
  {
    aBlocuint64_t k = _Block_copy(v25);
    dispatch_object_t object = v26;
    if (!v26) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  aBlocuint64_t k = 0;
  dispatch_object_t object = v26;
  if (v26) {
LABEL_29:
  }
    dispatch_retain(v26);
LABEL_30:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_object_t v27 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  CFArrayRef v28 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v29 = v35;
    if (!v35) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  CFTypeRef v29 = v35;
  if (v35) {
LABEL_46:
  }
    CFRelease(v29);
LABEL_47:
  if (v36) {
    CFRelease(v36);
  }
}

void sub_1C5A02934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5A02A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State24handleSetWiFiStatus_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set wifi status: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetTimeShareConfigReq_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetTimeShareConfig_Enable"))
  {
    uint64_t v71 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    xpc_object_t v9 = Mutable;
    if (Mutable) {
      uint64_t v71 = Mutable;
    }
    xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetTimeShareConfig_Enable");
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    int v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9808], v12);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_CoexTech");
    *(void *)long long buf = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned int v14 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9840], v14, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v15 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_CallType");
    *(void *)long long buf = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned int v16 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9838], v16, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v17 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_LongDrxCycle");
    *(void *)long long buf = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned __int16 v18 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned short>(v9, (CFTypeRef)*MEMORY[0x1E4FB9920], v18, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v19 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_ShortDrxCycle");
    *(void *)long long buf = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned __int16 v20 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned short>(v9, (CFTypeRef)*MEMORY[0x1E4FB9940], v20, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v21 = xpc_dictionary_get_value(*a2, "kWCMCellularTImeShareConfig_SleepWakeDurScale");
    *(void *)long long buf = v21;
    if (v21) {
      xpc_retain(v21);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned __int8 v22 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9990], v22, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v70 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kWCMCellularTImeShareConfig_BandInformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v70);
    uint64_t v23 = MEMORY[0x1C8795EB0](v70);
    uint64_t v24 = MEMORY[0x1E4F14568];
    if (v23 == MEMORY[0x1E4F14568])
    {
      CFMutableArrayRef v69 = 0;
      CFMutableArrayRef v25 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
      if (v25) {
        CFMutableArrayRef v69 = v25;
      }
      memset(buf, 170, sizeof(buf));
      xpc_object_t v26 = v70;
      if (v70)
      {
        xpc_retain(v70);
        *(void *)long long buf = v26;
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
        *(void *)long long buf = v26;
        if (!v26)
        {
          xpc_object_t v26 = 0;
          *(void *)long long buf = xpc_null_create();
          goto LABEL_35;
        }
      }
      xpc_retain(v26);
LABEL_35:
      *(void *)&uint8_t buf[8] = 0;
      xpc_release(v26);
      uint64_t v57 = a1;
      unsigned int v58 = a3;
      CFTypeRef v59 = (CFTypeRef)*MEMORY[0x1E4FB9538];
      CFTypeRef v60 = (CFTypeRef)*MEMORY[0x1E4FB9658];
      xpc_object_t v27 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      CFArrayRef v28 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      while (1)
      {
        xpc_object_t v29 = v70;
        if (v70) {
          xpc_retain(v70);
        }
        else {
          xpc_object_t v29 = xpc_null_create();
        }
        if (MEMORY[0x1C8795EB0](v70) == v24)
        {
          size_t count = xpc_array_get_count(v70);
          if (!v29)
          {
LABEL_45:
            xpc_object_t v31 = xpc_null_create();
            goto LABEL_46;
          }
        }
        else
        {
          size_t count = 0;
          if (!v29) {
            goto LABEL_45;
          }
        }
        xpc_retain(v29);
        xpc_object_t v31 = v29;
LABEL_46:
        xpc_release(v29);
        xpc_object_t v33 = *(xpc_object_t *)buf;
        uint64_t v32 = *(void *)&buf[8];
        xpc_release(v31);
        if (v32 == count && v33 == v31)
        {
          xpc_release(*(xpc_object_t *)buf);
          CFMutableArrayRef v42 = v69;
          xpc_object_t v9 = v71;
          ctu::cf::insert<__CFString const*,__CFArray *>(v71, (CFTypeRef)*MEMORY[0x1E4FB99A8], v69);
          a3 = v58;
          a1 = v57;
          if (v42) {
            CFRelease(v42);
          }
          break;
        }
        CFMutableDictionaryRef v68 = 0;
        CFMutableDictionaryRef v34 = CFDictionaryCreateMutable(v7, 0, v27, v28);
        CFTypeRef v35 = v34;
        if (v34) {
          CFMutableDictionaryRef v68 = v34;
        }
        object[0] = buf;
        object[1] = *(xpc_object_t *)&buf[8];
        xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc::array::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
        if (MEMORY[0x1C8795EB0](xdict) == MEMORY[0x1E4F14590])
        {
          xpc_object_t v36 = xpc_dictionary_get_value(xdict, "kWCMCellularTImeShareConfig_BandSet_Frequency");
          object[0] = v36;
          if (v36) {
            xpc_retain(v36);
          }
          else {
            object[0] = xpc_null_create();
          }
          int v37 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          xpc_object_t v38 = xpc_dictionary_get_value(xdict, "kWCMCellularTImeShareConfig_BandSet_BW");
          object[0] = v38;
          if (v38) {
            xpc_retain(v38);
          }
          else {
            object[0] = xpc_null_create();
          }
          int v39 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          ctu::cf::insert<__CFString const*,long long>(v35, v60, v37, v7);
          ctu::cf::insert<__CFString const*,long long>(v35, v59, v39, v7);
        }
        CFDictionaryRef v40 = v69;
        object[0] = v35;
        if (v35)
        {
          CFRetain(v35);
          CFArrayAppendValue(v40, v35);
          CFRelease(v35);
        }
        xpc_release(xdict);
        if (v35) {
          CFRelease(v35);
        }
        xpc_object_t v41 = *(xpc_object_t *)buf;
        if (*(void *)buf) {
          xpc_retain(*(xpc_object_t *)buf);
        }
        else {
          xpc_object_t v41 = xpc_null_create();
        }
        ++*(void *)&buf[8];
        xpc_release(v41);
      }
    }
    object[0] = 0;
    CFMutableDictionaryRef v43 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v44 = v43;
    if (v43) {
      object[0] = v43;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v43, (CFTypeRef)*MEMORY[0x1E4FB96E0], v9);
    long long v45 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v44;
      _os_log_impl(&dword_1C59C6000, v45, OS_LOG_TYPE_DEFAULT, "#I Setting Time share config with: %@", buf, 0xCu);
    }
    uint64_t v47 = *(void *)(a1 + 72);
    unsigned int v46 = *(std::__shared_weak_count **)(a1 + 80);
    *(void *)long long buf = v47;
    if (!v46 || (v48 = std::__shared_weak_count::lock(v46), (*(void *)&uint8_t buf[8] = v48) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    CFTypeRef v49 = v48;
    uint64_t v50 = *(void *)(a1 + 104);
    if (v44 && (CFTypeID v51 = CFGetTypeID(v44), v51 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v44;
      CFRetain(v44);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State32handleSetTimeShareConfigReq_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_197;
    void aBlock[4] = a1;
    void aBlock[5] = v47;
    uint64_t v62 = v49;
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v52 = _Block_copy(aBlock);
    uint64_t v53 = *(NSObject **)(a1 + 88);
    if (v53) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 88));
    }
    if (v52)
    {
      int v63 = _Block_copy(v52);
      dispatch_object_t v64 = v53;
      if (!v53) {
        goto LABEL_81;
      }
    }
    else
    {
      int v63 = 0;
      dispatch_object_t v64 = v53;
      if (!v53)
      {
LABEL_81:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v50 + 48))(v50, &cf, a3, &v63);
        if (v64) {
          dispatch_release(v64);
        }
        if (v63) {
          _Block_release(v63);
        }
        if (v53) {
          dispatch_release(v53);
        }
        if (v52) {
          _Block_release(v52);
        }
        if (cf) {
          CFRelease(cf);
        }
        uint64_t v54 = v62;
        if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
        size_t v55 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
          xpc_object_t v56 = object[0];
          if (!object[0])
          {
LABEL_98:
            xpc_release(v70);
            if (v71) {
              CFRelease(v71);
            }
            return;
          }
        }
        else
        {
          xpc_object_t v56 = object[0];
          if (!object[0]) {
            goto LABEL_98;
          }
        }
        CFRelease(v56);
        goto LABEL_98;
      }
    }
    dispatch_retain(v53);
    goto LABEL_81;
  }
  xpc_object_t v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing Time share config", buf, 2u);
  }
}

void sub_1C5A03438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t a24,uint64_t a25,xpc_object_t object,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State32handleSetTimeShareConfigReq_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Time share config: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetWCI2TxAntMap_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_Enable"))
  {
    uint64_t v66 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    xpc_object_t v9 = Mutable;
    if (Mutable) {
      uint64_t v66 = Mutable;
    }
    xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_Enable");
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    int v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9730], v12);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_DefaultIdx");
    *(void *)long long buf = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned __int8 v14 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9818], v14, v7);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v65 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kWCMCellularSetWCI2TxAntMap_InformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v65);
    uint64_t v15 = MEMORY[0x1C8795EB0](v65);
    uint64_t v16 = MEMORY[0x1E4F14568];
    if (v15 == MEMORY[0x1E4F14568])
    {
      CFMutableArrayRef v64 = 0;
      CFMutableArrayRef v17 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
      if (v17) {
        CFMutableArrayRef v64 = v17;
      }
      memset(buf, 170, sizeof(buf));
      xpc_object_t v18 = v65;
      if (v65)
      {
        xpc_retain(v65);
        *(void *)long long buf = v18;
      }
      else
      {
        xpc_object_t v18 = xpc_null_create();
        *(void *)long long buf = v18;
        if (!v18)
        {
          xpc_object_t v18 = 0;
          *(void *)long long buf = xpc_null_create();
          goto LABEL_23;
        }
      }
      xpc_retain(v18);
LABEL_23:
      *(void *)&uint8_t buf[8] = 0;
      xpc_release(v18);
      uint64_t v52 = a1;
      unsigned int v53 = a3;
      CFTypeRef v54 = (CFTypeRef)*MEMORY[0x1E4FB98F8];
      CFTypeRef v55 = (CFTypeRef)*MEMORY[0x1E4FB98C0];
      xpc_object_t v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      unsigned __int16 v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      while (1)
      {
        xpc_object_t v21 = v65;
        if (v65) {
          xpc_retain(v65);
        }
        else {
          xpc_object_t v21 = xpc_null_create();
        }
        if (MEMORY[0x1C8795EB0](v65) == v16)
        {
          size_t count = xpc_array_get_count(v65);
          if (!v21)
          {
LABEL_33:
            xpc_object_t v23 = xpc_null_create();
            goto LABEL_34;
          }
        }
        else
        {
          size_t count = 0;
          if (!v21) {
            goto LABEL_33;
          }
        }
        xpc_retain(v21);
        xpc_object_t v23 = v21;
LABEL_34:
        xpc_release(v21);
        xpc_object_t v25 = *(xpc_object_t *)buf;
        uint64_t v24 = *(void *)&buf[8];
        xpc_release(v23);
        if (v24 == count && v25 == v23)
        {
          xpc_release(*(xpc_object_t *)buf);
          CFMutableArrayRef v34 = v64;
          xpc_object_t v9 = v66;
          ctu::cf::insert<__CFString const*,__CFArray *>(v66, (CFTypeRef)*MEMORY[0x1E4FB9900], v64);
          a3 = v53;
          a1 = v52;
          if (v34) {
            CFRelease(v34);
          }
          break;
        }
        CFMutableDictionaryRef v63 = 0;
        CFMutableDictionaryRef v26 = CFDictionaryCreateMutable(v7, 0, v19, v20);
        xpc_object_t v27 = v26;
        if (v26) {
          CFMutableDictionaryRef v63 = v26;
        }
        object[0] = buf;
        object[1] = *(xpc_object_t *)&buf[8];
        xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc::array::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
        if (MEMORY[0x1C8795EB0](xdict) == MEMORY[0x1E4F14590])
        {
          xpc_object_t v28 = xpc_dictionary_get_value(xdict, "kWCMCellularSetWCI2TxAntMap_Infoet_AntIdx");
          object[0] = v28;
          if (v28) {
            xpc_retain(v28);
          }
          else {
            object[0] = xpc_null_create();
          }
          unsigned __int8 v29 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          xpc_object_t v30 = xpc_dictionary_get_value(xdict, "kWCMCellularSetWCI2TxAntMap_InfoSet_WCI2Idx");
          object[0] = v30;
          if (v30) {
            xpc_retain(v30);
          }
          else {
            object[0] = xpc_null_create();
          }
          unsigned __int8 v31 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          ctu::cf::insert<__CFString const*,unsigned char>(v27, v55, v29, v7);
          ctu::cf::insert<__CFString const*,unsigned char>(v27, v54, v31, v7);
        }
        uint64_t v32 = v64;
        object[0] = v27;
        if (v27)
        {
          CFRetain(v27);
          CFArrayAppendValue(v32, v27);
          CFRelease(v27);
        }
        xpc_release(xdict);
        if (v27) {
          CFRelease(v27);
        }
        xpc_object_t v33 = *(xpc_object_t *)buf;
        if (*(void *)buf) {
          xpc_retain(*(xpc_object_t *)buf);
        }
        else {
          xpc_object_t v33 = xpc_null_create();
        }
        ++*(void *)&buf[8];
        xpc_release(v33);
      }
    }
    object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v35 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Type7FRTwoTxEnable");
    object[0] = v35;
    if (v35)
    {
      xpc_retain(v35);
      xpc_object_t v36 = object[0];
    }
    else
    {
      xpc_object_t v36 = xpc_null_create();
      object[0] = v36;
    }
    if (MEMORY[0x1C8795EB0](v36) != MEMORY[0x1E4F145D8])
    {
      int v37 = xpc::dyn_cast_or_default((xpc *)object, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9930], v37);
    }
    CFMutableArrayRef v64 = 0;
    CFMutableDictionaryRef v38 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v39 = v38;
    if (v38) {
      CFMutableArrayRef v64 = v38;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v38, (CFTypeRef)*MEMORY[0x1E4FB9678], v9);
    CFDictionaryRef v40 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v39;
      _os_log_impl(&dword_1C59C6000, v40, OS_LOG_TYPE_DEFAULT, "#I Setting Tx antenna map with: %@", buf, 0xCu);
    }
    uint64_t v42 = *(void *)(a1 + 72);
    xpc_object_t v41 = *(std::__shared_weak_count **)(a1 + 80);
    *(void *)long long buf = v42;
    if (!v41 || (CFMutableDictionaryRef v43 = std::__shared_weak_count::lock(v41), (*(void *)&buf[8] = v43) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    CFMutableDictionaryRef v44 = v43;
    uint64_t v45 = *(void *)(a1 + 104);
    if (v39 && (CFTypeID v46 = CFGetTypeID(v39), v46 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v39;
      CFRetain(v39);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State26handleSetWCI2TxAntMap_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_206;
    void aBlock[4] = a1;
    void aBlock[5] = v42;
    uint64_t v57 = v44;
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v47 = _Block_copy(aBlock);
    CFTypeRef v48 = *(NSObject **)(a1 + 88);
    if (v48) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 88));
    }
    if (v47)
    {
      unsigned int v58 = _Block_copy(v47);
      dispatch_object_t v59 = v48;
      if (!v48) {
        goto LABEL_74;
      }
    }
    else
    {
      unsigned int v58 = 0;
      dispatch_object_t v59 = v48;
      if (!v48)
      {
LABEL_74:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v45 + 48))(v45, &cf, a3, &v58);
        if (v59) {
          dispatch_release(v59);
        }
        if (v58) {
          _Block_release(v58);
        }
        if (v48) {
          dispatch_release(v48);
        }
        if (v47) {
          _Block_release(v47);
        }
        if (cf) {
          CFRelease(cf);
        }
        CFTypeRef v49 = v57;
        if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        uint64_t v50 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
          CFMutableArrayRef v51 = v64;
          if (!v64)
          {
LABEL_91:
            xpc_release(object[0]);
            xpc_release(v65);
            if (v66) {
              CFRelease(v66);
            }
            return;
          }
        }
        else
        {
          CFMutableArrayRef v51 = v64;
          if (!v64) {
            goto LABEL_91;
          }
        }
        CFRelease(v51);
        goto LABEL_91;
      }
    }
    dispatch_retain(v48);
    goto LABEL_74;
  }
  xpc_object_t v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing Tx antenna map", buf, 2u);
  }
}

void sub_1C5A03FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t object,uint64_t a25,xpc_object_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State26handleSetWCI2TxAntMap_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Tx antenna map: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetAntBlocking_sync(void *a1, void *a2, uint64_t a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1C8795EB0](*a2);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 != MEMORY[0x1E4F14590])
  {
    int v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  uint64_t v72 = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v11 = Mutable;
  if (Mutable) {
    uint64_t v72 = Mutable;
  }
  xpc_object_t v71 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)long long buf = a2;
  *(void *)&uint8_t buf[8] = "kWCMCellularSetAntBlocking_BandInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v71);
  uint64_t v12 = MEMORY[0x1C8795EB0](v71);
  uint64_t v13 = MEMORY[0x1E4F14568];
  if (v12 == MEMORY[0x1E4F14568])
  {
    CFMutableArrayRef v70 = 0;
    CFMutableArrayRef v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (v14) {
      CFMutableArrayRef v70 = v14;
    }
    memset(buf, 170, sizeof(buf));
    xpc_object_t v15 = v71;
    if (v71)
    {
      xpc_retain(v71);
      *(void *)long long buf = v15;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      *(void *)long long buf = v15;
      if (!v15)
      {
        xpc_object_t v15 = 0;
        *(void *)long long buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(void *)&uint8_t buf[8] = 0;
    xpc_release(v15);
    unsigned int v55 = a3;
    CFTypeRef v57 = (CFTypeRef)*MEMORY[0x1E4FB96A0];
    CFTypeRef v56 = (CFTypeRef)*MEMORY[0x1E4FB96F8];
    while (1)
    {
      xpc_object_t v16 = v71;
      if (v71) {
        xpc_retain(v71);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      if (MEMORY[0x1C8795EB0](v71) == v13)
      {
        size_t count = xpc_array_get_count(v71);
        if (!v16)
        {
LABEL_23:
          xpc_object_t v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        size_t count = 0;
        if (!v16) {
          goto LABEL_23;
        }
      }
      xpc_retain(v16);
      xpc_object_t v18 = v16;
LABEL_24:
      xpc_release(v16);
      xpc_object_t v19 = *(xpc_object_t *)buf;
      uint64_t v20 = *(void *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        CFMutableArrayRef v40 = v70;
        xpc_object_t v11 = v72;
        ctu::cf::insert<__CFString const*,__CFArray *>(v72, (CFTypeRef)*MEMORY[0x1E4FB9888], v70);
        a3 = v55;
        if (v40) {
          CFRelease(v40);
        }
        break;
      }
      CFTypeRef cf = 0;
      CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unsigned __int8 v22 = v21;
      if (v21) {
        CFTypeRef cf = v21;
      }
      xpc_object_t object = buf;
      CFMutableDictionaryRef v67 = *(const char **)&buf[8];
      xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&object, &xdict);
      if (MEMORY[0x1C8795EB0](xdict) != v7) {
        goto LABEL_62;
      }
      xpc_object_t value = xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      unsigned __int8 v24 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      ctu::cf::insert<__CFString const*,unsigned char>(v22, v57, v24, v9);
      xpc_object_t xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t object = &xdict;
      CFMutableDictionaryRef v67 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
      if (MEMORY[0x1C8795EB0](xarray) != v13) {
        goto LABEL_61;
      }
      CFTypeRef v64 = 0;
      CFMutableArrayRef v25 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
      if (v25) {
        CFTypeRef v64 = v25;
      }
      xpc_object_t v26 = xarray;
      if (xarray)
      {
        xpc_retain(xarray);
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
        if (!v26)
        {
          xpc_object_t v26 = xpc_null_create();
          xpc_object_t v27 = 0;
          goto LABEL_39;
        }
      }
      xpc_retain(v26);
      xpc_object_t v27 = v26;
LABEL_39:
      xpc_release(v27);
      for (size_t i = 0; ; ++i)
      {
        xpc_object_t v30 = xarray;
        if (xarray) {
          xpc_retain(xarray);
        }
        else {
          xpc_object_t v30 = xpc_null_create();
        }
        if (MEMORY[0x1C8795EB0](xarray) == v13)
        {
          size_t v31 = xpc_array_get_count(xarray);
          if (!v30)
          {
LABEL_49:
            xpc_object_t v32 = xpc_null_create();
            goto LABEL_50;
          }
        }
        else
        {
          size_t v31 = 0;
          if (!v30) {
            goto LABEL_49;
          }
        }
        xpc_retain(v30);
        xpc_object_t v32 = v30;
LABEL_50:
        xpc_release(v30);
        xpc_release(v32);
        if (i == v31 && v26 == v32) {
          break;
        }
        xpc_object_t v33 = xpc_array_get_value(v26, i);
        xpc_object_t v63 = v33;
        if (v33) {
          xpc_retain(v33);
        }
        else {
          xpc_object_t v63 = xpc_null_create();
        }
        int v34 = xpc::dyn_cast_or_default((xpc *)&v63, 0);
        xpc_object_t v35 = (__CFArray *)v64;
        int valuePtr = v34;
        CFNumberRef v36 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        xpc_object_t object = v36;
        if (v36)
        {
          CFArrayAppendValue(v35, v36);
          CFRelease(v36);
        }
        xpc_release(v63);
        if (v26)
        {
          xpc_retain(v26);
          xpc_object_t v29 = v26;
        }
        else
        {
          xpc_object_t v29 = xpc_null_create();
        }
        xpc_release(v29);
      }
      xpc_release(v26);
      CFTypeRef v37 = v64;
      unsigned __int8 v22 = (__CFDictionary *)cf;
      ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v56, v64);
      if (v37) {
        CFRelease(v37);
      }
LABEL_61:
      xpc_release(xarray);
LABEL_62:
      CFMutableDictionaryRef v38 = v70;
      xpc_object_t object = v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v38, v22);
        CFRelease(v22);
      }
      xpc_release(xdict);
      if (cf) {
        CFRelease(cf);
      }
      xpc_object_t v39 = *(xpc_object_t *)buf;
      if (*(void *)buf) {
        xpc_retain(*(xpc_object_t *)buf);
      }
      else {
        xpc_object_t v39 = xpc_null_create();
      }
      ++*(void *)&buf[8];
      xpc_release(v39);
    }
  }
  xpc_object_t object = 0;
  CFMutableDictionaryRef v41 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v42 = v41;
  if (v41) {
    xpc_object_t object = v41;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v41, (CFTypeRef)*MEMORY[0x1E4FB9638], v11);
  CFMutableDictionaryRef v43 = a1[5];
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v42;
    _os_log_impl(&dword_1C59C6000, v43, OS_LOG_TYPE_DEFAULT, "#I Setting Ant blocking with: %@", buf, 0xCu);
  }
  uint64_t v45 = a1[9];
  CFMutableDictionaryRef v44 = (std::__shared_weak_count *)a1[10];
  *(void *)long long buf = v45;
  if (!v44 || (CFTypeID v46 = std::__shared_weak_count::lock(v44), (*(void *)&buf[8] = v46) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v47 = v46;
  uint64_t v48 = a1[13];
  if (v42 && (CFTypeID v49 = CFGetTypeID(v42), v49 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v62 = v42;
    CFRetain(v42);
  }
  else
  {
    CFTypeRef v62 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State25handleSetAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_212;
  void aBlock[4] = a1;
  void aBlock[5] = v45;
  dispatch_object_t v59 = v47;
  atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v50 = _Block_copy(aBlock);
  CFMutableArrayRef v51 = a1[11];
  if (v51) {
    dispatch_retain(v51);
  }
  if (v50)
  {
    CFTypeRef v60 = _Block_copy(v50);
    dispatch_object_t v61 = v51;
    if (!v51) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  CFTypeRef v60 = 0;
  dispatch_object_t v61 = v51;
  if (v51) {
LABEL_85:
  }
    dispatch_retain(v51);
LABEL_86:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v48 + 48))(v48, &v62, a3, &v60);
  if (v61) {
    dispatch_release(v61);
  }
  if (v60) {
    _Block_release(v60);
  }
  if (v51) {
    dispatch_release(v51);
  }
  if (v50) {
    _Block_release(v50);
  }
  if (v62) {
    CFRelease(v62);
  }
  uint64_t v52 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  unsigned int v53 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v54 = object;
    if (!object) {
      goto LABEL_103;
    }
    goto LABEL_102;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  xpc_object_t v54 = object;
  if (object) {
LABEL_102:
  }
    CFRelease(v54);
LABEL_103:
  xpc_release(v71);
  if (v72) {
    CFRelease(v72);
  }
}

void sub_1C5A04AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,xpc_object_t a22,char a23,xpc_object_t object,xpc_object_t a25,uint64_t a26,xpc_object_t a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State25handleSetAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleTransparentMessageReq_sync(void *a1, void *a2, uint64_t a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  CFMutableArrayRef v69 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFMutableArrayRef v69 = Mutable;
  }
  xpc_object_t v68 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)long long buf = a2;
  *(void *)&uint8_t buf[8] = "kWCMCellularTransparentMessageInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v68);
  uint64_t v10 = MEMORY[0x1C8795EB0](v68);
  uint64_t v11 = MEMORY[0x1E4F14568];
  if (v10 == MEMORY[0x1E4F14568])
  {
    CFMutableArrayRef v67 = 0;
    CFMutableArrayRef v12 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
    if (v12) {
      CFMutableArrayRef v67 = v12;
    }
    memset(buf, 170, sizeof(buf));
    xpc_object_t v13 = v68;
    if (v68)
    {
      xpc_retain(v68);
      *(void *)long long buf = v13;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
      *(void *)long long buf = v13;
      if (!v13)
      {
        xpc_object_t v13 = 0;
        *(void *)long long buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v13);
LABEL_13:
    *(void *)&uint8_t buf[8] = 0;
    xpc_release(v13);
    CFMutableArrayRef v14 = (const void *)*MEMORY[0x1E4FB9810];
    CFTypeRef v54 = (CFTypeRef)*MEMORY[0x1E4FB9928];
    while (1)
    {
      xpc_object_t v15 = v68;
      if (v68) {
        xpc_retain(v68);
      }
      else {
        xpc_object_t v15 = xpc_null_create();
      }
      if (MEMORY[0x1C8795EB0](v68) == v11)
      {
        size_t count = xpc_array_get_count(v68);
        if (!v15)
        {
LABEL_23:
          xpc_object_t v17 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        size_t count = 0;
        if (!v15) {
          goto LABEL_23;
        }
      }
      xpc_retain(v15);
      xpc_object_t v17 = v15;
LABEL_24:
      xpc_release(v15);
      xpc_object_t v18 = *(xpc_object_t *)buf;
      uint64_t v19 = *(void *)&buf[8];
      xpc_release(v17);
      if (v19 == count && v18 == v17)
      {
        xpc_release(*(xpc_object_t *)buf);
        CFMutableArrayRef v39 = v67;
        CFAllocatorRef v9 = v69;
        ctu::cf::insert<__CFString const*,__CFArray *>(v69, (CFTypeRef)*MEMORY[0x1E4FB9998], v67);
        a3 = a3;
        if (v39) {
          CFRelease(v39);
        }
        break;
      }
      *(void *)uint64_t v66 = 0;
      CFMutableDictionaryRef v20 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v21 = v20;
      if (v20) {
        *(void *)uint64_t v66 = v20;
      }
      xpc_object_t object = buf;
      CFTypeRef v64 = *(const char **)&buf[8];
      xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&object, &xdict);
      xpc_object_t value = xpc_dictionary_get_value(xdict, "kWCMCellularTransparentMessage_Type");
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      unsigned int v23 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v21, v14, v23, v7);
      xpc_release(object);
      xpc_object_t xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t object = &xdict;
      CFTypeRef v64 = "kWCMCellularTransparentMessage_ByteList";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
      if (MEMORY[0x1C8795EB0](xarray) == v11)
      {
        CFTypeRef v61 = 0;
        CFMutableArrayRef v24 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
        if (v24) {
          CFTypeRef v61 = v24;
        }
        xpc_object_t v25 = xarray;
        if (xarray)
        {
          xpc_retain(xarray);
          goto LABEL_37;
        }
        xpc_object_t v25 = xpc_null_create();
        if (v25)
        {
LABEL_37:
          xpc_retain(v25);
          xpc_object_t v26 = v25;
        }
        else
        {
          xpc_object_t v25 = xpc_null_create();
          xpc_object_t v26 = 0;
        }
        xpc_release(v26);
        size_t v27 = 0;
        while (2)
        {
          xpc_object_t v29 = xarray;
          if (xarray) {
            xpc_retain(xarray);
          }
          else {
            xpc_object_t v29 = xpc_null_create();
          }
          if (MEMORY[0x1C8795EB0](xarray) == v11)
          {
            size_t v30 = xpc_array_get_count(xarray);
            if (!v29) {
              goto LABEL_48;
            }
LABEL_46:
            xpc_retain(v29);
            xpc_object_t v31 = v29;
          }
          else
          {
            size_t v30 = 0;
            if (v29) {
              goto LABEL_46;
            }
LABEL_48:
            xpc_object_t v31 = xpc_null_create();
          }
          xpc_release(v29);
          xpc_release(v31);
          if (v27 == v30 && v25 == v31)
          {
            xpc_release(v25);
            CFTypeRef v36 = v61;
            CFMutableDictionaryRef v21 = *(__CFDictionary **)v66;
            ctu::cf::insert<__CFString const*,__CFArray *>(*(__CFDictionary **)v66, v54, v61);
            if (v36) {
              CFRelease(v36);
            }
            break;
          }
          xpc_object_t v32 = xpc_array_get_value(v25, v27);
          xpc_object_t v60 = v32;
          if (v32) {
            xpc_retain(v32);
          }
          else {
            xpc_object_t v60 = xpc_null_create();
          }
          int v33 = xpc::dyn_cast_or_default((xpc *)&v60, 0);
          int v34 = (__CFArray *)v61;
          int valuePtr = v33;
          CFNumberRef v35 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
          xpc_object_t object = v35;
          if (v35)
          {
            CFArrayAppendValue(v34, v35);
            CFRelease(v35);
          }
          xpc_release(v60);
          if (v25)
          {
            xpc_retain(v25);
            xpc_object_t v28 = v25;
          }
          else
          {
            xpc_object_t v28 = xpc_null_create();
          }
          ++v27;
          xpc_release(v28);
          continue;
        }
      }
      CFTypeRef v37 = v67;
      xpc_object_t object = v21;
      if (v21)
      {
        CFRetain(v21);
        CFArrayAppendValue(v37, v21);
        CFRelease(v21);
      }
      xpc_release(xarray);
      xpc_release(xdict);
      if (v21) {
        CFRelease(v21);
      }
      xpc_object_t v38 = *(xpc_object_t *)buf;
      if (*(void *)buf) {
        xpc_retain(*(xpc_object_t *)buf);
      }
      else {
        xpc_object_t v38 = xpc_null_create();
      }
      ++*(void *)&buf[8];
      xpc_release(v38);
    }
  }
  xpc_object_t object = 0;
  CFMutableDictionaryRef v40 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v41 = v40;
  if (v40) {
    xpc_object_t object = v40;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v40, (CFTypeRef)*MEMORY[0x1E4FB98B0], v9);
  CFMutableDictionaryRef v42 = a1[5];
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v41;
    _os_log_impl(&dword_1C59C6000, v42, OS_LOG_TYPE_DEFAULT, "#I Sending transparent message reqeust: %@", buf, 0xCu);
  }
  uint64_t v44 = a1[9];
  CFMutableDictionaryRef v43 = (std::__shared_weak_count *)a1[10];
  *(void *)long long buf = v44;
  if (!v43 || (uint64_t v45 = std::__shared_weak_count::lock(v43), (*(void *)&buf[8] = v45) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeID v46 = v45;
  uint64_t v47 = a1[13];
  if (v41 && (CFTypeID v48 = CFGetTypeID(v41), v48 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v41;
    CFRetain(v41);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleTransparentMessageReq_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_218;
  void aBlock[4] = a1;
  void aBlock[5] = v44;
  CFTypeRef v56 = v46;
  atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeID v49 = _Block_copy(aBlock);
  uint64_t v50 = a1[11];
  if (v50) {
    dispatch_retain(v50);
  }
  if (v49)
  {
    CFTypeRef v57 = _Block_copy(v49);
    dispatch_object_t v58 = v50;
    if (!v50) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  CFTypeRef v57 = 0;
  dispatch_object_t v58 = v50;
  if (v50) {
LABEL_83:
  }
    dispatch_retain(v50);
LABEL_84:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v47 + 48))(v47, &cf, a3, &v57);
  if (v58) {
    dispatch_release(v58);
  }
  if (v57) {
    _Block_release(v57);
  }
  if (v50) {
    dispatch_release(v50);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFMutableArrayRef v51 = v56;
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  uint64_t v52 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v53 = object;
    if (!object) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
  std::__shared_weak_count::__release_weak(v52);
  xpc_object_t v53 = object;
  if (object) {
LABEL_100:
  }
    CFRelease(v53);
LABEL_101:
  xpc_release(v68);
  if (v69) {
    CFRelease(v69);
  }
}

void sub_1C5A05604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,xpc_object_t a22,char a23,xpc_object_t object,xpc_object_t a25,uint64_t a26,xpc_object_t a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State32handleTransparentMessageReq_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to send transparent message req: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetClientAntBlocking_sync(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1C8795EB0](*a2);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 != MEMORY[0x1E4F14590])
  {
    int v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  unsigned int v76 = a3;
  int v102 = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v11 = Mutable;
  if (Mutable) {
    int v102 = Mutable;
  }
  xpc_object_t v101 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)long long buf = a2;
  *(void *)&uint8_t buf[8] = "kWCMCellularSetAntBlocking_ClientInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v101);
  uint64_t v77 = a1;
  uint64_t v12 = MEMORY[0x1C8795EB0](v101);
  uint64_t v13 = MEMORY[0x1E4F14568];
  if (v12 == MEMORY[0x1E4F14568])
  {
    CFMutableArrayRef v100 = 0;
    CFMutableArrayRef v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (v14) {
      CFMutableArrayRef v100 = v14;
    }
    memset(buf, 170, sizeof(buf));
    xpc_object_t v15 = v101;
    if (v101)
    {
      xpc_retain(v101);
      *(void *)long long buf = v15;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      *(void *)long long buf = v15;
      if (!v15)
      {
        xpc_object_t v15 = 0;
        *(void *)long long buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(void *)&uint8_t buf[8] = 0;
    xpc_release(v15);
    CFTypeRef v80 = (CFTypeRef)*MEMORY[0x1E4FB9778];
    CFTypeRef v81 = (CFTypeRef)*MEMORY[0x1E4FB9700];
    CFTypeRef v79 = (CFTypeRef)*MEMORY[0x1E4FB9890];
    CFTypeRef v83 = (CFTypeRef)*MEMORY[0x1E4FB96A0];
    CFTypeRef v82 = (CFTypeRef)*MEMORY[0x1E4FB96F8];
    CFTypeRef v78 = (CFTypeRef)*MEMORY[0x1E4FB9888];
    while (1)
    {
      xpc_object_t v16 = v101;
      if (v101) {
        xpc_retain(v101);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      if (MEMORY[0x1C8795EB0](v101) == v13)
      {
        size_t count = xpc_array_get_count(v101);
        if (!v16)
        {
LABEL_23:
          xpc_object_t v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        size_t count = 0;
        if (!v16) {
          goto LABEL_23;
        }
      }
      xpc_retain(v16);
      xpc_object_t v18 = v16;
LABEL_24:
      xpc_release(v16);
      xpc_object_t v19 = *(xpc_object_t *)buf;
      uint64_t v20 = *(void *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        CFMutableArrayRef v61 = v100;
        uint64_t v11 = v102;
        ctu::cf::insert<__CFString const*,__CFArray *>(v102, (CFTypeRef)*MEMORY[0x1E4FB9980], v100);
        if (v61) {
          CFRelease(v61);
        }
        break;
      }
      int v99 = 0;
      CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unsigned __int8 v22 = v21;
      if (v21) {
        int v99 = v21;
      }
      p_xpc_object_t xdict = (xpc_object_t *)buf;
      uint64_t v97 = *(const char **)&buf[8];
      xpc_object_t v98 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&p_xdict, &v98);
      xpc_object_t value = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_ClientId");
      p_xpc_object_t xdict = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      unsigned int v24 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v81, v24, v9);
      xpc_release(p_xdict);
      xpc_object_t v25 = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_BlockVoice");
      p_xpc_object_t xdict = v25;
      if (v25) {
        xpc_retain(v25);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      int v26 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v22, v80, v26);
      xpc_release(p_xdict);
      size_t v27 = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_TimeMultiplier");
      p_xpc_object_t xdict = v27;
      if (v27) {
        xpc_retain(v27);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      unsigned int v28 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v79, v28, v9);
      xpc_release(p_xdict);
      xpc_object_t v95 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      p_xpc_object_t xdict = &v98;
      uint64_t v97 = "kWCMCellularSetAntBlocking_BandInformationSet";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &v95);
      if (MEMORY[0x1C8795EB0](v95) == v13)
      {
        CFTypeRef v94 = 0;
        CFMutableArrayRef v29 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
        if (v29) {
          CFTypeRef v94 = v29;
        }
        xpc_object_t v30 = v95;
        if (v95)
        {
          xpc_retain(v95);
          goto LABEL_43;
        }
        xpc_object_t v30 = xpc_null_create();
        if (v30)
        {
LABEL_43:
          xpc_retain(v30);
          xpc_object_t v31 = v30;
        }
        else
        {
          xpc_object_t v30 = xpc_null_create();
          xpc_object_t v31 = 0;
        }
        xpc_release(v31);
        size_t v32 = 0;
        while (2)
        {
          xpc_object_t v34 = v95;
          if (v95) {
            xpc_retain(v95);
          }
          else {
            xpc_object_t v34 = xpc_null_create();
          }
          if (MEMORY[0x1C8795EB0](v95) == v13)
          {
            size_t v35 = xpc_array_get_count(v95);
            if (!v34) {
              goto LABEL_54;
            }
LABEL_52:
            xpc_retain(v34);
            xpc_object_t v36 = v34;
          }
          else
          {
            size_t v35 = 0;
            if (v34) {
              goto LABEL_52;
            }
LABEL_54:
            xpc_object_t v36 = xpc_null_create();
          }
          xpc_release(v34);
          xpc_release(v36);
          if (v32 == v35 && v30 == v36)
          {
            xpc_release(v30);
            CFTypeRef v58 = v94;
            unsigned __int8 v22 = v99;
            ctu::cf::insert<__CFString const*,__CFArray *>(v99, v78, v94);
            if (v58) {
              CFRelease(v58);
            }
            goto LABEL_111;
          }
          CFTypeRef cf = 0;
          CFMutableDictionaryRef v37 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v37) {
            CFTypeRef cf = v37;
          }
          xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          xpc_object_t v38 = xpc_array_get_value(v30, v32);
          xpc_object_t v39 = v38;
          if (v38)
          {
            xpc_retain(v38);
            xpc_object_t xdict = v39;
            goto LABEL_62;
          }
          xpc_object_t v39 = xpc_null_create();
          xpc_object_t xdict = v39;
          if (v39)
          {
LABEL_62:
            if (MEMORY[0x1C8795EB0](v39) != v7)
            {
              xpc_object_t v40 = xpc_null_create();
              goto LABEL_66;
            }
            xpc_retain(v39);
          }
          else
          {
            xpc_object_t v40 = xpc_null_create();
            xpc_object_t v39 = 0;
LABEL_66:
            xpc_object_t xdict = v40;
          }
          xpc_release(v39);
          if (MEMORY[0x1C8795EB0](xdict) != v7)
          {
            CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
            goto LABEL_102;
          }
          CFMutableDictionaryRef v42 = (xpc_object_t *)xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
          p_xpc_object_t xdict = v42;
          if (v42) {
            xpc_retain(v42);
          }
          else {
            p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
          }
          unsigned __int8 v43 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
          xpc_release(p_xdict);
          CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
          ctu::cf::insert<__CFString const*,unsigned char>((__CFDictionary *)cf, v83, v43, v9);
          xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          p_xpc_object_t xdict = &xdict;
          uint64_t v97 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
          xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &object);
          if (MEMORY[0x1C8795EB0](object) != v13) {
            goto LABEL_101;
          }
          CFTypeRef v90 = 0;
          CFMutableArrayRef v44 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
          if (v44) {
            CFTypeRef v90 = v44;
          }
          xpc_object_t v45 = object;
          if (object)
          {
            xpc_retain(object);
            goto LABEL_78;
          }
          xpc_object_t v45 = xpc_null_create();
          if (v45)
          {
LABEL_78:
            xpc_retain(v45);
            CFTypeID v46 = v45;
          }
          else
          {
            xpc_object_t v45 = xpc_null_create();
            CFTypeID v46 = 0;
          }
          xpc_release(v46);
          size_t v47 = 0;
LABEL_82:
          xpc_object_t v49 = object;
          if (object) {
            xpc_retain(object);
          }
          else {
            xpc_object_t v49 = xpc_null_create();
          }
          if (MEMORY[0x1C8795EB0](object) == v13)
          {
            size_t v50 = xpc_array_get_count(object);
            if (!v49) {
              goto LABEL_89;
            }
LABEL_87:
            xpc_retain(v49);
            xpc_object_t v51 = v49;
          }
          else
          {
            size_t v50 = 0;
            if (v49) {
              goto LABEL_87;
            }
LABEL_89:
            xpc_object_t v51 = xpc_null_create();
          }
          xpc_release(v49);
          xpc_release(v51);
          if (v47 == v50 && v45 == v51)
          {
            xpc_release(v45);
            CFTypeRef v56 = v90;
            CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
            ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v82, v90);
            if (v56) {
              CFRelease(v56);
            }
LABEL_101:
            xpc_release(object);
LABEL_102:
            CFTypeRef v57 = (__CFArray *)v94;
            p_xpc_object_t xdict = v41;
            if (v41)
            {
              CFRetain(v41);
              CFArrayAppendValue(v57, v41);
              CFRelease(v41);
            }
            xpc_release(xdict);
            if (cf) {
              CFRelease(cf);
            }
            if (v30)
            {
              xpc_retain(v30);
              xpc_object_t v33 = v30;
            }
            else
            {
              xpc_object_t v33 = xpc_null_create();
            }
            ++v32;
            xpc_release(v33);
            continue;
          }
          break;
        }
        xpc_object_t v52 = xpc_array_get_value(v45, v47);
        xpc_object_t v89 = v52;
        if (v52) {
          xpc_retain(v52);
        }
        else {
          xpc_object_t v89 = xpc_null_create();
        }
        int v53 = xpc::dyn_cast_or_default((xpc *)&v89, 0);
        CFTypeRef v54 = (__CFArray *)v90;
        int valuePtr = v53;
        CFNumberRef v55 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        p_xpc_object_t xdict = (xpc_object_t *)v55;
        if (v55)
        {
          CFArrayAppendValue(v54, v55);
          CFRelease(v55);
        }
        xpc_release(v89);
        if (v45)
        {
          xpc_retain(v45);
          xpc_object_t v48 = v45;
        }
        else
        {
          xpc_object_t v48 = xpc_null_create();
        }
        ++v47;
        xpc_release(v48);
        goto LABEL_82;
      }
LABEL_111:
      dispatch_object_t v59 = v100;
      p_xpc_object_t xdict = (xpc_object_t *)v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v59, v22);
        CFRelease(v22);
      }
      xpc_release(v95);
      xpc_release(v98);
      if (v22) {
        CFRelease(v22);
      }
      xpc_object_t v60 = *(xpc_object_t *)buf;
      if (*(void *)buf) {
        xpc_retain(*(xpc_object_t *)buf);
      }
      else {
        xpc_object_t v60 = xpc_null_create();
      }
      ++*(void *)&buf[8];
      xpc_release(v60);
    }
  }
  p_xpc_object_t xdict = 0;
  CFMutableDictionaryRef v62 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v63 = v62;
  if (v62) {
    p_xpc_object_t xdict = (xpc_object_t *)v62;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v62, (CFTypeRef)*MEMORY[0x1E4FB9760], v11);
  CFTypeRef v64 = *(NSObject **)(v77 + 40);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v63;
    _os_log_impl(&dword_1C59C6000, v64, OS_LOG_TYPE_DEFAULT, "#I Setting Client Ant blocking with: %@", buf, 0xCu);
  }
  uint64_t v66 = *(void *)(v77 + 72);
  xpc_object_t v65 = *(std::__shared_weak_count **)(v77 + 80);
  *(void *)long long buf = v66;
  if (!v65 || (CFMutableArrayRef v67 = std::__shared_weak_count::lock(v65), (*(void *)&buf[8] = v67) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v68 = v67;
  uint64_t v69 = *(void *)(v77 + 104);
  if (v63 && (CFTypeID v70 = CFGetTypeID(v63), v70 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v88 = v63;
    CFRetain(v63);
  }
  else
  {
    CFTypeRef v88 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State31handleSetClientAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_225;
  void aBlock[4] = v77;
  void aBlock[5] = v66;
  CFArrayRef v85 = v68;
  atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v71 = _Block_copy(aBlock);
  uint64_t v72 = *(NSObject **)(v77 + 88);
  if (v72) {
    dispatch_retain(*(dispatch_object_t *)(v77 + 88));
  }
  if (v71)
  {
    int v86 = _Block_copy(v71);
    dispatch_object_t v87 = v72;
    if (!v72) {
      goto LABEL_135;
    }
    goto LABEL_134;
  }
  int v86 = 0;
  dispatch_object_t v87 = v72;
  if (v72) {
LABEL_134:
  }
    dispatch_retain(v72);
LABEL_135:
  (*(void (**)(uint64_t, CFTypeRef *, void, void **))(*(void *)v69 + 48))(v69, &v88, v76, &v86);
  if (v87) {
    dispatch_release(v87);
  }
  if (v86) {
    _Block_release(v86);
  }
  if (v72) {
    dispatch_release(v72);
  }
  if (v71) {
    _Block_release(v71);
  }
  if (v88) {
    CFRelease(v88);
  }
  uint64_t v73 = v85;
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  size_t v74 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v75 = p_xdict;
    if (!p_xdict) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }
  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = p_xdict;
  if (p_xdict) {
LABEL_151:
  }
    CFRelease(v75);
LABEL_152:
  xpc_release(v101);
  if (v102) {
    CFRelease(v102);
  }
}

void sub_1C5A064C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,xpc_object_t a28,char a29,xpc_object_t object,xpc_object_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State31handleSetClientAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetClientAntBlockingExtended_sync(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1C8795EB0](*a2);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 != MEMORY[0x1E4F14590])
  {
    int v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "Invalid XPC dict", buf, 2u);
    }
    return;
  }
  unsigned int v76 = a3;
  int v102 = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v11 = Mutable;
  if (Mutable) {
    int v102 = Mutable;
  }
  xpc_object_t v101 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)long long buf = a2;
  *(void *)&uint8_t buf[8] = "kWCMCellularSetAntBlocking_ClientInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v101);
  uint64_t v77 = a1;
  uint64_t v12 = MEMORY[0x1C8795EB0](v101);
  uint64_t v13 = MEMORY[0x1E4F14568];
  if (v12 == MEMORY[0x1E4F14568])
  {
    CFMutableArrayRef v100 = 0;
    CFMutableArrayRef v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (v14) {
      CFMutableArrayRef v100 = v14;
    }
    memset(buf, 170, sizeof(buf));
    xpc_object_t v15 = v101;
    if (v101)
    {
      xpc_retain(v101);
      *(void *)long long buf = v15;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      *(void *)long long buf = v15;
      if (!v15)
      {
        xpc_object_t v15 = 0;
        *(void *)long long buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(void *)&uint8_t buf[8] = 0;
    xpc_release(v15);
    CFTypeRef v80 = (CFTypeRef)*MEMORY[0x1E4FB9778];
    CFTypeRef v81 = (CFTypeRef)*MEMORY[0x1E4FB9700];
    CFTypeRef v79 = (CFTypeRef)*MEMORY[0x1E4FB9890];
    CFTypeRef v83 = (CFTypeRef)*MEMORY[0x1E4FB96A0];
    CFTypeRef v82 = (CFTypeRef)*MEMORY[0x1E4FB96F8];
    CFTypeRef v78 = (CFTypeRef)*MEMORY[0x1E4FB9888];
    while (1)
    {
      xpc_object_t v16 = v101;
      if (v101) {
        xpc_retain(v101);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      if (MEMORY[0x1C8795EB0](v101) == v13)
      {
        size_t count = xpc_array_get_count(v101);
        if (!v16)
        {
LABEL_23:
          xpc_object_t v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        size_t count = 0;
        if (!v16) {
          goto LABEL_23;
        }
      }
      xpc_retain(v16);
      xpc_object_t v18 = v16;
LABEL_24:
      xpc_release(v16);
      xpc_object_t v19 = *(xpc_object_t *)buf;
      uint64_t v20 = *(void *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        CFMutableArrayRef v61 = v100;
        uint64_t v11 = v102;
        ctu::cf::insert<__CFString const*,__CFArray *>(v102, (CFTypeRef)*MEMORY[0x1E4FB9980], v100);
        if (v61) {
          CFRelease(v61);
        }
        break;
      }
      int v99 = 0;
      CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unsigned __int8 v22 = v21;
      if (v21) {
        int v99 = v21;
      }
      p_xpc_object_t xdict = (xpc_object_t *)buf;
      uint64_t v97 = *(const char **)&buf[8];
      xpc_object_t v98 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&p_xdict, &v98);
      xpc_object_t value = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_ClientId");
      p_xpc_object_t xdict = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      unsigned int v24 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v81, v24, v9);
      xpc_release(p_xdict);
      xpc_object_t v25 = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_BlockVoice");
      p_xpc_object_t xdict = v25;
      if (v25) {
        xpc_retain(v25);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      int v26 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v22, v80, v26);
      xpc_release(p_xdict);
      size_t v27 = (xpc_object_t *)xpc_dictionary_get_value(v98, "kWCMCellularSetAntBlocking_TimeMultiplier");
      p_xpc_object_t xdict = v27;
      if (v27) {
        xpc_retain(v27);
      }
      else {
        p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
      }
      unsigned int v28 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v79, v28, v9);
      xpc_release(p_xdict);
      xpc_object_t v95 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      p_xpc_object_t xdict = &v98;
      uint64_t v97 = "kWCMCellularSetAntBlocking_BandInformationSet";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &v95);
      if (MEMORY[0x1C8795EB0](v95) == v13)
      {
        CFTypeRef v94 = 0;
        CFMutableArrayRef v29 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
        if (v29) {
          CFTypeRef v94 = v29;
        }
        xpc_object_t v30 = v95;
        if (v95)
        {
          xpc_retain(v95);
          goto LABEL_43;
        }
        xpc_object_t v30 = xpc_null_create();
        if (v30)
        {
LABEL_43:
          xpc_retain(v30);
          xpc_object_t v31 = v30;
        }
        else
        {
          xpc_object_t v30 = xpc_null_create();
          xpc_object_t v31 = 0;
        }
        xpc_release(v31);
        size_t v32 = 0;
        while (2)
        {
          xpc_object_t v34 = v95;
          if (v95) {
            xpc_retain(v95);
          }
          else {
            xpc_object_t v34 = xpc_null_create();
          }
          if (MEMORY[0x1C8795EB0](v95) == v13)
          {
            size_t v35 = xpc_array_get_count(v95);
            if (!v34) {
              goto LABEL_54;
            }
LABEL_52:
            xpc_retain(v34);
            xpc_object_t v36 = v34;
          }
          else
          {
            size_t v35 = 0;
            if (v34) {
              goto LABEL_52;
            }
LABEL_54:
            xpc_object_t v36 = xpc_null_create();
          }
          xpc_release(v34);
          xpc_release(v36);
          if (v32 == v35 && v30 == v36)
          {
            xpc_release(v30);
            CFTypeRef v58 = v94;
            unsigned __int8 v22 = v99;
            ctu::cf::insert<__CFString const*,__CFArray *>(v99, v78, v94);
            if (v58) {
              CFRelease(v58);
            }
            goto LABEL_111;
          }
          CFTypeRef cf = 0;
          CFMutableDictionaryRef v37 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v37) {
            CFTypeRef cf = v37;
          }
          xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          xpc_object_t v38 = xpc_array_get_value(v30, v32);
          xpc_object_t v39 = v38;
          if (v38)
          {
            xpc_retain(v38);
            xpc_object_t xdict = v39;
            goto LABEL_62;
          }
          xpc_object_t v39 = xpc_null_create();
          xpc_object_t xdict = v39;
          if (v39)
          {
LABEL_62:
            if (MEMORY[0x1C8795EB0](v39) != v7)
            {
              xpc_object_t v40 = xpc_null_create();
              goto LABEL_66;
            }
            xpc_retain(v39);
          }
          else
          {
            xpc_object_t v40 = xpc_null_create();
            xpc_object_t v39 = 0;
LABEL_66:
            xpc_object_t xdict = v40;
          }
          xpc_release(v39);
          if (MEMORY[0x1C8795EB0](xdict) != v7)
          {
            CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
            goto LABEL_102;
          }
          CFMutableDictionaryRef v42 = (xpc_object_t *)xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
          p_xpc_object_t xdict = v42;
          if (v42) {
            xpc_retain(v42);
          }
          else {
            p_xpc_object_t xdict = (xpc_object_t *)xpc_null_create();
          }
          unsigned __int8 v43 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
          xpc_release(p_xdict);
          CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
          ctu::cf::insert<__CFString const*,unsigned char>((__CFDictionary *)cf, v83, v43, v9);
          xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          p_xpc_object_t xdict = &xdict;
          uint64_t v97 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
          xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &object);
          if (MEMORY[0x1C8795EB0](object) != v13) {
            goto LABEL_101;
          }
          CFTypeRef v90 = 0;
          CFMutableArrayRef v44 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
          if (v44) {
            CFTypeRef v90 = v44;
          }
          xpc_object_t v45 = object;
          if (object)
          {
            xpc_retain(object);
            goto LABEL_78;
          }
          xpc_object_t v45 = xpc_null_create();
          if (v45)
          {
LABEL_78:
            xpc_retain(v45);
            CFTypeID v46 = v45;
          }
          else
          {
            xpc_object_t v45 = xpc_null_create();
            CFTypeID v46 = 0;
          }
          xpc_release(v46);
          size_t v47 = 0;
LABEL_82:
          xpc_object_t v49 = object;
          if (object) {
            xpc_retain(object);
          }
          else {
            xpc_object_t v49 = xpc_null_create();
          }
          if (MEMORY[0x1C8795EB0](object) == v13)
          {
            size_t v50 = xpc_array_get_count(object);
            if (!v49) {
              goto LABEL_89;
            }
LABEL_87:
            xpc_retain(v49);
            xpc_object_t v51 = v49;
          }
          else
          {
            size_t v50 = 0;
            if (v49) {
              goto LABEL_87;
            }
LABEL_89:
            xpc_object_t v51 = xpc_null_create();
          }
          xpc_release(v49);
          xpc_release(v51);
          if (v47 == v50 && v45 == v51)
          {
            xpc_release(v45);
            CFTypeRef v56 = v90;
            CFMutableDictionaryRef v41 = (xpc_object_t *)cf;
            ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v82, v90);
            if (v56) {
              CFRelease(v56);
            }
LABEL_101:
            xpc_release(object);
LABEL_102:
            CFTypeRef v57 = (__CFArray *)v94;
            p_xpc_object_t xdict = v41;
            if (v41)
            {
              CFRetain(v41);
              CFArrayAppendValue(v57, v41);
              CFRelease(v41);
            }
            xpc_release(xdict);
            if (cf) {
              CFRelease(cf);
            }
            if (v30)
            {
              xpc_retain(v30);
              xpc_object_t v33 = v30;
            }
            else
            {
              xpc_object_t v33 = xpc_null_create();
            }
            ++v32;
            xpc_release(v33);
            continue;
          }
          break;
        }
        xpc_object_t v52 = xpc_array_get_value(v45, v47);
        xpc_object_t v89 = v52;
        if (v52) {
          xpc_retain(v52);
        }
        else {
          xpc_object_t v89 = xpc_null_create();
        }
        int v53 = xpc::dyn_cast_or_default((xpc *)&v89, 0);
        CFTypeRef v54 = (__CFArray *)v90;
        int valuePtr = v53;
        CFNumberRef v55 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        p_xpc_object_t xdict = (xpc_object_t *)v55;
        if (v55)
        {
          CFArrayAppendValue(v54, v55);
          CFRelease(v55);
        }
        xpc_release(v89);
        if (v45)
        {
          xpc_retain(v45);
          xpc_object_t v48 = v45;
        }
        else
        {
          xpc_object_t v48 = xpc_null_create();
        }
        ++v47;
        xpc_release(v48);
        goto LABEL_82;
      }
LABEL_111:
      dispatch_object_t v59 = v100;
      p_xpc_object_t xdict = (xpc_object_t *)v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v59, v22);
        CFRelease(v22);
      }
      xpc_release(v95);
      xpc_release(v98);
      if (v22) {
        CFRelease(v22);
      }
      xpc_object_t v60 = *(xpc_object_t *)buf;
      if (*(void *)buf) {
        xpc_retain(*(xpc_object_t *)buf);
      }
      else {
        xpc_object_t v60 = xpc_null_create();
      }
      ++*(void *)&buf[8];
      xpc_release(v60);
    }
  }
  p_xpc_object_t xdict = 0;
  CFMutableDictionaryRef v62 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v63 = v62;
  if (v62) {
    p_xpc_object_t xdict = (xpc_object_t *)v62;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v62, (CFTypeRef)*MEMORY[0x1E4FB9938], v11);
  CFTypeRef v64 = *(NSObject **)(v77 + 40);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v63;
    _os_log_impl(&dword_1C59C6000, v64, OS_LOG_TYPE_DEFAULT, "#I Setting Client Ant blocking Extended with: %@ ", buf, 0xCu);
  }
  uint64_t v66 = *(void *)(v77 + 72);
  xpc_object_t v65 = *(std::__shared_weak_count **)(v77 + 80);
  *(void *)long long buf = v66;
  if (!v65 || (CFMutableArrayRef v67 = std::__shared_weak_count::lock(v65), (*(void *)&buf[8] = v67) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v68 = v67;
  uint64_t v69 = *(void *)(v77 + 104);
  if (v63 && (CFTypeID v70 = CFGetTypeID(v63), v70 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v88 = v63;
    CFRetain(v63);
  }
  else
  {
    CFTypeRef v88 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State39handleSetClientAntBlockingExtended_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_228;
  void aBlock[4] = v77;
  void aBlock[5] = v66;
  CFArrayRef v85 = v68;
  atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v71 = _Block_copy(aBlock);
  uint64_t v72 = *(NSObject **)(v77 + 88);
  if (v72) {
    dispatch_retain(*(dispatch_object_t *)(v77 + 88));
  }
  if (v71)
  {
    int v86 = _Block_copy(v71);
    dispatch_object_t v87 = v72;
    if (!v72) {
      goto LABEL_135;
    }
    goto LABEL_134;
  }
  int v86 = 0;
  dispatch_object_t v87 = v72;
  if (v72) {
LABEL_134:
  }
    dispatch_retain(v72);
LABEL_135:
  (*(void (**)(uint64_t, CFTypeRef *, void, void **))(*(void *)v69 + 48))(v69, &v88, v76, &v86);
  if (v87) {
    dispatch_release(v87);
  }
  if (v86) {
    _Block_release(v86);
  }
  if (v72) {
    dispatch_release(v72);
  }
  if (v71) {
    _Block_release(v71);
  }
  if (v88) {
    CFRelease(v88);
  }
  uint64_t v73 = v85;
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  size_t v74 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v75 = p_xdict;
    if (!p_xdict) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }
  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
  std::__shared_weak_count::__release_weak(v74);
  uint64_t v75 = p_xdict;
  if (p_xdict) {
LABEL_151:
  }
    CFRelease(v75);
LABEL_152:
  xpc_release(v101);
  if (v102) {
    CFRelease(v102);
  }
}

void sub_1C5A074C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,xpc_object_t a28,char a29,xpc_object_t object,xpc_object_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State39handleSetClientAntBlockingExtended_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking Extended: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleTriggerAntennaBlocking_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  CFTypeRef v36 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFTypeRef v36 = Mutable;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Enable");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9878], v11);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_ClientID");
  *(void *)&long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB98E8], v13, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Duration"))
  {
    xpc_object_t v14 = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Duration");
    *(void *)&long long buf = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    unsigned int v15 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB98F0], v15, v7);
    xpc_release((xpc_object_t)buf);
  }
  CFTypeRef v35 = 0;
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v17 = v16;
  if (v16) {
    CFTypeRef v35 = v16;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E4FB96E8], v9);
  xpc_object_t v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I Triggering client antenna blocking with params: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v20 = a1[9];
  xpc_object_t v19 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v20;
  if (!v19 || (CFMutableDictionaryRef v21 = std::__shared_weak_count::lock(v19), (*((void *)&buf + 1) = v21) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned __int8 v22 = v21;
  uint64_t v23 = a1[13];
  if (v17 && (CFTypeID v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v17;
    CFRetain(v17);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1174405120;
  v30[2] = ___ZN4coex6Module5State33handleTriggerAntennaBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v30[3] = &__block_descriptor_tmp_234;
  void v30[4] = a1;
  v30[5] = v20;
  xpc_object_t v31 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v25 = _Block_copy(v30);
  int v26 = a1[11];
  if (v26) {
    dispatch_retain(v26);
  }
  if (v25)
  {
    aBlocuint64_t k = _Block_copy(v25);
    dispatch_object_t object = v26;
    if (!v26) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  aBlocuint64_t k = 0;
  dispatch_object_t object = v26;
  if (v26) {
LABEL_31:
  }
    dispatch_retain(v26);
LABEL_32:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  size_t v27 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unsigned int v28 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v29 = v35;
    if (!v35) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  CFTypeRef v29 = v35;
  if (v35) {
LABEL_48:
  }
    CFRelease(v29);
LABEL_49:
  if (v36) {
    CFRelease(v36);
  }
}

void sub_1C5A07DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State33handleTriggerAntennaBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to trigger antenna blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetCC1_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  CFTypeRef v41 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFTypeRef v41 = Mutable;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Enable");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9540], v11);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CoexTech");
  *(void *)&long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9518], v13, v7);
  xpc_release((xpc_object_t)buf);
  *(void *)&long long buf = xpc_int64_create(a3);
  if (!(void)buf) {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB95F0], v14, v7);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v15 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CarrierId");
  *(void *)&long long buf = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned __int8 v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9548], v16, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency")
    && xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth"))
  {
    xpc_object_t v17 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency");
    *(void *)&long long buf = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    unsigned int v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9658], v18, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v19 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth");
    *(void *)&long long buf = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    unsigned int v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9538], v20, v7);
    xpc_release((xpc_object_t)buf);
  }
  CFTypeRef v40 = 0;
  CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v22 = v21;
  if (v21) {
    CFTypeRef v40 = v21;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v21, (CFTypeRef)*MEMORY[0x1E4FB9558], v9);
  uint64_t v23 = a1[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Setting CC1 with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v25 = a1[9];
  CFTypeID v24 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v25;
  if (!v24 || (int v26 = std::__shared_weak_count::lock(v24), (*((void *)&buf + 1) = v26) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v27 = v26;
  uint64_t v28 = a1[13];
  if (v22 && (CFTypeID v29 = CFGetTypeID(v22), v29 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v22;
    CFRetain(v22);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1174405120;
  v35[2] = ___ZN4coex6Module5State17handleSetCC1_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v35[3] = &__block_descriptor_tmp_242;
  v35[4] = a1;
  v35[5] = v25;
  CFTypeRef v36 = v27;
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v30 = _Block_copy(v35);
  xpc_object_t v31 = a1[11];
  if (v31) {
    dispatch_retain(v31);
  }
  if (v30)
  {
    aBlocuint64_t k = _Block_copy(v30);
    dispatch_object_t object = v31;
    if (!v31) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  aBlocuint64_t k = 0;
  dispatch_object_t object = v31;
  if (v31) {
LABEL_40:
  }
    dispatch_retain(v31);
LABEL_41:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v28 + 48))(v28, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v31) {
    dispatch_release(v31);
  }
  if (v30) {
    _Block_release(v30);
  }
  if (cf) {
    CFRelease(cf);
  }
  size_t v32 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  xpc_object_t v33 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v34 = v40;
    if (!v40) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  CFTypeRef v34 = v40;
  if (v40) {
LABEL_57:
  }
    CFRelease(v34);
LABEL_58:
  if (v41) {
    CFRelease(v41);
  }
}

void sub_1C5A08560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State17handleSetCC1_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set CC1: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetCC2_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  CFTypeRef v41 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFTypeRef v41 = Mutable;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Enable");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9540], v11);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CoexTech");
  *(void *)&long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9518], v13, v7);
  xpc_release((xpc_object_t)buf);
  *(void *)&long long buf = xpc_int64_create(a3);
  if (!(void)buf) {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB95F0], v14, v7);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v15 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CarrierId");
  *(void *)&long long buf = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned __int8 v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E4FB9548], v16, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency")
    && xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth"))
  {
    xpc_object_t v17 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency");
    *(void *)&long long buf = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    unsigned int v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9658], v18, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v19 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth");
    *(void *)&long long buf = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    unsigned int v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9538], v20, v7);
    xpc_release((xpc_object_t)buf);
  }
  CFTypeRef v40 = 0;
  CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v22 = v21;
  if (v21) {
    CFTypeRef v40 = v21;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v21, (CFTypeRef)*MEMORY[0x1E4FB9560], v9);
  uint64_t v23 = a1[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Setting CC2 with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v25 = a1[9];
  CFTypeID v24 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v25;
  if (!v24 || (int v26 = std::__shared_weak_count::lock(v24), (*((void *)&buf + 1) = v26) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v27 = v26;
  uint64_t v28 = a1[13];
  if (v22 && (CFTypeID v29 = CFGetTypeID(v22), v29 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v22;
    CFRetain(v22);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1174405120;
  v35[2] = ___ZN4coex6Module5State17handleSetCC2_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v35[3] = &__block_descriptor_tmp_245;
  v35[4] = a1;
  v35[5] = v25;
  CFTypeRef v36 = v27;
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v30 = _Block_copy(v35);
  xpc_object_t v31 = a1[11];
  if (v31) {
    dispatch_retain(v31);
  }
  if (v30)
  {
    aBlocuint64_t k = _Block_copy(v30);
    dispatch_object_t object = v31;
    if (!v31) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  aBlocuint64_t k = 0;
  dispatch_object_t object = v31;
  if (v31) {
LABEL_40:
  }
    dispatch_retain(v31);
LABEL_41:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v28 + 48))(v28, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v31) {
    dispatch_release(v31);
  }
  if (v30) {
    _Block_release(v30);
  }
  if (cf) {
    CFRelease(cf);
  }
  size_t v32 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  xpc_object_t v33 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v34 = v40;
    if (!v40) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  CFTypeRef v34 = v40;
  if (v40) {
LABEL_57:
  }
    CFRelease(v34);
LABEL_58:
  if (v41) {
    CFRelease(v41);
  }
}

void sub_1C5A08D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State17handleSetCC2_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set CC2: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetLaaGpioThrottle_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  CFTypeRef v34 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFTypeRef v34 = Mutable;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetLaaGpioThrottleReq_Enabled");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB97E8], v11);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLaaGpioThrottleReq_Periodicity");
  *(void *)&long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB98E0], v13, v7);
  xpc_release((xpc_object_t)buf);
  CFTypeRef v33 = 0;
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v15 = v14;
  if (v14) {
    CFTypeRef v33 = v14;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v14, (CFTypeRef)*MEMORY[0x1E4FB97C8], v9);
  unsigned __int8 v16 = a1[5];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Setting LAA GPIO throttle with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v18 = a1[9];
  xpc_object_t v17 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v18;
  if (!v17 || (xpc_object_t v19 = std::__shared_weak_count::lock(v17), (*((void *)&buf + 1) = v19) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v20 = v19;
  uint64_t v21 = a1[13];
  if (v15 && (CFTypeID v22 = CFGetTypeID(v15), v22 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v15;
    CFRetain(v15);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 1174405120;
  v28[2] = ___ZN4coex6Module5State29handleSetLaaGpioThrottle_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v28[3] = &__block_descriptor_tmp_250;
  v28[4] = a1;
  v28[5] = v18;
  CFTypeID v29 = v20;
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v23 = _Block_copy(v28);
  CFTypeID v24 = a1[11];
  if (v24) {
    dispatch_retain(v24);
  }
  if (v23)
  {
    aBlocuint64_t k = _Block_copy(v23);
    dispatch_object_t object = v24;
    if (!v24) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  aBlocuint64_t k = 0;
  dispatch_object_t object = v24;
  if (v24) {
LABEL_26:
  }
    dispatch_retain(v24);
LABEL_27:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v21 + 48))(v21, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v24) {
    dispatch_release(v24);
  }
  if (v23) {
    _Block_release(v23);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v25 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  int v26 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v27 = v33;
    if (!v33) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  CFTypeRef v27 = v33;
  if (v33) {
LABEL_43:
  }
    CFRelease(v27);
LABEL_44:
  if (v34) {
    CFRelease(v34);
  }
}

void sub_1C5A093F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State29handleSetLaaGpioThrottle_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set LAA GPIO throttle: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetGnssParams_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  CFTypeRef v36 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v9 = Mutable;
  if (Mutable) {
    CFTypeRef v36 = Mutable;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_Enabled");
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9580], v11);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_Band");
  *(void *)&long long buf = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB94F8], v13, v7);
  xpc_release((xpc_object_t)buf);
  xpc_object_t v14 = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_L5Level");
  *(void *)&long long buf = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  unsigned int v15 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9588], v15, v7);
  xpc_release((xpc_object_t)buf);
  CFTypeRef v35 = 0;
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v17 = v16;
  if (v16) {
    CFTypeRef v35 = v16;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E4FB9688], v9);
  uint64_t v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting Gnss params with: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v20 = a1[9];
  xpc_object_t v19 = (std::__shared_weak_count *)a1[10];
  *(void *)&long long buf = v20;
  if (!v19 || (uint64_t v21 = std::__shared_weak_count::lock(v19), (*((void *)&buf + 1) = v21) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeID v22 = v21;
  uint64_t v23 = a1[13];
  if (v17 && (CFTypeID v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v17;
    CFRetain(v17);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1174405120;
  v30[2] = ___ZN4coex6Module5State24handleSetGnssParams_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v30[3] = &__block_descriptor_tmp_256;
  void v30[4] = a1;
  v30[5] = v20;
  xpc_object_t v31 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v25 = _Block_copy(v30);
  int v26 = a1[11];
  if (v26) {
    dispatch_retain(v26);
  }
  if (v25)
  {
    aBlocuint64_t k = _Block_copy(v25);
    dispatch_object_t object = v26;
    if (!v26) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  aBlocuint64_t k = 0;
  dispatch_object_t object = v26;
  if (v26) {
LABEL_29:
  }
    dispatch_retain(v26);
LABEL_30:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef v27 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v29 = v35;
    if (!v35) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  CFTypeRef v29 = v35;
  if (v35) {
LABEL_46:
  }
    CFRelease(v29);
LABEL_47:
  if (v36) {
    CFRelease(v36);
  }
}

void sub_1C5A09A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State24handleSetGnssParams_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Gnss params: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetLAAConfig_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_CoexEnable"))
  {
    CFTypeRef v43 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFAllocatorRef v9 = Mutable;
    if (Mutable) {
      CFTypeRef v43 = Mutable;
    }
    xpc_object_t value = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_CoexEnable");
    *(void *)&long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v12 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E4FB9748], v12);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ProtectCQIPeriod");
    *(void *)&long long buf = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E4FB98A0], v14, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v15 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ThresholdIn");
    *(void *)&long long buf = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9750], v16, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v17 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ThresholdOut");
    *(void *)&long long buf = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E4FB97A8], v18, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v19 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_DeactTimer");
    *(void *)&long long buf = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9718], v20, v7);
    xpc_release((xpc_object_t)buf);
    xpc_object_t v21 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_DeactStopTimer");
    *(void *)&long long buf = v21;
    if (v21) {
      xpc_retain(v21);
    }
    else {
      *(void *)&long long buf = xpc_null_create();
    }
    int v22 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E4FB9828], v22, v7);
    xpc_release((xpc_object_t)buf);
    CFTypeRef v42 = 0;
    CFMutableDictionaryRef v23 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v24 = v23;
    if (v23) {
      CFTypeRef v42 = v23;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v23, (CFTypeRef)*MEMORY[0x1E4FB95E0], v9);
    uint64_t v25 = a1[5];
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1C59C6000, v25, OS_LOG_TYPE_DEFAULT, "#I Setting LAA config with: %@", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v27 = a1[9];
    int v26 = (std::__shared_weak_count *)a1[10];
    *(void *)&long long buf = v27;
    if (!v26 || (uint64_t v28 = std::__shared_weak_count::lock(v26), (*((void *)&buf + 1) = v28) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    CFTypeRef v29 = v28;
    uint64_t v30 = a1[13];
    if (v24 && (CFTypeID v31 = CFGetTypeID(v24), v31 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v24;
      CFRetain(v24);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 1174405120;
    v37[2] = ___ZN4coex6Module5State23handleSetLAAConfig_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    v37[3] = &__block_descriptor_tmp_265;
    v37[4] = a1;
    v37[5] = v27;
    uint64_t v38 = v29;
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v32 = _Block_copy(v37);
    CFTypeRef v33 = a1[11];
    if (v33) {
      dispatch_retain(v33);
    }
    if (v32)
    {
      aBlocuint64_t k = _Block_copy(v32);
      dispatch_object_t object = v33;
      if (!v33) {
        goto LABEL_43;
      }
    }
    else
    {
      aBlocuint64_t k = 0;
      dispatch_object_t object = v33;
      if (!v33)
      {
LABEL_43:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v30 + 48))(v30, &cf, a3, &aBlock);
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v33) {
          dispatch_release(v33);
        }
        if (v32) {
          _Block_release(v32);
        }
        if (cf) {
          CFRelease(cf);
        }
        CFTypeRef v34 = v38;
        if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        CFTypeRef v35 = (std::__shared_weak_count *)*((void *)&buf + 1);
        if (*((void *)&buf + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
          CFTypeRef v36 = v42;
          if (!v42)
          {
LABEL_60:
            if (v43) {
              CFRelease(v43);
            }
            return;
          }
        }
        else
        {
          CFTypeRef v36 = v42;
          if (!v42) {
            goto LABEL_60;
          }
        }
        CFRelease(v36);
        goto LABEL_60;
      }
    }
    dispatch_retain(v33);
    goto LABEL_43;
  }
  int v11 = a1[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing LAA config", (uint8_t *)&buf, 2u);
  }
}

void sub_1C5A0A238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State23handleSetLAAConfig_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set LAA config: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetFCMBCMAntennaMode_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "WCMCellularSetFCM_BCM_Antenna_Switching_RAT"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, "WCMCellularSetFCM_BCM_Antenna_Switching_RAT");
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned int v9 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v44 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(void *)long long buf = a2;
    xpc_object_t v39 = (uint8_t *)"WCMCellularSetFCM_BCM_Antenna_Switching_PortMapInformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v44);
    *(void *)long long buf = 0;
    xpc_object_t v39 = buf;
    uint64_t v40 = 0x3002000000;
    CFTypeRef v41 = __Block_byref_object_copy__0;
    CFTypeRef v42 = __Block_byref_object_dispose__0;
    CFTypeRef cf = 0;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFTypeRef v12 = cf;
      CFTypeRef cf = Mutable;
      if (v12) {
        CFRelease(v12);
      }
    }
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 0x40000000;
    applier[2] = ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    applier[3] = &unk_1E651AEE0;
    applier[4] = buf;
    xpc_array_apply(v44, applier);
    if (!CFArrayGetCount(*((CFArrayRef *)v39 + 5)))
    {
      uint64_t v28 = a1[5];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v45) = 0;
        _os_log_debug_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_DEBUG, "#D Empty port map passed for FCM BCM Antenna mode", (uint8_t *)&v45, 2u);
        _Block_object_dispose(buf, 8);
        CFTypeRef v29 = cf;
        if (!cf) {
          goto LABEL_54;
        }
        goto LABEL_53;
      }
LABEL_52:
      _Block_object_dispose(buf, 8);
      CFTypeRef v29 = cf;
      if (!cf)
      {
LABEL_54:
        xpc_release(v44);
        return;
      }
LABEL_53:
      CFRelease(v29);
      goto LABEL_54;
    }
    CFTypeRef v36 = 0;
    CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v14 = v13;
    if (v13) {
      CFTypeRef v36 = v13;
    }
    ctu::cf::insert<__CFString const*,unsigned int>(v13, (CFTypeRef)*MEMORY[0x1E4FB9898], v9, v10);
    ctu::cf::insert<__CFString const*,__CFArray *>(v14, (CFTypeRef)*MEMORY[0x1E4FB99A0], *((CFTypeRef *)v39 + 5));
    CFTypeRef v35 = 0;
    CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v16 = v15;
    if (v15) {
      CFTypeRef v35 = v15;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v15, (CFTypeRef)*MEMORY[0x1E4FB9768], v14);
    xpc_object_t v17 = a1[5];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v45) = 138412290;
      *(void *)((char *)&v45 + 4) = v16;
      _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I Setting FCM BCM Antenna mode with: %@", (uint8_t *)&v45, 0xCu);
    }
    uint64_t v19 = a1[9];
    int v18 = (std::__shared_weak_count *)a1[10];
    *(void *)&long long v45 = v19;
    if (!v18 || (int v20 = std::__shared_weak_count::lock(v18), (*((void *)&v45 + 1) = v20) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v21 = v20;
    uint64_t v22 = a1[13];
    if (v16 && (CFTypeID v23 = CFGetTypeID(v16), v23 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v34 = v16;
      CFRetain(v16);
    }
    else
    {
      CFTypeRef v34 = 0;
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke_272;
    aBlock[3] = &__block_descriptor_tmp_275;
    void aBlock[4] = a1;
    void aBlock[5] = v19;
    CFTypeID v31 = v21;
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    CFMutableDictionaryRef v24 = _Block_copy(aBlock);
    uint64_t v25 = a1[11];
    if (v25) {
      dispatch_retain(v25);
    }
    if (v24)
    {
      size_t v32 = _Block_copy(v24);
      dispatch_object_t object = v25;
      if (!v25)
      {
LABEL_31:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v22 + 48))(v22, &v34, a3, &v32);
        if (object) {
          dispatch_release(object);
        }
        if (v32) {
          _Block_release(v32);
        }
        if (v25) {
          dispatch_release(v25);
        }
        if (v24) {
          _Block_release(v24);
        }
        if (v34) {
          CFRelease(v34);
        }
        int v26 = v31;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        uint64_t v27 = (std::__shared_weak_count *)*((void *)&v45 + 1);
        if (*((void *)&v45 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v45 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        if (v35) {
          CFRelease(v35);
        }
        if (v36) {
          CFRelease(v36);
        }
        goto LABEL_52;
      }
    }
    else
    {
      size_t v32 = 0;
      dispatch_object_t object = v25;
      if (!v25) {
        goto LABEL_31;
      }
    }
    dispatch_retain(v25);
    goto LABEL_31;
  }
  int v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#E Invalid RAT option passed for FCM BCM Antenna mode", buf, 2u);
  }
}

void sub_1C5A0AA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, int a2, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v4 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    xpc_object_t v5 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
LABEL_8:
  xpc_release(v4);
  CFMutableDictionaryRef v13 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFMutableDictionaryRef v13 = Mutable;
  }
  if (xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Band")
    && xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Port"))
  {
    xpc_object_t value = (ctu *)xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Band");
    ctu::xpc_to_cf((uint64_t *)&cf, value, v8);
    ctu::cf::insert<__CFString const*,void const*>(v13, (CFTypeRef)*MEMORY[0x1E4FB98C8], cf);
    if (cf) {
      CFRelease(cf);
    }
    unsigned int v9 = (ctu *)xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Port");
    ctu::xpc_to_cf((uint64_t *)&cf, v9, v10);
    ctu::cf::insert<__CFString const*,void const*>(v13, (CFTypeRef)*MEMORY[0x1E4FB98D0], cf);
    if (cf) {
      CFRelease(cf);
    }
    int v11 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFTypeRef cf = v13;
    if (v13)
    {
      CFRetain(v13);
      CFArrayAppendValue(v11, v13);
      CFRelease(v13);
    }
  }
  if (v13) {
    CFRelease(v13);
  }
  xpc_release(v5);
  return 1;
}

void sub_1C5A0ACF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke_272(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set FCM BCM Antenna mode: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetRC1DurationParam_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularRC1Duration"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, "kWCMCellularRC1Duration");
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned int v9 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    CFTypeRef v33 = 0;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v12 = Mutable;
    if (Mutable) {
      CFTypeRef v33 = Mutable;
    }
    ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB95C8], v9, v10);
    CFTypeRef v32 = 0;
    CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v14 = v13;
    if (v13) {
      CFTypeRef v32 = v13;
    }
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v13, (CFTypeRef)*MEMORY[0x1E4FB9648], v12);
    CFMutableDictionaryRef v15 = a1[5];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I Setting RC1 duration to %u", buf, 8u);
    }
    uint64_t v17 = a1[9];
    CFMutableDictionaryRef v16 = (std::__shared_weak_count *)a1[10];
    *(void *)long long buf = v17;
    if (!v16 || (v18 = std::__shared_weak_count::lock(v16), (CFTypeRef v35 = v18) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v19 = v18;
    uint64_t v20 = a1[13];
    if (v14 && (CFTypeID v21 = CFGetTypeID(v14), v21 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v14;
      CFRetain(v14);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 1174405120;
    uint64_t v27[2] = ___ZN4coex6Module5State30handleSetRC1DurationParam_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    v27[3] = &__block_descriptor_tmp_279;
    v27[4] = a1;
    v27[5] = v17;
    uint64_t v28 = v19;
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v22 = _Block_copy(v27);
    CFTypeID v23 = a1[11];
    if (v23) {
      dispatch_retain(v23);
    }
    if (v22)
    {
      aBlocuint64_t k = _Block_copy(v22);
      dispatch_object_t object = v23;
      if (!v23) {
        goto LABEL_28;
      }
    }
    else
    {
      aBlocuint64_t k = 0;
      dispatch_object_t object = v23;
      if (!v23)
      {
LABEL_28:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v20 + 48))(v20, &cf, a3, &aBlock);
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v23) {
          dispatch_release(v23);
        }
        if (v22) {
          _Block_release(v22);
        }
        if (cf) {
          CFRelease(cf);
        }
        CFMutableDictionaryRef v24 = v28;
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        uint64_t v25 = v35;
        if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          CFTypeRef v26 = v32;
          if (!v32)
          {
LABEL_45:
            if (v33) {
              CFRelease(v33);
            }
            return;
          }
        }
        else
        {
          CFTypeRef v26 = v32;
          if (!v32) {
            goto LABEL_45;
          }
        }
        CFRelease(v26);
        goto LABEL_45;
      }
    }
    dispatch_retain(v23);
    goto LABEL_28;
  }
  int v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#E Invalid RC1 duration passed", buf, 2u);
  }
}

void sub_1C5A0B290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C5A0B350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State30handleSetRC1DurationParam_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    xpc_object_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set RC1 duration; %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::convertScanFreqBandFilter_sync(uint64_t a1, xpc_object_t *a2, CFArrayRef *a3)
{
  if (MEMORY[0x1C8795EB0](*a2) == MEMORY[0x1E4F14568])
  {
    if (*a3
       ? ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get
       : 0)
    {
      CFIndex Count = CFArrayGetCount(*a3);
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        CFIndex v8 = 0;
        CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4FB9658];
        CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4FB9538];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*a3, v8);
          if (ValueAtIndex && (v12 = ValueAtIndex, CFTypeID v13 = CFGetTypeID(ValueAtIndex), v13 == CFDictionaryGetTypeID()))
          {
            CFTypeRef cf = v12;
            CFRetain(v12);
            if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
            {
              v24[0] = 0xAAAAAAAAAAAAAAAALL;
              v24[1] = 0xAAAAAAAAAAAAAAAALL;
              ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, (const __CFDictionary *)v12);
              xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
              if (v14 || (xpc_object_t v14 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v14) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v14);
                  xpc_object_t v15 = v14;
                }
                else
                {
                  xpc_object_t v15 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v15 = xpc_null_create();
                xpc_object_t v14 = 0;
              }
              xpc_release(v14);
              int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v24, v9);
              xpc_object_t v19 = xpc_int64_create(Int);
              if (!v19) {
                xpc_object_t v19 = xpc_null_create();
              }
              xpc_dictionary_set_value(v15, "kWCMCellularScanFreqBandFilter_CenterFreq", v19);
              xpc_object_t v20 = xpc_null_create();
              xpc_release(v19);
              xpc_release(v20);
              int v21 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v24, v10);
              xpc_object_t v22 = xpc_int64_create(v21);
              if (!v22) {
                xpc_object_t v22 = xpc_null_create();
              }
              xpc_dictionary_set_value(v15, "kWCMCellularScanFreqBandFilter_Bandwidth", v22);
              xpc_object_t v23 = xpc_null_create();
              xpc_release(v22);
              xpc_release(v23);
              xpc_array_append_value(*a2, v15);
              xpc_release(v15);
              MEMORY[0x1C87942E0](v24);
              goto LABEL_32;
            }
          }
          else
          {
            CFTypeRef cf = 0;
          }
          xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
          if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8795EB0](v16) == MEMORY[0x1E4F14590])
            {
              xpc_retain(v16);
              xpc_object_t v17 = v16;
            }
            else
            {
              xpc_object_t v17 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
            xpc_object_t v16 = 0;
          }
          xpc_release(v16);
          xpc_array_append_value(*a2, v17);
          xpc_release(v17);
LABEL_32:
          if (cf) {
            CFRelease(cf);
          }
          ++v8;
        }
        while (v7 != v8);
      }
    }
  }
}

void sub_1C5A0B748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, const void *a12)
{
  xpc_release(v12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleGetScanFreqBandFilter_sync(void *a1, uint64_t a2)
{
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x3002000000;
  v28[3] = __Block_byref_object_copy__280;
  v28[4] = __Block_byref_object_dispose__281;
  xpc_object_t v29 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v29 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v29 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v29 = v6;
LABEL_9:
  xpc_release(v5);
  CFTypeRef v27 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v8 = Mutable;
  if (Mutable) {
    CFTypeRef v27 = Mutable;
  }
  ctu::cf::insert<__CFString const*,BOOL>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9798], 1);
  CFStringRef v10 = (const void *)a1[9];
  CFStringRef v9 = (std::__shared_weak_count *)a1[10];
  cf[1] = v10;
  if (!v9 || (int v11 = std::__shared_weak_count::lock(v9), (v26 = v11) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFMutableDictionaryRef v12 = v11;
  uint64_t v13 = a1[13];
  if (v8 && (CFTypeID v14 = CFGetTypeID(v8), v14 == CFDictionaryGetTypeID()))
  {
    cf[0] = v8;
    CFRetain(v8);
  }
  else
  {
    cf[0] = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleGetScanFreqBandFilter_syncENS_5SubIdE_block_invoke;
  aBlock[3] = &unk_1F2103D30;
  void aBlock[5] = a1;
  void aBlock[6] = v10;
  int v21 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  void aBlock[4] = v28;
  int v22 = a2;
  xpc_object_t v15 = _Block_copy(aBlock);
  xpc_object_t v16 = a1[11];
  if (v16) {
    dispatch_retain(v16);
  }
  if (v15)
  {
    xpc_object_t v23 = _Block_copy(v15);
    dispatch_object_t object = v16;
    if (!v16) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  xpc_object_t v23 = 0;
  dispatch_object_t object = v16;
  if (v16) {
LABEL_21:
  }
    dispatch_retain(v16);
LABEL_22:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(void *)v13 + 56))(v13, cf, a2, &v23);
  if (object) {
    dispatch_release(object);
  }
  if (v23) {
    _Block_release(v23);
  }
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  xpc_object_t v17 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    int v18 = v26;
    if (!v26) {
      goto LABEL_36;
    }
  }
  else
  {
    int v18 = v26;
    if (!v26) {
      goto LABEL_36;
    }
  }
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    CFTypeRef v19 = v27;
    if (!v27) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_36:
  CFTypeRef v19 = v27;
  if (v27) {
LABEL_37:
  }
    CFRelease(v19);
LABEL_38:
  _Block_object_dispose(v28, 8);
  xpc_release(v29);
}

void sub_1C5A0BB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va3, a11);
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  va_copy(va2, va1);
  CFTypeRef v19 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v21 = va_arg(va3, void);
  uint64_t v23 = va_arg(va3, void);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  if (v11) {
    dispatch_release(v11);
  }
  if (v12) {
    _Block_release(v12);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v13);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va3);
  _Block_object_dispose((const void *)(v14 - 112), 8);
  xpc_release(*(xpc_object_t *)(v14 - 72));
  _Unwind_Resume(a1);
}

xpc_object_t __Block_byref_object_copy__280(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  xpc_object_t result = xpc_null_create();
  *(void *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__281(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN4coex6Module5State32handleGetScanFreqBandFilter_syncENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *a2;
  if (*a2) {
    xpc_object_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    xpc_object_t v6 = 0;
  }
  if (v6)
  {
    CFIndex v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Failed to get: %@", buf, 0xCu);
    }
    goto LABEL_21;
  }
  CFDictionaryRef v8 = *a3;
  if (*a3) {
    CFStringRef v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    CFStringRef v9 = 0;
  }
  if (!v9) {
    goto LABEL_21;
  }
  memset(buf, 170, 16);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v8);
  CFStringRef v10 = (void *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB96D8]);
  int v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  v17[0] = v11;
  v17[1] = v10;
  if (v11)
  {
    CFMutableDictionaryRef v12 = xpc_retain(v11);
    CFArrayRef v16 = (CFArrayRef)v10;
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  CFMutableDictionaryRef v12 = xpc_null_create();
  int v11 = v12;
  CFArrayRef v16 = (CFArrayRef)v10;
  v17[0] = v12;
  if (v10) {
LABEL_15:
  }
    CFMutableDictionaryRef v12 = (void *)CFRetain(v10);
LABEL_16:
  coex::Module::State::convertScanFreqBandFilter_sync((uint64_t)v12, v17, &v16);
  if (v10) {
    CFRelease(v10);
  }
  xpc_release(v11);
  v17[0] = 0;
  if (v10) {
    CFRelease(v10);
  }
  MEMORY[0x1C87942E0](buf);
LABEL_21:
  uint64_t v13 = *(void *)(v4 + 120);
  if (v13)
  {
    xpc_object_t v14 = *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    xpc_object_t v15 = v14;
    if (v14)
    {
      xpc_retain(v14);
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v15 = v14;
    }
    coex::XpcClient::sendMessage(v13, 305, &v15, *(_DWORD *)(a1 + 64));
    xpc_release(v14);
  }
}

void sub_1C5A0BE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void coex::Module::State::fetchBandInfoSet_sync(uint64_t a1, CFArrayRef *a2, const char *a3, xpc_object_t *a4)
{
  if (*a2) {
    uint64_t v4 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!a3) {
    return;
  }
  if (!v4) {
    return;
  }
  if (MEMORY[0x1C8795EB0](*a4) != MEMORY[0x1E4F14590]) {
    return;
  }
  CFIndex Count = CFArrayGetCount(*a2);
  if (Count < 1) {
    return;
  }
  CFIndex v9 = Count;
  xpc_object_t v10 = xpc_array_create(0, 0);
  uint64_t v11 = MEMORY[0x1E4F14568];
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v10) == v11)
    {
      xpc_retain(v10);
      xpc_object_t v12 = v10;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  uint64_t v38 = a4;
  xpc_object_t xarray = v12;
  xpc_release(v10);
  CFIndex v13 = 0;
  CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4FB9658];
  CFStringRef v15 = (const __CFString *)*MEMORY[0x1E4FB9538];
  CFStringRef v16 = (const __CFString *)*MEMORY[0x1E4FB9600];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*a2, v13);
    uint64_t v18 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v19 = CFGetTypeID(ValueAtIndex), v19 != CFDictionaryGetTypeID()))
    {
      uint64_t v18 = 0;
      CFTypeRef v42 = 0;
LABEL_27:
      if (v18) {
        goto LABEL_51;
      }
      goto LABEL_15;
    }
    CFTypeRef v42 = v18;
    CFRetain(v18);
    if (v18) {
      xpc_object_t v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      xpc_object_t v20 = 0;
    }
    if (!v20) {
      goto LABEL_27;
    }
    v41[0] = 0xAAAAAAAAAAAAAAAALL;
    v41[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v41, (const __CFDictionary *)v18);
    xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
    if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v21) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v21);
        xpc_object_t v22 = v21;
      }
      else
      {
        xpc_object_t v22 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v21 = 0;
    }
    xpc_release(v21);
    int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v14);
    xpc_object_t v24 = xpc_int64_create(Int);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_CenterFreq", v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v41, v15, 0.0);
    xpc_object_t v27 = xpc_double_create(v26);
    if (!v27) {
      xpc_object_t v27 = xpc_null_create();
    }
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_Bandwidth", v27);
    xpc_object_t v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
    CFDataRef v29 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v41, v16);
    CFDataRef v30 = v29;
    CFDataRef cf = v29;
    if (v29) {
      CFTypeID v31 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    }
    else {
      CFTypeID v31 = 0;
    }
    if (v31)
    {
      if (v29) {
        CFRetain(v29);
      }
      *(void *)buffer = 0;
      v44.length = CFDataGetLength(v30);
      v44.location = 0;
      CFDataGetBytes(v30, v44, buffer);
      uint64_t v32 = *(void *)buffer;
      if (v30) {
        CFRelease(v30);
      }
      xpc_object_t v33 = xpc_uint64_create(v32);
      if (!v33) {
        xpc_object_t v33 = xpc_null_create();
      }
    }
    else
    {
      int v34 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v16);
      xpc_object_t v33 = xpc_uint64_create(v34);
      if (!v33) {
        xpc_object_t v33 = xpc_null_create();
      }
    }
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_DirectionMask", v33);
    xpc_object_t v35 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v35);
    xpc_array_append_value(xarray, v22);
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(v22);
    MEMORY[0x1C87942E0](v41);
    uint64_t v18 = v42;
    if (v42) {
LABEL_51:
    }
      CFRelease(v18);
LABEL_15:
    ++v13;
  }
  while (v9 != v13);
  if (MEMORY[0x1C8795EB0](xarray) == MEMORY[0x1E4F14568])
  {
    if (xarray)
    {
      xpc_retain(xarray);
      xpc_object_t v36 = xarray;
    }
    else
    {
      xpc_object_t v36 = xpc_null_create();
    }
    xpc_dictionary_set_value(*v38, a3, v36);
    xpc_object_t v37 = xpc_null_create();
    xpc_release(v36);
    xpc_release(v37);
  }
  xpc_release(xarray);
}

void sub_1C5A0C41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
}

void coex::Module::State::fetchCarrierIdSet_sync(uint64_t a1, CFArrayRef *a2, const char *a3, xpc_object_t *a4)
{
  if (*a2) {
    uint64_t v4 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (a3)
  {
    if (v4)
    {
      if (MEMORY[0x1C8795EB0](*a4) == MEMORY[0x1E4F14590])
      {
        CFIndex Count = CFArrayGetCount(*a2);
        if (Count >= 1)
        {
          CFIndex v9 = Count;
          xpc_object_t v10 = xpc_array_create(0, 0);
          uint64_t v11 = MEMORY[0x1E4F14568];
          if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8795EB0](v10) == v11)
            {
              xpc_retain(v10);
              xpc_object_t v12 = v10;
            }
            else
            {
              xpc_object_t v12 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v12 = xpc_null_create();
            xpc_object_t v10 = 0;
          }
          xpc_release(v10);
          for (CFIndex i = 0; i != v9; ++i)
          {
            LODWORD(value) = 0;
            ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*a2, i);
            CFStringRef v15 = ValueAtIndex;
            if (ValueAtIndex)
            {
              CFTypeID v16 = CFGetTypeID(ValueAtIndex);
              if (v16 == CFNumberGetTypeID())
              {
                if (ctu::cf::assign((ctu::cf *)&value, v15, v17))
                {
                  xpc_object_t v18 = xpc_int64_create(value);
                  if (!v18) {
                    xpc_object_t v18 = xpc_null_create();
                  }
                  xpc_array_append_value(v12, v18);
                  xpc_release(v18);
                }
              }
            }
          }
          if (MEMORY[0x1C8795EB0](v12) == v11 && xpc_array_get_count(v12))
          {
            if (v12)
            {
              xpc_retain(v12);
              xpc_object_t v19 = v12;
            }
            else
            {
              xpc_object_t v19 = xpc_null_create();
            }
            xpc_dictionary_set_value(*a4, a3, v19);
            xpc_object_t v20 = xpc_null_create();
            xpc_release(v19);
            xpc_release(v20);
          }
          xpc_release(v12);
        }
      }
    }
  }
}

void sub_1C5A0C738(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void coex::Module::State::sendWWANState_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v186 = 0;
  v187 = &v186;
  uint64_t v188 = 0x3002000000;
  unsigned int v189 = __Block_byref_object_copy__286;
  uint64_t v190 = __Block_byref_object_dispose__287;
  xpc_object_t v191 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v191 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v191 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v191 = v6;
LABEL_9:
  xpc_release(v5);
  CFMutableDictionaryRef v185 = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyWWANState, a2, 0, &v185);
  if (v185) {
    CFIndex v7 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    CFIndex v7 = 0;
  }
  if (v7)
  {
    v183[0] = 0xAAAAAAAAAAAAAAAALL;
    v183[1] = 0xAAAAAAAAAAAAAAAALL;
    CFDictionaryRef v8 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v183, v185);
    CFDictionaryRef v182 = 0;
    CFDictionaryRef v9 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef(v8, (const __CFString *)*MEMORY[0x1E4FB96C8]);
    CFDictionaryRef v182 = v9;
    if (v9) {
      xpc_object_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      xpc_object_t v10 = 0;
    }
    if (v10)
    {
      unint64_t v180 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v181 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v180, v9);
      uint64_t v11 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v179, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v12 = *MEMORY[0x1E4FB96C0];
      v175[0] = MEMORY[0x1E4F143A8];
      v175[1] = 0x40000000;
      uint64_t v176 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke;
      int v177 = &unk_1E651AF08;
      v178 = &v186;
      CFIndex v13 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))v179[0])(v11, v12);
      CFStringRef v14 = v13;
      if (v13)
      {
        CFTypeID v15 = CFGetTypeID(v13);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        CFRelease(v14);
        if (v15 == TypeID) {
          v176((uint64_t)v175, (const __CFDictionary *)v14);
        }
      }
      MEMORY[0x1C87942E0](v179);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v174, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v17 = *MEMORY[0x1E4FB96A8];
      v170[0] = MEMORY[0x1E4F143A8];
      v170[1] = 0x40000000;
      uint64_t v171 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_2;
      uint64_t v172 = &unk_1E651AF30;
      xpc_object_t v173 = &v186;
      xpc_object_t v18 = (const void *)(*(uint64_t (**)(void *, uint64_t))v174[0])(v174, v17);
      xpc_object_t v19 = v18;
      if (v18)
      {
        CFTypeID v20 = CFGetTypeID(v18);
        CFTypeID v21 = CFDictionaryGetTypeID();
        CFRelease(v19);
        if (v20 == v21) {
          v171((uint64_t)v170, (const __CFDictionary *)v19);
        }
      }
      MEMORY[0x1C87942E0](v174);
      MEMORY[0x1C87942E0](&v180);
    }
    CFDictionaryRef v22 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB96B0]);
    CFDictionaryRef v182 = v22;
    if (v9) {
      CFRelease(v9);
    }
    if (v22) {
      uint64_t v23 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v23 = 0;
    }
    if (v23)
    {
      unint64_t v180 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v181 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v180, v22);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v169, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v24 = *MEMORY[0x1E4FB95B0];
      v165[0] = MEMORY[0x1E4F143A8];
      v165[1] = 0x40000000;
      CFMutableDictionaryRef v166 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_3;
      v167 = &unk_1E651AF58;
      size_t v168 = &v186;
      xpc_object_t v25 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v169[0])(v169, v24);
      double v26 = v25;
      if (v25)
      {
        CFTypeID v27 = CFGetTypeID(v25);
        if (v27 == CFNumberGetTypeID())
        {
          LODWORD(v144) = -1431655766;
          int v29 = ctu::cf::assign((ctu::cf *)&v144, v26, v28);
          CFRelease(v26);
          if (v29) {
            v166((uint64_t)v165, v144);
          }
        }
        else
        {
          CFRelease(v26);
        }
      }
      MEMORY[0x1C87942E0](v169);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v164, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v36 = *MEMORY[0x1E4FB9570];
      v160[0] = MEMORY[0x1E4F143A8];
      v160[1] = 0x40000000;
      uint64_t v161 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_4;
      CFMutableDictionaryRef v162 = &unk_1E651AF80;
      CFMutableDictionaryRef v163 = &v186;
      xpc_object_t v37 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v164[0])(v164, v36);
      uint64_t v38 = v37;
      if (v37)
      {
        CFTypeID v39 = CFGetTypeID(v37);
        if (v39 == CFNumberGetTypeID())
        {
          LODWORD(v144) = -1431655766;
          int v41 = ctu::cf::assign((ctu::cf *)&v144, v38, v40);
          CFRelease(v38);
          if (v41) {
            v161((uint64_t)v160, v144);
          }
        }
        else
        {
          CFRelease(v38);
        }
      }
      MEMORY[0x1C87942E0](v164);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v159, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v42 = *MEMORY[0x1E4FB9650];
      v155[0] = MEMORY[0x1E4F143A8];
      v155[1] = 0x40000000;
      xpc_object_t v156 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_5;
      int v157 = &unk_1E651AFA8;
      uint64_t v158 = &v186;
      CFTypeRef v43 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v159[0])(v159, v42);
      CFRange v44 = v43;
      if (v43)
      {
        CFTypeID v45 = CFGetTypeID(v43);
        if (v45 == CFNumberGetTypeID())
        {
          LODWORD(v144) = -1431655766;
          int v47 = ctu::cf::assign((ctu::cf *)&v144, v44, v46);
          CFRelease(v44);
          if (v47) {
            v156((uint64_t)v155, v144);
          }
        }
        else
        {
          CFRelease(v44);
        }
      }
      MEMORY[0x1C87942E0](v159);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v154, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v48 = *MEMORY[0x1E4FB9530];
      v150[0] = MEMORY[0x1E4F143A8];
      v150[1] = 0x40000000;
      CFMutableDictionaryRef v151 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_6;
      BOOL v152 = &unk_1E651AFD0;
      CFMutableDictionaryRef v153 = &v186;
      xpc_object_t v49 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v154[0])(v154, v48);
      size_t v50 = v49;
      if (v49)
      {
        CFTypeID v51 = CFGetTypeID(v49);
        if (v51 == CFNumberGetTypeID())
        {
          LODWORD(v144) = -1431655766;
          int v53 = ctu::cf::assign((ctu::cf *)&v144, v50, v52);
          CFRelease(v50);
          if (v53) {
            v151((uint64_t)v150, v144);
          }
        }
        else
        {
          CFRelease(v50);
        }
      }
      MEMORY[0x1C87942E0](v154);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v149, (const ctu::cf::dict_adapter *)&v180);
      uint64_t v54 = *MEMORY[0x1E4FB9520];
      v145[0] = MEMORY[0x1E4F143A8];
      v145[1] = 0x40000000;
      xpc_object_t v146 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_7;
      xpc_object_t v147 = &unk_1E651AFF8;
      xpc_object_t v148 = &v186;
      CFNumberRef v55 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v149[0])(v149, v54);
      CFTypeRef v56 = v55;
      if (v55)
      {
        CFTypeID v57 = CFGetTypeID(v55);
        if (v57 == CFNumberGetTypeID())
        {
          LODWORD(v144) = -1431655766;
          int v59 = ctu::cf::assign((ctu::cf *)&v144, v56, v58);
          CFRelease(v56);
          if (v59) {
            v146((uint64_t)v145, v144);
          }
        }
        else
        {
          CFRelease(v56);
        }
      }
      MEMORY[0x1C87942E0](v149);
      MEMORY[0x1C87942E0](&v180);
    }
    CFArrayRef v60 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB97B0]);
    CFArrayRef v61 = v60;
    CFArrayRef v144 = v60;
    if (v60) {
      CFMutableDictionaryRef v62 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      CFMutableDictionaryRef v62 = 0;
    }
    if (v62)
    {
      CFArrayRef v143 = v60;
      if (v60) {
        CFRetain(v60);
      }
      CFMutableDictionaryRef v63 = (void *)v187[5];
      xpc_object_t v142 = v63;
      if (v63)
      {
        xpc_object_t v64 = xpc_retain(v63);
      }
      else
      {
        xpc_object_t v64 = xpc_null_create();
        CFMutableDictionaryRef v63 = v64;
        xpc_object_t v142 = v64;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v64, &v143, "kWCMCellularNetworkConfiguration_LTEBandInformationSet", &v142);
      xpc_release(v63);
      xpc_object_t v142 = 0;
      if (v61) {
        CFRelease(v61);
      }
    }
    CFArrayRef v65 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB98B8]);
    CFArrayRef v66 = v65;
    v141[1] = v65;
    if (v65) {
      CFMutableArrayRef v67 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      CFMutableArrayRef v67 = 0;
    }
    if (v67)
    {
      v141[0] = v65;
      if (v65) {
        CFRetain(v65);
      }
      xpc_object_t v68 = (void *)v187[5];
      xpc_object_t v140 = v68;
      if (v68)
      {
        xpc_object_t v69 = xpc_retain(v68);
      }
      else
      {
        xpc_object_t v69 = xpc_null_create();
        xpc_object_t v68 = v69;
        xpc_object_t v140 = v69;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v69, v141, "kWCMCellularNetworkConfiguration_TDSCDMABandInformationSet", &v140);
      xpc_release(v68);
      xpc_object_t v140 = 0;
      if (v66) {
        CFRelease(v66);
      }
    }
    CFArrayRef v119 = v66;
    CFArrayRef v70 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB9790]);
    CFArrayRef v71 = v70;
    v139[1] = v70;
    if (v70) {
      uint64_t v72 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      uint64_t v72 = 0;
    }
    if (v72)
    {
      v139[0] = v70;
      if (v70) {
        CFRetain(v70);
      }
      uint64_t v73 = (void *)v187[5];
      xpc_object_t v138 = v73;
      if (v73)
      {
        xpc_object_t v74 = xpc_retain(v73);
      }
      else
      {
        xpc_object_t v74 = xpc_null_create();
        uint64_t v73 = v74;
        xpc_object_t v138 = v74;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v74, v139, "kWCMCellularNetworkConfiguration_GSMBandInformationSet", &v138);
      xpc_release(v73);
      xpc_object_t v138 = 0;
      if (v71) {
        CFRelease(v71);
      }
    }
    CFArrayRef cf = v71;
    CFArrayRef v75 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB97F0]);
    CFArrayRef v76 = v75;
    v137[1] = v75;
    if (v75) {
      uint64_t v77 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      uint64_t v77 = 0;
    }
    if (v77)
    {
      v137[0] = v75;
      if (v75) {
        CFRetain(v75);
      }
      CFTypeRef v78 = (void *)v187[5];
      xpc_object_t v136 = v78;
      if (v78)
      {
        xpc_object_t v79 = xpc_retain(v78);
      }
      else
      {
        xpc_object_t v79 = xpc_null_create();
        CFTypeRef v78 = v79;
        xpc_object_t v136 = v79;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v79, v137, "kWCMCellularNetworkConfiguration_ONEXBandInformationSet", &v136);
      xpc_release(v78);
      xpc_object_t v136 = 0;
      if (v76) {
        CFRelease(v76);
      }
    }
    CFArrayRef v80 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB97A0]);
    CFArrayRef v81 = v80;
    v135[1] = v80;
    if (v80) {
      CFTypeRef v82 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      CFTypeRef v82 = 0;
    }
    if (v82)
    {
      v135[0] = v80;
      if (v80) {
        CFRetain(v80);
      }
      CFTypeRef v83 = (void *)v187[5];
      xpc_object_t v134 = v83;
      if (v83)
      {
        xpc_object_t v84 = xpc_retain(v83);
      }
      else
      {
        xpc_object_t v84 = xpc_null_create();
        CFTypeRef v83 = v84;
        xpc_object_t v134 = v84;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v84, v135, "kWCMCellularNetworkConfiguration_HDRBandInformationSet", &v134);
      xpc_release(v83);
      xpc_object_t v134 = 0;
      if (v81) {
        CFRelease(v81);
      }
    }
    CFArrayRef v85 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB9848]);
    CFArrayRef v86 = v85;
    v133[1] = v85;
    if (v85) {
      dispatch_object_t v87 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      dispatch_object_t v87 = 0;
    }
    if (v87)
    {
      v133[0] = v85;
      if (v85) {
        CFRetain(v85);
      }
      CFTypeRef v88 = (void *)v187[5];
      xpc_object_t v132 = v88;
      if (v88)
      {
        xpc_object_t v89 = xpc_retain(v88);
      }
      else
      {
        xpc_object_t v89 = xpc_null_create();
        CFTypeRef v88 = v89;
        xpc_object_t v132 = v89;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v89, v133, "kWCMCellularNetworkConfiguration_WCDMABandInformationSet", &v132);
      xpc_release(v88);
      xpc_object_t v132 = 0;
      if (v86) {
        CFRelease(v86);
      }
    }
    uint64_t v117 = a1;
    int v115 = a2;
    CFArrayRef v90 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB97C0]);
    CFArrayRef v91 = v90;
    v131[1] = v90;
    if (v90) {
      uint64_t v92 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      uint64_t v92 = 0;
    }
    if (v92)
    {
      v131[0] = v90;
      if (v90) {
        CFRetain(v90);
      }
      uint64_t v93 = (void *)v187[5];
      xpc_object_t v130 = v93;
      if (v93)
      {
        xpc_object_t v94 = xpc_retain(v93);
      }
      else
      {
        xpc_object_t v94 = xpc_null_create();
        uint64_t v93 = v94;
        xpc_object_t v130 = v94;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v94, v131, "kWCMCellularNetworkConfiguration_NGCBandInformationSet", &v130);
      xpc_release(v93);
      xpc_object_t v130 = 0;
      if (v91) {
        CFRelease(v91);
      }
    }
    CFArrayRef v95 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB9868]);
    CFArrayRef v96 = v95;
    v129[1] = v95;
    if (v95) {
      uint64_t v97 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      uint64_t v97 = 0;
    }
    if (v97)
    {
      v129[0] = v95;
      if (v95) {
        CFRetain(v95);
      }
      xpc_object_t v98 = (void *)v187[5];
      xpc_object_t v128 = v98;
      if (v98)
      {
        xpc_object_t v99 = xpc_retain(v98);
      }
      else
      {
        xpc_object_t v99 = xpc_null_create();
        xpc_object_t v98 = v99;
        xpc_object_t v128 = v99;
      }
      coex::Module::State::fetchCarrierIdSet_sync((uint64_t)v99, v129, "kWCMCellularNetworkConfiguration_LTECarrierInformationSet", &v128);
      xpc_release(v98);
      xpc_object_t v128 = 0;
      if (v96) {
        CFRelease(v96);
      }
    }
    CFArrayRef v100 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB9870]);
    CFArrayRef v101 = v100;
    v127[1] = v100;
    if (v100) {
      int v102 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      int v102 = 0;
    }
    if (v102)
    {
      v127[0] = v100;
      if (v100) {
        CFRetain(v100);
      }
      CFMutableDictionaryRef v103 = (void *)v187[5];
      xpc_object_t v126 = v103;
      if (v103)
      {
        xpc_object_t v104 = xpc_retain(v103);
      }
      else
      {
        xpc_object_t v104 = xpc_null_create();
        CFMutableDictionaryRef v103 = v104;
        xpc_object_t v126 = v104;
      }
      coex::Module::State::fetchCarrierIdSet_sync((uint64_t)v104, v127, "kWCMCellularNetworkConfiguration_NGCCarrierInformationSet", &v126);
      xpc_release(v103);
      xpc_object_t v126 = 0;
      if (v101) {
        CFRelease(v101);
      }
    }
    CFArrayRef v116 = v61;
    uint64_t v105 = *MEMORY[0x1E4FB95D0];
    CFDictionaryRef v106 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v183, (const __CFString *)*MEMORY[0x1E4FB95D0]);
    CFDictionaryRef v182 = v106;
    if (v22) {
      CFRelease(v22);
    }
    if (v106) {
      size_t v107 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      size_t v107 = 0;
    }
    if (v107)
    {
      unint64_t v180 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v181 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v180, v106);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v125, (const ctu::cf::dict_adapter *)&v180);
      v121[0] = MEMORY[0x1E4F143A8];
      v121[1] = 0x40000000;
      int v122 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_8;
      char v123 = &unk_1E651B020;
      long long v124 = &v186;
      size_t v108 = (unsigned int *)(*(uint64_t (**)(void *, uint64_t))v125[0])(v125, v105);
      uint64_t v109 = v108;
      if (v108)
      {
        CFTypeID v110 = CFGetTypeID(v108);
        if (v110 == CFNumberGetTypeID())
        {
          v192[0] = -1431655766;
          int v112 = ctu::cf::assign((ctu::cf *)v192, v109, v111);
          CFRelease(v109);
          if (v112) {
            v122((uint64_t)v121, v192[0]);
          }
        }
        else
        {
          CFRelease(v109);
        }
      }
      MEMORY[0x1C87942E0](v125);
      MEMORY[0x1C87942E0](&v180);
    }
    uint64_t v113 = *(void *)(v117 + 120);
    if (v113)
    {
      xpc_object_t v114 = (xpc_object_t)v187[5];
      char v120 = v114;
      if (v114)
      {
        xpc_retain(v114);
      }
      else
      {
        xpc_object_t v114 = xpc_null_create();
        char v120 = v114;
      }
      coex::XpcClient::sendMessage(v113, 300, &v120, v115);
      xpc_release(v114);
      char v120 = 0;
    }
    if (v101) {
      CFRelease(v101);
    }
    if (v96) {
      CFRelease(v96);
    }
    if (v91) {
      CFRelease(v91);
    }
    if (v86) {
      CFRelease(v86);
    }
    if (v81) {
      CFRelease(v81);
    }
    if (v76) {
      CFRelease(v76);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v119) {
      CFRelease(v119);
    }
    if (v116) {
      CFRelease(v116);
    }
    if (v106) {
      CFRelease(v106);
    }
    MEMORY[0x1C87942E0](v183);
    CFMutableDictionaryRef v35 = v185;
    if (v185) {
LABEL_206:
    }
      CFRelease(v35);
  }
  else
  {
    v183[0] = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFTypeID v31 = Mutable;
    if (Mutable) {
      v183[0] = Mutable;
    }
    uint64_t v32 = (const void *)*MEMORY[0x1E4F1CFD0];
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9608], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v31, (CFTypeRef)*MEMORY[0x1E4FB9660], v32);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v31, (CFTypeRef)*MEMORY[0x1E4FB9598], v32);
    uint64_t v33 = *(void *)(a1 + 104);
    if (v33)
    {
      if (v31 && (CFTypeID v34 = CFGetTypeID(v31), v34 == CFDictionaryGetTypeID()))
      {
        unint64_t v184 = v31;
        CFRetain(v31);
      }
      else
      {
        unint64_t v184 = 0;
      }
      (*(void (**)(uint64_t, __CFDictionary **, uint64_t))(*(void *)v33 + 72))(v33, &v184, a2);
      if (v184) {
        CFRelease(v184);
      }
    }
    if (v31) {
      CFRelease(v31);
    }
    CFMutableDictionaryRef v35 = v185;
    if (v185) {
      goto LABEL_206;
    }
  }
  _Block_object_dispose(&v186, 8);
  xpc_release(v191);
}

void sub_1C5A0D980(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 176));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 192));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 168));
  _Block_object_dispose((const void *)(v1 - 160), 8);
  xpc_release(*(xpc_object_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1C5A0DD04()
{
}

xpc_object_t __Block_byref_object_copy__286(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  xpc_object_t result = xpc_null_create();
  *(void *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__287(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

uint64_t ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v10, a2);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E4FB9658]);
  xpc_object_t v4 = xpc_int64_create(Int);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULBandInfo_CenterFreq", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E4FB9538], 0.0);
  xpc_object_t v7 = xpc_double_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULBandInfo_BandWidth", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  return MEMORY[0x1C87942E0](v10);
}

uint64_t ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v10, a2);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E4FB9658]);
  xpc_object_t v4 = xpc_int64_create(Int);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLBandInfo_CenterFreq", v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E4FB9538], 0.0);
  xpc_object_t v7 = xpc_double_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLBandInfo_BandWidth", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  return MEMORY[0x1C87942E0](v10);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_3(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_FrameOffset", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_4(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_TTDUL_DL", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_5(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_SubFrameFormat", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_6(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULCPConfig", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_7(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLCPConfig", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_8(uint64_t a1, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_LTEOffPeriod", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void coex::Module::State::sendLinkQuality_sync(uint64_t a1, int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  CFTypeRef v28 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyLinkQuality, a2, 0, (CFMutableDictionaryRef *)&v28);
  if (v28) {
    double v6 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    double v6 = 0;
  }
  if (v6)
  {
    v27[0] = 0xAAAAAAAAAAAAAAAALL;
    v27[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v27, (const __CFDictionary *)v28);
    xpc_object_t v7 = (void *)ctu::cf::map_adapter::copyCFNumberRef((ctu::cf::map_adapter *)v27, (const __CFString *)*MEMORY[0x1E4FB99C8]);
    CFTypeRef cf = v7;
    if (v7) {
      CFDictionaryRef v9 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
    }
    else {
      CFDictionaryRef v9 = 0;
    }
    if (v9)
    {
      value[0] = 0;
      ctu::cf::assign((ctu::cf *)value, (uint64_t *)v7, v8);
      xpc_object_t v10 = xpc_int64_create(value[0]);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_SINR", v10);
      xpc_object_t v11 = xpc_null_create();
      xpc_release(v10);
      xpc_release(v11);
    }
    CFDictionaryRef v12 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v27, (const __CFString *)*MEMORY[0x1E4FB9668]);
    CFDictionaryRef v25 = v12;
    if (v12) {
      CFIndex v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      CFIndex v13 = 0;
    }
    if (v13)
    {
      value[0] = 0xAAAAAAAAAAAAAAAALL;
      value[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)value, v12);
      int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)value, (const __CFString *)*MEMORY[0x1E4FB9578]);
      int v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)value, (const __CFString *)*MEMORY[0x1E4FB9860]);
      double v16 = (double)Int;
      xpc_object_t v17 = xpc_double_create((double)Int);
      if (!v17) {
        xpc_object_t v17 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_BLERBlockCount", v17);
      xpc_object_t v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      xpc_object_t v19 = xpc_double_create((double)v15 / v16);
      if (!v19) {
        xpc_object_t v19 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_BLER", v19);
      xpc_object_t v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      MEMORY[0x1C87942E0](value);
      CFDictionaryRef v12 = v25;
    }
    if (v12) {
      CFRelease(v12);
    }
    if (cf) {
      CFRelease(cf);
    }
    MEMORY[0x1C87942E0](v27);
  }
  uint64_t v21 = *(void *)(a1 + 120);
  if (v21)
  {
    uint64_t v23 = v5;
    if (v5)
    {
      xpc_retain(v5);
      xpc_object_t v22 = v23;
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      uint64_t v23 = v22;
    }
    coex::XpcClient::sendMessage(v21, 302, &v23, a2);
    xpc_release(v22);
    uint64_t v23 = 0;
  }
  if (v28) {
    CFRelease(v28);
  }
  xpc_release(v5);
}

void sub_1C5A0E6A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  xpc_object_t v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  CFDictionaryRef v9 = va_arg(va3, const void *);
  va_copy(va4, va3);
  uint64_t v11 = va_arg(va4, void);
  uint64_t v13 = va_arg(va4, void);
  MEMORY[0x1C87942E0]((uint64_t *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va2);
  MEMORY[0x1C87942E0]((uint64_t *)va3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va4);
  xpc_release(v2);
  _Unwind_Resume(a1);
}

void coex::Module::State::sendFailCondition_sync(uint64_t a1, int a2)
{
  CFMutableDictionaryRef v75 = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyFailCondition, a2, 0, &v75);
  CFMutableDictionaryRef v4 = v75;
  if (v75) {
    xpc_object_t v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    xpc_object_t v5 = 0;
  }
  if (!v5) {
    goto LABEL_95;
  }
  v74[0] = 0xAAAAAAAAAAAAAAAALL;
  v74[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v74, v75);
  CFDataRef v7 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef(v6, (const __CFString *)*MEMORY[0x1E4FB9988]);
  CFDataRef v8 = v7;
  CFDataRef v73 = v7;
  if (v7) {
    CFDictionaryRef v9 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    CFDictionaryRef v9 = 0;
  }
  if (v9)
  {
    CFDataRef v72 = v7;
    if (v7) {
      CFRetain(v7);
    }
    *(void *)buffer = 0;
    v76.length = CFDataGetLength(v8);
    v76.location = 0;
    CFDataGetBytes(v8, v76, buffer);
    UInt8 v10 = buffer[0];
    if (v8) {
      CFRelease(v8);
    }
    if (v10)
    {
      *(void *)buffer = 0;
      CFMutableArrayRef v67 = buffer;
      uint64_t v68 = 0x3002000000;
      xpc_object_t v69 = __Block_byref_object_copy__286;
      CFArrayRef v70 = __Block_byref_object_dispose__287;
      xpc_object_t v71 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v12 = v11;
      if (v11)
      {
        xpc_object_t v71 = v11;
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v71 = v12;
        if (!v12)
        {
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t v12 = 0;
          goto LABEL_21;
        }
      }
      if (MEMORY[0x1C8795EB0](v12) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v12);
LABEL_22:
        xpc_release(v12);
        xpc_object_t v14 = xpc_int64_create(1);
        if (!v14) {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_dictionary_set_value(*((xpc_object_t *)v67 + 5), "kWCMCellularThresholdReached_EventType", v14);
        xpc_object_t v15 = xpc_null_create();
        xpc_release(v14);
        xpc_release(v15);
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v65, (const ctu::cf::dict_adapter *)v74);
        uint64_t v16 = *MEMORY[0x1E4FB99B0];
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 0x40000000;
        CFMutableDictionaryRef v62 = ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke;
        CFMutableDictionaryRef v63 = &unk_1E651B048;
        xpc_object_t v64 = buffer;
        xpc_object_t v17 = (int *)(*(uint64_t (**)(void *, uint64_t))v65[0])(v65, v16);
        xpc_object_t v18 = v17;
        if (v17)
        {
          CFTypeID v19 = CFGetTypeID(v17);
          if (v19 == CFNumberGetTypeID())
          {
            LODWORD(cf) = -1431655766;
            int v21 = ctu::cf::assign((ctu::cf *)&cf, v18, v20);
            CFRelease(v18);
            if (v21) {
              v62((uint64_t)v61, (int)cf);
            }
          }
          else
          {
            CFRelease(v18);
          }
        }
        MEMORY[0x1C87942E0](v65);
        uint64_t v22 = *(void *)(a1 + 120);
        if (v22)
        {
          xpc_object_t v23 = (xpc_object_t)*((void *)v67 + 5);
          CFArrayRef v60 = v23;
          if (v23)
          {
            xpc_retain(v23);
          }
          else
          {
            xpc_object_t v23 = xpc_null_create();
            CFArrayRef v60 = v23;
          }
          coex::XpcClient::sendMessage(v22, 303, &v60, a2);
          xpc_release(v23);
          CFArrayRef v60 = 0;
        }
        _Block_object_dispose(buffer, 8);
        xpc_release(v71);
        goto LABEL_35;
      }
      xpc_object_t v13 = xpc_null_create();
LABEL_21:
      xpc_object_t v71 = v13;
      goto LABEL_22;
    }
  }
LABEL_35:
  CFDataRef v24 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v74, (const __CFString *)*MEMORY[0x1E4FB9728]);
  CFDataRef v25 = v24;
  CFTypeRef cf = v24;
  if (v24) {
    double v26 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    double v26 = 0;
  }
  if (!v26) {
    goto LABEL_65;
  }
  v58[2] = v24;
  if (v24) {
    CFRetain(v24);
  }
  *(void *)buffer = 0;
  v77.length = CFDataGetLength(v25);
  v77.location = 0;
  CFDataGetBytes(v25, v77, buffer);
  UInt8 v27 = buffer[0];
  if (v25) {
    CFRelease(v25);
  }
  if ((v27 & 2) == 0) {
    goto LABEL_65;
  }
  *(void *)buffer = 0;
  CFMutableArrayRef v67 = buffer;
  uint64_t v68 = 0x3002000000;
  xpc_object_t v69 = __Block_byref_object_copy__286;
  CFArrayRef v70 = __Block_byref_object_dispose__287;
  xpc_object_t v71 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v29 = v28;
  if (v28)
  {
    xpc_object_t v71 = v28;
  }
  else
  {
    xpc_object_t v29 = xpc_null_create();
    xpc_object_t v71 = v29;
    if (!v29)
    {
      xpc_object_t v30 = xpc_null_create();
      xpc_object_t v29 = 0;
      goto LABEL_51;
    }
  }
  if (MEMORY[0x1C8795EB0](v29) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v30 = xpc_null_create();
LABEL_51:
    xpc_object_t v71 = v30;
    goto LABEL_52;
  }
  xpc_retain(v29);
LABEL_52:
  xpc_release(v29);
  xpc_object_t v31 = xpc_int64_create(0);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  xpc_dictionary_set_value(*((xpc_object_t *)v67 + 5), "kWCMCellularThresholdReached_EventType", v31);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v31);
  xpc_release(v32);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v58, (const ctu::cf::dict_adapter *)v74);
  uint64_t v33 = *MEMORY[0x1E4FB97D8];
  v54[0] = MEMORY[0x1E4F143A8];
  v54[1] = 0x40000000;
  CFNumberRef v55 = ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke_2;
  CFTypeRef v56 = &unk_1E651B070;
  CFTypeID v57 = buffer;
  CFTypeID v34 = (int *)(*(uint64_t (**)(void *, uint64_t))v58[0])(v58, v33);
  CFMutableDictionaryRef v35 = v34;
  if (v34)
  {
    CFTypeID v36 = CFGetTypeID(v34);
    if (v36 == CFNumberGetTypeID())
    {
      LODWORD(v52) = -1431655766;
      int v38 = ctu::cf::assign((ctu::cf *)&v52, v35, v37);
      CFRelease(v35);
      if (v38) {
        v55((uint64_t)v54, (int)v52);
      }
    }
    else
    {
      CFRelease(v35);
    }
  }
  MEMORY[0x1C87942E0](v58);
  uint64_t v39 = *(void *)(a1 + 120);
  if (v39)
  {
    xpc_object_t v40 = (xpc_object_t)*((void *)v67 + 5);
    int v53 = v40;
    if (v40)
    {
      xpc_retain(v40);
    }
    else
    {
      xpc_object_t v40 = xpc_null_create();
      int v53 = v40;
    }
    coex::XpcClient::sendMessage(v39, 303, &v53, a2);
    xpc_release(v40);
    int v53 = 0;
  }
  _Block_object_dispose(buffer, 8);
  xpc_release(v71);
LABEL_65:
  CFDataRef v41 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v74, (const __CFString *)*MEMORY[0x1E4FB97F8]);
  CFDataRef v42 = v41;
  CFDataRef v52 = v41;
  if (v41) {
    CFTypeRef v43 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    CFTypeRef v43 = 0;
  }
  if (v43)
  {
    v51[1] = v41;
    if (v41) {
      CFRetain(v41);
    }
    *(void *)buffer = 0;
    v78.length = CFDataGetLength(v42);
    v78.location = 0;
    CFDataGetBytes(v42, v78, buffer);
    uint64_t v44 = *(void *)buffer;
    if (v42) {
      CFRelease(v42);
    }
    if (v44)
    {
      xpc_object_t v45 = xpc_dictionary_create(0, 0, 0);
      if (v45 || (xpc_object_t v45 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v45) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v45);
          xpc_object_t v46 = v45;
        }
        else
        {
          xpc_object_t v46 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v46 = xpc_null_create();
        xpc_object_t v45 = 0;
      }
      xpc_release(v45);
      xpc_object_t v47 = xpc_uint64_create(v44);
      if (!v47) {
        xpc_object_t v47 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, "kWCMCellularTxPower_Response", v47);
      xpc_object_t v48 = xpc_null_create();
      xpc_release(v47);
      xpc_release(v48);
      uint64_t v49 = *(void *)(a1 + 120);
      if (v49)
      {
        v51[0] = v46;
        if (v46)
        {
          xpc_retain(v46);
          xpc_object_t v50 = v51[0];
        }
        else
        {
          xpc_object_t v50 = xpc_null_create();
          v51[0] = v50;
        }
        coex::XpcClient::sendMessage(v49, 301, v51, a2);
        xpc_release(v50);
        v51[0] = 0;
      }
      xpc_release(v46);
      CFDataRef v42 = v52;
    }
  }
  if (v42) {
    CFRelease(v42);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v73) {
    CFRelease(v73);
  }
  MEMORY[0x1C87942E0](v74);
  CFMutableDictionaryRef v4 = v75;
LABEL_95:
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1C5A0EF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose((const void *)(v13 - 136), 8);
  xpc_release(*(xpc_object_t *)(v13 - 96));
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v13 - 80));
  MEMORY[0x1C87942E0](v13 - 72);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v13 - 56));
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke(uint64_t a1, int a2)
{
  xpc_object_t v3 = xpc_int64_create(a2);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularThresholdReached_EventData", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke_2(uint64_t a1, int a2)
{
  xpc_object_t v3 = xpc_int64_create(a2);
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "kWCMCellularThresholdReached_EventData", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke_326(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  if (*(void *)(a1 + 40)) {
    CFDataRef v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    CFDataRef v7 = 0;
  }
  if (v7) {
    int64_t v8 = 39321;
  }
  else {
    int64_t v8 = 0;
  }
  xpc_object_t v9 = xpc_int64_create(v8);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kWCMCellularTxPower_Response", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(a2);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, "kWCMCellularTxPower_Level", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  uint64_t v13 = *(void *)(v4 + 120);
  if (v13)
  {
    xpc_object_t v15 = v6;
    if (v6)
    {
      xpc_retain(v6);
      xpc_object_t v14 = v15;
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v15 = v14;
    }
    coex::XpcClient::sendMessage(v13, 301, &v15, 0);
    xpc_release(v14);
    xpc_object_t v15 = 0;
  }
  xpc_release(v6);
}

CFTypeRef __copy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

const void **ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE56c27_ZTSN3ctu2cf12dict_adapterE(uint64_t a1)
{
  MEMORY[0x1C87942E0](a1 + 56);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZN4coex6Module5State23setLinkQualityMode_syncEjNS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*a2) {
    xpc_object_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    xpc_object_t v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "Failed to set SINR and/or BLER: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t *std::list<std::pair<unsigned long long,unsigned int>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        int v5 = (uint64_t *)v2[1];
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "coex.mod");
}

uint64_t ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void coex::CoexCache::~CoexCache(coex::CoexCache *this)
{
  uint64_t v2 = (const void *)*((void *)this + 3);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
}

void *ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2103F30;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2103F30;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC38B4) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC38B4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC38B4)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC38B4 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared"
                                "_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State*)#1}::operator() const(coex::Module::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2103F30;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  coex::Module::State::sendWWANState_sync(**(void **)a1, *(unsigned int *)(*(void *)a1 + 8));
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5A0FC10(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  coex::Module::State::sendLinkQuality_sync(**(void **)a1, *(_DWORD *)(*(void *)a1 + 8));
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5A0FD34(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14568]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetNetworkConfigOfInterest_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A0FE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  uint64_t v3 = *(void **)(*a1 + 8);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetTxPowerLimit_sync(v4, (xpc *)&object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A0FFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  uint64_t v3 = *(void **)(*a1 + 8);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetWCI2TxPowerLimit_sync(v4, (xpc *)&object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A1012C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb4_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(xpc_object_t **a1)
{
  uint64_t v2 = *a1;
  xpc_object_t v4 = **a1;
  xpc_object_t v3 = (*a1)[1];
  if (v3 && MEMORY[0x1C8795EB0]((*a1)[1]) == MEMORY[0x1E4F14590]) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  int v5 = *((void *)v4 + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v7[0] = 0;
    _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "WCMCellularSetWCI2CalibrationInfo not supported", (uint8_t *)v7, 2u);
  }
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb6_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v4 = **(void **)a1;
  xpc_object_t v3 = *(xpc_object_t *)(*(void *)a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetLinkQualityMode_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C5A103CC(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb7_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14568]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetScanFreqBandFilter_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A10540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb8_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void **)*a1;
  coex::Module::State::handleGetScanFreqBandFilter_sync(*(void **)*a1, *(unsigned int *)(*a1 + 8));
  operator delete(v2);
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = a1;
  }
  else
  {
    uint64_t v4 = a1;
  }
  operator delete(v4);
}

void sub_1C5A10680(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb9_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetWiFiStatus_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C5A107E8(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb10_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetLAAConfig_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C5A1096C(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb11_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  xpc_object_t v3 = *(void **)*a1;
  uint64_t v4 = *(void **)(*a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetFCMBCMAntennaMode_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A10AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb12_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetRC1DurationParam_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C5A10C64(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb13_E4__14EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetTimeShareConfigReq_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A10DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb14_E4__15EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetWCI2TxAntMap_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A10F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb15_E4__16EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  uint64_t v4 = *(void **)(*a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetAntBlocking_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A110C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb16_E4__17EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetClientAntBlocking_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A11234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb17_E4__18EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleSetClientAntBlockingExtended_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A113A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb18_E4__19EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleTriggerAntennaBlocking_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C5A1152C(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb19_E4__20EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetCC1_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C5A116B0(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb20_E4__21EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetCC2_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C5A11834(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb21_E4__22EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetLaaGpioThrottle_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C5A119B8(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb22_E4__23EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)*a1;
  xpc_object_t v3 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v6 = v3;
  if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v6 = v3;
  }
  coex::Module::State::handleSetGnssParams_sync(v4, &v6, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete(a1);
}

void sub_1C5A11B3C(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb23_E4__24EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  xpc_object_t v3 = *(void **)*a1;
  uint64_t v4 = *(void **)(*a1 + 8);
  xpc_object_t object = v4;
  if (v4 && MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590]) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  coex::Module::State::handleTransparentMessageReq_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A11CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvvENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEEEENS7_5mutexEEES3_vJEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  xpc_object_t v3 = (void *)(a1[4] + (v2 >> 1) - 72);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void **boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      xpc_object_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    xpc_object_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      xpc_object_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    xpc_object_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    xpc_object_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        xpc_object_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        xpc_object_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      xpc_object_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          xpc_object_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          xpc_object_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  void v14[4] = v2;
  void v14[5] = v2;
  void v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  xpc_object_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  uint64_t v16 = (char *)v14;
  uint64_t v17 = 0;
  xpc_object_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          int64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  xpc_object_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      xpc_object_t v11 = &v16[16 * v17];
      do
      {
        xpc_object_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C5A12614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    void *v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    void *v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F2104110;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F2102D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(void)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C5BC3D42 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C5BC3D42 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      int64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      int64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker0<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>,void>::invoke(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)a1;
  uint64_t v1 = *(const void **)(a1 + 8);
  if (!v1)
  {
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = _Block_copy(v1);
  uint64_t v4 = v3;
  if (!v3)
  {
LABEL_10:
    char v16 = 1;
LABEL_11:
    unint64_t v15 = 0;
    v20[0] = 0;
    goto LABEL_21;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
    char v16 = 0;
    goto LABEL_11;
  }
  char v7 = _Block_copy(v5);
  int64_t v8 = v7;
  if (v7)
  {
    int v9 = _Block_copy(v7);
    xpc_object_t v10 = v9;
    if (v9)
    {
      xpc_object_t v11 = _Block_copy(v9);
      xpc_object_t v12 = v11;
      if (v11)
      {
        uint64_t v13 = _Block_copy(v11);
        xpc_object_t v14 = v13;
        if (v13)
        {
          unint64_t v15 = _Block_copy(v13);
          v20[0] = v15;
          _Block_release(v14);
        }
        else
        {
          unint64_t v15 = 0;
          v20[0] = 0;
        }
        _Block_release(v12);
      }
      else
      {
        unint64_t v15 = 0;
        v20[0] = 0;
      }
      _Block_release(v10);
    }
    else
    {
      unint64_t v15 = 0;
      v20[0] = 0;
    }
    _Block_release(v8);
  }
  else
  {
    unint64_t v15 = 0;
    v20[0] = 0;
  }
  _Block_release(v6);
  char v16 = 0;
LABEL_21:
  uint64_t v17 = operator new(0x20uLL);
  *uint64_t v17 = boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable;
  if (v15) {
    xpc_object_t v18 = _Block_copy(v15);
  }
  else {
    xpc_object_t v18 = 0;
  }
  v17[1] = v18;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvvEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_379;
  void block[4] = v17;
  dispatch_async(v2, block);
  if (boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable)
  {
    if ((boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable & 1) == 0)
    {
      CFTypeID v19 = *(void (**)(void *, void *, uint64_t))((unint64_t)boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v19) {
        v19(v20, v20, 2);
      }
    }
  }
  if ((v16 & 1) == 0) {
    _Block_release(v4);
  }
}

void sub_1C5A12E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    _Block_release(v11);
  }
  if ((v12 & 1) == 0) {
    _Block_release(v10);
  }
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v6, "call to empty boost::function");
    v6.__vftable = (std::runtime_error_vtbl *)&unk_1F21031B0;
    boost::throw_exception<boost::bad_function_call>(&v6);
  }
  (*(void (**)(void *))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1);
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      *uint64_t v3 = 0;
    }
    operator delete(v3);
  }
}

void sub_1C5A12F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(void)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C5BC3D80 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C5BC3D80 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      char v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    std::runtime_error v6 = *a1;
    if (*a1) {
      std::runtime_error v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      char v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker0<dispatch::block<void({block_pointer})(void)>,void>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::function0<void>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        std::runtime_error v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_1C5A1313C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_1C5A1314C(_Unwind_Exception *a1)
{
}

uint64_t *boost::function0<void>::~function0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_1F2104268;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::~foreign_weak_ptr_impl(void *__p)
{
  *std::string __p = &unk_1F2104268;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  long long v7 = operator new(0x18uLL);
  *long long v7 = &unk_1F21042B8;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1C5A13370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F2104268;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_1F21042B8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  *std::string __p = &unk_1F21042B8;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F21042B8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISF_EENSL_IFvRKNS7_10connectionESD_SE_EEENS7_5mutexEEES3_vJSD_SE_EEEDTcl7connectfp_cvNSI_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke(void *a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void (*)(void *, CFTypeRef *, uint64_t))a1[5];
  uint64_t v4 = a1[6];
  uint64_t v6 = (void *)(a1[4] + (v4 >> 1) - 72);
  if (v4)
  {
    uint64_t v5 = *(void (**)(void *, CFTypeRef *, uint64_t))(*v6 + v5);
    long long v7 = *a2;
    CFTypeRef cf = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v7 = *a2;
  CFTypeRef cf = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  v5(v6, &cf, a3);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A13664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void **boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  void v14[4] = v2;
  void v14[5] = v2;
  void v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  char v16 = (char *)v14;
  uint64_t v17 = 0;
  xpc_object_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          int64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  xpc_object_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      xpc_object_t v11 = &v16[16 * v17];
      do
      {
        char v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C5A13EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    void *v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    void *v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F21043B8;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F2102D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C5BC42A2 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C5BC42A2 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      int64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      int64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker2<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::invoke(uint64_t a1, const void **a2, int a3)
{
  uint64_t v4 = *a2;
  CFDataRef v25 = *a2;
  *a2 = 0;
  uint64_t v6 = *(NSObject **)a1;
  uint64_t v5 = *(const void **)(a1 + 8);
  if (!v5)
  {
    int64_t v8 = 0;
LABEL_10:
    char v19 = 1;
    *(void *)&long long v26 = 0;
    if (!v4) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  char v7 = _Block_copy(v5);
  int64_t v8 = v7;
  if (!v7) {
    goto LABEL_10;
  }
  int v9 = _Block_copy(v7);
  xpc_object_t v10 = v9;
  if (!v9)
  {
    char v19 = 0;
    *(void *)&long long v26 = 0;
    if (!v4) {
      goto LABEL_23;
    }
LABEL_22:
    CFRetain(v4);
    goto LABEL_23;
  }
  xpc_object_t v11 = _Block_copy(v9);
  char v12 = v11;
  if (v11)
  {
    uint64_t v13 = _Block_copy(v11);
    xpc_object_t v14 = v13;
    if (v13)
    {
      unint64_t v15 = _Block_copy(v13);
      char v16 = v15;
      if (v15)
      {
        uint64_t v17 = _Block_copy(v15);
        xpc_object_t v18 = v17;
        if (v17)
        {
          *(void *)&long long v26 = _Block_copy(v17);
          _Block_release(v18);
        }
        else
        {
          *(void *)&long long v26 = 0;
        }
        _Block_release(v16);
      }
      else
      {
        *(void *)&long long v26 = 0;
      }
      _Block_release(v14);
    }
    else
    {
      *(void *)&long long v26 = 0;
    }
    _Block_release(v12);
  }
  else
  {
    *(void *)&long long v26 = 0;
  }
  _Block_release(v10);
  char v19 = 0;
  if (v4) {
    goto LABEL_22;
  }
LABEL_23:
  CFNumberRef v20 = operator new(8uLL);
  void *v20 = v4;
  if (v4) {
    CFRetain(v4);
  }
  int v21 = operator new(4uLL);
  _DWORD *v21 = a3;
  uint64_t v22 = (char *)operator new(0x20uLL);
  xpc_object_t v23 = v22;
  *(void *)uint64_t v22 = 0;
  if (boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable)
  {
    *(void *)uint64_t v22 = boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable;
    if (boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable)
    {
      *(_OWORD *)(v22 + 8) = v26;
      *((void *)v22 + 3) = v27;
    }
    else
    {
      (*(void (**)(long long *, char *, void))((unint64_t)boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL))(&v26, v22 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN4coex5SubIdEEEES8_SA__block_invoke;
  block[3] = &__block_descriptor_tmp_397;
  void block[4] = v23;
  void block[5] = v20;
  void block[6] = v21;
  dispatch_async(v6, block);
  if (v4) {
    CFRelease(v4);
  }
  if (boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable)
  {
    if ((boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 1) == 0)
    {
      CFDataRef v24 = *(void (**)(long long *, long long *, uint64_t))((unint64_t)boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v24) {
        v24(&v26, &v26, 2);
      }
    }
  }
  if ((v19 & 1) == 0)
  {
    _Block_release(v8);
    uint64_t v4 = v25;
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1C5A147BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, uint64_t a12)
{
  operator delete(v13);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function(&a12);
  if ((v14 & 1) == 0) {
    _Block_release(v12);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN4coex5SubIdEEEES8_SA__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = **(std::runtime_error_vtbl ***)(a1 + 40);
  if (v3) {
    CFRetain(v3);
  }
  if (!*v2)
  {
    std::runtime_error::runtime_error(&cf, "call to empty boost::function");
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F21031B0;
    boost::throw_exception<boost::bad_function_call>(&cf);
  }
  uint64_t v4 = **(unsigned int **)(a1 + 48);
  uint64_t v5 = *(void (**)(void *, std::runtime_error *, uint64_t))((*v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  cf.__vftable = v3;
  v5(v2 + 1, &cf, v4);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  uint64_t v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = *v6;
    if (*v6)
    {
      if ((v7 & 1) == 0)
      {
        int64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 & 0xFFFFFFFFFFFFFFFELL);
        if (v8) {
          v8(v6 + 1, v6 + 1, 2);
        }
      }
      *uint64_t v6 = 0;
    }
    operator delete(v6);
  }
  int v9 = *(CFTypeRef **)(a1 + 40);
  if (v9)
  {
    if (*v9) {
      CFRelease(*v9);
    }
    operator delete(v9);
  }
  xpc_object_t v10 = *(void **)(a1 + 48);
  if (v10) {
    operator delete(v10);
  }
}

void sub_1C5A14940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, std::runtime_error a11)
{
}

void sub_1C5A1495C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5A14978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C5BC4313 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C5BC4313 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      uint64_t v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker2<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::invoke(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2 = *a1;
  CFTypeRef cf = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A14AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_1C5A14B9C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_1C5A14BAC(_Unwind_Exception *a1)
{
}

uint64_t *boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::~function2(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISA_EENSG_IFvRKNS7_10connectionES9_EEENS7_5mutexEEES3_vJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FST_SV_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 72);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void **boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  void v14[4] = v2;
  void v14[5] = v2;
  void v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  char v16 = (char *)v14;
  uint64_t v17 = 0;
  xpc_object_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          int64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  xpc_object_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      xpc_object_t v11 = &v16[16 * v17];
      do
      {
        char v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C5A154AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    void *v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    void *v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F21045D0;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F2102D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C5BC46E3 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C5BC46E3 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      int64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      int64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>,void,coex::SubId>::invoke(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_10:
    char v18 = 1;
LABEL_11:
    uint64_t v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  char v7 = _Block_copy(v5);
  int64_t v8 = v7;
  if (!v7)
  {
    char v18 = 0;
    goto LABEL_11;
  }
  int v9 = _Block_copy(v7);
  xpc_object_t v10 = v9;
  if (v9)
  {
    xpc_object_t v11 = _Block_copy(v9);
    char v12 = v11;
    if (v11)
    {
      uint64_t v13 = _Block_copy(v11);
      char v14 = v13;
      if (v13)
      {
        unint64_t v15 = _Block_copy(v13);
        char v16 = v15;
        if (v15)
        {
          uint64_t v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          uint64_t v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        uint64_t v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      uint64_t v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    uint64_t v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  char v18 = 0;
LABEL_21:
  char v19 = operator new(4uLL);
  *char v19 = a2;
  CFNumberRef v20 = operator new(0x20uLL);
  void *v20 = boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable;
  if (v17) {
    int v21 = _Block_copy(v17);
  }
  else {
    int v21 = 0;
  }
  v20[1] = v21;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN4coex5SubIdEEEES4__block_invoke;
  block[3] = &__block_descriptor_tmp_403;
  void block[4] = v20;
  void block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable)
  {
    if ((boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable & 1) == 0)
    {
      uint64_t v22 = *(void (**)(void *, void *, uint64_t))((unint64_t)boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22) {
        v22(v23, v23, 2);
      }
    }
  }
  if ((v18 & 1) == 0) {
    _Block_release(v6);
  }
}

void sub_1C5A15D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    _Block_release(v10);
  }
  if ((v11 & 1) == 0) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN4coex5SubIdEEEES4__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1F21031B0;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(void *, void))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned int **)(a1 + 40));
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      *uint64_t v3 = 0;
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1C5A15E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C5BC472DLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C5BC472DLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      std::runtime_error v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      std::runtime_error v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(coex::SubId)>,void,coex::SubId>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::function1<void,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_1C5A15FFC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_1C5A1600C(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,coex::SubId>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNSt3__13mapIPKcNS9_4listINS9_4pairIyjEENS9_9allocatorISF_EEEENS9_4lessISC_EENSG_INSE_IKSC_SI_EEEEEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSJ_IiEENS6_8functionISQ_EENSU_IFvRKNS7_10connectionESO_SP_EEENS7_5mutexEEES3_vJSO_SP_EEEDTcl7connectfp_cvNS9_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FS17_S19_E_block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void (*)(void *, void ***, uint64_t))a1[5];
  uint64_t v4 = a1[6];
  uint64_t v6 = (void *)(a1[4] + (v4 >> 1) - 72);
  if (v4) {
    uint64_t v5 = *(void (**)(void *, void ***, uint64_t))(*v6 + v5);
  }
  v8[0] = 0;
  v8[1] = 0;
  long long v7 = v8;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v7, *(void **)a2, (void *)(a2 + 8));
  v5(v6, &v7, a3);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v8[0]);
}

void sub_1C5A16124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_1C5A16138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void *std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result + 1;
    CFDataRef v24 = a3;
    CFDataRef v25 = (void **)result;
    while (1)
    {
      uint64_t v5 = (uint64_t *)result[1];
      uint64_t v6 = v4;
      if ((void *)*result != v4)
      {
        long long v7 = (void *)result[1];
        int64_t v8 = v4;
        if (v5)
        {
          do
          {
            uint64_t v6 = v7;
            long long v7 = (void *)v7[1];
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v8[2];
            BOOL v9 = *v6 == (void)v8;
            int64_t v8 = v6;
          }
          while (v9);
        }
        unint64_t v10 = v3[4];
        if (v6[4] >= v10) {
          break;
        }
      }
      if (v5) {
        char v11 = (uint64_t **)v6;
      }
      else {
        char v11 = (uint64_t **)v4;
      }
      if (v5) {
        char v12 = (uint64_t **)(v6 + 1);
      }
      else {
        char v12 = (uint64_t **)v4;
      }
      if (!*v12) {
        goto LABEL_25;
      }
LABEL_31:
      uint64_t v22 = (void *)v3[1];
      if (v22)
      {
        do
        {
          xpc_object_t v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          xpc_object_t v23 = (void *)v3[2];
          BOOL v9 = *v23 == (void)v3;
          uint64_t v3 = v23;
        }
        while (!v9);
      }
      uint64_t v3 = v23;
      uint64_t result = v25;
      if (v23 == a3) {
        return result;
      }
    }
    char v12 = (uint64_t **)v4;
    char v11 = (uint64_t **)v4;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          char v11 = (uint64_t **)v5;
          unint64_t v13 = v5[4];
          if (v13 <= v10) {
            break;
          }
          uint64_t v5 = *v11;
          char v12 = v11;
          if (!*v11) {
            goto LABEL_25;
          }
        }
        if (v13 >= v10) {
          goto LABEL_31;
        }
        uint64_t v5 = v11[1];
        if (!v5)
        {
          char v12 = v11 + 1;
          break;
        }
      }
    }
LABEL_25:
    char v14 = (uint64_t *)operator new(0x40uLL);
    unint64_t v15 = v14;
    char v16 = v14 + 5;
    void v14[4] = v3[4];
    void v14[5] = (uint64_t)(v14 + 5);
    v14[6] = (uint64_t)(v14 + 5);
    v14[7] = 0;
    uint64_t v17 = v3[6];
    if ((void *)v17 != v3 + 5)
    {
      uint64_t v18 = 1;
      char v19 = v14 + 5;
      do
      {
        CFNumberRef v20 = operator new(0x20uLL);
        v20[1] = *(_OWORD *)(v17 + 16);
        *(void *)CFNumberRef v20 = v19;
        *((void *)v20 + 1) = v16;
        v19[1] = v20;
        v15[5] = (uint64_t)v20;
        v15[7] = v18;
        uint64_t v17 = *(void *)(v17 + 8);
        ++v18;
        char v19 = v20;
      }
      while ((void *)v17 != v3 + 5);
    }
    *unint64_t v15 = 0;
    v15[1] = 0;
    uint64_t v15[2] = (uint64_t)v11;
    const void *v12 = v15;
    int v21 = (void *)**v25;
    if (v21)
    {
      const void *v25 = v21;
      unint64_t v15 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v25[1], v15);
    void v25[2] = (void *)((char *)v25[2] + 1);
    a3 = v24;
    goto LABEL_31;
  }
  return result;
}

void std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a1[1]);
    if (a1[7])
    {
      uint64_t v3 = a1[5];
      uint64_t v2 = (uint64_t *)a1[6];
      uint64_t v4 = *v2;
      *(void *)(v4 + 8) = *(void *)(v3 + 8);
      **(void **)(v3 + 8) = v4;
      a1[7] = 0;
      if (v2 != a1 + 5)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v2[1];
          operator delete(v2);
          uint64_t v2 = v5;
        }
        while (v5 != a1 + 5);
      }
    }
    operator delete(a1);
  }
}

void **boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  void v14[4] = v2;
  void v14[5] = v2;
  void v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  char v16 = (char *)v14;
  uint64_t v17 = 0;
  uint64_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          int64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  unint64_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      char v11 = &v16[16 * v17];
      do
      {
        char v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C5A16C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    void *v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    void *v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F21047E8;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F2102D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C5BC4CA1 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C5BC4CA1 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      int64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      int64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker2<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::invoke(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)a2[1];
  uint64_t v27 = (void *)*a2;
  xpc_object_t v28 = v5;
  if (a2[2])
  {
    v5[2] = &v28;
    *a2 = v4;
    void *v4 = 0;
    a2[2] = 0;
    char v7 = *(NSObject **)a1;
    uint64_t v6 = *(const void **)(a1 + 8);
    if (v6) {
      goto LABEL_3;
    }
LABEL_11:
    int v9 = 0;
    goto LABEL_12;
  }
  uint64_t v27 = &v28;
  char v7 = *(NSObject **)a1;
  uint64_t v6 = *(const void **)(a1 + 8);
  if (!v6) {
    goto LABEL_11;
  }
LABEL_3:
  int64_t v8 = _Block_copy(v6);
  int v9 = v8;
  if (!v8)
  {
LABEL_12:
    char v20 = 1;
LABEL_13:
    unint64_t v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    *(void *)&long long v33 = 0;
    goto LABEL_23;
  }
  unint64_t v10 = _Block_copy(v8);
  char v11 = v10;
  if (!v10)
  {
    char v20 = 0;
    goto LABEL_13;
  }
  char v12 = _Block_copy(v10);
  unint64_t v13 = v12;
  if (v12)
  {
    char v14 = _Block_copy(v12);
    unint64_t v15 = v14;
    if (v14)
    {
      char v16 = _Block_copy(v14);
      uint64_t v17 = v16;
      if (v16)
      {
        uint64_t v18 = _Block_copy(v16);
        char v19 = v18;
        if (v18)
        {
          *(void *)&long long v33 = _Block_copy(v18);
          _Block_release(v19);
        }
        else
        {
          *(void *)&long long v33 = 0;
        }
        _Block_release(v17);
      }
      else
      {
        *(void *)&long long v33 = 0;
      }
      _Block_release(v15);
    }
    else
    {
      *(void *)&long long v33 = 0;
    }
    unint64_t v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    _Block_release(v13);
  }
  else
  {
    unint64_t v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    *(void *)&long long v33 = 0;
  }
  _Block_release(v11);
  char v20 = 0;
LABEL_23:
  v31[0] = 0;
  v31[1] = 0;
  xpc_object_t v30 = v31;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v30, v27, &v28);
  int v21 = operator new(0x18uLL);
  v21[1] = 0;
  v21[2] = 0;
  void *v21 = v21 + 1;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(v21, v30, v31);
  uint64_t v22 = operator new(4uLL);
  _DWORD *v22 = a3;
  xpc_object_t v23 = (char *)operator new(0x20uLL);
  CFDataRef v24 = v23;
  *(void *)xpc_object_t v23 = 0;
  unint64_t v25 = v32;
  if (v32)
  {
    *(void *)xpc_object_t v23 = v32;
    if (v25)
    {
      *(_OWORD *)(v23 + 8) = v33;
      *((void *)v23 + 3) = v34;
    }
    else
    {
      (*(void (**)(long long *, char *, void))(v25 & 0xFFFFFFFFFFFFFFFELL))(&v33, v23 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__13mapIPKcNS3_4listINS3_4pairIyjEENS3_9allocatorIS9_EEEENS3_4lessIS6_EENSA_INS8_IKS6_SC_EEEEEEN4coex5SubIdEEEESI_SK__block_invoke;
  block[3] = &__block_descriptor_tmp_410;
  void block[4] = v24;
  void block[5] = v21;
  void block[6] = v22;
  dispatch_async(v7, block);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v31[0]);
  if (v32)
  {
    if ((v32 & 1) == 0)
    {
      long long v26 = *(void (**)(long long *, long long *, uint64_t))(v32 & 0xFFFFFFFFFFFFFFFELL);
      if (v26) {
        v26(&v33, &v33, 2);
      }
    }
    unint64_t v32 = 0;
  }
  if ((v20 & 1) == 0) {
    _Block_release(v9);
  }
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v28);
}

void sub_1C5A1758C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16)
{
  operator delete(v17);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a14);
  boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function(&a16);
  if ((v18 & 1) == 0) {
    _Block_release(v16);
  }
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__13mapIPKcNS3_4listINS3_4pairIyjEENS3_9allocatorIS9_EEEENS3_4lessIS6_EENSA_INS8_IKS6_SC_EEEEEEN4coex5SubIdEEEESI_SK__block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v11.__imp_.__imp_ = 0;
  uint64_t v12 = 0;
  v11.__vftable = (std::runtime_error_vtbl *)&v11.__imp_;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v11, *(void **)v2, (void *)(v2 + 8));
  if (!*v3)
  {
    std::runtime_error::runtime_error(&v13, "call to empty boost::function");
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1F21031B0;
    boost::throw_exception<boost::bad_function_call>(&v13);
  }
  uint64_t v4 = **(unsigned int **)(a1 + 48);
  uint64_t v5 = *(void (**)(void *, std::runtime_error *, uint64_t))((*v3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  std::runtime_error v13 = v11;
  uint64_t v14 = v12;
  if (v12)
  {
    *((void *)v11.__imp_.__imp_ + 2) = &v13.__imp_;
    v11.__vftable = (std::runtime_error_vtbl *)&v11.__imp_;
    v11.__imp_.__imp_ = 0;
    uint64_t v12 = 0;
  }
  else
  {
    v13.__vftable = (std::runtime_error_vtbl *)&v13.__imp_;
  }
  v5(v3 + 1, &v13, v4);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy((void *)v13.__imp_.__imp_);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy((void *)v11.__imp_.__imp_);
  uint64_t v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = *v6;
    if (*v6)
    {
      if ((v7 & 1) == 0)
      {
        int64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 & 0xFFFFFFFFFFFFFFFELL);
        if (v8) {
          v8(v6 + 1, v6 + 1, 2);
        }
      }
      *uint64_t v6 = 0;
    }
    operator delete(v6);
  }
  int v9 = *(void ***)(a1 + 40);
  if (v9)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v9[1]);
    operator delete(v9);
  }
  unint64_t v10 = *(void **)(a1 + 48);
  if (v10) {
    operator delete(v10);
  }
}

void sub_1C5A17748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, std::runtime_error a12)
{
}

void sub_1C5A17764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_1C5A17778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_1C5A17794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C5BC4D4ELL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C5BC4D4ELL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      uint64_t v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker2<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::invoke(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)a2[1];
  uint64_t v5 = (void **)*a2;
  uint64_t v6 = v4;
  if (a2[2])
  {
    uint64_t v4[2] = &v6;
    *a2 = v3;
    *uint64_t v3 = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v5 = &v6;
  }
  (*(void (**)(uint64_t, void ***))(v2 + 16))(v2, &v5);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v6);
}

void sub_1C5A1791C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_1C5A179CC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_1C5A179DC(_Unwind_Exception *a1)
{
}

uint64_t *boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::~function2(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIKN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIKN4coex6Module5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ctu::cf::insert<__CFString const*,__CFBoolean const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A17B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5A17B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A17C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5A17C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,long long>(__CFDictionary *a1, CFTypeRef cf, uint64_t a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A17CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A17D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A17DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A17DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,double>(__CFDictionary *a1, CFTypeRef cf, CFAllocatorRef allocator, double a4)
{
  if (cf) {
    CFRetain(cf);
  }
  double valuePtr = a4;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A17EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A17ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL ctu::cf::update<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (!a3)
  {
    BOOL v6 = 0;
    if (!cf) {
      return v6;
    }
LABEL_9:
    CFRelease(cf);
    return v6;
  }
  CFRetain(a3);
  BOOL v6 = cf != 0;
  if (cf) {
    CFDictionarySetValue(a1, cf, a3);
  }
  CFRelease(a3);
  if (cf) {
    goto LABEL_9;
  }
  return v6;
}

void sub_1C5A17F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5A17FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,__CFArray const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionarySetValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A18034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5A18058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFArray *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A180EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5A18110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A181A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5A181C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,int>(__CFDictionary *a1, CFTypeRef cf, int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  int valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A18278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A1829C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  if (cf) {
    CFRetain(cf);
  }
  BOOL v6 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    BOOL v6 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  long long v7 = *v6;
  if (cf && v7)
  {
    CFDictionaryAddValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A1834C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void ctu::cf::insert<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A18410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A18434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned short>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A184E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A1850C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned char>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A185C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A185E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,void const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A18678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5A1869C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_339()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

const char *IOKitEventNotifier::getName(IOKitEventNotifier *this)
{
  return "iokit.event";
}

uint64_t IOKitEventNotifier::setMESAQuality(uint64_t a1)
{
  if (*(void *)(a1 + 72)) {
    ctu::iokit::Controller::setMesaQuality();
  }
  return 0;
}

void IOKitEventNotifier::start(IOKitEventNotifier *this)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 9)) {
    return;
  }
  uint64_t v2 = (const void *)*((void *)this + 11);
  if (!v2 || !*((void *)this + 12)) {
    goto LABEL_12;
  }
  uint64_t v3 = _Block_copy(v2);
  uint64_t v4 = *((void *)this + 12);
  aBlocuint64_t k = v3;
  xpc_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  char v5 = ctu::iokit::Controller::setAccessoryCallback();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if ((v5 & 1) == 0 && (BOOL v6 = *((void *)this + 5), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "Failed to setup accessory callback", buf, 2u);
    long long v7 = (const void *)*((void *)this + 13);
    if (!v7) {
      goto LABEL_23;
    }
  }
  else
  {
LABEL_12:
    long long v7 = (const void *)*((void *)this + 13);
    if (!v7) {
      goto LABEL_23;
    }
  }
  if (*((void *)this + 14))
  {
    CFNumberRef v8 = _Block_copy(v7);
    CFNumberRef v9 = *((void *)this + 14);
    CFDataRef v41 = v8;
    CFDataRef v42 = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    char v10 = ctu::iokit::Controller::setDisplayCallback();
    if (v42) {
      dispatch_release(v42);
    }
    if (v41) {
      _Block_release(v41);
    }
    if ((v10 & 1) == 0)
    {
      std::runtime_error v11 = *((void *)this + 5);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Failed to setup display callback", buf, 2u);
      }
    }
  }
LABEL_23:
  if (!*((void *)this + 15) || !*((void *)this + 16)) {
    goto LABEL_39;
  }
  int v12 = ctu::iokit::Controller::acquireMesaService(*((ctu::iokit::Controller **)this + 9));
  std::runtime_error v13 = *((void *)this + 5);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = "failed";
    if (v12) {
      uint64_t v14 = "succeeded";
    }
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v46 = v14;
    _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I Acquire MESA service %s", buf, 0xCu);
  }
  if (v12)
  {
    unint64_t v15 = (void *)*((void *)this + 15);
    if (v15) {
      unint64_t v15 = _Block_copy(v15);
    }
    char v16 = *((void *)this + 16);
    uint64_t v39 = v15;
    xpc_object_t v40 = v16;
    if (v16) {
      dispatch_retain(v16);
    }
    ctu::iokit::Controller::setMesaCallback();
    if (v40) {
      dispatch_release(v40);
    }
    if (v39) {
      _Block_release(v39);
    }
LABEL_39:
    char v18 = (const void *)*((void *)this + 17);
    if (v18) {
      goto LABEL_40;
    }
    goto LABEL_50;
  }
  uint64_t v17 = *((void *)this + 5);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
    goto LABEL_39;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_ERROR, "Failed to setup MESA callback", buf, 2u);
  char v18 = (const void *)*((void *)this + 17);
  if (v18)
  {
LABEL_40:
    if (*((void *)this + 18))
    {
      char v19 = _Block_copy(v18);
      char v20 = *((void *)this + 18);
      CFNumberRef v37 = v19;
      int v38 = v20;
      if (v20) {
        dispatch_retain(v20);
      }
      char v21 = ctu::iokit::Controller::setPowerSourceCallback();
      if (v38) {
        dispatch_release(v38);
      }
      if (v37) {
        _Block_release(v37);
      }
      if ((v21 & 1) == 0)
      {
        uint64_t v22 = *((void *)this + 5);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1C59C6000, v22, OS_LOG_TYPE_ERROR, "Failed to setup power source", buf, 2u);
        }
      }
    }
  }
LABEL_50:
  if (*((void *)this + 19) && *((void *)this + 20) || *((void *)this + 21) && *((void *)this + 22))
  {
    int v23 = ctu::iokit::Controller::setupCameraService(*((ctu::iokit::Controller **)this + 9));
    CFDataRef v24 = *((void *)this + 5);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v25 = "failed";
      if (v23) {
        unint64_t v25 = "succeeded";
      }
      *(_DWORD *)long long buf = 136315138;
      xpc_object_t v46 = v25;
      _os_log_impl(&dword_1C59C6000, v24, OS_LOG_TYPE_DEFAULT, "#I Setup camera service is %s", buf, 0xCu);
    }
    if (v23)
    {
      long long v26 = (const void *)*((void *)this + 19);
      if (v26 && *((void *)this + 20))
      {
        uint64_t v27 = _Block_copy(v26);
        xpc_object_t v28 = *((void *)this + 20);
        CFMutableDictionaryRef v35 = v27;
        CFTypeID v36 = v28;
        if (v28) {
          dispatch_retain(v28);
        }
        ctu::iokit::Controller::setFaceIDCallback();
        if (v36) {
          dispatch_release(v36);
        }
        if (v35) {
          _Block_release(v35);
        }
      }
      xpc_object_t v29 = (const void *)*((void *)this + 21);
      if (v29 && *((void *)this + 22))
      {
        xpc_object_t v30 = _Block_copy(v29);
        xpc_object_t v31 = *((void *)this + 22);
        long long v33 = v30;
        uint64_t v34 = v31;
        if (v31) {
          dispatch_retain(v31);
        }
        ctu::iokit::Controller::setFrontCameraCallback();
        if (v34) {
          dispatch_release(v34);
        }
        if (v33) {
          _Block_release(v33);
        }
      }
    }
    else
    {
      unint64_t v32 = *((void *)this + 5);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C59C6000, v32, OS_LOG_TYPE_ERROR, "Failed to setup camera service callback", buf, 2u);
      }
    }
  }
}

void sub_1C5A18BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitAccessoryParameter)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayLink)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitMesaEvent)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitPowerSource)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitFaceIDState)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitFrontCameraState)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void IOKitEventNotifier::registerCallbackAccessory(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 88);
  *(void *)(a1 + 88) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  long long v7 = *(NSObject **)(a1 + 96);
  *(void *)(a1 + 96) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void IOKitEventNotifier::registerCallbackVideo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  long long v7 = *(NSObject **)(a1 + 112);
  *(void *)(a1 + 112) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void IOKitEventNotifier::registerCallbackMesa(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 120);
  *(void *)(a1 + 120) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  long long v7 = *(NSObject **)(a1 + 128);
  *(void *)(a1 + 128) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void IOKitEventNotifier::registerCallbackPowerSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 136);
  *(void *)(a1 + 136) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  long long v7 = *(NSObject **)(a1 + 144);
  *(void *)(a1 + 144) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void IOKitEventNotifier::registerCallbackFaceID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 152);
  *(void *)(a1 + 152) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  long long v7 = *(NSObject **)(a1 + 160);
  *(void *)(a1 + 160) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void IOKitEventNotifier::registerCallbackFrontCamera(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  char v5 = *(const void **)(a1 + 168);
  *(void *)(a1 + 168) = v4;
  if (v5) {
    _Block_release(v5);
  }
  BOOL v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  long long v7 = *(NSObject **)(a1 + 176);
  *(void *)(a1 + 176) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

uint64_t IOKitEventNotifier::queryPowerSource(IOKitEventNotifier *this)
{
  uint64_t v1 = (ctu::iokit::Controller *)*((void *)this + 9);
  if (v1) {
    return ctu::iokit::Controller::queryPowerSource(v1);
  }
  else {
    return 1;
  }
}

uint64_t IOKitEventNotifier::IOKitEventNotifier(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F2104A18;
  char v11 = 11;
  strcpy((char *)__p, "iokit.event");
  ctu::LoggerCommonBase::LoggerCommonBase();
  *(void *)(a1 + 8) = &unk_1F2102CB8;
  *(void *)(a1 + 56) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1F2104978;
  long long v7 = (std::__shared_weak_count *)a2[1];
  CFNumberRef v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::iokit::Controller::create();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 184) = a3;
  return a1;
}

void sub_1C5A192F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  void *v2 = v4;
  MEMORY[0x1C87940C0](v3);
  _Unwind_Resume(a1);
}

void sub_1C5A19318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IOKitEventNotifier::shutdown(IOKitEventNotifier *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (__CFRunLoop *)*((void *)this + 23);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (__CFRunLoop *)*((void *)this + 23);
    if (!v3) {
      return;
    }
  }
  if (CFRunLoopIsWaiting(v3))
  {
    uint64_t v4 = dispatch_group_create();
    char v5 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v5);
    }
    uint64_t v6 = (__CFRunLoop *)*((void *)this + 23);
    long long v7 = (const void *)*MEMORY[0x1E4F1D418];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN18IOKitEventNotifier8shutdownEv_block_invoke;
    block[3] = &__block_descriptor_tmp_23;
    dispatch_group_t group = v5;
    if (v5)
    {
      dispatch_retain(v5);
      dispatch_group_enter(group);
    }
    CFRunLoopPerformBlock(v6, v7, block);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 23));
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
      dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v5);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
}

void sub_1C5A194D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
    dispatch_release(v14);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void IOKitEventNotifier::~IOKitEventNotifier(IOKitEventNotifier *this)
{
  *(void *)this = &unk_1F2104978;
  IOKitEventNotifier::shutdown(this);
  uint64_t v2 = *((void *)this + 22);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 21);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *((void *)this + 20);
  if (v4) {
    dispatch_release(v4);
  }
  char v5 = (const void *)*((void *)this + 19);
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = *((void *)this + 18);
  if (v6) {
    dispatch_release(v6);
  }
  long long v7 = (const void *)*((void *)this + 17);
  if (v7) {
    _Block_release(v7);
  }
  CFNumberRef v8 = *((void *)this + 16);
  if (v8) {
    dispatch_release(v8);
  }
  CFNumberRef v9 = (const void *)*((void *)this + 15);
  if (v9) {
    _Block_release(v9);
  }
  char v10 = *((void *)this + 14);
  if (v10) {
    dispatch_release(v10);
  }
  char v11 = (const void *)*((void *)this + 13);
  if (v11) {
    _Block_release(v11);
  }
  int v12 = *((void *)this + 12);
  if (v12) {
    dispatch_release(v12);
  }
  std::runtime_error v13 = (const void *)*((void *)this + 11);
  if (v13) {
    _Block_release(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  *(void *)this = &unk_1F2104A18;
  MEMORY[0x1C87940C0]((char *)this + 8);
}

{
  void *v1;
  uint64_t vars8;

  IOKitEventNotifier::~IOKitEventNotifier(this);

  operator delete(v1);
}

void IOKitEventNotifier::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = operator new(0xD8uLL);
  long long v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1F2104A58;
  CFNumberRef v8 = v6 + 3;
  uint64_t v9 = *a1;
  char v10 = (std::__shared_weak_count *)a1[1];
  v11[0] = v9;
  v11[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IOKitEventNotifier::IOKitEventNotifier((uint64_t)(v6 + 3), v11, a2);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *a3 = v8;
  a3[1] = v7;
}

void sub_1C5A19830(_Unwind_Exception *a1)
{
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t IOKitEventNotifier::getAccessoryPrimaryPortNumber(ctu::iokit::Controller **this)
{
  return ctu::iokit::Controller::getAccessoryPrimaryPortNumber(this[9]);
}

uint64_t ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "iokit.event");
}

uint64_t ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2104A18;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2104A18;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_emplace<IOKitEventNotifier>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2104A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IOKitEventNotifier>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2104A58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<IOKitEventNotifier>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__construct_at[abi:ne180100]<IOKitEventNotifier,std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,IOKitEventNotifier*>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IOKitEventNotifier::IOKitEventNotifier(a1, v6, *a3);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5A19AA4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sys::getCurrentBootSessionUUID(unsigned char *a1@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)&v19[13] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__s = v3;
  *(_OWORD *)char v19 = v3;
  size_t v15 = 37;
  if (!sysctlbyname("kern.bootsessionuuid", __s, &v15, 0, 0) && v15 == 37)
  {
    size_t v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v8 = v4 | 7;
      }
      uint64_t v9 = v8 + 1;
      char v10 = operator new(v8 + 1);
      *((void *)a1 + 1) = v5;
      *((void *)a1 + 2) = v9 | 0x8000000000000000;
      *(void *)a1 = v10;
      a1 = v10;
    }
    else
    {
      a1[23] = v4;
      if (!v4) {
        goto LABEL_17;
      }
    }
    memcpy(a1, __s, v5);
LABEL_17:
    a1[v5] = 0;
    return;
  }
  GetABMLogServer(&v13);
  uint64_t v6 = *((void *)GetGlobalLogger(&v13) + 4);
  long long v7 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    char v11 = __error();
    int v12 = strerror(*v11);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v17 = v12;
    _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "Failed to get boot session uuid, error: %s", buf, 0xCu);
  }
  a1[23] = 0;
  *a1 = 0;
}

void sub_1C5A19CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sys::updateBootSessionUUID(sys *this)
{
  memset(&v19, 170, sizeof(v19));
  sys::getCurrentBootSessionUUID(&v19);
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(&v20);
    long long v2 = v20;
    long long v20 = 0uLL;
    long long v3 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    if (*((void *)&v20 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  uint64_t v17 = v1;
  char v18 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x1E4F4C490];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C490]);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v16 = v10 | 0x8000000000000000;
    __dst[0] = v8;
LABEL_19:
    memmove(v8, v5, (size_t)v7);
    *((unsigned char *)v7 + (void)v8) = 0;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  HIBYTE(v16) = v6;
  uint64_t v8 = __dst;
  if (v6) {
    goto LABEL_19;
  }
  LOBYTE(__dst[0]) = 0;
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    std::string __p = v19;
    goto LABEL_21;
  }
LABEL_20:
  std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
LABEL_21:
  *(void *)&long long v20 = __dst;
  *((void *)&v20 + 1) = &__p;
  char v21 = v1;
  os_unfair_lock_lock(v1 + 10);
  uint64_t v11 = SharedData::setPreference<std::string>(std::string const&,std::string)::{lambda(void)#1}::operator()((char **)&v20);
  os_unfair_lock_unlock(v1 + 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_23:
      int v12 = v18;
      if (!v18) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
  }
  else if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__dst[0]);
  int v12 = v18;
  if (!v18) {
    goto LABEL_28;
  }
LABEL_27:
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v11;
    }
    goto LABEL_29;
  }
LABEL_28:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
LABEL_29:
  }
    operator delete(v19.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1C5A19F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

BOOL sys::isBootSessionChanged(sys *this)
{
  memset(__s1, 170, sizeof(__s1));
  sys::getCurrentBootSessionUUID(__s1);
  std::string __p = 0;
  xpc_object_t v30 = 0;
  uint64_t v31 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(&v33);
    long long v2 = v33;
    long long v33 = 0uLL;
    long long v3 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  uint64_t v27 = v1;
  xpc_object_t v28 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x1E4F4C490];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C490]);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v26 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_18;
  }
  HIBYTE(v26) = v6;
  uint64_t v8 = __dst;
  if (v6) {
LABEL_18:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  *(void *)&long long v33 = __dst;
  *((void *)&v33 + 1) = &__p;
  uint64_t v34 = v1;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::getPreference<std::string>(std::string const&,std::string &)::{lambda(void)#1}>(v1 + 6, (uint64_t)&v33);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v11 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  char v12 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0) {
    uint64_t v13 = (void *)HIBYTE(__s1[2]);
  }
  else {
    uint64_t v13 = __s1[1];
  }
  uint64_t v14 = (void *)HIBYTE(v31);
  int v15 = SHIBYTE(v31);
  if (v31 < 0) {
    uint64_t v14 = v30;
  }
  if (v13 != v14)
  {
    BOOL v22 = 1;
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  if (v31 >= 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if (SHIBYTE(__s1[2]) < 0)
  {
    BOOL v22 = memcmp(__s1[0], p_p, (size_t)__s1[1]) != 0;
    goto LABEL_45;
  }
  if (HIBYTE(__s1[2]))
  {
    uint64_t v17 = HIBYTE(__s1[2]) - 1;
    char v18 = __s1;
    do
    {
      int v20 = *(unsigned __int8 *)v18;
      char v18 = (void **)((char *)v18 + 1);
      int v19 = v20;
      int v21 = *p_p++;
      BOOL v22 = v19 != v21;
    }
    while (v19 == v21 && v17-- != 0);
LABEL_45:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_46;
    }
LABEL_49:
    operator delete(__p);
    if ((HIBYTE(__s1[2]) & 0x80) == 0) {
      return v22;
    }
LABEL_50:
    operator delete(__s1[0]);
    return v22;
  }
  BOOL v22 = 0;
  if (SHIBYTE(v31) < 0) {
    goto LABEL_49;
  }
LABEL_46:
  if (v12 < 0) {
    goto LABEL_50;
  }
  return v22;
}

void sub_1C5A1A2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sys::isHardwareModelChanged(sys *this)
{
  CFTypeRef v42 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(__dst);
    long long v2 = __dst[0];
    __dst[0] = 0uLL;
    long long v3 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
    if (*((void *)&__dst[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  std::string __p = v1;
  CFNumberRef v37 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x1E4F4C5D0];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C5D0]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *((void *)&__dst[0] + 1) = v7;
    *(void *)&__dst[1] = v10 | 0x8000000000000000;
    *(void *)&__dst[0] = v8;
    goto LABEL_18;
  }
  BYTE7(__dst[1]) = v6;
  uint64_t v8 = __dst;
  if (v6) {
LABEL_18:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  os_unfair_lock_lock(v1 + 10);
  Preferences::getPreference<__CFDictionary const*>(v1, (const char *)__dst, &v42);
  os_unfair_lock_unlock(v1 + 10);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  else
  {
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  CFTypeID v12 = CFGetTypeID(v11);
  if (v12 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v13 = (const __CFDictionary *)v42;
  CFTypeRef cf = v42;
  if (v42) {
    CFRetain(v42);
  }
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, v13);
  memset(__dst, 170, 24);
  uint64_t v14 = (const void *)*MEMORY[0x1E4F4D2F8];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4D2F8]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v16 = (std::__shared_weak_count *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    CFNumberRef v37 = v16;
    int64_t v38 = v20 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v38) = v15;
  p_p = &__p;
  if (v15) {
LABEL_36:
  }
    memmove(p_p, v14, (size_t)v16);
  int v21 = (const char *)*MEMORY[0x1E4F4C518];
  *((unsigned char *)&v16->__vftable + (void)p_p) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v43, v21);
  ctu::cf::map_adapter::getString();
  BOOL v22 = (config::hw *)MEMORY[0x1C8794290](&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  config::hw::product(v22);
  char v23 = BYTE7(__dst[1]);
  if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
    CFDataRef v24 = (std::__shared_weak_count *)BYTE7(__dst[1]);
  }
  else {
    CFDataRef v24 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
  }
  unint64_t v25 = (std::__shared_weak_count *)HIBYTE(v38);
  int v26 = SHIBYTE(v38);
  if (v38 < 0) {
    unint64_t v25 = v37;
  }
  if (v24 != v25)
  {
    BOOL v18 = 1;
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_65;
  }
  if (v38 >= 0) {
    uint64_t v27 = (unsigned __int8 *)&__p;
  }
  else {
    uint64_t v27 = (unsigned __int8 *)__p;
  }
  if (SBYTE7(__dst[1]) < 0)
  {
    BOOL v18 = memcmp(*(const void **)&__dst[0], v27, *((size_t *)&__dst[0] + 1)) != 0;
    goto LABEL_60;
  }
  if (BYTE7(__dst[1]))
  {
    uint64_t v28 = BYTE7(__dst[1]) - 1;
    xpc_object_t v29 = (unsigned __int8 *)__dst;
    do
    {
      int v31 = *v29++;
      int v30 = v31;
      int v32 = *v27++;
      BOOL v18 = v30 != v32;
    }
    while (v30 == v32 && v28-- != 0);
LABEL_60:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_61;
    }
LABEL_65:
    operator delete(__p);
    if ((BYTE7(__dst[1]) & 0x80) == 0)
    {
LABEL_62:
      MEMORY[0x1C87942E0](v39);
      CFTypeRef v34 = cf;
      if (!cf) {
        return v18;
      }
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  BOOL v18 = 0;
  if (SHIBYTE(v38) < 0) {
    goto LABEL_65;
  }
LABEL_61:
  if ((v23 & 0x80) == 0) {
    goto LABEL_62;
  }
LABEL_66:
  operator delete(*(void **)&__dst[0]);
  MEMORY[0x1C87942E0](v39);
  CFTypeRef v34 = cf;
  if (cf) {
LABEL_67:
  }
    CFRelease(v34);
  return v18;
}

void sub_1C5A1A784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C87942E0](&a15);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C87942E0](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void sub_1C5A1A828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sys::isFWVersionChanged(unsigned __int8 *a1)
{
  CFTypeRef cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v2 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(__dst);
    long long v3 = __dst[0];
    __dst[0] = 0uLL;
    size_t v4 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    size_t v5 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
    if (*((void *)&__dst[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    long long v2 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  std::string __p = v2;
  CFNumberRef v37 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v6 = (const void *)*MEMORY[0x1E4F4C5D0];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C5D0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    *((void *)&__dst[0] + 1) = v8;
    *(void *)&__dst[1] = v11 | 0x8000000000000000;
    *(void *)&__dst[0] = v9;
    goto LABEL_18;
  }
  BYTE7(__dst[1]) = v7;
  uint64_t v9 = __dst;
  if (v7) {
LABEL_18:
  }
    memmove(v9, v6, v8);
  *((unsigned char *)v9 + v8) = 0;
  os_unfair_lock_lock(v2 + 10);
  Preferences::getPreference<__CFDictionary const*>(v2, (const char *)__dst, &cf);
  os_unfair_lock_unlock(v2 + 10);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    CFTypeRef v12 = cf;
    if (!cf) {
      return 0;
    }
  }
  else
  {
    CFTypeRef v12 = cf;
    if (!cf) {
      return 0;
    }
  }
  CFTypeID v13 = CFGetTypeID(v12);
  if (v13 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v14 = (const __CFDictionary *)cf;
  CFTypeRef v40 = cf;
  if (cf) {
    CFRetain(cf);
  }
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, v14);
  memset(__dst, 170, 24);
  size_t v15 = (const void *)*MEMORY[0x1E4F4D2F8];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4D2F8]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = (std::__shared_weak_count *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v20 = v16 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_p = operator new(v20 + 1);
    CFNumberRef v37 = v17;
    unint64_t v38 = v21 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v38) = v16;
  p_p = &__p;
  if (v16) {
LABEL_36:
  }
    memmove(p_p, v15, (size_t)v17);
  BOOL v22 = (const char *)*MEMORY[0x1E4F4C770];
  *((unsigned char *)&v17->__vftable + (void)p_p) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v43, v22);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8794290](&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
    uint64_t v24 = BYTE7(__dst[1]);
  }
  else {
    uint64_t v24 = *((void *)&__dst[0] + 1);
  }
  uint64_t v25 = a1[23];
  int v26 = (char)v25;
  if ((v25 & 0x80u) != 0) {
    uint64_t v25 = *((void *)a1 + 1);
  }
  if (v24 == v25)
  {
    if (v26 >= 0) {
      char v23 = a1;
    }
    else {
      char v23 = *(unsigned __int8 **)a1;
    }
    if ((BYTE7(__dst[1]) & 0x80) != 0)
    {
      long long v33 = *(void **)&__dst[0];
      BOOL v19 = memcmp(*(const void **)&__dst[0], v23, *((size_t *)&__dst[0] + 1)) != 0;
      goto LABEL_61;
    }
    if (!BYTE7(__dst[1]))
    {
      BOOL v19 = 0;
      MEMORY[0x1C87942E0](v39, v23);
      CFTypeRef v34 = v40;
      if (!v40) {
        return v19;
      }
      goto LABEL_63;
    }
    uint64_t v27 = BYTE7(__dst[1]) - 1;
    uint64_t v28 = (unsigned __int8 *)__dst;
    do
    {
      int v30 = *v28++;
      int v29 = v30;
      int v31 = *v23++;
      BOOL v19 = v29 != v31;
    }
    while (v29 == v31 && v27-- != 0);
    if ((BYTE7(__dst[1]) & 0x80) == 0) {
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if ((BYTE7(__dst[1]) & 0x80) == 0) {
      goto LABEL_62;
    }
  }
  long long v33 = *(void **)&__dst[0];
LABEL_61:
  operator delete(v33);
LABEL_62:
  MEMORY[0x1C87942E0](v39, v23);
  CFTypeRef v34 = v40;
  if (v40) {
LABEL_63:
  }
    CFRelease(v34);
  return v19;
}

BOOL sys::isOSVersionChanged(sys *this)
{
  CFTypeRef v42 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(__dst);
    long long v2 = __dst[0];
    __dst[0] = 0uLL;
    long long v3 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
    if (*((void *)&__dst[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  std::string __p = v1;
  CFNumberRef v37 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x1E4F4C5D0];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C5D0]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v8 = operator new(v9 + 1);
    *((void *)&__dst[0] + 1) = v7;
    *(void *)&__dst[1] = v10 | 0x8000000000000000;
    *(void *)&__dst[0] = v8;
    goto LABEL_18;
  }
  BYTE7(__dst[1]) = v6;
  size_t v8 = __dst;
  if (v6) {
LABEL_18:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  os_unfair_lock_lock(v1 + 10);
  Preferences::getPreference<__CFDictionary const*>(v1, (const char *)__dst, &v42);
  os_unfair_lock_unlock(v1 + 10);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  else
  {
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  CFTypeID v12 = CFGetTypeID(v11);
  if (v12 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v13 = (const __CFDictionary *)v42;
  CFTypeRef cf = v42;
  if (v42) {
    CFRetain(v42);
  }
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, v13);
  memset(__dst, 170, 24);
  CFDictionaryRef v14 = (const void *)*MEMORY[0x1E4F4D2F8];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4D2F8]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v16 = (std::__shared_weak_count *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    CFNumberRef v37 = v16;
    int64_t v38 = v20 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v38) = v15;
  p_p = &__p;
  if (v15) {
LABEL_36:
  }
    memmove(p_p, v14, (size_t)v16);
  uint64_t v21 = (const char *)*MEMORY[0x1E4F4C778];
  *((unsigned char *)&v16->__vftable + (void)p_p) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v43, v21);
  ctu::cf::map_adapter::getString();
  BOOL v22 = (config::build *)MEMORY[0x1C8794290](&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  config::build::version(v22);
  char v23 = BYTE7(__dst[1]);
  if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
    uint64_t v24 = (std::__shared_weak_count *)BYTE7(__dst[1]);
  }
  else {
    uint64_t v24 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
  }
  uint64_t v25 = (std::__shared_weak_count *)HIBYTE(v38);
  int v26 = SHIBYTE(v38);
  if (v38 < 0) {
    uint64_t v25 = v37;
  }
  if (v24 != v25)
  {
    BOOL v18 = 1;
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_65;
  }
  if (v38 >= 0) {
    uint64_t v27 = (unsigned __int8 *)&__p;
  }
  else {
    uint64_t v27 = (unsigned __int8 *)__p;
  }
  if (SBYTE7(__dst[1]) < 0)
  {
    BOOL v18 = memcmp(*(const void **)&__dst[0], v27, *((size_t *)&__dst[0] + 1)) != 0;
    goto LABEL_60;
  }
  if (BYTE7(__dst[1]))
  {
    uint64_t v28 = BYTE7(__dst[1]) - 1;
    int v29 = (unsigned __int8 *)__dst;
    do
    {
      int v31 = *v29++;
      int v30 = v31;
      int v32 = *v27++;
      BOOL v18 = v30 != v32;
    }
    while (v30 == v32 && v28-- != 0);
LABEL_60:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_61;
    }
LABEL_65:
    operator delete(__p);
    if ((BYTE7(__dst[1]) & 0x80) == 0)
    {
LABEL_62:
      MEMORY[0x1C87942E0](v39);
      CFTypeRef v34 = cf;
      if (!cf) {
        return v18;
      }
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  BOOL v18 = 0;
  if (SHIBYTE(v38) < 0) {
    goto LABEL_65;
  }
LABEL_61:
  if ((v23 & 0x80) == 0) {
    goto LABEL_62;
  }
LABEL_66:
  operator delete(*(void **)&__dst[0]);
  MEMORY[0x1C87942E0](v39);
  CFTypeRef v34 = cf;
  if (cf) {
LABEL_67:
  }
    CFRelease(v34);
  return v18;
}

void sub_1C5A1B150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C87942E0](&a15);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C87942E0](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void sub_1C5A1B1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SharedData::create_default_global(void *a1@<X8>)
{
  std::string __p = operator new(0x60uLL);
  strcpy((char *)__p, "/private/var/wireless/Library/Preferences/com.apple.AppleBasebandManager.Statistics.plist");
  v3.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v3.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v10.st_blkstd::string::size_type size = v3;
  *(timespec *)v10.st_qspare = v3;
  v10.st_birthtimespec = v3;
  *(timespec *)&v10.st_std::string::size_type size = v3;
  v10.st_mtimespec = v3;
  v10.st_ctimespec = v3;
  *(timespec *)&v10.st_uid = v3;
  v10.st_atimespec = v3;
  long long v9 = xmmword_1C5BC4ED0;
  *(timespec *)&v10.st_dev = v3;
  if (!stat((const char *)__p, &v10))
  {
    size_t v5 = v9 >= 0 ? (const std::__fs::filesystem::path *)&__p : (const std::__fs::filesystem::path *)__p;
    if (remove(v5, v4))
    {
      if (v9 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      unlink(p_p);
    }
  }
  size_t v7 = operator new(0x30uLL);
  MEMORY[0x1C87942F0](v7, @"com.apple.AppleBasebandManager.data", *MEMORY[0x1E4F1D3F0]);
  v7[3] = 0;
  v7[4] = 0;
  *((_DWORD *)v7 + 10) = 0;
  std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(a1, (uint64_t)v7);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void sub_1C5A1B324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  size_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2104AA8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (a2)
  {
    size_t v6 = *(std::__shared_weak_count **)(a2 + 32);
    if (v6)
    {
      if (v6->__shared_owners_ == -1)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        *(void *)(a2 + 24) = a2;
        *(void *)(a2 + 32) = v4;
        std::__shared_weak_count::__release_weak(v6);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 24) = a2;
      *(void *)(a2 + 32) = v4;
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_7:
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return a1;
}

void sub_1C5A1B484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    timespec v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (void *)MEMORY[0x1C8794300](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    timespec v3 = (void *)MEMORY[0x1C8794300](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC4F5BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC4F5BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC4F5BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC4F5BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t SharedData::setPreference<std::string>(std::string const&,std::string)::{lambda(void)#1}::operator()(char **a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = *a1;
  if (v1[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v1, *((void *)v1 + 1));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)v1;
    __p.__r_.__value_.__r.__words[2] = *((void *)v1 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v9 = __p;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_6:
  if (v3[23] >= 0) {
    size_t v5 = v3;
  }
  else {
    size_t v5 = *(char **)v3;
  }
  uint64_t v6 = ctu::cf::plist_adapter::set<std::string>((int)v2, (uint64_t)&v9, v5);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v6;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return v6;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1C5A1B7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a14 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::cf::plist_adapter::set<std::string>(int a1, uint64_t a2, char *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v7 = *(std::string *)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a3);
  uint64_t v4 = ctu::cf::plist_adapter::set<std::string>();
  MEMORY[0x1C8794290](&v6);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v4;
}

uint64_t ctu::cf::plist_adapter::set<std::string>()
{
  return 0;
}

void sub_1C5A1B99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::getPreference<std::string>(std::string const&,std::string &)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v4 = *(uint64_t (****)(void, uint64_t))(a2 + 16);
  if (*(char *)(*(void *)a2 + 23) >= 0) {
    size_t v5 = *(const char **)a2;
  }
  else {
    size_t v5 = **(const char ***)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v9, v5);
  uint64_t v6 = (const void *)(**v4)(v4, v9);
  if (v6)
  {
    uint64_t v7 = ctu::cf::assign();
    CFRelease(v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  MEMORY[0x1C8794290](&v9);
  os_unfair_lock_unlock(v3);
  return v7;
}

BOOL Preferences::getPreference<__CFDictionary const*>(uint64_t (***a1)(void, uint64_t), const char *a2, void *a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  size_t v5 = (const void *)(**a1)(a1, v11);
  uint64_t v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    BOOL v8 = v7 == CFDictionaryGetTypeID();
    BOOL v9 = v8;
    if (v8) {
      *a3 = v6;
    }
    CFRelease(v6);
  }
  else
  {
    BOOL v9 = 0;
  }
  MEMORY[0x1C8794290](&v11);
  return v9;
}

uint64_t __cxx_global_var_init()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void AppleBasebandManagerInitServer(const char *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  size_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v31 = *a2;
  int v32 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a2[3];
  uint64_t v29 = a2[2];
  int v30 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeID v7 = (std::__shared_weak_count *)a2[5];
  void v27[2] = a2[4];
  uint64_t v28 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    v27[0] = v4;
    v27[1] = (uint64_t)v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    abm::AWDHelperSetConnection(v27);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  BOOL v8 = (uint64_t *)off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(&v33);
    long long v9 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = 0uLL;
    stat v10 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v9;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    std::string::size_type size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
    if (v33.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v33.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    BOOL v8 = (uint64_t *)off_1EBBDC878;
  }
  unint64_t v25 = (unint64_t)v8;
  unint64_t v26 = *(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (!v8) {
    goto LABEL_36;
  }
  size_t v12 = strlen(a1);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v17 = v12 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v13;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_32:
    memcpy(p_dst, a1, v13);
    p_dst->__r_.__value_.__s.__data_[v13] = 0;
    uint64_t v15 = *v8;
    int v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
LABEL_33:
    std::string::__init_copy_ctor_external(&v33, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    goto LABEL_34;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12;
  p_dst = &__dst;
  if (v12) {
    goto LABEL_32;
  }
  __dst.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v15 = *v8;
  int v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
LABEL_28:
  std::string v33 = __dst;
LABEL_34:
  ABMServerInternal::init(v15, (uint64_t)&v33, (uint64_t)a2);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_36:
  abm::asString();
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v33;
  }
  else {
    uint64_t v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  syslog(5, "%s hosting ABM with profile: %s", a1, (const char *)v19);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  uint64_t v20 = (std::__shared_weak_count *)v26;
  if (v26 && !atomic_fetch_add((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  BOOL v22 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    char v23 = v32;
    if (!v32) {
      return;
    }
  }
  else
  {
    char v23 = v32;
    if (!v32) {
      return;
    }
  }
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1C5A1BFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v21 - 96);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerStartServer(NSObject *a1)
{
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v2 = (ABMServerInternal **)off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(&v9);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    size_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (ABMServerInternal **)off_1EBBDC878;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  BOOL result = ABMServerInternal::start(*v2, a1);
  BOOL v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_1C5A1C220(_Unwind_Exception *a1)
{
}

BOOL AppleBasebandManagerStopServer(NSObject *a1)
{
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v2 = (ABMServerInternal **)off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(&v9);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    size_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (ABMServerInternal **)off_1EBBDC878;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  BOOL result = ABMServerInternal::stop(*v2, a1);
  BOOL v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_1C5A1C3C0(_Unwind_Exception *a1)
{
}

BOOL AppleBasebandManagerShutdownServer(NSObject *a1)
{
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v2 = (ABMServerInternal **)off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(&v9);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    size_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (ABMServerInternal **)off_1EBBDC878;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  BOOL result = ABMServerInternal::shutdown(*v2, a1);
  BOOL v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_1C5A1C560(_Unwind_Exception *a1)
{
}

uint64_t AppleBasebandManagerGetProfile()
{
  return 3;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t __cxx_global_var_init_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void ResetDetection::create(NSObject **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  BOOL v8 = operator new(0xB8uLL);
  long long v9 = *a1;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  stat v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = *a2;
  std::string::size_type v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ResetDetection::ResetDetection((uint64_t)v8, &object, &v12, a3);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(a4, (uint64_t)v8);
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  uint64_t v11 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1C5A1C7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2) {
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t ResetDetection::ResetDetection(uint64_t a1, NSObject **a2, void *a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F2104AF8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, "com.apple.telephony.abm", "reset.detect");
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  BOOL v8 = *a2;
  *(void *)(a1 + 88) = *a2;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 96) = 0;
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>((void *)a1, (uint64_t)v10, a3);
  *(void *)a1 = &unk_1F2104CB8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *(void *)a1 = &unk_1F2104AF8;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = TelephonyBasebandCreateController();
  *(_DWORD *)(a1 + 128) = 2;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  return a1;
}

void sub_1C5A1C918(_Unwind_Exception *a1)
{
  ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A1C92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

const char *ResetDetection::getName(ResetDetection *this)
{
  return "reset.detect";
}

void *ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2104C28;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F2104C28;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ResetDetection::~ResetDetection(ResetDetection *this)
{
  *(void *)this = &unk_1F2104AF8;
  uint64_t v2 = (const void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (__CFRunLoop *)*((void *)this + 13);
  uint64_t v4 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  size_t v5 = (const void *)*MEMORY[0x1E4F1D418];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN14ResetDetectionD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  void block[4] = v4;
  CFRunLoopPerformBlock(v3, v5, block);
  CFRunLoopWakeUp(*((CFRunLoopRef *)this + 13));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 21));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 18));
  uint64_t v6 = (const void *)*((void *)this + 15);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)this = &unk_1F2104C28;
  MEMORY[0x1C87940C0]((char *)this + 8);
  CFTypeID v7 = *((void *)this + 12);
  if (v7) {
    dispatch_release(v7);
  }
  BOOL v8 = *((void *)this + 11);
  if (v8) {
    dispatch_release(v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v1;
  uint64_t vars8;

  ResetDetection::~ResetDetection(this);

  operator delete(v1);
}

void ___ZN14ResetDetectionD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (std::__shared_weak_count *)v1[1];
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(v1);
  }
}

void ResetDetection::start(ResetDetection *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN14ResetDetection5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_3;
  v1[4] = this;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN14ResetDetection5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Started", buf, 2u);
  }
  uint64_t v3 = operator new(0x10uLL);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v4 || (v5 = *(void *)(v1 + 72), (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeID v7 = v6;
  *uint64_t v3 = v5;
  v3[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(v1 + 112) = v3;
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (TelephonyBasebandRegisterForReset()) {
      goto LABEL_10;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (TelephonyBasebandRegisterForReset()) {
      goto LABEL_10;
    }
  }
  BOOL v8 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "failed registering for reset detect", v12, 2u);
    if (*(void *)(v1 + 120)) {
      uint64_t v11 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11) {
      goto LABEL_14;
    }
    return;
  }
LABEL_10:
  if (*(void *)(v1 + 120)) {
    long long v9 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  }
  else {
    long long v9 = 0;
  }
  if (v9)
  {
LABEL_14:
    unsigned __int8 v15 = 1;
    if (TelephonyBasebandGetReset())
    {
      *(_DWORD *)(v1 + 128) = v15;
    }
    else
    {
      stat v10 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CFDictionaryRef v14 = 0;
        _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v14, 2u);
      }
    }
  }
}

void sub_1C5A1CDFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ResetDetection::sResetDetectCallback(ResetDetection *this, void *a2, int a3, unsigned int a4, void *a5)
{
  if (this)
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
    if (v5)
    {
      uint64_t v7 = *(void *)this;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      BOOL v8 = std::__shared_weak_count::lock(v5);
      if (v8)
      {
        long long v9 = v8;
        if (v7)
        {
          v10[0] = MEMORY[0x1E4F143A8];
          v10[1] = 0x40000000;
          void v10[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
          v10[3] = &__block_descriptor_tmp_6;
          v10[4] = v7;
          int v11 = a3;
          ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v10);
        }
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t ResetDetection::poll(ResetDetection *this, BOOL *a2)
{
  if (*((void *)this + 15)) {
    uint64_t v3 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v3) {
    return 0;
  }
  BOOL v9 = 1;
  uint64_t Reset = TelephonyBasebandGetReset();
  if (Reset)
  {
    *a2 = v9;
    return Reset;
  }
  uint64_t v7 = *((void *)this + 5);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    return Reset;
  }
  *(_WORD *)BOOL v8 = 0;
  _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v8, 2u);
  return Reset;
}

void ResetDetection::add(uint64_t a1, uint64_t a2, char a3, void **a4, uint64_t a5)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  void v10[2] = ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke;
  v10[3] = &__block_descriptor_tmp_4_1;
  v10[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    char v14 = a3;
    BOOL v9 = *a4;
    if (!*a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  char v14 = a3;
  BOOL v9 = *a4;
  if (*a4) {
LABEL_5:
  }
    BOOL v9 = _Block_copy(v9);
LABEL_6:
  aBlocuint64_t k = v9;
  uint64_t v13 = a5;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v10);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v5 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)long long buf = 136315394;
    unint64_t v25 = v4;
    __int16 v26 = 1024;
    int v27 = v5;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Added detection with key '%s', reset=%d", buf, 0x12u);
  }
  int v6 = *(_DWORD *)(v2 + 128);
  int v7 = *(unsigned __int8 *)(a1 + 80);
  if (v6)
  {
    if (v6 != 2)
    {
      BOOL v8 = v6 != 1 || v7 == 0;
      BOOL v9 = !v8;
      BOOL v10 = v6 | v7 || v6 == 1;
      BOOL v11 = !v10 && v7 == 0;
      if (v11 || v9) {
        goto LABEL_28;
      }
    }
  }
  else if (!*(unsigned char *)(a1 + 80))
  {
LABEL_28:
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    return;
  }
  uint64_t v13 = (_OWORD *)(a1 + 40);
  int v14 = *(char *)(a1 + 63);
  if (*(unsigned char *)(a1 + 80))
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *v13;
      v23.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    }
    unsigned __int8 v15 = *(const void **)(a1 + 64);
    if (v15) {
      int v16 = _Block_copy(v15);
    }
    else {
      int v16 = 0;
    }
    BOOL v22 = v16;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v23, &v22, (uint64_t **)(v2 + 136), *(void *)(a1 + 72));
    if (v16) {
      _Block_release(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v17 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_47:
      operator delete(v17);
    }
  }
  else
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v13;
      v21.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    }
    uint64_t v18 = *(const void **)(a1 + 64);
    if (v18) {
      uint64_t v19 = _Block_copy(v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = v19;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v21, &v20, (uint64_t **)(v2 + 160), *(void *)(a1 + 72));
    if (v19) {
      _Block_release(v19);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v17 = (void *)v21.__r_.__value_.__r.__words[0];
      goto LABEL_47;
    }
  }
}

void sub_1C5A1D344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ResetDetection::addToBlocks_sync(uint64_t a1, uint64_t a2, void **a3, uint64_t **a4, dispatch_time_t a5)
{
  BOOL v10 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  dispatch_source_set_timer(v10, a5, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  BOOL v11 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v11 || (v12 = *(void *)(a1 + 72), (uint64_t v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v14 = v13;
  p_shared_weak_owners = &v13->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke;
  handler[3] = &__block_descriptor_tmp_5_8;
  handler[4] = a1;
  handler[5] = v12;
  uint64_t v39 = v14;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  CFTypeRef v40 = a4;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(v10);
  int v16 = *a3;
  if (*a3) {
    int v16 = _Block_copy(v16);
  }
  CFNumberRef v37 = (uint64_t *)v16;
  uint64_t v18 = a4 + 1;
  uint64_t v17 = a4[1];
  if (v17)
  {
    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      uint64_t v20 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v20 = *(const std::string::value_type **)a2;
    }
    if (v19 >= 0) {
      size_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v21 = *(void *)(a2 + 8);
    }
    while (1)
    {
      BOOL v22 = (uint64_t **)v17;
      unint64_t v25 = (const void *)v17[4];
      std::string v23 = v17 + 4;
      uint64_t v24 = v25;
      int v26 = *((char *)v23 + 23);
      if (v26 >= 0) {
        int v27 = v23;
      }
      else {
        int v27 = v24;
      }
      if (v26 >= 0) {
        size_t v28 = *((unsigned __int8 *)v23 + 23);
      }
      else {
        size_t v28 = v23[1];
      }
      if (v28 >= v21) {
        size_t v29 = v21;
      }
      else {
        size_t v29 = v28;
      }
      int v30 = memcmp(v20, v27, v29);
      if (v30)
      {
        if (v30 < 0) {
          goto LABEL_17;
        }
LABEL_31:
        int v31 = memcmp(v27, v20, v29);
        if (v31)
        {
          if ((v31 & 0x80000000) == 0) {
            goto LABEL_45;
          }
        }
        else if (v28 >= v21)
        {
LABEL_45:
          CFTypeID v36 = v22[8];
          v22[7] = (uint64_t *)v10;
          v22[8] = v37;
          if (v36) {
            goto LABEL_46;
          }
          goto LABEL_47;
        }
        uint64_t v17 = v22[1];
        if (!v17)
        {
          uint64_t v18 = v22 + 1;
          goto LABEL_38;
        }
      }
      else
      {
        if (v21 >= v28) {
          goto LABEL_31;
        }
LABEL_17:
        uint64_t v17 = *v22;
        uint64_t v18 = v22;
        if (!*v22) {
          goto LABEL_38;
        }
      }
    }
  }
  BOOL v22 = a4 + 1;
LABEL_38:
  int v32 = operator new(0x48uLL);
  std::string v33 = (std::string *)(v32 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v32[6] = *(void *)(a2 + 16);
  }
  v32[7] = 0;
  v32[8] = 0;
  *int v32 = 0;
  v32[1] = 0;
  void v32[2] = v22;
  const void *v18 = v32;
  CFTypeRef v34 = (uint64_t *)**a4;
  CFMutableDictionaryRef v35 = v32;
  if (v34)
  {
    *a4 = v34;
    CFMutableDictionaryRef v35 = *v18;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v35);
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  CFTypeID v36 = (uint64_t *)v32[8];
  v32[7] = v10;
  v32[8] = v37;
  if (v36) {
LABEL_46:
  }
    _Block_release(v36);
LABEL_47:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__shared_weak_count::__release_weak(v14);
}

void sub_1C5A1D6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  operator delete(v26);
  std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair((uint64_t)&a10);
  if (a25 < 0)
  {
    operator delete(__p);
    size_t v28 = a18;
    if (a18) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v28 = a18;
    if (a18)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      std::__shared_weak_count::__release_weak(v25);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 40);
  if ((*(char *)(a2 + 63) & 0x80000000) == 0)
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    uint64_t result = *(void **)(a2 + 64);
    if (!result) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  uint64_t result = *(void **)(a2 + 64);
  if (result) {
LABEL_5:
  }
    uint64_t result = _Block_copy(result);
LABEL_6:
  *(void *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 64);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    operator delete(v3);
  }
}

void ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  long long v5 = v4;
  if (!*(void *)(a1 + 40)) {
    goto LABEL_54;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v9 = *(uint64_t ***)(v6 + 8);
  int v7 = (uint64_t *)(v6 + 8);
  BOOL v8 = v9;
  if (!v9) {
    goto LABEL_54;
  }
  int v10 = *(char *)(a1 + 87);
  if (v10 >= 0) {
    BOOL v11 = (const void *)(a1 + 64);
  }
  else {
    BOOL v11 = *(const void **)(a1 + 64);
  }
  if (v10 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    size_t v12 = *(void *)(a1 + 72);
  }
  uint64_t v13 = v7;
  do
  {
    while (1)
    {
      int v14 = *((char *)v8 + 55);
      unsigned __int8 v15 = v14 >= 0 ? (uint64_t *)(v8 + 4) : v8[4];
      size_t v16 = v14 >= 0 ? *((unsigned __int8 *)v8 + 55) : (size_t)v8[5];
      size_t v17 = v12 >= v16 ? v16 : v12;
      int v18 = memcmp(v15, v11, v17);
      if (v18) {
        break;
      }
      if (v16 >= v12) {
        goto LABEL_26;
      }
LABEL_12:
      BOOL v8 = (uint64_t **)v8[1];
      if (!v8) {
        goto LABEL_27;
      }
    }
    if (v18 < 0) {
      goto LABEL_12;
    }
LABEL_26:
    uint64_t v13 = (uint64_t *)v8;
    BOOL v8 = (uint64_t **)*v8;
  }
  while (v8);
LABEL_27:
  if (v13 != v7)
  {
    int v19 = *((char *)v13 + 55);
    if (v19 >= 0) {
      uint64_t v20 = v13 + 4;
    }
    else {
      uint64_t v20 = (const void *)v13[4];
    }
    if (v19 >= 0) {
      size_t v21 = *((unsigned __int8 *)v13 + 55);
    }
    else {
      size_t v21 = v13[5];
    }
    if (v21 >= v12) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v21;
    }
    int v23 = memcmp(v11, v20, v22);
    if (v23)
    {
      if (v23 < 0) {
        goto LABEL_54;
      }
LABEL_41:
      ResetDetection::invokeBlock_sync(v3, (uint64_t)(v13 + 4), 3760250883);
      uint64_t v24 = *(uint64_t ***)(a1 + 56);
      unint64_t v25 = (uint64_t *)v13[1];
      if (v25)
      {
        do
        {
          int v26 = v25;
          unint64_t v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        int v27 = v13;
        do
        {
          int v26 = (uint64_t *)v27[2];
          BOOL v28 = *v26 == (void)v27;
          int v27 = v26;
        }
        while (!v28);
      }
      if (*v24 == v13) {
        *uint64_t v24 = v26;
      }
      size_t v29 = v24[1];
      void v24[2] = (uint64_t *)((char *)v24[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v29, v13);
      int v30 = (const void *)v13[8];
      if (v30) {
        _Block_release(v30);
      }
      if (*((char *)v13 + 55) < 0) {
        operator delete((void *)v13[4]);
      }
      operator delete(v13);
    }
    else if (v12 >= v21)
    {
      goto LABEL_41;
    }
  }
LABEL_54:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1C5A1DA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ResetDetection::invokeBlock_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v7 = *(NSObject **)(a2 + 24);
  uint64_t v6 = *(const void **)(a2 + 32);
  if (v6)
  {
    BOOL v8 = (void (**)(void *, void))_Block_copy(v6);
    *(void *)(a2 + 24) = 0;
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  BOOL v8 = 0;
  *(void *)(a2 + 24) = 0;
  if (v7)
  {
LABEL_6:
    dispatch_source_cancel(v7);
    dispatch_release(v7);
  }
LABEL_7:
  BOOL v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v13 = p_p;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Signalling %s", buf, 0xCu);
  }
  v8[2](v8, a3);
  _Block_release(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A1DBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    a1[10] = *(void *)(a2 + 80);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C5A1DC9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

uint64_t std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void ResetDetection::notifyResetDetectBlocks_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = &v15;
  uint64_t v4 = *(char **)(a2 + 8);
  unsigned __int8 v15 = *(void **)a2;
  v16[0] = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  v16[1] = v5;
  if (v5) {
    uint64_t v3 = v4 + 16;
  }
  *uint64_t v3 = v16;
  *(void *)a2 = a2 + 8;
  uint64_t v6 = v15;
  if (v15 != v16)
  {
    while (1)
    {
      aBlocuint64_t k = (void *)0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v7;
      long long v13 = v7;
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v6 + 2);
        *(void *)&long long v13 = v6[6];
      }
      BOOL v8 = (void *)v6[8];
      *((void *)&v13 + 1) = v6[7];
      if (v8) {
        BOOL v8 = _Block_copy(v8);
      }
      aBlocuint64_t k = v8;
      ResetDetection::invokeBlock_sync(a1, (uint64_t)__p, 0);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (SBYTE7(v13) < 0)
      {
        operator delete(__p[0]);
        BOOL v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_17:
            int v10 = v9;
            BOOL v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_5;
        }
      }
      else
      {
        BOOL v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_17;
        }
      }
      do
      {
        int v10 = (void *)v6[2];
        BOOL v11 = *v10 == (void)v6;
        uint64_t v6 = v10;
      }
      while (!v11);
LABEL_5:
      uint64_t v6 = v10;
      if (v10 == v16)
      {
        uint64_t v4 = (char *)v16[0];
        break;
      }
    }
  }
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(v4);
}

void sub_1C5A1DE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
}

void sub_1C5A1DEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
}

uint64_t std::pair<std::string const,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ResetDetection::resetDetectCallback(ResetDetection *this, void *a2, unsigned int a3, int a4, void *a5)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
  v5[3] = &__block_descriptor_tmp_6;
  v5[4] = this;
  int v6 = a4;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v5);
}

void ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == -469794815)
  {
    uint64_t v5 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I baseband alive detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 0;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 160);
  }
  else if (v2 == -469794816)
  {
    uint64_t v3 = _os_activity_create(&dword_1C59C6000, "Baseband state: reset detected", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v3, &state);
    os_activity_scope_leave(&state);
    uint64_t v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I baseband reset detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 1;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 136);
    if (v3) {
      os_release(v3);
    }
  }
}

void sub_1C5A1E0E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

void ctu::os::scoped_activity::~scoped_activity(void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    os_release(v1);
  }
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "reset.detect");
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2104C28;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2104C28;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (int v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5A1E324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5A1E340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2104C68;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  int v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5A1E46C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5A1E494(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                                "IT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1F2104C28;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1F2102CB8;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1C5A1E654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2104C28;
  MEMORY[0x1C87940C0](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((void *)a1 + 1));
    int v2 = (const void *)*((void *)a1 + 8);
    if (v2) {
      _Block_release(v2);
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void ctu::SharedSynchronizable<ResetDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (int v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  BOOL v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F2104CF0;
  void block[5] = v5;
  size_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  int v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void **std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ResetInfo::ResetInfo(ResetInfo *this)
{
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
}

{
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
}

uint64_t ResetInfo::ResetInfo(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, int a6, long long *a7)
{
  uint64_t v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)a1 = 0uLL;
  *(void *)(a1 + 16) = v18;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)(a1 + 24) = 0uLL;
  *(void *)(a1 + 40) = v18;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v12 = *a4;
    *(void *)(a1 + 64) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v12;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  *(void *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 80) = a6;
    long long v13 = (std::string *)(a1 + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a7, *((void *)a7 + 1));
    return a1;
  }
  *(_DWORD *)(a1 + 80) = a6;
  long long v13 = (std::string *)(a1 + 88);
  if (*((char *)a7 + 23) < 0) {
    goto LABEL_11;
  }
LABEL_9:
  long long v14 = *a7;
  v13->__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  return a1;
}

void sub_1C5A1EBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 47) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::ResetInfo(std::string *this, long long *a2, long long *a3, long long *a4, uint64_t a5, int a6, long long *a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    long long v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
    long long v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v15 = *a3;
      v14->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((void *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v16;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    long long v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    long long v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
    {
LABEL_14:
      long long v18 = *a7;
      v17->__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a7, *((void *)a7 + 1));
}

void sub_1C5A1EDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 47) < 0)
  {
    operator delete(*v15);
    if ((*(char *)(v14 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void ResetInfo::~ResetInfo(void **this)
{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

void ResetInfo::getType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void ResetInfo::getSubType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

void ResetInfo::getReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

void ResetInfo::getTime(ResetInfo *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = v6;
  uint64_t v5 = v4;
  v6[0] = v4;
  *((unsigned char *)v4 + 24) = 1;
  v6[1] = (void *)1;
  *((void *)v4 + 5) = v3;
  *((void *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1C5A1F0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t ResetInfo::getChronoTime(ResetInfo *this)
{
  return *((void *)this + 9);
}

uint64_t ResetInfo::getRadar(ResetInfo *this)
{
  return *((unsigned int *)this + 20);
}

void ResetInfo::getCrashReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

void ResetInfo::setType(ResetInfo *this, const __CFString *a2)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 15) = 0;
  *((unsigned char *)this + 23) = 0;
}

void sub_1C5A1F1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::setSubType(ResetInfo *this, const __CFString *a2)
{
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(void *)((char *)this + 39) = 0;
  *((unsigned char *)this + 47) = 0;
}

void sub_1C5A1F270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **ResetInfo::setReason(uint64_t a1, void **a2)
{
  uint64_t result = (void **)(a1 + 48);
  if (result != a2)
  {
    if (*(char *)(a1 + 71) < 0)
    {
      size_t v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        size_t v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)uint64_t result = v4;
    }
  }
  return result;
}

void ResetInfo::setTime(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  *(void *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A1F364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ResetInfo::setRadar(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

void **ResetInfo::setCrashReason(uint64_t a1, void **a2)
{
  uint64_t result = (void **)(a1 + 88);
  if (result != a2)
  {
    if (*(char *)(a1 + 111) < 0)
    {
      size_t v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        size_t v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)uint64_t result = v4;
    }
  }
  return result;
}

uint64_t ResetInfo::asString@<X0>(ResetInfo *this@<X0>, unsigned char *a2@<X8>)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
  }
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53[7] = v4;
  v53[8] = v4;
  v53[5] = v4;
  v53[6] = v4;
  v53[3] = v4;
  v53[4] = v4;
  v53[1] = v4;
  v53[2] = v4;
  long long v52 = v4;
  v53[0] = v4;
  *(_OWORD *)xpc_object_t v50 = v4;
  long long v51 = v4;
  long long v48 = v4;
  long long v49 = v4;
  long long v46 = v4;
  long long v47 = v4;
  long long v45 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"ResetInfo { Type='", 18);
  int v6 = *((char *)this + 23);
  if (v6 >= 0) {
    uint64_t v7 = this;
  }
  else {
    uint64_t v7 = *(ResetInfo **)this;
  }
  if (v6 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v8 = *((void *)this + 1);
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' SubType='", 11);
  int v11 = *((char *)this + 47);
  if (v11 >= 0) {
    long long v12 = (char *)this + 24;
  }
  else {
    long long v12 = (char *)*((void *)this + 3);
  }
  if (v11 >= 0) {
    uint64_t v13 = *((unsigned __int8 *)this + 47);
  }
  else {
    uint64_t v13 = *((void *)this + 4);
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
  long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' Time='", 8);
  uint64_t v16 = *((void *)this + 9);
  CFTypeRef v56 = 0;
  uint64_t v57 = 0;
  CFNumberRef v55 = &v56;
  long long v17 = operator new(0x38uLL);
  v17[8] = 0;
  *(void *)long long v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = &v56;
  CFNumberRef v55 = (void **)v17;
  CFTypeRef v56 = v17;
  *((unsigned char *)v17 + 24) = 1;
  uint64_t v57 = 1;
  *((void *)v17 + 5) = v16;
  *((void *)v17 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v55, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v55, v56);
  if ((v44 & 0x80u) == 0) {
    long long v18 = __p;
  }
  else {
    long long v18 = (void **)__p[0];
  }
  if ((v44 & 0x80u) == 0) {
    uint64_t v19 = v44;
  }
  else {
    uint64_t v19 = (uint64_t)__p[1];
  }
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' Radar='", 9);
  size_t v21 = (void *)std::ostream::operator<<();
  size_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' Reason='", 10);
  int v23 = (char *)this + 48;
  int v24 = *((char *)this + 71);
  if (v24 >= 0) {
    unint64_t v25 = (char *)this + 48;
  }
  else {
    unint64_t v25 = (char *)*((void *)this + 6);
  }
  if (v24 >= 0) {
    uint64_t v26 = *((unsigned __int8 *)this + 71);
  }
  else {
    uint64_t v26 = *((void *)this + 7);
  }
  int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v25, v26);
  BOOL v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' MTBF='", 8);
  *(_DWORD *)((char *)v28 + *(void *)(*v28 - 24) + 8) |= 1u;
  ResetInfo::isMTBF((ResetInfo **)this);
  size_t v29 = (void *)std::ostream::operator<<();
  int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"' SCD='", 7);
  *(_DWORD *)((char *)v30 + *(void *)(*v30 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v23, (long long **)&ResetInfo::sPatternMasks);
  int v31 = (void *)std::ostream::operator<<();
  int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' COF='", 7);
  *(_DWORD *)((char *)v32 + *(void *)(*v32 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v23, (long long **)&ResetInfo::sPatternMasks);
  std::string v33 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' }", 3);
  if (((char)v44 & 0x80000000) == 0)
  {
    char v34 = BYTE8(v52);
    if ((BYTE8(v52) & 0x10) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    uint64_t v36 = v52;
    if ((unint64_t)v52 < *((void *)&v49 + 1))
    {
      *(void *)&long long v52 = *((void *)&v49 + 1);
      uint64_t v36 = *((void *)&v49 + 1);
    }
    CFNumberRef v37 = (const void *)v49;
    size_t v35 = v36 - v49;
    if ((unint64_t)(v36 - v49) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_46;
    }
    goto LABEL_35;
  }
  operator delete(__p[0]);
  char v34 = BYTE8(v52);
  if ((BYTE8(v52) & 0x10) != 0) {
    goto LABEL_32;
  }
LABEL_29:
  if ((v34 & 8) == 0)
  {
    size_t v35 = 0;
    a2[23] = 0;
    goto LABEL_42;
  }
  CFNumberRef v37 = (const void *)*((void *)&v47 + 1);
  size_t v35 = *((void *)&v48 + 1) - *((void *)&v47 + 1);
  if (*((void *)&v48 + 1) - *((void *)&v47 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_46:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_35:
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    CFTypeRef v40 = operator new(v38 + 1);
    *((void *)a2 + 1) = v35;
    *((void *)a2 + 2) = v39 | 0x8000000000000000;
    *(void *)a2 = v40;
    a2 = v40;
    goto LABEL_41;
  }
  a2[23] = v35;
  if (v35) {
LABEL_41:
  }
    memmove(a2, v37, v35);
LABEL_42:
  a2[v35] = 0;
  *(void *)&long long v45 = *MEMORY[0x1E4FBA408];
  uint64_t v41 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v45 + *(void *)(v45 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v46 = v41;
  *((void *)&v46 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v51) < 0) {
    operator delete(v50[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8795140](v53);
}

void sub_1C5A1F8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v5 - 88, *(void **)(v5 - 80));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5A1F8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5A1F90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5A1F920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ResetInfo::readResetReasonPatterns(ResetInfo *this)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
  }
}

uint64_t ResetInfo::isMTBF(ResetInfo **this)
{
  uint64_t v2 = (char *)*MEMORY[0x1E4F4C6E8];
  if (*((char *)this + 23) < 0)
  {
    long long v4 = *this;
    int64_t v3 = (int64_t)this[1];
    int64_t v5 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (!v5) {
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
    }
  }
  else
  {
    int64_t v3 = *((unsigned __int8 *)this + 23);
    long long v4 = (ResetInfo *)this;
    int64_t v5 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (!v5) {
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
    }
  }
  int64_t v6 = v5;
  if (v3 < v5) {
    return 0;
  }
  uint64_t v8 = (char *)v4 + v3;
  int v9 = *v2;
  int v10 = v4;
  while (1)
  {
    if (v3 - v6 == -1) {
      return 0;
    }
    uint64_t result = (uint64_t)memchr(v10, v9, v3 - v6 + 1);
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    uint64_t result = memcmp((const void *)result, v2, v6);
    if (!result) {
      break;
    }
    int v10 = (ResetInfo *)(v11 + 1);
    int64_t v3 = (int64_t)&v8[-v11 - 1];
    if (v3 < v6) {
      return 0;
    }
  }
  if ((char *)v11 != v8 && v11 - (void)v4 != -1) {
    return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
  }
  return result;
}

uint64_t ResetInfo::shouldSetSCD(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)this + 48, (long long **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::shouldSetCOF(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)this + 48, (long long **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::addToDict(uint64_t result, __CFDictionary **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  if (*a2) {
    int64_t v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    int64_t v5 = 0;
  }
  if (v5)
  {
    uint64_t v7 = result;
    if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
      dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
    }
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v9 = *a2;
    int v10 = (const __CFString **)*MEMORY[0x1E4F4C690];
    if (*(char *)(v7 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
    }
    else {
      std::string v30 = *(std::string *)v7;
    }
    ctu::cf::update<char const*,std::string>(v9, v10, (uint64_t)&v30, (uint64_t)v8, a5);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      long long v12 = *a2;
      uint64_t v13 = (const __CFString **)*MEMORY[0x1E4F4CA38];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      long long v12 = *a2;
      uint64_t v13 = (const __CFString **)*MEMORY[0x1E4F4CA38];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
      {
LABEL_12:
        std::string v30 = *(std::string *)(v7 + 24);
        goto LABEL_15;
      }
    }
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
LABEL_15:
    ctu::cf::update<char const*,std::string>(v12, v13, (uint64_t)&v30, (uint64_t)v8, v11);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    long long v15 = (_OWORD *)(v7 + 48);
    uint64_t v16 = *a2;
    long long v17 = (const __CFString **)*MEMORY[0x1E4F4C8F0];
    if (*(char *)(v7 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 48), *(void *)(v7 + 56));
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *v15;
      v30.__r_.__value_.__r.__words[2] = *(void *)(v7 + 64);
    }
    ctu::cf::update<char const*,std::string>(v16, v17, (uint64_t)&v30, (uint64_t)v8, v14);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v19 = operator new(0x38uLL);
    v19[8] = 0;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = &v30.__r_.__value_.__l.__size_;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v30.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    *((unsigned char *)v19 + 24) = 1;
    v30.__r_.__value_.__r.__words[2] = 1;
    *((void *)v19 + 5) = v18;
    *((void *)v19 + 6) = 0xAAAAAAAA00000000;
    Timestamp::asString((uint64_t)&v30, 0, 9, &__p);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v30, (void *)v30.__r_.__value_.__l.__size_);
    size_t v21 = *a2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v30 = __p;
    }
    ctu::cf::update<char const*,std::string>(v21, (const __CFString **)*MEMORY[0x1E4F4C4C8], (uint64_t)&v30, (uint64_t)v8, v20);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      ctu::cf::update<char const*,unsigned int>(*a2, (const __CFString **)*MEMORY[0x1E4F4C180], *(_DWORD *)(v7 + 80), v8, v22);
      int isMTBF = ResetInfo::isMTBF((ResetInfo **)v7);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E4F4C8E8], isMTBF, (uint64_t)v8, v24);
      int v25 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v15, (long long **)&ResetInfo::sPatternMasks);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E4F4C900], v25, (uint64_t)v8, v26);
      int v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v15, (long long **)&ResetInfo::sPatternMasks);
      return ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E4F4C8F8], v27, (uint64_t)v8, v28);
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_27;
  }
  return result;
}

void sub_1C5A1FDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::addToDict(ResetInfo *this, xpc_object_t *a2)
{
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590]) {
    return;
  }
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
  {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
    long long v4 = (const char *)this;
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  long long v4 = (const char *)this;
  if (*((char *)this + 23) < 0) {
LABEL_4:
  }
    long long v4 = *(const char **)this;
LABEL_5:
  xpc_object_t v5 = xpc_string_create(v4);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C690], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = (char *)this + 24;
  if (*((char *)this + 47) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  xpc_object_t v8 = xpc_string_create(v7);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4CA38], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  int v10 = (const char **)((char *)this + 48);
  CFAllocatorRef v11 = (char *)this + 48;
  if (*((char *)this + 71) < 0) {
    CFAllocatorRef v11 = *v10;
  }
  xpc_object_t v12 = xpc_string_create(v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C8F0], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  uint64_t v14 = *((void *)this + 9);
  long long v15 = operator new(0x38uLL);
  v15[8] = 0;
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = v33;
  int v32 = v15;
  v33[0] = v15;
  *((unsigned char *)v15 + 24) = 1;
  v33[1] = (void *)1;
  *((void *)v15 + 5) = v14;
  *((void *)v15 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v32, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v32, v33[0]);
  if (v31 >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  xpc_object_t v17 = xpc_string_create((const char *)v16);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C4C8], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v19 = xpc_int64_create(*((unsigned int *)this + 20));
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C180], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  char isMTBF = ResetInfo::isMTBF((ResetInfo **)this);
  xpc_object_t v22 = xpc_BOOL_create(isMTBF);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C8E8], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  char v24 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v10, (long long **)&ResetInfo::sPatternMasks);
  xpc_object_t v25 = xpc_BOOL_create(v24);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C900], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  char v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v10, (long long **)&ResetInfo::sPatternMasks);
  xpc_object_t v28 = xpc_BOOL_create(v27);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C8F8], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
}

void sub_1C5A20270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void ResetInfo::fetchFromDict(void **this, xpc_object_t *a2)
{
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590]) {
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C690]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
  *(_OWORD *)this = v14;
  this[2] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v5 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA38]);
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  xpc_object_t v6 = this + 3;
  if (*((char *)this + 47) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)xpc_object_t v6 = v14;
  this[5] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C8F0]);
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  xpc_object_t v8 = this + 6;
  if (*((char *)this + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)xpc_object_t v8 = v14;
  this[8] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v9 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C4C8]);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&v14);
  Timestamp::asString((uint64_t)&v14, 0, 9, &__p);
  xpc::dyn_cast_or_default();
  this[9] = Timestamp::convert((uint64_t)&v11);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_25:
    operator delete(__p);
    goto LABEL_22;
  }
  if (SHIBYTE(v18) < 0) {
    goto LABEL_25;
  }
LABEL_22:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, *((void **)&v14 + 1));
  xpc_release(object);
  xpc_object_t v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C180]);
  std::string __p = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    std::string __p = xpc_null_create();
  }
  *((_DWORD *)this + 20) = xpc::dyn_cast_or_default((xpc *)&__p, (const object *)7);
  xpc_release(__p);
}

void sub_1C5A205C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t ResetInfo::reasonMatchesAtLeastOneApplicablePattern(int a1, uint64_t a2, long long **a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int64_t v3 = *a3;
  size_t v35 = a3[1];
  if (*a3 != v35)
  {
    int v4 = 0;
    while (1)
    {
      *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)CFTypeRef v40 = v5;
      *(_OWORD *)&v40[16] = v5;
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v6 = *v3;
        *(void *)&v40[16] = *((void *)v3 + 2);
        *(_OWORD *)CFTypeRef v40 = v6;
      }
      *(_DWORD *)&v40[24] = *((_DWORD *)v3 + 6);
      if ((*(_DWORD *)&v40[24] & a1) != 0)
      {
        memset(&v39, 170, sizeof(v39));
        if ((v40[23] & 0x80000000) != 0) {
          std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v40, *(std::string::size_type *)&v40[8]);
        }
        else {
          std::string v39 = *(std::string *)v40;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v38[16] = v8;
        *(_OWORD *)&v38[32] = v8;
        *(_OWORD *)&v37[0].__locale_ = v8;
        *(_OWORD *)uint64_t v38 = v8;
        MEMORY[0x1C87950F0](v37);
        v37[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v37, MEMORY[0x1E4FBA258]);
        *(void *)uint64_t v38 = std::locale::use_facet(v37, MEMORY[0x1E4FBA280]);
        memset(&v38[8], 0, 40);
        std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          xpc_object_t v10 = &v39;
        }
        else {
          xpc_object_t v10 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v39.__r_.__value_.__l.__size_;
        }
        if ((char *)v10 + size != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v37, (char *)v10, (char *)v10 + size))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
        uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
        }
        if ((v11 & 0x80u) == 0) {
          char v12 = (std::sub_match<const char *> *)a2;
        }
        else {
          char v12 = *(std::sub_match<const char *> **)a2;
        }
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *(void *)(a2 + 8);
        }
        xpc_object_t v13 = (char *)v12 + v11;
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v47 = v14;
        unint64_t v44 = 0xAAAAAAAAAAAAAA00;
        *(void *)&v41[40] = 0xAAAAAAAAAAAAAAAALL;
        CFTypeRef v42 = 0;
        uint64_t v43 = 0;
        long long v45 = 0;
        long long v46 = 0;
        LOBYTE(v47) = 0;
        BYTE8(v47) = 0;
        long long v48 = 0;
        memset(v41, 0, 41);
        long long v55 = v14;
        unint64_t v52 = 0xAAAAAAAAAAAAAA00;
        v49[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        LOBYTE(v55) = 0;
        BYTE8(v55) = 0;
        uint64_t v56 = 0;
        memset(v49, 0, 41);
        int v15 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v37, v12, (std::sub_match<const char *> *)((char *)v12 + v11), v49, 4160);
        uint64_t v16 = v50;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3);
        int64_t v19 = *(void *)&v41[8];
        uint64_t v18 = *(char **)v41;
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v41[8] - *(void *)v41) >> 3);
        if (v17 <= v20)
        {
          if (v17 < v20)
          {
            int64_t v19 = *(void *)v41 + 8 * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3);
            *(void *)&v41[8] = v19;
          }
        }
        else
        {
          std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)v41, v17 - v20);
          int64_t v19 = *(void *)&v41[8];
          uint64_t v18 = *(char **)v41;
        }
        if ((char *)v19 == v18)
        {
          begin = v49[0].__begin_;
        }
        else
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          std::vector<std::csub_match>::pointer end = v49[0].__end_;
          begin = v49[0].__begin_;
          do
          {
            unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
            xpc_object_t v26 = (std::vector<std::csub_match> *)&begin[v21];
            if (v25 <= v22) {
              xpc_object_t v26 = &v49[1];
            }
            *(void *)&v18[v21 * 24] = (char *)v12 + (unint64_t)v26->__begin_ - v16;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3) <= v22) {
              p_std::vector<std::csub_match>::pointer end = &v49[1].__end_;
            }
            else {
              p_std::vector<std::csub_match>::pointer end = &v49[0].__begin_[v21].second;
            }
            *(void *)(*(void *)v41 + v21 * 24 + 8) = (char *)v12 + *p_end - v16;
            std::vector<std::csub_match>::pointer end = v49[0].__end_;
            begin = v49[0].__begin_;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3) <= v22) {
              p_end_cap = &v49[1].__end_cap_;
            }
            else {
              p_end_cap = &v49[0].__begin_[v21].matched;
            }
            uint64_t v18 = *(char **)v41;
            *(unsigned char *)(*(void *)v41 + v21 * 24 + 16) = *p_end_cap;
            ++v22;
            ++v21;
          }
          while (v22 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v41[8] - (void)v18) >> 3));
        }
        *(void *)&v41[24] = v13;
        *(void *)&v41[32] = v13;
        CFTypeRef v42 = (char *)v12 + v50 - v16;
        uint64_t v43 = (char *)v12 + v51 - v16;
        LOBYTE(v44) = v52;
        v41[40] = 0;
        long long v45 = (char *)v12 + v53 - v16;
        long long v46 = (char *)v12 + v54 - v16;
        int v29 = v55;
        LOBYTE(v47) = v55;
        long long v48 = v42;
        BYTE8(v47) = BYTE8(v55);
        if (begin)
        {
          v49[0].__end_ = begin;
          operator delete(begin);
          int v29 = v47;
          uint64_t v18 = *(char **)v41;
        }
        if (v29) {
          int v30 = v15 ^ 1;
        }
        else {
          int v30 = 1;
        }
        if (v18)
        {
          *(void *)&v41[8] = v18;
          operator delete(v18);
        }
        int v31 = v15 & v30;
        if (v31) {
          int v7 = 2;
        }
        else {
          int v7 = 0;
        }
        int v32 = *(std::__shared_weak_count **)&v38[32];
        if (*(void *)&v38[32]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v38[32] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          std::locale::~locale(v37);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_60:
            operator delete(v39.__r_.__value_.__l.__data_);
            v4 |= v31;
            if ((v40[23] & 0x80000000) == 0) {
              goto LABEL_56;
            }
LABEL_55:
            operator delete(*(void **)v40);
            goto LABEL_56;
          }
        }
        else
        {
          std::locale::~locale(v37);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_60;
          }
        }
        v4 |= v31;
        if ((v40[23] & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
      else
      {
        int v7 = 3;
        if ((v40[23] & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
LABEL_56:
      if (v7 == 3 || !v7)
      {
        v3 += 2;
        if (v3 != v35) {
          continue;
        }
      }
      return v4 & 1;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_1C5A20BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5A20BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,long long a52)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::locale::~locale(&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    long long v55 = GetOsLogContext()[1];
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      p_p = (void **)&__p;
      if (a32 < 0) {
        p_p = __p;
      }
      *(_DWORD *)(v52 - 224) = 136315138;
      *(void *)((char *)&a52 + 4) = p_p;
      _os_log_error_impl(&dword_1C59C6000, v55, OS_LOG_TYPE_ERROR, "Exception with %s", (uint8_t *)(v52 - 224), 0xCu);
    }
    __cxa_rethrow();
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a36) < 0)
  {
    operator delete(a34);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5A20CE4);
}

void sub_1C5A20CA8()
{
}

void sub_1C5A20CDC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C5A20CE4);
  }
  __clang_call_terminate(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  uint64_t v1 = this;
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

void ___ZN9ResetInfo23readResetReasonPatternsEv_block_invoke()
{
  uint64_t v0 = GetOsLogContext()[1];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_debug_impl(&dword_1C59C6000, v0, OS_LOG_TYPE_DEBUG, "Default pattern masks will be used", v1, 2u);
  }
  std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)&ResetInfo::sPatternMasks, (void **)kDefaultPatternMasks, (char *)qword_1EBBDCC90, (qword_1EBBDCC90 - kDefaultPatternMasks) >> 5);
}

void ***std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int64_t v3 = (void **)**result;
    if (v3)
    {
      int v4 = (void **)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0) {
            operator delete(*(v4 - 4));
          }
          v4 -= 4;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>(void **a1, void **a2, char *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)a1[2];
  xpc_object_t v9 = (void **)*a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 5)
  {
    char v12 = (void **)a1[1];
    unint64_t v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= a4)
    {
      if (a2 != (void **)a3)
      {
        unint64_t v23 = 0;
        do
        {
          xpc_object_t v26 = (char *)&v9[v23];
          char v27 = (char *)&a2[v23];
          if (a2 != v9)
          {
            char v28 = v27[23];
            if (v26[23] < 0)
            {
              if (v28 >= 0) {
                char v24 = (char *)&a2[v23];
              }
              else {
                char v24 = (char *)a2[v23];
              }
              if (v28 >= 0) {
                size_t v25 = v27[23];
              }
              else {
                size_t v25 = (size_t)a2[v23 + 1];
              }
              std::string::__assign_no_alias<false>(&v9[v23], v24, v25);
            }
            else if (v27[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v23], a2[v23], (size_t)a2[v23 + 1]);
            }
            else
            {
              long long v29 = *(_OWORD *)v27;
              *((void *)v26 + 2) = *((void *)v27 + 2);
              *(_OWORD *)xpc_object_t v26 = v29;
            }
          }
          *((_DWORD *)v26 + 6) = *((_DWORD *)v27 + 6);
          v23 += 4;
        }
        while (&a2[v23] != (void **)a3);
        char v12 = (void **)a1[1];
        xpc_object_t v9 = (void **)((char *)v9 + v23 * 8);
      }
      while (v12 != v9)
      {
        if (*((char *)v12 - 9) < 0) {
          operator delete(*(v12 - 4));
        }
        v12 -= 4;
      }
      a1[1] = v9;
    }
    else
    {
      long long v14 = (char *)&a2[4 * v13];
      if (v12 != v9)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 32 * v13;
        do
        {
          int64_t v19 = (char *)&v9[v15 / 8];
          unint64_t v20 = (char *)&a2[v15 / 8];
          if (a2 != v9)
          {
            char v21 = v20[23];
            if (v19[23] < 0)
            {
              if (v21 >= 0) {
                unint64_t v17 = (char *)&a2[v15 / 8];
              }
              else {
                unint64_t v17 = (char *)a2[v15 / 8];
              }
              if (v21 >= 0) {
                size_t v18 = v20[23];
              }
              else {
                size_t v18 = (size_t)a2[v15 / 8 + 1];
              }
              std::string::__assign_no_alias<false>(&v9[v15 / 8], v17, v18);
            }
            else if (v20[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v15 / 8], a2[v15 / 8], (size_t)a2[v15 / 8 + 1]);
            }
            else
            {
              long long v22 = *(_OWORD *)v20;
              *((void *)v19 + 2) = *((void *)v20 + 2);
              *(_OWORD *)int64_t v19 = v22;
            }
          }
          *((_DWORD *)v19 + 6) = *((_DWORD *)v20 + 6);
          v15 += 32;
        }
        while (v16 != v15);
        xpc_object_t v9 = (void **)a1[1];
      }
      uint64_t v38 = (char *)v9;
      if (v14 != a3)
      {
        uint64_t v39 = 0;
        do
        {
          uint64_t v41 = (std::string *)&v9[v39];
          CFTypeRef v42 = &v14[v39 * 8];
          if (v14[v39 * 8 + 23] < 0)
          {
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v42, *((void *)v42 + 1));
          }
          else
          {
            long long v40 = *(_OWORD *)v42;
            v41->__r_.__value_.__r.__words[2] = *((void *)v42 + 2);
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v40;
          }
          LODWORD(v9[v39 + 3]) = *(_DWORD *)&v14[v39 * 8 + 24];
          v39 += 4;
        }
        while (&v14[v39 * 8] != a3);
        uint64_t v38 = (char *)&v9[v39];
      }
      a1[1] = v38;
    }
  }
  else
  {
    if (v9)
    {
      xpc_object_t v10 = (void **)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 9) < 0) {
            operator delete(*(v10 - 4));
          }
          v10 -= 4;
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59) {
      goto LABEL_70;
    }
    uint64_t v30 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v30 = a4;
    }
    BOOL v31 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
    if (!v31) {
      unint64_t v32 = v30;
    }
    if (v32 >> 59) {
LABEL_70:
    }
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    uint64_t v33 = 32 * v32;
    char v34 = (char *)operator new(32 * v32);
    *a1 = v34;
    a1[1] = v34;
    a1[2] = &v34[v33];
    if (a2 != (void **)a3)
    {
      uint64_t v35 = 0;
      do
      {
        uint64_t v36 = (std::string *)&v34[v35 * 8];
        CFNumberRef v37 = (char *)&a2[v35];
        if (SHIBYTE(a2[v35 + 2]) < 0)
        {
          std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v37, *((void *)v37 + 1));
        }
        else
        {
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)v37;
          v36->__r_.__value_.__r.__words[2] = *((void *)v37 + 2);
        }
        *(_DWORD *)&v34[v35 * 8 + 24] = a2[v35 + 3];
        v35 += 4;
      }
      while (&a2[v35] != (void **)a3);
      v34 += v35 * 8;
    }
    a1[1] = v34;
  }
}

void sub_1C5A2122C(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 32)
  {
    if (*(char *)(v2 + v3 - 9) < 0) {
      operator delete(*(void **)(v2 + v3 - 32));
    }
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void ctu::cf::update<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  long long v6 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy();
  int v7 = value;
  if (v6) {
    BOOL v8 = value == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (!value) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_8:
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1C5A2130C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A21330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,unsigned int>(__CFDictionary *a1, const __CFString **a2, unsigned int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  BOOL v8 = (const void *)valuePtr;
  unint64_t valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!v9) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_1C5A213F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A21418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  int v7 = key;
  BOOL v8 = (void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    BOOL v8 = (void **)MEMORY[0x1E4F1CFC8];
  }
  CFNumberRef v9 = *v8;
  key = *v8;
  if (v7) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v9) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7) {
    CFRelease(v7);
  }
  return v11;
}

void sub_1C5A214DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  long long v6 = (const std::locale *)MEMORY[0x1C87950F0]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0) {
    BOOL v8 = (char *)a2;
  }
  else {
    BOOL v8 = *(char **)a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  return a1;
  }
}

void sub_1C5A215AC(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A215C8(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  long long v6 = operator new(8uLL);
  *long long v6 = &unk_1F2104D50;
  uint64_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  BOOL v8 = operator new(0x20uLL);
  *BOOL v8 = &unk_1F2104DA8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  CFNumberRef v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F)
    {
LABEL_4:
      if (v10)
      {
        if (v10 != 16)
        {
          if (v10 != 32) {
LABEL_27:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
          goto LABEL_15;
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
      }
      else
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      }
    }
  }
  else
  {
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F) {
      goto LABEL_4;
    }
  }
  switch(v10)
  {
    case 0x40u:
LABEL_15:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    case 0x80u:
      return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
    case 0x100u:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    default:
      goto LABEL_27;
  }
}

void sub_1C5A2181C(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A218A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::csub_match>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  while (1)
  {
    BOOL v8 = (std::basic_regex<char> *)v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7) {
      break;
    }
LABEL_2:
    if (v7 == (char *)v8) {
      goto LABEL_6;
    }
  }
  CFNumberRef v9 = a1->__end_;
  marked_size_t count = a1->__marked_count_;
  uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    uint64_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    uint64_t v12 = (std::__node<char> *)operator new(0x10uLL);
    unint64_t v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    unint64_t v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 == (std::basic_regex<char> *)a3) {
    return a3;
  }
  if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v16 = a1->__end_;
    unint64_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    size_t v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      BOOL v8 = (std::basic_regex<char> *)v18;
      size_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v18, a3);
      if (v8 == (std::basic_regex<char> *)v18)
      {
        int64_t v19 = a1->__end_;
        unsigned int v20 = a1->__marked_count_;
        char v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v21)
        {
LABEL_16:
          if (v8 == v17)
          {
            long long v22 = (std::__node<char> *)operator new(0x10uLL);
            unint64_t v23 = a1->__end_;
            char v24 = v23->__first_;
            v22[1].__vftable = (std::__node<char>_vtbl *)v24;
            v23->__first_ = v22;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          size_t v25 = (std::__node<char> *)operator new(0x18uLL);
          xpc_object_t v26 = v16->__first_;
          v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v25[2].__vftable = (std::__node<char>_vtbl *)v26;
          v25->__vftable = (std::__node<char>_vtbl *)&unk_1F2105368;
          end->__first_ = v25;
          v16->__first_ = 0;
          char v27 = (std::__node<char> *)operator new(0x10uLL);
          char v28 = a1->__end_->__first_;
          v27[1].__vftable = (std::__node<char>_vtbl *)v28;
          v16->__first_ = v27;
          a1->__end_->__first_ = 0;
          long long v29 = (std::__node<char> *)operator new(0x10uLL);
          uint64_t v30 = v16->__first_;
          v29->__vftable = (std::__node<char>_vtbl *)&unk_1F21053B0;
          v29[1].__vftable = (std::__node<char>_vtbl *)v30;
          a1->__end_->__first_ = v29;
          unint64_t v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
          a1->__end_ = v15;
          goto LABEL_9;
        }
        size_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
      }
      if (v18 == (char *)v8) {
        goto LABEL_16;
      }
    }
  }
  return (char *)v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    long long v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    *long long v6 = &unk_1F2104EA0;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      unsigned int v10 = v3;
      uint64_t v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      unint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (unsigned char *)v3) {
          continue;
        }
      }
      if (v10 + 1 != a3 || *v10 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      long long v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      void *v14 = &unk_1F2104EE8;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    unsigned int v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    void *v12 = &unk_1F2105368;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    long long v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_1F21053B0;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    char v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21) {
      long long v22 = v21;
    }
    else {
      long long v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    uint64_t v15[2] = v16;
    *uint64_t v15 = &unk_1F2105368;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    int64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    *int64_t v19 = &unk_1F21053B0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v11 = v22;
    }
    else {
      uint64_t v11 = v22 + 1;
    }
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    char v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21) {
      long long v22 = v21;
    }
    else {
      long long v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    uint64_t v15[2] = v16;
    *uint64_t v15 = &unk_1F2105368;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    int64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    *int64_t v19 = &unk_1F21053B0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v11 = v22;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v11 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A2227C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC52E1) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC52E1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC52E1)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC52E1 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v16 = a2[1];
        if (v16 == 66)
        {
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_1F2104F30;
          *((void *)v17 + 1) = v19;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 1;
        }
        else
        {
          if (v16 != 98) {
            return v3;
          }
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_1F2104F30;
          *((void *)v17 + 1) = v18;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94) {
      return v3;
    }
    uint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_1F2104EA0;
LABEL_17:
    *uint64_t v11 = v14;
    *((unsigned char *)v11 + 16) = v12;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    uint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_1F2104EE8;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3) {
    return v3;
  }
  int v7 = a2[2];
  if (v7 == 33)
  {
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v22.__loop_count_ = v20;
    *(_OWORD *)&v22.__start_.__cntrl_ = v20;
    *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v20;
    *(_OWORD *)&v22.__traits_.__col_ = v20;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
    v22.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
    marked_size_t count = v22.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_27;
  }
  if (v7 != 61) {
    return v3;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v22.__loop_count_ = v8;
  *(_OWORD *)&v22.__start_.__cntrl_ = v8;
  *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v22.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
  v22.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
  unsigned int v10 = v22.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v22.__traits_.__loc_);
  return v9 + 1;
}

void sub_1C5A2289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C5A228B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C5A228C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C5A228D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
        goto LABEL_26;
      }
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        int v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        marked_size_t count = this->__marked_count_;
      }
      else
      {
        uint64_t v11 = (std::__node<char> *)operator new(0x18uLL);
        marked_size_t count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        std::vector<std::csub_match>::pointer end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_1F2105200;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      uint64_t v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3) {
        goto LABEL_26;
      }
      int v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41) {
        goto LABEL_26;
      }
      if ((this->__flags_ & 2) == 0)
      {
        uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
        uint64_t v18 = this->__end_;
        uint64_t v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_1F2105248;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      uint64_t result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      long long v8 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v9 = this->__end_;
      unsigned int v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_1F2104FC0;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_25:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v9 == a3;
      }
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v11 = 0;
        goto LABEL_36;
      }
      __mexp_begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v25 = 0;
      goto LABEL_45;
    }
    long long v8 = this;
    if (locale_low == 43)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    std::basic_regex<char> v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = v22 == a3;
    }
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      char v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    long long v8 = this;
    if (locale_low != 123) {
      return v8;
    }
    uint64_t v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_72;
    }
    int v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v15 = v14 - 48;
    int v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      int v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
          break;
        }
        if (v15 >= 214748364) {
          goto LABEL_72;
        }
        int v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3) {
          goto LABEL_21;
        }
      }
    }
    if (v16 == v13) {
      goto LABEL_72;
    }
    if (v16 == (char *)a3) {
      goto LABEL_73;
    }
    int v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        uint64_t v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          long long v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    xpc_object_t v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3) {
      goto LABEL_72;
    }
    int v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      uint64_t v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        size_t v11 = v15;
        unsigned int v10 = v16 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        goto LABEL_36;
      }
      size_t v25 = v15;
      __mexp_begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38) {
      goto LABEL_73;
    }
    int v28 = v27 - 48;
    long long v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      long long v29 = a3;
    }
    else
    {
      while (1)
      {
        int v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38) {
          break;
        }
        if (v28 >= 214748364) {
          goto LABEL_72;
        }
        int v28 = v30 + 10 * v28 - 48;
        long long v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3) {
          goto LABEL_61;
        }
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125) {
LABEL_73:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15) {
      goto LABEL_72;
    }
    BOOL v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      unint64_t v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x1C87950F0]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1C5A230B4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  long long v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(void *)long long v8 = &unk_1F2104F78;
  *((void *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((void *)v8 + 7) = a2->__start_.__ptr_;
  *((void *)v8 + 8) = cntrl;
  if (cntrl) {
    atomic_fetch_add_explicit(&cntrl->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A231CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2104F30;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2104F30;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2104F78;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2104F78;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (!locale || atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(a1 + 2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
  std::__shared_weak_count::__release_weak(locale);
  std::locale::~locale(v2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
LABEL_5:

  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAA00;
  long long v24 = v4;
  uint64_t v21 = 0;
  long long v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)&long long v19 = *(void *)(a2 + 24);
  *((void *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((void *)&v20 + 1) = v6;
  uint64_t v21 = v6;
  LOBYTE(v22) = 0;
  long long v23 = v19;
  LOBYTE(v24) = v20;
  uint64_t v25 = v6;
  BYTE8(v24) = 1;
  uint64_t v7 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  begin = __p.__begin_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    int v16 = &begin[v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)uint64_t v17 = v16->std::pair<const char *, const char *>;
    *(unsigned char *)(v17 + 16) = v16->matched;
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1C5A23A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  long long v48 = 0;
  long long v49 = 0;
  unint64_t v50 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    return 0;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)long long v46 = 0;
  memset(&v46[8], 0, 85);
  long long v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
  if (*(void *)&v46[56])
  {
    *(void *)&v46[64] = *(void *)&v46[56];
    operator delete(*(void **)&v46[56]);
  }
  if (*(void *)&v46[32])
  {
    *(void *)&v46[40] = *(void *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  int v13 = v49;
  *((_DWORD *)v49 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    int v13 = v49;
  }
  uint64_t v18 = *((void *)v13 - 5);
  unint64_t v19 = *(unsigned int *)(a1 + 32);
  unint64_t v20 = (*((void *)v13 - 4) - v18) >> 4;
  if (v19 <= v20)
  {
    if (v19 < v20) {
      *((void *)v13 - 4) = v18 + 16 * v19;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v19 - v20);
    int v13 = v49;
  }
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unsigned int v21 = 1;
  while (2)
  {
    if ((v21 & 0xFFF) == 0 && (int)(v21 >> 12) >= (int)a3 - (int)a2) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    uint64_t v23 = *((void *)v13 - 2);
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*((_DWORD *)v13 - 24))
    {
      case 0xFFFFFC18:
        long long v24 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v24 == a2 || (a5 & 0x1000) != 0 && v24 != a3) {
          goto LABEL_27;
        }
        uint64_t v37 = *a4;
        *(void *)uint64_t v37 = a2;
        *(void *)(v37 + 8) = v24;
        *(unsigned char *)(v37 + 16) = 1;
        uint64_t v38 = *((void *)v13 - 8);
        uint64_t v39 = *((void *)v13 - 7) - v38;
        if (v39)
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
          uint64_t v41 = (unsigned char *)(v38 + 16);
          unsigned int v42 = 1;
          do
          {
            uint64_t v43 = v37 + 24 * v42;
            *(_OWORD *)uint64_t v43 = *((_OWORD *)v41 - 1);
            char v44 = *v41;
            v41 += 24;
            *(unsigned char *)(v43 + 16) = v44;
          }
          while (v40 > v42++);
        }
        uint64_t v17 = 1;
        unint64_t v22 = v48;
        if (!v48) {
          return v17;
        }
        goto LABEL_38;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_17;
      case 0xFFFFFC1F:
LABEL_27:
        uint64_t v25 = v49;
        xpc_object_t v26 = (void *)*((void *)v49 - 5);
        if (v26)
        {
          *((void *)v49 - 4) = v26;
          operator delete(v26);
        }
        int v27 = (void *)*((void *)v25 - 8);
        if (v27)
        {
          *((void *)v25 - 7) = v27;
          operator delete(v27);
        }
        long long v49 = v25 - 96;
        goto LABEL_17;
      case 0xFFFFFC20:
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v46[64] = v28;
        *(_OWORD *)&v46[80] = v28;
        *(_OWORD *)&v46[32] = v28;
        *(_OWORD *)&v46[48] = v28;
        *(_OWORD *)long long v46 = v28;
        *(_OWORD *)&v46[16] = v28;
        std::__state<char>::__state((uint64_t)v46, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v46[80] + 24))(*(void *)&v46[80], 0, v46);
        long long v29 = v49;
        if ((unint64_t)v49 >= v50)
        {
          long long v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
          if (*(void *)&v46[56])
          {
            *(void *)&v46[64] = *(void *)&v46[56];
            operator delete(*(void **)&v46[56]);
          }
        }
        else
        {
          long long v30 = *(_OWORD *)&v46[16];
          *(_OWORD *)long long v49 = *(_OWORD *)v46;
          *((_OWORD *)v29 + 1) = v30;
          *((void *)v29 + 4) = 0;
          *((void *)v29 + 5) = 0;
          *((void *)v29 + 6) = 0;
          *((void *)v29 + 7) = 0;
          *((_OWORD *)v29 + 2) = *(_OWORD *)&v46[32];
          *((void *)v29 + 6) = *(void *)&v46[48];
          memset(&v46[32], 0, 24);
          *((void *)v29 + 8) = 0;
          *((void *)v29 + 9) = 0;
          *(_OWORD *)(v29 + 56) = *(_OWORD *)&v46[56];
          *((void *)v29 + 9) = *(void *)&v46[72];
          memset(&v46[56], 0, 24);
          uint64_t v31 = *(void *)&v46[80];
          *(void *)(v29 + 85) = *(void *)&v46[85];
          *((void *)v29 + 10) = v31;
          long long v49 = v29 + 96;
        }
        if (*(void *)&v46[32])
        {
          *(void *)&v46[40] = *(void *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
LABEL_17:
        unint64_t v22 = v48;
        int v13 = v49;
        ++v21;
        if (v48 != v49) {
          continue;
        }
        uint64_t v17 = 0;
        if (v48)
        {
LABEL_38:
          unint64_t v32 = v49;
          uint64_t v33 = v22;
          if (v49 != v22)
          {
            do
            {
              char v34 = (void *)*((void *)v32 - 5);
              if (v34)
              {
                *((void *)v32 - 4) = v34;
                operator delete(v34);
              }
              uint64_t v35 = (void *)*((void *)v32 - 8);
              if (v35)
              {
                *((void *)v32 - 7) = v35;
                operator delete(v35);
              }
              v32 -= 96;
            }
            while (v32 != v22);
            uint64_t v33 = v48;
          }
          long long v49 = v22;
          operator delete(v33);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    return v17;
  }
}

void sub_1C5A23F14(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1C5A23F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1C5A23F70(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1C5A23F84(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  xpc_object_t value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      xpc_object_t value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    uint64_t v11 = v10;
    int v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    uint64_t v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(void *)&v12->matched = *(void *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v16 = end - begin;
  if (v16 >= __n) {
    std::vector<std::csub_match>::size_type v17 = __n;
  }
  else {
    std::vector<std::csub_match>::size_type v17 = end - begin;
  }
  if (v17)
  {
    uint64_t v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    uint64_t v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  unint64_t v19 = &end[__n - v16];
  std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
  do
  {
    std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
    *(void *)&end->matched = *(void *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A241E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A2423C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        std::vector<std::csub_match>::size_type v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v3];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::csub_match>::size_type v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      unint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      uint64_t v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      std::vector<std::csub_match>::size_type v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    uint64_t v18 = &v16[__n];
    long long v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *long long v19 = v20;
      long long v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      std::vector<std::csub_match>::pointer end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    uint64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((v7 + __n) >> 60) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    std::vector<std::csub_match>::size_type v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    size_t v14 = __n;
    std::pair<const char *, const char *> v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    uint64_t v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  uint64_t v15 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v15;
  return a1;
}

void sub_1C5A248E0(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  long long v4 = a2;
  if (*a2 == 92)
  {
    unint64_t v6 = a2 + 1;
    if (a2 + 1 == a3) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    int v8 = *v6;
    unsigned int v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      long long v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        long long v4 = a3;
      }
      else
      {
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 48) > 9) {
            break;
          }
          if (v9 >= 0x19999999) {
            goto LABEL_24;
          }
          ++v4;
          unsigned int v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            long long v4 = a3;
            break;
          }
        }
        if (!v9) {
LABEL_24:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_) {
        goto LABEL_24;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6) {
        return v4;
      }
    }
    long long v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    uint64_t v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      unsigned int v9 = v7;
      uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1C5A24BBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A24C14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A24F38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1C5A25128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A2513C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A25150(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A25164(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A25178(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A2518C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65) {
        goto LABEL_85;
      }
      unsigned int v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u) {
        goto LABEL_85;
      }
      std::basic_regex<char>::value_type v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v10;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6) {
              goto LABEL_42;
            }
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v13 = v4[1];
      char v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38) {
        goto LABEL_47;
      }
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u) {
        goto LABEL_85;
      }
      char v14 = -87;
LABEL_47:
      if (v4 + 2 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v15 = v4[2];
      char v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u) {
LABEL_85:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v16 = -87;
      }
      std::basic_regex<char>::value_type v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v17;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_85;
      }
      if (!a4) {
        goto LABEL_68;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2 = __c;
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned int v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(void *)unsigned int v8 = &unk_1F2105008;
    *((void *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned int v8 = (char *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v10 = this->__end_->__first_;
    *(void *)unsigned int v8 = &unk_1F2105050;
    *((void *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  int v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1F2105098;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1C5A259B4(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  long long v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A25A60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned int v8 = (std::locale *)operator new(0x30uLL);
    unsigned int v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    std::basic_regex<char>::value_type v10 = (std::locale::__imp *)&unk_1F21050E0;
LABEL_6:
    v8->__locale_ = v10;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned int v8 = (std::locale *)operator new(0x30uLL);
    unsigned int v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    std::basic_regex<char>::value_type v10 = (std::locale::__imp *)&unk_1F2105128;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  first = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1F2105170;
  v5[1].__vftable = (std::__node<char>_vtbl *)first;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2105008;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2105008;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2105050;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2105050;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F21050E0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F21050E0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3, v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 80) = *(void *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2105128;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F2105128;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    unsigned int v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v9++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 80) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      std::basic_regex<char>::value_type v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          unsigned __int8 v13 = &v12[v18];
          char v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          unsigned __int8 v13 = &v5[-*v6];
          char v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v38 = (long long *)(v5 - 16);
            uint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              _OWORD *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v42 = &v5[-v28 - 8];
          uint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        uint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      unsigned __int8 v13 = &v12[v24];
      char v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      unsigned __int8 v13 = &v5[-*v6];
      char v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        long long v46 = (long long *)(v5 - 16);
        long long v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    CFNumberRef v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    unsigned char *v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    unsigned __int8 v13 = &v12[v8];
    char v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    unsigned __int8 v13 = (char *)(v5 - v7);
    char v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  long long v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    char v34 = &v5[-v22 - 8];
    uint64_t v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    uint64_t v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v16, v11);
  std::locale::name(&v17, &v16);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    unsigned __int8 v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v13 = &v17;
    }
    BOOL v14 = v13->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v14 = 1;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v16);
  *(unsigned char *)(a1 + 171) = v14;
  return a1;
}

void sub_1C5A26B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  uint64_t v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      std::string v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  std::string v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v25 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_34;
  }
  char v6 = *current;
  LOBYTE(__src) = *current;
  char v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    size_t v27 = __p[1];
    operator delete(__p[0]);
    if (v27) {
      goto LABEL_8;
    }
LABEL_34:
    BOOL negate = 0;
    uint64_t v25 = 1;
    unsigned __int8 v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2])) {
    goto LABEL_34;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
  char v15 = HIBYTE(v136[2]);
  int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    BOOL v24 = 0;
    int v70 = 0;
    int v69 = 0;
    goto LABEL_164;
  }
  xpc_object_t v128 = v2;
  uint64_t v17 = 0;
  unint64_t v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0) {
    unint64_t v19 = v136;
  }
  else {
    unint64_t v19 = (void **)v136[0];
  }
  char v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0) {
    size_t v21 = (void *)HIBYTE(v136[2]);
  }
  else {
    size_t v21 = v136[1];
  }
  if (v18 <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = v16 / 48;
  }
  uint64_t v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v24 = 1;
  do
  {
    int v59 = (char)*(v23 - 24);
    if (v59 >= 0) {
      CFArrayRef v60 = (char *)(v23 - 47);
    }
    else {
      CFArrayRef v60 = *(char **)(v23 - 47);
    }
    if (v59 >= 0) {
      size_t v61 = *(v23 - 24);
    }
    else {
      size_t v61 = *(void *)(v23 - 39);
    }
    if ((unint64_t)v21 >= v61) {
      size_t v62 = v61;
    }
    else {
      size_t v62 = (size_t)v21;
    }
    int v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0) {
        goto LABEL_98;
      }
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    int v64 = (char)*v23;
    if (v64 >= 0) {
      CFArrayRef v65 = (char *)(v23 - 23);
    }
    else {
      CFArrayRef v65 = *(char **)(v23 - 23);
    }
    if (v64 >= 0) {
      size_t v66 = *v23;
    }
    else {
      size_t v66 = *(void *)(v23 - 15);
    }
    if (v66 >= (unint64_t)v21) {
      size_t v67 = (size_t)v21;
    }
    else {
      size_t v67 = v66;
    }
    int v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        int v69 = 1;
        int v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    BOOL v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  int v70 = 0;
  int v69 = 0;
LABEL_162:
  char v2 = v128;
  p_traits = &this->__traits_;
  char v15 = v20;
LABEL_164:
  if (v15 < 0) {
    operator delete(v136[0]);
  }
  BOOL negate = v69;
  if (v24) {
    goto LABEL_207;
  }
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_209;
  }
  int v133 = negate;
  CFTypeRef v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  int v90 = SHIBYTE(__p[2]);
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91) {
    goto LABEL_188;
  }
  unint64_t v92 = v91 / 24;
  uint64_t v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    xpc_object_t v94 = (void *)HIBYTE(__p[2]);
  }
  else {
    xpc_object_t v94 = __p[1];
  }
  if (SHIBYTE(__p[2]) < 0)
  {
    int v135 = SHIBYTE(__p[2]);
    uint64_t v103 = 0;
    xpc_object_t v104 = __p[0];
    if (v92 <= 1) {
      uint64_t v105 = 1;
    }
    else {
      uint64_t v105 = v91 / 24;
    }
    BOOL v97 = 1;
    do
    {
      std::string::size_type size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      int v107 = (char)size;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = v89->__r_.__value_.__l.__size_;
      }
      if (v94 == (void *)size)
      {
        std::vector<std::string>::pointer v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          int v133 = 1;
          int v70 = 5;
          goto LABEL_203;
        }
      }
      BOOL v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    int v70 = 0;
LABEL_203:
    char v2 = v88;
    int v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    std::string::size_type v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0) {
      std::string::size_type v114 = v89->__r_.__value_.__l.__size_;
    }
    if (v114 != HIBYTE(__p[2]))
    {
      unint64_t v119 = 0;
      if (v92 <= 1) {
        uint64_t v120 = 1;
      }
      else {
        uint64_t v120 = v92;
      }
      uint64_t v121 = v120 - 1;
      int v122 = &v89[1].__r_.__value_.__s.__data_[8];
      char v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        unint64_t v123 = v122[15];
        unint64_t v125 = *(void *)v122;
        v122 += 24;
        unint64_t v124 = v125;
        if ((v123 & 0x80u) != 0) {
          unint64_t v123 = v124;
        }
        if (v94 == (void *)v123)
        {
          BOOL v97 = v119 < v92;
          int v133 = 1;
          int v70 = 5;
          goto LABEL_204;
        }
      }
      BOOL v97 = 0;
      int v70 = 0;
      goto LABEL_204;
    }
    char v2 = v88;
    BOOL negate = 1;
LABEL_208:
    uint64_t v25 = 2;
    goto LABEL_245;
  }
  uint64_t v95 = 0;
  uint64_t v96 = v92 <= 1 ? 1 : v91 / 24;
  BOOL v97 = 1;
  do
  {
    xpc_object_t v98 = &v89[v95];
    xpc_object_t v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    int v100 = (char)v99;
    if ((char)v99 < 0) {
      xpc_object_t v99 = (void *)v98->__r_.__value_.__l.__size_;
    }
    if (v94 == v99)
    {
      if (v100 < 0) {
        xpc_object_t v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      }
      CFArrayRef v101 = __p;
      uint64_t v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        CFArrayRef v101 = (void **)((char *)v101 + 1);
        xpc_object_t v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          int v133 = 1;
          int v70 = 5;
          char v2 = v88;
          goto LABEL_204;
        }
      }
    }
    BOOL v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  BOOL v97 = 0;
  int v70 = 0;
  char v2 = v88;
LABEL_204:
  if (v90 < 0) {
    operator delete(__p[0]);
  }
  BOOL negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_masuint64_t k = this->__neg_mask_;
    }
    else
    {
      masuint64_t k = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_masuint64_t k = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        int v113 = negate;
LABEL_228:
        BOOL negate = v113;
        uint64_t v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        int v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_228;
        }
      }
      goto LABEL_226;
    }
LABEL_227:
    int v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70) {
    goto LABEL_208;
  }
  uint64_t v25 = 2;
  unsigned __int8 v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    unsigned __int8 v28 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  std::vector<char>::pointer v29 = this->__chars_.__begin_;
  unint64_t v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    while (1)
    {
      int v31 = *v29++;
      if (v31 == v28) {
        break;
      }
      if (!--v30) {
        goto LABEL_41;
      }
    }
LABEL_244:
    BOOL negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  std::regex_traits<char>::char_class_type v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      int v34 = (v32 >> 7) & 1;
      char v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      char v33 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    uint64_t v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end) {
      goto LABEL_244;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v39 = this->__ranges_.__end_;
  if (v38 == v39) {
    goto LABEL_128;
  }
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    unsigned int v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    int64_t v41 = (char *)v39 - (char *)v38;
    if (v41) {
      goto LABEL_59;
    }
LABEL_155:
    BOOL v48 = 0;
    if ((v40 & 0x80) != 0) {
      goto LABEL_126;
    }
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  unsigned int v40 = HIBYTE(v136[2]);
  int64_t v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41) {
    goto LABEL_155;
  }
LABEL_59:
  uint64_t v134 = v25;
  BOOL v131 = negate;
  uint64_t v129 = v2;
  uint64_t v42 = 0;
  unint64_t v43 = v41 / 48;
  char v126 = v40;
  if ((v40 & 0x80u) == 0) {
    unint64_t v44 = v136;
  }
  else {
    unint64_t v44 = (void **)v136[0];
  }
  if ((v40 & 0x80u) == 0) {
    uint64_t v45 = (void *)v40;
  }
  else {
    uint64_t v45 = v136[1];
  }
  if (v43 <= 1) {
    uint64_t v46 = 1;
  }
  else {
    uint64_t v46 = v41 / 48;
  }
  long long v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v48 = 1;
  while (2)
  {
    int v49 = (char)*(v47 - 24);
    if (v49 >= 0) {
      unint64_t v50 = (char *)(v47 - 47);
    }
    else {
      unint64_t v50 = *(char **)(v47 - 47);
    }
    if (v49 >= 0) {
      size_t v51 = *(v47 - 24);
    }
    else {
      size_t v51 = *(void *)(v47 - 39);
    }
    if ((unint64_t)v45 >= v51) {
      size_t v52 = v51;
    }
    else {
      size_t v52 = (size_t)v45;
    }
    int v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0) {
        goto LABEL_84;
      }
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      int v54 = (char)*v47;
      if (v54 >= 0) {
        char v55 = (char *)(v47 - 23);
      }
      else {
        char v55 = *(char **)(v47 - 23);
      }
      if (v54 >= 0) {
        size_t v56 = *v47;
      }
      else {
        size_t v56 = *(void *)(v47 - 15);
      }
      if (v56 >= (unint64_t)v45) {
        size_t v57 = (size_t)v45;
      }
      else {
        size_t v57 = v56;
      }
      int v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          BOOL negate = 1;
          char v2 = v129;
          uint64_t v25 = v134;
          if ((v126 & 0x80) == 0) {
            goto LABEL_127;
          }
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    BOOL v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42) {
      continue;
    }
    break;
  }
  char v2 = v129;
  BOOL negate = v131;
  uint64_t v25 = v134;
  if ((v126 & 0x80) == 0) {
    goto LABEL_127;
  }
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48) {
    goto LABEL_245;
  }
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0) {
      goto LABEL_245;
    }
    std::regex_traits<char>::char_class_type v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      int v116 = (v115 >> 7) & 1;
      if (v28 != 95) {
        int v116 = 0;
      }
      if (v116 != 1) {
        goto LABEL_245;
      }
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (unsigned char *)&__src + 1, __p);
  std::vector<std::string>::pointer v71 = this->__equivalences_.__begin_;
  uint64_t v72 = HIBYTE(__p[2]);
  int64_t v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0) {
      operator delete(__p[0]);
    }
LABEL_238:
    unsigned __int8 v28 = __src;
    goto LABEL_239;
  }
  BOOL v132 = negate;
  xpc_object_t v130 = v2;
  unint64_t v74 = 0;
  unint64_t v75 = v73 / 24;
  CFRange v76 = __p[0];
  CFRange v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    CFRange v78 = (void *)HIBYTE(__p[2]);
  }
  else {
    CFRange v78 = __p[1];
  }
  if (v75 <= 1) {
    uint64_t v79 = 1;
  }
  else {
    uint64_t v79 = v73 / 24;
  }
  BOOL v80 = 1;
  while (2)
  {
    CFArrayRef v81 = &v71[v74];
    CFTypeRef v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    int v83 = (char)v82;
    if ((char)v82 < 0) {
      CFTypeRef v82 = (void *)v81->__r_.__value_.__l.__size_;
    }
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0) {
LABEL_236:
        }
          operator delete(__p[0]);
        char v2 = v130;
        BOOL negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0) {
      xpc_object_t v84 = &v71[v74];
    }
    else {
      xpc_object_t v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    }
    if ((v72 & 0x80) == 0)
    {
      if (!v72)
      {
LABEL_157:
        char v2 = v130;
        BOOL negate = 1;
        if (!v80) {
          goto LABEL_238;
        }
        goto LABEL_245;
      }
      uint64_t v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85) {
          goto LABEL_157;
        }
      }
      goto LABEL_149;
    }
    BOOL v127 = v80;
    CFArrayRef v86 = v76;
    dispatch_object_t v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      CFRange v77 = v87;
      CFRange v76 = v86;
      if (v74 == v79) {
        goto LABEL_236;
      }
LABEL_153:
      BOOL v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  char v2 = v130;
  BOOL negate = 1;
  if (!v127) {
    goto LABEL_238;
  }
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    int v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    int v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_1C5A278B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  locale = a1[17].__locale_;
  if (locale)
  {
    uint64_t v3 = a1[18].__locale_;
    unint64_t v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        uint64_t v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      unint64_t v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  unsigned int v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  char v6 = a1[11].__locale_;
  if (v6)
  {
    char v7 = a1[12].__locale_;
    unint64_t v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      char v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        unint64_t v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  uint64_t v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = operator new(v10 + 1);
  *(void *)&__dst[8] = v5;
  *(void *)&__dst[16] = v11 | 0x8000000000000000;
  *(void *)std::string __dst = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned char *v9 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (!*(void *)&__dst[8]) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!__dst[23]) {
      return;
    }
    int v12 = __dst;
  }
  std::__get_collation_name(&v19, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  unint64_t v13 = v19.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (*(void *)&__dst[8] < 3uLL)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v19);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v19;
      if (*(char *)(a4 + 23) < 0)
      {
        uint64_t v16 = *(void *)(a4 + 8);
        if (v16 == 1 || v16 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if (__dst[23] >= 0) {
              uint64_t v17 = __dst;
            }
            else {
              uint64_t v17 = *(unsigned char **)__dst;
            }
            if (__dst[23] >= 0) {
              size_t v18 = __dst[23];
            }
            else {
              size_t v18 = *(void *)&__dst[8];
            }
            std::string::__assign_no_alias<false>((void **)a4, v17, v18);
          }
        }
        else
        {
          **(unsigned char **)a4 = 0;
          *(void *)(a4 + 8) = 0;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a4 + 23);
        if (v15 == 1 || v15 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__assign_no_alias<true>((void *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(void *)(a4 + 16) = *(void *)&__dst[16];
            }
          }
        }
        else
        {
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 23) = 0;
        }
      }
LABEL_16:
      if ((__dst[23] & 0x80000000) == 0) {
        return;
      }
      int v12 = *(char **)__dst;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (__dst[23] < 3u) {
    goto LABEL_24;
  }
}

void sub_1C5A27D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    uint64_t v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  _OWORD __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)uint64_t v9 = 0;
  memset(a4, 170, 24);
  int v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    int v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, &v12[(void)v13]);
  uint64_t v14 = *((unsigned __int8 *)a4 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = a4[1];
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = (unsigned char *)*a4;
    }
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(unsigned char *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0) {
LABEL_26:
  }
    operator delete(__dst[0]);
}

void sub_1C5A27F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A27F68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  int64_t v5 = a2 - a3;
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  char v7 = a2;
  if (v6 == 93) {
    return v7;
  }
  unint64_t v8 = (char *)a4;
  int v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  int v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      uint64_t v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2) {
        goto LABEL_91;
      }
      uint64_t v15 = 0;
      int64_t v16 = v5 + 4;
      uint64_t v17 = (unsigned __int8 *)v4;
      uint64_t v18 = v16;
      if (v4[2] == 58) {
        goto LABEL_15;
      }
      do
      {
        do
        {
          if (!v18) {
            goto LABEL_91;
          }
          uint64_t v17 = (unsigned __int8 *)&v4[++v15];
          uint64_t v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      std::string v19 = &v4[v15 + 2];
      if (v19 == a3) {
LABEL_91:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      int v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      }
      char v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      unint64_t v8 = &v4[v15 + 4];
      char v7 = v4;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      unint64_t v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      char v13 = 0;
      char v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
    int v11 = 0;
    goto LABEL_36;
  }
  size_t v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_92;
  }
  uint64_t v22 = (unsigned __int8 *)(v4 + 2);
  uint64_t v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46) {
    goto LABEL_24;
  }
  do
  {
    do
    {
      if (a3 - 4 == v4) {
        goto LABEL_92;
      }
      ++v4;
      uint64_t v22 = v23;
      int v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3) {
LABEL_92:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v42 = v44;
  *(_OWORD *)std::vector<std::csub_match> __p = v43;
  uint64_t v25 = (char *)HIBYTE(v44);
  int v11 = SHIBYTE(v44);
  uint64_t v26 = *((void *)&v43 + 1);
  if (v44 < 0) {
    uint64_t v25 = (char *)__p[1];
  }
  if ((unint64_t)(v25 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = (char *)(v22 + 2);
  int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0) {
    uint64_t v26 = HIBYTE(v44);
  }
  if (v26)
  {
    if (v4 == a3) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      int v31 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  int v28 = *v4;
  if (v28 != 92) {
    goto LABEL_44;
  }
  std::vector<char>::pointer v29 = v4 + 1;
  if (v27) {
    unint64_t v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  }
  else {
    unint64_t v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  }
  unint64_t v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1]) {
        goto LABEL_69;
      }
      if (__p[1] != (void *)1)
      {
        char v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        char v13 = 1;
        char v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      char v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42)) {
        goto LABEL_69;
      }
      char v33 = __p;
      if (HIBYTE(v42) != 1) {
        goto LABEL_68;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  int v32 = *v4;
  if (v32 == 93) {
    goto LABEL_52;
  }
  int v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93) {
    goto LABEL_52;
  }
  long long v43 = 0uLL;
  int64_t v44 = 0;
  char v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if (v34 == 92)
      {
        if (v27) {
          uint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        }
        else {
          uint64_t v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        }
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  uint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  char v7 = v35;
LABEL_82:
  *(_OWORD *)std::vector<std::pair<std::string, std::string>>::pointer v39 = *(_OWORD *)__p;
  uint64_t v40 = v42;
  __p[1] = 0;
  uint64_t v42 = 0;
  __p[0] = 0;
  *(_OWORD *)uint64_t v37 = v43;
  uint64_t v38 = v44;
  long long v43 = 0uLL;
  int64_t v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0) {
        goto LABEL_85;
      }
LABEL_89:
      operator delete((void *)v43);
      char v13 = 1;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0) {
    goto LABEL_89;
  }
LABEL_85:
  char v13 = 1;
  if (SHIBYTE(v42) < 0) {
LABEL_70:
  }
    operator delete(__p[0]);
LABEL_71:
  if (v13) {
    return v7;
  }
  return v8;
}

void sub_1C5A284A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_39;
  }
  int v6 = a3 - 2;
  char v7 = a2;
  unint64_t v8 = a2;
  uint64_t v9 = a2 + 1;
  if (*a2 != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      unint64_t v8 = v9;
      int v10 = *v9++;
      if (v10 == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3) {
    goto LABEL_39;
  }
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    int v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v11 = (char *)v20[1];
  if (!v20[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(void)v12], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v13 = *(void *)(a4 + 144);
      if (v13 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)unint64_t v13 = v14;
        }
        *(void *)(a4 + 144) = v13 + 24;
        *(void *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0) {
    uint64_t v15 = v20[1];
  }
  if (v15 == (void *)2)
  {
    uint64_t v17 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      uint64_t v17 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    int64_t v16 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      int64_t v16 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0) {
      goto LABEL_38;
    }
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
    return v7 + 2;
  }
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_1C5A287A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int64_t v5 = a3 - 2;
  int v6 = a2;
  char v7 = a2;
  unint64_t v8 = a2 + 1;
  if (*a2 != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      char v7 = v8;
      int v9 = *v8++;
      if (v9 == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unint64_t v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unint64_t v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unint64_t v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unint64_t v8 = a2 + 3;
      }
      else {
        unint64_t v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_74;
      }
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8) != 1) {
        goto LABEL_74;
      }
    }
    else if (*(unsigned char *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v4;
      uint64_t v49 = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)unint64_t v50 = *(_OWORD *)v3;
      uint64_t v51 = *(void *)(v3 + 16);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 < *(void *)(a1 + 104))
      {
        long long v40 = *(_OWORD *)__p;
        *(void *)(v39 + 16) = v49;
        *(_OWORD *)unint64_t v39 = v40;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(void *)(v39 + 40) = v41;
        v50[1] = 0;
        uint64_t v51 = 0;
        v50[0] = 0;
        *(void *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      uint64_t v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      int v43 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    int v34 = a2;
    if ((v16 & 0x80) != 0) {
      int v34 = *(char **)a2;
    }
    char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = v35;
      std::vector<char>::pointer v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = v35;
      std::vector<char>::pointer v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        char v37 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v36);
        uint64_t v38 = (unsigned char *)v3;
        if (*(char *)(v3 + 23) < 0) {
          uint64_t v38 = *(unsigned char **)v3;
        }
        unsigned char *v38 = v37;
        goto LABEL_67;
      }
    }
    std::vector<char>::pointer v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(void *)(v4 + 8))
        {
LABEL_13:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(void *)(v3 + 8)) {
                goto LABEL_44;
              }
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            uint64_t v13 = v3;
            if ((v12 & 0x80) != 0) {
              uint64_t v13 = *(void *)v3;
            }
            char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v13 + j));
            uint64_t v15 = v3;
            if (*(char *)(v3 + 23) < 0) {
              uint64_t v15 = *(void *)v3;
            }
            *(unsigned char *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      uint64_t v8 = v4;
      if ((v7 & 0x80) != 0) {
        uint64_t v8 = *(void *)v4;
      }
      char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v8 + i));
      uint64_t v10 = v4;
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v10 = *(void *)v4;
      }
      *(unsigned char *)(v10 + i) = v9;
    }
  }
  for (unint64_t k = 0; ; ++k)
  {
    unint64_t v19 = a2[23];
    if (a2[23] < 0) {
      break;
    }
    if (k >= v19) {
      goto LABEL_35;
    }
LABEL_33:
    uint64_t v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      uint64_t v18 = *(char **)a2;
      uint64_t v20 = *(char **)a2;
    }
    else
    {
      uint64_t v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((void *)a2 + 1)) {
    goto LABEL_33;
  }
LABEL_35:
  for (unint64_t m = 0; ; ++m)
  {
    unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (m >= v23) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      uint64_t v22 = *(void *)a3;
      uint64_t v24 = *(void *)a3;
    }
    else
    {
      uint64_t v24 = a3;
    }
    *(unsigned char *)(v24 + m) = *(unsigned char *)(v22 + m);
  }
  if (m < *(void *)(a3 + 8)) {
    goto LABEL_42;
  }
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v26 = v4;
    uint64_t v4 = *(void *)v4;
    uint64_t v25 = *(void *)(v26 + 8);
  }
  else
  {
    uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v28 = v3;
    uint64_t v3 = *(void *)v3;
    uint64_t v27 = *(void *)(v28 + 8);
  }
  else
  {
    uint64_t v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v46;
  uint64_t v49 = v47;
  *(_OWORD *)unint64_t v50 = *(_OWORD *)v44;
  uint64_t v51 = v45;
  unint64_t v29 = *(void *)(a1 + 96);
  if (v29 >= *(void *)(a1 + 104))
  {
    int v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    int v33 = SHIBYTE(v51);
    *(void *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  long long v30 = *(_OWORD *)__p;
  *(void *)(v29 + 16) = v49;
  *(_OWORD *)unint64_t v29 = v30;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  uint64_t v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(void *)(v29 + 40) = v31;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  *(void *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0) {
    goto LABEL_69;
  }
}

void sub_1C5A29644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5A29658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    uint64_t v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = (char **)(a1 + 112);
      uint64_t v10 = *(char **)(a1 + 112);
      uint64_t v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v7 - (void)v10;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (_WORD *)(2 * v12);
          uint64_t v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          uint64_t v19 = 2 * v12 + 2;
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v31 = (v30 >> 1) + 1;
          unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          int v33 = &v8[-v32];
          uint64_t v17 = (_WORD *)((char *)v17 - v32);
          int v34 = &v16[2 * v12 - 16];
          char v35 = v8 - 16;
          unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            _OWORD *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          uint64_t v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--uint64_t v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          uint64_t v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v16 = operator new(2 * v15);
          uint64_t v17 = &v16[2 * v12];
          uint64_t v18 = &v16[2 * v15];
          *uint64_t v17 = v6;
          uint64_t v19 = (uint64_t)(v17 + 1);
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)uint64_t v8 = v6;
    uint64_t v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  char v9 = (char **)(a1 + 112);
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  uint64_t v8 = *(char **)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v9;
    uint64_t v23 = v8 - *v9;
    if (v23 <= -3) {
      goto LABEL_67;
    }
    uint64_t v24 = v23 >> 1;
    unint64_t v25 = v21 - (void)v22;
    if (v25 <= (v23 >> 1) + 1) {
      unint64_t v26 = v24 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 < 0) {
        goto LABEL_68;
      }
      uint64_t v28 = operator new(2 * v27);
      uint64_t v17 = &v28[2 * v24];
      uint64_t v18 = &v28[2 * v27];
      *uint64_t v17 = v6;
      uint64_t v19 = (uint64_t)(v17 + 1);
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v17 = (_WORD *)(2 * v24);
      uint64_t v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      uint64_t v19 = 2 * v24 + 2;
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    unint64_t v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E) {
      goto LABEL_72;
    }
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v48 = (v47 >> 1) + 1;
    unint64_t v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v50 = &v8[-v49];
    uint64_t v17 = (_WORD *)((char *)v17 - v49);
    uint64_t v51 = &v28[2 * v24 - 16];
    size_t v52 = v8 - 16;
    unint64_t v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *uint64_t v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    uint64_t v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21) {
    goto LABEL_28;
  }
  unint64_t v39 = *v9;
  uint64_t v40 = v8 - *v9;
  if (v40 <= -3) {
    goto LABEL_67;
  }
  uint64_t v41 = v40 >> 1;
  unint64_t v42 = v21 - (void)v39;
  if (v42 <= (v40 >> 1) + 1) {
    unint64_t v43 = v41 + 1;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v44 = v43;
  }
  if (!v44)
  {
    uint64_t v45 = 0;
    uint64_t v17 = (_WORD *)(2 * v41);
    uint64_t v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    uint64_t v19 = 2 * v41 + 2;
    uint64_t v46 = (char *)(v8 - v39);
    if (v8 == v39) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v44 < 0) {
    goto LABEL_68;
  }
  uint64_t v45 = operator new(2 * v44);
  uint64_t v17 = &v45[2 * v41];
  uint64_t v18 = &v45[2 * v44];
  *uint64_t v17 = v6;
  uint64_t v19 = (uint64_t)(v17 + 1);
  uint64_t v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    unint64_t v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E) {
      goto LABEL_73;
    }
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v57 = (v56 >> 1) + 1;
    unint64_t v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    int v59 = &v8[-v58];
    uint64_t v17 = (_WORD *)((char *)v17 - v58);
    CFArrayRef v60 = &v45[2 * v41 - 16];
    size_t v61 = v8 - 16;
    unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *CFArrayRef v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    uint64_t v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A29AD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    char v9 = __s;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v16 = v5 | 7;
  }
  uint64_t v17 = v16 + 1;
  char v9 = (char *)operator new(v16 + 1);
  *(void *)&__s[8] = v5;
  *(void *)&char __s[16] = v17 | 0x8000000000000000;
  *(void *)__s = v9;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
    do
    {
LABEL_15:
      char v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  uint64_t v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  uint64_t v12 = (long long *)(a2 + 16);
  unint64_t v13 = v9 + 16;
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *unint64_t v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  char *v10 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (!*(void *)&__s[8]) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!__s[23]) {
      return;
    }
    uint64_t v19 = __s;
  }
  std::__get_collation_name(&v26, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v20 = v26.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0) {
      return;
    }
    uint64_t v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (*(void *)&__s[8] >= 3uLL) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  if (__s[23] < 3u)
  {
LABEL_31:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v26);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v26;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v23 = *(void *)(a4 + 8);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0) {
            uint64_t v24 = __s;
          }
          else {
            uint64_t v24 = *(char **)__s;
          }
          if (__s[23] >= 0) {
            size_t v25 = __s[23];
          }
          else {
            size_t v25 = *(void *)&__s[8];
          }
          std::string::__assign_no_alias<false>((void **)a4, v24, v25);
        }
      }
      else
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(a4 + 23);
      if (v22 == 1 || v22 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((void *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(void *)(a4 + 16) = *(void *)&__s[16];
          }
        }
      }
      else
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_1C5A29DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unsigned char **a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x16)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  unsigned char *v10 = 0;
  memset(a4, 170, 24);
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v20, &v19[(void)v20]);
  unint64_t v21 = (unsigned char *)*((unsigned __int8 *)a4 + 23);
  int v22 = (char)v21;
  if ((char)v21 < 0) {
    unint64_t v21 = a4[1];
  }
  if (v21 == (unsigned char *)1) {
    goto LABEL_32;
  }
  if (v21 != (unsigned char *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v22 >= 0) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = *a4;
  }
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_35;
  }
}

void sub_1C5A2A010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    char v9 = (char *)operator new(24 * v8);
  }
  else
  {
    char v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v16 = v10;
  uint64_t v17 = v10;
  char v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v10 = v16;
    uint64_t v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      unint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  unint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    unint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_1C5A2A1F0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A2A2B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 > 0x16)
  {
    uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v16 = v4 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    long long v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  unsigned char *v10 = 0;
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v20, &v19[(void)v20]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v21 = __p;
  }
  else {
    unint64_t v21 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_1C5A2A464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    unint64_t v6 = (void *)(a1 + 64);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v16 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          long long v12 = operator new(v21);
          unint64_t v13 = &v12[v18];
          unint64_t v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          long long v12 = 0;
          unint64_t v13 = &v5[-*v6];
          unint64_t v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            __int16 v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              _OWORD *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        unint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      long long v12 = operator new(v27);
      unint64_t v13 = &v12[v24];
      unint64_t v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      long long v12 = 0;
      unint64_t v13 = &v5[-*v6];
      unint64_t v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v46 = (long long *)(v5 - 16);
        unint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    unint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    unsigned char *v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  unint64_t v6 = (void *)(a1 + 64);
  unint64_t v7 = *(unsigned char **)(a1 + 64);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    long long v12 = operator new(v11);
    unint64_t v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    long long v12 = 0;
    unint64_t v13 = (char *)(v5 - v7);
    unint64_t v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  unint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    int v34 = &v5[-v22 - 8];
    char v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unint64_t v5 = (unsigned char *)*v6;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3 > 0x16)
  {
    uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v14 = v3 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    unint64_t v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  unint64_t v7 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    unint64_t v8 = v7;
    uint64_t v9 = (char *)a2;
  }
  else
  {
    unint64_t v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v10 = (long long *)(a2 + 16);
    size_t v11 = v7 + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *size_t v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *unint64_t v8 = 0;
  uint64_t v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v18 = __p;
  }
  else {
    unint64_t v18 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v17 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v18, &v17[(void)v18]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5A2AAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A2AB10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  size_t v11 = v8 + 48;
  unint64_t v12 = (void **)*a1;
  long long v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      *((void *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    long long v13 = (void **)*a1;
    char v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_22;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8 = __mexp_end;
  int v9 = __mexp_begin;
  long long v14 = operator new(0x10uLL);
  std::__split_buffer<std::string>::pointer end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  uint64_t v17 = operator new(0x38uLL);
  loop_size_t count = this->__loop_count_;
  *((void *)v17 + 1) = __s->__first_;
  *((void *)v17 + 2) = v14;
  *(void *)uint64_t v17 = &unk_1F2105290;
  *((void *)v17 + 3) = __min;
  *((void *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = loop_count;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((unsigned char *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  unint64_t v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_1F2105320;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((void *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = loop_count + 1;
}

void sub_1C5A2B010(_Unwind_Exception *a1)
{
  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A2B024(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A2B07C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A2B0D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F21052F0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F21052F0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    unint64_t *v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      uint64_t v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - 1) = v24;
        *uint64_t v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    char v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - 1) = v16;
      *char v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      uint64_t v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        unsigned char *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F21052F0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F21052F0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F21052F0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F21052F0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8794E20](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C5A2B8A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(unsigned char *)a2 != 92) {
    return v6;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    uint64_t v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      void *v10 = &unk_1F2105200;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_23;
      }
      uint64_t v14 = v9;
      uint64_t v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v16 = *(_DWORD *)(a1 + 28);
      uint64_t v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17) {
        break;
      }
      uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    uint64_t v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v18 = operator new(0x18uLL);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      void *v18 = &unk_1F2105248;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(void *)(v19 + 8) = v18;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return v6;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  uint64_t v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  uint64_t v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3) {
    goto LABEL_45;
  }
  int v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38) {
    goto LABEL_45;
  }
  int v12 = v11 - 48;
  uint64_t v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    uint64_t v13 = a3;
  }
  else
  {
    while (1)
    {
      int v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
        break;
      }
      if (v12 >= 214748364) {
        goto LABEL_45;
      }
      int v12 = v14 + 10 * v12 - 48;
      uint64_t v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3) {
        goto LABEL_15;
      }
    }
  }
  if (v13 == v10) {
    goto LABEL_45;
  }
  if (v13 == a3) {
LABEL_46:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  uint64_t v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  int v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3) {
    goto LABEL_46;
  }
  int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    int v18 = v17 - 48;
    uint64_t v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      uint64_t v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
        break;
      }
      if (v18 >= 214748364) {
        goto LABEL_45;
      }
      int v18 = v17 + 10 * v18 - 48;
      uint64_t v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    int v18 = -1;
  }
  if (v15 == a3)
  {
    uint64_t v20 = (unsigned __int8 *)v15;
    uint64_t v15 = a3;
    uint64_t v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    uint64_t v9 = (unsigned __int8 *)v15;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9) {
    goto LABEL_46;
  }
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 != a3 && v5 == 92)
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
      if (*a2 == 46)
      {
        uint64_t v10 = (std::__node<char> *)operator new(0x10uLL);
        std::__split_buffer<std::string>::pointer end = this->__end_;
        first = end->__first_;
        v10->__vftable = (std::__node<char>_vtbl *)&unk_1F21053F8;
        v10[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v10;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return a2 + 1;
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        int v9 = operator new(0x10uLL);
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v11 = *(void *)(v10 + 8);
        void *v9 = &unk_1F21053F8;
        v9[1] = v11;
        *(void *)(v10 + 8) = v9;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2) {
      goto LABEL_24;
    }
    return a2;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    uint64_t v13 = operator new(0x18uLL);
    BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v15 = *(void *)(a1 + 56);
    v13[1] = *(void *)(v15 + 8);
    int v16 = &unk_1F2104EE8;
    goto LABEL_14;
  }
  if (locale_low == 40)
  {
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v17 = operator new(0x18uLL);
      int v18 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v18;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      *int v17 = &unk_1F2105200;
      v17[1] = v20;
      *((_DWORD *)v17 + 4) = v18;
      *(void *)(v19 + 8) = v17;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    ++*(_DWORD *)(a1 + 36);
    int v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v21 == a3 || (uint64_t v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v23 = operator new(0x18uLL);
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = *(void *)(v24 + 8);
      *uint64_t v23 = &unk_1F2105248;
      v23[1] = v25;
      *((_DWORD *)v23 + 4) = v18;
      *(void *)(v24 + 8) = v23;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    --*(_DWORD *)(a1 + 36);
    int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    goto LABEL_23;
  }
  if (locale_low != 94) {
    return a2;
  }
  uint64_t v13 = operator new(0x18uLL);
  BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v15 = *(void *)(a1 + 56);
  v13[1] = *(void *)(v15 + 8);
  int v16 = &unk_1F2104EA0;
LABEL_14:
  *uint64_t v13 = v16;
  *((unsigned char *)v13 + 16) = v14;
  *(void *)(v15 + 8) = v13;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_24:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  uint64_t v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
    goto LABEL_13;
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
LABEL_13:
    }
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      int v12 = v9 | 0x80;
      for (unint64_t i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
          }
            }
          else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0))
          {
            goto LABEL_28;
          }
        }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
        }
          }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
      }
      else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))
      {
        goto LABEL_28;
      }
    }
    uint64_t result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13; {
LABEL_28:
  }
  if (this->__end_ == this->__begin_) {
    std::vector<std::csub_match>::pointer begin = (std::vector<std::csub_match>::pointer)v11;
  }
  else {
    std::vector<std::csub_match>::pointer begin = this->__begin_;
  }
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      std::__split_buffer<std::string>::pointer end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::__split_buffer<std::string>::pointer end = this->__end_;
  }
  if (end != begin)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      uint64_t v20 = (void *)(v18 + v15 * 24);
      if (v19 <= v16) {
        int v21 = a4 + 3;
      }
      else {
        int v21 = v20;
      }
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        uint64_t v22 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v22 = *a4 + v15 * 24;
      }
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(void *)(v22 + 8) - v10);
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        uint64_t v23 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v23 = *a4 + v15 * 24;
      }
      char v24 = *(unsigned char *)(v23 + 16);
      std::vector<std::ssub_match>::pointer begin = this->__begin_;
      std::vector<std::ssub_match>::pointer v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  size_t v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    this[4].__end_ = v26;
  }
  LOBYTE(this[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v100 = 0u;
  long long v101 = 0u;
  long long v99 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    uint64_t v85 = (void **)*((void *)&v99 + 1);
    CFArrayRef v86 = (void **)v100;
    *((void *)&v101 + 1) = 0;
    unint64_t v87 = v100 - *((void *)&v99 + 1);
    if ((void)v100 - *((void *)&v99 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v85);
      CFArrayRef v86 = (void **)v100;
      uint64_t v85 = (void **)(*((void *)&v99 + 1) + 8);
      *((void *)&v99 + 1) = v85;
      unint64_t v87 = v100 - (void)v85;
    }
    while ((void)v100 - (void)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)xpc_object_t v98 = 0;
  memset(&v98[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
  unint64_t v11 = *(void *)(*((void *)&v99 + 1) + 8 * (((void)v101 + *((void *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((void)v101 + *((void *)&v101 + 1)) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v98[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v98;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v98[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  memset(&v98[56], 0, 24);
  uint64_t v13 = *(void *)&v98[80];
  *(void *)(v11 + 85) = *(void *)&v98[85];
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v101 + 1);
  uint64_t v14 = v101;
  uint64_t v16 = ++*((void *)&v101 + 1);
  uint64_t v17 = *((void *)&v99 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v101 + v15;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v99 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  char v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  uint64_t v25 = v26;
  unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  unint64_t v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    uint64_t v16 = *((void *)&v101 + 1);
    uint64_t v14 = v101;
    uint64_t v17 = *((void *)&v99 + 1);
  }
  uint64_t v94 = 0;
  char v95 = 0;
  unsigned int v28 = 0;
  unint64_t v29 = v14 + v16 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v93 = a3;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    unint64_t v35 = v16 + v101 - 1;
    uint64_t v36 = *(void *)(*((void *)&v99 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    unint64_t v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v93) {
          goto LABEL_21;
        }
        uint64_t v65 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v66 = v94;
        if ((v95 & (v94 >= v65)) == 0) {
          uint64_t v66 = v65;
        }
        if (v66 == v32)
        {
          size_t v67 = (void **)*((void *)&v99 + 1);
          uint64_t v68 = v100;
          if ((void)v100 == *((void *)&v99 + 1))
          {
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = 0;
          }
          else
          {
            int v69 = (void *)(*((void *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            int v70 = (void *)(*v69 + 96 * ((unint64_t)v101 % 0x2A));
            unint64_t v71 = *(void *)(*((void *)&v99 + 1) + 8 * ((*((void *)&v101 + 1) + (void)v101) / 0x2AuLL))
                + 96 * ((*((void *)&v101 + 1) + (void)v101) % 0x2AuLL);
            if (v70 != (void *)v71)
            {
              do
              {
                uint64_t v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                int64_t v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((void *)((char *)v70 - *v69) == (void *)4032)
                {
                  unint64_t v74 = (void *)v69[1];
                  ++v69;
                  int v70 = v74;
                }
              }
              while (v70 != (void *)v71);
              size_t v67 = (void **)*((void *)&v99 + 1);
              uint64_t v68 = v100;
            }
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = v68 - (void)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                size_t v67 = (void **)(*((void *)&v99 + 1) + 8);
                *((void *)&v99 + 1) = v67;
                unint64_t v82 = v100 - (void)v67;
              }
              while ((void)v100 - (void)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            uint64_t v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              char v95 = 1;
              uint64_t v94 = v32;
              goto LABEL_8;
            }
            uint64_t v83 = 42;
          }
          *(void *)&long long v101 = v83;
          goto LABEL_76;
        }
        uint64_t v94 = v66;
        unint64_t v75 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v76 = *(void *)(*((void *)&v99 + 1) + 8 * (v75 / 0x2A));
        unint64_t v77 = v75 % 0x2A;
        CFRange v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(void *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        uint64_t v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(void *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        uint64_t v80 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v81 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v80 = 0;
        }
        if ((unint64_t)(v80 - (*((void *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        char v95 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v101 + 1);
        if (*((void *)&v101 + 1)) {
          continue;
        }
        if (v95)
        {
          uint64_t v84 = *v92;
          *(void *)uint64_t v84 = a2;
          *(void *)(v84 + 8) = a2 + v94;
          uint64_t v6 = 1;
          *(unsigned char *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        uint64_t v85 = (void **)*((void *)&v99 + 1);
        CFArrayRef v86 = (void **)v100;
        *((void *)&v101 + 1) = 0;
        unint64_t v87 = v100 - *((void *)&v99 + 1);
        if ((void)v100 - *((void *)&v99 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v88 = v87 >> 3;
        if (v88 == 1)
        {
          uint64_t v89 = 21;
LABEL_85:
          *(void *)&long long v101 = v89;
        }
        else if (v88 == 2)
        {
          uint64_t v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            int v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((void)v100 != *((void *)&v99 + 1)) {
            *(void *)&long long v100 = v100 + ((*((void *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v99) {
          operator delete((void *)v99);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v101;
        if (!(void)v101)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v99);
          unint64_t v49 = v101;
        }
        unint64_t v50 = (void *)(*((void *)&v99 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 11) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v101 + 1);
        *(void *)&long long v101 = v101 - 1;
        ++*((void *)&v101 + 1);
        uint64_t v56 = v55 + v101;
        unint64_t v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        uint64_t v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        uint64_t v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        uint64_t v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v48 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(void *)&long long v58 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v98[64] = v58;
        *(_OWORD *)&v98[80] = v58;
        *(_OWORD *)&v98[32] = v58;
        *(_OWORD *)&v98[48] = v58;
        *(_OWORD *)xpc_object_t v98 = v58;
        *(_OWORD *)&v98[16] = v58;
        std::__state<char>::__state((uint64_t)v98, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v98[80] + 24))(*(void *)&v98[80], 0, v98);
        uint64_t v59 = *((void *)&v99 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        }
        unint64_t v61 = *((void *)&v101 + 1) + v101;
        if (v60 == *((void *)&v101 + 1) + (void)v101)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
          uint64_t v59 = *((void *)&v99 + 1);
          unint64_t v61 = *((void *)&v101 + 1) + v101;
        }
        unint64_t v62 = *(void *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        long long v63 = *(_OWORD *)&v98[16];
        *(_OWORD *)unint64_t v62 = *(_OWORD *)v98;
        *(_OWORD *)(v62 + 16) = v63;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v98[32];
        *(void *)(v62 + 48) = *(void *)&v98[48];
        memset(&v98[32], 0, 24);
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v98[56];
        *(void *)(v62 + 72) = *(void *)&v98[72];
        memset(&v98[56], 0, 24);
        uint64_t v64 = *(void *)&v98[80];
        *(void *)(v62 + 85) = *(void *)&v98[85];
        *(void *)(v62 + 80) = v64;
        ++*((void *)&v101 + 1);
        if (*(void *)&v98[56])
        {
          *(void *)&v98[64] = *(void *)&v98[56];
          operator delete(*(void **)&v98[56]);
        }
        if (*(void *)&v98[32])
        {
          *(void *)&v98[40] = *(void *)&v98[32];
          operator delete(*(void **)&v98[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_1C5A2D538(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1C5A2D54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_1C5A2D594(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1C5A2D5A8(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  size_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(void *)uint64_t v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)uint64_t v65 = 0u;
  memset(v66, 0, 36);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)unint64_t v62 = 0;
  memset(&v62[8], 0, 85);
  uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(void *)&v62[56])
  {
    *(void *)&v62[64] = *(void *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    uint64_t v13 = v68;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  long long v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
    uint64_t v13 = v68;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  unint64_t v21 = (const char *)(a3 - a2);
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  uint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    char v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        uint64_t v34 = &v26[-*((void *)v13 - 11)];
        unint64_t v35 = v60;
        if ((v61 & ((uint64_t)v60 >= (uint64_t)v34)) == 0)
        {
          long long v36 = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v25;
          *(_OWORD *)&v64[16] = v36;
          if (v64 != v25)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v37 = *(void *)v24;
          *(void *)&v66[29] = *(void *)(v13 - 11);
          *(void *)&v66[24] = v37;
          unint64_t v35 = v34;
        }
        uint64_t v38 = v68;
        if (v35 == v21)
        {
          uint64_t v39 = v67;
          while (v38 != v39)
          {
            unint64_t v40 = (void *)*((void *)v38 - 5);
            if (v40)
            {
              *((void *)v38 - 4) = v40;
              operator delete(v40);
            }
            uint64_t v41 = (void *)*((void *)v38 - 8);
            if (v41)
            {
              *((void *)v38 - 7) = v41;
              operator delete(v41);
            }
            v38 -= 96;
          }
          uint64_t v68 = v39;
          char v61 = 1;
          uint64_t v60 = v21;
        }
        else
        {
          uint64_t v60 = v35;
          unint64_t v42 = (void *)*((void *)v68 - 5);
          if (v42)
          {
            *((void *)v68 - 4) = v42;
            operator delete(v42);
          }
          uint64_t v43 = (void *)*((void *)v38 - 8);
          if (v43)
          {
            *((void *)v38 - 7) = v43;
            operator delete(v43);
          }
          uint64_t v68 = v38 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v68;
        unsigned int v28 = (void *)*((void *)v68 - 5);
        if (v28)
        {
          *((void *)v68 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        uint64_t v68 = v27 - 96;
        break;
      case 0xFFFFFC20:
        *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v30;
        *(_OWORD *)&v62[80] = v30;
        *(_OWORD *)&v62[32] = v30;
        *(_OWORD *)&v62[48] = v30;
        *(_OWORD *)unint64_t v62 = v30;
        *(_OWORD *)&v62[16] = v30;
        std::__state<char>::__state((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v62[80] + 24))(*(void *)&v62[80], 0, v62);
        unint64_t v31 = v68;
        if ((unint64_t)v68 >= v69)
        {
          uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(void *)&v62[56])
          {
            *(void *)&v62[64] = *(void *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&v62[16];
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v62;
          *((_OWORD *)v31 + 1) = v32;
          *((void *)v31 + 4) = 0;
          *((void *)v31 + 5) = 0;
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((_OWORD *)v31 + 2) = *(_OWORD *)&v62[32];
          *((void *)v31 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v31 + 8) = 0;
          *((void *)v31 + 9) = 0;
          *(_OWORD *)(v31 + 56) = *(_OWORD *)&v62[56];
          *((void *)v31 + 9) = *(void *)&v62[72];
          memset(&v62[56], 0, 24);
          uint64_t v33 = *(void *)&v62[80];
          *(void *)(v31 + 85) = *(void *)&v62[85];
          *((void *)v31 + 10) = v33;
          uint64_t v68 = v31 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    uint64_t v13 = v68;
  }
  while (v67 != v68);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = *(void **)v66;
    if (!*(void *)v66) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = &v60[(void)a2];
  *(unsigned char *)(v44 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(void *)&v64[32]) >> 3);
    uint64_t v46 = (unsigned char *)(*(void *)&v64[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = *(void **)v66;
  if (*(void *)v66)
  {
LABEL_64:
    *(void *)&v66[8] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  long long v52 = v67;
  if (v67)
  {
    uint64_t v53 = v68;
    uint64_t v54 = v67;
    if (v68 != v67)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v67;
    }
    uint64_t v68 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_1C5A2DBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = a1[4];
    std::basic_regex<char>::value_type v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        uint64_t v8 = (void *)*((void *)v6 + 7);
        if (v8)
        {
          *((void *)v6 + 8) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v6 + 4);
        if (v9)
        {
          *((void *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          uint64_t v10 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v12 = a1[2];
        uint64_t v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        unint64_t v11 = v12 - (void)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  std::deque<std::__state<char>>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    std::basic_regex<char>::value_type v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)std::basic_regex<char>::value_type v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v32 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v32 = 1;
      }
      if (!(v32 >> 61))
      {
        unint64_t v33 = v32 >> 2;
        uint64_t v34 = 8 * v32;
        unint64_t v35 = (char *)operator new(8 * v32);
        long long v36 = &v35[8 * v33];
        uint64_t v37 = &v35[v34];
        int64_t v39 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            int64_t v73 = &v35[8 * v33];
            uint64_t v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v40 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v41 = &v36[v75];
              v7 += v75;
              uint64_t v76 = (long long *)(v6 + 3);
              unint64_t v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                _OWORD *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v41 = &v35[8 * v33];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    std::basic_regex<char>::value_type v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    uint64_t v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    unint64_t v42 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v42 + 1);
    uint64_t v8 = *v42;
    *(void *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v43 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v43 = 1;
      }
      if (!(v43 >> 61))
      {
        unint64_t v44 = v43 >> 2;
        uint64_t v45 = 8 * v43;
        unint64_t v35 = (char *)operator new(8 * v43);
        long long v36 = &v35[8 * v44];
        uint64_t v37 = &v35[v45];
        int64_t v46 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            long long v81 = &v35[8 * v44];
            uint64_t v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v47 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v36[v83];
              v7 += v83;
              uint64_t v84 = (long long *)(v42 + 3);
              uint64_t v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                _OWORD *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v48 = &v35[8 * v44];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_76:
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = v20 >> 2;
      }
      if (v49 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v27 = (char *)operator new(8 * v49);
      unsigned int v28 = &v27[8 * v49];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v27;
      *(void *)unint64_t v27 = v30;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v31 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v31 = v21 + 1;
      }
      v27 -= 8 * (v31 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_51:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25) {
            unint64_t v57 = 1;
          }
          else {
            unint64_t v57 = (v28 - v25) >> 2;
          }
          if (v57 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v58 = (char *)operator new(8 * v57);
          uint64_t v59 = v58;
          unint64_t v60 = (v57 + 3) >> 2;
          unint64_t v27 = &v58[8 * v60];
          int64_t v61 = v29 - v25;
          BOOL v38 = v29 == v25;
          unint64_t v29 = v27;
          if (!v38)
          {
            unint64_t v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if (v62 < 0x38) {
              goto LABEL_91;
            }
            uint64_t v65 = 8 * v60;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20) {
              goto LABEL_91;
            }
            uint64_t v66 = (v62 >> 3) + 1;
            uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            long long v63 = &v27[v67];
            uint64_t v64 = &v25[v67];
            uint64_t v68 = (long long *)(v25 + 16);
            unint64_t v69 = &v58[v65 + 16];
            uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)unint64_t v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                uint64_t v72 = *(void *)v64;
                v64 += 8;
                *(void *)long long v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          unsigned int v28 = &v58[8 * v57];
          operator delete(v25);
          uint64_t v25 = v59;
        }
        else
        {
          uint64_t v53 = (v28 - v29) >> 3;
          if (v53 >= -1) {
            uint64_t v54 = v53 + 1;
          }
          else {
            uint64_t v54 = v53 + 2;
          }
          uint64_t v55 = v54 >> 1;
          unint64_t v27 = &v25[8 * (v54 >> 1)];
          uint64_t v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            uint64_t v56 = v29;
          }
          unint64_t v29 = (char *)v56 + 8 * v55;
        }
      }
      uint64_t v52 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(void *)(a1 + 8));
  }
LABEL_45:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_1C5A2E388(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  std::basic_regex<char>::value_type v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unsigned int v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *unsigned int v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      std::basic_regex<char>::value_type v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *unint64_t v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        std::basic_regex<char>::value_type v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      std::basic_regex<char>::value_type v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    std::basic_regex<char>::value_type v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v47 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      uint64_t v43 = *(void *)(a1 + 16);
      unint64_t v47 = *(void **)(v43 - 8);
      *(void *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_45:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  unint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)BOOL v12 = v13;
    uint64_t v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      uint64_t v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12) {
              unint64_t v26 = 1;
            }
            else {
              unint64_t v26 = (v16 - v12) >> 2;
            }
            if (v26 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v27 = (char *)operator new(8 * v26);
            uint64_t v28 = v27;
            unint64_t v29 = v26 >> 2;
            uint64_t v18 = &v27[8 * (v26 >> 2)];
            int64_t v31 = v16 - v17;
            BOOL v30 = v16 == v17;
            uint64_t v16 = v18;
            if (!v30)
            {
              uint64_t v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v32 = v31 - 8;
              if (v32 < 0x38 || (uint64_t v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                uint64_t v34 = &v27[8 * (v26 >> 2)];
                unint64_t v35 = v17;
                goto LABEL_35;
              }
              uint64_t v37 = (v32 >> 3) + 1;
              uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v34 = &v18[v38];
              unint64_t v35 = &v17[v38];
              int64_t v39 = (long long *)(v17 + 16);
              unint64_t v40 = &v27[v33 + 16];
              uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)unint64_t v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  uint64_t v36 = *(void *)v35;
                  v35 += 8;
                  *(void *)uint64_t v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            unint64_t v15 = &v27[8 * v26];
            if (v12) {
              operator delete(v12);
            }
            BOOL v12 = v28;
            goto LABEL_18;
          }
          uint64_t v20 = (v17 - v12) >> 3;
          if (v20 >= -1) {
            uint64_t v21 = v20 + 1;
          }
          else {
            uint64_t v21 = v20 + 2;
          }
          uint64_t v22 = v21 >> 1;
          uint64_t v23 = &v17[-8 * (v21 >> 1)];
          uint64_t v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            uint64_t v24 = v17;
          }
          uint64_t v25 = -v22;
          unint64_t v15 = v16;
          uint64_t v16 = &v23[v16 - v17];
          uint64_t v18 = &v24[8 * v25];
        }
        else
        {
          uint64_t v18 = v17;
        }
LABEL_18:
        uint64_t v19 = *v3++;
        *(void *)uint64_t v16 = v19;
        v16 += 8;
        uint64_t v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16)) {
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    unint64_t v44 = (char *)operator new(8uLL);
    unint64_t v15 = v44 + 8;
    operator delete(v12);
    BOOL v3 = *(uint64_t **)(a1 + 8);
    uint64_t v45 = *(uint64_t **)(a1 + 16);
    BOOL v12 = v44;
    *(void *)unint64_t v44 = v14;
    uint64_t v16 = v44 + 8;
    if (v3 != v45) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = v12;
LABEL_48:
  int64_t v46 = *(void **)a1;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v46) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v46) {
      return;
    }
  }

  operator delete(v46);
}

void sub_1C5A2EA58(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      uint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  *uint64_t v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      BOOL v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             uint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        BOOL v30 = (char *)result;
        int64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        BOOL v30 = (char *)&result[v55];
        int64_t v31 = &a2[v55];
        uint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          unint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)BOOL v30 = v32;
        *((void *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  uint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      long long v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        int64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  unint64_t v26 = v13;
  if (v20 != a3)
  {
    unint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)unint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *int64_t v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::vector<std::ssub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v11 = &end[__n];
      std::vector<std::ssub_match>::size_type v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      std::vector<std::ssub_match>::pointer end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    std::vector<std::ssub_match>::size_type v14 = 24 * __n;
    int64_t v15 = &v13[__n];
    int64_t v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v13[-1].matched = *(void *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t _GLOBAL__sub_I_ResetInfo_cpp()
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &ResetInfo::sPatternMasks, &dword_1C59C6000);
  char v6 = 15;
  strcpy((char *)v5, ".*\\[abmtool\\].*");
  v7[0] = 1;
  char v9 = 14;
  strcpy((char *)v8, ".*\\[bbutil\\].*");
  int v10 = 1;
  unint64_t v11 = operator new(0x50uLL);
  long long v12 = xmmword_1C5BC51E0;
  strcpy((char *)v11, ".*AP forced coredump via SPMI - Please analyze reason from AP perspective.*");
  int v13 = 1;
  std::vector<std::ssub_match>::size_type v14 = operator new(0x19uLL);
  long long v15 = xmmword_1C5BC51F0;
  strcpy((char *)v14, ".*(after OTASP/OTAPA).*");
  int v16 = 1;
  uint64_t v17 = operator new(0x38uLL);
  long long v18 = xmmword_1C5BC5200;
  strcpy((char *)v17, ".*Carrier bundle updated settings that require reset");
  int v19 = 1;
  uint64_t v20 = operator new(0x28uLL);
  long long v21 = xmmword_1C5BC27D0;
  strcpy((char *)v20, ".*Manually Triggering BB Core Dump");
  int v22 = 1;
  long long v23 = operator new(0x28uLL);
  long long v24 = xmmword_1C5BC5210;
  strcpy((char *)v23, ".*modem manager triggered reset.*");
  int v25 = 1;
  unint64_t v26 = operator new(0x38uLL);
  long long v27 = xmmword_1C5BC5220;
  strcpy((char *)v26, ".*User requested to change Baseband field test config");
  int v28 = 1;
  unint64_t v29 = operator new(0x28uLL);
  uint64_t v30 = 33;
  unint64_t v31 = 0x8000000000000028;
  strcpy((char *)v29, ".*applebbproxy setup AT interface");
  int v32 = 1;
  uint64_t v33 = operator new(0x28uLL);
  uint64_t v34 = 36;
  unint64_t v35 = 0x8000000000000028;
  strcpy((char *)v33, ".*Resetting Baseband after restore.*");
  int v36 = 1;
  BOOL v37 = operator new(0x30uLL);
  uint64_t v38 = 42;
  unint64_t v39 = 0x8000000000000030;
  strcpy((char *)v37, ".*Resetting baseband after pushing files.*");
  int v40 = 1;
  uint64_t v41 = operator new(0x40uLL);
  uint64_t v42 = 59;
  unint64_t v43 = 0x8000000000000040;
  strcpy((char *)v41, ".*Resetting Baseband after successful restore of carrier NV");
  int v44 = 1;
  uint64_t v45 = operator new(0x30uLL);
  uint64_t v46 = 41;
  unint64_t v47 = 0x8000000000000030;
  strcpy((char *)v45, ".*Resetting modem from WirelessAutomation");
  int v48 = 1;
  unint64_t v49 = operator new(0x20uLL);
  uint64_t v50 = 25;
  unint64_t v51 = 0x8000000000000020;
  strcpy((char *)v49, ".*Requesting Soft Reset.*");
  int v52 = 1;
  BOOL v53 = operator new(0x30uLL);
  uint64_t v54 = 42;
  unint64_t v55 = 0x8000000000000030;
  strcpy((char *)v53, ".*AP-triggered((?!: locationd PDS).*|(.*))");
  int v56 = 1;
  unint64_t v59 = 0x8000000000000038;
  unint64_t v57 = operator new(0x38uLL);
  uint64_t v58 = 50;
  strcpy((char *)v57, ".*User ((requested state)|(Triggered Core))dump.*");
  int v60 = 1;
  HIBYTE(v61[2]) = 19;
  strcpy((char *)v61, ".*SIM APNs change.*");
  int v62 = 1;
  float64x2x2_t v63 = operator new(0x28uLL);
  unint64_t v65 = 0x8000000000000028;
  uint64_t v64 = 34;
  strcpy((char *)v63, ".*AttachAPN Push to force detach.*");
  int v66 = 1;
  char v68 = 14;
  strcpy((char *)v67, ".*CSIM reset.*");
  int v69 = 1;
  std::vector<std::csub_match> __p = operator new(0x20uLL);
  unint64_t v72 = 0x8000000000000020;
  uint64_t v71 = 25;
  strcpy((char *)__p, ".*com\\.apple\\.symptomsd.*");
  int v73 = 1;
  qword_1EBBDCC90 = 0;
  qword_1EBBDCC98 = 0;
  kDefaultPatternMasks = 0;
  uint64_t v0 = (char *)operator new(0x280uLL);
  unint64_t v1 = 0;
  kDefaultPatternMasks = (uint64_t)v0;
  qword_1EBBDCC90 = (uint64_t)v0;
  qword_1EBBDCC98 = (uint64_t)(v0 + 640);
  do
  {
    unint64_t v2 = (std::string *)&v0[v1 * 4];
    BOOL v3 = &v5[v1 / 2];
    if (*(&v6 + v1 * 4) < 0)
    {
      std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)*v3, (std::string::size_type)v3[1]);
    }
    else
    {
      *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
      v2->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[2];
    }
    *(_DWORD *)&v0[v1 * 4 + 24] = v7[v1];
    v1 += 8;
  }
  while (v1 != 160);
  qword_1EBBDCC90 = (uint64_t)(v0 + 640);
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v65) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }
  else if ((v68 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v63);
  if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v59) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v61[0]);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v55) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v57);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v51) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v53);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v47) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v43) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v45);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v41);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v35) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v37);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v33);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v29);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v26);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v23);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v20);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v17);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v14);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_47:
    operator delete(v8[0]);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_46:
  operator delete(v11);
  if (v9 < 0) {
    goto LABEL_47;
  }
LABEL_25:
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_26;
  }
LABEL_48:
  operator delete(v5[0]);
LABEL_26:

  return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1C59C6000);
}

void sub_1C5A2F8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a10);
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x258]);
  if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete((void *)STACK[0x238]);
  if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x218]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a84 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a82 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a80 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a66 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a59 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a31 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(a33);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_19:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_20:
    if ((a17 & 0x80000000) == 0) {
LABEL_42:
    }
      _Unwind_Resume(a1);
LABEL_41:
    operator delete(a12);
    _Unwind_Resume(a1);
  }
LABEL_40:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0) {
    goto LABEL_42;
  }
  goto LABEL_41;
}

void AudioManager::create(AudioManager *this@<X0>, AudioManager **a2@<X8>)
{
  uint64_t v5 = (AudioManager *)operator new(0x98uLL);
  AudioManager::AudioManager(v5, (const char *)this);
  char v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2105440;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *(void *)long long buf = 0;
  unint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 2);
  if (!v8)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_6:
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_7:
  if (*(void *)buf)
  {
    AudioManager::~AudioManager(*(AudioManager **)buf);
    operator delete(v9);
  }
  if (v5)
  {
    *a2 = v5;
    a2[1] = (AudioManager *)v6;
    return;
  }
  int v10 = GetOsLogContext()[1];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to create Audio Manager!", buf, 2u);
    *a2 = 0;
    a2[1] = 0;
    unint64_t v11 = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    unint64_t v11 = v6;
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1C5A2FD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5A2FD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<AudioManager>::~unique_ptr[abi:ne180100]((AudioManager **)va);
  _Unwind_Resume(a1);
}

void sub_1C5A2FD64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AudioManager::init(AudioManager *this)
{
  return 1;
}

void AudioManager::AudioManager(AudioManager *this, const char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  char v9 = std::string::append(&__dst, ".", 1uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  unint64_t v11 = std::string::append(&v15, "AudioManager", 0xCuLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<std::csub_match> __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    int v13 = __p;
  }
  else {
    int v13 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
LABEL_15:
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 56) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = 0;
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 120) = 0;
}

void sub_1C5A2FF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void AudioManager::~AudioManager(AudioManager *this)
{
  uint64_t v2 = *((void *)this + 4);
  for (uint64_t i = *((void *)this + 5); i != v2; i -= 16)
  {
    size_t v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    std::string::size_type v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 5) = v2;
  uint64_t v6 = *((void *)this + 8);
  for (uint64_t j = *((void *)this + 9); j != v6; j -= 16)
  {
    uint64_t v8 = *(NSObject **)(j - 8);
    if (v8) {
      dispatch_release(v8);
    }
    char v9 = *(const void **)(j - 16);
    if (v9) {
      _Block_release(v9);
    }
  }
  *((void *)this + 9) = v6;
  uint64_t v10 = *((void *)this + 12);
  for (uint64_t k = *((void *)this + 13); k != v10; k -= 16)
  {
    long long v12 = *(NSObject **)(k - 8);
    if (v12) {
      dispatch_release(v12);
    }
    int v13 = *(const void **)(k - 16);
    if (v13) {
      _Block_release(v13);
    }
  }
  *((void *)this + 13) = v10;
  std::vector<std::ssub_match>::size_type v14 = (char *)*((void *)this + 16);
  std::string v15 = (char *)*((void *)this + 17);
  if (v15 == v14)
  {
    *((void *)this + 17) = v14;
    if (!v15) {
      goto LABEL_24;
    }
  }
  else
  {
    do
    {
      uint64_t v20 = *((void *)v15 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      long long v21 = (const void *)*((void *)v15 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v15 -= 16;
    }
    while (v15 != v14);
    std::string v15 = (char *)*((void *)this + 16);
    *((void *)this + 17) = v14;
    if (!v15)
    {
LABEL_24:
      int v16 = (char *)*((void *)this + 12);
      if (!v16) {
        goto LABEL_25;
      }
LABEL_47:
      int v25 = (char *)*((void *)this + 13);
      if (v25 == v16)
      {
        *((void *)this + 13) = v16;
        operator delete(v16);
        int64_t v17 = (char *)*((void *)this + 8);
        if (v17) {
          goto LABEL_56;
        }
      }
      else
      {
        do
        {
          unint64_t v26 = *((void *)v25 - 1);
          if (v26) {
            dispatch_release(v26);
          }
          long long v27 = (const void *)*((void *)v25 - 2);
          if (v27) {
            _Block_release(v27);
          }
          v25 -= 16;
        }
        while (v25 != v16);
        int v28 = (void *)*((void *)this + 12);
        *((void *)this + 13) = v16;
        operator delete(v28);
        int64_t v17 = (char *)*((void *)this + 8);
        if (v17) {
          goto LABEL_56;
        }
      }
LABEL_26:
      long long v18 = (char *)*((void *)this + 4);
      if (!v18) {
        goto LABEL_27;
      }
LABEL_65:
      uint64_t v33 = (char *)*((void *)this + 5);
      if (v33 == v18)
      {
        *((void *)this + 5) = v18;
        operator delete(v18);
        int v19 = (std::__shared_weak_count *)*((void *)this + 2);
        if (!v19) {
          goto LABEL_29;
        }
      }
      else
      {
        do
        {
          uint64_t v34 = *((void *)v33 - 1);
          if (v34) {
            dispatch_release(v34);
          }
          unint64_t v35 = (const void *)*((void *)v33 - 2);
          if (v35) {
            _Block_release(v35);
          }
          v33 -= 16;
        }
        while (v33 != v18);
        int v36 = (void *)*((void *)this + 4);
        *((void *)this + 5) = v18;
        operator delete(v36);
        int v19 = (std::__shared_weak_count *)*((void *)this + 2);
        if (!v19)
        {
LABEL_29:
          JUMPOUT(0x1C8794100);
        }
      }
LABEL_28:
      std::__shared_weak_count::__release_weak(v19);
      goto LABEL_29;
    }
  }
  if (v14 == v15)
  {
    *((void *)this + 17) = v15;
    operator delete(v14);
    int v16 = (char *)*((void *)this + 12);
    if (v16) {
      goto LABEL_47;
    }
  }
  else
  {
    do
    {
      int v22 = *((void *)v14 - 1);
      if (v22) {
        dispatch_release(v22);
      }
      long long v23 = (const void *)*((void *)v14 - 2);
      if (v23) {
        _Block_release(v23);
      }
      v14 -= 16;
    }
    while (v14 != v15);
    long long v24 = (void *)*((void *)this + 16);
    *((void *)this + 17) = v15;
    operator delete(v24);
    int v16 = (char *)*((void *)this + 12);
    if (v16) {
      goto LABEL_47;
    }
  }
LABEL_25:
  int64_t v17 = (char *)*((void *)this + 8);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_56:
  unint64_t v29 = (char *)*((void *)this + 9);
  if (v29 == v17)
  {
    *((void *)this + 9) = v17;
    operator delete(v17);
    long long v18 = (char *)*((void *)this + 4);
    if (v18) {
      goto LABEL_65;
    }
  }
  else
  {
    do
    {
      uint64_t v30 = *((void *)v29 - 1);
      if (v30) {
        dispatch_release(v30);
      }
      unint64_t v31 = (const void *)*((void *)v29 - 2);
      if (v31) {
        _Block_release(v31);
      }
      v29 -= 16;
    }
    while (v29 != v17);
    int v32 = (void *)*((void *)this + 8);
    *((void *)this + 9) = v17;
    operator delete(v32);
    long long v18 = (char *)*((void *)this + 4);
    if (v18) {
      goto LABEL_65;
    }
  }
LABEL_27:
  int v19 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v19) {
    goto LABEL_29;
  }
  goto LABEL_28;
}

uint64_t AudioManager::getAudioOutputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t AudioManager::getAudioInputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

void AudioManager::registerAudioInputCallback(void *a1, uint64_t a2)
{
  std::string::size_type v5 = (void *)a1[5];
  unint64_t v4 = a1[6];
  if ((unint64_t)v5 < v4)
  {
    uint64_t v6 = *(void **)a2;
    if (*(void *)a2) {
      uint64_t v6 = _Block_copy(v6);
    }
    uint64_t v7 = *(NSObject **)(a2 + 8);
    void *v5 = v6;
    v5[1] = v7;
    if (v7) {
      dispatch_retain(v7);
    }
    uint64_t v8 = v5 + 2;
    goto LABEL_35;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = (char *)v5 - v9;
  uint64_t v11 = ((uint64_t)v5 - v9) >> 4;
  if ((unint64_t)(v11 + 1) >> 60) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v4 - v9;
  uint64_t v13 = v12 >> 3;
  if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
    uint64_t v13 = v11 + 1;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14)
  {
    if (v14 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string v15 = (char *)operator new(16 * v14);
    int v16 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  std::string v15 = 0;
  int v16 = *(void **)a2;
  if (*(void *)a2) {
LABEL_18:
  }
    int v16 = _Block_copy(v16);
LABEL_19:
  int64_t v17 = *(NSObject **)(a2 + 8);
  long long v18 = &v15[16 * v11];
  *(void *)long long v18 = v16;
  *((void *)v18 + 1) = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  int v19 = &v15[16 * v14];
  uint64_t v8 = v18 + 16;
  uint64_t v20 = (char *)a1[4];
  long long v21 = (char *)a1[5];
  if (v21 == v20)
  {
    a1[4] = v18;
    a1[5] = v8;
    a1[6] = v19;
  }
  else
  {
    unint64_t v22 = v21 - v20 - 16;
    if (v22 < 0xD0) {
      goto LABEL_23;
    }
    int v28 = &v21[-(v22 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v29 = &v10[(void)v15 - 8 - (v22 & 0xFFFFFFFFFFFFFFF0)] >= v21 || v28 - 8 >= v18;
    BOOL v30 = !v29;
    if (v28 - 16 < &v10[(void)v15 - 8] && &v10[(void)v15 - (v22 & 0xFFFFFFFFFFFFFFF0) - 16] < v21 - 8) {
      goto LABEL_23;
    }
    if (v30) {
      goto LABEL_23;
    }
    uint64_t v32 = (v22 >> 4) + 1;
    uint64_t v33 = 16 * (v32 & 0x1FFFFFFFFFFFFFFELL);
    long long v23 = &v18[-v33];
    uint64_t v34 = &v21[-v33];
    unint64_t v35 = (double *)(v18 - 32);
    int v36 = (const double *)(v21 - 32);
    uint64_t v37 = v32 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v38 = vld2q_f64(v36);
      vst2q_f64(v35, v38);
      *(_OWORD *)int v36 = 0uLL;
      *((_OWORD *)v36 + 1) = 0uLL;
      v36 -= 4;
      v35 -= 4;
      v37 -= 2;
    }
    while (v37);
    long long v18 = v23;
    long long v21 = v34;
    if (v32 != (v32 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      long long v23 = v18;
      do
      {
        long long v24 = *((_OWORD *)v21 - 1);
        v21 -= 16;
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 16;
        *(void *)long long v21 = 0;
        *((void *)v21 + 1) = 0;
      }
      while (v21 != v20);
    }
    long long v21 = (char *)a1[4];
    int v25 = (char *)a1[5];
    a1[4] = v23;
    a1[5] = v8;
    a1[6] = v19;
    while (v25 != v21)
    {
      unint64_t v26 = *((void *)v25 - 1);
      if (v26) {
        dispatch_release(v26);
      }
      long long v27 = (const void *)*((void *)v25 - 2);
      if (v27) {
        _Block_release(v27);
      }
      v25 -= 16;
    }
  }
  if (v21) {
    operator delete(v21);
  }
LABEL_35:
  a1[5] = v8;
}

void *AudioManager::registerAudioOutputCallback(void *a1, void **a2)
{
  unint64_t v4 = (void *)a1[9];
  if ((unint64_t)v4 >= a1[10])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(a1 + 8, (uint64_t)a2);
    a1[9] = result;
  }
  else
  {
    std::string::size_type v5 = *a2;
    if (*a2) {
      std::string::size_type v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[9] = v4 + 2;
  }
  return result;
}

void *AudioManager::registerAudioSpeakerCallback(void *a1, void **a2)
{
  unint64_t v4 = (void *)a1[13];
  if ((unint64_t)v4 >= a1[14])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 12, (uint64_t)a2);
    a1[13] = result;
  }
  else
  {
    std::string::size_type v5 = *a2;
    if (*a2) {
      std::string::size_type v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[13] = v4 + 2;
  }
  return result;
}

void *AudioManager::registerAudioWiredPortCallback(void *a1, void **a2)
{
  unint64_t v4 = (void *)a1[17];
  if ((unint64_t)v4 >= a1[18])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 16, (uint64_t)a2);
    a1[17] = result;
  }
  else
  {
    std::string::size_type v5 = *a2;
    if (*a2) {
      std::string::size_type v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[17] = v4 + 2;
  }
  return result;
}

uint64_t AudioManager::isAudioInputReportSupported(AudioManager *this)
{
  return 0;
}

BOOL AudioManager::isAudioOutputReportSupported(AudioManager *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDCCB0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (capabilities::txpower *)__cxa_guard_acquire(&qword_1EBBDCCB0);
    if (v2)
    {
      _MergedGlobals = capabilities::txpower::supportedControlInput(v2);
      __cxa_guard_release(&qword_1EBBDCCB0);
    }
  }
  return capabilities::txpower::operator&() != 0;
}

void sub_1C5A306D8(_Unwind_Exception *a1)
{
}

uint64_t AudioManager::isAudioSpeakerSupported(AudioManager *this)
{
  if (!v2) {
    return AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported;
  }
  AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported = capabilities::txpower::supportsAudioSpeaker(v2);
  return AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported;
}

void sub_1C5A30758(_Unwind_Exception *a1)
{
}

uint64_t AudioManager::isAudioWiredPortSupported(AudioManager *this)
{
  if (!v2) {
    return AudioManager::isAudioWiredPortSupported(void)::audioJackSupported;
  }
  AudioManager::isAudioWiredPortSupported(void)::audioJackSupported = capabilities::txpower::supportsAudioJackReport(v2);
  return AudioManager::isAudioWiredPortSupported(void)::audioJackSupported;
}

void sub_1C5A307D8(_Unwind_Exception *a1)
{
}

void AudioManager::setAudioState(uint64_t a1, xpc::object *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string((uint64_t *)object, a2);
    unint64_t v26 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
    *(_DWORD *)xpc_object_t xdict = 136315138;
    *(void *)&xdict[4] = v26;
    _os_log_debug_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEBUG, "#D Setting Audio State: %s", xdict, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
  }
  *(void *)xpc_object_t xdict = 0xAAAAAAAAAAAAAAAALL;
  std::string::size_type v5 = (void *)*MEMORY[0x1E4F4C2A8];
  object[0] = a2;
  object[1] = v5;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, xdict);
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E4F4CA28]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  char v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (v7)
  {
    int v8 = 0;
    LOBYTE(v9) = 1;
    if (*(unsigned char *)(a1 + 56) == 1) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  xpc_object_t v10 = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E4F4C8D0]);
  object[0] = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    object[0] = xpc_null_create();
  }
  char v11 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (v11)
  {
    LOBYTE(v9) = 2;
    int v8 = 1;
    if (*(unsigned char *)(a1 + 56) == 2) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  xpc_object_t v20 = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E4F4C680]);
  object[0] = v20;
  if (v20) {
    xpc_retain(v20);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v23 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  int v8 = 0;
  if (v23) {
    int v9 = 3;
  }
  else {
    int v9 = 0;
  }
  if (*(unsigned __int8 *)(a1 + 56) != v9)
  {
LABEL_13:
    *(unsigned char *)(a1 + 56) = v9;
    AudioManager::notifyAudioOutputClients((os_log_t *)a1);
  }
LABEL_14:
  int v12 = *(unsigned __int8 *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)) {
    char v13 = 0;
  }
  else {
    char v13 = v8;
  }
  if (v13)
  {
    LOBYTE(v14) = 1;
    if (v12 == 1) {
      goto LABEL_25;
    }
LABEL_24:
    *(unsigned char *)(a1 + 88) = v14;
    AudioManager::notifyAudioSpeakerClients((NSObject **)a1);
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 88)) {
    int v14 = v8;
  }
  else {
    int v14 = 0;
  }
  if (v12 != v14) {
    goto LABEL_24;
  }
LABEL_25:
  xpc_object_t v58 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  std::string v15 = (void *)*MEMORY[0x1E4F4C230];
  object[0] = a2;
  object[1] = v15;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, &v58);
  xpc_object_t v16 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3D0]);
  object[0] = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    object[0] = xpc_null_create();
  }
  char v17 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (v17)
  {
    int v18 = 1;
  }
  else
  {
    xpc_object_t v19 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3D8]);
    object[0] = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      object[0] = xpc_null_create();
    }
    char v21 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
    if (v21)
    {
      int v18 = 2;
    }
    else
    {
      xpc_object_t v22 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3E0]);
      object[0] = v22;
      if (v22) {
        xpc_retain(v22);
      }
      else {
        object[0] = xpc_null_create();
      }
      char v24 = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(object[0]);
      if (v24)
      {
        int v18 = 3;
      }
      else
      {
        xpc_object_t v25 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3E8]);
        object[0] = v25;
        if (v25) {
          xpc_retain(v25);
        }
        else {
          object[0] = xpc_null_create();
        }
        char v27 = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        if (v27)
        {
          int v18 = 4;
        }
        else
        {
          xpc_object_t v28 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3F0]);
          object[0] = v28;
          if (v28) {
            xpc_retain(v28);
          }
          else {
            object[0] = xpc_null_create();
          }
          char v29 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          if (v29)
          {
            int v18 = 5;
          }
          else
          {
            xpc_object_t v30 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E4F4C3F8]);
            object[0] = v30;
            if (v30) {
              xpc_retain(v30);
            }
            else {
              object[0] = xpc_null_create();
            }
            int v31 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(object[0]);
            if (v31) {
              int v18 = 6;
            }
            else {
              int v18 = 0;
            }
          }
        }
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 24) != v18)
  {
    *(unsigned char *)(a1 + 24) = v18;
    AudioManager::notifyAudioInputClients((os_log_t *)a1);
  }
  xpc_object_t xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v32 = (void *)*MEMORY[0x1E4F4C7A0];
  object[0] = a2;
  object[1] = v32;
  xpc::dict::object_proxy::operator xpc::array((uint64_t)object, &xarray);
  int v33 = *(unsigned __int8 *)(a1 + 120);
  xpc_object_t v34 = xarray;
  if (xarray)
  {
    xpc_retain(xarray);
LABEL_74:
    xpc_retain(v34);
    unint64_t v35 = v34;
    goto LABEL_75;
  }
  xpc_object_t v34 = xpc_null_create();
  if (v34) {
    goto LABEL_74;
  }
  xpc_object_t v34 = xpc_null_create();
  unint64_t v35 = 0;
LABEL_75:
  xpc_release(v35);
  int v36 = v33 != 0;
  xpc_object_t v37 = xarray;
  if (xarray) {
    xpc_retain(xarray);
  }
  else {
    xpc_object_t v37 = xpc_null_create();
  }
  if (MEMORY[0x1C8795EB0](xarray) == MEMORY[0x1E4F14568])
  {
    size_t count = xpc_array_get_count(xarray);
    if (v37) {
      goto LABEL_80;
    }
LABEL_82:
    xpc_object_t v55 = xpc_null_create();
    goto LABEL_83;
  }
  size_t count = 0;
  if (!v37) {
    goto LABEL_82;
  }
LABEL_80:
  xpc_retain(v37);
  xpc_object_t v55 = v37;
LABEL_83:
  xpc_release(v37);
  uint64_t v54 = (AudioManager *)a1;
  if (count || v34 != v55)
  {
    size_t v39 = 0;
    int v40 = (const char *)*MEMORY[0x1E4F4C400];
    size_t v41 = count - 1;
    while (1)
    {
      while (1)
      {
        memset(object, 170, sizeof(object));
        xpc_object_t v42 = xpc_array_get_value(v34, v39);
        xpc_object_t v56 = v42;
        if (v42) {
          xpc_retain(v42);
        }
        else {
          xpc_object_t v56 = xpc_null_create();
        }
        xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)&v56, (const object *)"", v43);
        xpc_release(v56);
        size_t v44 = strlen(v40);
        xpc_object_t v45 = (xpc_object_t)v44;
        char v46 = HIBYTE(object[2]);
        if (SHIBYTE(object[2]) < 0)
        {
          if (v44 == -1) {
LABEL_110:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          unint64_t v47 = (xpc_object_t *)object[0];
          xpc_object_t v48 = object[1];
        }
        else
        {
          if (v44 == -1) {
            goto LABEL_110;
          }
          unint64_t v47 = object;
          xpc_object_t v48 = (xpc_object_t)HIBYTE(object[2]);
        }
        size_t v49 = (size_t)(v48 >= v45 ? v45 : v48);
        BOOL v50 = memcmp(v47, v40, v49) == 0;
        BOOL v51 = v48 == v45 && v50;
        if ((v46 & 0x80) == 0) {
          break;
        }
        operator delete(object[0]);
        v36 |= v51;
        size_t v52 = v39 + 1;
        BOOL v53 = v41 == v39++;
        if (v53) {
          goto LABEL_105;
        }
      }
      v36 |= v51;
      size_t v52 = v39 + 1;
      BOOL v53 = v41 == v39++;
      if (v53)
      {
LABEL_105:
        size_t v39 = v52;
        if (v34 == v55) {
          break;
        }
      }
    }
  }
  xpc_release(v55);
  xpc_release(v34);
  if (*((unsigned char *)v54 + 120) != (v36 & 1))
  {
    *((unsigned char *)v54 + 120) = v36 & 1;
    AudioManager::notifyAudioWiredPortClients((NSObject **)v54);
  }
  xpc_release(xarray);
  xpc_release(v58);
  xpc_release(*(xpc_object_t *)xdict);
}

void sub_1C5A30ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, xpc_object_t a12, xpc_object_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, xpc_object_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AudioManager::notifyAudioOutputClients(os_log_t *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = *((char *)this + 56);
    if (v3 > 3) {
      unint64_t v4 = "Unknown Audio Output";
    }
    else {
      unint64_t v4 = off_1E651B210[v3];
    }
    LODWORD(v13) = 136315138;
    *(void *)((char *)&v13 + 4) = v4;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Audio Output: %s", (uint8_t *)&v13, 0xCu);
  }
  os_log_t v5 = this[8];
  os_log_t v6 = this[9];
  if (v5 != v6)
  {
    while (!v5->isa)
    {
      char v7 = 0;
      isa = v5[1].isa;
      if (isa) {
        goto LABEL_11;
      }
LABEL_12:
      char v9 = *((unsigned char *)this + 56);
      if (!v7)
      {
        char v11 = 0;
        *(void *)&long long v13 = MEMORY[0x1E4F143A8];
        *((void *)&v13 + 1) = 3321888768;
        int v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke;
        std::string v15 = &__block_descriptor_41_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE_e5_v8__0l;
LABEL_18:
        int v12 = 0;
        goto LABEL_19;
      }
      xpc_object_t v10 = _Block_copy(v7);
      char v11 = v10;
      *(void *)&long long v13 = MEMORY[0x1E4F143A8];
      *((void *)&v13 + 1) = 3321888768;
      int v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke;
      std::string v15 = &__block_descriptor_41_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE_e5_v8__0l;
      if (!v10) {
        goto LABEL_18;
      }
      int v12 = _Block_copy(v10);
LABEL_19:
      aBlocuint64_t k = v12;
      char v17 = v9;
      dispatch_async(isa, &v13);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v11) {
        _Block_release(v11);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v7) {
        _Block_release(v7);
      }
      v5 += 2;
      if (v5 == v6) {
        return;
      }
    }
    char v7 = _Block_copy(v5->isa);
    isa = v5[1].isa;
    if (!isa) {
      goto LABEL_12;
    }
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1C5A312D4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AudioManager::notifyAudioSpeakerClients(NSObject **this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 88)) {
      unint64_t v3 = "YES";
    }
    else {
      unint64_t v3 = "NO";
    }
    LODWORD(v12) = 136315138;
    *(void *)((char *)&v12 + 4) = v3;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Speaker State: %s", (uint8_t *)&v12, 0xCu);
  }
  unint64_t v4 = this[12];
  os_log_t v5 = this[13];
  if (v4 != v5)
  {
    while (!v4->isa)
    {
      os_log_t v6 = 0;
      isa = v4[1].isa;
      if (isa) {
        goto LABEL_11;
      }
LABEL_12:
      char v8 = *((unsigned char *)this + 88);
      if (!v6)
      {
        xpc_object_t v10 = 0;
        *(void *)&long long v12 = MEMORY[0x1E4F143A8];
        *((void *)&v12 + 1) = 3321888768;
        long long v13 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        int v14 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
LABEL_18:
        char v11 = 0;
        goto LABEL_19;
      }
      char v9 = _Block_copy(v6);
      xpc_object_t v10 = v9;
      *(void *)&long long v12 = MEMORY[0x1E4F143A8];
      *((void *)&v12 + 1) = 3321888768;
      long long v13 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
      int v14 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      if (!v9) {
        goto LABEL_18;
      }
      char v11 = _Block_copy(v9);
LABEL_19:
      aBlocuint64_t k = v11;
      char v16 = v8;
      dispatch_async(isa, &v12);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v10) {
        _Block_release(v10);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v6) {
        _Block_release(v6);
      }
      v4 += 2;
      if (v4 == v5) {
        return;
      }
    }
    os_log_t v6 = _Block_copy(v4->isa);
    isa = v4[1].isa;
    if (!isa) {
      goto LABEL_12;
    }
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1C5A31518(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AudioManager::notifyAudioInputClients(os_log_t *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = *((char *)this + 24);
    if (v3 > 6) {
      unint64_t v4 = "Unknown Audio Input";
    }
    else {
      unint64_t v4 = off_1E651B230[v3];
    }
    LODWORD(v13) = 136315138;
    *(void *)((char *)&v13 + 4) = v4;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Audio Input: %s", (uint8_t *)&v13, 0xCu);
  }
  os_log_t v5 = this[4];
  os_log_t v6 = this[5];
  if (v5 != v6)
  {
    while (!v5->isa)
    {
      char v7 = 0;
      isa = v5[1].isa;
      if (isa) {
        goto LABEL_11;
      }
LABEL_12:
      char v9 = *((unsigned char *)this + 24);
      if (!v7)
      {
        char v11 = 0;
        *(void *)&long long v13 = MEMORY[0x1E4F143A8];
        *((void *)&v13 + 1) = 3321888768;
        int v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke;
        std::string v15 = &__block_descriptor_41_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE_e5_v8__0l;
LABEL_18:
        long long v12 = 0;
        goto LABEL_19;
      }
      xpc_object_t v10 = _Block_copy(v7);
      char v11 = v10;
      *(void *)&long long v13 = MEMORY[0x1E4F143A8];
      *((void *)&v13 + 1) = 3321888768;
      int v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke;
      std::string v15 = &__block_descriptor_41_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE_e5_v8__0l;
      if (!v10) {
        goto LABEL_18;
      }
      long long v12 = _Block_copy(v10);
LABEL_19:
      aBlocuint64_t k = v12;
      char v17 = v9;
      dispatch_async(isa, &v13);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v11) {
        _Block_release(v11);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v7) {
        _Block_release(v7);
      }
      v5 += 2;
      if (v5 == v6) {
        return;
      }
    }
    char v7 = _Block_copy(v5->isa);
    isa = v5[1].isa;
    if (!isa) {
      goto LABEL_12;
    }
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1C5A31764(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AudioManager::notifyAudioWiredPortClients(NSObject **this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 120)) {
      unint64_t v3 = "YES";
    }
    else {
      unint64_t v3 = "NO";
    }
    LODWORD(v12) = 136315138;
    *(void *)((char *)&v12 + 4) = v3;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Wired State: %s", (uint8_t *)&v12, 0xCu);
  }
  unint64_t v4 = this[16];
  os_log_t v5 = this[17];
  if (v4 != v5)
  {
    while (!v4->isa)
    {
      os_log_t v6 = 0;
      isa = v4[1].isa;
      if (isa) {
        goto LABEL_11;
      }
LABEL_12:
      char v8 = *((unsigned char *)this + 120);
      if (!v6)
      {
        xpc_object_t v10 = 0;
        *(void *)&long long v12 = MEMORY[0x1E4F143A8];
        *((void *)&v12 + 1) = 3321888768;
        long long v13 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        int v14 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
LABEL_18:
        char v11 = 0;
        goto LABEL_19;
      }
      char v9 = _Block_copy(v6);
      xpc_object_t v10 = v9;
      *(void *)&long long v12 = MEMORY[0x1E4F143A8];
      *((void *)&v12 + 1) = 3321888768;
      long long v13 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
      int v14 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      if (!v9) {
        goto LABEL_18;
      }
      char v11 = _Block_copy(v9);
LABEL_19:
      aBlocuint64_t k = v11;
      char v16 = v8;
      dispatch_async(isa, &v12);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v10) {
        _Block_release(v10);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v6) {
        _Block_release(v6);
      }
      v4 += 2;
      if (v4 == v5) {
        return;
      }
    }
    os_log_t v6 = _Block_copy(v4->isa);
    isa = v4[1].isa;
    if (!isa) {
      goto LABEL_12;
    }
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1C5A319A8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AudioManager::getCurrentAudioOutputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 56);
}

const char *AudioManager::toString(unsigned int a1)
{
  if (a1 > 3) {
    return "Unknown Audio Output";
  }
  else {
    return off_1E651B210[(char)a1];
  }
}

{
  if (a1 > 6) {
    return "Unknown Audio Input";
  }
  else {
    return off_1E651B230[(char)a1];
  }
}

void AudioManager::notifyClients(os_log_t *this)
{
  AudioManager::notifyAudioInputClients(this);
  AudioManager::notifyAudioOutputClients(this);
  AudioManager::notifyAudioSpeakerClients(this);

  AudioManager::notifyAudioWiredPortClients(this);
}

void *std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = (v2 >> 4) + 1;
  if (v3 >> 60) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (!v7)
  {
    char v8 = 0;
    char v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  char v8 = (char *)operator new(16 * v7);
  char v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    char v9 = _Block_copy(v9);
LABEL_13:
  xpc_object_t v10 = *(NSObject **)(a2 + 8);
  char v11 = &v8[16 * (v2 >> 4)];
  *(void *)char v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  long long v12 = &v8[16 * v7];
  long long v13 = v11 + 16;
  int v14 = (char *)*a1;
  std::string v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    int v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    uint64_t v17 = &v11[-v28];
    char v29 = &v15[-v28];
    xpc_object_t v30 = (double *)(v11 - 32);
    int v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)int v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    char v11 = v17;
    std::string v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      uint64_t v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)std::string v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    std::string v15 = (char *)*a1;
    xpc_object_t v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      xpc_object_t v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      char v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void *std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = (v3 >> 4) + 1;
  if (v4 >> 60) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (!v7)
  {
    char v8 = 0;
    char v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  char v8 = (char *)operator new(16 * v7);
  char v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    char v9 = _Block_copy(v9);
LABEL_13:
  xpc_object_t v10 = *(NSObject **)(a2 + 8);
  char v11 = &v8[16 * (v3 >> 4)];
  *(void *)char v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  long long v12 = &v8[16 * v7];
  long long v13 = v11 + 16;
  int v14 = (char *)*a1;
  std::string v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    int v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v3 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v3 - 8] && &v8[v3 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    uint64_t v17 = &v11[-v28];
    char v29 = &v15[-v28];
    xpc_object_t v30 = (double *)(v11 - 32);
    int v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)int v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    char v11 = v17;
    std::string v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      uint64_t v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)std::string v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    std::string v15 = (char *)*a1;
    xpc_object_t v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      xpc_object_t v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      char v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

AudioManager **std::unique_ptr<AudioManager>::~unique_ptr[abi:ne180100](AudioManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AudioManager::~AudioManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::__on_zero_shared(uint64_t a1)
{
  unint64_t v1 = *(AudioManager **)(a1 + 24);
  if (v1)
  {
    AudioManager::~AudioManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC5704) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC5704 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC5704)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC5704 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE(uint64_t a1)
{
  unint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE(uint64_t a1)
{
  unint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void TransportModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = operator new(0xE8uLL);
  unint64_t v7 = v6;
  uint64_t v8 = *a1;
  char v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v27 = v8;
  uint64_t v28 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a2;
  char v11 = (std::__shared_weak_count *)a2[1];
  v26[0] = v10;
  v26[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TransportModule::TransportModule((uint64_t)v6, &v27, v26);
  *a3 = v7;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = &v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2105930;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  a3[1] = v12;
  int v14 = (std::__shared_weak_count *)*((void *)v7 + 16);
  if (!v14)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 15) = v7;
    *((void *)v7 + 16) = v12;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
LABEL_11:
    std::string v15 = (void *)*a3;
    if (!*(void *)(*a3 + 104)) {
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  if (v14->__shared_owners_ != -1) {
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v7 + 15) = v7;
  *((void *)v7 + 16) = v12;
  std::__shared_weak_count::__release_weak(v14);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_11;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  std::string v15 = (void *)*a3;
  if (!*(void *)(*a3 + 104)) {
    goto LABEL_22;
  }
LABEL_12:
  unint64_t v16 = (std::__shared_weak_count *)v15[16];
  if (!v16 || (uint64_t v17 = v15[15], (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v19 = v18;
  blocuint64_t k = v17;
  uint64_t v36 = (uint64_t)v18;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v15 + 7));
  uint64_t v20 = v17 + 48;
  if (!v17) {
    uint64_t v20 = 0;
  }
  uint64_t v29 = v20;
  uint64_t v30 = (uint64_t)v19;
  blocuint64_t k = 0;
  uint64_t v36 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  char v21 = (std::__shared_weak_count *)v30;
  if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_object_t v22 = (std::__shared_weak_count *)v36;
  if (v36 && !atomic_fetch_add((atomic_ullong *volatile)(v36 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_22:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v23 = *a3;
  uint64_t v24 = *a3 + 120;
  uint64_t v29 = MEMORY[0x1E4F143A8];
  uint64_t v30 = 0x40000000;
  int v31 = ___ZN15TransportModule4initEv_block_invoke;
  uint64_t v32 = &__block_descriptor_tmp_3;
  uint64_t v33 = v23;
  xpc_object_t v34 = &v29;
  blocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v36 = 0x40000000;
  xpc_object_t v37 = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  float64x2x2_t v38 = &__block_descriptor_tmp_89;
  uint64_t v39 = v24;
  int v40 = &v34;
  BOOL v25 = *(NSObject **)(v23 + 136);
  if (*(void *)(v23 + 144)) {
    dispatch_async_and_wait(v25, &block);
  }
  else {
    dispatch_sync(v25, &block);
  }
}

void sub_1C5A32428()
{
}

void sub_1C5A32474()
{
}

void sub_1C5A32484()
{
}

void TransportModule::init(TransportModule *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15TransportModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_3;
  v3[4] = this;
  unint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_89;
  void block[4] = (char *)this + 120;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 136;
  unint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t TransportModule::TransportModule(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F2105520;
  *(void *)(a1 + 48) = &unk_1F2105590;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v27, "com.apple.telephony.abm", "ipc.mod");
  GetABMLogServer(&v25);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v8 = dispatch_queue_create_with_target_V2("ipc.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v8, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v8);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v8;
  if (v8)
  {
    dispatch_retain(v8);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v8);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F21058F0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v29);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  char v9 = v26;
  *(void *)(a1 + 104) = v25;
  *(void *)(a1 + 112) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v28);
  *(void *)(a1 + 48) = &unk_1F2105980;
  uint64_t v10 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v27);
  *(void *)a1 = &unk_1F2105520;
  *(void *)(a1 + 48) = &unk_1F2105590;
  *(_DWORD *)(a1 + 152) = 0;
  xpc_object_t v11 = xpc_null_create();
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = *a3;
  *(void *)(a1 + 160) = v11;
  uint64_t v12 = a3[1];
  *(void *)(a1 + 224) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v13 = xpc_null_create();
  int v14 = v13;
  *(_DWORD *)(a1 + 152) = 1;
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v15 = v14;
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
  }
  unint64_t v16 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v15;
  xpc_release(v16);
  xpc_release(v14);
  GetABMLogServer(&v23);
  uint64_t v29 = v23;
  uint64_t v30 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::TransportService::State::create((capabilities::abs *)&v29, (dispatch_object_t *)&v28);
  uint64_t v17 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = v28;
  long long v28 = 0uLL;
  xpc_object_t v19 = *(std::__shared_weak_count **)(a1 + 192);
  *(_OWORD *)(a1 + 184) = v18;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  char v21 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  return a1;
}

void sub_1C5A32A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  unint64_t v26 = a18;
  if (a18)
  {
    if (!atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v21);
  WakeReason::~WakeReason(v20);
  ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v19);
  Service::~Service(v18);
  _Unwind_Resume(a1);
}

void sub_1C5A32AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void sub_1C5A32B34(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void WakeReason::~WakeReason(xpc_object_t *this)
{
  this[1] = 0;
}

void *ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F21058F0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F21058F0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void TransportModule::~TransportModule(TransportModule *this)
{
  *(void *)this = &unk_1F2105520;
  *((void *)this + 6) = &unk_1F2105590;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v14, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  xpc_release(*((xpc_object_t *)this + 20));
  *((void *)this + 20) = 0;
  *((void *)this + 6) = &unk_1F21058F0;
  MEMORY[0x1C87940C0]((char *)this + 56);
  unint64_t v7 = *((void *)this + 18);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *((void *)this + 17);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v10 = *((void *)this + 3);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 4);
    uint64_t v12 = (void *)*((void *)this + 3);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      uint64_t v12 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v10;
    operator delete(v12);
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
}

{
  void *v1;
  uint64_t vars8;

  TransportModule::~TransportModule(this);

  operator delete(v1);
}

void non-virtual thunk to'TransportModule::~TransportModule(TransportModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  TransportModule::~TransportModule((TransportModule *)((char *)this - 48));

  operator delete(v1);
}

const char *TransportModule::getName(TransportModule *this)
{
  return "ipc.mod";
}

void ___ZN15TransportModule4initEv_block_invoke(uint64_t a1)
{
}

void TransportModule::configureWakeEventPktDelay_sync(TransportModule *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v11 = -1431655766;
  size_t v9 = 4;
  if (sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", &v11, &v9, 0, 0))
  {
    uint64_t v2 = *((void *)this + 11);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v3 = __error();
    unint64_t v4 = strerror(*v3);
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v13 = v4;
    uint64_t v5 = "Failed to get current sysctl value, error: (%s)";
LABEL_7:
    _os_log_error_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_ERROR, v5, buf, 0xCu);
    return;
  }
  int v10 = v11 | 0x8000;
  int v6 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", 0, 0, &v10, 4uLL);
  uint64_t v2 = *((void *)this + 11);
  if (v6)
  {
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      return;
    }
    unint64_t v7 = __error();
    uint64_t v8 = strerror(*v7);
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v13 = v8;
    uint64_t v5 = "Failed to configure in-band wake packet event, error (%s)";
    goto LABEL_7;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Successfully configured in-band wake packet event", buf, 2u);
  }
}

unsigned char *TransportModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  *uint64_t v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void TransportModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  _DWORD v7[2] = ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v7[3] = &__block_descriptor_tmp_3_0;
  uint64_t v5 = *a3;
  int v6 = (uint64_t *)(a1 + 120);
  v7[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v9 = a2;
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(v6, (uint64_t)v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[21];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    (*(void (**)(void))(*(void *)v1[21] + 56))(v1[21]);
  }
  uint64_t v3 = (std::__shared_weak_count *)v1[22];
  v1[21] = 0;
  v1[22] = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    unint64_t v4 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v4) {
      return;
    }
  }
  else
  {
    unint64_t v4 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v4) {
      return;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::shared_ptr<TransportService>::reset[abi:ne180100](void *a1)
{
  unint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void TransportModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  void v11[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_29;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  unint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (int v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = a1;
  char v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  void v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  int v6 = abm::kCommandNetworkInterfaceControl[0];
  size_t v7 = strlen(abm::kCommandNetworkInterfaceControl[0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v37 = v8;
    unint64_t v38 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v38) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_6_4;
  void aBlock[4] = v1;
  void aBlock[5] = v3;
  xpc_object_t v34 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  unint64_t v35 = v12;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v35);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v13 = (const void *)*MEMORY[0x1E4F4CEE0];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CEE0]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    unint64_t v16 = (void **)operator new(v17 + 1);
    size_t v37 = v15;
    unint64_t v38 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v38) = v14;
  unint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1174405120;
  v30[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  v30[3] = &__block_descriptor_tmp_16_1;
  void v30[4] = v1;
  v30[5] = v3;
  int v31 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v19 = _Block_copy(v30);
  uint64_t v32 = v19;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v32);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F4CED8];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4CED8]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v23 = (void **)operator new(v24 + 1);
    size_t v37 = v22;
    unint64_t v38 = v25 | 0x8000000000000000;
    std::string __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v38) = v21;
  uint64_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 1174405120;
  void v27[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_17;
  uint64_t v27[3] = &__block_descriptor_tmp_26;
  v27[4] = v1;
  v27[5] = v3;
  long long v28 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v26 = _Block_copy(v27);
  uint64_t v29 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v29);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5A338C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (v33) {
    _Block_release(v33);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v34 - 97) & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v36 = a24;
      if (!a24)
      {
LABEL_10:
        if (a32)
        {
          std::__shared_weak_count::__release_weak(a32);
          std::__shared_weak_count::__release_weak(v32);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v36);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v34 - 97) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v34 - 120));
  uint64_t v36 = a24;
  if (!a24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void **a2, void **a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      char v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_4_2;
      uint64_t v10 = *a2;
      void v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        uint64_t v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        uint64_t v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlocuint64_t k = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      uint64_t v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    v15[0] = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    v15[0] = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  v15[0] = v5;
LABEL_9:
  xpc_release(v4);
  unsigned int v14 = -534716414;
  memset(v13, 170, sizeof(v13));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C088]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&v15[1], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  if (SHIBYTE(v13[2]) >= 0) {
    size_t v7 = HIBYTE(v13[2]);
  }
  else {
    size_t v7 = (size_t)v13[1];
  }
  if (v7 != strlen(abm::kActionConfigureDataThrottling)) {
    goto LABEL_26;
  }
  size_t v8 = SHIBYTE(v13[2]) >= 0 ? v13 : (void **)v13[0];
  if (memcmp(v8, abm::kActionConfigureDataThrottling, v7)) {
    goto LABEL_26;
  }
  xpc_object_t v9 = *(xpc_object_t *)(a1 + 40);
  xpc_object_t v11 = v9;
  if (!v9)
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v11 = v9;
    xpc_object_t v10 = v15[0];
    if (v15[0]) {
      goto LABEL_22;
    }
LABEL_24:
    xpc_object_t v10 = xpc_null_create();
    goto LABEL_25;
  }
  xpc_retain(v9);
  xpc_object_t v10 = v15[0];
  if (!v15[0]) {
    goto LABEL_24;
  }
LABEL_22:
  xpc_retain(v10);
LABEL_25:
  TransportModule::configureDataThrottling_sync(v2, &v11);
  unsigned int v14 = 0;
  xpc_release(v10);
  xpc_release(v9);
  xpc_object_t v11 = 0;
LABEL_26:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v14, v15);
  if (SHIBYTE(v13[2]) < 0) {
    operator delete(v13[0]);
  }
  xpc_release(v15[0]);
}

void sub_1C5A33D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(v25);
  xpc_release(v24);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    int v6 = a1;
  }
  else {
    int v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

uint64_t TransportModule::configureDataThrottling_sync(uint64_t a1, xpc_object_t *a2)
{
  int v4 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object[0]) = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Configure data throttling", (uint8_t *)object, 2u);
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C0E0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  unsigned int v6 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C0F8]);
  object[0] = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    object[0] = xpc_null_create();
  }
  uint64_t v8 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  xpc_object_t v9 = *(uint64_t **)(a1 + 184);
  if (v9)
  {
    object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
    object[1] = (xpc_object_t)0x40000000;
    xpc_object_t object[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    xpc_object_t object[3] = &__block_descriptor_tmp_59;
    object[4] = v9;
    xpc_object_t object[5] = (xpc_object_t)(v6 | (unint64_t)(v8 << 32));
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(v9 + 9, (uint64_t)object);
  }
  return 0;
}

void sub_1C5A34020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7(void *a1, void **a2, void **a3)
{
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8;
      v12[3] = &__block_descriptor_tmp_13_2;
      xpc_object_t v10 = *a2;
      void v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        xpc_object_t v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        xpc_object_t v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlocuint64_t k = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      xpc_object_t v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8(uint64_t a1)
{
  v18[1] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v3)
  {
    xpc_object_t object = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t object = v4;
    if (!v4)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v4) != v5)
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_8:
    xpc_object_t object = v6;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
  unsigned int v16 = -534716416;
  if (MEMORY[0x1C8795EB0](*(void *)(a1 + 40)) == v5
    && (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4CAB0],
        xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4CAB0])))
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), v9);
    v18[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      v18[0] = xpc_null_create();
    }
    int v11 = xpc::dyn_cast_or_default((xpc *)v18, 0);
    xpc_release(v18[0]);
    uint64_t v12 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v18[0]) = 67109120;
      HIDWORD(v18[0]) = v11;
      _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I Transport bypass enable (%u)", (uint8_t *)v18, 8u);
    }
    uint64_t v13 = *(void *)(v2 + 168);
    if (v13)
    {
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)v13 + 72))(v13, v11 != 0)) {
        unsigned int v16 = 0;
      }
    }
    else if (MEMORY[0x1C8795EB0](object) == v5)
    {
      xpc_object_t v14 = xpc_string_create("TransportService is not ready!");
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4C240], v14);
      xpc_object_t v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
  }
  else
  {
    if (MEMORY[0x1C8795EB0](object) == v5)
    {
      xpc_object_t v7 = xpc_string_create("Invalid key!");
      if (!v7) {
        xpc_object_t v7 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4C240], v7);
      xpc_object_t v8 = xpc_null_create();
      xpc_release(v7);
      xpc_release(v8);
    }
    unsigned int v16 = -534716414;
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v16, &object);
  xpc_release(object);
}

void sub_1C5A344A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

xpc_object_t xpc::dict::object_proxy::operator=@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_17(void *a1, uint64_t a2, void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        void v10[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_18;
        v10[3] = &__block_descriptor_tmp_23_0;
        v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        aBlocuint64_t k = v9;
        ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    xpc_object_t xdict = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t xdict = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 152))
  {
    case 0:
      xpc_object_t v6 = xpc_string_create("Wake data is not supported on this device.");
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v6);
      xpc_object_t v7 = xpc_null_create();
      xpc_release(v6);
      xpc_release(v7);
      LODWORD(object) = -534716412;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 1:
      xpc_object_t v13 = xpc_string_create("Device has not entered sleep state after bootup. So, there is no wake data yet.");
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      LODWORD(object) = -534716409;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 2:
      xpc_object_t v8 = xpc_string_create("Requested for wake data from baseband. Please try again.");
      if (!v8) {
        xpc_object_t v8 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v8);
      xpc_object_t v9 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v9);
      LODWORD(object) = -534716411;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 3:
      xpc_object_t v10 = *(xpc_object_t *)(v2 + 160);
      if (v10) {
        xpc_retain(*(xpc_object_t *)(v2 + 160));
      }
      else {
        xpc_object_t v10 = xpc_null_create();
      }
      uint64_t v15 = *(void *)(a1 + 40);
      xpc_object_t object = v10;
      xpc_object_t v16 = xpc_null_create();
      (*(void (**)(uint64_t, void, xpc_object_t *))(v15 + 16))(v15, 0, &object);
      xpc_release(object);
      xpc_release(v16);
      break;
    default:
      xpc_object_t v11 = xpc_string_create("Request for wake data from baseband returned error.");
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      LODWORD(object) = -534716416;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
  }
  xpc_release(xdict);
}

void sub_1C5A349B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  xpc_release(a9);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  xpc_object_t v5 = *a3;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1C5A34AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t result = *(void **)(a2 + 40);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void TransportModule::claimSystemWake_sync(TransportModule *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 38) != 3) {
    return;
  }
  xpc_object_t v2 = (xpc_object_t)*((void *)this + 20);
  if (v2) {
    xpc_retain(*((xpc_object_t *)this + 20));
  }
  else {
    xpc_object_t v2 = xpc_null_create();
  }
  xpc_object_t value = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x1E4F4C568]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)&object, v4);
  xpc_object_t v5 = *(const void **)cf;
  if (!*(void *)cf || (CFTypeID v6 = CFGetTypeID(*(CFTypeRef *)cf), v6 != CFStringGetTypeID()))
  {
    xpc_object_t v5 = 0;
    xpc_object_t v7 = *(const void **)cf;
    if (!*(void *)cf) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CFRetain(v5);
  xpc_object_t v7 = *(const void **)cf;
  if (*(void *)cf) {
LABEL_13:
  }
    CFRelease(v7);
LABEL_14:
  xpc_release(object);
  xpc_object_t v8 = (const __CFString **)*MEMORY[0x1E4F4C560];
  xpc_object_t v9 = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x1E4F4C560]);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)&object, v10);
  xpc_object_t v11 = *(const void **)cf;
  if (*(void *)cf)
  {
    CFTypeID v12 = CFGetTypeID(*(CFTypeRef *)cf);
    if (v12 == CFDataGetTypeID())
    {
      CFRetain(v11);
      xpc_object_t v13 = *(const void **)cf;
      if (!*(void *)cf) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  xpc_object_t v11 = 0;
  xpc_object_t v13 = *(const void **)cf;
  if (*(void *)cf) {
LABEL_22:
  }
    CFRelease(v13);
LABEL_23:
  xpc_release(object);
  uint64_t v14 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)CFTypeRef cf = 0;
  ctu::cf::convert_copy((ctu::cf *)cf, v8, (const char *)0x8000100, v14, v16);
  uint64_t v17 = *(const void **)cf;
  xpc_object_t object = *(xpc_object_t *)cf;
  *(void *)CFTypeRef cf = v11;
  if (v11)
  {
    CFRetain(v11);
    if (v17) {
      CFDictionaryAddValue(Mutable, v17, v11);
    }
    CFRelease(v11);
  }
  if (v17) {
    CFRelease(v17);
  }
  IOPMClaimSystemWakeEvent();
  uint64_t v18 = *((void *)this + 11);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFTypeRef cf = 138412802;
    *(void *)&cf[4] = @"com.apple.CommCenter";
    __int16 v21 = 2112;
    size_t v22 = v5;
    __int16 v23 = 2112;
    uint64_t v24 = Mutable;
    _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I \n--- IOPM System Wake ---\nIdentity: %@\nReason: %@\nDetails: %@---", cf, 0x20u);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v5) {
    CFRelease(v5);
  }
  xpc_release(v2);
}

void sub_1C5A34E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  xpc_object_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void TransportModule::submitMetric_sync(TransportModule *this, xpc_object_t *a2)
{
  uint64_t v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Submitting Wake Reason Info to AWD", buf, 2u);
  }
  uint64_t v5 = MEMORY[0x1C8795EB0](*a2);
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v5 == MEMORY[0x1E4F14590])
  {
    xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v8) == v6)
      {
        xpc_retain(v8);
        xpc_object_t v9 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
    }
    xpc_release(v8);
    xpc_object_t v90 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v11 = v10;
    if (v10)
    {
      xpc_object_t v90 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v90 = v11;
      if (!v11)
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
        goto LABEL_19;
      }
    }
    if (MEMORY[0x1C8795EB0](v11) == v6)
    {
      xpc_retain(v11);
      goto LABEL_20;
    }
    xpc_object_t v12 = xpc_null_create();
LABEL_19:
    xpc_object_t v90 = v12;
LABEL_20:
    xpc_release(v11);
    size_t v13 = *MEMORY[0x1E4F4C5B0];
    xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C5B0]);
    BOOL v15 = value != 0;
    if (value)
    {
      *(void *)long long buf = a2;
      size_t v67 = v13;
      uint64_t v16 = *MEMORY[0x1E4F4D100];
      long long v87 = &v90;
      uint64_t v88 = v16;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v89);
      xpc_release(v89);
      xpc_object_t v89 = 0;
    }
    size_t v17 = *MEMORY[0x1E4F4CF80];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CF80]))
    {
      *(void *)long long buf = a2;
      size_t v67 = v17;
      uint64_t v18 = *MEMORY[0x1E4F4CFE8];
      long long v87 = &v90;
      uint64_t v88 = v18;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v86);
      xpc_release(v86);
      xpc_object_t v86 = 0;
      BOOL v15 = 1;
    }
    size_t v19 = *MEMORY[0x1E4F4C408];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C408]))
    {
      *(void *)long long buf = a2;
      size_t v67 = v19;
      uint64_t v20 = *MEMORY[0x1E4F4D1B8];
      long long v87 = &v90;
      uint64_t v88 = v20;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v85);
      xpc_release(v85);
      xpc_object_t v85 = 0;
      BOOL v15 = 1;
    }
    size_t v21 = *MEMORY[0x1E4F4C910];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C910]))
    {
      *(void *)long long buf = a2;
      size_t v67 = v21;
      uint64_t v22 = *MEMORY[0x1E4F4D090];
      long long v87 = &v90;
      uint64_t v88 = v22;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v84);
      xpc_release(v84);
      xpc_object_t v84 = 0;
      BOOL v15 = 1;
    }
    size_t v23 = *MEMORY[0x1E4F4C568];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C568]))
    {
      *(void *)long long buf = a2;
      size_t v67 = v23;
      uint64_t v24 = *MEMORY[0x1E4F4CF10];
      long long v87 = &v90;
      uint64_t v88 = v24;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v83);
      xpc_release(v83);
      xpc_object_t v83 = 0;
      BOOL v15 = 1;
    }
    uint64_t v25 = (const char *)*MEMORY[0x1E4F4C918];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C918]))
    {
      *(void *)long long buf = a2;
      size_t v67 = (size_t)v25;
      uint64_t v26 = *MEMORY[0x1E4F4D098];
      long long v87 = &v90;
      uint64_t v88 = v26;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v82);
      xpc_release(v82);
      xpc_object_t v82 = 0;
      size_t v27 = *MEMORY[0x1E4F4CC78];
      if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CC78]))
      {
        xpc_object_t v81 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        *(void *)long long buf = a2;
        size_t v67 = v27;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &v81);
        if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E4F4C6F8]))
        {
          size_t v28 = *MEMORY[0x1E4F4CC80];
          *(void *)long long buf = &v81;
          size_t v67 = v28;
          uint64_t v29 = *MEMORY[0x1E4F4CFE0];
          long long v87 = &v90;
          uint64_t v88 = v29;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &object);
          xpc_release(object);
          xpc_object_t object = 0;
          size_t v30 = *MEMORY[0x1E4F4CB60];
          *(void *)long long buf = &v81;
          size_t v67 = v30;
          uint64_t v31 = *MEMORY[0x1E4F4CF58];
          long long v87 = &v90;
          uint64_t v88 = v31;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v79);
          xpc_release(v79);
          xpc_object_t v79 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E4F4C848]))
        {
          size_t v33 = *MEMORY[0x1E4F4CA58];
          *(void *)long long buf = &v81;
          size_t v67 = v33;
          uint64_t v34 = *MEMORY[0x1E4F4CC48];
          long long v87 = &v90;
          uint64_t v88 = v34;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v78);
          xpc_release(v78);
          xpc_object_t v78 = 0;
          size_t v35 = *MEMORY[0x1E4F4CC88];
          *(void *)long long buf = &v81;
          size_t v67 = v35;
          uint64_t v36 = *MEMORY[0x1E4F4CE10];
          long long v87 = &v90;
          uint64_t v88 = v36;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v77);
          xpc_release(v77);
          xpc_object_t v77 = 0;
          size_t v37 = *MEMORY[0x1E4F4CD40];
          *(void *)long long buf = &v81;
          size_t v67 = v37;
          uint64_t v38 = *MEMORY[0x1E4F4CF08];
          long long v87 = &v90;
          uint64_t v88 = v38;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v76);
          xpc_release(v76);
          xpc_object_t v76 = 0;
          size_t v39 = *MEMORY[0x1E4F4CF68];
          *(void *)long long buf = &v81;
          size_t v67 = v39;
          uint64_t v40 = *MEMORY[0x1E4F4CE08];
          long long v87 = &v90;
          uint64_t v88 = v40;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v75);
          xpc_release(v75);
          xpc_object_t v75 = 0;
          size_t v41 = *MEMORY[0x1E4F4CA50];
          *(void *)long long buf = &v81;
          size_t v67 = v41;
          uint64_t v42 = *MEMORY[0x1E4F4CB38];
          long long v87 = &v90;
          uint64_t v88 = v42;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v74);
          xpc_release(v74);
          xpc_object_t v74 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E4F4C838]))
        {
          size_t v43 = *MEMORY[0x1E4F4CA48];
          *(void *)long long buf = &v81;
          size_t v67 = v43;
          uint64_t v44 = *MEMORY[0x1E4F4CC48];
          long long v87 = &v90;
          uint64_t v88 = v44;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v73);
          xpc_release(v73);
          xpc_object_t v73 = 0;
          size_t v45 = *MEMORY[0x1E4F4CC70];
          *(void *)long long buf = &v81;
          size_t v67 = v45;
          uint64_t v46 = *MEMORY[0x1E4F4CE10];
          long long v87 = &v90;
          uint64_t v88 = v46;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v72);
          xpc_release(v72);
          xpc_object_t v72 = 0;
          size_t v47 = *MEMORY[0x1E4F4CC68];
          *(void *)long long buf = &v81;
          size_t v67 = v47;
          xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v87);
          int v48 = xpc::dyn_cast_or_default((xpc *)&v87, 0);
          xpc_release(v87);
          xpc_object_t v70 = xpc_int64_create(v48 | 0x10000);
          if (!v70) {
            xpc_object_t v70 = xpc_null_create();
          }
          size_t v49 = *MEMORY[0x1E4F4CE08];
          *(void *)long long buf = &v90;
          size_t v67 = v49;
          xpc::dict::object_proxy::operator=((uint64_t)buf, &v70, &v71);
          xpc_release(v71);
          xpc_object_t v71 = 0;
          xpc_release(v70);
          xpc_object_t v70 = 0;
          size_t v50 = *MEMORY[0x1E4F4CA50];
          *(void *)long long buf = &v81;
          size_t v67 = v50;
          uint64_t v51 = *MEMORY[0x1E4F4CB38];
          long long v87 = &v90;
          uint64_t v88 = v51;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v69);
          xpc_release(v69);
          xpc_object_t v69 = 0;
        }
        xpc_release(v81);
      }
    }
    else if (!v15)
    {
      uint64_t v32 = *((void *)this + 11);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C59C6000, v32, OS_LOG_TYPE_ERROR, "Wake Reason data is missing", buf, 2u);
      }
      goto LABEL_63;
    }
    xpc_object_t v52 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
    if (!v52) {
      xpc_object_t v52 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C190], v52);
    xpc_object_t v53 = xpc_null_create();
    xpc_release(v52);
    xpc_release(v53);
    xpc_object_t v54 = xpc_int64_create(524467);
    if (!v54) {
      xpc_object_t v54 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C258], v54);
    xpc_object_t v55 = xpc_null_create();
    xpc_release(v54);
    xpc_release(v55);
    xpc_object_t v56 = v90;
    if (v90) {
      xpc_retain(v90);
    }
    else {
      xpc_object_t v56 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C188], v56);
    xpc_object_t v57 = xpc_null_create();
    xpc_release(v56);
    xpc_release(v57);
    xpc_object_t v58 = (const void *)*MEMORY[0x1E4F4C738];
    size_t v59 = strlen((const char *)*MEMORY[0x1E4F4C738]);
    if (v59 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v60 = v59;
    if (v59 >= 0x17)
    {
      uint64_t v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v59 | 7) != 0x17) {
        uint64_t v62 = v59 | 7;
      }
      uint64_t v63 = v62 + 1;
      uint64_t v61 = operator new(v62 + 1);
      size_t v67 = v60;
      unint64_t v68 = v63 | 0x8000000000000000;
      *(void *)long long buf = v61;
    }
    else
    {
      HIBYTE(v68) = v59;
      uint64_t v61 = buf;
      if (!v59)
      {
        buf[0] = 0;
        xpc_object_t v65 = v9;
        if (v9)
        {
LABEL_55:
          xpc_retain(v9);
          goto LABEL_61;
        }
LABEL_60:
        xpc_object_t v65 = xpc_null_create();
LABEL_61:
        uint64_t v64 = 0;
        Service::runCommand((uint64_t)this, (uint64_t)buf, &v65, &v64);
        xpc_release(v65);
        xpc_object_t v65 = 0;
        if (SHIBYTE(v68) < 0) {
          operator delete(*(void **)buf);
        }
LABEL_63:
        xpc_release(v90);
        xpc_release(v9);
        return;
      }
    }
    memmove(v61, v58, v60);
    *((unsigned char *)v61 + v60) = 0;
    xpc_object_t v65 = v9;
    if (v9) {
      goto LABEL_55;
    }
    goto LABEL_60;
  }
  xpc_object_t v7 = *((void *)this + 11);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Invalid Wake Reason dictionary", buf, 2u);
  }
}

void sub_1C5A358F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,xpc_object_t object)
{
  xpc_release(*(xpc_object_t *)(v31 - 96));
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v31 - 72));
  xpc_release(v30);
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a2, *(const char **)(a2 + 8));
  xpc_object_t v6 = value;
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_5;
    }
  }
  xpc_retain(v6);
  xpc_object_t v7 = v6;
LABEL_5:
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), v7);
  *a3 = v7;
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v6);
}

BOOL xpc::operator==<char const*>(void *a1, const char *a2, const char **a3)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    xpc_object_t v5 = value;
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_object_t v6 = xpc_string_create(*a3);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  BOOL v7 = xpc_equal(v5, v6);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_1C5A35B84(_Unwind_Exception *a1)
{
  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void TransportModule::finishInitialization_sync(TransportModule *this)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v6 = (const char *)(*(uint64_t (**)(TransportModule *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    xpc_object_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v115 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v115) = v7;
    xpc_object_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  int v113 = 0;
  AppleBasebandManager::create();
  long long v12 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  size_t v13 = (std::__shared_weak_count *)*((void *)this + 26);
  *(_OWORD *)((char *)this + 200) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    BOOL v15 = v113;
    if (!v113) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  BOOL v15 = v113;
  if (v113) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v115) < 0) {
    operator delete(__dst[0]);
  }
  GetABMLogServer(&v111);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 26);
  uint64_t v109 = *((void *)this + 25);
  CFTypeID v110 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v17 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v17 || (v18 = *((void *)this + 15), (size_t v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  uint64_t v107 = v18;
  std::vector<std::string>::pointer v108 = v19;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  size_t v21 = (std::__shared_weak_count *)*((void *)this + 28);
  uint64_t v105 = *((void *)this + 27);
  CFDictionaryRef v106 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TransportService::create(&v111, &v109, &v107, &v105, buf);
  long long v22 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  size_t v23 = (std::__shared_weak_count *)*((void *)this + 22);
  *(_OWORD *)((char *)this + 168) = v22;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = v106;
  if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (v108) {
    std::__shared_weak_count::__release_weak(v108);
  }
  uint64_t v26 = v110;
  if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  size_t v27 = v112;
  if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = *((void *)this + 21);
  if (!v28)
  {
    xpc_object_t v70 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v70, OS_LOG_TYPE_FAULT)) {
      __break(1u);
    }
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "ABM ASSERT";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "fTransportService != NULL";
    __int16 v117 = 2080;
    int v118 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Transport/TransportModule.cpp";
    __int16 v119 = 1024;
    int v120 = 366;
    _os_log_fault_impl(&dword_1C59C6000, v70, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    __break(1u);
LABEL_171:
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (*((_DWORD *)this + 38))
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_37_0;
    void aBlock[4] = this;
    void aBlock[5] = v3;
    uint64_t v102 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v29 = _Block_copy(aBlock);
    size_t v30 = *((void *)this + 17);
    if (v30) {
      dispatch_retain(*((dispatch_object_t *)this + 17));
    }
    uint64_t v103 = v29;
    dispatch_object_t v104 = v30;
    (*(void (**)(uint64_t, const void **))(*(void *)v28 + 80))(v28, &v103);
    if (v104) {
      dispatch_release(v104);
    }
    if (v103) {
      _Block_release(v103);
    }
    if (v102) {
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  else
  {
    uint64_t v31 = *((void *)this + 11);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v31, OS_LOG_TYPE_DEFAULT, "#I Wake reason is not supported by this baseband", buf, 2u);
    }
  }
  memset(buf, 170, 16);
  v99[0] = MEMORY[0x1E4F143A8];
  v99[1] = 1174405120;
  v99[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_38;
  v99[3] = &__block_descriptor_tmp_42;
  v99[4] = this;
  v99[5] = v3;
  long long v100 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = _Block_copy(v99);
  uint64_t v33 = *((void *)this + 17);
  if (v33) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  *(void *)long long buf = v32;
  *(void *)&uint8_t buf[8] = v33;
  BOOL v97 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v95[0] = MEMORY[0x1E4F143A8];
  v95[1] = 1174405120;
  v95[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_43;
  v95[3] = &__block_descriptor_tmp_47;
  v95[4] = this;
  v95[5] = v3;
  uint64_t v96 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v34 = _Block_copy(v95);
  size_t v35 = *((void *)this + 17);
  if (v35) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  BOOL v97 = v34;
  dispatch_object_t object = v35;
  uint64_t v93 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v94 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v91[0] = MEMORY[0x1E4F143A8];
  v91[1] = 1174405120;
  v91[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_48;
  v91[3] = &__block_descriptor_tmp_51;
  v91[4] = this;
  v91[5] = v3;
  unint64_t v92 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v36 = _Block_copy(v91);
  size_t v37 = *((void *)this + 17);
  if (v37) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  uint64_t v93 = v36;
  dispatch_object_t v94 = v37;
  xpc_object_t v89 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v90 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v87[0] = MEMORY[0x1E4F143A8];
  v87[1] = 1174405120;
  v87[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_52;
  v87[3] = &__block_descriptor_tmp_55_1;
  v87[4] = this;
  v87[5] = v3;
  uint64_t v88 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v38 = _Block_copy(v87);
  size_t v39 = *((void *)this + 17);
  if (v39) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  xpc_object_t v89 = v38;
  dispatch_object_t v90 = v39;
  uint64_t v40 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v41 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v41 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_171;
  }
  uint64_t v42 = (void *)v41;
  if (v41 >= 0x17)
  {
    uint64_t v45 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17) {
      uint64_t v45 = v41 | 7;
    }
    uint64_t v46 = v45 + 1;
    size_t v43 = operator new(v45 + 1);
    __p[1] = v42;
    unint64_t v86 = v46 | 0x8000000000000000;
    __p[0] = v43;
LABEL_75:
    memmove(v43, v40, (size_t)v42);
    *((unsigned char *)v42 + (void)v43) = 0;
    uint64_t v44 = v97;
    if (!v97) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  HIBYTE(v86) = v41;
  size_t v43 = __p;
  if (v41) {
    goto LABEL_75;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v44 = v97;
  if (v97) {
LABEL_76:
  }
    uint64_t v44 = _Block_copy(v44);
LABEL_77:
  xpc_object_t v83 = v44;
  dispatch_object_t v84 = object;
  if (object) {
    dispatch_retain(object);
  }
  AppleBasebandManager::setEventHandler();
  if (v84) {
    dispatch_release(v84);
  }
  if (v83) {
    _Block_release(v83);
  }
  if (SHIBYTE(v86) < 0) {
    operator delete(__p[0]);
  }
  size_t v47 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v48 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v48 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_171;
  }
  size_t v49 = (void *)v48;
  if (v48 >= 0x17)
  {
    uint64_t v52 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17) {
      uint64_t v52 = v48 | 7;
    }
    uint64_t v53 = v52 + 1;
    size_t v50 = operator new(v52 + 1);
    v81[1] = v49;
    unint64_t v82 = v53 | 0x8000000000000000;
    v81[0] = v50;
LABEL_93:
    memmove(v50, v47, (size_t)v49);
    *((unsigned char *)v49 + (void)v50) = 0;
    uint64_t v51 = *(void **)buf;
    if (!*(void *)buf) {
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  HIBYTE(v82) = v48;
  size_t v50 = v81;
  if (v48) {
    goto LABEL_93;
  }
  LOBYTE(v81[0]) = 0;
  uint64_t v51 = *(void **)buf;
  if (*(void *)buf) {
LABEL_94:
  }
    uint64_t v51 = _Block_copy(v51);
LABEL_95:
  xpc_object_t v79 = v51;
  dispatch_object_t v80 = *(dispatch_object_t *)&buf[8];
  if (*(void *)&buf[8]) {
    dispatch_retain(*(dispatch_object_t *)&buf[8]);
  }
  AppleBasebandManager::setEventHandler();
  if (v80) {
    dispatch_release(v80);
  }
  if (v79) {
    _Block_release(v79);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete(v81[0]);
  }
  xpc_object_t v54 = (const void *)*MEMORY[0x1E4F4CD28];
  size_t v55 = strlen((const char *)*MEMORY[0x1E4F4CD28]);
  if (v55 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_171;
  }
  xpc_object_t v56 = (void *)v55;
  if (v55 >= 0x17)
  {
    uint64_t v59 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17) {
      uint64_t v59 = v55 | 7;
    }
    uint64_t v60 = v59 + 1;
    xpc_object_t v57 = operator new(v59 + 1);
    v77[1] = v56;
    unint64_t v78 = v60 | 0x8000000000000000;
    v77[0] = v57;
LABEL_111:
    memmove(v57, v54, (size_t)v56);
    *((unsigned char *)v56 + (void)v57) = 0;
    xpc_object_t v58 = v93;
    if (!v93) {
      goto LABEL_113;
    }
    goto LABEL_112;
  }
  HIBYTE(v78) = v55;
  xpc_object_t v57 = v77;
  if (v55) {
    goto LABEL_111;
  }
  LOBYTE(v77[0]) = 0;
  xpc_object_t v58 = v93;
  if (v93) {
LABEL_112:
  }
    xpc_object_t v58 = _Block_copy(v58);
LABEL_113:
  xpc_object_t v75 = v58;
  dispatch_object_t v76 = v94;
  if (v94) {
    dispatch_retain(v94);
  }
  AppleBasebandManager::setEventHandler();
  if (v76) {
    dispatch_release(v76);
  }
  if (v75) {
    _Block_release(v75);
  }
  if (SHIBYTE(v78) < 0) {
    operator delete(v77[0]);
  }
  uint64_t v61 = (const void *)*MEMORY[0x1E4F4CB18];
  size_t v62 = strlen((const char *)*MEMORY[0x1E4F4CB18]);
  if (v62 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_171;
  }
  uint64_t v63 = (void *)v62;
  if (v62 >= 0x17)
  {
    uint64_t v68 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v62 | 7) != 0x17) {
      uint64_t v68 = v62 | 7;
    }
    uint64_t v69 = v68 + 1;
    uint64_t v64 = operator new(v68 + 1);
    v73[1] = v63;
    unint64_t v74 = v69 | 0x8000000000000000;
    v73[0] = v64;
  }
  else
  {
    HIBYTE(v74) = v62;
    uint64_t v64 = v73;
    if (!v62)
    {
      LOBYTE(v73[0]) = 0;
      xpc_object_t v65 = v89;
      if (v89) {
        goto LABEL_125;
      }
      goto LABEL_162;
    }
  }
  memmove(v64, v61, (size_t)v63);
  *((unsigned char *)v63 + (void)v64) = 0;
  xpc_object_t v65 = v89;
  if (v89)
  {
LABEL_125:
    int v66 = _Block_copy(v65);
    size_t v67 = v90;
    xpc_object_t v71 = v66;
    xpc_object_t v72 = v90;
    if (!v90) {
      goto LABEL_127;
    }
    goto LABEL_126;
  }
LABEL_162:
  size_t v67 = v90;
  xpc_object_t v71 = 0;
  xpc_object_t v72 = v90;
  if (v90) {
LABEL_126:
  }
    dispatch_retain(v67);
LABEL_127:
  AppleBasebandManager::setEventHandler();
  if (v72) {
    dispatch_release(v72);
  }
  if (v71) {
    _Block_release(v71);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 25));
  if (v67) {
    dispatch_release(v67);
  }
  if (v65) {
    _Block_release(v65);
  }
  if (v88) {
    std::__shared_weak_count::__release_weak(v88);
  }
  if (v94) {
    dispatch_release(v94);
  }
  if (v93) {
    _Block_release(v93);
  }
  if (v92) {
    std::__shared_weak_count::__release_weak(v92);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v97) {
    _Block_release(v97);
  }
  if (v96) {
    std::__shared_weak_count::__release_weak(v96);
  }
  if (*(void *)&buf[8]) {
    dispatch_release(*(dispatch_object_t *)&buf[8]);
  }
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  if (v100) {
    std::__shared_weak_count::__release_weak(v100);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5A3684C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v52 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v11 = v6;
LABEL_92:
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      size_t v7 = (_DWORD *)(v5 + 152);
      int v8 = *(_DWORD *)(v5 + 152);
      xpc_object_t v9 = *(xpc_object_t *)(v5 + 160);
      if (v9)
      {
        xpc_retain(*(xpc_object_t *)(v5 + 160));
        *size_t v7 = *(_DWORD *)a2;
        xpc_object_t v10 = *(xpc_object_t *)(a2 + 8);
        if (v10)
        {
LABEL_6:
          xpc_retain(v10);
          goto LABEL_10;
        }
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        *size_t v7 = *(_DWORD *)a2;
        xpc_object_t v10 = *(xpc_object_t *)(a2 + 8);
        if (v10) {
          goto LABEL_6;
        }
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_10:
      long long v12 = *(void **)(v5 + 160);
      *(void *)(v5 + 160) = v10;
      xpc_release(v12);
      if (v8 != 2) {
        goto LABEL_91;
      }
      if (*v7 != 3)
      {
        BOOL v15 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          size_t v27 = SHIBYTE(v56) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v27;
          _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "Baseband wake data (Error): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v56) < 0) {
            operator delete(block);
          }
        }
        uint64_t v16 = *(void *)(v5 + 184);
        if (v16)
        {
          *(void *)&long long buf = MEMORY[0x1E4F143A8];
          *((void *)&buf + 1) = 0x40000000;
          uint64_t v61 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
          size_t v62 = &__block_descriptor_tmp_61;
          uint64_t v63 = v16;
          p_long long buf = &buf;
          blocuint64_t k = (void **)MEMORY[0x1E4F143A8];
          uint64_t v55 = 0x40000000;
          xpc_object_t v56 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          xpc_object_t v57 = &__block_descriptor_tmp_55;
          uint64_t v58 = v16 + 72;
          p_p_long long buf = &p_buf;
          size_t v17 = *(NSObject **)(v16 + 88);
          if (*(void *)(v16 + 96)) {
            dispatch_async_and_wait(v17, &block);
          }
          else {
            dispatch_sync(v17, &block);
          }
        }
LABEL_91:
        xpc_release(v9);
        uint64_t v11 = v52;
        if (!v52) {
          return;
        }
        goto LABEL_92;
      }
      size_t v13 = *(void **)(v5 + 160);
      xpc_object_t xdict = v13;
      if (v13)
      {
        xpc_retain(v13);
        xpc_object_t v14 = xdict;
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t xdict = v14;
      }
      uint64_t v18 = MEMORY[0x1C8795EB0](v14);
      uint64_t v19 = MEMORY[0x1E4F14590];
      if (v18 == MEMORY[0x1E4F14590])
      {
        *(void *)&long long buf = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v22 = *MEMORY[0x1E4F4CC78];
        blocuint64_t k = &xdict;
        uint64_t v55 = v22;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)&block, &buf);
        xpc_object_t value = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4CF80]);
        blocuint64_t k = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          blocuint64_t k = (void **)xpc_null_create();
        }
        int v21 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        uint64_t v24 = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C910]);
        blocuint64_t k = v24;
        if (v24) {
          xpc_retain(v24);
        }
        else {
          blocuint64_t k = (void **)xpc_null_create();
        }
        int v20 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        if (MEMORY[0x1C8795EB0](buf) == v19)
        {
          uint64_t v26 = (void **)xpc_dictionary_get_value((xpc_object_t)buf, (const char *)*MEMORY[0x1E4F4CA50]);
          blocuint64_t k = v26;
          if (v26) {
            xpc_retain(v26);
          }
          else {
            blocuint64_t k = (void **)xpc_null_create();
          }
          char v25 = xpc::dyn_cast_or_default((xpc *)&block, 0);
          xpc_release(block);
        }
        else
        {
          char v25 = 0;
        }
        xpc_release((xpc_object_t)buf);
        if (v25) {
          goto LABEL_55;
        }
      }
      else
      {
        int v20 = 0;
        int v21 = 0;
      }
      uint64_t v28 = *(void *)(v5 + 184);
      if (v28)
      {
        *(void *)&long long buf = MEMORY[0x1E4F143A8];
        *((void *)&buf + 1) = 0x40000000;
        uint64_t v61 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        size_t v62 = &__block_descriptor_tmp_61;
        uint64_t v63 = v28;
        p_long long buf = &buf;
        blocuint64_t k = (void **)MEMORY[0x1E4F143A8];
        uint64_t v55 = 0x40000000;
        xpc_object_t v56 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        xpc_object_t v57 = &__block_descriptor_tmp_55;
        uint64_t v58 = v28 + 72;
        p_p_long long buf = &p_buf;
        uint64_t v29 = *(NSObject **)(v28 + 88);
        if (*(void *)(v28 + 96))
        {
          dispatch_async_and_wait(v29, &block);
          if ((v21 & 1) == 0) {
            goto LABEL_43;
          }
LABEL_56:
          TransportModule::claimSystemWake_sync((TransportModule *)v5);
          TransportModule::notifyWakeToNetworkStack_sync((TransportModule *)v5);
          uint64_t v34 = (const void *)*MEMORY[0x1E4F4CA10];
          size_t v35 = strlen((const char *)*MEMORY[0x1E4F4CA10]);
          if (v35 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = (void *)v35;
          if (v35 >= 0x17)
          {
            uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17) {
              uint64_t v38 = v35 | 7;
            }
            uint64_t v39 = v38 + 1;
            size_t v37 = (void **)operator new(v38 + 1);
            __dst[1] = v36;
            unint64_t v49 = v39 | 0x8000000000000000;
            __dst[0] = v37;
          }
          else
          {
            HIBYTE(v49) = v35;
            size_t v37 = __dst;
            if (!v35)
            {
LABEL_64:
              *((unsigned char *)v36 + (void)v37) = 0;
              xpc_object_t v40 = *(xpc_object_t *)(v5 + 160);
              if (v40)
              {
                xpc_retain(*(xpc_object_t *)(v5 + 160));
                *(void *)&long long buf = v40;
              }
              else
              {
                xpc_object_t v40 = xpc_null_create();
                *(void *)&long long buf = v40;
                if (!v40)
                {
                  xpc_object_t v40 = 0;
                  *(void *)&long long buf = xpc_null_create();
LABEL_70:
                  xpc::bridge((uint64_t *)&block, (xpc *)&buf, v41);
                  uint64_t v42 = block;
                  if (block && (CFTypeID v43 = CFGetTypeID(block), v43 == CFDictionaryGetTypeID()))
                  {
                    CFTypeRef cf = v42;
                    CFRetain(v42);
                  }
                  else
                  {
                    CFTypeRef cf = 0;
                  }
                  aBlocuint64_t k = 0;
                  Service::broadcastEvent(v5, (uint64_t)__dst, &cf, (const void **)&aBlock);
                  if (aBlock) {
                    _Block_release(aBlock);
                  }
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (block) {
                    CFRelease(block);
                  }
                  xpc_release((xpc_object_t)buf);
                  *(void *)&long long buf = 0;
                  xpc_release(v40);
                  if (SHIBYTE(v49) < 0) {
                    operator delete(__dst[0]);
                  }
                  uint64_t v44 = *(NSObject **)(v5 + 88);
                  if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_89;
                  }
                  WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
                  if (SHIBYTE(v56) >= 0) {
                    p_blocuint64_t k = &block;
                  }
                  else {
                    p_blocuint64_t k = (void ***)block;
                  }
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = p_block;
                  _os_log_impl(&dword_1C59C6000, v44, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did wake AP): %s", (uint8_t *)&buf, 0xCu);
                  goto LABEL_87;
                }
              }
              xpc_retain(v40);
              goto LABEL_70;
            }
          }
          memmove(v37, v34, (size_t)v36);
          goto LABEL_64;
        }
        dispatch_sync(v29, &block);
        if (v21) {
          goto LABEL_56;
        }
LABEL_43:
        size_t v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          uint64_t v31 = SHIBYTE(v56) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v31;
          _os_log_impl(&dword_1C59C6000, v30, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did NOT wake AP): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v56) < 0) {
            operator delete(block);
          }
        }
        if (!v20) {
          goto LABEL_90;
        }
        uint64_t v32 = *(NSObject **)(v5 + 88);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
LABEL_89:
          TransportModule::submitMetric_sync((TransportModule *)v5, &xdict);
LABEL_90:
          xpc_release(xdict);
          goto LABEL_91;
        }
        WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
        if (SHIBYTE(v56) >= 0) {
          uint64_t v33 = &block;
        }
        else {
          uint64_t v33 = (void ***)block;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v33;
        _os_log_error_impl(&dword_1C59C6000, v32, OS_LOG_TYPE_ERROR, "System and Baseband wake reason mismatch: %s", (uint8_t *)&buf, 0xCu);
LABEL_87:
        if (SHIBYTE(v56) < 0) {
          operator delete(block);
        }
        goto LABEL_89;
      }
LABEL_55:
      if (v21) {
        goto LABEL_56;
      }
      goto LABEL_43;
    }
  }
}

void sub_1C5A371D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t a18, char a19, uint64_t a20,uint64_t a21,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void TransportModule::notifyWakeToNetworkStack_sync(TransportModule *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 38) == 3)
  {
    xpc_object_t v2 = (xpc_object_t)*((void *)this + 20);
    if (v2) {
      xpc_retain(*((xpc_object_t *)this + 20));
    }
    else {
      xpc_object_t v2 = xpc_null_create();
    }
    if (xpc::operator==<char const*>(MEMORY[0x1E4F4C618], v2, (char *)*MEMORY[0x1E4F4C568])
      && xpc::operator==<char const*>(MEMORY[0x1E4F4C6F8], v2, (char *)*MEMORY[0x1E4F4C918]))
    {
      int v7 = 15;
      int v3 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_notify", 0, 0, &v7, 4uLL);
      uint64_t v4 = *((void *)this + 11);
      if (v3)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          uint64_t v5 = __error();
          xpc_object_t v6 = strerror(*v5);
          *(_DWORD *)long long buf = 136315138;
          xpc_object_t v9 = v6;
          _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "Failed to notify networking stack about Baseband wake packet, error: (%s)", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Notified networking stack about Baseband wake packet", buf, 2u);
      }
    }
    xpc_release(v2);
  }
}

void sub_1C5A374B8(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WakeReason::describe(WakeReason *this, _DWORD *a2)
{
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[7] = v4;
  v34[8] = v4;
  v34[5] = v4;
  v34[6] = v4;
  v34[3] = v4;
  v34[4] = v4;
  v34[1] = v4;
  uint64_t v34[2] = v4;
  v34[0] = v4;
  long long v32 = v4;
  long long v33 = v4;
  long long v30 = v4;
  *(_OWORD *)uint64_t v31 = v4;
  long long v28 = v4;
  long long v29 = v4;
  long long v27 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"WakeStatus:'", 12);
  switch(*a2)
  {
    case 0:
      uint64_t v6 = 13;
      int v7 = "kNotSupported";
      goto LABEL_8;
    case 1:
      uint64_t v6 = 13;
      int v7 = "kNotAvailable";
LABEL_8:
      char v26 = 13;
      __p[0] = *(void **)v7;
      *(void **)((char *)__p + 5) = *(void **)(v7 + 5);
      BYTE5(__p[1]) = 0;
      break;
    case 2:
      uint64_t v6 = 10;
      char v26 = 10;
      LOWORD(__p[1]) = 25701;
      int v8 = "kRequested";
      goto LABEL_6;
    case 3:
      uint64_t v6 = 10;
      char v26 = 10;
      LOWORD(__p[1]) = 25964;
      int v8 = "kAvailable";
LABEL_6:
      __p[0] = *(void **)v8;
      BYTE2(__p[1]) = 0;
      break;
    case 4:
      uint64_t v6 = 6;
      char v26 = 6;
      strcpy((char *)__p, "kError");
      break;
    default:
      uint64_t v6 = 8;
      char v26 = 8;
      strcpy((char *)__p, "kInvalid");
      break;
  }
  xpc_object_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"'", 1);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *((void *)a2 + 1);
  uint64_t v10 = (xpc::object *)(a2 + 2);
  if (MEMORY[0x1C8795EB0](v11) == MEMORY[0x1E4F14590])
  {
    long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)" WakeData:'", 11);
    xpc::object::to_string((uint64_t *)__p, v10);
    size_t v13 = v26 >= 0 ? __p : (void **)__p[0];
    xpc_object_t v14 = v26 >= 0 ? (void *)v26 : __p[1];
    BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    if (v26 < 0)
    {
      operator delete(__p[0]);
      char v16 = BYTE8(v33);
      if ((BYTE8(v33) & 0x10) == 0) {
        goto LABEL_21;
      }
LABEL_25:
      uint64_t v19 = v33;
      if ((unint64_t)v33 < *((void *)&v30 + 1))
      {
        *(void *)&long long v33 = *((void *)&v30 + 1);
        uint64_t v19 = *((void *)&v30 + 1);
      }
      uint64_t v18 = (const void **)&v30;
      goto LABEL_28;
    }
  }
  char v16 = BYTE8(v33);
  if ((BYTE8(v33) & 0x10) != 0) {
    goto LABEL_25;
  }
LABEL_21:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    *((unsigned char *)this + 23) = 0;
    goto LABEL_36;
  }
  uint64_t v18 = (const void **)&v28 + 1;
  uint64_t v19 = *((void *)&v29 + 1);
LABEL_28:
  int v20 = *v18;
  size_t v17 = v19 - (void)*v18;
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    size_t v23 = (WakeReason *)operator new(v21 + 1);
    *((void *)this + 1) = v17;
    *((void *)this + 2) = v22 | 0x8000000000000000;
    *(void *)this = v23;
    this = v23;
    goto LABEL_35;
  }
  *((unsigned char *)this + 23) = v17;
  if (v17) {
LABEL_35:
  }
    memmove(this, v20, v17);
LABEL_36:
  *((unsigned char *)this + v17) = 0;
  *(void *)&long long v27 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v27 + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v27 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8795140](v34);
}

void sub_1C5A378B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t dispatch::callback<void({block_pointer})(WakeReason)>::~callback(uint64_t a1)
{
  xpc_object_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_38(void *a1, abm::client::Event **a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v61 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        BOOL v15 = v6;
LABEL_64:
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return;
      }
      int v7 = v5[11];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
      }
      int v8 = (void *)v5[23];
      if (v8)
      {
        __dst[0] = (void *)MEMORY[0x1E4F143A8];
        __dst[1] = (void *)0x40000000;
        _OWORD __dst[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
        __dst[3] = &__block_descriptor_tmp_60;
        __p[0] = __dst;
        __dst[4] = v8;
        *(void *)long long buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        xpc_object_t v65 = &__block_descriptor_tmp_55;
        int v66 = v8 + 9;
        size_t v67 = __p;
        xpc_object_t v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, buf);
          uint64_t v10 = v5[21];
          if (!v10)
          {
LABEL_11:
            CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData((uint64_t *)&cf, *a2);
            v58[0] = 0xAAAAAAAAAAAAAAAALL;
            v58[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v58, (const __CFDictionary *)cf);
            memset(buf, 170, sizeof(buf));
            uint64_t v11 = (const void *)*MEMORY[0x1E4F4C3A0];
            size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C3A0]);
            if (v12 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v13 = (void *)v12;
            if (v12 >= 0x17)
            {
              uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17) {
                uint64_t v16 = v12 | 7;
              }
              uint64_t v17 = v16 + 1;
              xpc_object_t v14 = (void **)operator new(v16 + 1);
              __dst[1] = v13;
              _OWORD __dst[2] = (void *)(v17 | 0x8000000000000000);
              __dst[0] = v14;
            }
            else
            {
              HIBYTE(__dst[2]) = v12;
              xpc_object_t v14 = __dst;
              if (!v12)
              {
LABEL_20:
                uint64_t v18 = (const char *)*MEMORY[0x1E4F4C4C8];
                *((unsigned char *)v13 + (void)v14) = 0;
                ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v18);
                ctu::cf::map_adapter::getString();
                MEMORY[0x1C8794290](__p);
                if (SHIBYTE(__dst[2]) < 0) {
                  operator delete(__dst[0]);
                }
                memset(__dst, 170, 24);
                uint64_t v19 = (const void *)*MEMORY[0x1E4F4F928];
                size_t v20 = strlen((const char *)*MEMORY[0x1E4F4F928]);
                if (v20 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                uint64_t v21 = (void *)v20;
                if (v20 >= 0x17)
                {
                  uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v20 | 7) != 0x17) {
                    uint64_t v23 = v20 | 7;
                  }
                  uint64_t v24 = v23 + 1;
                  uint64_t v22 = operator new(v23 + 1);
                  __p[1] = v21;
                  __p[2] = (void *)(v24 | 0x8000000000000000);
                  __p[0] = v22;
                }
                else
                {
                  HIBYTE(__p[2]) = v20;
                  uint64_t v22 = __p;
                  if (!v20)
                  {
LABEL_30:
                    char v25 = (const char *)*MEMORY[0x1E4F4C7F8];
                    *((unsigned char *)v21 + (void)v22) = 0;
                    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v68, v25);
                    ctu::cf::map_adapter::getString();
                    MEMORY[0x1C8794290](&v68);
                    if (SHIBYTE(__p[2]) < 0) {
                      operator delete(__p[0]);
                    }
                    memset(__p, 170, sizeof(__p));
                    char v26 = (const char *)*MEMORY[0x1E4F4C820];
                    size_t v27 = strlen((const char *)*MEMORY[0x1E4F4C820]);
                    if (v27 > 0x7FFFFFFFFFFFFFF7) {
                      std::string::__throw_length_error[abi:ne180100]();
                    }
                    std::string::size_type v28 = v27;
                    if (v27 >= 0x17)
                    {
                      uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v27 | 7) != 0x17) {
                        uint64_t v30 = v27 | 7;
                      }
                      uint64_t v31 = v30 + 1;
                      long long v29 = (std::string *)operator new(v30 + 1);
                      v68.__r_.__value_.__l.__size_ = v28;
                      v68.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
                      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
                    }
                    else
                    {
                      *((unsigned char *)&v68.__r_.__value_.__s + 23) = v27;
                      long long v29 = &v68;
                      if (!v27)
                      {
LABEL_40:
                        long long v32 = (const char *)*MEMORY[0x1E4F4C6A0];
                        v29->__r_.__value_.__s.__data_[v28] = 0;
                        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v62, v32);
                        ctu::cf::map_adapter::getString();
                        MEMORY[0x1C8794290](&v62);
                        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v68.__r_.__value_.__l.__data_);
                        }
                        int v33 = SHIBYTE(__p[2]);
                        if (SHIBYTE(__p[2]) >= 0) {
                          size_t v34 = HIBYTE(__p[2]);
                        }
                        else {
                          size_t v34 = (size_t)__p[1];
                        }
                        if (v34 == strlen(v26)
                          && (SHIBYTE(__p[2]) >= 0 ? (unint64_t v35 = __p) : (unint64_t v35 = (void **)__p[0]), !memcmp(v35, v26, v34)))
                        {
                          uint64_t v39 = v5[21];
                          if (v39)
                          {
                            xpc_object_t v40 = (const void *)*MEMORY[0x1E4F4F918];
                            int v41 = SHIBYTE(__dst[2]);
                            if (SHIBYTE(__dst[2]) >= 0) {
                              size_t v42 = HIBYTE(__dst[2]);
                            }
                            else {
                              size_t v42 = (size_t)__dst[1];
                            }
                            size_t v43 = strlen((const char *)*MEMORY[0x1E4F4F918]);
                            std::string::size_type v44 = v42 + v43;
                            memset(&v68, 170, sizeof(v68));
                            if (v42 + v43 > 0x7FFFFFFFFFFFFFF7) {
                              std::string::__throw_length_error[abi:ne180100]();
                            }
                            size_t v45 = v43;
                            if (v44 > 0x16)
                            {
                              uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v44 | 7) != 0x17) {
                                uint64_t v47 = v44 | 7;
                              }
                              uint64_t v48 = v47 + 1;
                              uint64_t v46 = (std::string *)operator new(v47 + 1);
                              v68.__r_.__value_.__l.__size_ = v44;
                              v68.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
                              v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
                            }
                            else
                            {
                              memset(&v68, 0, sizeof(v68));
                              uint64_t v46 = &v68;
                              *((unsigned char *)&v68.__r_.__value_.__s + 23) = v42 + v43;
                            }
                            if (v42)
                            {
                              if (v41 >= 0) {
                                unint64_t v49 = __dst;
                              }
                              else {
                                unint64_t v49 = (void **)__dst[0];
                              }
                              memmove(v46, v49, v42);
                            }
                            size_t v50 = (char *)v46 + v42;
                            if (v45) {
                              memmove(v50, v40, v45);
                            }
                            v50[v45] = 0;
                            if ((buf[23] & 0x80u) == 0) {
                              uint64_t v51 = buf;
                            }
                            else {
                              uint64_t v51 = *(uint8_t **)buf;
                            }
                            if ((buf[23] & 0x80u) == 0) {
                              std::string::size_type v52 = buf[23];
                            }
                            else {
                              std::string::size_type v52 = *(void *)&buf[8];
                            }
                            uint64_t v53 = std::string::append(&v68, (const std::string::value_type *)v51, v52);
                            long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
                            std::string::size_type v56 = v53->__r_.__value_.__r.__words[2];
                            *(_OWORD *)uint64_t v55 = v54;
                            v53->__r_.__value_.__l.__size_ = 0;
                            v53->__r_.__value_.__r.__words[2] = 0;
                            v53->__r_.__value_.__r.__words[0] = 0;
                            (*(void (**)(uint64_t, void **))(*(void *)v39 + 48))(v39, v55);
                            if (SHIBYTE(v56) < 0) {
                              operator delete(v55[0]);
                            }
                            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v68.__r_.__value_.__l.__data_);
                            }
                          }
                        }
                        else
                        {
                          uint64_t v36 = v5[11];
                          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                          {
                            size_t v37 = (void **)__p[0];
                            if (v33 >= 0) {
                              size_t v37 = __p;
                            }
                            LODWORD(v68.__r_.__value_.__l.__data_) = 136315138;
                            *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
                            _os_log_impl(&dword_1C59C6000, v36, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&v68, 0xCu);
                          }
                        }
                        if (SHIBYTE(__p[2]) < 0)
                        {
                          operator delete(__p[0]);
                          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                          {
LABEL_56:
                            if (((char)buf[23] & 0x80000000) == 0) {
                              goto LABEL_57;
                            }
                            goto LABEL_61;
                          }
                        }
                        else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_56;
                        }
                        operator delete(__dst[0]);
                        if (((char)buf[23] & 0x80000000) == 0)
                        {
LABEL_57:
                          MEMORY[0x1C87942E0](v58);
                          CFTypeRef v38 = cf;
                          if (!cf)
                          {
LABEL_63:
                            BOOL v15 = v61;
                            if (!v61) {
                              return;
                            }
                            goto LABEL_64;
                          }
LABEL_62:
                          CFRelease(v38);
                          goto LABEL_63;
                        }
LABEL_61:
                        operator delete(*(void **)buf);
                        MEMORY[0x1C87942E0](v58);
                        CFTypeRef v38 = cf;
                        if (!cf) {
                          goto LABEL_63;
                        }
                        goto LABEL_62;
                      }
                    }
                    memmove(v29, v26, v28);
                    goto LABEL_40;
                  }
                }
                memmove(v22, v19, (size_t)v21);
                goto LABEL_30;
              }
            }
            memmove(v14, v11, (size_t)v13);
            goto LABEL_20;
          }
LABEL_10:
          (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
          goto LABEL_11;
        }
        dispatch_async_and_wait(v9, buf);
      }
      uint64_t v10 = v5[21];
      if (!v10) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
}

void sub_1C5A38074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,const void *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v43 - 89) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        if (a35 < 0) {
          operator delete(a30);
        }
        if (a43 < 0) {
          operator delete(a38);
        }
        MEMORY[0x1C87942E0](&a22);
        ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v43 - 89) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v43 - 112));
  if ((a21 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_43(void *a1, abm::client::Event **a2)
{
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    size_t v34 = v6;
    if (v6)
    {
      int v7 = v6;
      if (!a1[5]) {
        goto LABEL_68;
      }
      int v8 = *(void **)(v5 + 184);
      if (v8)
      {
        __p[0] = (void *)MEMORY[0x1E4F143A8];
        __p[1] = (void *)0x40000000;
        __p[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        __p[3] = &__block_descriptor_tmp_61;
        v29[0] = __p;
        __p[4] = v8;
        block[0] = (void *)MEMORY[0x1E4F143A8];
        block[1] = (void *)0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        block[3] = &__block_descriptor_tmp_55;
        void block[4] = v8 + 9;
        void block[5] = v29;
        xpc_object_t v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, block);
          uint64_t v27 = *(void *)(v5 + 168);
          uint64_t v10 = (void (****)(void))(v5 + 168);
          if (v27)
          {
LABEL_8:
            CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData((uint64_t *)&cf, *a2);
            CFTypeRef v12 = cf;
            if (cf) {
              size_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            }
            else {
              size_t v13 = 0;
            }
            if (!v13)
            {
LABEL_66:
              if (v12) {
                CFRelease(v12);
              }
              goto LABEL_68;
            }
            v31[0] = 0xAAAAAAAAAAAAAAAALL;
            v31[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v31, (const __CFDictionary *)cf);
            memset(block, 170, 24);
            xpc_object_t v14 = (const char *)*MEMORY[0x1E4F4C688];
            HIBYTE(__p[2]) = 0;
            LOBYTE(__p[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v29, v14);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C8794290](v29);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            memset(__p, 170, 24);
            BOOL v15 = (const char *)*MEMORY[0x1E4F4C690];
            char v30 = 0;
            LOBYTE(v29[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v35, v15);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C8794290](&v35);
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            size_t v16 = HIBYTE(block[2]);
            int v17 = SHIBYTE(block[2]);
            uint64_t v18 = block[1];
            if (SHIBYTE(block[2]) >= 0) {
              size_t v19 = HIBYTE(block[2]);
            }
            else {
              size_t v19 = (size_t)block[1];
            }
            if (v19 == strlen((const char *)*MEMORY[0x1E4F4C958]))
            {
              size_t v20 = SHIBYTE(block[2]) >= 0 ? block : (void **)block[0];
              if (!memcmp(v20, (const void *)*MEMORY[0x1E4F4C958], v19))
              {
                (**v10)[1]();
                std::string::size_type v28 = **v10;
LABEL_60:
                (*v28)();
                goto LABEL_61;
              }
            }
            if (v19 == strlen((const char *)*MEMORY[0x1E4F4CCD8]))
            {
              uint64_t v21 = v17 >= 0 ? block : (void **)block[0];
              if (!memcmp(v21, (const void *)*MEMORY[0x1E4F4CCD8], v19))
              {
                uint64_t v22 = SHIBYTE(__p[2]) >= 0 ? (void *)HIBYTE(__p[2]) : __p[1];
                if (v22 == (void *)strlen((const char *)*MEMORY[0x1E4F4C6E8]))
                {
                  uint64_t v23 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
                  if (!memcmp(v23, (const void *)*MEMORY[0x1E4F4C6E8], (size_t)v22))
                  {
                    if (((uint64_t (*)(void))(**v10)[11])())
                    {
LABEL_59:
                      std::string::size_type v28 = **v10 + 2;
                      goto LABEL_60;
                    }
                    size_t v16 = HIBYTE(block[2]);
                    uint64_t v18 = block[1];
                    LOBYTE(v17) = HIBYTE(block[2]);
                  }
                }
              }
            }
            if ((v17 & 0x80u) == 0) {
              size_t v24 = v16;
            }
            else {
              size_t v24 = (size_t)v18;
            }
            if (v24 != strlen((const char *)*MEMORY[0x1E4F4CBC8])
              || ((v17 & 0x80u) == 0 ? (char v25 = block) : (char v25 = (void **)block[0]),
                  memcmp(v25, (const void *)*MEMORY[0x1E4F4CBC8], v24)))
            {
              if (v24 == strlen((const char *)*MEMORY[0x1E4F4CEB8]))
              {
                char v26 = (v17 & 0x80u) == 0 ? block : (void **)block[0];
                if (!memcmp(v26, (const void *)*MEMORY[0x1E4F4CEB8], v24))
                {
                  (**v10)[2]();
                  (**v10)[7]();
                  std::shared_ptr<TransportService>::reset[abi:ne180100](v10);
                }
              }
              goto LABEL_61;
            }
            if (((unsigned int (*)(void))(**v10)[11])()
              && (!((unsigned int (*)(void))(**v10)[11])()
               || !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (char *)*MEMORY[0x1E4F4C6F0])))
            {
LABEL_61:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(block[2]) < 0) {
                operator delete(block[0]);
              }
              MEMORY[0x1C87942E0](v31);
              CFTypeRef v12 = cf;
              goto LABEL_66;
            }
            goto LABEL_59;
          }
LABEL_68:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        dispatch_async_and_wait(v9, block);
      }
      uint64_t v11 = *(void *)(v5 + 168);
      uint64_t v10 = (void (****)(void))(v5 + 168);
      if (v11) {
        goto LABEL_8;
      }
      goto LABEL_68;
    }
  }
}

void sub_1C5A38750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  MEMORY[0x1C87942E0](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1C5A387E0()
{
}

void sub_1C5A387E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_48(void *a1)
{
  xpc_object_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  long long v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  if (a1[5])
  {
    uint64_t v6 = *(void *)(v3 + 184);
    if (!v6) {
      goto LABEL_7;
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    uint64_t v9[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
    void v9[3] = &__block_descriptor_tmp_61;
    v9[4] = v6;
    uint64_t v10 = v9;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    void block[4] = v6 + 72;
    void block[5] = &v10;
    int v7 = *(NSObject **)(v6 + 88);
    if (*(void *)(v6 + 96))
    {
      dispatch_async_and_wait(v7, block);
LABEL_7:
      uint64_t v8 = *(void *)(v3 + 168);
      if (!v8) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    dispatch_sync(v7, block);
    uint64_t v8 = *(void *)(v3 + 168);
    if (v8) {
LABEL_8:
    }
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
LABEL_9:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1C5A38998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_52(void *a1)
{
  xpc_object_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        int v7 = v3[11];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
        }
        uint64_t v8 = v3[23];
        if (v8)
        {
          v11[0] = MEMORY[0x1E4F143A8];
          v11[1] = 0x40000000;
          void v11[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
          v11[3] = &__block_descriptor_tmp_60;
          v11[4] = v8;
          CFTypeRef v12 = v11;
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          uint64_t v14 = 0x40000000;
          BOOL v15 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          size_t v16 = &__block_descriptor_tmp_55;
          uint64_t v17 = v8 + 72;
          uint64_t v18 = &v12;
          xpc_object_t v9 = *(NSObject **)(v8 + 88);
          if (!*(void *)(v8 + 96))
          {
            dispatch_sync(v9, buf);
            uint64_t v10 = v3[21];
            if (!v10) {
              return;
            }
LABEL_12:
            (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
            return;
          }
          dispatch_async_and_wait(v9, buf);
        }
        uint64_t v10 = v3[21];
        if (!v10) {
          return;
        }
        goto LABEL_12;
      }
    }
  }
}

void TransportModule::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  void v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TransportModule::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  void v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

BOOL xpc::operator==<char const*>(const char **a1, xpc_object_t xdict, char *key)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, key);
  if (value)
  {
    xpc_object_t v5 = value;
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_object_t v6 = xpc_string_create(*a1);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  BOOL v7 = xpc_equal(v6, v5);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_1C5A38E20(_Unwind_Exception *a1)
{
  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F21058F0;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F21058F0;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule*)#1}::operator() const(TransportModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F21058F0;
  MEMORY[0x1C87940C0](a1 + 1);
  xpc_object_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<TransportModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F21059B8;
  void block[5] = v5;
  CFTypeRef v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(TransportModule ***)a1;
  TransportModule::finishInitialization_sync(**(TransportModule ***)a1);
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    long long v4 = (void *)a1;
  }
  else
  {
    long long v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5A3946C(_Unwind_Exception *a1)
{
  operator delete(v2);
  long long v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  long long v4 = *(NSObject **)(v3 + 184);
  if (!v4)
  {
LABEL_4:
    uint64_t v6 = *(void *)(v3 + 168);
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_54;
  v11[4] = v4;
  CFTypeRef v12 = v11;
  block[0] = (dispatch_object_t)MEMORY[0x1E4F143A8];
  block[1] = (dispatch_object_t)0x40000000;
  block[2] = (dispatch_object_t)___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = (dispatch_object_t)&__block_descriptor_tmp_55;
  void block[4] = v4 + 9;
  void block[5] = (dispatch_object_t)&v12;
  isa = v4[11].isa;
  if (v4[12].isa)
  {
    dispatch_async_and_wait(isa, block);
    goto LABEL_4;
  }
  dispatch_sync(isa, block);
  uint64_t v6 = *(void *)(v3 + 168);
  if (!v6) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v7 = v2[1];
  block[0] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  (*(void (**)(uint64_t, dispatch_object_t *))(*(void *)v6 + 24))(v6, block);
  if (block[0])
  {
    dispatch_group_leave(block[0]);
    if (block[0]) {
      dispatch_release(block[0]);
    }
  }
LABEL_11:
  uint64_t v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    xpc_object_t v9 = v2[1];
    if (v9) {
      dispatch_release(v9);
    }
  }
  operator delete(v2);
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(a1);
}

void sub_1C5A39698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  uint64_t v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    size_t v19 = v16[1];
    if (v19) {
      dispatch_release(v19);
    }
  }
  operator delete(v16);
  size_t v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(void *)(v3 + 184);
  if (v4)
  {
    dispatch_group_t group = (dispatch_group_t)MEMORY[0x1E4F143A8];
    uint64_t v15 = 0x40000000;
    size_t v16 = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    uint64_t v17 = &__block_descriptor_tmp_56;
    uint64_t v18 = v4;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v4 + 72), (uint64_t)&group);
  }
  if (!*(_DWORD *)(v3 + 152))
  {
    uint64_t v10 = *(void *)(v3 + 184);
    if (v10)
    {
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      v12[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
      v12[3] = &__block_descriptor_tmp_61;
      void v12[4] = v10;
      size_t v13 = v12;
      dispatch_group_t group = (dispatch_group_t)MEMORY[0x1E4F143A8];
      uint64_t v15 = 0x40000000;
      size_t v16 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
      uint64_t v17 = &__block_descriptor_tmp_55;
      uint64_t v18 = v10 + 72;
      size_t v19 = &v13;
      uint64_t v11 = *(NSObject **)(v10 + 88);
      if (*(void *)(v10 + 96)) {
        dispatch_async_and_wait(v11, &group);
      }
      else {
        dispatch_sync(v11, &group);
      }
    }
  }
  uint64_t v5 = *(void *)(v3 + 168);
  if (v5)
  {
    uint64_t v6 = v2[1];
    dispatch_group_t group = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v5 + 32))(v5, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
  }
  uint64_t v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    uint64_t v8 = v2[1];
    if (v8) {
      dispatch_release(v8);
    }
  }
  operator delete(v2);
  xpc_object_t v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_1C5A39954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  uint64_t v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    size_t v19 = v16[1];
    if (v19) {
      dispatch_release(v19);
    }
  }
  operator delete(v16);
  size_t v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void TraceManager::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x140uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v11[0] = v6;
  v11[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  TraceManager::TraceManager((uint64_t)v4, v11);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceManager>::shared_ptr[abi:ne180100]<TraceManager,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1},void>(a2, v5);
  ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = *a2 + 120;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = ___ZN12TraceManager4initEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_6_0;
  void v12[4] = v8;
  size_t v13 = v12;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_150;
  void block[4] = v9;
  void block[5] = &v13;
  uint64_t v10 = *(NSObject **)(v8 + 136);
  if (*(void *)(v8 + 144)) {
    dispatch_async_and_wait(v10, block);
  }
  else {
    dispatch_sync(v10, block);
  }
}

void sub_1C5A39B50(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void TraceManager::init(TraceManager *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN12TraceManager4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_6_0;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_150;
  void block[4] = (char *)this + 120;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t TraceManager::TraceManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F21059F8;
  *(void *)(a1 + 48) = &unk_1F2105A68;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v22, "com.apple.telephony.abm", "trace.mgr");
  GetABMLogServer(&v20);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("trace.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F21060D0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v24);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  uint64_t v7 = v21;
  *(void *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  *(void *)(a1 + 48) = &unk_1F2106160;
  uint64_t v8 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *(void *)a1 = &unk_1F21059F8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 48) = &unk_1F2105A68;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = a1 + 216;
  *(void *)(a1 + 224) = a1 + 216;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v9 = operator new(0x18uLL);
  uint64_t v9[2] = 0;
  v9[1] = 0;
  void *v9 = v9 + 1;
  *(void *)(a1 + 256) = v9;
  uint64_t v10 = operator new(0x20uLL);
  void *v10 = &unk_1F21061A0;
  v10[1] = 0;
  void v10[2] = 0;
  v10[3] = v9;
  *(void *)(a1 + 264) = v10;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  uint64_t v11 = (BasebandCrashReasonFilter *)operator new(0x60uLL);
  BasebandCrashReasonFilter::BasebandCrashReasonFilter(v11);
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(&v24, (uint64_t)v11);
  long long v12 = v24;
  long long v24 = 0uLL;
  size_t v13 = *(std::__shared_weak_count **)(a1 + 296);
  *(_OWORD *)(a1 + 288) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (TraceCAReporter *)operator new(0x68uLL);
  TraceCAReporter::TraceCAReporter(v15);
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>((std::__shared_weak_count_vtbl **)&v24, (std::__shared_weak_count_vtbl *)v15);
  long long v16 = v24;
  long long v24 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return a1;
}

void sub_1C5A3A120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v22 = v21;
  operator delete(v22);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 + 304);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 + 288);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 + 272);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v19);
  std::list<boost::signals2::connection>::~list(v18);
  if (*(char *)(v15 + 215) < 0) {
    operator delete(*(void **)(v15 + 192));
  }
  if (*(char *)(v15 + 191) < 0) {
    operator delete(*(void **)(v15 + 168));
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v17);
  ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v16);
  Service::~Service((Service *)v15);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F21060D0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F21060D0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void TraceManager::~TraceManager(TraceManager *this)
{
  *(void *)this = &unk_1F21059F8;
  *((void *)this + 6) = &unk_1F2105A68;
  uint64_t v2 = (char *)this + 216;
  uint64_t v3 = (char *)*((void *)this + 28);
  if (v3 != (char *)this + 216)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 16));
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  if (*((void *)this + 29))
  {
    uint64_t v4 = *((void *)this + 27);
    uint64_t v5 = (char *)*((void *)this + 28);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 29) = 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v5 + 1);
        uint64_t v8 = (atomic_uint *)*((void *)v5 + 3);
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 31);
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *((void *)this + 11);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v10 = *((void *)this + 11);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
LABEL_13:
    v30[0] = 0;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Gone!", (uint8_t *)v30, 2u);
  }
LABEL_14:
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  size_t v13 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!*((void *)this + 29)) {
      goto LABEL_38;
    }
  }
  else if (!*((void *)this + 29))
  {
    goto LABEL_38;
  }
  uint64_t v16 = *((void *)this + 27);
  uint64_t v17 = (char *)*((void *)this + 28);
  uint64_t v18 = *(void *)v17;
  *(void *)(v18 + 8) = *(void *)(v16 + 8);
  **(void **)(v16 + 8) = v18;
  *((void *)this + 29) = 0;
  if (v17 != v2)
  {
    do
    {
      uint64_t v19 = (char *)*((void *)v17 + 1);
      uint64_t v20 = (atomic_uint *)*((void *)v17 + 3);
      if (v20 && atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
      }
      operator delete(v17);
      uint64_t v17 = v19;
    }
    while (v19 != v2);
  }
LABEL_38:
  if (*((char *)this + 215) < 0)
  {
    operator delete(*((void **)this + 24));
    uint64_t v21 = (char *)this + 56;
    if ((*((char *)this + 191) & 0x80000000) == 0)
    {
LABEL_40:
      uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 20);
      if (!v22) {
        goto LABEL_46;
      }
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v21 = (char *)this + 56;
    if ((*((char *)this + 191) & 0x80000000) == 0) {
      goto LABEL_40;
    }
  }
  operator delete(*((void **)this + 21));
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v22) {
    goto LABEL_46;
  }
LABEL_44:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_46:
  *((void *)this + 6) = &unk_1F21060D0;
  MEMORY[0x1C87940C0](v21);
  uint64_t v23 = *((void *)this + 18);
  if (v23) {
    dispatch_release(v23);
  }
  long long v24 = *((void *)this + 17);
  if (v24) {
    dispatch_release(v24);
  }
  char v25 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v26 = *((void *)this + 3);
  if (v26)
  {
    uint64_t v27 = *((void *)this + 4);
    std::string::size_type v28 = (void *)*((void *)this + 3);
    if (v27 != v26)
    {
      do
      {
        if (*(char *)(v27 - 1) < 0) {
          operator delete(*(void **)(v27 - 24));
        }
        v27 -= 24;
      }
      while (v27 != v26);
      std::string::size_type v28 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v26;
    operator delete(v28);
  }
  long long v29 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
}

{
  void *v1;
  uint64_t vars8;

  TraceManager::~TraceManager(this);

  operator delete(v1);
}

void non-virtual thunk to'TraceManager::~TraceManager(TraceManager *this)
{
}

{
  void *v1;
  uint64_t vars8;

  TraceManager::~TraceManager((TraceManager *)((char *)this - 48));

  operator delete(v1);
}

void ___ZN12TraceManager4initEv_block_invoke(uint64_t a1)
{
  uint64_t v218 = *MEMORY[0x1E4F143B8];
  unint64_t v181 = *(void **)(a1 + 32);
  uint64_t v1 = v181[11];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v3 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v2);
    long long v4 = *(_OWORD *)buf;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v5 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = off_1EBBDCA08;
  }
  void block[5] = v3;
  CFMutableDictionaryRef v185 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 16))(&v186, v3);
  uint64_t v188 = 0;
  unsigned int v189 = 0;
  if (v187 && (unsigned int v189 = std::__shared_weak_count::lock(v187)) != 0)
  {
    uint64_t v182 = v186;
    uint64_t v188 = v186;
  }
  else
  {
    uint64_t v182 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ctu20SharedSynchronizableI12TraceManagerE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISC_EENSI_IFvRKNS5_10connectionESB_EEENS5_5mutexEEES1_vJSB_EEEDTcl7connectfp_cvNSF_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSV_SX_E_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_125;
  void aBlock[4] = v181 + 15;
  void aBlock[5] = TraceManager::handleDumpLogsIndication_sync;
  void aBlock[6] = 0;
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = (std::__shared_weak_count *)v181[16];
  if (!v8 || (v9 = v181[15], (uint64_t v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  long long v12 = v181[17];
  dispatch_object_t v192 = v12;
  long long v179 = v7;
  if (v7) {
    size_t v13 = _Block_copy(v7);
  }
  else {
    size_t v13 = 0;
  }
  v193 = v13;
  dispatch_retain(v12);
  long long v194 = 0u;
  long long v195 = 0u;
  dispatch_object_t v198 = v12;
  if (v13) {
    size_t v13 = _Block_copy(v13);
  }
  int v199 = v13;
  dispatch_retain(v12);
  dispatch_object_t object = v12;
  unint64_t v180 = v11;
  if (!v13)
  {
    v201 = 0;
    dispatch_retain(v12);
    goto LABEL_33;
  }
  uint64_t v14 = _Block_copy(v13);
  v201 = v14;
  dispatch_retain(v12);
  if (!v14)
  {
LABEL_33:
    dispatch_retain(v12);
    unint64_t v202 = 0;
    goto LABEL_34;
  }
  uint64_t v15 = _Block_copy(v14);
  dispatch_retain(v12);
  unint64_t v202 = 0;
  if (!v15)
  {
LABEL_34:
    dispatch_retain(v12);
    int64_t v175 = 0;
    char v20 = 1;
LABEL_35:
    dispatch_retain(v12);
    int v177 = 0;
    char v21 = 1;
LABEL_36:
    dispatch_retain(v12);
    uint64_t v17 = 0;
    char v22 = 1;
LABEL_37:
    dispatch_retain(v12);
    uint64_t v18 = 0;
    unint64_t v203 = (unint64_t)v12;
    char v23 = 1;
    goto LABEL_38;
  }
  uint64_t v16 = _Block_copy(v15);
  dispatch_retain(v12);
  int64_t v175 = v15;
  if (!v16)
  {
    char v20 = 0;
    goto LABEL_35;
  }
  uint64_t v17 = _Block_copy(v16);
  dispatch_retain(v12);
  int v177 = v16;
  if (!v17)
  {
    char v20 = 0;
    char v21 = 0;
    goto LABEL_36;
  }
  uint64_t v18 = _Block_copy(v17);
  dispatch_retain(v12);
  if (!v18)
  {
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    goto LABEL_37;
  }
  uint64_t v19 = _Block_copy(v18);
  dispatch_retain(v12);
  unint64_t v203 = (unint64_t)v12;
  if (v19)
  {
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    char v23 = 0;
    int v204 = _Block_copy(v19);
    dispatch_retain(v12);
    dispatch_release(v12);
    _Block_release(v19);
    goto LABEL_39;
  }
  char v20 = 0;
  char v21 = 0;
  char v22 = 0;
  char v23 = 0;
LABEL_38:
  int v204 = 0;
  dispatch_retain(v12);
  dispatch_release(v12);
LABEL_39:
  dispatch_release(v12);
  if ((v23 & 1) == 0) {
    _Block_release(v18);
  }
  dispatch_release(v12);
  if ((v22 & 1) == 0) {
    _Block_release(v17);
  }
  unint64_t v202 = (unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>)::stored_vtable;
  dispatch_release(v12);
  if ((v21 & 1) == 0) {
    _Block_release(v177);
  }
  dispatch_release(v12);
  if ((v20 & 1) == 0) {
    _Block_release(v175);
  }
  *(void *)long long buf = 0;
  memset(&buf[8], 170, 24);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)buf, (uint64_t *)&v202);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)&v202, (uint64_t *)&v195 + 1);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)&v195 + 8, (uint64_t *)buf);
  if (*(void *)buf)
  {
    if ((buf[0] & 1) == 0)
    {
      long long v24 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)buf & 0xFFFFFFFFFFFFFFFELL);
      if (v24) {
        v24(&buf[8], &buf[8], 2);
      }
    }
  }
  if (v202)
  {
    if ((v202 & 1) == 0)
    {
      char v25 = *(void (**)(uint64_t, _WORD *, unsigned int))(v202 & 0xFFFFFFFFFFFFFFFELL);
      if (v25) {
        v25((uint64_t)&v203, &v203, 2u);
      }
    }
    unint64_t v202 = 0;
  }
  dispatch_release(object);
  if (v201) {
    _Block_release(v201);
  }
  dispatch_release(v198);
  if (v199) {
    _Block_release(v199);
  }
  atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = operator new(0x18uLL);
  void *v26 = &unk_1F2106408;
  v26[1] = v9;
  void v26[2] = v180;
  atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v27 = operator new(0x18uLL);
  *uint64_t v27 = &unk_1F2106408;
  v27[1] = v9;
  void v27[2] = v180;
  atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&uint8_t buf[8] = v27;
  *(_DWORD *)long long buf = 2;
  uint64_t v28 = *((void *)&v194 + 1);
  if (*((void *)&v194 + 1) >= (unint64_t)v195)
  {
    uint64_t v31 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)&v194, (uint64_t)buf);
    char v30 = v180;
  }
  else
  {
    long long v29 = operator new(0x18uLL);
    void *v29 = &unk_1F2106408;
    v29[1] = v9;
    char v30 = v180;
    v29[2] = v180;
    atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(v28 + 8) = v29;
    *(_DWORD *)uint64_t v28 = 2;
    uint64_t v31 = v28 + 24;
  }
  *((void *)&v194 + 1) = v31;
  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)buf);
  (*(void (**)(void *))(*v26 + 8))(v26);
  std::__shared_weak_count::__release_weak(v30);
  long long v32 = *(uint64_t ***)(v182 + 112);
  *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v212 = v33;
  long long v213 = v33;
  long long v210 = v33;
  long long v211 = v33;
  long long v208 = v33;
  long long v209 = v33;
  long long v206 = v33;
  long long v207 = v33;
  *(_OWORD *)long long buf = v33;
  *(_OWORD *)&uint8_t buf[16] = v33;
  size_t v34 = (pthread_mutex_t *)v32[3];
  unint64_t v214 = 10;
  std::vector<std::csub_match> __p = buf;
  uint64_t v216 = 0;
  v217 = v34;
  pthread_mutex_lock(v34);
  unint64_t v202 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v203 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v35 = (atomic_uint *)v32[1];
  uint64_t v183 = (uint64_t ***)v32;
  if (!v35 || atomic_load_explicit(v35 + 2, memory_order_acquire) != 1)
  {
    uint64_t v39 = (uint64_t *)operator new(0x20uLL);
    xpc_object_t v40 = *v32;
    uint64_t v41 = **v32;
    v178 = v39;
    size_t v42 = operator new(0x40uLL);
    uint64_t v43 = v42;
    *size_t v42 = v42;
    v42[1] = v42;
    uint64_t v42[2] = 0;
    std::string::size_type v44 = *(void **)(v41 + 8);
    if (v44 != (void *)v41)
    {
      uint64_t v45 = 0;
      uint64_t v46 = v42;
      do
      {
        uint64_t v47 = operator new(0x20uLL);
        xpc_object_t v47[2] = v44[2];
        uint64_t v48 = v44[3];
        v47[3] = v48;
        if (v48)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 + 8), 1u, memory_order_relaxed);
          uint64_t v46 = (void *)*v43;
          uint64_t v45 = v43[2];
        }
        void *v47 = v46;
        v47[1] = v43;
        v46[1] = v47;
        *uint64_t v43 = v47;
        v43[2] = ++v45;
        std::string::size_type v44 = (void *)v44[1];
        uint64_t v46 = v47;
      }
      while (v44 != (void *)v41);
    }
    uint64_t v176 = v40;
    v43[3] = 0;
    unint64_t v49 = (void **)(v43 + 3);
    v43[4] = 0;
    size_t v50 = v43 + 4;
    void v43[5] = 0;
    *((unsigned char *)v43 + 48) = *(unsigned char *)(v41 + 48);
    v43[3] = v43 + 4;
    uint64_t v51 = *(void **)(v41 + 24);
    std::string::size_type v52 = (void *)(v41 + 32);
    if (v51 == (void *)(v41 + 32))
    {
LABEL_73:
      *((unsigned char *)v43 + 56) = *(unsigned char *)(v41 + 56);
      uint64_t v53 = *(void **)(v41 + 24);
      if (v53 != v52)
      {
        long long v54 = (void *)v43[3];
        uint64_t v55 = v43[1];
        do
        {
          v54[6] = v55;
          uint64_t v56 = v41;
          if (v53 != v52) {
            uint64_t v56 = v53[6];
          }
          xpc_object_t v57 = (void *)v53[1];
          uint64_t v58 = v57;
          uint64_t v59 = v53;
          if (v57)
          {
            do
            {
              uint64_t v60 = v58;
              uint64_t v58 = (void *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              uint64_t v60 = (void *)v59[2];
              BOOL v105 = *v60 == (void)v59;
              uint64_t v59 = v60;
            }
            while (!v105);
          }
          uint64_t v61 = v41;
          if (v60 != v52) {
            uint64_t v61 = v60[6];
          }
          while (v56 != v61)
          {
            uint64_t v56 = *(void *)(v56 + 8);
            uint64_t v55 = *(void *)(v55 + 8);
          }
          if (v57)
          {
            do
            {
              uint64_t v62 = v57;
              xpc_object_t v57 = (void *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              uint64_t v62 = (void *)v53[2];
              BOOL v105 = *v62 == (void)v53;
              uint64_t v53 = v62;
            }
            while (!v105);
          }
          uint64_t v63 = (void *)v54[1];
          if (v63)
          {
            do
            {
              uint64_t v64 = v63;
              uint64_t v63 = (void *)*v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              uint64_t v64 = (void *)v54[2];
              BOOL v105 = *v64 == (void)v54;
              long long v54 = v64;
            }
            while (!v105);
          }
          uint64_t v53 = v62;
          long long v54 = v64;
        }
        while (v62 != v52);
      }
      uint64_t *v178 = (uint64_t)v43;
      v178[1] = 0;
      dispatch_object_t v84 = operator new(0x18uLL);
      v84[1] = 0x100000001;
      void *v84 = &unk_1F2106250;
      v84[2] = v43;
      v178[1] = (uint64_t)v84;
      v178[2] = v176[2];
      uint64_t v85 = v176[3];
      v178[3] = v85;
      if (v85) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v85 + 8), 1u, memory_order_relaxed);
      }
      unint64_t v86 = (uint64_t *)operator new(0x18uLL);
      v86[1] = 0x100000001;
      uint64_t *v86 = (uint64_t)&unk_1F21061F0;
      v86[2] = (uint64_t)v178;
      long long v87 = (atomic_uint *)v32[1];
      *long long v32 = v178;
      v32[1] = v86;
      if (v87)
      {
        if (atomic_fetch_add(v87 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v87 + 16))(v87);
          if (atomic_fetch_add(v87 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v87 + 24))(v87);
          }
        }
      }
      int v38 = 0;
      uint64_t v36 = (uint64_t *)**v32;
LABEL_152:
      size_t v37 = (uint64_t *)v36[1];
      if (v36 == v37) {
        goto LABEL_252;
      }
      goto LABEL_153;
    }
    while (1)
    {
      int v65 = *((_DWORD *)v51 + 8);
      int v66 = (void *)*v50;
      size_t v67 = v43 + 4;
      if (*v49 != v50)
      {
        std::string v68 = (void *)*v50;
        uint64_t v69 = v43 + 4;
        if (v66)
        {
          do
          {
            size_t v67 = v68;
            std::string v68 = (void *)v68[1];
          }
          while (v68);
        }
        else
        {
          do
          {
            size_t v67 = (void *)v69[2];
            BOOL v105 = *v67 == (void)v69;
            uint64_t v69 = v67;
          }
          while (v105);
        }
        int v70 = *((_DWORD *)v51 + 10);
        int v71 = *((_DWORD *)v67 + 8);
        if (v71 == v65)
        {
          if (v65 != 1) {
            goto LABEL_118;
          }
          if (*((_DWORD *)v67 + 10) >= v70)
          {
            xpc_object_t v72 = (void *)*v50;
            xpc_object_t v73 = v43 + 4;
            unint64_t v74 = v43 + 4;
            if (v66) {
              goto LABEL_122;
            }
LABEL_129:
            unint64_t v78 = operator new(0x38uLL);
            long long v79 = *((_OWORD *)v51 + 2);
            v78[6] = v51[6];
            *((_OWORD *)v78 + 2) = v79;
            void *v78 = 0;
            v78[1] = 0;
            v78[2] = v74;
            *xpc_object_t v73 = v78;
            dispatch_object_t v80 = (void *)**v49;
            if (v80)
            {
              *unint64_t v49 = v80;
              unint64_t v78 = (void *)*v73;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v43[4], v78);
            ++v43[5];
            goto LABEL_132;
          }
        }
        else if (v71 >= v65)
        {
LABEL_118:
          xpc_object_t v73 = v43 + 4;
          unint64_t v74 = v43 + 4;
          if (!v66) {
            goto LABEL_129;
          }
          xpc_object_t v72 = (void *)*v50;
          if (v65 != 1)
          {
            int v75 = *((_DWORD *)v66 + 8);
            unint64_t v74 = (void *)*v50;
            while (v65 != v75)
            {
              if (v65 < v75)
              {
                uint64_t v83 = *v74;
                xpc_object_t v73 = v74;
                if (!*v74) {
                  goto LABEL_129;
                }
              }
              else
              {
                if (v75 >= v65) {
                  goto LABEL_132;
                }
                uint64_t v83 = v74[1];
                if (!v83) {
                  goto LABEL_128;
                }
              }
              int v75 = *(_DWORD *)(v83 + 32);
              unint64_t v74 = (void *)v83;
            }
            goto LABEL_132;
          }
          while (1)
          {
LABEL_122:
            unint64_t v74 = v72;
            int v76 = *((_DWORD *)v72 + 8);
            if (v76 == 1)
            {
              int v77 = *((_DWORD *)v72 + 10);
              if (v77 > v70) {
                goto LABEL_121;
              }
              if (v77 >= v70) {
                goto LABEL_132;
              }
            }
            else if (v76 > 1)
            {
LABEL_121:
              xpc_object_t v72 = (void *)*v72;
              xpc_object_t v73 = v74;
              if (!*v74) {
                goto LABEL_129;
              }
              continue;
            }
            xpc_object_t v72 = (void *)v72[1];
            if (!v72)
            {
LABEL_128:
              xpc_object_t v73 = v74 + 1;
              goto LABEL_129;
            }
          }
        }
      }
      if (v66) {
        unint64_t v74 = v67;
      }
      else {
        unint64_t v74 = v43 + 4;
      }
      if (v66) {
        xpc_object_t v73 = v67 + 1;
      }
      else {
        xpc_object_t v73 = v43 + 4;
      }
      if (!*v73) {
        goto LABEL_129;
      }
LABEL_132:
      xpc_object_t v81 = (void *)v51[1];
      if (v81)
      {
        do
        {
          unint64_t v82 = v81;
          xpc_object_t v81 = (void *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          unint64_t v82 = (void *)v51[2];
          BOOL v105 = *v82 == (void)v51;
          uint64_t v51 = v82;
        }
        while (!v105);
      }
      uint64_t v51 = v82;
      if (v82 == v52) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v36 = (uint64_t *)**v32;
  size_t v37 = v32[2];
  int v38 = 2;
  if (v37 == v36) {
    goto LABEL_152;
  }
LABEL_153:
  int v88 = 0;
  unsigned int v89 = v38 - 1;
  do
  {
    uint64_t v92 = v37[2];
    uint64_t v93 = *(uint64_t **)(v92 + 32);
    if (v93)
    {
      for (uint64_t i = *v93; i != v93[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
            goto LABEL_170;
          }
        }
        else
        {
          uint64_t v95 = *(void *)(i + 16);
          if (!v95 || !atomic_load_explicit((atomic_uint *volatile)(v95 + 8), memory_order_acquire))
          {
LABEL_170:
            if (*(unsigned char *)(v92 + 24))
            {
              *(unsigned char *)(v92 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v92, buf);
            }
            break;
          }
        }
      }
    }
    uint64_t v90 = v37[2];
    if (*(unsigned char *)(v90 + 24))
    {
      uint64_t v36 = (uint64_t *)v37[1];
      goto LABEL_156;
    }
    uint64_t v96 = **v183;
    xpc_object_t v98 = (uint64_t **)(v96 + 4);
    uint64_t v97 = v96[4];
    if (!v97)
    {
      if ((uint64_t *)v96[10] != v37) {
        goto LABEL_247;
      }
      int v120 = (uint64_t *)v37[1];
      int v122 = (uint64_t **)(v96 + 4);
      long long v101 = v96 + 4;
      if (v120 != v96) {
        goto LABEL_243;
      }
LABEL_225:
      unint64_t v125 = (uint64_t *)v101[1];
      char v126 = v101;
      if (v125)
      {
        do
        {
          BOOL v127 = v125;
          unint64_t v125 = (uint64_t *)*v125;
        }
        while (v125);
      }
      else
      {
        do
        {
          BOOL v127 = (uint64_t *)v126[2];
          BOOL v105 = *v127 == (void)v126;
          char v126 = v127;
        }
        while (!v105);
      }
      if ((uint64_t *)v96[3] == v101) {
        v96[3] = (uint64_t)v127;
      }
      --v96[5];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v97, v101);
      operator delete(v101);
      goto LABEL_247;
    }
    int v99 = *(_DWORD *)(v90 + 64);
    int v100 = *(_DWORD *)(v90 + 72);
    long long v101 = v96 + 4;
    uint64_t v102 = v96[4];
    if (v99 == 1)
    {
      long long v101 = v96 + 4;
      uint64_t v103 = v96[4];
      do
      {
        while (1)
        {
          int v109 = *(_DWORD *)(v103 + 32);
          BOOL v110 = v109 < 1;
          if (v109 == 1) {
            BOOL v110 = *(_DWORD *)(v103 + 40) < v100;
          }
          if (!v110) {
            break;
          }
          uint64_t v103 = *(void *)(v103 + 8);
          if (!v103) {
            goto LABEL_191;
          }
        }
        long long v101 = (uint64_t *)v103;
        uint64_t v103 = *(void *)v103;
      }
      while (v103);
    }
    else
    {
      do
      {
        int v104 = *(_DWORD *)(v102 + 32);
        BOOL v105 = v104 == v99;
        BOOL v106 = v104 < v99;
        if (v104 >= v99) {
          uint64_t v107 = (uint64_t *)v102;
        }
        else {
          uint64_t v107 = (uint64_t *)(v102 + 8);
        }
        if (v106) {
          std::vector<std::string>::pointer v108 = v101;
        }
        else {
          std::vector<std::string>::pointer v108 = (uint64_t *)v102;
        }
        if (v105)
        {
          uint64_t v107 = (uint64_t *)v102;
          long long v101 = (uint64_t *)v102;
        }
        else
        {
          long long v101 = v108;
        }
        uint64_t v102 = *v107;
      }
      while (*v107);
    }
LABEL_191:
    if ((uint64_t *)v101[6] != v37) {
      goto LABEL_247;
    }
    uint64_t v111 = (uint64_t **)(v96 + 4);
    int v112 = (uint64_t **)v96[4];
    if (v99 == 1)
    {
      while (1)
      {
        int v118 = *((_DWORD *)v112 + 8);
        if (v118 == 1)
        {
          if (v100 < *((_DWORD *)v112 + 10)) {
            goto LABEL_208;
          }
LABEL_203:
          int v112 = (uint64_t **)v112[1];
          if (!v112) {
            goto LABEL_209;
          }
        }
        else
        {
          if (v118 <= 1) {
            goto LABEL_203;
          }
LABEL_208:
          uint64_t v111 = v112;
          int v112 = (uint64_t **)*v112;
          if (!v112) {
            goto LABEL_209;
          }
        }
      }
    }
    do
    {
      int v113 = *((_DWORD *)v112 + 8);
      std::string::size_type v114 = (uint64_t ***)(v112 + 1);
      BOOL v115 = v99 == v113;
      BOOL v116 = v99 < v113;
      if (v99 >= v113) {
        __int16 v117 = (uint64_t ***)(v112 + 1);
      }
      else {
        __int16 v117 = (uint64_t ***)v112;
      }
      if (!v116) {
        int v112 = v111;
      }
      if (v115) {
        __int16 v117 = v114;
      }
      else {
        uint64_t v111 = v112;
      }
      int v112 = *v117;
    }
    while (*v117);
LABEL_209:
    __int16 v119 = **v183;
    if (v111 != v98) {
      __int16 v119 = v111[6];
    }
    int v120 = (uint64_t *)v37[1];
    if (v120 == v119) {
      goto LABEL_225;
    }
    if (v99 == 1)
    {
      while (1)
      {
        while (1)
        {
          int v122 = (uint64_t **)v97;
          int v123 = *(_DWORD *)(v97 + 32);
          if (v123 == 1) {
            break;
          }
          if (v123 <= 1) {
            goto LABEL_221;
          }
LABEL_215:
          uint64_t v97 = *(void *)v97;
          if (!*v122)
          {
            xpc_object_t v98 = v122;
            goto LABEL_243;
          }
        }
        int v124 = *(_DWORD *)(v97 + 40);
        if (v124 > v100) {
          goto LABEL_215;
        }
        if (v124 >= v100)
        {
          *(void *)(v97 + 48) = v120;
          goto LABEL_247;
        }
LABEL_221:
        uint64_t v97 = *(void *)(v97 + 8);
        if (!v97)
        {
          xpc_object_t v98 = v122 + 1;
          goto LABEL_243;
        }
      }
    }
    int v121 = *(_DWORD *)(v97 + 32);
    if (v99 == v121) {
      goto LABEL_246;
    }
    while (v99 >= v121)
    {
      if (v121 >= v99) {
        goto LABEL_246;
      }
      uint64_t v128 = *(void *)(v97 + 8);
      if (!v128)
      {
        xpc_object_t v98 = (uint64_t **)(v97 + 8);
        goto LABEL_242;
      }
LABEL_234:
      int v121 = *(_DWORD *)(v128 + 32);
      uint64_t v97 = v128;
      if (v99 == v121)
      {
        *(void *)(v128 + 48) = v120;
        goto LABEL_247;
      }
    }
    uint64_t v128 = *(void *)v97;
    if (*(void *)v97) {
      goto LABEL_234;
    }
    xpc_object_t v98 = (uint64_t **)v97;
LABEL_242:
    int v122 = (uint64_t **)v97;
LABEL_243:
    uint64_t v97 = (uint64_t)operator new(0x38uLL);
    uint64_t v129 = *(void *)(v90 + 64);
    *(_DWORD *)(v97 + 40) = *(_DWORD *)(v90 + 72);
    *(void *)(v97 + 32) = v129;
    *(void *)(v97 + 48) = 0;
    *(void *)uint64_t v97 = 0;
    *(void *)(v97 + 8) = 0;
    *(void *)(v97 + 16) = v122;
    std::string *v98 = (uint64_t *)v97;
    uint64_t v130 = *(void *)v96[3];
    BOOL v131 = (uint64_t *)v97;
    if (v130)
    {
      v96[3] = v130;
      BOOL v131 = *v98;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v96[4], v131);
    ++v96[5];
LABEL_246:
    *(void *)(v97 + 48) = v120;
LABEL_247:
    uint64_t v132 = *v37;
    uint64_t v36 = (uint64_t *)v37[1];
    *(void *)(v132 + 8) = v36;
    *(void *)v37[1] = v132;
    --v96[2];
    int v133 = (atomic_uint *)v37[3];
    if (v133)
    {
      if (atomic_fetch_add(v133 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v133 + 16))(v133);
        if (atomic_fetch_add(v133 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v133 + 24))(v133);
        }
      }
    }
    operator delete(v37);
LABEL_156:
    BOOL v91 = v36 != **v183 && v89 >= ++v88;
    size_t v37 = v36;
  }
  while (v91);
LABEL_252:
  void v183[2] = (uint64_t **)v36;
  uint64_t v134 = operator new(0x50uLL);
  v134[1] = 0;
  v134[2] = 0;
  *((unsigned char *)v134 + 24) = 1;
  *((_DWORD *)v134 + 7) = 1;
  *uint64_t v134 = &unk_1F21062B0;
  int v135 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v135, (uint64_t *)&v194);
  v135[3] = 0;
  uint64_t v136 = *((void *)&v195 + 1);
  if (*((void *)&v195 + 1))
  {
    v135[3] = *((void *)&v195 + 1);
    if (v136)
    {
      *((_OWORD *)v135 + 2) = v196;
      v135[6] = v197;
    }
    else
    {
      (*(void (**)(long long *, void *, void))(v136 & 0xFFFFFFFFFFFFFFFELL))(&v196, v135 + 4, 0);
    }
  }
  v134[4] = v135;
  v134[5] = 0;
  uint64_t v137 = operator new(0x18uLL);
  v137[1] = 0x100000001;
  *uint64_t v137 = &unk_1F2106308;
  CFArrayRef v137[2] = v135;
  v134[5] = v137;
  v134[6] = v183[3];
  xpc_object_t v138 = (atomic_uint *)v183[4];
  v134[7] = v138;
  if (v138) {
    atomic_fetch_add_explicit(v138 + 2, 1u, memory_order_relaxed);
  }
  *((_DWORD *)v134 + 16) = 0;
  *((unsigned char *)v134 + 68) = 0;
  unint64_t v202 = (unint64_t)v134;
  int v139 = operator new(0x18uLL);
  *((void *)v139 + 1) = 0x100000001;
  *(void *)int v139 = &unk_1F2106368;
  *((void *)v139 + 2) = v134;
  unint64_t v203 = (unint64_t)v139;
  xpc_object_t v140 = **v183;
  uint64_t v141 = operator new(0x20uLL);
  xpc_object_t v142 = v140 + 4;
  CFArrayRef v141[2] = v134;
  v141[3] = v139;
  atomic_fetch_add_explicit((atomic_uint *volatile)v139 + 2, 1u, memory_order_relaxed);
  uint64_t v143 = *v140;
  *(void *)(v143 + 8) = v141;
  *uint64_t v141 = v143;
  *xpc_object_t v140 = (uint64_t)v141;
  v141[1] = v140;
  ++v140[2];
  CFArrayRef v144 = (uint64_t *)v140[4];
  if (v144)
  {
    int v145 = v140 + 4;
    uint64_t v146 = v140[4];
    do
    {
      int v147 = *(_DWORD *)(v146 + 32);
      BOOL v148 = v147 == 2;
      BOOL v149 = v147 < 2;
      if (v147 >= 2) {
        CFMutableDictionaryRef v150 = (uint64_t *)v146;
      }
      else {
        CFMutableDictionaryRef v150 = (uint64_t *)(v146 + 8);
      }
      if (!v149) {
        int v145 = (uint64_t *)v146;
      }
      if (v148)
      {
        CFMutableDictionaryRef v150 = (uint64_t *)v146;
        int v145 = (uint64_t *)v146;
      }
      uint64_t v146 = *v150;
    }
    while (*v150);
    if (v145 == v142 || *((_DWORD *)v145 + 8) != 2)
    {
      int v151 = *((_DWORD *)v144 + 8);
      while (v151 != 2)
      {
        if (v151 < 3)
        {
          BOOL v152 = (uint64_t *)v144[1];
          if (!v152)
          {
            xpc_object_t v142 = v144 + 1;
            goto LABEL_279;
          }
        }
        else
        {
          BOOL v152 = (uint64_t *)*v144;
          xpc_object_t v142 = v144;
          if (!*v144) {
            goto LABEL_279;
          }
        }
        int v151 = *((_DWORD *)v152 + 8);
        CFArrayRef v144 = v152;
      }
    }
    *((_DWORD *)v134 + 16) = 2;
    *(void *)((char *)v134 + 68) = 0xAAAAAAAAAAAAAA00;
LABEL_282:
    atomic_fetch_add_explicit((atomic_uint *volatile)v139 + 3, 1u, memory_order_relaxed);
    *(void *)&long long v190 = v134;
    *((void *)&v190 + 1) = v139;
    atomic_fetch_add_explicit((atomic_uint *volatile)v139 + 3, 1u, memory_order_relaxed);
    if (atomic_fetch_add((atomic_uint *volatile)v139 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(void *))(*(void *)v139 + 24))(v139);
    }
    uint64_t v155 = (atomic_uint *)v203;
    if (v203) {
      goto LABEL_285;
    }
  }
  else
  {
    CFArrayRef v144 = v140 + 4;
LABEL_279:
    CFMutableDictionaryRef v153 = operator new(0x38uLL);
    v153[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v153 + 10) = -1431655766;
    v153[6] = v141;
    *CFMutableDictionaryRef v153 = 0;
    v153[1] = 0;
    v153[2] = v144;
    *xpc_object_t v142 = (uint64_t)v153;
    uint64_t v154 = *(void *)v140[3];
    if (v154)
    {
      v140[3] = v154;
      CFMutableDictionaryRef v153 = (void *)*v142;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v140[4], v153);
    ++v140[5];
    uint64_t v134 = (void *)v202;
    int v139 = (void *)v203;
    *(_DWORD *)(v202 + 64) = 2;
    *(void *)((char *)v134 + 68) = 0xAAAAAAAAAAAAAA00;
    if (v139) {
      goto LABEL_282;
    }
    long long v190 = (unint64_t)v134;
    uint64_t v155 = (atomic_uint *)v203;
    if (v203)
    {
LABEL_285:
      if (atomic_fetch_add(v155 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v155 + 16))(v155);
        if (atomic_fetch_add(v155 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v155 + 24))(v155);
        }
      }
    }
  }
  pthread_mutex_unlock(v217);
  xpc_object_t v156 = v179;
  int v157 = (char *)__p;
  if (__p)
  {
    if (v216 - 1 >= 0)
    {
      uint64_t v158 = (char *)__p + 16 * v216;
      do
      {
        CFMutableDictionaryRef v159 = (atomic_uint *)*((void *)v158 - 1);
        if (v159)
        {
          if (atomic_fetch_add(v159 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v159 + 16))(v159);
            if (atomic_fetch_add(v159 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v159 + 24))(v159);
            }
          }
        }
        v158 -= 16;
      }
      while (v158 > v157);
    }
    xpc_object_t v156 = v179;
    if (v214 >= 0xB) {
      operator delete(__p);
    }
  }
  CFMutableDictionaryRef v160 = v181;
  if (*((void *)&v195 + 1))
  {
    if ((BYTE8(v195) & 1) == 0)
    {
      uint64_t v161 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v195 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v161) {
        v161(&v196, &v196, 2);
      }
    }
    *((void *)&v195 + 1) = 0;
  }
  uint64_t v162 = v194;
  if ((void)v194)
  {
    uint64_t v163 = *((void *)&v194 + 1);
    CFMutableDictionaryRef v164 = (void *)v194;
    if (*((void *)&v194 + 1) != (void)v194)
    {
      do
      {
        v163 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v163);
      }
      while (v163 != v162);
      CFMutableDictionaryRef v164 = (void *)v194;
    }
    *((void *)&v194 + 1) = v162;
    operator delete(v164);
    CFMutableDictionaryRef v160 = v181;
  }
  dispatch_release(v192);
  if (v193) {
    _Block_release(v193);
  }
  if (atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v156) {
      goto LABEL_316;
    }
LABEL_315:
    _Block_release(v156);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
    std::__shared_weak_count::__release_weak(v180);
    if (v156) {
      goto LABEL_315;
    }
  }
LABEL_316:
  int v165 = operator new(0x20uLL);
  v165[1] = v190;
  long long v190 = 0uLL;
  *((void *)v165 + 1) = v160 + 27;
  uint64_t v166 = v160[27];
  *(void *)int v165 = v166;
  *(void *)(v166 + 8) = v165;
  v160[27] = v165;
  ++v160[29];
  v167 = v189;
  if (v189 && !atomic_fetch_add(&v189->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
    std::__shared_weak_count::__release_weak(v167);
  }
  if (v187) {
    std::__shared_weak_count::__release_weak(v187);
  }
  if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
    std::__shared_weak_count::__release_weak(v185);
  }
  size_t v168 = (const void *)*MEMORY[0x1E4F4F910];
  size_t v169 = strlen((const char *)*MEMORY[0x1E4F4F910]);
  if (v169 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v170 = v169;
  if (v169 >= 0x17)
  {
    uint64_t v172 = (v169 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v169 | 7) != 0x17) {
      uint64_t v172 = v169 | 7;
    }
    uint64_t v173 = v172 + 1;
    uint64_t v171 = operator new(v172 + 1);
    *(void *)&uint8_t buf[8] = v170;
    *(void *)&uint8_t buf[16] = v173 | 0x8000000000000000;
    *(void *)long long buf = v171;
    goto LABEL_331;
  }
  uint8_t buf[23] = v169;
  uint64_t v171 = buf;
  if (v169) {
LABEL_331:
  }
    memmove(v171, v168, v170);
  v171[v170] = 0;
  support::fs::createDir(buf, 0x1EDu, 1);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN12TraceManager4initEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_4;
  void block[4] = v181;
  dispatch_async(global_queue, block);
}

void sub_1C5A3BF64(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C5A3BF70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3BF7C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}